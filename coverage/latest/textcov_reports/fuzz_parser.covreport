_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  1.51M|        {
  169|  1.51M|            PHI_ASSERT(index < 3u);
  170|       |
  171|  1.51M|            switch (index.unsafe())
  172|  1.51M|            {
  173|   687k|                case 0:
  ------------------
  |  Branch (173:17): [True: 687k, False: 822k]
  ------------------
  174|   687k|                    return m_Arg1Type;
  175|       |
  176|   420k|                case 1:
  ------------------
  |  Branch (176:17): [True: 420k, False: 1.08M]
  ------------------
  177|   420k|                    return m_Arg2Type;
  178|       |
  179|   401k|                case 2:
  ------------------
  |  Branch (179:17): [True: 401k, False: 1.10M]
  ------------------
  180|   401k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 1.51M]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  1.51M|#endif
  187|  1.51M|            }
  188|  1.51M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   382k|        {
  195|   382k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   382k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 371k, False: 11.3k]
  ------------------
  199|   371k|            {
  200|   371k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   371k|            }
  202|   382k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 219k, False: 163k]
  ------------------
  203|   219k|            {
  204|   219k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   219k|            }
  206|   382k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 123k, False: 258k]
  ------------------
  207|   123k|            {
  208|   123k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   123k|            }
  210|       |
  211|   382k|            return number_of_argument_required;
  212|   382k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   382k|        {
  221|   382k|            return m_Executor;
  222|   382k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   294k|    {
   38|   294k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   294k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   294k|                                         static_cast<underlying_t>(rhs));
   42|   294k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   294k|    {
   55|   294k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   294k|        return static_cast<underlying_t>(type & test) != 0;
   58|   294k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  1.19M|    {
   31|  1.19M|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 18.2k, False: 1.18M]
  ------------------
   32|  18.2k|        {
   33|  18.2k|            return true;
   34|  18.2k|        }
   35|       |
   36|  1.18M|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 4.87k, False: 1.17M]
  ------------------
   37|  4.87k|        {
   38|  4.87k|            return true;
   39|  4.87k|        }
   40|       |
   41|  1.17M|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 450k, False: 725k]
  ------------------
   42|   450k|        {
   43|   450k|            return true;
   44|   450k|        }
   45|       |
   46|   725k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 3.94k, False: 721k]
  ------------------
   47|  3.94k|        {
   48|  3.94k|            return true;
   49|  3.94k|        }
   50|       |
   51|   721k|        return false;
   52|   725k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|   721k|    {
   56|   721k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 721k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|   721k|        const char first_char = token.at(0u);
   62|       |
   63|   721k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 148k, False: 572k]
  ------------------
   64|   148k|        {
   65|   148k|            return phi::is_alpha(first_char);
   66|   148k|        }
   67|       |
   68|   572k|        phi::boolean just_under_scores = (first_char == '_');
   69|   572k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 88.5k, False: 483k]
  |  Branch (69:13): [True: 71.2k, False: 501k]
  |  Branch (69:43): [True: 71.2k, False: 17.3k]
  ------------------
   70|  71.2k|        {
   71|  71.2k|            return false;
   72|  71.2k|        }
   73|       |
   74|  1.88M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 1.57M, False: 313k]
  ------------------
   75|  1.57M|        {
   76|  1.57M|            const char c{token.at(index)};
   77|       |
   78|  1.57M|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 1.36M, False: 206k]
  ------------------
   79|  1.36M|            {
   80|  1.36M|                just_under_scores = false;
   81|  1.36M|            }
   82|   206k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 18.8k, False: 187k]
  ------------------
   83|  18.8k|            {
   84|  18.8k|                continue;
   85|  18.8k|            }
   86|   187k|            else
   87|   187k|            {
   88|   187k|                return false;
   89|   187k|            }
   90|  1.57M|        }
   91|       |
   92|   313k|        return !just_under_scores;
   93|   501k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|  3.41M|    {
  100|  3.41M|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 3.41M]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|  3.41M|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 553k, False: 2.86M]
  ------------------
  106|   553k|        {
  107|   553k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 83.5k, False: 470k]
  ------------------
  108|  83.5k|            {
  109|  83.5k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  83.5k|            }
  111|       |
  112|   470k|            return {};
  113|   553k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|  2.86M|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 32.4k, False: 2.83M]
  ------------------
  117|  32.4k|        {
  118|  32.4k|            return {};
  119|  32.4k|        }
  120|       |
  121|  2.83M|        std::int32_t number{0};
  122|  2.83M|        phi::boolean is_negative{false};
  123|  2.83M|        phi::boolean starts_with_zero{false};
  124|  2.83M|        phi::boolean parsing_binary{false};
  125|  2.83M|        phi::boolean parsing_octal{false};
  126|  2.83M|        phi::boolean parsing_hexadecimal{false};
  127|  2.83M|        phi::boolean parsed_something{false};
  128|  2.83M|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|  3.18M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 3.12M, False: 51.4k]
  ------------------
  133|  3.12M|        {
  134|  3.12M|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|  3.12M|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 2.83M, False: 297k]
  ------------------
  138|  2.83M|            {
  139|  2.83M|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 5.75k, False: 2.82M]
  ------------------
  140|  5.75k|                {
  141|  5.75k|                    continue;
  142|  5.75k|                }
  143|       |
  144|  2.82M|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 22.8k, False: 2.80M]
  ------------------
  145|  22.8k|                {
  146|  22.8k|                    is_negative = true;
  147|  22.8k|                    continue;
  148|  22.8k|                }
  149|       |
  150|  2.80M|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 46.0k, False: 2.75M]
  ------------------
  151|  46.0k|                {
  152|  46.0k|                    starts_with_zero = true;
  153|  46.0k|                    continue;
  154|  46.0k|                }
  155|       |
  156|  2.75M|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 5.71k, False: 2.75M]
  ------------------
  157|  5.71k|                {
  158|  5.71k|                    return {};
  159|  5.71k|                }
  160|  2.75M|            }
  161|       |
  162|       |            // Second character
  163|  3.04M|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 125k, False: 2.92M]
  ------------------
  164|   125k|            {
  165|   125k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 46.0k, False: 79.8k]
  ------------------
  166|  46.0k|                {
  167|       |                    // Binary
  168|  46.0k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 5.87k, False: 40.1k]
  |  Branch (168:37): [True: 1.40k, False: 38.7k]
  ------------------
  169|  7.27k|                    {
  170|  7.27k|                        parsing_binary = true;
  171|  7.27k|                        continue;
  172|  7.27k|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  38.7k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 15.9k, False: 22.8k]
  |  Branch (175:37): [True: 3.90k, False: 18.9k]
  ------------------
  176|  19.8k|                    {
  177|  19.8k|                        parsing_hexadecimal = true;
  178|  19.8k|                        continue;
  179|  19.8k|                    }
  180|       |
  181|       |                    // Octal
  182|  18.9k|                    parsing_octal = true;
  183|  18.9k|                }
  184|   125k|            }
  185|       |
  186|       |            // Handle seperators
  187|  3.02M|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 8.75k, False: 3.01M]
  ------------------
  188|  8.75k|            {
  189|  8.75k|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 4.06k, False: 4.68k]
  ------------------
  190|  4.06k|                {
  191|  4.06k|                    return {};
  192|  4.06k|                }
  193|       |
  194|  4.68k|                parsed_separator = true;
  195|  4.68k|                continue;
  196|  8.75k|            }
  197|       |
  198|       |            // Check for over/underflow
  199|  3.01M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 83.1k, False: 2.92M]
  |  Branch (199:32): [True: 3.91k, False: 79.2k]
  ------------------
  200|  3.91k|            {
  201|       |                // Would underflow
  202|  3.91k|                return {};
  203|  3.91k|            }
  204|  3.00M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 2.92M, False: 79.2k]
  |  Branch (204:17): [True: 9.52k, False: 2.99M]
  |  Branch (204:33): [True: 9.52k, False: 2.91M]
  ------------------
  205|  9.52k|            {
  206|       |                // Would overflow
  207|  9.52k|                return {};
  208|  9.52k|            }
  209|       |
  210|  2.99M|            parsed_separator = false;
  211|  2.99M|            parsed_something = true;
  212|       |
  213|  2.99M|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 8.81k, False: 2.99M]
  ------------------
  214|  8.81k|            {
  215|  8.81k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 2.45k, False: 6.35k]
  ------------------
  216|  2.45k|                {
  217|  2.45k|                    return {};
  218|  2.45k|                }
  219|       |
  220|  6.35k|                number <<= 1;
  221|  6.35k|                number |= (c - '0');
  222|  6.35k|            }
  223|  2.99M|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 19.4k, False: 2.97M]
  ------------------
  224|  19.4k|            {
  225|  19.4k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 13.0k, False: 6.42k]
  ------------------
  226|  13.0k|                {
  227|  13.0k|                    return {};
  228|  13.0k|                }
  229|       |
  230|  6.42k|                number <<= 3;
  231|  6.42k|                number |= (c - '0');
  232|  6.42k|            }
  233|  2.97M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 29.7k, False: 2.94M]
  ------------------
  234|  29.7k|            {
  235|  29.7k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 15.9k, False: 13.7k]
  ------------------
  236|  15.9k|                {
  237|  15.9k|                    return {};
  238|  15.9k|                }
  239|       |
  240|  13.7k|                number <<= 4;
  241|  13.7k|                number |= phi::hex_digit_value(c).unsafe();
  242|  13.7k|            }
  243|  2.94M|            else
  244|  2.94M|            {
  245|  2.94M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 2.71M, False: 222k]
  ------------------
  246|  2.71M|                {
  247|  2.71M|                    return {};
  248|  2.71M|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|   222k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 72.3k, False: 150k]
  |  Branch (251:36): [True: 7.23k, False: 65.1k]
  ------------------
  252|  7.23k|                {
  253|  7.23k|                    return {};
  254|  7.23k|                }
  255|       |
  256|   215k|                number *= 10;
  257|   215k|                number += (c - '0');
  258|   215k|            }
  259|  2.99M|        }
  260|       |
  261|  51.4k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 48.5k, False: 2.82k]
  ------------------
  262|  48.5k|        {
  263|       |            // Check for over/underflow
  264|  48.5k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 9.68k, False: 38.8k]
  |  Branch (264:32): [True: 8.07k, False: 1.61k]
  ------------------
  265|  8.07k|            {
  266|       |                // Would underflow
  267|  8.07k|                return {};
  268|  8.07k|            }
  269|  40.5k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 38.8k, False: 1.61k]
  |  Branch (269:17): [True: 4.27k, False: 36.2k]
  |  Branch (269:33): [True: 4.27k, False: 34.6k]
  ------------------
  270|  4.27k|            {
  271|       |                // Would overflow
  272|  4.27k|                return {};
  273|  4.27k|            }
  274|       |
  275|  36.2k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 1.61k, False: 34.6k]
  ------------------
  276|  1.61k|            {
  277|  1.61k|                return static_cast<std::int16_t>(-number);
  278|  1.61k|            }
  279|       |
  280|  34.6k|            return static_cast<std::int16_t>(number);
  281|  36.2k|        }
  282|       |
  283|  2.82k|        return {};
  284|  51.4k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   197k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   197k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 2.91M, False: 0]
  ------------------
   64|  2.91M|            {
   65|  2.91M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 197k, False: 2.72M]
  ------------------
   66|   197k|                {
   67|   197k|                    return &token;
   68|   197k|                }
   69|  2.91M|            }
   70|       |
   71|      0|            return nullptr;
   72|   197k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|   851k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   851k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   851k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  3.45M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  3.45M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  3.45M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  1.88M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.88M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.88M|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   382k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|   107k|    {
   25|   107k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|   107k|        switch (argument_number.unsafe())
   28|   107k|        {
   29|  76.9k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 76.9k, False: 30.6k]
  ------------------
   30|  76.9k|                m_Arg1 = argument;
   31|  76.9k|                break;
   32|  19.2k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 19.2k, False: 88.3k]
  ------------------
   33|  19.2k|                m_Arg2 = argument;
   34|  19.2k|                break;
   35|  11.4k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 11.4k, False: 96.2k]
  ------------------
   36|  11.4k|                m_Arg3 = argument;
   37|  11.4k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 107k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|   107k|#endif
   42|   107k|        }
   43|   107k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  1.25M|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  18.7k|    {
  171|  18.7k|        InstructionArgument arg;
  172|  18.7k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  18.7k|        arg.register_int.register_id = id;
  174|  18.7k|        return arg;
  175|  18.7k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  31.5k|    {
  179|  31.5k|        InstructionArgument arg;
  180|  31.5k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  31.5k|        arg.register_float.register_id = id;
  182|  31.5k|        return arg;
  183|  31.5k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  7.79k|    {
  187|  7.79k|        InstructionArgument arg;
  188|  7.79k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  7.79k|        arg.immediate_value.signed_value = value;
  190|  7.79k|        return arg;
  191|  7.79k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|  10.3k|    {
  196|  10.3k|        InstructionArgument arg;
  197|  10.3k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|  10.3k|        arg.address_displacement.register_id  = id;
  199|  10.3k|        arg.address_displacement.displacement = displacement;
  200|  10.3k|        return arg;
  201|  10.3k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  204|  39.2k|    {
  205|  39.2k|        InstructionArgument arg;
  206|  39.2k|        arg.m_Type           = ArgumentType::Label;
  207|  39.2k|        arg.label.label_name = label_name;
  208|  39.2k|        return arg;
  209|  39.2k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   382k|    {
  453|   382k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   382k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|  4.30M|    {
   24|  4.30M|        switch (token.length().unsafe())
   25|  4.30M|        {
   26|       |            // 1 character OpCodes
   27|   608k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 608k, False: 3.70M]
  ------------------
   28|   608k|                const char c1 = token[0u];
   29|       |
   30|   608k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 160k, False: 448k]
  ------------------
   31|   160k|                {
   32|   160k|                    return OpCode::J;
   33|   160k|                }
   34|   448k|                break;
   35|   608k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|   667k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 667k, False: 3.64M]
  ------------------
   39|   667k|                const char c1 = token[0u];
   40|   667k|                const char c2 = token[1u];
   41|       |
   42|   667k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 420k, False: 247k]
  ------------------
   43|   667k|                {
   44|  12.5k|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 12.5k, False: 655k]
  ------------------
   45|  19.3k|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 6.79k, False: 661k]
  ------------------
   46|  19.3k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 8.49k, False: 10.8k]
  ------------------
   47|  8.49k|                        {
   48|  8.49k|                            return OpCode::JR;
   49|  8.49k|                        }
   50|  10.8k|                        break;
   51|       |
   52|  24.1k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 24.1k, False: 643k]
  ------------------
   53|  48.9k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 24.8k, False: 643k]
  ------------------
   54|  48.9k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 20.8k, False: 28.1k]
  ------------------
   55|  48.9k|                        {
   56|  7.38k|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 7.38k, False: 41.5k]
  ------------------
   57|  12.0k|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 4.68k, False: 44.2k]
  ------------------
   58|  12.0k|                                return OpCode::LB;
   59|  1.77k|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 1.77k, False: 47.2k]
  ------------------
   60|  2.14k|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 368, False: 48.6k]
  ------------------
   61|  2.14k|                                return OpCode::LD;
   62|  1.79k|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 1.79k, False: 47.1k]
  ------------------
   63|  4.48k|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 2.68k, False: 46.2k]
  ------------------
   64|  4.48k|                                return OpCode::LF;
   65|  2.77k|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 2.77k, False: 46.2k]
  ------------------
   66|  4.83k|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 2.05k, False: 46.9k]
  ------------------
   67|  4.83k|                                return OpCode::LH;
   68|  1.58k|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 1.58k, False: 47.3k]
  ------------------
   69|  4.63k|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 3.05k, False: 45.9k]
  ------------------
   70|  4.63k|                                return OpCode::LW;
   71|  48.9k|                        }
   72|  20.8k|                        break;
   73|  20.8k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 7.14k, False: 660k]
  ------------------
   74|  20.7k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 13.5k, False: 654k]
  ------------------
   75|  20.7k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 10.8k, False: 9.88k]
  ------------------
   76|  10.8k|                        {
   77|  10.8k|                            return OpCode::OR;
   78|  10.8k|                        }
   79|  9.88k|                        break;
   80|   113k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 113k, False: 554k]
  ------------------
   81|   158k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 44.2k, False: 623k]
  ------------------
   82|   158k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 37.8k, False: 120k]
  ------------------
   83|   158k|                        {
   84|  7.02k|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 7.02k, False: 151k]
  ------------------
   85|  16.0k|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 8.99k, False: 149k]
  ------------------
   86|  16.0k|                                return OpCode::SB;
   87|  40.2k|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 40.2k, False: 117k]
  ------------------
   88|  51.1k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 10.8k, False: 147k]
  ------------------
   89|  51.1k|                                return OpCode::SD;
   90|  5.41k|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 5.41k, False: 152k]
  ------------------
   91|  7.36k|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 1.94k, False: 156k]
  ------------------
   92|  7.36k|                                return OpCode::SF;
   93|  11.2k|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 11.2k, False: 146k]
  ------------------
   94|  15.9k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 4.77k, False: 153k]
  ------------------
   95|  15.9k|                                return OpCode::SH;
   96|  6.19k|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 6.19k, False: 151k]
  ------------------
   97|  29.7k|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 23.5k, False: 134k]
  ------------------
   98|  29.7k|                                return OpCode::SW;
   99|   158k|                        }
  100|  37.8k|                        break;
  101|   667k|                }
  102|   500k|                break;
  103|   667k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|   845k|            case 3: {
  ------------------
  |  Branch (106:13): [True: 845k, False: 3.46M]
  ------------------
  107|   845k|                const char c1 = token[0u];
  108|   845k|                const char c2 = token[1u];
  109|   845k|                const char c3 = token[2u];
  110|       |
  111|   845k|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 246k, False: 599k]
  ------------------
  112|   845k|                {
  113|  36.8k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 36.8k, False: 808k]
  ------------------
  114|  46.7k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 9.90k, False: 835k]
  ------------------
  115|  46.7k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 14.6k, False: 32.0k]
  |  Branch (115:29): [True: 12.4k, False: 34.2k]
  |  Branch (115:45): [True: 12.4k, False: 2.19k]
  ------------------
  116|  12.4k|                        {
  117|  12.4k|                            return OpCode::ADD;
  118|  12.4k|                        }
  119|  34.2k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 17.3k, False: 16.8k]
  |  Branch (119:34): [True: 5.84k, False: 28.3k]
  |  Branch (119:50): [True: 5.84k, False: 11.5k]
  ------------------
  120|  5.84k|                        {
  121|  5.84k|                            return OpCode::AND;
  122|  5.84k|                        }
  123|  28.3k|                        break;
  124|       |
  125|  28.3k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 6.49k, False: 838k]
  ------------------
  126|  49.1k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 42.7k, False: 802k]
  ------------------
  127|  49.1k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 32.3k, False: 16.8k]
  |  Branch (127:29): [True: 23.3k, False: 25.8k]
  |  Branch (127:45): [True: 23.3k, False: 8.95k]
  ------------------
  128|  23.3k|                        {
  129|  23.3k|                            return OpCode::DIV;
  130|  23.3k|                        }
  131|  25.8k|                        break;
  132|       |
  133|  25.8k|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 3.91k, False: 841k]
  ------------------
  134|  27.2k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 23.3k, False: 822k]
  ------------------
  135|  27.2k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 23.8k, False: 3.39k]
  ------------------
  136|  23.8k|                        {
  137|  23.8k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 12.2k, False: 11.5k]
  ------------------
  138|  12.2k|                            {
  139|  12.2k|                                return OpCode::EQD;
  140|  12.2k|                            }
  141|  11.5k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 8.38k, False: 3.19k]
  ------------------
  142|  8.38k|                            {
  143|  8.38k|                                return OpCode::EQF;
  144|  8.38k|                            }
  145|  23.8k|                        }
  146|  6.59k|                        break;
  147|       |
  148|  48.5k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 48.5k, False: 796k]
  ------------------
  149|  61.7k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 13.2k, False: 832k]
  ------------------
  150|  61.7k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 23.1k, False: 38.5k]
  ------------------
  151|  23.1k|                        {
  152|  23.1k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 16.2k, False: 6.94k]
  ------------------
  153|  16.2k|                            {
  154|  16.2k|                                return OpCode::GED;
  155|  16.2k|                            }
  156|  6.94k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 2.82k, False: 4.12k]
  ------------------
  157|  2.82k|                            {
  158|  2.82k|                                return OpCode::GEF;
  159|  2.82k|                            }
  160|  23.1k|                        }
  161|  38.5k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 15.0k, False: 23.5k]
  ------------------
  162|  15.0k|                        {
  163|  15.0k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 5.22k, False: 9.78k]
  ------------------
  164|  5.22k|                            {
  165|  5.22k|                                return OpCode::GTD;
  166|  5.22k|                            }
  167|  9.78k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 5.31k, False: 4.46k]
  ------------------
  168|  5.31k|                            {
  169|  5.31k|                                return OpCode::GTF;
  170|  5.31k|                            }
  171|  9.78k|                        }
  172|  32.1k|                        break;
  173|       |
  174|  32.1k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 4.98k, False: 840k]
  ------------------
  175|  21.9k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 16.9k, False: 828k]
  ------------------
  176|  21.9k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 16.2k, False: 5.71k]
  |  Branch (176:29): [True: 12.6k, False: 9.29k]
  |  Branch (176:45): [True: 12.6k, False: 3.58k]
  ------------------
  177|  12.6k|                        {
  178|  12.6k|                            return OpCode::JAL;
  179|  12.6k|                        }
  180|  9.29k|                        break;
  181|       |
  182|  34.9k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 34.9k, False: 810k]
  ------------------
  183|  94.1k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 59.2k, False: 786k]
  ------------------
  184|  94.1k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 6.93k, False: 87.2k]
  ------------------
  185|  94.1k|                        {
  186|  22.2k|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 22.2k, False: 71.9k]
  ------------------
  187|  27.1k|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 4.89k, False: 89.2k]
  ------------------
  188|  27.1k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 13.0k, False: 14.1k]
  ------------------
  189|  13.0k|                                {
  190|  13.0k|                                    return OpCode::LBU;
  191|  13.0k|                                }
  192|  14.1k|                                break;
  193|       |
  194|  14.1k|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 12.1k, False: 82.0k]
  ------------------
  195|  19.0k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 6.91k, False: 87.2k]
  ------------------
  196|  19.0k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 6.91k, False: 12.1k]
  ------------------
  197|  6.91k|                                {
  198|  6.91k|                                    return OpCode::LED;
  199|  6.91k|                                }
  200|  12.1k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 8.84k, False: 3.33k]
  ------------------
  201|  8.84k|                                {
  202|  8.84k|                                    return OpCode::LEF;
  203|  8.84k|                                }
  204|  3.33k|                                break;
  205|       |
  206|  3.33k|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 1.81k, False: 92.3k]
  ------------------
  207|  13.9k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 12.1k, False: 82.0k]
  ------------------
  208|  13.9k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 9.48k, False: 4.46k]
  ------------------
  209|  9.48k|                                {
  210|  9.48k|                                    return OpCode::LHI;
  211|  9.48k|                                }
  212|  4.46k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 2.85k, False: 1.60k]
  ------------------
  213|  2.85k|                                {
  214|  2.85k|                                    return OpCode::LHU;
  215|  2.85k|                                }
  216|  1.60k|                                break;
  217|       |
  218|  6.63k|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 6.63k, False: 87.5k]
  ------------------
  219|  13.2k|                            case 't':
  ------------------
  |  Branch (219:29): [True: 6.64k, False: 87.5k]
  ------------------
  220|  13.2k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 7.22k, False: 6.05k]
  ------------------
  221|  7.22k|                                {
  222|  7.22k|                                    return OpCode::LTD;
  223|  7.22k|                                }
  224|  6.05k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 3.49k, False: 2.55k]
  ------------------
  225|  3.49k|                                {
  226|  3.49k|                                    return OpCode::LTF;
  227|  3.49k|                                }
  228|  2.55k|                                break;
  229|       |
  230|  4.66k|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 4.66k, False: 89.5k]
  ------------------
  231|  13.8k|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 9.15k, False: 85.0k]
  ------------------
  232|  13.8k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 6.73k, False: 7.09k]
  ------------------
  233|  6.73k|                                {
  234|  6.73k|                                    return OpCode::LWU;
  235|  6.73k|                                }
  236|  7.09k|                                break;
  237|  94.1k|                        }
  238|  35.6k|                        break;
  239|       |
  240|  35.6k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 5.93k, False: 839k]
  ------------------
  241|  29.5k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 23.6k, False: 821k]
  ------------------
  242|  29.5k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 18.2k, False: 11.3k]
  ------------------
  243|  18.2k|                        {
  244|  18.2k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 6.63k, False: 11.6k]
  ------------------
  245|  6.63k|                            {
  246|  6.63k|                                return OpCode::NED;
  247|  6.63k|                            }
  248|  11.6k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 7.46k, False: 4.16k]
  ------------------
  249|  7.46k|                            {
  250|  7.46k|                                return OpCode::NEF;
  251|  7.46k|                            }
  252|  18.2k|                        }
  253|  11.3k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 6.37k, False: 4.95k]
  |  Branch (253:34): [True: 4.65k, False: 6.67k]
  |  Branch (253:50): [True: 4.65k, False: 1.72k]
  ------------------
  254|  4.65k|                        {
  255|  4.65k|                            return OpCode::NOP;
  256|  4.65k|                        }
  257|       |
  258|  10.8k|                        break;
  259|       |
  260|  10.8k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 6.98k, False: 838k]
  ------------------
  261|  25.7k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 18.7k, False: 826k]
  ------------------
  262|  25.7k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 16.8k, False: 8.86k]
  |  Branch (262:29): [True: 11.1k, False: 14.5k]
  |  Branch (262:45): [True: 11.1k, False: 5.66k]
  ------------------
  263|  11.1k|                        {
  264|  11.1k|                            return OpCode::ORI;
  265|  11.1k|                        }
  266|  14.5k|                        break;
  267|       |
  268|   119k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 119k, False: 725k]
  ------------------
  269|   227k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 107k, False: 737k]
  ------------------
  270|   227k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 27.2k, False: 199k]
  ------------------
  271|   227k|                        {
  272|  18.1k|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 18.1k, False: 208k]
  ------------------
  273|  22.1k|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 3.99k, False: 223k]
  ------------------
  274|  22.1k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 11.4k, False: 10.6k]
  ------------------
  275|  11.4k|                                {
  276|  11.4k|                                    return OpCode::SBU;
  277|  11.4k|                                }
  278|  10.6k|                                break;
  279|       |
  280|  10.6k|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 8.88k, False: 218k]
  ------------------
  281|  14.7k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 5.87k, False: 221k]
  ------------------
  282|  14.7k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 8.75k, False: 6.01k]
  ------------------
  283|  8.75k|                                {
  284|  8.75k|                                    return OpCode::SEQ;
  285|  8.75k|                                }
  286|  6.01k|                                break;
  287|       |
  288|  14.6k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 14.6k, False: 212k]
  ------------------
  289|  24.0k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 9.38k, False: 217k]
  ------------------
  290|  24.0k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 7.25k, False: 16.7k]
  ------------------
  291|  7.25k|                                {
  292|  7.25k|                                    return OpCode::SGE;
  293|  7.25k|                                }
  294|  16.7k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 6.08k, False: 10.6k]
  ------------------
  295|  6.08k|                                {
  296|  6.08k|                                    return OpCode::SGT;
  297|  6.08k|                                }
  298|  10.6k|                                break;
  299|       |
  300|  10.6k|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 3.61k, False: 223k]
  ------------------
  301|  7.50k|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 3.89k, False: 223k]
  ------------------
  302|  7.50k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 6.31k, False: 1.19k]
  ------------------
  303|  6.31k|                                {
  304|  6.31k|                                    return OpCode::SHU;
  305|  6.31k|                                }
  306|  1.19k|                                break;
  307|       |
  308|  19.4k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 19.4k, False: 207k]
  ------------------
  309|  50.2k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 30.8k, False: 196k]
  ------------------
  310|  50.2k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 4.37k, False: 45.9k]
  ------------------
  311|  50.2k|                                {
  312|  5.47k|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 5.47k, False: 44.8k]
  ------------------
  313|  14.7k|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 9.29k, False: 40.9k]
  ------------------
  314|  14.7k|                                        return OpCode::SLA;
  315|       |
  316|  2.50k|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 2.50k, False: 47.7k]
  ------------------
  317|  9.86k|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 7.35k, False: 42.9k]
  ------------------
  318|  9.86k|                                        return OpCode::SLE;
  319|       |
  320|  4.47k|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 4.47k, False: 45.8k]
  ------------------
  321|  12.1k|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 7.66k, False: 42.6k]
  ------------------
  322|  12.1k|                                        return OpCode::SLL;
  323|       |
  324|  5.53k|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 5.53k, False: 44.7k]
  ------------------
  325|  9.14k|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 3.60k, False: 46.6k]
  ------------------
  326|  9.14k|                                        return OpCode::SLT;
  327|  50.2k|                                }
  328|  4.37k|                                break;
  329|       |
  330|  6.60k|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 6.60k, False: 220k]
  ------------------
  331|  16.0k|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 9.47k, False: 217k]
  ------------------
  332|  16.0k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 8.99k, False: 7.09k]
  ------------------
  333|  8.99k|                                {
  334|  8.99k|                                    return OpCode::SNE;
  335|  8.99k|                                }
  336|  7.09k|                                break;
  337|       |
  338|  18.5k|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 18.5k, False: 208k]
  ------------------
  339|  30.3k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 11.8k, False: 215k]
  ------------------
  340|  30.3k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 11.1k, False: 19.2k]
  ------------------
  341|  11.1k|                                {
  342|  11.1k|                                    return OpCode::SRA;
  343|  11.1k|                                }
  344|  19.2k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 13.6k, False: 5.54k]
  ------------------
  345|  13.6k|                                {
  346|  13.6k|                                    return OpCode::SRL;
  347|  13.6k|                                }
  348|  5.54k|                                break;
  349|       |
  350|  11.1k|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 11.1k, False: 215k]
  ------------------
  351|  17.9k|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 6.87k, False: 220k]
  ------------------
  352|  17.9k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 13.8k, False: 4.09k]
  ------------------
  353|  13.8k|                                {
  354|  13.8k|                                    return OpCode::SUB;
  355|  13.8k|                                }
  356|  4.09k|                                break;
  357|       |
  358|  4.14k|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 4.14k, False: 222k]
  ------------------
  359|  16.6k|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 12.5k, False: 214k]
  ------------------
  360|  16.6k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 6.34k, False: 10.3k]
  ------------------
  361|  6.34k|                                {
  362|  6.34k|                                    return OpCode::SWU;
  363|  6.34k|                                }
  364|  10.3k|                                break;
  365|   227k|                        }
  366|       |
  367|  96.8k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 9.58k, False: 835k]
  ------------------
  368|   103k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 6.49k, False: 838k]
  ------------------
  369|   103k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 13.5k, False: 89.7k]
  |  Branch (369:29): [True: 8.23k, False: 95.0k]
  |  Branch (369:45): [True: 8.23k, False: 5.34k]
  ------------------
  370|  8.23k|                        {
  371|  8.23k|                            return OpCode::XOR;
  372|  8.23k|                        }
  373|  95.0k|                        break;
  374|   845k|                }
  375|   504k|                break;
  376|   845k|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  1.01M|            case 4: {
  ------------------
  |  Branch (379:13): [True: 1.01M, False: 3.29M]
  ------------------
  380|  1.01M|                const char c1 = token[0u];
  381|  1.01M|                const char c2 = token[1u];
  382|  1.01M|                const char c3 = token[2u];
  383|  1.01M|                const char c4 = token[3u];
  384|       |
  385|  1.01M|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 219k, False: 791k]
  ------------------
  386|  1.01M|                {
  387|  59.4k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 59.4k, False: 951k]
  ------------------
  388|   112k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 53.3k, False: 957k]
  ------------------
  389|   112k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 6.16k, False: 106k]
  ------------------
  390|   112k|                        {
  391|  39.1k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 39.1k, False: 73.5k]
  ------------------
  392|  84.2k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 45.1k, False: 67.6k]
  ------------------
  393|  84.2k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 76.2k, False: 8.07k]
  ------------------
  394|  76.2k|                                {
  395|  76.2k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 7.11k, False: 69.0k]
  ------------------
  396|  76.2k|                                    {
  397|  14.9k|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 14.9k, False: 61.2k]
  ------------------
  398|  21.0k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 6.08k, False: 70.1k]
  ------------------
  399|  21.0k|                                            return OpCode::ADDD;
  400|       |
  401|  7.04k|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 7.04k, False: 69.1k]
  ------------------
  402|  10.8k|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 3.78k, False: 72.4k]
  ------------------
  403|  10.8k|                                            return OpCode::ADDF;
  404|       |
  405|  9.55k|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 9.55k, False: 66.6k]
  ------------------
  406|  15.5k|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 5.96k, False: 70.2k]
  ------------------
  407|  15.5k|                                            return OpCode::ADDI;
  408|       |
  409|  11.8k|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 11.8k, False: 64.3k]
  ------------------
  410|  21.6k|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 9.84k, False: 66.3k]
  ------------------
  411|  21.6k|                                            return OpCode::ADDU;
  412|  76.2k|                                    }
  413|  76.2k|                                }
  414|  15.1k|                                break;
  415|       |
  416|  15.1k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 7.40k, False: 105k]
  ------------------
  417|  22.2k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 14.8k, False: 97.8k]
  ------------------
  418|  22.2k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 10.7k, False: 11.5k]
  |  Branch (418:37): [True: 4.55k, False: 17.7k]
  |  Branch (418:53): [True: 4.55k, False: 6.20k]
  ------------------
  419|  4.55k|                                {
  420|  4.55k|                                    return OpCode::ANDI;
  421|  4.55k|                                }
  422|       |
  423|  17.7k|                                break;
  424|   112k|                        }
  425|  39.0k|                        break;
  426|       |
  427|  39.0k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 22.5k, False: 988k]
  ------------------
  428|  69.9k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 47.3k, False: 963k]
  ------------------
  429|  69.9k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 3.36k, False: 66.5k]
  ------------------
  430|  69.9k|                        {
  431|  9.97k|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 9.97k, False: 59.9k]
  ------------------
  432|  14.3k|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 4.35k, False: 65.5k]
  ------------------
  433|  14.3k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 8.35k, False: 5.97k]
  |  Branch (433:37): [True: 4.32k, False: 10.0k]
  |  Branch (433:53): [True: 4.32k, False: 4.02k]
  ------------------
  434|  4.32k|                                {
  435|  4.32k|                                    return OpCode::BEQZ;
  436|  4.32k|                                }
  437|  10.0k|                                break;
  438|       |
  439|  10.0k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 6.05k, False: 63.8k]
  ------------------
  440|  22.9k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 16.8k, False: 53.0k]
  ------------------
  441|  22.9k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 17.9k, False: 4.95k]
  ------------------
  442|  17.9k|                                {
  443|  17.9k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 8.20k, False: 9.75k]
  ------------------
  444|  8.20k|                                    {
  445|  8.20k|                                        return OpCode::BFPF;
  446|  8.20k|                                    }
  447|  9.75k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 7.57k, False: 2.18k]
  ------------------
  448|  7.57k|                                    {
  449|  7.57k|                                        return OpCode::BFPT;
  450|  7.57k|                                    }
  451|  17.9k|                                }
  452|  7.13k|                                break;
  453|       |
  454|  7.99k|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 7.99k, False: 61.9k]
  ------------------
  455|  29.3k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 21.3k, False: 48.6k]
  ------------------
  456|  29.3k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 25.3k, False: 4.00k]
  |  Branch (456:37): [True: 13.9k, False: 15.3k]
  |  Branch (456:53): [True: 13.9k, False: 11.3k]
  ------------------
  457|  13.9k|                                {
  458|  13.9k|                                    return OpCode::BNEZ;
  459|  13.9k|                                }
  460|  69.9k|                        }
  461|  35.8k|                        break;
  462|       |
  463|  35.8k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 10.1k, False: 1.00M]
  ------------------
  464|  79.4k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 69.2k, False: 941k]
  ------------------
  465|  79.4k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 63.5k, False: 15.8k]
  |  Branch (465:29): [True: 47.6k, False: 31.8k]
  |  Branch (465:45): [True: 47.6k, False: 15.9k]
  ------------------
  466|  47.6k|                        {
  467|  47.6k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 7.62k, False: 39.9k]
  ------------------
  468|  47.6k|                            {
  469|  2.97k|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 2.97k, False: 44.6k]
  ------------------
  470|  7.69k|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 4.72k, False: 42.8k]
  ------------------
  471|  7.69k|                                    return OpCode::DIVD;
  472|       |
  473|  5.28k|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 5.28k, False: 42.3k]
  ------------------
  474|  7.21k|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 1.92k, False: 45.6k]
  ------------------
  475|  7.21k|                                    return OpCode::DIVF;
  476|       |
  477|  6.23k|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 6.23k, False: 41.3k]
  ------------------
  478|  16.4k|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 10.2k, False: 37.3k]
  ------------------
  479|  16.4k|                                    return OpCode::DIVI;
  480|       |
  481|  6.11k|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 6.11k, False: 41.4k]
  ------------------
  482|  8.62k|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 2.51k, False: 45.0k]
  ------------------
  483|  8.62k|                                    return OpCode::DIVU;
  484|  47.6k|                            }
  485|  47.6k|                        }
  486|  39.4k|                        break;
  487|       |
  488|  39.4k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 2.57k, False: 1.00M]
  ------------------
  489|  25.4k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 22.8k, False: 988k]
  ------------------
  490|  25.4k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 22.4k, False: 2.93k]
  |  Branch (490:29): [True: 14.7k, False: 10.7k]
  |  Branch (490:45): [True: 20.6k, False: 1.82k]
  |  Branch (490:61): [True: 14.7k, False: 5.93k]
  ------------------
  491|  14.7k|                        {
  492|  14.7k|                            return OpCode::HALT;
  493|  14.7k|                        }
  494|  10.7k|                        break;
  495|       |
  496|  10.7k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 5.17k, False: 1.00M]
  ------------------
  497|  35.2k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 30.0k, False: 980k]
  ------------------
  498|  35.2k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 29.8k, False: 5.40k]
  |  Branch (498:29): [True: 8.65k, False: 26.6k]
  |  Branch (498:45): [True: 21.6k, False: 8.18k]
  |  Branch (498:61): [True: 8.65k, False: 13.0k]
  ------------------
  499|  8.65k|                        {
  500|  8.65k|                            return OpCode::JALR;
  501|  8.65k|                        }
  502|  26.6k|                        break;
  503|       |
  504|  26.6k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 10.6k, False: 1.00M]
  ------------------
  505|  58.5k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 47.8k, False: 963k]
  ------------------
  506|  58.5k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 33.6k, False: 24.9k]
  |  Branch (506:29): [True: 30.1k, False: 28.3k]
  |  Branch (506:45): [True: 30.1k, False: 3.44k]
  ------------------
  507|  30.1k|                        {
  508|  30.1k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 6.07k, False: 24.1k]
  ------------------
  509|  6.07k|                            {
  510|  6.07k|                                return OpCode::MOVD;
  511|  6.07k|                            }
  512|  24.1k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 15.2k, False: 8.81k]
  ------------------
  513|  15.2k|                            {
  514|  15.2k|                                return OpCode::MOVF;
  515|  15.2k|                            }
  516|  30.1k|                        }
  517|  28.3k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 20.3k, False: 7.95k]
  |  Branch (517:34): [True: 14.6k, False: 13.7k]
  |  Branch (517:50): [True: 16.8k, False: 3.56k]
  |  Branch (517:66): [True: 14.6k, False: 2.22k]
  ------------------
  518|  14.6k|                        {
  519|  14.6k|                            return OpCode::MULT;
  520|  14.6k|                        }
  521|  22.5k|                        break;
  522|       |
  523|   176k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 176k, False: 834k]
  ------------------
  524|   365k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 188k, False: 822k]
  ------------------
  525|   365k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 15.6k, False: 349k]
  ------------------
  526|   365k|                        {
  527|  25.7k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 25.7k, False: 339k]
  ------------------
  528|  32.1k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 6.37k, False: 358k]
  ------------------
  529|  32.1k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 25.8k, False: 6.20k]
  ------------------
  530|  25.8k|                                {
  531|  25.8k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 9.79k, False: 16.1k]
  ------------------
  532|  9.79k|                                    {
  533|  9.79k|                                        return OpCode::SEQI;
  534|  9.79k|                                    }
  535|  16.1k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 6.93k, False: 9.17k]
  ------------------
  536|  6.93k|                                    {
  537|  6.93k|                                        return OpCode::SEQU;
  538|  6.93k|                                    }
  539|  25.8k|                                }
  540|  15.3k|                                break;
  541|       |
  542|  24.7k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 24.7k, False: 340k]
  ------------------
  543|  86.3k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 61.6k, False: 303k]
  ------------------
  544|  86.3k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 44.0k, False: 42.3k]
  ------------------
  545|  44.0k|                                {
  546|  44.0k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 16.9k, False: 27.1k]
  ------------------
  547|  16.9k|                                    {
  548|  16.9k|                                        return OpCode::SGEI;
  549|  16.9k|                                    }
  550|  27.1k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 21.2k, False: 5.81k]
  ------------------
  551|  21.2k|                                    {
  552|  21.2k|                                        return OpCode::SGEU;
  553|  21.2k|                                    }
  554|  44.0k|                                }
  555|  42.3k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 33.8k, False: 8.49k]
  ------------------
  556|  33.8k|                                {
  557|  33.8k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 13.2k, False: 20.5k]
  ------------------
  558|  13.2k|                                    {
  559|  13.2k|                                        return OpCode::SGTI;
  560|  13.2k|                                    }
  561|  20.5k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 17.0k, False: 3.51k]
  ------------------
  562|  17.0k|                                    {
  563|  17.0k|                                        return OpCode::SGTU;
  564|  17.0k|                                    }
  565|  33.8k|                                }
  566|  17.8k|                                break;
  567|       |
  568|  25.1k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 25.1k, False: 340k]
  ------------------
  569|  95.6k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 70.4k, False: 294k]
  ------------------
  570|  95.6k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 6.42k, False: 89.1k]
  ------------------
  571|  95.6k|                                {
  572|  7.51k|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 7.51k, False: 88.1k]
  ------------------
  573|  12.5k|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 5.07k, False: 90.5k]
  ------------------
  574|  12.5k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 8.54k, False: 4.03k]
  ------------------
  575|  8.54k|                                        {
  576|  8.54k|                                            return OpCode::SLAI;
  577|  8.54k|                                        }
  578|  4.03k|                                        break;
  579|       |
  580|  18.2k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 18.2k, False: 77.3k]
  ------------------
  581|  22.0k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 3.80k, False: 91.8k]
  ------------------
  582|  22.0k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 9.51k, False: 12.5k]
  ------------------
  583|  9.51k|                                        {
  584|  9.51k|                                            return OpCode::SLEI;
  585|  9.51k|                                        }
  586|  12.5k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 9.71k, False: 2.83k]
  ------------------
  587|  9.71k|                                        {
  588|  9.71k|                                            return OpCode::SLEU;
  589|  9.71k|                                        }
  590|  2.83k|                                        break;
  591|       |
  592|  3.86k|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 3.86k, False: 91.7k]
  ------------------
  593|  13.0k|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 9.22k, False: 86.3k]
  ------------------
  594|  13.0k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 8.67k, False: 4.41k]
  ------------------
  595|  8.67k|                                        {
  596|  8.67k|                                            return OpCode::SLLI;
  597|  8.67k|                                        }
  598|  4.41k|                                        break;
  599|       |
  600|  26.0k|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 26.0k, False: 69.5k]
  ------------------
  601|  41.4k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 15.3k, False: 80.2k]
  ------------------
  602|  41.4k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 11.0k, False: 30.4k]
  ------------------
  603|  11.0k|                                        {
  604|  11.0k|                                            return OpCode::SLTI;
  605|  11.0k|                                        }
  606|  30.4k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 18.1k, False: 12.3k]
  ------------------
  607|  18.1k|                                        {
  608|  18.1k|                                            return OpCode::SLTU;
  609|  18.1k|                                        }
  610|  12.3k|                                        break;
  611|  95.6k|                                }
  612|       |
  613|  33.3k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 3.29k, False: 361k]
  ------------------
  614|  65.2k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 31.9k, False: 333k]
  ------------------
  615|  65.2k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 35.3k, False: 29.8k]
  ------------------
  616|  35.3k|                                {
  617|  35.3k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 9.66k, False: 25.7k]
  ------------------
  618|  9.66k|                                    {
  619|  9.66k|                                        return OpCode::SNEI;
  620|  9.66k|                                    }
  621|  25.7k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 13.3k, False: 12.4k]
  ------------------
  622|  13.3k|                                    {
  623|  13.3k|                                        return OpCode::SNEU;
  624|  13.3k|                                    }
  625|  35.3k|                                }
  626|  42.3k|                                break;
  627|       |
  628|  42.3k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 18.7k, False: 346k]
  ------------------
  629|  36.5k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 17.7k, False: 347k]
  ------------------
  630|  36.5k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 17.5k, False: 18.9k]
  |  Branch (630:37): [True: 14.4k, False: 22.0k]
  |  Branch (630:53): [True: 14.4k, False: 3.14k]
  ------------------
  631|  14.4k|                                {
  632|  14.4k|                                    return OpCode::SRAI;
  633|  14.4k|                                }
  634|  22.0k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 18.4k, False: 3.66k]
  |  Branch (634:42): [True: 6.82k, False: 15.2k]
  |  Branch (634:58): [True: 6.82k, False: 11.5k]
  ------------------
  635|  6.82k|                                {
  636|  6.82k|                                    return OpCode::SRLI;
  637|  6.82k|                                }
  638|  15.2k|                                break;
  639|       |
  640|  21.0k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 21.0k, False: 344k]
  ------------------
  641|  63.7k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 42.6k, False: 322k]
  ------------------
  642|  63.7k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 56.9k, False: 6.76k]
  ------------------
  643|  56.9k|                                {
  644|  56.9k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 8.03k, False: 48.9k]
  ------------------
  645|  56.9k|                                    {
  646|  11.4k|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 11.4k, False: 45.5k]
  ------------------
  647|  15.8k|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 4.43k, False: 52.5k]
  ------------------
  648|  15.8k|                                            return OpCode::SUBD;
  649|       |
  650|  5.00k|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 5.00k, False: 51.9k]
  ------------------
  651|  10.4k|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 5.44k, False: 51.5k]
  ------------------
  652|  10.4k|                                            return OpCode::SUBF;
  653|       |
  654|  3.42k|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 3.42k, False: 53.5k]
  ------------------
  655|  11.2k|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 7.79k, False: 49.1k]
  ------------------
  656|  11.2k|                                            return OpCode::SUBI;
  657|       |
  658|  6.12k|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 6.12k, False: 50.8k]
  ------------------
  659|  11.3k|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 5.26k, False: 51.7k]
  ------------------
  660|  11.3k|                                            return OpCode::SUBU;
  661|  56.9k|                                    }
  662|  56.9k|                                }
  663|  14.8k|                                break;
  664|   365k|                        }
  665|   121k|                        break;
  666|       |
  667|   121k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 3.52k, False: 1.00M]
  ------------------
  668|  11.9k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 8.40k, False: 1.00M]
  ------------------
  669|  11.9k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 7.31k, False: 4.61k]
  |  Branch (669:29): [True: 2.37k, False: 9.55k]
  |  Branch (669:45): [True: 4.63k, False: 2.68k]
  |  Branch (669:61): [True: 2.37k, False: 2.26k]
  ------------------
  670|  2.37k|                        {
  671|  2.37k|                            return OpCode::TRAP;
  672|  2.37k|                        }
  673|  9.55k|                        break;
  674|  18.3k|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 18.3k, False: 992k]
  ------------------
  675|  33.4k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 15.0k, False: 995k]
  ------------------
  676|  33.4k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 25.4k, False: 8.03k]
  |  Branch (676:29): [True: 12.2k, False: 21.1k]
  |  Branch (676:45): [True: 21.9k, False: 3.44k]
  |  Branch (676:61): [True: 12.2k, False: 9.68k]
  ------------------
  677|  12.2k|                        {
  678|  12.2k|                            return OpCode::XORI;
  679|  12.2k|                        }
  680|  21.1k|                        break;
  681|  1.01M|                }
  682|   545k|                break;
  683|  1.01M|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|   588k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 588k, False: 3.72M]
  ------------------
  687|   588k|                const char c1 = token[0u];
  688|   588k|                const char c2 = token[1u];
  689|   588k|                const char c3 = token[2u];
  690|   588k|                const char c4 = token[3u];
  691|   588k|                const char c5 = token[4u];
  692|       |
  693|   588k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 138k, False: 450k]
  ------------------
  694|   588k|                {
  695|  15.6k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 15.6k, False: 573k]
  ------------------
  696|  61.1k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 45.5k, False: 543k]
  ------------------
  697|  61.1k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 56.1k, False: 5.06k]
  |  Branch (697:29): [True: 11.4k, False: 49.7k]
  |  Branch (697:45): [True: 47.5k, False: 8.58k]
  |  Branch (697:61): [True: 35.0k, False: 12.4k]
  |  Branch (697:77): [True: 11.4k, False: 23.6k]
  ------------------
  698|  11.4k|                        {
  699|  11.4k|                            return OpCode::ADDUI;
  700|  11.4k|                        }
  701|  49.7k|                        break;
  702|       |
  703|  49.7k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 4.14k, False: 584k]
  ------------------
  704|  57.9k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 53.7k, False: 534k]
  ------------------
  705|  57.9k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 46.0k, False: 11.9k]
  |  Branch (705:29): [True: 15.5k, False: 42.3k]
  |  Branch (705:45): [True: 32.4k, False: 13.5k]
  |  Branch (705:61): [True: 24.2k, False: 8.18k]
  |  Branch (705:77): [True: 15.5k, False: 8.70k]
  ------------------
  706|  15.5k|                        {
  707|  15.5k|                            return OpCode::DIVUI;
  708|  15.5k|                        }
  709|  42.3k|                        break;
  710|       |
  711|  42.3k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 23.5k, False: 565k]
  ------------------
  712|  94.1k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 70.6k, False: 518k]
  ------------------
  713|  94.1k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 65.7k, False: 28.4k]
  |  Branch (713:29): [True: 53.2k, False: 40.9k]
  |  Branch (713:45): [True: 55.2k, False: 10.5k]
  |  Branch (713:61): [True: 53.2k, False: 2.02k]
  ------------------
  714|  53.2k|                        {
  715|  53.2k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 9.22k, False: 44.0k]
  ------------------
  716|  53.2k|                            {
  717|  4.21k|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 4.21k, False: 49.0k]
  ------------------
  718|  6.10k|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 1.89k, False: 51.3k]
  ------------------
  719|  6.10k|                                    return OpCode::MULTD;
  720|       |
  721|  11.3k|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 11.3k, False: 41.8k]
  ------------------
  722|  16.9k|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 5.63k, False: 47.5k]
  ------------------
  723|  16.9k|                                    return OpCode::MULTF;
  724|       |
  725|  6.13k|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 6.13k, False: 47.1k]
  ------------------
  726|  11.5k|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 5.37k, False: 47.8k]
  ------------------
  727|  11.5k|                                    return OpCode::MULTI;
  728|       |
  729|  2.77k|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 2.77k, False: 50.4k]
  ------------------
  730|  9.41k|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 6.63k, False: 46.5k]
  ------------------
  731|  9.41k|                                    return OpCode::MULTU;
  732|  53.2k|                            }
  733|  53.2k|                        }
  734|  50.1k|                        break;
  735|       |
  736|  99.7k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 99.7k, False: 488k]
  ------------------
  737|   237k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 137k, False: 451k]
  ------------------
  738|   237k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 9.55k, False: 227k]
  ------------------
  739|   237k|                        {
  740|  38.4k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 38.4k, False: 198k]
  ------------------
  741|  52.6k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 14.1k, False: 222k]
  ------------------
  742|  52.6k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 38.4k, False: 14.1k]
  |  Branch (742:37): [True: 9.65k, False: 42.9k]
  |  Branch (742:53): [True: 22.1k, False: 16.2k]
  |  Branch (742:69): [True: 9.65k, False: 12.5k]
  ------------------
  743|  9.65k|                                {
  744|  9.65k|                                    return OpCode::SEQUI;
  745|  9.65k|                                }
  746|  42.9k|                                break;
  747|       |
  748|  42.9k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 23.4k, False: 213k]
  ------------------
  749|  53.3k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 29.8k, False: 207k]
  ------------------
  750|  53.3k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 25.3k, False: 28.0k]
  |  Branch (750:37): [True: 12.6k, False: 40.7k]
  |  Branch (750:53): [True: 18.7k, False: 6.56k]
  |  Branch (750:69): [True: 12.6k, False: 6.18k]
  ------------------
  751|  12.6k|                                {
  752|  12.6k|                                    return OpCode::SGEUI;
  753|  12.6k|                                }
  754|  40.7k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 27.4k, False: 13.2k]
  |  Branch (754:42): [True: 11.2k, False: 29.5k]
  |  Branch (754:58): [True: 24.6k, False: 2.85k]
  |  Branch (754:74): [True: 11.2k, False: 13.3k]
  ------------------
  755|  11.2k|                                {
  756|  11.2k|                                    return OpCode::SGTUI;
  757|  11.2k|                                }
  758|  29.5k|                                break;
  759|       |
  760|  29.5k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 15.2k, False: 221k]
  ------------------
  761|  67.6k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 52.4k, False: 184k]
  ------------------
  762|  67.6k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 28.2k, False: 39.3k]
  |  Branch (762:37): [True: 12.2k, False: 55.3k]
  |  Branch (762:53): [True: 22.0k, False: 6.24k]
  |  Branch (762:69): [True: 12.2k, False: 9.73k]
  ------------------
  763|  12.2k|                                {
  764|  12.2k|                                    return OpCode::SLEUI;
  765|  12.2k|                                }
  766|  55.3k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 33.4k, False: 21.9k]
  |  Branch (766:42): [True: 9.45k, False: 45.8k]
  |  Branch (766:58): [True: 27.5k, False: 5.83k]
  |  Branch (766:74): [True: 9.45k, False: 18.1k]
  ------------------
  767|  9.45k|                                {
  768|  9.45k|                                    return OpCode::SLTUI;
  769|  9.45k|                                }
  770|  45.8k|                                break;
  771|       |
  772|  45.8k|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 1.97k, False: 235k]
  ------------------
  773|  24.5k|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 22.6k, False: 214k]
  ------------------
  774|  24.5k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 22.5k, False: 2.06k]
  |  Branch (774:37): [True: 11.9k, False: 12.6k]
  |  Branch (774:53): [True: 20.1k, False: 2.33k]
  |  Branch (774:69): [True: 11.9k, False: 8.21k]
  ------------------
  775|  11.9k|                                {
  776|  11.9k|                                    return OpCode::SNEUI;
  777|  11.9k|                                }
  778|  12.6k|                                break;
  779|       |
  780|  12.6k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 8.40k, False: 228k]
  ------------------
  781|  29.3k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 20.9k, False: 216k]
  ------------------
  782|  29.3k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 22.5k, False: 6.76k]
  |  Branch (782:37): [True: 10.5k, False: 18.7k]
  |  Branch (782:53): [True: 16.3k, False: 6.21k]
  |  Branch (782:69): [True: 10.5k, False: 5.79k]
  ------------------
  783|  10.5k|                                {
  784|  10.5k|                                    return OpCode::SUBUI;
  785|  10.5k|                                }
  786|  18.7k|                                break;
  787|   237k|                        }
  788|       |
  789|   159k|                        break;
  790|   588k|                }
  791|       |
  792|   439k|                break;
  793|   588k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|   439k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 314k, False: 3.99M]
  ------------------
  797|   314k|                const char c1 = token[0u];
  798|   314k|                const char c2 = token[1u];
  799|   314k|                const char c3 = token[2u];
  800|   314k|                const char c4 = token[3u];
  801|   314k|                const char c5 = token[4u];
  802|   314k|                const char c6 = token[5u];
  803|       |
  804|   314k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 139k, False: 175k]
  |  Branch (804:21): [True: 120k, False: 194k]
  |  Branch (804:37): [True: 134k, False: 5.04k]
  |  Branch (804:53): [True: 120k, False: 14.0k]
  ------------------
  805|   120k|                {
  806|   120k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 4.44k, False: 116k]
  ------------------
  807|   120k|                    {
  808|  20.3k|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 20.3k, False: 100k]
  ------------------
  809|  41.3k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 20.9k, False: 99.6k]
  ------------------
  810|  41.3k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 35.1k, False: 6.19k]
  ------------------
  811|  35.1k|                            {
  812|  35.1k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 9.70k, False: 25.4k]
  ------------------
  813|  9.70k|                                {
  814|  9.70k|                                    return OpCode::CVTD2F;
  815|  9.70k|                                }
  816|  25.4k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 16.8k, False: 8.64k]
  ------------------
  817|  16.8k|                                {
  818|  16.8k|                                    return OpCode::CVTD2I;
  819|  16.8k|                                }
  820|  35.1k|                            }
  821|  14.8k|                            break;
  822|       |
  823|  14.8k|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 8.18k, False: 112k]
  ------------------
  824|  42.0k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 33.8k, False: 86.7k]
  ------------------
  825|  42.0k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 34.7k, False: 7.32k]
  ------------------
  826|  34.7k|                            {
  827|  34.7k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 16.5k, False: 18.1k]
  ------------------
  828|  16.5k|                                {
  829|  16.5k|                                    return OpCode::CVTF2D;
  830|  16.5k|                                }
  831|  18.1k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 12.2k, False: 5.89k]
  ------------------
  832|  12.2k|                                {
  833|  12.2k|                                    return OpCode::CVTF2I;
  834|  12.2k|                                }
  835|  34.7k|                            }
  836|  13.2k|                            break;
  837|       |
  838|  27.0k|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 27.0k, False: 93.6k]
  ------------------
  839|  32.7k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 5.77k, False: 114k]
  ------------------
  840|  32.7k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 24.4k, False: 8.36k]
  ------------------
  841|  24.4k|                            {
  842|  24.4k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 10.4k, False: 13.9k]
  ------------------
  843|  10.4k|                                {
  844|  10.4k|                                    return OpCode::CVTI2D;
  845|  10.4k|                                }
  846|  13.9k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 7.50k, False: 6.44k]
  ------------------
  847|  7.50k|                                {
  848|  7.50k|                                    return OpCode::CVTI2F;
  849|  7.50k|                                }
  850|  24.4k|                            }
  851|   120k|                    }
  852|   120k|                }
  853|   194k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 79.5k, False: 114k]
  |  Branch (853:26): [True: 21.8k, False: 172k]
  |  Branch (853:42): [True: 48.4k, False: 31.0k]
  |  Branch (853:58): [True: 36.4k, False: 12.0k]
  |  Branch (853:74): [True: 34.4k, False: 1.97k]
  ------------------
  854|   194k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 28.6k, False: 5.84k]
  |  Branch (854:42): [True: 21.8k, False: 6.77k]
  ------------------
  855|  21.8k|                {
  856|  21.8k|                    return OpCode::MULTUI;
  857|  21.8k|                }
  858|   219k|                break;
  859|   314k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|   219k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 153k, False: 4.15M]
  ------------------
  863|   153k|                const char c1 = token[0u];
  864|   153k|                const char c2 = token[1u];
  865|   153k|                const char c3 = token[2u];
  866|   153k|                const char c4 = token[3u];
  867|   153k|                const char c5 = token[4u];
  868|   153k|                const char c6 = token[5u];
  869|   153k|                const char c7 = token[6u];
  870|       |
  871|   153k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 77.6k, False: 75.7k]
  |  Branch (871:21): [True: 59.9k, False: 93.4k]
  |  Branch (871:37): [True: 64.8k, False: 12.7k]
  |  Branch (871:53): [True: 59.9k, False: 4.91k]
  ------------------
  872|  59.9k|                {
  873|  59.9k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 28.2k, False: 31.6k]
  |  Branch (873:25): [True: 9.12k, False: 50.8k]
  |  Branch (873:41): [True: 21.8k, False: 6.39k]
  |  Branch (873:54): [True: 19.4k, False: 2.47k]
  |  Branch (873:70): [True: 9.12k, False: 10.2k]
  ------------------
  874|  9.12k|                    {
  875|  9.12k|                        return OpCode::MOVI2FP;
  876|  9.12k|                    }
  877|  50.8k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 31.5k, False: 19.2k]
  |  Branch (877:25): [True: 18.2k, False: 32.5k]
  |  Branch (877:41): [True: 26.4k, False: 5.16k]
  |  Branch (877:57): [True: 23.2k, False: 3.19k]
  |  Branch (877:70): [True: 18.2k, False: 4.98k]
  ------------------
  878|  18.2k|                    {
  879|  18.2k|                        return OpCode::MOVFP2I;
  880|  18.2k|                    }
  881|  50.8k|                }
  882|   126k|                break;
  883|   153k|            }
  884|       |
  885|   126k|            default: {
  ------------------
  |  Branch (885:13): [True: 119k, False: 4.19M]
  ------------------
  886|   119k|                break;
  887|   153k|            }
  888|  4.30M|        }
  889|       |
  890|       |        // None found
  891|  2.90M|        return OpCode::NONE;
  892|  4.30M|    }
_ZN3dlx3iceEcc:
   17|  6.15M|    {
   18|  6.15M|        constexpr const char diff = 'a' - 'A';
   19|  6.15M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 1.89M, False: 4.25M]
  |  Branch (19:28): [True: 1.74M, False: 2.51M]
  ------------------
   20|  6.15M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  4.70M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|  86.5k|    {
  195|  86.5k|        ParseError err;
  196|       |
  197|  86.5k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|  86.5k|        err.m_LineNumber                           = line_number;
  199|  86.5k|        err.m_Column                               = column;
  200|  86.5k|        err.unexpected_argument_type.expected_type = expected_type;
  201|  86.5k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|  86.5k|        return err;
  204|  86.5k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|  86.5k|    {
  209|  86.5k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|  86.5k|                                                         token.GetColumn().unsafe(), expected_type,
  211|  86.5k|                                                         actual_type);
  212|  86.5k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|  5.83k|    {
  218|  5.83k|        ParseError err;
  219|       |
  220|  5.83k|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|  5.83k|        err.m_LineNumber        = line_number;
  222|  5.83k|        err.m_Column            = column;
  223|  5.83k|        err.invalid_number.text = text;
  224|       |
  225|  5.83k|        return err;
  226|  5.83k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|  5.83k|    {
  230|  5.83k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|  5.83k|                                                token.GetColumn().unsafe(), token.GetText());
  232|  5.83k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|      3|    {
  237|      3|        ParseError err;
  238|       |
  239|      3|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|      3|        err.m_LineNumber = line_number;
  241|      3|        err.m_Column     = column;
  242|       |
  243|      3|        return err;
  244|      3|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|      3|    {
  249|      3|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|      3|                                                                     token.GetColumn().unsafe());
  251|      3|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  2.12M|    {
  257|  2.12M|        ParseError err;
  258|       |
  259|  2.12M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  2.12M|        err.m_LineNumber                   = line_number;
  261|  2.12M|        err.m_Column                       = column;
  262|  2.12M|        err.unexpected_token.expected_type = expected_type;
  263|  2.12M|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  2.12M|        return err;
  266|  2.12M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  2.12M|    {
  271|  2.12M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  2.12M|                                                  token.GetColumn().unsafe(), expected_type,
  273|  2.12M|                                                  token.GetType());
  274|  2.12M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|   484k|    {
  279|   484k|        ParseError err;
  280|       |
  281|   484k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|   484k|        err.m_LineNumber                   = line_number;
  283|   484k|        err.m_Column                       = column;
  284|   484k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|   484k|        return err;
  287|   484k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|  6.86k|    {
  291|  6.86k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|  6.86k|                                                    token.GetColumn().unsafe(), token.GetText());
  293|  6.86k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|   898k|    {
  298|   898k|        ParseError err;
  299|       |
  300|   898k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|   898k|        err.m_LineNumber                       = line_number;
  302|   898k|        err.m_Column                           = column;
  303|   898k|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|   898k|        return err;
  306|   898k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|   898k|    {
  311|   898k|        return ConstructInvalidLabelIdentifierParseError(
  312|   898k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|   898k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|   197k|    {
  319|   197k|        ParseError err;
  320|       |
  321|   197k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|   197k|        err.m_LineNumber                     = line_number;
  323|   197k|        err.m_Column                         = column;
  324|   197k|        err.label_already_defined.label_name = label_name;
  325|   197k|        err.label_already_defined.at_line    = at_line;
  326|   197k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|   197k|        return err;
  329|   197k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|   197k|    {
  334|   197k|        return ConstructLabelAlreadyDefinedParseError(
  335|   197k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|   197k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|   197k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|   553k|    {
  342|   553k|        ParseError err;
  343|       |
  344|   553k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|   553k|        err.m_LineNumber = line_number;
  346|   553k|        err.m_Column     = column;
  347|       |
  348|   553k|        return err;
  349|   553k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|   553k|    {
  354|   553k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|   553k|                                                        token.GetColumn().unsafe());
  356|   553k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|  66.5k|    {
  362|  66.5k|        ParseError err;
  363|       |
  364|  66.5k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|  66.5k|        err.m_LineNumber               = line_number;
  366|  66.5k|        err.m_Column                   = column;
  367|  66.5k|        err.too_few_arguments.required = required;
  368|  66.5k|        err.too_few_arguments.provided = provided;
  369|       |
  370|  66.5k|        return err;
  371|  66.5k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|  66.5k|    {
  376|  66.5k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|  66.5k|                                                  token.GetColumn().unsafe(), required, provided);
  378|  66.5k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|   156k|    {
  383|   156k|        ParseError err;
  384|       |
  385|   156k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|   156k|        err.m_LineNumber           = line_number;
  387|   156k|        err.m_Column               = column;
  388|   156k|        err.empty_label.label_name = label_name;
  389|       |
  390|   156k|        return err;
  391|   156k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|   156k|    {
  395|   156k|        return ConstructEmptyLabelParseError(
  396|   156k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|   156k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 132k, False: 24.3k]
  ------------------
  398|   132k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|   156k|                        token.GetText());
  400|   156k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|   130k|    {
  405|   130k|        ParseError err;
  406|       |
  407|   130k|        err.m_Type       = ParseError::Type::TooManyComma;
  408|   130k|        err.m_LineNumber = line_number;
  409|   130k|        err.m_Column     = column;
  410|       |
  411|   130k|        return err;
  412|   130k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|   130k|    {
  416|   130k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|   130k|                                               token.GetColumn().unsafe());
  418|   130k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  4.70M|    {
   19|  4.70M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  4.70M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  23.5k|    {
  181|  23.5k|        ParsedProgram program;
  182|       |
  183|  23.5k|        program.m_Tokens = tokens;
  184|       |
  185|  23.5k|        phi::boolean line_has_instruction{false};
  186|  23.5k|        phi::usize   label_count{0u};
  187|       |
  188|  5.31M|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 5.29M, False: 23.5k]
  ------------------
  189|  5.29M|        {
  190|  5.29M|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|  5.29M|            switch (current_token.GetType())
  195|  5.29M|            {
  196|       |                // Ignore comments
  197|  33.4k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 33.4k, False: 5.25M]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  33.4k|                    break;
  200|       |
  201|   613k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 613k, False: 4.67M]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|   613k|                    line_has_instruction = false;
  204|   613k|                    break;
  205|       |
  206|  2.02M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 2.02M, False: 3.26M]
  ------------------
  207|  2.02M|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 350k, False: 1.67M]
  ------------------
  208|   350k|                    {
  209|   350k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|   350k|                                current_token, Token::Type::NewLine));
  211|   350k|                        break;
  212|   350k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  1.67M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 583k, False: 1.09M]
  ------------------
  217|   583k|                    {
  218|   583k|                        program.AddParseError(
  219|   583k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|   583k|                        break;
  221|   583k|                    }
  222|       |
  223|  1.09M|                    phi::string_view label_name = current_token.GetText();
  224|  1.09M|                    label_name.remove_suffix(1u);
  225|       |
  226|  1.09M|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 477k, False: 614k]
  ------------------
  227|   477k|                    {
  228|   477k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|   477k|                                current_token.GetLineNumber().unsafe(),
  230|   477k|                                current_token.GetColumn().unsafe(), label_name));
  231|   477k|                        break;
  232|   477k|                    }
  233|       |
  234|   614k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 248k, False: 366k]
  ------------------
  235|   248k|                    {
  236|   248k|                        program.AddParseError(
  237|   248k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|   248k|                        break;
  239|   248k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|   366k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 197k, False: 169k]
  ------------------
  243|   197k|                    {
  244|       |                        // Find first defintions of label
  245|   197k|                        const Token* first_label_definition =
  246|   197k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   197k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|   197k|                                    {
  249|   197k|                                        phi::string_view token_label_name = t.GetText();
  250|   197k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   197k|                                        if (token_label_name == label_name)
  253|   197k|                                        {
  254|   197k|                                            return true;
  255|   197k|                                        }
  256|   197k|                                    }
  257|       |
  258|   197k|                                    return false;
  259|   197k|                                });
  260|       |
  261|   197k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|   197k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|   197k|                                current_token, *first_label_definition));
  265|   197k|                        break;
  266|   197k|                    }
  267|       |
  268|   169k|                    program.m_JumpData[label_name] =
  269|   169k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|   169k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|   169k|                    break;
  276|   366k|                }
  277|       |
  278|   936k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 936k, False: 4.35M]
  ------------------
  279|   936k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 553k, False: 382k]
  ------------------
  280|   553k|                    {
  281|   553k|                        program.AddParseError(
  282|   553k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|   553k|                        break;
  284|   553k|                    }
  285|       |
  286|   382k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|   382k|                    PHI_ASSERT(current_token.HasHint());
  290|   382k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|   382k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|   382k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|   382k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|   382k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|   382k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|   382k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|   382k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|   382k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|   851k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 789k, False: 61.9k]
  ------------------
  312|   789k|                    {
  313|       |                        // Get next token
  314|   789k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 2.00k, False: 787k]
  ------------------
  315|  2.00k|                        {
  316|  2.00k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|  2.00k|                                    current_token, number_of_argument_required.unsafe(),
  318|  2.00k|                                    argument_num.unsafe()));
  319|  2.00k|                            break;
  320|  2.00k|                        }
  321|       |
  322|   787k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|   787k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 360k, False: 426k]
  ------------------
  326|   360k|                        {
  327|   360k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 130k, False: 229k]
  ------------------
  328|   130k|                            {
  329|   130k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|   130k|                            }
  331|       |
  332|   360k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|   360k|                            continue;
  335|   360k|                        }
  336|       |
  337|   426k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 64.5k, False: 361k]
  ------------------
  338|  64.5k|                        {
  339|  64.5k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  64.5k|                                    token, number_of_argument_required.unsafe(),
  341|  64.5k|                                    argument_num.unsafe()));
  342|  64.5k|                            break;
  343|  64.5k|                        }
  344|       |
  345|   361k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|   361k|                                parse_instruction_argument(
  347|   361k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|   361k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 254k, False: 107k]
  ------------------
  349|   254k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|   254k|                            break;
  352|   254k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|   107k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|   107k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|   107k|                        argument_num++;
  359|   107k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|   107k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|   382k|                    program.m_Instructions.emplace_back(instruction);
  367|   382k|                    line_has_instruction = true;
  368|   382k|                    break;
  369|   936k|                }
  370|       |
  371|  1.68M|                default:
  ------------------
  |  Branch (371:17): [True: 1.68M, False: 3.60M]
  ------------------
  372|  1.68M|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  1.68M|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 821k, False: 861k]
  ------------------
  374|   821k|                    {
  375|   821k|                        expected_token_type = Token::Type::NewLine;
  376|   821k|                    }
  377|       |
  378|  1.68M|                    program.AddParseError(
  379|  1.68M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  1.68M|                    break;
  381|  5.29M|            }
  382|  5.29M|        }
  383|       |
  384|       |        // Check for empty labels
  385|  23.5k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 7.48k, False: 16.0k]
  ------------------
  386|  7.48k|        {
  387|   194k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 186k, False: 7.48k]
  ------------------
  388|   186k|            {
  389|   186k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|   186k|                const Token& token = *it;
  392|   186k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 156k, False: 29.6k]
  ------------------
  393|   156k|                {
  394|   156k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|   156k|                    --label_count;
  396|   156k|                }
  397|   186k|            }
  398|  7.48k|        }
  399|       |
  400|  23.5k|        return program;
  401|  23.5k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  23.5k|    {
  405|  23.5k|        TokenStream tokens = Tokenize(source);
  406|  23.5k|        return Parse(tokens);
  407|  23.5k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|   361k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|   361k|        switch (token.GetType())
   37|   361k|        {
   38|  65.2k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 65.2k, False: 296k]
  ------------------
   39|  65.2k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 27.5k, False: 37.6k]
  ------------------
   40|  65.2k|                                          ArgumentType::AddressDisplacement))
   41|  27.5k|                {
   42|  27.5k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|  27.5k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|  27.5k|                    return {};
   46|  27.5k|                }
   47|       |
   48|       |                // Get address displacement
   49|  37.6k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  37.6k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  37.6k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 3, False: 37.6k]
  ------------------
   54|      3|                {
   55|      3|                    program.AddParseError(
   56|      3|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      3|                    return {};
   58|      3|                }
   59|       |
   60|  37.6k|                auto         it           = tokens.current_position();
   61|  37.6k|                const Token& first_token  = tokens.consume();
   62|  37.6k|                const Token& second_token = tokens.consume();
   63|  37.6k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  37.6k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 13.0k, False: 24.6k]
  ------------------
   66|  13.0k|                {
   67|  13.0k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|  13.0k|                            first_token, Token::Type::OpenBracket));
   69|  13.0k|                    return {};
   70|  13.0k|                }
   71|       |
   72|       |                // Second token is the register
   73|  24.6k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 8.10k, False: 16.5k]
  ------------------
   74|  8.10k|                {
   75|  8.10k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|  8.10k|                            second_token, Token::Type::RegisterInt));
   77|  8.10k|                    return {};
   78|  8.10k|                }
   79|       |
   80|  16.5k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 6.22k, False: 10.3k]
  ------------------
   81|  6.22k|                {
   82|  6.22k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|  6.22k|                            third_token, Token::Type::ClosingBracket));
   84|  6.22k|                    return {};
   85|  6.22k|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|  10.3k|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|  10.3k|                return ConstructInstructionArgumentAddressDisplacement(
   94|  10.3k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|  16.5k|            }
   96|  21.8k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 21.8k, False: 340k]
  ------------------
   97|  21.8k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 3.10k, False: 18.7k]
  ------------------
   98|  3.10k|                {
   99|  3.10k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|  3.10k|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|  3.10k|                    return {};
  102|  3.10k|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  18.7k|                return ConstructInstructionArgumentRegisterInt(
  108|  18.7k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  21.8k|            }
  110|  35.5k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 35.5k, False: 326k]
  ------------------
  111|  35.5k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 3.99k, False: 31.5k]
  ------------------
  112|  3.99k|                {
  113|  3.99k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|  3.99k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|  3.99k|                    return {};
  116|  3.99k|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  31.5k|                return ConstructInstructionArgumentRegisterFloat(
  122|  31.5k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  35.5k|            }
  124|  6.86k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 6.86k, False: 355k]
  ------------------
  125|  6.86k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|  6.86k|                return {};
  128|  35.5k|            }
  129|   142k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 142k, False: 219k]
  ------------------
  130|       |                // Parse as Label
  131|   142k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 36.1k, False: 106k]
  ------------------
  132|  36.1k|                {
  133|  36.1k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  36.1k|                            token, expected_argument_type, ArgumentType::Label));
  135|  36.1k|                    return {};
  136|  36.1k|                }
  137|       |
  138|   106k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 106k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|   106k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 67.4k, False: 39.2k]
  ------------------
  145|  67.4k|                {
  146|  67.4k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  67.4k|                    return {};
  148|  67.4k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  39.2k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|   106k|            }
  154|  29.3k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 29.3k, False: 332k]
  ------------------
  155|  29.3k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 15.7k, False: 13.6k]
  ------------------
  156|  15.7k|                {
  157|  15.7k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|  15.7k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|  15.7k|                    return {};
  160|  15.7k|                }
  161|       |
  162|  13.6k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 7.79k, False: 5.83k]
  ------------------
  163|  7.79k|                {
  164|  7.79k|                    return ConstructInstructionArgumentImmediateValue(
  165|  7.79k|                            static_cast<std::int16_t>(token.GetHint()));
  166|  7.79k|                }
  167|       |
  168|  5.83k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|  5.83k|                return {};
  170|  13.6k|            }
  171|       |
  172|  60.2k|            default:
  ------------------
  |  Branch (172:13): [True: 60.2k, False: 301k]
  ------------------
  173|  60.2k|                program.AddParseError(
  174|  60.2k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  60.2k|                return {};
  176|   361k|        }
  177|   361k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  2.91M|                                tokens.find_first_token_if([&](const Token& t) {
  247|  2.91M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 2.09M, False: 824k]
  ------------------
  248|  2.09M|                                    {
  249|  2.09M|                                        phi::string_view token_label_name = t.GetText();
  250|  2.09M|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  2.09M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 197k, False: 1.89M]
  ------------------
  253|   197k|                                        {
  254|   197k|                                            return true;
  255|   197k|                                        }
  256|  2.09M|                                    }
  257|       |
  258|  2.72M|                                    return false;
  259|  2.91M|                                });

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|  4.45M|    {
   13|  4.45M|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 770k, False: 3.68M]
  ------------------
   14|   770k|        {
   15|   770k|            const char first_char = token[0u];
   16|   770k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 4.51k, False: 765k]
  |  Branch (16:38): [True: 72.4k, False: 693k]
  ------------------
   17|  76.9k|            {
   18|  76.9k|                const char second_char = token[1u];
   19|  76.9k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 73.9k, False: 3.00k]
  |  Branch (19:43): [True: 59.3k, False: 14.6k]
  ------------------
   20|  59.3k|                {
   21|  59.3k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  59.3k|                }
   23|  76.9k|            }
   24|   770k|        }
   25|  3.68M|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 892k, False: 2.79M]
  ------------------
   26|   892k|        {
   27|   892k|            const char first_char = token[0u];
   28|   892k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 2.73k, False: 889k]
  |  Branch (28:38): [True: 59.9k, False: 830k]
  ------------------
   29|  62.6k|            {
   30|  62.6k|                const char second_char = token[1u];
   31|  62.6k|                const char third_char  = token[2u];
   32|       |
   33|  62.6k|                switch (second_char)
   34|  62.6k|                {
   35|  24.3k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 24.3k, False: 38.2k]
  ------------------
   36|  24.3k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 17.0k, False: 7.37k]
  |  Branch (36:50): [True: 9.03k, False: 7.97k]
  ------------------
   37|  9.03k|                        {
   38|  9.03k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|  9.03k|                        }
   40|  15.3k|                        break;
   41|  24.3k|                    }
   42|  19.9k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 19.9k, False: 42.7k]
  ------------------
   43|  19.9k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 8.94k, False: 11.0k]
  |  Branch (43:50): [True: 5.10k, False: 3.84k]
  ------------------
   44|  5.10k|                        {
   45|  5.10k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|  5.10k|                        }
   47|  14.8k|                        break;
   48|  19.9k|                    }
   49|  14.8k|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 9.30k, False: 53.3k]
  ------------------
   50|  9.30k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 1.47k, False: 7.83k]
  |  Branch (50:50): [True: 2.24k, False: 5.59k]
  ------------------
   51|  3.71k|                        {
   52|  3.71k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|  3.71k|                        }
   54|  5.59k|                        break;
   55|  9.30k|                    }
   56|  9.01k|                    default: {
  ------------------
  |  Branch (56:21): [True: 9.01k, False: 53.6k]
  ------------------
   57|  9.01k|                        break;
   58|  9.30k|                    }
   59|  62.6k|                }
   60|  62.6k|            }
   61|   892k|        }
   62|       |
   63|  4.38M|        return IntRegisterID::None;
   64|  4.45M|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|  4.38M|    {
   68|  4.38M|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 710k, False: 3.67M]
  ------------------
   69|   710k|        {
   70|   710k|            const char first_char = token[0u];
   71|   710k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 49.2k, False: 661k]
  |  Branch (71:38): [True: 19.2k, False: 642k]
  ------------------
   72|  68.4k|            {
   73|  68.4k|                const char second_char = token[1u];
   74|  68.4k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 64.2k, False: 4.28k]
  |  Branch (74:43): [True: 42.8k, False: 21.3k]
  ------------------
   75|  42.8k|                {
   76|  42.8k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  42.8k|                }
   78|  68.4k|            }
   79|   710k|        }
   80|  3.67M|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 874k, False: 2.79M]
  ------------------
   81|   874k|        {
   82|   874k|            const char first_char = token[0u];
   83|   874k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 43.8k, False: 831k]
  |  Branch (83:38): [True: 21.4k, False: 809k]
  ------------------
   84|  65.2k|            {
   85|  65.2k|                const char second_char = token[1u];
   86|  65.2k|                const char third_char  = token[2u];
   87|       |
   88|  65.2k|                switch (second_char)
   89|  65.2k|                {
   90|  4.90k|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 4.90k, False: 60.3k]
  ------------------
   91|  4.90k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 3.85k, False: 1.04k]
  |  Branch (91:50): [True: 2.31k, False: 1.53k]
  ------------------
   92|  2.31k|                        {
   93|  2.31k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|  2.31k|                        }
   95|  2.58k|                        break;
   96|  4.90k|                    }
   97|  8.26k|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 8.26k, False: 57.0k]
  ------------------
   98|  8.26k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 7.13k, False: 1.13k]
  |  Branch (98:50): [True: 2.98k, False: 4.14k]
  ------------------
   99|  2.98k|                        {
  100|  2.98k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|  2.98k|                        }
  102|  5.28k|                        break;
  103|  8.26k|                    }
  104|  32.3k|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 32.3k, False: 32.9k]
  ------------------
  105|  32.3k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 18.5k, False: 13.7k]
  |  Branch (105:50): [True: 5.58k, False: 8.21k]
  ------------------
  106|  24.0k|                        {
  107|  24.0k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|  24.0k|                        }
  109|  8.21k|                        break;
  110|  32.3k|                    }
  111|  19.8k|                    default: {
  ------------------
  |  Branch (111:21): [True: 19.8k, False: 45.4k]
  ------------------
  112|  19.8k|                        break;
  113|  32.3k|                    }
  114|  65.2k|                }
  115|  65.2k|            }
  116|   874k|        }
  117|       |
  118|  4.30M|        return FloatRegisterID::None;
  119|  4.38M|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|  3.99M|    {
  123|  3.99M|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 835k, False: 3.16M]
  ------------------
  124|   835k|        {
  125|   835k|            const char c1 = token[0u];
  126|   835k|            const char c2 = token[1u];
  127|   835k|            const char c3 = token[2u];
  128|   835k|            const char c4 = token[3u];
  129|       |
  130|   835k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 29.0k, False: 805k]
  |  Branch (130:34): [True: 23.0k, False: 782k]
  |  Branch (130:49): [True: 23.3k, False: 28.7k]
  |  Branch (130:62): [True: 1.85k, False: 26.9k]
  ------------------
  131|   835k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 5.26k, False: 19.9k]
  |  Branch (131:34): [True: 17.5k, False: 2.33k]
  |  Branch (131:49): [True: 3.90k, False: 18.9k]
  |  Branch (131:62): [True: 14.5k, False: 4.39k]
  ------------------
  132|   835k|        }
  133|       |
  134|  3.16M|        return false;
  135|  3.99M|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|  4.99M|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  1.20M|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  12.1M|    {
   41|  12.1M|        return m_Type;
   42|  12.1M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  5.28M|    {
   51|  5.28M|        return m_LineNumber;
   52|  5.28M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  4.89M|    {
   56|  4.89M|        return m_Column;
   57|  4.89M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  6.66M|    {
   66|  6.66M|        return m_Text;
   67|  6.66M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   434k|    {
   80|   434k|        return m_HasHint;
   81|   434k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   488k|    {
   85|   488k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   488k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   488k|                   m_Type == Type::ImmediateInteger);
   88|   488k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   488k|        return m_Hint;
   91|   488k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  23.5k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  23.5k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  23.5k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  37.6k|    {
   51|  37.6k|        auto it = m_Iterator;
   52|   150k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 113k, False: 37.6k]
  ------------------
   53|   113k|        {
   54|   113k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 3, False: 113k]
  ------------------
   55|      3|            {
   56|      3|                return false;
   57|      3|            }
   58|   113k|        }
   59|       |
   60|  37.6k|        return true;
   61|  37.6k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  6.10M|    {
   65|  6.10M|        return m_Iterator != m_Tokens.end();
   66|  6.10M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  6.19M|    {
   70|  6.19M|        return m_Iterator == m_Tokens.end();
   71|  6.19M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  6.19M|    {
   85|  6.19M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  6.19M|        return *m_Iterator++;
   91|  6.19M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  37.6k|    {
  164|  37.6k|        return m_Iterator;
  165|  37.6k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  10.3k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  10.3k|        m_Iterator = it;
  179|  10.3k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  7.48k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  7.48k|        return m_Tokens.rbegin();
  224|  7.48k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|   186k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|   186k|        return m_Tokens.rend();
  233|   186k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  23.5k|    {
   66|  23.5k|        TokenStream tokens;
   67|       |
   68|  23.5k|        phi::string_view current_token;
   69|       |
   70|  23.5k|        phi::u64 current_line_number{1u};
   71|  23.5k|        phi::u64 current_column{1u};
   72|  23.5k|        phi::u64 token_begin{0u};
   73|       |
   74|  23.5k|        phi::boolean parsing_comment{false};
   75|       |
   76|  15.5M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 15.5M, False: 23.5k]
  ------------------
   77|  15.5M|        {
   78|  15.5M|            const char c{source.at(i)};
   79|       |
   80|  15.5M|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 680k, False: 14.8M]
  ------------------
   81|   680k|            {
   82|   680k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 110k, False: 570k]
  ------------------
   83|   110k|                {
   84|       |                    // Skip empty lines
   85|   110k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|   110k|                                        current_line_number, current_column);
   87|       |
   88|   110k|                    parsing_comment = false;
   89|   110k|                    current_line_number += 1u;
   90|   110k|                    current_column = 1u;
   91|   110k|                    continue;
   92|   110k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|   570k|                tokens.emplace_back(ParseToken(
   96|   570k|                        source.substring_view(
   97|   570k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|   570k|                                current_token.length()),
   99|   570k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|   570k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|   570k|                                    current_line_number, current_column);
  103|       |
  104|   570k|                current_token   = phi::string_view{};
  105|   570k|                parsing_comment = false;
  106|   570k|                current_line_number += 1u;
  107|   570k|                current_column = 0u;
  108|   570k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|  14.8M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 10.8k, False: 14.8M]
  |  Branch (110:34): [True: 29.8k, False: 14.8M]
  ------------------
  111|  40.6k|            {
  112|  40.6k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 21.4k, False: 19.2k]
  ------------------
  113|  21.4k|                {
  114|  21.4k|                    token_begin = i;
  115|  21.4k|                }
  116|  19.2k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 17.5k, False: 1.71k]
  ------------------
  117|  17.5k|                {
  118|  17.5k|                    tokens.emplace_back(ParseToken(
  119|  17.5k|                            source.substring_view(
  120|  17.5k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  17.5k|                                    current_token.length()),
  122|  17.5k|                            current_line_number, current_column - current_token.length()));
  123|  17.5k|                    token_begin   = i;
  124|  17.5k|                    current_token = phi::string_view{};
  125|  17.5k|                }
  126|       |
  127|  40.6k|                parsing_comment = true;
  128|  40.6k|                current_token   = source.substring_view(
  129|  40.6k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  40.6k|                        current_token.length() + 1u);
  131|  40.6k|            }
  132|  14.8M|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 70.4k, False: 14.7M]
  ------------------
  133|  70.4k|            {
  134|       |                // simply append the character
  135|  70.4k|                current_token = source.substring_view(
  136|  70.4k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|  70.4k|                        current_token.length() + 1u);
  138|  70.4k|            }
  139|  14.7M|            else
  140|  14.7M|            {
  141|       |                // Not parsing a comment
  142|  14.7M|                switch (c)
  143|  14.7M|                {
  144|   191k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 191k, False: 14.5M]
  ------------------
  145|   335k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 143k, False: 14.6M]
  ------------------
  146|   568k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 232k, False: 14.5M]
  ------------------
  147|   568k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 110k, False: 458k]
  ------------------
  148|   110k|                        {
  149|   110k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|   110k|                            continue;
  152|   110k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|   458k|                        tokens.emplace_back(ParseToken(
  156|   458k|                                source.substring_view(
  157|   458k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|   458k|                                        current_token.length()),
  159|   458k|                                current_line_number, current_column - current_token.length()));
  160|   458k|                        current_token = phi::string_view{};
  161|   458k|                        break;
  162|  1.35M|                    case ':':
  ------------------
  |  Branch (162:21): [True: 1.35M, False: 13.4M]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  1.35M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 1.18M, False: 170k]
  ------------------
  165|  1.18M|                        {
  166|  1.18M|                            current_token = source.substring_view(
  167|  1.18M|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  1.18M|                                    current_token.length() + 1u);
  169|  1.18M|                            tokens.emplace_back(ParseToken(
  170|  1.18M|                                    source.substring_view(
  171|  1.18M|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  1.18M|                                                    token_begin),
  173|  1.18M|                                            current_token.length()),
  174|  1.18M|                                    current_line_number,
  175|  1.18M|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  1.18M|                            current_token = phi::string_view{};
  178|  1.18M|                        }
  179|   170k|                        else
  180|   170k|                        {
  181|       |                            // Orphan colon
  182|   170k|                            token_begin = i;
  183|       |
  184|   170k|                            tokens.emplace_back(
  185|   170k|                                    Token::Type::Colon,
  186|   170k|                                    source.substring_view(
  187|   170k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|   170k|                                                    token_begin),
  189|   170k|                                            1u),
  190|   170k|                                    current_line_number, current_column);
  191|   170k|                        }
  192|  1.35M|                        break;
  193|  1.07M|                    case ',':
  ------------------
  |  Branch (193:21): [True: 1.07M, False: 13.7M]
  ------------------
  194|  1.82M|                    case '(':
  ------------------
  |  Branch (194:21): [True: 750k, False: 14.0M]
  ------------------
  195|  1.88M|                    case ')':
  ------------------
  |  Branch (195:21): [True: 63.0k, False: 14.7M]
  ------------------
  196|  1.88M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 1.20M, False: 679k]
  ------------------
  197|  1.20M|                        {
  198|  1.20M|                            tokens.emplace_back(ParseToken(
  199|  1.20M|                                    source.substring_view(
  200|  1.20M|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  1.20M|                                                    token_begin),
  202|  1.20M|                                            current_token.length()),
  203|  1.20M|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  1.20M|                            current_token = phi::string_view{};
  206|  1.20M|                        }
  207|       |
  208|  1.88M|                        Token::Type type;
  209|  1.88M|                        switch (c)
  210|  1.88M|                        {
  211|  1.07M|                            case ',':
  ------------------
  |  Branch (211:29): [True: 1.07M, False: 813k]
  ------------------
  212|  1.07M|                                type = Token::Type::Comma;
  213|  1.07M|                                break;
  214|   750k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 750k, False: 1.13M]
  ------------------
  215|   750k|                                type = Token::Type::OpenBracket;
  216|   750k|                                break;
  217|  63.0k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 63.0k, False: 1.82M]
  ------------------
  218|  63.0k|                                type = Token::Type::ClosingBracket;
  219|  63.0k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 1.88M]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  1.88M|#endif
  225|  1.88M|                        }
  226|       |
  227|  1.88M|                        token_begin = i;
  228|       |
  229|  1.88M|                        tokens.emplace_back(
  230|  1.88M|                                type,
  231|  1.88M|                                source.substring_view(
  232|  1.88M|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  1.88M|                                        1u),
  234|  1.88M|                                current_line_number, current_column);
  235|  1.88M|                        break;
  236|       |
  237|  10.9M|                    default:
  ------------------
  |  Branch (237:21): [True: 10.9M, False: 3.81M]
  ------------------
  238|  10.9M|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 3.41M, False: 7.54M]
  ------------------
  239|  3.41M|                        {
  240|  3.41M|                            token_begin = i;
  241|  3.41M|                        }
  242|       |
  243|       |                        // simply append the character
  244|  10.9M|                        current_token = source.substring_view(
  245|  10.9M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|  10.9M|                                current_token.length() + 1u);
  247|  14.7M|                }
  248|  14.7M|            }
  249|       |
  250|  15.3M|            current_column += 1u;
  251|  15.3M|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  23.5k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 16.1k, False: 7.36k]
  ------------------
  255|  16.1k|        {
  256|  16.1k|            tokens.emplace_back(
  257|  16.1k|                    ParseToken(source.substring_view(
  258|  16.1k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  16.1k|                                       current_token.length()),
  260|  16.1k|                               current_line_number, current_column - current_token.length()));
  261|  16.1k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  23.5k|        tokens.finalize();
  265|       |
  266|  23.5k|        return tokens;
  267|  23.5k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|  3.45M|    {
   14|  3.45M|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 39.6k, False: 3.41M]
  |  Branch (14:13): [True: 35.1k, False: 3.42M]
  |  Branch (14:36): [True: 35.1k, False: 4.53k]
  ------------------
   15|  35.1k|        {
   16|  35.1k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  35.1k|            if (number)
  ------------------
  |  Branch (18:17): [True: 11.0k, False: 24.0k]
  ------------------
   19|  11.0k|            {
   20|  11.0k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  11.0k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  11.0k|            }
   23|       |
   24|  24.0k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  35.1k|        }
   26|       |
   27|  3.42M|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 10.5k, False: 3.41M]
  |  Branch (27:13): [True: 38.9k, False: 3.38M]
  |  Branch (27:36): [True: 28.4k, False: 3.38M]
  ------------------
   28|  38.9k|        {
   29|  38.9k|            return {Token::Type::Comment, token, line_number, column};
   30|  38.9k|        }
   31|       |
   32|  3.38M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 108k, False: 3.27M]
  ------------------
   33|   108k|        {
   34|   108k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|   108k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|   108k|        }
   37|       |
   38|  3.27M|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 14.4k, False: 3.25M]
  ------------------
   39|  14.4k|        {
   40|  14.4k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  14.4k|        }
   42|       |
   43|  3.25M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 58.8k, False: 3.20M]
  ------------------
   44|  58.8k|        {
   45|  58.8k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  58.8k|                    static_cast<phi::uint32_t>(id)};
   47|  58.8k|        }
   48|       |
   49|  3.20M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 67.3k, False: 3.13M]
  ------------------
   50|  67.3k|        {
   51|  67.3k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  67.3k|                    static_cast<phi::uint32_t>(id)};
   53|  67.3k|        }
   54|       |
   55|  3.13M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 955k, False: 2.17M]
  ------------------
   56|   955k|        {
   57|   955k|            return {Token::Type::OpCode, token, line_number, column,
   58|   955k|                    static_cast<phi::uint32_t>(opcode)};
   59|   955k|        }
   60|       |
   61|  2.17M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  3.13M|    }

LLVMFuzzerTestOneInput:
    8|  23.5k|{
    9|  23.5k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   10|       |
   11|       |    // Parse it
   12|  23.5k|    dlx::Parser::Parse(source);
   13|       |
   14|  23.5k|    return 0;
   15|  23.5k|}


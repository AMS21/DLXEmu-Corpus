_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  1.81M|        {
  169|  1.81M|            PHI_ASSERT(index < 3u);
  170|       |
  171|  1.81M|            switch (index.unsafe())
  172|  1.81M|            {
  173|   829k|                case 0:
  ------------------
  |  Branch (173:17): [True: 829k, False: 983k]
  ------------------
  174|   829k|                    return m_Arg1Type;
  175|       |
  176|   502k|                case 1:
  ------------------
  |  Branch (176:17): [True: 502k, False: 1.31M]
  ------------------
  177|   502k|                    return m_Arg2Type;
  178|       |
  179|   481k|                case 2:
  ------------------
  |  Branch (179:17): [True: 481k, False: 1.33M]
  ------------------
  180|   481k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 1.81M]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  1.81M|#endif
  187|  1.81M|            }
  188|  1.81M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   459k|        {
  195|   459k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   459k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 447k, False: 12.3k]
  ------------------
  199|   447k|            {
  200|   447k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   447k|            }
  202|   459k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 255k, False: 203k]
  ------------------
  203|   255k|            {
  204|   255k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   255k|            }
  206|   459k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 143k, False: 316k]
  ------------------
  207|   143k|            {
  208|   143k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   143k|            }
  210|       |
  211|   459k|            return number_of_argument_required;
  212|   459k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   459k|        {
  221|   459k|            return m_Executor;
  222|   459k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   355k|    {
   38|   355k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   355k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   355k|                                         static_cast<underlying_t>(rhs));
   42|   355k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   355k|    {
   55|   355k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   355k|        return static_cast<underlying_t>(type & test) != 0;
   58|   355k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  1.42M|    {
   31|  1.42M|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 19.8k, False: 1.40M]
  ------------------
   32|  19.8k|        {
   33|  19.8k|            return true;
   34|  19.8k|        }
   35|       |
   36|  1.40M|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 5.18k, False: 1.39M]
  ------------------
   37|  5.18k|        {
   38|  5.18k|            return true;
   39|  5.18k|        }
   40|       |
   41|  1.39M|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 528k, False: 869k]
  ------------------
   42|   528k|        {
   43|   528k|            return true;
   44|   528k|        }
   45|       |
   46|   869k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 4.29k, False: 864k]
  ------------------
   47|  4.29k|        {
   48|  4.29k|            return true;
   49|  4.29k|        }
   50|       |
   51|   864k|        return false;
   52|   869k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|   864k|    {
   56|   864k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 864k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|   864k|        const char first_char = token.at(0u);
   62|       |
   63|   864k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 179k, False: 685k]
  ------------------
   64|   179k|        {
   65|   179k|            return phi::is_alpha(first_char);
   66|   179k|        }
   67|       |
   68|   685k|        phi::boolean just_under_scores = (first_char == '_');
   69|   685k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 118k, False: 567k]
  |  Branch (69:13): [True: 96.0k, False: 589k]
  |  Branch (69:43): [True: 96.0k, False: 21.9k]
  ------------------
   70|  96.0k|        {
   71|  96.0k|            return false;
   72|  96.0k|        }
   73|       |
   74|  2.21M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 1.85M, False: 365k]
  ------------------
   75|  1.85M|        {
   76|  1.85M|            const char c{token.at(index)};
   77|       |
   78|  1.85M|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 1.60M, False: 244k]
  ------------------
   79|  1.60M|            {
   80|  1.60M|                just_under_scores = false;
   81|  1.60M|            }
   82|   244k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 21.3k, False: 223k]
  ------------------
   83|  21.3k|            {
   84|  21.3k|                continue;
   85|  21.3k|            }
   86|   223k|            else
   87|   223k|            {
   88|   223k|                return false;
   89|   223k|            }
   90|  1.85M|        }
   91|       |
   92|   365k|        return !just_under_scores;
   93|   589k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|  3.97M|    {
  100|  3.97M|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 3.97M]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|  3.97M|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 661k, False: 3.31M]
  ------------------
  106|   661k|        {
  107|   661k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 91.6k, False: 570k]
  ------------------
  108|  91.6k|            {
  109|  91.6k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  91.6k|            }
  111|       |
  112|   570k|            return {};
  113|   661k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|  3.31M|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 35.0k, False: 3.28M]
  ------------------
  117|  35.0k|        {
  118|  35.0k|            return {};
  119|  35.0k|        }
  120|       |
  121|  3.28M|        std::int32_t number{0};
  122|  3.28M|        phi::boolean is_negative{false};
  123|  3.28M|        phi::boolean starts_with_zero{false};
  124|  3.28M|        phi::boolean parsing_binary{false};
  125|  3.28M|        phi::boolean parsing_octal{false};
  126|  3.28M|        phi::boolean parsing_hexadecimal{false};
  127|  3.28M|        phi::boolean parsed_something{false};
  128|  3.28M|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|  3.67M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 3.61M, False: 58.8k]
  ------------------
  133|  3.61M|        {
  134|  3.61M|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|  3.61M|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 3.28M, False: 335k]
  ------------------
  138|  3.28M|            {
  139|  3.28M|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 7.05k, False: 3.27M]
  ------------------
  140|  7.05k|                {
  141|  7.05k|                    continue;
  142|  7.05k|                }
  143|       |
  144|  3.27M|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 25.0k, False: 3.24M]
  ------------------
  145|  25.0k|                {
  146|  25.0k|                    is_negative = true;
  147|  25.0k|                    continue;
  148|  25.0k|                }
  149|       |
  150|  3.24M|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 50.2k, False: 3.19M]
  ------------------
  151|  50.2k|                {
  152|  50.2k|                    starts_with_zero = true;
  153|  50.2k|                    continue;
  154|  50.2k|                }
  155|       |
  156|  3.19M|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 7.07k, False: 3.19M]
  ------------------
  157|  7.07k|                {
  158|  7.07k|                    return {};
  159|  7.07k|                }
  160|  3.19M|            }
  161|       |
  162|       |            // Second character
  163|  3.52M|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 140k, False: 3.38M]
  ------------------
  164|   140k|            {
  165|   140k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 50.2k, False: 90.3k]
  ------------------
  166|  50.2k|                {
  167|       |                    // Binary
  168|  50.2k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 6.67k, False: 43.6k]
  |  Branch (168:37): [True: 1.65k, False: 41.9k]
  ------------------
  169|  8.33k|                    {
  170|  8.33k|                        parsing_binary = true;
  171|  8.33k|                        continue;
  172|  8.33k|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  41.9k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 17.3k, False: 24.6k]
  |  Branch (175:37): [True: 4.17k, False: 20.4k]
  ------------------
  176|  21.5k|                    {
  177|  21.5k|                        parsing_hexadecimal = true;
  178|  21.5k|                        continue;
  179|  21.5k|                    }
  180|       |
  181|       |                    // Octal
  182|  20.4k|                    parsing_octal = true;
  183|  20.4k|                }
  184|   140k|            }
  185|       |
  186|       |            // Handle seperators
  187|  3.49M|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 9.28k, False: 3.48M]
  ------------------
  188|  9.28k|            {
  189|  9.28k|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 4.32k, False: 4.96k]
  ------------------
  190|  4.32k|                {
  191|  4.32k|                    return {};
  192|  4.32k|                }
  193|       |
  194|  4.96k|                parsed_separator = true;
  195|  4.96k|                continue;
  196|  9.28k|            }
  197|       |
  198|       |            // Check for over/underflow
  199|  3.48M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 94.0k, False: 3.39M]
  |  Branch (199:32): [True: 4.32k, False: 89.7k]
  ------------------
  200|  4.32k|            {
  201|       |                // Would underflow
  202|  4.32k|                return {};
  203|  4.32k|            }
  204|  3.48M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 3.39M, False: 89.7k]
  |  Branch (204:17): [True: 10.8k, False: 3.47M]
  |  Branch (204:33): [True: 10.8k, False: 3.38M]
  ------------------
  205|  10.8k|            {
  206|       |                // Would overflow
  207|  10.8k|                return {};
  208|  10.8k|            }
  209|       |
  210|  3.47M|            parsed_separator = false;
  211|  3.47M|            parsed_something = true;
  212|       |
  213|  3.47M|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 10.0k, False: 3.46M]
  ------------------
  214|  10.0k|            {
  215|  10.0k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 2.81k, False: 7.19k]
  ------------------
  216|  2.81k|                {
  217|  2.81k|                    return {};
  218|  2.81k|                }
  219|       |
  220|  7.19k|                number <<= 1;
  221|  7.19k|                number |= (c - '0');
  222|  7.19k|            }
  223|  3.46M|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 21.0k, False: 3.44M]
  ------------------
  224|  21.0k|            {
  225|  21.0k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 13.9k, False: 7.09k]
  ------------------
  226|  13.9k|                {
  227|  13.9k|                    return {};
  228|  13.9k|                }
  229|       |
  230|  7.09k|                number <<= 3;
  231|  7.09k|                number |= (c - '0');
  232|  7.09k|            }
  233|  3.44M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 32.3k, False: 3.40M]
  ------------------
  234|  32.3k|            {
  235|  32.3k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 17.3k, False: 15.0k]
  ------------------
  236|  17.3k|                {
  237|  17.3k|                    return {};
  238|  17.3k|                }
  239|       |
  240|  15.0k|                number <<= 4;
  241|  15.0k|                number |= phi::hex_digit_value(c).unsafe();
  242|  15.0k|            }
  243|  3.40M|            else
  244|  3.40M|            {
  245|  3.40M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 3.15M, False: 254k]
  ------------------
  246|  3.15M|                {
  247|  3.15M|                    return {};
  248|  3.15M|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|   254k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 81.3k, False: 173k]
  |  Branch (251:36): [True: 7.23k, False: 74.1k]
  ------------------
  252|  7.23k|                {
  253|  7.23k|                    return {};
  254|  7.23k|                }
  255|       |
  256|   247k|                number *= 10;
  257|   247k|                number += (c - '0');
  258|   247k|            }
  259|  3.47M|        }
  260|       |
  261|  58.8k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 55.6k, False: 3.11k]
  ------------------
  262|  55.6k|        {
  263|       |            // Check for over/underflow
  264|  55.6k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 11.1k, False: 44.5k]
  |  Branch (264:32): [True: 9.39k, False: 1.78k]
  ------------------
  265|  9.39k|            {
  266|       |                // Would underflow
  267|  9.39k|                return {};
  268|  9.39k|            }
  269|  46.2k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 44.5k, False: 1.78k]
  |  Branch (269:17): [True: 5.01k, False: 41.2k]
  |  Branch (269:33): [True: 5.01k, False: 39.4k]
  ------------------
  270|  5.01k|            {
  271|       |                // Would overflow
  272|  5.01k|                return {};
  273|  5.01k|            }
  274|       |
  275|  41.2k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 1.78k, False: 39.4k]
  ------------------
  276|  1.78k|            {
  277|  1.78k|                return static_cast<std::int16_t>(-number);
  278|  1.78k|            }
  279|       |
  280|  39.4k|            return static_cast<std::int16_t>(number);
  281|  41.2k|        }
  282|       |
  283|  3.11k|        return {};
  284|  58.8k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   225k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   225k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 3.27M, False: 0]
  ------------------
   64|  3.27M|            {
   65|  3.27M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 225k, False: 3.04M]
  ------------------
   66|   225k|                {
   67|   225k|                    return &token;
   68|   225k|                }
   69|  3.27M|            }
   70|       |
   71|      0|            return nullptr;
   72|   225k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  1.00M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.00M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.00M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  4.02M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  4.02M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  4.02M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  2.14M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.14M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.14M|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   459k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|   131k|    {
   25|   131k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|   131k|        switch (argument_number.unsafe())
   28|   131k|        {
   29|  96.1k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 96.1k, False: 35.5k]
  ------------------
   30|  96.1k|                m_Arg1 = argument;
   31|  96.1k|                break;
   32|  21.8k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 21.8k, False: 109k]
  ------------------
   33|  21.8k|                m_Arg2 = argument;
   34|  21.8k|                break;
   35|  13.6k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 13.6k, False: 118k]
  ------------------
   36|  13.6k|                m_Arg3 = argument;
   37|  13.6k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 131k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|   131k|#endif
   42|   131k|        }
   43|   131k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  1.51M|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  19.9k|    {
  171|  19.9k|        InstructionArgument arg;
  172|  19.9k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  19.9k|        arg.register_int.register_id = id;
  174|  19.9k|        return arg;
  175|  19.9k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  37.8k|    {
  179|  37.8k|        InstructionArgument arg;
  180|  37.8k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  37.8k|        arg.register_float.register_id = id;
  182|  37.8k|        return arg;
  183|  37.8k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  8.55k|    {
  187|  8.55k|        InstructionArgument arg;
  188|  8.55k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  8.55k|        arg.immediate_value.signed_value = value;
  190|  8.55k|        return arg;
  191|  8.55k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|  11.9k|    {
  196|  11.9k|        InstructionArgument arg;
  197|  11.9k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|  11.9k|        arg.address_displacement.register_id  = id;
  199|  11.9k|        arg.address_displacement.displacement = displacement;
  200|  11.9k|        return arg;
  201|  11.9k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  204|  53.3k|    {
  205|  53.3k|        InstructionArgument arg;
  206|  53.3k|        arg.m_Type           = ArgumentType::Label;
  207|  53.3k|        arg.label.label_name = label_name;
  208|  53.3k|        return arg;
  209|  53.3k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   459k|    {
  453|   459k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   459k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|  5.04M|    {
   24|  5.04M|        switch (token.length().unsafe())
   25|  5.04M|        {
   26|       |            // 1 character OpCodes
   27|   735k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 735k, False: 4.31M]
  ------------------
   28|   735k|                const char c1 = token[0u];
   29|       |
   30|   735k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 201k, False: 533k]
  ------------------
   31|   201k|                {
   32|   201k|                    return OpCode::J;
   33|   201k|                }
   34|   533k|                break;
   35|   735k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|   780k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 780k, False: 4.26M]
  ------------------
   39|   780k|                const char c1 = token[0u];
   40|   780k|                const char c2 = token[1u];
   41|       |
   42|   780k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 497k, False: 282k]
  ------------------
   43|   780k|                {
   44|  14.5k|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 14.5k, False: 765k]
  ------------------
   45|  22.7k|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 8.29k, False: 771k]
  ------------------
   46|  22.7k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 9.39k, False: 13.4k]
  ------------------
   47|  9.39k|                        {
   48|  9.39k|                            return OpCode::JR;
   49|  9.39k|                        }
   50|  13.4k|                        break;
   51|       |
   52|  28.2k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 28.2k, False: 751k]
  ------------------
   53|  55.3k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 27.0k, False: 753k]
  ------------------
   54|  55.3k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 22.6k, False: 32.6k]
  ------------------
   55|  55.3k|                        {
   56|  8.49k|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 8.49k, False: 46.8k]
  ------------------
   57|  14.1k|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 5.61k, False: 49.7k]
  ------------------
   58|  14.1k|                                return OpCode::LB;
   59|  1.90k|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 1.90k, False: 53.4k]
  ------------------
   60|  2.39k|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 496, False: 54.8k]
  ------------------
   61|  2.39k|                                return OpCode::LD;
   62|  2.05k|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 2.05k, False: 53.3k]
  ------------------
   63|  5.12k|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 3.06k, False: 52.2k]
  ------------------
   64|  5.12k|                                return OpCode::LF;
   65|  3.28k|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 3.28k, False: 52.0k]
  ------------------
   66|  5.63k|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 2.34k, False: 53.0k]
  ------------------
   67|  5.63k|                                return OpCode::LH;
   68|  1.71k|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 1.71k, False: 53.6k]
  ------------------
   69|  5.41k|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 3.70k, False: 51.6k]
  ------------------
   70|  5.41k|                                return OpCode::LW;
   71|  55.3k|                        }
   72|  22.6k|                        break;
   73|  22.6k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 7.89k, False: 772k]
  ------------------
   74|  23.2k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 15.3k, False: 764k]
  ------------------
   75|  23.2k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 12.2k, False: 10.9k]
  ------------------
   76|  12.2k|                        {
   77|  12.2k|                            return OpCode::OR;
   78|  12.2k|                        }
   79|  10.9k|                        break;
   80|   132k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 132k, False: 647k]
  ------------------
   81|   180k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 48.2k, False: 731k]
  ------------------
   82|   180k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 42.7k, False: 138k]
  ------------------
   83|   180k|                        {
   84|  7.80k|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 7.80k, False: 173k]
  ------------------
   85|  17.0k|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 9.29k, False: 171k]
  ------------------
   86|  17.0k|                                return OpCode::SB;
   87|  47.5k|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 47.5k, False: 133k]
  ------------------
   88|  59.0k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 11.4k, False: 169k]
  ------------------
   89|  59.0k|                                return OpCode::SD;
   90|  6.44k|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 6.44k, False: 174k]
  ------------------
   91|  8.38k|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 1.94k, False: 178k]
  ------------------
   92|  8.38k|                                return OpCode::SF;
   93|  12.3k|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 12.3k, False: 168k]
  ------------------
   94|  18.0k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 5.64k, False: 175k]
  ------------------
   95|  18.0k|                                return OpCode::SH;
   96|  8.44k|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 8.44k, False: 172k]
  ------------------
   97|  35.5k|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 27.1k, False: 153k]
  ------------------
   98|  35.5k|                                return OpCode::SW;
   99|   180k|                        }
  100|  42.7k|                        break;
  101|   780k|                }
  102|   587k|                break;
  103|   780k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|   980k|            case 3: {
  ------------------
  |  Branch (106:13): [True: 980k, False: 4.06M]
  ------------------
  107|   980k|                const char c1 = token[0u];
  108|   980k|                const char c2 = token[1u];
  109|   980k|                const char c3 = token[2u];
  110|       |
  111|   980k|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 282k, False: 698k]
  ------------------
  112|   980k|                {
  113|  47.3k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 47.3k, False: 933k]
  ------------------
  114|  59.1k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 11.7k, False: 968k]
  ------------------
  115|  59.1k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 17.0k, False: 42.0k]
  |  Branch (115:29): [True: 14.6k, False: 44.4k]
  |  Branch (115:45): [True: 14.6k, False: 2.39k]
  ------------------
  116|  14.6k|                        {
  117|  14.6k|                            return OpCode::ADD;
  118|  14.6k|                        }
  119|  44.4k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 23.2k, False: 21.1k]
  |  Branch (119:34): [True: 7.41k, False: 37.0k]
  |  Branch (119:50): [True: 7.41k, False: 15.8k]
  ------------------
  120|  7.41k|                        {
  121|  7.41k|                            return OpCode::AND;
  122|  7.41k|                        }
  123|  37.0k|                        break;
  124|       |
  125|  37.0k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 8.01k, False: 972k]
  ------------------
  126|  55.3k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 47.3k, False: 933k]
  ------------------
  127|  55.3k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 36.6k, False: 18.6k]
  |  Branch (127:29): [True: 26.9k, False: 28.3k]
  |  Branch (127:45): [True: 26.9k, False: 9.70k]
  ------------------
  128|  26.9k|                        {
  129|  26.9k|                            return OpCode::DIV;
  130|  26.9k|                        }
  131|  28.3k|                        break;
  132|       |
  133|  28.3k|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 4.57k, False: 976k]
  ------------------
  134|  31.7k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 27.1k, False: 953k]
  ------------------
  135|  31.7k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 27.8k, False: 3.85k]
  ------------------
  136|  27.8k|                        {
  137|  27.8k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 14.2k, False: 13.6k]
  ------------------
  138|  14.2k|                            {
  139|  14.2k|                                return OpCode::EQD;
  140|  14.2k|                            }
  141|  13.6k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 9.92k, False: 3.73k]
  ------------------
  142|  9.92k|                            {
  143|  9.92k|                                return OpCode::EQF;
  144|  9.92k|                            }
  145|  27.8k|                        }
  146|  7.58k|                        break;
  147|       |
  148|  53.1k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 53.1k, False: 927k]
  ------------------
  149|  69.0k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 15.8k, False: 964k]
  ------------------
  150|  69.0k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 25.7k, False: 43.2k]
  ------------------
  151|  25.7k|                        {
  152|  25.7k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 17.1k, False: 8.64k]
  ------------------
  153|  17.1k|                            {
  154|  17.1k|                                return OpCode::GED;
  155|  17.1k|                            }
  156|  8.64k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 3.46k, False: 5.18k]
  ------------------
  157|  3.46k|                            {
  158|  3.46k|                                return OpCode::GEF;
  159|  3.46k|                            }
  160|  25.7k|                        }
  161|  43.2k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 15.9k, False: 27.3k]
  ------------------
  162|  15.9k|                        {
  163|  15.9k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 5.60k, False: 10.3k]
  ------------------
  164|  5.60k|                            {
  165|  5.60k|                                return OpCode::GTD;
  166|  5.60k|                            }
  167|  10.3k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 5.70k, False: 4.62k]
  ------------------
  168|  5.70k|                            {
  169|  5.70k|                                return OpCode::GTF;
  170|  5.70k|                            }
  171|  10.3k|                        }
  172|  37.1k|                        break;
  173|       |
  174|  37.1k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 5.72k, False: 974k]
  ------------------
  175|  24.6k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 18.9k, False: 961k]
  ------------------
  176|  24.6k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 18.0k, False: 6.59k]
  |  Branch (176:29): [True: 13.9k, False: 10.7k]
  |  Branch (176:45): [True: 13.9k, False: 4.16k]
  ------------------
  177|  13.9k|                        {
  178|  13.9k|                            return OpCode::JAL;
  179|  13.9k|                        }
  180|  10.7k|                        break;
  181|       |
  182|  39.8k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 39.8k, False: 940k]
  ------------------
  183|   108k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 68.6k, False: 911k]
  ------------------
  184|   108k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 7.73k, False: 100k]
  ------------------
  185|   108k|                        {
  186|  24.4k|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 24.4k, False: 84.0k]
  ------------------
  187|  30.1k|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 5.76k, False: 102k]
  ------------------
  188|  30.1k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 14.3k, False: 15.8k]
  ------------------
  189|  14.3k|                                {
  190|  14.3k|                                    return OpCode::LBU;
  191|  14.3k|                                }
  192|  15.8k|                                break;
  193|       |
  194|  15.8k|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 14.0k, False: 94.3k]
  ------------------
  195|  21.6k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 7.55k, False: 100k]
  ------------------
  196|  21.6k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 7.94k, False: 13.6k]
  ------------------
  197|  7.94k|                                {
  198|  7.94k|                                    return OpCode::LED;
  199|  7.94k|                                }
  200|  13.6k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 10.2k, False: 3.44k]
  ------------------
  201|  10.2k|                                {
  202|  10.2k|                                    return OpCode::LEF;
  203|  10.2k|                                }
  204|  3.44k|                                break;
  205|       |
  206|  3.44k|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 2.16k, False: 106k]
  ------------------
  207|  16.3k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 14.1k, False: 94.2k]
  ------------------
  208|  16.3k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 10.7k, False: 5.59k]
  ------------------
  209|  10.7k|                                {
  210|  10.7k|                                    return OpCode::LHI;
  211|  10.7k|                                }
  212|  5.59k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 3.36k, False: 2.22k]
  ------------------
  213|  3.36k|                                {
  214|  3.36k|                                    return OpCode::LHU;
  215|  3.36k|                                }
  216|  2.22k|                                break;
  217|       |
  218|  8.21k|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 8.21k, False: 100k]
  ------------------
  219|  16.1k|                            case 't':
  ------------------
  |  Branch (219:29): [True: 7.92k, False: 100k]
  ------------------
  220|  16.1k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 9.42k, False: 6.71k]
  ------------------
  221|  9.42k|                                {
  222|  9.42k|                                    return OpCode::LTD;
  223|  9.42k|                                }
  224|  6.71k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 4.04k, False: 2.67k]
  ------------------
  225|  4.04k|                                {
  226|  4.04k|                                    return OpCode::LTF;
  227|  4.04k|                                }
  228|  2.67k|                                break;
  229|       |
  230|  4.98k|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 4.98k, False: 103k]
  ------------------
  231|  16.4k|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 11.4k, False: 97.0k]
  ------------------
  232|  16.4k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 8.52k, False: 7.89k]
  ------------------
  233|  8.52k|                                {
  234|  8.52k|                                    return OpCode::LWU;
  235|  8.52k|                                }
  236|  7.89k|                                break;
  237|   108k|                        }
  238|  39.8k|                        break;
  239|       |
  240|  39.8k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 7.22k, False: 973k]
  ------------------
  241|  35.0k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 27.7k, False: 952k]
  ------------------
  242|  35.0k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 21.2k, False: 13.8k]
  ------------------
  243|  21.2k|                        {
  244|  21.2k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 8.04k, False: 13.1k]
  ------------------
  245|  8.04k|                            {
  246|  8.04k|                                return OpCode::NED;
  247|  8.04k|                            }
  248|  13.1k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 8.75k, False: 4.41k]
  ------------------
  249|  8.75k|                            {
  250|  8.75k|                                return OpCode::NEF;
  251|  8.75k|                            }
  252|  21.2k|                        }
  253|  13.8k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 7.52k, False: 6.27k]
  |  Branch (253:34): [True: 5.42k, False: 8.38k]
  |  Branch (253:50): [True: 5.42k, False: 2.10k]
  ------------------
  254|  5.42k|                        {
  255|  5.42k|                            return OpCode::NOP;
  256|  5.42k|                        }
  257|       |
  258|  12.7k|                        break;
  259|       |
  260|  12.7k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 7.82k, False: 972k]
  ------------------
  261|  28.5k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 20.7k, False: 959k]
  ------------------
  262|  28.5k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 18.6k, False: 9.91k]
  |  Branch (262:29): [True: 12.4k, False: 16.0k]
  |  Branch (262:45): [True: 12.4k, False: 6.14k]
  ------------------
  263|  12.4k|                        {
  264|  12.4k|                            return OpCode::ORI;
  265|  12.4k|                        }
  266|  16.0k|                        break;
  267|       |
  268|   144k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 144k, False: 836k]
  ------------------
  269|   267k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 123k, False: 857k]
  ------------------
  270|   267k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 29.7k, False: 237k]
  ------------------
  271|   267k|                        {
  272|  20.8k|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 20.8k, False: 246k]
  ------------------
  273|  25.4k|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 4.52k, False: 263k]
  ------------------
  274|  25.4k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 13.8k, False: 11.5k]
  ------------------
  275|  13.8k|                                {
  276|  13.8k|                                    return OpCode::SBU;
  277|  13.8k|                                }
  278|  11.5k|                                break;
  279|       |
  280|  11.5k|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 9.19k, False: 258k]
  ------------------
  281|  16.0k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 6.90k, False: 260k]
  ------------------
  282|  16.0k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 9.01k, False: 7.08k]
  ------------------
  283|  9.01k|                                {
  284|  9.01k|                                    return OpCode::SEQ;
  285|  9.01k|                                }
  286|  7.08k|                                break;
  287|       |
  288|  17.8k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 17.8k, False: 249k]
  ------------------
  289|  28.5k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 10.7k, False: 256k]
  ------------------
  290|  28.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 8.33k, False: 20.2k]
  ------------------
  291|  8.33k|                                {
  292|  8.33k|                                    return OpCode::SGE;
  293|  8.33k|                                }
  294|  20.2k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 7.71k, False: 12.5k]
  ------------------
  295|  7.71k|                                {
  296|  7.71k|                                    return OpCode::SGT;
  297|  7.71k|                                }
  298|  12.5k|                                break;
  299|       |
  300|  12.5k|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 4.37k, False: 263k]
  ------------------
  301|  9.61k|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 5.24k, False: 262k]
  ------------------
  302|  9.61k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 8.11k, False: 1.49k]
  ------------------
  303|  8.11k|                                {
  304|  8.11k|                                    return OpCode::SHU;
  305|  8.11k|                                }
  306|  1.49k|                                break;
  307|       |
  308|  24.1k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 24.1k, False: 243k]
  ------------------
  309|  58.0k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 33.9k, False: 233k]
  ------------------
  310|  58.0k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 4.52k, False: 53.5k]
  ------------------
  311|  58.0k|                                {
  312|  5.72k|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 5.72k, False: 52.3k]
  ------------------
  313|  17.8k|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 12.1k, False: 45.9k]
  ------------------
  314|  17.8k|                                        return OpCode::SLA;
  315|       |
  316|  2.64k|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 2.64k, False: 55.4k]
  ------------------
  317|  11.3k|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 8.68k, False: 49.4k]
  ------------------
  318|  11.3k|                                        return OpCode::SLE;
  319|       |
  320|  4.86k|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 4.86k, False: 53.2k]
  ------------------
  321|  13.5k|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 8.71k, False: 49.3k]
  ------------------
  322|  13.5k|                                        return OpCode::SLL;
  323|       |
  324|  6.96k|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 6.96k, False: 51.1k]
  ------------------
  325|  10.8k|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 3.86k, False: 54.2k]
  ------------------
  326|  10.8k|                                        return OpCode::SLT;
  327|  58.0k|                                }
  328|  4.52k|                                break;
  329|       |
  330|  7.76k|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 7.76k, False: 259k]
  ------------------
  331|  19.3k|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 11.5k, False: 256k]
  ------------------
  332|  19.3k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 11.0k, False: 8.31k]
  ------------------
  333|  11.0k|                                {
  334|  11.0k|                                    return OpCode::SNE;
  335|  11.0k|                                }
  336|  8.31k|                                break;
  337|       |
  338|  21.8k|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 21.8k, False: 245k]
  ------------------
  339|  36.0k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 14.1k, False: 253k]
  ------------------
  340|  36.0k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 11.9k, False: 24.0k]
  ------------------
  341|  11.9k|                                {
  342|  11.9k|                                    return OpCode::SRA;
  343|  11.9k|                                }
  344|  24.0k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 17.1k, False: 6.87k]
  ------------------
  345|  17.1k|                                {
  346|  17.1k|                                    return OpCode::SRL;
  347|  17.1k|                                }
  348|  6.87k|                                break;
  349|       |
  350|  16.8k|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 16.8k, False: 250k]
  ------------------
  351|  24.4k|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 7.58k, False: 260k]
  ------------------
  352|  24.4k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 19.5k, False: 4.80k]
  ------------------
  353|  19.5k|                                {
  354|  19.5k|                                    return OpCode::SUB;
  355|  19.5k|                                }
  356|  4.80k|                                break;
  357|       |
  358|  4.96k|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 4.96k, False: 262k]
  ------------------
  359|  20.3k|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 15.4k, False: 252k]
  ------------------
  360|  20.3k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 6.98k, False: 13.3k]
  ------------------
  361|  6.98k|                                {
  362|  6.98k|                                    return OpCode::SWU;
  363|  6.98k|                                }
  364|  13.3k|                                break;
  365|   267k|                        }
  366|       |
  367|   111k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 11.3k, False: 969k]
  ------------------
  368|   119k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 7.49k, False: 973k]
  ------------------
  369|   119k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 15.7k, False: 103k]
  |  Branch (369:29): [True: 9.54k, False: 109k]
  |  Branch (369:45): [True: 9.54k, False: 6.25k]
  ------------------
  370|  9.54k|                        {
  371|  9.54k|                            return OpCode::XOR;
  372|  9.54k|                        }
  373|   109k|                        break;
  374|   980k|                }
  375|   581k|                break;
  376|   980k|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  1.16M|            case 4: {
  ------------------
  |  Branch (379:13): [True: 1.16M, False: 3.87M]
  ------------------
  380|  1.16M|                const char c1 = token[0u];
  381|  1.16M|                const char c2 = token[1u];
  382|  1.16M|                const char c3 = token[2u];
  383|  1.16M|                const char c4 = token[3u];
  384|       |
  385|  1.16M|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 250k, False: 917k]
  ------------------
  386|  1.16M|                {
  387|  72.4k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 72.4k, False: 1.09M]
  ------------------
  388|   134k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 62.4k, False: 1.10M]
  ------------------
  389|   134k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 7.53k, False: 127k]
  ------------------
  390|   134k|                        {
  391|  45.0k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 45.0k, False: 89.8k]
  ------------------
  392|  98.6k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 53.5k, False: 81.2k]
  ------------------
  393|  98.6k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 89.0k, False: 9.57k]
  ------------------
  394|  89.0k|                                {
  395|  89.0k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 8.43k, False: 80.5k]
  ------------------
  396|  89.0k|                                    {
  397|  17.3k|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 17.3k, False: 71.6k]
  ------------------
  398|  25.2k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 7.87k, False: 81.1k]
  ------------------
  399|  25.2k|                                            return OpCode::ADDD;
  400|       |
  401|  7.81k|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 7.81k, False: 81.2k]
  ------------------
  402|  13.0k|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 5.22k, False: 83.8k]
  ------------------
  403|  13.0k|                                            return OpCode::ADDF;
  404|       |
  405|  11.1k|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 11.1k, False: 77.9k]
  ------------------
  406|  17.6k|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 6.50k, False: 82.5k]
  ------------------
  407|  17.6k|                                            return OpCode::ADDI;
  408|       |
  409|  13.3k|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 13.3k, False: 75.6k]
  ------------------
  410|  24.6k|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 11.2k, False: 77.7k]
  ------------------
  411|  24.6k|                                            return OpCode::ADDU;
  412|  89.0k|                                    }
  413|  89.0k|                                }
  414|  18.0k|                                break;
  415|       |
  416|  18.0k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 10.9k, False: 123k]
  ------------------
  417|  28.6k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 17.7k, False: 117k]
  ------------------
  418|  28.6k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 12.8k, False: 15.7k]
  |  Branch (418:37): [True: 5.06k, False: 23.6k]
  |  Branch (418:53): [True: 5.06k, False: 7.83k]
  ------------------
  419|  5.06k|                                {
  420|  5.06k|                                    return OpCode::ANDI;
  421|  5.06k|                                }
  422|       |
  423|  23.6k|                                break;
  424|   134k|                        }
  425|  49.1k|                        break;
  426|       |
  427|  49.1k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 25.8k, False: 1.14M]
  ------------------
  428|  81.9k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 56.1k, False: 1.11M]
  ------------------
  429|  81.9k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 4.02k, False: 77.9k]
  ------------------
  430|  81.9k|                        {
  431|  12.0k|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 12.0k, False: 69.9k]
  ------------------
  432|  17.0k|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 4.99k, False: 76.9k]
  ------------------
  433|  17.0k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 10.5k, False: 6.48k]
  |  Branch (433:37): [True: 4.96k, False: 12.0k]
  |  Branch (433:53): [True: 4.96k, False: 5.56k]
  ------------------
  434|  4.96k|                                {
  435|  4.96k|                                    return OpCode::BEQZ;
  436|  4.96k|                                }
  437|  12.0k|                                break;
  438|       |
  439|  12.0k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 6.60k, False: 75.3k]
  ------------------
  440|  26.0k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 19.3k, False: 62.5k]
  ------------------
  441|  26.0k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 20.5k, False: 5.41k]
  ------------------
  442|  20.5k|                                {
  443|  20.5k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 9.61k, False: 10.9k]
  ------------------
  444|  9.61k|                                    {
  445|  9.61k|                                        return OpCode::BFPF;
  446|  9.61k|                                    }
  447|  10.9k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 8.37k, False: 2.60k]
  ------------------
  448|  8.37k|                                    {
  449|  8.37k|                                        return OpCode::BFPT;
  450|  8.37k|                                    }
  451|  20.5k|                                }
  452|  8.01k|                                break;
  453|       |
  454|  9.46k|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 9.46k, False: 72.5k]
  ------------------
  455|  34.9k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 25.4k, False: 56.5k]
  ------------------
  456|  34.9k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 30.3k, False: 4.59k]
  |  Branch (456:37): [True: 17.4k, False: 17.4k]
  |  Branch (456:53): [True: 17.4k, False: 12.8k]
  ------------------
  457|  17.4k|                                {
  458|  17.4k|                                    return OpCode::BNEZ;
  459|  17.4k|                                }
  460|  81.9k|                        }
  461|  41.5k|                        break;
  462|       |
  463|  41.5k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 10.7k, False: 1.15M]
  ------------------
  464|  88.3k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 77.6k, False: 1.09M]
  ------------------
  465|  88.3k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 71.1k, False: 17.1k]
  |  Branch (465:29): [True: 53.9k, False: 34.4k]
  |  Branch (465:45): [True: 53.9k, False: 17.2k]
  ------------------
  466|  53.9k|                        {
  467|  53.9k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 8.45k, False: 45.5k]
  ------------------
  468|  53.9k|                            {
  469|  2.97k|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 2.97k, False: 50.9k]
  ------------------
  470|  8.46k|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 5.49k, False: 48.4k]
  ------------------
  471|  8.46k|                                    return OpCode::DIVD;
  472|       |
  473|  6.56k|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 6.56k, False: 47.4k]
  ------------------
  474|  8.61k|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 2.05k, False: 51.9k]
  ------------------
  475|  8.61k|                                    return OpCode::DIVF;
  476|       |
  477|  7.00k|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 7.00k, False: 46.9k]
  ------------------
  478|  18.6k|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 11.6k, False: 42.3k]
  ------------------
  479|  18.6k|                                    return OpCode::DIVI;
  480|       |
  481|  6.76k|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 6.76k, False: 47.2k]
  ------------------
  482|  9.80k|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 3.04k, False: 50.9k]
  ------------------
  483|  9.80k|                                    return OpCode::DIVU;
  484|  53.9k|                            }
  485|  53.9k|                        }
  486|  42.8k|                        break;
  487|       |
  488|  42.8k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 2.75k, False: 1.16M]
  ------------------
  489|  28.6k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 25.8k, False: 1.14M]
  ------------------
  490|  28.6k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 25.4k, False: 3.15k]
  |  Branch (490:29): [True: 15.8k, False: 12.7k]
  |  Branch (490:45): [True: 23.5k, False: 1.95k]
  |  Branch (490:61): [True: 15.8k, False: 7.63k]
  ------------------
  491|  15.8k|                        {
  492|  15.8k|                            return OpCode::HALT;
  493|  15.8k|                        }
  494|  12.7k|                        break;
  495|       |
  496|  12.7k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 6.24k, False: 1.16M]
  ------------------
  497|  40.9k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 34.7k, False: 1.13M]
  ------------------
  498|  40.9k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 34.4k, False: 6.51k]
  |  Branch (498:29): [True: 10.6k, False: 30.2k]
  |  Branch (498:45): [True: 25.0k, False: 9.35k]
  |  Branch (498:61): [True: 10.6k, False: 14.4k]
  ------------------
  499|  10.6k|                        {
  500|  10.6k|                            return OpCode::JALR;
  501|  10.6k|                        }
  502|  30.2k|                        break;
  503|       |
  504|  30.2k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 12.8k, False: 1.15M]
  ------------------
  505|  68.7k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 55.9k, False: 1.11M]
  ------------------
  506|  68.7k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 39.6k, False: 29.1k]
  |  Branch (506:29): [True: 35.4k, False: 33.2k]
  |  Branch (506:45): [True: 35.4k, False: 4.11k]
  ------------------
  507|  35.4k|                        {
  508|  35.4k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 7.22k, False: 28.2k]
  ------------------
  509|  7.22k|                            {
  510|  7.22k|                                return OpCode::MOVD;
  511|  7.22k|                            }
  512|  28.2k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 17.8k, False: 10.3k]
  ------------------
  513|  17.8k|                            {
  514|  17.8k|                                return OpCode::MOVF;
  515|  17.8k|                            }
  516|  35.4k|                        }
  517|  33.2k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 23.6k, False: 9.65k]
  |  Branch (517:34): [True: 16.1k, False: 17.0k]
  |  Branch (517:50): [True: 18.9k, False: 4.65k]
  |  Branch (517:66): [True: 16.1k, False: 2.78k]
  ------------------
  518|  16.1k|                        {
  519|  16.1k|                            return OpCode::MULT;
  520|  16.1k|                        }
  521|  27.4k|                        break;
  522|       |
  523|   205k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 205k, False: 963k]
  ------------------
  524|   421k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 216k, False: 951k]
  ------------------
  525|   421k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 17.5k, False: 404k]
  ------------------
  526|   421k|                        {
  527|  29.0k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 29.0k, False: 392k]
  ------------------
  528|  36.3k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 7.26k, False: 414k]
  ------------------
  529|  36.3k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 29.2k, False: 7.09k]
  ------------------
  530|  29.2k|                                {
  531|  29.2k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 11.4k, False: 17.7k]
  ------------------
  532|  11.4k|                                    {
  533|  11.4k|                                        return OpCode::SEQI;
  534|  11.4k|                                    }
  535|  17.7k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 7.29k, False: 10.4k]
  ------------------
  536|  7.29k|                                    {
  537|  7.29k|                                        return OpCode::SEQU;
  538|  7.29k|                                    }
  539|  29.2k|                                }
  540|  17.5k|                                break;
  541|       |
  542|  28.5k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 28.5k, False: 393k]
  ------------------
  543|  98.5k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 70.0k, False: 351k]
  ------------------
  544|  98.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 49.9k, False: 48.6k]
  ------------------
  545|  49.9k|                                {
  546|  49.9k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 20.3k, False: 29.5k]
  ------------------
  547|  20.3k|                                    {
  548|  20.3k|                                        return OpCode::SGEI;
  549|  20.3k|                                    }
  550|  29.5k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 22.9k, False: 6.60k]
  ------------------
  551|  22.9k|                                    {
  552|  22.9k|                                        return OpCode::SGEU;
  553|  22.9k|                                    }
  554|  49.9k|                                }
  555|  48.6k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 38.5k, False: 10.1k]
  ------------------
  556|  38.5k|                                {
  557|  38.5k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 14.1k, False: 24.3k]
  ------------------
  558|  14.1k|                                    {
  559|  14.1k|                                        return OpCode::SGTI;
  560|  14.1k|                                    }
  561|  24.3k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 20.2k, False: 4.16k]
  ------------------
  562|  20.2k|                                    {
  563|  20.2k|                                        return OpCode::SGTU;
  564|  20.2k|                                    }
  565|  38.5k|                                }
  566|  20.8k|                                break;
  567|       |
  568|  30.5k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 30.5k, False: 391k]
  ------------------
  569|   109k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 78.6k, False: 342k]
  ------------------
  570|   109k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 6.91k, False: 102k]
  ------------------
  571|   109k|                                {
  572|  8.21k|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 8.21k, False: 100k]
  ------------------
  573|  14.6k|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 6.43k, False: 102k]
  ------------------
  574|  14.6k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 9.78k, False: 4.85k]
  ------------------
  575|  9.78k|                                        {
  576|  9.78k|                                            return OpCode::SLAI;
  577|  9.78k|                                        }
  578|  4.85k|                                        break;
  579|       |
  580|  20.9k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 20.9k, False: 88.2k]
  ------------------
  581|  25.0k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 4.05k, False: 105k]
  ------------------
  582|  25.0k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 10.6k, False: 14.3k]
  ------------------
  583|  10.6k|                                        {
  584|  10.6k|                                            return OpCode::SLEI;
  585|  10.6k|                                        }
  586|  14.3k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 11.2k, False: 3.06k]
  ------------------
  587|  11.2k|                                        {
  588|  11.2k|                                            return OpCode::SLEU;
  589|  11.2k|                                        }
  590|  3.06k|                                        break;
  591|       |
  592|  4.26k|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 4.26k, False: 104k]
  ------------------
  593|  15.5k|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 11.3k, False: 97.9k]
  ------------------
  594|  15.5k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 10.4k, False: 5.08k]
  ------------------
  595|  10.4k|                                        {
  596|  10.4k|                                            return OpCode::SLLI;
  597|  10.4k|                                        }
  598|  5.08k|                                        break;
  599|       |
  600|  28.8k|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 28.8k, False: 80.4k]
  ------------------
  601|  47.0k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 18.2k, False: 90.9k]
  ------------------
  602|  47.0k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 13.0k, False: 33.9k]
  ------------------
  603|  13.0k|                                        {
  604|  13.0k|                                            return OpCode::SLTI;
  605|  13.0k|                                        }
  606|  33.9k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 19.4k, False: 14.5k]
  ------------------
  607|  19.4k|                                        {
  608|  19.4k|                                            return OpCode::SLTU;
  609|  19.4k|                                        }
  610|  14.5k|                                        break;
  611|   109k|                                }
  612|       |
  613|  38.1k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 3.72k, False: 417k]
  ------------------
  614|  76.5k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 38.3k, False: 383k]
  ------------------
  615|  76.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 42.0k, False: 34.5k]
  ------------------
  616|  42.0k|                                {
  617|  42.0k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 11.0k, False: 30.9k]
  ------------------
  618|  11.0k|                                    {
  619|  11.0k|                                        return OpCode::SNEI;
  620|  11.0k|                                    }
  621|  30.9k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 16.1k, False: 14.8k]
  ------------------
  622|  16.1k|                                    {
  623|  16.1k|                                        return OpCode::SNEU;
  624|  16.1k|                                    }
  625|  42.0k|                                }
  626|  49.4k|                                break;
  627|       |
  628|  49.4k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 21.0k, False: 400k]
  ------------------
  629|  41.0k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 19.9k, False: 401k]
  ------------------
  630|  41.0k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 19.8k, False: 21.1k]
  |  Branch (630:37): [True: 15.7k, False: 25.3k]
  |  Branch (630:53): [True: 15.7k, False: 4.16k]
  ------------------
  631|  15.7k|                                {
  632|  15.7k|                                    return OpCode::SRAI;
  633|  15.7k|                                }
  634|  25.3k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 20.5k, False: 4.75k]
  |  Branch (634:42): [True: 7.72k, False: 17.6k]
  |  Branch (634:58): [True: 7.72k, False: 12.8k]
  ------------------
  635|  7.72k|                                {
  636|  7.72k|                                    return OpCode::SRLI;
  637|  7.72k|                                }
  638|  17.6k|                                break;
  639|       |
  640|  28.1k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 28.1k, False: 393k]
  ------------------
  641|  76.8k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 48.6k, False: 373k]
  ------------------
  642|  76.8k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 68.4k, False: 8.34k]
  ------------------
  643|  68.4k|                                {
  644|  68.4k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 13.1k, False: 55.3k]
  ------------------
  645|  68.4k|                                    {
  646|  11.8k|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 11.8k, False: 56.6k]
  ------------------
  647|  16.9k|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 5.10k, False: 63.3k]
  ------------------
  648|  16.9k|                                            return OpCode::SUBD;
  649|       |
  650|  5.67k|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 5.67k, False: 62.7k]
  ------------------
  651|  12.6k|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 6.98k, False: 61.4k]
  ------------------
  652|  12.6k|                                            return OpCode::SUBF;
  653|       |
  654|  4.19k|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 4.19k, False: 64.2k]
  ------------------
  655|  13.2k|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 9.07k, False: 59.3k]
  ------------------
  656|  13.2k|                                            return OpCode::SUBI;
  657|       |
  658|  6.54k|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 6.54k, False: 61.9k]
  ------------------
  659|  12.4k|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 5.90k, False: 62.5k]
  ------------------
  660|  12.4k|                                            return OpCode::SUBU;
  661|  68.4k|                                    }
  662|  68.4k|                                }
  663|  21.4k|                                break;
  664|   421k|                        }
  665|   144k|                        break;
  666|       |
  667|   144k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 3.85k, False: 1.16M]
  ------------------
  668|  13.3k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 9.45k, False: 1.15M]
  ------------------
  669|  13.3k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 8.26k, False: 5.04k]
  |  Branch (669:29): [True: 2.75k, False: 10.5k]
  |  Branch (669:45): [True: 5.28k, False: 2.98k]
  |  Branch (669:61): [True: 2.75k, False: 2.52k]
  ------------------
  670|  2.75k|                        {
  671|  2.75k|                            return OpCode::TRAP;
  672|  2.75k|                        }
  673|  10.5k|                        break;
  674|  20.4k|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 20.4k, False: 1.14M]
  ------------------
  675|  38.9k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 18.4k, False: 1.14M]
  ------------------
  676|  38.9k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 30.3k, False: 8.54k]
  |  Branch (676:29): [True: 14.7k, False: 24.1k]
  |  Branch (676:45): [True: 25.9k, False: 4.47k]
  |  Branch (676:61): [True: 14.7k, False: 11.1k]
  ------------------
  677|  14.7k|                        {
  678|  14.7k|                            return OpCode::XORI;
  679|  14.7k|                        }
  680|  24.1k|                        break;
  681|  1.16M|                }
  682|   634k|                break;
  683|  1.16M|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|   688k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 688k, False: 4.35M]
  ------------------
  687|   688k|                const char c1 = token[0u];
  688|   688k|                const char c2 = token[1u];
  689|   688k|                const char c3 = token[2u];
  690|   688k|                const char c4 = token[3u];
  691|   688k|                const char c5 = token[4u];
  692|       |
  693|   688k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 161k, False: 526k]
  ------------------
  694|   688k|                {
  695|  18.7k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 18.7k, False: 669k]
  ------------------
  696|  70.9k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 52.2k, False: 636k]
  ------------------
  697|  70.9k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 64.9k, False: 6.06k]
  |  Branch (697:29): [True: 13.8k, False: 57.1k]
  |  Branch (697:45): [True: 55.2k, False: 9.65k]
  |  Branch (697:61): [True: 40.4k, False: 14.8k]
  |  Branch (697:77): [True: 13.8k, False: 26.5k]
  ------------------
  698|  13.8k|                        {
  699|  13.8k|                            return OpCode::ADDUI;
  700|  13.8k|                        }
  701|  57.1k|                        break;
  702|       |
  703|  57.1k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 4.83k, False: 683k]
  ------------------
  704|  62.9k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 58.1k, False: 630k]
  ------------------
  705|  62.9k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 50.1k, False: 12.8k]
  |  Branch (705:29): [True: 16.7k, False: 46.2k]
  |  Branch (705:45): [True: 35.9k, False: 14.1k]
  |  Branch (705:61): [True: 26.6k, False: 9.30k]
  |  Branch (705:77): [True: 16.7k, False: 9.87k]
  ------------------
  706|  16.7k|                        {
  707|  16.7k|                            return OpCode::DIVUI;
  708|  16.7k|                        }
  709|  46.2k|                        break;
  710|       |
  711|  46.2k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 29.4k, False: 658k]
  ------------------
  712|   112k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 82.7k, False: 605k]
  ------------------
  713|   112k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 78.7k, False: 33.3k]
  |  Branch (713:29): [True: 63.7k, False: 48.4k]
  |  Branch (713:45): [True: 66.4k, False: 12.3k]
  |  Branch (713:61): [True: 63.7k, False: 2.76k]
  ------------------
  714|  63.7k|                        {
  715|  63.7k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 10.0k, False: 53.7k]
  ------------------
  716|  63.7k|                            {
  717|  4.97k|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 4.97k, False: 58.7k]
  ------------------
  718|  7.41k|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 2.43k, False: 61.2k]
  ------------------
  719|  7.41k|                                    return OpCode::MULTD;
  720|       |
  721|  12.2k|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 12.2k, False: 51.4k]
  ------------------
  722|  21.2k|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 8.97k, False: 54.7k]
  ------------------
  723|  21.2k|                                    return OpCode::MULTF;
  724|       |
  725|  7.31k|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 7.31k, False: 56.3k]
  ------------------
  726|  13.8k|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 6.52k, False: 57.1k]
  ------------------
  727|  13.8k|                                    return OpCode::MULTI;
  728|       |
  729|  3.33k|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 3.33k, False: 60.3k]
  ------------------
  730|  11.1k|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 7.86k, False: 55.8k]
  ------------------
  731|  11.1k|                                    return OpCode::MULTU;
  732|  63.7k|                            }
  733|  63.7k|                        }
  734|  58.4k|                        break;
  735|       |
  736|   119k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 119k, False: 569k]
  ------------------
  737|   280k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 161k, False: 527k]
  ------------------
  738|   280k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 10.5k, False: 269k]
  ------------------
  739|   280k|                        {
  740|  44.3k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 44.3k, False: 236k]
  ------------------
  741|  61.0k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 16.7k, False: 263k]
  ------------------
  742|  61.0k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 44.3k, False: 16.7k]
  |  Branch (742:37): [True: 10.7k, False: 50.3k]
  |  Branch (742:53): [True: 24.8k, False: 19.5k]
  |  Branch (742:69): [True: 10.7k, False: 14.1k]
  ------------------
  743|  10.7k|                                {
  744|  10.7k|                                    return OpCode::SEQUI;
  745|  10.7k|                                }
  746|  50.3k|                                break;
  747|       |
  748|  50.3k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 27.9k, False: 252k]
  ------------------
  749|  63.6k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 35.7k, False: 244k]
  ------------------
  750|  63.6k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 29.6k, False: 34.0k]
  |  Branch (750:37): [True: 13.7k, False: 49.9k]
  |  Branch (750:53): [True: 21.4k, False: 8.13k]
  |  Branch (750:69): [True: 13.7k, False: 7.75k]
  ------------------
  751|  13.7k|                                {
  752|  13.7k|                                    return OpCode::SGEUI;
  753|  13.7k|                                }
  754|  49.9k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 33.4k, False: 16.4k]
  |  Branch (754:42): [True: 13.9k, False: 35.9k]
  |  Branch (754:58): [True: 30.1k, False: 3.36k]
  |  Branch (754:74): [True: 13.9k, False: 16.1k]
  ------------------
  755|  13.9k|                                {
  756|  13.9k|                                    return OpCode::SGTUI;
  757|  13.9k|                                }
  758|  35.9k|                                break;
  759|       |
  760|  35.9k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 18.3k, False: 262k]
  ------------------
  761|  79.4k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 61.1k, False: 219k]
  ------------------
  762|  79.4k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 33.4k, False: 46.0k]
  |  Branch (762:37): [True: 14.7k, False: 64.6k]
  |  Branch (762:53): [True: 26.1k, False: 7.31k]
  |  Branch (762:69): [True: 14.7k, False: 11.3k]
  ------------------
  763|  14.7k|                                {
  764|  14.7k|                                    return OpCode::SLEUI;
  765|  14.7k|                                }
  766|  64.6k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 38.5k, False: 26.0k]
  |  Branch (766:42): [True: 12.0k, False: 52.6k]
  |  Branch (766:58): [True: 31.4k, False: 7.09k]
  |  Branch (766:74): [True: 12.0k, False: 19.4k]
  ------------------
  767|  12.0k|                                {
  768|  12.0k|                                    return OpCode::SLTUI;
  769|  12.0k|                                }
  770|  52.6k|                                break;
  771|       |
  772|  52.6k|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 2.50k, False: 277k]
  ------------------
  773|  30.5k|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 28.0k, False: 252k]
  ------------------
  774|  30.5k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 27.9k, False: 2.59k]
  |  Branch (774:37): [True: 14.6k, False: 15.8k]
  |  Branch (774:53): [True: 25.0k, False: 2.94k]
  |  Branch (774:69): [True: 14.6k, False: 10.3k]
  ------------------
  775|  14.6k|                                {
  776|  14.6k|                                    return OpCode::SNEUI;
  777|  14.6k|                                }
  778|  15.8k|                                break;
  779|       |
  780|  15.8k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 10.5k, False: 269k]
  ------------------
  781|  35.1k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 24.6k, False: 255k]
  ------------------
  782|  35.1k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 26.6k, False: 8.55k]
  |  Branch (782:37): [True: 12.7k, False: 22.4k]
  |  Branch (782:53): [True: 19.6k, False: 6.96k]
  |  Branch (782:69): [True: 12.7k, False: 6.88k]
  ------------------
  783|  12.7k|                                {
  784|  12.7k|                                    return OpCode::SUBUI;
  785|  12.7k|                                }
  786|  22.4k|                                break;
  787|   280k|                        }
  788|       |
  789|   187k|                        break;
  790|   688k|                }
  791|       |
  792|   511k|                break;
  793|   688k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|   511k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 373k, False: 4.67M]
  ------------------
  797|   373k|                const char c1 = token[0u];
  798|   373k|                const char c2 = token[1u];
  799|   373k|                const char c3 = token[2u];
  800|   373k|                const char c4 = token[3u];
  801|   373k|                const char c5 = token[4u];
  802|   373k|                const char c6 = token[5u];
  803|       |
  804|   373k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 165k, False: 207k]
  |  Branch (804:21): [True: 143k, False: 229k]
  |  Branch (804:37): [True: 160k, False: 5.73k]
  |  Branch (804:53): [True: 143k, False: 16.8k]
  ------------------
  805|   143k|                {
  806|   143k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 5.01k, False: 138k]
  ------------------
  807|   143k|                    {
  808|  25.6k|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 25.6k, False: 117k]
  ------------------
  809|  48.2k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 22.6k, False: 120k]
  ------------------
  810|  48.2k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 41.2k, False: 7.04k]
  ------------------
  811|  41.2k|                            {
  812|  41.2k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 12.7k, False: 28.4k]
  ------------------
  813|  12.7k|                                {
  814|  12.7k|                                    return OpCode::CVTD2F;
  815|  12.7k|                                }
  816|  28.4k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 19.7k, False: 8.67k]
  ------------------
  817|  19.7k|                                {
  818|  19.7k|                                    return OpCode::CVTD2I;
  819|  19.7k|                                }
  820|  41.2k|                            }
  821|  15.7k|                            break;
  822|       |
  823|  15.7k|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 9.01k, False: 134k]
  ------------------
  824|  51.2k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 42.1k, False: 101k]
  ------------------
  825|  51.2k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 43.2k, False: 7.96k]
  ------------------
  826|  43.2k|                            {
  827|  43.2k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 19.7k, False: 23.4k]
  ------------------
  828|  19.7k|                                {
  829|  19.7k|                                    return OpCode::CVTF2D;
  830|  19.7k|                                }
  831|  23.4k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 16.7k, False: 6.69k]
  ------------------
  832|  16.7k|                                {
  833|  16.7k|                                    return OpCode::CVTF2I;
  834|  16.7k|                                }
  835|  43.2k|                            }
  836|  14.6k|                            break;
  837|       |
  838|  30.9k|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 30.9k, False: 112k]
  ------------------
  839|  38.9k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 7.98k, False: 135k]
  ------------------
  840|  38.9k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 27.8k, False: 11.1k]
  ------------------
  841|  27.8k|                            {
  842|  27.8k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 11.8k, False: 15.9k]
  ------------------
  843|  11.8k|                                {
  844|  11.8k|                                    return OpCode::CVTI2D;
  845|  11.8k|                                }
  846|  15.9k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 8.84k, False: 7.10k]
  ------------------
  847|  8.84k|                                {
  848|  8.84k|                                    return OpCode::CVTI2F;
  849|  8.84k|                                }
  850|  27.8k|                            }
  851|   143k|                    }
  852|   143k|                }
  853|   229k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 95.6k, False: 134k]
  |  Branch (853:26): [True: 24.4k, False: 205k]
  |  Branch (853:42): [True: 57.7k, False: 37.9k]
  |  Branch (853:58): [True: 42.1k, False: 15.5k]
  |  Branch (853:74): [True: 39.4k, False: 2.72k]
  ------------------
  854|   229k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 32.4k, False: 6.96k]
  |  Branch (854:42): [True: 24.4k, False: 8.04k]
  ------------------
  855|  24.4k|                {
  856|  24.4k|                    return OpCode::MULTUI;
  857|  24.4k|                }
  858|   259k|                break;
  859|   373k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|   259k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 181k, False: 4.86M]
  ------------------
  863|   181k|                const char c1 = token[0u];
  864|   181k|                const char c2 = token[1u];
  865|   181k|                const char c3 = token[2u];
  866|   181k|                const char c4 = token[3u];
  867|   181k|                const char c5 = token[4u];
  868|   181k|                const char c6 = token[5u];
  869|   181k|                const char c7 = token[6u];
  870|       |
  871|   181k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 91.4k, False: 89.9k]
  |  Branch (871:21): [True: 70.3k, False: 110k]
  |  Branch (871:37): [True: 77.1k, False: 14.2k]
  |  Branch (871:53): [True: 70.3k, False: 6.75k]
  ------------------
  872|  70.3k|                {
  873|  70.3k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 33.9k, False: 36.4k]
  |  Branch (873:25): [True: 10.7k, False: 59.6k]
  |  Branch (873:41): [True: 24.8k, False: 9.08k]
  |  Branch (873:54): [True: 21.8k, False: 3.02k]
  |  Branch (873:70): [True: 10.7k, False: 11.1k]
  ------------------
  874|  10.7k|                    {
  875|  10.7k|                        return OpCode::MOVI2FP;
  876|  10.7k|                    }
  877|  59.6k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 36.2k, False: 23.3k]
  |  Branch (877:25): [True: 20.0k, False: 39.6k]
  |  Branch (877:41): [True: 30.2k, False: 6.07k]
  |  Branch (877:57): [True: 26.2k, False: 3.98k]
  |  Branch (877:70): [True: 20.0k, False: 6.16k]
  ------------------
  878|  20.0k|                    {
  879|  20.0k|                        return OpCode::MOVFP2I;
  880|  20.0k|                    }
  881|  59.6k|                }
  882|   150k|                break;
  883|   181k|            }
  884|       |
  885|   150k|            default: {
  ------------------
  |  Branch (885:13): [True: 140k, False: 4.90M]
  ------------------
  886|   140k|                break;
  887|   181k|            }
  888|  5.04M|        }
  889|       |
  890|       |        // None found
  891|  3.39M|        return OpCode::NONE;
  892|  5.04M|    }
_ZN3dlx3iceEcc:
   17|  7.21M|    {
   18|  7.21M|        constexpr const char diff = 'a' - 'A';
   19|  7.21M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 2.21M, False: 4.99M]
  |  Branch (19:28): [True: 2.04M, False: 2.94M]
  ------------------
   20|  7.21M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  5.38M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|  97.8k|    {
  195|  97.8k|        ParseError err;
  196|       |
  197|  97.8k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|  97.8k|        err.m_LineNumber                           = line_number;
  199|  97.8k|        err.m_Column                               = column;
  200|  97.8k|        err.unexpected_argument_type.expected_type = expected_type;
  201|  97.8k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|  97.8k|        return err;
  204|  97.8k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|  97.8k|    {
  209|  97.8k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|  97.8k|                                                         token.GetColumn().unsafe(), expected_type,
  211|  97.8k|                                                         actual_type);
  212|  97.8k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|  6.76k|    {
  218|  6.76k|        ParseError err;
  219|       |
  220|  6.76k|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|  6.76k|        err.m_LineNumber        = line_number;
  222|  6.76k|        err.m_Column            = column;
  223|  6.76k|        err.invalid_number.text = text;
  224|       |
  225|  6.76k|        return err;
  226|  6.76k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|  6.76k|    {
  230|  6.76k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|  6.76k|                                                token.GetColumn().unsafe(), token.GetText());
  232|  6.76k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|      3|    {
  237|      3|        ParseError err;
  238|       |
  239|      3|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|      3|        err.m_LineNumber = line_number;
  241|      3|        err.m_Column     = column;
  242|       |
  243|      3|        return err;
  244|      3|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|      3|    {
  249|      3|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|      3|                                                                     token.GetColumn().unsafe());
  251|      3|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  2.39M|    {
  257|  2.39M|        ParseError err;
  258|       |
  259|  2.39M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  2.39M|        err.m_LineNumber                   = line_number;
  261|  2.39M|        err.m_Column                       = column;
  262|  2.39M|        err.unexpected_token.expected_type = expected_type;
  263|  2.39M|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  2.39M|        return err;
  266|  2.39M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  2.39M|    {
  271|  2.39M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  2.39M|                                                  token.GetColumn().unsafe(), expected_type,
  273|  2.39M|                                                  token.GetType());
  274|  2.39M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|   565k|    {
  279|   565k|        ParseError err;
  280|       |
  281|   565k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|   565k|        err.m_LineNumber                   = line_number;
  283|   565k|        err.m_Column                       = column;
  284|   565k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|   565k|        return err;
  287|   565k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|  7.87k|    {
  291|  7.87k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|  7.87k|                                                    token.GetColumn().unsafe(), token.GetText());
  293|  7.87k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  1.05M|    {
  298|  1.05M|        ParseError err;
  299|       |
  300|  1.05M|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  1.05M|        err.m_LineNumber                       = line_number;
  302|  1.05M|        err.m_Column                           = column;
  303|  1.05M|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  1.05M|        return err;
  306|  1.05M|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  1.05M|    {
  311|  1.05M|        return ConstructInvalidLabelIdentifierParseError(
  312|  1.05M|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  1.05M|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|   225k|    {
  319|   225k|        ParseError err;
  320|       |
  321|   225k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|   225k|        err.m_LineNumber                     = line_number;
  323|   225k|        err.m_Column                         = column;
  324|   225k|        err.label_already_defined.label_name = label_name;
  325|   225k|        err.label_already_defined.at_line    = at_line;
  326|   225k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|   225k|        return err;
  329|   225k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|   225k|    {
  334|   225k|        return ConstructLabelAlreadyDefinedParseError(
  335|   225k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|   225k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|   225k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|   639k|    {
  342|   639k|        ParseError err;
  343|       |
  344|   639k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|   639k|        err.m_LineNumber = line_number;
  346|   639k|        err.m_Column     = column;
  347|       |
  348|   639k|        return err;
  349|   639k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|   639k|    {
  354|   639k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|   639k|                                                        token.GetColumn().unsafe());
  356|   639k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|  77.7k|    {
  362|  77.7k|        ParseError err;
  363|       |
  364|  77.7k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|  77.7k|        err.m_LineNumber               = line_number;
  366|  77.7k|        err.m_Column                   = column;
  367|  77.7k|        err.too_few_arguments.required = required;
  368|  77.7k|        err.too_few_arguments.provided = provided;
  369|       |
  370|  77.7k|        return err;
  371|  77.7k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|  77.7k|    {
  376|  77.7k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|  77.7k|                                                  token.GetColumn().unsafe(), required, provided);
  378|  77.7k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|   184k|    {
  383|   184k|        ParseError err;
  384|       |
  385|   184k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|   184k|        err.m_LineNumber           = line_number;
  387|   184k|        err.m_Column               = column;
  388|   184k|        err.empty_label.label_name = label_name;
  389|       |
  390|   184k|        return err;
  391|   184k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|   184k|    {
  395|   184k|        return ConstructEmptyLabelParseError(
  396|   184k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|   184k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 155k, False: 28.5k]
  ------------------
  398|   155k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|   184k|                        token.GetText());
  400|   184k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|   139k|    {
  405|   139k|        ParseError err;
  406|       |
  407|   139k|        err.m_Type       = ParseError::Type::TooManyComma;
  408|   139k|        err.m_LineNumber = line_number;
  409|   139k|        err.m_Column     = column;
  410|       |
  411|   139k|        return err;
  412|   139k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|   139k|    {
  416|   139k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|   139k|                                               token.GetColumn().unsafe());
  418|   139k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  5.38M|    {
   19|  5.38M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  5.38M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  27.2k|    {
  181|  27.2k|        ParsedProgram program;
  182|       |
  183|  27.2k|        program.m_Tokens = tokens;
  184|       |
  185|  27.2k|        phi::boolean line_has_instruction{false};
  186|  27.2k|        phi::usize   label_count{0u};
  187|       |
  188|  6.13M|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 6.10M, False: 27.2k]
  ------------------
  189|  6.10M|        {
  190|  6.10M|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|  6.10M|            switch (current_token.GetType())
  195|  6.10M|            {
  196|       |                // Ignore comments
  197|  38.3k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 38.3k, False: 6.07M]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  38.3k|                    break;
  200|       |
  201|   728k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 728k, False: 5.37M]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|   728k|                    line_has_instruction = false;
  204|   728k|                    break;
  205|       |
  206|  2.33M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 2.33M, False: 3.77M]
  ------------------
  207|  2.33M|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 390k, False: 1.94M]
  ------------------
  208|   390k|                    {
  209|   390k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|   390k|                                current_token, Token::Type::NewLine));
  211|   390k|                        break;
  212|   390k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  1.94M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 664k, False: 1.28M]
  ------------------
  217|   664k|                    {
  218|   664k|                        program.AddParseError(
  219|   664k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|   664k|                        break;
  221|   664k|                    }
  222|       |
  223|  1.28M|                    phi::string_view label_name = current_token.GetText();
  224|  1.28M|                    label_name.remove_suffix(1u);
  225|       |
  226|  1.28M|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 557k, False: 724k]
  ------------------
  227|   557k|                    {
  228|   557k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|   557k|                                current_token.GetLineNumber().unsafe(),
  230|   557k|                                current_token.GetColumn().unsafe(), label_name));
  231|   557k|                        break;
  232|   557k|                    }
  233|       |
  234|   724k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 301k, False: 423k]
  ------------------
  235|   301k|                    {
  236|   301k|                        program.AddParseError(
  237|   301k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|   301k|                        break;
  239|   301k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|   423k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 225k, False: 197k]
  ------------------
  243|   225k|                    {
  244|       |                        // Find first defintions of label
  245|   225k|                        const Token* first_label_definition =
  246|   225k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   225k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|   225k|                                    {
  249|   225k|                                        phi::string_view token_label_name = t.GetText();
  250|   225k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   225k|                                        if (token_label_name == label_name)
  253|   225k|                                        {
  254|   225k|                                            return true;
  255|   225k|                                        }
  256|   225k|                                    }
  257|       |
  258|   225k|                                    return false;
  259|   225k|                                });
  260|       |
  261|   225k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|   225k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|   225k|                                current_token, *first_label_definition));
  265|   225k|                        break;
  266|   225k|                    }
  267|       |
  268|   197k|                    program.m_JumpData[label_name] =
  269|   197k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|   197k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|   197k|                    break;
  276|   423k|                }
  277|       |
  278|  1.09M|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 1.09M, False: 5.00M]
  ------------------
  279|  1.09M|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 639k, False: 459k]
  ------------------
  280|   639k|                    {
  281|   639k|                        program.AddParseError(
  282|   639k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|   639k|                        break;
  284|   639k|                    }
  285|       |
  286|   459k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|   459k|                    PHI_ASSERT(current_token.HasHint());
  290|   459k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|   459k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|   459k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|   459k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|   459k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|   459k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|   459k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|   459k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|   459k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  1.00M|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 927k, False: 79.3k]
  ------------------
  312|   927k|                    {
  313|       |                        // Get next token
  314|   927k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 2.27k, False: 925k]
  ------------------
  315|  2.27k|                        {
  316|  2.27k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|  2.27k|                                    current_token, number_of_argument_required.unsafe(),
  318|  2.27k|                                    argument_num.unsafe()));
  319|  2.27k|                            break;
  320|  2.27k|                        }
  321|       |
  322|   925k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|   925k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 416k, False: 509k]
  ------------------
  326|   416k|                        {
  327|   416k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 139k, False: 276k]
  ------------------
  328|   139k|                            {
  329|   139k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|   139k|                            }
  331|       |
  332|   416k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|   416k|                            continue;
  335|   416k|                        }
  336|       |
  337|   509k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 75.4k, False: 434k]
  ------------------
  338|  75.4k|                        {
  339|  75.4k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  75.4k|                                    token, number_of_argument_required.unsafe(),
  341|  75.4k|                                    argument_num.unsafe()));
  342|  75.4k|                            break;
  343|  75.4k|                        }
  344|       |
  345|   434k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|   434k|                                parse_instruction_argument(
  347|   434k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|   434k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 302k, False: 131k]
  ------------------
  349|   302k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|   302k|                            break;
  352|   302k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|   131k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|   131k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|   131k|                        argument_num++;
  359|   131k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|   131k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|   459k|                    program.m_Instructions.emplace_back(instruction);
  367|   459k|                    line_has_instruction = true;
  368|   459k|                    break;
  369|  1.09M|                }
  370|       |
  371|  1.90M|                default:
  ------------------
  |  Branch (371:17): [True: 1.90M, False: 4.20M]
  ------------------
  372|  1.90M|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  1.90M|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 928k, False: 976k]
  ------------------
  374|   928k|                    {
  375|   928k|                        expected_token_type = Token::Type::NewLine;
  376|   928k|                    }
  377|       |
  378|  1.90M|                    program.AddParseError(
  379|  1.90M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  1.90M|                    break;
  381|  6.10M|            }
  382|  6.10M|        }
  383|       |
  384|       |        // Check for empty labels
  385|  27.2k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 8.82k, False: 18.4k]
  ------------------
  386|  8.82k|        {
  387|   228k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 219k, False: 8.82k]
  ------------------
  388|   219k|            {
  389|   219k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|   219k|                const Token& token = *it;
  392|   219k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 184k, False: 35.1k]
  ------------------
  393|   184k|                {
  394|   184k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|   184k|                    --label_count;
  396|   184k|                }
  397|   219k|            }
  398|  8.82k|        }
  399|       |
  400|  27.2k|        return program;
  401|  27.2k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  27.2k|    {
  405|  27.2k|        TokenStream tokens = Tokenize(source);
  406|  27.2k|        return Parse(tokens);
  407|  27.2k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|   434k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|   434k|        switch (token.GetType())
   37|   434k|        {
   38|  72.6k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 72.6k, False: 361k]
  ------------------
   39|  72.6k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 27.8k, False: 44.8k]
  ------------------
   40|  72.6k|                                          ArgumentType::AddressDisplacement))
   41|  27.8k|                {
   42|  27.8k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|  27.8k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|  27.8k|                    return {};
   46|  27.8k|                }
   47|       |
   48|       |                // Get address displacement
   49|  44.8k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  44.8k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  44.8k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 3, False: 44.7k]
  ------------------
   54|      3|                {
   55|      3|                    program.AddParseError(
   56|      3|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      3|                    return {};
   58|      3|                }
   59|       |
   60|  44.7k|                auto         it           = tokens.current_position();
   61|  44.7k|                const Token& first_token  = tokens.consume();
   62|  44.7k|                const Token& second_token = tokens.consume();
   63|  44.7k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  44.7k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 15.8k, False: 28.9k]
  ------------------
   66|  15.8k|                {
   67|  15.8k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|  15.8k|                            first_token, Token::Type::OpenBracket));
   69|  15.8k|                    return {};
   70|  15.8k|                }
   71|       |
   72|       |                // Second token is the register
   73|  28.9k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 9.60k, False: 19.3k]
  ------------------
   74|  9.60k|                {
   75|  9.60k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|  9.60k|                            second_token, Token::Type::RegisterInt));
   77|  9.60k|                    return {};
   78|  9.60k|                }
   79|       |
   80|  19.3k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 7.37k, False: 11.9k]
  ------------------
   81|  7.37k|                {
   82|  7.37k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|  7.37k|                            third_token, Token::Type::ClosingBracket));
   84|  7.37k|                    return {};
   85|  7.37k|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|  11.9k|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|  11.9k|                return ConstructInstructionArgumentAddressDisplacement(
   94|  11.9k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|  19.3k|            }
   96|  23.8k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 23.8k, False: 410k]
  ------------------
   97|  23.8k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 3.90k, False: 19.9k]
  ------------------
   98|  3.90k|                {
   99|  3.90k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|  3.90k|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|  3.90k|                    return {};
  102|  3.90k|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  19.9k|                return ConstructInstructionArgumentRegisterInt(
  108|  19.9k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  23.8k|            }
  110|  43.4k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 43.4k, False: 390k]
  ------------------
  111|  43.4k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 5.53k, False: 37.8k]
  ------------------
  112|  5.53k|                {
  113|  5.53k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|  5.53k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|  5.53k|                    return {};
  116|  5.53k|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  37.8k|                return ConstructInstructionArgumentRegisterFloat(
  122|  37.8k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  43.4k|            }
  124|  7.87k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 7.87k, False: 426k]
  ------------------
  125|  7.87k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|  7.87k|                return {};
  128|  43.4k|            }
  129|   180k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 180k, False: 253k]
  ------------------
  130|       |                // Parse as Label
  131|   180k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 40.6k, False: 139k]
  ------------------
  132|  40.6k|                {
  133|  40.6k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  40.6k|                            token, expected_argument_type, ArgumentType::Label));
  135|  40.6k|                    return {};
  136|  40.6k|                }
  137|       |
  138|   139k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 139k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|   139k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 86.4k, False: 53.3k]
  ------------------
  145|  86.4k|                {
  146|  86.4k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  86.4k|                    return {};
  148|  86.4k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  53.3k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|   139k|            }
  154|  35.1k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 35.1k, False: 399k]
  ------------------
  155|  35.1k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 19.8k, False: 15.3k]
  ------------------
  156|  19.8k|                {
  157|  19.8k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|  19.8k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|  19.8k|                    return {};
  160|  19.8k|                }
  161|       |
  162|  15.3k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 8.55k, False: 6.76k]
  ------------------
  163|  8.55k|                {
  164|  8.55k|                    return ConstructInstructionArgumentImmediateValue(
  165|  8.55k|                            static_cast<std::int16_t>(token.GetHint()));
  166|  8.55k|                }
  167|       |
  168|  6.76k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|  6.76k|                return {};
  170|  15.3k|            }
  171|       |
  172|  70.8k|            default:
  ------------------
  |  Branch (172:13): [True: 70.8k, False: 363k]
  ------------------
  173|  70.8k|                program.AddParseError(
  174|  70.8k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  70.8k|                return {};
  176|   434k|        }
  177|   434k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  3.27M|                                tokens.find_first_token_if([&](const Token& t) {
  247|  3.27M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 2.36M, False: 909k]
  ------------------
  248|  2.36M|                                    {
  249|  2.36M|                                        phi::string_view token_label_name = t.GetText();
  250|  2.36M|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  2.36M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 225k, False: 2.13M]
  ------------------
  253|   225k|                                        {
  254|   225k|                                            return true;
  255|   225k|                                        }
  256|  2.36M|                                    }
  257|       |
  258|  3.04M|                                    return false;
  259|  3.27M|                                });

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|  5.22M|    {
   13|  5.22M|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 897k, False: 4.32M]
  ------------------
   14|   897k|        {
   15|   897k|            const char first_char = token[0u];
   16|   897k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 4.70k, False: 892k]
  |  Branch (16:38): [True: 80.5k, False: 812k]
  ------------------
   17|  85.2k|            {
   18|  85.2k|                const char second_char = token[1u];
   19|  85.2k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 82.0k, False: 3.12k]
  |  Branch (19:43): [True: 65.3k, False: 16.7k]
  ------------------
   20|  65.3k|                {
   21|  65.3k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  65.3k|                }
   23|  85.2k|            }
   24|   897k|        }
   25|  4.32M|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 1.03M, False: 3.28M]
  ------------------
   26|  1.03M|        {
   27|  1.03M|            const char first_char = token[0u];
   28|  1.03M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 2.84k, False: 1.03M]
  |  Branch (28:38): [True: 66.5k, False: 965k]
  ------------------
   29|  69.4k|            {
   30|  69.4k|                const char second_char = token[1u];
   31|  69.4k|                const char third_char  = token[2u];
   32|       |
   33|  69.4k|                switch (second_char)
   34|  69.4k|                {
   35|  26.6k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 26.6k, False: 42.7k]
  ------------------
   36|  26.6k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 18.4k, False: 8.20k]
  |  Branch (36:50): [True: 9.79k, False: 8.63k]
  ------------------
   37|  9.79k|                        {
   38|  9.79k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|  9.79k|                        }
   40|  16.8k|                        break;
   41|  26.6k|                    }
   42|  23.0k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 23.0k, False: 46.3k]
  ------------------
   43|  23.0k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 10.6k, False: 12.4k]
  |  Branch (43:50): [True: 6.38k, False: 4.22k]
  ------------------
   44|  6.38k|                        {
   45|  6.38k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|  6.38k|                        }
   47|  16.6k|                        break;
   48|  23.0k|                    }
   49|  16.6k|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 10.0k, False: 59.3k]
  ------------------
   50|  10.0k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 1.60k, False: 8.47k]
  |  Branch (50:50): [True: 2.88k, False: 5.59k]
  ------------------
   51|  4.48k|                        {
   52|  4.48k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|  4.48k|                        }
   54|  5.59k|                        break;
   55|  10.0k|                    }
   56|  9.66k|                    default: {
  ------------------
  |  Branch (56:21): [True: 9.66k, False: 59.7k]
  ------------------
   57|  9.66k|                        break;
   58|  10.0k|                    }
   59|  69.4k|                }
   60|  69.4k|            }
   61|  1.03M|        }
   62|       |
   63|  5.13M|        return IntRegisterID::None;
   64|  5.22M|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|  5.13M|    {
   68|  5.13M|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 831k, False: 4.30M]
  ------------------
   69|   831k|        {
   70|   831k|            const char first_char = token[0u];
   71|   831k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 58.8k, False: 773k]
  |  Branch (71:38): [True: 20.8k, False: 752k]
  ------------------
   72|  79.6k|            {
   73|  79.6k|                const char second_char = token[1u];
   74|  79.6k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 75.1k, False: 4.59k]
  |  Branch (74:43): [True: 51.8k, False: 23.2k]
  ------------------
   75|  51.8k|                {
   76|  51.8k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  51.8k|                }
   78|  79.6k|            }
   79|   831k|        }
   80|  4.30M|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 1.01M, False: 3.28M]
  ------------------
   81|  1.01M|        {
   82|  1.01M|            const char first_char = token[0u];
   83|  1.01M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 50.5k, False: 964k]
  |  Branch (83:38): [True: 24.1k, False: 939k]
  ------------------
   84|  74.7k|            {
   85|  74.7k|                const char second_char = token[1u];
   86|  74.7k|                const char third_char  = token[2u];
   87|       |
   88|  74.7k|                switch (second_char)
   89|  74.7k|                {
   90|  5.08k|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 5.08k, False: 69.6k]
  ------------------
   91|  5.08k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 4.03k, False: 1.04k]
  |  Branch (91:50): [True: 2.45k, False: 1.57k]
  ------------------
   92|  2.45k|                        {
   93|  2.45k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|  2.45k|                        }
   95|  2.62k|                        break;
   96|  5.08k|                    }
   97|  10.2k|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 10.2k, False: 64.4k]
  ------------------
   98|  10.2k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 8.87k, False: 1.40k]
  |  Branch (98:50): [True: 3.71k, False: 5.16k]
  ------------------
   99|  3.71k|                        {
  100|  3.71k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|  3.71k|                        }
  102|  6.56k|                        break;
  103|  10.2k|                    }
  104|  37.4k|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 37.4k, False: 37.2k]
  ------------------
  105|  37.4k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 21.4k, False: 16.0k]
  |  Branch (105:50): [True: 6.35k, False: 9.68k]
  ------------------
  106|  27.8k|                        {
  107|  27.8k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|  27.8k|                        }
  109|  9.68k|                        break;
  110|  37.4k|                    }
  111|  21.9k|                    default: {
  ------------------
  |  Branch (111:21): [True: 21.9k, False: 52.8k]
  ------------------
  112|  21.9k|                        break;
  113|  37.4k|                    }
  114|  74.7k|                }
  115|  74.7k|            }
  116|  1.01M|        }
  117|       |
  118|  5.04M|        return FloatRegisterID::None;
  119|  5.13M|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|  4.68M|    {
  123|  4.68M|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 964k, False: 3.71M]
  ------------------
  124|   964k|        {
  125|   964k|            const char c1 = token[0u];
  126|   964k|            const char c2 = token[1u];
  127|   964k|            const char c3 = token[2u];
  128|   964k|            const char c4 = token[3u];
  129|       |
  130|   964k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 32.9k, False: 931k]
  |  Branch (130:34): [True: 26.4k, False: 905k]
  |  Branch (130:49): [True: 26.8k, False: 32.4k]
  |  Branch (130:62): [True: 1.99k, False: 30.4k]
  ------------------
  131|   964k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 5.71k, False: 23.1k]
  |  Branch (131:34): [True: 20.6k, False: 2.53k]
  |  Branch (131:49): [True: 4.26k, False: 22.0k]
  |  Branch (131:62): [True: 17.2k, False: 4.78k]
  ------------------
  132|   964k|        }
  133|       |
  134|  3.71M|        return false;
  135|  4.68M|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|  5.76M|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  1.40M|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  13.9M|    {
   41|  13.9M|        return m_Type;
   42|  13.9M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  6.07M|    {
   51|  6.07M|        return m_LineNumber;
   52|  6.07M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  5.61M|    {
   56|  5.61M|        return m_Column;
   57|  5.61M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  7.74M|    {
   66|  7.74M|        return m_Text;
   67|  7.74M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   519k|    {
   80|   519k|        return m_HasHint;
   81|   519k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   582k|    {
   85|   582k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   582k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   582k|                   m_Type == Type::ImmediateInteger);
   88|   582k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   582k|        return m_Hint;
   91|   582k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  27.2k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  27.2k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  27.2k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  44.8k|    {
   51|  44.8k|        auto it = m_Iterator;
   52|   179k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 134k, False: 44.7k]
  ------------------
   53|   134k|        {
   54|   134k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 3, False: 134k]
  ------------------
   55|      3|            {
   56|      3|                return false;
   57|      3|            }
   58|   134k|        }
   59|       |
   60|  44.7k|        return true;
   61|  44.8k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  7.06M|    {
   65|  7.06M|        return m_Iterator != m_Tokens.end();
   66|  7.06M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  7.16M|    {
   70|  7.16M|        return m_Iterator == m_Tokens.end();
   71|  7.16M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  7.16M|    {
   85|  7.16M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  7.16M|        return *m_Iterator++;
   91|  7.16M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  44.7k|    {
  164|  44.7k|        return m_Iterator;
  165|  44.7k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  11.9k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  11.9k|        m_Iterator = it;
  179|  11.9k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  8.82k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  8.82k|        return m_Tokens.rbegin();
  224|  8.82k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|   219k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|   219k|        return m_Tokens.rend();
  233|   219k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  27.2k|    {
   66|  27.2k|        TokenStream tokens;
   67|       |
   68|  27.2k|        phi::string_view current_token;
   69|       |
   70|  27.2k|        phi::u64 current_line_number{1u};
   71|  27.2k|        phi::u64 current_column{1u};
   72|  27.2k|        phi::u64 token_begin{0u};
   73|       |
   74|  27.2k|        phi::boolean parsing_comment{false};
   75|       |
   76|  18.0M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 18.0M, False: 27.2k]
  ------------------
   77|  18.0M|        {
   78|  18.0M|            const char c{source.at(i)};
   79|       |
   80|  18.0M|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 807k, False: 17.2M]
  ------------------
   81|   807k|            {
   82|   807k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 129k, False: 678k]
  ------------------
   83|   129k|                {
   84|       |                    // Skip empty lines
   85|   129k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|   129k|                                        current_line_number, current_column);
   87|       |
   88|   129k|                    parsing_comment = false;
   89|   129k|                    current_line_number += 1u;
   90|   129k|                    current_column = 1u;
   91|   129k|                    continue;
   92|   129k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|   678k|                tokens.emplace_back(ParseToken(
   96|   678k|                        source.substring_view(
   97|   678k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|   678k|                                current_token.length()),
   99|   678k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|   678k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|   678k|                                    current_line_number, current_column);
  103|       |
  104|   678k|                current_token   = phi::string_view{};
  105|   678k|                parsing_comment = false;
  106|   678k|                current_line_number += 1u;
  107|   678k|                current_column = 0u;
  108|   678k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|  17.2M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 12.2k, False: 17.2M]
  |  Branch (110:34): [True: 35.0k, False: 17.2M]
  ------------------
  111|  47.2k|            {
  112|  47.2k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 23.6k, False: 23.5k]
  ------------------
  113|  23.6k|                {
  114|  23.6k|                    token_begin = i;
  115|  23.6k|                }
  116|  23.5k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 21.3k, False: 2.25k]
  ------------------
  117|  21.3k|                {
  118|  21.3k|                    tokens.emplace_back(ParseToken(
  119|  21.3k|                            source.substring_view(
  120|  21.3k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  21.3k|                                    current_token.length()),
  122|  21.3k|                            current_line_number, current_column - current_token.length()));
  123|  21.3k|                    token_begin   = i;
  124|  21.3k|                    current_token = phi::string_view{};
  125|  21.3k|                }
  126|       |
  127|  47.2k|                parsing_comment = true;
  128|  47.2k|                current_token   = source.substring_view(
  129|  47.2k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  47.2k|                        current_token.length() + 1u);
  131|  47.2k|            }
  132|  17.2M|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 82.2k, False: 17.1M]
  ------------------
  133|  82.2k|            {
  134|       |                // simply append the character
  135|  82.2k|                current_token = source.substring_view(
  136|  82.2k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|  82.2k|                        current_token.length() + 1u);
  138|  82.2k|            }
  139|  17.1M|            else
  140|  17.1M|            {
  141|       |                // Not parsing a comment
  142|  17.1M|                switch (c)
  143|  17.1M|                {
  144|   216k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 216k, False: 16.9M]
  ------------------
  145|   377k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 161k, False: 16.9M]
  ------------------
  146|   648k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 270k, False: 16.8M]
  ------------------
  147|   648k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 123k, False: 525k]
  ------------------
  148|   123k|                        {
  149|   123k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|   123k|                            continue;
  152|   123k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|   525k|                        tokens.emplace_back(ParseToken(
  156|   525k|                                source.substring_view(
  157|   525k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|   525k|                                        current_token.length()),
  159|   525k|                                current_line_number, current_column - current_token.length()));
  160|   525k|                        current_token = phi::string_view{};
  161|   525k|                        break;
  162|  1.58M|                    case ':':
  ------------------
  |  Branch (162:21): [True: 1.58M, False: 15.5M]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  1.58M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 1.38M, False: 196k]
  ------------------
  165|  1.38M|                        {
  166|  1.38M|                            current_token = source.substring_view(
  167|  1.38M|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  1.38M|                                    current_token.length() + 1u);
  169|  1.38M|                            tokens.emplace_back(ParseToken(
  170|  1.38M|                                    source.substring_view(
  171|  1.38M|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  1.38M|                                                    token_begin),
  173|  1.38M|                                            current_token.length()),
  174|  1.38M|                                    current_line_number,
  175|  1.38M|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  1.38M|                            current_token = phi::string_view{};
  178|  1.38M|                        }
  179|   196k|                        else
  180|   196k|                        {
  181|       |                            // Orphan colon
  182|   196k|                            token_begin = i;
  183|       |
  184|   196k|                            tokens.emplace_back(
  185|   196k|                                    Token::Type::Colon,
  186|   196k|                                    source.substring_view(
  187|   196k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|   196k|                                                    token_begin),
  189|   196k|                                            1u),
  190|   196k|                                    current_line_number, current_column);
  191|   196k|                        }
  192|  1.58M|                        break;
  193|  1.21M|                    case ',':
  ------------------
  |  Branch (193:21): [True: 1.21M, False: 15.9M]
  ------------------
  194|  2.07M|                    case '(':
  ------------------
  |  Branch (194:21): [True: 852k, False: 16.2M]
  ------------------
  195|  2.14M|                    case ')':
  ------------------
  |  Branch (195:21): [True: 72.5k, False: 17.0M]
  ------------------
  196|  2.14M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 1.39M, False: 752k]
  ------------------
  197|  1.39M|                        {
  198|  1.39M|                            tokens.emplace_back(ParseToken(
  199|  1.39M|                                    source.substring_view(
  200|  1.39M|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  1.39M|                                                    token_begin),
  202|  1.39M|                                            current_token.length()),
  203|  1.39M|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  1.39M|                            current_token = phi::string_view{};
  206|  1.39M|                        }
  207|       |
  208|  2.14M|                        Token::Type type;
  209|  2.14M|                        switch (c)
  210|  2.14M|                        {
  211|  1.21M|                            case ',':
  ------------------
  |  Branch (211:29): [True: 1.21M, False: 924k]
  ------------------
  212|  1.21M|                                type = Token::Type::Comma;
  213|  1.21M|                                break;
  214|   852k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 852k, False: 1.29M]
  ------------------
  215|   852k|                                type = Token::Type::OpenBracket;
  216|   852k|                                break;
  217|  72.5k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 72.5k, False: 2.07M]
  ------------------
  218|  72.5k|                                type = Token::Type::ClosingBracket;
  219|  72.5k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 2.14M]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  2.14M|#endif
  225|  2.14M|                        }
  226|       |
  227|  2.14M|                        token_begin = i;
  228|       |
  229|  2.14M|                        tokens.emplace_back(
  230|  2.14M|                                type,
  231|  2.14M|                                source.substring_view(
  232|  2.14M|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  2.14M|                                        1u),
  234|  2.14M|                                current_line_number, current_column);
  235|  2.14M|                        break;
  236|       |
  237|  12.7M|                    default:
  ------------------
  |  Branch (237:21): [True: 12.7M, False: 4.37M]
  ------------------
  238|  12.7M|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 3.97M, False: 8.77M]
  ------------------
  239|  3.97M|                        {
  240|  3.97M|                            token_begin = i;
  241|  3.97M|                        }
  242|       |
  243|       |                        // simply append the character
  244|  12.7M|                        current_token = source.substring_view(
  245|  12.7M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|  12.7M|                                current_token.length() + 1u);
  247|  17.1M|                }
  248|  17.1M|            }
  249|       |
  250|  17.8M|            current_column += 1u;
  251|  17.8M|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  27.2k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 18.5k, False: 8.72k]
  ------------------
  255|  18.5k|        {
  256|  18.5k|            tokens.emplace_back(
  257|  18.5k|                    ParseToken(source.substring_view(
  258|  18.5k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  18.5k|                                       current_token.length()),
  260|  18.5k|                               current_line_number, current_column - current_token.length()));
  261|  18.5k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  27.2k|        tokens.finalize();
  265|       |
  266|  27.2k|        return tokens;
  267|  27.2k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|  4.02M|    {
   14|  4.02M|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 46.5k, False: 3.97M]
  |  Branch (14:13): [True: 41.6k, False: 3.98M]
  |  Branch (14:36): [True: 41.6k, False: 4.92k]
  ------------------
   15|  41.6k|        {
   16|  41.6k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  41.6k|            if (number)
  ------------------
  |  Branch (18:17): [True: 12.1k, False: 29.5k]
  ------------------
   19|  12.1k|            {
   20|  12.1k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  12.1k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  12.1k|            }
   23|       |
   24|  29.5k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  41.6k|        }
   26|       |
   27|  3.98M|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 11.9k, False: 3.96M]
  |  Branch (27:13): [True: 44.9k, False: 3.93M]
  |  Branch (27:36): [True: 33.0k, False: 3.93M]
  ------------------
   28|  44.9k|        {
   29|  44.9k|            return {Token::Type::Comment, token, line_number, column};
   30|  44.9k|        }
   31|       |
   32|  3.93M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 120k, False: 3.81M]
  ------------------
   33|   120k|        {
   34|   120k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|   120k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|   120k|        }
   37|       |
   38|  3.81M|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 17.2k, False: 3.79M]
  ------------------
   39|  17.2k|        {
   40|  17.2k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  17.2k|        }
   42|       |
   43|  3.79M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 66.2k, False: 3.73M]
  ------------------
   44|  66.2k|        {
   45|  66.2k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  66.2k|                    static_cast<phi::uint32_t>(id)};
   47|  66.2k|        }
   48|       |
   49|  3.73M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 80.6k, False: 3.65M]
  ------------------
   50|  80.6k|        {
   51|  80.6k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  80.6k|                    static_cast<phi::uint32_t>(id)};
   53|  80.6k|        }
   54|       |
   55|  3.65M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 1.12M, False: 2.52M]
  ------------------
   56|  1.12M|        {
   57|  1.12M|            return {Token::Type::OpCode, token, line_number, column,
   58|  1.12M|                    static_cast<phi::uint32_t>(opcode)};
   59|  1.12M|        }
   60|       |
   61|  2.52M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  3.65M|    }

LLVMFuzzerTestOneInput:
    8|  27.2k|{
    9|  27.2k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   10|       |
   11|       |    // Parse it
   12|  27.2k|    dlx::Parser::Parse(source);
   13|       |
   14|  27.2k|    return 0;
   15|  27.2k|}


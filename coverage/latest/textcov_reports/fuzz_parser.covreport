_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  2.26M|        {
  173|  2.26M|            PHI_ASSERT(index < 3u);
  174|       |
  175|  2.26M|            switch (index.unsafe())
  176|  2.26M|            {
  177|  1.03M|                case 0:
  ------------------
  |  Branch (177:17): [True: 1.03M, False: 1.23M]
  ------------------
  178|  1.03M|                    return m_Arg1Type;
  179|       |
  180|   628k|                case 1:
  ------------------
  |  Branch (180:17): [True: 628k, False: 1.63M]
  ------------------
  181|   628k|                    return m_Arg2Type;
  182|       |
  183|   601k|                case 2:
  ------------------
  |  Branch (183:17): [True: 601k, False: 1.66M]
  ------------------
  184|   601k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 2.26M]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  2.26M|#endif
  191|  2.26M|            }
  192|  2.26M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|   571k|        {
  199|   571k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|   571k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 556k, False: 14.9k]
  ------------------
  203|   556k|            {
  204|   556k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   556k|            }
  206|   571k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 324k, False: 246k]
  ------------------
  207|   324k|            {
  208|   324k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   324k|            }
  210|   571k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 180k, False: 391k]
  ------------------
  211|   180k|            {
  212|   180k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  213|   180k|            }
  214|       |
  215|   571k|            return number_of_argument_required;
  216|   571k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|   571k|        {
  225|   571k|            return m_Executor;
  226|   571k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   450k|    {
   38|   450k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   450k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   450k|                                         static_cast<underlying_t>(rhs));
   42|   450k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   450k|    {
   55|   450k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   450k|        return static_cast<underlying_t>(type & test) != 0;
   58|   450k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  1.81M|    {
   31|  1.81M|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 23.8k, False: 1.78M]
  ------------------
   32|  23.8k|        {
   33|  23.8k|            return true;
   34|  23.8k|        }
   35|       |
   36|  1.78M|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 8.98k, False: 1.78M]
  ------------------
   37|  8.98k|        {
   38|  8.98k|            return true;
   39|  8.98k|        }
   40|       |
   41|  1.78M|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 681k, False: 1.09M]
  ------------------
   42|   681k|        {
   43|   681k|            return true;
   44|   681k|        }
   45|       |
   46|  1.09M|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 6.66k, False: 1.09M]
  ------------------
   47|  6.66k|        {
   48|  6.66k|            return true;
   49|  6.66k|        }
   50|       |
   51|  1.09M|        return false;
   52|  1.09M|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  1.09M|    {
   56|  1.09M|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 1.09M]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  1.09M|        const char first_char = token.at(0u);
   62|       |
   63|  1.09M|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 219k, False: 873k]
  ------------------
   64|   219k|        {
   65|   219k|            return phi::is_alpha(first_char);
   66|   219k|        }
   67|       |
   68|   873k|        phi::boolean just_under_scores = (first_char == '_');
   69|   873k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 150k, False: 722k]
  |  Branch (69:13): [True: 125k, False: 747k]
  |  Branch (69:43): [True: 125k, False: 25.3k]
  ------------------
   70|   125k|        {
   71|   125k|            return false;
   72|   125k|        }
   73|       |
   74|  2.84M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 2.37M, False: 462k]
  ------------------
   75|  2.37M|        {
   76|  2.37M|            const char c{token.at(index)};
   77|       |
   78|  2.37M|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 2.07M, False: 309k]
  ------------------
   79|  2.07M|            {
   80|  2.07M|                just_under_scores = false;
   81|  2.07M|            }
   82|   309k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 23.9k, False: 285k]
  ------------------
   83|  23.9k|            {
   84|  23.9k|                continue;
   85|  23.9k|            }
   86|   285k|            else
   87|   285k|            {
   88|   285k|                return false;
   89|   285k|            }
   90|  2.37M|        }
   91|       |
   92|   462k|        return !just_under_scores;
   93|   747k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|  4.95M|    {
  100|  4.95M|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 4.95M]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|  4.95M|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 800k, False: 4.15M]
  ------------------
  106|   800k|        {
  107|   800k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 109k, False: 690k]
  ------------------
  108|   109k|            {
  109|   109k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|   109k|            }
  111|       |
  112|   690k|            return {};
  113|   800k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|  4.15M|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 40.8k, False: 4.11M]
  ------------------
  117|  40.8k|        {
  118|  40.8k|            return {};
  119|  40.8k|        }
  120|       |
  121|  4.11M|        std::int32_t number{0};
  122|  4.11M|        phi::boolean is_negative{false};
  123|  4.11M|        phi::boolean starts_with_zero{false};
  124|  4.11M|        phi::boolean parsing_binary{false};
  125|  4.11M|        phi::boolean parsing_octal{false};
  126|  4.11M|        phi::boolean parsing_hexadecimal{false};
  127|  4.11M|        phi::boolean parsed_something{false};
  128|  4.11M|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|  4.63M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 4.55M, False: 78.6k]
  ------------------
  133|  4.55M|        {
  134|  4.55M|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|  4.55M|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 4.11M, False: 442k]
  ------------------
  138|  4.11M|            {
  139|  4.11M|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 8.86k, False: 4.10M]
  ------------------
  140|  8.86k|                {
  141|  8.86k|                    continue;
  142|  8.86k|                }
  143|       |
  144|  4.10M|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 31.4k, False: 4.07M]
  ------------------
  145|  31.4k|                {
  146|  31.4k|                    is_negative = true;
  147|  31.4k|                    continue;
  148|  31.4k|                }
  149|       |
  150|  4.07M|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 63.1k, False: 4.01M]
  ------------------
  151|  63.1k|                {
  152|  63.1k|                    starts_with_zero = true;
  153|  63.1k|                    continue;
  154|  63.1k|                }
  155|       |
  156|  4.01M|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 8.47k, False: 4.00M]
  ------------------
  157|  8.47k|                {
  158|  8.47k|                    return {};
  159|  8.47k|                }
  160|  4.01M|            }
  161|       |
  162|       |            // Second character
  163|  4.44M|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 180k, False: 4.26M]
  ------------------
  164|   180k|            {
  165|   180k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 63.1k, False: 117k]
  ------------------
  166|  63.1k|                {
  167|       |                    // Binary
  168|  63.1k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 8.76k, False: 54.4k]
  |  Branch (168:37): [True: 2.29k, False: 52.1k]
  ------------------
  169|  11.0k|                    {
  170|  11.0k|                        parsing_binary = true;
  171|  11.0k|                        continue;
  172|  11.0k|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  52.1k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 22.1k, False: 29.9k]
  |  Branch (175:37): [True: 5.08k, False: 24.9k]
  ------------------
  176|  27.2k|                    {
  177|  27.2k|                        parsing_hexadecimal = true;
  178|  27.2k|                        continue;
  179|  27.2k|                    }
  180|       |
  181|       |                    // Octal
  182|  24.9k|                    parsing_octal = true;
  183|  24.9k|                }
  184|   180k|            }
  185|       |
  186|       |            // Handle seperators
  187|  4.40M|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 10.6k, False: 4.39M]
  ------------------
  188|  10.6k|            {
  189|  10.6k|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 4.96k, False: 5.63k]
  ------------------
  190|  4.96k|                {
  191|  4.96k|                    return {};
  192|  4.96k|                }
  193|       |
  194|  5.63k|                parsed_separator = true;
  195|  5.63k|                continue;
  196|  10.6k|            }
  197|       |
  198|       |            // Check for over/underflow
  199|  4.39M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 122k, False: 4.27M]
  |  Branch (199:32): [True: 5.03k, False: 117k]
  ------------------
  200|  5.03k|            {
  201|       |                // Would underflow
  202|  5.03k|                return {};
  203|  5.03k|            }
  204|  4.39M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 4.27M, False: 117k]
  |  Branch (204:17): [True: 16.5k, False: 4.37M]
  |  Branch (204:33): [True: 16.5k, False: 4.25M]
  ------------------
  205|  16.5k|            {
  206|       |                // Would overflow
  207|  16.5k|                return {};
  208|  16.5k|            }
  209|       |
  210|  4.37M|            parsed_separator = false;
  211|  4.37M|            parsed_something = true;
  212|       |
  213|  4.37M|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 13.0k, False: 4.36M]
  ------------------
  214|  13.0k|            {
  215|  13.0k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 3.76k, False: 9.33k]
  ------------------
  216|  3.76k|                {
  217|  3.76k|                    return {};
  218|  3.76k|                }
  219|       |
  220|  9.33k|                number <<= 1;
  221|  9.33k|                number |= (c - '0');
  222|  9.33k|            }
  223|  4.36M|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 25.5k, False: 4.33M]
  ------------------
  224|  25.5k|            {
  225|  25.5k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 16.8k, False: 8.69k]
  ------------------
  226|  16.8k|                {
  227|  16.8k|                    return {};
  228|  16.8k|                }
  229|       |
  230|  8.69k|                number <<= 3;
  231|  8.69k|                number |= (c - '0');
  232|  8.69k|            }
  233|  4.33M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 40.7k, False: 4.29M]
  ------------------
  234|  40.7k|            {
  235|  40.7k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 21.8k, False: 18.8k]
  ------------------
  236|  21.8k|                {
  237|  21.8k|                    return {};
  238|  21.8k|                }
  239|       |
  240|  18.8k|                number <<= 4;
  241|  18.8k|                number |= phi::hex_digit_value(c).unsafe();
  242|  18.8k|            }
  243|  4.29M|            else
  244|  4.29M|            {
  245|  4.29M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 3.95M, False: 344k]
  ------------------
  246|  3.95M|                {
  247|  3.95M|                    return {};
  248|  3.95M|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|   344k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 106k, False: 237k]
  |  Branch (251:36): [True: 7.76k, False: 98.8k]
  ------------------
  252|  7.76k|                {
  253|  7.76k|                    return {};
  254|  7.76k|                }
  255|       |
  256|   336k|                number *= 10;
  257|   336k|                number += (c - '0');
  258|   336k|            }
  259|  4.37M|        }
  260|       |
  261|  78.6k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 74.5k, False: 4.12k]
  ------------------
  262|  74.5k|        {
  263|       |            // Check for over/underflow
  264|  74.5k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 15.9k, False: 58.6k]
  |  Branch (264:32): [True: 13.1k, False: 2.82k]
  ------------------
  265|  13.1k|            {
  266|       |                // Would underflow
  267|  13.1k|                return {};
  268|  13.1k|            }
  269|  61.4k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 58.6k, False: 2.82k]
  |  Branch (269:17): [True: 6.09k, False: 55.3k]
  |  Branch (269:33): [True: 6.09k, False: 52.5k]
  ------------------
  270|  6.09k|            {
  271|       |                // Would overflow
  272|  6.09k|                return {};
  273|  6.09k|            }
  274|       |
  275|  55.3k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 2.82k, False: 52.5k]
  ------------------
  276|  2.82k|            {
  277|  2.82k|                return static_cast<std::int16_t>(-number);
  278|  2.82k|            }
  279|       |
  280|  52.5k|            return static_cast<std::int16_t>(number);
  281|  55.3k|        }
  282|       |
  283|  4.12k|        return {};
  284|  78.6k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   273k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   273k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 3.81M, False: 0]
  ------------------
   64|  3.81M|            {
   65|  3.81M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 273k, False: 3.53M]
  ------------------
   66|   273k|                {
   67|   273k|                    return &token;
   68|   273k|                }
   69|  3.81M|            }
   70|       |
   71|      0|            return nullptr;
   72|   273k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  1.24M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.24M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.24M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  5.01M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  5.01M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  5.01M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  2.54M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.54M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.54M|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   571k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|   171k|    {
   25|   171k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|   171k|        switch (argument_number.unsafe())
   28|   171k|        {
   29|   119k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 119k, False: 51.4k]
  ------------------
   30|   119k|                m_Arg1 = argument;
   31|   119k|                break;
   32|  30.2k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 30.2k, False: 140k]
  ------------------
   33|  30.2k|                m_Arg2 = argument;
   34|  30.2k|                break;
   35|  21.2k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 21.2k, False: 149k]
  ------------------
   36|  21.2k|                m_Arg3 = argument;
   37|  21.2k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 171k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|   171k|#endif
   42|   171k|        }
   43|   171k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  1.88M|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  172|  21.7k|    {
  173|  21.7k|        InstructionArgument arg;
  174|  21.7k|        arg.m_Type                   = ArgumentType::IntRegister;
  175|  21.7k|        arg.register_int.register_id = id;
  176|  21.7k|        return arg;
  177|  21.7k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  180|  60.3k|    {
  181|  60.3k|        InstructionArgument arg;
  182|  60.3k|        arg.m_Type                     = ArgumentType::FloatRegister;
  183|  60.3k|        arg.register_float.register_id = id;
  184|  60.3k|        return arg;
  185|  60.3k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  188|  10.1k|    {
  189|  10.1k|        InstructionArgument arg;
  190|  10.1k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  191|  10.1k|        arg.immediate_value.signed_value = value;
  192|  10.1k|        return arg;
  193|  10.1k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  197|  16.4k|    {
  198|  16.4k|        InstructionArgument arg;
  199|  16.4k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  200|  16.4k|        arg.address_displacement.register_id  = id;
  201|  16.4k|        arg.address_displacement.displacement = displacement;
  202|  16.4k|        return arg;
  203|  16.4k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  206|  62.4k|    {
  207|  62.4k|        InstructionArgument arg;
  208|  62.4k|        arg.m_Type           = ArgumentType::Label;
  209|  62.4k|        arg.label.label_name = label_name;
  210|  62.4k|        return arg;
  211|  62.4k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   571k|    {
  453|   571k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   571k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|  6.31M|    {
   24|  6.31M|        switch (token.length().unsafe())
   25|  6.31M|        {
   26|       |            // 1 character OpCodes
   27|   893k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 893k, False: 5.42M]
  ------------------
   28|   893k|                const char c1 = token[0u];
   29|       |
   30|   893k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 243k, False: 649k]
  ------------------
   31|   243k|                {
   32|   243k|                    return OpCode::J;
   33|   243k|                }
   34|   649k|                break;
   35|   893k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|   959k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 959k, False: 5.36M]
  ------------------
   39|   959k|                const char c1 = token[0u];
   40|   959k|                const char c2 = token[1u];
   41|       |
   42|   959k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 613k, False: 345k]
  ------------------
   43|   959k|                {
   44|  16.7k|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 16.7k, False: 942k]
  ------------------
   45|  26.4k|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 9.64k, False: 949k]
  ------------------
   46|  26.4k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 10.8k, False: 15.6k]
  ------------------
   47|  10.8k|                        {
   48|  10.8k|                            return OpCode::JR;
   49|  10.8k|                        }
   50|  15.6k|                        break;
   51|       |
   52|  36.4k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 36.4k, False: 922k]
  ------------------
   53|  68.1k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 31.7k, False: 927k]
  ------------------
   54|  68.1k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 26.7k, False: 41.4k]
  ------------------
   55|  68.1k|                        {
   56|  11.7k|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 11.7k, False: 56.4k]
  ------------------
   57|  19.6k|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 7.88k, False: 60.2k]
  ------------------
   58|  19.6k|                                return OpCode::LB;
   59|  1.90k|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 1.90k, False: 66.2k]
  ------------------
   60|  2.40k|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 503, False: 67.6k]
  ------------------
   61|  2.40k|                                return OpCode::LD;
   62|  2.18k|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 2.18k, False: 66.0k]
  ------------------
   63|  5.89k|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 3.70k, False: 64.4k]
  ------------------
   64|  5.89k|                                return OpCode::LF;
   65|  5.22k|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 5.22k, False: 62.9k]
  ------------------
   66|  8.07k|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 2.84k, False: 65.3k]
  ------------------
   67|  8.07k|                                return OpCode::LH;
   68|  1.72k|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 1.72k, False: 66.4k]
  ------------------
   69|  5.42k|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 3.70k, False: 64.4k]
  ------------------
   70|  5.42k|                                return OpCode::LW;
   71|  68.1k|                        }
   72|  26.7k|                        break;
   73|  26.7k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 9.40k, False: 949k]
  ------------------
   74|  27.4k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 18.0k, False: 941k]
  ------------------
   75|  27.4k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 14.3k, False: 13.0k]
  ------------------
   76|  14.3k|                        {
   77|  14.3k|                            return OpCode::OR;
   78|  14.3k|                        }
   79|  13.0k|                        break;
   80|   167k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 167k, False: 791k]
  ------------------
   81|   223k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 55.9k, False: 903k]
  ------------------
   82|   223k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 51.0k, False: 172k]
  ------------------
   83|   223k|                        {
   84|  9.81k|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 9.81k, False: 214k]
  ------------------
   85|  19.3k|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 9.48k, False: 214k]
  ------------------
   86|  19.3k|                                return OpCode::SB;
   87|  65.8k|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 65.8k, False: 158k]
  ------------------
   88|  78.6k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 12.7k, False: 211k]
  ------------------
   89|  78.6k|                                return OpCode::SD;
   90|  7.72k|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 7.72k, False: 216k]
  ------------------
   91|  10.4k|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 2.71k, False: 221k]
  ------------------
   92|  10.4k|                                return OpCode::SF;
   93|  15.6k|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 15.6k, False: 208k]
  ------------------
   94|  22.0k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 6.39k, False: 217k]
  ------------------
   95|  22.0k|                                return OpCode::SH;
   96|  10.1k|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 10.1k, False: 213k]
  ------------------
   97|  42.4k|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 32.3k, False: 191k]
  ------------------
   98|  42.4k|                                return OpCode::SW;
   99|   223k|                        }
  100|  51.0k|                        break;
  101|   959k|                }
  102|   719k|                break;
  103|   959k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|  1.22M|            case 3: {
  ------------------
  |  Branch (106:13): [True: 1.22M, False: 5.09M]
  ------------------
  107|  1.22M|                const char c1 = token[0u];
  108|  1.22M|                const char c2 = token[1u];
  109|  1.22M|                const char c3 = token[2u];
  110|       |
  111|  1.22M|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 354k, False: 867k]
  ------------------
  112|  1.22M|                {
  113|  62.3k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 62.3k, False: 1.16M]
  ------------------
  114|  77.7k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 15.3k, False: 1.20M]
  ------------------
  115|  77.7k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 21.4k, False: 56.2k]
  |  Branch (115:29): [True: 18.7k, False: 59.0k]
  |  Branch (115:45): [True: 18.7k, False: 2.76k]
  ------------------
  116|  18.7k|                        {
  117|  18.7k|                            return OpCode::ADD;
  118|  18.7k|                        }
  119|  59.0k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 31.5k, False: 27.4k]
  |  Branch (119:34): [True: 10.6k, False: 48.3k]
  |  Branch (119:50): [True: 10.6k, False: 20.9k]
  ------------------
  120|  10.6k|                        {
  121|  10.6k|                            return OpCode::AND;
  122|  10.6k|                        }
  123|  48.3k|                        break;
  124|       |
  125|  48.3k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 10.2k, False: 1.21M]
  ------------------
  126|  67.2k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 56.9k, False: 1.16M]
  ------------------
  127|  67.2k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 45.6k, False: 21.5k]
  |  Branch (127:29): [True: 33.7k, False: 33.5k]
  |  Branch (127:45): [True: 33.7k, False: 11.9k]
  ------------------
  128|  33.7k|                        {
  129|  33.7k|                            return OpCode::DIV;
  130|  33.7k|                        }
  131|  33.5k|                        break;
  132|       |
  133|  33.5k|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 6.42k, False: 1.21M]
  ------------------
  134|  41.1k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 34.7k, False: 1.18M]
  ------------------
  135|  41.1k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 36.5k, False: 4.58k]
  ------------------
  136|  36.5k|                        {
  137|  36.5k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 18.9k, False: 17.6k]
  ------------------
  138|  18.9k|                            {
  139|  18.9k|                                return OpCode::EQD;
  140|  18.9k|                            }
  141|  17.6k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 12.2k, False: 5.41k]
  ------------------
  142|  12.2k|                            {
  143|  12.2k|                                return OpCode::EQF;
  144|  12.2k|                            }
  145|  36.5k|                        }
  146|  10.0k|                        break;
  147|       |
  148|  64.0k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 64.0k, False: 1.15M]
  ------------------
  149|  83.4k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 19.3k, False: 1.20M]
  ------------------
  150|  83.4k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 31.0k, False: 52.3k]
  ------------------
  151|  31.0k|                        {
  152|  31.0k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 21.0k, False: 10.0k]
  ------------------
  153|  21.0k|                            {
  154|  21.0k|                                return OpCode::GED;
  155|  21.0k|                            }
  156|  10.0k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 4.23k, False: 5.77k]
  ------------------
  157|  4.23k|                            {
  158|  4.23k|                                return OpCode::GEF;
  159|  4.23k|                            }
  160|  31.0k|                        }
  161|  52.3k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 18.9k, False: 33.4k]
  ------------------
  162|  18.9k|                        {
  163|  18.9k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 6.62k, False: 12.2k]
  ------------------
  164|  6.62k|                            {
  165|  6.62k|                                return OpCode::GTD;
  166|  6.62k|                            }
  167|  12.2k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 7.11k, False: 5.16k]
  ------------------
  168|  7.11k|                            {
  169|  7.11k|                                return OpCode::GTF;
  170|  7.11k|                            }
  171|  12.2k|                        }
  172|  44.3k|                        break;
  173|       |
  174|  44.3k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 6.16k, False: 1.21M]
  ------------------
  175|  30.1k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 24.0k, False: 1.19M]
  ------------------
  176|  30.1k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 22.9k, False: 7.24k]
  |  Branch (176:29): [True: 18.1k, False: 12.0k]
  |  Branch (176:45): [True: 18.1k, False: 4.75k]
  ------------------
  177|  18.1k|                        {
  178|  18.1k|                            return OpCode::JAL;
  179|  18.1k|                        }
  180|  12.0k|                        break;
  181|       |
  182|  51.6k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 51.6k, False: 1.17M]
  ------------------
  183|   134k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 83.1k, False: 1.13M]
  ------------------
  184|   134k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 8.78k, False: 126k]
  ------------------
  185|   134k|                        {
  186|  30.0k|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 30.0k, False: 104k]
  ------------------
  187|  37.2k|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 7.16k, False: 127k]
  ------------------
  188|  37.2k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 16.9k, False: 20.2k]
  ------------------
  189|  16.9k|                                {
  190|  16.9k|                                    return OpCode::LBU;
  191|  16.9k|                                }
  192|  20.2k|                                break;
  193|       |
  194|  20.2k|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 17.2k, False: 117k]
  ------------------
  195|  26.9k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 9.61k, False: 125k]
  ------------------
  196|  26.9k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 9.35k, False: 17.5k]
  ------------------
  197|  9.35k|                                {
  198|  9.35k|                                    return OpCode::LED;
  199|  9.35k|                                }
  200|  17.5k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 13.1k, False: 4.36k]
  ------------------
  201|  13.1k|                                {
  202|  13.1k|                                    return OpCode::LEF;
  203|  13.1k|                                }
  204|  4.36k|                                break;
  205|       |
  206|  4.36k|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 3.32k, False: 131k]
  ------------------
  207|  21.0k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 17.7k, False: 117k]
  ------------------
  208|  21.0k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 12.7k, False: 8.35k]
  ------------------
  209|  12.7k|                                {
  210|  12.7k|                                    return OpCode::LHI;
  211|  12.7k|                                }
  212|  8.35k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 4.77k, False: 3.57k]
  ------------------
  213|  4.77k|                                {
  214|  4.77k|                                    return OpCode::LHU;
  215|  4.77k|                                }
  216|  3.57k|                                break;
  217|       |
  218|  9.81k|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 9.81k, False: 125k]
  ------------------
  219|  20.5k|                            case 't':
  ------------------
  |  Branch (219:29): [True: 10.7k, False: 124k]
  ------------------
  220|  20.5k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 12.1k, False: 8.40k]
  ------------------
  221|  12.1k|                                {
  222|  12.1k|                                    return OpCode::LTD;
  223|  12.1k|                                }
  224|  8.40k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 5.07k, False: 3.33k]
  ------------------
  225|  5.07k|                                {
  226|  5.07k|                                    return OpCode::LTF;
  227|  5.07k|                                }
  228|  3.33k|                                break;
  229|       |
  230|  6.23k|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 6.23k, False: 128k]
  ------------------
  231|  20.3k|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 14.1k, False: 120k]
  ------------------
  232|  20.3k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 11.5k, False: 8.76k]
  ------------------
  233|  11.5k|                                {
  234|  11.5k|                                    return OpCode::LWU;
  235|  11.5k|                                }
  236|  8.76k|                                break;
  237|   134k|                        }
  238|  49.0k|                        break;
  239|       |
  240|  49.0k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 8.69k, False: 1.21M]
  ------------------
  241|  44.3k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 35.6k, False: 1.18M]
  ------------------
  242|  44.3k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 27.6k, False: 16.6k]
  ------------------
  243|  27.6k|                        {
  244|  27.6k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 11.7k, False: 15.8k]
  ------------------
  245|  11.7k|                            {
  246|  11.7k|                                return OpCode::NED;
  247|  11.7k|                            }
  248|  15.8k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 10.6k, False: 5.20k]
  ------------------
  249|  10.6k|                            {
  250|  10.6k|                                return OpCode::NEF;
  251|  10.6k|                            }
  252|  27.6k|                        }
  253|  16.6k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 9.21k, False: 7.45k]
  |  Branch (253:34): [True: 6.70k, False: 9.97k]
  |  Branch (253:50): [True: 6.70k, False: 2.51k]
  ------------------
  254|  6.70k|                        {
  255|  6.70k|                            return OpCode::NOP;
  256|  6.70k|                        }
  257|       |
  258|  15.1k|                        break;
  259|       |
  260|  15.1k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 9.53k, False: 1.21M]
  ------------------
  261|  34.5k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 24.9k, False: 1.19M]
  ------------------
  262|  34.5k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 22.6k, False: 11.8k]
  |  Branch (262:29): [True: 15.9k, False: 18.5k]
  |  Branch (262:45): [True: 15.9k, False: 6.72k]
  ------------------
  263|  15.9k|                        {
  264|  15.9k|                            return OpCode::ORI;
  265|  15.9k|                        }
  266|  18.5k|                        break;
  267|       |
  268|   177k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 177k, False: 1.04M]
  ------------------
  269|   328k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 151k, False: 1.07M]
  ------------------
  270|   328k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 34.9k, False: 293k]
  ------------------
  271|   328k|                        {
  272|  24.4k|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 24.4k, False: 304k]
  ------------------
  273|  30.5k|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 6.07k, False: 322k]
  ------------------
  274|  30.5k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 16.5k, False: 13.9k]
  ------------------
  275|  16.5k|                                {
  276|  16.5k|                                    return OpCode::SBU;
  277|  16.5k|                                }
  278|  13.9k|                                break;
  279|       |
  280|  13.9k|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 11.2k, False: 317k]
  ------------------
  281|  21.8k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 10.5k, False: 318k]
  ------------------
  282|  21.8k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 10.9k, False: 10.8k]
  ------------------
  283|  10.9k|                                {
  284|  10.9k|                                    return OpCode::SEQ;
  285|  10.9k|                                }
  286|  10.8k|                                break;
  287|       |
  288|  24.1k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 24.1k, False: 304k]
  ------------------
  289|  38.5k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 14.4k, False: 314k]
  ------------------
  290|  38.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 10.9k, False: 27.6k]
  ------------------
  291|  10.9k|                                {
  292|  10.9k|                                    return OpCode::SGE;
  293|  10.9k|                                }
  294|  27.6k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 10.8k, False: 16.7k]
  ------------------
  295|  10.8k|                                {
  296|  10.8k|                                    return OpCode::SGT;
  297|  10.8k|                                }
  298|  16.7k|                                break;
  299|       |
  300|  16.7k|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 5.64k, False: 323k]
  ------------------
  301|  11.6k|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 6.02k, False: 322k]
  ------------------
  302|  11.6k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 10.0k, False: 1.63k]
  ------------------
  303|  10.0k|                                {
  304|  10.0k|                                    return OpCode::SHU;
  305|  10.0k|                                }
  306|  1.63k|                                break;
  307|       |
  308|  29.5k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 29.5k, False: 299k]
  ------------------
  309|  69.6k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 40.0k, False: 288k]
  ------------------
  310|  69.6k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 5.31k, False: 64.3k]
  ------------------
  311|  69.6k|                                {
  312|  7.53k|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 7.53k, False: 62.0k]
  ------------------
  313|  23.0k|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 15.4k, False: 54.1k]
  ------------------
  314|  23.0k|                                        return OpCode::SLA;
  315|       |
  316|  2.77k|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 2.77k, False: 66.8k]
  ------------------
  317|  12.5k|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 9.76k, False: 59.8k]
  ------------------
  318|  12.5k|                                        return OpCode::SLE;
  319|       |
  320|  5.24k|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 5.24k, False: 64.3k]
  ------------------
  321|  15.6k|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 10.3k, False: 59.2k]
  ------------------
  322|  15.6k|                                        return OpCode::SLL;
  323|       |
  324|  8.52k|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 8.52k, False: 61.1k]
  ------------------
  325|  13.1k|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 4.63k, False: 65.0k]
  ------------------
  326|  13.1k|                                        return OpCode::SLT;
  327|  69.6k|                                }
  328|  5.31k|                                break;
  329|       |
  330|  10.8k|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 10.8k, False: 318k]
  ------------------
  331|  26.5k|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 15.6k, False: 313k]
  ------------------
  332|  26.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 14.9k, False: 11.5k]
  ------------------
  333|  14.9k|                                {
  334|  14.9k|                                    return OpCode::SNE;
  335|  14.9k|                                }
  336|  11.5k|                                break;
  337|       |
  338|  25.2k|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 25.2k, False: 303k]
  ------------------
  339|  41.6k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 16.3k, False: 312k]
  ------------------
  340|  41.6k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 14.6k, False: 26.9k]
  ------------------
  341|  14.6k|                                {
  342|  14.6k|                                    return OpCode::SRA;
  343|  14.6k|                                }
  344|  26.9k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 18.5k, False: 8.41k]
  ------------------
  345|  18.5k|                                {
  346|  18.5k|                                    return OpCode::SRL;
  347|  18.5k|                                }
  348|  8.41k|                                break;
  349|       |
  350|  20.2k|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 20.2k, False: 308k]
  ------------------
  351|  28.9k|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 8.72k, False: 320k]
  ------------------
  352|  28.9k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 22.9k, False: 6.02k]
  ------------------
  353|  22.9k|                                {
  354|  22.9k|                                    return OpCode::SUB;
  355|  22.9k|                                }
  356|  6.02k|                                break;
  357|       |
  358|  6.25k|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 6.25k, False: 322k]
  ------------------
  359|  24.6k|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 18.3k, False: 310k]
  ------------------
  360|  24.6k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 8.26k, False: 16.3k]
  ------------------
  361|  8.26k|                                {
  362|  8.26k|                                    return OpCode::SWU;
  363|  8.26k|                                }
  364|  16.3k|                                break;
  365|   328k|                        }
  366|       |
  367|   142k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 16.1k, False: 1.20M]
  ------------------
  368|   151k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 9.29k, False: 1.21M]
  ------------------
  369|   151k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 21.8k, False: 129k]
  |  Branch (369:29): [True: 13.8k, False: 137k]
  |  Branch (369:45): [True: 13.8k, False: 8.06k]
  ------------------
  370|  13.8k|                        {
  371|  13.8k|                            return OpCode::XOR;
  372|  13.8k|                        }
  373|   137k|                        break;
  374|  1.22M|                }
  375|   723k|                break;
  376|  1.22M|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  1.47M|            case 4: {
  ------------------
  |  Branch (379:13): [True: 1.47M, False: 4.84M]
  ------------------
  380|  1.47M|                const char c1 = token[0u];
  381|  1.47M|                const char c2 = token[1u];
  382|  1.47M|                const char c3 = token[2u];
  383|  1.47M|                const char c4 = token[3u];
  384|       |
  385|  1.47M|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 306k, False: 1.17M]
  ------------------
  386|  1.47M|                {
  387|  97.3k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 97.3k, False: 1.38M]
  ------------------
  388|   184k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 86.8k, False: 1.39M]
  ------------------
  389|   184k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 9.23k, False: 174k]
  ------------------
  390|   184k|                        {
  391|  64.5k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 64.5k, False: 119k]
  ------------------
  392|   136k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 72.0k, False: 112k]
  ------------------
  393|   136k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 123k, False: 12.8k]
  ------------------
  394|   123k|                                {
  395|   123k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 10.4k, False: 113k]
  ------------------
  396|   123k|                                    {
  397|  26.0k|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 26.0k, False: 97.8k]
  ------------------
  398|  35.7k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 9.67k, False: 114k]
  ------------------
  399|  35.7k|                                            return OpCode::ADDD;
  400|       |
  401|  9.22k|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 9.22k, False: 114k]
  ------------------
  402|  18.0k|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 8.84k, False: 114k]
  ------------------
  403|  18.0k|                                            return OpCode::ADDF;
  404|       |
  405|  14.4k|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 14.4k, False: 109k]
  ------------------
  406|  24.8k|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 10.3k, False: 113k]
  ------------------
  407|  24.8k|                                            return OpCode::ADDI;
  408|       |
  409|  16.7k|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 16.7k, False: 107k]
  ------------------
  410|  34.8k|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 18.0k, False: 105k]
  ------------------
  411|  34.8k|                                            return OpCode::ADDU;
  412|   123k|                                    }
  413|   123k|                                }
  414|  23.2k|                                break;
  415|       |
  416|  23.2k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 15.2k, False: 168k]
  ------------------
  417|  38.3k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 23.0k, False: 161k]
  ------------------
  418|  38.3k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 17.4k, False: 20.9k]
  |  Branch (418:37): [True: 6.28k, False: 32.0k]
  |  Branch (418:53): [True: 6.28k, False: 11.1k]
  ------------------
  419|  6.28k|                                {
  420|  6.28k|                                    return OpCode::ANDI;
  421|  6.28k|                                }
  422|       |
  423|  32.0k|                                break;
  424|   184k|                        }
  425|  64.5k|                        break;
  426|       |
  427|  64.5k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 32.8k, False: 1.44M]
  ------------------
  428|   105k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 72.4k, False: 1.40M]
  ------------------
  429|   105k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 5.16k, False: 100k]
  ------------------
  430|   105k|                        {
  431|  16.5k|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 16.5k, False: 88.6k]
  ------------------
  432|  23.2k|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 6.66k, False: 98.5k]
  ------------------
  433|  23.2k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 14.3k, False: 8.93k]
  |  Branch (433:37): [True: 6.63k, False: 16.6k]
  |  Branch (433:53): [True: 6.63k, False: 7.67k]
  ------------------
  434|  6.63k|                                {
  435|  6.63k|                                    return OpCode::BEQZ;
  436|  6.63k|                                }
  437|  16.6k|                                break;
  438|       |
  439|  16.6k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 8.35k, False: 96.8k]
  ------------------
  440|  31.1k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 22.8k, False: 82.3k]
  ------------------
  441|  31.1k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 24.2k, False: 6.95k]
  ------------------
  442|  24.2k|                                {
  443|  24.2k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 11.5k, False: 12.6k]
  ------------------
  444|  11.5k|                                    {
  445|  11.5k|                                        return OpCode::BFPF;
  446|  11.5k|                                    }
  447|  12.6k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 9.52k, False: 3.15k]
  ------------------
  448|  9.52k|                                    {
  449|  9.52k|                                        return OpCode::BFPT;
  450|  9.52k|                                    }
  451|  24.2k|                                }
  452|  10.1k|                                break;
  453|       |
  454|  11.5k|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 11.5k, False: 93.6k]
  ------------------
  455|  45.6k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 34.0k, False: 71.1k]
  ------------------
  456|  45.6k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 39.9k, False: 5.69k]
  |  Branch (456:37): [True: 23.7k, False: 21.9k]
  |  Branch (456:53): [True: 23.7k, False: 16.2k]
  ------------------
  457|  23.7k|                                {
  458|  23.7k|                                    return OpCode::BNEZ;
  459|  23.7k|                                }
  460|   105k|                        }
  461|  53.8k|                        break;
  462|       |
  463|  53.8k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 14.6k, False: 1.46M]
  ------------------
  464|   109k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 94.7k, False: 1.38M]
  ------------------
  465|   109k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 87.8k, False: 21.4k]
  |  Branch (465:29): [True: 70.1k, False: 39.2k]
  |  Branch (465:45): [True: 70.1k, False: 17.7k]
  ------------------
  466|  70.1k|                        {
  467|  70.1k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 9.78k, False: 60.3k]
  ------------------
  468|  70.1k|                            {
  469|  4.12k|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 4.12k, False: 65.9k]
  ------------------
  470|  11.6k|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 7.54k, False: 62.5k]
  ------------------
  471|  11.6k|                                    return OpCode::DIVD;
  472|       |
  473|  7.71k|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 7.71k, False: 62.3k]
  ------------------
  474|  10.0k|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 2.34k, False: 67.7k]
  ------------------
  475|  10.0k|                                    return OpCode::DIVF;
  476|       |
  477|  9.60k|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 9.60k, False: 60.5k]
  ------------------
  478|  24.9k|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 15.3k, False: 54.7k]
  ------------------
  479|  24.9k|                                    return OpCode::DIVI;
  480|       |
  481|  9.19k|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 9.19k, False: 60.9k]
  ------------------
  482|  13.6k|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 4.46k, False: 65.6k]
  ------------------
  483|  13.6k|                                    return OpCode::DIVU;
  484|  70.1k|                            }
  485|  70.1k|                        }
  486|  49.0k|                        break;
  487|       |
  488|  49.0k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 3.88k, False: 1.47M]
  ------------------
  489|  34.5k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 30.6k, False: 1.44M]
  ------------------
  490|  34.5k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 30.2k, False: 4.31k]
  |  Branch (490:29): [True: 18.5k, False: 15.9k]
  |  Branch (490:45): [True: 27.6k, False: 2.60k]
  |  Branch (490:61): [True: 18.5k, False: 9.04k]
  ------------------
  491|  18.5k|                        {
  492|  18.5k|                            return OpCode::HALT;
  493|  18.5k|                        }
  494|  15.9k|                        break;
  495|       |
  496|  15.9k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 7.30k, False: 1.47M]
  ------------------
  497|  52.8k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 45.5k, False: 1.43M]
  ------------------
  498|  52.8k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 45.2k, False: 7.60k]
  |  Branch (498:29): [True: 14.4k, False: 38.4k]
  |  Branch (498:45): [True: 33.1k, False: 12.1k]
  |  Branch (498:61): [True: 14.4k, False: 18.7k]
  ------------------
  499|  14.4k|                        {
  500|  14.4k|                            return OpCode::JALR;
  501|  14.4k|                        }
  502|  38.4k|                        break;
  503|       |
  504|  38.4k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 15.3k, False: 1.46M]
  ------------------
  505|  85.0k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 69.7k, False: 1.40M]
  ------------------
  506|  85.0k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 47.5k, False: 37.5k]
  |  Branch (506:29): [True: 41.9k, False: 43.1k]
  |  Branch (506:45): [True: 41.9k, False: 5.60k]
  ------------------
  507|  41.9k|                        {
  508|  41.9k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 8.89k, False: 33.0k]
  ------------------
  509|  8.89k|                            {
  510|  8.89k|                                return OpCode::MOVD;
  511|  8.89k|                            }
  512|  33.0k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 20.7k, False: 12.3k]
  ------------------
  513|  20.7k|                            {
  514|  20.7k|                                return OpCode::MOVF;
  515|  20.7k|                            }
  516|  41.9k|                        }
  517|  43.1k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 29.9k, False: 13.1k]
  |  Branch (517:34): [True: 19.7k, False: 23.4k]
  |  Branch (517:50): [True: 23.4k, False: 6.54k]
  |  Branch (517:66): [True: 19.7k, False: 3.69k]
  ------------------
  518|  19.7k|                        {
  519|  19.7k|                            return OpCode::MULT;
  520|  19.7k|                        }
  521|  35.7k|                        break;
  522|       |
  523|   254k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 254k, False: 1.22M]
  ------------------
  524|   532k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 277k, False: 1.20M]
  ------------------
  525|   532k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 21.5k, False: 510k]
  ------------------
  526|   532k|                        {
  527|  38.2k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 38.2k, False: 494k]
  ------------------
  528|  48.1k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 9.94k, False: 522k]
  ------------------
  529|  48.1k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 38.4k, False: 9.75k]
  ------------------
  530|  38.4k|                                {
  531|  38.4k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 14.4k, False: 24.0k]
  ------------------
  532|  14.4k|                                    {
  533|  14.4k|                                        return OpCode::SEQI;
  534|  14.4k|                                    }
  535|  24.0k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 10.2k, False: 13.7k]
  ------------------
  536|  10.2k|                                    {
  537|  10.2k|                                        return OpCode::SEQU;
  538|  10.2k|                                    }
  539|  38.4k|                                }
  540|  23.5k|                                break;
  541|       |
  542|  38.7k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 38.7k, False: 493k]
  ------------------
  543|   122k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 83.4k, False: 448k]
  ------------------
  544|   122k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 59.1k, False: 63.0k]
  ------------------
  545|  59.1k|                                {
  546|  59.1k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 24.0k, False: 35.0k]
  ------------------
  547|  24.0k|                                    {
  548|  24.0k|                                        return OpCode::SGEI;
  549|  24.0k|                                    }
  550|  35.0k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 26.0k, False: 8.92k]
  ------------------
  551|  26.0k|                                    {
  552|  26.0k|                                        return OpCode::SGEU;
  553|  26.0k|                                    }
  554|  59.1k|                                }
  555|  63.0k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 49.2k, False: 13.8k]
  ------------------
  556|  49.2k|                                {
  557|  49.2k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 15.8k, False: 33.4k]
  ------------------
  558|  15.8k|                                    {
  559|  15.8k|                                        return OpCode::SGTI;
  560|  15.8k|                                    }
  561|  33.4k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 27.7k, False: 5.69k]
  ------------------
  562|  27.7k|                                    {
  563|  27.7k|                                        return OpCode::SGTU;
  564|  27.7k|                                    }
  565|  49.2k|                                }
  566|  28.4k|                                break;
  567|       |
  568|  43.1k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 43.1k, False: 489k]
  ------------------
  569|   143k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 100k, False: 432k]
  ------------------
  570|   143k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 9.16k, False: 134k]
  ------------------
  571|   143k|                                {
  572|  11.9k|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 11.9k, False: 131k]
  ------------------
  573|  21.1k|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 9.21k, False: 134k]
  ------------------
  574|  21.1k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 14.3k, False: 6.83k]
  ------------------
  575|  14.3k|                                        {
  576|  14.3k|                                            return OpCode::SLAI;
  577|  14.3k|                                        }
  578|  6.83k|                                        break;
  579|       |
  580|  27.2k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 27.2k, False: 115k]
  ------------------
  581|  32.6k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 5.40k, False: 137k]
  ------------------
  582|  32.6k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 15.1k, False: 17.5k]
  ------------------
  583|  15.1k|                                        {
  584|  15.1k|                                            return OpCode::SLEI;
  585|  15.1k|                                        }
  586|  17.5k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 14.1k, False: 3.40k]
  ------------------
  587|  14.1k|                                        {
  588|  14.1k|                                            return OpCode::SLEU;
  589|  14.1k|                                        }
  590|  3.40k|                                        break;
  591|       |
  592|  6.76k|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 6.76k, False: 136k]
  ------------------
  593|  22.3k|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 15.5k, False: 127k]
  ------------------
  594|  22.3k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 16.2k, False: 6.07k]
  ------------------
  595|  16.2k|                                        {
  596|  16.2k|                                            return OpCode::SLLI;
  597|  16.2k|                                        }
  598|  6.07k|                                        break;
  599|       |
  600|  34.6k|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 34.6k, False: 108k]
  ------------------
  601|  57.8k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 23.2k, False: 120k]
  ------------------
  602|  57.8k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 16.0k, False: 41.8k]
  ------------------
  603|  16.0k|                                        {
  604|  16.0k|                                            return OpCode::SLTI;
  605|  16.0k|                                        }
  606|  41.8k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 23.4k, False: 18.3k]
  ------------------
  607|  23.4k|                                        {
  608|  23.4k|                                            return OpCode::SLTU;
  609|  23.4k|                                        }
  610|  18.3k|                                        break;
  611|   143k|                                }
  612|       |
  613|  49.5k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 5.68k, False: 526k]
  ------------------
  614|   102k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 52.6k, False: 479k]
  ------------------
  615|   102k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 56.5k, False: 45.6k]
  ------------------
  616|  56.5k|                                {
  617|  56.5k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 14.1k, False: 42.3k]
  ------------------
  618|  14.1k|                                    {
  619|  14.1k|                                        return OpCode::SNEI;
  620|  14.1k|                                    }
  621|  42.3k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 22.9k, False: 19.4k]
  ------------------
  622|  22.9k|                                    {
  623|  22.9k|                                        return OpCode::SNEU;
  624|  22.9k|                                    }
  625|  56.5k|                                }
  626|  65.1k|                                break;
  627|       |
  628|  65.1k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 25.4k, False: 506k]
  ------------------
  629|  47.3k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 21.9k, False: 510k]
  ------------------
  630|  47.3k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 24.2k, False: 23.1k]
  |  Branch (630:37): [True: 18.3k, False: 29.0k]
  |  Branch (630:53): [True: 18.3k, False: 5.87k]
  ------------------
  631|  18.3k|                                {
  632|  18.3k|                                    return OpCode::SRAI;
  633|  18.3k|                                }
  634|  29.0k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 22.4k, False: 6.54k]
  |  Branch (634:42): [True: 8.61k, False: 20.3k]
  |  Branch (634:58): [True: 8.61k, False: 13.8k]
  ------------------
  635|  8.61k|                                {
  636|  8.61k|                                    return OpCode::SRLI;
  637|  8.61k|                                }
  638|  20.3k|                                break;
  639|       |
  640|  33.8k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 33.8k, False: 498k]
  ------------------
  641|  91.4k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 57.5k, False: 474k]
  ------------------
  642|  91.4k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 80.8k, False: 10.5k]
  ------------------
  643|  80.8k|                                {
  644|  80.8k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 15.5k, False: 65.3k]
  ------------------
  645|  80.8k|                                    {
  646|  13.2k|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 13.2k, False: 67.5k]
  ------------------
  647|  20.0k|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 6.77k, False: 74.0k]
  ------------------
  648|  20.0k|                                            return OpCode::SUBD;
  649|       |
  650|  7.50k|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 7.50k, False: 73.3k]
  ------------------
  651|  15.3k|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 7.88k, False: 72.9k]
  ------------------
  652|  15.3k|                                            return OpCode::SUBF;
  653|       |
  654|  5.41k|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 5.41k, False: 75.4k]
  ------------------
  655|  15.2k|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 9.84k, False: 70.9k]
  ------------------
  656|  15.2k|                                            return OpCode::SUBI;
  657|       |
  658|  7.43k|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 7.43k, False: 73.3k]
  ------------------
  659|  14.6k|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 7.18k, False: 73.6k]
  ------------------
  660|  14.6k|                                            return OpCode::SUBU;
  661|  80.8k|                                    }
  662|  80.8k|                                }
  663|  26.0k|                                break;
  664|   532k|                        }
  665|   185k|                        break;
  666|       |
  667|   185k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 5.24k, False: 1.47M]
  ------------------
  668|  17.1k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 11.8k, False: 1.46M]
  ------------------
  669|  17.1k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 10.5k, False: 6.53k]
  |  Branch (669:29): [True: 3.14k, False: 13.9k]
  |  Branch (669:45): [True: 6.45k, False: 4.14k]
  |  Branch (669:61): [True: 3.14k, False: 3.31k]
  ------------------
  670|  3.14k|                        {
  671|  3.14k|                            return OpCode::TRAP;
  672|  3.14k|                        }
  673|  13.9k|                        break;
  674|  26.5k|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 26.5k, False: 1.45M]
  ------------------
  675|  51.6k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 25.1k, False: 1.45M]
  ------------------
  676|  51.6k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 42.3k, False: 9.30k]
  |  Branch (676:29): [True: 19.8k, False: 31.7k]
  |  Branch (676:45): [True: 35.8k, False: 6.53k]
  |  Branch (676:61): [True: 19.8k, False: 15.9k]
  ------------------
  677|  19.8k|                        {
  678|  19.8k|                            return OpCode::XORI;
  679|  19.8k|                        }
  680|  31.7k|                        break;
  681|  1.47M|                }
  682|   795k|                break;
  683|  1.47M|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|   878k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 878k, False: 5.44M]
  ------------------
  687|   878k|                const char c1 = token[0u];
  688|   878k|                const char c2 = token[1u];
  689|   878k|                const char c3 = token[2u];
  690|   878k|                const char c4 = token[3u];
  691|   878k|                const char c5 = token[4u];
  692|       |
  693|   878k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 196k, False: 681k]
  ------------------
  694|   878k|                {
  695|  25.1k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 25.1k, False: 853k]
  ------------------
  696|  94.5k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 69.4k, False: 808k]
  ------------------
  697|  94.5k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 87.1k, False: 7.45k]
  |  Branch (697:29): [True: 18.7k, False: 75.8k]
  |  Branch (697:45): [True: 75.7k, False: 11.3k]
  |  Branch (697:61): [True: 55.4k, False: 20.2k]
  |  Branch (697:77): [True: 18.7k, False: 36.7k]
  ------------------
  698|  18.7k|                        {
  699|  18.7k|                            return OpCode::ADDUI;
  700|  18.7k|                        }
  701|  75.8k|                        break;
  702|       |
  703|  75.8k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 7.06k, False: 871k]
  ------------------
  704|  78.4k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 71.4k, False: 806k]
  ------------------
  705|  78.4k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 63.3k, False: 15.1k]
  |  Branch (705:29): [True: 22.4k, False: 56.0k]
  |  Branch (705:45): [True: 48.4k, False: 14.8k]
  |  Branch (705:61): [True: 36.2k, False: 12.2k]
  |  Branch (705:77): [True: 22.4k, False: 13.7k]
  ------------------
  706|  22.4k|                        {
  707|  22.4k|                            return OpCode::DIVUI;
  708|  22.4k|                        }
  709|  56.0k|                        break;
  710|       |
  711|  56.0k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 36.3k, False: 841k]
  ------------------
  712|   137k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 101k, False: 776k]
  ------------------
  713|   137k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 97.9k, False: 39.7k]
  |  Branch (713:29): [True: 78.4k, False: 59.2k]
  |  Branch (713:45): [True: 82.5k, False: 15.3k]
  |  Branch (713:61): [True: 78.4k, False: 4.10k]
  ------------------
  714|  78.4k|                        {
  715|  78.4k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 11.6k, False: 66.8k]
  ------------------
  716|  78.4k|                            {
  717|  7.02k|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 7.02k, False: 71.4k]
  ------------------
  718|  10.6k|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 3.58k, False: 74.8k]
  ------------------
  719|  10.6k|                                    return OpCode::MULTD;
  720|       |
  721|  12.6k|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 12.6k, False: 65.8k]
  ------------------
  722|  24.4k|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 11.8k, False: 66.6k]
  ------------------
  723|  24.4k|                                    return OpCode::MULTF;
  724|       |
  725|  9.14k|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 9.14k, False: 69.3k]
  ------------------
  726|  17.8k|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 8.73k, False: 69.7k]
  ------------------
  727|  17.8k|                                    return OpCode::MULTI;
  728|       |
  729|  4.10k|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 4.10k, False: 74.3k]
  ------------------
  730|  13.9k|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 9.81k, False: 68.6k]
  ------------------
  731|  13.9k|                                    return OpCode::MULTU;
  732|  78.4k|                            }
  733|  78.4k|                        }
  734|  70.8k|                        break;
  735|       |
  736|   161k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 161k, False: 716k]
  ------------------
  737|   371k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 209k, False: 668k]
  ------------------
  738|   371k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 12.8k, False: 358k]
  ------------------
  739|   371k|                        {
  740|  60.0k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 60.0k, False: 311k]
  ------------------
  741|  82.4k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 22.4k, False: 348k]
  ------------------
  742|  82.4k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 60.1k, False: 22.3k]
  |  Branch (742:37): [True: 14.3k, False: 68.1k]
  |  Branch (742:53): [True: 34.2k, False: 25.8k]
  |  Branch (742:69): [True: 14.3k, False: 19.9k]
  ------------------
  743|  14.3k|                                {
  744|  14.3k|                                    return OpCode::SEQUI;
  745|  14.3k|                                }
  746|  68.1k|                                break;
  747|       |
  748|  68.1k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 37.0k, False: 334k]
  ------------------
  749|  85.4k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 48.3k, False: 322k]
  ------------------
  750|  85.4k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 39.8k, False: 45.5k]
  |  Branch (750:37): [True: 19.1k, False: 66.3k]
  |  Branch (750:53): [True: 28.7k, False: 11.1k]
  |  Branch (750:69): [True: 19.1k, False: 9.61k]
  ------------------
  751|  19.1k|                                {
  752|  19.1k|                                    return OpCode::SGEUI;
  753|  19.1k|                                }
  754|  66.3k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 44.8k, False: 21.4k]
  |  Branch (754:42): [True: 18.2k, False: 48.0k]
  |  Branch (754:58): [True: 40.7k, False: 4.06k]
  |  Branch (754:74): [True: 18.2k, False: 22.5k]
  ------------------
  755|  18.2k|                                {
  756|  18.2k|                                    return OpCode::SGTUI;
  757|  18.2k|                                }
  758|  48.0k|                                break;
  759|       |
  760|  48.0k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 26.4k, False: 344k]
  ------------------
  761|   104k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 78.2k, False: 292k]
  ------------------
  762|   104k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 43.3k, False: 61.3k]
  |  Branch (762:37): [True: 18.5k, False: 86.2k]
  |  Branch (762:53): [True: 32.6k, False: 10.7k]
  |  Branch (762:69): [True: 18.5k, False: 14.1k]
  ------------------
  763|  18.5k|                                {
  764|  18.5k|                                    return OpCode::SLEUI;
  765|  18.5k|                                }
  766|  86.2k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 50.3k, False: 35.8k]
  |  Branch (766:42): [True: 17.1k, False: 69.1k]
  |  Branch (766:58): [True: 40.5k, False: 9.75k]
  |  Branch (766:74): [True: 17.1k, False: 23.4k]
  ------------------
  767|  17.1k|                                {
  768|  17.1k|                                    return OpCode::SLTUI;
  769|  17.1k|                                }
  770|  69.1k|                                break;
  771|       |
  772|  69.1k|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 3.32k, False: 367k]
  ------------------
  773|  39.6k|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 36.3k, False: 334k]
  ------------------
  774|  39.6k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 36.1k, False: 3.45k]
  |  Branch (774:37): [True: 17.8k, False: 21.7k]
  |  Branch (774:53): [True: 31.6k, False: 4.52k]
  |  Branch (774:69): [True: 17.8k, False: 13.7k]
  ------------------
  775|  17.8k|                                {
  776|  17.8k|                                    return OpCode::SNEUI;
  777|  17.8k|                                }
  778|  21.7k|                                break;
  779|       |
  780|  21.7k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 13.0k, False: 358k]
  ------------------
  781|  46.1k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 33.0k, False: 338k]
  ------------------
  782|  46.1k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 35.7k, False: 10.3k]
  |  Branch (782:37): [True: 17.2k, False: 28.8k]
  |  Branch (782:53): [True: 26.9k, False: 8.78k]
  |  Branch (782:69): [True: 17.2k, False: 9.72k]
  ------------------
  783|  17.2k|                                {
  784|  17.2k|                                    return OpCode::SUBUI;
  785|  17.2k|                                }
  786|  28.8k|                                break;
  787|   371k|                        }
  788|       |
  789|   248k|                        break;
  790|   878k|                }
  791|       |
  792|   647k|                break;
  793|   878k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|   647k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 474k, False: 5.84M]
  ------------------
  797|   474k|                const char c1 = token[0u];
  798|   474k|                const char c2 = token[1u];
  799|   474k|                const char c3 = token[2u];
  800|   474k|                const char c4 = token[3u];
  801|   474k|                const char c5 = token[4u];
  802|   474k|                const char c6 = token[5u];
  803|       |
  804|   474k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 208k, False: 265k]
  |  Branch (804:21): [True: 181k, False: 292k]
  |  Branch (804:37): [True: 201k, False: 6.66k]
  |  Branch (804:53): [True: 181k, False: 20.1k]
  ------------------
  805|   181k|                {
  806|   181k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 6.73k, False: 174k]
  ------------------
  807|   181k|                    {
  808|  32.1k|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 32.1k, False: 149k]
  ------------------
  809|  59.6k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 27.4k, False: 154k]
  ------------------
  810|  59.6k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 51.7k, False: 7.90k]
  ------------------
  811|  51.7k|                            {
  812|  51.7k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 17.1k, False: 34.5k]
  ------------------
  813|  17.1k|                                {
  814|  17.1k|                                    return OpCode::CVTD2F;
  815|  17.1k|                                }
  816|  34.5k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 24.4k, False: 10.0k]
  ------------------
  817|  24.4k|                                {
  818|  24.4k|                                    return OpCode::CVTD2I;
  819|  24.4k|                                }
  820|  51.7k|                            }
  821|  17.9k|                            break;
  822|       |
  823|  17.9k|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 12.4k, False: 169k]
  ------------------
  824|  63.3k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 50.9k, False: 130k]
  ------------------
  825|  63.3k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 52.2k, False: 11.1k]
  ------------------
  826|  52.2k|                            {
  827|  52.2k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 22.9k, False: 29.3k]
  ------------------
  828|  22.9k|                                {
  829|  22.9k|                                    return OpCode::CVTF2D;
  830|  22.9k|                                }
  831|  29.3k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 21.0k, False: 8.30k]
  ------------------
  832|  21.0k|                                {
  833|  21.0k|                                    return OpCode::CVTF2I;
  834|  21.0k|                                }
  835|  52.2k|                            }
  836|  19.4k|                            break;
  837|       |
  838|  41.1k|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 41.1k, False: 140k]
  ------------------
  839|  51.9k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 10.7k, False: 170k]
  ------------------
  840|  51.9k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 36.5k, False: 15.3k]
  ------------------
  841|  36.5k|                            {
  842|  36.5k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 16.4k, False: 20.1k]
  ------------------
  843|  16.4k|                                {
  844|  16.4k|                                    return OpCode::CVTI2D;
  845|  16.4k|                                }
  846|  20.1k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 11.9k, False: 8.18k]
  ------------------
  847|  11.9k|                                {
  848|  11.9k|                                    return OpCode::CVTI2F;
  849|  11.9k|                                }
  850|  36.5k|                            }
  851|   181k|                    }
  852|   181k|                }
  853|   292k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 125k, False: 167k]
  |  Branch (853:26): [True: 30.7k, False: 261k]
  |  Branch (853:42): [True: 72.7k, False: 52.6k]
  |  Branch (853:58): [True: 53.0k, False: 19.7k]
  |  Branch (853:74): [True: 48.8k, False: 4.13k]
  ------------------
  854|   292k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 40.8k, False: 8.04k]
  |  Branch (854:42): [True: 30.7k, False: 10.0k]
  ------------------
  855|  30.7k|                {
  856|  30.7k|                    return OpCode::MULTUI;
  857|  30.7k|                }
  858|   329k|                break;
  859|   474k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|   329k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 234k, False: 6.08M]
  ------------------
  863|   234k|                const char c1 = token[0u];
  864|   234k|                const char c2 = token[1u];
  865|   234k|                const char c3 = token[2u];
  866|   234k|                const char c4 = token[3u];
  867|   234k|                const char c5 = token[4u];
  868|   234k|                const char c6 = token[5u];
  869|   234k|                const char c7 = token[6u];
  870|       |
  871|   234k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 121k, False: 113k]
  |  Branch (871:21): [True: 92.8k, False: 141k]
  |  Branch (871:37): [True: 103k, False: 17.6k]
  |  Branch (871:53): [True: 92.8k, False: 10.7k]
  ------------------
  872|  92.8k|                {
  873|  92.8k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 48.2k, False: 44.6k]
  |  Branch (873:25): [True: 17.5k, False: 75.3k]
  |  Branch (873:41): [True: 32.8k, False: 15.3k]
  |  Branch (873:54): [True: 29.4k, False: 3.34k]
  |  Branch (873:70): [True: 17.5k, False: 11.9k]
  ------------------
  874|  17.5k|                    {
  875|  17.5k|                        return OpCode::MOVI2FP;
  876|  17.5k|                    }
  877|  75.3k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 44.3k, False: 31.0k]
  |  Branch (877:25): [True: 23.4k, False: 51.8k]
  |  Branch (877:41): [True: 36.0k, False: 8.29k]
  |  Branch (877:57): [True: 30.8k, False: 5.18k]
  |  Branch (877:70): [True: 23.4k, False: 7.36k]
  ------------------
  878|  23.4k|                    {
  879|  23.4k|                        return OpCode::MOVFP2I;
  880|  23.4k|                    }
  881|  75.3k|                }
  882|   193k|                break;
  883|   234k|            }
  884|       |
  885|   193k|            default: {
  ------------------
  |  Branch (885:13): [True: 179k, False: 6.14M]
  ------------------
  886|   179k|                break;
  887|   234k|            }
  888|  6.31M|        }
  889|       |
  890|       |        // None found
  891|  4.23M|        return OpCode::NONE;
  892|  6.31M|    }
_ZN3dlx3iceEcc:
   17|  9.16M|    {
   18|  9.16M|        constexpr const char diff = 'a' - 'A';
   19|  9.16M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 2.80M, False: 6.36M]
  |  Branch (19:28): [True: 2.64M, False: 3.71M]
  ------------------
   20|  9.16M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  6.57M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|   114k|    {
  195|   114k|        ParseError err;
  196|       |
  197|   114k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|   114k|        err.m_LineNumber                           = line_number;
  199|   114k|        err.m_Column                               = column;
  200|   114k|        err.unexpected_argument_type.expected_type = expected_type;
  201|   114k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|   114k|        return err;
  204|   114k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|   114k|    {
  209|   114k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|   114k|                                                         token.GetColumn().unsafe(), expected_type,
  211|   114k|                                                         actual_type);
  212|   114k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|  9.61k|    {
  218|  9.61k|        ParseError err;
  219|       |
  220|  9.61k|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|  9.61k|        err.m_LineNumber        = line_number;
  222|  9.61k|        err.m_Column            = column;
  223|  9.61k|        err.invalid_number.text = text;
  224|       |
  225|  9.61k|        return err;
  226|  9.61k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|  9.61k|    {
  230|  9.61k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|  9.61k|                                                token.GetColumn().unsafe(), token.GetText());
  232|  9.61k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|     18|    {
  237|     18|        ParseError err;
  238|       |
  239|     18|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|     18|        err.m_LineNumber = line_number;
  241|     18|        err.m_Column     = column;
  242|       |
  243|     18|        return err;
  244|     18|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|     18|    {
  249|     18|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|     18|                                                                     token.GetColumn().unsafe());
  251|     18|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  2.85M|    {
  257|  2.85M|        ParseError err;
  258|       |
  259|  2.85M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  2.85M|        err.m_LineNumber                   = line_number;
  261|  2.85M|        err.m_Column                       = column;
  262|  2.85M|        err.unexpected_token.expected_type = expected_type;
  263|  2.85M|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  2.85M|        return err;
  266|  2.85M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  2.85M|    {
  271|  2.85M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  2.85M|                                                  token.GetColumn().unsafe(), expected_type,
  273|  2.85M|                                                  token.GetType());
  274|  2.85M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|   731k|    {
  279|   731k|        ParseError err;
  280|       |
  281|   731k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|   731k|        err.m_LineNumber                   = line_number;
  283|   731k|        err.m_Column                       = column;
  284|   731k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|   731k|        return err;
  287|   731k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|  10.0k|    {
  291|  10.0k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|  10.0k|                                                    token.GetColumn().unsafe(), token.GetText());
  293|  10.0k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  1.29M|    {
  298|  1.29M|        ParseError err;
  299|       |
  300|  1.29M|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  1.29M|        err.m_LineNumber                       = line_number;
  302|  1.29M|        err.m_Column                           = column;
  303|  1.29M|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  1.29M|        return err;
  306|  1.29M|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  1.29M|    {
  311|  1.29M|        return ConstructInvalidLabelIdentifierParseError(
  312|  1.29M|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  1.29M|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|   273k|    {
  319|   273k|        ParseError err;
  320|       |
  321|   273k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|   273k|        err.m_LineNumber                     = line_number;
  323|   273k|        err.m_Column                         = column;
  324|   273k|        err.label_already_defined.label_name = label_name;
  325|   273k|        err.label_already_defined.at_line    = at_line;
  326|   273k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|   273k|        return err;
  329|   273k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|   273k|    {
  334|   273k|        return ConstructLabelAlreadyDefinedParseError(
  335|   273k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|   273k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|   273k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|   800k|    {
  342|   800k|        ParseError err;
  343|       |
  344|   800k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|   800k|        err.m_LineNumber = line_number;
  346|   800k|        err.m_Column     = column;
  347|       |
  348|   800k|        return err;
  349|   800k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|   800k|    {
  354|   800k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|   800k|                                                        token.GetColumn().unsafe());
  356|   800k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|  94.6k|    {
  362|  94.6k|        ParseError err;
  363|       |
  364|  94.6k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|  94.6k|        err.m_LineNumber               = line_number;
  366|  94.6k|        err.m_Column                   = column;
  367|  94.6k|        err.too_few_arguments.required = required;
  368|  94.6k|        err.too_few_arguments.provided = provided;
  369|       |
  370|  94.6k|        return err;
  371|  94.6k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|  94.6k|    {
  376|  94.6k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|  94.6k|                                                  token.GetColumn().unsafe(), required, provided);
  378|  94.6k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|   245k|    {
  383|   245k|        ParseError err;
  384|       |
  385|   245k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|   245k|        err.m_LineNumber           = line_number;
  387|   245k|        err.m_Column               = column;
  388|   245k|        err.empty_label.label_name = label_name;
  389|       |
  390|   245k|        return err;
  391|   245k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|   245k|    {
  395|   245k|        return ConstructEmptyLabelParseError(
  396|   245k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|   245k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 207k, False: 38.5k]
  ------------------
  398|   207k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|   245k|                        token.GetText());
  400|   245k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|   143k|    {
  405|   143k|        ParseError err;
  406|       |
  407|   143k|        err.m_Type       = ParseError::Type::TooManyComma;
  408|   143k|        err.m_LineNumber = line_number;
  409|   143k|        err.m_Column     = column;
  410|       |
  411|   143k|        return err;
  412|   143k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|   143k|    {
  416|   143k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|   143k|                                               token.GetColumn().unsafe());
  418|   143k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  6.57M|    {
   19|  6.57M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  6.57M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  33.5k|    {
  181|  33.5k|        ParsedProgram program;
  182|       |
  183|  33.5k|        program.m_Tokens = tokens;
  184|       |
  185|  33.5k|        phi::boolean line_has_instruction{false};
  186|  33.5k|        phi::usize   label_count{0u};
  187|       |
  188|  7.52M|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 7.49M, False: 33.5k]
  ------------------
  189|  7.49M|        {
  190|  7.49M|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|  7.49M|            switch (current_token.GetType())
  195|  7.49M|            {
  196|       |                // Ignore comments
  197|  47.0k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 47.0k, False: 7.44M]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  47.0k|                    break;
  200|       |
  201|   906k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 906k, False: 6.58M]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|   906k|                    line_has_instruction = false;
  204|   906k|                    break;
  205|       |
  206|  2.89M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 2.89M, False: 4.59M]
  ------------------
  207|  2.89M|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 455k, False: 2.44M]
  ------------------
  208|   455k|                    {
  209|   455k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|   455k|                                current_token, Token::Type::NewLine));
  211|   455k|                        break;
  212|   455k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  2.44M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 804k, False: 1.63M]
  ------------------
  217|   804k|                    {
  218|   804k|                        program.AddParseError(
  219|   804k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|   804k|                        break;
  221|   804k|                    }
  222|       |
  223|  1.63M|                    phi::string_view label_name = current_token.GetText();
  224|  1.63M|                    label_name.remove_suffix(1u);
  225|       |
  226|  1.63M|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 721k, False: 918k]
  ------------------
  227|   721k|                    {
  228|   721k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|   721k|                                current_token.GetLineNumber().unsafe(),
  230|   721k|                                current_token.GetColumn().unsafe(), label_name));
  231|   721k|                        break;
  232|   721k|                    }
  233|       |
  234|   918k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 384k, False: 534k]
  ------------------
  235|   384k|                    {
  236|   384k|                        program.AddParseError(
  237|   384k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|   384k|                        break;
  239|   384k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|   534k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 273k, False: 261k]
  ------------------
  243|   273k|                    {
  244|       |                        // Find first defintions of label
  245|   273k|                        const Token* first_label_definition =
  246|   273k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   273k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|   273k|                                    {
  249|   273k|                                        phi::string_view token_label_name = t.GetText();
  250|   273k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   273k|                                        if (token_label_name == label_name)
  253|   273k|                                        {
  254|   273k|                                            return true;
  255|   273k|                                        }
  256|   273k|                                    }
  257|       |
  258|   273k|                                    return false;
  259|   273k|                                });
  260|       |
  261|   273k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|   273k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|   273k|                                current_token, *first_label_definition));
  265|   273k|                        break;
  266|   273k|                    }
  267|       |
  268|   261k|                    program.m_JumpData[label_name] =
  269|   261k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|   261k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|   261k|                    break;
  276|   534k|                }
  277|       |
  278|  1.37M|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 1.37M, False: 6.12M]
  ------------------
  279|  1.37M|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 800k, False: 571k]
  ------------------
  280|   800k|                    {
  281|   800k|                        program.AddParseError(
  282|   800k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|   800k|                        break;
  284|   800k|                    }
  285|       |
  286|   571k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|   571k|                    PHI_ASSERT(current_token.HasHint());
  290|   571k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|   571k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|   571k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|   571k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|   571k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|   571k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|   571k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|   571k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|   571k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  1.22M|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 1.12M, False: 98.6k]
  ------------------
  312|  1.12M|                    {
  313|       |                        // Get next token
  314|  1.12M|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 2.71k, False: 1.12M]
  ------------------
  315|  2.71k|                        {
  316|  2.71k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|  2.71k|                                    current_token, number_of_argument_required.unsafe(),
  318|  2.71k|                                    argument_num.unsafe()));
  319|  2.71k|                            break;
  320|  2.71k|                        }
  321|       |
  322|  1.12M|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  1.12M|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 483k, False: 641k]
  ------------------
  326|   483k|                        {
  327|   483k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 143k, False: 339k]
  ------------------
  328|   143k|                            {
  329|   143k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|   143k|                            }
  331|       |
  332|   483k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|   483k|                            continue;
  335|   483k|                        }
  336|       |
  337|   641k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 91.8k, False: 549k]
  ------------------
  338|  91.8k|                        {
  339|  91.8k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  91.8k|                                    token, number_of_argument_required.unsafe(),
  341|  91.8k|                                    argument_num.unsafe()));
  342|  91.8k|                            break;
  343|  91.8k|                        }
  344|       |
  345|   549k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|   549k|                                parse_instruction_argument(
  347|   549k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|   549k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 378k, False: 171k]
  ------------------
  349|   378k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|   378k|                            break;
  352|   378k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|   171k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|   171k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|   171k|                        argument_num++;
  359|   171k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|   171k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|   571k|                    program.m_Instructions.emplace_back(instruction);
  367|   571k|                    line_has_instruction = true;
  368|   571k|                    break;
  369|  1.37M|                }
  370|       |
  371|  2.26M|                default:
  ------------------
  |  Branch (371:17): [True: 2.26M, False: 5.22M]
  ------------------
  372|  2.26M|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  2.26M|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 1.11M, False: 1.15M]
  ------------------
  374|  1.11M|                    {
  375|  1.11M|                        expected_token_type = Token::Type::NewLine;
  376|  1.11M|                    }
  377|       |
  378|  2.26M|                    program.AddParseError(
  379|  2.26M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  2.26M|                    break;
  381|  7.49M|            }
  382|  7.49M|        }
  383|       |
  384|       |        // Check for empty labels
  385|  33.5k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 11.2k, False: 22.3k]
  ------------------
  386|  11.2k|        {
  387|   304k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 293k, False: 11.2k]
  ------------------
  388|   293k|            {
  389|   293k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|   293k|                const Token& token = *it;
  392|   293k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 245k, False: 47.7k]
  ------------------
  393|   245k|                {
  394|   245k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|   245k|                    --label_count;
  396|   245k|                }
  397|   293k|            }
  398|  11.2k|        }
  399|       |
  400|  33.5k|        return program;
  401|  33.5k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  33.5k|    {
  405|  33.5k|        TokenStream tokens = Tokenize(source);
  406|  33.5k|        return Parse(tokens);
  407|  33.5k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|   549k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|   549k|        switch (token.GetType())
   37|   549k|        {
   38|  90.8k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 90.8k, False: 458k]
  ------------------
   39|  90.8k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 30.2k, False: 60.6k]
  ------------------
   40|  90.8k|                                          ArgumentType::AddressDisplacement))
   41|  30.2k|                {
   42|  30.2k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|  30.2k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|  30.2k|                    return {};
   46|  30.2k|                }
   47|       |
   48|       |                // Get address displacement
   49|  60.6k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  60.6k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  60.6k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 18, False: 60.6k]
  ------------------
   54|     18|                {
   55|     18|                    program.AddParseError(
   56|     18|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|     18|                    return {};
   58|     18|                }
   59|       |
   60|  60.6k|                auto         it           = tokens.current_position();
   61|  60.6k|                const Token& first_token  = tokens.consume();
   62|  60.6k|                const Token& second_token = tokens.consume();
   63|  60.6k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  60.6k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 19.6k, False: 41.0k]
  ------------------
   66|  19.6k|                {
   67|  19.6k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|  19.6k|                            first_token, Token::Type::OpenBracket));
   69|  19.6k|                    return {};
   70|  19.6k|                }
   71|       |
   72|       |                // Second token is the register
   73|  41.0k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 14.0k, False: 26.9k]
  ------------------
   74|  14.0k|                {
   75|  14.0k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|  14.0k|                            second_token, Token::Type::RegisterInt));
   77|  14.0k|                    return {};
   78|  14.0k|                }
   79|       |
   80|  26.9k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 10.5k, False: 16.4k]
  ------------------
   81|  10.5k|                {
   82|  10.5k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|  10.5k|                            third_token, Token::Type::ClosingBracket));
   84|  10.5k|                    return {};
   85|  10.5k|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|  16.4k|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|  16.4k|                return ConstructInstructionArgumentAddressDisplacement(
   94|  16.4k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|  26.9k|            }
   96|  26.5k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 26.5k, False: 523k]
  ------------------
   97|  26.5k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 4.80k, False: 21.7k]
  ------------------
   98|  4.80k|                {
   99|  4.80k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|  4.80k|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|  4.80k|                    return {};
  102|  4.80k|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  21.7k|                return ConstructInstructionArgumentRegisterInt(
  108|  21.7k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  26.5k|            }
  110|  68.7k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 68.7k, False: 480k]
  ------------------
  111|  68.7k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 8.35k, False: 60.3k]
  ------------------
  112|  8.35k|                {
  113|  8.35k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|  8.35k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|  8.35k|                    return {};
  116|  8.35k|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  60.3k|                return ConstructInstructionArgumentRegisterFloat(
  122|  60.3k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  68.7k|            }
  124|  10.0k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 10.0k, False: 539k]
  ------------------
  125|  10.0k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|  10.0k|                return {};
  128|  68.7k|            }
  129|   223k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 223k, False: 325k]
  ------------------
  130|       |                // Parse as Label
  131|   223k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 50.0k, False: 173k]
  ------------------
  132|  50.0k|                {
  133|  50.0k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  50.0k|                            token, expected_argument_type, ArgumentType::Label));
  135|  50.0k|                    return {};
  136|  50.0k|                }
  137|       |
  138|   173k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 173k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|   173k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 111k, False: 62.4k]
  ------------------
  145|   111k|                {
  146|   111k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|   111k|                    return {};
  148|   111k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  62.4k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|   173k|            }
  154|  40.6k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 40.6k, False: 508k]
  ------------------
  155|  40.6k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 20.9k, False: 19.7k]
  ------------------
  156|  20.9k|                {
  157|  20.9k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|  20.9k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|  20.9k|                    return {};
  160|  20.9k|                }
  161|       |
  162|  19.7k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 10.1k, False: 9.61k]
  ------------------
  163|  10.1k|                {
  164|  10.1k|                    return ConstructInstructionArgumentImmediateValue(
  165|  10.1k|                            static_cast<std::int16_t>(token.GetHint()));
  166|  10.1k|                }
  167|       |
  168|  9.61k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|  9.61k|                return {};
  170|  19.7k|            }
  171|       |
  172|  89.0k|            default:
  ------------------
  |  Branch (172:13): [True: 89.0k, False: 460k]
  ------------------
  173|  89.0k|                program.AddParseError(
  174|  89.0k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  89.0k|                return {};
  176|   549k|        }
  177|   549k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  3.81M|                                tokens.find_first_token_if([&](const Token& t) {
  247|  3.81M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 2.79M, False: 1.02M]
  ------------------
  248|  2.79M|                                    {
  249|  2.79M|                                        phi::string_view token_label_name = t.GetText();
  250|  2.79M|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  2.79M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 273k, False: 2.51M]
  ------------------
  253|   273k|                                        {
  254|   273k|                                            return true;
  255|   273k|                                        }
  256|  2.79M|                                    }
  257|       |
  258|  3.53M|                                    return false;
  259|  3.81M|                                });

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|  6.54M|    {
   13|  6.54M|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 1.12M, False: 5.42M]
  ------------------
   14|  1.12M|        {
   15|  1.12M|            const char first_char = token[0u];
   16|  1.12M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 6.30k, False: 1.11M]
  |  Branch (16:38): [True: 97.9k, False: 1.01M]
  ------------------
   17|   104k|            {
   18|   104k|                const char second_char = token[1u];
   19|   104k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 100k, False: 3.78k]
  |  Branch (19:43): [True: 80.1k, False: 20.3k]
  ------------------
   20|  80.1k|                {
   21|  80.1k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  80.1k|                }
   23|   104k|            }
   24|  1.12M|        }
   25|  5.42M|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 1.28M, False: 4.13M]
  ------------------
   26|  1.28M|        {
   27|  1.28M|            const char first_char = token[0u];
   28|  1.28M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 3.19k, False: 1.28M]
  |  Branch (28:38): [True: 80.5k, False: 1.20M]
  ------------------
   29|  83.7k|            {
   30|  83.7k|                const char second_char = token[1u];
   31|  83.7k|                const char third_char  = token[2u];
   32|       |
   33|  83.7k|                switch (second_char)
   34|  83.7k|                {
   35|  32.4k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 32.4k, False: 51.2k]
  ------------------
   36|  32.4k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 21.1k, False: 11.3k]
  |  Branch (36:50): [True: 11.2k, False: 9.94k]
  ------------------
   37|  11.2k|                        {
   38|  11.2k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|  11.2k|                        }
   40|  21.2k|                        break;
   41|  32.4k|                    }
   42|  27.8k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 27.8k, False: 55.8k]
  ------------------
   43|  27.8k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 12.9k, False: 14.9k]
  |  Branch (43:50): [True: 7.79k, False: 5.12k]
  ------------------
   44|  7.79k|                        {
   45|  7.79k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|  7.79k|                        }
   47|  20.0k|                        break;
   48|  27.8k|                    }
   49|  20.0k|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 12.3k, False: 71.3k]
  ------------------
   50|  12.3k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 1.85k, False: 10.5k]
  |  Branch (50:50): [True: 3.01k, False: 7.51k]
  ------------------
   51|  4.87k|                        {
   52|  4.87k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|  4.87k|                        }
   54|  7.51k|                        break;
   55|  12.3k|                    }
   56|  10.9k|                    default: {
  ------------------
  |  Branch (56:21): [True: 10.9k, False: 72.7k]
  ------------------
   57|  10.9k|                        break;
   58|  12.3k|                    }
   59|  83.7k|                }
   60|  83.7k|            }
   61|  1.28M|        }
   62|       |
   63|  6.44M|        return IntRegisterID::None;
   64|  6.54M|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|  6.44M|    {
   68|  6.44M|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 1.04M, False: 5.40M]
  ------------------
   69|  1.04M|        {
   70|  1.04M|            const char first_char = token[0u];
   71|  1.04M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 90.6k, False: 950k]
  |  Branch (71:38): [True: 24.9k, False: 925k]
  ------------------
   72|   115k|            {
   73|   115k|                const char second_char = token[1u];
   74|   115k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 110k, False: 5.28k]
  |  Branch (74:43): [True: 82.3k, False: 28.0k]
  ------------------
   75|  82.3k|                {
   76|  82.3k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  82.3k|                }
   78|   115k|            }
   79|  1.04M|        }
   80|  5.40M|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 1.26M, False: 4.13M]
  ------------------
   81|  1.26M|        {
   82|  1.26M|            const char first_char = token[0u];
   83|  1.26M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 67.4k, False: 1.19M]
  |  Branch (83:38): [True: 30.4k, False: 1.16M]
  ------------------
   84|  97.8k|            {
   85|  97.8k|                const char second_char = token[1u];
   86|  97.8k|                const char third_char  = token[2u];
   87|       |
   88|  97.8k|                switch (second_char)
   89|  97.8k|                {
   90|  6.11k|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 6.11k, False: 91.7k]
  ------------------
   91|  6.11k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 4.67k, False: 1.44k]
  |  Branch (91:50): [True: 2.84k, False: 1.82k]
  ------------------
   92|  2.84k|                        {
   93|  2.84k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|  2.84k|                        }
   95|  3.27k|                        break;
   96|  6.11k|                    }
   97|  14.6k|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 14.6k, False: 83.2k]
  ------------------
   98|  14.6k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 12.6k, False: 1.94k]
  |  Branch (98:50): [True: 5.07k, False: 7.62k]
  ------------------
   99|  5.07k|                        {
  100|  5.07k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|  5.07k|                        }
  102|  9.56k|                        break;
  103|  14.6k|                    }
  104|  50.2k|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 50.2k, False: 47.5k]
  ------------------
  105|  50.2k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 27.1k, False: 23.1k]
  |  Branch (105:50): [True: 8.14k, False: 14.9k]
  ------------------
  106|  35.3k|                        {
  107|  35.3k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|  35.3k|                        }
  109|  14.9k|                        break;
  110|  50.2k|                    }
  111|  26.8k|                    default: {
  ------------------
  |  Branch (111:21): [True: 26.8k, False: 71.0k]
  ------------------
  112|  26.8k|                        break;
  113|  50.2k|                    }
  114|  97.8k|                }
  115|  97.8k|            }
  116|  1.26M|        }
  117|       |
  118|  6.31M|        return FloatRegisterID::None;
  119|  6.44M|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|  5.85M|    {
  123|  5.85M|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 1.21M, False: 4.64M]
  ------------------
  124|  1.21M|        {
  125|  1.21M|            const char c1 = token[0u];
  126|  1.21M|            const char c2 = token[1u];
  127|  1.21M|            const char c3 = token[2u];
  128|  1.21M|            const char c4 = token[3u];
  129|       |
  130|  1.21M|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 42.8k, False: 1.17M]
  |  Branch (130:34): [True: 33.1k, False: 1.13M]
  |  Branch (130:49): [True: 35.3k, False: 40.6k]
  |  Branch (130:62): [True: 2.78k, False: 37.8k]
  ------------------
  131|  1.21M|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 6.77k, False: 31.3k]
  |  Branch (131:34): [True: 27.8k, False: 3.44k]
  |  Branch (131:49): [True: 6.62k, False: 28.0k]
  |  Branch (131:62): [True: 22.2k, False: 5.77k]
  ------------------
  132|  1.21M|        }
  133|       |
  134|  4.64M|        return false;
  135|  5.85M|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|  7.03M|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  1.76M|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  16.9M|    {
   41|  16.9M|        return m_Type;
   42|  16.9M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  7.41M|    {
   51|  7.41M|        return m_LineNumber;
   52|  7.41M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  6.84M|    {
   56|  6.84M|        return m_Column;
   57|  6.84M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  9.57M|    {
   66|  9.57M|        return m_Text;
   67|  9.57M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   652k|    {
   80|   652k|        return m_HasHint;
   81|   652k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   741k|    {
   85|   741k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   741k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   741k|                   m_Type == Type::ImmediateInteger);
   88|   741k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   741k|        return m_Hint;
   91|   741k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  33.5k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  33.5k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  33.5k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  60.6k|    {
   51|  60.6k|        auto it = m_Iterator;
   52|   242k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 181k, False: 60.6k]
  ------------------
   53|   181k|        {
   54|   181k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 18, False: 181k]
  ------------------
   55|     18|            {
   56|     18|                return false;
   57|     18|            }
   58|   181k|        }
   59|       |
   60|  60.6k|        return true;
   61|  60.6k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  8.65M|    {
   65|  8.65M|        return m_Iterator != m_Tokens.end();
   66|  8.65M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  8.80M|    {
   70|  8.80M|        return m_Iterator == m_Tokens.end();
   71|  8.80M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  8.80M|    {
   85|  8.80M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  8.80M|        return *m_Iterator++;
   91|  8.80M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  60.6k|    {
  164|  60.6k|        return m_Iterator;
  165|  60.6k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  16.4k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  16.4k|        m_Iterator = it;
  179|  16.4k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  11.2k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  11.2k|        return m_Tokens.rbegin();
  224|  11.2k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|   293k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|   293k|        return m_Tokens.rend();
  233|   293k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  33.5k|    {
   66|  33.5k|        TokenStream tokens;
   67|       |
   68|  33.5k|        phi::string_view current_token;
   69|       |
   70|  33.5k|        phi::u64 current_line_number{1u};
   71|  33.5k|        phi::u64 current_column{1u};
   72|  33.5k|        phi::u64 token_begin{0u};
   73|       |
   74|  33.5k|        phi::boolean parsing_comment{false};
   75|       |
   76|  22.5M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 22.5M, False: 33.5k]
  ------------------
   77|  22.5M|        {
   78|  22.5M|            const char c{source.at(i)};
   79|       |
   80|  22.5M|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 1.00M, False: 21.5M]
  ------------------
   81|  1.00M|            {
   82|  1.00M|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 162k, False: 840k]
  ------------------
   83|   162k|                {
   84|       |                    // Skip empty lines
   85|   162k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|   162k|                                        current_line_number, current_column);
   87|       |
   88|   162k|                    parsing_comment = false;
   89|   162k|                    current_line_number += 1u;
   90|   162k|                    current_column = 1u;
   91|   162k|                    continue;
   92|   162k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|   840k|                tokens.emplace_back(ParseToken(
   96|   840k|                        source.substring_view(
   97|   840k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|   840k|                                current_token.length()),
   99|   840k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|   840k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|   840k|                                    current_line_number, current_column);
  103|       |
  104|   840k|                current_token   = phi::string_view{};
  105|   840k|                parsing_comment = false;
  106|   840k|                current_line_number += 1u;
  107|   840k|                current_column = 0u;
  108|   840k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|  21.5M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 14.9k, False: 21.5M]
  |  Branch (110:34): [True: 42.8k, False: 21.4M]
  ------------------
  111|  57.8k|            {
  112|  57.8k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 26.3k, False: 31.5k]
  ------------------
  113|  26.3k|                {
  114|  26.3k|                    token_begin = i;
  115|  26.3k|                }
  116|  31.5k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 28.9k, False: 2.60k]
  ------------------
  117|  28.9k|                {
  118|  28.9k|                    tokens.emplace_back(ParseToken(
  119|  28.9k|                            source.substring_view(
  120|  28.9k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  28.9k|                                    current_token.length()),
  122|  28.9k|                            current_line_number, current_column - current_token.length()));
  123|  28.9k|                    token_begin   = i;
  124|  28.9k|                    current_token = phi::string_view{};
  125|  28.9k|                }
  126|       |
  127|  57.8k|                parsing_comment = true;
  128|  57.8k|                current_token   = source.substring_view(
  129|  57.8k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  57.8k|                        current_token.length() + 1u);
  131|  57.8k|            }
  132|  21.4M|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 87.3k, False: 21.3M]
  ------------------
  133|  87.3k|            {
  134|       |                // simply append the character
  135|  87.3k|                current_token = source.substring_view(
  136|  87.3k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|  87.3k|                        current_token.length() + 1u);
  138|  87.3k|            }
  139|  21.3M|            else
  140|  21.3M|            {
  141|       |                // Not parsing a comment
  142|  21.3M|                switch (c)
  143|  21.3M|                {
  144|   265k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 265k, False: 21.1M]
  ------------------
  145|   462k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 197k, False: 21.1M]
  ------------------
  146|   814k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 352k, False: 21.0M]
  ------------------
  147|   814k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 149k, False: 665k]
  ------------------
  148|   149k|                        {
  149|   149k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|   149k|                            continue;
  152|   149k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|   665k|                        tokens.emplace_back(ParseToken(
  156|   665k|                                source.substring_view(
  157|   665k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|   665k|                                        current_token.length()),
  159|   665k|                                current_line_number, current_column - current_token.length()));
  160|   665k|                        current_token = phi::string_view{};
  161|   665k|                        break;
  162|  2.00M|                    case ':':
  ------------------
  |  Branch (162:21): [True: 2.00M, False: 19.3M]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  2.00M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 1.76M, False: 241k]
  ------------------
  165|  1.76M|                        {
  166|  1.76M|                            current_token = source.substring_view(
  167|  1.76M|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  1.76M|                                    current_token.length() + 1u);
  169|  1.76M|                            tokens.emplace_back(ParseToken(
  170|  1.76M|                                    source.substring_view(
  171|  1.76M|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  1.76M|                                                    token_begin),
  173|  1.76M|                                            current_token.length()),
  174|  1.76M|                                    current_line_number,
  175|  1.76M|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  1.76M|                            current_token = phi::string_view{};
  178|  1.76M|                        }
  179|   241k|                        else
  180|   241k|                        {
  181|       |                            // Orphan colon
  182|   241k|                            token_begin = i;
  183|       |
  184|   241k|                            tokens.emplace_back(
  185|   241k|                                    Token::Type::Colon,
  186|   241k|                                    source.substring_view(
  187|   241k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|   241k|                                                    token_begin),
  189|   241k|                                            1u),
  190|   241k|                                    current_line_number, current_column);
  191|   241k|                        }
  192|  2.00M|                        break;
  193|  1.41M|                    case ',':
  ------------------
  |  Branch (193:21): [True: 1.41M, False: 19.9M]
  ------------------
  194|  2.45M|                    case '(':
  ------------------
  |  Branch (194:21): [True: 1.03M, False: 20.3M]
  ------------------
  195|  2.54M|                    case ')':
  ------------------
  |  Branch (195:21): [True: 91.4k, False: 21.2M]
  ------------------
  196|  2.54M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 1.69M, False: 854k]
  ------------------
  197|  1.69M|                        {
  198|  1.69M|                            tokens.emplace_back(ParseToken(
  199|  1.69M|                                    source.substring_view(
  200|  1.69M|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  1.69M|                                                    token_begin),
  202|  1.69M|                                            current_token.length()),
  203|  1.69M|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  1.69M|                            current_token = phi::string_view{};
  206|  1.69M|                        }
  207|       |
  208|  2.54M|                        Token::Type type;
  209|  2.54M|                        switch (c)
  210|  2.54M|                        {
  211|  1.41M|                            case ',':
  ------------------
  |  Branch (211:29): [True: 1.41M, False: 1.12M]
  ------------------
  212|  1.41M|                                type = Token::Type::Comma;
  213|  1.41M|                                break;
  214|  1.03M|                            case '(':
  ------------------
  |  Branch (214:29): [True: 1.03M, False: 1.50M]
  ------------------
  215|  1.03M|                                type = Token::Type::OpenBracket;
  216|  1.03M|                                break;
  217|  91.4k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 91.4k, False: 2.45M]
  ------------------
  218|  91.4k|                                type = Token::Type::ClosingBracket;
  219|  91.4k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 2.54M]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  2.54M|#endif
  225|  2.54M|                        }
  226|       |
  227|  2.54M|                        token_begin = i;
  228|       |
  229|  2.54M|                        tokens.emplace_back(
  230|  2.54M|                                type,
  231|  2.54M|                                source.substring_view(
  232|  2.54M|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  2.54M|                                        1u),
  234|  2.54M|                                current_line_number, current_column);
  235|  2.54M|                        break;
  236|       |
  237|  16.0M|                    default:
  ------------------
  |  Branch (237:21): [True: 16.0M, False: 5.36M]
  ------------------
  238|  16.0M|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 4.95M, False: 11.0M]
  ------------------
  239|  4.95M|                        {
  240|  4.95M|                            token_begin = i;
  241|  4.95M|                        }
  242|       |
  243|       |                        // simply append the character
  244|  16.0M|                        current_token = source.substring_view(
  245|  16.0M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|  16.0M|                                current_token.length() + 1u);
  247|  21.3M|                }
  248|  21.3M|            }
  249|       |
  250|  22.2M|            current_column += 1u;
  251|  22.2M|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  33.5k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 22.6k, False: 10.9k]
  ------------------
  255|  22.6k|        {
  256|  22.6k|            tokens.emplace_back(
  257|  22.6k|                    ParseToken(source.substring_view(
  258|  22.6k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  22.6k|                                       current_token.length()),
  260|  22.6k|                               current_line_number, current_column - current_token.length()));
  261|  22.6k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  33.5k|        tokens.finalize();
  265|       |
  266|  33.5k|        return tokens;
  267|  33.5k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|  5.01M|    {
   14|  5.01M|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 54.0k, False: 4.95M]
  |  Branch (14:13): [True: 48.5k, False: 4.96M]
  |  Branch (14:36): [True: 48.5k, False: 5.47k]
  ------------------
   15|  48.5k|        {
   16|  48.5k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  48.5k|            if (number)
  ------------------
  |  Branch (18:17): [True: 14.9k, False: 33.5k]
  ------------------
   19|  14.9k|            {
   20|  14.9k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  14.9k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  14.9k|            }
   23|       |
   24|  33.5k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  48.5k|        }
   26|       |
   27|  4.96M|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 14.6k, False: 4.94M]
  |  Branch (27:13): [True: 55.2k, False: 4.90M]
  |  Branch (27:36): [True: 40.5k, False: 4.90M]
  ------------------
   28|  55.2k|        {
   29|  55.2k|            return {Token::Type::Comment, token, line_number, column};
   30|  55.2k|        }
   31|       |
   32|  4.90M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 149k, False: 4.75M]
  ------------------
   33|   149k|        {
   34|   149k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|   149k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|   149k|        }
   37|       |
   38|  4.75M|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 22.2k, False: 4.73M]
  ------------------
   39|  22.2k|        {
   40|  22.2k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  22.2k|        }
   42|       |
   43|  4.73M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 80.1k, False: 4.65M]
  ------------------
   44|  80.1k|        {
   45|  80.1k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  80.1k|                    static_cast<phi::uint32_t>(id)};
   47|  80.1k|        }
   48|       |
   49|  4.65M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 116k, False: 4.53M]
  ------------------
   50|   116k|        {
   51|   116k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|   116k|                    static_cast<phi::uint32_t>(id)};
   53|   116k|        }
   54|       |
   55|  4.53M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 1.40M, False: 3.13M]
  ------------------
   56|  1.40M|        {
   57|  1.40M|            return {Token::Type::OpCode, token, line_number, column,
   58|  1.40M|                    static_cast<phi::uint32_t>(opcode)};
   59|  1.40M|        }
   60|       |
   61|  3.13M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  4.53M|    }

LLVMFuzzerTestOneInput:
    8|  33.5k|{
    9|  33.5k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   10|       |
   11|       |    // Parse it
   12|  33.5k|    dlx::Parser::Parse(source);
   13|       |
   14|  33.5k|    return 0;
   15|  33.5k|}


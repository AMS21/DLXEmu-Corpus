_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   238k|        {
  169|   238k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   238k|            switch (index.unsafe())
  172|   238k|            {
  173|   109k|                case 0:
  ------------------
  |  Branch (173:17): [True: 109k, False: 128k]
  ------------------
  174|   109k|                    return m_Arg1Type;
  175|       |
  176|  65.3k|                case 1:
  ------------------
  |  Branch (176:17): [True: 65.3k, False: 172k]
  ------------------
  177|  65.3k|                    return m_Arg2Type;
  178|       |
  179|  63.1k|                case 2:
  ------------------
  |  Branch (179:17): [True: 63.1k, False: 174k]
  ------------------
  180|  63.1k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 238k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   238k|#endif
  187|   238k|            }
  188|   238k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  61.3k|        {
  195|  61.3k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  61.3k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 59.0k, False: 2.21k]
  ------------------
  199|  59.0k|            {
  200|  59.0k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  59.0k|            }
  202|  61.3k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 36.7k, False: 24.5k]
  ------------------
  203|  36.7k|            {
  204|  36.7k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  36.7k|            }
  206|  61.3k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 20.7k, False: 40.5k]
  ------------------
  207|  20.7k|            {
  208|  20.7k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  20.7k|            }
  210|       |
  211|  61.3k|            return number_of_argument_required;
  212|  61.3k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  61.3k|        {
  221|  61.3k|            return m_Executor;
  222|  61.3k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  42.6k|    {
   38|  42.6k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  42.6k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  42.6k|                                         static_cast<underlying_t>(rhs));
   42|  42.6k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  42.6k|    {
   55|  42.6k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  42.6k|        return static_cast<underlying_t>(type & test) != 0;
   58|  42.6k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|   300k|    {
   32|   300k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 3.81k, False: 296k]
  ------------------
   33|  3.81k|        {
   34|  3.81k|            return true;
   35|  3.81k|        }
   36|       |
   37|   296k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 4.23k, False: 291k]
  ------------------
   38|  4.23k|        {
   39|  4.23k|            return true;
   40|  4.23k|        }
   41|       |
   42|   291k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 91.3k, False: 200k]
  ------------------
   43|  91.3k|        {
   44|  91.3k|            return true;
   45|  91.3k|        }
   46|       |
   47|   200k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 911, False: 199k]
  ------------------
   48|    911|        {
   49|    911|            return true;
   50|    911|        }
   51|       |
   52|   199k|        return false;
   53|   200k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|   199k|    {
   57|   199k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 199k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|   199k|        const char first_char = token.at(0);
   63|       |
   64|   199k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 48.0k, False: 151k]
  ------------------
   65|  48.0k|        {
   66|  48.0k|            return phi::is_alpha(first_char);
   67|  48.0k|        }
   68|       |
   69|   151k|        phi::boolean just_under_scores = (first_char == '_');
   70|   151k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 27.4k, False: 124k]
  |  Branch (70:15): [True: 123k, False: 28.3k]
  |  Branch (70:44): [True: 849, False: 27.4k]
  ------------------
   71|  27.4k|        {
   72|  27.4k|            return false;
   73|  27.4k|        }
   74|       |
   75|   375k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 309k, False: 65.1k]
  ------------------
   76|   309k|        {
   77|   309k|            const char c{token.at(index)};
   78|       |
   79|   309k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 249k, False: 60.0k]
  ------------------
   80|   249k|            {
   81|   249k|                just_under_scores = false;
   82|   249k|            }
   83|  60.0k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 1.09k, False: 58.9k]
  ------------------
   84|  1.09k|            {
   85|  1.09k|                continue;
   86|  1.09k|            }
   87|  58.9k|            else
   88|  58.9k|            {
   89|  58.9k|                return false;
   90|  58.9k|            }
   91|   309k|        }
   92|       |
   93|  65.1k|        return !just_under_scores;
   94|   124k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   776k|    {
  101|   776k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 776k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   776k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 119k, False: 656k]
  ------------------
  107|   119k|        {
  108|   119k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 11.7k, False: 107k]
  ------------------
  109|  11.7k|            {
  110|  11.7k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  11.7k|            }
  112|       |
  113|   107k|            return {};
  114|   119k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   656k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 7.33k, False: 649k]
  ------------------
  118|  7.33k|        {
  119|  7.33k|            return {};
  120|  7.33k|        }
  121|       |
  122|   649k|        std::int32_t number{0};
  123|   649k|        phi::boolean is_negative{false};
  124|   649k|        phi::boolean starts_with_zero{false};
  125|   649k|        phi::boolean parsing_binary{false};
  126|   649k|        phi::boolean parsing_octal{false};
  127|   649k|        phi::boolean parsing_hexadecimal{false};
  128|   649k|        phi::boolean parsed_something{false};
  129|   649k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   723k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 713k, False: 9.87k]
  ------------------
  134|   713k|        {
  135|   713k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   713k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 649k, False: 64.9k]
  ------------------
  139|   649k|            {
  140|   649k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 1.67k, False: 647k]
  ------------------
  141|  1.67k|                {
  142|  1.67k|                    continue;
  143|  1.67k|                }
  144|       |
  145|   647k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 3.04k, False: 644k]
  ------------------
  146|  3.04k|                {
  147|  3.04k|                    is_negative = true;
  148|  3.04k|                    continue;
  149|  3.04k|                }
  150|       |
  151|   644k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 13.5k, False: 630k]
  ------------------
  152|  13.5k|                {
  153|  13.5k|                    starts_with_zero = true;
  154|  13.5k|                    continue;
  155|  13.5k|                }
  156|       |
  157|   630k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 823, False: 629k]
  ------------------
  158|    823|                {
  159|    823|                    return {};
  160|    823|                }
  161|   630k|            }
  162|       |
  163|       |            // Second character
  164|   694k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 30.9k, False: 663k]
  ------------------
  165|  30.9k|            {
  166|  30.9k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 13.5k, False: 17.4k]
  ------------------
  167|  13.5k|                {
  168|       |                    // Binary
  169|  13.5k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 1.37k, False: 12.1k]
  |  Branch (169:37): [True: 497, False: 11.6k]
  ------------------
  170|  1.87k|                    {
  171|  1.87k|                        parsing_binary = true;
  172|  1.87k|                        continue;
  173|  1.87k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  11.6k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 2.70k, False: 8.97k]
  |  Branch (176:37): [True: 509, False: 8.46k]
  ------------------
  177|  3.21k|                    {
  178|  3.21k|                        parsing_hexadecimal = true;
  179|  3.21k|                        continue;
  180|  3.21k|                    }
  181|       |
  182|       |                    // Octal
  183|  8.46k|                    parsing_octal = true;
  184|  8.46k|                }
  185|  30.9k|            }
  186|       |
  187|       |            // Handle seperators
  188|   689k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 1.93k, False: 687k]
  ------------------
  189|  1.93k|            {
  190|  1.93k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 820, False: 1.11k]
  ------------------
  191|    820|                {
  192|    820|                    return {};
  193|    820|                }
  194|       |
  195|  1.11k|                parsed_separator = true;
  196|  1.11k|                continue;
  197|  1.93k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   687k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 10.5k, False: 677k]
  |  Branch (200:32): [True: 907, False: 9.68k]
  ------------------
  201|    907|            {
  202|       |                // Would underflow
  203|    907|                return {};
  204|    907|            }
  205|   686k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 677k, False: 9.68k]
  |  Branch (205:17): [True: 1.56k, False: 685k]
  |  Branch (205:33): [True: 1.56k, False: 675k]
  ------------------
  206|  1.56k|            {
  207|       |                // Would overflow
  208|  1.56k|                return {};
  209|  1.56k|            }
  210|       |
  211|   685k|            parsed_separator = false;
  212|   685k|            parsed_something = true;
  213|       |
  214|   685k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 2.18k, False: 683k]
  ------------------
  215|  2.18k|            {
  216|  2.18k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 603, False: 1.58k]
  ------------------
  217|    603|                {
  218|    603|                    return {};
  219|    603|                }
  220|       |
  221|  1.58k|                number <<= 1;
  222|  1.58k|                number |= (c - '0');
  223|  1.58k|            }
  224|   683k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 9.45k, False: 673k]
  ------------------
  225|  9.45k|            {
  226|  9.45k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 7.77k, False: 1.68k]
  ------------------
  227|  7.77k|                {
  228|  7.77k|                    return {};
  229|  7.77k|                }
  230|       |
  231|  1.68k|                number <<= 3;
  232|  1.68k|                number |= (c - '0');
  233|  1.68k|            }
  234|   673k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 5.31k, False: 668k]
  ------------------
  235|  5.31k|            {
  236|  5.31k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 2.64k, False: 2.66k]
  ------------------
  237|  2.64k|                {
  238|  2.64k|                    return {};
  239|  2.64k|                }
  240|       |
  241|  2.66k|                number <<= 4;
  242|  2.66k|                number |= phi::hex_digit_value(c).unsafe();
  243|  2.66k|            }
  244|   668k|            else
  245|   668k|            {
  246|   668k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 623k, False: 45.1k]
  ------------------
  247|   623k|                {
  248|   623k|                    return {};
  249|   623k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  45.1k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 15.5k, False: 29.6k]
  |  Branch (252:36): [True: 826, False: 14.7k]
  ------------------
  253|    826|                {
  254|    826|                    return {};
  255|    826|                }
  256|       |
  257|  44.3k|                number *= 10;
  258|  44.3k|                number += (c - '0');
  259|  44.3k|            }
  260|   685k|        }
  261|       |
  262|  9.87k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 9.45k, False: 421]
  ------------------
  263|  9.45k|        {
  264|       |            // Check for over/underflow
  265|  9.45k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 959, False: 8.49k]
  |  Branch (265:32): [True: 577, False: 382]
  ------------------
  266|    577|            {
  267|       |                // Would underflow
  268|    577|                return {};
  269|    577|            }
  270|  8.87k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 8.49k, False: 382]
  |  Branch (270:17): [True: 1.75k, False: 7.12k]
  |  Branch (270:33): [True: 1.75k, False: 6.74k]
  ------------------
  271|  1.75k|            {
  272|       |                // Would overflow
  273|  1.75k|                return {};
  274|  1.75k|            }
  275|       |
  276|  7.12k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 382, False: 6.74k]
  ------------------
  277|    382|            {
  278|    382|                return static_cast<std::int16_t>(-number);
  279|    382|            }
  280|       |
  281|  6.74k|            return static_cast<std::int16_t>(number);
  282|  7.12k|        }
  283|       |
  284|    421|        return {};
  285|  9.87k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  61.3k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  61.3k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 1.13M, False: 0]
  ------------------
   64|  1.13M|            {
   65|  1.13M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 61.3k, False: 1.07M]
  ------------------
   66|  61.3k|                {
   67|  61.3k|                    return &token;
   68|  61.3k|                }
   69|  1.13M|            }
   70|       |
   71|      0|            return nullptr;
   72|  61.3k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   179k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   179k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   179k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   784k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   784k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   784k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|   441k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   441k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   441k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  61.3k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  11.1k|    {
   25|  11.1k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  11.1k|        switch (argument_number.unsafe())
   28|  11.1k|        {
   29|  8.05k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 8.05k, False: 3.14k]
  ------------------
   30|  8.05k|                m_Arg1 = argument;
   31|  8.05k|                break;
   32|  1.85k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 1.85k, False: 9.34k]
  ------------------
   33|  1.85k|                m_Arg2 = argument;
   34|  1.85k|                break;
   35|  1.28k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 1.28k, False: 9.91k]
  ------------------
   36|  1.28k|                m_Arg3 = argument;
   37|  1.28k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 11.1k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  11.1k|#endif
   42|  11.1k|        }
   43|  11.1k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|   195k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|    876|    {
  171|    876|        InstructionArgument arg;
  172|    876|        arg.m_Type                   = ArgumentType::IntRegister;
  173|    876|        arg.register_int.register_id = id;
  174|    876|        return arg;
  175|    876|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  4.18k|    {
  179|  4.18k|        InstructionArgument arg;
  180|  4.18k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  4.18k|        arg.register_float.register_id = id;
  182|  4.18k|        return arg;
  183|  4.18k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|    843|    {
  187|    843|        InstructionArgument arg;
  188|    843|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|    843|        arg.immediate_value.signed_value = value;
  190|    843|        return arg;
  191|    843|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|  1.37k|    {
  196|  1.37k|        InstructionArgument arg;
  197|  1.37k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|  1.37k|        arg.address_displacement.register_id  = id;
  199|  1.37k|        arg.address_displacement.displacement = displacement;
  200|  1.37k|        return arg;
  201|  1.37k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  3.92k|    {
  205|  3.92k|        InstructionArgument arg;
  206|  3.92k|        arg.m_Type           = ArgumentType::Label;
  207|  3.92k|        arg.label.label_name = label_name;
  208|  3.92k|        return arg;
  209|  3.92k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  61.3k|    {
  453|  61.3k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  61.3k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|  1.02M|    {
   24|  1.02M|        switch (token.length())
   25|  1.02M|        {
   26|       |            // 1 character OpCodes
   27|   154k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 154k, False: 867k]
  ------------------
   28|   154k|                char c1 = token[0];
   29|   154k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 26.3k, False: 128k]
  ------------------
   30|  26.3k|                {
   31|  26.3k|                    return OpCode::J;
   32|  26.3k|                }
   33|   128k|                break;
   34|   154k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|   180k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 180k, False: 841k]
  ------------------
   38|   180k|                char c1 = token[0];
   39|   180k|                char c2 = token[1];
   40|       |
   41|   180k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 105k, False: 74.9k]
  ------------------
   42|   180k|                {
   43|  2.51k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 2.51k, False: 177k]
  ------------------
   44|  4.63k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 2.11k, False: 177k]
  ------------------
   45|  4.63k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 1.08k, False: 3.54k]
  ------------------
   46|  1.08k|                        {
   47|  1.08k|                            return OpCode::JR;
   48|  1.08k|                        }
   49|  3.54k|                        break;
   50|       |
   51|  10.2k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 10.2k, False: 169k]
  ------------------
   52|  23.8k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 13.6k, False: 166k]
  ------------------
   53|  23.8k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 8.26k, False: 15.5k]
  ------------------
   54|  23.8k|                        {
   55|  3.58k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 3.58k, False: 20.2k]
  ------------------
   56|  4.97k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 1.38k, False: 22.4k]
  ------------------
   57|  4.97k|                                return OpCode::LB;
   58|  3.50k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 3.50k, False: 20.3k]
  ------------------
   59|  4.09k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 592, False: 23.2k]
  ------------------
   60|  4.09k|                                return OpCode::LD;
   61|  1.77k|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 1.77k, False: 22.0k]
  ------------------
   62|  2.41k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 643, False: 23.1k]
  ------------------
   63|  2.41k|                                return OpCode::LF;
   64|    743|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 743, False: 23.0k]
  ------------------
   65|  1.47k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 730, False: 23.1k]
  ------------------
   66|  1.47k|                                return OpCode::LH;
   67|    684|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 684, False: 23.1k]
  ------------------
   68|  2.62k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 1.94k, False: 21.9k]
  ------------------
   69|  2.62k|                                return OpCode::LW;
   70|  23.8k|                        }
   71|  8.26k|                        break;
   72|  9.22k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 9.22k, False: 170k]
  ------------------
   73|  16.6k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 7.37k, False: 172k]
  ------------------
   74|  16.6k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 3.81k, False: 12.7k]
  ------------------
   75|  3.81k|                        {
   76|  3.81k|                            return OpCode::OR;
   77|  3.81k|                        }
   78|  12.7k|                        break;
   79|  19.6k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 19.6k, False: 160k]
  ------------------
   80|  29.8k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 10.2k, False: 169k]
  ------------------
   81|  29.8k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 11.0k, False: 18.8k]
  ------------------
   82|  29.8k|                        {
   83|    754|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 754, False: 29.1k]
  ------------------
   84|  2.53k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 1.77k, False: 28.1k]
  ------------------
   85|  2.53k|                                return OpCode::SB;
   86|  6.72k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 6.72k, False: 23.1k]
  ------------------
   87|  8.19k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 1.47k, False: 28.4k]
  ------------------
   88|  8.19k|                                return OpCode::SD;
   89|    996|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 996, False: 28.8k]
  ------------------
   90|  1.38k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 392, False: 29.4k]
  ------------------
   91|  1.38k|                                return OpCode::SF;
   92|  1.77k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 1.77k, False: 28.1k]
  ------------------
   93|  3.04k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 1.26k, False: 28.6k]
  ------------------
   94|  3.04k|                                return OpCode::SH;
   95|  1.05k|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 1.05k, False: 28.8k]
  ------------------
   96|  3.70k|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 2.64k, False: 27.2k]
  ------------------
   97|  3.70k|                                return OpCode::SW;
   98|  29.8k|                        }
   99|  11.0k|                        break;
  100|   180k|                }
  101|   140k|                break;
  102|   180k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   220k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 220k, False: 801k]
  ------------------
  106|   220k|                char c1 = token[0];
  107|   220k|                char c2 = token[1];
  108|   220k|                char c3 = token[2];
  109|       |
  110|   220k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 71.7k, False: 148k]
  ------------------
  111|   220k|                {
  112|  8.83k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 8.83k, False: 211k]
  ------------------
  113|  12.1k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 3.34k, False: 216k]
  ------------------
  114|  12.1k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 3.15k, False: 9.03k]
  |  Branch (114:29): [True: 2.11k, False: 10.0k]
  |  Branch (114:45): [True: 2.11k, False: 1.03k]
  ------------------
  115|  2.11k|                        {
  116|  2.11k|                            return OpCode::ADD;
  117|  2.11k|                        }
  118|  10.0k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 5.09k, False: 4.97k]
  |  Branch (118:34): [True: 3.15k, False: 6.90k]
  |  Branch (118:50): [True: 3.15k, False: 1.93k]
  ------------------
  119|  3.15k|                        {
  120|  3.15k|                            return OpCode::AND;
  121|  3.15k|                        }
  122|  6.90k|                        break;
  123|       |
  124|  6.90k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 1.52k, False: 218k]
  ------------------
  125|  6.43k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 4.91k, False: 215k]
  ------------------
  126|  6.43k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 3.56k, False: 2.86k]
  |  Branch (126:29): [True: 2.58k, False: 3.84k]
  |  Branch (126:45): [True: 2.58k, False: 979]
  ------------------
  127|  2.58k|                        {
  128|  2.58k|                            return OpCode::DIV;
  129|  2.58k|                        }
  130|  3.84k|                        break;
  131|       |
  132|  3.84k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 1.18k, False: 219k]
  ------------------
  133|  8.21k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 7.03k, False: 213k]
  ------------------
  134|  8.21k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 6.36k, False: 1.85k]
  ------------------
  135|  6.36k|                        {
  136|  6.36k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 1.96k, False: 4.40k]
  ------------------
  137|  1.96k|                            {
  138|  1.96k|                                return OpCode::EQD;
  139|  1.96k|                            }
  140|  4.40k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 3.43k, False: 969]
  ------------------
  141|  3.43k|                            {
  142|  3.43k|                                return OpCode::EQF;
  143|  3.43k|                            }
  144|  6.36k|                        }
  145|  2.81k|                        break;
  146|       |
  147|  8.80k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 8.80k, False: 211k]
  ------------------
  148|  12.9k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 4.11k, False: 216k]
  ------------------
  149|  12.9k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 6.21k, False: 6.70k]
  ------------------
  150|  6.21k|                        {
  151|  6.21k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 2.21k, False: 3.99k]
  ------------------
  152|  2.21k|                            {
  153|  2.21k|                                return OpCode::GED;
  154|  2.21k|                            }
  155|  3.99k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 2.77k, False: 1.22k]
  ------------------
  156|  2.77k|                            {
  157|  2.77k|                                return OpCode::GEF;
  158|  2.77k|                            }
  159|  6.21k|                        }
  160|  6.70k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 3.11k, False: 3.58k]
  ------------------
  161|  3.11k|                        {
  162|  3.11k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 1.31k, False: 1.79k]
  ------------------
  163|  1.31k|                            {
  164|  1.31k|                                return OpCode::GTD;
  165|  1.31k|                            }
  166|  1.79k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 1.38k, False: 415]
  ------------------
  167|  1.38k|                            {
  168|  1.38k|                                return OpCode::GTF;
  169|  1.38k|                            }
  170|  1.79k|                        }
  171|  5.22k|                        break;
  172|       |
  173|  5.22k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 793, False: 219k]
  ------------------
  174|  6.96k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 6.17k, False: 214k]
  ------------------
  175|  6.96k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 5.92k, False: 1.04k]
  |  Branch (175:29): [True: 3.91k, False: 3.04k]
  |  Branch (175:45): [True: 3.91k, False: 2.00k]
  ------------------
  176|  3.91k|                        {
  177|  3.91k|                            return OpCode::JAL;
  178|  3.91k|                        }
  179|  3.04k|                        break;
  180|       |
  181|  10.2k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 10.2k, False: 210k]
  ------------------
  182|  30.0k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 19.7k, False: 200k]
  ------------------
  183|  30.0k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 4.12k, False: 25.8k]
  ------------------
  184|  30.0k|                        {
  185|  2.58k|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 2.58k, False: 27.4k]
  ------------------
  186|  3.85k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 1.27k, False: 28.7k]
  ------------------
  187|  3.85k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 1.09k, False: 2.76k]
  ------------------
  188|  1.09k|                                {
  189|  1.09k|                                    return OpCode::LBU;
  190|  1.09k|                                }
  191|  2.76k|                                break;
  192|       |
  193|  4.54k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 4.54k, False: 25.4k]
  ------------------
  194|  5.78k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 1.24k, False: 28.7k]
  ------------------
  195|  5.78k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 2.05k, False: 3.73k]
  ------------------
  196|  2.05k|                                {
  197|  2.05k|                                    return OpCode::LED;
  198|  2.05k|                                }
  199|  3.73k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 2.79k, False: 939]
  ------------------
  200|  2.79k|                                {
  201|  2.79k|                                    return OpCode::LEF;
  202|  2.79k|                                }
  203|    939|                                break;
  204|       |
  205|  1.27k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 1.27k, False: 28.7k]
  ------------------
  206|  5.18k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 3.91k, False: 26.0k]
  ------------------
  207|  5.18k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 2.45k, False: 2.72k]
  ------------------
  208|  2.45k|                                {
  209|  2.45k|                                    return OpCode::LHI;
  210|  2.45k|                                }
  211|  2.72k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 1.99k, False: 732]
  ------------------
  212|  1.99k|                                {
  213|  1.99k|                                    return OpCode::LHU;
  214|  1.99k|                                }
  215|    732|                                break;
  216|       |
  217|  4.79k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 4.79k, False: 25.2k]
  ------------------
  218|  7.65k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 2.86k, False: 27.1k]
  ------------------
  219|  7.65k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 4.06k, False: 3.59k]
  ------------------
  220|  4.06k|                                {
  221|  4.06k|                                    return OpCode::LTD;
  222|  4.06k|                                }
  223|  3.59k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 887, False: 2.70k]
  ------------------
  224|    887|                                {
  225|    887|                                    return OpCode::LTF;
  226|    887|                                }
  227|  2.70k|                                break;
  228|       |
  229|  2.70k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 450, False: 29.5k]
  ------------------
  230|  3.39k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 2.94k, False: 27.0k]
  ------------------
  231|  3.39k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 1.12k, False: 2.27k]
  ------------------
  232|  1.12k|                                {
  233|  1.12k|                                    return OpCode::LWU;
  234|  1.12k|                                }
  235|  2.27k|                                break;
  236|  30.0k|                        }
  237|  13.5k|                        break;
  238|       |
  239|  13.5k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 2.12k, False: 218k]
  ------------------
  240|  7.83k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 5.71k, False: 214k]
  ------------------
  241|  7.83k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 3.75k, False: 4.08k]
  ------------------
  242|  3.75k|                        {
  243|  3.75k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 1.48k, False: 2.26k]
  ------------------
  244|  1.48k|                            {
  245|  1.48k|                                return OpCode::NED;
  246|  1.48k|                            }
  247|  2.26k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 836, False: 1.43k]
  ------------------
  248|    836|                            {
  249|    836|                                return OpCode::NEF;
  250|    836|                            }
  251|  3.75k|                        }
  252|  4.08k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 2.19k, False: 1.88k]
  |  Branch (252:34): [True: 1.70k, False: 2.38k]
  |  Branch (252:50): [True: 1.70k, False: 493]
  ------------------
  253|  1.70k|                        {
  254|  1.70k|                            return OpCode::NOP;
  255|  1.70k|                        }
  256|       |
  257|  3.81k|                        break;
  258|       |
  259|  10.0k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 10.0k, False: 210k]
  ------------------
  260|  15.7k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 5.68k, False: 214k]
  ------------------
  261|  15.7k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 4.81k, False: 10.9k]
  |  Branch (261:29): [True: 1.66k, False: 14.0k]
  |  Branch (261:45): [True: 1.66k, False: 3.14k]
  ------------------
  262|  1.66k|                        {
  263|  1.66k|                            return OpCode::ORI;
  264|  1.66k|                        }
  265|  14.0k|                        break;
  266|       |
  267|  19.8k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 19.8k, False: 200k]
  ------------------
  268|  45.7k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 25.8k, False: 194k]
  ------------------
  269|  45.7k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 6.73k, False: 38.9k]
  ------------------
  270|  45.7k|                        {
  271|  1.53k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 1.53k, False: 44.1k]
  ------------------
  272|  2.51k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 986, False: 44.7k]
  ------------------
  273|  2.51k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 1.80k, False: 717]
  ------------------
  274|  1.80k|                                {
  275|  1.80k|                                    return OpCode::SBU;
  276|  1.80k|                                }
  277|    717|                                break;
  278|       |
  279|  2.37k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 2.37k, False: 43.3k]
  ------------------
  280|  3.37k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 1.00k, False: 44.7k]
  ------------------
  281|  3.37k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 2.43k, False: 947]
  ------------------
  282|  2.43k|                                {
  283|  2.43k|                                    return OpCode::SEQ;
  284|  2.43k|                                }
  285|    947|                                break;
  286|       |
  287|  3.33k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 3.33k, False: 42.3k]
  ------------------
  288|  6.26k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 2.93k, False: 42.7k]
  ------------------
  289|  6.26k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 2.43k, False: 3.83k]
  ------------------
  290|  2.43k|                                {
  291|  2.43k|                                    return OpCode::SGE;
  292|  2.43k|                                }
  293|  3.83k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 2.19k, False: 1.64k]
  ------------------
  294|  2.19k|                                {
  295|  2.19k|                                    return OpCode::SGT;
  296|  2.19k|                                }
  297|  1.64k|                                break;
  298|       |
  299|  1.64k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 794, False: 44.9k]
  ------------------
  300|  1.46k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 670, False: 45.0k]
  ------------------
  301|  1.46k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 1.09k, False: 372]
  ------------------
  302|  1.09k|                                {
  303|  1.09k|                                    return OpCode::SHU;
  304|  1.09k|                                }
  305|    372|                                break;
  306|       |
  307|  3.54k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 3.54k, False: 42.1k]
  ------------------
  308|  8.86k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 5.31k, False: 40.3k]
  ------------------
  309|  8.86k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 1.88k, False: 6.97k]
  ------------------
  310|  8.86k|                                {
  311|    490|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 490, False: 8.37k]
  ------------------
  312|  2.28k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 1.79k, False: 7.06k]
  ------------------
  313|  2.28k|                                        return OpCode::SLA;
  314|       |
  315|    840|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 840, False: 8.02k]
  ------------------
  316|  1.64k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 803, False: 8.05k]
  ------------------
  317|  1.64k|                                        return OpCode::SLE;
  318|       |
  319|    346|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 346, False: 8.51k]
  ------------------
  320|    627|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 281, False: 8.58k]
  ------------------
  321|    627|                                        return OpCode::SLL;
  322|       |
  323|    904|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 904, False: 7.95k]
  ------------------
  324|  2.42k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 1.51k, False: 7.34k]
  ------------------
  325|  2.42k|                                        return OpCode::SLT;
  326|  8.86k|                                }
  327|  1.88k|                                break;
  328|       |
  329|  1.88k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 1.11k, False: 44.5k]
  ------------------
  330|  5.16k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 4.04k, False: 41.6k]
  ------------------
  331|  5.16k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 3.52k, False: 1.63k]
  ------------------
  332|  3.52k|                                {
  333|  3.52k|                                    return OpCode::SNE;
  334|  3.52k|                                }
  335|  1.63k|                                break;
  336|       |
  337|  2.39k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 2.39k, False: 43.3k]
  ------------------
  338|  4.00k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 1.60k, False: 44.1k]
  ------------------
  339|  4.00k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 1.54k, False: 2.45k]
  ------------------
  340|  1.54k|                                {
  341|  1.54k|                                    return OpCode::SRA;
  342|  1.54k|                                }
  343|  2.45k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 1.91k, False: 539]
  ------------------
  344|  1.91k|                                {
  345|  1.91k|                                    return OpCode::SRL;
  346|  1.91k|                                }
  347|    539|                                break;
  348|       |
  349|  1.05k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 1.05k, False: 44.6k]
  ------------------
  350|  2.70k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 1.64k, False: 44.0k]
  ------------------
  351|  2.70k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 1.37k, False: 1.33k]
  ------------------
  352|  1.37k|                                {
  353|  1.37k|                                    return OpCode::SUB;
  354|  1.37k|                                }
  355|  1.33k|                                break;
  356|       |
  357|  1.33k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 542, False: 45.1k]
  ------------------
  358|  4.61k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 4.07k, False: 41.6k]
  ------------------
  359|  4.61k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 3.01k, False: 1.59k]
  ------------------
  360|  3.01k|                                {
  361|  3.01k|                                    return OpCode::SWU;
  362|  3.01k|                                }
  363|  1.59k|                                break;
  364|  45.7k|                        }
  365|       |
  366|  19.2k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 1.81k, False: 218k]
  ------------------
  367|  20.0k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 800, False: 219k]
  ------------------
  368|  20.0k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 2.43k, False: 17.5k]
  |  Branch (368:29): [True: 1.78k, False: 18.2k]
  |  Branch (368:45): [True: 1.78k, False: 648]
  ------------------
  369|  1.78k|                        {
  370|  1.78k|                            return OpCode::XOR;
  371|  1.78k|                        }
  372|  18.2k|                        break;
  373|   220k|                }
  374|   143k|                break;
  375|   220k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   216k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 216k, False: 805k]
  ------------------
  379|   216k|                char c1 = token[0];
  380|   216k|                char c2 = token[1];
  381|   216k|                char c3 = token[2];
  382|   216k|                char c4 = token[3];
  383|       |
  384|   216k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 62.8k, False: 153k]
  ------------------
  385|   216k|                {
  386|  10.5k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 10.5k, False: 205k]
  ------------------
  387|  17.3k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 6.82k, False: 209k]
  ------------------
  388|  17.3k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 2.22k, False: 15.1k]
  ------------------
  389|  17.3k|                        {
  390|  3.99k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 3.99k, False: 13.3k]
  ------------------
  391|  8.49k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 4.50k, False: 12.8k]
  ------------------
  392|  8.49k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 7.92k, False: 571]
  ------------------
  393|  7.92k|                                {
  394|  7.92k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 724, False: 7.20k]
  ------------------
  395|  7.92k|                                    {
  396|  2.08k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 2.08k, False: 5.84k]
  ------------------
  397|  3.49k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 1.41k, False: 6.50k]
  ------------------
  398|  3.49k|                                            return OpCode::ADDD;
  399|       |
  400|    404|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 404, False: 7.52k]
  ------------------
  401|    987|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 583, False: 7.34k]
  ------------------
  402|    987|                                            return OpCode::ADDF;
  403|       |
  404|    226|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 226, False: 7.69k]
  ------------------
  405|  1.06k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 838, False: 7.08k]
  ------------------
  406|  1.06k|                                            return OpCode::ADDI;
  407|       |
  408|  1.23k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 1.23k, False: 6.69k]
  ------------------
  409|  1.65k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 422, False: 7.50k]
  ------------------
  410|  1.65k|                                            return OpCode::ADDU;
  411|  7.92k|                                    }
  412|  7.92k|                                }
  413|  1.29k|                                break;
  414|       |
  415|  1.29k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 399, False: 16.9k]
  ------------------
  416|  6.62k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 6.22k, False: 11.1k]
  ------------------
  417|  6.62k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 5.04k, False: 1.57k]
  |  Branch (417:37): [True: 1.71k, False: 4.90k]
  |  Branch (417:53): [True: 1.71k, False: 3.32k]
  ------------------
  418|  1.71k|                                {
  419|  1.71k|                                    return OpCode::ANDI;
  420|  1.71k|                                }
  421|       |
  422|  4.90k|                                break;
  423|  17.3k|                        }
  424|  8.42k|                        break;
  425|       |
  426|  8.42k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 5.55k, False: 210k]
  ------------------
  427|  13.7k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 8.23k, False: 208k]
  ------------------
  428|  13.7k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 1.63k, False: 12.1k]
  ------------------
  429|  13.7k|                        {
  430|  2.40k|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 2.40k, False: 11.3k]
  ------------------
  431|  3.71k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 1.30k, False: 12.4k]
  ------------------
  432|  3.71k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 2.20k, False: 1.50k]
  |  Branch (432:37): [True: 1.28k, False: 2.42k]
  |  Branch (432:53): [True: 1.28k, False: 922]
  ------------------
  433|  1.28k|                                {
  434|  1.28k|                                    return OpCode::BEQZ;
  435|  1.28k|                                }
  436|  2.42k|                                break;
  437|       |
  438|  2.42k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 942, False: 12.8k]
  ------------------
  439|  4.36k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 3.42k, False: 10.3k]
  ------------------
  440|  4.36k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 3.55k, False: 810]
  ------------------
  441|  3.55k|                                {
  442|  3.55k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 1.47k, False: 2.08k]
  ------------------
  443|  1.47k|                                    {
  444|  1.47k|                                        return OpCode::BFPF;
  445|  1.47k|                                    }
  446|  2.08k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 1.53k, False: 552]
  ------------------
  447|  1.53k|                                    {
  448|  1.53k|                                        return OpCode::BFPT;
  449|  1.53k|                                    }
  450|  3.55k|                                }
  451|  1.36k|                                break;
  452|       |
  453|  1.71k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 1.71k, False: 12.0k]
  ------------------
  454|  4.06k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 2.35k, False: 11.4k]
  ------------------
  455|  4.06k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 3.11k, False: 948]
  |  Branch (455:37): [True: 1.33k, False: 2.73k]
  |  Branch (455:53): [True: 1.33k, False: 1.78k]
  ------------------
  456|  1.33k|                                {
  457|  1.33k|                                    return OpCode::BNEZ;
  458|  1.33k|                                }
  459|  13.7k|                        }
  460|  8.16k|                        break;
  461|       |
  462|  8.16k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 1.66k, False: 214k]
  ------------------
  463|  16.4k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 14.7k, False: 201k]
  ------------------
  464|  16.4k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 11.8k, False: 4.59k]
  |  Branch (464:29): [True: 10.1k, False: 6.31k]
  |  Branch (464:45): [True: 10.1k, False: 1.71k]
  ------------------
  465|  10.1k|                        {
  466|  10.1k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 1.47k, False: 8.66k]
  ------------------
  467|  10.1k|                            {
  468|    982|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 982, False: 9.16k]
  ------------------
  469|  3.03k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 2.05k, False: 8.08k]
  ------------------
  470|  3.03k|                                    return OpCode::DIVD;
  471|       |
  472|  1.02k|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 1.02k, False: 9.11k]
  ------------------
  473|  1.57k|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 550, False: 9.59k]
  ------------------
  474|  1.57k|                                    return OpCode::DIVF;
  475|       |
  476|    322|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 322, False: 9.82k]
  ------------------
  477|  1.38k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 1.06k, False: 9.08k]
  ------------------
  478|  1.38k|                                    return OpCode::DIVI;
  479|       |
  480|  1.92k|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 1.92k, False: 8.21k]
  ------------------
  481|  2.66k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 742, False: 9.40k]
  ------------------
  482|  2.66k|                                    return OpCode::DIVU;
  483|  10.1k|                            }
  484|  10.1k|                        }
  485|  7.79k|                        break;
  486|       |
  487|  7.79k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 414, False: 215k]
  ------------------
  488|  5.22k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 4.80k, False: 211k]
  ------------------
  489|  5.22k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 4.80k, False: 413]
  |  Branch (489:29): [True: 1.88k, False: 3.33k]
  |  Branch (489:45): [True: 2.98k, False: 1.82k]
  |  Branch (489:61): [True: 1.88k, False: 1.09k]
  ------------------
  490|  1.88k|                        {
  491|  1.88k|                            return OpCode::HALT;
  492|  1.88k|                        }
  493|  3.33k|                        break;
  494|       |
  495|  3.33k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 772, False: 215k]
  ------------------
  496|  7.74k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 6.97k, False: 209k]
  ------------------
  497|  7.74k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 6.78k, False: 962]
  |  Branch (497:29): [True: 1.89k, False: 5.84k]
  |  Branch (497:45): [True: 3.48k, False: 3.30k]
  |  Branch (497:61): [True: 1.89k, False: 1.58k]
  ------------------
  498|  1.89k|                        {
  499|  1.89k|                            return OpCode::JALR;
  500|  1.89k|                        }
  501|  5.84k|                        break;
  502|       |
  503|  5.84k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 1.13k, False: 215k]
  ------------------
  504|  10.7k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 9.57k, False: 206k]
  ------------------
  505|  10.7k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 5.70k, False: 5.01k]
  |  Branch (505:29): [True: 5.01k, False: 5.70k]
  |  Branch (505:45): [True: 5.01k, False: 687]
  ------------------
  506|  5.01k|                        {
  507|  5.01k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 973, False: 4.04k]
  ------------------
  508|    973|                            {
  509|    973|                                return OpCode::MOVD;
  510|    973|                            }
  511|  4.04k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 2.43k, False: 1.61k]
  ------------------
  512|  2.43k|                            {
  513|  2.43k|                                return OpCode::MOVF;
  514|  2.43k|                            }
  515|  5.01k|                        }
  516|  5.70k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 4.42k, False: 1.27k]
  |  Branch (516:34): [True: 2.45k, False: 3.25k]
  |  Branch (516:50): [True: 3.75k, False: 668]
  |  Branch (516:66): [True: 2.45k, False: 1.30k]
  ------------------
  517|  2.45k|                        {
  518|  2.45k|                            return OpCode::MULT;
  519|  2.45k|                        }
  520|  4.86k|                        break;
  521|       |
  522|  28.3k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 28.3k, False: 188k]
  ------------------
  523|  68.1k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 39.8k, False: 176k]
  ------------------
  524|  68.1k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 6.26k, False: 61.9k]
  ------------------
  525|  68.1k|                        {
  526|  5.32k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 5.32k, False: 62.8k]
  ------------------
  527|  6.18k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 856, False: 67.3k]
  ------------------
  528|  6.18k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 5.32k, False: 861]
  ------------------
  529|  5.32k|                                {
  530|  5.32k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 1.51k, False: 3.80k]
  ------------------
  531|  1.51k|                                    {
  532|  1.51k|                                        return OpCode::SEQI;
  533|  1.51k|                                    }
  534|  3.80k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 1.82k, False: 1.98k]
  ------------------
  535|  1.82k|                                    {
  536|  1.82k|                                        return OpCode::SEQU;
  537|  1.82k|                                    }
  538|  5.32k|                                }
  539|  2.84k|                                break;
  540|       |
  541|  3.79k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 3.79k, False: 64.3k]
  ------------------
  542|  11.6k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 7.87k, False: 60.3k]
  ------------------
  543|  11.6k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 6.05k, False: 5.61k]
  ------------------
  544|  6.05k|                                {
  545|  6.05k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 2.20k, False: 3.85k]
  ------------------
  546|  2.20k|                                    {
  547|  2.20k|                                        return OpCode::SGEI;
  548|  2.20k|                                    }
  549|  3.85k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 2.15k, False: 1.70k]
  ------------------
  550|  2.15k|                                    {
  551|  2.15k|                                        return OpCode::SGEU;
  552|  2.15k|                                    }
  553|  6.05k|                                }
  554|  5.61k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 4.28k, False: 1.33k]
  ------------------
  555|  4.28k|                                {
  556|  4.28k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 1.50k, False: 2.77k]
  ------------------
  557|  1.50k|                                    {
  558|  1.50k|                                        return OpCode::SGTI;
  559|  1.50k|                                    }
  560|  2.77k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 1.24k, False: 1.53k]
  ------------------
  561|  1.24k|                                    {
  562|  1.24k|                                        return OpCode::SGTU;
  563|  1.24k|                                    }
  564|  4.28k|                                }
  565|  4.56k|                                break;
  566|       |
  567|  6.69k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 6.69k, False: 61.4k]
  ------------------
  568|  19.3k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 12.6k, False: 55.5k]
  ------------------
  569|  19.3k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 1.57k, False: 17.7k]
  ------------------
  570|  19.3k|                                {
  571|  1.65k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 1.65k, False: 17.7k]
  ------------------
  572|  3.03k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 1.37k, False: 17.9k]
  ------------------
  573|  3.03k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 1.62k, False: 1.40k]
  ------------------
  574|  1.62k|                                        {
  575|  1.62k|                                            return OpCode::SLAI;
  576|  1.62k|                                        }
  577|  1.40k|                                        break;
  578|       |
  579|  3.11k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 3.11k, False: 16.2k]
  ------------------
  580|  5.38k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 2.26k, False: 17.1k]
  ------------------
  581|  5.38k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 2.34k, False: 3.03k]
  ------------------
  582|  2.34k|                                        {
  583|  2.34k|                                            return OpCode::SLEI;
  584|  2.34k|                                        }
  585|  3.03k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 1.70k, False: 1.33k]
  ------------------
  586|  1.70k|                                        {
  587|  1.70k|                                            return OpCode::SLEU;
  588|  1.70k|                                        }
  589|  1.33k|                                        break;
  590|       |
  591|  1.67k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 1.67k, False: 17.6k]
  ------------------
  592|  3.67k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 2.00k, False: 17.3k]
  ------------------
  593|  3.67k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 3.25k, False: 421]
  ------------------
  594|  3.25k|                                        {
  595|  3.25k|                                            return OpCode::SLLI;
  596|  3.25k|                                        }
  597|    421|                                        break;
  598|       |
  599|  3.35k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 3.35k, False: 16.0k]
  ------------------
  600|  5.69k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 2.34k, False: 17.0k]
  ------------------
  601|  5.69k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 917, False: 4.78k]
  ------------------
  602|    917|                                        {
  603|    917|                                            return OpCode::SLTI;
  604|    917|                                        }
  605|  4.78k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 1.78k, False: 2.99k]
  ------------------
  606|  1.78k|                                        {
  607|  1.78k|                                            return OpCode::SLTU;
  608|  1.78k|                                        }
  609|  2.99k|                                        break;
  610|  19.3k|                                }
  611|       |
  612|  8.22k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 483, False: 67.6k]
  ------------------
  613|  17.8k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 9.61k, False: 58.5k]
  ------------------
  614|  17.8k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 9.89k, False: 7.94k]
  ------------------
  615|  9.89k|                                {
  616|  9.89k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 1.90k, False: 7.99k]
  ------------------
  617|  1.90k|                                    {
  618|  1.90k|                                        return OpCode::SNEI;
  619|  1.90k|                                    }
  620|  7.99k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 2.97k, False: 5.01k]
  ------------------
  621|  2.97k|                                    {
  622|  2.97k|                                        return OpCode::SNEU;
  623|  2.97k|                                    }
  624|  9.89k|                                }
  625|  12.9k|                                break;
  626|       |
  627|  12.9k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 1.64k, False: 66.5k]
  ------------------
  628|  4.78k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 3.13k, False: 65.0k]
  ------------------
  629|  4.78k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 1.57k, False: 3.21k]
  |  Branch (629:37): [True: 1.12k, False: 3.66k]
  |  Branch (629:53): [True: 1.12k, False: 446]
  ------------------
  630|  1.12k|                                {
  631|  1.12k|                                    return OpCode::SRAI;
  632|  1.12k|                                }
  633|  3.66k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 3.14k, False: 515]
  |  Branch (633:42): [True: 1.52k, False: 2.13k]
  |  Branch (633:58): [True: 1.52k, False: 1.62k]
  ------------------
  634|  1.52k|                                {
  635|  1.52k|                                    return OpCode::SRLI;
  636|  1.52k|                                }
  637|  2.13k|                                break;
  638|       |
  639|  3.15k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 3.15k, False: 65.0k]
  ------------------
  640|  9.80k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 6.65k, False: 61.5k]
  ------------------
  641|  9.80k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 8.73k, False: 1.07k]
  ------------------
  642|  8.73k|                                {
  643|  8.73k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 583, False: 8.15k]
  ------------------
  644|  8.73k|                                    {
  645|    322|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 322, False: 8.41k]
  ------------------
  646|    917|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 595, False: 8.14k]
  ------------------
  647|    917|                                            return OpCode::SUBD;
  648|       |
  649|  1.03k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 1.03k, False: 7.69k]
  ------------------
  650|  1.36k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 322, False: 8.41k]
  ------------------
  651|  1.36k|                                            return OpCode::SUBF;
  652|       |
  653|    390|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 390, False: 8.34k]
  ------------------
  654|  1.94k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 1.55k, False: 7.18k]
  ------------------
  655|  1.94k|                                            return OpCode::SUBI;
  656|       |
  657|  1.54k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 1.54k, False: 7.19k]
  ------------------
  658|  3.93k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 2.38k, False: 6.35k]
  ------------------
  659|  3.93k|                                            return OpCode::SUBU;
  660|  8.73k|                                    }
  661|  8.73k|                                }
  662|  1.65k|                                break;
  663|  68.1k|                        }
  664|  30.4k|                        break;
  665|       |
  666|  30.4k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 484, False: 215k]
  ------------------
  667|  6.10k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 5.61k, False: 210k]
  ------------------
  668|  6.10k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 5.29k, False: 806]
  |  Branch (668:29): [True: 3.24k, False: 2.85k]
  |  Branch (668:45): [True: 4.48k, False: 806]
  |  Branch (668:61): [True: 3.24k, False: 1.24k]
  ------------------
  669|  3.24k|                        {
  670|  3.24k|                            return OpCode::TRAP;
  671|  3.24k|                        }
  672|  2.85k|                        break;
  673|  5.67k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 5.67k, False: 210k]
  ------------------
  674|  8.03k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 2.35k, False: 214k]
  ------------------
  675|  8.03k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 6.09k, False: 1.93k]
  |  Branch (675:29): [True: 1.28k, False: 6.75k]
  |  Branch (675:45): [True: 5.16k, False: 935]
  |  Branch (675:61): [True: 1.28k, False: 3.88k]
  ------------------
  676|  1.28k|                        {
  677|  1.28k|                            return OpCode::XORI;
  678|  1.28k|                        }
  679|  6.75k|                        break;
  680|   216k|                }
  681|   141k|                break;
  682|   216k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|   141k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 128k, False: 892k]
  ------------------
  686|   128k|                char c1 = token[0];
  687|   128k|                char c2 = token[1];
  688|   128k|                char c3 = token[2];
  689|   128k|                char c4 = token[3];
  690|   128k|                char c5 = token[4];
  691|       |
  692|   128k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 42.3k, False: 86.6k]
  ------------------
  693|   128k|                {
  694|  2.73k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 2.73k, False: 126k]
  ------------------
  695|  9.48k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 6.74k, False: 122k]
  ------------------
  696|  9.48k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 7.54k, False: 1.94k]
  |  Branch (696:29): [True: 1.68k, False: 7.79k]
  |  Branch (696:45): [True: 5.29k, False: 2.25k]
  |  Branch (696:61): [True: 4.27k, False: 1.01k]
  |  Branch (696:77): [True: 1.68k, False: 2.58k]
  ------------------
  697|  1.68k|                        {
  698|  1.68k|                            return OpCode::ADDUI;
  699|  1.68k|                        }
  700|  7.79k|                        break;
  701|       |
  702|  7.79k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 2.03k, False: 126k]
  ------------------
  703|  15.1k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 13.1k, False: 115k]
  ------------------
  704|  15.1k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 9.50k, False: 5.68k]
  |  Branch (704:29): [True: 1.12k, False: 14.0k]
  |  Branch (704:45): [True: 7.65k, False: 1.85k]
  |  Branch (704:61): [True: 3.80k, False: 3.84k]
  |  Branch (704:77): [True: 1.12k, False: 2.67k]
  ------------------
  705|  1.12k|                        {
  706|  1.12k|                            return OpCode::DIVUI;
  707|  1.12k|                        }
  708|  14.0k|                        break;
  709|       |
  710|  14.0k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 3.65k, False: 125k]
  ------------------
  711|  16.8k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 13.2k, False: 115k]
  ------------------
  712|  16.8k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 11.8k, False: 5.03k]
  |  Branch (712:29): [True: 8.43k, False: 8.46k]
  |  Branch (712:45): [True: 9.89k, False: 1.96k]
  |  Branch (712:61): [True: 8.43k, False: 1.46k]
  ------------------
  713|  8.43k|                        {
  714|  8.43k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 1.21k, False: 7.21k]
  ------------------
  715|  8.43k|                            {
  716|    891|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 891, False: 7.54k]
  ------------------
  717|  1.63k|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 739, False: 7.69k]
  ------------------
  718|  1.63k|                                    return OpCode::MULTD;
  719|       |
  720|  1.71k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 1.71k, False: 6.71k]
  ------------------
  721|  2.50k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 786, False: 7.64k]
  ------------------
  722|  2.50k|                                    return OpCode::MULTF;
  723|       |
  724|    546|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 546, False: 7.88k]
  ------------------
  725|  1.20k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 658, False: 7.77k]
  ------------------
  726|  1.20k|                                    return OpCode::MULTI;
  727|       |
  728|    579|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 579, False: 7.85k]
  ------------------
  729|  1.88k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 1.30k, False: 7.13k]
  ------------------
  730|  1.88k|                                    return OpCode::MULTU;
  731|  8.43k|                            }
  732|  8.43k|                        }
  733|  9.67k|                        break;
  734|       |
  735|  16.4k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 16.4k, False: 112k]
  ------------------
  736|  45.1k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 28.6k, False: 100k]
  ------------------
  737|  45.1k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 3.52k, False: 41.6k]
  ------------------
  738|  45.1k|                        {
  739|  5.81k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 5.81k, False: 39.3k]
  ------------------
  740|  8.00k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 2.19k, False: 42.9k]
  ------------------
  741|  8.00k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 5.79k, False: 2.21k]
  |  Branch (741:37): [True: 980, False: 7.02k]
  |  Branch (741:53): [True: 3.41k, False: 2.37k]
  |  Branch (741:69): [True: 980, False: 2.43k]
  ------------------
  742|    980|                                {
  743|    980|                                    return OpCode::SEQUI;
  744|    980|                                }
  745|  7.02k|                                break;
  746|       |
  747|  7.02k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 3.33k, False: 41.7k]
  ------------------
  748|  8.81k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 5.48k, False: 39.6k]
  ------------------
  749|  8.81k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 4.14k, False: 4.67k]
  |  Branch (749:37): [True: 1.42k, False: 7.38k]
  |  Branch (749:53): [True: 3.11k, False: 1.02k]
  |  Branch (749:69): [True: 1.42k, False: 1.69k]
  ------------------
  750|  1.42k|                                {
  751|  1.42k|                                    return OpCode::SGEUI;
  752|  1.42k|                                }
  753|  7.38k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 4.59k, False: 2.79k]
  |  Branch (753:42): [True: 1.75k, False: 5.63k]
  |  Branch (753:58): [True: 3.02k, False: 1.56k]
  |  Branch (753:74): [True: 1.75k, False: 1.27k]
  ------------------
  754|  1.75k|                                {
  755|  1.75k|                                    return OpCode::SGTUI;
  756|  1.75k|                                }
  757|  5.63k|                                break;
  758|       |
  759|  5.63k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 3.65k, False: 41.4k]
  ------------------
  760|  14.4k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 10.7k, False: 34.3k]
  ------------------
  761|  14.4k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 7.25k, False: 7.17k]
  |  Branch (761:37): [True: 3.37k, False: 11.0k]
  |  Branch (761:53): [True: 5.09k, False: 2.16k]
  |  Branch (761:69): [True: 3.37k, False: 1.71k]
  ------------------
  762|  3.37k|                                {
  763|  3.37k|                                    return OpCode::SLEUI;
  764|  3.37k|                                }
  765|  11.0k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 4.80k, False: 6.25k]
  |  Branch (765:42): [True: 1.63k, False: 9.42k]
  |  Branch (765:58): [True: 3.41k, False: 1.38k]
  |  Branch (765:74): [True: 1.63k, False: 1.78k]
  ------------------
  766|  1.63k|                                {
  767|  1.63k|                                    return OpCode::SLTUI;
  768|  1.63k|                                }
  769|  9.42k|                                break;
  770|       |
  771|  9.42k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 391, False: 44.7k]
  ------------------
  772|  6.03k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 5.64k, False: 39.4k]
  ------------------
  773|  6.03k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 4.98k, False: 1.05k]
  |  Branch (773:37): [True: 2.95k, False: 3.08k]
  |  Branch (773:53): [True: 4.37k, False: 609]
  |  Branch (773:69): [True: 2.95k, False: 1.42k]
  ------------------
  774|  2.95k|                                {
  775|  2.95k|                                    return OpCode::SNEUI;
  776|  2.95k|                                }
  777|  3.08k|                                break;
  778|       |
  779|  3.08k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 1.74k, False: 43.3k]
  ------------------
  780|  4.30k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 2.56k, False: 42.5k]
  ------------------
  781|  4.30k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 3.13k, False: 1.17k]
  |  Branch (781:37): [True: 1.57k, False: 2.73k]
  |  Branch (781:53): [True: 2.44k, False: 696]
  |  Branch (781:69): [True: 1.57k, False: 864]
  ------------------
  782|  1.57k|                                {
  783|  1.57k|                                    return OpCode::SUBUI;
  784|  1.57k|                                }
  785|  2.73k|                                break;
  786|  45.1k|                        }
  787|       |
  788|  31.4k|                        break;
  789|   128k|                }
  790|       |
  791|   105k|                break;
  792|   128k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|   105k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 60.8k, False: 960k]
  ------------------
  796|  60.8k|                char c1 = token[0];
  797|  60.8k|                char c2 = token[1];
  798|  60.8k|                char c3 = token[2];
  799|  60.8k|                char c4 = token[3];
  800|  60.8k|                char c5 = token[4];
  801|  60.8k|                char c6 = token[5];
  802|       |
  803|  60.8k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 21.0k, False: 39.7k]
  |  Branch (803:21): [True: 18.5k, False: 42.3k]
  |  Branch (803:37): [True: 19.3k, False: 1.73k]
  |  Branch (803:53): [True: 18.5k, False: 844]
  ------------------
  804|  18.5k|                {
  805|  18.5k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 2.05k, False: 16.4k]
  ------------------
  806|  18.5k|                    {
  807|  3.20k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 3.20k, False: 15.3k]
  ------------------
  808|  5.62k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 2.42k, False: 16.0k]
  ------------------
  809|  5.62k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 3.65k, False: 1.96k]
  ------------------
  810|  3.65k|                            {
  811|  3.65k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 1.35k, False: 2.30k]
  ------------------
  812|  1.35k|                                {
  813|  1.35k|                                    return OpCode::CVTD2F;
  814|  1.35k|                                }
  815|  2.30k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 1.71k, False: 587]
  ------------------
  816|  1.71k|                                {
  817|  1.71k|                                    return OpCode::CVTD2I;
  818|  1.71k|                                }
  819|  3.65k|                            }
  820|  2.55k|                            break;
  821|       |
  822|  2.55k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 892, False: 17.6k]
  ------------------
  823|  4.53k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 3.64k, False: 14.8k]
  ------------------
  824|  4.53k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 3.69k, False: 841]
  ------------------
  825|  3.69k|                            {
  826|  3.69k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 1.82k, False: 1.86k]
  ------------------
  827|  1.82k|                                {
  828|  1.82k|                                    return OpCode::CVTF2D;
  829|  1.82k|                                }
  830|  1.86k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 1.03k, False: 830]
  ------------------
  831|  1.03k|                                {
  832|  1.03k|                                    return OpCode::CVTF2I;
  833|  1.03k|                                }
  834|  3.69k|                            }
  835|  1.67k|                            break;
  836|       |
  837|  5.01k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 5.01k, False: 13.4k]
  ------------------
  838|  6.29k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 1.28k, False: 17.2k]
  ------------------
  839|  6.29k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 4.20k, False: 2.09k]
  ------------------
  840|  4.20k|                            {
  841|  4.20k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 868, False: 3.33k]
  ------------------
  842|    868|                                {
  843|    868|                                    return OpCode::CVTI2D;
  844|    868|                                }
  845|  3.33k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 1.34k, False: 1.99k]
  ------------------
  846|  1.34k|                                {
  847|  1.34k|                                    return OpCode::CVTI2F;
  848|  1.34k|                                }
  849|  4.20k|                            }
  850|  18.5k|                    }
  851|  18.5k|                }
  852|  42.3k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 11.2k, False: 31.1k]
  |  Branch (852:26): [True: 2.26k, False: 40.0k]
  |  Branch (852:42): [True: 8.10k, False: 3.13k]
  |  Branch (852:58): [True: 5.63k, False: 2.46k]
  |  Branch (852:74): [True: 4.05k, False: 1.58k]
  ------------------
  853|  42.3k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 3.58k, False: 469]
  |  Branch (853:42): [True: 2.26k, False: 1.32k]
  ------------------
  854|  2.26k|                {
  855|  2.26k|                    return OpCode::MULTUI;
  856|  2.26k|                }
  857|  50.4k|                break;
  858|  60.8k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  50.4k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 28.5k, False: 993k]
  ------------------
  862|  28.5k|                char c1 = token[0];
  863|  28.5k|                char c2 = token[1];
  864|  28.5k|                char c3 = token[2];
  865|  28.5k|                char c4 = token[3];
  866|  28.5k|                char c5 = token[4];
  867|  28.5k|                char c6 = token[5];
  868|  28.5k|                char c7 = token[6];
  869|       |
  870|  28.5k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 9.67k, False: 18.8k]
  |  Branch (870:21): [True: 6.91k, False: 21.6k]
  |  Branch (870:37): [True: 8.03k, False: 1.64k]
  |  Branch (870:53): [True: 6.91k, False: 1.11k]
  ------------------
  871|  6.91k|                {
  872|  6.91k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 3.58k, False: 3.33k]
  |  Branch (872:25): [True: 988, False: 5.93k]
  |  Branch (872:41): [True: 3.20k, False: 385]
  |  Branch (872:54): [True: 2.83k, False: 368]
  |  Branch (872:70): [True: 988, False: 1.84k]
  ------------------
  873|    988|                    {
  874|    988|                        return OpCode::MOVI2FP;
  875|    988|                    }
  876|  5.93k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 3.29k, False: 2.63k]
  |  Branch (876:30): [True: 1.63k, False: 4.29k]
  |  Branch (876:46): [True: 2.78k, False: 514]
  |  Branch (876:62): [True: 1.96k, False: 817]
  |  Branch (876:75): [True: 1.63k, False: 331]
  ------------------
  877|  1.63k|                    {
  878|  1.63k|                        return OpCode::MOVFP2I;
  879|  1.63k|                    }
  880|  6.91k|                }
  881|  25.9k|                break;
  882|  28.5k|            }
  883|       |
  884|  31.8k|            default: {
  ------------------
  |  Branch (884:13): [True: 31.8k, False: 989k]
  ------------------
  885|  31.8k|                break;
  886|  28.5k|            }
  887|  1.02M|        }
  888|       |
  889|       |        // None found
  890|   766k|        return OpCode::NONE;
  891|  1.02M|    }
_ZN3dlx3iceEcc:
   17|  1.21M|    {
   18|  1.21M|        constexpr const char diff = 'a' - 'A';
   19|  1.21M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 298k, False: 917k]
  |  Branch (19:28): [True: 327k, False: 590k]
  ------------------
   20|  1.21M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  1.16M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  14.3k|    {
  193|  14.3k|        ParseError err;
  194|       |
  195|  14.3k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  14.3k|        err.m_LineNumber                           = line_number;
  197|  14.3k|        err.m_Column                               = column;
  198|  14.3k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  14.3k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  14.3k|        return err;
  202|  14.3k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  14.3k|    {
  207|  14.3k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  14.3k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  14.3k|                                                         actual_type);
  210|  14.3k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|  1.78k|    {
  216|  1.78k|        ParseError err;
  217|       |
  218|  1.78k|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|  1.78k|        err.m_LineNumber        = line_number;
  220|  1.78k|        err.m_Column            = column;
  221|  1.78k|        err.invalid_number.text = text;
  222|       |
  223|  1.78k|        return err;
  224|  1.78k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|  1.78k|    {
  228|  1.78k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|  1.78k|                                                token.GetColumn().unsafe(), token.GetText());
  230|  1.78k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|     11|    {
  235|     11|        ParseError err;
  236|       |
  237|     11|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|     11|        err.m_LineNumber = line_number;
  239|     11|        err.m_Column     = column;
  240|       |
  241|     11|        return err;
  242|     11|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|     11|    {
  247|     11|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|     11|                                                                     token.GetColumn().unsafe());
  249|     11|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   571k|    {
  255|   571k|        ParseError err;
  256|       |
  257|   571k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   571k|        err.m_LineNumber                   = line_number;
  259|   571k|        err.m_Column                       = column;
  260|   571k|        err.unexpected_token.expected_type = expected_type;
  261|   571k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   571k|        return err;
  264|   571k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   571k|    {
  269|   571k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   571k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   571k|                                                  token.GetType());
  272|   571k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|   101k|    {
  277|   101k|        ParseError err;
  278|       |
  279|   101k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|   101k|        err.m_LineNumber                   = line_number;
  281|   101k|        err.m_Column                       = column;
  282|   101k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|   101k|        return err;
  285|   101k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|    854|    {
  289|    854|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|    854|                                                    token.GetColumn().unsafe(), token.GetText());
  291|    854|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   262k|    {
  296|   262k|        ParseError err;
  297|       |
  298|   262k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   262k|        err.m_LineNumber                       = line_number;
  300|   262k|        err.m_Column                           = column;
  301|   262k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   262k|        return err;
  304|   262k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   262k|    {
  309|   262k|        return ConstructInvalidLabelIdentifierParseError(
  310|   262k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   262k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  61.3k|    {
  317|  61.3k|        ParseError err;
  318|       |
  319|  61.3k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  61.3k|        err.m_LineNumber                     = line_number;
  321|  61.3k|        err.m_Column                         = column;
  322|  61.3k|        err.label_already_defined.label_name = label_name;
  323|  61.3k|        err.label_already_defined.at_line    = at_line;
  324|  61.3k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  61.3k|        return err;
  327|  61.3k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  61.3k|    {
  332|  61.3k|        return ConstructLabelAlreadyDefinedParseError(
  333|  61.3k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  61.3k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  61.3k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|  99.0k|    {
  340|  99.0k|        ParseError err;
  341|       |
  342|  99.0k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|  99.0k|        err.m_LineNumber = line_number;
  344|  99.0k|        err.m_Column     = column;
  345|       |
  346|  99.0k|        return err;
  347|  99.0k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|  99.0k|    {
  352|  99.0k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|  99.0k|                                                        token.GetColumn().unsafe());
  354|  99.0k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  10.9k|    {
  360|  10.9k|        ParseError err;
  361|       |
  362|  10.9k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  10.9k|        err.m_LineNumber               = line_number;
  364|  10.9k|        err.m_Column                   = column;
  365|  10.9k|        err.too_few_arguments.required = required;
  366|  10.9k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  10.9k|        return err;
  369|  10.9k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  10.9k|    {
  374|  10.9k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  10.9k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  10.9k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  24.2k|    {
  381|  24.2k|        ParseError err;
  382|       |
  383|  24.2k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  24.2k|        err.m_LineNumber           = line_number;
  385|  24.2k|        err.m_Column               = column;
  386|  24.2k|        err.empty_label.label_name = label_name;
  387|       |
  388|  24.2k|        return err;
  389|  24.2k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  24.2k|    {
  393|  24.2k|        return ConstructEmptyLabelParseError(
  394|  24.2k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  24.2k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 20.2k, False: 3.97k]
  ------------------
  396|  20.2k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  24.2k|                        token.GetText());
  398|  24.2k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  17.6k|    {
  403|  17.6k|        ParseError err;
  404|       |
  405|  17.6k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  17.6k|        err.m_LineNumber = line_number;
  407|  17.6k|        err.m_Column     = column;
  408|       |
  409|  17.6k|        return err;
  410|  17.6k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  17.6k|    {
  414|  17.6k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  17.6k|                                               token.GetColumn().unsafe());
  416|  17.6k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  1.16M|    {
   19|  1.16M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  1.16M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  7.61k|    {
  182|  7.61k|        ParsedProgram program;
  183|       |
  184|  7.61k|        program.m_Tokens = tokens;
  185|       |
  186|  7.61k|        phi::boolean line_has_instruction{false};
  187|  7.61k|        phi::usize   label_count{0u};
  188|       |
  189|  1.28M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 1.27M, False: 7.61k]
  ------------------
  190|  1.27M|        {
  191|  1.27M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  1.27M|            switch (current_token.GetType())
  196|  1.27M|            {
  197|       |                // Ignore comments
  198|  6.22k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 6.22k, False: 1.27M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  6.22k|                    break;
  201|       |
  202|   116k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 116k, False: 1.16M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   116k|                    line_has_instruction = false;
  205|   116k|                    break;
  206|       |
  207|   541k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 541k, False: 736k]
  ------------------
  208|   541k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 103k, False: 438k]
  ------------------
  209|   103k|                    {
  210|   103k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|   103k|                                current_token, Token::Type::NewLine));
  212|   103k|                        break;
  213|   103k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   438k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 154k, False: 283k]
  ------------------
  218|   154k|                    {
  219|   154k|                        program.AddParseError(
  220|   154k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   154k|                        break;
  222|   154k|                    }
  223|       |
  224|   283k|                    std::string_view label_name = current_token.GetText();
  225|   283k|                    label_name.remove_suffix(1);
  226|       |
  227|   283k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 100k, False: 183k]
  ------------------
  228|   100k|                    {
  229|   100k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|   100k|                                current_token.GetLineNumber().unsafe(),
  231|   100k|                                current_token.GetColumn().unsafe(), label_name));
  232|   100k|                        break;
  233|   100k|                    }
  234|       |
  235|   183k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 96.3k, False: 87.2k]
  ------------------
  236|  96.3k|                    {
  237|  96.3k|                        program.AddParseError(
  238|  96.3k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  96.3k|                        break;
  240|  96.3k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  87.2k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 61.3k, False: 25.9k]
  ------------------
  244|  61.3k|                    {
  245|       |                        // Find first defintions of label
  246|  61.3k|                        const Token* first_label_definition =
  247|  61.3k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  61.3k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  61.3k|                                    {
  250|  61.3k|                                        std::string_view token_label_name = t.GetText();
  251|  61.3k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  61.3k|                                        if (token_label_name == label_name)
  254|  61.3k|                                        {
  255|  61.3k|                                            return true;
  256|  61.3k|                                        }
  257|  61.3k|                                    }
  258|       |
  259|  61.3k|                                    return false;
  260|  61.3k|                                });
  261|       |
  262|  61.3k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  61.3k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  61.3k|                                current_token, *first_label_definition));
  266|  61.3k|                        break;
  267|  61.3k|                    }
  268|       |
  269|  25.9k|                    program.m_JumpData[label_name] =
  270|  25.9k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  25.9k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  25.9k|                    break;
  277|  87.2k|                }
  278|       |
  279|   160k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 160k, False: 1.11M]
  ------------------
  280|   160k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 99.0k, False: 61.3k]
  ------------------
  281|  99.0k|                    {
  282|  99.0k|                        program.AddParseError(
  283|  99.0k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|  99.0k|                        break;
  285|  99.0k|                    }
  286|       |
  287|  61.3k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  61.3k|                    PHI_ASSERT(current_token.HasHint());
  291|  61.3k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  61.3k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  61.3k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  61.3k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  61.3k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  61.3k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  61.3k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  61.3k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  61.3k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   121k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 114k, False: 7.42k]
  ------------------
  313|   114k|                    {
  314|       |                        // Get next token
  315|   114k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 842, False: 113k]
  ------------------
  316|    842|                        {
  317|    842|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    842|                                    current_token, number_of_argument_required.unsafe(),
  319|    842|                                    argument_num.unsafe()));
  320|    842|                            break;
  321|    842|                        }
  322|       |
  323|   113k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   113k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 49.2k, False: 64.2k]
  ------------------
  327|  49.2k|                        {
  328|  49.2k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 17.6k, False: 31.6k]
  ------------------
  329|  17.6k|                            {
  330|  17.6k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  17.6k|                            }
  332|       |
  333|  49.2k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  49.2k|                            continue;
  336|  49.2k|                        }
  337|       |
  338|  64.2k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 10.1k, False: 54.1k]
  ------------------
  339|  10.1k|                        {
  340|  10.1k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  10.1k|                                    token, number_of_argument_required.unsafe(),
  342|  10.1k|                                    argument_num.unsafe()));
  343|  10.1k|                            break;
  344|  10.1k|                        }
  345|       |
  346|  54.1k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  54.1k|                                parse_instruction_argument(
  348|  54.1k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  54.1k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 42.9k, False: 11.1k]
  ------------------
  350|  42.9k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  42.9k|                            break;
  353|  42.9k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  11.1k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  11.1k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  11.1k|                        argument_num++;
  360|  11.1k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  11.1k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  61.3k|                    program.m_Instructions.emplace_back(instruction);
  368|  61.3k|                    line_has_instruction = true;
  369|  61.3k|                    break;
  370|   160k|                }
  371|       |
  372|   454k|                default:
  ------------------
  |  Branch (372:17): [True: 454k, False: 824k]
  ------------------
  373|   454k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   454k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 210k, False: 244k]
  ------------------
  375|   210k|                    {
  376|   210k|                        expected_token_type = Token::Type::NewLine;
  377|   210k|                    }
  378|       |
  379|   454k|                    program.AddParseError(
  380|   454k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   454k|                    break;
  382|  1.27M|            }
  383|  1.27M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  7.61k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 2.15k, False: 5.46k]
  ------------------
  387|  2.15k|        {
  388|  31.9k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 29.7k, False: 2.15k]
  ------------------
  389|  29.7k|            {
  390|  29.7k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  29.7k|                const Token& token = *it;
  393|  29.7k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 24.2k, False: 5.52k]
  ------------------
  394|  24.2k|                {
  395|  24.2k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  24.2k|                    --label_count;
  397|  24.2k|                }
  398|  29.7k|            }
  399|  2.15k|        }
  400|       |
  401|  7.61k|        return program;
  402|  7.61k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  7.61k|    {
  406|  7.61k|        TokenStream tokens = Tokenize(source);
  407|  7.61k|        return Parse(tokens);
  408|  7.61k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  54.1k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  54.1k|        switch (token.GetType())
   38|  54.1k|        {
   39|  6.63k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 6.63k, False: 47.4k]
  ------------------
   40|  6.63k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 2.09k, False: 4.53k]
  ------------------
   41|  6.63k|                                          ArgumentType::AddressDisplacement))
   42|  2.09k|                {
   43|  2.09k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  2.09k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  2.09k|                    return {};
   47|  2.09k|                }
   48|       |
   49|       |                // Get address displacement
   50|  4.53k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  4.53k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  4.53k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 11, False: 4.52k]
  ------------------
   55|     11|                {
   56|     11|                    program.AddParseError(
   57|     11|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|     11|                    return {};
   59|     11|                }
   60|       |
   61|  4.52k|                auto         it           = tokens.current_position();
   62|  4.52k|                const Token& first_token  = tokens.consume();
   63|  4.52k|                const Token& second_token = tokens.consume();
   64|  4.52k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  4.52k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 1.20k, False: 3.31k]
  ------------------
   67|  1.20k|                {
   68|  1.20k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  1.20k|                            first_token, Token::Type::OpenBracket));
   70|  1.20k|                    return {};
   71|  1.20k|                }
   72|       |
   73|       |                // Second token is the register
   74|  3.31k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 1.05k, False: 2.26k]
  ------------------
   75|  1.05k|                {
   76|  1.05k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|  1.05k|                            second_token, Token::Type::RegisterInt));
   78|  1.05k|                    return {};
   79|  1.05k|                }
   80|       |
   81|  2.26k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 889, False: 1.37k]
  ------------------
   82|    889|                {
   83|    889|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|    889|                            third_token, Token::Type::ClosingBracket));
   85|    889|                    return {};
   86|    889|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|  1.37k|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|  1.37k|                return ConstructInstructionArgumentAddressDisplacement(
   95|  1.37k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|  2.26k|            }
   97|  1.35k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 1.35k, False: 52.7k]
  ------------------
   98|  1.35k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 476, False: 876]
  ------------------
   99|    476|                {
  100|    476|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|    476|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|    476|                    return {};
  103|    476|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|    876|                return ConstructInstructionArgumentRegisterInt(
  109|    876|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  1.35k|            }
  111|  6.19k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 6.19k, False: 47.9k]
  ------------------
  112|  6.19k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 2.00k, False: 4.18k]
  ------------------
  113|  2.00k|                {
  114|  2.00k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  2.00k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  2.00k|                    return {};
  117|  2.00k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  4.18k|                return ConstructInstructionArgumentRegisterFloat(
  123|  4.18k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  6.19k|            }
  125|    854|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 854, False: 53.2k]
  ------------------
  126|    854|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|    854|                return {};
  129|  6.19k|            }
  130|  24.2k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 24.2k, False: 29.8k]
  ------------------
  131|       |                // Parse as Label
  132|  24.2k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 8.17k, False: 16.0k]
  ------------------
  133|  8.17k|                {
  134|  8.17k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  8.17k|                            token, expected_argument_type, ArgumentType::Label));
  136|  8.17k|                    return {};
  137|  8.17k|                }
  138|       |
  139|  16.0k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 16.0k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  16.0k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 12.1k, False: 3.92k]
  ------------------
  146|  12.1k|                {
  147|  12.1k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  12.1k|                    return {};
  149|  12.1k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  3.92k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  16.0k|            }
  155|  4.20k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 4.20k, False: 49.9k]
  ------------------
  156|  4.20k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 1.57k, False: 2.62k]
  ------------------
  157|  1.57k|                {
  158|  1.57k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  1.57k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  1.57k|                    return {};
  161|  1.57k|                }
  162|       |
  163|  2.62k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 843, False: 1.78k]
  ------------------
  164|    843|                {
  165|    843|                    return ConstructInstructionArgumentImmediateValue(
  166|    843|                            static_cast<std::int16_t>(token.GetHint()));
  167|    843|                }
  168|       |
  169|  1.78k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|  1.78k|                return {};
  171|  2.62k|            }
  172|       |
  173|  10.6k|            default:
  ------------------
  |  Branch (173:13): [True: 10.6k, False: 43.4k]
  ------------------
  174|  10.6k|                program.AddParseError(
  175|  10.6k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  10.6k|                return {};
  177|  54.1k|        }
  178|  54.1k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  1.13M|                                tokens.find_first_token_if([&](const Token& t) {
  248|  1.13M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 815k, False: 319k]
  ------------------
  249|   815k|                                    {
  250|   815k|                                        std::string_view token_label_name = t.GetText();
  251|   815k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   815k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 61.3k, False: 754k]
  ------------------
  254|  61.3k|                                        {
  255|  61.3k|                                            return true;
  256|  61.3k|                                        }
  257|   815k|                                    }
  258|       |
  259|  1.07M|                                    return false;
  260|  1.13M|                                });

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  1.04M|    {
   14|  1.04M|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 198k, False: 850k]
  ------------------
   15|   198k|        {
   16|   198k|            char first_char = token[0];
   17|   198k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 1.62k, False: 197k]
  |  Branch (17:38): [True: 10.1k, False: 187k]
  ------------------
   18|  11.7k|            {
   19|  11.7k|                char second_char = token[1];
   20|  11.7k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 10.5k, False: 1.21k]
  |  Branch (20:43): [True: 7.83k, False: 2.69k]
  ------------------
   21|  7.83k|                {
   22|  7.83k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  7.83k|                }
   24|  11.7k|            }
   25|   198k|        }
   26|   850k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 229k, False: 621k]
  ------------------
   27|   229k|        {
   28|   229k|            char first_char = token[0];
   29|   229k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 537, False: 229k]
  |  Branch (29:38): [True: 11.1k, False: 218k]
  ------------------
   30|  11.6k|            {
   31|  11.6k|                char second_char = token[1];
   32|  11.6k|                char third_char  = token[2];
   33|       |
   34|  11.6k|                switch (second_char)
   35|  11.6k|                {
   36|  2.98k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 2.98k, False: 8.66k]
  ------------------
   37|  2.98k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 1.72k, False: 1.25k]
  |  Branch (37:50): [True: 1.26k, False: 467]
  ------------------
   38|  1.26k|                        {
   39|  1.26k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  1.26k|                        }
   41|  1.71k|                        break;
   42|  2.98k|                    }
   43|  3.65k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 3.65k, False: 7.99k]
  ------------------
   44|  3.65k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 2.98k, False: 661]
  |  Branch (44:50): [True: 1.11k, False: 1.87k]
  ------------------
   45|  1.11k|                        {
   46|  1.11k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  1.11k|                        }
   48|  2.53k|                        break;
   49|  3.65k|                    }
   50|  2.53k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 2.36k, False: 9.28k]
  ------------------
   51|  2.36k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 738, False: 1.62k]
  |  Branch (51:50): [True: 520, False: 1.10k]
  ------------------
   52|  1.25k|                        {
   53|  1.25k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  1.25k|                        }
   55|  1.10k|                        break;
   56|  2.36k|                    }
   57|  2.65k|                    default: {
  ------------------
  |  Branch (57:21): [True: 2.65k, False: 8.99k]
  ------------------
   58|  2.65k|                        break;
   59|  2.36k|                    }
   60|  11.6k|                }
   61|  11.6k|            }
   62|   229k|        }
   63|       |
   64|  1.03M|        return IntRegisterID::None;
   65|  1.04M|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|  1.03M|    {
   69|  1.03M|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 190k, False: 847k]
  ------------------
   70|   190k|        {
   71|   190k|            char first_char = token[0];
   72|   190k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 9.90k, False: 181k]
  |  Branch (72:38): [True: 9.15k, False: 171k]
  ------------------
   73|  19.0k|            {
   74|  19.0k|                char second_char = token[1];
   75|  19.0k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 17.9k, False: 1.14k]
  |  Branch (75:43): [True: 10.9k, False: 6.98k]
  ------------------
   76|  10.9k|                {
   77|  10.9k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  10.9k|                }
   79|  19.0k|            }
   80|   190k|        }
   81|   847k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 226k, False: 621k]
  ------------------
   82|   226k|        {
   83|   226k|            char first_char = token[0];
   84|   226k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 11.4k, False: 214k]
  |  Branch (84:38): [True: 10.6k, False: 203k]
  ------------------
   85|  22.1k|            {
   86|  22.1k|                char second_char = token[1];
   87|  22.1k|                char third_char  = token[2];
   88|       |
   89|  22.1k|                switch (second_char)
   90|  22.1k|                {
   91|  4.59k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 4.59k, False: 17.5k]
  ------------------
   92|  4.59k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 4.37k, False: 219]
  |  Branch (92:50): [True: 1.16k, False: 3.21k]
  ------------------
   93|  1.16k|                        {
   94|  1.16k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  1.16k|                        }
   96|  3.43k|                        break;
   97|  4.59k|                    }
   98|  3.70k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 3.70k, False: 18.4k]
  ------------------
   99|  3.70k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 2.94k, False: 761]
  |  Branch (99:50): [True: 2.16k, False: 785]
  ------------------
  100|  2.16k|                        {
  101|  2.16k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  2.16k|                        }
  103|  1.54k|                        break;
  104|  3.70k|                    }
  105|  4.20k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 4.20k, False: 17.9k]
  ------------------
  106|  4.20k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 901, False: 3.30k]
  |  Branch (106:50): [True: 1.53k, False: 1.77k]
  ------------------
  107|  2.43k|                        {
  108|  2.43k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  2.43k|                        }
  110|  1.77k|                        break;
  111|  4.20k|                    }
  112|  9.62k|                    default: {
  ------------------
  |  Branch (112:21): [True: 9.62k, False: 12.5k]
  ------------------
  113|  9.62k|                        break;
  114|  4.20k|                    }
  115|  22.1k|                }
  116|  22.1k|            }
  117|   226k|        }
  118|       |
  119|  1.02M|        return FloatRegisterID::None;
  120|  1.03M|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   953k|    {
  124|   953k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 187k, False: 766k]
  ------------------
  125|   187k|        {
  126|   187k|            char c1 = token[0];
  127|   187k|            char c2 = token[1];
  128|   187k|            char c3 = token[2];
  129|   187k|            char c4 = token[3];
  130|       |
  131|   187k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 9.63k, False: 177k]
  |  Branch (131:34): [True: 6.59k, False: 170k]
  |  Branch (131:49): [True: 6.48k, False: 9.75k]
  |  Branch (131:62): [True: 1.35k, False: 8.40k]
  ------------------
  132|   187k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 2.54k, False: 5.28k]
  |  Branch (132:34): [True: 3.74k, False: 1.54k]
  |  Branch (132:49): [True: 910, False: 5.38k]
  |  Branch (132:62): [True: 2.84k, False: 2.53k]
  ------------------
  133|   187k|        }
  134|       |
  135|   766k|        return false;
  136|   953k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  1.20M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   202k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  3.25M|    {
   41|  3.25M|        return m_Type;
   42|  3.25M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  1.28M|    {
   51|  1.28M|        return m_LineNumber;
   52|  1.28M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  1.22M|    {
   56|  1.22M|        return m_Column;
   57|  1.22M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  1.96M|    {
   66|  1.96M|        return m_Text;
   67|  1.96M|    }
_ZNK3dlx5Token7HasHintEv:
   79|  68.4k|    {
   80|  68.4k|        return m_HasHint;
   81|  68.4k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  73.1k|    {
   85|  73.1k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  73.1k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  73.1k|                   m_Type == Type::ImmediateInteger);
   88|  73.1k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  73.1k|        return m_Hint;
   91|  73.1k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  7.61k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  7.61k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  7.61k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  4.53k|    {
   51|  4.53k|        auto it = m_Iterator;
   52|  18.1k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 13.5k, False: 4.52k]
  ------------------
   53|  13.5k|        {
   54|  13.5k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 11, False: 13.5k]
  ------------------
   55|     11|            {
   56|     11|                return false;
   57|     11|            }
   58|  13.5k|        }
   59|       |
   60|  4.52k|        return true;
   61|  4.53k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  1.40M|    {
   65|  1.40M|        return m_Iterator != m_Tokens.end();
   66|  1.40M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  1.40M|    {
   70|  1.40M|        return m_Iterator == m_Tokens.end();
   71|  1.40M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  1.40M|    {
   85|  1.40M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  1.40M|        return *m_Iterator++;
   91|  1.40M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  4.52k|    {
  164|  4.52k|        return m_Iterator;
  165|  4.52k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  1.37k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  1.37k|        m_Iterator = it;
  179|  1.37k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  2.15k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  2.15k|        return m_Tokens.rbegin();
  224|  2.15k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  29.7k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  29.7k|        return m_Tokens.rend();
  233|  29.7k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  7.61k|    {
   63|  7.61k|        TokenStream tokens;
   64|       |
   65|  7.61k|        std::string_view current_token;
   66|       |
   67|  7.61k|        phi::u64 current_line_number{1u};
   68|  7.61k|        phi::u64 current_column{1u};
   69|  7.61k|        phi::u64 token_begin{0u};
   70|       |
   71|  7.61k|        phi::boolean parsing_comment{false};
   72|       |
   73|  3.54M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 3.53M, False: 7.61k]
  ------------------
   74|  3.53M|        {
   75|  3.53M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  3.53M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 126k, False: 3.40M]
  ------------------
   78|   126k|            {
   79|   126k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 24.2k, False: 102k]
  ------------------
   80|  24.2k|                {
   81|       |                    // Skip empty lines
   82|  24.2k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  24.2k|                                        current_line_number, current_column);
   84|       |
   85|  24.2k|                    parsing_comment = false;
   86|  24.2k|                    current_line_number += 1u;
   87|  24.2k|                    current_column = 1u;
   88|  24.2k|                    continue;
   89|  24.2k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   102k|                tokens.emplace_back(
   93|   102k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   102k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   102k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   102k|                                    current_line_number, current_column);
   98|       |
   99|   102k|                current_token   = std::string_view{};
  100|   102k|                parsing_comment = false;
  101|   102k|                current_line_number += 1u;
  102|   102k|                current_column = 0u;
  103|   102k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  3.40M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 2.85k, False: 3.40M]
  |  Branch (105:34): [True: 6.62k, False: 3.39M]
  ------------------
  106|  9.48k|            {
  107|  9.48k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 1.74k, False: 7.73k]
  ------------------
  108|  1.74k|                {
  109|  1.74k|                    token_begin = i;
  110|  1.74k|                }
  111|  7.73k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 6.81k, False: 917]
  ------------------
  112|  6.81k|                {
  113|  6.81k|                    tokens.emplace_back(ParseToken(
  114|  6.81k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  6.81k|                            current_line_number, current_column - current_token.length()));
  116|  6.81k|                    token_begin   = i;
  117|  6.81k|                    current_token = std::string_view{};
  118|  6.81k|                }
  119|       |
  120|  9.48k|                parsing_comment = true;
  121|  9.48k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  9.48k|            }
  123|  3.39M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 25.7k, False: 3.37M]
  ------------------
  124|  25.7k|            {
  125|       |                // simply append the character
  126|  25.7k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|  25.7k|            }
  128|  3.37M|            else
  129|  3.37M|            {
  130|       |                // Not parsing a comment
  131|  3.37M|                switch (c)
  132|  3.37M|                {
  133|  57.0k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 57.0k, False: 3.31M]
  ------------------
  134|  94.2k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 37.1k, False: 3.33M]
  ------------------
  135|   141k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 47.4k, False: 3.32M]
  ------------------
  136|   141k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 42.9k, False: 98.7k]
  ------------------
  137|  42.9k|                        {
  138|  42.9k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  42.9k|                            continue;
  141|  42.9k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|  98.7k|                        tokens.emplace_back(ParseToken(
  145|  98.7k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|  98.7k|                                current_line_number, current_column - current_token.length()));
  147|  98.7k|                        current_token = std::string_view{};
  148|  98.7k|                        break;
  149|   362k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 362k, False: 3.00M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|   362k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 310k, False: 52.6k]
  ------------------
  152|   310k|                        {
  153|   310k|                            current_token =
  154|   310k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|   310k|                            tokens.emplace_back(ParseToken(
  156|   310k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|   310k|                                    current_line_number,
  158|   310k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|   310k|                            current_token = std::string_view{};
  161|   310k|                        }
  162|  52.6k|                        else
  163|  52.6k|                        {
  164|       |                            // Orphan colon
  165|  52.6k|                            token_begin = i;
  166|       |
  167|  52.6k|                            tokens.emplace_back(Token::Type::Colon,
  168|  52.6k|                                                source.substr(token_begin.unsafe(), 1),
  169|  52.6k|                                                current_line_number, current_column);
  170|  52.6k|                        }
  171|   362k|                        break;
  172|   231k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 231k, False: 3.14M]
  ------------------
  173|   430k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 199k, False: 3.17M]
  ------------------
  174|   441k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 10.9k, False: 3.36M]
  ------------------
  175|   441k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 261k, False: 179k]
  ------------------
  176|   261k|                        {
  177|   261k|                            tokens.emplace_back(ParseToken(
  178|   261k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   261k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   261k|                            current_token = std::string_view{};
  182|   261k|                        }
  183|       |
  184|   441k|                        Token::Type type;
  185|   441k|                        switch (c)
  186|   441k|                        {
  187|   231k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 231k, False: 210k]
  ------------------
  188|   231k|                                type = Token::Type::Comma;
  189|   231k|                                break;
  190|   199k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 199k, False: 242k]
  ------------------
  191|   199k|                                type = Token::Type::OpenBracket;
  192|   199k|                                break;
  193|  10.9k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 10.9k, False: 430k]
  ------------------
  194|  10.9k|                                type = Token::Type::ClosingBracket;
  195|  10.9k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 441k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|   441k|#endif
  201|   441k|                        }
  202|       |
  203|   441k|                        token_begin = i;
  204|       |
  205|   441k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|   441k|                                            current_line_number, current_column);
  207|   441k|                        break;
  208|       |
  209|  2.42M|                    default:
  ------------------
  |  Branch (209:21): [True: 2.42M, False: 945k]
  ------------------
  210|  2.42M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 776k, False: 1.64M]
  ------------------
  211|   776k|                        {
  212|   776k|                            token_begin = i;
  213|   776k|                        }
  214|       |
  215|       |                        // simply append the character
  216|  2.42M|                        current_token =
  217|  2.42M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  3.37M|                }
  219|  3.37M|            }
  220|       |
  221|  3.46M|            current_column += 1u;
  222|  3.46M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  7.61k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 5.37k, False: 2.23k]
  ------------------
  226|  5.37k|        {
  227|  5.37k|            tokens.emplace_back(
  228|  5.37k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  5.37k|                               current_line_number, current_column - current_token.length()));
  230|  5.37k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  7.61k|        tokens.finalize();
  234|       |
  235|  7.61k|        return tokens;
  236|  7.61k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   784k|    {
   11|   784k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 8.44k, False: 776k]
  |  Branch (11:35): [True: 6.37k, False: 2.06k]
  ------------------
   12|  6.37k|        {
   13|  6.37k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  6.37k|            if (number)
  ------------------
  |  Branch (15:17): [True: 1.71k, False: 4.66k]
  ------------------
   16|  1.71k|            {
   17|  1.71k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  1.71k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  1.71k|            }
   20|       |
   21|  4.66k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  6.37k|        }
   23|       |
   24|   778k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 2.55k, False: 775k]
  |  Branch (24:35): [True: 6.01k, False: 769k]
  ------------------
   25|  8.56k|        {
   26|  8.56k|            return {Token::Type::Comment, token, line_number, column};
   27|  8.56k|        }
   28|       |
   29|   769k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 17.1k, False: 752k]
  ------------------
   30|  17.1k|        {
   31|  17.1k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  17.1k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  17.1k|        }
   34|       |
   35|   752k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 2.84k, False: 749k]
  ------------------
   36|  2.84k|        {
   37|  2.84k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  2.84k|        }
   39|       |
   40|   749k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 7.65k, False: 742k]
  ------------------
   41|  7.65k|        {
   42|  7.65k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  7.65k|                    static_cast<std::uint32_t>(id)};
   44|  7.65k|        }
   45|       |
   46|   742k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 12.4k, False: 729k]
  ------------------
   47|  12.4k|        {
   48|  12.4k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  12.4k|                    static_cast<std::uint32_t>(id)};
   50|  12.4k|        }
   51|       |
   52|   729k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 163k, False: 566k]
  ------------------
   53|   163k|        {
   54|   163k|            return {Token::Type::OpCode, token, line_number, column,
   55|   163k|                    static_cast<std::uint32_t>(opcode)};
   56|   163k|        }
   57|       |
   58|   566k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   729k|    }

LLVMFuzzerTestOneInput:
    8|  7.61k|{
    9|  7.61k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   10|       |
   11|       |    // Parse it
   12|  7.61k|    dlx::Parser::Parse(source);
   13|       |
   14|  7.61k|    return 0;
   15|  7.61k|}


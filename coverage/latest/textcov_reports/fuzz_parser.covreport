_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  173|  63.5k|        {
  174|  63.5k|            PHI_ASSERT(index < 3u);
  175|       |
  176|  63.5k|            switch (index.unsafe())
  177|  63.5k|            {
  178|  29.1k|                case 0:
  ------------------
  |  Branch (178:17): [True: 29.1k, False: 34.4k]
  ------------------
  179|  29.1k|                    return m_Arg1Type;
  180|       |
  181|  17.4k|                case 1:
  ------------------
  |  Branch (181:17): [True: 17.4k, False: 46.1k]
  ------------------
  182|  17.4k|                    return m_Arg2Type;
  183|       |
  184|  17.0k|                case 2:
  ------------------
  |  Branch (184:17): [True: 17.0k, False: 46.5k]
  ------------------
  185|  17.0k|                    return m_Arg3Type;
  186|       |
  187|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  188|      0|                default:
  ------------------
  |  Branch (188:17): [True: 0, False: 63.5k]
  ------------------
  189|      0|                    PHI_ASSERT_NOT_REACHED();
  190|      0|                    return m_Arg1Type;
  191|  63.5k|#endif
  192|  63.5k|            }
  193|  63.5k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  199|  16.6k|        {
  200|  16.6k|            phi::u8 number_of_argument_required = static_cast<phi::uint8_t>(0u);
  201|       |
  202|       |            // Count the number of argument we need
  203|  16.6k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (203:17): [True: 16.3k, False: 379]
  ------------------
  204|  16.3k|            {
  205|  16.3k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  206|  16.3k|            }
  207|  16.6k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (207:17): [True: 7.18k, False: 9.51k]
  ------------------
  208|  7.18k|            {
  209|  7.18k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  210|  7.18k|            }
  211|  16.6k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (211:17): [True: 4.09k, False: 12.6k]
  ------------------
  212|  4.09k|            {
  213|  4.09k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  214|  4.09k|            }
  215|       |
  216|  16.6k|            return number_of_argument_required;
  217|  16.6k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  225|  16.6k|        {
  226|  16.6k|            return m_Executor;
  227|  16.6k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  10.7k|    {
   38|  10.7k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  10.7k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  10.7k|                                         static_cast<underlying_t>(rhs));
   42|  10.7k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  10.7k|    {
   55|  10.7k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  10.7k|        return static_cast<underlying_t>(type & test) != 0;
   58|  10.7k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  46.1k|    {
   31|  46.1k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 697, False: 45.4k]
  ------------------
   32|    697|        {
   33|    697|            return true;
   34|    697|        }
   35|       |
   36|  45.4k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 579, False: 44.8k]
  ------------------
   37|    579|        {
   38|    579|            return true;
   39|    579|        }
   40|       |
   41|  44.8k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 18.8k, False: 25.9k]
  ------------------
   42|  18.8k|        {
   43|  18.8k|            return true;
   44|  18.8k|        }
   45|       |
   46|  25.9k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 200, False: 25.7k]
  ------------------
   47|    200|        {
   48|    200|            return true;
   49|    200|        }
   50|       |
   51|  25.7k|        return false;
   52|  25.9k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  25.7k|    {
   56|  25.7k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 25.7k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  25.7k|        const char first_char = token.at(0u);
   62|       |
   63|  25.7k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 5.13k, False: 20.6k]
  ------------------
   64|  5.13k|        {
   65|  5.13k|            return phi::is_alpha(first_char);
   66|  5.13k|        }
   67|       |
   68|  20.6k|        phi::boolean just_under_scores = (first_char == '_');
   69|  20.6k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 2.37k, False: 18.2k]
  |  Branch (69:13): [True: 1.92k, False: 18.7k]
  |  Branch (69:43): [True: 1.92k, False: 453]
  ------------------
   70|  1.92k|        {
   71|  1.92k|            return false;
   72|  1.92k|        }
   73|       |
   74|  66.2k|        for (phi::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 55.8k, False: 10.3k]
  ------------------
   75|  55.8k|        {
   76|  55.8k|            const char c{token.at(index)};
   77|       |
   78|  55.8k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 46.9k, False: 8.87k]
  ------------------
   79|  46.9k|            {
   80|  46.9k|                just_under_scores = false;
   81|  46.9k|            }
   82|  8.87k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 551, False: 8.32k]
  ------------------
   83|    551|            {
   84|    551|                continue;
   85|    551|            }
   86|  8.32k|            else
   87|  8.32k|            {
   88|  8.32k|                return false;
   89|  8.32k|            }
   90|  55.8k|        }
   91|       |
   92|  10.3k|        return !just_under_scores;
   93|  18.7k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   98|   111k|    {
   99|   111k|        if (token.is_empty())
  ------------------
  |  Branch (99:13): [True: 0, False: 111k]
  ------------------
  100|      0|        {
  101|      0|            return {};
  102|      0|        }
  103|       |
  104|   111k|        if (token.length() == 1u)
  ------------------
  |  Branch (104:13): [True: 19.8k, False: 92.0k]
  ------------------
  105|  19.8k|        {
  106|  19.8k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (106:17): [True: 2.86k, False: 16.9k]
  ------------------
  107|  2.86k|            {
  108|  2.86k|                return static_cast<phi::int16_t>(token.at(0u) - '0');
  109|  2.86k|            }
  110|       |
  111|  16.9k|            return {};
  112|  19.8k|        }
  113|       |
  114|       |        // Disallow trailing separators
  115|  92.0k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (115:13): [True: 421, False: 91.6k]
  ------------------
  116|    421|        {
  117|    421|            return {};
  118|    421|        }
  119|       |
  120|  91.6k|        phi::int32_t number{0};
  121|  91.6k|        phi::boolean is_negative{false};
  122|  91.6k|        phi::boolean starts_with_zero{false};
  123|  91.6k|        phi::boolean parsing_binary{false};
  124|  91.6k|        phi::boolean parsing_octal{false};
  125|  91.6k|        phi::boolean parsing_hexadecimal{false};
  126|  91.6k|        phi::boolean parsed_something{false};
  127|  91.6k|        phi::boolean parsed_separator{false};
  128|       |
  129|       |        // TODO: Move x'th character checks out of the for loop
  130|       |
  131|   109k|        for (phi::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (131:37): [True: 106k, False: 2.71k]
  ------------------
  132|   106k|        {
  133|   106k|            const char c{token.at(index)};
  134|       |
  135|       |            // First character
  136|   106k|            if (index == 0u)
  ------------------
  |  Branch (136:17): [True: 91.6k, False: 15.3k]
  ------------------
  137|  91.6k|            {
  138|  91.6k|                if (c == '+')
  ------------------
  |  Branch (138:21): [True: 204, False: 91.4k]
  ------------------
  139|    204|                {
  140|    204|                    continue;
  141|    204|                }
  142|       |
  143|  91.4k|                if (c == '-')
  ------------------
  |  Branch (143:21): [True: 855, False: 90.5k]
  ------------------
  144|    855|                {
  145|    855|                    is_negative = true;
  146|    855|                    continue;
  147|    855|                }
  148|       |
  149|  90.5k|                if (c == '0')
  ------------------
  |  Branch (149:21): [True: 1.79k, False: 88.7k]
  ------------------
  150|  1.79k|                {
  151|  1.79k|                    starts_with_zero = true;
  152|  1.79k|                    continue;
  153|  1.79k|                }
  154|       |
  155|  88.7k|                if (c == '\'')
  ------------------
  |  Branch (155:21): [True: 194, False: 88.5k]
  ------------------
  156|    194|                {
  157|    194|                    return {};
  158|    194|                }
  159|  88.7k|            }
  160|       |
  161|       |            // Second character
  162|   103k|            if (index == 1u)
  ------------------
  |  Branch (162:17): [True: 5.08k, False: 98.8k]
  ------------------
  163|  5.08k|            {
  164|  5.08k|                if (starts_with_zero)
  ------------------
  |  Branch (164:21): [True: 1.79k, False: 3.28k]
  ------------------
  165|  1.79k|                {
  166|       |                    // Binary
  167|  1.79k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (167:25): [True: 204, False: 1.58k]
  |  Branch (167:37): [True: 194, False: 1.39k]
  ------------------
  168|    398|                    {
  169|    398|                        parsing_binary = true;
  170|    398|                        continue;
  171|    398|                    }
  172|       |
  173|       |                    // Hexadecimal
  174|  1.39k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (174:25): [True: 494, False: 901]
  |  Branch (174:37): [True: 199, False: 702]
  ------------------
  175|    693|                    {
  176|    693|                        parsing_hexadecimal = true;
  177|    693|                        continue;
  178|    693|                    }
  179|       |
  180|       |                    // Octal
  181|    702|                    parsing_octal = true;
  182|    702|                }
  183|  5.08k|            }
  184|       |
  185|       |            // Handle separators
  186|   102k|            if (c == '\'')
  ------------------
  |  Branch (186:17): [True: 438, False: 102k]
  ------------------
  187|    438|            {
  188|    438|                if (parsed_separator)
  ------------------
  |  Branch (188:21): [True: 194, False: 244]
  ------------------
  189|    194|                {
  190|    194|                    return {};
  191|    194|                }
  192|       |
  193|    244|                parsed_separator = true;
  194|    244|                continue;
  195|    438|            }
  196|       |
  197|       |            // Check for over/underflow
  198|   102k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (198:17): [True: 2.88k, False: 99.5k]
  |  Branch (198:32): [True: 194, False: 2.69k]
  ------------------
  199|    194|            {
  200|       |                // Would underflow
  201|    194|                return {};
  202|    194|            }
  203|   102k|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (203:17): [True: 99.5k, False: 2.69k]
  |  Branch (203:17): [True: 257, False: 101k]
  |  Branch (203:33): [True: 257, False: 99.2k]
  ------------------
  204|    257|            {
  205|       |                // Would overflow
  206|    257|                return {};
  207|    257|            }
  208|       |
  209|   101k|            parsed_separator = false;
  210|   101k|            parsed_something = true;
  211|       |
  212|   101k|            if (parsing_binary)
  ------------------
  |  Branch (212:17): [True: 582, False: 101k]
  ------------------
  213|    582|            {
  214|    582|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (214:21): [True: 194, False: 388]
  ------------------
  215|    194|                {
  216|    194|                    return {};
  217|    194|                }
  218|       |
  219|    388|                number <<= 1;
  220|    388|                number |= (c - '0');
  221|    388|            }
  222|   101k|            else if (parsing_octal)
  ------------------
  |  Branch (222:22): [True: 900, False: 100k]
  ------------------
  223|    900|            {
  224|    900|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (224:21): [True: 534, False: 366]
  ------------------
  225|    534|                {
  226|    534|                    return {};
  227|    534|                }
  228|       |
  229|    366|                number <<= 3;
  230|    366|                number |= (c - '0');
  231|    366|            }
  232|   100k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (232:22): [True: 991, False: 99.4k]
  ------------------
  233|    991|            {
  234|    991|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (234:21): [True: 397, False: 594]
  ------------------
  235|    397|                {
  236|    397|                    return {};
  237|    397|                }
  238|       |
  239|    594|                number <<= 4;
  240|    594|                number |= phi::hex_digit_value(c).unsafe();
  241|    594|            }
  242|  99.4k|            else
  243|  99.4k|            {
  244|  99.4k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (244:21): [True: 86.7k, False: 12.7k]
  ------------------
  245|  86.7k|                {
  246|  86.7k|                    return {};
  247|  86.7k|                }
  248|       |
  249|       |                // Disallow leading zeros
  250|  12.7k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (250:21): [True: 3.05k, False: 9.68k]
  |  Branch (250:36): [True: 206, False: 2.84k]
  ------------------
  251|    206|                {
  252|    206|                    return {};
  253|    206|                }
  254|       |
  255|  12.5k|                number *= 10;
  256|  12.5k|                number += (c - '0');
  257|  12.5k|            }
  258|   101k|        }
  259|       |
  260|  2.71k|        if (parsed_something)
  ------------------
  |  Branch (260:13): [True: 2.44k, False: 269]
  ------------------
  261|  2.44k|        {
  262|       |            // Check for over/underflow
  263|  2.44k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (263:17): [True: 388, False: 2.05k]
  |  Branch (263:32): [True: 194, False: 194]
  ------------------
  264|    194|            {
  265|       |                // Would underflow
  266|    194|                return {};
  267|    194|            }
  268|  2.24k|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (268:17): [True: 2.05k, False: 194]
  |  Branch (268:17): [True: 1.59k, False: 655]
  |  Branch (268:33): [True: 1.59k, False: 461]
  ------------------
  269|  1.59k|            {
  270|       |                // Would overflow
  271|  1.59k|                return {};
  272|  1.59k|            }
  273|       |
  274|    655|            if (is_negative)
  ------------------
  |  Branch (274:17): [True: 194, False: 461]
  ------------------
  275|    194|            {
  276|    194|                return static_cast<phi::int16_t>(-number);
  277|    194|            }
  278|       |
  279|    461|            return static_cast<phi::int16_t>(number);
  280|    655|        }
  281|       |
  282|    269|        return {};
  283|  2.71k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  7.13k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finalized);
   61|       |#endif
   62|       |
   63|  7.13k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 19.2k, False: 0]
  ------------------
   64|  19.2k|            {
   65|  19.2k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 7.13k, False: 12.1k]
  ------------------
   66|  7.13k|                {
   67|  7.13k|                    return &token;
   68|  7.13k|                }
   69|  19.2k|            }
   70|       |
   71|      0|            return nullptr;
   72|  7.13k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  32.8k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  32.8k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  32.8k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   112k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|   112k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   112k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  40.1k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  40.1k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  40.1k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   18|  16.6k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   23|  3.19k|    {
   24|  3.19k|        PHI_ASSERT(argument_number < 3u);
   25|       |
   26|  3.19k|        switch (argument_number.unsafe())
   27|  3.19k|        {
   28|  2.56k|            case 0u:
  ------------------
  |  Branch (28:13): [True: 2.56k, False: 629]
  ------------------
   29|  2.56k|                m_Arg1 = argument;
   30|  2.56k|                break;
   31|    335|            case 1u:
  ------------------
  |  Branch (31:13): [True: 335, False: 2.85k]
  ------------------
   32|    335|                m_Arg2 = argument;
   33|    335|                break;
   34|    294|            case 2u:
  ------------------
  |  Branch (34:13): [True: 294, False: 2.89k]
  ------------------
   35|    294|                m_Arg3 = argument;
   36|    294|                break;
   37|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   38|      0|            default:
  ------------------
  |  Branch (38:13): [True: 0, False: 3.19k]
  ------------------
   39|      0|                PHI_ASSERT_NOT_REACHED();
   40|  3.19k|#endif
   41|  3.19k|        }
   42|  3.19k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   21|  53.2k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  166|    203|    {
  167|    203|        InstructionArgument arg;
  168|    203|        arg.m_Type                   = ArgumentType::IntRegister;
  169|    203|        arg.register_int.register_id = id;
  170|    203|        return arg;
  171|    203|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  174|    767|    {
  175|    767|        InstructionArgument arg;
  176|    767|        arg.m_Type                     = ArgumentType::FloatRegister;
  177|    767|        arg.register_float.register_id = id;
  178|    767|        return arg;
  179|    767|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  182|    207|    {
  183|    207|        InstructionArgument arg;
  184|    207|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  185|    207|        arg.immediate_value.signed_value = value;
  186|    207|        return arg;
  187|    207|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  191|    194|    {
  192|    194|        InstructionArgument arg;
  193|    194|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  194|    194|        arg.address_displacement.register_id  = id;
  195|    194|        arg.address_displacement.displacement = displacement;
  196|    194|        return arg;
  197|    194|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  200|  1.82k|    {
  201|  1.82k|        InstructionArgument arg;
  202|  1.82k|        arg.m_Type           = ArgumentType::Label;
  203|  1.82k|        arg.label.label_name = label_name;
  204|  1.82k|        return arg;
  205|  1.82k|    }

_ZN3dlx21LookUpInstructionInfoENS_6OpCodeE:
  449|  16.6k|    {
  450|  16.6k|        return instruction_table.at(static_cast<phi::size_t>(instruction));
  451|  16.6k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   22|   149k|    {
   23|   149k|        switch (token.length().unsafe())
   24|   149k|        {
   25|       |            // 1 character OpCodes
   26|  21.8k|            case 1: {
  ------------------
  |  Branch (26:13): [True: 21.8k, False: 127k]
  ------------------
   27|  21.8k|                const char c1 = token[0u];
   28|       |
   29|  21.8k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 9.73k, False: 12.1k]
  ------------------
   30|  9.73k|                {
   31|  9.73k|                    return OpCode::J;
   32|  9.73k|                }
   33|  12.1k|                break;
   34|  21.8k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  21.1k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 21.1k, False: 128k]
  ------------------
   38|  21.1k|                const char c1 = token[0u];
   39|  21.1k|                const char c2 = token[1u];
   40|       |
   41|  21.1k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 10.9k, False: 10.1k]
  ------------------
   42|  21.1k|                {
   43|    452|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 452, False: 20.6k]
  ------------------
   44|    792|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 340, False: 20.7k]
  ------------------
   45|    792|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 389, False: 403]
  ------------------
   46|    389|                        {
   47|    389|                            return OpCode::JR;
   48|    389|                        }
   49|    403|                        break;
   50|       |
   51|  1.68k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 1.68k, False: 19.4k]
  ------------------
   52|  2.98k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 1.30k, False: 19.8k]
  ------------------
   53|  2.98k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 553, False: 2.43k]
  ------------------
   54|  2.98k|                        {
   55|    331|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 331, False: 2.65k]
  ------------------
   56|    533|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 202, False: 2.78k]
  ------------------
   57|    533|                                return OpCode::LB;
   58|    214|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 214, False: 2.77k]
  ------------------
   59|    408|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 194, False: 2.79k]
  ------------------
   60|    408|                                return OpCode::LD;
   61|    194|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 194, False: 2.79k]
  ------------------
   62|    388|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 194, False: 2.79k]
  ------------------
   63|    388|                                return OpCode::LF;
   64|    196|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 196, False: 2.78k]
  ------------------
   65|    543|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 347, False: 2.63k]
  ------------------
   66|    543|                                return OpCode::LH;
   67|    361|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 361, False: 2.62k]
  ------------------
   68|    559|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 198, False: 2.78k]
  ------------------
   69|    559|                                return OpCode::LW;
   70|  2.98k|                        }
   71|    553|                        break;
   72|    553|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 402, False: 20.7k]
  ------------------
   73|  1.03k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 632, False: 20.4k]
  ------------------
   74|  1.03k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 434, False: 600]
  ------------------
   75|    434|                        {
   76|    434|                            return OpCode::OR;
   77|    434|                        }
   78|    600|                        break;
   79|  3.67k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 3.67k, False: 17.4k]
  ------------------
   80|  5.36k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 1.68k, False: 19.4k]
  ------------------
   81|  5.36k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 1.51k, False: 3.85k]
  ------------------
   82|  5.36k|                        {
   83|    256|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 256, False: 5.11k]
  ------------------
   84|    454|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 198, False: 5.16k]
  ------------------
   85|    454|                                return OpCode::SB;
   86|  1.56k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 1.56k, False: 3.80k]
  ------------------
   87|  1.78k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 216, False: 5.15k]
  ------------------
   88|  1.78k|                                return OpCode::SD;
   89|    194|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 194, False: 5.17k]
  ------------------
   90|    388|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 194, False: 5.17k]
  ------------------
   91|    388|                                return OpCode::SF;
   92|    197|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 197, False: 5.16k]
  ------------------
   93|    518|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 321, False: 5.04k]
  ------------------
   94|    518|                                return OpCode::SH;
   95|    196|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 196, False: 5.17k]
  ------------------
   96|    712|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 516, False: 4.85k]
  ------------------
   97|    712|                                return OpCode::SW;
   98|  5.36k|                        }
   99|  1.51k|                        break;
  100|  21.1k|                }
  101|  14.0k|                break;
  102|  21.1k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|  32.3k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 32.3k, False: 116k]
  ------------------
  106|  32.3k|                const char c1 = token[0u];
  107|  32.3k|                const char c2 = token[1u];
  108|  32.3k|                const char c3 = token[2u];
  109|       |
  110|  32.3k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 7.31k, False: 24.9k]
  ------------------
  111|  32.3k|                {
  112|  1.21k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 1.21k, False: 31.0k]
  ------------------
  113|  1.70k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 492, False: 31.8k]
  ------------------
  114|  1.70k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 611, False: 1.09k]
  |  Branch (114:29): [True: 409, False: 1.29k]
  |  Branch (114:45): [True: 409, False: 202]
  ------------------
  115|    409|                        {
  116|    409|                            return OpCode::ADD;
  117|    409|                        }
  118|  1.29k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 604, False: 689]
  |  Branch (118:34): [True: 395, False: 898]
  |  Branch (118:50): [True: 395, False: 209]
  ------------------
  119|    395|                        {
  120|    395|                            return OpCode::AND;
  121|    395|                        }
  122|    898|                        break;
  123|       |
  124|    898|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 369, False: 31.9k]
  ------------------
  125|  1.22k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 857, False: 31.4k]
  ------------------
  126|  1.22k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 795, False: 431]
  |  Branch (126:29): [True: 504, False: 722]
  |  Branch (126:45): [True: 504, False: 291]
  ------------------
  127|    504|                        {
  128|    504|                            return OpCode::DIV;
  129|    504|                        }
  130|    722|                        break;
  131|       |
  132|    722|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 345, False: 31.9k]
  ------------------
  133|  1.31k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 973, False: 31.3k]
  ------------------
  134|  1.31k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 1.10k, False: 210]
  ------------------
  135|  1.10k|                        {
  136|  1.10k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 388, False: 720]
  ------------------
  137|    388|                            {
  138|    388|                                return OpCode::EQD;
  139|    388|                            }
  140|    720|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 388, False: 332]
  ------------------
  141|    388|                            {
  142|    388|                                return OpCode::EQF;
  143|    388|                            }
  144|  1.10k|                        }
  145|    542|                        break;
  146|       |
  147|  1.96k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 1.96k, False: 30.3k]
  ------------------
  148|  2.52k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 556, False: 31.7k]
  ------------------
  149|  2.52k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 978, False: 1.54k]
  ------------------
  150|    978|                        {
  151|    978|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 389, False: 589]
  ------------------
  152|    389|                            {
  153|    389|                                return OpCode::GED;
  154|    389|                            }
  155|    589|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 388, False: 201]
  ------------------
  156|    388|                            {
  157|    388|                                return OpCode::GEF;
  158|    388|                            }
  159|    978|                        }
  160|  1.54k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 991, False: 554]
  ------------------
  161|    991|                        {
  162|    991|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 388, False: 603]
  ------------------
  163|    388|                            {
  164|    388|                                return OpCode::GTD;
  165|    388|                            }
  166|    603|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 388, False: 215]
  ------------------
  167|    388|                            {
  168|    388|                                return OpCode::GTF;
  169|    388|                            }
  170|    603|                        }
  171|    970|                        break;
  172|       |
  173|    970|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 428, False: 31.8k]
  ------------------
  174|  1.04k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 613, False: 31.6k]
  ------------------
  175|  1.04k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 603, False: 438]
  |  Branch (175:29): [True: 390, False: 651]
  |  Branch (175:45): [True: 390, False: 213]
  ------------------
  176|    390|                        {
  177|    390|                            return OpCode::JAL;
  178|    390|                        }
  179|    651|                        break;
  180|       |
  181|  1.83k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 1.83k, False: 30.4k]
  ------------------
  182|  4.71k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 2.88k, False: 29.4k]
  ------------------
  183|  4.71k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 261, False: 4.45k]
  ------------------
  184|  4.71k|                        {
  185|    418|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 418, False: 4.29k]
  ------------------
  186|    695|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 277, False: 4.43k]
  ------------------
  187|    695|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 388, False: 307]
  ------------------
  188|    388|                                {
  189|    388|                                    return OpCode::LBU;
  190|    388|                                }
  191|    307|                                break;
  192|       |
  193|    613|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 613, False: 4.10k]
  ------------------
  194|  1.02k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 412, False: 4.30k]
  ------------------
  195|  1.02k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 388, False: 637]
  ------------------
  196|    388|                                {
  197|    388|                                    return OpCode::LED;
  198|    388|                                }
  199|    637|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 388, False: 249]
  ------------------
  200|    388|                                {
  201|    388|                                    return OpCode::LEF;
  202|    388|                                }
  203|    249|                                break;
  204|       |
  205|    249|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 238, False: 4.47k]
  ------------------
  206|  1.01k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 773, False: 3.94k]
  ------------------
  207|  1.01k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 388, False: 623]
  ------------------
  208|    388|                                {
  209|    388|                                    return OpCode::LHI;
  210|    388|                                }
  211|    623|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 388, False: 235]
  ------------------
  212|    388|                                {
  213|    388|                                    return OpCode::LHU;
  214|    388|                                }
  215|    235|                                break;
  216|       |
  217|    592|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 592, False: 4.12k]
  ------------------
  218|    976|                            case 't':
  ------------------
  |  Branch (218:29): [True: 384, False: 4.33k]
  ------------------
  219|    976|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 388, False: 588]
  ------------------
  220|    388|                                {
  221|    388|                                    return OpCode::LTD;
  222|    388|                                }
  223|    588|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 388, False: 200]
  ------------------
  224|    388|                                {
  225|    388|                                    return OpCode::LTF;
  226|    388|                                }
  227|    200|                                break;
  228|       |
  229|    224|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 224, False: 4.49k]
  ------------------
  230|    747|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 523, False: 4.19k]
  ------------------
  231|    747|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 388, False: 359]
  ------------------
  232|    388|                                {
  233|    388|                                    return OpCode::LWU;
  234|    388|                                }
  235|    359|                                break;
  236|  4.71k|                        }
  237|  1.61k|                        break;
  238|       |
  239|  1.61k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 486, False: 31.8k]
  ------------------
  240|  1.81k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 1.33k, False: 30.9k]
  ------------------
  241|  1.81k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 998, False: 820]
  ------------------
  242|    998|                        {
  243|    998|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 388, False: 610]
  ------------------
  244|    388|                            {
  245|    388|                                return OpCode::NED;
  246|    388|                            }
  247|    610|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 388, False: 222]
  ------------------
  248|    388|                            {
  249|    388|                                return OpCode::NEF;
  250|    388|                            }
  251|    998|                        }
  252|    820|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 591, False: 229]
  |  Branch (252:34): [True: 388, False: 432]
  |  Branch (252:50): [True: 388, False: 203]
  ------------------
  253|    388|                        {
  254|    388|                            return OpCode::NOP;
  255|    388|                        }
  256|       |
  257|    654|                        break;
  258|       |
  259|    654|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 279, False: 32.0k]
  ------------------
  260|    881|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 602, False: 31.7k]
  ------------------
  261|    881|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 591, False: 290]
  |  Branch (261:29): [True: 388, False: 493]
  |  Branch (261:45): [True: 388, False: 203]
  ------------------
  262|    388|                        {
  263|    388|                            return OpCode::ORI;
  264|    388|                        }
  265|    493|                        break;
  266|       |
  267|  3.92k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 3.92k, False: 28.3k]
  ------------------
  268|  9.01k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 5.08k, False: 27.2k]
  ------------------
  269|  9.01k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 670, False: 8.34k]
  ------------------
  270|  9.01k|                        {
  271|    342|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 342, False: 8.66k]
  ------------------
  272|    582|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 240, False: 8.77k]
  ------------------
  273|    582|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 388, False: 194]
  ------------------
  274|    388|                                {
  275|    388|                                    return OpCode::SBU;
  276|    388|                                }
  277|    194|                                break;
  278|       |
  279|    387|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 387, False: 8.62k]
  ------------------
  280|    592|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 205, False: 8.80k]
  ------------------
  281|    592|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 393, False: 199]
  ------------------
  282|    393|                                {
  283|    393|                                    return OpCode::SEQ;
  284|    393|                                }
  285|    199|                                break;
  286|       |
  287|    575|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 575, False: 8.43k]
  ------------------
  288|  1.15k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 584, False: 8.42k]
  ------------------
  289|  1.15k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 409, False: 750]
  ------------------
  290|    409|                                {
  291|    409|                                    return OpCode::SGE;
  292|    409|                                }
  293|    750|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 518, False: 232]
  ------------------
  294|    518|                                {
  295|    518|                                    return OpCode::SGT;
  296|    518|                                }
  297|    232|                                break;
  298|       |
  299|    237|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 237, False: 8.77k]
  ------------------
  300|    589|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 352, False: 8.65k]
  ------------------
  301|    589|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 388, False: 201]
  ------------------
  302|    388|                                {
  303|    388|                                    return OpCode::SHU;
  304|    388|                                }
  305|    201|                                break;
  306|       |
  307|    567|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 567, False: 8.44k]
  ------------------
  308|  1.94k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 1.37k, False: 7.63k]
  ------------------
  309|  1.94k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 239, False: 1.70k]
  ------------------
  310|  1.94k|                                {
  311|    225|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 225, False: 1.72k]
  ------------------
  312|    425|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 200, False: 1.74k]
  ------------------
  313|    425|                                        return OpCode::SLA;
  314|       |
  315|    195|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 195, False: 1.75k]
  ------------------
  316|    392|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 197, False: 1.74k]
  ------------------
  317|    392|                                        return OpCode::SLE;
  318|       |
  319|    216|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 216, False: 1.72k]
  ------------------
  320|    466|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 250, False: 1.69k]
  ------------------
  321|    466|                                        return OpCode::SLL;
  322|       |
  323|    220|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 220, False: 1.72k]
  ------------------
  324|    423|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 203, False: 1.74k]
  ------------------
  325|    423|                                        return OpCode::SLT;
  326|  1.94k|                                }
  327|    239|                                break;
  328|       |
  329|    348|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 348, False: 8.66k]
  ------------------
  330|    788|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 440, False: 8.57k]
  ------------------
  331|    788|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 389, False: 399]
  ------------------
  332|    389|                                {
  333|    389|                                    return OpCode::SNE;
  334|    389|                                }
  335|    399|                                break;
  336|       |
  337|    770|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 770, False: 8.24k]
  ------------------
  338|  1.28k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 511, False: 8.50k]
  ------------------
  339|  1.28k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 544, False: 737]
  ------------------
  340|    544|                                {
  341|    544|                                    return OpCode::SRA;
  342|    544|                                }
  343|    737|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 510, False: 227]
  ------------------
  344|    510|                                {
  345|    510|                                    return OpCode::SRL;
  346|    510|                                }
  347|    227|                                break;
  348|       |
  349|    377|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 377, False: 8.63k]
  ------------------
  350|    625|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 248, False: 8.76k]
  ------------------
  351|    625|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 389, False: 236]
  ------------------
  352|    389|                                {
  353|    389|                                    return OpCode::SUB;
  354|    389|                                }
  355|    236|                                break;
  356|       |
  357|    236|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 195, False: 8.81k]
  ------------------
  358|    780|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 585, False: 8.42k]
  ------------------
  359|    780|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 388, False: 392]
  ------------------
  360|    388|                                {
  361|    388|                                    return OpCode::SWU;
  362|    388|                                }
  363|    392|                                break;
  364|  9.01k|                        }
  365|       |
  366|  3.41k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 427, False: 31.8k]
  ------------------
  367|  3.74k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 326, False: 31.9k]
  ------------------
  368|  3.74k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 719, False: 3.02k]
  |  Branch (368:29): [True: 509, False: 3.23k]
  |  Branch (368:45): [True: 509, False: 210]
  ------------------
  369|    509|                        {
  370|    509|                            return OpCode::XOR;
  371|    509|                        }
  372|  3.23k|                        break;
  373|  32.3k|                }
  374|  17.0k|                break;
  375|  32.3k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|  36.0k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 36.0k, False: 113k]
  ------------------
  379|  36.0k|                const char c1 = token[0u];
  380|  36.0k|                const char c2 = token[1u];
  381|  36.0k|                const char c3 = token[2u];
  382|  36.0k|                const char c4 = token[3u];
  383|       |
  384|  36.0k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 4.92k, False: 31.1k]
  ------------------
  385|  36.0k|                {
  386|  2.42k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 2.42k, False: 33.6k]
  ------------------
  387|  4.18k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 1.75k, False: 34.3k]
  ------------------
  388|  4.18k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 225, False: 3.95k]
  ------------------
  389|  4.18k|                        {
  390|  1.34k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 1.34k, False: 2.83k]
  ------------------
  391|  2.96k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 1.61k, False: 2.56k]
  ------------------
  392|  2.96k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 2.75k, False: 205]
  ------------------
  393|  2.75k|                                {
  394|  2.75k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 199, False: 2.55k]
  ------------------
  395|  2.75k|                                    {
  396|    897|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 897, False: 1.86k]
  ------------------
  397|  1.10k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 204, False: 2.55k]
  ------------------
  398|  1.10k|                                            return OpCode::ADDD;
  399|       |
  400|    194|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 194, False: 2.56k]
  ------------------
  401|    391|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 197, False: 2.56k]
  ------------------
  402|    391|                                            return OpCode::ADDF;
  403|       |
  404|    479|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 479, False: 2.27k]
  ------------------
  405|    673|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 194, False: 2.56k]
  ------------------
  406|    673|                                            return OpCode::ADDI;
  407|       |
  408|    197|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 197, False: 2.56k]
  ------------------
  409|    393|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 196, False: 2.56k]
  ------------------
  410|    393|                                            return OpCode::ADDU;
  411|  2.75k|                                    }
  412|  2.75k|                                }
  413|    404|                                break;
  414|       |
  415|    404|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 198, False: 3.98k]
  ------------------
  416|    994|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 796, False: 3.38k]
  ------------------
  417|    994|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 789, False: 205]
  |  Branch (417:37): [True: 389, False: 605]
  |  Branch (417:53): [True: 389, False: 400]
  ------------------
  418|    389|                                {
  419|    389|                                    return OpCode::ANDI;
  420|    389|                                }
  421|       |
  422|    605|                                break;
  423|  4.18k|                        }
  424|  1.23k|                        break;
  425|       |
  426|  1.31k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 1.31k, False: 34.7k]
  ------------------
  427|  3.26k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 1.95k, False: 34.1k]
  ------------------
  428|  3.26k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 200, False: 3.06k]
  ------------------
  429|  3.26k|                        {
  430|    385|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 385, False: 2.87k]
  ------------------
  431|    777|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 392, False: 2.86k]
  ------------------
  432|    777|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 583, False: 194]
  |  Branch (432:37): [True: 388, False: 389]
  |  Branch (432:53): [True: 388, False: 195]
  ------------------
  433|    388|                                {
  434|    388|                                    return OpCode::BEQZ;
  435|    388|                                }
  436|    389|                                break;
  437|       |
  438|    389|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 254, False: 3.00k]
  ------------------
  439|  1.16k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 913, False: 2.34k]
  ------------------
  440|  1.16k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 973, False: 194]
  ------------------
  441|    973|                                {
  442|    973|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 389, False: 584]
  ------------------
  443|    389|                                    {
  444|    389|                                        return OpCode::BFPF;
  445|    389|                                    }
  446|    584|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 388, False: 196]
  ------------------
  447|    388|                                    {
  448|    388|                                        return OpCode::BFPT;
  449|    388|                                    }
  450|    973|                                }
  451|    390|                                break;
  452|       |
  453|    390|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 203, False: 3.05k]
  ------------------
  454|  1.11k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 914, False: 2.34k]
  ------------------
  455|  1.11k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 779, False: 338]
  |  Branch (455:37): [True: 388, False: 729]
  |  Branch (455:53): [True: 388, False: 391]
  ------------------
  456|    388|                                {
  457|    388|                                    return OpCode::BNEZ;
  458|    388|                                }
  459|  3.26k|                        }
  460|  1.70k|                        break;
  461|       |
  462|  1.70k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 369, False: 35.7k]
  ------------------
  463|  2.39k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 2.02k, False: 34.0k]
  ------------------
  464|  2.39k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 2.16k, False: 229]
  |  Branch (464:29): [True: 1.82k, False: 565]
  |  Branch (464:45): [True: 1.82k, False: 336]
  ------------------
  465|  1.82k|                        {
  466|  1.82k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 203, False: 1.62k]
  ------------------
  467|  1.82k|                            {
  468|    194|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 194, False: 1.63k]
  ------------------
  469|    388|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 194, False: 1.63k]
  ------------------
  470|    388|                                    return OpCode::DIVD;
  471|       |
  472|    194|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 194, False: 1.63k]
  ------------------
  473|    389|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 195, False: 1.63k]
  ------------------
  474|    389|                                    return OpCode::DIVF;
  475|       |
  476|    194|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 194, False: 1.63k]
  ------------------
  477|    455|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 261, False: 1.56k]
  ------------------
  478|    455|                                    return OpCode::DIVI;
  479|       |
  480|    195|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 195, False: 1.63k]
  ------------------
  481|    391|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 196, False: 1.63k]
  ------------------
  482|    391|                                    return OpCode::DIVU;
  483|  1.82k|                            }
  484|  1.82k|                        }
  485|    768|                        break;
  486|       |
  487|    768|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 206, False: 35.8k]
  ------------------
  488|    979|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 773, False: 35.3k]
  ------------------
  489|    979|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 785, False: 194]
  |  Branch (489:29): [True: 388, False: 591]
  |  Branch (489:45): [True: 591, False: 194]
  |  Branch (489:61): [True: 388, False: 203]
  ------------------
  490|    388|                        {
  491|    388|                            return OpCode::HALT;
  492|    388|                        }
  493|    591|                        break;
  494|       |
  495|    591|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 203, False: 35.8k]
  ------------------
  496|  1.18k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 986, False: 35.1k]
  ------------------
  497|  1.18k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 988, False: 201]
  |  Branch (497:29): [True: 388, False: 801]
  |  Branch (497:45): [True: 776, False: 212]
  |  Branch (497:61): [True: 388, False: 388]
  ------------------
  498|    388|                        {
  499|    388|                            return OpCode::JALR;
  500|    388|                        }
  501|    801|                        break;
  502|       |
  503|    801|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 237, False: 35.8k]
  ------------------
  504|  2.24k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 2.00k, False: 34.0k]
  ------------------
  505|  2.24k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 1.27k, False: 969]
  |  Branch (505:29): [True: 1.04k, False: 1.19k]
  |  Branch (505:45): [True: 1.04k, False: 225]
  ------------------
  506|  1.04k|                        {
  507|  1.04k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 388, False: 661]
  ------------------
  508|    388|                            {
  509|    388|                                return OpCode::MOVD;
  510|    388|                            }
  511|    661|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 388, False: 273]
  ------------------
  512|    388|                            {
  513|    388|                                return OpCode::MOVF;
  514|    388|                            }
  515|  1.04k|                        }
  516|  1.19k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 883, False: 311]
  |  Branch (516:34): [True: 402, False: 792]
  |  Branch (516:50): [True: 608, False: 275]
  |  Branch (516:66): [True: 402, False: 206]
  ------------------
  517|    402|                        {
  518|    402|                            return OpCode::MULT;
  519|    402|                        }
  520|  1.06k|                        break;
  521|       |
  522|  7.21k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 7.21k, False: 28.8k]
  ------------------
  523|  14.5k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 7.35k, False: 28.7k]
  ------------------
  524|  14.5k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 551, False: 14.0k]
  ------------------
  525|  14.5k|                        {
  526|  1.24k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 1.24k, False: 13.3k]
  ------------------
  527|  1.45k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 208, False: 14.3k]
  ------------------
  528|  1.45k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 1.25k, False: 202]
  ------------------
  529|  1.25k|                                {
  530|  1.25k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 392, False: 859]
  ------------------
  531|    392|                                    {
  532|    392|                                        return OpCode::SEQI;
  533|    392|                                    }
  534|    859|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 457, False: 402]
  ------------------
  535|    457|                                    {
  536|    457|                                        return OpCode::SEQU;
  537|    457|                                    }
  538|  1.25k|                                }
  539|    604|                                break;
  540|       |
  541|    843|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 843, False: 13.7k]
  ------------------
  542|  2.50k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 1.66k, False: 12.9k]
  ------------------
  543|  2.50k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 1.12k, False: 1.38k]
  ------------------
  544|  1.12k|                                {
  545|  1.12k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 388, False: 735]
  ------------------
  546|    388|                                    {
  547|    388|                                        return OpCode::SGEI;
  548|    388|                                    }
  549|    735|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 522, False: 213]
  ------------------
  550|    522|                                    {
  551|    522|                                        return OpCode::SGEU;
  552|    522|                                    }
  553|  1.12k|                                }
  554|  1.38k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 1.17k, False: 209]
  ------------------
  555|  1.17k|                                {
  556|  1.17k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 388, False: 785]
  ------------------
  557|    388|                                    {
  558|    388|                                        return OpCode::SGTI;
  559|    388|                                    }
  560|    785|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 516, False: 269]
  ------------------
  561|    516|                                    {
  562|    516|                                        return OpCode::SGTU;
  563|    516|                                    }
  564|  1.17k|                                }
  565|    691|                                break;
  566|       |
  567|  1.03k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 1.03k, False: 13.5k]
  ------------------
  568|  3.86k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 2.82k, False: 11.7k]
  ------------------
  569|  3.86k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 231, False: 3.63k]
  ------------------
  570|  3.86k|                                {
  571|    376|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 376, False: 3.48k]
  ------------------
  572|    661|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 285, False: 3.57k]
  ------------------
  573|    661|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 388, False: 273]
  ------------------
  574|    388|                                        {
  575|    388|                                            return OpCode::SLAI;
  576|    388|                                        }
  577|    273|                                        break;
  578|       |
  579|    765|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 765, False: 3.09k]
  ------------------
  580|  1.02k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 261, False: 3.60k]
  ------------------
  581|  1.02k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 388, False: 638]
  ------------------
  582|    388|                                        {
  583|    388|                                            return OpCode::SLEI;
  584|    388|                                        }
  585|    638|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 391, False: 247]
  ------------------
  586|    391|                                        {
  587|    391|                                            return OpCode::SLEU;
  588|    391|                                        }
  589|    247|                                        break;
  590|       |
  591|    247|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 246, False: 3.61k]
  ------------------
  592|    600|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 354, False: 3.50k]
  ------------------
  593|    600|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 388, False: 212]
  ------------------
  594|    388|                                        {
  595|    388|                                            return OpCode::SLLI;
  596|    388|                                        }
  597|    212|                                        break;
  598|       |
  599|    818|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 818, False: 3.04k]
  ------------------
  600|  1.34k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 527, False: 3.33k]
  ------------------
  601|  1.34k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 388, False: 957]
  ------------------
  602|    388|                                        {
  603|    388|                                            return OpCode::SLTI;
  604|    388|                                        }
  605|    957|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 392, False: 565]
  ------------------
  606|    392|                                        {
  607|    392|                                            return OpCode::SLTU;
  608|    392|                                        }
  609|    565|                                        break;
  610|  3.86k|                                }
  611|       |
  612|  1.77k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 246, False: 14.3k]
  ------------------
  613|  2.93k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 1.16k, False: 13.4k]
  ------------------
  614|  2.93k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 1.41k, False: 1.52k]
  ------------------
  615|  1.41k|                                {
  616|  1.41k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 388, False: 1.02k]
  ------------------
  617|    388|                                    {
  618|    388|                                        return OpCode::SNEI;
  619|    388|                                    }
  620|  1.02k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 406, False: 620]
  ------------------
  621|    406|                                    {
  622|    406|                                        return OpCode::SNEU;
  623|    406|                                    }
  624|  1.41k|                                }
  625|  2.14k|                                break;
  626|       |
  627|  2.14k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 1.96k, False: 12.6k]
  ------------------
  628|  2.80k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 834, False: 13.7k]
  ------------------
  629|  2.80k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 1.97k, False: 826]
  |  Branch (629:37): [True: 1.57k, False: 1.22k]
  |  Branch (629:53): [True: 1.57k, False: 399]
  ------------------
  630|  1.57k|                                {
  631|  1.57k|                                    return OpCode::SRAI;
  632|  1.57k|                                }
  633|  1.22k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 826, False: 399]
  |  Branch (633:42): [True: 388, False: 837]
  |  Branch (633:58): [True: 388, False: 438]
  ------------------
  634|    388|                                {
  635|    388|                                    return OpCode::SRLI;
  636|    388|                                }
  637|    837|                                break;
  638|       |
  639|    837|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 643, False: 13.9k]
  ------------------
  640|  1.98k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 1.34k, False: 13.2k]
  ------------------
  641|  1.98k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 1.75k, False: 224]
  ------------------
  642|  1.75k|                                {
  643|  1.75k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 204, False: 1.55k]
  ------------------
  644|  1.75k|                                    {
  645|    194|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 194, False: 1.56k]
  ------------------
  646|    388|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 194, False: 1.56k]
  ------------------
  647|    388|                                            return OpCode::SUBD;
  648|       |
  649|    194|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 194, False: 1.56k]
  ------------------
  650|    389|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 195, False: 1.56k]
  ------------------
  651|    389|                                            return OpCode::SUBF;
  652|       |
  653|    194|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 194, False: 1.56k]
  ------------------
  654|    388|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 194, False: 1.56k]
  ------------------
  655|    388|                                            return OpCode::SUBI;
  656|       |
  657|    195|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 195, False: 1.56k]
  ------------------
  658|    390|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 195, False: 1.56k]
  ------------------
  659|    390|                                            return OpCode::SUBU;
  660|  1.75k|                                    }
  661|  1.75k|                                }
  662|    428|                                break;
  663|  14.5k|                        }
  664|  5.25k|                        break;
  665|       |
  666|  5.25k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 194, False: 35.8k]
  ------------------
  667|  1.00k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 813, False: 35.2k]
  ------------------
  668|  1.00k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 803, False: 204]
  |  Branch (668:29): [True: 388, False: 619]
  |  Branch (668:45): [True: 607, False: 196]
  |  Branch (668:61): [True: 388, False: 219]
  ------------------
  669|    388|                        {
  670|    388|                            return OpCode::TRAP;
  671|    388|                        }
  672|    619|                        break;
  673|    619|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 599, False: 35.4k]
  ------------------
  674|  1.35k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 751, False: 35.3k]
  ------------------
  675|  1.35k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 1.15k, False: 195]
  |  Branch (675:29): [True: 424, False: 926]
  |  Branch (675:45): [True: 928, False: 227]
  |  Branch (675:61): [True: 424, False: 504]
  ------------------
  676|    424|                        {
  677|    424|                            return OpCode::XORI;
  678|    424|                        }
  679|    926|                        break;
  680|  36.0k|                }
  681|  17.8k|                break;
  682|  36.0k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  21.5k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 21.5k, False: 127k]
  ------------------
  686|  21.5k|                const char c1 = token[0u];
  687|  21.5k|                const char c2 = token[1u];
  688|  21.5k|                const char c3 = token[2u];
  689|  21.5k|                const char c4 = token[3u];
  690|  21.5k|                const char c5 = token[4u];
  691|       |
  692|  21.5k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 3.56k, False: 17.9k]
  ------------------
  693|  21.5k|                {
  694|    631|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 631, False: 20.9k]
  ------------------
  695|  1.66k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 1.03k, False: 20.5k]
  ------------------
  696|  1.66k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 1.42k, False: 240]
  |  Branch (696:29): [True: 388, False: 1.28k]
  |  Branch (696:45): [True: 1.23k, False: 196]
  |  Branch (696:61): [True: 829, False: 404]
  |  Branch (696:77): [True: 388, False: 441]
  ------------------
  697|    388|                        {
  698|    388|                            return OpCode::ADDUI;
  699|    388|                        }
  700|  1.28k|                        break;
  701|       |
  702|  1.28k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 352, False: 21.2k]
  ------------------
  703|  1.76k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 1.41k, False: 20.1k]
  ------------------
  704|  1.76k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 1.42k, False: 338]
  |  Branch (704:29): [True: 388, False: 1.37k]
  |  Branch (704:45): [True: 1.19k, False: 238]
  |  Branch (704:61): [True: 777, False: 413]
  |  Branch (704:77): [True: 388, False: 389]
  ------------------
  705|    388|                        {
  706|    388|                            return OpCode::DIVUI;
  707|    388|                        }
  708|  1.37k|                        break;
  709|       |
  710|  1.37k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 509, False: 21.0k]
  ------------------
  711|  3.26k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 2.75k, False: 18.7k]
  ------------------
  712|  3.26k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 2.47k, False: 789]
  |  Branch (712:29): [True: 2.01k, False: 1.25k]
  |  Branch (712:45): [True: 2.24k, False: 232]
  |  Branch (712:61): [True: 2.01k, False: 229]
  ------------------
  713|  2.01k|                        {
  714|  2.01k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 350, False: 1.66k]
  ------------------
  715|  2.01k|                            {
  716|    194|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 194, False: 1.82k]
  ------------------
  717|    388|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 194, False: 1.82k]
  ------------------
  718|    388|                                    return OpCode::MULTD;
  719|       |
  720|    194|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 194, False: 1.82k]
  ------------------
  721|    388|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 194, False: 1.82k]
  ------------------
  722|    388|                                    return OpCode::MULTF;
  723|       |
  724|    194|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 194, False: 1.82k]
  ------------------
  725|    388|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 194, False: 1.82k]
  ------------------
  726|    388|                                    return OpCode::MULTI;
  727|       |
  728|    194|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 194, False: 1.82k]
  ------------------
  729|    504|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 310, False: 1.70k]
  ------------------
  730|    504|                                    return OpCode::MULTU;
  731|  2.01k|                            }
  732|  2.01k|                        }
  733|  1.60k|                        break;
  734|       |
  735|  5.34k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 5.34k, False: 16.2k]
  ------------------
  736|  11.2k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 5.94k, False: 15.6k]
  ------------------
  737|  11.2k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 284, False: 11.0k]
  ------------------
  738|  11.2k|                        {
  739|  1.56k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 1.56k, False: 9.72k]
  ------------------
  740|  1.78k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 213, False: 11.0k]
  ------------------
  741|  1.78k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 1.58k, False: 196]
  |  Branch (741:37): [True: 388, False: 1.39k]
  |  Branch (741:53): [True: 992, False: 592]
  |  Branch (741:69): [True: 388, False: 604]
  ------------------
  742|    388|                                {
  743|    388|                                    return OpCode::SEQUI;
  744|    388|                                }
  745|  1.39k|                                break;
  746|       |
  747|  1.39k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 623, False: 10.6k]
  ------------------
  748|  1.86k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 1.23k, False: 10.0k]
  ------------------
  749|  1.86k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 874, False: 987]
  |  Branch (749:37): [True: 388, False: 1.47k]
  |  Branch (749:53): [True: 600, False: 274]
  |  Branch (749:69): [True: 388, False: 212]
  ------------------
  750|    388|                                {
  751|    388|                                    return OpCode::SGEUI;
  752|    388|                                }
  753|  1.47k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 985, False: 488]
  |  Branch (753:42): [True: 389, False: 1.08k]
  |  Branch (753:58): [True: 790, False: 195]
  |  Branch (753:74): [True: 389, False: 401]
  ------------------
  754|    389|                                {
  755|    389|                                    return OpCode::SGTUI;
  756|    389|                                }
  757|  1.08k|                                break;
  758|       |
  759|  1.08k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 555, False: 10.7k]
  ------------------
  760|  3.19k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 2.63k, False: 8.65k]
  ------------------
  761|  3.19k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 1.00k, False: 2.19k]
  |  Branch (761:37): [True: 388, False: 2.80k]
  |  Branch (761:53): [True: 780, False: 221]
  |  Branch (761:69): [True: 388, False: 392]
  ------------------
  762|    388|                                {
  763|    388|                                    return OpCode::SLEUI;
  764|    388|                                }
  765|  2.80k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 2.01k, False: 787]
  |  Branch (765:42): [True: 1.35k, False: 1.44k]
  |  Branch (765:58): [True: 1.75k, False: 267]
  |  Branch (765:74): [True: 1.35k, False: 391]
  ------------------
  766|  1.35k|                                {
  767|  1.35k|                                    return OpCode::SLTUI;
  768|  1.35k|                                }
  769|  1.44k|                                break;
  770|       |
  771|  1.64k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 1.64k, False: 9.64k]
  ------------------
  772|  2.72k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 1.07k, False: 10.2k]
  ------------------
  773|  2.72k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 1.05k, False: 1.66k]
  |  Branch (773:37): [True: 391, False: 2.33k]
  |  Branch (773:53): [True: 780, False: 275]
  |  Branch (773:69): [True: 391, False: 389]
  ------------------
  774|    391|                                {
  775|    391|                                    return OpCode::SNEUI;
  776|    391|                                }
  777|  2.33k|                                break;
  778|       |
  779|  2.33k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 663, False: 10.6k]
  ------------------
  780|  1.44k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 786, False: 10.5k]
  ------------------
  781|  1.44k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 998, False: 451]
  |  Branch (781:37): [True: 388, False: 1.06k]
  |  Branch (781:53): [True: 747, False: 251]
  |  Branch (781:69): [True: 388, False: 359]
  ------------------
  782|    388|                                {
  783|    388|                                    return OpCode::SUBUI;
  784|    388|                                }
  785|  1.06k|                                break;
  786|  11.2k|                        }
  787|       |
  788|  7.59k|                        break;
  789|  21.5k|                }
  790|       |
  791|  15.4k|                break;
  792|  21.5k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  15.4k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 10.1k, False: 139k]
  ------------------
  796|  10.1k|                const char c1 = token[0u];
  797|  10.1k|                const char c2 = token[1u];
  798|  10.1k|                const char c3 = token[2u];
  799|  10.1k|                const char c4 = token[3u];
  800|  10.1k|                const char c5 = token[4u];
  801|  10.1k|                const char c6 = token[5u];
  802|       |
  803|  10.1k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 5.89k, False: 4.24k]
  |  Branch (803:21): [True: 5.42k, False: 4.71k]
  |  Branch (803:37): [True: 5.69k, False: 198]
  |  Branch (803:53): [True: 5.42k, False: 270]
  ------------------
  804|  5.42k|                {
  805|  5.42k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 331, False: 5.09k]
  ------------------
  806|  5.42k|                    {
  807|    587|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 587, False: 4.83k]
  ------------------
  808|  1.19k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 605, False: 4.82k]
  ------------------
  809|  1.19k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 987, False: 205]
  ------------------
  810|    987|                            {
  811|    987|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 389, False: 598]
  ------------------
  812|    389|                                {
  813|    389|                                    return OpCode::CVTD2F;
  814|    389|                                }
  815|    598|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 404, False: 194]
  ------------------
  816|    404|                                {
  817|    404|                                    return OpCode::CVTD2I;
  818|    404|                                }
  819|    987|                            }
  820|    399|                            break;
  821|       |
  822|    399|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 221, False: 5.20k]
  ------------------
  823|  1.16k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 943, False: 4.48k]
  ------------------
  824|  1.16k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 970, False: 194]
  ------------------
  825|    970|                            {
  826|    970|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 388, False: 582]
  ------------------
  827|    388|                                {
  828|    388|                                    return OpCode::CVTF2D;
  829|    388|                                }
  830|    582|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 388, False: 194]
  ------------------
  831|    388|                                {
  832|    388|                                    return OpCode::CVTF2I;
  833|    388|                                }
  834|    970|                            }
  835|    388|                            break;
  836|       |
  837|  2.54k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 2.54k, False: 2.88k]
  ------------------
  838|  2.73k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 194, False: 5.23k]
  ------------------
  839|  2.73k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 2.38k, False: 352]
  ------------------
  840|  2.38k|                            {
  841|  2.38k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 388, False: 1.99k]
  ------------------
  842|    388|                                {
  843|    388|                                    return OpCode::CVTI2D;
  844|    388|                                }
  845|  1.99k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 388, False: 1.61k]
  ------------------
  846|    388|                                {
  847|    388|                                    return OpCode::CVTI2F;
  848|    388|                                }
  849|  2.38k|                            }
  850|  5.42k|                    }
  851|  5.42k|                }
  852|  4.71k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 2.32k, False: 2.38k]
  |  Branch (852:26): [True: 388, False: 4.32k]
  |  Branch (852:42): [True: 1.35k, False: 976]
  |  Branch (852:58): [True: 1.15k, False: 200]
  |  Branch (852:74): [True: 923, False: 229]
  ------------------
  853|  4.71k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 705, False: 218]
  |  Branch (853:42): [True: 388, False: 317]
  ------------------
  854|    388|                {
  855|    388|                    return OpCode::MULTUI;
  856|    388|                }
  857|  7.40k|                break;
  858|  10.1k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  7.40k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 3.92k, False: 145k]
  ------------------
  862|  3.92k|                const char c1 = token[0u];
  863|  3.92k|                const char c2 = token[1u];
  864|  3.92k|                const char c3 = token[2u];
  865|  3.92k|                const char c4 = token[3u];
  866|  3.92k|                const char c5 = token[4u];
  867|  3.92k|                const char c6 = token[5u];
  868|  3.92k|                const char c7 = token[6u];
  869|       |
  870|  3.92k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 2.50k, False: 1.42k]
  |  Branch (870:21): [True: 2.11k, False: 1.81k]
  |  Branch (870:37): [True: 2.30k, False: 200]
  |  Branch (870:53): [True: 2.11k, False: 194]
  ------------------
  871|  2.11k|                {
  872|  2.11k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 1.10k, False: 1.01k]
  |  Branch (872:25): [True: 388, False: 1.72k]
  |  Branch (872:41): [True: 908, False: 194]
  |  Branch (872:54): [True: 713, False: 195]
  |  Branch (872:70): [True: 388, False: 325]
  ------------------
  873|    388|                    {
  874|    388|                        return OpCode::MOVI2FP;
  875|    388|                    }
  876|  1.72k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:25): [True: 1.00k, False: 724]
  |  Branch (876:25): [True: 388, False: 1.33k]
  |  Branch (876:41): [True: 781, False: 221]
  |  Branch (876:57): [True: 584, False: 197]
  |  Branch (876:70): [True: 388, False: 196]
  ------------------
  877|    388|                    {
  878|    388|                        return OpCode::MOVFP2I;
  879|    388|                    }
  880|  1.72k|                }
  881|  3.15k|                break;
  882|  3.92k|            }
  883|       |
  884|  3.15k|            default: {
  ------------------
  |  Branch (884:13): [True: 2.11k, False: 147k]
  ------------------
  885|  2.11k|                break;
  886|  3.92k|            }
  887|   149k|        }
  888|       |
  889|       |        // None found
  890|  89.2k|        return OpCode::NONE;
  891|   149k|    }
_ZN3dlx3iceEcc:
   16|   236k|    {
   17|   236k|        constexpr const char diff = 'a' - 'A';
   18|   236k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (18:16): [True: 75.2k, False: 161k]
  |  Branch (18:28): [True: 70.2k, False: 91.1k]
  ------------------
   19|   236k|    }

_ZN3dlx10ParseErrorC2Ev:
   18|   128k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  186|  1.33k|    {
  187|  1.33k|        ParseError err;
  188|       |
  189|  1.33k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  190|  1.33k|        err.m_LineNumber                           = line_number;
  191|  1.33k|        err.m_Column                               = column;
  192|  1.33k|        err.unexpected_argument_type.expected_type = expected_type;
  193|  1.33k|        err.unexpected_argument_type.actual_type   = actual_type;
  194|       |
  195|  1.33k|        return err;
  196|  1.33k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  201|  1.33k|    {
  202|  1.33k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  203|  1.33k|                                                         token.GetColumn().unsafe(), expected_type,
  204|  1.33k|                                                         actual_type);
  205|  1.33k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  209|    194|    {
  210|    194|        ParseError err;
  211|       |
  212|    194|        err.m_Type              = ParseError::Type::InvalidNumber;
  213|    194|        err.m_LineNumber        = line_number;
  214|    194|        err.m_Column            = column;
  215|    194|        err.invalid_number.text = text;
  216|       |
  217|    194|        return err;
  218|    194|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  221|    194|    {
  222|    194|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  223|    194|                                                token.GetColumn().unsafe(), token.GetText());
  224|    194|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  228|      2|    {
  229|      2|        ParseError err;
  230|       |
  231|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  232|      2|        err.m_LineNumber = line_number;
  233|      2|        err.m_Column     = column;
  234|       |
  235|      2|        return err;
  236|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  239|      2|    {
  240|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  241|      2|                                                                     token.GetColumn().unsafe());
  242|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  247|  48.0k|    {
  248|  48.0k|        ParseError err;
  249|       |
  250|  48.0k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  251|  48.0k|        err.m_LineNumber                   = line_number;
  252|  48.0k|        err.m_Column                       = column;
  253|  48.0k|        err.unexpected_token.expected_type = expected_type;
  254|  48.0k|        err.unexpected_token.actual_type   = actual_type;
  255|       |
  256|  48.0k|        return err;
  257|  48.0k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  261|  48.0k|    {
  262|  48.0k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  263|  48.0k|                                                  token.GetColumn().unsafe(), expected_type,
  264|  48.0k|                                                  token.GetType());
  265|  48.0k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  270|  20.5k|    {
  271|  20.5k|        ParseError err;
  272|       |
  273|  20.5k|        err.m_Type                         = ParseError::Type::ReservedIdentifier;
  274|  20.5k|        err.m_LineNumber                   = line_number;
  275|  20.5k|        err.m_Column                       = column;
  276|  20.5k|        err.reserved_identifier.identifier = identifier;
  277|       |
  278|  20.5k|        return err;
  279|  20.5k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorERKNS_5TokenE:
  282|    194|    {
  283|    194|        return ConstructReservedIdentifierParseError(token.GetLineNumber().unsafe(),
  284|    194|                                                     token.GetColumn().unsafe(), token.GetText());
  285|    194|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  290|  21.1k|    {
  291|  21.1k|        ParseError err;
  292|       |
  293|  21.1k|        err.m_Type                              = ParseError::Type::InvalidLabelIdentifier;
  294|  21.1k|        err.m_LineNumber                        = line_number;
  295|  21.1k|        err.m_Column                            = column;
  296|  21.1k|        err.invalid_label_identifier.identifier = identifier;
  297|       |
  298|  21.1k|        return err;
  299|  21.1k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  302|  21.1k|    {
  303|  21.1k|        return ConstructInvalidLabelIdentifierParseError(
  304|  21.1k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  305|  21.1k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  312|  7.13k|    {
  313|  7.13k|        ParseError err;
  314|       |
  315|  7.13k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  316|  7.13k|        err.m_LineNumber                     = line_number;
  317|  7.13k|        err.m_Column                         = column;
  318|  7.13k|        err.label_already_defined.label_name = label_name;
  319|  7.13k|        err.label_already_defined.at_line    = at_line;
  320|  7.13k|        err.label_already_defined.at_column  = at_column;
  321|       |
  322|  7.13k|        return err;
  323|  7.13k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  327|  7.13k|    {
  328|  7.13k|        return ConstructLabelAlreadyDefinedParseError(
  329|  7.13k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  330|  7.13k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  331|  7.13k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  335|  22.9k|    {
  336|  22.9k|        ParseError err;
  337|       |
  338|  22.9k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  339|  22.9k|        err.m_LineNumber = line_number;
  340|  22.9k|        err.m_Column     = column;
  341|       |
  342|  22.9k|        return err;
  343|  22.9k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  346|  22.9k|    {
  347|  22.9k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  348|  22.9k|                                                        token.GetColumn().unsafe());
  349|  22.9k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  354|  3.89k|    {
  355|  3.89k|        ParseError err;
  356|       |
  357|  3.89k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  358|  3.89k|        err.m_LineNumber               = line_number;
  359|  3.89k|        err.m_Column                   = column;
  360|  3.89k|        err.too_few_arguments.required = required;
  361|  3.89k|        err.too_few_arguments.provided = provided;
  362|       |
  363|  3.89k|        return err;
  364|  3.89k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  368|  3.89k|    {
  369|  3.89k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  370|  3.89k|                                                  token.GetColumn().unsafe(), required, provided);
  371|  3.89k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  375|  3.07k|    {
  376|  3.07k|        ParseError err;
  377|       |
  378|  3.07k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  379|  3.07k|        err.m_LineNumber           = line_number;
  380|  3.07k|        err.m_Column               = column;
  381|  3.07k|        err.empty_label.label_name = label_name;
  382|       |
  383|  3.07k|        return err;
  384|  3.07k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  387|  3.07k|    {
  388|  3.07k|        return ConstructEmptyLabelParseError(
  389|  3.07k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  390|  3.07k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (390:17): [True: 2.80k, False: 264]
  ------------------
  391|  2.80k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  392|  3.07k|                        token.GetText());
  393|  3.07k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  397|    432|    {
  398|    432|        ParseError err;
  399|       |
  400|    432|        err.m_Type       = ParseError::Type::TooManyComma;
  401|    432|        err.m_LineNumber = line_number;
  402|    432|        err.m_Column     = column;
  403|       |
  404|    432|        return err;
  405|    432|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  408|    432|    {
  409|    432|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  410|    432|                                               token.GetColumn().unsafe());
  411|    432|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   16|   128k|    {
   17|   128k|        m_ParseErrors.emplace_back(phi::move(error));
   18|   128k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  179|  4.20k|    {
  180|  4.20k|        ParsedProgram program;
  181|       |
  182|  4.20k|        program.m_Tokens = tokens;
  183|       |
  184|  4.20k|        phi::boolean line_has_instruction{false};
  185|  4.20k|        phi::usize   label_count{0u};
  186|       |
  187|   160k|        while (tokens.has_more())
  ------------------
  |  Branch (187:16): [True: 156k, False: 4.20k]
  ------------------
  188|   156k|        {
  189|   156k|            const Token& current_token = tokens.consume();
  190|       |
  191|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  192|       |
  193|   156k|            switch (current_token.GetType())
  194|   156k|            {
  195|       |                // Ignore comments
  196|    733|                case Token::Type::Comment:
  ------------------
  |  Branch (196:17): [True: 733, False: 156k]
  ------------------
  197|       |                    //DLX_DEBUG("Ignoring comment");
  198|    733|                    break;
  199|       |
  200|  23.6k|                case Token::Type::NewLine:
  ------------------
  |  Branch (200:17): [True: 23.6k, False: 133k]
  ------------------
  201|       |                    //DLX_DEBUG("Ignoring newline");
  202|  23.6k|                    line_has_instruction = false;
  203|  23.6k|                    break;
  204|       |
  205|  55.5k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (205:17): [True: 55.5k, False: 101k]
  ------------------
  206|  55.5k|                    if (line_has_instruction)
  ------------------
  |  Branch (206:25): [True: 7.36k, False: 48.1k]
  ------------------
  207|  7.36k|                    {
  208|  7.36k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  209|  7.36k|                                current_token, Token::Type::NewLine));
  210|  7.36k|                        break;
  211|  7.36k|                    }
  212|       |
  213|       |                    // Handle jump labels
  214|       |                    // Check if the last character of the identifier is a colon
  215|  48.1k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (215:25): [True: 8.98k, False: 39.2k]
  ------------------
  216|  8.98k|                    {
  217|  8.98k|                        program.AddParseError(
  218|  8.98k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  219|  8.98k|                        break;
  220|  8.98k|                    }
  221|       |
  222|  39.2k|                    phi::string_view label_name = current_token.GetText();
  223|  39.2k|                    label_name.remove_suffix(1u);
  224|       |
  225|  39.2k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (225:25): [True: 20.3k, False: 18.8k]
  ------------------
  226|  20.3k|                    {
  227|  20.3k|                        program.AddParseError(ConstructReservedIdentifierParseError(
  228|  20.3k|                                current_token.GetLineNumber().unsafe(),
  229|  20.3k|                                current_token.GetColumn().unsafe(), label_name));
  230|  20.3k|                        break;
  231|  20.3k|                    }
  232|       |
  233|  18.8k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (233:25): [True: 7.05k, False: 11.8k]
  ------------------
  234|  7.05k|                    {
  235|  7.05k|                        program.AddParseError(
  236|  7.05k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  237|  7.05k|                        break;
  238|  7.05k|                    }
  239|       |
  240|       |                    // Check if label was already defined
  241|  11.8k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (241:25): [True: 7.13k, False: 4.68k]
  ------------------
  242|  7.13k|                    {
  243|       |                        // Find first defintions of label
  244|  7.13k|                        const Token* first_label_definition =
  245|  7.13k|                                tokens.find_first_token_if([&](const Token& t) {
  246|  7.13k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  247|  7.13k|                                    {
  248|  7.13k|                                        phi::string_view token_label_name = t.GetText();
  249|  7.13k|                                        token_label_name.remove_suffix(1u);
  250|       |
  251|  7.13k|                                        if (token_label_name == label_name)
  252|  7.13k|                                        {
  253|  7.13k|                                            return true;
  254|  7.13k|                                        }
  255|  7.13k|                                    }
  256|       |
  257|  7.13k|                                    return false;
  258|  7.13k|                                });
  259|       |
  260|  7.13k|                        PHI_ASSERT(first_label_definition);
  261|       |
  262|  7.13k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  263|  7.13k|                                current_token, *first_label_definition));
  264|  7.13k|                        break;
  265|  7.13k|                    }
  266|       |
  267|  4.68k|                    program.m_JumpData[label_name] =
  268|  4.68k|                            static_cast<phi::uint32_t>(program.m_Instructions.size());
  269|  4.68k|                    label_count += 1u;
  270|       |
  271|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  272|       |                    //             program.m_Instructions.size());
  273|       |
  274|  4.68k|                    break;
  275|  11.8k|                }
  276|       |
  277|  39.6k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (277:17): [True: 39.6k, False: 117k]
  ------------------
  278|  39.6k|                    if (line_has_instruction)
  ------------------
  |  Branch (278:25): [True: 22.9k, False: 16.6k]
  ------------------
  279|  22.9k|                    {
  280|  22.9k|                        program.AddParseError(
  281|  22.9k|                                ConstructOneInstructionPerLineParseError(current_token));
  282|  22.9k|                        break;
  283|  22.9k|                    }
  284|       |
  285|  16.6k|                    label_count = 0u;
  286|       |
  287|       |                    // Handle normal instructions
  288|  16.6k|                    PHI_ASSERT(current_token.HasHint());
  289|  16.6k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  290|       |
  291|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  292|       |
  293|  16.6k|                    const InstructionInfo& info = LookUpInstructionInfo(opcode);
  294|       |
  295|       |                    // Make sure we got no problems here
  296|  16.6k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  297|  16.6k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  298|  16.6k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  299|  16.6k|                    PHI_ASSERT(info.GetExecutor());
  300|       |
  301|  16.6k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  302|       |                    //DLX_INFO("Instruction requires {} arguments",
  303|       |                    //             number_of_argument_required.unsafe());
  304|       |
  305|       |                    // Create instruction
  306|  16.6k|                    Instruction  instruction(info, current_token.GetLineNumber());
  307|  16.6k|                    phi::boolean consumed_comma{false};
  308|       |
  309|       |                    // Parse arguments
  310|  28.8k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (310:54): [True: 26.3k, False: 2.49k]
  ------------------
  311|  26.3k|                    {
  312|       |                        // Get next token
  313|  26.3k|                        if (!tokens.has_more())
  ------------------
  |  Branch (313:29): [True: 745, False: 25.6k]
  ------------------
  314|    745|                        {
  315|    745|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  316|    745|                                    current_token, number_of_argument_required.unsafe(),
  317|    745|                                    argument_num.unsafe()));
  318|    745|                            break;
  319|    745|                        }
  320|       |
  321|  25.6k|                        const Token& token = tokens.consume();
  322|       |
  323|       |                        // Skip commas
  324|  25.6k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (324:29): [True: 8.99k, False: 16.6k]
  ------------------
  325|  8.99k|                        {
  326|  8.99k|                            if (consumed_comma)
  ------------------
  |  Branch (326:33): [True: 432, False: 8.56k]
  ------------------
  327|    432|                            {
  328|    432|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  329|    432|                            }
  330|       |
  331|  8.99k|                            consumed_comma = true;
  332|       |                            //DLX_DEBUG("Skipping comma");
  333|  8.99k|                            continue;
  334|  8.99k|                        }
  335|       |
  336|  16.6k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (336:29): [True: 3.14k, False: 13.4k]
  ------------------
  337|  3.14k|                        {
  338|  3.14k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  339|  3.14k|                                    token, number_of_argument_required.unsafe(),
  340|  3.14k|                                    argument_num.unsafe()));
  341|  3.14k|                            break;
  342|  3.14k|                        }
  343|       |
  344|  13.4k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  345|  13.4k|                                parse_instruction_argument(
  346|  13.4k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  347|  13.4k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (347:29): [True: 10.3k, False: 3.19k]
  ------------------
  348|  10.3k|                        {
  349|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  350|  10.3k|                            break;
  351|  10.3k|                        }
  352|       |
  353|       |                        // Successfully parsed one argument
  354|  3.19k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  355|       |
  356|  3.19k|                        instruction.SetArgument(argument_num, parsed_argument);
  357|  3.19k|                        argument_num++;
  358|  3.19k|                        consumed_comma = false;
  359|       |
  360|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  361|  3.19k|                    }
  362|       |
  363|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  364|       |                    //            instruction.DebugInfo());
  365|  16.6k|                    program.m_Instructions.emplace_back(instruction);
  366|  16.6k|                    line_has_instruction = true;
  367|  16.6k|                    break;
  368|  39.6k|                }
  369|       |
  370|  37.1k|                default:
  ------------------
  |  Branch (370:17): [True: 37.1k, False: 119k]
  ------------------
  371|  37.1k|                    Token::Type expected_token_type = Token::Type::Unknown;
  372|  37.1k|                    if (line_has_instruction)
  ------------------
  |  Branch (372:25): [True: 23.9k, False: 13.1k]
  ------------------
  373|  23.9k|                    {
  374|  23.9k|                        expected_token_type = Token::Type::NewLine;
  375|  23.9k|                    }
  376|       |
  377|  37.1k|                    program.AddParseError(
  378|  37.1k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  379|  37.1k|                    break;
  380|   156k|            }
  381|   156k|        }
  382|       |
  383|       |        // Check for empty labels
  384|  4.20k|        if (label_count > 0u)
  ------------------
  |  Branch (384:13): [True: 312, False: 3.88k]
  ------------------
  385|    312|        {
  386|  3.82k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (386:45): [True: 3.51k, False: 312]
  ------------------
  387|  3.51k|            {
  388|  3.51k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  389|       |
  390|  3.51k|                const Token& token = *it;
  391|  3.51k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (391:21): [True: 3.07k, False: 441]
  ------------------
  392|  3.07k|                {
  393|  3.07k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  394|  3.07k|                    --label_count;
  395|  3.07k|                }
  396|  3.51k|            }
  397|    312|        }
  398|       |
  399|  4.20k|        return program;
  400|  4.20k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  403|  4.20k|    {
  404|  4.20k|        TokenStream tokens = Tokenize(source);
  405|  4.20k|        return Parse(tokens);
  406|  4.20k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   31|  13.4k|    {
   32|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   33|       |        //              dlx::enum_name(expected_argument_type));
   34|       |
   35|  13.4k|        switch (token.GetType())
   36|  13.4k|        {
   37|  1.43k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (37:13): [True: 1.43k, False: 12.0k]
  ------------------
   38|  1.43k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (38:21): [True: 331, False: 1.10k]
  ------------------
   39|  1.43k|                                          ArgumentType::AddressDisplacement))
   40|    331|                {
   41|    331|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   42|    331|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   43|       |
   44|    331|                    return {};
   45|    331|                }
   46|       |
   47|       |                // Get address displacement
   48|  1.10k|                PHI_ASSERT(token.HasHint());
   49|       |
   50|  1.10k|                phi::int16_t value = static_cast<phi::int16_t>(token.GetHint());
   51|       |
   52|  1.10k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (52:21): [True: 2, False: 1.10k]
  ------------------
   53|      2|                {
   54|      2|                    program.AddParseError(
   55|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   56|      2|                    return {};
   57|      2|                }
   58|       |
   59|  1.10k|                auto         it           = tokens.current_position();
   60|  1.10k|                const Token& first_token  = tokens.consume();
   61|  1.10k|                const Token& second_token = tokens.consume();
   62|  1.10k|                const Token& third_token  = tokens.consume();
   63|       |
   64|  1.10k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (64:21): [True: 196, False: 904]
  ------------------
   65|    196|                {
   66|    196|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   67|    196|                            first_token, Token::Type::OpenBracket));
   68|    196|                    return {};
   69|    196|                }
   70|       |
   71|       |                // Second token is the register
   72|    904|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (72:21): [True: 516, False: 388]
  ------------------
   73|    516|                {
   74|    516|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   75|    516|                            second_token, Token::Type::RegisterInt));
   76|    516|                    return {};
   77|    516|                }
   78|       |
   79|    388|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (79:21): [True: 194, False: 194]
  ------------------
   80|    194|                {
   81|    194|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   82|    194|                            third_token, Token::Type::ClosingBracket));
   83|    194|                    return {};
   84|    194|                }
   85|       |
   86|       |                // Consume the 3 tokens
   87|    194|                tokens.set_position(it + 3u);
   88|       |
   89|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   90|       |                //             value, dlx::enum_name(reg_id));
   91|       |
   92|    194|                return ConstructInstructionArgumentAddressDisplacement(
   93|    194|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   94|    388|            }
   95|    397|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (95:13): [True: 397, False: 13.1k]
  ------------------
   96|    397|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (96:21): [True: 194, False: 203]
  ------------------
   97|    194|                {
   98|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   99|    194|                            token, expected_argument_type, ArgumentType::IntRegister));
  100|    194|                    return {};
  101|    194|                }
  102|       |
  103|       |                //DLX_INFO("Parsed identifier as int register {}",
  104|       |                //             dlx::enum_name(reg_id));
  105|       |
  106|    203|                return ConstructInstructionArgumentRegisterInt(
  107|    203|                        static_cast<IntRegisterID>(token.GetHint()));
  108|    397|            }
  109|    969|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (109:13): [True: 969, False: 12.5k]
  ------------------
  110|    969|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (110:21): [True: 202, False: 767]
  ------------------
  111|    202|                {
  112|    202|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  113|    202|                            token, expected_argument_type, ArgumentType::FloatRegister));
  114|    202|                    return {};
  115|    202|                }
  116|       |
  117|       |                //DLX_INFO("Parsed identifier as float register {}",
  118|       |                //             dlx::enum_name(float_reg_id));
  119|       |
  120|    767|                return ConstructInstructionArgumentRegisterFloat(
  121|    767|                        static_cast<FloatRegisterID>(token.GetHint()));
  122|    969|            }
  123|    194|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (123:13): [True: 194, False: 13.3k]
  ------------------
  124|    194|                program.AddParseError(ConstructReservedIdentifierParseError(token));
  125|       |
  126|    194|                return {};
  127|    969|            }
  128|  7.32k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (128:13): [True: 7.32k, False: 6.17k]
  ------------------
  129|       |                // Parse as Label
  130|  7.32k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (130:21): [True: 418, False: 6.90k]
  ------------------
  131|    418|                {
  132|    418|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  133|    418|                            token, expected_argument_type, ArgumentType::Label));
  134|    418|                    return {};
  135|    418|                }
  136|       |
  137|  6.90k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (137:21): [True: 0, False: 6.90k]
  ------------------
  138|      0|                {
  139|      0|                    program.AddParseError(ConstructReservedIdentifierParseError(token));
  140|      0|                    return {};
  141|      0|                }
  142|       |
  143|  6.90k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (143:21): [True: 5.08k, False: 1.82k]
  ------------------
  144|  5.08k|                {
  145|  5.08k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  146|  5.08k|                    return {};
  147|  5.08k|                }
  148|       |
  149|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  150|       |
  151|  1.82k|                return ConstructInstructionArgumentLabel(token.GetText());
  152|  6.90k|            }
  153|    595|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (153:13): [True: 595, False: 12.9k]
  ------------------
  154|    595|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (154:21): [True: 194, False: 401]
  ------------------
  155|    194|                {
  156|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  157|    194|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  158|    194|                    return {};
  159|    194|                }
  160|       |
  161|    401|                if (token.HasHint())
  ------------------
  |  Branch (161:21): [True: 207, False: 194]
  ------------------
  162|    207|                {
  163|    207|                    return ConstructInstructionArgumentImmediateValue(
  164|    207|                            static_cast<phi::int16_t>(token.GetHint()));
  165|    207|                }
  166|       |
  167|    194|                program.AddParseError(ConstructInvalidNumberParseError(token));
  168|    194|                return {};
  169|    401|            }
  170|       |
  171|  2.59k|            default:
  ------------------
  |  Branch (171:13): [True: 2.59k, False: 10.9k]
  ------------------
  172|  2.59k|                program.AddParseError(
  173|  2.59k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  174|  2.59k|                return {};
  175|  13.4k|        }
  176|  13.4k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  245|  19.2k|                                tokens.find_first_token_if([&](const Token& t) {
  246|  19.2k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (246:41): [True: 18.0k, False: 1.23k]
  ------------------
  247|  18.0k|                                    {
  248|  18.0k|                                        phi::string_view token_label_name = t.GetText();
  249|  18.0k|                                        token_label_name.remove_suffix(1u);
  250|       |
  251|  18.0k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (251:45): [True: 7.13k, False: 10.9k]
  ------------------
  252|  7.13k|                                        {
  253|  7.13k|                                            return true;
  254|  7.13k|                                        }
  255|  18.0k|                                    }
  256|       |
  257|  12.1k|                                    return false;
  258|  19.2k|                                });

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   10|   153k|    {
   11|   153k|        if (token.length() == 2u)
  ------------------
  |  Branch (11:13): [True: 24.0k, False: 129k]
  ------------------
   12|  24.0k|        {
   13|  24.0k|            const char first_char = token[0u];
   14|  24.0k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (14:17): [True: 395, False: 23.6k]
  |  Branch (14:38): [True: 1.84k, False: 21.8k]
  ------------------
   15|  2.23k|            {
   16|  2.23k|                const char second_char = token[1u];
   17|  2.23k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (17:21): [True: 1.88k, False: 353]
  |  Branch (17:43): [True: 1.47k, False: 414]
  ------------------
   18|  1.47k|                {
   19|  1.47k|                    return static_cast<IntRegisterID>(second_char - '0');
   20|  1.47k|                }
   21|  2.23k|            }
   22|  24.0k|        }
   23|   129k|        else if (token.length() == 3u)
  ------------------
  |  Branch (23:18): [True: 33.8k, False: 95.7k]
  ------------------
   24|  33.8k|        {
   25|  33.8k|            const char first_char = token[0u];
   26|  33.8k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (26:17): [True: 232, False: 33.6k]
  |  Branch (26:38): [True: 1.77k, False: 31.8k]
  ------------------
   27|  2.01k|            {
   28|  2.01k|                const char second_char = token[1u];
   29|  2.01k|                const char third_char  = token[2u];
   30|       |
   31|  2.01k|                switch (second_char)
   32|  2.01k|                {
   33|    590|                    case '1': {
  ------------------
  |  Branch (33:21): [True: 590, False: 1.42k]
  ------------------
   34|    590|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (34:29): [True: 396, False: 194]
  |  Branch (34:50): [True: 202, False: 194]
  ------------------
   35|    202|                        {
   36|    202|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   37|    202|                        }
   38|    388|                        break;
   39|    590|                    }
   40|    590|                    case '2': {
  ------------------
  |  Branch (40:21): [True: 590, False: 1.42k]
  ------------------
   41|    590|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (41:29): [True: 396, False: 194]
  |  Branch (41:50): [True: 194, False: 202]
  ------------------
   42|    194|                        {
   43|    194|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   44|    194|                        }
   45|    396|                        break;
   46|    590|                    }
   47|    594|                    case '3': {
  ------------------
  |  Branch (47:21): [True: 594, False: 1.41k]
  ------------------
   48|    594|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (48:29): [True: 194, False: 400]
  |  Branch (48:50): [True: 194, False: 206]
  ------------------
   49|    388|                        {
   50|    388|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   51|    388|                        }
   52|    206|                        break;
   53|    594|                    }
   54|    236|                    default: {
  ------------------
  |  Branch (54:21): [True: 236, False: 1.77k]
  ------------------
   55|    236|                        break;
   56|    594|                    }
   57|  2.01k|                }
   58|  2.01k|            }
   59|  33.8k|        }
   60|       |
   61|   151k|        return IntRegisterID::None;
   62|   153k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|   151k|    {
   66|   151k|        if (token.length() == 2u)
  ------------------
  |  Branch (66:13): [True: 22.6k, False: 128k]
  ------------------
   67|  22.6k|        {
   68|  22.6k|            const char first_char = token[0u];
   69|  22.6k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (69:17): [True: 1.60k, False: 21.0k]
  |  Branch (69:38): [True: 670, False: 20.3k]
  ------------------
   70|  2.27k|            {
   71|  2.27k|                const char second_char = token[1u];
   72|  2.27k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (72:21): [True: 2.04k, False: 228]
  |  Branch (72:43): [True: 1.47k, False: 569]
  ------------------
   73|  1.47k|                {
   74|  1.47k|                    return static_cast<FloatRegisterID>(second_char - '0');
   75|  1.47k|                }
   76|  2.27k|            }
   77|  22.6k|        }
   78|   128k|        else if (token.length() == 3u)
  ------------------
  |  Branch (78:18): [True: 33.0k, False: 95.7k]
  ------------------
   79|  33.0k|        {
   80|  33.0k|            const char first_char = token[0u];
   81|  33.0k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (81:17): [True: 1.37k, False: 31.7k]
  |  Branch (81:38): [True: 1.03k, False: 30.6k]
  ------------------
   82|  2.41k|            {
   83|  2.41k|                const char second_char = token[1u];
   84|  2.41k|                const char third_char  = token[2u];
   85|       |
   86|  2.41k|                switch (second_char)
   87|  2.41k|                {
   88|    583|                    case '1': {
  ------------------
  |  Branch (88:21): [True: 583, False: 1.83k]
  ------------------
   89|    583|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (89:29): [True: 389, False: 194]
  |  Branch (89:50): [True: 194, False: 195]
  ------------------
   90|    194|                        {
   91|    194|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   92|    194|                        }
   93|    389|                        break;
   94|    583|                    }
   95|    608|                    case '2': {
  ------------------
  |  Branch (95:21): [True: 608, False: 1.81k]
  ------------------
   96|    608|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (96:29): [True: 414, False: 194]
  |  Branch (96:50): [True: 199, False: 215]
  ------------------
   97|    199|                        {
   98|    199|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
   99|    199|                        }
  100|    409|                        break;
  101|    608|                    }
  102|    583|                    case '3': {
  ------------------
  |  Branch (102:21): [True: 583, False: 1.83k]
  ------------------
  103|    583|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (103:29): [True: 194, False: 389]
  |  Branch (103:50): [True: 194, False: 195]
  ------------------
  104|    388|                        {
  105|    388|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  106|    388|                        }
  107|    195|                        break;
  108|    583|                    }
  109|    644|                    default: {
  ------------------
  |  Branch (109:21): [True: 644, False: 1.77k]
  ------------------
  110|    644|                        break;
  111|    583|                    }
  112|  2.41k|                }
  113|  2.41k|            }
  114|  33.0k|        }
  115|       |
  116|   149k|        return FloatRegisterID::None;
  117|   151k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  120|   133k|    {
  121|   133k|        if (token.length() == 4u)
  ------------------
  |  Branch (121:13): [True: 29.3k, False: 104k]
  ------------------
  122|  29.3k|        {
  123|  29.3k|            const char c1 = token[0u];
  124|  29.3k|            const char c2 = token[1u];
  125|  29.3k|            const char c3 = token[2u];
  126|  29.3k|            const char c4 = token[3u];
  127|       |
  128|  29.3k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (128:21): [True: 974, False: 28.4k]
  |  Branch (128:34): [True: 426, False: 27.9k]
  |  Branch (128:49): [True: 763, False: 637]
  |  Branch (128:62): [True: 194, False: 443]
  ------------------
  129|  29.3k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (129:21): [True: 210, False: 747]
  |  Branch (129:34): [True: 551, False: 196]
  |  Branch (129:49): [True: 194, False: 567]
  |  Branch (129:62): [True: 366, False: 201]
  ------------------
  130|  29.3k|        }
  131|       |
  132|   104k|        return false;
  133|   133k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|   137k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  47.7k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|   285k|    {
   41|   285k|        return m_Type;
   42|   285k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   152k|    {
   51|   152k|        return m_LineNumber;
   52|   152k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   135k|    {
   56|   135k|        return m_Column;
   57|   135k|    }
_ZNK3dlx5Token7GetTextEv:
   65|   158k|    {
   66|   158k|        return m_Text;
   67|   158k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  18.1k|    {
   80|  18.1k|        return m_HasHint;
   81|  18.1k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  19.1k|    {
   85|  19.1k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  19.1k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  19.1k|                   m_Type == Type::ImmediateInteger);
   88|  19.1k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  19.1k|        return m_Hint;
   91|  19.1k|    }

_ZN3dlx11TokenStream8finalizeEv:
   28|  4.20k|    {
   29|       |#if defined(PHI_DEBUG)
   30|       |        PHI_ASSERT(!m_Finalized);
   31|       |#endif
   32|       |
   33|  4.20k|        m_Iterator = 0u;
   34|       |#if defined(PHI_DEBUG)
   35|       |        m_Finalized = true;
   36|       |#endif
   37|  4.20k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   49|  1.10k|    {
   50|  1.10k|        return x + m_Iterator <= m_Tokens.size();
   51|  1.10k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   54|   187k|    {
   55|   187k|        return m_Iterator < m_Tokens.size();
   56|   187k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   59|   185k|    {
   60|   185k|        return m_Iterator >= m_Tokens.size();
   61|   185k|    }
_ZN3dlx11TokenStream7consumeEv:
   74|   185k|    {
   75|   185k|        PHI_ASSERT(!reached_end());
   76|       |#if defined(PHI_DEBUG)
   77|       |        PHI_ASSERT(m_Finalized);
   78|       |#endif
   79|       |
   80|   185k|        return m_Tokens.at(m_Iterator++.unsafe());
   81|   185k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  154|  1.10k|    {
  155|  1.10k|        return m_Iterator;
  156|  1.10k|    }
_ZN3dlx11TokenStream12set_positionEN3phi7integerImEE:
  159|    194|    {
  160|       |#if defined(PHI_DEBUG)
  161|       |        PHI_ASSERT(m_Finalized);
  162|       |#endif
  163|       |
  164|    194|        m_Iterator = pos;
  165|    194|    }
_ZNK3dlx11TokenStream6rbeginEv:
  204|    312|    {
  205|       |#if defined(PHI_DEBUG)
  206|       |        //PHI_ASSERT(m_Finalized);
  207|       |#endif
  208|       |
  209|    312|        return m_Tokens.rbegin();
  210|    312|    }
_ZNK3dlx11TokenStream4rendEv:
  213|  3.51k|    {
  214|       |#if defined(PHI_DEBUG)
  215|       |        //PHI_ASSERT(m_Finalized);
  216|       |#endif
  217|       |
  218|  3.51k|        return m_Tokens.rend();
  219|  3.51k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   68|  4.20k|    {
   69|  4.20k|        TokenStream tokens;
   70|       |
   71|  4.20k|        phi::string_view current_token;
   72|       |
   73|  4.20k|        phi::u64 current_line_number{1u};
   74|  4.20k|        phi::u64 current_column{1u};
   75|  4.20k|        phi::u64 token_begin{0u};
   76|       |
   77|  4.20k|        phi::boolean parsing_comment{false};
   78|       |
   79|   489k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (79:32): [True: 485k, False: 4.20k]
  ------------------
   80|   485k|        {
   81|   485k|            const char c{source.at(i)};
   82|       |
   83|   485k|            if (c == '\n')
  ------------------
  |  Branch (83:17): [True: 26.8k, False: 458k]
  ------------------
   84|  26.8k|            {
   85|  26.8k|                if (current_token.is_empty())
  ------------------
  |  Branch (85:21): [True: 8.46k, False: 18.4k]
  ------------------
   86|  8.46k|                {
   87|       |                    // Skip empty lines
   88|  8.46k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   89|  8.46k|                                        current_line_number, current_column);
   90|       |
   91|  8.46k|                    parsing_comment = false;
   92|  8.46k|                    current_line_number += 1u;
   93|  8.46k|                    current_column = 1u;
   94|  8.46k|                    continue;
   95|  8.46k|                }
   96|       |
   97|       |                // Otherwise a new line separates tokens
   98|  18.4k|                tokens.emplace_back(ParseToken(
   99|  18.4k|                        source.substring_view(
  100|  18.4k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  101|  18.4k|                                current_token.length()),
  102|  18.4k|                        current_line_number, current_column - current_token.length()));
  103|       |
  104|  18.4k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  105|  18.4k|                                    current_line_number, current_column);
  106|       |
  107|  18.4k|                current_token   = phi::string_view{};
  108|  18.4k|                parsing_comment = false;
  109|  18.4k|                current_line_number += 1u;
  110|  18.4k|                current_column = 0u;
  111|  18.4k|            }
  112|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  113|   458k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (113:22): [True: 491, False: 457k]
  |  Branch (113:34): [True: 668, False: 457k]
  ------------------
  114|  1.15k|            {
  115|  1.15k|                if (current_token.is_empty())
  ------------------
  |  Branch (115:21): [True: 251, False: 908]
  ------------------
  116|    251|                {
  117|    251|                    token_begin = i;
  118|    251|                }
  119|    908|                else if (!parsing_comment)
  ------------------
  |  Branch (119:26): [True: 532, False: 376]
  ------------------
  120|    532|                {
  121|    532|                    tokens.emplace_back(ParseToken(
  122|    532|                            source.substring_view(
  123|    532|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  124|    532|                                    current_token.length()),
  125|    532|                            current_line_number, current_column - current_token.length()));
  126|    532|                    token_begin   = i;
  127|    532|                    current_token = phi::string_view{};
  128|    532|                }
  129|       |
  130|  1.15k|                parsing_comment = true;
  131|  1.15k|                current_token   = source.substring_view(
  132|  1.15k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  133|  1.15k|                        current_token.length() + 1u);
  134|  1.15k|            }
  135|   457k|            else if (parsing_comment)
  ------------------
  |  Branch (135:22): [True: 203, False: 457k]
  ------------------
  136|    203|            {
  137|       |                // simply append the character
  138|    203|                current_token = source.substring_view(
  139|    203|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  140|    203|                        current_token.length() + 1u);
  141|    203|            }
  142|   457k|            else
  143|   457k|            {
  144|       |                // Not parsing a comment
  145|   457k|                switch (c)
  146|   457k|                {
  147|  3.33k|                    case ' ':
  ------------------
  |  Branch (147:21): [True: 3.33k, False: 453k]
  ------------------
  148|  7.26k|                    case '\t':
  ------------------
  |  Branch (148:21): [True: 3.92k, False: 453k]
  ------------------
  149|  11.8k|                    case '\v':
  ------------------
  |  Branch (149:21): [True: 4.61k, False: 452k]
  ------------------
  150|  11.8k|                        if (current_token.is_empty())
  ------------------
  |  Branch (150:29): [True: 678, False: 11.1k]
  ------------------
  151|    678|                        {
  152|    678|                            current_column += 1u;
  153|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  154|    678|                            continue;
  155|    678|                        }
  156|       |
  157|       |                        // Otherwise a whitespace separates tokens
  158|  11.1k|                        tokens.emplace_back(ParseToken(
  159|  11.1k|                                source.substring_view(
  160|  11.1k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  161|  11.1k|                                        current_token.length()),
  162|  11.1k|                                current_line_number, current_column - current_token.length()));
  163|  11.1k|                        current_token = phi::string_view{};
  164|  11.1k|                        break;
  165|  49.6k|                    case ':':
  ------------------
  |  Branch (165:21): [True: 49.6k, False: 407k]
  ------------------
  166|       |                        // Need to parse label names together with their colon
  167|  49.6k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (167:29): [True: 43.7k, False: 5.95k]
  ------------------
  168|  43.7k|                        {
  169|  43.7k|                            current_token = source.substring_view(
  170|  43.7k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  171|  43.7k|                                    current_token.length() + 1u);
  172|  43.7k|                            tokens.emplace_back(ParseToken(
  173|  43.7k|                                    source.substring_view(
  174|  43.7k|                                            phi::narrow_cast<phi::string_view::size_type>(
  175|  43.7k|                                                    token_begin),
  176|  43.7k|                                            current_token.length()),
  177|  43.7k|                                    current_line_number,
  178|  43.7k|                                    current_column + 1u - current_token.length()));
  179|       |
  180|  43.7k|                            current_token = phi::string_view{};
  181|  43.7k|                        }
  182|  5.95k|                        else
  183|  5.95k|                        {
  184|       |                            // Orphan colon
  185|  5.95k|                            token_begin = i;
  186|       |
  187|  5.95k|                            tokens.emplace_back(
  188|  5.95k|                                    Token::Type::Colon,
  189|  5.95k|                                    source.substring_view(
  190|  5.95k|                                            phi::narrow_cast<phi::string_view::size_type>(
  191|  5.95k|                                                    token_begin),
  192|  5.95k|                                            1u),
  193|  5.95k|                                    current_line_number, current_column);
  194|  5.95k|                        }
  195|  49.6k|                        break;
  196|  23.7k|                    case ',':
  ------------------
  |  Branch (196:21): [True: 23.7k, False: 433k]
  ------------------
  197|  38.3k|                    case '(':
  ------------------
  |  Branch (197:21): [True: 14.5k, False: 442k]
  ------------------
  198|  40.1k|                    case ')':
  ------------------
  |  Branch (198:21): [True: 1.88k, False: 455k]
  ------------------
  199|  40.1k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (199:29): [True: 35.6k, False: 4.51k]
  ------------------
  200|  35.6k|                        {
  201|  35.6k|                            tokens.emplace_back(ParseToken(
  202|  35.6k|                                    source.substring_view(
  203|  35.6k|                                            phi::narrow_cast<phi::string_view::size_type>(
  204|  35.6k|                                                    token_begin),
  205|  35.6k|                                            current_token.length()),
  206|  35.6k|                                    current_line_number, current_column - current_token.length()));
  207|       |
  208|  35.6k|                            current_token = phi::string_view{};
  209|  35.6k|                        }
  210|       |
  211|  40.1k|                        Token::Type type;
  212|  40.1k|                        switch (c)
  213|  40.1k|                        {
  214|  23.7k|                            case ',':
  ------------------
  |  Branch (214:29): [True: 23.7k, False: 16.4k]
  ------------------
  215|  23.7k|                                type = Token::Type::Comma;
  216|  23.7k|                                break;
  217|  14.5k|                            case '(':
  ------------------
  |  Branch (217:29): [True: 14.5k, False: 25.6k]
  ------------------
  218|  14.5k|                                type = Token::Type::OpenBracket;
  219|  14.5k|                                break;
  220|  1.88k|                            case ')':
  ------------------
  |  Branch (220:29): [True: 1.88k, False: 38.3k]
  ------------------
  221|  1.88k|                                type = Token::Type::ClosingBracket;
  222|  1.88k|                                break;
  223|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  224|      0|                            default:
  ------------------
  |  Branch (224:29): [True: 0, False: 40.1k]
  ------------------
  225|      0|                                PHI_ASSERT_NOT_REACHED();
  226|      0|                                break;
  227|  40.1k|#endif
  228|  40.1k|                        }
  229|       |
  230|  40.1k|                        token_begin = i;
  231|       |
  232|  40.1k|                        tokens.emplace_back(
  233|  40.1k|                                type,
  234|  40.1k|                                source.substring_view(
  235|  40.1k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  236|  40.1k|                                        1u),
  237|  40.1k|                                current_line_number, current_column);
  238|  40.1k|                        break;
  239|       |
  240|   355k|                    default:
  ------------------
  |  Branch (240:21): [True: 355k, False: 101k]
  ------------------
  241|   355k|                        if (current_token.is_empty())
  ------------------
  |  Branch (241:29): [True: 111k, False: 243k]
  ------------------
  242|   111k|                        {
  243|   111k|                            token_begin = i;
  244|   111k|                        }
  245|       |
  246|       |                        // simply append the character
  247|   355k|                        current_token = source.substring_view(
  248|   355k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  249|   355k|                                current_token.length() + 1u);
  250|   457k|                }
  251|   457k|            }
  252|       |
  253|   476k|            current_column += 1u;
  254|   476k|        }
  255|       |
  256|       |        // Checked the entire string. Parse whats left if anything
  257|  4.20k|        if (!current_token.is_empty())
  ------------------
  |  Branch (257:13): [True: 3.12k, False: 1.07k]
  ------------------
  258|  3.12k|        {
  259|  3.12k|            tokens.emplace_back(
  260|  3.12k|                    ParseToken(source.substring_view(
  261|  3.12k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  262|  3.12k|                                       current_token.length()),
  263|  3.12k|                               current_line_number, current_column - current_token.length()));
  264|  3.12k|        }
  265|       |
  266|       |        // Finalize token stream
  267|  4.20k|        tokens.finalize();
  268|       |
  269|  4.20k|        return tokens;
  270|  4.20k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   16|   112k|    {
   17|   112k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (17:13): [True: 1.47k, False: 111k]
  |  Branch (17:13): [True: 855, False: 111k]
  |  Branch (17:36): [True: 855, False: 621]
  ------------------
   18|    855|        {
   19|    855|            auto number = ParseNumber(token.substring_view(1u));
   20|       |
   21|    855|            if (number)
  ------------------
  |  Branch (21:17): [True: 419, False: 436]
  ------------------
   22|    419|            {
   23|    419|                return {Token::Type::ImmediateInteger, token, line_number, column,
   24|    419|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   25|    419|            }
   26|       |
   27|    436|            return {Token::Type::ImmediateInteger, token, line_number, column};
   28|    855|        }
   29|       |
   30|   111k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (30:13): [True: 304, False: 111k]
  |  Branch (30:13): [True: 783, False: 111k]
  |  Branch (30:36): [True: 479, False: 111k]
  ------------------
   31|    783|        {
   32|    783|            return {Token::Type::Comment, token, line_number, column};
   33|    783|        }
   34|       |
   35|   111k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (35:66): [True: 3.10k, False: 107k]
  ------------------
   36|  3.10k|        {
   37|  3.10k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   38|  3.10k|                    static_cast<phi::uint32_t>(number->unsafe())};
   39|  3.10k|        }
   40|       |
   41|   107k|        if (IsFPSR(token))
  ------------------
  |  Branch (41:13): [True: 360, False: 107k]
  ------------------
   42|    360|        {
   43|    360|            return {Token::Type::RegisterStatus, token, line_number, column};
   44|    360|        }
   45|       |
   46|   107k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (46:60): [True: 1.55k, False: 105k]
  ------------------
   47|  1.55k|        {
   48|  1.55k|            return {Token::Type::RegisterInt, token, line_number, column,
   49|  1.55k|                    static_cast<phi::uint32_t>(id)};
   50|  1.55k|        }
   51|       |
   52|   105k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (52:64): [True: 1.67k, False: 104k]
  ------------------
   53|  1.67k|        {
   54|  1.67k|            return {Token::Type::RegisterFloat, token, line_number, column,
   55|  1.67k|                    static_cast<phi::uint32_t>(id)};
   56|  1.67k|        }
   57|       |
   58|   104k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (58:52): [True: 41.0k, False: 63.2k]
  ------------------
   59|  41.0k|        {
   60|  41.0k|            return {Token::Type::OpCode, token, line_number, column,
   61|  41.0k|                    static_cast<phi::uint32_t>(opcode)};
   62|  41.0k|        }
   63|       |
   64|  63.2k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   65|   104k|    }

LLVMFuzzerTestOneInput:
    7|  4.20k|{
    8|  4.20k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
    9|       |
   10|       |    // Parse it
   11|  4.20k|    dlx::Parser::Parse(source);
   12|       |
   13|  4.20k|    return 0;
   14|  4.20k|}


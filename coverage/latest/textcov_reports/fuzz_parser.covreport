_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  2.35M|        {
  173|  2.35M|            PHI_ASSERT(index < 3u);
  174|       |
  175|  2.35M|            switch (index.unsafe())
  176|  2.35M|            {
  177|  1.07M|                case 0:
  ------------------
  |  Branch (177:17): [True: 1.07M, False: 1.27M]
  ------------------
  178|  1.07M|                    return m_Arg1Type;
  179|       |
  180|   654k|                case 1:
  ------------------
  |  Branch (180:17): [True: 654k, False: 1.69M]
  ------------------
  181|   654k|                    return m_Arg2Type;
  182|       |
  183|   625k|                case 2:
  ------------------
  |  Branch (183:17): [True: 625k, False: 1.72M]
  ------------------
  184|   625k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 2.35M]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  2.35M|#endif
  191|  2.35M|            }
  192|  2.35M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|   593k|        {
  199|   593k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|   593k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 577k, False: 15.2k]
  ------------------
  203|   577k|            {
  204|   577k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   577k|            }
  206|   593k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 338k, False: 254k]
  ------------------
  207|   338k|            {
  208|   338k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   338k|            }
  210|   593k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 188k, False: 404k]
  ------------------
  211|   188k|            {
  212|   188k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  213|   188k|            }
  214|       |
  215|   593k|            return number_of_argument_required;
  216|   593k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|   593k|        {
  225|   593k|            return m_Executor;
  226|   593k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   469k|    {
   38|   469k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   469k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   469k|                                         static_cast<underlying_t>(rhs));
   42|   469k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   469k|    {
   55|   469k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   469k|        return static_cast<underlying_t>(type & test) != 0;
   58|   469k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  1.88M|    {
   31|  1.88M|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 24.2k, False: 1.86M]
  ------------------
   32|  24.2k|        {
   33|  24.2k|            return true;
   34|  24.2k|        }
   35|       |
   36|  1.86M|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 9.46k, False: 1.85M]
  ------------------
   37|  9.46k|        {
   38|  9.46k|            return true;
   39|  9.46k|        }
   40|       |
   41|  1.85M|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 712k, False: 1.13M]
  ------------------
   42|   712k|        {
   43|   712k|            return true;
   44|   712k|        }
   45|       |
   46|  1.13M|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 6.75k, False: 1.13M]
  ------------------
   47|  6.75k|        {
   48|  6.75k|            return true;
   49|  6.75k|        }
   50|       |
   51|  1.13M|        return false;
   52|  1.13M|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  1.13M|    {
   56|  1.13M|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 1.13M]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  1.13M|        const char first_char = token.at(0u);
   62|       |
   63|  1.13M|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 225k, False: 905k]
  ------------------
   64|   225k|        {
   65|   225k|            return phi::is_alpha(first_char);
   66|   225k|        }
   67|       |
   68|   905k|        phi::boolean just_under_scores = (first_char == '_');
   69|   905k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 153k, False: 751k]
  |  Branch (69:13): [True: 127k, False: 777k]
  |  Branch (69:43): [True: 127k, False: 25.8k]
  ------------------
   70|   127k|        {
   71|   127k|            return false;
   72|   127k|        }
   73|       |
   74|  2.95M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 2.47M, False: 481k]
  ------------------
   75|  2.47M|        {
   76|  2.47M|            const char c{token.at(index)};
   77|       |
   78|  2.47M|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 2.15M, False: 321k]
  ------------------
   79|  2.15M|            {
   80|  2.15M|                just_under_scores = false;
   81|  2.15M|            }
   82|   321k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 24.3k, False: 296k]
  ------------------
   83|  24.3k|            {
   84|  24.3k|                continue;
   85|  24.3k|            }
   86|   296k|            else
   87|   296k|            {
   88|   296k|                return false;
   89|   296k|            }
   90|  2.47M|        }
   91|       |
   92|   481k|        return !just_under_scores;
   93|   777k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|  5.14M|    {
  100|  5.14M|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 5.14M]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|  5.14M|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 826k, False: 4.32M]
  ------------------
  106|   826k|        {
  107|   826k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 113k, False: 712k]
  ------------------
  108|   113k|            {
  109|   113k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|   113k|            }
  111|       |
  112|   712k|            return {};
  113|   826k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|  4.32M|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 41.9k, False: 4.28M]
  ------------------
  117|  41.9k|        {
  118|  41.9k|            return {};
  119|  41.9k|        }
  120|       |
  121|  4.28M|        std::int32_t number{0};
  122|  4.28M|        phi::boolean is_negative{false};
  123|  4.28M|        phi::boolean starts_with_zero{false};
  124|  4.28M|        phi::boolean parsing_binary{false};
  125|  4.28M|        phi::boolean parsing_octal{false};
  126|  4.28M|        phi::boolean parsing_hexadecimal{false};
  127|  4.28M|        phi::boolean parsed_something{false};
  128|  4.28M|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|  4.82M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 4.74M, False: 82.4k]
  ------------------
  133|  4.74M|        {
  134|  4.74M|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|  4.74M|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 4.28M, False: 459k]
  ------------------
  138|  4.28M|            {
  139|  4.28M|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 9.65k, False: 4.27M]
  ------------------
  140|  9.65k|                {
  141|  9.65k|                    continue;
  142|  9.65k|                }
  143|       |
  144|  4.27M|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 32.4k, False: 4.23M]
  ------------------
  145|  32.4k|                {
  146|  32.4k|                    is_negative = true;
  147|  32.4k|                    continue;
  148|  32.4k|                }
  149|       |
  150|  4.23M|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 65.0k, False: 4.17M]
  ------------------
  151|  65.0k|                {
  152|  65.0k|                    starts_with_zero = true;
  153|  65.0k|                    continue;
  154|  65.0k|                }
  155|       |
  156|  4.17M|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 8.49k, False: 4.16M]
  ------------------
  157|  8.49k|                {
  158|  8.49k|                    return {};
  159|  8.49k|                }
  160|  4.17M|            }
  161|       |
  162|       |            // Second character
  163|  4.62M|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 187k, False: 4.43M]
  ------------------
  164|   187k|            {
  165|   187k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 65.0k, False: 122k]
  ------------------
  166|  65.0k|                {
  167|       |                    // Binary
  168|  65.0k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 9.07k, False: 55.9k]
  |  Branch (168:37): [True: 2.42k, False: 53.5k]
  ------------------
  169|  11.5k|                    {
  170|  11.5k|                        parsing_binary = true;
  171|  11.5k|                        continue;
  172|  11.5k|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  53.5k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 22.6k, False: 30.8k]
  |  Branch (175:37): [True: 5.08k, False: 25.8k]
  ------------------
  176|  27.7k|                    {
  177|  27.7k|                        parsing_hexadecimal = true;
  178|  27.7k|                        continue;
  179|  27.7k|                    }
  180|       |
  181|       |                    // Octal
  182|  25.8k|                    parsing_octal = true;
  183|  25.8k|                }
  184|   187k|            }
  185|       |
  186|       |            // Handle seperators
  187|  4.58M|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 10.8k, False: 4.57M]
  ------------------
  188|  10.8k|            {
  189|  10.8k|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 5.09k, False: 5.77k]
  ------------------
  190|  5.09k|                {
  191|  5.09k|                    return {};
  192|  5.09k|                }
  193|       |
  194|  5.77k|                parsed_separator = true;
  195|  5.77k|                continue;
  196|  10.8k|            }
  197|       |
  198|       |            // Check for over/underflow
  199|  4.57M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 127k, False: 4.44M]
  |  Branch (199:32): [True: 5.16k, False: 122k]
  ------------------
  200|  5.16k|            {
  201|       |                // Would underflow
  202|  5.16k|                return {};
  203|  5.16k|            }
  204|  4.56M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 4.44M, False: 122k]
  |  Branch (204:17): [True: 17.2k, False: 4.55M]
  |  Branch (204:33): [True: 17.2k, False: 4.43M]
  ------------------
  205|  17.2k|            {
  206|       |                // Would overflow
  207|  17.2k|                return {};
  208|  17.2k|            }
  209|       |
  210|  4.55M|            parsed_separator = false;
  211|  4.55M|            parsed_something = true;
  212|       |
  213|  4.55M|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 13.5k, False: 4.53M]
  ------------------
  214|  13.5k|            {
  215|  13.5k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 3.91k, False: 9.64k]
  ------------------
  216|  3.91k|                {
  217|  3.91k|                    return {};
  218|  3.91k|                }
  219|       |
  220|  9.64k|                number <<= 1;
  221|  9.64k|                number |= (c - '0');
  222|  9.64k|            }
  223|  4.53M|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 26.3k, False: 4.51M]
  ------------------
  224|  26.3k|            {
  225|  26.3k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 17.2k, False: 9.15k]
  ------------------
  226|  17.2k|                {
  227|  17.2k|                    return {};
  228|  17.2k|                }
  229|       |
  230|  9.15k|                number <<= 3;
  231|  9.15k|                number |= (c - '0');
  232|  9.15k|            }
  233|  4.51M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 41.4k, False: 4.47M]
  ------------------
  234|  41.4k|            {
  235|  41.4k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 22.3k, False: 19.0k]
  ------------------
  236|  22.3k|                {
  237|  22.3k|                    return {};
  238|  22.3k|                }
  239|       |
  240|  19.0k|                number <<= 4;
  241|  19.0k|                number |= phi::hex_digit_value(c).unsafe();
  242|  19.0k|            }
  243|  4.47M|            else
  244|  4.47M|            {
  245|  4.47M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 4.11M, False: 360k]
  ------------------
  246|  4.11M|                {
  247|  4.11M|                    return {};
  248|  4.11M|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|   360k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 111k, False: 249k]
  |  Branch (251:36): [True: 7.89k, False: 103k]
  ------------------
  252|  7.89k|                {
  253|  7.89k|                    return {};
  254|  7.89k|                }
  255|       |
  256|   352k|                number *= 10;
  257|   352k|                number += (c - '0');
  258|   352k|            }
  259|  4.55M|        }
  260|       |
  261|  82.4k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 78.3k, False: 4.13k]
  ------------------
  262|  78.3k|        {
  263|       |            // Check for over/underflow
  264|  78.3k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 16.6k, False: 61.7k]
  |  Branch (264:32): [True: 13.7k, False: 2.84k]
  ------------------
  265|  13.7k|            {
  266|       |                // Would underflow
  267|  13.7k|                return {};
  268|  13.7k|            }
  269|  64.5k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 61.7k, False: 2.84k]
  |  Branch (269:17): [True: 6.42k, False: 58.1k]
  |  Branch (269:33): [True: 6.42k, False: 55.2k]
  ------------------
  270|  6.42k|            {
  271|       |                // Would overflow
  272|  6.42k|                return {};
  273|  6.42k|            }
  274|       |
  275|  58.1k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 2.84k, False: 55.2k]
  ------------------
  276|  2.84k|            {
  277|  2.84k|                return static_cast<std::int16_t>(-number);
  278|  2.84k|            }
  279|       |
  280|  55.2k|            return static_cast<std::int16_t>(number);
  281|  58.1k|        }
  282|       |
  283|  4.13k|        return {};
  284|  82.4k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   282k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   282k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 3.90M, False: 0]
  ------------------
   64|  3.90M|            {
   65|  3.90M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 282k, False: 3.61M]
  ------------------
   66|   282k|                {
   67|   282k|                    return &token;
   68|   282k|                }
   69|  3.90M|            }
   70|       |
   71|      0|            return nullptr;
   72|   282k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  1.29M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.29M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.29M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  5.20M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  5.20M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  5.20M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  2.62M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.62M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.62M|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   593k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|   180k|    {
   25|   180k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|   180k|        switch (argument_number.unsafe())
   28|   180k|        {
   29|   125k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 125k, False: 55.2k]
  ------------------
   30|   125k|                m_Arg1 = argument;
   31|   125k|                break;
   32|  32.1k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 32.1k, False: 148k]
  ------------------
   33|  32.1k|                m_Arg2 = argument;
   34|  32.1k|                break;
   35|  23.0k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 23.0k, False: 157k]
  ------------------
   36|  23.0k|                m_Arg3 = argument;
   37|  23.0k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 180k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|   180k|#endif
   42|   180k|        }
   43|   180k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  1.95M|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  172|  21.8k|    {
  173|  21.8k|        InstructionArgument arg;
  174|  21.8k|        arg.m_Type                   = ArgumentType::IntRegister;
  175|  21.8k|        arg.register_int.register_id = id;
  176|  21.8k|        return arg;
  177|  21.8k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  180|  66.0k|    {
  181|  66.0k|        InstructionArgument arg;
  182|  66.0k|        arg.m_Type                     = ArgumentType::FloatRegister;
  183|  66.0k|        arg.register_float.register_id = id;
  184|  66.0k|        return arg;
  185|  66.0k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  188|  10.5k|    {
  189|  10.5k|        InstructionArgument arg;
  190|  10.5k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  191|  10.5k|        arg.immediate_value.signed_value = value;
  192|  10.5k|        return arg;
  193|  10.5k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  197|  18.0k|    {
  198|  18.0k|        InstructionArgument arg;
  199|  18.0k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  200|  18.0k|        arg.address_displacement.register_id  = id;
  201|  18.0k|        arg.address_displacement.displacement = displacement;
  202|  18.0k|        return arg;
  203|  18.0k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  206|  64.1k|    {
  207|  64.1k|        InstructionArgument arg;
  208|  64.1k|        arg.m_Type           = ArgumentType::Label;
  209|  64.1k|        arg.label.label_name = label_name;
  210|  64.1k|        return arg;
  211|  64.1k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   593k|    {
  453|   593k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   593k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|  6.56M|    {
   24|  6.56M|        switch (token.length().unsafe())
   25|  6.56M|        {
   26|       |            // 1 character OpCodes
   27|   921k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 921k, False: 5.64M]
  ------------------
   28|   921k|                const char c1 = token[0u];
   29|       |
   30|   921k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 250k, False: 670k]
  ------------------
   31|   250k|                {
   32|   250k|                    return OpCode::J;
   33|   250k|                }
   34|   670k|                break;
   35|   921k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|   989k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 989k, False: 5.57M]
  ------------------
   39|   989k|                const char c1 = token[0u];
   40|   989k|                const char c2 = token[1u];
   41|       |
   42|   989k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 632k, False: 357k]
  ------------------
   43|   989k|                {
   44|  17.2k|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 17.2k, False: 971k]
  ------------------
   45|  27.0k|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 9.82k, False: 979k]
  ------------------
   46|  27.0k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 11.0k, False: 16.0k]
  ------------------
   47|  11.0k|                        {
   48|  11.0k|                            return OpCode::JR;
   49|  11.0k|                        }
   50|  16.0k|                        break;
   51|       |
   52|  36.7k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 36.7k, False: 952k]
  ------------------
   53|  69.0k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 32.3k, False: 956k]
  ------------------
   54|  69.0k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 27.3k, False: 41.6k]
  ------------------
   55|  69.0k|                        {
   56|  11.8k|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 11.8k, False: 57.2k]
  ------------------
   57|  19.7k|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 7.89k, False: 61.1k]
  ------------------
   58|  19.7k|                                return OpCode::LB;
   59|  1.90k|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 1.90k, False: 67.1k]
  ------------------
   60|  2.40k|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 507, False: 68.5k]
  ------------------
   61|  2.40k|                                return OpCode::LD;
   62|  2.30k|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 2.30k, False: 66.7k]
  ------------------
   63|  6.01k|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 3.70k, False: 65.3k]
  ------------------
   64|  6.01k|                                return OpCode::LF;
   65|  5.22k|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 5.22k, False: 63.8k]
  ------------------
   66|  8.14k|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 2.92k, False: 66.1k]
  ------------------
   67|  8.14k|                                return OpCode::LH;
   68|  1.72k|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 1.72k, False: 67.3k]
  ------------------
   69|  5.42k|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 3.70k, False: 65.3k]
  ------------------
   70|  5.42k|                                return OpCode::LW;
   71|  69.0k|                        }
   72|  27.3k|                        break;
   73|  27.3k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 9.65k, False: 979k]
  ------------------
   74|  28.0k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 18.4k, False: 970k]
  ------------------
   75|  28.0k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 14.5k, False: 13.5k]
  ------------------
   76|  14.5k|                        {
   77|  14.5k|                            return OpCode::OR;
   78|  14.5k|                        }
   79|  13.5k|                        break;
   80|   175k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 175k, False: 814k]
  ------------------
   81|   232k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 57.9k, False: 931k]
  ------------------
   82|   232k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 52.7k, False: 180k]
  ------------------
   83|   232k|                        {
   84|  10.7k|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 10.7k, False: 222k]
  ------------------
   85|  20.4k|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 9.61k, False: 223k]
  ------------------
   86|  20.4k|                                return OpCode::SB;
   87|  69.5k|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 69.5k, False: 163k]
  ------------------
   88|  82.8k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 13.3k, False: 219k]
  ------------------
   89|  82.8k|                                return OpCode::SD;
   90|  7.98k|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 7.98k, False: 225k]
  ------------------
   91|  10.8k|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 2.84k, False: 230k]
  ------------------
   92|  10.8k|                                return OpCode::SF;
   93|  16.2k|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 16.2k, False: 216k]
  ------------------
   94|  22.7k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 6.51k, False: 226k]
  ------------------
   95|  22.7k|                                return OpCode::SH;
   96|  10.3k|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 10.3k, False: 222k]
  ------------------
   97|  43.3k|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 32.9k, False: 200k]
  ------------------
   98|  43.3k|                                return OpCode::SW;
   99|   232k|                        }
  100|  52.7k|                        break;
  101|   989k|                }
  102|   741k|                break;
  103|   989k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|  1.27M|            case 3: {
  ------------------
  |  Branch (106:13): [True: 1.27M, False: 5.29M]
  ------------------
  107|  1.27M|                const char c1 = token[0u];
  108|  1.27M|                const char c2 = token[1u];
  109|  1.27M|                const char c3 = token[2u];
  110|       |
  111|  1.27M|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 364k, False: 905k]
  ------------------
  112|  1.27M|                {
  113|  64.6k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 64.6k, False: 1.20M]
  ------------------
  114|  80.5k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 15.8k, False: 1.25M]
  ------------------
  115|  80.5k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 22.4k, False: 58.0k]
  |  Branch (115:29): [True: 19.6k, False: 60.9k]
  |  Branch (115:45): [True: 19.6k, False: 2.83k]
  ------------------
  116|  19.6k|                        {
  117|  19.6k|                            return OpCode::ADD;
  118|  19.6k|                        }
  119|  60.9k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 32.1k, False: 28.7k]
  |  Branch (119:34): [True: 10.7k, False: 50.1k]
  |  Branch (119:50): [True: 10.7k, False: 21.4k]
  ------------------
  120|  10.7k|                        {
  121|  10.7k|                            return OpCode::AND;
  122|  10.7k|                        }
  123|  50.1k|                        break;
  124|       |
  125|  50.1k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 10.8k, False: 1.25M]
  ------------------
  126|  69.2k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 58.4k, False: 1.21M]
  ------------------
  127|  69.2k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 46.9k, False: 22.2k]
  |  Branch (127:29): [True: 34.3k, False: 34.8k]
  |  Branch (127:45): [True: 34.3k, False: 12.5k]
  ------------------
  128|  34.3k|                        {
  129|  34.3k|                            return OpCode::DIV;
  130|  34.3k|                        }
  131|  34.8k|                        break;
  132|       |
  133|  34.8k|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 6.72k, False: 1.26M]
  ------------------
  134|  43.0k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 36.3k, False: 1.23M]
  ------------------
  135|  43.0k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 38.2k, False: 4.80k]
  ------------------
  136|  38.2k|                        {
  137|  38.2k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 19.8k, False: 18.4k]
  ------------------
  138|  19.8k|                            {
  139|  19.8k|                                return OpCode::EQD;
  140|  19.8k|                            }
  141|  18.4k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 12.7k, False: 5.68k]
  ------------------
  142|  12.7k|                            {
  143|  12.7k|                                return OpCode::EQF;
  144|  12.7k|                            }
  145|  38.2k|                        }
  146|  10.4k|                        break;
  147|       |
  148|  67.4k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 67.4k, False: 1.20M]
  ------------------
  149|  87.5k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 20.0k, False: 1.25M]
  ------------------
  150|  87.5k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 32.7k, False: 54.7k]
  ------------------
  151|  32.7k|                        {
  152|  32.7k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 22.4k, False: 10.2k]
  ------------------
  153|  22.4k|                            {
  154|  22.4k|                                return OpCode::GED;
  155|  22.4k|                            }
  156|  10.2k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 4.35k, False: 5.92k]
  ------------------
  157|  4.35k|                            {
  158|  4.35k|                                return OpCode::GEF;
  159|  4.35k|                            }
  160|  32.7k|                        }
  161|  54.7k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 20.0k, False: 34.6k]
  ------------------
  162|  20.0k|                        {
  163|  20.0k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 6.75k, False: 13.3k]
  ------------------
  164|  6.75k|                            {
  165|  6.75k|                                return OpCode::GTD;
  166|  6.75k|                            }
  167|  13.3k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 8.00k, False: 5.29k]
  ------------------
  168|  8.00k|                            {
  169|  8.00k|                                return OpCode::GTF;
  170|  8.00k|                            }
  171|  13.3k|                        }
  172|  45.9k|                        break;
  173|       |
  174|  45.9k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 6.43k, False: 1.26M]
  ------------------
  175|  32.0k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 25.6k, False: 1.24M]
  ------------------
  176|  32.0k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 24.4k, False: 7.55k]
  |  Branch (176:29): [True: 19.7k, False: 12.3k]
  |  Branch (176:45): [True: 19.7k, False: 4.77k]
  ------------------
  177|  19.7k|                        {
  178|  19.7k|                            return OpCode::JAL;
  179|  19.7k|                        }
  180|  12.3k|                        break;
  181|       |
  182|  54.3k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 54.3k, False: 1.21M]
  ------------------
  183|   140k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 86.5k, False: 1.18M]
  ------------------
  184|   140k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 9.11k, False: 131k]
  ------------------
  185|   140k|                        {
  186|  31.4k|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 31.4k, False: 109k]
  ------------------
  187|  38.7k|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 7.29k, False: 133k]
  ------------------
  188|  38.7k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 18.5k, False: 20.2k]
  ------------------
  189|  18.5k|                                {
  190|  18.5k|                                    return OpCode::LBU;
  191|  18.5k|                                }
  192|  20.2k|                                break;
  193|       |
  194|  20.2k|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 17.9k, False: 122k]
  ------------------
  195|  27.6k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 9.75k, False: 131k]
  ------------------
  196|  27.6k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 9.47k, False: 18.2k]
  ------------------
  197|  9.47k|                                {
  198|  9.47k|                                    return OpCode::LED;
  199|  9.47k|                                }
  200|  18.2k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 13.8k, False: 4.37k]
  ------------------
  201|  13.8k|                                {
  202|  13.8k|                                    return OpCode::LEF;
  203|  13.8k|                                }
  204|  4.37k|                                break;
  205|       |
  206|  4.37k|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 3.32k, False: 137k]
  ------------------
  207|  21.7k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 18.4k, False: 122k]
  ------------------
  208|  21.7k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 13.2k, False: 8.51k]
  ------------------
  209|  13.2k|                                {
  210|  13.2k|                                    return OpCode::LHI;
  211|  13.2k|                                }
  212|  8.51k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 4.77k, False: 3.73k]
  ------------------
  213|  4.77k|                                {
  214|  4.77k|                                    return OpCode::LHU;
  215|  4.77k|                                }
  216|  3.73k|                                break;
  217|       |
  218|  10.2k|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 10.2k, False: 130k]
  ------------------
  219|  22.1k|                            case 't':
  ------------------
  |  Branch (219:29): [True: 11.8k, False: 129k]
  ------------------
  220|  22.1k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 13.3k, False: 8.81k]
  ------------------
  221|  13.3k|                                {
  222|  13.3k|                                    return OpCode::LTD;
  223|  13.3k|                                }
  224|  8.81k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 5.45k, False: 3.36k]
  ------------------
  225|  5.45k|                                {
  226|  5.45k|                                    return OpCode::LTF;
  227|  5.45k|                                }
  228|  3.36k|                                break;
  229|       |
  230|  6.61k|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 6.61k, False: 134k]
  ------------------
  231|  21.5k|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 14.8k, False: 126k]
  ------------------
  232|  21.5k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 12.4k, False: 9.01k]
  ------------------
  233|  12.4k|                                {
  234|  12.4k|                                    return OpCode::LWU;
  235|  12.4k|                                }
  236|  9.01k|                                break;
  237|   140k|                        }
  238|  49.8k|                        break;
  239|       |
  240|  49.8k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 8.97k, False: 1.26M]
  ------------------
  241|  46.4k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 37.4k, False: 1.23M]
  ------------------
  242|  46.4k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 28.9k, False: 17.4k]
  ------------------
  243|  28.9k|                        {
  244|  28.9k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 12.5k, False: 16.4k]
  ------------------
  245|  12.5k|                            {
  246|  12.5k|                                return OpCode::NED;
  247|  12.5k|                            }
  248|  16.4k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 11.1k, False: 5.24k]
  ------------------
  249|  11.1k|                            {
  250|  11.1k|                                return OpCode::NEF;
  251|  11.1k|                            }
  252|  28.9k|                        }
  253|  17.4k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 9.60k, False: 7.88k]
  |  Branch (253:34): [True: 6.95k, False: 10.5k]
  |  Branch (253:50): [True: 6.95k, False: 2.64k]
  ------------------
  254|  6.95k|                        {
  255|  6.95k|                            return OpCode::NOP;
  256|  6.95k|                        }
  257|       |
  258|  15.7k|                        break;
  259|       |
  260|  15.7k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 9.83k, False: 1.26M]
  ------------------
  261|  35.9k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 26.1k, False: 1.24M]
  ------------------
  262|  35.9k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 23.7k, False: 12.2k]
  |  Branch (262:29): [True: 16.9k, False: 18.9k]
  |  Branch (262:45): [True: 16.9k, False: 6.75k]
  ------------------
  263|  16.9k|                        {
  264|  16.9k|                            return OpCode::ORI;
  265|  16.9k|                        }
  266|  18.9k|                        break;
  267|       |
  268|   185k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 185k, False: 1.08M]
  ------------------
  269|   343k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 157k, False: 1.11M]
  ------------------
  270|   343k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 36.1k, False: 307k]
  ------------------
  271|   343k|                        {
  272|  26.1k|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 26.1k, False: 317k]
  ------------------
  273|  33.0k|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 6.97k, False: 336k]
  ------------------
  274|  33.0k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 17.7k, False: 15.3k]
  ------------------
  275|  17.7k|                                {
  276|  17.7k|                                    return OpCode::SBU;
  277|  17.7k|                                }
  278|  15.3k|                                break;
  279|       |
  280|  15.3k|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 11.5k, False: 331k]
  ------------------
  281|  22.3k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 10.8k, False: 332k]
  ------------------
  282|  22.3k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 11.1k, False: 11.1k]
  ------------------
  283|  11.1k|                                {
  284|  11.1k|                                    return OpCode::SEQ;
  285|  11.1k|                                }
  286|  11.1k|                                break;
  287|       |
  288|  25.7k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 25.7k, False: 317k]
  ------------------
  289|  40.7k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 14.9k, False: 328k]
  ------------------
  290|  40.7k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 11.3k, False: 29.3k]
  ------------------
  291|  11.3k|                                {
  292|  11.3k|                                    return OpCode::SGE;
  293|  11.3k|                                }
  294|  29.3k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 11.5k, False: 17.7k]
  ------------------
  295|  11.5k|                                {
  296|  11.5k|                                    return OpCode::SGT;
  297|  11.5k|                                }
  298|  17.7k|                                break;
  299|       |
  300|  17.7k|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 5.71k, False: 337k]
  ------------------
  301|  11.9k|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 6.21k, False: 337k]
  ------------------
  302|  11.9k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 10.2k, False: 1.63k]
  ------------------
  303|  10.2k|                                {
  304|  10.2k|                                    return OpCode::SHU;
  305|  10.2k|                                }
  306|  1.63k|                                break;
  307|       |
  308|  31.1k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 31.1k, False: 312k]
  ------------------
  309|  72.9k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 41.8k, False: 301k]
  ------------------
  310|  72.9k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 5.50k, False: 67.4k]
  ------------------
  311|  72.9k|                                {
  312|  7.92k|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 7.92k, False: 65.0k]
  ------------------
  313|  24.0k|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 16.1k, False: 56.8k]
  ------------------
  314|  24.0k|                                        return OpCode::SLA;
  315|       |
  316|  3.03k|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 3.03k, False: 69.9k]
  ------------------
  317|  13.5k|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 10.5k, False: 62.4k]
  ------------------
  318|  13.5k|                                        return OpCode::SLE;
  319|       |
  320|  5.63k|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 5.63k, False: 67.3k]
  ------------------
  321|  16.0k|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 10.4k, False: 62.5k]
  ------------------
  322|  16.0k|                                        return OpCode::SLL;
  323|       |
  324|  9.05k|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 9.05k, False: 63.9k]
  ------------------
  325|  13.8k|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 4.76k, False: 68.2k]
  ------------------
  326|  13.8k|                                        return OpCode::SLT;
  327|  72.9k|                                }
  328|  5.50k|                                break;
  329|       |
  330|  11.7k|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 11.7k, False: 331k]
  ------------------
  331|  28.2k|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 16.5k, False: 327k]
  ------------------
  332|  28.2k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 15.7k, False: 12.4k]
  ------------------
  333|  15.7k|                                {
  334|  15.7k|                                    return OpCode::SNE;
  335|  15.7k|                                }
  336|  12.4k|                                break;
  337|       |
  338|  25.6k|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 25.6k, False: 317k]
  ------------------
  339|  42.8k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 17.1k, False: 326k]
  ------------------
  340|  42.8k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 15.0k, False: 27.8k]
  ------------------
  341|  15.0k|                                {
  342|  15.0k|                                    return OpCode::SRA;
  343|  15.0k|                                }
  344|  27.8k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 18.8k, False: 8.92k]
  ------------------
  345|  18.8k|                                {
  346|  18.8k|                                    return OpCode::SRL;
  347|  18.8k|                                }
  348|  8.92k|                                break;
  349|       |
  350|  20.8k|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 20.8k, False: 322k]
  ------------------
  351|  29.6k|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 8.77k, False: 334k]
  ------------------
  352|  29.6k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 23.4k, False: 6.19k]
  ------------------
  353|  23.4k|                                {
  354|  23.4k|                                    return OpCode::SUB;
  355|  23.4k|                                }
  356|  6.19k|                                break;
  357|       |
  358|  6.38k|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 6.38k, False: 337k]
  ------------------
  359|  25.6k|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 19.2k, False: 324k]
  ------------------
  360|  25.6k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 8.90k, False: 16.7k]
  ------------------
  361|  8.90k|                                {
  362|  8.90k|                                    return OpCode::SWU;
  363|  8.90k|                                }
  364|  16.7k|                                break;
  365|   343k|                        }
  366|       |
  367|   148k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 16.5k, False: 1.25M]
  ------------------
  368|   158k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 9.61k, False: 1.26M]
  ------------------
  369|   158k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 22.5k, False: 135k]
  |  Branch (369:29): [True: 14.2k, False: 143k]
  |  Branch (369:45): [True: 14.2k, False: 8.36k]
  ------------------
  370|  14.2k|                        {
  371|  14.2k|                            return OpCode::XOR;
  372|  14.2k|                        }
  373|   143k|                        break;
  374|  1.27M|                }
  375|   747k|                break;
  376|  1.27M|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  1.53M|            case 4: {
  ------------------
  |  Branch (379:13): [True: 1.53M, False: 5.02M]
  ------------------
  380|  1.53M|                const char c1 = token[0u];
  381|  1.53M|                const char c2 = token[1u];
  382|  1.53M|                const char c3 = token[2u];
  383|  1.53M|                const char c4 = token[3u];
  384|       |
  385|  1.53M|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 317k, False: 1.22M]
  ------------------
  386|  1.53M|                {
  387|   101k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 101k, False: 1.43M]
  ------------------
  388|   193k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 91.4k, False: 1.44M]
  ------------------
  389|   193k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 9.57k, False: 183k]
  ------------------
  390|   193k|                        {
  391|  68.1k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 68.1k, False: 125k]
  ------------------
  392|   144k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 76.2k, False: 117k]
  ------------------
  393|   144k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 130k, False: 13.4k]
  ------------------
  394|   130k|                                {
  395|   130k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 11.6k, False: 119k]
  ------------------
  396|   130k|                                    {
  397|  27.9k|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 27.9k, False: 103k]
  ------------------
  398|  38.1k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 10.2k, False: 120k]
  ------------------
  399|  38.1k|                                            return OpCode::ADDD;
  400|       |
  401|  9.73k|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 9.73k, False: 121k]
  ------------------
  402|  18.9k|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 9.23k, False: 121k]
  ------------------
  403|  18.9k|                                            return OpCode::ADDF;
  404|       |
  405|  14.8k|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 14.8k, False: 116k]
  ------------------
  406|  25.9k|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 11.1k, False: 119k]
  ------------------
  407|  25.9k|                                            return OpCode::ADDI;
  408|       |
  409|  17.6k|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 17.6k, False: 113k]
  ------------------
  410|  36.2k|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 18.6k, False: 112k]
  ------------------
  411|  36.2k|                                            return OpCode::ADDU;
  412|   130k|                                    }
  413|   130k|                                }
  414|  25.0k|                                break;
  415|       |
  416|  25.0k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 15.4k, False: 177k]
  ------------------
  417|  39.3k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 23.8k, False: 169k]
  ------------------
  418|  39.3k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 17.9k, False: 21.3k]
  |  Branch (418:37): [True: 6.66k, False: 32.6k]
  |  Branch (418:53): [True: 6.66k, False: 11.2k]
  ------------------
  419|  6.66k|                                {
  420|  6.66k|                                    return OpCode::ANDI;
  421|  6.66k|                                }
  422|       |
  423|  32.6k|                                break;
  424|   193k|                        }
  425|  67.2k|                        break;
  426|       |
  427|  67.2k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 33.9k, False: 1.50M]
  ------------------
  428|   109k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 75.1k, False: 1.46M]
  ------------------
  429|   109k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 5.22k, False: 103k]
  ------------------
  430|   109k|                        {
  431|  17.9k|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 17.9k, False: 91.1k]
  ------------------
  432|  24.9k|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 6.91k, False: 102k]
  ------------------
  433|  24.9k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 14.9k, False: 9.95k]
  |  Branch (433:37): [True: 6.88k, False: 18.0k]
  |  Branch (433:53): [True: 6.88k, False: 8.06k]
  ------------------
  434|  6.88k|                                {
  435|  6.88k|                                    return OpCode::BEQZ;
  436|  6.88k|                                }
  437|  18.0k|                                break;
  438|       |
  439|  18.0k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 8.41k, False: 100k]
  ------------------
  440|  31.8k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 23.3k, False: 85.7k]
  ------------------
  441|  31.8k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 24.8k, False: 6.95k]
  ------------------
  442|  24.8k|                                {
  443|  24.8k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 11.7k, False: 13.0k]
  ------------------
  444|  11.7k|                                    {
  445|  11.7k|                                        return OpCode::BFPF;
  446|  11.7k|                                    }
  447|  13.0k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 9.65k, False: 3.41k]
  ------------------
  448|  9.65k|                                    {
  449|  9.65k|                                        return OpCode::BFPT;
  450|  9.65k|                                    }
  451|  24.8k|                                }
  452|  10.3k|                                break;
  453|       |
  454|  11.8k|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 11.8k, False: 97.3k]
  ------------------
  455|  47.1k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 35.3k, False: 73.7k]
  ------------------
  456|  47.1k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 41.2k, False: 5.88k]
  |  Branch (456:37): [True: 24.3k, False: 22.8k]
  |  Branch (456:53): [True: 24.3k, False: 16.9k]
  ------------------
  457|  24.3k|                                {
  458|  24.3k|                                    return OpCode::BNEZ;
  459|  24.3k|                                }
  460|   109k|                        }
  461|  56.4k|                        break;
  462|       |
  463|  56.4k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 15.4k, False: 1.52M]
  ------------------
  464|   114k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 99.0k, False: 1.44M]
  ------------------
  465|   114k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 92.4k, False: 21.9k]
  |  Branch (465:29): [True: 74.1k, False: 40.3k]
  |  Branch (465:45): [True: 74.1k, False: 18.3k]
  ------------------
  466|  74.1k|                        {
  467|  74.1k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 9.93k, False: 64.1k]
  ------------------
  468|  74.1k|                            {
  469|  4.64k|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 4.64k, False: 69.4k]
  ------------------
  470|  12.6k|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 8.05k, False: 66.0k]
  ------------------
  471|  12.6k|                                    return OpCode::DIVD;
  472|       |
  473|  8.48k|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 8.48k, False: 65.6k]
  ------------------
  474|  11.0k|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 2.60k, False: 71.5k]
  ------------------
  475|  11.0k|                                    return OpCode::DIVF;
  476|       |
  477|  9.72k|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 9.72k, False: 64.3k]
  ------------------
  478|  25.9k|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 16.2k, False: 57.8k]
  ------------------
  479|  25.9k|                                    return OpCode::DIVI;
  480|       |
  481|  9.45k|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 9.45k, False: 64.6k]
  ------------------
  482|  14.4k|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 4.97k, False: 69.1k]
  ------------------
  483|  14.4k|                                    return OpCode::DIVU;
  484|  74.1k|                            }
  485|  74.1k|                        }
  486|  50.3k|                        break;
  487|       |
  488|  50.3k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 4.03k, False: 1.53M]
  ------------------
  489|  35.1k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 31.1k, False: 1.50M]
  ------------------
  490|  35.1k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 30.6k, False: 4.46k]
  |  Branch (490:29): [True: 18.8k, False: 16.3k]
  |  Branch (490:45): [True: 28.0k, False: 2.63k]
  |  Branch (490:61): [True: 18.8k, False: 9.21k]
  ------------------
  491|  18.8k|                        {
  492|  18.8k|                            return OpCode::HALT;
  493|  18.8k|                        }
  494|  16.3k|                        break;
  495|       |
  496|  16.3k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 7.68k, False: 1.53M]
  ------------------
  497|  56.3k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 48.6k, False: 1.49M]
  ------------------
  498|  56.3k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 48.3k, False: 8.00k]
  |  Branch (498:29): [True: 15.5k, False: 40.8k]
  |  Branch (498:45): [True: 35.8k, False: 12.5k]
  |  Branch (498:61): [True: 15.5k, False: 20.2k]
  ------------------
  499|  15.5k|                        {
  500|  15.5k|                            return OpCode::JALR;
  501|  15.5k|                        }
  502|  40.8k|                        break;
  503|       |
  504|  40.8k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 15.7k, False: 1.52M]
  ------------------
  505|  88.1k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 72.4k, False: 1.46M]
  ------------------
  506|  88.1k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 48.7k, False: 39.3k]
  |  Branch (506:29): [True: 43.1k, False: 45.0k]
  |  Branch (506:45): [True: 43.1k, False: 5.63k]
  ------------------
  507|  43.1k|                        {
  508|  43.1k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 9.27k, False: 33.8k]
  ------------------
  509|  9.27k|                            {
  510|  9.27k|                                return OpCode::MOVD;
  511|  9.27k|                            }
  512|  33.8k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 21.4k, False: 12.4k]
  ------------------
  513|  21.4k|                            {
  514|  21.4k|                                return OpCode::MOVF;
  515|  21.4k|                            }
  516|  43.1k|                        }
  517|  45.0k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 31.4k, False: 13.5k]
  |  Branch (517:34): [True: 20.7k, False: 24.2k]
  |  Branch (517:50): [True: 24.8k, False: 6.58k]
  |  Branch (517:66): [True: 20.7k, False: 4.07k]
  ------------------
  518|  20.7k|                        {
  519|  20.7k|                            return OpCode::MULT;
  520|  20.7k|                        }
  521|  36.6k|                        break;
  522|       |
  523|   262k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 262k, False: 1.27M]
  ------------------
  524|   553k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 290k, False: 1.24M]
  ------------------
  525|   553k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 22.2k, False: 530k]
  ------------------
  526|   553k|                        {
  527|  39.8k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 39.8k, False: 513k]
  ------------------
  528|  49.9k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 10.1k, False: 543k]
  ------------------
  529|  49.9k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 40.0k, False: 9.93k]
  ------------------
  530|  40.0k|                                {
  531|  40.0k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 15.4k, False: 24.6k]
  ------------------
  532|  15.4k|                                    {
  533|  15.4k|                                        return OpCode::SEQI;
  534|  15.4k|                                    }
  535|  24.6k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 10.3k, False: 14.2k]
  ------------------
  536|  10.3k|                                    {
  537|  10.3k|                                        return OpCode::SEQU;
  538|  10.3k|                                    }
  539|  40.0k|                                }
  540|  24.2k|                                break;
  541|       |
  542|  40.7k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 40.7k, False: 512k]
  ------------------
  543|   126k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 85.8k, False: 467k]
  ------------------
  544|   126k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 60.7k, False: 65.8k]
  ------------------
  545|  60.7k|                                {
  546|  60.7k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 24.6k, False: 36.1k]
  ------------------
  547|  24.6k|                                    {
  548|  24.6k|                                        return OpCode::SGEI;
  549|  24.6k|                                    }
  550|  36.1k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 26.8k, False: 9.31k]
  ------------------
  551|  26.8k|                                    {
  552|  26.8k|                                        return OpCode::SGEU;
  553|  26.8k|                                    }
  554|  60.7k|                                }
  555|  65.8k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 51.0k, False: 14.7k]
  ------------------
  556|  51.0k|                                {
  557|  51.0k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 16.7k, False: 34.3k]
  ------------------
  558|  16.7k|                                    {
  559|  16.7k|                                        return OpCode::SGTI;
  560|  16.7k|                                    }
  561|  34.3k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 28.2k, False: 6.13k]
  ------------------
  562|  28.2k|                                    {
  563|  28.2k|                                        return OpCode::SGTU;
  564|  28.2k|                                    }
  565|  51.0k|                                }
  566|  30.1k|                                break;
  567|       |
  568|  45.8k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 45.8k, False: 507k]
  ------------------
  569|   149k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 103k, False: 449k]
  ------------------
  570|   149k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 9.46k, False: 139k]
  ------------------
  571|   149k|                                {
  572|  12.3k|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 12.3k, False: 136k]
  ------------------
  573|  22.4k|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 10.0k, False: 139k]
  ------------------
  574|  22.4k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 15.4k, False: 6.93k]
  ------------------
  575|  15.4k|                                        {
  576|  15.4k|                                            return OpCode::SLAI;
  577|  15.4k|                                        }
  578|  6.93k|                                        break;
  579|       |
  580|  28.9k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 28.9k, False: 120k]
  ------------------
  581|  34.5k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 5.55k, False: 143k]
  ------------------
  582|  34.5k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 16.0k, False: 18.4k]
  ------------------
  583|  16.0k|                                        {
  584|  16.0k|                                            return OpCode::SLEI;
  585|  16.0k|                                        }
  586|  18.4k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 14.7k, False: 3.68k]
  ------------------
  587|  14.7k|                                        {
  588|  14.7k|                                            return OpCode::SLEU;
  589|  14.7k|                                        }
  590|  3.68k|                                        break;
  591|       |
  592|  6.89k|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 6.89k, False: 142k]
  ------------------
  593|  23.3k|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 16.4k, False: 132k]
  ------------------
  594|  23.3k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 17.2k, False: 6.07k]
  ------------------
  595|  17.2k|                                        {
  596|  17.2k|                                            return OpCode::SLLI;
  597|  17.2k|                                        }
  598|  6.07k|                                        break;
  599|       |
  600|  35.5k|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 35.5k, False: 113k]
  ------------------
  601|  59.3k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 23.8k, False: 125k]
  ------------------
  602|  59.3k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 16.3k, False: 43.0k]
  ------------------
  603|  16.3k|                                        {
  604|  16.3k|                                            return OpCode::SLTI;
  605|  16.3k|                                        }
  606|  43.0k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 23.8k, False: 19.1k]
  ------------------
  607|  23.8k|                                        {
  608|  23.8k|                                            return OpCode::SLTU;
  609|  23.8k|                                        }
  610|  19.1k|                                        break;
  611|   149k|                                }
  612|       |
  613|  51.5k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 6.19k, False: 546k]
  ------------------
  614|   107k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 55.9k, False: 497k]
  ------------------
  615|   107k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 60.0k, False: 47.4k]
  ------------------
  616|  60.0k|                                {
  617|  60.0k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 14.7k, False: 45.2k]
  ------------------
  618|  14.7k|                                    {
  619|  14.7k|                                        return OpCode::SNEI;
  620|  14.7k|                                    }
  621|  45.2k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 24.6k, False: 20.5k]
  ------------------
  622|  24.6k|                                    {
  623|  24.6k|                                        return OpCode::SNEU;
  624|  24.6k|                                    }
  625|  60.0k|                                }
  626|  68.0k|                                break;
  627|       |
  628|  68.0k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 25.8k, False: 527k]
  ------------------
  629|  48.7k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 22.8k, False: 530k]
  ------------------
  630|  48.7k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 24.6k, False: 24.0k]
  |  Branch (630:37): [True: 18.6k, False: 30.0k]
  |  Branch (630:53): [True: 18.6k, False: 6.00k]
  ------------------
  631|  18.6k|                                {
  632|  18.6k|                                    return OpCode::SRAI;
  633|  18.6k|                                }
  634|  30.0k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 23.3k, False: 6.69k]
  |  Branch (634:42): [True: 9.12k, False: 20.9k]
  |  Branch (634:58): [True: 9.12k, False: 14.2k]
  ------------------
  635|  9.12k|                                {
  636|  9.12k|                                    return OpCode::SRLI;
  637|  9.12k|                                }
  638|  20.9k|                                break;
  639|       |
  640|  34.9k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 34.9k, False: 518k]
  ------------------
  641|  94.4k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 59.4k, False: 493k]
  ------------------
  642|  94.4k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 83.2k, False: 11.1k]
  ------------------
  643|  83.2k|                                {
  644|  83.2k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 16.0k, False: 67.2k]
  ------------------
  645|  83.2k|                                    {
  646|  13.6k|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 13.6k, False: 69.6k]
  ------------------
  647|  20.7k|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 7.02k, False: 76.2k]
  ------------------
  648|  20.7k|                                            return OpCode::SUBD;
  649|       |
  650|  8.14k|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 8.14k, False: 75.1k]
  ------------------
  651|  16.4k|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 8.26k, False: 75.0k]
  ------------------
  652|  16.4k|                                            return OpCode::SUBF;
  653|       |
  654|  5.66k|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 5.66k, False: 77.6k]
  ------------------
  655|  15.5k|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 9.84k, False: 73.4k]
  ------------------
  656|  15.5k|                                            return OpCode::SUBI;
  657|       |
  658|  7.43k|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 7.43k, False: 75.8k]
  ------------------
  659|  14.6k|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 7.18k, False: 76.1k]
  ------------------
  660|  14.6k|                                            return OpCode::SUBU;
  661|  83.2k|                                    }
  662|  83.2k|                                }
  663|  27.1k|                                break;
  664|   553k|                        }
  665|   192k|                        break;
  666|       |
  667|   192k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 5.42k, False: 1.53M]
  ------------------
  668|  17.6k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 12.1k, False: 1.52M]
  ------------------
  669|  17.6k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 10.8k, False: 6.74k]
  |  Branch (669:29): [True: 3.14k, False: 14.4k]
  |  Branch (669:45): [True: 6.46k, False: 4.41k]
  |  Branch (669:61): [True: 3.14k, False: 3.32k]
  ------------------
  670|  3.14k|                        {
  671|  3.14k|                            return OpCode::TRAP;
  672|  3.14k|                        }
  673|  14.4k|                        break;
  674|  27.2k|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 27.2k, False: 1.51M]
  ------------------
  675|  54.1k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 26.8k, False: 1.51M]
  ------------------
  676|  54.1k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 44.6k, False: 9.45k]
  |  Branch (676:29): [True: 21.1k, False: 32.9k]
  |  Branch (676:45): [True: 37.6k, False: 6.99k]
  |  Branch (676:61): [True: 21.1k, False: 16.5k]
  ------------------
  677|  21.1k|                        {
  678|  21.1k|                            return OpCode::XORI;
  679|  21.1k|                        }
  680|  32.9k|                        break;
  681|  1.53M|                }
  682|   825k|                break;
  683|  1.53M|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|   916k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 916k, False: 5.64M]
  ------------------
  687|   916k|                const char c1 = token[0u];
  688|   916k|                const char c2 = token[1u];
  689|   916k|                const char c3 = token[2u];
  690|   916k|                const char c4 = token[3u];
  691|   916k|                const char c5 = token[4u];
  692|       |
  693|   916k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 202k, False: 714k]
  ------------------
  694|   916k|                {
  695|  26.4k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 26.4k, False: 890k]
  ------------------
  696|  99.5k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 73.1k, False: 843k]
  ------------------
  697|  99.5k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 91.7k, False: 7.80k]
  |  Branch (697:29): [True: 20.2k, False: 79.2k]
  |  Branch (697:45): [True: 79.7k, False: 11.9k]
  |  Branch (697:61): [True: 58.4k, False: 21.2k]
  |  Branch (697:77): [True: 20.2k, False: 38.1k]
  ------------------
  698|  20.2k|                        {
  699|  20.2k|                            return OpCode::ADDUI;
  700|  20.2k|                        }
  701|  79.2k|                        break;
  702|       |
  703|  79.2k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 7.52k, False: 909k]
  ------------------
  704|  80.9k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 73.4k, False: 843k]
  ------------------
  705|  80.9k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 65.4k, False: 15.5k]
  |  Branch (705:29): [True: 22.6k, False: 58.3k]
  |  Branch (705:45): [True: 50.2k, False: 15.2k]
  |  Branch (705:61): [True: 37.1k, False: 13.1k]
  |  Branch (705:77): [True: 22.6k, False: 14.4k]
  ------------------
  706|  22.6k|                        {
  707|  22.6k|                            return OpCode::DIVUI;
  708|  22.6k|                        }
  709|  58.3k|                        break;
  710|       |
  711|  58.3k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 37.1k, False: 879k]
  ------------------
  712|   142k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 105k, False: 810k]
  ------------------
  713|   142k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 101k, False: 41.2k]
  |  Branch (713:29): [True: 81.2k, False: 61.7k]
  |  Branch (713:45): [True: 85.7k, False: 15.9k]
  |  Branch (713:61): [True: 81.2k, False: 4.53k]
  ------------------
  714|  81.2k|                        {
  715|  81.2k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 11.7k, False: 69.5k]
  ------------------
  716|  81.2k|                            {
  717|  7.53k|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 7.53k, False: 73.7k]
  ------------------
  718|  11.6k|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 4.10k, False: 77.1k]
  ------------------
  719|  11.6k|                                    return OpCode::MULTD;
  720|       |
  721|  12.7k|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 12.7k, False: 68.5k]
  ------------------
  722|  24.6k|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 11.9k, False: 69.2k]
  ------------------
  723|  24.6k|                                    return OpCode::MULTF;
  724|       |
  725|  9.26k|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 9.26k, False: 71.9k]
  ------------------
  726|  18.8k|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 9.62k, False: 71.6k]
  ------------------
  727|  18.8k|                                    return OpCode::MULTI;
  728|       |
  729|  4.10k|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 4.10k, False: 77.1k]
  ------------------
  730|  14.3k|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 10.2k, False: 71.0k]
  ------------------
  731|  14.3k|                                    return OpCode::MULTU;
  732|  81.2k|                            }
  733|  81.2k|                        }
  734|  73.4k|                        break;
  735|       |
  736|   168k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 168k, False: 747k]
  ------------------
  737|   390k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 222k, False: 694k]
  ------------------
  738|   390k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 13.2k, False: 377k]
  ------------------
  739|   390k|                        {
  740|  63.0k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 63.0k, False: 327k]
  ------------------
  741|  85.8k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 22.8k, False: 367k]
  ------------------
  742|  85.8k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 63.1k, False: 22.7k]
  |  Branch (742:37): [True: 15.1k, False: 70.6k]
  |  Branch (742:53): [True: 35.6k, False: 27.4k]
  |  Branch (742:69): [True: 15.1k, False: 20.5k]
  ------------------
  743|  15.1k|                                {
  744|  15.1k|                                    return OpCode::SEQUI;
  745|  15.1k|                                }
  746|  70.6k|                                break;
  747|       |
  748|  70.6k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 37.9k, False: 352k]
  ------------------
  749|  89.2k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 51.3k, False: 339k]
  ------------------
  750|  89.2k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 42.3k, False: 46.9k]
  |  Branch (750:37): [True: 20.5k, False: 68.7k]
  |  Branch (750:53): [True: 30.7k, False: 11.5k]
  |  Branch (750:69): [True: 20.5k, False: 10.2k]
  ------------------
  751|  20.5k|                                {
  752|  20.5k|                                    return OpCode::SGEUI;
  753|  20.5k|                                }
  754|  68.7k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 46.1k, False: 22.5k]
  |  Branch (754:42): [True: 19.0k, False: 49.7k]
  |  Branch (754:58): [True: 42.0k, False: 4.11k]
  |  Branch (754:74): [True: 19.0k, False: 23.0k]
  ------------------
  755|  19.0k|                                {
  756|  19.0k|                                    return OpCode::SGTUI;
  757|  19.0k|                                }
  758|  49.7k|                                break;
  759|       |
  760|  49.7k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 28.4k, False: 362k]
  ------------------
  761|   111k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 83.0k, False: 307k]
  ------------------
  762|   111k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 45.9k, False: 65.5k]
  |  Branch (762:37): [True: 19.6k, False: 91.8k]
  |  Branch (762:53): [True: 34.4k, False: 11.5k]
  |  Branch (762:69): [True: 19.6k, False: 14.7k]
  ------------------
  763|  19.6k|                                {
  764|  19.6k|                                    return OpCode::SLEUI;
  765|  19.6k|                                }
  766|  91.8k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 53.6k, False: 38.2k]
  |  Branch (766:42): [True: 19.6k, False: 72.1k]
  |  Branch (766:58): [True: 43.5k, False: 10.0k]
  |  Branch (766:74): [True: 19.6k, False: 23.8k]
  ------------------
  767|  19.6k|                                {
  768|  19.6k|                                    return OpCode::SLTUI;
  769|  19.6k|                                }
  770|  72.1k|                                break;
  771|       |
  772|  72.1k|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 3.60k, False: 387k]
  ------------------
  773|  42.6k|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 39.0k, False: 351k]
  ------------------
  774|  42.6k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 38.9k, False: 3.73k]
  |  Branch (774:37): [True: 18.9k, False: 23.7k]
  |  Branch (774:53): [True: 34.0k, False: 4.92k]
  |  Branch (774:69): [True: 18.9k, False: 15.1k]
  ------------------
  775|  18.9k|                                {
  776|  18.9k|                                    return OpCode::SNEUI;
  777|  18.9k|                                }
  778|  23.7k|                                break;
  779|       |
  780|  23.7k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 13.5k, False: 377k]
  ------------------
  781|  48.0k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 34.5k, False: 356k]
  ------------------
  782|  48.0k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 37.1k, False: 10.8k]
  |  Branch (782:37): [True: 17.8k, False: 30.2k]
  |  Branch (782:53): [True: 28.0k, False: 9.09k]
  |  Branch (782:69): [True: 17.8k, False: 10.2k]
  ------------------
  783|  17.8k|                                {
  784|  17.8k|                                    return OpCode::SUBUI;
  785|  17.8k|                                }
  786|  30.2k|                                break;
  787|   390k|                        }
  788|       |
  789|   259k|                        break;
  790|   916k|                }
  791|       |
  792|   673k|                break;
  793|   916k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|   673k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 495k, False: 6.06M]
  ------------------
  797|   495k|                const char c1 = token[0u];
  798|   495k|                const char c2 = token[1u];
  799|   495k|                const char c3 = token[2u];
  800|   495k|                const char c4 = token[3u];
  801|   495k|                const char c5 = token[4u];
  802|   495k|                const char c6 = token[5u];
  803|       |
  804|   495k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 217k, False: 278k]
  |  Branch (804:21): [True: 189k, False: 306k]
  |  Branch (804:37): [True: 210k, False: 7.04k]
  |  Branch (804:53): [True: 189k, False: 21.2k]
  ------------------
  805|   189k|                {
  806|   189k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 6.97k, False: 182k]
  ------------------
  807|   189k|                    {
  808|  33.1k|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 33.1k, False: 156k]
  ------------------
  809|  61.1k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 28.0k, False: 161k]
  ------------------
  810|  61.1k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 52.9k, False: 8.17k]
  ------------------
  811|  52.9k|                            {
  812|  52.9k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 17.6k, False: 35.3k]
  ------------------
  813|  17.6k|                                {
  814|  17.6k|                                    return OpCode::CVTD2F;
  815|  17.6k|                                }
  816|  35.3k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 25.1k, False: 10.2k]
  ------------------
  817|  25.1k|                                {
  818|  25.1k|                                    return OpCode::CVTD2I;
  819|  25.1k|                                }
  820|  52.9k|                            }
  821|  18.4k|                            break;
  822|       |
  823|  18.4k|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 13.8k, False: 175k]
  ------------------
  824|  66.8k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 52.9k, False: 136k]
  ------------------
  825|  66.8k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 54.2k, False: 12.5k]
  ------------------
  826|  54.2k|                            {
  827|  54.2k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 24.1k, False: 30.1k]
  ------------------
  828|  24.1k|                                {
  829|  24.1k|                                    return OpCode::CVTF2D;
  830|  24.1k|                                }
  831|  30.1k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 21.7k, False: 8.33k]
  ------------------
  832|  21.7k|                                {
  833|  21.7k|                                    return OpCode::CVTF2I;
  834|  21.7k|                                }
  835|  54.2k|                            }
  836|  20.9k|                            break;
  837|       |
  838|  43.2k|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 43.2k, False: 145k]
  ------------------
  839|  54.2k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 11.0k, False: 178k]
  ------------------
  840|  54.2k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 38.6k, False: 15.6k]
  ------------------
  841|  38.6k|                            {
  842|  38.6k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 17.4k, False: 21.1k]
  ------------------
  843|  17.4k|                                {
  844|  17.4k|                                    return OpCode::CVTI2D;
  845|  17.4k|                                }
  846|  21.1k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 12.4k, False: 8.74k]
  ------------------
  847|  12.4k|                                {
  848|  12.4k|                                    return OpCode::CVTI2F;
  849|  12.4k|                                }
  850|  38.6k|                            }
  851|   189k|                    }
  852|   189k|                }
  853|   306k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 132k, False: 174k]
  |  Branch (853:26): [True: 33.4k, False: 273k]
  |  Branch (853:42): [True: 76.6k, False: 56.0k]
  |  Branch (853:58): [True: 56.4k, False: 20.2k]
  |  Branch (853:74): [True: 52.1k, False: 4.28k]
  ------------------
  854|   306k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 43.9k, False: 8.21k]
  |  Branch (854:42): [True: 33.4k, False: 10.4k]
  ------------------
  855|  33.4k|                {
  856|  33.4k|                    return OpCode::MULTUI;
  857|  33.4k|                }
  858|   343k|                break;
  859|   495k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|   343k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 246k, False: 6.31M]
  ------------------
  863|   246k|                const char c1 = token[0u];
  864|   246k|                const char c2 = token[1u];
  865|   246k|                const char c3 = token[2u];
  866|   246k|                const char c4 = token[3u];
  867|   246k|                const char c5 = token[4u];
  868|   246k|                const char c6 = token[5u];
  869|   246k|                const char c7 = token[6u];
  870|       |
  871|   246k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 128k, False: 117k]
  |  Branch (871:21): [True: 99.2k, False: 146k]
  |  Branch (871:37): [True: 110k, False: 18.4k]
  |  Branch (871:53): [True: 99.2k, False: 11.1k]
  ------------------
  872|  99.2k|                {
  873|  99.2k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 50.3k, False: 48.8k]
  |  Branch (873:25): [True: 18.4k, False: 80.7k]
  |  Branch (873:41): [True: 34.5k, False: 15.7k]
  |  Branch (873:54): [True: 30.9k, False: 3.59k]
  |  Branch (873:70): [True: 18.4k, False: 12.5k]
  ------------------
  874|  18.4k|                    {
  875|  18.4k|                        return OpCode::MOVI2FP;
  876|  18.4k|                    }
  877|  80.7k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 48.5k, False: 32.2k]
  |  Branch (877:25): [True: 25.2k, False: 55.5k]
  |  Branch (877:41): [True: 38.9k, False: 9.57k]
  |  Branch (877:57): [True: 33.2k, False: 5.69k]
  |  Branch (877:70): [True: 25.2k, False: 8.00k]
  ------------------
  878|  25.2k|                    {
  879|  25.2k|                        return OpCode::MOVFP2I;
  880|  25.2k|                    }
  881|  80.7k|                }
  882|   202k|                break;
  883|   246k|            }
  884|       |
  885|   202k|            default: {
  ------------------
  |  Branch (885:13): [True: 184k, False: 6.37M]
  ------------------
  886|   184k|                break;
  887|   246k|            }
  888|  6.56M|        }
  889|       |
  890|       |        // None found
  891|  4.38M|        return OpCode::NONE;
  892|  6.56M|    }
_ZN3dlx3iceEcc:
   17|  9.58M|    {
   18|  9.58M|        constexpr const char diff = 'a' - 'A';
   19|  9.58M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 2.94M, False: 6.63M]
  |  Branch (19:28): [True: 2.76M, False: 3.86M]
  ------------------
   20|  9.58M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  6.80M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|   119k|    {
  195|   119k|        ParseError err;
  196|       |
  197|   119k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|   119k|        err.m_LineNumber                           = line_number;
  199|   119k|        err.m_Column                               = column;
  200|   119k|        err.unexpected_argument_type.expected_type = expected_type;
  201|   119k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|   119k|        return err;
  204|   119k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|   119k|    {
  209|   119k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|   119k|                                                         token.GetColumn().unsafe(), expected_type,
  211|   119k|                                                         actual_type);
  212|   119k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|  10.0k|    {
  218|  10.0k|        ParseError err;
  219|       |
  220|  10.0k|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|  10.0k|        err.m_LineNumber        = line_number;
  222|  10.0k|        err.m_Column            = column;
  223|  10.0k|        err.invalid_number.text = text;
  224|       |
  225|  10.0k|        return err;
  226|  10.0k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|  10.0k|    {
  230|  10.0k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|  10.0k|                                                token.GetColumn().unsafe(), token.GetText());
  232|  10.0k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|     21|    {
  237|     21|        ParseError err;
  238|       |
  239|     21|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|     21|        err.m_LineNumber = line_number;
  241|     21|        err.m_Column     = column;
  242|       |
  243|     21|        return err;
  244|     21|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|     21|    {
  249|     21|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|     21|                                                                     token.GetColumn().unsafe());
  251|     21|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  2.95M|    {
  257|  2.95M|        ParseError err;
  258|       |
  259|  2.95M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  2.95M|        err.m_LineNumber                   = line_number;
  261|  2.95M|        err.m_Column                       = column;
  262|  2.95M|        err.unexpected_token.expected_type = expected_type;
  263|  2.95M|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  2.95M|        return err;
  266|  2.95M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  2.95M|    {
  271|  2.95M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  2.95M|                                                  token.GetColumn().unsafe(), expected_type,
  273|  2.95M|                                                  token.GetType());
  274|  2.95M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|   763k|    {
  279|   763k|        ParseError err;
  280|       |
  281|   763k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|   763k|        err.m_LineNumber                   = line_number;
  283|   763k|        err.m_Column                       = column;
  284|   763k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|   763k|        return err;
  287|   763k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|  10.2k|    {
  291|  10.2k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|  10.2k|                                                    token.GetColumn().unsafe(), token.GetText());
  293|  10.2k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  1.34M|    {
  298|  1.34M|        ParseError err;
  299|       |
  300|  1.34M|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  1.34M|        err.m_LineNumber                       = line_number;
  302|  1.34M|        err.m_Column                           = column;
  303|  1.34M|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  1.34M|        return err;
  306|  1.34M|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  1.34M|    {
  311|  1.34M|        return ConstructInvalidLabelIdentifierParseError(
  312|  1.34M|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  1.34M|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|   282k|    {
  319|   282k|        ParseError err;
  320|       |
  321|   282k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|   282k|        err.m_LineNumber                     = line_number;
  323|   282k|        err.m_Column                         = column;
  324|   282k|        err.label_already_defined.label_name = label_name;
  325|   282k|        err.label_already_defined.at_line    = at_line;
  326|   282k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|   282k|        return err;
  329|   282k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|   282k|    {
  334|   282k|        return ConstructLabelAlreadyDefinedParseError(
  335|   282k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|   282k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|   282k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|   838k|    {
  342|   838k|        ParseError err;
  343|       |
  344|   838k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|   838k|        err.m_LineNumber = line_number;
  346|   838k|        err.m_Column     = column;
  347|       |
  348|   838k|        return err;
  349|   838k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|   838k|    {
  354|   838k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|   838k|                                                        token.GetColumn().unsafe());
  356|   838k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|  98.5k|    {
  362|  98.5k|        ParseError err;
  363|       |
  364|  98.5k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|  98.5k|        err.m_LineNumber               = line_number;
  366|  98.5k|        err.m_Column                   = column;
  367|  98.5k|        err.too_few_arguments.required = required;
  368|  98.5k|        err.too_few_arguments.provided = provided;
  369|       |
  370|  98.5k|        return err;
  371|  98.5k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|  98.5k|    {
  376|  98.5k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|  98.5k|                                                  token.GetColumn().unsafe(), required, provided);
  378|  98.5k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|   257k|    {
  383|   257k|        ParseError err;
  384|       |
  385|   257k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|   257k|        err.m_LineNumber           = line_number;
  387|   257k|        err.m_Column               = column;
  388|   257k|        err.empty_label.label_name = label_name;
  389|       |
  390|   257k|        return err;
  391|   257k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|   257k|    {
  395|   257k|        return ConstructEmptyLabelParseError(
  396|   257k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|   257k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 216k, False: 40.6k]
  ------------------
  398|   216k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|   257k|                        token.GetText());
  400|   257k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|   144k|    {
  405|   144k|        ParseError err;
  406|       |
  407|   144k|        err.m_Type       = ParseError::Type::TooManyComma;
  408|   144k|        err.m_LineNumber = line_number;
  409|   144k|        err.m_Column     = column;
  410|       |
  411|   144k|        return err;
  412|   144k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|   144k|    {
  416|   144k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|   144k|                                               token.GetColumn().unsafe());
  418|   144k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  6.80M|    {
   19|  6.80M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  6.80M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  34.8k|    {
  181|  34.8k|        ParsedProgram program;
  182|       |
  183|  34.8k|        program.m_Tokens = tokens;
  184|       |
  185|  34.8k|        phi::boolean line_has_instruction{false};
  186|  34.8k|        phi::usize   label_count{0u};
  187|       |
  188|  7.80M|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 7.76M, False: 34.8k]
  ------------------
  189|  7.76M|        {
  190|  7.76M|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|  7.76M|            switch (current_token.GetType())
  195|  7.76M|            {
  196|       |                // Ignore comments
  197|  48.7k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 48.7k, False: 7.72M]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  48.7k|                    break;
  200|       |
  201|   939k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 939k, False: 6.82M]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|   939k|                    line_has_instruction = false;
  204|   939k|                    break;
  205|       |
  206|  3.00M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 3.00M, False: 4.76M]
  ------------------
  207|  3.00M|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 467k, False: 2.53M]
  ------------------
  208|   467k|                    {
  209|   467k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|   467k|                                current_token, Token::Type::NewLine));
  211|   467k|                        break;
  212|   467k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  2.53M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 830k, False: 1.70M]
  ------------------
  217|   830k|                    {
  218|   830k|                        program.AddParseError(
  219|   830k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|   830k|                        break;
  221|   830k|                    }
  222|       |
  223|  1.70M|                    phi::string_view label_name = current_token.GetText();
  224|  1.70M|                    label_name.remove_suffix(1u);
  225|       |
  226|  1.70M|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 752k, False: 953k]
  ------------------
  227|   752k|                    {
  228|   752k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|   752k|                                current_token.GetLineNumber().unsafe(),
  230|   752k|                                current_token.GetColumn().unsafe(), label_name));
  231|   752k|                        break;
  232|   752k|                    }
  233|       |
  234|   953k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 397k, False: 555k]
  ------------------
  235|   397k|                    {
  236|   397k|                        program.AddParseError(
  237|   397k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|   397k|                        break;
  239|   397k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|   555k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 282k, False: 273k]
  ------------------
  243|   282k|                    {
  244|       |                        // Find first defintions of label
  245|   282k|                        const Token* first_label_definition =
  246|   282k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   282k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|   282k|                                    {
  249|   282k|                                        phi::string_view token_label_name = t.GetText();
  250|   282k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   282k|                                        if (token_label_name == label_name)
  253|   282k|                                        {
  254|   282k|                                            return true;
  255|   282k|                                        }
  256|   282k|                                    }
  257|       |
  258|   282k|                                    return false;
  259|   282k|                                });
  260|       |
  261|   282k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|   282k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|   282k|                                current_token, *first_label_definition));
  265|   282k|                        break;
  266|   282k|                    }
  267|       |
  268|   273k|                    program.m_JumpData[label_name] =
  269|   273k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|   273k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|   273k|                    break;
  276|   555k|                }
  277|       |
  278|  1.43M|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 1.43M, False: 6.33M]
  ------------------
  279|  1.43M|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 838k, False: 593k]
  ------------------
  280|   838k|                    {
  281|   838k|                        program.AddParseError(
  282|   838k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|   838k|                        break;
  284|   838k|                    }
  285|       |
  286|   593k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|   593k|                    PHI_ASSERT(current_token.HasHint());
  290|   593k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|   593k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|   593k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|   593k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|   593k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|   593k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|   593k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|   593k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|   593k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  1.26M|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 1.16M, False: 102k]
  ------------------
  312|  1.16M|                    {
  313|       |                        // Get next token
  314|  1.16M|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 2.79k, False: 1.16M]
  ------------------
  315|  2.79k|                        {
  316|  2.79k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|  2.79k|                                    current_token, number_of_argument_required.unsafe(),
  318|  2.79k|                                    argument_num.unsafe()));
  319|  2.79k|                            break;
  320|  2.79k|                        }
  321|       |
  322|  1.16M|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  1.16M|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 494k, False: 668k]
  ------------------
  326|   494k|                        {
  327|   494k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 144k, False: 350k]
  ------------------
  328|   144k|                            {
  329|   144k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|   144k|                            }
  331|       |
  332|   494k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|   494k|                            continue;
  335|   494k|                        }
  336|       |
  337|   668k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 95.7k, False: 572k]
  ------------------
  338|  95.7k|                        {
  339|  95.7k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  95.7k|                                    token, number_of_argument_required.unsafe(),
  341|  95.7k|                                    argument_num.unsafe()));
  342|  95.7k|                            break;
  343|  95.7k|                        }
  344|       |
  345|   572k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|   572k|                                parse_instruction_argument(
  347|   572k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|   572k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 392k, False: 180k]
  ------------------
  349|   392k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|   392k|                            break;
  352|   392k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|   180k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|   180k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|   180k|                        argument_num++;
  359|   180k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|   180k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|   593k|                    program.m_Instructions.emplace_back(instruction);
  367|   593k|                    line_has_instruction = true;
  368|   593k|                    break;
  369|  1.43M|                }
  370|       |
  371|  2.34M|                default:
  ------------------
  |  Branch (371:17): [True: 2.34M, False: 5.42M]
  ------------------
  372|  2.34M|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  2.34M|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 1.15M, False: 1.19M]
  ------------------
  374|  1.15M|                    {
  375|  1.15M|                        expected_token_type = Token::Type::NewLine;
  376|  1.15M|                    }
  377|       |
  378|  2.34M|                    program.AddParseError(
  379|  2.34M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  2.34M|                    break;
  381|  7.76M|            }
  382|  7.76M|        }
  383|       |
  384|       |        // Check for empty labels
  385|  34.8k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 11.6k, False: 23.1k]
  ------------------
  386|  11.6k|        {
  387|   319k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 307k, False: 11.6k]
  ------------------
  388|   307k|            {
  389|   307k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|   307k|                const Token& token = *it;
  392|   307k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 257k, False: 50.2k]
  ------------------
  393|   257k|                {
  394|   257k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|   257k|                    --label_count;
  396|   257k|                }
  397|   307k|            }
  398|  11.6k|        }
  399|       |
  400|  34.8k|        return program;
  401|  34.8k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  34.8k|    {
  405|  34.8k|        TokenStream tokens = Tokenize(source);
  406|  34.8k|        return Parse(tokens);
  407|  34.8k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|   572k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|   572k|        switch (token.GetType())
   37|   572k|        {
   38|  95.6k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 95.6k, False: 477k]
  ------------------
   39|  95.6k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 31.9k, False: 63.6k]
  ------------------
   40|  95.6k|                                          ArgumentType::AddressDisplacement))
   41|  31.9k|                {
   42|  31.9k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|  31.9k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|  31.9k|                    return {};
   46|  31.9k|                }
   47|       |
   48|       |                // Get address displacement
   49|  63.6k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  63.6k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  63.6k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 21, False: 63.6k]
  ------------------
   54|     21|                {
   55|     21|                    program.AddParseError(
   56|     21|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|     21|                    return {};
   58|     21|                }
   59|       |
   60|  63.6k|                auto         it           = tokens.current_position();
   61|  63.6k|                const Token& first_token  = tokens.consume();
   62|  63.6k|                const Token& second_token = tokens.consume();
   63|  63.6k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  63.6k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 20.0k, False: 43.5k]
  ------------------
   66|  20.0k|                {
   67|  20.0k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|  20.0k|                            first_token, Token::Type::OpenBracket));
   69|  20.0k|                    return {};
   70|  20.0k|                }
   71|       |
   72|       |                // Second token is the register
   73|  43.5k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 14.9k, False: 28.6k]
  ------------------
   74|  14.9k|                {
   75|  14.9k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|  14.9k|                            second_token, Token::Type::RegisterInt));
   77|  14.9k|                    return {};
   78|  14.9k|                }
   79|       |
   80|  28.6k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 10.5k, False: 18.0k]
  ------------------
   81|  10.5k|                {
   82|  10.5k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|  10.5k|                            third_token, Token::Type::ClosingBracket));
   84|  10.5k|                    return {};
   85|  10.5k|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|  18.0k|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|  18.0k|                return ConstructInstructionArgumentAddressDisplacement(
   94|  18.0k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|  28.6k|            }
   96|  26.9k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 26.9k, False: 545k]
  ------------------
   97|  26.9k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 5.06k, False: 21.8k]
  ------------------
   98|  5.06k|                {
   99|  5.06k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|  5.06k|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|  5.06k|                    return {};
  102|  5.06k|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  21.8k|                return ConstructInstructionArgumentRegisterInt(
  108|  21.8k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  26.9k|            }
  110|  74.5k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 74.5k, False: 498k]
  ------------------
  111|  74.5k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 8.48k, False: 66.0k]
  ------------------
  112|  8.48k|                {
  113|  8.48k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|  8.48k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|  8.48k|                    return {};
  116|  8.48k|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  66.0k|                return ConstructInstructionArgumentRegisterFloat(
  122|  66.0k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  74.5k|            }
  124|  10.2k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 10.2k, False: 562k]
  ------------------
  125|  10.2k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|  10.2k|                return {};
  128|  74.5k|            }
  129|   230k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 230k, False: 341k]
  ------------------
  130|       |                // Parse as Label
  131|   230k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 52.5k, False: 178k]
  ------------------
  132|  52.5k|                {
  133|  52.5k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  52.5k|                            token, expected_argument_type, ArgumentType::Label));
  135|  52.5k|                    return {};
  136|  52.5k|                }
  137|       |
  138|   178k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 178k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|   178k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 114k, False: 64.1k]
  ------------------
  145|   114k|                {
  146|   114k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|   114k|                    return {};
  148|   114k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  64.1k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|   178k|            }
  154|  41.6k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 41.6k, False: 531k]
  ------------------
  155|  41.6k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 21.0k, False: 20.5k]
  ------------------
  156|  21.0k|                {
  157|  21.0k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|  21.0k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|  21.0k|                    return {};
  160|  21.0k|                }
  161|       |
  162|  20.5k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 10.5k, False: 10.0k]
  ------------------
  163|  10.5k|                {
  164|  10.5k|                    return ConstructInstructionArgumentImmediateValue(
  165|  10.5k|                            static_cast<std::int16_t>(token.GetHint()));
  166|  10.5k|                }
  167|       |
  168|  10.0k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|  10.0k|                return {};
  170|  20.5k|            }
  171|       |
  172|  93.1k|            default:
  ------------------
  |  Branch (172:13): [True: 93.1k, False: 479k]
  ------------------
  173|  93.1k|                program.AddParseError(
  174|  93.1k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  93.1k|                return {};
  176|   572k|        }
  177|   572k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  3.90M|                                tokens.find_first_token_if([&](const Token& t) {
  247|  3.90M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 2.86M, False: 1.04M]
  ------------------
  248|  2.86M|                                    {
  249|  2.86M|                                        phi::string_view token_label_name = t.GetText();
  250|  2.86M|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  2.86M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 282k, False: 2.57M]
  ------------------
  253|   282k|                                        {
  254|   282k|                                            return true;
  255|   282k|                                        }
  256|  2.86M|                                    }
  257|       |
  258|  3.61M|                                    return false;
  259|  3.90M|                                });

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|  6.80M|    {
   13|  6.80M|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 1.16M, False: 5.64M]
  ------------------
   14|  1.16M|        {
   15|  1.16M|            const char first_char = token[0u];
   16|  1.16M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 6.56k, False: 1.15M]
  |  Branch (16:38): [True: 100k, False: 1.05M]
  ------------------
   17|   107k|            {
   18|   107k|                const char second_char = token[1u];
   19|   107k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 103k, False: 3.94k]
  |  Branch (19:43): [True: 82.5k, False: 20.7k]
  ------------------
   20|  82.5k|                {
   21|  82.5k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  82.5k|                }
   23|   107k|            }
   24|  1.16M|        }
   25|  5.64M|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 1.34M, False: 4.30M]
  ------------------
   26|  1.34M|        {
   27|  1.34M|            const char first_char = token[0u];
   28|  1.34M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 3.22k, False: 1.33M]
  |  Branch (28:38): [True: 82.9k, False: 1.25M]
  ------------------
   29|  86.2k|            {
   30|  86.2k|                const char second_char = token[1u];
   31|  86.2k|                const char third_char  = token[2u];
   32|       |
   33|  86.2k|                switch (second_char)
   34|  86.2k|                {
   35|  33.4k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 33.4k, False: 52.7k]
  ------------------
   36|  33.4k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 21.5k, False: 11.8k]
  |  Branch (36:50): [True: 11.4k, False: 10.0k]
  ------------------
   37|  11.4k|                        {
   38|  11.4k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|  11.4k|                        }
   40|  21.9k|                        break;
   41|  33.4k|                    }
   42|  29.0k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 29.0k, False: 57.2k]
  ------------------
   43|  29.0k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 13.1k, False: 15.8k]
  |  Branch (43:50): [True: 7.92k, False: 5.25k]
  ------------------
   44|  7.92k|                        {
   45|  7.92k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|  7.92k|                        }
   47|  21.0k|                        break;
   48|  29.0k|                    }
   49|  21.0k|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 12.6k, False: 73.5k]
  ------------------
   50|  12.6k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 1.85k, False: 10.7k]
  |  Branch (50:50): [True: 3.14k, False: 7.64k]
  ------------------
   51|  5.00k|                        {
   52|  5.00k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|  5.00k|                        }
   54|  7.64k|                        break;
   55|  12.6k|                    }
   56|  11.1k|                    default: {
  ------------------
  |  Branch (56:21): [True: 11.1k, False: 75.0k]
  ------------------
   57|  11.1k|                        break;
   58|  12.6k|                    }
   59|  86.2k|                }
   60|  86.2k|            }
   61|  1.34M|        }
   62|       |
   63|  6.69M|        return IntRegisterID::None;
   64|  6.80M|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|  6.69M|    {
   68|  6.69M|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 1.07M, False: 5.61M]
  ------------------
   69|  1.07M|        {
   70|  1.07M|            const char first_char = token[0u];
   71|  1.07M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 97.3k, False: 980k]
  |  Branch (71:38): [True: 25.5k, False: 955k]
  ------------------
   72|   122k|            {
   73|   122k|                const char second_char = token[1u];
   74|   122k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 117k, False: 5.34k]
  |  Branch (74:43): [True: 88.9k, False: 28.6k]
  ------------------
   75|  88.9k|                {
   76|  88.9k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  88.9k|                }
   78|   122k|            }
   79|  1.07M|        }
   80|  5.61M|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 1.31M, False: 4.30M]
  ------------------
   81|  1.31M|        {
   82|  1.31M|            const char first_char = token[0u];
   83|  1.31M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 70.5k, False: 1.24M]
  |  Branch (83:38): [True: 31.3k, False: 1.21M]
  ------------------
   84|   101k|            {
   85|   101k|                const char second_char = token[1u];
   86|   101k|                const char third_char  = token[2u];
   87|       |
   88|   101k|                switch (second_char)
   89|   101k|                {
   90|  6.13k|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 6.13k, False: 95.7k]
  ------------------
   91|  6.13k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 4.68k, False: 1.45k]
  |  Branch (91:50): [True: 2.84k, False: 1.83k]
  ------------------
   92|  2.84k|                        {
   93|  2.84k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|  2.84k|                        }
   95|  3.29k|                        break;
   96|  6.13k|                    }
   97|  15.2k|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 15.2k, False: 86.6k]
  ------------------
   98|  15.2k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 13.2k, False: 1.94k]
  |  Branch (98:50): [True: 5.38k, False: 7.91k]
  ------------------
   99|  5.38k|                        {
  100|  5.38k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|  5.38k|                        }
  102|  9.85k|                        break;
  103|  15.2k|                    }
  104|  52.7k|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 52.7k, False: 49.1k]
  ------------------
  105|  52.7k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 28.6k, False: 24.1k]
  |  Branch (105:50): [True: 8.65k, False: 15.5k]
  ------------------
  106|  37.2k|                        {
  107|  37.2k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|  37.2k|                        }
  109|  15.5k|                        break;
  110|  52.7k|                    }
  111|  27.7k|                    default: {
  ------------------
  |  Branch (111:21): [True: 27.7k, False: 74.1k]
  ------------------
  112|  27.7k|                        break;
  113|  52.7k|                    }
  114|   101k|                }
  115|   101k|            }
  116|  1.31M|        }
  117|       |
  118|  6.56M|        return FloatRegisterID::None;
  119|  6.69M|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|  6.08M|    {
  123|  6.08M|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 1.26M, False: 4.81M]
  ------------------
  124|  1.26M|        {
  125|  1.26M|            const char c1 = token[0u];
  126|  1.26M|            const char c2 = token[1u];
  127|  1.26M|            const char c3 = token[2u];
  128|  1.26M|            const char c4 = token[3u];
  129|       |
  130|  1.26M|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 44.4k, False: 1.21M]
  |  Branch (130:34): [True: 34.7k, False: 1.18M]
  |  Branch (130:49): [True: 36.7k, False: 42.4k]
  |  Branch (130:62): [True: 2.91k, False: 39.5k]
  ------------------
  131|  1.26M|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 6.89k, False: 32.7k]
  |  Branch (131:34): [True: 29.1k, False: 3.60k]
  |  Branch (131:49): [True: 6.72k, False: 29.3k]
  |  Branch (131:62): [True: 23.4k, False: 5.89k]
  ------------------
  132|  1.26M|        }
  133|       |
  134|  4.81M|        return false;
  135|  6.08M|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|  7.28M|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  1.84M|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  17.4M|    {
   41|  17.4M|        return m_Type;
   42|  17.4M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  7.68M|    {
   51|  7.68M|        return m_LineNumber;
   52|  7.68M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  7.08M|    {
   56|  7.08M|        return m_Column;
   57|  7.08M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  9.90M|    {
   66|  9.90M|        return m_Text;
   67|  9.90M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   677k|    {
   80|   677k|        return m_HasHint;
   81|   677k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   773k|    {
   85|   773k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   773k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   773k|                   m_Type == Type::ImmediateInteger);
   88|   773k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   773k|        return m_Hint;
   91|   773k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  34.8k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  34.8k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  34.8k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  63.6k|    {
   51|  63.6k|        auto it = m_Iterator;
   52|   254k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 190k, False: 63.6k]
  ------------------
   53|   190k|        {
   54|   190k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 21, False: 190k]
  ------------------
   55|     21|            {
   56|     21|                return false;
   57|     21|            }
   58|   190k|        }
   59|       |
   60|  63.6k|        return true;
   61|  63.6k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  8.97M|    {
   65|  8.97M|        return m_Iterator != m_Tokens.end();
   66|  8.97M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  9.12M|    {
   70|  9.12M|        return m_Iterator == m_Tokens.end();
   71|  9.12M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  9.12M|    {
   85|  9.12M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  9.12M|        return *m_Iterator++;
   91|  9.12M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  63.6k|    {
  164|  63.6k|        return m_Iterator;
  165|  63.6k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  18.0k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  18.0k|        m_Iterator = it;
  179|  18.0k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  11.6k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  11.6k|        return m_Tokens.rbegin();
  224|  11.6k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|   307k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|   307k|        return m_Tokens.rend();
  233|   307k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  34.8k|    {
   66|  34.8k|        TokenStream tokens;
   67|       |
   68|  34.8k|        phi::string_view current_token;
   69|       |
   70|  34.8k|        phi::u64 current_line_number{1u};
   71|  34.8k|        phi::u64 current_column{1u};
   72|  34.8k|        phi::u64 token_begin{0u};
   73|       |
   74|  34.8k|        phi::boolean parsing_comment{false};
   75|       |
   76|  23.4M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 23.4M, False: 34.8k]
  ------------------
   77|  23.4M|        {
   78|  23.4M|            const char c{source.at(i)};
   79|       |
   80|  23.4M|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 1.04M, False: 22.3M]
  ------------------
   81|  1.04M|            {
   82|  1.04M|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 168k, False: 872k]
  ------------------
   83|   168k|                {
   84|       |                    // Skip empty lines
   85|   168k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|   168k|                                        current_line_number, current_column);
   87|       |
   88|   168k|                    parsing_comment = false;
   89|   168k|                    current_line_number += 1u;
   90|   168k|                    current_column = 1u;
   91|   168k|                    continue;
   92|   168k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|   872k|                tokens.emplace_back(ParseToken(
   96|   872k|                        source.substring_view(
   97|   872k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|   872k|                                current_token.length()),
   99|   872k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|   872k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|   872k|                                    current_line_number, current_column);
  103|       |
  104|   872k|                current_token   = phi::string_view{};
  105|   872k|                parsing_comment = false;
  106|   872k|                current_line_number += 1u;
  107|   872k|                current_column = 0u;
  108|   872k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|  22.3M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 15.6k, False: 22.3M]
  |  Branch (110:34): [True: 44.0k, False: 22.3M]
  ------------------
  111|  59.7k|            {
  112|  59.7k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 26.5k, False: 33.1k]
  ------------------
  113|  26.5k|                {
  114|  26.5k|                    token_begin = i;
  115|  26.5k|                }
  116|  33.1k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 30.5k, False: 2.61k]
  ------------------
  117|  30.5k|                {
  118|  30.5k|                    tokens.emplace_back(ParseToken(
  119|  30.5k|                            source.substring_view(
  120|  30.5k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  30.5k|                                    current_token.length()),
  122|  30.5k|                            current_line_number, current_column - current_token.length()));
  123|  30.5k|                    token_begin   = i;
  124|  30.5k|                    current_token = phi::string_view{};
  125|  30.5k|                }
  126|       |
  127|  59.7k|                parsing_comment = true;
  128|  59.7k|                current_token   = source.substring_view(
  129|  59.7k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  59.7k|                        current_token.length() + 1u);
  131|  59.7k|            }
  132|  22.3M|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 88.3k, False: 22.2M]
  ------------------
  133|  88.3k|            {
  134|       |                // simply append the character
  135|  88.3k|                current_token = source.substring_view(
  136|  88.3k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|  88.3k|                        current_token.length() + 1u);
  138|  88.3k|            }
  139|  22.2M|            else
  140|  22.2M|            {
  141|       |                // Not parsing a comment
  142|  22.2M|                switch (c)
  143|  22.2M|                {
  144|   276k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 276k, False: 21.9M]
  ------------------
  145|   481k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 204k, False: 22.0M]
  ------------------
  146|   850k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 369k, False: 21.8M]
  ------------------
  147|   850k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 154k, False: 696k]
  ------------------
  148|   154k|                        {
  149|   154k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|   154k|                            continue;
  152|   154k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|   696k|                        tokens.emplace_back(ParseToken(
  156|   696k|                                source.substring_view(
  157|   696k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|   696k|                                        current_token.length()),
  159|   696k|                                current_line_number, current_column - current_token.length()));
  160|   696k|                        current_token = phi::string_view{};
  161|   696k|                        break;
  162|  2.08M|                    case ':':
  ------------------
  |  Branch (162:21): [True: 2.08M, False: 20.1M]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  2.08M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 1.83M, False: 250k]
  ------------------
  165|  1.83M|                        {
  166|  1.83M|                            current_token = source.substring_view(
  167|  1.83M|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  1.83M|                                    current_token.length() + 1u);
  169|  1.83M|                            tokens.emplace_back(ParseToken(
  170|  1.83M|                                    source.substring_view(
  171|  1.83M|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  1.83M|                                                    token_begin),
  173|  1.83M|                                            current_token.length()),
  174|  1.83M|                                    current_line_number,
  175|  1.83M|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  1.83M|                            current_token = phi::string_view{};
  178|  1.83M|                        }
  179|   250k|                        else
  180|   250k|                        {
  181|       |                            // Orphan colon
  182|   250k|                            token_begin = i;
  183|       |
  184|   250k|                            tokens.emplace_back(
  185|   250k|                                    Token::Type::Colon,
  186|   250k|                                    source.substring_view(
  187|   250k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|   250k|                                                    token_begin),
  189|   250k|                                            1u),
  190|   250k|                                    current_line_number, current_column);
  191|   250k|                        }
  192|  2.08M|                        break;
  193|  1.45M|                    case ',':
  ------------------
  |  Branch (193:21): [True: 1.45M, False: 20.7M]
  ------------------
  194|  2.52M|                    case '(':
  ------------------
  |  Branch (194:21): [True: 1.07M, False: 21.1M]
  ------------------
  195|  2.62M|                    case ')':
  ------------------
  |  Branch (195:21): [True: 96.0k, False: 22.1M]
  ------------------
  196|  2.62M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 1.75M, False: 874k]
  ------------------
  197|  1.75M|                        {
  198|  1.75M|                            tokens.emplace_back(ParseToken(
  199|  1.75M|                                    source.substring_view(
  200|  1.75M|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  1.75M|                                                    token_begin),
  202|  1.75M|                                            current_token.length()),
  203|  1.75M|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  1.75M|                            current_token = phi::string_view{};
  206|  1.75M|                        }
  207|       |
  208|  2.62M|                        Token::Type type;
  209|  2.62M|                        switch (c)
  210|  2.62M|                        {
  211|  1.45M|                            case ',':
  ------------------
  |  Branch (211:29): [True: 1.45M, False: 1.17M]
  ------------------
  212|  1.45M|                                type = Token::Type::Comma;
  213|  1.45M|                                break;
  214|  1.07M|                            case '(':
  ------------------
  |  Branch (214:29): [True: 1.07M, False: 1.54M]
  ------------------
  215|  1.07M|                                type = Token::Type::OpenBracket;
  216|  1.07M|                                break;
  217|  96.0k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 96.0k, False: 2.52M]
  ------------------
  218|  96.0k|                                type = Token::Type::ClosingBracket;
  219|  96.0k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 2.62M]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  2.62M|#endif
  225|  2.62M|                        }
  226|       |
  227|  2.62M|                        token_begin = i;
  228|       |
  229|  2.62M|                        tokens.emplace_back(
  230|  2.62M|                                type,
  231|  2.62M|                                source.substring_view(
  232|  2.62M|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  2.62M|                                        1u),
  234|  2.62M|                                current_line_number, current_column);
  235|  2.62M|                        break;
  236|       |
  237|  16.6M|                    default:
  ------------------
  |  Branch (237:21): [True: 16.6M, False: 5.56M]
  ------------------
  238|  16.6M|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 5.14M, False: 11.5M]
  ------------------
  239|  5.14M|                        {
  240|  5.14M|                            token_begin = i;
  241|  5.14M|                        }
  242|       |
  243|       |                        // simply append the character
  244|  16.6M|                        current_token = source.substring_view(
  245|  16.6M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|  16.6M|                                current_token.length() + 1u);
  247|  22.2M|                }
  248|  22.2M|            }
  249|       |
  250|  23.0M|            current_column += 1u;
  251|  23.0M|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  34.8k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 23.4k, False: 11.3k]
  ------------------
  255|  23.4k|        {
  256|  23.4k|            tokens.emplace_back(
  257|  23.4k|                    ParseToken(source.substring_view(
  258|  23.4k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  23.4k|                                       current_token.length()),
  260|  23.4k|                               current_line_number, current_column - current_token.length()));
  261|  23.4k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  34.8k|        tokens.finalize();
  265|       |
  266|  34.8k|        return tokens;
  267|  34.8k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|  5.20M|    {
   14|  5.20M|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 55.4k, False: 5.15M]
  |  Branch (14:13): [True: 49.7k, False: 5.15M]
  |  Branch (14:36): [True: 49.7k, False: 5.65k]
  ------------------
   15|  49.7k|        {
   16|  49.7k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  49.7k|            if (number)
  ------------------
  |  Branch (18:17): [True: 15.6k, False: 34.1k]
  ------------------
   19|  15.6k|            {
   20|  15.6k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  15.6k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  15.6k|            }
   23|       |
   24|  34.1k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  49.7k|        }
   26|       |
   27|  5.15M|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 15.3k, False: 5.14M]
  |  Branch (27:13): [True: 57.1k, False: 5.09M]
  |  Branch (27:36): [True: 41.7k, False: 5.09M]
  ------------------
   28|  57.1k|        {
   29|  57.1k|            return {Token::Type::Comment, token, line_number, column};
   30|  57.1k|        }
   31|       |
   32|  5.09M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 156k, False: 4.94M]
  ------------------
   33|   156k|        {
   34|   156k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|   156k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|   156k|        }
   37|       |
   38|  4.94M|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 23.3k, False: 4.91M]
  ------------------
   39|  23.3k|        {
   40|  23.3k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  23.3k|        }
   42|       |
   43|  4.91M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 82.6k, False: 4.83M]
  ------------------
   44|  82.6k|        {
   45|  82.6k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  82.6k|                    static_cast<phi::uint32_t>(id)};
   47|  82.6k|        }
   48|       |
   49|  4.83M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 124k, False: 4.71M]
  ------------------
   50|   124k|        {
   51|   124k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|   124k|                    static_cast<phi::uint32_t>(id)};
   53|   124k|        }
   54|       |
   55|  4.71M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 1.46M, False: 3.25M]
  ------------------
   56|  1.46M|        {
   57|  1.46M|            return {Token::Type::OpCode, token, line_number, column,
   58|  1.46M|                    static_cast<phi::uint32_t>(opcode)};
   59|  1.46M|        }
   60|       |
   61|  3.25M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  4.71M|    }

LLVMFuzzerTestOneInput:
    8|  34.8k|{
    9|  34.8k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   10|       |
   11|       |    // Parse it
   12|  34.8k|    dlx::Parser::Parse(source);
   13|       |
   14|  34.8k|    return 0;
   15|  34.8k|}


_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  2.12M|        {
  169|  2.12M|            PHI_ASSERT(index < 3u);
  170|       |
  171|  2.12M|            switch (index.unsafe())
  172|  2.12M|            {
  173|   971k|                case 0:
  ------------------
  |  Branch (173:17): [True: 971k, False: 1.15M]
  ------------------
  174|   971k|                    return m_Arg1Type;
  175|       |
  176|   589k|                case 1:
  ------------------
  |  Branch (176:17): [True: 589k, False: 1.53M]
  ------------------
  177|   589k|                    return m_Arg2Type;
  178|       |
  179|   564k|                case 2:
  ------------------
  |  Branch (179:17): [True: 564k, False: 1.56M]
  ------------------
  180|   564k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 2.12M]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  2.12M|#endif
  187|  2.12M|            }
  188|  2.12M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   537k|        {
  195|   537k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   537k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 523k, False: 14.3k]
  ------------------
  199|   523k|            {
  200|   523k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   523k|            }
  202|   537k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 303k, False: 233k]
  ------------------
  203|   303k|            {
  204|   303k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   303k|            }
  206|   537k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 169k, False: 367k]
  ------------------
  207|   169k|            {
  208|   169k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   169k|            }
  210|       |
  211|   537k|            return number_of_argument_required;
  212|   537k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   537k|        {
  221|   537k|            return m_Executor;
  222|   537k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   420k|    {
   38|   420k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   420k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   420k|                                         static_cast<underlying_t>(rhs));
   42|   420k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   420k|    {
   55|   420k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   420k|        return static_cast<underlying_t>(type & test) != 0;
   58|   420k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  1.68M|    {
   31|  1.68M|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 22.0k, False: 1.66M]
  ------------------
   32|  22.0k|        {
   33|  22.0k|            return true;
   34|  22.0k|        }
   35|       |
   36|  1.66M|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 8.31k, False: 1.65M]
  ------------------
   37|  8.31k|        {
   38|  8.31k|            return true;
   39|  8.31k|        }
   40|       |
   41|  1.65M|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 631k, False: 1.02M]
  ------------------
   42|   631k|        {
   43|   631k|            return true;
   44|   631k|        }
   45|       |
   46|  1.02M|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 5.86k, False: 1.02M]
  ------------------
   47|  5.86k|        {
   48|  5.86k|            return true;
   49|  5.86k|        }
   50|       |
   51|  1.02M|        return false;
   52|  1.02M|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  1.02M|    {
   56|  1.02M|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 1.02M]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  1.02M|        const char first_char = token.at(0u);
   62|       |
   63|  1.02M|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 208k, False: 813k]
  ------------------
   64|   208k|        {
   65|   208k|            return phi::is_alpha(first_char);
   66|   208k|        }
   67|       |
   68|   813k|        phi::boolean just_under_scores = (first_char == '_');
   69|   813k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 143k, False: 670k]
  |  Branch (69:13): [True: 118k, False: 694k]
  |  Branch (69:43): [True: 118k, False: 24.4k]
  ------------------
   70|   118k|        {
   71|   118k|            return false;
   72|   118k|        }
   73|       |
   74|  2.63M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 2.20M, False: 430k]
  ------------------
   75|  2.20M|        {
   76|  2.20M|            const char c{token.at(index)};
   77|       |
   78|  2.20M|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 1.91M, False: 287k]
  ------------------
   79|  1.91M|            {
   80|  1.91M|                just_under_scores = false;
   81|  1.91M|            }
   82|   287k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 23.1k, False: 263k]
  ------------------
   83|  23.1k|            {
   84|  23.1k|                continue;
   85|  23.1k|            }
   86|   263k|            else
   87|   263k|            {
   88|   263k|                return false;
   89|   263k|            }
   90|  2.20M|        }
   91|       |
   92|   430k|        return !just_under_scores;
   93|   694k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|  4.64M|    {
  100|  4.64M|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 4.64M]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|  4.64M|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 758k, False: 3.88M]
  ------------------
  106|   758k|        {
  107|   758k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 103k, False: 654k]
  ------------------
  108|   103k|            {
  109|   103k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|   103k|            }
  111|       |
  112|   654k|            return {};
  113|   758k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|  3.88M|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 38.7k, False: 3.84M]
  ------------------
  117|  38.7k|        {
  118|  38.7k|            return {};
  119|  38.7k|        }
  120|       |
  121|  3.84M|        std::int32_t number{0};
  122|  3.84M|        phi::boolean is_negative{false};
  123|  3.84M|        phi::boolean starts_with_zero{false};
  124|  3.84M|        phi::boolean parsing_binary{false};
  125|  3.84M|        phi::boolean parsing_octal{false};
  126|  3.84M|        phi::boolean parsing_hexadecimal{false};
  127|  3.84M|        phi::boolean parsed_something{false};
  128|  3.84M|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|  4.31M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 4.24M, False: 71.3k]
  ------------------
  133|  4.24M|        {
  134|  4.24M|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|  4.24M|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 3.84M, False: 402k]
  ------------------
  138|  3.84M|            {
  139|  3.84M|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 8.41k, False: 3.83M]
  ------------------
  140|  8.41k|                {
  141|  8.41k|                    continue;
  142|  8.41k|                }
  143|       |
  144|  3.83M|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 28.2k, False: 3.80M]
  ------------------
  145|  28.2k|                {
  146|  28.2k|                    is_negative = true;
  147|  28.2k|                    continue;
  148|  28.2k|                }
  149|       |
  150|  3.80M|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 59.8k, False: 3.74M]
  ------------------
  151|  59.8k|                {
  152|  59.8k|                    starts_with_zero = true;
  153|  59.8k|                    continue;
  154|  59.8k|                }
  155|       |
  156|  3.74M|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 8.26k, False: 3.73M]
  ------------------
  157|  8.26k|                {
  158|  8.26k|                    return {};
  159|  8.26k|                }
  160|  3.74M|            }
  161|       |
  162|       |            // Second character
  163|  4.14M|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 167k, False: 3.97M]
  ------------------
  164|   167k|            {
  165|   167k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 59.8k, False: 107k]
  ------------------
  166|  59.8k|                {
  167|       |                    // Binary
  168|  59.8k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 8.44k, False: 51.3k]
  |  Branch (168:37): [True: 2.04k, False: 49.3k]
  ------------------
  169|  10.4k|                    {
  170|  10.4k|                        parsing_binary = true;
  171|  10.4k|                        continue;
  172|  10.4k|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  49.3k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 21.0k, False: 28.2k]
  |  Branch (175:37): [True: 4.69k, False: 23.5k]
  ------------------
  176|  25.7k|                    {
  177|  25.7k|                        parsing_hexadecimal = true;
  178|  25.7k|                        continue;
  179|  25.7k|                    }
  180|       |
  181|       |                    // Octal
  182|  23.5k|                    parsing_octal = true;
  183|  23.5k|                }
  184|   167k|            }
  185|       |
  186|       |            // Handle seperators
  187|  4.10M|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 10.5k, False: 4.09M]
  ------------------
  188|  10.5k|            {
  189|  10.5k|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 4.96k, False: 5.61k]
  ------------------
  190|  4.96k|                {
  191|  4.96k|                    return {};
  192|  4.96k|                }
  193|       |
  194|  5.61k|                parsed_separator = true;
  195|  5.61k|                continue;
  196|  10.5k|            }
  197|       |
  198|       |            // Check for over/underflow
  199|  4.09M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 107k, False: 3.98M]
  |  Branch (199:32): [True: 4.64k, False: 102k]
  ------------------
  200|  4.64k|            {
  201|       |                // Would underflow
  202|  4.64k|                return {};
  203|  4.64k|            }
  204|  4.08M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 3.98M, False: 102k]
  |  Branch (204:17): [True: 14.7k, False: 4.07M]
  |  Branch (204:33): [True: 14.7k, False: 3.97M]
  ------------------
  205|  14.7k|            {
  206|       |                // Would overflow
  207|  14.7k|                return {};
  208|  14.7k|            }
  209|       |
  210|  4.07M|            parsed_separator = false;
  211|  4.07M|            parsed_something = true;
  212|       |
  213|  4.07M|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 12.4k, False: 4.06M]
  ------------------
  214|  12.4k|            {
  215|  12.4k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 3.47k, False: 8.99k]
  ------------------
  216|  3.47k|                {
  217|  3.47k|                    return {};
  218|  3.47k|                }
  219|       |
  220|  8.99k|                number <<= 1;
  221|  8.99k|                number |= (c - '0');
  222|  8.99k|            }
  223|  4.06M|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 24.1k, False: 4.03M]
  ------------------
  224|  24.1k|            {
  225|  24.1k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 15.9k, False: 8.22k]
  ------------------
  226|  15.9k|                {
  227|  15.9k|                    return {};
  228|  15.9k|                }
  229|       |
  230|  8.22k|                number <<= 3;
  231|  8.22k|                number |= (c - '0');
  232|  8.22k|            }
  233|  4.03M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 39.0k, False: 3.99M]
  ------------------
  234|  39.0k|            {
  235|  39.0k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 20.7k, False: 18.2k]
  ------------------
  236|  20.7k|                {
  237|  20.7k|                    return {};
  238|  20.7k|                }
  239|       |
  240|  18.2k|                number <<= 4;
  241|  18.2k|                number |= phi::hex_digit_value(c).unsafe();
  242|  18.2k|            }
  243|  3.99M|            else
  244|  3.99M|            {
  245|  3.99M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 3.69M, False: 307k]
  ------------------
  246|  3.69M|                {
  247|  3.69M|                    return {};
  248|  3.69M|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|   307k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 97.4k, False: 210k]
  |  Branch (251:36): [True: 7.50k, False: 89.9k]
  ------------------
  252|  7.50k|                {
  253|  7.50k|                    return {};
  254|  7.50k|                }
  255|       |
  256|   300k|                number *= 10;
  257|   300k|                number += (c - '0');
  258|   300k|            }
  259|  4.07M|        }
  260|       |
  261|  71.3k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 67.6k, False: 3.72k]
  ------------------
  262|  67.6k|        {
  263|       |            // Check for over/underflow
  264|  67.6k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 13.5k, False: 54.0k]
  |  Branch (264:32): [True: 11.0k, False: 2.50k]
  ------------------
  265|  11.0k|            {
  266|       |                // Would underflow
  267|  11.0k|                return {};
  268|  11.0k|            }
  269|  56.5k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 54.0k, False: 2.50k]
  |  Branch (269:17): [True: 5.35k, False: 51.2k]
  |  Branch (269:33): [True: 5.35k, False: 48.7k]
  ------------------
  270|  5.35k|            {
  271|       |                // Would overflow
  272|  5.35k|                return {};
  273|  5.35k|            }
  274|       |
  275|  51.2k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 2.50k, False: 48.7k]
  ------------------
  276|  2.50k|            {
  277|  2.50k|                return static_cast<std::int16_t>(-number);
  278|  2.50k|            }
  279|       |
  280|  48.7k|            return static_cast<std::int16_t>(number);
  281|  51.2k|        }
  282|       |
  283|  3.72k|        return {};
  284|  71.3k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   259k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   259k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 3.66M, False: 0]
  ------------------
   64|  3.66M|            {
   65|  3.66M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 259k, False: 3.40M]
  ------------------
   66|   259k|                {
   67|   259k|                    return &token;
   68|   259k|                }
   69|  3.66M|            }
   70|       |
   71|      0|            return nullptr;
   72|   259k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  1.17M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.17M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.17M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  4.69M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  4.69M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  4.69M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  2.41M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.41M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.41M|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   537k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|   157k|    {
   25|   157k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|   157k|        switch (argument_number.unsafe())
   28|   157k|        {
   29|   112k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 112k, False: 45.5k]
  ------------------
   30|   112k|                m_Arg1 = argument;
   31|   112k|                break;
   32|  27.2k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 27.2k, False: 130k]
  ------------------
   33|  27.2k|                m_Arg2 = argument;
   34|  27.2k|                break;
   35|  18.3k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 18.3k, False: 139k]
  ------------------
   36|  18.3k|                m_Arg3 = argument;
   37|  18.3k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 157k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|   157k|#endif
   42|   157k|        }
   43|   157k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  1.77M|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  21.3k|    {
  171|  21.3k|        InstructionArgument arg;
  172|  21.3k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  21.3k|        arg.register_int.register_id = id;
  174|  21.3k|        return arg;
  175|  21.3k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  51.8k|    {
  179|  51.8k|        InstructionArgument arg;
  180|  51.8k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  51.8k|        arg.register_float.register_id = id;
  182|  51.8k|        return arg;
  183|  51.8k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  9.65k|    {
  187|  9.65k|        InstructionArgument arg;
  188|  9.65k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  9.65k|        arg.immediate_value.signed_value = value;
  190|  9.65k|        return arg;
  191|  9.65k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|  15.0k|    {
  196|  15.0k|        InstructionArgument arg;
  197|  15.0k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|  15.0k|        arg.address_displacement.register_id  = id;
  199|  15.0k|        arg.address_displacement.displacement = displacement;
  200|  15.0k|        return arg;
  201|  15.0k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  204|  59.9k|    {
  205|  59.9k|        InstructionArgument arg;
  206|  59.9k|        arg.m_Type           = ArgumentType::Label;
  207|  59.9k|        arg.label.label_name = label_name;
  208|  59.9k|        return arg;
  209|  59.9k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   537k|    {
  453|   537k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   537k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|  5.91M|    {
   24|  5.91M|        switch (token.length().unsafe())
   25|  5.91M|        {
   26|       |            // 1 character OpCodes
   27|   846k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 846k, False: 5.06M]
  ------------------
   28|   846k|                const char c1 = token[0u];
   29|       |
   30|   846k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 230k, False: 616k]
  ------------------
   31|   230k|                {
   32|   230k|                    return OpCode::J;
   33|   230k|                }
   34|   616k|                break;
   35|   846k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|   902k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 902k, False: 5.00M]
  ------------------
   39|   902k|                const char c1 = token[0u];
   40|   902k|                const char c2 = token[1u];
   41|       |
   42|   902k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 578k, False: 324k]
  ------------------
   43|   902k|                {
   44|  16.1k|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 16.1k, False: 886k]
  ------------------
   45|  25.4k|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 9.27k, False: 893k]
  ------------------
   46|  25.4k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 10.5k, False: 14.9k]
  ------------------
   47|  10.5k|                        {
   48|  10.5k|                            return OpCode::JR;
   49|  10.5k|                        }
   50|  14.9k|                        break;
   51|       |
   52|  33.4k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 33.4k, False: 868k]
  ------------------
   53|  63.5k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 30.0k, False: 872k]
  ------------------
   54|  63.5k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 25.2k, False: 38.2k]
  ------------------
   55|  63.5k|                        {
   56|  11.1k|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 11.1k, False: 52.3k]
  ------------------
   57|  17.9k|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 6.84k, False: 56.6k]
  ------------------
   58|  17.9k|                                return OpCode::LB;
   59|  1.90k|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 1.90k, False: 61.6k]
  ------------------
   60|  2.40k|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 500, False: 63.0k]
  ------------------
   61|  2.40k|                                return OpCode::LD;
   62|  2.18k|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 2.18k, False: 61.3k]
  ------------------
   63|  5.63k|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 3.45k, False: 60.0k]
  ------------------
   64|  5.63k|                                return OpCode::LF;
   65|  4.31k|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 4.31k, False: 59.2k]
  ------------------
   66|  6.87k|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 2.55k, False: 60.9k]
  ------------------
   67|  6.87k|                                return OpCode::LH;
   68|  1.72k|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 1.72k, False: 61.7k]
  ------------------
   69|  5.42k|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 3.70k, False: 59.8k]
  ------------------
   70|  5.42k|                                return OpCode::LW;
   71|  63.5k|                        }
   72|  25.2k|                        break;
   73|  25.2k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 8.94k, False: 893k]
  ------------------
   74|  25.8k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 16.9k, False: 885k]
  ------------------
   75|  25.8k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 13.4k, False: 12.4k]
  ------------------
   76|  13.4k|                        {
   77|  13.4k|                            return OpCode::OR;
   78|  13.4k|                        }
   79|  12.4k|                        break;
   80|   156k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 156k, False: 745k]
  ------------------
   81|   209k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 53.0k, False: 849k]
  ------------------
   82|   209k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 48.4k, False: 160k]
  ------------------
   83|   209k|                        {
   84|  9.22k|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 9.22k, False: 200k]
  ------------------
   85|  18.6k|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 9.46k, False: 199k]
  ------------------
   86|  18.6k|                                return OpCode::SB;
   87|  59.8k|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 59.8k, False: 149k]
  ------------------
   88|  72.2k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 12.4k, False: 196k]
  ------------------
   89|  72.2k|                                return OpCode::SD;
   90|  7.21k|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 7.21k, False: 202k]
  ------------------
   91|  9.28k|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 2.07k, False: 207k]
  ------------------
   92|  9.28k|                                return OpCode::SF;
   93|  14.2k|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 14.2k, False: 195k]
  ------------------
   94|  20.1k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 5.87k, False: 203k]
  ------------------
   95|  20.1k|                                return OpCode::SH;
   96|  9.48k|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 9.48k, False: 199k]
  ------------------
   97|  40.5k|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 31.0k, False: 178k]
  ------------------
   98|  40.5k|                                return OpCode::SW;
   99|   209k|                        }
  100|  48.4k|                        break;
  101|   902k|                }
  102|   679k|                break;
  103|   902k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|  1.14M|            case 3: {
  ------------------
  |  Branch (106:13): [True: 1.14M, False: 4.76M]
  ------------------
  107|  1.14M|                const char c1 = token[0u];
  108|  1.14M|                const char c2 = token[1u];
  109|  1.14M|                const char c3 = token[2u];
  110|       |
  111|  1.14M|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 333k, False: 812k]
  ------------------
  112|  1.14M|                {
  113|  58.4k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 58.4k, False: 1.08M]
  ------------------
  114|  72.3k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 13.8k, False: 1.13M]
  ------------------
  115|  72.3k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 19.8k, False: 52.5k]
  |  Branch (115:29): [True: 17.2k, False: 55.0k]
  |  Branch (115:45): [True: 17.2k, False: 2.52k]
  ------------------
  116|  17.2k|                        {
  117|  17.2k|                            return OpCode::ADD;
  118|  17.2k|                        }
  119|  55.0k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 30.0k, False: 24.9k]
  |  Branch (119:34): [True: 10.2k, False: 44.7k]
  |  Branch (119:50): [True: 10.2k, False: 19.8k]
  ------------------
  120|  10.2k|                        {
  121|  10.2k|                            return OpCode::AND;
  122|  10.2k|                        }
  123|  44.7k|                        break;
  124|       |
  125|  44.7k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 9.14k, False: 1.13M]
  ------------------
  126|  63.5k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 54.3k, False: 1.09M]
  ------------------
  127|  63.5k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 43.3k, False: 20.2k]
  |  Branch (127:29): [True: 32.1k, False: 31.3k]
  |  Branch (127:45): [True: 32.1k, False: 11.1k]
  ------------------
  128|  32.1k|                        {
  129|  32.1k|                            return OpCode::DIV;
  130|  32.1k|                        }
  131|  31.3k|                        break;
  132|       |
  133|  31.3k|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 5.86k, False: 1.13M]
  ------------------
  134|  37.6k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 31.7k, False: 1.11M]
  ------------------
  135|  37.6k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 33.2k, False: 4.42k]
  ------------------
  136|  33.2k|                        {
  137|  33.2k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 16.9k, False: 16.3k]
  ------------------
  138|  16.9k|                            {
  139|  16.9k|                                return OpCode::EQD;
  140|  16.9k|                            }
  141|  16.3k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 11.4k, False: 4.87k]
  ------------------
  142|  11.4k|                            {
  143|  11.4k|                                return OpCode::EQF;
  144|  11.4k|                            }
  145|  33.2k|                        }
  146|  9.29k|                        break;
  147|       |
  148|  60.5k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 60.5k, False: 1.08M]
  ------------------
  149|  78.4k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 17.8k, False: 1.12M]
  ------------------
  150|  78.4k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 29.2k, False: 49.1k]
  ------------------
  151|  29.2k|                        {
  152|  29.2k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 19.9k, False: 9.33k]
  ------------------
  153|  19.9k|                            {
  154|  19.9k|                                return OpCode::GED;
  155|  19.9k|                            }
  156|  9.33k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 3.71k, False: 5.61k]
  ------------------
  157|  3.71k|                            {
  158|  3.71k|                                return OpCode::GEF;
  159|  3.71k|                            }
  160|  29.2k|                        }
  161|  49.1k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 18.0k, False: 31.1k]
  ------------------
  162|  18.0k|                        {
  163|  18.0k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 5.98k, False: 12.0k]
  ------------------
  164|  5.98k|                            {
  165|  5.98k|                                return OpCode::GTD;
  166|  5.98k|                            }
  167|  12.0k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 6.98k, False: 5.03k]
  ------------------
  168|  6.98k|                            {
  169|  6.98k|                                return OpCode::GTF;
  170|  6.98k|                            }
  171|  12.0k|                        }
  172|  41.7k|                        break;
  173|       |
  174|  41.7k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 6.09k, False: 1.13M]
  ------------------
  175|  28.4k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 22.3k, False: 1.12M]
  ------------------
  176|  28.4k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 21.3k, False: 7.06k]
  |  Branch (176:29): [True: 16.7k, False: 11.6k]
  |  Branch (176:45): [True: 16.7k, False: 4.61k]
  ------------------
  177|  16.7k|                        {
  178|  16.7k|                            return OpCode::JAL;
  179|  16.7k|                        }
  180|  11.6k|                        break;
  181|       |
  182|  46.9k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 46.9k, False: 1.09M]
  ------------------
  183|   125k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 78.7k, False: 1.06M]
  ------------------
  184|   125k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 8.45k, False: 117k]
  ------------------
  185|   125k|                        {
  186|  28.7k|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 28.7k, False: 96.9k]
  ------------------
  187|  35.3k|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 6.54k, False: 119k]
  ------------------
  188|  35.3k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 16.2k, False: 19.0k]
  ------------------
  189|  16.2k|                                {
  190|  16.2k|                                    return OpCode::LBU;
  191|  16.2k|                                }
  192|  19.0k|                                break;
  193|       |
  194|  19.0k|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 15.8k, False: 109k]
  ------------------
  195|  24.8k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 8.97k, False: 116k]
  ------------------
  196|  24.8k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 8.96k, False: 15.8k]
  ------------------
  197|  8.96k|                                {
  198|  8.96k|                                    return OpCode::LED;
  199|  8.96k|                                }
  200|  15.8k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 11.9k, False: 3.98k]
  ------------------
  201|  11.9k|                                {
  202|  11.9k|                                    return OpCode::LEF;
  203|  11.9k|                                }
  204|  3.98k|                                break;
  205|       |
  206|  3.98k|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 2.62k, False: 123k]
  ------------------
  207|  19.3k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 16.6k, False: 109k]
  ------------------
  208|  19.3k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 12.1k, False: 7.11k]
  ------------------
  209|  12.1k|                                {
  210|  12.1k|                                    return OpCode::LHI;
  211|  12.1k|                                }
  212|  7.11k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 4.13k, False: 2.97k]
  ------------------
  213|  4.13k|                                {
  214|  4.13k|                                    return OpCode::LHU;
  215|  4.13k|                                }
  216|  2.97k|                                break;
  217|       |
  218|  8.86k|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 8.86k, False: 116k]
  ------------------
  219|  18.2k|                            case 't':
  ------------------
  |  Branch (219:29): [True: 9.33k, False: 116k]
  ------------------
  220|  18.2k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 10.8k, False: 7.33k]
  ------------------
  221|  10.8k|                                {
  222|  10.8k|                                    return OpCode::LTD;
  223|  10.8k|                                }
  224|  7.33k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 4.29k, False: 3.03k]
  ------------------
  225|  4.29k|                                {
  226|  4.29k|                                    return OpCode::LTF;
  227|  4.29k|                                }
  228|  3.03k|                                break;
  229|       |
  230|  5.78k|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 5.78k, False: 119k]
  ------------------
  231|  19.5k|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 13.7k, False: 111k]
  ------------------
  232|  19.5k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 11.2k, False: 8.35k]
  ------------------
  233|  11.2k|                                {
  234|  11.2k|                                    return OpCode::LWU;
  235|  11.2k|                                }
  236|  8.35k|                                break;
  237|   125k|                        }
  238|  45.8k|                        break;
  239|       |
  240|  45.8k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 8.49k, False: 1.13M]
  ------------------
  241|  41.9k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 33.4k, False: 1.11M]
  ------------------
  242|  41.9k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 25.9k, False: 15.9k]
  ------------------
  243|  25.9k|                        {
  244|  25.9k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 10.7k, False: 15.1k]
  ------------------
  245|  10.7k|                            {
  246|  10.7k|                                return OpCode::NED;
  247|  10.7k|                            }
  248|  15.1k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 10.2k, False: 4.89k]
  ------------------
  249|  10.2k|                            {
  250|  10.2k|                                return OpCode::NEF;
  251|  10.2k|                            }
  252|  25.9k|                        }
  253|  15.9k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 9.07k, False: 6.91k]
  |  Branch (253:34): [True: 6.57k, False: 9.42k]
  |  Branch (253:50): [True: 6.57k, False: 2.50k]
  ------------------
  254|  6.57k|                        {
  255|  6.57k|                            return OpCode::NOP;
  256|  6.57k|                        }
  257|       |
  258|  14.3k|                        break;
  259|       |
  260|  14.3k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 8.99k, False: 1.13M]
  ------------------
  261|  32.4k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 23.4k, False: 1.12M]
  ------------------
  262|  32.4k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 21.2k, False: 11.2k]
  |  Branch (262:29): [True: 14.9k, False: 17.5k]
  |  Branch (262:45): [True: 14.9k, False: 6.29k]
  ------------------
  263|  14.9k|                        {
  264|  14.9k|                            return OpCode::ORI;
  265|  14.9k|                        }
  266|  17.5k|                        break;
  267|       |
  268|   165k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 165k, False: 980k]
  ------------------
  269|   308k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 142k, False: 1.00M]
  ------------------
  270|   308k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 32.7k, False: 275k]
  ------------------
  271|   308k|                        {
  272|  23.4k|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 23.4k, False: 284k]
  ------------------
  273|  28.4k|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 5.04k, False: 303k]
  ------------------
  274|  28.4k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 15.1k, False: 13.2k]
  ------------------
  275|  15.1k|                                {
  276|  15.1k|                                    return OpCode::SBU;
  277|  15.1k|                                }
  278|  13.2k|                                break;
  279|       |
  280|  13.2k|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 10.8k, False: 297k]
  ------------------
  281|  20.0k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 9.26k, False: 298k]
  ------------------
  282|  20.0k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 10.5k, False: 9.51k]
  ------------------
  283|  10.5k|                                {
  284|  10.5k|                                    return OpCode::SEQ;
  285|  10.5k|                                }
  286|  9.51k|                                break;
  287|       |
  288|  21.9k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 21.9k, False: 286k]
  ------------------
  289|  34.9k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 12.9k, False: 295k]
  ------------------
  290|  34.9k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 9.93k, False: 24.9k]
  ------------------
  291|  9.93k|                                {
  292|  9.93k|                                    return OpCode::SGE;
  293|  9.93k|                                }
  294|  24.9k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 9.70k, False: 15.2k]
  ------------------
  295|  9.70k|                                {
  296|  9.70k|                                    return OpCode::SGT;
  297|  9.70k|                                }
  298|  15.2k|                                break;
  299|       |
  300|  15.2k|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 5.05k, False: 303k]
  ------------------
  301|  10.9k|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 5.84k, False: 302k]
  ------------------
  302|  10.9k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 9.26k, False: 1.63k]
  ------------------
  303|  9.26k|                                {
  304|  9.26k|                                    return OpCode::SHU;
  305|  9.26k|                                }
  306|  1.63k|                                break;
  307|       |
  308|  28.1k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 28.1k, False: 280k]
  ------------------
  309|  66.2k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 38.1k, False: 269k]
  ------------------
  310|  66.2k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 5.08k, False: 61.1k]
  ------------------
  311|  66.2k|                                {
  312|  6.89k|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 6.89k, False: 59.3k]
  ------------------
  313|  21.4k|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 14.5k, False: 51.6k]
  ------------------
  314|  21.4k|                                        return OpCode::SLA;
  315|       |
  316|  2.65k|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 2.65k, False: 63.6k]
  ------------------
  317|  12.2k|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 9.62k, False: 56.6k]
  ------------------
  318|  12.2k|                                        return OpCode::SLE;
  319|       |
  320|  5.24k|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 5.24k, False: 61.0k]
  ------------------
  321|  15.1k|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 9.94k, False: 56.3k]
  ------------------
  322|  15.1k|                                        return OpCode::SLL;
  323|       |
  324|  8.00k|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 8.00k, False: 58.2k]
  ------------------
  325|  12.2k|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 4.24k, False: 62.0k]
  ------------------
  326|  12.2k|                                        return OpCode::SLT;
  327|  66.2k|                                }
  328|  5.08k|                                break;
  329|       |
  330|  9.53k|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 9.53k, False: 298k]
  ------------------
  331|  23.9k|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 14.3k, False: 293k]
  ------------------
  332|  23.9k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 13.7k, False: 10.2k]
  ------------------
  333|  13.7k|                                {
  334|  13.7k|                                    return OpCode::SNE;
  335|  13.7k|                                }
  336|  10.2k|                                break;
  337|       |
  338|  24.3k|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 24.3k, False: 283k]
  ------------------
  339|  40.0k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 15.7k, False: 292k]
  ------------------
  340|  40.0k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 14.1k, False: 25.8k]
  ------------------
  341|  14.1k|                                {
  342|  14.1k|                                    return OpCode::SRA;
  343|  14.1k|                                }
  344|  25.8k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 17.8k, False: 8.05k]
  ------------------
  345|  17.8k|                                {
  346|  17.8k|                                    return OpCode::SRL;
  347|  17.8k|                                }
  348|  8.05k|                                break;
  349|       |
  350|  19.1k|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 19.1k, False: 289k]
  ------------------
  351|  27.3k|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 8.24k, False: 299k]
  ------------------
  352|  27.3k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 22.1k, False: 5.27k]
  ------------------
  353|  22.1k|                                {
  354|  22.1k|                                    return OpCode::SUB;
  355|  22.1k|                                }
  356|  5.27k|                                break;
  357|       |
  358|  5.99k|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 5.99k, False: 302k]
  ------------------
  359|  23.4k|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 17.4k, False: 290k]
  ------------------
  360|  23.4k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 8.00k, False: 15.4k]
  ------------------
  361|  8.00k|                                {
  362|  8.00k|                                    return OpCode::SWU;
  363|  8.00k|                                }
  364|  15.4k|                                break;
  365|   308k|                        }
  366|       |
  367|   131k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 14.9k, False: 1.13M]
  ------------------
  368|   139k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 8.53k, False: 1.13M]
  ------------------
  369|   139k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 20.0k, False: 119k]
  |  Branch (369:29): [True: 12.7k, False: 127k]
  |  Branch (369:45): [True: 12.7k, False: 7.29k]
  ------------------
  370|  12.7k|                        {
  371|  12.7k|                            return OpCode::XOR;
  372|  12.7k|                        }
  373|   127k|                        break;
  374|  1.14M|                }
  375|   677k|                break;
  376|  1.14M|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  1.37M|            case 4: {
  ------------------
  |  Branch (379:13): [True: 1.37M, False: 4.53M]
  ------------------
  380|  1.37M|                const char c1 = token[0u];
  381|  1.37M|                const char c2 = token[1u];
  382|  1.37M|                const char c3 = token[2u];
  383|  1.37M|                const char c4 = token[3u];
  384|       |
  385|  1.37M|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 289k, False: 1.08M]
  ------------------
  386|  1.37M|                {
  387|  87.7k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 87.7k, False: 1.29M]
  ------------------
  388|   165k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 78.0k, False: 1.30M]
  ------------------
  389|   165k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 8.23k, False: 157k]
  ------------------
  390|   165k|                        {
  391|  56.7k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 56.7k, False: 109k]
  ------------------
  392|   121k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 64.3k, False: 101k]
  ------------------
  393|   121k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 109k, False: 11.9k]
  ------------------
  394|   109k|                                {
  395|   109k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 9.60k, False: 99.5k]
  ------------------
  396|   109k|                                    {
  397|  22.5k|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 22.5k, False: 86.6k]
  ------------------
  398|  31.9k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 9.41k, False: 99.7k]
  ------------------
  399|  31.9k|                                            return OpCode::ADDD;
  400|       |
  401|  8.71k|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 8.71k, False: 100k]
  ------------------
  402|  16.2k|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 7.56k, False: 101k]
  ------------------
  403|  16.2k|                                            return OpCode::ADDF;
  404|       |
  405|  12.9k|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 12.9k, False: 96.2k]
  ------------------
  406|  20.4k|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 7.53k, False: 101k]
  ------------------
  407|  20.4k|                                            return OpCode::ADDI;
  408|       |
  409|  15.9k|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 15.9k, False: 93.2k]
  ------------------
  410|  30.8k|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 14.9k, False: 94.1k]
  ------------------
  411|  30.8k|                                            return OpCode::ADDU;
  412|   109k|                                    }
  413|   109k|                                }
  414|  21.5k|                                break;
  415|       |
  416|  21.5k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 14.1k, False: 151k]
  ------------------
  417|  36.4k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 22.2k, False: 143k]
  ------------------
  418|  36.4k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 16.7k, False: 19.7k]
  |  Branch (418:37): [True: 5.99k, False: 30.4k]
  |  Branch (418:53): [True: 5.99k, False: 10.7k]
  ------------------
  419|  5.99k|                                {
  420|  5.99k|                                    return OpCode::ANDI;
  421|  5.99k|                                }
  422|       |
  423|  30.4k|                                break;
  424|   165k|                        }
  425|  60.2k|                        break;
  426|       |
  427|  60.2k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 30.3k, False: 1.34M]
  ------------------
  428|  97.7k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 67.4k, False: 1.31M]
  ------------------
  429|  97.7k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 4.81k, False: 92.9k]
  ------------------
  430|  97.7k|                        {
  431|  15.3k|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 15.3k, False: 82.3k]
  ------------------
  432|  21.0k|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 5.63k, False: 92.1k]
  ------------------
  433|  21.0k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 12.6k, False: 8.42k]
  |  Branch (433:37): [True: 5.60k, False: 15.4k]
  |  Branch (433:53): [True: 5.60k, False: 7.00k]
  ------------------
  434|  5.60k|                                {
  435|  5.60k|                                    return OpCode::BEQZ;
  436|  5.60k|                                }
  437|  15.4k|                                break;
  438|       |
  439|  15.4k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 7.92k, False: 89.8k]
  ------------------
  440|  29.7k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 21.8k, False: 75.9k]
  ------------------
  441|  29.7k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 23.1k, False: 6.57k]
  ------------------
  442|  23.1k|                                {
  443|  23.1k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 11.2k, False: 11.9k]
  ------------------
  444|  11.2k|                                    {
  445|  11.2k|                                        return OpCode::BFPF;
  446|  11.2k|                                    }
  447|  11.9k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 9.26k, False: 2.64k]
  ------------------
  448|  9.26k|                                    {
  449|  9.26k|                                        return OpCode::BFPT;
  450|  9.26k|                                    }
  451|  23.1k|                                }
  452|  9.21k|                                break;
  453|       |
  454|  11.0k|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 11.0k, False: 86.7k]
  ------------------
  455|  42.1k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 31.1k, False: 66.6k]
  ------------------
  456|  42.1k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 36.7k, False: 5.40k]
  |  Branch (456:37): [True: 21.4k, False: 20.7k]
  |  Branch (456:53): [True: 21.4k, False: 15.3k]
  ------------------
  457|  21.4k|                                {
  458|  21.4k|                                    return OpCode::BNEZ;
  459|  21.4k|                                }
  460|  97.7k|                        }
  461|  50.1k|                        break;
  462|       |
  463|  50.1k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 13.5k, False: 1.36M]
  ------------------
  464|   104k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 90.8k, False: 1.28M]
  ------------------
  465|   104k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 84.2k, False: 20.1k]
  |  Branch (465:29): [True: 66.7k, False: 37.7k]
  |  Branch (465:45): [True: 66.7k, False: 17.5k]
  ------------------
  466|  66.7k|                        {
  467|  66.7k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 9.07k, False: 57.6k]
  ------------------
  468|  66.7k|                            {
  469|  4.00k|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 4.00k, False: 62.7k]
  ------------------
  470|  11.1k|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 7.15k, False: 59.5k]
  ------------------
  471|  11.1k|                                    return OpCode::DIVD;
  472|       |
  473|  7.33k|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 7.33k, False: 59.3k]
  ------------------
  474|  9.67k|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 2.34k, False: 64.3k]
  ------------------
  475|  9.67k|                                    return OpCode::DIVF;
  476|       |
  477|  8.95k|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 8.95k, False: 57.7k]
  ------------------
  478|  24.1k|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 15.2k, False: 51.4k]
  ------------------
  479|  24.1k|                                    return OpCode::DIVI;
  480|       |
  481|  8.30k|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 8.30k, False: 58.4k]
  ------------------
  482|  12.6k|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 4.33k, False: 62.3k]
  ------------------
  483|  12.6k|                                    return OpCode::DIVU;
  484|  66.7k|                            }
  485|  66.7k|                        }
  486|  46.8k|                        break;
  487|       |
  488|  46.8k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 3.20k, False: 1.37M]
  ------------------
  489|  32.5k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 29.3k, False: 1.34M]
  ------------------
  490|  32.5k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 28.9k, False: 3.61k]
  |  Branch (490:29): [True: 17.8k, False: 14.7k]
  |  Branch (490:45): [True: 26.4k, False: 2.47k]
  |  Branch (490:61): [True: 17.8k, False: 8.66k]
  ------------------
  491|  17.8k|                        {
  492|  17.8k|                            return OpCode::HALT;
  493|  17.8k|                        }
  494|  14.7k|                        break;
  495|       |
  496|  14.7k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 7.17k, False: 1.37M]
  ------------------
  497|  49.8k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 42.6k, False: 1.33M]
  ------------------
  498|  49.8k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 42.3k, False: 7.46k]
  |  Branch (498:29): [True: 13.6k, False: 36.2k]
  |  Branch (498:45): [True: 30.9k, False: 11.4k]
  |  Branch (498:61): [True: 13.6k, False: 17.2k]
  ------------------
  499|  13.6k|                        {
  500|  13.6k|                            return OpCode::JALR;
  501|  13.6k|                        }
  502|  36.2k|                        break;
  503|       |
  504|  36.2k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 14.8k, False: 1.36M]
  ------------------
  505|  79.2k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 64.3k, False: 1.31M]
  ------------------
  506|  79.2k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 44.5k, False: 34.7k]
  |  Branch (506:29): [True: 39.0k, False: 40.1k]
  |  Branch (506:45): [True: 39.0k, False: 5.41k]
  ------------------
  507|  39.0k|                        {
  508|  39.0k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 8.50k, False: 30.5k]
  ------------------
  509|  8.50k|                            {
  510|  8.50k|                                return OpCode::MOVD;
  511|  8.50k|                            }
  512|  30.5k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 18.7k, False: 11.8k]
  ------------------
  513|  18.7k|                            {
  514|  18.7k|                                return OpCode::MOVF;
  515|  18.7k|                            }
  516|  39.0k|                        }
  517|  40.1k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 27.7k, False: 12.4k]
  |  Branch (517:34): [True: 18.4k, False: 21.7k]
  |  Branch (517:50): [True: 21.6k, False: 6.08k]
  |  Branch (517:66): [True: 18.4k, False: 3.17k]
  ------------------
  518|  18.4k|                        {
  519|  18.4k|                            return OpCode::MULT;
  520|  18.4k|                        }
  521|  33.5k|                        break;
  522|       |
  523|   238k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 238k, False: 1.13M]
  ------------------
  524|   496k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 257k, False: 1.12M]
  ------------------
  525|   496k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 20.1k, False: 476k]
  ------------------
  526|   496k|                        {
  527|  35.0k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 35.0k, False: 461k]
  ------------------
  528|  44.2k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 9.16k, False: 487k]
  ------------------
  529|  44.2k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 35.2k, False: 8.97k]
  ------------------
  530|  35.2k|                                {
  531|  35.2k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 13.2k, False: 22.0k]
  ------------------
  532|  13.2k|                                    {
  533|  13.2k|                                        return OpCode::SEQI;
  534|  13.2k|                                    }
  535|  22.0k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 9.43k, False: 12.5k]
  ------------------
  536|  9.43k|                                    {
  537|  9.43k|                                        return OpCode::SEQU;
  538|  9.43k|                                    }
  539|  35.2k|                                }
  540|  21.5k|                                break;
  541|       |
  542|  34.9k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 34.9k, False: 461k]
  ------------------
  543|   114k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 79.1k, False: 417k]
  ------------------
  544|   114k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 56.5k, False: 57.5k]
  ------------------
  545|  56.5k|                                {
  546|  56.5k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 23.4k, False: 33.1k]
  ------------------
  547|  23.4k|                                    {
  548|  23.4k|                                        return OpCode::SGEI;
  549|  23.4k|                                    }
  550|  33.1k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 25.2k, False: 7.90k]
  ------------------
  551|  25.2k|                                    {
  552|  25.2k|                                        return OpCode::SGEU;
  553|  25.2k|                                    }
  554|  56.5k|                                }
  555|  57.5k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 44.9k, False: 12.5k]
  ------------------
  556|  44.9k|                                {
  557|  44.9k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 15.0k, False: 29.9k]
  ------------------
  558|  15.0k|                                    {
  559|  15.0k|                                        return OpCode::SGTI;
  560|  15.0k|                                    }
  561|  29.9k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 24.7k, False: 5.14k]
  ------------------
  562|  24.7k|                                    {
  563|  24.7k|                                        return OpCode::SGTU;
  564|  24.7k|                                    }
  565|  44.9k|                                }
  566|  25.5k|                                break;
  567|       |
  568|  39.9k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 39.9k, False: 456k]
  ------------------
  569|   132k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 92.5k, False: 403k]
  ------------------
  570|   132k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 8.21k, False: 124k]
  ------------------
  571|   132k|                                {
  572|  10.8k|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 10.8k, False: 121k]
  ------------------
  573|  19.1k|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 8.29k, False: 124k]
  ------------------
  574|  19.1k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 12.5k, False: 6.56k]
  ------------------
  575|  12.5k|                                        {
  576|  12.5k|                                            return OpCode::SLAI;
  577|  12.5k|                                        }
  578|  6.56k|                                        break;
  579|       |
  580|  25.4k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 25.4k, False: 107k]
  ------------------
  581|  30.4k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 4.98k, False: 127k]
  ------------------
  582|  30.4k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 13.6k, False: 16.8k]
  ------------------
  583|  13.6k|                                        {
  584|  13.6k|                                            return OpCode::SLEI;
  585|  13.6k|                                        }
  586|  16.8k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 13.5k, False: 3.23k]
  ------------------
  587|  13.5k|                                        {
  588|  13.5k|                                            return OpCode::SLEU;
  589|  13.5k|                                        }
  590|  3.23k|                                        break;
  591|       |
  592|  6.33k|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 6.33k, False: 126k]
  ------------------
  593|  20.7k|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 14.4k, False: 118k]
  ------------------
  594|  20.7k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 14.9k, False: 5.79k]
  ------------------
  595|  14.9k|                                        {
  596|  14.9k|                                            return OpCode::SLLI;
  597|  14.9k|                                        }
  598|  5.79k|                                        break;
  599|       |
  600|  32.2k|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 32.2k, False: 100k]
  ------------------
  601|  54.0k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 21.7k, False: 110k]
  ------------------
  602|  54.0k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 15.1k, False: 38.8k]
  ------------------
  603|  15.1k|                                        {
  604|  15.1k|                                            return OpCode::SLTI;
  605|  15.1k|                                        }
  606|  38.8k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 21.6k, False: 17.2k]
  ------------------
  607|  21.6k|                                        {
  608|  21.6k|                                            return OpCode::SLTU;
  609|  21.6k|                                        }
  610|  17.2k|                                        break;
  611|   132k|                                }
  612|       |
  613|  46.0k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 5.07k, False: 491k]
  ------------------
  614|  93.8k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 47.7k, False: 448k]
  ------------------
  615|  93.8k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 51.4k, False: 42.3k]
  ------------------
  616|  51.4k|                                {
  617|  51.4k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 13.1k, False: 38.2k]
  ------------------
  618|  13.1k|                                    {
  619|  13.1k|                                        return OpCode::SNEI;
  620|  13.1k|                                    }
  621|  38.2k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 20.3k, False: 17.9k]
  ------------------
  622|  20.3k|                                    {
  623|  20.3k|                                        return OpCode::SNEU;
  624|  20.3k|                                    }
  625|  51.4k|                                }
  626|  60.2k|                                break;
  627|       |
  628|  60.2k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 24.4k, False: 471k]
  ------------------
  629|  45.6k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 21.2k, False: 475k]
  ------------------
  630|  45.6k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 23.2k, False: 22.4k]
  |  Branch (630:37): [True: 17.4k, False: 28.1k]
  |  Branch (630:53): [True: 17.4k, False: 5.70k]
  ------------------
  631|  17.4k|                                {
  632|  17.4k|                                    return OpCode::SRAI;
  633|  17.4k|                                }
  634|  28.1k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 21.7k, False: 6.35k]
  |  Branch (634:42): [True: 8.36k, False: 19.7k]
  |  Branch (634:58): [True: 8.36k, False: 13.4k]
  ------------------
  635|  8.36k|                                {
  636|  8.36k|                                    return OpCode::SRLI;
  637|  8.36k|                                }
  638|  19.7k|                                break;
  639|       |
  640|  32.2k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 32.2k, False: 464k]
  ------------------
  641|  86.8k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 54.6k, False: 441k]
  ------------------
  642|  86.8k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 77.4k, False: 9.45k]
  ------------------
  643|  77.4k|                                {
  644|  77.4k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 15.1k, False: 62.3k]
  ------------------
  645|  77.4k|                                    {
  646|  12.7k|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 12.7k, False: 64.6k]
  ------------------
  647|  18.8k|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 6.13k, False: 71.2k]
  ------------------
  648|  18.8k|                                            return OpCode::SUBD;
  649|       |
  650|  7.11k|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 7.11k, False: 70.3k]
  ------------------
  651|  14.6k|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 7.49k, False: 69.9k]
  ------------------
  652|  14.6k|                                            return OpCode::SUBF;
  653|       |
  654|  4.99k|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 4.99k, False: 72.4k]
  ------------------
  655|  14.7k|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 9.71k, False: 67.6k]
  ------------------
  656|  14.7k|                                            return OpCode::SUBI;
  657|       |
  658|  7.43k|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 7.43k, False: 69.9k]
  ------------------
  659|  14.1k|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 6.67k, False: 70.7k]
  ------------------
  660|  14.1k|                                            return OpCode::SUBU;
  661|  77.4k|                                    }
  662|  77.4k|                                }
  663|  24.5k|                                break;
  664|   496k|                        }
  665|   171k|                        break;
  666|       |
  667|   171k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 4.45k, False: 1.37M]
  ------------------
  668|  14.7k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 10.3k, False: 1.36M]
  ------------------
  669|  14.7k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 9.06k, False: 5.70k]
  |  Branch (669:29): [True: 3.01k, False: 11.7k]
  |  Branch (669:45): [True: 5.81k, False: 3.25k]
  |  Branch (669:61): [True: 3.01k, False: 2.79k]
  ------------------
  670|  3.01k|                        {
  671|  3.01k|                            return OpCode::TRAP;
  672|  3.01k|                        }
  673|  11.7k|                        break;
  674|  24.8k|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 24.8k, False: 1.35M]
  ------------------
  675|  47.3k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 22.5k, False: 1.35M]
  ------------------
  676|  47.3k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 38.2k, False: 9.11k]
  |  Branch (676:29): [True: 18.0k, False: 29.3k]
  |  Branch (676:45): [True: 32.8k, False: 5.46k]
  |  Branch (676:61): [True: 18.0k, False: 14.7k]
  ------------------
  677|  18.0k|                        {
  678|  18.0k|                            return OpCode::XORI;
  679|  18.0k|                        }
  680|  29.3k|                        break;
  681|  1.37M|                }
  682|   744k|                break;
  683|  1.37M|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|   811k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 811k, False: 5.09M]
  ------------------
  687|   811k|                const char c1 = token[0u];
  688|   811k|                const char c2 = token[1u];
  689|   811k|                const char c3 = token[2u];
  690|   811k|                const char c4 = token[3u];
  691|   811k|                const char c5 = token[4u];
  692|       |
  693|   811k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 185k, False: 625k]
  ------------------
  694|   811k|                {
  695|  22.9k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 22.9k, False: 788k]
  ------------------
  696|  85.5k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 62.6k, False: 748k]
  ------------------
  697|  85.5k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 78.5k, False: 7.04k]
  |  Branch (697:29): [True: 17.0k, False: 68.5k]
  |  Branch (697:45): [True: 68.2k, False: 10.3k]
  |  Branch (697:61): [True: 49.8k, False: 18.3k]
  |  Branch (697:77): [True: 17.0k, False: 32.7k]
  ------------------
  698|  17.0k|                        {
  699|  17.0k|                            return OpCode::ADDUI;
  700|  17.0k|                        }
  701|  68.5k|                        break;
  702|       |
  703|  68.5k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 6.28k, False: 804k]
  ------------------
  704|  74.4k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 68.1k, False: 743k]
  ------------------
  705|  74.4k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 59.9k, False: 14.4k]
  |  Branch (705:29): [True: 20.9k, False: 53.4k]
  |  Branch (705:45): [True: 45.2k, False: 14.6k]
  |  Branch (705:61): [True: 33.6k, False: 11.6k]
  |  Branch (705:77): [True: 20.9k, False: 12.7k]
  ------------------
  706|  20.9k|                        {
  707|  20.9k|                            return OpCode::DIVUI;
  708|  20.9k|                        }
  709|  53.4k|                        break;
  710|       |
  711|  53.4k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 33.9k, False: 777k]
  ------------------
  712|   126k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 92.7k, False: 718k]
  ------------------
  713|   126k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 89.9k, False: 36.7k]
  |  Branch (713:29): [True: 72.5k, False: 54.1k]
  |  Branch (713:45): [True: 75.9k, False: 13.9k]
  |  Branch (713:61): [True: 72.5k, False: 3.36k]
  ------------------
  714|  72.5k|                        {
  715|  72.5k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 10.8k, False: 61.7k]
  ------------------
  716|  72.5k|                            {
  717|  6.38k|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 6.38k, False: 66.1k]
  ------------------
  718|  9.59k|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 3.20k, False: 69.3k]
  ------------------
  719|  9.59k|                                    return OpCode::MULTD;
  720|       |
  721|  12.4k|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 12.4k, False: 60.0k]
  ------------------
  722|  23.7k|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 11.3k, False: 61.2k]
  ------------------
  723|  23.7k|                                    return OpCode::MULTF;
  724|       |
  725|  8.24k|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 8.24k, False: 64.3k]
  ------------------
  726|  15.9k|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 7.67k, False: 64.8k]
  ------------------
  727|  15.9k|                                    return OpCode::MULTI;
  728|       |
  729|  3.58k|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 3.58k, False: 68.9k]
  ------------------
  730|  12.4k|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 8.81k, False: 63.7k]
  ------------------
  731|  12.4k|                                    return OpCode::MULTU;
  732|  72.5k|                            }
  733|  72.5k|                        }
  734|  64.9k|                        break;
  735|       |
  736|   146k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 146k, False: 664k]
  ------------------
  737|   338k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 192k, False: 618k]
  ------------------
  738|   338k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 12.1k, False: 326k]
  ------------------
  739|   338k|                        {
  740|  54.4k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 54.4k, False: 284k]
  ------------------
  741|  74.1k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 19.6k, False: 319k]
  ------------------
  742|  74.1k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 54.5k, False: 19.6k]
  |  Branch (742:37): [True: 13.1k, False: 61.0k]
  |  Branch (742:53): [True: 31.1k, False: 23.3k]
  |  Branch (742:69): [True: 13.1k, False: 18.0k]
  ------------------
  743|  13.1k|                                {
  744|  13.1k|                                    return OpCode::SEQUI;
  745|  13.1k|                                }
  746|  61.0k|                                break;
  747|       |
  748|  61.0k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 33.9k, False: 304k]
  ------------------
  749|  77.9k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 43.9k, False: 294k]
  ------------------
  750|  77.9k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 36.1k, False: 41.7k]
  |  Branch (750:37): [True: 16.9k, False: 60.9k]
  |  Branch (750:53): [True: 25.7k, False: 10.4k]
  |  Branch (750:69): [True: 16.9k, False: 8.79k]
  ------------------
  751|  16.9k|                                {
  752|  16.9k|                                    return OpCode::SGEUI;
  753|  16.9k|                                }
  754|  60.9k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 41.0k, False: 19.9k]
  |  Branch (754:42): [True: 17.1k, False: 43.8k]
  |  Branch (754:58): [True: 37.4k, False: 3.65k]
  |  Branch (754:74): [True: 17.1k, False: 20.2k]
  ------------------
  755|  17.1k|                                {
  756|  17.1k|                                    return OpCode::SGTUI;
  757|  17.1k|                                }
  758|  43.8k|                                break;
  759|       |
  760|  43.8k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 24.3k, False: 314k]
  ------------------
  761|  96.2k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 71.9k, False: 266k]
  ------------------
  762|  96.2k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 39.8k, False: 56.3k]
  |  Branch (762:37): [True: 16.7k, False: 79.5k]
  |  Branch (762:53): [True: 30.3k, False: 9.54k]
  |  Branch (762:69): [True: 16.7k, False: 13.6k]
  ------------------
  763|  16.7k|                                {
  764|  16.7k|                                    return OpCode::SLEUI;
  765|  16.7k|                                }
  766|  79.5k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 46.3k, False: 33.2k]
  |  Branch (766:42): [True: 15.4k, False: 64.1k]
  |  Branch (766:58): [True: 37.0k, False: 9.22k]
  |  Branch (766:74): [True: 15.4k, False: 21.6k]
  ------------------
  767|  15.4k|                                {
  768|  15.4k|                                    return OpCode::SLTUI;
  769|  15.4k|                                }
  770|  64.1k|                                break;
  771|       |
  772|  64.1k|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 3.03k, False: 335k]
  ------------------
  773|  36.4k|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 33.4k, False: 305k]
  ------------------
  774|  36.4k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 33.2k, False: 3.16k]
  |  Branch (774:37): [True: 16.8k, False: 19.6k]
  |  Branch (774:53): [True: 29.3k, False: 3.95k]
  |  Branch (774:69): [True: 16.8k, False: 12.4k]
  ------------------
  775|  16.8k|                                {
  776|  16.8k|                                    return OpCode::SNEUI;
  777|  16.8k|                                }
  778|  19.6k|                                break;
  779|       |
  780|  19.6k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 11.9k, False: 326k]
  ------------------
  781|  41.9k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 29.9k, False: 308k]
  ------------------
  782|  41.9k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 32.2k, False: 9.72k]
  |  Branch (782:37): [True: 15.5k, False: 26.3k]
  |  Branch (782:53): [True: 24.1k, False: 8.09k]
  |  Branch (782:69): [True: 15.5k, False: 8.58k]
  ------------------
  783|  15.5k|                                {
  784|  15.5k|                                    return OpCode::SUBUI;
  785|  15.5k|                                }
  786|  26.3k|                                break;
  787|   338k|                        }
  788|       |
  789|   227k|                        break;
  790|   811k|                }
  791|       |
  792|   599k|                break;
  793|   811k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|   599k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 440k, False: 5.46M]
  ------------------
  797|   440k|                const char c1 = token[0u];
  798|   440k|                const char c2 = token[1u];
  799|   440k|                const char c3 = token[2u];
  800|   440k|                const char c4 = token[3u];
  801|   440k|                const char c5 = token[4u];
  802|   440k|                const char c6 = token[5u];
  803|       |
  804|   440k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 194k, False: 246k]
  |  Branch (804:21): [True: 169k, False: 271k]
  |  Branch (804:37): [True: 188k, False: 6.33k]
  |  Branch (804:53): [True: 169k, False: 19.2k]
  ------------------
  805|   169k|                {
  806|   169k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 6.12k, False: 162k]
  ------------------
  807|   169k|                    {
  808|  30.8k|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 30.8k, False: 138k]
  ------------------
  809|  57.0k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 26.1k, False: 142k]
  ------------------
  810|  57.0k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 49.4k, False: 7.61k]
  ------------------
  811|  49.4k|                            {
  812|  49.4k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 16.0k, False: 33.3k]
  ------------------
  813|  16.0k|                                {
  814|  16.0k|                                    return OpCode::CVTD2F;
  815|  16.0k|                                }
  816|  33.3k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 23.6k, False: 9.70k]
  ------------------
  817|  23.6k|                                {
  818|  23.6k|                                    return OpCode::CVTD2I;
  819|  23.6k|                                }
  820|  49.4k|                            }
  821|  17.3k|                            break;
  822|       |
  823|  17.3k|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 10.8k, False: 158k]
  ------------------
  824|  59.4k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 48.6k, False: 120k]
  ------------------
  825|  59.4k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 49.8k, False: 9.57k]
  ------------------
  826|  49.8k|                            {
  827|  49.8k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 21.8k, False: 27.9k]
  ------------------
  828|  21.8k|                                {
  829|  21.8k|                                    return OpCode::CVTF2D;
  830|  21.8k|                                }
  831|  27.9k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 20.2k, False: 7.75k]
  ------------------
  832|  20.2k|                                {
  833|  20.2k|                                    return OpCode::CVTF2I;
  834|  20.2k|                                }
  835|  49.8k|                            }
  836|  17.3k|                            break;
  837|       |
  838|  36.4k|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 36.4k, False: 132k]
  ------------------
  839|  46.5k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 10.0k, False: 159k]
  ------------------
  840|  46.5k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 32.9k, False: 13.6k]
  ------------------
  841|  32.9k|                            {
  842|  32.9k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 14.5k, False: 18.3k]
  ------------------
  843|  14.5k|                                {
  844|  14.5k|                                    return OpCode::CVTI2D;
  845|  14.5k|                                }
  846|  18.3k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 10.8k, False: 7.50k]
  ------------------
  847|  10.8k|                                {
  848|  10.8k|                                    return OpCode::CVTI2F;
  849|  10.8k|                                }
  850|  32.9k|                            }
  851|   169k|                    }
  852|   169k|                }
  853|   271k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 114k, False: 156k]
  |  Branch (853:26): [True: 27.9k, False: 243k]
  |  Branch (853:42): [True: 66.5k, False: 48.3k]
  |  Branch (853:58): [True: 47.7k, False: 18.8k]
  |  Branch (853:74): [True: 44.3k, False: 3.37k]
  ------------------
  854|   271k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 36.9k, False: 7.39k]
  |  Branch (854:42): [True: 27.9k, False: 9.05k]
  ------------------
  855|  27.9k|                {
  856|  27.9k|                    return OpCode::MULTUI;
  857|  27.9k|                }
  858|   305k|                break;
  859|   440k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|   305k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 219k, False: 5.69M]
  ------------------
  863|   219k|                const char c1 = token[0u];
  864|   219k|                const char c2 = token[1u];
  865|   219k|                const char c3 = token[2u];
  866|   219k|                const char c4 = token[3u];
  867|   219k|                const char c5 = token[4u];
  868|   219k|                const char c6 = token[5u];
  869|   219k|                const char c7 = token[6u];
  870|       |
  871|   219k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 113k, False: 105k]
  |  Branch (871:21): [True: 87.3k, False: 131k]
  |  Branch (871:37): [True: 96.9k, False: 16.4k]
  |  Branch (871:53): [True: 87.3k, False: 9.58k]
  ------------------
  872|  87.3k|                {
  873|  87.3k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 45.5k, False: 41.8k]
  |  Branch (873:25): [True: 16.2k, False: 71.1k]
  |  Branch (873:41): [True: 31.2k, False: 14.2k]
  |  Branch (873:54): [True: 27.9k, False: 3.30k]
  |  Branch (873:70): [True: 16.2k, False: 11.7k]
  ------------------
  874|  16.2k|                    {
  875|  16.2k|                        return OpCode::MOVI2FP;
  876|  16.2k|                    }
  877|  71.1k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 41.5k, False: 29.5k]
  |  Branch (877:25): [True: 22.3k, False: 48.8k]
  |  Branch (877:41): [True: 34.2k, False: 7.37k]
  |  Branch (877:57): [True: 29.3k, False: 4.89k]
  |  Branch (877:70): [True: 22.3k, False: 6.96k]
  ------------------
  878|  22.3k|                    {
  879|  22.3k|                        return OpCode::MOVFP2I;
  880|  22.3k|                    }
  881|  71.1k|                }
  882|   180k|                break;
  883|   219k|            }
  884|       |
  885|   180k|            default: {
  ------------------
  |  Branch (885:13): [True: 166k, False: 5.74M]
  ------------------
  886|   166k|                break;
  887|   219k|            }
  888|  5.91M|        }
  889|       |
  890|       |        // None found
  891|  3.97M|        return OpCode::NONE;
  892|  5.91M|    }
_ZN3dlx3iceEcc:
   17|  8.52M|    {
   18|  8.52M|        constexpr const char diff = 'a' - 'A';
   19|  8.52M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 2.60M, False: 5.91M]
  |  Branch (19:28): [True: 2.45M, False: 3.46M]
  ------------------
   20|  8.52M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  6.18M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|   110k|    {
  195|   110k|        ParseError err;
  196|       |
  197|   110k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|   110k|        err.m_LineNumber                           = line_number;
  199|   110k|        err.m_Column                               = column;
  200|   110k|        err.unexpected_argument_type.expected_type = expected_type;
  201|   110k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|   110k|        return err;
  204|   110k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|   110k|    {
  209|   110k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|   110k|                                                         token.GetColumn().unsafe(), expected_type,
  211|   110k|                                                         actual_type);
  212|   110k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|  8.70k|    {
  218|  8.70k|        ParseError err;
  219|       |
  220|  8.70k|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|  8.70k|        err.m_LineNumber        = line_number;
  222|  8.70k|        err.m_Column            = column;
  223|  8.70k|        err.invalid_number.text = text;
  224|       |
  225|  8.70k|        return err;
  226|  8.70k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|  8.70k|    {
  230|  8.70k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|  8.70k|                                                token.GetColumn().unsafe(), token.GetText());
  232|  8.70k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|     13|    {
  237|     13|        ParseError err;
  238|       |
  239|     13|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|     13|        err.m_LineNumber = line_number;
  241|     13|        err.m_Column     = column;
  242|       |
  243|     13|        return err;
  244|     13|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|     13|    {
  249|     13|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|     13|                                                                     token.GetColumn().unsafe());
  251|     13|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  2.71M|    {
  257|  2.71M|        ParseError err;
  258|       |
  259|  2.71M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  2.71M|        err.m_LineNumber                   = line_number;
  261|  2.71M|        err.m_Column                       = column;
  262|  2.71M|        err.unexpected_token.expected_type = expected_type;
  263|  2.71M|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  2.71M|        return err;
  266|  2.71M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  2.71M|    {
  271|  2.71M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  2.71M|                                                  token.GetColumn().unsafe(), expected_type,
  273|  2.71M|                                                  token.GetType());
  274|  2.71M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|   677k|    {
  279|   677k|        ParseError err;
  280|       |
  281|   677k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|   677k|        err.m_LineNumber                   = line_number;
  283|   677k|        err.m_Column                       = column;
  284|   677k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|   677k|        return err;
  287|   677k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|  9.42k|    {
  291|  9.42k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|  9.42k|                                                    token.GetColumn().unsafe(), token.GetText());
  293|  9.42k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  1.21M|    {
  298|  1.21M|        ParseError err;
  299|       |
  300|  1.21M|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  1.21M|        err.m_LineNumber                       = line_number;
  302|  1.21M|        err.m_Column                           = column;
  303|  1.21M|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  1.21M|        return err;
  306|  1.21M|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  1.21M|    {
  311|  1.21M|        return ConstructInvalidLabelIdentifierParseError(
  312|  1.21M|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  1.21M|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|   259k|    {
  319|   259k|        ParseError err;
  320|       |
  321|   259k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|   259k|        err.m_LineNumber                     = line_number;
  323|   259k|        err.m_Column                         = column;
  324|   259k|        err.label_already_defined.label_name = label_name;
  325|   259k|        err.label_already_defined.at_line    = at_line;
  326|   259k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|   259k|        return err;
  329|   259k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|   259k|    {
  334|   259k|        return ConstructLabelAlreadyDefinedParseError(
  335|   259k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|   259k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|   259k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|   744k|    {
  342|   744k|        ParseError err;
  343|       |
  344|   744k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|   744k|        err.m_LineNumber = line_number;
  346|   744k|        err.m_Column     = column;
  347|       |
  348|   744k|        return err;
  349|   744k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|   744k|    {
  354|   744k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|   744k|                                                        token.GetColumn().unsafe());
  356|   744k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|  89.3k|    {
  362|  89.3k|        ParseError err;
  363|       |
  364|  89.3k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|  89.3k|        err.m_LineNumber               = line_number;
  366|  89.3k|        err.m_Column                   = column;
  367|  89.3k|        err.too_few_arguments.required = required;
  368|  89.3k|        err.too_few_arguments.provided = provided;
  369|       |
  370|  89.3k|        return err;
  371|  89.3k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|  89.3k|    {
  376|  89.3k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|  89.3k|                                                  token.GetColumn().unsafe(), required, provided);
  378|  89.3k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|   223k|    {
  383|   223k|        ParseError err;
  384|       |
  385|   223k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|   223k|        err.m_LineNumber           = line_number;
  387|   223k|        err.m_Column               = column;
  388|   223k|        err.empty_label.label_name = label_name;
  389|       |
  390|   223k|        return err;
  391|   223k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|   223k|    {
  395|   223k|        return ConstructEmptyLabelParseError(
  396|   223k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|   223k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 187k, False: 35.4k]
  ------------------
  398|   187k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|   223k|                        token.GetText());
  400|   223k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|   142k|    {
  405|   142k|        ParseError err;
  406|       |
  407|   142k|        err.m_Type       = ParseError::Type::TooManyComma;
  408|   142k|        err.m_LineNumber = line_number;
  409|   142k|        err.m_Column     = column;
  410|       |
  411|   142k|        return err;
  412|   142k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|   142k|    {
  416|   142k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|   142k|                                               token.GetColumn().unsafe());
  418|   142k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  6.18M|    {
   19|  6.18M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  6.18M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  31.5k|    {
  181|  31.5k|        ParsedProgram program;
  182|       |
  183|  31.5k|        program.m_Tokens = tokens;
  184|       |
  185|  31.5k|        phi::boolean line_has_instruction{false};
  186|  31.5k|        phi::usize   label_count{0u};
  187|       |
  188|  7.08M|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 7.04M, False: 31.5k]
  ------------------
  189|  7.04M|        {
  190|  7.04M|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|  7.04M|            switch (current_token.GetType())
  195|  7.04M|            {
  196|       |                // Ignore comments
  197|  44.5k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 44.5k, False: 7.00M]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  44.5k|                    break;
  200|       |
  201|   851k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 851k, False: 6.19M]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|   851k|                    line_has_instruction = false;
  204|   851k|                    break;
  205|       |
  206|  2.71M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 2.71M, False: 4.33M]
  ------------------
  207|  2.71M|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 433k, False: 2.28M]
  ------------------
  208|   433k|                    {
  209|   433k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|   433k|                                current_token, Token::Type::NewLine));
  211|   433k|                        break;
  212|   433k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  2.28M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 756k, False: 1.52M]
  ------------------
  217|   756k|                    {
  218|   756k|                        program.AddParseError(
  219|   756k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|   756k|                        break;
  221|   756k|                    }
  222|       |
  223|  1.52M|                    phi::string_view label_name = current_token.GetText();
  224|  1.52M|                    label_name.remove_suffix(1u);
  225|       |
  226|  1.52M|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 668k, False: 858k]
  ------------------
  227|   668k|                    {
  228|   668k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|   668k|                                current_token.GetLineNumber().unsafe(),
  230|   668k|                                current_token.GetColumn().unsafe(), label_name));
  231|   668k|                        break;
  232|   668k|                    }
  233|       |
  234|   858k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 360k, False: 498k]
  ------------------
  235|   360k|                    {
  236|   360k|                        program.AddParseError(
  237|   360k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|   360k|                        break;
  239|   360k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|   498k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 259k, False: 238k]
  ------------------
  243|   259k|                    {
  244|       |                        // Find first defintions of label
  245|   259k|                        const Token* first_label_definition =
  246|   259k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   259k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|   259k|                                    {
  249|   259k|                                        phi::string_view token_label_name = t.GetText();
  250|   259k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   259k|                                        if (token_label_name == label_name)
  253|   259k|                                        {
  254|   259k|                                            return true;
  255|   259k|                                        }
  256|   259k|                                    }
  257|       |
  258|   259k|                                    return false;
  259|   259k|                                });
  260|       |
  261|   259k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|   259k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|   259k|                                current_token, *first_label_definition));
  265|   259k|                        break;
  266|   259k|                    }
  267|       |
  268|   238k|                    program.m_JumpData[label_name] =
  269|   238k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|   238k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|   238k|                    break;
  276|   498k|                }
  277|       |
  278|  1.28M|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 1.28M, False: 5.76M]
  ------------------
  279|  1.28M|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 744k, False: 537k]
  ------------------
  280|   744k|                    {
  281|   744k|                        program.AddParseError(
  282|   744k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|   744k|                        break;
  284|   744k|                    }
  285|       |
  286|   537k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|   537k|                    PHI_ASSERT(current_token.HasHint());
  290|   537k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|   537k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|   537k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|   537k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|   537k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|   537k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|   537k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|   537k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|   537k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  1.15M|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 1.06M, False: 92.6k]
  ------------------
  312|  1.06M|                    {
  313|       |                        // Get next token
  314|  1.06M|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 2.58k, False: 1.06M]
  ------------------
  315|  2.58k|                        {
  316|  2.58k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|  2.58k|                                    current_token, number_of_argument_required.unsafe(),
  318|  2.58k|                                    argument_num.unsafe()));
  319|  2.58k|                            break;
  320|  2.58k|                        }
  321|       |
  322|  1.06M|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  1.06M|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 462k, False: 600k]
  ------------------
  326|   462k|                        {
  327|   462k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 142k, False: 319k]
  ------------------
  328|   142k|                            {
  329|   142k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|   142k|                            }
  331|       |
  332|   462k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|   462k|                            continue;
  335|   462k|                        }
  336|       |
  337|   600k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 86.7k, False: 513k]
  ------------------
  338|  86.7k|                        {
  339|  86.7k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  86.7k|                                    token, number_of_argument_required.unsafe(),
  341|  86.7k|                                    argument_num.unsafe()));
  342|  86.7k|                            break;
  343|  86.7k|                        }
  344|       |
  345|   513k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|   513k|                                parse_instruction_argument(
  347|   513k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|   513k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 355k, False: 157k]
  ------------------
  349|   355k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|   355k|                            break;
  352|   355k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|   157k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|   157k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|   157k|                        argument_num++;
  359|   157k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|   157k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|   537k|                    program.m_Instructions.emplace_back(instruction);
  367|   537k|                    line_has_instruction = true;
  368|   537k|                    break;
  369|  1.28M|                }
  370|       |
  371|  2.15M|                default:
  ------------------
  |  Branch (371:17): [True: 2.15M, False: 4.89M]
  ------------------
  372|  2.15M|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  2.15M|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 1.05M, False: 1.10M]
  ------------------
  374|  1.05M|                    {
  375|  1.05M|                        expected_token_type = Token::Type::NewLine;
  376|  1.05M|                    }
  377|       |
  378|  2.15M|                    program.AddParseError(
  379|  2.15M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  2.15M|                    break;
  381|  7.04M|            }
  382|  7.04M|        }
  383|       |
  384|       |        // Check for empty labels
  385|  31.5k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 10.4k, False: 21.0k]
  ------------------
  386|  10.4k|        {
  387|   277k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 266k, False: 10.4k]
  ------------------
  388|   266k|            {
  389|   266k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|   266k|                const Token& token = *it;
  392|   266k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 223k, False: 43.7k]
  ------------------
  393|   223k|                {
  394|   223k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|   223k|                    --label_count;
  396|   223k|                }
  397|   266k|            }
  398|  10.4k|        }
  399|       |
  400|  31.5k|        return program;
  401|  31.5k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  31.5k|    {
  405|  31.5k|        TokenStream tokens = Tokenize(source);
  406|  31.5k|        return Parse(tokens);
  407|  31.5k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|   513k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|   513k|        switch (token.GetType())
   37|   513k|        {
   38|  84.9k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 84.9k, False: 428k]
  ------------------
   39|  84.9k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 28.8k, False: 56.0k]
  ------------------
   40|  84.9k|                                          ArgumentType::AddressDisplacement))
   41|  28.8k|                {
   42|  28.8k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|  28.8k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|  28.8k|                    return {};
   46|  28.8k|                }
   47|       |
   48|       |                // Get address displacement
   49|  56.0k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  56.0k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  56.0k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 13, False: 56.0k]
  ------------------
   54|     13|                {
   55|     13|                    program.AddParseError(
   56|     13|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|     13|                    return {};
   58|     13|                }
   59|       |
   60|  56.0k|                auto         it           = tokens.current_position();
   61|  56.0k|                const Token& first_token  = tokens.consume();
   62|  56.0k|                const Token& second_token = tokens.consume();
   63|  56.0k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  56.0k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 18.8k, False: 37.1k]
  ------------------
   66|  18.8k|                {
   67|  18.8k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|  18.8k|                            first_token, Token::Type::OpenBracket));
   69|  18.8k|                    return {};
   70|  18.8k|                }
   71|       |
   72|       |                // Second token is the register
   73|  37.1k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 12.7k, False: 24.3k]
  ------------------
   74|  12.7k|                {
   75|  12.7k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|  12.7k|                            second_token, Token::Type::RegisterInt));
   77|  12.7k|                    return {};
   78|  12.7k|                }
   79|       |
   80|  24.3k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 9.38k, False: 15.0k]
  ------------------
   81|  9.38k|                {
   82|  9.38k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|  9.38k|                            third_token, Token::Type::ClosingBracket));
   84|  9.38k|                    return {};
   85|  9.38k|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|  15.0k|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|  15.0k|                return ConstructInstructionArgumentAddressDisplacement(
   94|  15.0k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|  24.3k|            }
   96|  25.6k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 25.6k, False: 487k]
  ------------------
   97|  25.6k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 4.29k, False: 21.3k]
  ------------------
   98|  4.29k|                {
   99|  4.29k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|  4.29k|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|  4.29k|                    return {};
  102|  4.29k|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  21.3k|                return ConstructInstructionArgumentRegisterInt(
  108|  21.3k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  25.6k|            }
  110|  60.0k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 60.0k, False: 453k]
  ------------------
  111|  60.0k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 8.23k, False: 51.8k]
  ------------------
  112|  8.23k|                {
  113|  8.23k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|  8.23k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|  8.23k|                    return {};
  116|  8.23k|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  51.8k|                return ConstructInstructionArgumentRegisterFloat(
  122|  51.8k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  60.0k|            }
  124|  9.42k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 9.42k, False: 503k]
  ------------------
  125|  9.42k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|  9.42k|                return {};
  128|  60.0k|            }
  129|   211k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 211k, False: 302k]
  ------------------
  130|       |                // Parse as Label
  131|   211k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 48.2k, False: 162k]
  ------------------
  132|  48.2k|                {
  133|  48.2k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  48.2k|                            token, expected_argument_type, ArgumentType::Label));
  135|  48.2k|                    return {};
  136|  48.2k|                }
  137|       |
  138|   162k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 162k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|   162k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 102k, False: 59.9k]
  ------------------
  145|   102k|                {
  146|   102k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|   102k|                    return {};
  148|   102k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  59.9k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|   162k|            }
  154|  39.0k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 39.0k, False: 474k]
  ------------------
  155|  39.0k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 20.6k, False: 18.3k]
  ------------------
  156|  20.6k|                {
  157|  20.6k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|  20.6k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|  20.6k|                    return {};
  160|  20.6k|                }
  161|       |
  162|  18.3k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 9.65k, False: 8.70k]
  ------------------
  163|  9.65k|                {
  164|  9.65k|                    return ConstructInstructionArgumentImmediateValue(
  165|  9.65k|                            static_cast<std::int16_t>(token.GetHint()));
  166|  9.65k|                }
  167|       |
  168|  8.70k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|  8.70k|                return {};
  170|  18.3k|            }
  171|       |
  172|  83.1k|            default:
  ------------------
  |  Branch (172:13): [True: 83.1k, False: 430k]
  ------------------
  173|  83.1k|                program.AddParseError(
  174|  83.1k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  83.1k|                return {};
  176|   513k|        }
  177|   513k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  3.66M|                                tokens.find_first_token_if([&](const Token& t) {
  247|  3.66M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 2.67M, False: 992k]
  ------------------
  248|  2.67M|                                    {
  249|  2.67M|                                        phi::string_view token_label_name = t.GetText();
  250|  2.67M|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  2.67M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 259k, False: 2.41M]
  ------------------
  253|   259k|                                        {
  254|   259k|                                            return true;
  255|   259k|                                        }
  256|  2.67M|                                    }
  257|       |
  258|  3.40M|                                    return false;
  259|  3.66M|                                });

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|  6.12M|    {
   13|  6.12M|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 1.04M, False: 5.07M]
  ------------------
   14|  1.04M|        {
   15|  1.04M|            const char first_char = token[0u];
   16|  1.04M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 5.45k, False: 1.04M]
  |  Branch (16:38): [True: 92.1k, False: 952k]
  ------------------
   17|  97.6k|            {
   18|  97.6k|                const char second_char = token[1u];
   19|  97.6k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 94.0k, False: 3.62k]
  |  Branch (19:43): [True: 74.8k, False: 19.2k]
  ------------------
   20|  74.8k|                {
   21|  74.8k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  74.8k|                }
   23|  97.6k|            }
   24|  1.04M|        }
   25|  5.07M|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 1.20M, False: 3.86M]
  ------------------
   26|  1.20M|        {
   27|  1.20M|            const char first_char = token[0u];
   28|  1.20M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 3.11k, False: 1.20M]
  |  Branch (28:38): [True: 76.0k, False: 1.13M]
  ------------------
   29|  79.1k|            {
   30|  79.1k|                const char second_char = token[1u];
   31|  79.1k|                const char third_char  = token[2u];
   32|       |
   33|  79.1k|                switch (second_char)
   34|  79.1k|                {
   35|  31.2k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 31.2k, False: 47.8k]
  ------------------
   36|  31.2k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 20.6k, False: 10.6k]
  |  Branch (36:50): [True: 11.2k, False: 9.42k]
  ------------------
   37|  11.2k|                        {
   38|  11.2k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|  11.2k|                        }
   40|  20.0k|                        break;
   41|  31.2k|                    }
   42|  25.6k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 25.6k, False: 53.4k]
  ------------------
   43|  25.6k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 11.6k, False: 14.0k]
  |  Branch (43:50): [True: 7.15k, False: 4.48k]
  ------------------
   44|  7.15k|                        {
   45|  7.15k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|  7.15k|                        }
   47|  18.5k|                        break;
   48|  25.6k|                    }
   49|  18.5k|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 11.6k, False: 67.5k]
  ------------------
   50|  11.6k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 1.73k, False: 9.88k]
  |  Branch (50:50): [True: 2.88k, False: 6.99k]
  ------------------
   51|  4.61k|                        {
   52|  4.61k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|  4.61k|                        }
   54|  6.99k|                        break;
   55|  11.6k|                    }
   56|  10.5k|                    default: {
  ------------------
  |  Branch (56:21): [True: 10.5k, False: 68.5k]
  ------------------
   57|  10.5k|                        break;
   58|  11.6k|                    }
   59|  79.1k|                }
   60|  79.1k|            }
   61|  1.20M|        }
   62|       |
   63|  6.02M|        return IntRegisterID::None;
   64|  6.12M|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|  6.02M|    {
   68|  6.02M|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 974k, False: 5.04M]
  ------------------
   69|   974k|        {
   70|   974k|            const char first_char = token[0u];
   71|   974k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 80.4k, False: 894k]
  |  Branch (71:38): [True: 23.7k, False: 870k]
  ------------------
   72|   104k|            {
   73|   104k|                const char second_char = token[1u];
   74|   104k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 99.1k, False: 5.07k]
  |  Branch (74:43): [True: 72.6k, False: 26.5k]
  ------------------
   75|  72.6k|                {
   76|  72.6k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  72.6k|                }
   78|   104k|            }
   79|   974k|        }
   80|  5.04M|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 1.18M, False: 3.86M]
  ------------------
   81|  1.18M|        {
   82|  1.18M|            const char first_char = token[0u];
   83|  1.18M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 63.0k, False: 1.12M]
  |  Branch (83:38): [True: 28.3k, False: 1.09M]
  ------------------
   84|  91.3k|            {
   85|  91.3k|                const char second_char = token[1u];
   86|  91.3k|                const char third_char  = token[2u];
   87|       |
   88|  91.3k|                switch (second_char)
   89|  91.3k|                {
   90|  5.93k|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 5.93k, False: 85.4k]
  ------------------
   91|  5.93k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 4.63k, False: 1.30k]
  |  Branch (91:50): [True: 2.84k, False: 1.78k]
  ------------------
   92|  2.84k|                        {
   93|  2.84k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|  2.84k|                        }
   95|  3.09k|                        break;
   96|  5.93k|                    }
   97|  13.3k|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 13.3k, False: 78.0k]
  ------------------
   98|  13.3k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 11.6k, False: 1.68k]
  |  Branch (98:50): [True: 4.92k, False: 6.76k]
  ------------------
   99|  4.92k|                        {
  100|  4.92k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|  4.92k|                        }
  102|  8.44k|                        break;
  103|  13.3k|                    }
  104|  47.0k|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 47.0k, False: 44.3k]
  ------------------
  105|  47.0k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 25.4k, False: 21.5k]
  |  Branch (105:50): [True: 7.37k, False: 14.1k]
  ------------------
  106|  32.8k|                        {
  107|  32.8k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|  32.8k|                        }
  109|  14.1k|                        break;
  110|  47.0k|                    }
  111|  25.0k|                    default: {
  ------------------
  |  Branch (111:21): [True: 25.0k, False: 66.3k]
  ------------------
  112|  25.0k|                        break;
  113|  47.0k|                    }
  114|  91.3k|                }
  115|  91.3k|            }
  116|  1.18M|        }
  117|       |
  118|  5.91M|        return FloatRegisterID::None;
  119|  6.02M|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|  5.48M|    {
  123|  5.48M|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 1.13M, False: 4.34M]
  ------------------
  124|  1.13M|        {
  125|  1.13M|            const char c1 = token[0u];
  126|  1.13M|            const char c2 = token[1u];
  127|  1.13M|            const char c3 = token[2u];
  128|  1.13M|            const char c4 = token[3u];
  129|       |
  130|  1.13M|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 40.4k, False: 1.09M]
  |  Branch (130:34): [True: 31.0k, False: 1.06M]
  |  Branch (130:49): [True: 33.4k, False: 38.0k]
  |  Branch (130:62): [True: 2.40k, False: 35.6k]
  ------------------
  131|  1.13M|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 6.76k, False: 29.0k]
  |  Branch (131:34): [True: 26.0k, False: 3.01k]
  |  Branch (131:49): [True: 5.82k, False: 26.9k]
  |  Branch (131:62): [True: 21.2k, False: 5.76k]
  ------------------
  132|  1.13M|        }
  133|       |
  134|  4.34M|        return false;
  135|  5.48M|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|  6.63M|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  1.64M|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  15.9M|    {
   41|  15.9M|        return m_Type;
   42|  15.9M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  6.98M|    {
   51|  6.98M|        return m_LineNumber;
   52|  6.98M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  6.44M|    {
   56|  6.44M|        return m_Column;
   57|  6.44M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  9.00M|    {
   66|  9.00M|        return m_Text;
   67|  9.00M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   611k|    {
   80|   611k|        return m_HasHint;
   81|   611k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   691k|    {
   85|   691k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   691k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   691k|                   m_Type == Type::ImmediateInteger);
   88|   691k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   691k|        return m_Hint;
   91|   691k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  31.5k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  31.5k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  31.5k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  56.0k|    {
   51|  56.0k|        auto it = m_Iterator;
   52|   224k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 168k, False: 56.0k]
  ------------------
   53|   168k|        {
   54|   168k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 13, False: 168k]
  ------------------
   55|     13|            {
   56|     13|                return false;
   57|     13|            }
   58|   168k|        }
   59|       |
   60|  56.0k|        return true;
   61|  56.0k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  8.14M|    {
   65|  8.14M|        return m_Iterator != m_Tokens.end();
   66|  8.14M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  8.27M|    {
   70|  8.27M|        return m_Iterator == m_Tokens.end();
   71|  8.27M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  8.27M|    {
   85|  8.27M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  8.27M|        return *m_Iterator++;
   91|  8.27M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  56.0k|    {
  164|  56.0k|        return m_Iterator;
  165|  56.0k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  15.0k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  15.0k|        m_Iterator = it;
  179|  15.0k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  10.4k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  10.4k|        return m_Tokens.rbegin();
  224|  10.4k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|   266k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|   266k|        return m_Tokens.rend();
  233|   266k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  31.5k|    {
   66|  31.5k|        TokenStream tokens;
   67|       |
   68|  31.5k|        phi::string_view current_token;
   69|       |
   70|  31.5k|        phi::u64 current_line_number{1u};
   71|  31.5k|        phi::u64 current_column{1u};
   72|  31.5k|        phi::u64 token_begin{0u};
   73|       |
   74|  31.5k|        phi::boolean parsing_comment{false};
   75|       |
   76|  21.1M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 21.0M, False: 31.5k]
  ------------------
   77|  21.0M|        {
   78|  21.0M|            const char c{source.at(i)};
   79|       |
   80|  21.0M|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 943k, False: 20.1M]
  ------------------
   81|   943k|            {
   82|   943k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 152k, False: 790k]
  ------------------
   83|   152k|                {
   84|       |                    // Skip empty lines
   85|   152k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|   152k|                                        current_line_number, current_column);
   87|       |
   88|   152k|                    parsing_comment = false;
   89|   152k|                    current_line_number += 1u;
   90|   152k|                    current_column = 1u;
   91|   152k|                    continue;
   92|   152k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|   790k|                tokens.emplace_back(ParseToken(
   96|   790k|                        source.substring_view(
   97|   790k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|   790k|                                current_token.length()),
   99|   790k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|   790k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|   790k|                                    current_line_number, current_column);
  103|       |
  104|   790k|                current_token   = phi::string_view{};
  105|   790k|                parsing_comment = false;
  106|   790k|                current_line_number += 1u;
  107|   790k|                current_column = 0u;
  108|   790k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|  20.1M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 13.9k, False: 20.1M]
  |  Branch (110:34): [True: 40.8k, False: 20.0M]
  ------------------
  111|  54.8k|            {
  112|  54.8k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 25.7k, False: 29.0k]
  ------------------
  113|  25.7k|                {
  114|  25.7k|                    token_begin = i;
  115|  25.7k|                }
  116|  29.0k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 26.5k, False: 2.54k]
  ------------------
  117|  26.5k|                {
  118|  26.5k|                    tokens.emplace_back(ParseToken(
  119|  26.5k|                            source.substring_view(
  120|  26.5k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  26.5k|                                    current_token.length()),
  122|  26.5k|                            current_line_number, current_column - current_token.length()));
  123|  26.5k|                    token_begin   = i;
  124|  26.5k|                    current_token = phi::string_view{};
  125|  26.5k|                }
  126|       |
  127|  54.8k|                parsing_comment = true;
  128|  54.8k|                current_token   = source.substring_view(
  129|  54.8k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  54.8k|                        current_token.length() + 1u);
  131|  54.8k|            }
  132|  20.0M|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 86.2k, False: 19.9M]
  ------------------
  133|  86.2k|            {
  134|       |                // simply append the character
  135|  86.2k|                current_token = source.substring_view(
  136|  86.2k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|  86.2k|                        current_token.length() + 1u);
  138|  86.2k|            }
  139|  19.9M|            else
  140|  19.9M|            {
  141|       |                // Not parsing a comment
  142|  19.9M|                switch (c)
  143|  19.9M|                {
  144|   245k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 245k, False: 19.7M]
  ------------------
  145|   429k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 184k, False: 19.8M]
  ------------------
  146|   757k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 327k, False: 19.6M]
  ------------------
  147|   757k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 140k, False: 616k]
  ------------------
  148|   140k|                        {
  149|   140k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|   140k|                            continue;
  152|   140k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|   616k|                        tokens.emplace_back(ParseToken(
  156|   616k|                                source.substring_view(
  157|   616k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|   616k|                                        current_token.length()),
  159|   616k|                                current_line_number, current_column - current_token.length()));
  160|   616k|                        current_token = phi::string_view{};
  161|   616k|                        break;
  162|  1.87M|                    case ':':
  ------------------
  |  Branch (162:21): [True: 1.87M, False: 18.1M]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  1.87M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 1.64M, False: 227k]
  ------------------
  165|  1.64M|                        {
  166|  1.64M|                            current_token = source.substring_view(
  167|  1.64M|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  1.64M|                                    current_token.length() + 1u);
  169|  1.64M|                            tokens.emplace_back(ParseToken(
  170|  1.64M|                                    source.substring_view(
  171|  1.64M|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  1.64M|                                                    token_begin),
  173|  1.64M|                                            current_token.length()),
  174|  1.64M|                                    current_line_number,
  175|  1.64M|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  1.64M|                            current_token = phi::string_view{};
  178|  1.64M|                        }
  179|   227k|                        else
  180|   227k|                        {
  181|       |                            // Orphan colon
  182|   227k|                            token_begin = i;
  183|       |
  184|   227k|                            tokens.emplace_back(
  185|   227k|                                    Token::Type::Colon,
  186|   227k|                                    source.substring_view(
  187|   227k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|   227k|                                                    token_begin),
  189|   227k|                                            1u),
  190|   227k|                                    current_line_number, current_column);
  191|   227k|                        }
  192|  1.87M|                        break;
  193|  1.35M|                    case ',':
  ------------------
  |  Branch (193:21): [True: 1.35M, False: 18.6M]
  ------------------
  194|  2.33M|                    case '(':
  ------------------
  |  Branch (194:21): [True: 975k, False: 19.0M]
  ------------------
  195|  2.41M|                    case ')':
  ------------------
  |  Branch (195:21): [True: 84.9k, False: 19.9M]
  ------------------
  196|  2.41M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 1.59M, False: 823k]
  ------------------
  197|  1.59M|                        {
  198|  1.59M|                            tokens.emplace_back(ParseToken(
  199|  1.59M|                                    source.substring_view(
  200|  1.59M|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  1.59M|                                                    token_begin),
  202|  1.59M|                                            current_token.length()),
  203|  1.59M|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  1.59M|                            current_token = phi::string_view{};
  206|  1.59M|                        }
  207|       |
  208|  2.41M|                        Token::Type type;
  209|  2.41M|                        switch (c)
  210|  2.41M|                        {
  211|  1.35M|                            case ',':
  ------------------
  |  Branch (211:29): [True: 1.35M, False: 1.06M]
  ------------------
  212|  1.35M|                                type = Token::Type::Comma;
  213|  1.35M|                                break;
  214|   975k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 975k, False: 1.44M]
  ------------------
  215|   975k|                                type = Token::Type::OpenBracket;
  216|   975k|                                break;
  217|  84.9k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 84.9k, False: 2.33M]
  ------------------
  218|  84.9k|                                type = Token::Type::ClosingBracket;
  219|  84.9k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 2.41M]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  2.41M|#endif
  225|  2.41M|                        }
  226|       |
  227|  2.41M|                        token_begin = i;
  228|       |
  229|  2.41M|                        tokens.emplace_back(
  230|  2.41M|                                type,
  231|  2.41M|                                source.substring_view(
  232|  2.41M|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  2.41M|                                        1u),
  234|  2.41M|                                current_line_number, current_column);
  235|  2.41M|                        break;
  236|       |
  237|  14.9M|                    default:
  ------------------
  |  Branch (237:21): [True: 14.9M, False: 5.04M]
  ------------------
  238|  14.9M|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 4.64M, False: 10.3M]
  ------------------
  239|  4.64M|                        {
  240|  4.64M|                            token_begin = i;
  241|  4.64M|                        }
  242|       |
  243|       |                        // simply append the character
  244|  14.9M|                        current_token = source.substring_view(
  245|  14.9M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|  14.9M|                                current_token.length() + 1u);
  247|  19.9M|                }
  248|  19.9M|            }
  249|       |
  250|  20.7M|            current_column += 1u;
  251|  20.7M|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  31.5k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 21.3k, False: 10.2k]
  ------------------
  255|  21.3k|        {
  256|  21.3k|            tokens.emplace_back(
  257|  21.3k|                    ParseToken(source.substring_view(
  258|  21.3k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  21.3k|                                       current_token.length()),
  260|  21.3k|                               current_line_number, current_column - current_token.length()));
  261|  21.3k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  31.5k|        tokens.finalize();
  265|       |
  266|  31.5k|        return tokens;
  267|  31.5k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|  4.69M|    {
   14|  4.69M|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 51.5k, False: 4.64M]
  |  Branch (14:13): [True: 46.2k, False: 4.64M]
  |  Branch (14:36): [True: 46.2k, False: 5.24k]
  ------------------
   15|  46.2k|        {
   16|  46.2k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  46.2k|            if (number)
  ------------------
  |  Branch (18:17): [True: 13.9k, False: 32.3k]
  ------------------
   19|  13.9k|            {
   20|  13.9k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  13.9k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  13.9k|            }
   23|       |
   24|  32.3k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  46.2k|        }
   26|       |
   27|  4.64M|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 13.6k, False: 4.63M]
  |  Branch (27:13): [True: 52.3k, False: 4.59M]
  |  Branch (27:36): [True: 38.6k, False: 4.59M]
  ------------------
   28|  52.3k|        {
   29|  52.3k|            return {Token::Type::Comment, token, line_number, column};
   30|  52.3k|        }
   31|       |
   32|  4.59M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 140k, False: 4.45M]
  ------------------
   33|   140k|        {
   34|   140k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|   140k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|   140k|        }
   37|       |
   38|  4.45M|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 21.1k, False: 4.43M]
  ------------------
   39|  21.1k|        {
   40|  21.1k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  21.1k|        }
   42|       |
   43|  4.43M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 75.6k, False: 4.35M]
  ------------------
   44|  75.6k|        {
   45|  75.6k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  75.6k|                    static_cast<phi::uint32_t>(id)};
   47|  75.6k|        }
   48|       |
   49|  4.35M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 104k, False: 4.25M]
  ------------------
   50|   104k|        {
   51|   104k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|   104k|                    static_cast<phi::uint32_t>(id)};
   53|   104k|        }
   54|       |
   55|  4.25M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 1.30M, False: 2.94M]
  ------------------
   56|  1.30M|        {
   57|  1.30M|            return {Token::Type::OpCode, token, line_number, column,
   58|  1.30M|                    static_cast<phi::uint32_t>(opcode)};
   59|  1.30M|        }
   60|       |
   61|  2.94M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  4.25M|    }

LLVMFuzzerTestOneInput:
    8|  31.5k|{
    9|  31.5k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   10|       |
   11|       |    // Parse it
   12|  31.5k|    dlx::Parser::Parse(source);
   13|       |
   14|  31.5k|    return 0;
   15|  31.5k|}


_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  1.97M|        {
  169|  1.97M|            PHI_ASSERT(index < 3u);
  170|       |
  171|  1.97M|            switch (index.unsafe())
  172|  1.97M|            {
  173|   905k|                case 0:
  ------------------
  |  Branch (173:17): [True: 905k, False: 1.07M]
  ------------------
  174|   905k|                    return m_Arg1Type;
  175|       |
  176|   547k|                case 1:
  ------------------
  |  Branch (176:17): [True: 547k, False: 1.43M]
  ------------------
  177|   547k|                    return m_Arg2Type;
  178|       |
  179|   525k|                case 2:
  ------------------
  |  Branch (179:17): [True: 525k, False: 1.45M]
  ------------------
  180|   525k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 1.97M]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  1.97M|#endif
  187|  1.97M|            }
  188|  1.97M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   500k|        {
  195|   500k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   500k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 487k, False: 13.0k]
  ------------------
  199|   487k|            {
  200|   487k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   487k|            }
  202|   500k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 280k, False: 220k]
  ------------------
  203|   280k|            {
  204|   280k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   280k|            }
  206|   500k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 157k, False: 343k]
  ------------------
  207|   157k|            {
  208|   157k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   157k|            }
  210|       |
  211|   500k|            return number_of_argument_required;
  212|   500k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   500k|        {
  221|   500k|            return m_Executor;
  222|   500k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   390k|    {
   38|   390k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   390k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   390k|                                         static_cast<underlying_t>(rhs));
   42|   390k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   390k|    {
   55|   390k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   390k|        return static_cast<underlying_t>(type & test) != 0;
   58|   390k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  1.55M|    {
   31|  1.55M|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 21.2k, False: 1.53M]
  ------------------
   32|  21.2k|        {
   33|  21.2k|            return true;
   34|  21.2k|        }
   35|       |
   36|  1.53M|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 6.98k, False: 1.53M]
  ------------------
   37|  6.98k|        {
   38|  6.98k|            return true;
   39|  6.98k|        }
   40|       |
   41|  1.53M|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 583k, False: 948k]
  ------------------
   42|   583k|        {
   43|   583k|            return true;
   44|   583k|        }
   45|       |
   46|   948k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 4.99k, False: 943k]
  ------------------
   47|  4.99k|        {
   48|  4.99k|            return true;
   49|  4.99k|        }
   50|       |
   51|   943k|        return false;
   52|   948k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|   943k|    {
   56|   943k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 943k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|   943k|        const char first_char = token.at(0u);
   62|       |
   63|   943k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 194k, False: 748k]
  ------------------
   64|   194k|        {
   65|   194k|            return phi::is_alpha(first_char);
   66|   194k|        }
   67|       |
   68|   748k|        phi::boolean just_under_scores = (first_char == '_');
   69|   748k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 130k, False: 618k]
  |  Branch (69:13): [True: 106k, False: 642k]
  |  Branch (69:43): [True: 106k, False: 23.6k]
  ------------------
   70|   106k|        {
   71|   106k|            return false;
   72|   106k|        }
   73|       |
   74|  2.41M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 2.01M, False: 396k]
  ------------------
   75|  2.01M|        {
   76|  2.01M|            const char c{token.at(index)};
   77|       |
   78|  2.01M|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 1.75M, False: 267k]
  ------------------
   79|  1.75M|            {
   80|  1.75M|                just_under_scores = false;
   81|  1.75M|            }
   82|   267k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 22.2k, False: 245k]
  ------------------
   83|  22.2k|            {
   84|  22.2k|                continue;
   85|  22.2k|            }
   86|   245k|            else
   87|   245k|            {
   88|   245k|                return false;
   89|   245k|            }
   90|  2.01M|        }
   91|       |
   92|   396k|        return !just_under_scores;
   93|   642k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|  4.32M|    {
  100|  4.32M|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 4.32M]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|  4.32M|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 712k, False: 3.61M]
  ------------------
  106|   712k|        {
  107|   712k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 97.2k, False: 615k]
  ------------------
  108|  97.2k|            {
  109|  97.2k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  97.2k|            }
  111|       |
  112|   615k|            return {};
  113|   712k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|  3.61M|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 37.3k, False: 3.57M]
  ------------------
  117|  37.3k|        {
  118|  37.3k|            return {};
  119|  37.3k|        }
  120|       |
  121|  3.57M|        std::int32_t number{0};
  122|  3.57M|        phi::boolean is_negative{false};
  123|  3.57M|        phi::boolean starts_with_zero{false};
  124|  3.57M|        phi::boolean parsing_binary{false};
  125|  3.57M|        phi::boolean parsing_octal{false};
  126|  3.57M|        phi::boolean parsing_hexadecimal{false};
  127|  3.57M|        phi::boolean parsed_something{false};
  128|  3.57M|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|  4.00M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 3.94M, False: 64.5k]
  ------------------
  133|  3.94M|        {
  134|  3.94M|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|  3.94M|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 3.57M, False: 368k]
  ------------------
  138|  3.57M|            {
  139|  3.57M|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 7.80k, False: 3.56M]
  ------------------
  140|  7.80k|                {
  141|  7.80k|                    continue;
  142|  7.80k|                }
  143|       |
  144|  3.56M|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 26.5k, False: 3.54M]
  ------------------
  145|  26.5k|                {
  146|  26.5k|                    is_negative = true;
  147|  26.5k|                    continue;
  148|  26.5k|                }
  149|       |
  150|  3.54M|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 54.7k, False: 3.48M]
  ------------------
  151|  54.7k|                {
  152|  54.7k|                    starts_with_zero = true;
  153|  54.7k|                    continue;
  154|  54.7k|                }
  155|       |
  156|  3.48M|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 7.53k, False: 3.47M]
  ------------------
  157|  7.53k|                {
  158|  7.53k|                    return {};
  159|  7.53k|                }
  160|  3.48M|            }
  161|       |
  162|       |            // Second character
  163|  3.84M|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 153k, False: 3.69M]
  ------------------
  164|   153k|            {
  165|   153k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 54.7k, False: 99.2k]
  ------------------
  166|  54.7k|                {
  167|       |                    // Binary
  168|  54.7k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 7.59k, False: 47.1k]
  |  Branch (168:37): [True: 1.91k, False: 45.1k]
  ------------------
  169|  9.50k|                    {
  170|  9.50k|                        parsing_binary = true;
  171|  9.50k|                        continue;
  172|  9.50k|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  45.1k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 18.5k, False: 26.6k]
  |  Branch (175:37): [True: 4.43k, False: 22.2k]
  ------------------
  176|  22.9k|                    {
  177|  22.9k|                        parsing_hexadecimal = true;
  178|  22.9k|                        continue;
  179|  22.9k|                    }
  180|       |
  181|       |                    // Octal
  182|  22.2k|                    parsing_octal = true;
  183|  22.2k|                }
  184|   153k|            }
  185|       |
  186|       |            // Handle seperators
  187|  3.81M|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 10.3k, False: 3.80M]
  ------------------
  188|  10.3k|            {
  189|  10.3k|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 4.83k, False: 5.47k]
  ------------------
  190|  4.83k|                {
  191|  4.83k|                    return {};
  192|  4.83k|                }
  193|       |
  194|  5.47k|                parsed_separator = true;
  195|  5.47k|                continue;
  196|  10.3k|            }
  197|       |
  198|       |            // Check for over/underflow
  199|  3.80M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 99.3k, False: 3.70M]
  |  Branch (199:32): [True: 4.32k, False: 95.0k]
  ------------------
  200|  4.32k|            {
  201|       |                // Would underflow
  202|  4.32k|                return {};
  203|  4.32k|            }
  204|  3.79M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 3.70M, False: 95.0k]
  |  Branch (204:17): [True: 13.0k, False: 3.78M]
  |  Branch (204:33): [True: 13.0k, False: 3.69M]
  ------------------
  205|  13.0k|            {
  206|       |                // Would overflow
  207|  13.0k|                return {};
  208|  13.0k|            }
  209|       |
  210|  3.78M|            parsed_separator = false;
  211|  3.78M|            parsed_something = true;
  212|       |
  213|  3.78M|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 11.3k, False: 3.77M]
  ------------------
  214|  11.3k|            {
  215|  11.3k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 3.23k, False: 8.13k]
  ------------------
  216|  3.23k|                {
  217|  3.23k|                    return {};
  218|  3.23k|                }
  219|       |
  220|  8.13k|                number <<= 1;
  221|  8.13k|                number |= (c - '0');
  222|  8.13k|            }
  223|  3.77M|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 22.7k, False: 3.75M]
  ------------------
  224|  22.7k|            {
  225|  22.7k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 15.1k, False: 7.57k]
  ------------------
  226|  15.1k|                {
  227|  15.1k|                    return {};
  228|  15.1k|                }
  229|       |
  230|  7.57k|                number <<= 3;
  231|  7.57k|                number |= (c - '0');
  232|  7.57k|            }
  233|  3.75M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 34.7k, False: 3.71M]
  ------------------
  234|  34.7k|            {
  235|  34.7k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 18.4k, False: 16.2k]
  ------------------
  236|  18.4k|                {
  237|  18.4k|                    return {};
  238|  18.4k|                }
  239|       |
  240|  16.2k|                number <<= 4;
  241|  16.2k|                number |= phi::hex_digit_value(c).unsafe();
  242|  16.2k|            }
  243|  3.71M|            else
  244|  3.71M|            {
  245|  3.71M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 3.43M, False: 281k]
  ------------------
  246|  3.43M|                {
  247|  3.43M|                    return {};
  248|  3.43M|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|   281k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 89.5k, False: 191k]
  |  Branch (251:36): [True: 7.49k, False: 82.0k]
  ------------------
  252|  7.49k|                {
  253|  7.49k|                    return {};
  254|  7.49k|                }
  255|       |
  256|   273k|                number *= 10;
  257|   273k|                number += (c - '0');
  258|   273k|            }
  259|  3.78M|        }
  260|       |
  261|  64.5k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 61.1k, False: 3.42k]
  ------------------
  262|  61.1k|        {
  263|       |            // Check for over/underflow
  264|  61.1k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 12.2k, False: 48.9k]
  |  Branch (264:32): [True: 10.1k, False: 2.07k]
  ------------------
  265|  10.1k|            {
  266|       |                // Would underflow
  267|  10.1k|                return {};
  268|  10.1k|            }
  269|  50.9k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 48.9k, False: 2.07k]
  |  Branch (269:17): [True: 5.31k, False: 45.6k]
  |  Branch (269:33): [True: 5.31k, False: 43.5k]
  ------------------
  270|  5.31k|            {
  271|       |                // Would overflow
  272|  5.31k|                return {};
  273|  5.31k|            }
  274|       |
  275|  45.6k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 2.07k, False: 43.5k]
  ------------------
  276|  2.07k|            {
  277|  2.07k|                return static_cast<std::int16_t>(-number);
  278|  2.07k|            }
  279|       |
  280|  43.5k|            return static_cast<std::int16_t>(number);
  281|  45.6k|        }
  282|       |
  283|  3.42k|        return {};
  284|  64.5k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   243k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   243k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 3.48M, False: 0]
  ------------------
   64|  3.48M|            {
   65|  3.48M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 243k, False: 3.23M]
  ------------------
   66|   243k|                {
   67|   243k|                    return &token;
   68|   243k|                }
   69|  3.48M|            }
   70|       |
   71|      0|            return nullptr;
   72|   243k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  1.09M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.09M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.09M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  4.37M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  4.37M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  4.37M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  2.28M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.28M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.28M|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   500k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|   145k|    {
   25|   145k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|   145k|        switch (argument_number.unsafe())
   28|   145k|        {
   29|   104k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 104k, False: 40.7k]
  ------------------
   30|   104k|                m_Arg1 = argument;
   31|   104k|                break;
   32|  24.6k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 24.6k, False: 120k]
  ------------------
   33|  24.6k|                m_Arg2 = argument;
   34|  24.6k|                break;
   35|  16.0k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 16.0k, False: 129k]
  ------------------
   36|  16.0k|                m_Arg3 = argument;
   37|  16.0k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 145k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|   145k|#endif
   42|   145k|        }
   43|   145k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  1.64M|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  20.4k|    {
  171|  20.4k|        InstructionArgument arg;
  172|  20.4k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  20.4k|        arg.register_int.register_id = id;
  174|  20.4k|        return arg;
  175|  20.4k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  45.2k|    {
  179|  45.2k|        InstructionArgument arg;
  180|  45.2k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  45.2k|        arg.register_float.register_id = id;
  182|  45.2k|        return arg;
  183|  45.2k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  8.62k|    {
  187|  8.62k|        InstructionArgument arg;
  188|  8.62k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  8.62k|        arg.immediate_value.signed_value = value;
  190|  8.62k|        return arg;
  191|  8.62k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|  13.3k|    {
  196|  13.3k|        InstructionArgument arg;
  197|  13.3k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|  13.3k|        arg.address_displacement.register_id  = id;
  199|  13.3k|        arg.address_displacement.displacement = displacement;
  200|  13.3k|        return arg;
  201|  13.3k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  204|  57.5k|    {
  205|  57.5k|        InstructionArgument arg;
  206|  57.5k|        arg.m_Type           = ArgumentType::Label;
  207|  57.5k|        arg.label.label_name = label_name;
  208|  57.5k|        return arg;
  209|  57.5k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   500k|    {
  453|   500k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   500k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|  5.49M|    {
   24|  5.49M|        switch (token.length().unsafe())
   25|  5.49M|        {
   26|       |            // 1 character OpCodes
   27|   794k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 794k, False: 4.70M]
  ------------------
   28|   794k|                const char c1 = token[0u];
   29|       |
   30|   794k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 218k, False: 576k]
  ------------------
   31|   218k|                {
   32|   218k|                    return OpCode::J;
   33|   218k|                }
   34|   576k|                break;
   35|   794k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|   842k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 842k, False: 4.65M]
  ------------------
   39|   842k|                const char c1 = token[0u];
   40|   842k|                const char c2 = token[1u];
   41|       |
   42|   842k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 539k, False: 303k]
  ------------------
   43|   842k|                {
   44|  15.1k|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 15.1k, False: 827k]
  ------------------
   45|  24.0k|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 8.85k, False: 833k]
  ------------------
   46|  24.0k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 9.78k, False: 14.2k]
  ------------------
   47|  9.78k|                        {
   48|  9.78k|                            return OpCode::JR;
   49|  9.78k|                        }
   50|  14.2k|                        break;
   51|       |
   52|  31.3k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 31.3k, False: 811k]
  ------------------
   53|  60.0k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 28.7k, False: 814k]
  ------------------
   54|  60.0k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 23.9k, False: 36.1k]
  ------------------
   55|  60.0k|                        {
   56|  10.5k|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 10.5k, False: 49.4k]
  ------------------
   57|  16.7k|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 6.16k, False: 53.9k]
  ------------------
   58|  16.7k|                                return OpCode::LB;
   59|  1.90k|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 1.90k, False: 58.1k]
  ------------------
   60|  2.39k|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 497, False: 59.5k]
  ------------------
   61|  2.39k|                                return OpCode::LD;
   62|  2.05k|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 2.05k, False: 58.0k]
  ------------------
   63|  5.25k|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 3.19k, False: 56.8k]
  ------------------
   64|  5.25k|                                return OpCode::LF;
   65|  3.80k|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 3.80k, False: 56.2k]
  ------------------
   66|  6.28k|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 2.48k, False: 57.6k]
  ------------------
   67|  6.28k|                                return OpCode::LH;
   68|  1.71k|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 1.71k, False: 58.3k]
  ------------------
   69|  5.41k|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 3.70k, False: 56.3k]
  ------------------
   70|  5.41k|                                return OpCode::LW;
   71|  60.0k|                        }
   72|  23.9k|                        break;
   73|  23.9k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 8.47k, False: 834k]
  ------------------
   74|  24.7k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 16.2k, False: 826k]
  ------------------
   75|  24.7k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 13.0k, False: 11.7k]
  ------------------
   76|  13.0k|                        {
   77|  13.0k|                            return OpCode::OR;
   78|  13.0k|                        }
   79|  11.7k|                        break;
   80|   143k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 143k, False: 699k]
  ------------------
   81|   194k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 50.9k, False: 791k]
  ------------------
   82|   194k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 45.7k, False: 148k]
  ------------------
   83|   194k|                        {
   84|  8.51k|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 8.51k, False: 186k]
  ------------------
   85|  17.9k|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 9.45k, False: 185k]
  ------------------
   86|  17.9k|                                return OpCode::SB;
   87|  52.4k|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 52.4k, False: 142k]
  ------------------
   88|  64.6k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 12.1k, False: 182k]
  ------------------
   89|  64.6k|                                return OpCode::SD;
   90|  6.82k|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 6.82k, False: 187k]
  ------------------
   91|  8.89k|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 2.07k, False: 192k]
  ------------------
   92|  8.89k|                                return OpCode::SF;
   93|  13.6k|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 13.6k, False: 180k]
  ------------------
   94|  19.3k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 5.74k, False: 188k]
  ------------------
   95|  19.3k|                                return OpCode::SH;
   96|  8.71k|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 8.71k, False: 185k]
  ------------------
   97|  37.9k|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 29.2k, False: 165k]
  ------------------
   98|  37.9k|                                return OpCode::SW;
   99|   194k|                        }
  100|  45.7k|                        break;
  101|   842k|                }
  102|   635k|                break;
  103|   842k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|  1.06M|            case 3: {
  ------------------
  |  Branch (106:13): [True: 1.06M, False: 4.42M]
  ------------------
  107|  1.06M|                const char c1 = token[0u];
  108|  1.06M|                const char c2 = token[1u];
  109|  1.06M|                const char c3 = token[2u];
  110|       |
  111|  1.06M|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 307k, False: 761k]
  ------------------
  112|  1.06M|                {
  113|  54.0k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 54.0k, False: 1.01M]
  ------------------
  114|  67.3k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 13.2k, False: 1.05M]
  ------------------
  115|  67.3k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 18.9k, False: 48.3k]
  |  Branch (115:29): [True: 16.5k, False: 50.8k]
  |  Branch (115:45): [True: 16.5k, False: 2.46k]
  ------------------
  116|  16.5k|                        {
  117|  16.5k|                            return OpCode::ADD;
  118|  16.5k|                        }
  119|  50.8k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 27.6k, False: 23.1k]
  |  Branch (119:34): [True: 8.95k, False: 41.8k]
  |  Branch (119:50): [True: 8.95k, False: 18.7k]
  ------------------
  120|  8.95k|                        {
  121|  8.95k|                            return OpCode::AND;
  122|  8.95k|                        }
  123|  41.8k|                        break;
  124|       |
  125|  41.8k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 8.36k, False: 1.06M]
  ------------------
  126|  60.3k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 52.0k, False: 1.01M]
  ------------------
  127|  60.3k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 41.1k, False: 19.2k]
  |  Branch (127:29): [True: 30.5k, False: 29.8k]
  |  Branch (127:45): [True: 30.5k, False: 10.6k]
  ------------------
  128|  30.5k|                        {
  129|  30.5k|                            return OpCode::DIV;
  130|  30.5k|                        }
  131|  29.8k|                        break;
  132|       |
  133|  29.8k|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 5.48k, False: 1.06M]
  ------------------
  134|  34.6k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 29.1k, False: 1.04M]
  ------------------
  135|  34.6k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 30.4k, False: 4.13k]
  ------------------
  136|  30.4k|                        {
  137|  30.4k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 15.2k, False: 15.2k]
  ------------------
  138|  15.2k|                            {
  139|  15.2k|                                return OpCode::EQD;
  140|  15.2k|                            }
  141|  15.2k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 10.6k, False: 4.55k]
  ------------------
  142|  10.6k|                            {
  143|  10.6k|                                return OpCode::EQF;
  144|  10.6k|                            }
  145|  30.4k|                        }
  146|  8.68k|                        break;
  147|       |
  148|  56.7k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 56.7k, False: 1.01M]
  ------------------
  149|  73.6k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 16.9k, False: 1.05M]
  ------------------
  150|  73.6k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 27.2k, False: 46.4k]
  ------------------
  151|  27.2k|                        {
  152|  27.2k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 18.2k, False: 8.94k]
  ------------------
  153|  18.2k|                            {
  154|  18.2k|                                return OpCode::GED;
  155|  18.2k|                            }
  156|  8.94k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 3.59k, False: 5.35k]
  ------------------
  157|  3.59k|                            {
  158|  3.59k|                                return OpCode::GEF;
  159|  3.59k|                            }
  160|  27.2k|                        }
  161|  46.4k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 17.2k, False: 29.2k]
  ------------------
  162|  17.2k|                        {
  163|  17.2k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 5.86k, False: 11.3k]
  ------------------
  164|  5.86k|                            {
  165|  5.86k|                                return OpCode::GTD;
  166|  5.86k|                            }
  167|  11.3k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 6.47k, False: 4.89k]
  ------------------
  168|  6.47k|                            {
  169|  6.47k|                                return OpCode::GTF;
  170|  6.47k|                            }
  171|  11.3k|                        }
  172|  39.4k|                        break;
  173|       |
  174|  39.4k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 5.92k, False: 1.06M]
  ------------------
  175|  26.7k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 20.8k, False: 1.04M]
  ------------------
  176|  26.7k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 19.9k, False: 6.82k]
  |  Branch (176:29): [True: 15.4k, False: 11.2k]
  |  Branch (176:45): [True: 15.4k, False: 4.44k]
  ------------------
  177|  15.4k|                        {
  178|  15.4k|                            return OpCode::JAL;
  179|  15.4k|                        }
  180|  11.2k|                        break;
  181|       |
  182|  43.9k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 43.9k, False: 1.02M]
  ------------------
  183|   118k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 74.7k, False: 994k]
  ------------------
  184|   118k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 8.01k, False: 110k]
  ------------------
  185|   118k|                        {
  186|  27.3k|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 27.3k, False: 91.3k]
  ------------------
  187|  33.4k|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 6.12k, False: 112k]
  ------------------
  188|  33.4k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 15.0k, False: 18.4k]
  ------------------
  189|  15.0k|                                {
  190|  15.0k|                                    return OpCode::LBU;
  191|  15.0k|                                }
  192|  18.4k|                                break;
  193|       |
  194|  18.4k|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 15.1k, False: 103k]
  ------------------
  195|  23.1k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 8.06k, False: 110k]
  ------------------
  196|  23.1k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 8.32k, False: 14.8k]
  ------------------
  197|  8.32k|                                {
  198|  8.32k|                                    return OpCode::LED;
  199|  8.32k|                                }
  200|  14.8k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 11.1k, False: 3.70k]
  ------------------
  201|  11.1k|                                {
  202|  11.1k|                                    return OpCode::LEF;
  203|  11.1k|                                }
  204|  3.70k|                                break;
  205|       |
  206|  3.70k|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 2.52k, False: 116k]
  ------------------
  207|  18.6k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 16.1k, False: 102k]
  ------------------
  208|  18.6k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 11.8k, False: 6.85k]
  ------------------
  209|  11.8k|                                {
  210|  11.8k|                                    return OpCode::LHI;
  211|  11.8k|                                }
  212|  6.85k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 4.13k, False: 2.71k]
  ------------------
  213|  4.13k|                                {
  214|  4.13k|                                    return OpCode::LHU;
  215|  4.13k|                                }
  216|  2.71k|                                break;
  217|       |
  218|  8.67k|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 8.67k, False: 110k]
  ------------------
  219|  17.2k|                            case 't':
  ------------------
  |  Branch (219:29): [True: 8.56k, False: 110k]
  ------------------
  220|  17.2k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 10.2k, False: 7.03k]
  ------------------
  221|  10.2k|                                {
  222|  10.2k|                                    return OpCode::LTD;
  223|  10.2k|                                }
  224|  7.03k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 4.17k, False: 2.86k]
  ------------------
  225|  4.17k|                                {
  226|  4.17k|                                    return OpCode::LTF;
  227|  4.17k|                                }
  228|  2.86k|                                break;
  229|       |
  230|  5.33k|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 5.33k, False: 113k]
  ------------------
  231|  18.1k|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 12.7k, False: 105k]
  ------------------
  232|  18.1k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 10.0k, False: 8.05k]
  ------------------
  233|  10.0k|                                {
  234|  10.0k|                                    return OpCode::LWU;
  235|  10.0k|                                }
  236|  8.05k|                                break;
  237|   118k|                        }
  238|  43.7k|                        break;
  239|       |
  240|  43.7k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 8.18k, False: 1.06M]
  ------------------
  241|  38.8k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 30.6k, False: 1.03M]
  ------------------
  242|  38.8k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 23.6k, False: 15.1k]
  ------------------
  243|  23.6k|                        {
  244|  23.6k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 9.44k, False: 14.2k]
  ------------------
  245|  9.44k|                            {
  246|  9.44k|                                return OpCode::NED;
  247|  9.44k|                            }
  248|  14.2k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 9.65k, False: 4.59k]
  ------------------
  249|  9.65k|                            {
  250|  9.65k|                                return OpCode::NEF;
  251|  9.65k|                            }
  252|  23.6k|                        }
  253|  15.1k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 8.55k, False: 6.58k]
  |  Branch (253:34): [True: 6.31k, False: 8.82k]
  |  Branch (253:50): [True: 6.31k, False: 2.24k]
  ------------------
  254|  6.31k|                        {
  255|  6.31k|                            return OpCode::NOP;
  256|  6.31k|                        }
  257|       |
  258|  13.4k|                        break;
  259|       |
  260|  13.4k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 8.50k, False: 1.06M]
  ------------------
  261|  30.1k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 21.6k, False: 1.04M]
  ------------------
  262|  30.1k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 19.4k, False: 10.6k]
  |  Branch (262:29): [True: 13.2k, False: 16.9k]
  |  Branch (262:45): [True: 13.2k, False: 6.24k]
  ------------------
  263|  13.2k|                        {
  264|  13.2k|                            return OpCode::ORI;
  265|  13.2k|                        }
  266|  16.9k|                        break;
  267|       |
  268|   155k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 155k, False: 913k]
  ------------------
  269|   289k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 134k, False: 934k]
  ------------------
  270|   289k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 31.5k, False: 258k]
  ------------------
  271|   289k|                        {
  272|  22.2k|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 22.2k, False: 267k]
  ------------------
  273|  26.9k|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 4.78k, False: 285k]
  ------------------
  274|  26.9k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 14.7k, False: 12.2k]
  ------------------
  275|  14.7k|                                {
  276|  14.7k|                                    return OpCode::SBU;
  277|  14.7k|                                }
  278|  12.2k|                                break;
  279|       |
  280|  12.2k|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 9.60k, False: 280k]
  ------------------
  281|  17.4k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 7.88k, False: 282k]
  ------------------
  282|  17.4k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 9.39k, False: 8.08k]
  ------------------
  283|  9.39k|                                {
  284|  9.39k|                                    return OpCode::SEQ;
  285|  9.39k|                                }
  286|  8.08k|                                break;
  287|       |
  288|  19.8k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 19.8k, False: 270k]
  ------------------
  289|  32.1k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 12.3k, False: 277k]
  ------------------
  290|  32.1k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 9.52k, False: 22.6k]
  ------------------
  291|  9.52k|                                {
  292|  9.52k|                                    return OpCode::SGE;
  293|  9.52k|                                }
  294|  22.6k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 8.84k, False: 13.8k]
  ------------------
  295|  8.84k|                                {
  296|  8.84k|                                    return OpCode::SGT;
  297|  8.84k|                                }
  298|  13.8k|                                break;
  299|       |
  300|  13.8k|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 4.69k, False: 285k]
  ------------------
  301|  10.2k|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 5.55k, False: 284k]
  ------------------
  302|  10.2k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 8.62k, False: 1.62k]
  ------------------
  303|  8.62k|                                {
  304|  8.62k|                                    return OpCode::SHU;
  305|  8.62k|                                }
  306|  1.62k|                                break;
  307|       |
  308|  26.3k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 26.3k, False: 263k]
  ------------------
  309|  62.6k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 36.3k, False: 253k]
  ------------------
  310|  62.6k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 4.67k, False: 57.9k]
  ------------------
  311|  62.6k|                                {
  312|  6.37k|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 6.37k, False: 56.2k]
  ------------------
  313|  19.5k|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 13.1k, False: 49.4k]
  ------------------
  314|  19.5k|                                        return OpCode::SLA;
  315|       |
  316|  2.64k|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 2.64k, False: 60.0k]
  ------------------
  317|  12.1k|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 9.48k, False: 53.1k]
  ------------------
  318|  12.1k|                                        return OpCode::SLE;
  319|       |
  320|  5.11k|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 5.11k, False: 57.5k]
  ------------------
  321|  14.4k|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 9.33k, False: 53.3k]
  ------------------
  322|  14.4k|                                        return OpCode::SLL;
  323|       |
  324|  7.74k|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 7.74k, False: 54.9k]
  ------------------
  325|  11.8k|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 4.11k, False: 58.5k]
  ------------------
  326|  11.8k|                                        return OpCode::SLT;
  327|  62.6k|                                }
  328|  4.67k|                                break;
  329|       |
  330|  8.77k|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 8.77k, False: 281k]
  ------------------
  331|  22.7k|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 13.9k, False: 276k]
  ------------------
  332|  22.7k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 13.3k, False: 9.36k]
  ------------------
  333|  13.3k|                                {
  334|  13.3k|                                    return OpCode::SNE;
  335|  13.3k|                                }
  336|  9.36k|                                break;
  337|       |
  338|  22.8k|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 22.8k, False: 267k]
  ------------------
  339|  38.0k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 15.2k, False: 274k]
  ------------------
  340|  38.0k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 12.8k, False: 25.1k]
  ------------------
  341|  12.8k|                                {
  342|  12.8k|                                    return OpCode::SRA;
  343|  12.8k|                                }
  344|  25.1k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 17.5k, False: 7.59k]
  ------------------
  345|  17.5k|                                {
  346|  17.5k|                                    return OpCode::SRL;
  347|  17.5k|                                }
  348|  7.59k|                                break;
  349|       |
  350|  17.7k|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 17.7k, False: 272k]
  ------------------
  351|  25.8k|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 8.04k, False: 281k]
  ------------------
  352|  25.8k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 20.9k, False: 4.91k]
  ------------------
  353|  20.9k|                                {
  354|  20.9k|                                    return OpCode::SUB;
  355|  20.9k|                                }
  356|  4.91k|                                break;
  357|       |
  358|  5.48k|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 5.48k, False: 284k]
  ------------------
  359|  22.1k|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 16.6k, False: 273k]
  ------------------
  360|  22.1k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 8.00k, False: 14.1k]
  ------------------
  361|  8.00k|                                {
  362|  8.00k|                                    return OpCode::SWU;
  363|  8.00k|                                }
  364|  14.1k|                                break;
  365|   289k|                        }
  366|       |
  367|   120k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 12.9k, False: 1.05M]
  ------------------
  368|   129k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 8.21k, False: 1.06M]
  ------------------
  369|   129k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 17.8k, False: 111k]
  |  Branch (369:29): [True: 10.9k, False: 118k]
  |  Branch (369:45): [True: 10.9k, False: 6.96k]
  ------------------
  370|  10.9k|                        {
  371|  10.9k|                            return OpCode::XOR;
  372|  10.9k|                        }
  373|   118k|                        break;
  374|  1.06M|                }
  375|   631k|                break;
  376|  1.06M|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  1.28M|            case 4: {
  ------------------
  |  Branch (379:13): [True: 1.28M, False: 4.21M]
  ------------------
  380|  1.28M|                const char c1 = token[0u];
  381|  1.28M|                const char c2 = token[1u];
  382|  1.28M|                const char c3 = token[2u];
  383|  1.28M|                const char c4 = token[3u];
  384|       |
  385|  1.28M|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 270k, False: 1.00M]
  ------------------
  386|  1.28M|                {
  387|  81.4k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 81.4k, False: 1.19M]
  ------------------
  388|   151k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 69.9k, False: 1.21M]
  ------------------
  389|   151k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 8.00k, False: 143k]
  ------------------
  390|   151k|                        {
  391|  50.8k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 50.8k, False: 100k]
  ------------------
  392|   109k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 58.9k, False: 92.3k]
  ------------------
  393|   109k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 99.3k, False: 10.4k]
  ------------------
  394|  99.3k|                                {
  395|  99.3k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 8.83k, False: 90.5k]
  ------------------
  396|  99.3k|                                    {
  397|  20.2k|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 20.2k, False: 79.0k]
  ------------------
  398|  28.9k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 8.64k, False: 90.7k]
  ------------------
  399|  28.9k|                                            return OpCode::ADDD;
  400|       |
  401|  8.32k|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 8.32k, False: 91.0k]
  ------------------
  402|  15.0k|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 6.76k, False: 92.6k]
  ------------------
  403|  15.0k|                                            return OpCode::ADDF;
  404|       |
  405|  12.0k|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 12.0k, False: 87.3k]
  ------------------
  406|  19.1k|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 7.14k, False: 92.2k]
  ------------------
  407|  19.1k|                                            return OpCode::ADDI;
  408|       |
  409|  14.7k|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 14.7k, False: 84.6k]
  ------------------
  410|  27.3k|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 12.6k, False: 86.7k]
  ------------------
  411|  27.3k|                                            return OpCode::ADDU;
  412|  99.3k|                                    }
  413|  99.3k|                                }
  414|  19.2k|                                break;
  415|       |
  416|  19.2k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 13.2k, False: 138k]
  ------------------
  417|  33.4k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 20.2k, False: 131k]
  ------------------
  418|  33.4k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 14.8k, False: 18.6k]
  |  Branch (418:37): [True: 5.48k, False: 28.0k]
  |  Branch (418:53): [True: 5.48k, False: 9.40k]
  ------------------
  419|  5.48k|                                {
  420|  5.48k|                                    return OpCode::ANDI;
  421|  5.48k|                                }
  422|       |
  423|  28.0k|                                break;
  424|   151k|                        }
  425|  55.2k|                        break;
  426|       |
  427|  55.2k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 28.3k, False: 1.25M]
  ------------------
  428|  90.6k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 62.2k, False: 1.21M]
  ------------------
  429|  90.6k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 4.34k, False: 86.2k]
  ------------------
  430|  90.6k|                        {
  431|  14.0k|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 14.0k, False: 76.5k]
  ------------------
  432|  19.6k|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 5.63k, False: 84.9k]
  ------------------
  433|  19.6k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 11.7k, False: 7.89k]
  |  Branch (433:37): [True: 5.60k, False: 14.0k]
  |  Branch (433:53): [True: 5.60k, False: 6.14k]
  ------------------
  434|  5.60k|                                {
  435|  5.60k|                                    return OpCode::BEQZ;
  436|  5.60k|                                }
  437|  14.0k|                                break;
  438|       |
  439|  14.0k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 7.43k, False: 83.1k]
  ------------------
  440|  27.9k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 20.5k, False: 70.0k]
  ------------------
  441|  27.9k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 21.7k, False: 6.18k]
  ------------------
  442|  21.7k|                                {
  443|  21.7k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 10.2k, False: 11.5k]
  ------------------
  444|  10.2k|                                    {
  445|  10.2k|                                        return OpCode::BFPF;
  446|  10.2k|                                    }
  447|  11.5k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 8.88k, False: 2.63k]
  ------------------
  448|  8.88k|                                    {
  449|  8.88k|                                        return OpCode::BFPT;
  450|  8.88k|                                    }
  451|  21.7k|                                }
  452|  8.82k|                                break;
  453|       |
  454|  10.2k|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 10.2k, False: 80.3k]
  ------------------
  455|  38.6k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 28.4k, False: 62.1k]
  ------------------
  456|  38.6k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 33.5k, False: 5.07k]
  |  Branch (456:37): [True: 19.4k, False: 19.1k]
  |  Branch (456:53): [True: 19.4k, False: 14.0k]
  ------------------
  457|  19.4k|                                {
  458|  19.4k|                                    return OpCode::BNEZ;
  459|  19.4k|                                }
  460|  90.6k|                        }
  461|  46.3k|                        break;
  462|       |
  463|  46.3k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 12.4k, False: 1.26M]
  ------------------
  464|  97.7k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 85.3k, False: 1.19M]
  ------------------
  465|  97.7k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 78.7k, False: 19.0k]
  |  Branch (465:29): [True: 61.2k, False: 36.4k]
  |  Branch (465:45): [True: 61.2k, False: 17.4k]
  ------------------
  466|  61.2k|                        {
  467|  61.2k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 8.52k, False: 52.7k]
  ------------------
  468|  61.2k|                            {
  469|  3.48k|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 3.48k, False: 57.7k]
  ------------------
  470|  9.74k|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 6.26k, False: 54.9k]
  ------------------
  471|  9.74k|                                    return OpCode::DIVD;
  472|       |
  473|  6.94k|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 6.94k, False: 54.3k]
  ------------------
  474|  9.29k|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 2.34k, False: 58.9k]
  ------------------
  475|  9.29k|                                    return OpCode::DIVF;
  476|       |
  477|  8.15k|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 8.15k, False: 53.0k]
  ------------------
  478|  22.2k|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 14.0k, False: 47.1k]
  ------------------
  479|  22.2k|                                    return OpCode::DIVI;
  480|       |
  481|  7.78k|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 7.78k, False: 53.4k]
  ------------------
  482|  11.4k|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 3.68k, False: 57.5k]
  ------------------
  483|  11.4k|                                    return OpCode::DIVU;
  484|  61.2k|                            }
  485|  61.2k|                        }
  486|  45.0k|                        break;
  487|       |
  488|  45.0k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 3.04k, False: 1.27M]
  ------------------
  489|  30.5k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 27.4k, False: 1.25M]
  ------------------
  490|  30.5k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 27.0k, False: 3.44k]
  |  Branch (490:29): [True: 16.5k, False: 13.9k]
  |  Branch (490:45): [True: 24.8k, False: 2.21k]
  |  Branch (490:61): [True: 16.5k, False: 8.27k]
  ------------------
  491|  16.5k|                        {
  492|  16.5k|                            return OpCode::HALT;
  493|  16.5k|                        }
  494|  13.9k|                        break;
  495|       |
  496|  13.9k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 6.64k, False: 1.27M]
  ------------------
  497|  45.3k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 38.7k, False: 1.24M]
  ------------------
  498|  45.3k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 38.4k, False: 6.93k]
  |  Branch (498:29): [True: 12.2k, False: 33.1k]
  |  Branch (498:45): [True: 28.2k, False: 10.2k]
  |  Branch (498:61): [True: 12.2k, False: 15.9k]
  ------------------
  499|  12.2k|                        {
  500|  12.2k|                            return OpCode::JALR;
  501|  12.2k|                        }
  502|  33.1k|                        break;
  503|       |
  504|  33.1k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 14.0k, False: 1.26M]
  ------------------
  505|  73.4k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 59.4k, False: 1.22M]
  ------------------
  506|  73.4k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 41.9k, False: 31.5k]
  |  Branch (506:29): [True: 37.2k, False: 36.2k]
  |  Branch (506:45): [True: 37.2k, False: 4.67k]
  ------------------
  507|  37.2k|                        {
  508|  37.2k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 7.73k, False: 29.4k]
  ------------------
  509|  7.73k|                            {
  510|  7.73k|                                return OpCode::MOVD;
  511|  7.73k|                            }
  512|  29.4k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 18.2k, False: 11.2k]
  ------------------
  513|  18.2k|                            {
  514|  18.2k|                                return OpCode::MOVF;
  515|  18.2k|                            }
  516|  37.2k|                        }
  517|  36.2k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 25.3k, False: 10.9k]
  |  Branch (517:34): [True: 17.5k, False: 18.7k]
  |  Branch (517:50): [True: 20.4k, False: 4.91k]
  |  Branch (517:66): [True: 17.5k, False: 2.91k]
  ------------------
  518|  17.5k|                        {
  519|  17.5k|                            return OpCode::MULT;
  520|  17.5k|                        }
  521|  29.9k|                        break;
  522|       |
  523|   223k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 223k, False: 1.05M]
  ------------------
  524|   462k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 239k, False: 1.04M]
  ------------------
  525|   462k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 18.9k, False: 443k]
  ------------------
  526|   462k|                        {
  527|  31.7k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 31.7k, False: 431k]
  ------------------
  528|  39.7k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 8.00k, False: 454k]
  ------------------
  529|  39.7k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 31.9k, False: 7.82k]
  ------------------
  530|  31.9k|                                {
  531|  31.9k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 12.3k, False: 19.5k]
  ------------------
  532|  12.3k|                                    {
  533|  12.3k|                                        return OpCode::SEQI;
  534|  12.3k|                                    }
  535|  19.5k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 8.28k, False: 11.2k]
  ------------------
  536|  8.28k|                                    {
  537|  8.28k|                                        return OpCode::SEQU;
  538|  8.28k|                                    }
  539|  31.9k|                                }
  540|  19.1k|                                break;
  541|       |
  542|  31.4k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 31.4k, False: 431k]
  ------------------
  543|   107k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 75.9k, False: 386k]
  ------------------
  544|   107k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 54.2k, False: 53.1k]
  ------------------
  545|  54.2k|                                {
  546|  54.2k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 22.2k, False: 31.9k]
  ------------------
  547|  22.2k|                                    {
  548|  22.2k|                                        return OpCode::SGEI;
  549|  22.2k|                                    }
  550|  31.9k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 24.4k, False: 7.51k]
  ------------------
  551|  24.4k|                                    {
  552|  24.4k|                                        return OpCode::SGEU;
  553|  24.4k|                                    }
  554|  54.2k|                                }
  555|  53.1k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 41.8k, False: 11.2k]
  ------------------
  556|  41.8k|                                {
  557|  41.8k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 14.6k, False: 27.1k]
  ------------------
  558|  14.6k|                                    {
  559|  14.6k|                                        return OpCode::SGTI;
  560|  14.6k|                                    }
  561|  27.1k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 22.5k, False: 4.59k]
  ------------------
  562|  22.5k|                                    {
  563|  22.5k|                                        return OpCode::SGTU;
  564|  22.5k|                                    }
  565|  41.8k|                                }
  566|  23.3k|                                break;
  567|       |
  568|  36.3k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 36.3k, False: 426k]
  ------------------
  569|   122k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 86.5k, False: 376k]
  ------------------
  570|   122k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 7.77k, False: 115k]
  ------------------
  571|   122k|                                {
  572|  9.36k|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 9.36k, False: 113k]
  ------------------
  573|  17.1k|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 7.78k, False: 115k]
  ------------------
  574|  17.1k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 11.5k, False: 5.56k]
  ------------------
  575|  11.5k|                                        {
  576|  11.5k|                                            return OpCode::SLAI;
  577|  11.5k|                                        }
  578|  5.56k|                                        break;
  579|       |
  580|  23.1k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 23.1k, False: 99.7k]
  ------------------
  581|  27.6k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 4.51k, False: 118k]
  ------------------
  582|  27.6k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 11.9k, False: 15.7k]
  ------------------
  583|  11.9k|                                        {
  584|  11.9k|                                            return OpCode::SLEI;
  585|  11.9k|                                        }
  586|  15.7k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 12.5k, False: 3.15k]
  ------------------
  587|  12.5k|                                        {
  588|  12.5k|                                            return OpCode::SLEU;
  589|  12.5k|                                        }
  590|  3.15k|                                        break;
  591|       |
  592|  5.43k|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 5.43k, False: 117k]
  ------------------
  593|  19.2k|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 13.7k, False: 109k]
  ------------------
  594|  19.2k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 13.6k, False: 5.53k]
  ------------------
  595|  13.6k|                                        {
  596|  13.6k|                                            return OpCode::SLLI;
  597|  13.6k|                                        }
  598|  5.53k|                                        break;
  599|       |
  600|  31.0k|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 31.0k, False: 91.9k]
  ------------------
  601|  51.1k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 20.1k, False: 102k]
  ------------------
  602|  51.1k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 14.3k, False: 36.7k]
  ------------------
  603|  14.3k|                                        {
  604|  14.3k|                                            return OpCode::SLTI;
  605|  14.3k|                                        }
  606|  36.7k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 20.6k, False: 16.0k]
  ------------------
  607|  20.6k|                                        {
  608|  20.6k|                                            return OpCode::SLTU;
  609|  20.6k|                                        }
  610|  16.0k|                                        break;
  611|   122k|                                }
  612|       |
  613|  42.7k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 4.68k, False: 458k]
  ------------------
  614|  86.5k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 43.7k, False: 419k]
  ------------------
  615|  86.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 47.4k, False: 39.1k]
  ------------------
  616|  47.4k|                                {
  617|  47.4k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 11.8k, False: 35.6k]
  ------------------
  618|  11.8k|                                    {
  619|  11.8k|                                        return OpCode::SNEI;
  620|  11.8k|                                    }
  621|  35.6k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 18.1k, False: 17.4k]
  ------------------
  622|  18.1k|                                    {
  623|  18.1k|                                        return OpCode::SNEU;
  624|  18.1k|                                    }
  625|  47.4k|                                }
  626|  56.5k|                                break;
  627|       |
  628|  56.5k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 22.7k, False: 440k]
  ------------------
  629|  43.4k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 20.6k, False: 442k]
  ------------------
  630|  43.4k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 21.5k, False: 21.8k]
  |  Branch (630:37): [True: 16.6k, False: 26.8k]
  |  Branch (630:53): [True: 16.6k, False: 4.93k]
  ------------------
  631|  16.6k|                                {
  632|  16.6k|                                    return OpCode::SRAI;
  633|  16.6k|                                }
  634|  26.8k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 21.2k, False: 5.55k]
  |  Branch (634:42): [True: 7.97k, False: 18.8k]
  |  Branch (634:58): [True: 7.97k, False: 13.2k]
  ------------------
  635|  7.97k|                                {
  636|  7.97k|                                    return OpCode::SRLI;
  637|  7.97k|                                }
  638|  18.8k|                                break;
  639|       |
  640|  29.9k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 29.9k, False: 432k]
  ------------------
  641|  81.9k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 51.9k, False: 410k]
  ------------------
  642|  81.9k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 73.0k, False: 8.90k]
  ------------------
  643|  73.0k|                                {
  644|  73.0k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 14.0k, False: 58.9k]
  ------------------
  645|  73.0k|                                    {
  646|  12.2k|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 12.2k, False: 60.7k]
  ------------------
  647|  17.9k|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 5.74k, False: 67.2k]
  ------------------
  648|  17.9k|                                            return OpCode::SUBD;
  649|       |
  650|  6.18k|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 6.18k, False: 66.8k]
  ------------------
  651|  13.5k|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 7.36k, False: 65.6k]
  ------------------
  652|  13.5k|                                            return OpCode::SUBF;
  653|       |
  654|  4.61k|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 4.61k, False: 68.3k]
  ------------------
  655|  14.2k|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 9.59k, False: 63.4k]
  ------------------
  656|  14.2k|                                            return OpCode::SUBI;
  657|       |
  658|  6.79k|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 6.79k, False: 66.2k]
  ------------------
  659|  13.2k|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 6.41k, False: 66.5k]
  ------------------
  660|  13.2k|                                            return OpCode::SUBU;
  661|  73.0k|                                    }
  662|  73.0k|                                }
  663|  22.9k|                                break;
  664|   462k|                        }
  665|   159k|                        break;
  666|       |
  667|   159k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 4.29k, False: 1.27M]
  ------------------
  668|  14.3k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 10.0k, False: 1.27M]
  ------------------
  669|  14.3k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 8.79k, False: 5.53k]
  |  Branch (669:29): [True: 3.01k, False: 11.3k]
  |  Branch (669:45): [True: 5.67k, False: 3.11k]
  |  Branch (669:61): [True: 3.01k, False: 2.66k]
  ------------------
  670|  3.01k|                        {
  671|  3.01k|                            return OpCode::TRAP;
  672|  3.01k|                        }
  673|  11.3k|                        break;
  674|  22.6k|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 22.6k, False: 1.25M]
  ------------------
  675|  43.5k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 20.8k, False: 1.25M]
  ------------------
  676|  43.5k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 34.5k, False: 9.01k]
  |  Branch (676:29): [True: 16.5k, False: 27.0k]
  |  Branch (676:45): [True: 29.3k, False: 5.14k]
  |  Branch (676:61): [True: 16.5k, False: 12.8k]
  ------------------
  677|  16.5k|                        {
  678|  16.5k|                            return OpCode::XORI;
  679|  16.5k|                        }
  680|  27.0k|                        break;
  681|  1.28M|                }
  682|   692k|                break;
  683|  1.28M|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|   751k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 751k, False: 4.74M]
  ------------------
  687|   751k|                const char c1 = token[0u];
  688|   751k|                const char c2 = token[1u];
  689|   751k|                const char c3 = token[2u];
  690|   751k|                const char c4 = token[3u];
  691|   751k|                const char c5 = token[4u];
  692|       |
  693|   751k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 173k, False: 577k]
  ------------------
  694|   751k|                {
  695|  21.1k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 21.1k, False: 730k]
  ------------------
  696|  78.9k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 57.8k, False: 693k]
  ------------------
  697|  78.9k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 72.5k, False: 6.42k]
  |  Branch (697:29): [True: 16.0k, False: 62.8k]
  |  Branch (697:45): [True: 62.3k, False: 10.1k]
  |  Branch (697:61): [True: 45.2k, False: 17.0k]
  |  Branch (697:77): [True: 16.0k, False: 29.2k]
  ------------------
  698|  16.0k|                        {
  699|  16.0k|                            return OpCode::ADDUI;
  700|  16.0k|                        }
  701|  62.8k|                        break;
  702|       |
  703|  62.8k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 5.53k, False: 746k]
  ------------------
  704|  68.3k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 62.8k, False: 688k]
  ------------------
  705|  68.3k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 54.5k, False: 13.7k]
  |  Branch (705:29): [True: 18.1k, False: 50.2k]
  |  Branch (705:45): [True: 40.2k, False: 14.3k]
  |  Branch (705:61): [True: 29.6k, False: 10.5k]
  |  Branch (705:77): [True: 18.1k, False: 11.5k]
  ------------------
  706|  18.1k|                        {
  707|  18.1k|                            return OpCode::DIVUI;
  708|  18.1k|                        }
  709|  50.2k|                        break;
  710|       |
  711|  50.2k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 32.4k, False: 719k]
  ------------------
  712|   119k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 86.8k, False: 664k]
  ------------------
  713|   119k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 84.5k, False: 34.7k]
  |  Branch (713:29): [True: 68.5k, False: 50.7k]
  |  Branch (713:45): [True: 71.5k, False: 13.0k]
  |  Branch (713:61): [True: 68.5k, False: 3.05k]
  ------------------
  714|  68.5k|                        {
  715|  68.5k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 10.3k, False: 58.1k]
  ------------------
  716|  68.5k|                            {
  717|  5.49k|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 5.49k, False: 63.0k]
  ------------------
  718|  8.31k|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 2.81k, False: 65.7k]
  ------------------
  719|  8.31k|                                    return OpCode::MULTD;
  720|       |
  721|  12.4k|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 12.4k, False: 56.0k]
  ------------------
  722|  23.2k|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 10.7k, False: 57.7k]
  ------------------
  723|  23.2k|                                    return OpCode::MULTF;
  724|       |
  725|  7.57k|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 7.57k, False: 60.9k]
  ------------------
  726|  14.4k|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 6.90k, False: 61.6k]
  ------------------
  727|  14.4k|                                    return OpCode::MULTI;
  728|       |
  729|  3.46k|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 3.46k, False: 65.0k]
  ------------------
  730|  12.1k|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 8.67k, False: 59.8k]
  ------------------
  731|  12.1k|                                    return OpCode::MULTU;
  732|  68.5k|                            }
  733|  68.5k|                        }
  734|  61.1k|                        break;
  735|       |
  736|   134k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 134k, False: 617k]
  ------------------
  737|   311k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 176k, False: 574k]
  ------------------
  738|   311k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 11.4k, False: 299k]
  ------------------
  739|   311k|                        {
  740|  48.9k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 48.9k, False: 262k]
  ------------------
  741|  67.1k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 18.2k, False: 293k]
  ------------------
  742|  67.1k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 49.0k, False: 18.1k]
  |  Branch (742:37): [True: 12.0k, False: 55.1k]
  |  Branch (742:53): [True: 27.7k, False: 21.2k]
  |  Branch (742:69): [True: 12.0k, False: 15.7k]
  ------------------
  743|  12.0k|                                {
  744|  12.0k|                                    return OpCode::SEQUI;
  745|  12.0k|                                }
  746|  55.1k|                                break;
  747|       |
  748|  55.1k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 31.0k, False: 280k]
  ------------------
  749|  71.0k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 39.9k, False: 271k]
  ------------------
  750|  71.0k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 32.8k, False: 38.2k]
  |  Branch (750:37): [True: 14.8k, False: 56.1k]
  |  Branch (750:53): [True: 23.4k, False: 9.39k]
  |  Branch (750:69): [True: 14.8k, False: 8.52k]
  ------------------
  751|  14.8k|                                {
  752|  14.8k|                                    return OpCode::SGEUI;
  753|  14.8k|                                }
  754|  56.1k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 37.6k, False: 18.5k]
  |  Branch (754:42): [True: 15.7k, False: 40.3k]
  |  Branch (754:58): [True: 34.0k, False: 3.63k]
  |  Branch (754:74): [True: 15.7k, False: 18.2k]
  ------------------
  755|  15.7k|                                {
  756|  15.7k|                                    return OpCode::SGTUI;
  757|  15.7k|                                }
  758|  40.3k|                                break;
  759|       |
  760|  40.3k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 22.0k, False: 289k]
  ------------------
  761|  88.2k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 66.1k, False: 245k]
  ------------------
  762|  88.2k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 36.6k, False: 51.5k]
  |  Branch (762:37): [True: 15.8k, False: 72.3k]
  |  Branch (762:53): [True: 28.4k, False: 8.23k]
  |  Branch (762:69): [True: 15.8k, False: 12.5k]
  ------------------
  763|  15.8k|                                {
  764|  15.8k|                                    return OpCode::SLEUI;
  765|  15.8k|                                }
  766|  72.3k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 41.9k, False: 30.4k]
  |  Branch (766:42): [True: 13.1k, False: 59.1k]
  |  Branch (766:58): [True: 33.9k, False: 8.01k]
  |  Branch (766:74): [True: 13.1k, False: 20.7k]
  ------------------
  767|  13.1k|                                {
  768|  13.1k|                                    return OpCode::SLTUI;
  769|  13.1k|                                }
  770|  59.1k|                                break;
  771|       |
  772|  59.1k|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 2.64k, False: 308k]
  ------------------
  773|  33.4k|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 30.7k, False: 280k]
  ------------------
  774|  33.4k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 30.6k, False: 2.77k]
  |  Branch (774:37): [True: 15.7k, False: 17.7k]
  |  Branch (774:53): [True: 27.3k, False: 3.36k]
  |  Branch (774:69): [True: 15.7k, False: 11.5k]
  ------------------
  775|  15.7k|                                {
  776|  15.7k|                                    return OpCode::SNEUI;
  777|  15.7k|                                }
  778|  17.7k|                                break;
  779|       |
  780|  17.7k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 11.5k, False: 299k]
  ------------------
  781|  39.8k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 28.2k, False: 282k]
  ------------------
  782|  39.8k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 30.4k, False: 9.33k]
  |  Branch (782:37): [True: 14.7k, False: 25.0k]
  |  Branch (782:53): [True: 22.8k, False: 7.64k]
  |  Branch (782:69): [True: 14.7k, False: 8.07k]
  ------------------
  783|  14.7k|                                {
  784|  14.7k|                                    return OpCode::SUBUI;
  785|  14.7k|                                }
  786|  25.0k|                                break;
  787|   311k|                        }
  788|       |
  789|   208k|                        break;
  790|   751k|                }
  791|       |
  792|   557k|                break;
  793|   751k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|   557k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 408k, False: 5.08M]
  ------------------
  797|   408k|                const char c1 = token[0u];
  798|   408k|                const char c2 = token[1u];
  799|   408k|                const char c3 = token[2u];
  800|   408k|                const char c4 = token[3u];
  801|   408k|                const char c5 = token[4u];
  802|   408k|                const char c6 = token[5u];
  803|       |
  804|   408k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 182k, False: 225k]
  |  Branch (804:21): [True: 158k, False: 250k]
  |  Branch (804:37): [True: 176k, False: 6.05k]
  |  Branch (804:53): [True: 158k, False: 18.3k]
  ------------------
  805|   158k|                {
  806|   158k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 5.69k, False: 152k]
  ------------------
  807|   158k|                    {
  808|  29.5k|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 29.5k, False: 128k]
  ------------------
  809|  53.6k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 24.0k, False: 134k]
  ------------------
  810|  53.6k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 46.1k, False: 7.45k]
  ------------------
  811|  46.1k|                            {
  812|  46.1k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 14.9k, False: 31.2k]
  ------------------
  813|  14.9k|                                {
  814|  14.9k|                                    return OpCode::CVTD2F;
  815|  14.9k|                                }
  816|  31.2k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 22.1k, False: 9.06k]
  ------------------
  817|  22.1k|                                {
  818|  22.1k|                                    return OpCode::CVTD2I;
  819|  22.1k|                                }
  820|  46.1k|                            }
  821|  16.5k|                            break;
  822|       |
  823|  16.5k|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 10.1k, False: 148k]
  ------------------
  824|  56.2k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 46.1k, False: 112k]
  ------------------
  825|  56.2k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 47.2k, False: 9.05k]
  ------------------
  826|  47.2k|                            {
  827|  47.2k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 20.8k, False: 26.4k]
  ------------------
  828|  20.8k|                                {
  829|  20.8k|                                    return OpCode::CVTF2D;
  830|  20.8k|                                }
  831|  26.4k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 18.9k, False: 7.48k]
  ------------------
  832|  18.9k|                                {
  833|  18.9k|                                    return OpCode::CVTF2I;
  834|  18.9k|                                }
  835|  47.2k|                            }
  836|  16.5k|                            break;
  837|       |
  838|  33.7k|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 33.7k, False: 124k]
  ------------------
  839|  42.7k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 9.05k, False: 149k]
  ------------------
  840|  42.7k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 30.3k, False: 12.4k]
  ------------------
  841|  30.3k|                            {
  842|  30.3k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 12.8k, False: 17.5k]
  ------------------
  843|  12.8k|                                {
  844|  12.8k|                                    return OpCode::CVTI2D;
  845|  12.8k|                                }
  846|  17.5k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 10.2k, False: 7.23k]
  ------------------
  847|  10.2k|                                {
  848|  10.2k|                                    return OpCode::CVTI2F;
  849|  10.2k|                                }
  850|  30.3k|                            }
  851|   158k|                    }
  852|   158k|                }
  853|   250k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 105k, False: 145k]
  |  Branch (853:26): [True: 26.7k, False: 223k]
  |  Branch (853:42): [True: 63.1k, False: 42.0k]
  |  Branch (853:58): [True: 46.0k, False: 17.1k]
  |  Branch (853:74): [True: 42.8k, False: 3.20k]
  ------------------
  854|   250k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 35.6k, False: 7.20k]
  |  Branch (854:42): [True: 26.7k, False: 8.90k]
  ------------------
  855|  26.7k|                {
  856|  26.7k|                    return OpCode::MULTUI;
  857|  26.7k|                }
  858|   282k|                break;
  859|   408k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|   282k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 199k, False: 5.29M]
  ------------------
  863|   199k|                const char c1 = token[0u];
  864|   199k|                const char c2 = token[1u];
  865|   199k|                const char c3 = token[2u];
  866|   199k|                const char c4 = token[3u];
  867|   199k|                const char c5 = token[4u];
  868|   199k|                const char c6 = token[5u];
  869|   199k|                const char c7 = token[6u];
  870|       |
  871|   199k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 100k, False: 98.1k]
  |  Branch (871:21): [True: 77.3k, False: 121k]
  |  Branch (871:37): [True: 85.6k, False: 15.3k]
  |  Branch (871:53): [True: 77.3k, False: 8.30k]
  ------------------
  872|  77.3k|                {
  873|  77.3k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 37.9k, False: 39.3k]
  |  Branch (873:25): [True: 12.7k, False: 64.5k]
  |  Branch (873:41): [True: 27.6k, False: 10.3k]
  |  Branch (873:54): [True: 24.4k, False: 3.18k]
  |  Branch (873:70): [True: 12.7k, False: 11.6k]
  ------------------
  874|  12.7k|                    {
  875|  12.7k|                        return OpCode::MOVI2FP;
  876|  12.7k|                    }
  877|  64.5k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 39.1k, False: 25.3k]
  |  Branch (877:25): [True: 21.0k, False: 43.5k]
  |  Branch (877:41): [True: 32.0k, False: 7.11k]
  |  Branch (877:57): [True: 27.4k, False: 4.64k]
  |  Branch (877:70): [True: 21.0k, False: 6.42k]
  ------------------
  878|  21.0k|                    {
  879|  21.0k|                        return OpCode::MOVFP2I;
  880|  21.0k|                    }
  881|  64.5k|                }
  882|   165k|                break;
  883|   199k|            }
  884|       |
  885|   165k|            default: {
  ------------------
  |  Branch (885:13): [True: 151k, False: 5.34M]
  ------------------
  886|   151k|                break;
  887|   199k|            }
  888|  5.49M|        }
  889|       |
  890|       |        // None found
  891|  3.69M|        return OpCode::NONE;
  892|  5.49M|    }
_ZN3dlx3iceEcc:
   17|  7.90M|    {
   18|  7.90M|        constexpr const char diff = 'a' - 'A';
   19|  7.90M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 2.42M, False: 5.48M]
  |  Branch (19:28): [True: 2.26M, False: 3.22M]
  ------------------
   20|  7.90M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  5.80M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|   106k|    {
  195|   106k|        ParseError err;
  196|       |
  197|   106k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|   106k|        err.m_LineNumber                           = line_number;
  199|   106k|        err.m_Column                               = column;
  200|   106k|        err.unexpected_argument_type.expected_type = expected_type;
  201|   106k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|   106k|        return err;
  204|   106k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|   106k|    {
  209|   106k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|   106k|                                                         token.GetColumn().unsafe(), expected_type,
  211|   106k|                                                         actual_type);
  212|   106k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|  7.28k|    {
  218|  7.28k|        ParseError err;
  219|       |
  220|  7.28k|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|  7.28k|        err.m_LineNumber        = line_number;
  222|  7.28k|        err.m_Column            = column;
  223|  7.28k|        err.invalid_number.text = text;
  224|       |
  225|  7.28k|        return err;
  226|  7.28k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|  7.28k|    {
  230|  7.28k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|  7.28k|                                                token.GetColumn().unsafe(), token.GetText());
  232|  7.28k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|      7|    {
  237|      7|        ParseError err;
  238|       |
  239|      7|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|      7|        err.m_LineNumber = line_number;
  241|      7|        err.m_Column     = column;
  242|       |
  243|      7|        return err;
  244|      7|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|      7|    {
  249|      7|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|      7|                                                                     token.GetColumn().unsafe());
  251|      7|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  2.56M|    {
  257|  2.56M|        ParseError err;
  258|       |
  259|  2.56M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  2.56M|        err.m_LineNumber                   = line_number;
  261|  2.56M|        err.m_Column                       = column;
  262|  2.56M|        err.unexpected_token.expected_type = expected_type;
  263|  2.56M|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  2.56M|        return err;
  266|  2.56M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  2.56M|    {
  271|  2.56M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  2.56M|                                                  token.GetColumn().unsafe(), expected_type,
  273|  2.56M|                                                  token.GetType());
  274|  2.56M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|   625k|    {
  279|   625k|        ParseError err;
  280|       |
  281|   625k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|   625k|        err.m_LineNumber                   = line_number;
  283|   625k|        err.m_Column                       = column;
  284|   625k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|   625k|        return err;
  287|   625k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|  8.72k|    {
  291|  8.72k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|  8.72k|                                                    token.GetColumn().unsafe(), token.GetText());
  293|  8.72k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  1.13M|    {
  298|  1.13M|        ParseError err;
  299|       |
  300|  1.13M|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  1.13M|        err.m_LineNumber                       = line_number;
  302|  1.13M|        err.m_Column                           = column;
  303|  1.13M|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  1.13M|        return err;
  306|  1.13M|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  1.13M|    {
  311|  1.13M|        return ConstructInvalidLabelIdentifierParseError(
  312|  1.13M|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  1.13M|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|   243k|    {
  319|   243k|        ParseError err;
  320|       |
  321|   243k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|   243k|        err.m_LineNumber                     = line_number;
  323|   243k|        err.m_Column                         = column;
  324|   243k|        err.label_already_defined.label_name = label_name;
  325|   243k|        err.label_already_defined.at_line    = at_line;
  326|   243k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|   243k|        return err;
  329|   243k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|   243k|    {
  334|   243k|        return ConstructLabelAlreadyDefinedParseError(
  335|   243k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|   243k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|   243k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|   697k|    {
  342|   697k|        ParseError err;
  343|       |
  344|   697k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|   697k|        err.m_LineNumber = line_number;
  346|   697k|        err.m_Column     = column;
  347|       |
  348|   697k|        return err;
  349|   697k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|   697k|    {
  354|   697k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|   697k|                                                        token.GetColumn().unsafe());
  356|   697k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|  84.0k|    {
  362|  84.0k|        ParseError err;
  363|       |
  364|  84.0k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|  84.0k|        err.m_LineNumber               = line_number;
  366|  84.0k|        err.m_Column                   = column;
  367|  84.0k|        err.too_few_arguments.required = required;
  368|  84.0k|        err.too_few_arguments.provided = provided;
  369|       |
  370|  84.0k|        return err;
  371|  84.0k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|  84.0k|    {
  376|  84.0k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|  84.0k|                                                  token.GetColumn().unsafe(), required, provided);
  378|  84.0k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|   201k|    {
  383|   201k|        ParseError err;
  384|       |
  385|   201k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|   201k|        err.m_LineNumber           = line_number;
  387|   201k|        err.m_Column               = column;
  388|   201k|        err.empty_label.label_name = label_name;
  389|       |
  390|   201k|        return err;
  391|   201k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|   201k|    {
  395|   201k|        return ConstructEmptyLabelParseError(
  396|   201k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|   201k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 169k, False: 31.5k]
  ------------------
  398|   169k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|   201k|                        token.GetText());
  400|   201k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|   141k|    {
  405|   141k|        ParseError err;
  406|       |
  407|   141k|        err.m_Type       = ParseError::Type::TooManyComma;
  408|   141k|        err.m_LineNumber = line_number;
  409|   141k|        err.m_Column     = column;
  410|       |
  411|   141k|        return err;
  412|   141k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|   141k|    {
  416|   141k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|   141k|                                               token.GetColumn().unsafe());
  418|   141k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  5.80M|    {
   19|  5.80M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  5.80M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  29.4k|    {
  181|  29.4k|        ParsedProgram program;
  182|       |
  183|  29.4k|        program.m_Tokens = tokens;
  184|       |
  185|  29.4k|        phi::boolean line_has_instruction{false};
  186|  29.4k|        phi::usize   label_count{0u};
  187|       |
  188|  6.63M|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 6.60M, False: 29.4k]
  ------------------
  189|  6.60M|        {
  190|  6.60M|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|  6.60M|            switch (current_token.GetType())
  195|  6.60M|            {
  196|       |                // Ignore comments
  197|  41.1k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 41.1k, False: 6.56M]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  41.1k|                    break;
  200|       |
  201|   794k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 794k, False: 5.81M]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|   794k|                    line_has_instruction = false;
  204|   794k|                    break;
  205|       |
  206|  2.53M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 2.53M, False: 4.07M]
  ------------------
  207|  2.53M|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 413k, False: 2.11M]
  ------------------
  208|   413k|                    {
  209|   413k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|   413k|                                current_token, Token::Type::NewLine));
  211|   413k|                        break;
  212|   413k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  2.11M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 712k, False: 1.40M]
  ------------------
  217|   712k|                    {
  218|   712k|                        program.AddParseError(
  219|   712k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|   712k|                        break;
  221|   712k|                    }
  222|       |
  223|  1.40M|                    phi::string_view label_name = current_token.GetText();
  224|  1.40M|                    label_name.remove_suffix(1u);
  225|       |
  226|  1.40M|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 616k, False: 790k]
  ------------------
  227|   616k|                    {
  228|   616k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|   616k|                                current_token.GetLineNumber().unsafe(),
  230|   616k|                                current_token.GetColumn().unsafe(), label_name));
  231|   616k|                        break;
  232|   616k|                    }
  233|       |
  234|   790k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 331k, False: 459k]
  ------------------
  235|   331k|                    {
  236|   331k|                        program.AddParseError(
  237|   331k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|   331k|                        break;
  239|   331k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|   459k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 243k, False: 215k]
  ------------------
  243|   243k|                    {
  244|       |                        // Find first defintions of label
  245|   243k|                        const Token* first_label_definition =
  246|   243k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   243k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|   243k|                                    {
  249|   243k|                                        phi::string_view token_label_name = t.GetText();
  250|   243k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   243k|                                        if (token_label_name == label_name)
  253|   243k|                                        {
  254|   243k|                                            return true;
  255|   243k|                                        }
  256|   243k|                                    }
  257|       |
  258|   243k|                                    return false;
  259|   243k|                                });
  260|       |
  261|   243k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|   243k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|   243k|                                current_token, *first_label_definition));
  265|   243k|                        break;
  266|   243k|                    }
  267|       |
  268|   215k|                    program.m_JumpData[label_name] =
  269|   215k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|   215k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|   215k|                    break;
  276|   459k|                }
  277|       |
  278|  1.19M|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 1.19M, False: 5.40M]
  ------------------
  279|  1.19M|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 697k, False: 500k]
  ------------------
  280|   697k|                    {
  281|   697k|                        program.AddParseError(
  282|   697k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|   697k|                        break;
  284|   697k|                    }
  285|       |
  286|   500k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|   500k|                    PHI_ASSERT(current_token.HasHint());
  290|   500k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|   500k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|   500k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|   500k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|   500k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|   500k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|   500k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|   500k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|   500k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  1.08M|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 1.00M, False: 86.7k]
  ------------------
  312|  1.00M|                    {
  313|       |                        // Get next token
  314|  1.00M|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 2.43k, False: 998k]
  ------------------
  315|  2.43k|                        {
  316|  2.43k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|  2.43k|                                    current_token, number_of_argument_required.unsafe(),
  318|  2.43k|                                    argument_num.unsafe()));
  319|  2.43k|                            break;
  320|  2.43k|                        }
  321|       |
  322|   998k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|   998k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 441k, False: 557k]
  ------------------
  326|   441k|                        {
  327|   441k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 141k, False: 300k]
  ------------------
  328|   141k|                            {
  329|   141k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|   141k|                            }
  331|       |
  332|   441k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|   441k|                            continue;
  335|   441k|                        }
  336|       |
  337|   557k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 81.6k, False: 475k]
  ------------------
  338|  81.6k|                        {
  339|  81.6k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  81.6k|                                    token, number_of_argument_required.unsafe(),
  341|  81.6k|                                    argument_num.unsafe()));
  342|  81.6k|                            break;
  343|  81.6k|                        }
  344|       |
  345|   475k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|   475k|                                parse_instruction_argument(
  347|   475k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|   475k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 330k, False: 145k]
  ------------------
  349|   330k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|   330k|                            break;
  352|   330k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|   145k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|   145k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|   145k|                        argument_num++;
  359|   145k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|   145k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|   500k|                    program.m_Instructions.emplace_back(instruction);
  367|   500k|                    line_has_instruction = true;
  368|   500k|                    break;
  369|  1.19M|                }
  370|       |
  371|  2.03M|                default:
  ------------------
  |  Branch (371:17): [True: 2.03M, False: 4.56M]
  ------------------
  372|  2.03M|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  2.03M|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 997k, False: 1.04M]
  ------------------
  374|   997k|                    {
  375|   997k|                        expected_token_type = Token::Type::NewLine;
  376|   997k|                    }
  377|       |
  378|  2.03M|                    program.AddParseError(
  379|  2.03M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  2.03M|                    break;
  381|  6.60M|            }
  382|  6.60M|        }
  383|       |
  384|       |        // Check for empty labels
  385|  29.4k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 9.65k, False: 19.8k]
  ------------------
  386|  9.65k|        {
  387|   249k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 240k, False: 9.65k]
  ------------------
  388|   240k|            {
  389|   240k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|   240k|                const Token& token = *it;
  392|   240k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 201k, False: 38.9k]
  ------------------
  393|   201k|                {
  394|   201k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|   201k|                    --label_count;
  396|   201k|                }
  397|   240k|            }
  398|  9.65k|        }
  399|       |
  400|  29.4k|        return program;
  401|  29.4k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  29.4k|    {
  405|  29.4k|        TokenStream tokens = Tokenize(source);
  406|  29.4k|        return Parse(tokens);
  407|  29.4k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|   475k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|   475k|        switch (token.GetType())
   37|   475k|        {
   38|  78.7k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 78.7k, False: 396k]
  ------------------
   39|  78.7k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 28.7k, False: 50.0k]
  ------------------
   40|  78.7k|                                          ArgumentType::AddressDisplacement))
   41|  28.7k|                {
   42|  28.7k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|  28.7k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|  28.7k|                    return {};
   46|  28.7k|                }
   47|       |
   48|       |                // Get address displacement
   49|  50.0k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  50.0k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  50.0k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 7, False: 50.0k]
  ------------------
   54|      7|                {
   55|      7|                    program.AddParseError(
   56|      7|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      7|                    return {};
   58|      7|                }
   59|       |
   60|  50.0k|                auto         it           = tokens.current_position();
   61|  50.0k|                const Token& first_token  = tokens.consume();
   62|  50.0k|                const Token& second_token = tokens.consume();
   63|  50.0k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  50.0k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 17.5k, False: 32.4k]
  ------------------
   66|  17.5k|                {
   67|  17.5k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|  17.5k|                            first_token, Token::Type::OpenBracket));
   69|  17.5k|                    return {};
   70|  17.5k|                }
   71|       |
   72|       |                // Second token is the register
   73|  32.4k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 10.8k, False: 21.6k]
  ------------------
   74|  10.8k|                {
   75|  10.8k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|  10.8k|                            second_token, Token::Type::RegisterInt));
   77|  10.8k|                    return {};
   78|  10.8k|                }
   79|       |
   80|  21.6k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 8.21k, False: 13.3k]
  ------------------
   81|  8.21k|                {
   82|  8.21k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|  8.21k|                            third_token, Token::Type::ClosingBracket));
   84|  8.21k|                    return {};
   85|  8.21k|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|  13.3k|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|  13.3k|                return ConstructInstructionArgumentAddressDisplacement(
   94|  13.3k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|  21.6k|            }
   96|  24.7k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 24.7k, False: 450k]
  ------------------
   97|  24.7k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 4.29k, False: 20.4k]
  ------------------
   98|  4.29k|                {
   99|  4.29k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|  4.29k|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|  4.29k|                    return {};
  102|  4.29k|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  20.4k|                return ConstructInstructionArgumentRegisterInt(
  108|  20.4k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  24.7k|            }
  110|  53.1k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 53.1k, False: 422k]
  ------------------
  111|  53.1k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 7.84k, False: 45.2k]
  ------------------
  112|  7.84k|                {
  113|  7.84k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|  7.84k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|  7.84k|                    return {};
  116|  7.84k|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  45.2k|                return ConstructInstructionArgumentRegisterFloat(
  122|  45.2k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  53.1k|            }
  124|  8.72k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 8.72k, False: 466k]
  ------------------
  125|  8.72k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|  8.72k|                return {};
  128|  53.1k|            }
  129|   197k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 197k, False: 277k]
  ------------------
  130|       |                // Parse as Label
  131|   197k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 45.1k, False: 152k]
  ------------------
  132|  45.1k|                {
  133|  45.1k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  45.1k|                            token, expected_argument_type, ArgumentType::Label));
  135|  45.1k|                    return {};
  136|  45.1k|                }
  137|       |
  138|   152k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 152k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|   152k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 94.8k, False: 57.5k]
  ------------------
  145|  94.8k|                {
  146|  94.8k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  94.8k|                    return {};
  148|  94.8k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  57.5k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|   152k|            }
  154|  35.8k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 35.8k, False: 439k]
  ------------------
  155|  35.8k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 19.9k, False: 15.9k]
  ------------------
  156|  19.9k|                {
  157|  19.9k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|  19.9k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|  19.9k|                    return {};
  160|  19.9k|                }
  161|       |
  162|  15.9k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 8.62k, False: 7.28k]
  ------------------
  163|  8.62k|                {
  164|  8.62k|                    return ConstructInstructionArgumentImmediateValue(
  165|  8.62k|                            static_cast<std::int16_t>(token.GetHint()));
  166|  8.62k|                }
  167|       |
  168|  7.28k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|  7.28k|                return {};
  170|  15.9k|            }
  171|       |
  172|  76.6k|            default:
  ------------------
  |  Branch (172:13): [True: 76.6k, False: 398k]
  ------------------
  173|  76.6k|                program.AddParseError(
  174|  76.6k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  76.6k|                return {};
  176|   475k|        }
  177|   475k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  3.48M|                                tokens.find_first_token_if([&](const Token& t) {
  247|  3.48M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 2.52M, False: 955k]
  ------------------
  248|  2.52M|                                    {
  249|  2.52M|                                        phi::string_view token_label_name = t.GetText();
  250|  2.52M|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  2.52M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 243k, False: 2.28M]
  ------------------
  253|   243k|                                        {
  254|   243k|                                            return true;
  255|   243k|                                        }
  256|  2.52M|                                    }
  257|       |
  258|  3.23M|                                    return false;
  259|  3.48M|                                });

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|  5.69M|    {
   13|  5.69M|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 976k, False: 4.71M]
  ------------------
   14|   976k|        {
   15|   976k|            const char first_char = token[0u];
   16|   976k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 4.93k, False: 972k]
  |  Branch (16:38): [True: 86.5k, False: 885k]
  ------------------
   17|  91.4k|            {
   18|  91.4k|                const char second_char = token[1u];
   19|  91.4k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 88.1k, False: 3.26k]
  |  Branch (19:43): [True: 70.1k, False: 18.0k]
  ------------------
   20|  70.1k|                {
   21|  70.1k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  70.1k|                }
   23|  91.4k|            }
   24|   976k|        }
   25|  4.71M|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 1.12M, False: 3.58M]
  ------------------
   26|  1.12M|        {
   27|  1.12M|            const char first_char = token[0u];
   28|  1.12M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 3.03k, False: 1.12M]
  |  Branch (28:38): [True: 71.1k, False: 1.05M]
  ------------------
   29|  74.1k|            {
   30|  74.1k|                const char second_char = token[1u];
   31|  74.1k|                const char third_char  = token[2u];
   32|       |
   33|  74.1k|                switch (second_char)
   34|  74.1k|                {
   35|  28.7k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 28.7k, False: 45.3k]
  ------------------
   36|  28.7k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 19.5k, False: 9.17k]
  |  Branch (36:50): [True: 10.6k, False: 8.90k]
  ------------------
   37|  10.6k|                        {
   38|  10.6k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|  10.6k|                        }
   40|  18.0k|                        break;
   41|  28.7k|                    }
   42|  23.8k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 23.8k, False: 50.3k]
  ------------------
   43|  23.8k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 10.8k, False: 12.9k]
  |  Branch (43:50): [True: 6.50k, False: 4.35k]
  ------------------
   44|  6.50k|                        {
   45|  6.50k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|  6.50k|                        }
   47|  17.3k|                        break;
   48|  23.8k|                    }
   49|  17.3k|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 11.3k, False: 62.8k]
  ------------------
   50|  11.3k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 1.73k, False: 9.62k]
  |  Branch (50:50): [True: 2.88k, False: 6.74k]
  ------------------
   51|  4.61k|                        {
   52|  4.61k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|  4.61k|                        }
   54|  6.74k|                        break;
   55|  11.3k|                    }
   56|  10.2k|                    default: {
  ------------------
  |  Branch (56:21): [True: 10.2k, False: 63.9k]
  ------------------
   57|  10.2k|                        break;
   58|  11.3k|                    }
   59|  74.1k|                }
   60|  74.1k|            }
   61|  1.12M|        }
   62|       |
   63|  5.59M|        return IntRegisterID::None;
   64|  5.69M|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|  5.59M|    {
   68|  5.59M|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 906k, False: 4.69M]
  ------------------
   69|   906k|        {
   70|   906k|            const char first_char = token[0u];
   71|   906k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 71.2k, False: 835k]
  |  Branch (71:38): [True: 22.3k, False: 813k]
  ------------------
   72|  93.5k|            {
   73|  93.5k|                const char second_char = token[1u];
   74|  93.5k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 88.8k, False: 4.72k]
  |  Branch (74:43): [True: 64.0k, False: 24.8k]
  ------------------
   75|  64.0k|                {
   76|  64.0k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  64.0k|                }
   78|  93.5k|            }
   79|   906k|        }
   80|  4.69M|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 1.10M, False: 3.58M]
  ------------------
   81|  1.10M|        {
   82|  1.10M|            const char first_char = token[0u];
   83|  1.10M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 57.2k, False: 1.04M]
  |  Branch (83:38): [True: 26.2k, False: 1.02M]
  ------------------
   84|  83.5k|            {
   85|  83.5k|                const char second_char = token[1u];
   86|  83.5k|                const char third_char  = token[2u];
   87|       |
   88|  83.5k|                switch (second_char)
   89|  83.5k|                {
   90|  5.64k|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 5.64k, False: 77.8k]
  ------------------
   91|  5.64k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 4.46k, False: 1.17k]
  |  Branch (91:50): [True: 2.71k, False: 1.74k]
  ------------------
   92|  2.71k|                        {
   93|  2.71k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|  2.71k|                        }
   95|  2.92k|                        break;
   96|  5.64k|                    }
   97|  11.5k|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 11.5k, False: 71.9k]
  ------------------
   98|  11.5k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 10.0k, False: 1.55k]
  |  Branch (98:50): [True: 4.19k, False: 5.82k]
  ------------------
   99|  4.19k|                        {
  100|  4.19k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|  4.19k|                        }
  102|  7.37k|                        break;
  103|  11.5k|                    }
  104|  42.7k|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 42.7k, False: 40.7k]
  ------------------
  105|  42.7k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 23.2k, False: 19.5k]
  |  Branch (105:50): [True: 6.86k, False: 12.6k]
  ------------------
  106|  30.1k|                        {
  107|  30.1k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|  30.1k|                        }
  109|  12.6k|                        break;
  110|  42.7k|                    }
  111|  23.5k|                    default: {
  ------------------
  |  Branch (111:21): [True: 23.5k, False: 59.9k]
  ------------------
  112|  23.5k|                        break;
  113|  42.7k|                    }
  114|  83.5k|                }
  115|  83.5k|            }
  116|  1.10M|        }
  117|       |
  118|  5.49M|        return FloatRegisterID::None;
  119|  5.59M|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|  5.09M|    {
  123|  5.09M|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 1.05M, False: 4.04M]
  ------------------
  124|  1.05M|        {
  125|  1.05M|            const char c1 = token[0u];
  126|  1.05M|            const char c2 = token[1u];
  127|  1.05M|            const char c3 = token[2u];
  128|  1.05M|            const char c4 = token[3u];
  129|       |
  130|  1.05M|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 36.6k, False: 1.01M]
  |  Branch (130:34): [True: 28.7k, False: 990k]
  |  Branch (130:49): [True: 29.9k, False: 35.3k]
  |  Branch (130:62): [True: 2.26k, False: 33.1k]
  ------------------
  131|  1.05M|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 6.36k, False: 25.8k]
  |  Branch (131:34): [True: 23.0k, False: 2.83k]
  |  Branch (131:49): [True: 4.96k, False: 24.4k]
  |  Branch (131:62): [True: 19.0k, False: 5.39k]
  ------------------
  132|  1.05M|        }
  133|       |
  134|  4.04M|        return false;
  135|  5.09M|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|  6.22M|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  1.53M|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  15.0M|    {
   41|  15.0M|        return m_Type;
   42|  15.0M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  6.55M|    {
   51|  6.55M|        return m_LineNumber;
   52|  6.55M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  6.05M|    {
   56|  6.05M|        return m_Column;
   57|  6.05M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  8.38M|    {
   66|  8.38M|        return m_Text;
   67|  8.38M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   566k|    {
   80|   566k|        return m_HasHint;
   81|   566k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   638k|    {
   85|   638k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   638k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   638k|                   m_Type == Type::ImmediateInteger);
   88|   638k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   638k|        return m_Hint;
   91|   638k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  29.4k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  29.4k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  29.4k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  50.0k|    {
   51|  50.0k|        auto it = m_Iterator;
   52|   200k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 150k, False: 50.0k]
  ------------------
   53|   150k|        {
   54|   150k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 7, False: 150k]
  ------------------
   55|      7|            {
   56|      7|                return false;
   57|      7|            }
   58|   150k|        }
   59|       |
   60|  50.0k|        return true;
   61|  50.0k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  7.63M|    {
   65|  7.63M|        return m_Iterator != m_Tokens.end();
   66|  7.63M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  7.75M|    {
   70|  7.75M|        return m_Iterator == m_Tokens.end();
   71|  7.75M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  7.75M|    {
   85|  7.75M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  7.75M|        return *m_Iterator++;
   91|  7.75M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  50.0k|    {
  164|  50.0k|        return m_Iterator;
  165|  50.0k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  13.3k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  13.3k|        m_Iterator = it;
  179|  13.3k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  9.65k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  9.65k|        return m_Tokens.rbegin();
  224|  9.65k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|   240k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|   240k|        return m_Tokens.rend();
  233|   240k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  29.4k|    {
   66|  29.4k|        TokenStream tokens;
   67|       |
   68|  29.4k|        phi::string_view current_token;
   69|       |
   70|  29.4k|        phi::u64 current_line_number{1u};
   71|  29.4k|        phi::u64 current_column{1u};
   72|  29.4k|        phi::u64 token_begin{0u};
   73|       |
   74|  29.4k|        phi::boolean parsing_comment{false};
   75|       |
   76|  19.6M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 19.6M, False: 29.4k]
  ------------------
   77|  19.6M|        {
   78|  19.6M|            const char c{source.at(i)};
   79|       |
   80|  19.6M|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 879k, False: 18.7M]
  ------------------
   81|   879k|            {
   82|   879k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 141k, False: 738k]
  ------------------
   83|   141k|                {
   84|       |                    // Skip empty lines
   85|   141k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|   141k|                                        current_line_number, current_column);
   87|       |
   88|   141k|                    parsing_comment = false;
   89|   141k|                    current_line_number += 1u;
   90|   141k|                    current_column = 1u;
   91|   141k|                    continue;
   92|   141k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|   738k|                tokens.emplace_back(ParseToken(
   96|   738k|                        source.substring_view(
   97|   738k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|   738k|                                current_token.length()),
   99|   738k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|   738k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|   738k|                                    current_line_number, current_column);
  103|       |
  104|   738k|                current_token   = phi::string_view{};
  105|   738k|                parsing_comment = false;
  106|   738k|                current_line_number += 1u;
  107|   738k|                current_column = 0u;
  108|   738k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|  18.7M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 12.9k, False: 18.7M]
  |  Branch (110:34): [True: 37.8k, False: 18.6M]
  ------------------
  111|  50.7k|            {
  112|  50.7k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 24.8k, False: 25.9k]
  ------------------
  113|  24.8k|                {
  114|  24.8k|                    token_begin = i;
  115|  24.8k|                }
  116|  25.9k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 23.4k, False: 2.44k]
  ------------------
  117|  23.4k|                {
  118|  23.4k|                    tokens.emplace_back(ParseToken(
  119|  23.4k|                            source.substring_view(
  120|  23.4k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  23.4k|                                    current_token.length()),
  122|  23.4k|                            current_line_number, current_column - current_token.length()));
  123|  23.4k|                    token_begin   = i;
  124|  23.4k|                    current_token = phi::string_view{};
  125|  23.4k|                }
  126|       |
  127|  50.7k|                parsing_comment = true;
  128|  50.7k|                current_token   = source.substring_view(
  129|  50.7k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  50.7k|                        current_token.length() + 1u);
  131|  50.7k|            }
  132|  18.6M|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 84.4k, False: 18.6M]
  ------------------
  133|  84.4k|            {
  134|       |                // simply append the character
  135|  84.4k|                current_token = source.substring_view(
  136|  84.4k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|  84.4k|                        current_token.length() + 1u);
  138|  84.4k|            }
  139|  18.6M|            else
  140|  18.6M|            {
  141|       |                // Not parsing a comment
  142|  18.6M|                switch (c)
  143|  18.6M|                {
  144|   233k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 233k, False: 18.3M]
  ------------------
  145|   404k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 171k, False: 18.4M]
  ------------------
  146|   705k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 301k, False: 18.3M]
  ------------------
  147|   705k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 132k, False: 573k]
  ------------------
  148|   132k|                        {
  149|   132k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|   132k|                            continue;
  152|   132k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|   573k|                        tokens.emplace_back(ParseToken(
  156|   573k|                                source.substring_view(
  157|   573k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|   573k|                                        current_token.length()),
  159|   573k|                                current_line_number, current_column - current_token.length()));
  160|   573k|                        current_token = phi::string_view{};
  161|   573k|                        break;
  162|  1.73M|                    case ':':
  ------------------
  |  Branch (162:21): [True: 1.73M, False: 16.8M]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  1.73M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 1.51M, False: 212k]
  ------------------
  165|  1.51M|                        {
  166|  1.51M|                            current_token = source.substring_view(
  167|  1.51M|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  1.51M|                                    current_token.length() + 1u);
  169|  1.51M|                            tokens.emplace_back(ParseToken(
  170|  1.51M|                                    source.substring_view(
  171|  1.51M|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  1.51M|                                                    token_begin),
  173|  1.51M|                                            current_token.length()),
  174|  1.51M|                                    current_line_number,
  175|  1.51M|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  1.51M|                            current_token = phi::string_view{};
  178|  1.51M|                        }
  179|   212k|                        else
  180|   212k|                        {
  181|       |                            // Orphan colon
  182|   212k|                            token_begin = i;
  183|       |
  184|   212k|                            tokens.emplace_back(
  185|   212k|                                    Token::Type::Colon,
  186|   212k|                                    source.substring_view(
  187|   212k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|   212k|                                                    token_begin),
  189|   212k|                                            1u),
  190|   212k|                                    current_line_number, current_column);
  191|   212k|                        }
  192|  1.73M|                        break;
  193|  1.29M|                    case ',':
  ------------------
  |  Branch (193:21): [True: 1.29M, False: 17.3M]
  ------------------
  194|  2.21M|                    case '(':
  ------------------
  |  Branch (194:21): [True: 915k, False: 17.6M]
  ------------------
  195|  2.28M|                    case ')':
  ------------------
  |  Branch (195:21): [True: 78.0k, False: 18.5M]
  ------------------
  196|  2.28M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 1.49M, False: 791k]
  ------------------
  197|  1.49M|                        {
  198|  1.49M|                            tokens.emplace_back(ParseToken(
  199|  1.49M|                                    source.substring_view(
  200|  1.49M|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  1.49M|                                                    token_begin),
  202|  1.49M|                                            current_token.length()),
  203|  1.49M|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  1.49M|                            current_token = phi::string_view{};
  206|  1.49M|                        }
  207|       |
  208|  2.28M|                        Token::Type type;
  209|  2.28M|                        switch (c)
  210|  2.28M|                        {
  211|  1.29M|                            case ',':
  ------------------
  |  Branch (211:29): [True: 1.29M, False: 993k]
  ------------------
  212|  1.29M|                                type = Token::Type::Comma;
  213|  1.29M|                                break;
  214|   915k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 915k, False: 1.37M]
  ------------------
  215|   915k|                                type = Token::Type::OpenBracket;
  216|   915k|                                break;
  217|  78.0k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 78.0k, False: 2.21M]
  ------------------
  218|  78.0k|                                type = Token::Type::ClosingBracket;
  219|  78.0k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 2.28M]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  2.28M|#endif
  225|  2.28M|                        }
  226|       |
  227|  2.28M|                        token_begin = i;
  228|       |
  229|  2.28M|                        tokens.emplace_back(
  230|  2.28M|                                type,
  231|  2.28M|                                source.substring_view(
  232|  2.28M|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  2.28M|                                        1u),
  234|  2.28M|                                current_line_number, current_column);
  235|  2.28M|                        break;
  236|       |
  237|  13.8M|                    default:
  ------------------
  |  Branch (237:21): [True: 13.8M, False: 4.72M]
  ------------------
  238|  13.8M|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 4.32M, False: 9.56M]
  ------------------
  239|  4.32M|                        {
  240|  4.32M|                            token_begin = i;
  241|  4.32M|                        }
  242|       |
  243|       |                        // simply append the character
  244|  13.8M|                        current_token = source.substring_view(
  245|  13.8M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|  13.8M|                                current_token.length() + 1u);
  247|  18.6M|                }
  248|  18.6M|            }
  249|       |
  250|  19.3M|            current_column += 1u;
  251|  19.3M|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  29.4k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 19.9k, False: 9.48k]
  ------------------
  255|  19.9k|        {
  256|  19.9k|            tokens.emplace_back(
  257|  19.9k|                    ParseToken(source.substring_view(
  258|  19.9k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  19.9k|                                       current_token.length()),
  260|  19.9k|                               current_line_number, current_column - current_token.length()));
  261|  19.9k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  29.4k|        tokens.finalize();
  265|       |
  266|  29.4k|        return tokens;
  267|  29.4k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|  4.37M|    {
   14|  4.37M|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 47.7k, False: 4.32M]
  |  Branch (14:13): [True: 42.6k, False: 4.32M]
  |  Branch (14:36): [True: 42.6k, False: 5.04k]
  ------------------
   15|  42.6k|        {
   16|  42.6k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  42.6k|            if (number)
  ------------------
  |  Branch (18:17): [True: 12.4k, False: 30.2k]
  ------------------
   19|  12.4k|            {
   20|  12.4k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  12.4k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  12.4k|            }
   23|       |
   24|  30.2k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  42.6k|        }
   26|       |
   27|  4.32M|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 12.6k, False: 4.31M]
  |  Branch (27:13): [True: 48.3k, False: 4.28M]
  |  Branch (27:36): [True: 35.6k, False: 4.28M]
  ------------------
   28|  48.3k|        {
   29|  48.3k|            return {Token::Type::Comment, token, line_number, column};
   30|  48.3k|        }
   31|       |
   32|  4.28M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 130k, False: 4.15M]
  ------------------
   33|   130k|        {
   34|   130k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|   130k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|   130k|        }
   37|       |
   38|  4.15M|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 19.0k, False: 4.13M]
  ------------------
   39|  19.0k|        {
   40|  19.0k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  19.0k|        }
   42|       |
   43|  4.13M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 70.7k, False: 4.06M]
  ------------------
   44|  70.7k|        {
   45|  70.7k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  70.7k|                    static_cast<phi::uint32_t>(id)};
   47|  70.7k|        }
   48|       |
   49|  4.06M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 94.0k, False: 3.96M]
  ------------------
   50|  94.0k|        {
   51|  94.0k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  94.0k|                    static_cast<phi::uint32_t>(id)};
   53|  94.0k|        }
   54|       |
   55|  3.96M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 1.22M, False: 2.74M]
  ------------------
   56|  1.22M|        {
   57|  1.22M|            return {Token::Type::OpCode, token, line_number, column,
   58|  1.22M|                    static_cast<phi::uint32_t>(opcode)};
   59|  1.22M|        }
   60|       |
   61|  2.74M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  3.96M|    }

LLVMFuzzerTestOneInput:
    8|  29.4k|{
    9|  29.4k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   10|       |
   11|       |    // Parse it
   12|  29.4k|    dlx::Parser::Parse(source);
   13|       |
   14|  29.4k|    return 0;
   15|  29.4k|}


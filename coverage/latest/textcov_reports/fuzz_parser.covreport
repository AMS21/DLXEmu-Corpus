_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  55.4k|        {
  173|  55.4k|            PHI_ASSERT(index < 3u);
  174|       |
  175|  55.4k|            switch (index.unsafe())
  176|  55.4k|            {
  177|  25.5k|                case 0:
  ------------------
  |  Branch (177:17): [True: 25.5k, False: 29.8k]
  ------------------
  178|  25.5k|                    return m_Arg1Type;
  179|       |
  180|  15.1k|                case 1:
  ------------------
  |  Branch (180:17): [True: 15.1k, False: 40.2k]
  ------------------
  181|  15.1k|                    return m_Arg2Type;
  182|       |
  183|  14.7k|                case 2:
  ------------------
  |  Branch (183:17): [True: 14.7k, False: 40.6k]
  ------------------
  184|  14.7k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 55.4k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  55.4k|#endif
  191|  55.4k|            }
  192|  55.4k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  14.4k|        {
  199|  14.4k|            phi::u8 number_of_argument_required = static_cast<phi::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  14.4k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 14.0k, False: 379]
  ------------------
  203|  14.0k|            {
  204|  14.0k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  205|  14.0k|            }
  206|  14.4k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 6.13k, False: 8.28k]
  ------------------
  207|  6.13k|            {
  208|  6.13k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  209|  6.13k|            }
  210|  14.4k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 3.33k, False: 11.0k]
  ------------------
  211|  3.33k|            {
  212|  3.33k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  213|  3.33k|            }
  214|       |
  215|  14.4k|            return number_of_argument_required;
  216|  14.4k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  14.4k|        {
  225|  14.4k|            return m_Executor;
  226|  14.4k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  9.80k|    {
   38|  9.80k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  9.80k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  9.80k|                                         static_cast<underlying_t>(rhs));
   42|  9.80k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  9.80k|    {
   55|  9.80k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  9.80k|        return static_cast<underlying_t>(type & test) != 0;
   58|  9.80k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  46.5k|    {
   31|  46.5k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 710, False: 45.8k]
  ------------------
   32|    710|        {
   33|    710|            return true;
   34|    710|        }
   35|       |
   36|  45.8k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 591, False: 45.2k]
  ------------------
   37|    591|        {
   38|    591|            return true;
   39|    591|        }
   40|       |
   41|  45.2k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 19.3k, False: 25.8k]
  ------------------
   42|  19.3k|        {
   43|  19.3k|            return true;
   44|  19.3k|        }
   45|       |
   46|  25.8k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 200, False: 25.6k]
  ------------------
   47|    200|        {
   48|    200|            return true;
   49|    200|        }
   50|       |
   51|  25.6k|        return false;
   52|  25.8k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  25.6k|    {
   56|  25.6k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 25.6k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  25.6k|        const char first_char = token.at(0u);
   62|       |
   63|  25.6k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 4.74k, False: 20.9k]
  ------------------
   64|  4.74k|        {
   65|  4.74k|            return phi::is_alpha(first_char);
   66|  4.74k|        }
   67|       |
   68|  20.9k|        phi::boolean just_under_scores = (first_char == '_');
   69|  20.9k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 2.16k, False: 18.7k]
  |  Branch (69:13): [True: 1.71k, False: 19.2k]
  |  Branch (69:43): [True: 1.71k, False: 453]
  ------------------
   70|  1.71k|        {
   71|  1.71k|            return false;
   72|  1.71k|        }
   73|       |
   74|  68.0k|        for (phi::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 57.3k, False: 10.6k]
  ------------------
   75|  57.3k|        {
   76|  57.3k|            const char c{token.at(index)};
   77|       |
   78|  57.3k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 48.2k, False: 9.11k]
  ------------------
   79|  48.2k|            {
   80|  48.2k|                just_under_scores = false;
   81|  48.2k|            }
   82|  9.11k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 550, False: 8.56k]
  ------------------
   83|    550|            {
   84|    550|                continue;
   85|    550|            }
   86|  8.56k|            else
   87|  8.56k|            {
   88|  8.56k|                return false;
   89|  8.56k|            }
   90|  57.3k|        }
   91|       |
   92|  10.6k|        return !just_under_scores;
   93|  19.2k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   98|   102k|    {
   99|   102k|        if (token.is_empty())
  ------------------
  |  Branch (99:13): [True: 0, False: 102k]
  ------------------
  100|      0|        {
  101|      0|            return {};
  102|      0|        }
  103|       |
  104|   102k|        if (token.length() == 1u)
  ------------------
  |  Branch (104:13): [True: 14.5k, False: 87.4k]
  ------------------
  105|  14.5k|        {
  106|  14.5k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (106:17): [True: 1.80k, False: 12.7k]
  ------------------
  107|  1.80k|            {
  108|  1.80k|                return static_cast<phi::int16_t>(token.at(0u) - '0');
  109|  1.80k|            }
  110|       |
  111|  12.7k|            return {};
  112|  14.5k|        }
  113|       |
  114|       |        // Disallow trailing separators
  115|  87.4k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (115:13): [True: 436, False: 87.0k]
  ------------------
  116|    436|        {
  117|    436|            return {};
  118|    436|        }
  119|       |
  120|  87.0k|        phi::int32_t number{0};
  121|  87.0k|        phi::boolean is_negative{false};
  122|  87.0k|        phi::boolean starts_with_zero{false};
  123|  87.0k|        phi::boolean parsing_binary{false};
  124|  87.0k|        phi::boolean parsing_octal{false};
  125|  87.0k|        phi::boolean parsing_hexadecimal{false};
  126|  87.0k|        phi::boolean parsed_something{false};
  127|  87.0k|        phi::boolean parsed_separator{false};
  128|       |
  129|       |        // TODO: Move x'th character checks out of the for loop
  130|       |
  131|  98.5k|        for (phi::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (131:37): [True: 97.1k, False: 1.39k]
  ------------------
  132|  97.1k|        {
  133|  97.1k|            const char c{token.at(index)};
  134|       |
  135|       |            // First character
  136|  97.1k|            if (index == 0u)
  ------------------
  |  Branch (136:17): [True: 87.0k, False: 10.1k]
  ------------------
  137|  87.0k|            {
  138|  87.0k|                if (c == '+')
  ------------------
  |  Branch (138:21): [True: 203, False: 86.8k]
  ------------------
  139|    203|                {
  140|    203|                    continue;
  141|    203|                }
  142|       |
  143|  86.8k|                if (c == '-')
  ------------------
  |  Branch (143:21): [True: 1.00k, False: 85.8k]
  ------------------
  144|  1.00k|                {
  145|  1.00k|                    is_negative = true;
  146|  1.00k|                    continue;
  147|  1.00k|                }
  148|       |
  149|  85.8k|                if (c == '0')
  ------------------
  |  Branch (149:21): [True: 1.78k, False: 84.0k]
  ------------------
  150|  1.78k|                {
  151|  1.78k|                    starts_with_zero = true;
  152|  1.78k|                    continue;
  153|  1.78k|                }
  154|       |
  155|  84.0k|                if (c == '\'')
  ------------------
  |  Branch (155:21): [True: 194, False: 83.8k]
  ------------------
  156|    194|                {
  157|    194|                    return {};
  158|    194|                }
  159|  84.0k|            }
  160|       |
  161|       |            // Second character
  162|  93.9k|            if (index == 1u)
  ------------------
  |  Branch (162:17): [True: 3.66k, False: 90.3k]
  ------------------
  163|  3.66k|            {
  164|  3.66k|                if (starts_with_zero)
  ------------------
  |  Branch (164:21): [True: 1.78k, False: 1.87k]
  ------------------
  165|  1.78k|                {
  166|       |                    // Binary
  167|  1.78k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (167:25): [True: 204, False: 1.58k]
  |  Branch (167:37): [True: 210, False: 1.37k]
  ------------------
  168|    414|                    {
  169|    414|                        parsing_binary = true;
  170|    414|                        continue;
  171|    414|                    }
  172|       |
  173|       |                    // Hexadecimal
  174|  1.37k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (174:25): [True: 495, False: 880]
  |  Branch (174:37): [True: 199, False: 681]
  ------------------
  175|    694|                    {
  176|    694|                        parsing_hexadecimal = true;
  177|    694|                        continue;
  178|    694|                    }
  179|       |
  180|       |                    // Octal
  181|    681|                    parsing_octal = true;
  182|    681|                }
  183|  3.66k|            }
  184|       |
  185|       |            // Handle separators
  186|  92.8k|            if (c == '\'')
  ------------------
  |  Branch (186:17): [True: 441, False: 92.4k]
  ------------------
  187|    441|            {
  188|    441|                if (parsed_separator)
  ------------------
  |  Branch (188:21): [True: 194, False: 247]
  ------------------
  189|    194|                {
  190|    194|                    return {};
  191|    194|                }
  192|       |
  193|    247|                parsed_separator = true;
  194|    247|                continue;
  195|    441|            }
  196|       |
  197|       |            // Check for over/underflow
  198|  92.4k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (198:17): [True: 3.83k, False: 88.5k]
  |  Branch (198:32): [True: 226, False: 3.61k]
  ------------------
  199|    226|            {
  200|       |                // Would underflow
  201|    226|                return {};
  202|    226|            }
  203|  92.1k|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (203:17): [True: 88.5k, False: 3.61k]
  |  Branch (203:17): [True: 229, False: 91.9k]
  |  Branch (203:33): [True: 229, False: 88.3k]
  ------------------
  204|    229|            {
  205|       |                // Would overflow
  206|    229|                return {};
  207|    229|            }
  208|       |
  209|  91.9k|            parsed_separator = false;
  210|  91.9k|            parsed_something = true;
  211|       |
  212|  91.9k|            if (parsing_binary)
  ------------------
  |  Branch (212:17): [True: 599, False: 91.3k]
  ------------------
  213|    599|            {
  214|    599|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (214:21): [True: 211, False: 388]
  ------------------
  215|    211|                {
  216|    211|                    return {};
  217|    211|                }
  218|       |
  219|    388|                number <<= 1;
  220|    388|                number |= (c - '0');
  221|    388|            }
  222|  91.3k|            else if (parsing_octal)
  ------------------
  |  Branch (222:22): [True: 868, False: 90.5k]
  ------------------
  223|    868|            {
  224|    868|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (224:21): [True: 528, False: 340]
  ------------------
  225|    528|                {
  226|    528|                    return {};
  227|    528|                }
  228|       |
  229|    340|                number <<= 3;
  230|    340|                number |= (c - '0');
  231|    340|            }
  232|  90.5k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (232:22): [True: 993, False: 89.5k]
  ------------------
  233|    993|            {
  234|    993|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (234:21): [True: 399, False: 594]
  ------------------
  235|    399|                {
  236|    399|                    return {};
  237|    399|                }
  238|       |
  239|    594|                number <<= 4;
  240|    594|                number |= phi::hex_digit_value(c).unsafe();
  241|    594|            }
  242|  89.5k|            else
  243|  89.5k|            {
  244|  89.5k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (244:21): [True: 83.4k, False: 6.02k]
  ------------------
  245|  83.4k|                {
  246|  83.4k|                    return {};
  247|  83.4k|                }
  248|       |
  249|       |                // Disallow leading zeros
  250|  6.02k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (250:21): [True: 1.64k, False: 4.38k]
  |  Branch (250:36): [True: 206, False: 1.44k]
  ------------------
  251|    206|                {
  252|    206|                    return {};
  253|    206|                }
  254|       |
  255|  5.82k|                number *= 10;
  256|  5.82k|                number += (c - '0');
  257|  5.82k|            }
  258|  91.9k|        }
  259|       |
  260|  1.39k|        if (parsed_something)
  ------------------
  |  Branch (260:13): [True: 1.12k, False: 269]
  ------------------
  261|  1.12k|        {
  262|       |            // Check for over/underflow
  263|  1.12k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (263:17): [True: 516, False: 608]
  |  Branch (263:32): [True: 322, False: 194]
  ------------------
  264|    322|            {
  265|       |                // Would underflow
  266|    322|                return {};
  267|    322|            }
  268|    802|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (268:17): [True: 608, False: 194]
  |  Branch (268:17): [True: 217, False: 585]
  |  Branch (268:33): [True: 217, False: 391]
  ------------------
  269|    217|            {
  270|       |                // Would overflow
  271|    217|                return {};
  272|    217|            }
  273|       |
  274|    585|            if (is_negative)
  ------------------
  |  Branch (274:17): [True: 194, False: 391]
  ------------------
  275|    194|            {
  276|    194|                return static_cast<phi::int16_t>(-number);
  277|    194|            }
  278|       |
  279|    391|            return static_cast<phi::int16_t>(number);
  280|    585|        }
  281|       |
  282|    269|        return {};
  283|  1.39k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  7.52k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finalized);
   61|       |#endif
   62|       |
   63|  7.52k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 19.5k, False: 0]
  ------------------
   64|  19.5k|            {
   65|  19.5k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 7.52k, False: 11.9k]
  ------------------
   66|  7.52k|                {
   67|  7.52k|                    return &token;
   68|  7.52k|                }
   69|  19.5k|            }
   70|       |
   71|      0|            return nullptr;
   72|  7.52k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  18.5k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  18.5k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  18.5k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   102k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|   102k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   102k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  31.5k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  31.5k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  31.5k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   16|  14.4k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   21|  3.28k|    {
   22|  3.28k|        PHI_ASSERT(argument_number < 3u);
   23|       |
   24|  3.28k|        switch (argument_number.unsafe())
   25|  3.28k|        {
   26|  2.65k|            case 0u:
  ------------------
  |  Branch (26:13): [True: 2.65k, False: 629]
  ------------------
   27|  2.65k|                m_Arg1 = argument;
   28|  2.65k|                break;
   29|    335|            case 1u:
  ------------------
  |  Branch (29:13): [True: 335, False: 2.94k]
  ------------------
   30|    335|                m_Arg2 = argument;
   31|    335|                break;
   32|    294|            case 2u:
  ------------------
  |  Branch (32:13): [True: 294, False: 2.98k]
  ------------------
   33|    294|                m_Arg3 = argument;
   34|    294|                break;
   35|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   36|      0|            default:
  ------------------
  |  Branch (36:13): [True: 0, False: 3.28k]
  ------------------
   37|      0|                PHI_ASSERT_NOT_REACHED();
   38|  3.28k|#endif
   39|  3.28k|        }
   40|  3.28k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   21|  46.5k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  166|    203|    {
  167|    203|        InstructionArgument arg;
  168|    203|        arg.m_Type                   = ArgumentType::IntRegister;
  169|    203|        arg.register_int.register_id = id;
  170|    203|        return arg;
  171|    203|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  174|    767|    {
  175|    767|        InstructionArgument arg;
  176|    767|        arg.m_Type                     = ArgumentType::FloatRegister;
  177|    767|        arg.register_float.register_id = id;
  178|    767|        return arg;
  179|    767|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  182|    207|    {
  183|    207|        InstructionArgument arg;
  184|    207|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  185|    207|        arg.immediate_value.signed_value = value;
  186|    207|        return arg;
  187|    207|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  191|    194|    {
  192|    194|        InstructionArgument arg;
  193|    194|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  194|    194|        arg.address_displacement.register_id  = id;
  195|    194|        arg.address_displacement.displacement = displacement;
  196|    194|        return arg;
  197|    194|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  200|  1.91k|    {
  201|  1.91k|        InstructionArgument arg;
  202|  1.91k|        arg.m_Type           = ArgumentType::Label;
  203|  1.91k|        arg.label.label_name = label_name;
  204|  1.91k|        return arg;
  205|  1.91k|    }

_ZN3dlx21LookUpInstructionInfoENS_6OpCodeE:
  449|  14.4k|    {
  450|  14.4k|        return instruction_table.at(static_cast<phi::size_t>(instruction));
  451|  14.4k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   21|   140k|    {
   22|   140k|        switch (token.length().unsafe())
   23|   140k|        {
   24|       |            // 1 character OpCodes
   25|  17.2k|            case 1: {
  ------------------
  |  Branch (25:13): [True: 17.2k, False: 123k]
  ------------------
   26|  17.2k|                const char c1 = token[0u];
   27|       |
   28|  17.2k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (28:21): [True: 8.19k, False: 9.10k]
  ------------------
   29|  8.19k|                {
   30|  8.19k|                    return OpCode::J;
   31|  8.19k|                }
   32|  9.10k|                break;
   33|  17.2k|            }
   34|       |
   35|       |            // 2 character OpCodes
   36|  19.9k|            case 2: {
  ------------------
  |  Branch (36:13): [True: 19.9k, False: 120k]
  ------------------
   37|  19.9k|                const char c1 = token[0u];
   38|  19.9k|                const char c2 = token[1u];
   39|       |
   40|  19.9k|                switch (c1)
  ------------------
  |  Branch (40:25): [True: 10.4k, False: 9.53k]
  ------------------
   41|  19.9k|                {
   42|    517|                    case 'J':
  ------------------
  |  Branch (42:21): [True: 517, False: 19.4k]
  ------------------
   43|    892|                    case 'j':
  ------------------
  |  Branch (43:21): [True: 375, False: 19.5k]
  ------------------
   44|    892|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (44:29): [True: 389, False: 503]
  ------------------
   45|    389|                        {
   46|    389|                            return OpCode::JR;
   47|    389|                        }
   48|    503|                        break;
   49|       |
   50|  1.63k|                    case 'L':
  ------------------
  |  Branch (50:21): [True: 1.63k, False: 18.3k]
  ------------------
   51|  2.91k|                    case 'l':
  ------------------
  |  Branch (51:21): [True: 1.28k, False: 18.6k]
  ------------------
   52|  2.91k|                        switch (c2)
  ------------------
  |  Branch (52:33): [True: 483, False: 2.43k]
  ------------------
   53|  2.91k|                        {
   54|    343|                            case 'B':
  ------------------
  |  Branch (54:29): [True: 343, False: 2.57k]
  ------------------
   55|    673|                            case 'b':
  ------------------
  |  Branch (55:29): [True: 330, False: 2.58k]
  ------------------
   56|    673|                                return OpCode::LB;
   57|    214|                            case 'D':
  ------------------
  |  Branch (57:29): [True: 214, False: 2.70k]
  ------------------
   58|    408|                            case 'd':
  ------------------
  |  Branch (58:29): [True: 194, False: 2.72k]
  ------------------
   59|    408|                                return OpCode::LD;
   60|    194|                            case 'F':
  ------------------
  |  Branch (60:29): [True: 194, False: 2.72k]
  ------------------
   61|    388|                            case 'f':
  ------------------
  |  Branch (61:29): [True: 194, False: 2.72k]
  ------------------
   62|    388|                                return OpCode::LF;
   63|    196|                            case 'H':
  ------------------
  |  Branch (63:29): [True: 196, False: 2.72k]
  ------------------
   64|    556|                            case 'h':
  ------------------
  |  Branch (64:29): [True: 360, False: 2.55k]
  ------------------
   65|    556|                                return OpCode::LH;
   66|    213|                            case 'W':
  ------------------
  |  Branch (66:29): [True: 213, False: 2.70k]
  ------------------
   67|    411|                            case 'w':
  ------------------
  |  Branch (67:29): [True: 198, False: 2.72k]
  ------------------
   68|    411|                                return OpCode::LW;
   69|  2.91k|                        }
   70|    483|                        break;
   71|    483|                    case 'O':
  ------------------
  |  Branch (71:21): [True: 319, False: 19.6k]
  ------------------
   72|    953|                    case 'o':
  ------------------
  |  Branch (72:21): [True: 634, False: 19.3k]
  ------------------
   73|    953|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (73:29): [True: 432, False: 521]
  ------------------
   74|    432|                        {
   75|    432|                            return OpCode::OR;
   76|    432|                        }
   77|    521|                        break;
   78|  3.13k|                    case 'S':
  ------------------
  |  Branch (78:21): [True: 3.13k, False: 16.8k]
  ------------------
   79|  4.76k|                    case 's':
  ------------------
  |  Branch (79:21): [True: 1.63k, False: 18.3k]
  ------------------
   80|  4.76k|                        switch (c2)
  ------------------
  |  Branch (80:33): [True: 1.25k, False: 3.51k]
  ------------------
   81|  4.76k|                        {
   82|    254|                            case 'B':
  ------------------
  |  Branch (82:29): [True: 254, False: 4.51k]
  ------------------
   83|    448|                            case 'b':
  ------------------
  |  Branch (83:29): [True: 194, False: 4.57k]
  ------------------
   84|    448|                                return OpCode::SB;
   85|  1.21k|                            case 'D':
  ------------------
  |  Branch (85:29): [True: 1.21k, False: 3.55k]
  ------------------
   86|  1.42k|                            case 'd':
  ------------------
  |  Branch (86:29): [True: 212, False: 4.55k]
  ------------------
   87|  1.42k|                                return OpCode::SD;
   88|    194|                            case 'F':
  ------------------
  |  Branch (88:29): [True: 194, False: 4.57k]
  ------------------
   89|    388|                            case 'f':
  ------------------
  |  Branch (89:29): [True: 194, False: 4.57k]
  ------------------
   90|    388|                                return OpCode::SF;
   91|    197|                            case 'H':
  ------------------
  |  Branch (91:29): [True: 197, False: 4.56k]
  ------------------
   92|    528|                            case 'h':
  ------------------
  |  Branch (92:29): [True: 331, False: 4.43k]
  ------------------
   93|    528|                                return OpCode::SH;
   94|    196|                            case 'w':
  ------------------
  |  Branch (94:29): [True: 196, False: 4.57k]
  ------------------
   95|    723|                            case 'W':
  ------------------
  |  Branch (95:29): [True: 527, False: 4.23k]
  ------------------
   96|    723|                                return OpCode::SW;
   97|  4.76k|                        }
   98|  1.25k|                        break;
   99|  19.9k|                }
  100|  13.2k|                break;
  101|  19.9k|            }
  102|       |
  103|       |            // 3 character OpCodes
  104|  32.3k|            case 3: {
  ------------------
  |  Branch (104:13): [True: 32.3k, False: 108k]
  ------------------
  105|  32.3k|                const char c1 = token[0u];
  106|  32.3k|                const char c2 = token[1u];
  107|  32.3k|                const char c3 = token[2u];
  108|       |
  109|  32.3k|                switch (c1)
  ------------------
  |  Branch (109:25): [True: 7.24k, False: 25.0k]
  ------------------
  110|  32.3k|                {
  111|  1.25k|                    case 'A':
  ------------------
  |  Branch (111:21): [True: 1.25k, False: 31.0k]
  ------------------
  112|  1.73k|                    case 'a':
  ------------------
  |  Branch (112:21): [True: 480, False: 31.8k]
  ------------------
  113|  1.73k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (113:29): [True: 621, False: 1.11k]
  |  Branch (113:29): [True: 411, False: 1.32k]
  |  Branch (113:45): [True: 411, False: 210]
  ------------------
  114|    411|                        {
  115|    411|                            return OpCode::ADD;
  116|    411|                        }
  117|  1.32k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (117:34): [True: 606, False: 715]
  |  Branch (117:34): [True: 395, False: 926]
  |  Branch (117:50): [True: 395, False: 211]
  ------------------
  118|    395|                        {
  119|    395|                            return OpCode::AND;
  120|    395|                        }
  121|    926|                        break;
  122|       |
  123|    926|                    case 'D':
  ------------------
  |  Branch (123:21): [True: 369, False: 31.9k]
  ------------------
  124|  1.40k|                    case 'd':
  ------------------
  |  Branch (124:21): [True: 1.03k, False: 31.2k]
  ------------------
  125|  1.40k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (125:29): [True: 1.01k, False: 390]
  |  Branch (125:29): [True: 650, False: 758]
  |  Branch (125:45): [True: 650, False: 368]
  ------------------
  126|    650|                        {
  127|    650|                            return OpCode::DIV;
  128|    650|                        }
  129|    758|                        break;
  130|       |
  131|    758|                    case 'E':
  ------------------
  |  Branch (131:21): [True: 350, False: 31.9k]
  ------------------
  132|  1.32k|                    case 'e':
  ------------------
  |  Branch (132:21): [True: 976, False: 31.3k]
  ------------------
  133|  1.32k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (133:29): [True: 1.11k, False: 211]
  ------------------
  134|  1.11k|                        {
  135|  1.11k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (135:33): [True: 388, False: 727]
  ------------------
  136|    388|                            {
  137|    388|                                return OpCode::EQD;
  138|    388|                            }
  139|    727|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (139:38): [True: 388, False: 339]
  ------------------
  140|    388|                            {
  141|    388|                                return OpCode::EQF;
  142|    388|                            }
  143|  1.11k|                        }
  144|    550|                        break;
  145|       |
  146|  1.90k|                    case 'G':
  ------------------
  |  Branch (146:21): [True: 1.90k, False: 30.4k]
  ------------------
  147|  2.41k|                    case 'g':
  ------------------
  |  Branch (147:21): [True: 513, False: 31.8k]
  ------------------
  148|  2.41k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (148:29): [True: 978, False: 1.43k]
  ------------------
  149|    978|                        {
  150|    978|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (150:33): [True: 389, False: 589]
  ------------------
  151|    389|                            {
  152|    389|                                return OpCode::GED;
  153|    389|                            }
  154|    589|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (154:38): [True: 388, False: 201]
  ------------------
  155|    388|                            {
  156|    388|                                return OpCode::GEF;
  157|    388|                            }
  158|    978|                        }
  159|  1.43k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (159:34): [True: 989, False: 448]
  ------------------
  160|    989|                        {
  161|    989|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (161:33): [True: 388, False: 601]
  ------------------
  162|    388|                            {
  163|    388|                                return OpCode::GTD;
  164|    388|                            }
  165|    601|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (165:33): [True: 388, False: 213]
  ------------------
  166|    388|                            {
  167|    388|                                return OpCode::GTF;
  168|    388|                            }
  169|    601|                        }
  170|    862|                        break;
  171|       |
  172|    862|                    case 'J':
  ------------------
  |  Branch (172:21): [True: 252, False: 32.0k]
  ------------------
  173|    888|                    case 'j':
  ------------------
  |  Branch (173:21): [True: 636, False: 31.7k]
  ------------------
  174|    888|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (174:29): [True: 627, False: 261]
  |  Branch (174:29): [True: 390, False: 498]
  |  Branch (174:45): [True: 390, False: 237]
  ------------------
  175|    390|                        {
  176|    390|                            return OpCode::JAL;
  177|    390|                        }
  178|    498|                        break;
  179|       |
  180|  1.88k|                    case 'L':
  ------------------
  |  Branch (180:21): [True: 1.88k, False: 30.4k]
  ------------------
  181|  4.73k|                    case 'l':
  ------------------
  |  Branch (181:21): [True: 2.84k, False: 29.4k]
  ------------------
  182|  4.73k|                        switch (c2)
  ------------------
  |  Branch (182:33): [True: 225, False: 4.50k]
  ------------------
  183|  4.73k|                        {
  184|    418|                            case 'B':
  ------------------
  |  Branch (184:29): [True: 418, False: 4.31k]
  ------------------
  185|    751|                            case 'b':
  ------------------
  |  Branch (185:29): [True: 333, False: 4.40k]
  ------------------
  186|    751|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (186:37): [True: 388, False: 363]
  ------------------
  187|    388|                                {
  188|    388|                                    return OpCode::LBU;
  189|    388|                                }
  190|    363|                                break;
  191|       |
  192|    613|                            case 'E':
  ------------------
  |  Branch (192:29): [True: 613, False: 4.12k]
  ------------------
  193|  1.02k|                            case 'e':
  ------------------
  |  Branch (193:29): [True: 412, False: 4.32k]
  ------------------
  194|  1.02k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (194:37): [True: 388, False: 637]
  ------------------
  195|    388|                                {
  196|    388|                                    return OpCode::LED;
  197|    388|                                }
  198|    637|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (198:42): [True: 388, False: 249]
  ------------------
  199|    388|                                {
  200|    388|                                    return OpCode::LEF;
  201|    388|                                }
  202|    249|                                break;
  203|       |
  204|    249|                            case 'H':
  ------------------
  |  Branch (204:29): [True: 238, False: 4.49k]
  ------------------
  205|  1.01k|                            case 'h':
  ------------------
  |  Branch (205:29): [True: 773, False: 3.96k]
  ------------------
  206|  1.01k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (206:37): [True: 388, False: 623]
  ------------------
  207|    388|                                {
  208|    388|                                    return OpCode::LHI;
  209|    388|                                }
  210|    623|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (210:42): [True: 388, False: 235]
  ------------------
  211|    388|                                {
  212|    388|                                    return OpCode::LHU;
  213|    388|                                }
  214|    235|                                break;
  215|       |
  216|    591|                            case 'T':
  ------------------
  |  Branch (216:29): [True: 591, False: 4.14k]
  ------------------
  217|    975|                            case 't':
  ------------------
  |  Branch (217:29): [True: 384, False: 4.35k]
  ------------------
  218|    975|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (218:37): [True: 388, False: 587]
  ------------------
  219|    388|                                {
  220|    388|                                    return OpCode::LTD;
  221|    388|                                }
  222|    587|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (222:42): [True: 388, False: 199]
  ------------------
  223|    388|                                {
  224|    388|                                    return OpCode::LTF;
  225|    388|                                }
  226|    199|                                break;
  227|       |
  228|    224|                            case 'W':
  ------------------
  |  Branch (228:29): [True: 224, False: 4.51k]
  ------------------
  229|    747|                            case 'w':
  ------------------
  |  Branch (229:29): [True: 523, False: 4.21k]
  ------------------
  230|    747|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (230:37): [True: 388, False: 359]
  ------------------
  231|    388|                                {
  232|    388|                                    return OpCode::LWU;
  233|    388|                                }
  234|    359|                                break;
  235|  4.73k|                        }
  236|  1.63k|                        break;
  237|       |
  238|  1.63k|                    case 'N':
  ------------------
  |  Branch (238:21): [True: 486, False: 31.8k]
  ------------------
  239|  1.81k|                    case 'n':
  ------------------
  |  Branch (239:21): [True: 1.33k, False: 31.0k]
  ------------------
  240|  1.81k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (240:29): [True: 999, False: 819]
  ------------------
  241|    999|                        {
  242|    999|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (242:33): [True: 388, False: 611]
  ------------------
  243|    388|                            {
  244|    388|                                return OpCode::NED;
  245|    388|                            }
  246|    611|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (246:38): [True: 388, False: 223]
  ------------------
  247|    388|                            {
  248|    388|                                return OpCode::NEF;
  249|    388|                            }
  250|    999|                        }
  251|    819|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (251:34): [True: 593, False: 226]
  |  Branch (251:34): [True: 388, False: 431]
  |  Branch (251:50): [True: 388, False: 205]
  ------------------
  252|    388|                        {
  253|    388|                            return OpCode::NOP;
  254|    388|                        }
  255|       |
  256|    654|                        break;
  257|       |
  258|    654|                    case 'O':
  ------------------
  |  Branch (258:21): [True: 268, False: 32.0k]
  ------------------
  259|    867|                    case 'o':
  ------------------
  |  Branch (259:21): [True: 599, False: 31.7k]
  ------------------
  260|    867|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (260:29): [True: 591, False: 276]
  |  Branch (260:29): [True: 388, False: 479]
  |  Branch (260:45): [True: 388, False: 203]
  ------------------
  261|    388|                        {
  262|    388|                            return OpCode::ORI;
  263|    388|                        }
  264|    479|                        break;
  265|       |
  266|  3.90k|                    case 'S':
  ------------------
  |  Branch (266:21): [True: 3.90k, False: 28.4k]
  ------------------
  267|  9.15k|                    case 's':
  ------------------
  |  Branch (267:21): [True: 5.25k, False: 27.0k]
  ------------------
  268|  9.15k|                        switch (c2)
  ------------------
  |  Branch (268:33): [True: 622, False: 8.53k]
  ------------------
  269|  9.15k|                        {
  270|    342|                            case 'B':
  ------------------
  |  Branch (270:29): [True: 342, False: 8.81k]
  ------------------
  271|    582|                            case 'b':
  ------------------
  |  Branch (271:29): [True: 240, False: 8.91k]
  ------------------
  272|    582|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (272:37): [True: 388, False: 194]
  ------------------
  273|    388|                                {
  274|    388|                                    return OpCode::SBU;
  275|    388|                                }
  276|    194|                                break;
  277|       |
  278|    396|                            case 'E':
  ------------------
  |  Branch (278:29): [True: 396, False: 8.76k]
  ------------------
  279|    601|                            case 'e':
  ------------------
  |  Branch (279:29): [True: 205, False: 8.95k]
  ------------------
  280|    601|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (280:37): [True: 402, False: 199]
  ------------------
  281|    402|                                {
  282|    402|                                    return OpCode::SEQ;
  283|    402|                                }
  284|    199|                                break;
  285|       |
  286|    572|                            case 'G':
  ------------------
  |  Branch (286:29): [True: 572, False: 8.58k]
  ------------------
  287|  1.15k|                            case 'g':
  ------------------
  |  Branch (287:29): [True: 579, False: 8.57k]
  ------------------
  288|  1.15k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (288:37): [True: 409, False: 742]
  ------------------
  289|    409|                                {
  290|    409|                                    return OpCode::SGE;
  291|    409|                                }
  292|    742|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (292:42): [True: 517, False: 225]
  ------------------
  293|    517|                                {
  294|    517|                                    return OpCode::SGT;
  295|    517|                                }
  296|    225|                                break;
  297|       |
  298|    238|                            case 'H':
  ------------------
  |  Branch (298:29): [True: 238, False: 8.91k]
  ------------------
  299|    590|                            case 'h':
  ------------------
  |  Branch (299:29): [True: 352, False: 8.80k]
  ------------------
  300|    590|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (300:37): [True: 388, False: 202]
  ------------------
  301|    388|                                {
  302|    388|                                    return OpCode::SHU;
  303|    388|                                }
  304|    202|                                break;
  305|       |
  306|    567|                            case 'L':
  ------------------
  |  Branch (306:29): [True: 567, False: 8.59k]
  ------------------
  307|  1.91k|                            case 'l':
  ------------------
  |  Branch (307:29): [True: 1.34k, False: 7.81k]
  ------------------
  308|  1.91k|                                switch (c3)
  ------------------
  |  Branch (308:41): [True: 211, False: 1.70k]
  ------------------
  309|  1.91k|                                {
  310|    245|                                    case 'A':
  ------------------
  |  Branch (310:37): [True: 245, False: 1.66k]
  ------------------
  311|    445|                                    case 'a':
  ------------------
  |  Branch (311:37): [True: 200, False: 1.71k]
  ------------------
  312|    445|                                        return OpCode::SLA;
  313|       |
  314|    195|                                    case 'E':
  ------------------
  |  Branch (314:37): [True: 195, False: 1.71k]
  ------------------
  315|    395|                                    case 'e':
  ------------------
  |  Branch (315:37): [True: 200, False: 1.71k]
  ------------------
  316|    395|                                        return OpCode::SLE;
  317|       |
  318|    216|                                    case 'L':
  ------------------
  |  Branch (318:37): [True: 216, False: 1.69k]
  ------------------
  319|    467|                                    case 'l':
  ------------------
  |  Branch (319:37): [True: 251, False: 1.66k]
  ------------------
  320|    467|                                        return OpCode::SLL;
  321|       |
  322|    201|                                    case 'T':
  ------------------
  |  Branch (322:37): [True: 201, False: 1.71k]
  ------------------
  323|    396|                                    case 't':
  ------------------
  |  Branch (323:37): [True: 195, False: 1.71k]
  ------------------
  324|    396|                                        return OpCode::SLT;
  325|  1.91k|                                }
  326|    211|                                break;
  327|       |
  328|    443|                            case 'N':
  ------------------
  |  Branch (328:29): [True: 443, False: 8.71k]
  ------------------
  329|  1.00k|                            case 'n':
  ------------------
  |  Branch (329:29): [True: 566, False: 8.59k]
  ------------------
  330|  1.00k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (330:37): [True: 517, False: 492]
  ------------------
  331|    517|                                {
  332|    517|                                    return OpCode::SNE;
  333|    517|                                }
  334|    492|                                break;
  335|       |
  336|    775|                            case 'R':
  ------------------
  |  Branch (336:29): [True: 775, False: 8.38k]
  ------------------
  337|  1.28k|                            case 'r':
  ------------------
  |  Branch (337:29): [True: 511, False: 8.64k]
  ------------------
  338|  1.28k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (338:37): [True: 562, False: 724]
  ------------------
  339|    562|                                {
  340|    562|                                    return OpCode::SRA;
  341|    562|                                }
  342|    724|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (342:42): [True: 511, False: 213]
  ------------------
  343|    511|                                {
  344|    511|                                    return OpCode::SRL;
  345|    511|                                }
  346|    213|                                break;
  347|       |
  348|    377|                            case 'U':
  ------------------
  |  Branch (348:29): [True: 377, False: 8.78k]
  ------------------
  349|    622|                            case 'u':
  ------------------
  |  Branch (349:29): [True: 245, False: 8.91k]
  ------------------
  350|    622|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (350:37): [True: 389, False: 233]
  ------------------
  351|    389|                                {
  352|    389|                                    return OpCode::SUB;
  353|    389|                                }
  354|    233|                                break;
  355|       |
  356|    233|                            case 'W':
  ------------------
  |  Branch (356:29): [True: 195, False: 8.96k]
  ------------------
  357|    780|                            case 'w':
  ------------------
  |  Branch (357:29): [True: 585, False: 8.57k]
  ------------------
  358|    780|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (358:37): [True: 388, False: 392]
  ------------------
  359|    388|                                {
  360|    388|                                    return OpCode::SWU;
  361|    388|                                }
  362|    392|                                break;
  363|  9.15k|                        }
  364|       |
  365|  3.41k|                    case 'X':
  ------------------
  |  Branch (365:21): [True: 428, False: 31.9k]
  ------------------
  366|  3.72k|                    case 'x':
  ------------------
  |  Branch (366:21): [True: 316, False: 32.0k]
  ------------------
  367|  3.72k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (367:29): [True: 729, False: 2.99k]
  |  Branch (367:29): [True: 518, False: 3.20k]
  |  Branch (367:45): [True: 518, False: 211]
  ------------------
  368|    518|                        {
  369|    518|                            return OpCode::XOR;
  370|    518|                        }
  371|  3.20k|                        break;
  372|  32.3k|                }
  373|  16.8k|                break;
  374|  32.3k|            }
  375|       |
  376|       |            // 4 character OpCodes
  377|  37.0k|            case 4: {
  ------------------
  |  Branch (377:13): [True: 37.0k, False: 103k]
  ------------------
  378|  37.0k|                const char c1 = token[0u];
  379|  37.0k|                const char c2 = token[1u];
  380|  37.0k|                const char c3 = token[2u];
  381|  37.0k|                const char c4 = token[3u];
  382|       |
  383|  37.0k|                switch (c1)
  ------------------
  |  Branch (383:25): [True: 4.99k, False: 32.0k]
  ------------------
  384|  37.0k|                {
  385|  2.14k|                    case 'A':
  ------------------
  |  Branch (385:21): [True: 2.14k, False: 34.9k]
  ------------------
  386|  3.41k|                    case 'a':
  ------------------
  |  Branch (386:21): [True: 1.27k, False: 35.8k]
  ------------------
  387|  3.41k|                        switch (c2)
  ------------------
  |  Branch (387:33): [True: 204, False: 3.21k]
  ------------------
  388|  3.41k|                        {
  389|    879|                            case 'D':
  ------------------
  |  Branch (389:29): [True: 879, False: 2.53k]
  ------------------
  390|  2.21k|                            case 'd':
  ------------------
  |  Branch (390:29): [True: 1.33k, False: 2.07k]
  ------------------
  391|  2.21k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (391:37): [True: 2.01k, False: 197]
  ------------------
  392|  2.01k|                                {
  393|  2.01k|                                    switch (c4)
  ------------------
  |  Branch (393:45): [True: 197, False: 1.82k]
  ------------------
  394|  2.01k|                                    {
  395|    446|                                        case 'D':
  ------------------
  |  Branch (395:41): [True: 446, False: 1.57k]
  ------------------
  396|    650|                                        case 'd':
  ------------------
  |  Branch (396:41): [True: 204, False: 1.81k]
  ------------------
  397|    650|                                            return OpCode::ADDD;
  398|       |
  399|    194|                                        case 'F':
  ------------------
  |  Branch (399:41): [True: 194, False: 1.82k]
  ------------------
  400|    391|                                        case 'f':
  ------------------
  |  Branch (400:41): [True: 197, False: 1.82k]
  ------------------
  401|    391|                                            return OpCode::ADDF;
  402|       |
  403|    194|                                        case 'I':
  ------------------
  |  Branch (403:41): [True: 194, False: 1.82k]
  ------------------
  404|    388|                                        case 'i':
  ------------------
  |  Branch (404:41): [True: 194, False: 1.82k]
  ------------------
  405|    388|                                            return OpCode::ADDI;
  406|       |
  407|    197|                                        case 'U':
  ------------------
  |  Branch (407:41): [True: 197, False: 1.82k]
  ------------------
  408|    393|                                        case 'u':
  ------------------
  |  Branch (408:41): [True: 196, False: 1.82k]
  ------------------
  409|    393|                                            return OpCode::ADDU;
  410|  2.01k|                                    }
  411|  2.01k|                                }
  412|    394|                                break;
  413|       |
  414|    394|                            case 'N':
  ------------------
  |  Branch (414:29): [True: 198, False: 3.21k]
  ------------------
  415|    995|                            case 'n':
  ------------------
  |  Branch (415:29): [True: 797, False: 2.61k]
  ------------------
  416|    995|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (416:37): [True: 789, False: 206]
  |  Branch (416:37): [True: 389, False: 606]
  |  Branch (416:53): [True: 389, False: 400]
  ------------------
  417|    389|                                {
  418|    389|                                    return OpCode::ANDI;
  419|    389|                                }
  420|       |
  421|    606|                                break;
  422|  3.41k|                        }
  423|  1.20k|                        break;
  424|       |
  425|  1.32k|                    case 'B':
  ------------------
  |  Branch (425:21): [True: 1.32k, False: 35.7k]
  ------------------
  426|  3.28k|                    case 'b':
  ------------------
  |  Branch (426:21): [True: 1.95k, False: 35.1k]
  ------------------
  427|  3.28k|                        switch (c2)
  ------------------
  |  Branch (427:33): [True: 218, False: 3.06k]
  ------------------
  428|  3.28k|                        {
  429|    385|                            case 'E':
  ------------------
  |  Branch (429:29): [True: 385, False: 2.90k]
  ------------------
  430|    777|                            case 'e':
  ------------------
  |  Branch (430:29): [True: 392, False: 2.89k]
  ------------------
  431|    777|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (431:37): [True: 583, False: 194]
  |  Branch (431:37): [True: 388, False: 389]
  |  Branch (431:53): [True: 388, False: 195]
  ------------------
  432|    388|                                {
  433|    388|                                    return OpCode::BEQZ;
  434|    388|                                }
  435|    389|                                break;
  436|       |
  437|    389|                            case 'F':
  ------------------
  |  Branch (437:29): [True: 254, False: 3.03k]
  ------------------
  438|  1.17k|                            case 'f':
  ------------------
  |  Branch (438:29): [True: 919, False: 2.36k]
  ------------------
  439|  1.17k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (439:37): [True: 979, False: 194]
  ------------------
  440|    979|                                {
  441|    979|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (441:41): [True: 389, False: 590]
  ------------------
  442|    389|                                    {
  443|    389|                                        return OpCode::BFPF;
  444|    389|                                    }
  445|    590|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (445:46): [True: 388, False: 202]
  ------------------
  446|    388|                                    {
  447|    388|                                        return OpCode::BFPT;
  448|    388|                                    }
  449|    979|                                }
  450|    396|                                break;
  451|       |
  452|    396|                            case 'N':
  ------------------
  |  Branch (452:29): [True: 202, False: 3.08k]
  ------------------
  453|  1.11k|                            case 'n':
  ------------------
  |  Branch (453:29): [True: 915, False: 2.37k]
  ------------------
  454|  1.11k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (454:37): [True: 778, False: 339]
  |  Branch (454:37): [True: 388, False: 729]
  |  Branch (454:53): [True: 388, False: 390]
  ------------------
  455|    388|                                {
  456|    388|                                    return OpCode::BNEZ;
  457|    388|                                }
  458|  3.28k|                        }
  459|  1.73k|                        break;
  460|       |
  461|  1.73k|                    case 'D':
  ------------------
  |  Branch (461:21): [True: 377, False: 36.7k]
  ------------------
  462|  2.55k|                    case 'd':
  ------------------
  |  Branch (462:21): [True: 2.18k, False: 34.9k]
  ------------------
  463|  2.55k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (463:29): [True: 2.34k, False: 216]
  |  Branch (463:29): [True: 1.88k, False: 679]
  |  Branch (463:45): [True: 1.88k, False: 463]
  ------------------
  464|  1.88k|                        {
  465|  1.88k|                            switch (c4)
  ------------------
  |  Branch (465:37): [True: 196, False: 1.68k]
  ------------------
  466|  1.88k|                            {
  467|    194|                                case 'D':
  ------------------
  |  Branch (467:33): [True: 194, False: 1.68k]
  ------------------
  468|    388|                                case 'd':
  ------------------
  |  Branch (468:33): [True: 194, False: 1.68k]
  ------------------
  469|    388|                                    return OpCode::DIVD;
  470|       |
  471|    194|                                case 'F':
  ------------------
  |  Branch (471:33): [True: 194, False: 1.68k]
  ------------------
  472|    389|                                case 'f':
  ------------------
  |  Branch (472:33): [True: 195, False: 1.68k]
  ------------------
  473|    389|                                    return OpCode::DIVF;
  474|       |
  475|    194|                                case 'I':
  ------------------
  |  Branch (475:33): [True: 194, False: 1.68k]
  ------------------
  476|    388|                                case 'i':
  ------------------
  |  Branch (476:33): [True: 194, False: 1.68k]
  ------------------
  477|    388|                                    return OpCode::DIVI;
  478|       |
  479|    195|                                case 'U':
  ------------------
  |  Branch (479:33): [True: 195, False: 1.68k]
  ------------------
  480|    519|                                case 'u':
  ------------------
  |  Branch (480:33): [True: 324, False: 1.55k]
  ------------------
  481|    519|                                    return OpCode::DIVU;
  482|  1.88k|                            }
  483|  1.88k|                        }
  484|    875|                        break;
  485|       |
  486|    875|                    case 'H':
  ------------------
  |  Branch (486:21): [True: 206, False: 36.8k]
  ------------------
  487|    979|                    case 'h':
  ------------------
  |  Branch (487:21): [True: 773, False: 36.3k]
  ------------------
  488|    979|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (488:29): [True: 785, False: 194]
  |  Branch (488:29): [True: 388, False: 591]
  |  Branch (488:45): [True: 591, False: 194]
  |  Branch (488:61): [True: 388, False: 203]
  ------------------
  489|    388|                        {
  490|    388|                            return OpCode::HALT;
  491|    388|                        }
  492|    591|                        break;
  493|       |
  494|    591|                    case 'J':
  ------------------
  |  Branch (494:21): [True: 327, False: 36.7k]
  ------------------
  495|  1.31k|                    case 'j':
  ------------------
  |  Branch (495:21): [True: 990, False: 36.1k]
  ------------------
  496|  1.31k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (496:29): [True: 989, False: 328]
  |  Branch (496:29): [True: 388, False: 929]
  |  Branch (496:45): [True: 777, False: 212]
  |  Branch (496:61): [True: 388, False: 389]
  ------------------
  497|    388|                        {
  498|    388|                            return OpCode::JALR;
  499|    388|                        }
  500|    929|                        break;
  501|       |
  502|    929|                    case 'M':
  ------------------
  |  Branch (502:21): [True: 235, False: 36.8k]
  ------------------
  503|  2.42k|                    case 'm':
  ------------------
  |  Branch (503:21): [True: 2.19k, False: 34.9k]
  ------------------
  504|  2.42k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (504:29): [True: 1.40k, False: 1.02k]
  |  Branch (504:29): [True: 1.17k, False: 1.24k]
  |  Branch (504:45): [True: 1.17k, False: 225]
  ------------------
  505|  1.17k|                        {
  506|  1.17k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (506:33): [True: 388, False: 789]
  ------------------
  507|    388|                            {
  508|    388|                                return OpCode::MOVD;
  509|    388|                            }
  510|    789|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (510:38): [True: 388, False: 401]
  ------------------
  511|    388|                            {
  512|    388|                                return OpCode::MOVF;
  513|    388|                            }
  514|  1.17k|                        }
  515|  1.24k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (515:34): [True: 952, False: 296]
  |  Branch (515:34): [True: 402, False: 846]
  |  Branch (515:50): [True: 608, False: 344]
  |  Branch (515:66): [True: 402, False: 206]
  ------------------
  516|    402|                        {
  517|    402|                            return OpCode::MULT;
  518|    402|                        }
  519|  1.24k|                        break;
  520|       |
  521|  7.77k|                    case 'S':
  ------------------
  |  Branch (521:21): [True: 7.77k, False: 29.3k]
  ------------------
  522|  15.5k|                    case 's':
  ------------------
  |  Branch (522:21): [True: 7.76k, False: 29.3k]
  ------------------
  523|  15.5k|                        switch (c2)
  ------------------
  |  Branch (523:33): [True: 535, False: 15.0k]
  ------------------
  524|  15.5k|                        {
  525|  3.04k|                            case 'E':
  ------------------
  |  Branch (525:29): [True: 3.04k, False: 12.4k]
  ------------------
  526|  3.25k|                            case 'e':
  ------------------
  |  Branch (526:29): [True: 210, False: 15.3k]
  ------------------
  527|  3.25k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (527:37): [True: 3.05k, False: 206]
  ------------------
  528|  3.05k|                                {
  529|  3.05k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (529:41): [True: 394, False: 2.65k]
  ------------------
  530|    394|                                    {
  531|    394|                                        return OpCode::SEQI;
  532|    394|                                    }
  533|  2.65k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (533:46): [True: 442, False: 2.21k]
  ------------------
  534|    442|                                    {
  535|    442|                                        return OpCode::SEQU;
  536|    442|                                    }
  537|  3.05k|                                }
  538|  2.42k|                                break;
  539|       |
  540|  2.42k|                            case 'G':
  ------------------
  |  Branch (540:29): [True: 843, False: 14.6k]
  ------------------
  541|  2.54k|                            case 'g':
  ------------------
  |  Branch (541:29): [True: 1.70k, False: 13.8k]
  ------------------
  542|  2.54k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (542:37): [True: 1.15k, False: 1.39k]
  ------------------
  543|  1.15k|                                {
  544|  1.15k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (544:41): [True: 388, False: 770]
  ------------------
  545|    388|                                    {
  546|    388|                                        return OpCode::SGEI;
  547|    388|                                    }
  548|    770|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (548:46): [True: 545, False: 225]
  ------------------
  549|    545|                                    {
  550|    545|                                        return OpCode::SGEU;
  551|    545|                                    }
  552|  1.15k|                                }
  553|  1.39k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (553:42): [True: 1.18k, False: 205]
  ------------------
  554|  1.18k|                                {
  555|  1.18k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (555:41): [True: 388, False: 798]
  ------------------
  556|    388|                                    {
  557|    388|                                        return OpCode::SGTI;
  558|    388|                                    }
  559|    798|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (559:46): [True: 530, False: 268]
  ------------------
  560|    530|                                    {
  561|    530|                                        return OpCode::SGTU;
  562|    530|                                    }
  563|  1.18k|                                }
  564|    698|                                break;
  565|       |
  566|  1.03k|                            case 'L':
  ------------------
  |  Branch (566:29): [True: 1.03k, False: 14.5k]
  ------------------
  567|  3.85k|                            case 'l':
  ------------------
  |  Branch (567:29): [True: 2.82k, False: 12.7k]
  ------------------
  568|  3.85k|                                switch (c3)
  ------------------
  |  Branch (568:41): [True: 204, False: 3.65k]
  ------------------
  569|  3.85k|                                {
  570|    408|                                    case 'A':
  ------------------
  |  Branch (570:37): [True: 408, False: 3.45k]
  ------------------
  571|    693|                                    case 'a':
  ------------------
  |  Branch (571:37): [True: 285, False: 3.57k]
  ------------------
  572|    693|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (572:45): [True: 388, False: 305]
  ------------------
  573|    388|                                        {
  574|    388|                                            return OpCode::SLAI;
  575|    388|                                        }
  576|    305|                                        break;
  577|       |
  578|    765|                                    case 'E':
  ------------------
  |  Branch (578:37): [True: 765, False: 3.09k]
  ------------------
  579|  1.02k|                                    case 'e':
  ------------------
  |  Branch (579:37): [True: 263, False: 3.59k]
  ------------------
  580|  1.02k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (580:45): [True: 388, False: 640]
  ------------------
  581|    388|                                        {
  582|    388|                                            return OpCode::SLEI;
  583|    388|                                        }
  584|    640|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (584:50): [True: 391, False: 249]
  ------------------
  585|    391|                                        {
  586|    391|                                            return OpCode::SLEU;
  587|    391|                                        }
  588|    249|                                        break;
  589|       |
  590|    249|                                    case 'L':
  ------------------
  |  Branch (590:37): [True: 246, False: 3.61k]
  ------------------
  591|    600|                                    case 'l':
  ------------------
  |  Branch (591:37): [True: 354, False: 3.50k]
  ------------------
  592|    600|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (592:45): [True: 388, False: 212]
  ------------------
  593|    388|                                        {
  594|    388|                                            return OpCode::SLLI;
  595|    388|                                        }
  596|    212|                                        break;
  597|       |
  598|    791|                                    case 'T':
  ------------------
  |  Branch (598:37): [True: 791, False: 3.06k]
  ------------------
  599|  1.33k|                                    case 't':
  ------------------
  |  Branch (599:37): [True: 542, False: 3.31k]
  ------------------
  600|  1.33k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (600:45): [True: 388, False: 945]
  ------------------
  601|    388|                                        {
  602|    388|                                            return OpCode::SLTI;
  603|    388|                                        }
  604|    945|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (604:50): [True: 388, False: 557]
  ------------------
  605|    388|                                        {
  606|    388|                                            return OpCode::SLTU;
  607|    388|                                        }
  608|    557|                                        break;
  609|  3.85k|                                }
  610|       |
  611|  1.90k|                            case 'N':
  ------------------
  |  Branch (611:29): [True: 373, False: 15.1k]
  ------------------
  612|  3.23k|                            case 'n':
  ------------------
  |  Branch (612:29): [True: 1.33k, False: 14.2k]
  ------------------
  613|  3.23k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (613:37): [True: 1.55k, False: 1.67k]
  ------------------
  614|  1.55k|                                {
  615|  1.55k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (615:41): [True: 388, False: 1.16k]
  ------------------
  616|    388|                                    {
  617|    388|                                        return OpCode::SNEI;
  618|    388|                                    }
  619|  1.16k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (619:46): [True: 412, False: 752]
  ------------------
  620|    412|                                    {
  621|    412|                                        return OpCode::SNEU;
  622|    412|                                    }
  623|  1.55k|                                }
  624|  2.43k|                                break;
  625|       |
  626|  2.43k|                            case 'R':
  ------------------
  |  Branch (626:29): [True: 769, False: 14.7k]
  ------------------
  627|  1.55k|                            case 'r':
  ------------------
  |  Branch (627:29): [True: 787, False: 14.7k]
  ------------------
  628|  1.55k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (628:37): [True: 777, False: 779]
  |  Branch (628:37): [True: 388, False: 1.16k]
  |  Branch (628:53): [True: 388, False: 389]
  ------------------
  629|    388|                                {
  630|    388|                                    return OpCode::SRAI;
  631|    388|                                }
  632|  1.16k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (632:42): [True: 779, False: 389]
  |  Branch (632:42): [True: 388, False: 780]
  |  Branch (632:58): [True: 388, False: 391]
  ------------------
  633|    388|                                {
  634|    388|                                    return OpCode::SRLI;
  635|    388|                                }
  636|    780|                                break;
  637|       |
  638|    780|                            case 'U':
  ------------------
  |  Branch (638:29): [True: 739, False: 14.7k]
  ------------------
  639|  2.07k|                            case 'u':
  ------------------
  |  Branch (639:29): [True: 1.34k, False: 14.1k]
  ------------------
  640|  2.07k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (640:37): [True: 1.75k, False: 320]
  ------------------
  641|  1.75k|                                {
  642|  1.75k|                                    switch (c4)
  ------------------
  |  Branch (642:45): [True: 203, False: 1.55k]
  ------------------
  643|  1.75k|                                    {
  644|    194|                                        case 'D':
  ------------------
  |  Branch (644:41): [True: 194, False: 1.56k]
  ------------------
  645|    390|                                        case 'd':
  ------------------
  |  Branch (645:41): [True: 196, False: 1.56k]
  ------------------
  646|    390|                                            return OpCode::SUBD;
  647|       |
  648|    194|                                        case 'F':
  ------------------
  |  Branch (648:41): [True: 194, False: 1.56k]
  ------------------
  649|    388|                                        case 'f':
  ------------------
  |  Branch (649:41): [True: 194, False: 1.56k]
  ------------------
  650|    388|                                            return OpCode::SUBF;
  651|       |
  652|    194|                                        case 'I':
  ------------------
  |  Branch (652:41): [True: 194, False: 1.56k]
  ------------------
  653|    388|                                        case 'i':
  ------------------
  |  Branch (653:41): [True: 194, False: 1.56k]
  ------------------
  654|    388|                                            return OpCode::SUBI;
  655|       |
  656|    195|                                        case 'U':
  ------------------
  |  Branch (656:41): [True: 195, False: 1.56k]
  ------------------
  657|    390|                                        case 'u':
  ------------------
  |  Branch (657:41): [True: 195, False: 1.56k]
  ------------------
  658|    390|                                            return OpCode::SUBU;
  659|  1.75k|                                    }
  660|  1.75k|                                }
  661|    523|                                break;
  662|  15.5k|                        }
  663|  7.38k|                        break;
  664|       |
  665|  7.38k|                    case 'T':
  ------------------
  |  Branch (665:21): [True: 197, False: 36.8k]
  ------------------
  666|  1.23k|                    case 't':
  ------------------
  |  Branch (666:21): [True: 1.03k, False: 36.0k]
  ------------------
  667|  1.23k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (667:29): [True: 1.03k, False: 196]
  |  Branch (667:29): [True: 388, False: 843]
  |  Branch (667:45): [True: 838, False: 197]
  |  Branch (667:61): [True: 388, False: 450]
  ------------------
  668|    388|                        {
  669|    388|                            return OpCode::TRAP;
  670|    388|                        }
  671|    843|                        break;
  672|    843|                    case 'X':
  ------------------
  |  Branch (672:21): [True: 604, False: 36.4k]
  ------------------
  673|  1.34k|                    case 'x':
  ------------------
  |  Branch (673:21): [True: 744, False: 36.3k]
  ------------------
  674|  1.34k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (674:29): [True: 1.15k, False: 197]
  |  Branch (674:29): [True: 388, False: 960]
  |  Branch (674:45): [True: 899, False: 252]
  |  Branch (674:61): [True: 388, False: 511]
  ------------------
  675|    388|                        {
  676|    388|                            return OpCode::XORI;
  677|    388|                        }
  678|    960|                        break;
  679|  37.0k|                }
  680|  20.7k|                break;
  681|  37.0k|            }
  682|       |
  683|       |            // 5 character OpCodes
  684|  20.7k|            case 5: {
  ------------------
  |  Branch (684:13): [True: 18.5k, False: 122k]
  ------------------
  685|  18.5k|                const char c1 = token[0u];
  686|  18.5k|                const char c2 = token[1u];
  687|  18.5k|                const char c3 = token[2u];
  688|  18.5k|                const char c4 = token[3u];
  689|  18.5k|                const char c5 = token[4u];
  690|       |
  691|  18.5k|                switch (c1)
  ------------------
  |  Branch (691:25): [True: 2.66k, False: 15.8k]
  ------------------
  692|  18.5k|                {
  693|    632|                    case 'A':
  ------------------
  |  Branch (693:21): [True: 632, False: 17.8k]
  ------------------
  694|  1.64k|                    case 'a':
  ------------------
  |  Branch (694:21): [True: 1.01k, False: 17.4k]
  ------------------
  695|  1.64k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (695:29): [True: 1.41k, False: 229]
  |  Branch (695:29): [True: 388, False: 1.25k]
  |  Branch (695:45): [True: 1.21k, False: 194]
  |  Branch (695:61): [True: 829, False: 390]
  |  Branch (695:77): [True: 388, False: 441]
  ------------------
  696|    388|                        {
  697|    388|                            return OpCode::ADDUI;
  698|    388|                        }
  699|  1.25k|                        break;
  700|       |
  701|  1.25k|                    case 'D':
  ------------------
  |  Branch (701:21): [True: 468, False: 18.0k]
  ------------------
  702|  2.02k|                    case 'd':
  ------------------
  |  Branch (702:21): [True: 1.55k, False: 16.9k]
  ------------------
  703|  2.02k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (703:29): [True: 1.56k, False: 457]
  |  Branch (703:29): [True: 388, False: 1.63k]
  |  Branch (703:45): [True: 1.31k, False: 245]
  |  Branch (703:61): [True: 905, False: 414]
  |  Branch (703:77): [True: 388, False: 517]
  ------------------
  704|    388|                        {
  705|    388|                            return OpCode::DIVUI;
  706|    388|                        }
  707|  1.63k|                        break;
  708|       |
  709|  1.63k|                    case 'M':
  ------------------
  |  Branch (709:21): [True: 576, False: 17.9k]
  ------------------
  710|  3.54k|                    case 'm':
  ------------------
  |  Branch (710:21): [True: 2.97k, False: 15.5k]
  ------------------
  711|  3.54k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (711:29): [True: 2.64k, False: 902]
  |  Branch (711:29): [True: 2.00k, False: 1.54k]
  |  Branch (711:45): [True: 2.28k, False: 362]
  |  Branch (711:61): [True: 2.00k, False: 278]
  ------------------
  712|  2.00k|                        {
  713|  2.00k|                            switch (c5)
  ------------------
  |  Branch (713:37): [True: 341, False: 1.66k]
  ------------------
  714|  2.00k|                            {
  715|    194|                                case 'D':
  ------------------
  |  Branch (715:33): [True: 194, False: 1.81k]
  ------------------
  716|    388|                                case 'd':
  ------------------
  |  Branch (716:33): [True: 194, False: 1.81k]
  ------------------
  717|    388|                                    return OpCode::MULTD;
  718|       |
  719|    194|                                case 'F':
  ------------------
  |  Branch (719:33): [True: 194, False: 1.81k]
  ------------------
  720|    388|                                case 'f':
  ------------------
  |  Branch (720:33): [True: 194, False: 1.81k]
  ------------------
  721|    388|                                    return OpCode::MULTF;
  722|       |
  723|    194|                                case 'I':
  ------------------
  |  Branch (723:33): [True: 194, False: 1.81k]
  ------------------
  724|    388|                                case 'i':
  ------------------
  |  Branch (724:33): [True: 194, False: 1.81k]
  ------------------
  725|    388|                                    return OpCode::MULTI;
  726|       |
  727|    194|                                case 'U':
  ------------------
  |  Branch (727:33): [True: 194, False: 1.81k]
  ------------------
  728|    499|                                case 'u':
  ------------------
  |  Branch (728:33): [True: 305, False: 1.69k]
  ------------------
  729|    499|                                    return OpCode::MULTU;
  730|  2.00k|                            }
  731|  2.00k|                        }
  732|  1.88k|                        break;
  733|       |
  734|  3.90k|                    case 'S':
  ------------------
  |  Branch (734:21): [True: 3.90k, False: 14.5k]
  ------------------
  735|  8.62k|                    case 's':
  ------------------
  |  Branch (735:21): [True: 4.72k, False: 13.7k]
  ------------------
  736|  8.62k|                        switch (c2)
  ------------------
  |  Branch (736:33): [True: 217, False: 8.41k]
  ------------------
  737|  8.62k|                        {
  738|  1.64k|                            case 'E':
  ------------------
  |  Branch (738:29): [True: 1.64k, False: 6.98k]
  ------------------
  739|  1.86k|                            case 'e':
  ------------------
  |  Branch (739:29): [True: 226, False: 8.40k]
  ------------------
  740|  1.86k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (740:37): [True: 1.67k, False: 196]
  |  Branch (740:37): [True: 516, False: 1.35k]
  |  Branch (740:53): [True: 1.05k, False: 614]
  |  Branch (740:69): [True: 516, False: 541]
  ------------------
  741|    516|                                {
  742|    516|                                    return OpCode::SEQUI;
  743|    516|                                }
  744|  1.35k|                                break;
  745|       |
  746|  1.35k|                            case 'G':
  ------------------
  |  Branch (746:29): [True: 623, False: 8.00k]
  ------------------
  747|  1.86k|                            case 'g':
  ------------------
  |  Branch (747:29): [True: 1.24k, False: 7.38k]
  ------------------
  748|  1.86k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (748:37): [True: 877, False: 987]
  |  Branch (748:37): [True: 388, False: 1.47k]
  |  Branch (748:53): [True: 600, False: 277]
  |  Branch (748:69): [True: 388, False: 212]
  ------------------
  749|    388|                                {
  750|    388|                                    return OpCode::SGEUI;
  751|    388|                                }
  752|  1.47k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (752:42): [True: 984, False: 492]
  |  Branch (752:42): [True: 388, False: 1.08k]
  |  Branch (752:58): [True: 789, False: 195]
  |  Branch (752:74): [True: 388, False: 401]
  ------------------
  753|    388|                                {
  754|    388|                                    return OpCode::SGTUI;
  755|    388|                                }
  756|  1.08k|                                break;
  757|       |
  758|  1.08k|                            case 'L':
  ------------------
  |  Branch (758:29): [True: 555, False: 8.07k]
  ------------------
  759|  2.19k|                            case 'l':
  ------------------
  |  Branch (759:29): [True: 1.63k, False: 6.99k]
  ------------------
  760|  2.19k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (760:37): [True: 1.00k, False: 1.18k]
  |  Branch (760:37): [True: 388, False: 1.80k]
  |  Branch (760:53): [True: 780, False: 221]
  |  Branch (760:69): [True: 388, False: 392]
  ------------------
  761|    388|                                {
  762|    388|                                    return OpCode::SLEUI;
  763|    388|                                }
  764|  1.80k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (764:42): [True: 1.01k, False: 783]
  |  Branch (764:42): [True: 388, False: 1.41k]
  |  Branch (764:58): [True: 775, False: 244]
  |  Branch (764:74): [True: 388, False: 387]
  ------------------
  765|    388|                                {
  766|    388|                                    return OpCode::SLTUI;
  767|    388|                                }
  768|  1.41k|                                break;
  769|       |
  770|  1.41k|                            case 'N':
  ------------------
  |  Branch (770:29): [True: 203, False: 8.42k]
  ------------------
  771|  1.29k|                            case 'n':
  ------------------
  |  Branch (771:29): [True: 1.09k, False: 7.53k]
  ------------------
  772|  1.29k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (772:37): [True: 1.07k, False: 226]
  |  Branch (772:37): [True: 388, False: 908]
  |  Branch (772:53): [True: 777, False: 293]
  |  Branch (772:69): [True: 388, False: 389]
  ------------------
  773|    388|                                {
  774|    388|                                    return OpCode::SNEUI;
  775|    388|                                }
  776|    908|                                break;
  777|       |
  778|    908|                            case 'U':
  ------------------
  |  Branch (778:29): [True: 409, False: 8.22k]
  ------------------
  779|  1.19k|                            case 'u':
  ------------------
  |  Branch (779:29): [True: 786, False: 7.84k]
  ------------------
  780|  1.19k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (780:37): [True: 998, False: 197]
  |  Branch (780:37): [True: 432, False: 763]
  |  Branch (780:53): [True: 747, False: 251]
  |  Branch (780:69): [True: 432, False: 315]
  ------------------
  781|    432|                                {
  782|    432|                                    return OpCode::SUBUI;
  783|    432|                                }
  784|    763|                                break;
  785|  8.62k|                        }
  786|       |
  787|  5.74k|                        break;
  788|  18.5k|                }
  789|       |
  790|  13.1k|                break;
  791|  18.5k|            }
  792|       |
  793|       |            // 6 character OpCodes
  794|  13.1k|            case 6: {
  ------------------
  |  Branch (794:13): [True: 8.65k, False: 132k]
  ------------------
  795|  8.65k|                const char c1 = token[0u];
  796|  8.65k|                const char c2 = token[1u];
  797|  8.65k|                const char c3 = token[2u];
  798|  8.65k|                const char c4 = token[3u];
  799|  8.65k|                const char c5 = token[4u];
  800|  8.65k|                const char c6 = token[5u];
  801|       |
  802|  8.65k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (802:21): [True: 4.70k, False: 3.94k]
  |  Branch (802:21): [True: 4.11k, False: 4.53k]
  |  Branch (802:37): [True: 4.51k, False: 195]
  |  Branch (802:53): [True: 4.11k, False: 398]
  ------------------
  803|  4.11k|                {
  804|  4.11k|                    switch (c4)
  ------------------
  |  Branch (804:29): [True: 283, False: 3.83k]
  ------------------
  805|  4.11k|                    {
  806|    716|                        case 'D':
  ------------------
  |  Branch (806:25): [True: 716, False: 3.39k]
  ------------------
  807|  1.30k|                        case 'd':
  ------------------
  |  Branch (807:25): [True: 587, False: 3.52k]
  ------------------
  808|  1.30k|                            if (c5 == '2')
  ------------------
  |  Branch (808:33): [True: 1.09k, False: 205]
  ------------------
  809|  1.09k|                            {
  810|  1.09k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (810:37): [True: 516, False: 582]
  ------------------
  811|    516|                                {
  812|    516|                                    return OpCode::CVTD2F;
  813|    516|                                }
  814|    582|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (814:42): [True: 388, False: 194]
  ------------------
  815|    388|                                {
  816|    388|                                    return OpCode::CVTD2I;
  817|    388|                                }
  818|  1.09k|                            }
  819|    399|                            break;
  820|       |
  821|    399|                        case 'F':
  ------------------
  |  Branch (821:25): [True: 221, False: 3.89k]
  ------------------
  822|  1.18k|                        case 'f':
  ------------------
  |  Branch (822:25): [True: 959, False: 3.15k]
  ------------------
  823|  1.18k|                            if (c5 == '2')
  ------------------
  |  Branch (823:33): [True: 970, False: 210]
  ------------------
  824|    970|                            {
  825|    970|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (825:37): [True: 388, False: 582]
  ------------------
  826|    388|                                {
  827|    388|                                    return OpCode::CVTF2D;
  828|    388|                                }
  829|    582|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (829:42): [True: 388, False: 194]
  ------------------
  830|    388|                                {
  831|    388|                                    return OpCode::CVTF2I;
  832|    388|                                }
  833|    970|                            }
  834|    404|                            break;
  835|       |
  836|  1.15k|                        case 'I':
  ------------------
  |  Branch (836:25): [True: 1.15k, False: 2.96k]
  ------------------
  837|  1.34k|                        case 'i':
  ------------------
  |  Branch (837:25): [True: 194, False: 3.92k]
  ------------------
  838|  1.34k|                            if (c5 == '2')
  ------------------
  |  Branch (838:33): [True: 970, False: 378]
  ------------------
  839|    970|                            {
  840|    970|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (840:37): [True: 388, False: 582]
  ------------------
  841|    388|                                {
  842|    388|                                    return OpCode::CVTI2D;
  843|    388|                                }
  844|    582|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (844:42): [True: 388, False: 194]
  ------------------
  845|    388|                                {
  846|    388|                                    return OpCode::CVTI2F;
  847|    388|                                }
  848|    970|                            }
  849|  4.11k|                    }
  850|  4.11k|                }
  851|  4.53k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (851:26): [True: 2.39k, False: 2.14k]
  |  Branch (851:26): [True: 388, False: 4.15k]
  |  Branch (851:42): [True: 1.34k, False: 1.05k]
  |  Branch (851:58): [True: 1.15k, False: 195]
  |  Branch (851:74): [True: 926, False: 226]
  ------------------
  852|  4.53k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (852:26): [True: 699, False: 227]
  |  Branch (852:42): [True: 388, False: 311]
  ------------------
  853|    388|                {
  854|    388|                    return OpCode::MULTUI;
  855|    388|                }
  856|  5.80k|                break;
  857|  8.65k|            }
  858|       |
  859|       |            // 7 character OpCodes
  860|  5.80k|            case 7: {
  ------------------
  |  Branch (860:13): [True: 4.73k, False: 136k]
  ------------------
  861|  4.73k|                const char c1 = token[0u];
  862|  4.73k|                const char c2 = token[1u];
  863|  4.73k|                const char c3 = token[2u];
  864|  4.73k|                const char c4 = token[3u];
  865|  4.73k|                const char c5 = token[4u];
  866|  4.73k|                const char c6 = token[5u];
  867|  4.73k|                const char c7 = token[6u];
  868|       |
  869|  4.73k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (869:21): [True: 3.14k, False: 1.58k]
  |  Branch (869:21): [True: 2.11k, False: 2.61k]
  |  Branch (869:37): [True: 2.69k, False: 452]
  |  Branch (869:53): [True: 2.11k, False: 578]
  ------------------
  870|  2.11k|                {
  871|  2.11k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (871:25): [True: 1.10k, False: 1.01k]
  |  Branch (871:25): [True: 388, False: 1.72k]
  |  Branch (871:41): [True: 780, False: 322]
  |  Branch (871:54): [True: 585, False: 195]
  |  Branch (871:70): [True: 388, False: 197]
  ------------------
  872|    388|                    {
  873|    388|                        return OpCode::MOVI2FP;
  874|    388|                    }
  875|  1.72k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (875:25): [True: 1.00k, False: 724]
  |  Branch (875:25): [True: 388, False: 1.33k]
  |  Branch (875:41): [True: 781, False: 221]
  |  Branch (875:57): [True: 584, False: 197]
  |  Branch (875:70): [True: 388, False: 196]
  ------------------
  876|    388|                    {
  877|    388|                        return OpCode::MOVFP2I;
  878|    388|                    }
  879|  1.72k|                }
  880|  3.95k|                break;
  881|  4.73k|            }
  882|       |
  883|  3.95k|            default: {
  ------------------
  |  Branch (883:13): [True: 2.19k, False: 138k]
  ------------------
  884|  2.19k|                break;
  885|  4.73k|            }
  886|   140k|        }
  887|       |
  888|       |        // None found
  889|  85.0k|        return OpCode::NONE;
  890|   140k|    }
_ZN3dlx3iceEcc:
   15|   227k|    {
   16|   227k|        constexpr const char diff = 'a' - 'A';
   17|   227k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (17:16): [True: 68.3k, False: 159k]
  |  Branch (17:28): [True: 71.3k, False: 88.1k]
  ------------------
   18|   227k|    }

_ZN3dlx10ParseErrorC2Ev:
   18|   109k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  186|  1.16k|    {
  187|  1.16k|        ParseError err;
  188|       |
  189|  1.16k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  190|  1.16k|        err.m_LineNumber                           = line_number;
  191|  1.16k|        err.m_Column                               = column;
  192|  1.16k|        err.unexpected_argument_type.expected_type = expected_type;
  193|  1.16k|        err.unexpected_argument_type.actual_type   = actual_type;
  194|       |
  195|  1.16k|        return err;
  196|  1.16k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  201|  1.16k|    {
  202|  1.16k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  203|  1.16k|                                                         token.GetColumn().unsafe(), expected_type,
  204|  1.16k|                                                         actual_type);
  205|  1.16k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  209|    194|    {
  210|    194|        ParseError err;
  211|       |
  212|    194|        err.m_Type              = ParseError::Type::InvalidNumber;
  213|    194|        err.m_LineNumber        = line_number;
  214|    194|        err.m_Column            = column;
  215|    194|        err.invalid_number.text = text;
  216|       |
  217|    194|        return err;
  218|    194|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  221|    194|    {
  222|    194|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  223|    194|                                                token.GetColumn().unsafe(), token.GetText());
  224|    194|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  228|      2|    {
  229|      2|        ParseError err;
  230|       |
  231|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  232|      2|        err.m_LineNumber = line_number;
  233|      2|        err.m_Column     = column;
  234|       |
  235|      2|        return err;
  236|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  239|      2|    {
  240|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  241|      2|                                                                     token.GetColumn().unsafe());
  242|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  247|  31.5k|    {
  248|  31.5k|        ParseError err;
  249|       |
  250|  31.5k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  251|  31.5k|        err.m_LineNumber                   = line_number;
  252|  31.5k|        err.m_Column                       = column;
  253|  31.5k|        err.unexpected_token.expected_type = expected_type;
  254|  31.5k|        err.unexpected_token.actual_type   = actual_type;
  255|       |
  256|  31.5k|        return err;
  257|  31.5k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  261|  31.5k|    {
  262|  31.5k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  263|  31.5k|                                                  token.GetColumn().unsafe(), expected_type,
  264|  31.5k|                                                  token.GetType());
  265|  31.5k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  270|  21.1k|    {
  271|  21.1k|        ParseError err;
  272|       |
  273|  21.1k|        err.m_Type                         = ParseError::Type::ReservedIdentifier;
  274|  21.1k|        err.m_LineNumber                   = line_number;
  275|  21.1k|        err.m_Column                       = column;
  276|  21.1k|        err.reserved_identifier.identifier = identifier;
  277|       |
  278|  21.1k|        return err;
  279|  21.1k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorERKNS_5TokenE:
  282|    322|    {
  283|    322|        return ConstructReservedIdentifierParseError(token.GetLineNumber().unsafe(),
  284|    322|                                                     token.GetColumn().unsafe(), token.GetText());
  285|    322|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  290|  19.5k|    {
  291|  19.5k|        ParseError err;
  292|       |
  293|  19.5k|        err.m_Type                              = ParseError::Type::InvalidLabelIdentifier;
  294|  19.5k|        err.m_LineNumber                        = line_number;
  295|  19.5k|        err.m_Column                            = column;
  296|  19.5k|        err.invalid_label_identifier.identifier = identifier;
  297|       |
  298|  19.5k|        return err;
  299|  19.5k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  302|  19.5k|    {
  303|  19.5k|        return ConstructInvalidLabelIdentifierParseError(
  304|  19.5k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  305|  19.5k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  312|  7.52k|    {
  313|  7.52k|        ParseError err;
  314|       |
  315|  7.52k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  316|  7.52k|        err.m_LineNumber                     = line_number;
  317|  7.52k|        err.m_Column                         = column;
  318|  7.52k|        err.label_already_defined.label_name = label_name;
  319|  7.52k|        err.label_already_defined.at_line    = at_line;
  320|  7.52k|        err.label_already_defined.at_column  = at_column;
  321|       |
  322|  7.52k|        return err;
  323|  7.52k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  327|  7.52k|    {
  328|  7.52k|        return ConstructLabelAlreadyDefinedParseError(
  329|  7.52k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  330|  7.52k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  331|  7.52k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  335|  20.8k|    {
  336|  20.8k|        ParseError err;
  337|       |
  338|  20.8k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  339|  20.8k|        err.m_LineNumber = line_number;
  340|  20.8k|        err.m_Column     = column;
  341|       |
  342|  20.8k|        return err;
  343|  20.8k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  346|  20.8k|    {
  347|  20.8k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  348|  20.8k|                                                        token.GetColumn().unsafe());
  349|  20.8k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  354|  2.94k|    {
  355|  2.94k|        ParseError err;
  356|       |
  357|  2.94k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  358|  2.94k|        err.m_LineNumber               = line_number;
  359|  2.94k|        err.m_Column                   = column;
  360|  2.94k|        err.too_few_arguments.required = required;
  361|  2.94k|        err.too_few_arguments.provided = provided;
  362|       |
  363|  2.94k|        return err;
  364|  2.94k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  368|  2.94k|    {
  369|  2.94k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  370|  2.94k|                                                  token.GetColumn().unsafe(), required, provided);
  371|  2.94k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  375|  3.72k|    {
  376|  3.72k|        ParseError err;
  377|       |
  378|  3.72k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  379|  3.72k|        err.m_LineNumber           = line_number;
  380|  3.72k|        err.m_Column               = column;
  381|  3.72k|        err.empty_label.label_name = label_name;
  382|       |
  383|  3.72k|        return err;
  384|  3.72k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  387|  3.72k|    {
  388|  3.72k|        return ConstructEmptyLabelParseError(
  389|  3.72k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  390|  3.72k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (390:17): [True: 3.43k, False: 291]
  ------------------
  391|  3.43k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  392|  3.72k|                        token.GetText());
  393|  3.72k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  397|    266|    {
  398|    266|        ParseError err;
  399|       |
  400|    266|        err.m_Type       = ParseError::Type::TooManyComma;
  401|    266|        err.m_LineNumber = line_number;
  402|    266|        err.m_Column     = column;
  403|       |
  404|    266|        return err;
  405|    266|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  408|    266|    {
  409|    266|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  410|    266|                                               token.GetColumn().unsafe());
  411|    266|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   16|   109k|    {
   17|   109k|        m_ParseErrors.emplace_back(phi::move(error));
   18|   109k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  4.12k|    {
  181|  4.12k|        ParsedProgram program;
  182|       |
  183|  4.12k|        program.m_Tokens = tokens;
  184|       |
  185|  4.12k|        phi::boolean line_has_instruction{false};
  186|  4.12k|        phi::usize   label_count{0u};
  187|       |
  188|   132k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 127k, False: 4.12k]
  ------------------
  189|   127k|        {
  190|   127k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   127k|            switch (current_token.GetType())
  195|   127k|            {
  196|       |                // Ignore comments
  197|    733|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 733, False: 127k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|    733|                    break;
  200|       |
  201|  15.4k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 15.4k, False: 112k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  15.4k|                    line_has_instruction = false;
  204|  15.4k|                    break;
  205|       |
  206|  52.0k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 52.0k, False: 75.8k]
  ------------------
  207|  52.0k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 4.58k, False: 47.4k]
  ------------------
  208|  4.58k|                    {
  209|  4.58k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  4.58k|                                current_token, Token::Type::NewLine));
  211|  4.58k|                        break;
  212|  4.58k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  47.4k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 7.43k, False: 40.0k]
  ------------------
  217|  7.43k|                    {
  218|  7.43k|                        program.AddParseError(
  219|  7.43k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  7.43k|                        break;
  221|  7.43k|                    }
  222|       |
  223|  40.0k|                    phi::string_view label_name = current_token.GetText();
  224|  40.0k|                    label_name.remove_suffix(1u);
  225|       |
  226|  40.0k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 20.8k, False: 19.1k]
  ------------------
  227|  20.8k|                    {
  228|  20.8k|                        program.AddParseError(ConstructReservedIdentifierParseError(
  229|  20.8k|                                current_token.GetLineNumber().unsafe(),
  230|  20.8k|                                current_token.GetColumn().unsafe(), label_name));
  231|  20.8k|                        break;
  232|  20.8k|                    }
  233|       |
  234|  19.1k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 7.55k, False: 11.6k]
  ------------------
  235|  7.55k|                    {
  236|  7.55k|                        program.AddParseError(
  237|  7.55k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  7.55k|                        break;
  239|  7.55k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  11.6k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 7.52k, False: 4.11k]
  ------------------
  243|  7.52k|                    {
  244|       |                        // Find first defintions of label
  245|  7.52k|                        const Token* first_label_definition =
  246|  7.52k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  7.52k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  7.52k|                                    {
  249|  7.52k|                                        phi::string_view token_label_name = t.GetText();
  250|  7.52k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  7.52k|                                        if (token_label_name == label_name)
  253|  7.52k|                                        {
  254|  7.52k|                                            return true;
  255|  7.52k|                                        }
  256|  7.52k|                                    }
  257|       |
  258|  7.52k|                                    return false;
  259|  7.52k|                                });
  260|       |
  261|  7.52k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  7.52k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  7.52k|                                current_token, *first_label_definition));
  265|  7.52k|                        break;
  266|  7.52k|                    }
  267|       |
  268|  4.11k|                    program.m_JumpData[label_name] =
  269|  4.11k|                            static_cast<phi::uint32_t>(program.m_Instructions.size());
  270|  4.11k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  4.11k|                    break;
  276|  11.6k|                }
  277|       |
  278|  35.2k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 35.2k, False: 92.6k]
  ------------------
  279|  35.2k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 20.8k, False: 14.4k]
  ------------------
  280|  20.8k|                    {
  281|  20.8k|                        program.AddParseError(
  282|  20.8k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  20.8k|                        break;
  284|  20.8k|                    }
  285|       |
  286|  14.4k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  14.4k|                    PHI_ASSERT(current_token.HasHint());
  290|  14.4k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  14.4k|                    const InstructionInfo& info = LookUpInstructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  14.4k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  14.4k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  14.4k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  14.4k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  14.4k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  14.4k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  14.4k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  26.0k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 23.4k, False: 2.58k]
  ------------------
  312|  23.4k|                    {
  313|       |                        // Get next token
  314|  23.4k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 730, False: 22.6k]
  ------------------
  315|    730|                        {
  316|    730|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    730|                                    current_token, number_of_argument_required.unsafe(),
  318|    730|                                    argument_num.unsafe()));
  319|    730|                            break;
  320|    730|                        }
  321|       |
  322|  22.6k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  22.6k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 8.31k, False: 14.3k]
  ------------------
  326|  8.31k|                        {
  327|  8.31k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 266, False: 8.04k]
  ------------------
  328|    266|                            {
  329|    266|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    266|                            }
  331|       |
  332|  8.31k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  8.31k|                            continue;
  335|  8.31k|                        }
  336|       |
  337|  14.3k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 2.21k, False: 12.1k]
  ------------------
  338|  2.21k|                        {
  339|  2.21k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  2.21k|                                    token, number_of_argument_required.unsafe(),
  341|  2.21k|                                    argument_num.unsafe()));
  342|  2.21k|                            break;
  343|  2.21k|                        }
  344|       |
  345|  12.1k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  12.1k|                                parse_instruction_argument(
  347|  12.1k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  12.1k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 8.88k, False: 3.28k]
  ------------------
  349|  8.88k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  8.88k|                            break;
  352|  8.88k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  3.28k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  3.28k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  3.28k|                        argument_num++;
  359|  3.28k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  3.28k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  14.4k|                    program.m_Instructions.emplace_back(instruction);
  367|  14.4k|                    line_has_instruction = true;
  368|  14.4k|                    break;
  369|  35.2k|                }
  370|       |
  371|  24.3k|                default:
  ------------------
  |  Branch (371:17): [True: 24.3k, False: 103k]
  ------------------
  372|  24.3k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  24.3k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 14.9k, False: 9.44k]
  ------------------
  374|  14.9k|                    {
  375|  14.9k|                        expected_token_type = Token::Type::NewLine;
  376|  14.9k|                    }
  377|       |
  378|  24.3k|                    program.AddParseError(
  379|  24.3k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  24.3k|                    break;
  381|   127k|            }
  382|   127k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  4.12k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 359, False: 3.76k]
  ------------------
  386|    359|        {
  387|  4.54k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 4.18k, False: 359]
  ------------------
  388|  4.18k|            {
  389|  4.18k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  4.18k|                const Token& token = *it;
  392|  4.18k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 3.72k, False: 463]
  ------------------
  393|  3.72k|                {
  394|  3.72k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  3.72k|                    --label_count;
  396|  3.72k|                }
  397|  4.18k|            }
  398|    359|        }
  399|       |
  400|  4.12k|        return program;
  401|  4.12k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  4.12k|    {
  405|  4.12k|        TokenStream tokens = Tokenize(source);
  406|  4.12k|        return Parse(tokens);
  407|  4.12k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  12.1k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  12.1k|        switch (token.GetType())
   37|  12.1k|        {
   38|  1.03k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 1.03k, False: 11.1k]
  ------------------
   39|  1.03k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 252, False: 779]
  ------------------
   40|  1.03k|                                          ArgumentType::AddressDisplacement))
   41|    252|                {
   42|    252|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    252|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    252|                    return {};
   46|    252|                }
   47|       |
   48|       |                // Get address displacement
   49|    779|                PHI_ASSERT(token.HasHint());
   50|       |
   51|    779|                phi::int16_t value = static_cast<phi::int16_t>(token.GetHint());
   52|       |
   53|    779|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 2, False: 777]
  ------------------
   54|      2|                {
   55|      2|                    program.AddParseError(
   56|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      2|                    return {};
   58|      2|                }
   59|       |
   60|    777|                auto         it           = tokens.current_position();
   61|    777|                const Token& first_token  = tokens.consume();
   62|    777|                const Token& second_token = tokens.consume();
   63|    777|                const Token& third_token  = tokens.consume();
   64|       |
   65|    777|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 195, False: 582]
  ------------------
   66|    195|                {
   67|    195|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    195|                            first_token, Token::Type::OpenBracket));
   69|    195|                    return {};
   70|    195|                }
   71|       |
   72|       |                // Second token is the register
   73|    582|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 194, False: 388]
  ------------------
   74|    194|                {
   75|    194|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|    194|                            second_token, Token::Type::RegisterInt));
   77|    194|                    return {};
   78|    194|                }
   79|       |
   80|    388|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 194, False: 194]
  ------------------
   81|    194|                {
   82|    194|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|    194|                            third_token, Token::Type::ClosingBracket));
   84|    194|                    return {};
   85|    194|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|    194|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|    194|                return ConstructInstructionArgumentAddressDisplacement(
   94|    194|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|    388|            }
   96|    397|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 397, False: 11.7k]
  ------------------
   97|    397|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 194, False: 203]
  ------------------
   98|    194|                {
   99|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    194|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    194|                    return {};
  102|    194|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|    203|                return ConstructInstructionArgumentRegisterInt(
  108|    203|                        static_cast<IntRegisterID>(token.GetHint()));
  109|    397|            }
  110|    961|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 961, False: 11.2k]
  ------------------
  111|    961|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 194, False: 767]
  ------------------
  112|    194|                {
  113|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    194|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    194|                    return {};
  116|    194|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|    767|                return ConstructInstructionArgumentRegisterFloat(
  122|    767|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|    961|            }
  124|    322|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 322, False: 11.8k]
  ------------------
  125|    322|                program.AddParseError(ConstructReservedIdentifierParseError(token));
  126|       |
  127|    322|                return {};
  128|    961|            }
  129|  6.82k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 6.82k, False: 5.33k]
  ------------------
  130|       |                // Parse as Label
  131|  6.82k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 334, False: 6.49k]
  ------------------
  132|    334|                {
  133|    334|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|    334|                            token, expected_argument_type, ArgumentType::Label));
  135|    334|                    return {};
  136|    334|                }
  137|       |
  138|  6.49k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 6.49k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentifierParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  6.49k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 4.58k, False: 1.91k]
  ------------------
  145|  4.58k|                {
  146|  4.58k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  4.58k|                    return {};
  148|  4.58k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  1.91k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  6.49k|            }
  154|    595|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 595, False: 11.5k]
  ------------------
  155|    595|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 194, False: 401]
  ------------------
  156|    194|                {
  157|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    194|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    194|                    return {};
  160|    194|                }
  161|       |
  162|    401|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 207, False: 194]
  ------------------
  163|    207|                {
  164|    207|                    return ConstructInstructionArgumentImmediateValue(
  165|    207|                            static_cast<phi::int16_t>(token.GetHint()));
  166|    207|                }
  167|       |
  168|    194|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    194|                return {};
  170|    401|            }
  171|       |
  172|  2.03k|            default:
  ------------------
  |  Branch (172:13): [True: 2.03k, False: 10.1k]
  ------------------
  173|  2.03k|                program.AddParseError(
  174|  2.03k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  2.03k|                return {};
  176|  12.1k|        }
  177|  12.1k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  19.5k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  19.5k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 18.4k, False: 1.09k]
  ------------------
  248|  18.4k|                                    {
  249|  18.4k|                                        phi::string_view token_label_name = t.GetText();
  250|  18.4k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  18.4k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 7.52k, False: 10.9k]
  ------------------
  253|  7.52k|                                        {
  254|  7.52k|                                            return true;
  255|  7.52k|                                        }
  256|  18.4k|                                    }
  257|       |
  258|  11.9k|                                    return false;
  259|  19.5k|                                });

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   10|   145k|    {
   11|   145k|        if (token.length() == 2u)
  ------------------
  |  Branch (11:13): [True: 22.9k, False: 122k]
  ------------------
   12|  22.9k|        {
   13|  22.9k|            const char first_char = token[0u];
   14|  22.9k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (14:17): [True: 406, False: 22.5k]
  |  Branch (14:38): [True: 1.80k, False: 20.7k]
  ------------------
   15|  2.21k|            {
   16|  2.21k|                const char second_char = token[1u];
   17|  2.21k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (17:21): [True: 1.88k, False: 333]
  |  Branch (17:43): [True: 1.48k, False: 395]
  ------------------
   18|  1.48k|                {
   19|  1.48k|                    return static_cast<IntRegisterID>(second_char - '0');
   20|  1.48k|                }
   21|  2.21k|            }
   22|  22.9k|        }
   23|   122k|        else if (token.length() == 3u)
  ------------------
  |  Branch (23:18): [True: 33.8k, False: 88.4k]
  ------------------
   24|  33.8k|        {
   25|  33.8k|            const char first_char = token[0u];
   26|  33.8k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (26:17): [True: 200, False: 33.6k]
  |  Branch (26:38): [True: 1.75k, False: 31.9k]
  ------------------
   27|  1.95k|            {
   28|  1.95k|                const char second_char = token[1u];
   29|  1.95k|                const char third_char  = token[2u];
   30|       |
   31|  1.95k|                switch (second_char)
   32|  1.95k|                {
   33|    582|                    case '1': {
  ------------------
  |  Branch (33:21): [True: 582, False: 1.37k]
  ------------------
   34|    582|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (34:29): [True: 388, False: 194]
  |  Branch (34:50): [True: 194, False: 194]
  ------------------
   35|    194|                        {
   36|    194|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   37|    194|                        }
   38|    388|                        break;
   39|    582|                    }
   40|    590|                    case '2': {
  ------------------
  |  Branch (40:21): [True: 590, False: 1.36k]
  ------------------
   41|    590|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (41:29): [True: 396, False: 194]
  |  Branch (41:50): [True: 194, False: 202]
  ------------------
   42|    194|                        {
   43|    194|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   44|    194|                        }
   45|    396|                        break;
   46|    590|                    }
   47|    582|                    case '3': {
  ------------------
  |  Branch (47:21): [True: 582, False: 1.37k]
  ------------------
   48|    582|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (48:29): [True: 194, False: 388]
  |  Branch (48:50): [True: 194, False: 194]
  ------------------
   49|    388|                        {
   50|    388|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   51|    388|                        }
   52|    194|                        break;
   53|    582|                    }
   54|    205|                    default: {
  ------------------
  |  Branch (54:21): [True: 205, False: 1.75k]
  ------------------
   55|    205|                        break;
   56|    582|                    }
   57|  1.95k|                }
   58|  1.95k|            }
   59|  33.8k|        }
   60|       |
   61|   143k|        return IntRegisterID::None;
   62|   145k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|   143k|    {
   66|   143k|        if (token.length() == 2u)
  ------------------
  |  Branch (66:13): [True: 21.4k, False: 121k]
  ------------------
   67|  21.4k|        {
   68|  21.4k|            const char first_char = token[0u];
   69|  21.4k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (69:17): [True: 1.55k, False: 19.8k]
  |  Branch (69:38): [True: 645, False: 19.2k]
  ------------------
   70|  2.19k|            {
   71|  2.19k|                const char second_char = token[1u];
   72|  2.19k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (72:21): [True: 1.97k, False: 228]
  |  Branch (72:43): [True: 1.47k, False: 496]
  ------------------
   73|  1.47k|                {
   74|  1.47k|                    return static_cast<FloatRegisterID>(second_char - '0');
   75|  1.47k|                }
   76|  2.19k|            }
   77|  21.4k|        }
   78|   121k|        else if (token.length() == 3u)
  ------------------
  |  Branch (78:18): [True: 33.1k, False: 88.4k]
  ------------------
   79|  33.1k|        {
   80|  33.1k|            const char first_char = token[0u];
   81|  33.1k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (81:17): [True: 1.49k, False: 31.6k]
  |  Branch (81:38): [True: 976, False: 30.6k]
  ------------------
   82|  2.46k|            {
   83|  2.46k|                const char second_char = token[1u];
   84|  2.46k|                const char third_char  = token[2u];
   85|       |
   86|  2.46k|                switch (second_char)
   87|  2.46k|                {
   88|    583|                    case '1': {
  ------------------
  |  Branch (88:21): [True: 583, False: 1.88k]
  ------------------
   89|    583|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (89:29): [True: 389, False: 194]
  |  Branch (89:50): [True: 194, False: 195]
  ------------------
   90|    194|                        {
   91|    194|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   92|    194|                        }
   93|    389|                        break;
   94|    583|                    }
   95|    592|                    case '2': {
  ------------------
  |  Branch (95:21): [True: 592, False: 1.87k]
  ------------------
   96|    592|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (96:29): [True: 398, False: 194]
  |  Branch (96:50): [True: 203, False: 195]
  ------------------
   97|    203|                        {
   98|    203|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
   99|    203|                        }
  100|    389|                        break;
  101|    592|                    }
  102|    583|                    case '3': {
  ------------------
  |  Branch (102:21): [True: 583, False: 1.88k]
  ------------------
  103|    583|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (103:29): [True: 194, False: 389]
  |  Branch (103:50): [True: 194, False: 195]
  ------------------
  104|    388|                        {
  105|    388|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  106|    388|                        }
  107|    195|                        break;
  108|    583|                    }
  109|    711|                    default: {
  ------------------
  |  Branch (109:21): [True: 711, False: 1.75k]
  ------------------
  110|    711|                        break;
  111|    583|                    }
  112|  2.46k|                }
  113|  2.46k|            }
  114|  33.1k|        }
  115|       |
  116|   140k|        return FloatRegisterID::None;
  117|   143k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  120|   125k|    {
  121|   125k|        if (token.length() == 4u)
  ------------------
  |  Branch (121:13): [True: 30.3k, False: 94.7k]
  ------------------
  122|  30.3k|        {
  123|  30.3k|            const char c1 = token[0u];
  124|  30.3k|            const char c2 = token[1u];
  125|  30.3k|            const char c3 = token[2u];
  126|  30.3k|            const char c4 = token[3u];
  127|       |
  128|  30.3k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (128:21): [True: 1.14k, False: 29.2k]
  |  Branch (128:34): [True: 467, False: 28.7k]
  |  Branch (128:49): [True: 924, False: 683]
  |  Branch (128:62): [True: 194, False: 489]
  ------------------
  129|  30.3k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (129:21): [True: 243, False: 875]
  |  Branch (129:34): [True: 678, False: 197]
  |  Branch (129:49): [True: 194, False: 727]
  |  Branch (129:62): [True: 496, False: 231]
  ------------------
  130|  30.3k|        }
  131|       |
  132|  94.7k|        return false;
  133|   125k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   26|   110k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   36|  42.0k|    {}
_ZNK3dlx5Token7GetTypeEv:
   39|   234k|    {
   40|   234k|        return m_Type;
   41|   234k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   49|   130k|    {
   50|   130k|        return m_LineNumber;
   51|   130k|    }
_ZNK3dlx5Token9GetColumnEv:
   54|   116k|    {
   55|   116k|        return m_Column;
   56|   116k|    }
_ZNK3dlx5Token7GetTextEv:
   64|   159k|    {
   65|   159k|        return m_Text;
   66|   159k|    }
_ZNK3dlx5Token7HasHintEv:
   78|  15.5k|    {
   79|  15.5k|        return m_HasHint;
   80|  15.5k|    }
_ZNK3dlx5Token7GetHintEv:
   83|  16.5k|    {
   84|  16.5k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   85|  16.5k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   86|  16.5k|                   m_Type == Type::ImmediateInteger);
   87|  16.5k|        PHI_ASSERT(m_HasHint);
   88|       |
   89|  16.5k|        return m_Hint;
   90|  16.5k|    }

_ZN3dlx11TokenStream8finalizeEv:
   28|  4.12k|    {
   29|       |#if defined(PHI_DEBUG)
   30|       |        PHI_ASSERT(!m_Finalized);
   31|       |#endif
   32|       |
   33|  4.12k|        m_Iterator = 0u;
   34|       |#if defined(PHI_DEBUG)
   35|       |        m_Finalized = true;
   36|       |#endif
   37|  4.12k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   49|    779|    {
   50|    779|        return x + m_Iterator <= m_Tokens.size();
   51|    779|    }
_ZNK3dlx11TokenStream8has_moreEv:
   54|   155k|    {
   55|   155k|        return m_Iterator < m_Tokens.size();
   56|   155k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   59|   152k|    {
   60|   152k|        return m_Iterator >= m_Tokens.size();
   61|   152k|    }
_ZN3dlx11TokenStream7consumeEv:
   74|   152k|    {
   75|   152k|        PHI_ASSERT(!reached_end());
   76|       |#if defined(PHI_DEBUG)
   77|       |        PHI_ASSERT(m_Finalized);
   78|       |#endif
   79|       |
   80|   152k|        return m_Tokens.at(m_Iterator++.unsafe());
   81|   152k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  154|    777|    {
  155|    777|        return m_Iterator;
  156|    777|    }
_ZN3dlx11TokenStream12set_positionEN3phi7integerImEE:
  159|    194|    {
  160|       |#if defined(PHI_DEBUG)
  161|       |        PHI_ASSERT(m_Finalized);
  162|       |#endif
  163|       |
  164|    194|        m_Iterator = pos;
  165|    194|    }
_ZNK3dlx11TokenStream6rbeginEv:
  204|    359|    {
  205|       |#if defined(PHI_DEBUG)
  206|       |        //PHI_ASSERT(m_Finalized);
  207|       |#endif
  208|       |
  209|    359|        return m_Tokens.rbegin();
  210|    359|    }
_ZNK3dlx11TokenStream4rendEv:
  213|  4.18k|    {
  214|       |#if defined(PHI_DEBUG)
  215|       |        //PHI_ASSERT(m_Finalized);
  216|       |#endif
  217|       |
  218|  4.18k|        return m_Tokens.rend();
  219|  4.18k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  4.12k|    {
   66|  4.12k|        TokenStream tokens;
   67|       |
   68|  4.12k|        phi::string_view current_token;
   69|       |
   70|  4.12k|        phi::u64 current_line_number{1u};
   71|  4.12k|        phi::u64 current_column{1u};
   72|  4.12k|        phi::u64 token_begin{0u};
   73|       |
   74|  4.12k|        phi::boolean parsing_comment{false};
   75|       |
   76|   440k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 436k, False: 4.12k]
  ------------------
   77|   436k|        {
   78|   436k|            const char c{source.at(i)};
   79|       |
   80|   436k|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 17.7k, False: 418k]
  ------------------
   81|  17.7k|            {
   82|  17.7k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 2.64k, False: 15.1k]
  ------------------
   83|  2.64k|                {
   84|       |                    // Skip empty lines
   85|  2.64k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  2.64k|                                        current_line_number, current_column);
   87|       |
   88|  2.64k|                    parsing_comment = false;
   89|  2.64k|                    current_line_number += 1u;
   90|  2.64k|                    current_column = 1u;
   91|  2.64k|                    continue;
   92|  2.64k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  15.1k|                tokens.emplace_back(ParseToken(
   96|  15.1k|                        source.substring_view(
   97|  15.1k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  15.1k|                                current_token.length()),
   99|  15.1k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  15.1k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  15.1k|                                    current_line_number, current_column);
  103|       |
  104|  15.1k|                current_token   = phi::string_view{};
  105|  15.1k|                parsing_comment = false;
  106|  15.1k|                current_line_number += 1u;
  107|  15.1k|                current_column = 0u;
  108|  15.1k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|   418k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 493, False: 417k]
  |  Branch (110:34): [True: 657, False: 417k]
  ------------------
  111|  1.15k|            {
  112|  1.15k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 252, False: 898]
  ------------------
  113|    252|                {
  114|    252|                    token_begin = i;
  115|    252|                }
  116|    898|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 522, False: 376]
  ------------------
  117|    522|                {
  118|    522|                    tokens.emplace_back(ParseToken(
  119|    522|                            source.substring_view(
  120|    522|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|    522|                                    current_token.length()),
  122|    522|                            current_line_number, current_column - current_token.length()));
  123|    522|                    token_begin   = i;
  124|    522|                    current_token = phi::string_view{};
  125|    522|                }
  126|       |
  127|  1.15k|                parsing_comment = true;
  128|  1.15k|                current_token   = source.substring_view(
  129|  1.15k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  1.15k|                        current_token.length() + 1u);
  131|  1.15k|            }
  132|   417k|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 203, False: 417k]
  ------------------
  133|    203|            {
  134|       |                // simply append the character
  135|    203|                current_token = source.substring_view(
  136|    203|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|    203|                        current_token.length() + 1u);
  138|    203|            }
  139|   417k|            else
  140|   417k|            {
  141|       |                // Not parsing a comment
  142|   417k|                switch (c)
  143|   417k|                {
  144|  3.51k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 3.51k, False: 413k]
  ------------------
  145|  7.21k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 3.69k, False: 413k]
  ------------------
  146|  11.4k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 4.20k, False: 412k]
  ------------------
  147|  11.4k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 671, False: 10.7k]
  ------------------
  148|    671|                        {
  149|    671|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|    671|                            continue;
  152|    671|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  10.7k|                        tokens.emplace_back(ParseToken(
  156|  10.7k|                                source.substring_view(
  157|  10.7k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  10.7k|                                        current_token.length()),
  159|  10.7k|                                current_line_number, current_column - current_token.length()));
  160|  10.7k|                        current_token = phi::string_view{};
  161|  10.7k|                        break;
  162|  44.4k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 44.4k, False: 372k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  44.4k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 43.7k, False: 774]
  ------------------
  165|  43.7k|                        {
  166|  43.7k|                            current_token = source.substring_view(
  167|  43.7k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  43.7k|                                    current_token.length() + 1u);
  169|  43.7k|                            tokens.emplace_back(ParseToken(
  170|  43.7k|                                    source.substring_view(
  171|  43.7k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  43.7k|                                                    token_begin),
  173|  43.7k|                                            current_token.length()),
  174|  43.7k|                                    current_line_number,
  175|  43.7k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  43.7k|                            current_token = phi::string_view{};
  178|  43.7k|                        }
  179|    774|                        else
  180|    774|                        {
  181|       |                            // Orphan colon
  182|    774|                            token_begin = i;
  183|       |
  184|    774|                            tokens.emplace_back(
  185|    774|                                    Token::Type::Colon,
  186|    774|                                    source.substring_view(
  187|    774|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|    774|                                                    token_begin),
  189|    774|                                            1u),
  190|    774|                                    current_line_number, current_column);
  191|    774|                        }
  192|  44.4k|                        break;
  193|  18.6k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 18.6k, False: 398k]
  ------------------
  194|  30.4k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 11.8k, False: 405k]
  ------------------
  195|  31.5k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 1.08k, False: 416k]
  ------------------
  196|  31.5k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 29.6k, False: 1.93k]
  ------------------
  197|  29.6k|                        {
  198|  29.6k|                            tokens.emplace_back(ParseToken(
  199|  29.6k|                                    source.substring_view(
  200|  29.6k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  29.6k|                                                    token_begin),
  202|  29.6k|                                            current_token.length()),
  203|  29.6k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  29.6k|                            current_token = phi::string_view{};
  206|  29.6k|                        }
  207|       |
  208|  31.5k|                        Token::Type type;
  209|  31.5k|                        switch (c)
  210|  31.5k|                        {
  211|  18.6k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 18.6k, False: 12.9k]
  ------------------
  212|  18.6k|                                type = Token::Type::Comma;
  213|  18.6k|                                break;
  214|  11.8k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 11.8k, False: 19.6k]
  ------------------
  215|  11.8k|                                type = Token::Type::OpenBracket;
  216|  11.8k|                                break;
  217|  1.08k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 1.08k, False: 30.4k]
  ------------------
  218|  1.08k|                                type = Token::Type::ClosingBracket;
  219|  1.08k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 31.5k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  31.5k|#endif
  225|  31.5k|                        }
  226|       |
  227|  31.5k|                        token_begin = i;
  228|       |
  229|  31.5k|                        tokens.emplace_back(
  230|  31.5k|                                type,
  231|  31.5k|                                source.substring_view(
  232|  31.5k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  31.5k|                                        1u),
  234|  31.5k|                                current_line_number, current_column);
  235|  31.5k|                        break;
  236|       |
  237|   329k|                    default:
  ------------------
  |  Branch (237:21): [True: 329k, False: 87.4k]
  ------------------
  238|   329k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 102k, False: 227k]
  ------------------
  239|   102k|                        {
  240|   102k|                            token_begin = i;
  241|   102k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   329k|                        current_token = source.substring_view(
  245|   329k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   329k|                                current_token.length() + 1u);
  247|   417k|                }
  248|   417k|            }
  249|       |
  250|   432k|            current_column += 1u;
  251|   432k|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  4.12k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 3.07k, False: 1.05k]
  ------------------
  255|  3.07k|        {
  256|  3.07k|            tokens.emplace_back(
  257|  3.07k|                    ParseToken(source.substring_view(
  258|  3.07k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  3.07k|                                       current_token.length()),
  260|  3.07k|                               current_line_number, current_column - current_token.length()));
  261|  3.07k|        }
  262|       |
  263|       |        // Finalize token stream
  264|  4.12k|        tokens.finalize();
  265|       |
  266|  4.12k|        return tokens;
  267|  4.12k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   102k|    {
   14|   102k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 1.42k, False: 101k]
  |  Branch (14:13): [True: 808, False: 102k]
  |  Branch (14:36): [True: 808, False: 614]
  ------------------
   15|    808|        {
   16|    808|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|    808|            if (number)
  ------------------
  |  Branch (18:17): [True: 402, False: 406]
  ------------------
   19|    402|            {
   20|    402|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|    402|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|    402|            }
   23|       |
   24|    406|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|    808|        }
   26|       |
   27|   102k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 306, False: 101k]
  |  Branch (27:13): [True: 774, False: 101k]
  |  Branch (27:36): [True: 468, False: 101k]
  ------------------
   28|    774|        {
   29|    774|            return {Token::Type::Comment, token, line_number, column};
   30|    774|        }
   31|       |
   32|   101k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 1.99k, False: 99.2k]
  ------------------
   33|  1.99k|        {
   34|  1.99k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  1.99k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  1.99k|        }
   37|       |
   38|  99.2k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 490, False: 98.7k]
  ------------------
   39|    490|        {
   40|    490|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|    490|        }
   42|       |
   43|  98.7k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 1.55k, False: 97.2k]
  ------------------
   44|  1.55k|        {
   45|  1.55k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  1.55k|                    static_cast<phi::uint32_t>(id)};
   47|  1.55k|        }
   48|       |
   49|  97.2k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 1.66k, False: 95.5k]
  ------------------
   50|  1.66k|        {
   51|  1.66k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  1.66k|                    static_cast<phi::uint32_t>(id)};
   53|  1.66k|        }
   54|       |
   55|  95.5k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 36.4k, False: 59.1k]
  ------------------
   56|  36.4k|        {
   57|  36.4k|            return {Token::Type::OpCode, token, line_number, column,
   58|  36.4k|                    static_cast<phi::uint32_t>(opcode)};
   59|  36.4k|        }
   60|       |
   61|  59.1k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  95.5k|    }

LLVMFuzzerTestOneInput:
    7|  4.12k|{
    8|  4.12k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
    9|       |
   10|       |    // Parse it
   11|  4.12k|    dlx::Parser::Parse(source);
   12|       |
   13|  4.12k|    return 0;
   14|  4.12k|}


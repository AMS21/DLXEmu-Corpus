_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   548k|        {
  169|   548k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   548k|            switch (index.unsafe())
  172|   548k|            {
  173|   248k|                case 0:
  ------------------
  |  Branch (173:17): [True: 248k, False: 299k]
  ------------------
  174|   248k|                    return m_Arg1Type;
  175|       |
  176|   152k|                case 1:
  ------------------
  |  Branch (176:17): [True: 152k, False: 396k]
  ------------------
  177|   152k|                    return m_Arg2Type;
  178|       |
  179|   147k|                case 2:
  ------------------
  |  Branch (179:17): [True: 147k, False: 400k]
  ------------------
  180|   147k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 548k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   548k|#endif
  187|   548k|            }
  188|   548k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   140k|        {
  195|   140k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   140k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 135k, False: 5.74k]
  ------------------
  199|   135k|            {
  200|   135k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   135k|            }
  202|   140k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 80.3k, False: 60.6k]
  ------------------
  203|  80.3k|            {
  204|  80.3k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  80.3k|            }
  206|   140k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 49.3k, False: 91.6k]
  ------------------
  207|  49.3k|            {
  208|  49.3k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  49.3k|            }
  210|       |
  211|   140k|            return number_of_argument_required;
  212|   140k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   140k|        {
  221|   140k|            return m_Executor;
  222|   140k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   101k|    {
   38|   101k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   101k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   101k|                                         static_cast<underlying_t>(rhs));
   42|   101k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   101k|    {
   55|   101k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   101k|        return static_cast<underlying_t>(type & test) != 0;
   58|   101k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|   478k|    {
   32|   478k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 10.3k, False: 468k]
  ------------------
   33|  10.3k|        {
   34|  10.3k|            return true;
   35|  10.3k|        }
   36|       |
   37|   468k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 1.99k, False: 466k]
  ------------------
   38|  1.99k|        {
   39|  1.99k|            return true;
   40|  1.99k|        }
   41|       |
   42|   466k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 176k, False: 290k]
  ------------------
   43|   176k|        {
   44|   176k|            return true;
   45|   176k|        }
   46|       |
   47|   290k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 1.23k, False: 288k]
  ------------------
   48|  1.23k|        {
   49|  1.23k|            return true;
   50|  1.23k|        }
   51|       |
   52|   288k|        return false;
   53|   290k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|   288k|    {
   57|   288k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 288k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|   288k|        const char first_char = token.at(0);
   63|       |
   64|   288k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 62.5k, False: 226k]
  ------------------
   65|  62.5k|        {
   66|  62.5k|            return phi::is_alpha(first_char);
   67|  62.5k|        }
   68|       |
   69|   226k|        phi::boolean just_under_scores = (first_char == '_');
   70|   226k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 28.9k, False: 197k]
  |  Branch (70:15): [True: 192k, False: 33.7k]
  |  Branch (70:44): [True: 4.76k, False: 28.9k]
  ------------------
   71|  28.9k|        {
   72|  28.9k|            return false;
   73|  28.9k|        }
   74|       |
   75|   743k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 622k, False: 121k]
  ------------------
   76|   622k|        {
   77|   622k|            const char c{token.at(index)};
   78|       |
   79|   622k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 540k, False: 81.8k]
  ------------------
   80|   540k|            {
   81|   540k|                just_under_scores = false;
   82|   540k|            }
   83|  81.8k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 5.88k, False: 75.9k]
  ------------------
   84|  5.88k|            {
   85|  5.88k|                continue;
   86|  5.88k|            }
   87|  75.9k|            else
   88|  75.9k|            {
   89|  75.9k|                return false;
   90|  75.9k|            }
   91|   622k|        }
   92|       |
   93|   121k|        return !just_under_scores;
   94|   197k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|  1.35M|    {
  101|  1.35M|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 1.35M]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|  1.35M|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 213k, False: 1.14M]
  ------------------
  107|   213k|        {
  108|   213k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 31.0k, False: 182k]
  ------------------
  109|  31.0k|            {
  110|  31.0k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  31.0k|            }
  112|       |
  113|   182k|            return {};
  114|   213k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|  1.14M|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 14.2k, False: 1.12M]
  ------------------
  118|  14.2k|        {
  119|  14.2k|            return {};
  120|  14.2k|        }
  121|       |
  122|  1.12M|        std::int32_t number{0};
  123|  1.12M|        phi::boolean is_negative{false};
  124|  1.12M|        phi::boolean starts_with_zero{false};
  125|  1.12M|        phi::boolean parsing_binary{false};
  126|  1.12M|        phi::boolean parsing_octal{false};
  127|  1.12M|        phi::boolean parsing_hexadecimal{false};
  128|  1.12M|        phi::boolean parsed_something{false};
  129|  1.12M|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|  1.25M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 1.23M, False: 18.6k]
  ------------------
  134|  1.23M|        {
  135|  1.23M|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|  1.23M|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 1.12M, False: 112k]
  ------------------
  139|  1.12M|            {
  140|  1.12M|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 1.90k, False: 1.12M]
  ------------------
  141|  1.90k|                {
  142|  1.90k|                    continue;
  143|  1.90k|                }
  144|       |
  145|  1.12M|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 9.38k, False: 1.11M]
  ------------------
  146|  9.38k|                {
  147|  9.38k|                    is_negative = true;
  148|  9.38k|                    continue;
  149|  9.38k|                }
  150|       |
  151|  1.11M|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 20.2k, False: 1.09M]
  ------------------
  152|  20.2k|                {
  153|  20.2k|                    starts_with_zero = true;
  154|  20.2k|                    continue;
  155|  20.2k|                }
  156|       |
  157|  1.09M|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 2.63k, False: 1.09M]
  ------------------
  158|  2.63k|                {
  159|  2.63k|                    return {};
  160|  2.63k|                }
  161|  1.09M|            }
  162|       |
  163|       |            // Second character
  164|  1.20M|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 47.7k, False: 1.15M]
  ------------------
  165|  47.7k|            {
  166|  47.7k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 20.2k, False: 27.5k]
  ------------------
  167|  20.2k|                {
  168|       |                    // Binary
  169|  20.2k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 2.94k, False: 17.2k]
  |  Branch (169:37): [True: 453, False: 16.8k]
  ------------------
  170|  3.40k|                    {
  171|  3.40k|                        parsing_binary = true;
  172|  3.40k|                        continue;
  173|  3.40k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  16.8k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 6.79k, False: 10.0k]
  |  Branch (176:37): [True: 1.40k, False: 8.62k]
  ------------------
  177|  8.20k|                    {
  178|  8.20k|                        parsing_hexadecimal = true;
  179|  8.20k|                        continue;
  180|  8.20k|                    }
  181|       |
  182|       |                    // Octal
  183|  8.62k|                    parsing_octal = true;
  184|  8.62k|                }
  185|  47.7k|            }
  186|       |
  187|       |            // Handle seperators
  188|  1.19M|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 1.18k, False: 1.19M]
  ------------------
  189|  1.18k|            {
  190|  1.18k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 450, False: 736]
  ------------------
  191|    450|                {
  192|    450|                    return {};
  193|    450|                }
  194|       |
  195|    736|                parsed_separator = true;
  196|    736|                continue;
  197|  1.18k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|  1.19M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 35.1k, False: 1.15M]
  |  Branch (200:32): [True: 2.08k, False: 33.0k]
  ------------------
  201|  2.08k|            {
  202|       |                // Would underflow
  203|  2.08k|                return {};
  204|  2.08k|            }
  205|  1.19M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 1.15M, False: 33.0k]
  |  Branch (205:17): [True: 2.44k, False: 1.18M]
  |  Branch (205:33): [True: 2.44k, False: 1.15M]
  ------------------
  206|  2.44k|            {
  207|       |                // Would overflow
  208|  2.44k|                return {};
  209|  2.44k|            }
  210|       |
  211|  1.18M|            parsed_separator = false;
  212|  1.18M|            parsed_something = true;
  213|       |
  214|  1.18M|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 4.25k, False: 1.18M]
  ------------------
  215|  4.25k|            {
  216|  4.25k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 949, False: 3.30k]
  ------------------
  217|    949|                {
  218|    949|                    return {};
  219|    949|                }
  220|       |
  221|  3.30k|                number <<= 1;
  222|  3.30k|                number |= (c - '0');
  223|  3.30k|            }
  224|  1.18M|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 9.07k, False: 1.17M]
  ------------------
  225|  9.07k|            {
  226|  9.07k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 6.26k, False: 2.81k]
  ------------------
  227|  6.26k|                {
  228|  6.26k|                    return {};
  229|  6.26k|                }
  230|       |
  231|  2.81k|                number <<= 3;
  232|  2.81k|                number |= (c - '0');
  233|  2.81k|            }
  234|  1.17M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 13.1k, False: 1.16M]
  ------------------
  235|  13.1k|            {
  236|  13.1k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 6.66k, False: 6.48k]
  ------------------
  237|  6.66k|                {
  238|  6.66k|                    return {};
  239|  6.66k|                }
  240|       |
  241|  6.48k|                number <<= 4;
  242|  6.48k|                number |= phi::hex_digit_value(c).unsafe();
  243|  6.48k|            }
  244|  1.16M|            else
  245|  1.16M|            {
  246|  1.16M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 1.08M, False: 78.2k]
  ------------------
  247|  1.08M|                {
  248|  1.08M|                    return {};
  249|  1.08M|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  78.2k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 25.0k, False: 53.1k]
  |  Branch (252:36): [True: 3.09k, False: 21.9k]
  ------------------
  253|  3.09k|                {
  254|  3.09k|                    return {};
  255|  3.09k|                }
  256|       |
  257|  75.1k|                number *= 10;
  258|  75.1k|                number += (c - '0');
  259|  75.1k|            }
  260|  1.18M|        }
  261|       |
  262|  18.6k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 17.6k, False: 1.02k]
  ------------------
  263|  17.6k|        {
  264|       |            // Check for over/underflow
  265|  17.6k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 3.56k, False: 14.1k]
  |  Branch (265:32): [True: 3.02k, False: 540]
  ------------------
  266|  3.02k|            {
  267|       |                // Would underflow
  268|  3.02k|                return {};
  269|  3.02k|            }
  270|  14.6k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 14.1k, False: 540]
  |  Branch (270:17): [True: 2.02k, False: 12.6k]
  |  Branch (270:33): [True: 2.02k, False: 12.0k]
  ------------------
  271|  2.02k|            {
  272|       |                // Would overflow
  273|  2.02k|                return {};
  274|  2.02k|            }
  275|       |
  276|  12.6k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 540, False: 12.0k]
  ------------------
  277|    540|            {
  278|    540|                return static_cast<std::int16_t>(-number);
  279|    540|            }
  280|       |
  281|  12.0k|            return static_cast<std::int16_t>(number);
  282|  12.6k|        }
  283|       |
  284|  1.02k|        return {};
  285|  18.6k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  85.5k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  85.5k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 1.33M, False: 0]
  ------------------
   64|  1.33M|            {
   65|  1.33M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 85.5k, False: 1.25M]
  ------------------
   66|  85.5k|                {
   67|  85.5k|                    return &token;
   68|  85.5k|                }
   69|  1.33M|            }
   70|       |
   71|      0|            return nullptr;
   72|  85.5k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   328k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   328k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   328k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  1.36M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.36M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.36M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|   758k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   758k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   758k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   140k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  32.2k|    {
   25|  32.2k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  32.2k|        switch (argument_number.unsafe())
   28|  32.2k|        {
   29|  22.1k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 22.1k, False: 10.1k]
  ------------------
   30|  22.1k|                m_Arg1 = argument;
   31|  22.1k|                break;
   32|  6.72k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 6.72k, False: 25.5k]
  ------------------
   33|  6.72k|                m_Arg2 = argument;
   34|  6.72k|                break;
   35|  3.39k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 3.39k, False: 28.8k]
  ------------------
   36|  3.39k|                m_Arg3 = argument;
   37|  3.39k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 32.2k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  32.2k|#endif
   42|  32.2k|        }
   43|  32.2k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|   455k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  6.23k|    {
  171|  6.23k|        InstructionArgument arg;
  172|  6.23k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  6.23k|        arg.register_int.register_id = id;
  174|  6.23k|        return arg;
  175|  6.23k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  10.6k|    {
  179|  10.6k|        InstructionArgument arg;
  180|  10.6k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  10.6k|        arg.register_float.register_id = id;
  182|  10.6k|        return arg;
  183|  10.6k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  2.10k|    {
  187|  2.10k|        InstructionArgument arg;
  188|  2.10k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  2.10k|        arg.immediate_value.signed_value = value;
  190|  2.10k|        return arg;
  191|  2.10k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|  2.34k|    {
  196|  2.34k|        InstructionArgument arg;
  197|  2.34k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|  2.34k|        arg.address_displacement.register_id  = id;
  199|  2.34k|        arg.address_displacement.displacement = displacement;
  200|  2.34k|        return arg;
  201|  2.34k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  10.8k|    {
  205|  10.8k|        InstructionArgument arg;
  206|  10.8k|        arg.m_Type           = ArgumentType::Label;
  207|  10.8k|        arg.label.label_name = label_name;
  208|  10.8k|        return arg;
  209|  10.8k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   140k|    {
  453|   140k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   140k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|  1.72M|    {
   24|  1.72M|        switch (token.length())
   25|  1.72M|        {
   26|       |            // 1 character OpCodes
   27|   242k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 242k, False: 1.48M]
  ------------------
   28|   242k|                char c1 = token[0];
   29|   242k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 57.6k, False: 184k]
  ------------------
   30|  57.6k|                {
   31|  57.6k|                    return OpCode::J;
   32|  57.6k|                }
   33|   184k|                break;
   34|   242k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|   253k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 253k, False: 1.47M]
  ------------------
   38|   253k|                char c1 = token[0];
   39|   253k|                char c2 = token[1];
   40|       |
   41|   253k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 161k, False: 92.6k]
  ------------------
   42|   253k|                {
   43|  5.24k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 5.24k, False: 248k]
  ------------------
   44|  8.49k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 3.25k, False: 250k]
  ------------------
   45|  8.49k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 3.60k, False: 4.89k]
  ------------------
   46|  3.60k|                        {
   47|  3.60k|                            return OpCode::JR;
   48|  3.60k|                        }
   49|  4.89k|                        break;
   50|       |
   51|  10.8k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 10.8k, False: 243k]
  ------------------
   52|  20.9k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 10.0k, False: 243k]
  ------------------
   53|  20.9k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 8.82k, False: 12.0k]
  ------------------
   54|  20.9k|                        {
   55|  2.56k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 2.56k, False: 18.3k]
  ------------------
   56|  4.05k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 1.49k, False: 19.4k]
  ------------------
   57|  4.05k|                                return OpCode::LB;
   58|    998|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 998, False: 19.9k]
  ------------------
   59|  1.23k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 238, False: 20.6k]
  ------------------
   60|  1.23k|                                return OpCode::LD;
   61|    923|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 923, False: 20.0k]
  ------------------
   62|  2.43k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 1.51k, False: 19.4k]
  ------------------
   63|  2.43k|                                return OpCode::LF;
   64|  1.35k|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 1.35k, False: 19.5k]
  ------------------
   65|  1.98k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 624, False: 20.3k]
  ------------------
   66|  1.98k|                                return OpCode::LH;
   67|  1.28k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 1.28k, False: 19.6k]
  ------------------
   68|  2.39k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 1.11k, False: 19.8k]
  ------------------
   69|  2.39k|                                return OpCode::LW;
   70|  20.9k|                        }
   71|  8.82k|                        break;
   72|  8.82k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 2.57k, False: 251k]
  ------------------
   73|  8.55k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 5.97k, False: 248k]
  ------------------
   74|  8.55k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 4.62k, False: 3.93k]
  ------------------
   75|  4.62k|                        {
   76|  4.62k|                            return OpCode::OR;
   77|  4.62k|                        }
   78|  3.93k|                        break;
   79|  36.5k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 36.5k, False: 217k]
  ------------------
   80|  54.6k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 18.1k, False: 235k]
  ------------------
   81|  54.6k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 15.7k, False: 38.9k]
  ------------------
   82|  54.6k|                        {
   83|  2.39k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 2.39k, False: 52.3k]
  ------------------
   84|  6.36k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 3.97k, False: 50.7k]
  ------------------
   85|  6.36k|                                return OpCode::SB;
   86|  11.9k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 11.9k, False: 42.7k]
  ------------------
   87|  15.4k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 3.42k, False: 51.2k]
  ------------------
   88|  15.4k|                                return OpCode::SD;
   89|  1.42k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 1.42k, False: 53.2k]
  ------------------
   90|  2.20k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 785, False: 53.9k]
  ------------------
   91|  2.20k|                                return OpCode::SF;
   92|  2.76k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 2.76k, False: 51.9k]
  ------------------
   93|  5.37k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 2.61k, False: 52.0k]
  ------------------
   94|  5.37k|                                return OpCode::SH;
   95|  2.30k|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 2.30k, False: 52.3k]
  ------------------
   96|  9.62k|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 7.32k, False: 47.3k]
  ------------------
   97|  9.62k|                                return OpCode::SW;
   98|  54.6k|                        }
   99|  15.7k|                        break;
  100|   253k|                }
  101|   194k|                break;
  102|   253k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   333k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 333k, False: 1.39M]
  ------------------
  106|   333k|                char c1 = token[0];
  107|   333k|                char c2 = token[1];
  108|   333k|                char c3 = token[2];
  109|       |
  110|   333k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 105k, False: 227k]
  ------------------
  111|   333k|                {
  112|  14.3k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 14.3k, False: 319k]
  ------------------
  113|  19.2k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 4.83k, False: 328k]
  ------------------
  114|  19.2k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 7.29k, False: 11.9k]
  |  Branch (114:29): [True: 6.23k, False: 12.9k]
  |  Branch (114:45): [True: 6.23k, False: 1.05k]
  ------------------
  115|  6.23k|                        {
  116|  6.23k|                            return OpCode::ADD;
  117|  6.23k|                        }
  118|  12.9k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 5.33k, False: 7.64k]
  |  Branch (118:34): [True: 1.72k, False: 11.2k]
  |  Branch (118:50): [True: 1.72k, False: 3.61k]
  ------------------
  119|  1.72k|                        {
  120|  1.72k|                            return OpCode::AND;
  121|  1.72k|                        }
  122|  11.2k|                        break;
  123|       |
  124|  11.2k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 2.81k, False: 331k]
  ------------------
  125|  19.3k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 16.5k, False: 317k]
  ------------------
  126|  19.3k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 13.5k, False: 5.76k]
  |  Branch (126:29): [True: 9.46k, False: 9.88k]
  |  Branch (126:45): [True: 9.46k, False: 4.11k]
  ------------------
  127|  9.46k|                        {
  128|  9.46k|                            return OpCode::DIV;
  129|  9.46k|                        }
  130|  9.88k|                        break;
  131|       |
  132|  9.88k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 1.26k, False: 332k]
  ------------------
  133|  8.54k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 7.27k, False: 326k]
  ------------------
  134|  8.54k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 7.01k, False: 1.53k]
  ------------------
  135|  7.01k|                        {
  136|  7.01k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 3.33k, False: 3.67k]
  ------------------
  137|  3.33k|                            {
  138|  3.33k|                                return OpCode::EQD;
  139|  3.33k|                            }
  140|  3.67k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 2.65k, False: 1.02k]
  ------------------
  141|  2.65k|                            {
  142|  2.65k|                                return OpCode::EQF;
  143|  2.65k|                            }
  144|  7.01k|                        }
  145|  2.55k|                        break;
  146|       |
  147|  20.6k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 20.6k, False: 313k]
  ------------------
  148|  24.9k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 4.25k, False: 329k]
  ------------------
  149|  24.9k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 9.54k, False: 15.4k]
  ------------------
  150|  9.54k|                        {
  151|  9.54k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 6.81k, False: 2.72k]
  ------------------
  152|  6.81k|                            {
  153|  6.81k|                                return OpCode::GED;
  154|  6.81k|                            }
  155|  2.72k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 1.41k, False: 1.31k]
  ------------------
  156|  1.41k|                            {
  157|  1.41k|                                return OpCode::GEF;
  158|  1.41k|                            }
  159|  9.54k|                        }
  160|  15.4k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 7.03k, False: 8.36k]
  ------------------
  161|  7.03k|                        {
  162|  7.03k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 1.95k, False: 5.08k]
  ------------------
  163|  1.95k|                            {
  164|  1.95k|                                return OpCode::GTD;
  165|  1.95k|                            }
  166|  5.08k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 1.86k, False: 3.22k]
  ------------------
  167|  1.86k|                            {
  168|  1.86k|                                return OpCode::GTF;
  169|  1.86k|                            }
  170|  5.08k|                        }
  171|  12.9k|                        break;
  172|       |
  173|  12.9k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 1.90k, False: 331k]
  ------------------
  174|  9.67k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 7.77k, False: 326k]
  ------------------
  175|  9.67k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 7.46k, False: 2.21k]
  |  Branch (175:29): [True: 5.02k, False: 4.65k]
  |  Branch (175:45): [True: 5.02k, False: 2.44k]
  ------------------
  176|  5.02k|                        {
  177|  5.02k|                            return OpCode::JAL;
  178|  5.02k|                        }
  179|  4.65k|                        break;
  180|       |
  181|  12.7k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 12.7k, False: 321k]
  ------------------
  182|  37.2k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 24.5k, False: 309k]
  ------------------
  183|  37.2k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 3.27k, False: 34.0k]
  ------------------
  184|  37.2k|                        {
  185|  7.70k|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 7.70k, False: 29.5k]
  ------------------
  186|  9.42k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 1.71k, False: 35.5k]
  ------------------
  187|  9.42k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 3.91k, False: 5.51k]
  ------------------
  188|  3.91k|                                {
  189|  3.91k|                                    return OpCode::LBU;
  190|  3.91k|                                }
  191|  5.51k|                                break;
  192|       |
  193|  5.51k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 5.19k, False: 32.0k]
  ------------------
  194|  7.60k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 2.41k, False: 34.8k]
  ------------------
  195|  7.60k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 2.43k, False: 5.17k]
  ------------------
  196|  2.43k|                                {
  197|  2.43k|                                    return OpCode::LED;
  198|  2.43k|                                }
  199|  5.17k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 3.84k, False: 1.32k]
  ------------------
  200|  3.84k|                                {
  201|  3.84k|                                    return OpCode::LEF;
  202|  3.84k|                                }
  203|  1.32k|                                break;
  204|       |
  205|  1.32k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 686, False: 36.6k]
  ------------------
  206|  5.03k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 4.35k, False: 32.9k]
  ------------------
  207|  5.03k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 3.33k, False: 1.70k]
  ------------------
  208|  3.33k|                                {
  209|  3.33k|                                    return OpCode::LHI;
  210|  3.33k|                                }
  211|  1.70k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 935, False: 768]
  ------------------
  212|    935|                                {
  213|    935|                                    return OpCode::LHU;
  214|    935|                                }
  215|    768|                                break;
  216|       |
  217|  3.34k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 3.34k, False: 33.9k]
  ------------------
  218|  6.39k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 3.05k, False: 34.2k]
  ------------------
  219|  6.39k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 3.72k, False: 2.66k]
  ------------------
  220|  3.72k|                                {
  221|  3.72k|                                    return OpCode::LTD;
  222|  3.72k|                                }
  223|  2.66k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 1.54k, False: 1.12k]
  ------------------
  224|  1.54k|                                {
  225|  1.54k|                                    return OpCode::LTF;
  226|  1.54k|                                }
  227|  1.12k|                                break;
  228|       |
  229|  1.72k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 1.72k, False: 35.5k]
  ------------------
  230|  5.54k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 3.81k, False: 33.4k]
  ------------------
  231|  5.54k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 2.98k, False: 2.55k]
  ------------------
  232|  2.98k|                                {
  233|  2.98k|                                    return OpCode::LWU;
  234|  2.98k|                                }
  235|  2.55k|                                break;
  236|  37.2k|                        }
  237|  14.5k|                        break;
  238|       |
  239|  14.5k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 3.00k, False: 330k]
  ------------------
  240|  12.4k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 9.40k, False: 324k]
  ------------------
  241|  12.4k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 7.03k, False: 5.38k]
  ------------------
  242|  7.03k|                        {
  243|  7.03k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 2.78k, False: 4.24k]
  ------------------
  244|  2.78k|                            {
  245|  2.78k|                                return OpCode::NED;
  246|  2.78k|                            }
  247|  4.24k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 2.82k, False: 1.42k]
  ------------------
  248|  2.82k|                            {
  249|  2.82k|                                return OpCode::NEF;
  250|  2.82k|                            }
  251|  7.03k|                        }
  252|  5.38k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 3.39k, False: 1.98k]
  |  Branch (252:34): [True: 2.47k, False: 2.90k]
  |  Branch (252:50): [True: 2.47k, False: 916]
  ------------------
  253|  2.47k|                        {
  254|  2.47k|                            return OpCode::NOP;
  255|  2.47k|                        }
  256|       |
  257|  4.32k|                        break;
  258|       |
  259|  4.32k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 2.62k, False: 331k]
  ------------------
  260|  8.96k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 6.33k, False: 327k]
  ------------------
  261|  8.96k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 5.33k, False: 3.62k]
  |  Branch (261:29): [True: 2.70k, False: 6.26k]
  |  Branch (261:45): [True: 2.70k, False: 2.63k]
  ------------------
  262|  2.70k|                        {
  263|  2.70k|                            return OpCode::ORI;
  264|  2.70k|                        }
  265|  6.26k|                        break;
  266|       |
  267|  38.4k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 38.4k, False: 295k]
  ------------------
  268|  80.8k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 42.3k, False: 291k]
  ------------------
  269|  80.8k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 10.1k, False: 70.7k]
  ------------------
  270|  80.8k|                        {
  271|  5.53k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 5.53k, False: 75.3k]
  ------------------
  272|  6.32k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 793, False: 80.0k]
  ------------------
  273|  6.32k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 3.11k, False: 3.21k]
  ------------------
  274|  3.11k|                                {
  275|  3.11k|                                    return OpCode::SBU;
  276|  3.11k|                                }
  277|  3.21k|                                break;
  278|       |
  279|  3.60k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 3.60k, False: 77.2k]
  ------------------
  280|  6.01k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 2.40k, False: 78.4k]
  ------------------
  281|  6.01k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 3.57k, False: 2.43k]
  ------------------
  282|  3.57k|                                {
  283|  3.57k|                                    return OpCode::SEQ;
  284|  3.57k|                                }
  285|  2.43k|                                break;
  286|       |
  287|  5.21k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 5.21k, False: 75.6k]
  ------------------
  288|  8.22k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 3.00k, False: 77.8k]
  ------------------
  289|  8.22k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 2.13k, False: 6.08k]
  ------------------
  290|  2.13k|                                {
  291|  2.13k|                                    return OpCode::SGE;
  292|  2.13k|                                }
  293|  6.08k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 2.34k, False: 3.74k]
  ------------------
  294|  2.34k|                                {
  295|  2.34k|                                    return OpCode::SGT;
  296|  2.34k|                                }
  297|  3.74k|                                break;
  298|       |
  299|  3.74k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 1.49k, False: 79.3k]
  ------------------
  300|  2.75k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 1.25k, False: 79.5k]
  ------------------
  301|  2.75k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 2.43k, False: 315]
  ------------------
  302|  2.43k|                                {
  303|  2.43k|                                    return OpCode::SHU;
  304|  2.43k|                                }
  305|    315|                                break;
  306|       |
  307|  7.10k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 7.10k, False: 73.7k]
  ------------------
  308|  17.7k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 10.6k, False: 70.2k]
  ------------------
  309|  17.7k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 1.82k, False: 15.9k]
  ------------------
  310|  17.7k|                                {
  311|  1.65k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 1.65k, False: 16.0k]
  ------------------
  312|  4.85k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 3.20k, False: 14.5k]
  ------------------
  313|  4.85k|                                        return OpCode::SLA;
  314|       |
  315|  1.52k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 1.52k, False: 16.2k]
  ------------------
  316|  4.28k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 2.76k, False: 14.9k]
  ------------------
  317|  4.28k|                                        return OpCode::SLE;
  318|       |
  319|  1.94k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 1.94k, False: 15.7k]
  ------------------
  320|  3.98k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 2.03k, False: 15.7k]
  ------------------
  321|  3.98k|                                        return OpCode::SLL;
  322|       |
  323|  1.92k|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 1.92k, False: 15.8k]
  ------------------
  324|  2.79k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 872, False: 16.8k]
  ------------------
  325|  2.79k|                                        return OpCode::SLT;
  326|  17.7k|                                }
  327|  1.82k|                                break;
  328|       |
  329|  2.66k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 2.66k, False: 78.1k]
  ------------------
  330|  6.51k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 3.84k, False: 76.9k]
  ------------------
  331|  6.51k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 3.63k, False: 2.87k]
  ------------------
  332|  3.63k|                                {
  333|  3.63k|                                    return OpCode::SNE;
  334|  3.63k|                                }
  335|  2.87k|                                break;
  336|       |
  337|  8.22k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 8.22k, False: 72.6k]
  ------------------
  338|  11.0k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 2.86k, False: 77.9k]
  ------------------
  339|  11.0k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 6.84k, False: 4.24k]
  ------------------
  340|  6.84k|                                {
  341|  6.84k|                                    return OpCode::SRA;
  342|  6.84k|                                }
  343|  4.24k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 3.11k, False: 1.12k]
  ------------------
  344|  3.11k|                                {
  345|  3.11k|                                    return OpCode::SRL;
  346|  3.11k|                                }
  347|  1.12k|                                break;
  348|       |
  349|  2.61k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 2.61k, False: 78.2k]
  ------------------
  350|  5.05k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 2.43k, False: 78.4k]
  ------------------
  351|  5.05k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 3.81k, False: 1.24k]
  ------------------
  352|  3.81k|                                {
  353|  3.81k|                                    return OpCode::SUB;
  354|  3.81k|                                }
  355|  1.24k|                                break;
  356|       |
  357|  1.88k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 1.88k, False: 78.9k]
  ------------------
  358|  7.01k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 5.13k, False: 75.7k]
  ------------------
  359|  7.01k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 2.85k, False: 4.16k]
  ------------------
  360|  2.85k|                                {
  361|  2.85k|                                    return OpCode::SWU;
  362|  2.85k|                                }
  363|  4.16k|                                break;
  364|  80.8k|                        }
  365|       |
  366|  34.7k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 3.73k, False: 330k]
  ------------------
  367|  37.7k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 2.93k, False: 330k]
  ------------------
  368|  37.7k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 5.98k, False: 31.7k]
  |  Branch (368:29): [True: 3.57k, False: 34.1k]
  |  Branch (368:45): [True: 3.57k, False: 2.41k]
  ------------------
  369|  3.57k|                        {
  370|  3.57k|                            return OpCode::XOR;
  371|  3.57k|                        }
  372|  34.1k|                        break;
  373|   333k|                }
  374|   206k|                break;
  375|   333k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   410k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 410k, False: 1.31M]
  ------------------
  379|   410k|                char c1 = token[0];
  380|   410k|                char c2 = token[1];
  381|   410k|                char c3 = token[2];
  382|   410k|                char c4 = token[3];
  383|       |
  384|   410k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 89.7k, False: 320k]
  ------------------
  385|   410k|                {
  386|  20.8k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 20.8k, False: 389k]
  ------------------
  387|  44.5k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 23.7k, False: 386k]
  ------------------
  388|  44.5k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 2.94k, False: 41.6k]
  ------------------
  389|  44.5k|                        {
  390|  17.4k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 17.4k, False: 27.1k]
  ------------------
  391|  33.5k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 16.1k, False: 28.4k]
  ------------------
  392|  33.5k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 30.6k, False: 2.92k]
  ------------------
  393|  30.6k|                                {
  394|  30.6k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 2.60k, False: 28.0k]
  ------------------
  395|  30.6k|                                    {
  396|  5.86k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 5.86k, False: 24.7k]
  ------------------
  397|  8.84k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 2.98k, False: 27.6k]
  ------------------
  398|  8.84k|                                            return OpCode::ADDD;
  399|       |
  400|  1.95k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 1.95k, False: 28.6k]
  ------------------
  401|  3.27k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 1.31k, False: 29.3k]
  ------------------
  402|  3.27k|                                            return OpCode::ADDF;
  403|       |
  404|  3.07k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 3.07k, False: 27.5k]
  ------------------
  405|  5.39k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 2.31k, False: 28.3k]
  ------------------
  406|  5.39k|                                            return OpCode::ADDI;
  407|       |
  408|  5.80k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 5.80k, False: 24.8k]
  ------------------
  409|  10.5k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 4.72k, False: 25.9k]
  ------------------
  410|  10.5k|                                            return OpCode::ADDU;
  411|  30.6k|                                    }
  412|  30.6k|                                }
  413|  5.53k|                                break;
  414|       |
  415|  5.53k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 1.92k, False: 42.6k]
  ------------------
  416|  8.06k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 6.14k, False: 38.4k]
  ------------------
  417|  8.06k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 4.44k, False: 3.62k]
  |  Branch (417:37): [True: 2.59k, False: 5.46k]
  |  Branch (417:53): [True: 2.59k, False: 1.84k]
  ------------------
  418|  2.59k|                                {
  419|  2.59k|                                    return OpCode::ANDI;
  420|  2.59k|                                }
  421|       |
  422|  5.46k|                                break;
  423|  44.5k|                        }
  424|  13.9k|                        break;
  425|       |
  426|  13.9k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 9.16k, False: 401k]
  ------------------
  427|  24.7k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 15.6k, False: 394k]
  ------------------
  428|  24.7k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 1.74k, False: 23.0k]
  ------------------
  429|  24.7k|                        {
  430|  3.70k|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 3.70k, False: 21.0k]
  ------------------
  431|  4.80k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 1.10k, False: 23.6k]
  ------------------
  432|  4.80k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 2.65k, False: 2.14k]
  |  Branch (432:37): [True: 1.09k, False: 3.71k]
  |  Branch (432:53): [True: 1.09k, False: 1.56k]
  ------------------
  433|  1.09k|                                {
  434|  1.09k|                                    return OpCode::BEQZ;
  435|  1.09k|                                }
  436|  3.71k|                                break;
  437|       |
  438|  3.71k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 1.90k, False: 22.8k]
  ------------------
  439|  7.57k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 5.66k, False: 19.1k]
  ------------------
  440|  7.57k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 6.32k, False: 1.25k]
  ------------------
  441|  6.32k|                                {
  442|  6.32k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 3.17k, False: 3.14k]
  ------------------
  443|  3.17k|                                    {
  444|  3.17k|                                        return OpCode::BFPF;
  445|  3.17k|                                    }
  446|  3.14k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 2.54k, False: 608]
  ------------------
  447|  2.54k|                                    {
  448|  2.54k|                                        return OpCode::BFPT;
  449|  2.54k|                                    }
  450|  6.32k|                                }
  451|  1.86k|                                break;
  452|       |
  453|  3.45k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 3.45k, False: 21.3k]
  ------------------
  454|  10.6k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 7.21k, False: 17.5k]
  ------------------
  455|  10.6k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 9.24k, False: 1.41k]
  |  Branch (455:37): [True: 4.12k, False: 6.53k]
  |  Branch (455:53): [True: 4.12k, False: 5.12k]
  ------------------
  456|  4.12k|                                {
  457|  4.12k|                                    return OpCode::BNEZ;
  458|  4.12k|                                }
  459|  24.7k|                        }
  460|  13.8k|                        break;
  461|       |
  462|  13.8k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 4.37k, False: 406k]
  ------------------
  463|  33.9k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 29.5k, False: 380k]
  ------------------
  464|  33.9k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 28.2k, False: 5.63k]
  |  Branch (464:29): [True: 18.9k, False: 14.9k]
  |  Branch (464:45): [True: 18.9k, False: 9.33k]
  ------------------
  465|  18.9k|                        {
  466|  18.9k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 2.97k, False: 15.9k]
  ------------------
  467|  18.9k|                            {
  468|  1.40k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 1.40k, False: 17.5k]
  ------------------
  469|  3.18k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 1.77k, False: 17.1k]
  ------------------
  470|  3.18k|                                    return OpCode::DIVD;
  471|       |
  472|  1.82k|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 1.82k, False: 17.1k]
  ------------------
  473|  3.04k|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 1.22k, False: 17.7k]
  ------------------
  474|  3.04k|                                    return OpCode::DIVF;
  475|       |
  476|  3.41k|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 3.41k, False: 15.5k]
  ------------------
  477|  6.48k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 3.06k, False: 15.8k]
  ------------------
  478|  6.48k|                                    return OpCode::DIVI;
  479|       |
  480|  2.35k|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 2.35k, False: 16.5k]
  ------------------
  481|  3.24k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 894, False: 18.0k]
  ------------------
  482|  3.24k|                                    return OpCode::DIVU;
  483|  18.9k|                            }
  484|  18.9k|                        }
  485|  17.9k|                        break;
  486|       |
  487|  17.9k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 1.34k, False: 409k]
  ------------------
  488|  12.3k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 10.9k, False: 399k]
  ------------------
  489|  12.3k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 10.8k, False: 1.54k]
  |  Branch (489:29): [True: 8.01k, False: 4.33k]
  |  Branch (489:45): [True: 10.0k, False: 773]
  |  Branch (489:61): [True: 8.01k, False: 2.01k]
  ------------------
  490|  8.01k|                        {
  491|  8.01k|                            return OpCode::HALT;
  492|  8.01k|                        }
  493|  4.33k|                        break;
  494|       |
  495|  4.33k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 975, False: 409k]
  ------------------
  496|  13.9k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 12.9k, False: 397k]
  ------------------
  497|  13.9k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 12.7k, False: 1.11k]
  |  Branch (497:29): [True: 5.06k, False: 8.84k]
  |  Branch (497:45): [True: 10.2k, False: 2.56k]
  |  Branch (497:61): [True: 5.06k, False: 5.16k]
  ------------------
  498|  5.06k|                        {
  499|  5.06k|                            return OpCode::JALR;
  500|  5.06k|                        }
  501|  8.84k|                        break;
  502|       |
  503|  8.84k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 3.81k, False: 406k]
  ------------------
  504|  25.9k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 22.1k, False: 388k]
  ------------------
  505|  25.9k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 14.1k, False: 11.7k]
  |  Branch (505:29): [True: 12.7k, False: 13.1k]
  |  Branch (505:45): [True: 12.7k, False: 1.45k]
  ------------------
  506|  12.7k|                        {
  507|  12.7k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 2.04k, False: 10.6k]
  ------------------
  508|  2.04k|                            {
  509|  2.04k|                                return OpCode::MOVD;
  510|  2.04k|                            }
  511|  10.6k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 6.13k, False: 4.56k]
  ------------------
  512|  6.13k|                            {
  513|  6.13k|                                return OpCode::MOVF;
  514|  6.13k|                            }
  515|  12.7k|                        }
  516|  13.1k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 10.2k, False: 2.98k]
  |  Branch (516:34): [True: 8.37k, False: 4.82k]
  |  Branch (516:50): [True: 9.36k, False: 850]
  |  Branch (516:66): [True: 8.37k, False: 993]
  ------------------
  517|  8.37k|                        {
  518|  8.37k|                            return OpCode::MULT;
  519|  8.37k|                        }
  520|  9.39k|                        break;
  521|       |
  522|  71.5k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 71.5k, False: 338k]
  ------------------
  523|   146k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 75.1k, False: 335k]
  ------------------
  524|   146k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 6.83k, False: 139k]
  ------------------
  525|   146k|                        {
  526|  11.8k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 11.8k, False: 134k]
  ------------------
  527|  14.6k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 2.83k, False: 143k]
  ------------------
  528|  14.6k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 11.9k, False: 2.74k]
  ------------------
  529|  11.9k|                                {
  530|  11.9k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 5.27k, False: 6.62k]
  ------------------
  531|  5.27k|                                    {
  532|  5.27k|                                        return OpCode::SEQI;
  533|  5.27k|                                    }
  534|  6.62k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 2.69k, False: 3.93k]
  ------------------
  535|  2.69k|                                    {
  536|  2.69k|                                        return OpCode::SEQU;
  537|  2.69k|                                    }
  538|  11.9k|                                }
  539|  6.68k|                                break;
  540|       |
  541|  7.24k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 7.24k, False: 139k]
  ------------------
  542|  30.1k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 22.9k, False: 123k]
  ------------------
  543|  30.1k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 15.0k, False: 15.1k]
  ------------------
  544|  15.0k|                                {
  545|  15.0k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 4.35k, False: 10.7k]
  ------------------
  546|  4.35k|                                    {
  547|  4.35k|                                        return OpCode::SGEI;
  548|  4.35k|                                    }
  549|  10.7k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 8.85k, False: 1.87k]
  ------------------
  550|  8.85k|                                    {
  551|  8.85k|                                        return OpCode::SGEU;
  552|  8.85k|                                    }
  553|  15.0k|                                }
  554|  15.1k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 11.9k, False: 3.18k]
  ------------------
  555|  11.9k|                                {
  556|  11.9k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 6.52k, False: 5.39k]
  ------------------
  557|  6.52k|                                    {
  558|  6.52k|                                        return OpCode::SGTI;
  559|  6.52k|                                    }
  560|  5.39k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 4.42k, False: 972]
  ------------------
  561|  4.42k|                                    {
  562|  4.42k|                                        return OpCode::SGTU;
  563|  4.42k|                                    }
  564|  11.9k|                                }
  565|  6.03k|                                break;
  566|       |
  567|  8.56k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 8.56k, False: 138k]
  ------------------
  568|  38.1k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 29.6k, False: 117k]
  ------------------
  569|  38.1k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 3.26k, False: 34.9k]
  ------------------
  570|  38.1k|                                {
  571|  3.18k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 3.18k, False: 35.0k]
  ------------------
  572|  4.62k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 1.43k, False: 36.7k]
  ------------------
  573|  4.62k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 3.14k, False: 1.48k]
  ------------------
  574|  3.14k|                                        {
  575|  3.14k|                                            return OpCode::SLAI;
  576|  3.14k|                                        }
  577|  1.48k|                                        break;
  578|       |
  579|  6.73k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 6.73k, False: 31.4k]
  ------------------
  580|  8.50k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 1.76k, False: 36.4k]
  ------------------
  581|  8.50k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 3.91k, False: 4.58k]
  ------------------
  582|  3.91k|                                        {
  583|  3.91k|                                            return OpCode::SLEI;
  584|  3.91k|                                        }
  585|  4.58k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 2.92k, False: 1.66k]
  ------------------
  586|  2.92k|                                        {
  587|  2.92k|                                            return OpCode::SLEU;
  588|  2.92k|                                        }
  589|  1.66k|                                        break;
  590|       |
  591|  1.66k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 1.40k, False: 36.7k]
  ------------------
  592|  4.81k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 3.41k, False: 34.7k]
  ------------------
  593|  4.81k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 2.88k, False: 1.92k]
  ------------------
  594|  2.88k|                                        {
  595|  2.88k|                                            return OpCode::SLLI;
  596|  2.88k|                                        }
  597|  1.92k|                                        break;
  598|       |
  599|  12.3k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 12.3k, False: 25.7k]
  ------------------
  600|  16.9k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 4.60k, False: 33.5k]
  ------------------
  601|  16.9k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 3.43k, False: 13.5k]
  ------------------
  602|  3.43k|                                        {
  603|  3.43k|                                            return OpCode::SLTI;
  604|  3.43k|                                        }
  605|  13.5k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 9.31k, False: 4.25k]
  ------------------
  606|  9.31k|                                        {
  607|  9.31k|                                            return OpCode::SLTU;
  608|  9.31k|                                        }
  609|  4.25k|                                        break;
  610|  38.1k|                                }
  611|       |
  612|  13.2k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 675, False: 146k]
  ------------------
  613|  26.2k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 12.9k, False: 133k]
  ------------------
  614|  26.2k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 14.6k, False: 11.5k]
  ------------------
  615|  14.6k|                                {
  616|  14.6k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 3.36k, False: 11.2k]
  ------------------
  617|  3.36k|                                    {
  618|  3.36k|                                        return OpCode::SNEI;
  619|  3.36k|                                    }
  620|  11.2k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 5.55k, False: 5.72k]
  ------------------
  621|  5.55k|                                    {
  622|  5.55k|                                        return OpCode::SNEU;
  623|  5.55k|                                    }
  624|  14.6k|                                }
  625|  17.3k|                                break;
  626|       |
  627|  17.3k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 9.96k, False: 136k]
  ------------------
  628|  16.2k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 6.27k, False: 140k]
  ------------------
  629|  16.2k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 9.37k, False: 6.86k]
  |  Branch (629:37): [True: 8.11k, False: 8.12k]
  |  Branch (629:53): [True: 8.11k, False: 1.26k]
  ------------------
  630|  8.11k|                                {
  631|  8.11k|                                    return OpCode::SRAI;
  632|  8.11k|                                }
  633|  8.12k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 6.57k, False: 1.55k]
  |  Branch (633:42): [True: 2.46k, False: 5.65k]
  |  Branch (633:58): [True: 2.46k, False: 4.10k]
  ------------------
  634|  2.46k|                                {
  635|  2.46k|                                    return OpCode::SRLI;
  636|  2.46k|                                }
  637|  5.65k|                                break;
  638|       |
  639|  5.65k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 5.19k, False: 141k]
  ------------------
  640|  26.9k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 21.7k, False: 124k]
  ------------------
  641|  26.9k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 25.2k, False: 1.71k]
  ------------------
  642|  25.2k|                                {
  643|  25.2k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 2.03k, False: 23.2k]
  ------------------
  644|  25.2k|                                    {
  645|  7.10k|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 7.10k, False: 18.1k]
  ------------------
  646|  8.91k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 1.81k, False: 23.4k]
  ------------------
  647|  8.91k|                                            return OpCode::SUBD;
  648|       |
  649|  2.15k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 2.15k, False: 23.1k]
  ------------------
  650|  4.30k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 2.14k, False: 23.1k]
  ------------------
  651|  4.30k|                                            return OpCode::SUBF;
  652|       |
  653|  1.65k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 1.65k, False: 23.6k]
  ------------------
  654|  6.35k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 4.69k, False: 20.5k]
  ------------------
  655|  6.35k|                                            return OpCode::SUBI;
  656|       |
  657|  1.51k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 1.51k, False: 23.7k]
  ------------------
  658|  3.65k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 2.14k, False: 23.1k]
  ------------------
  659|  3.65k|                                            return OpCode::SUBU;
  660|  25.2k|                                    }
  661|  25.2k|                                }
  662|  3.75k|                                break;
  663|   146k|                        }
  664|  46.2k|                        break;
  665|       |
  666|  46.2k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 1.25k, False: 409k]
  ------------------
  667|  4.72k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 3.47k, False: 406k]
  ------------------
  668|  4.72k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 2.92k, False: 1.80k]
  |  Branch (668:29): [True: 1.41k, False: 3.31k]
  |  Branch (668:45): [True: 2.32k, False: 597]
  |  Branch (668:61): [True: 1.41k, False: 914]
  ------------------
  669|  1.41k|                        {
  670|  1.41k|                            return OpCode::TRAP;
  671|  1.41k|                        }
  672|  3.31k|                        break;
  673|  8.16k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 8.16k, False: 402k]
  ------------------
  674|  13.8k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 5.67k, False: 404k]
  ------------------
  675|  13.8k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 10.1k, False: 3.67k]
  |  Branch (675:29): [True: 3.91k, False: 9.92k]
  |  Branch (675:45): [True: 8.59k, False: 1.57k]
  |  Branch (675:61): [True: 3.91k, False: 4.68k]
  ------------------
  676|  3.91k|                        {
  677|  3.91k|                            return OpCode::XORI;
  678|  3.91k|                        }
  679|  9.92k|                        break;
  680|   410k|                }
  681|   217k|                break;
  682|   410k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|   242k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 242k, False: 1.48M]
  ------------------
  686|   242k|                char c1 = token[0];
  687|   242k|                char c2 = token[1];
  688|   242k|                char c3 = token[2];
  689|   242k|                char c4 = token[3];
  690|   242k|                char c5 = token[4];
  691|       |
  692|   242k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 56.8k, False: 185k]
  ------------------
  693|   242k|                {
  694|  5.54k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 5.54k, False: 237k]
  ------------------
  695|  26.3k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 20.8k, False: 221k]
  ------------------
  696|  26.3k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 23.9k, False: 2.48k]
  |  Branch (696:29): [True: 4.23k, False: 22.1k]
  |  Branch (696:45): [True: 20.3k, False: 3.55k]
  |  Branch (696:61): [True: 16.2k, False: 4.13k]
  |  Branch (696:77): [True: 4.23k, False: 11.9k]
  ------------------
  697|  4.23k|                        {
  698|  4.23k|                            return OpCode::ADDUI;
  699|  4.23k|                        }
  700|  22.1k|                        break;
  701|       |
  702|  22.1k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 1.92k, False: 240k]
  ------------------
  703|  24.3k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 22.4k, False: 220k]
  ------------------
  704|  24.3k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 20.2k, False: 4.10k]
  |  Branch (704:29): [True: 4.03k, False: 20.3k]
  |  Branch (704:45): [True: 11.0k, False: 9.19k]
  |  Branch (704:61): [True: 7.30k, False: 3.75k]
  |  Branch (704:77): [True: 4.03k, False: 3.27k]
  ------------------
  705|  4.03k|                        {
  706|  4.03k|                            return OpCode::DIVUI;
  707|  4.03k|                        }
  708|  20.3k|                        break;
  709|       |
  710|  20.3k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 9.66k, False: 232k]
  ------------------
  711|  41.2k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 31.5k, False: 211k]
  ------------------
  712|  41.2k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 29.8k, False: 11.3k]
  |  Branch (712:29): [True: 24.7k, False: 16.5k]
  |  Branch (712:45): [True: 25.5k, False: 4.31k]
  |  Branch (712:61): [True: 24.7k, False: 813]
  ------------------
  713|  24.7k|                        {
  714|  24.7k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 6.22k, False: 18.5k]
  ------------------
  715|  24.7k|                            {
  716|    946|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 946, False: 23.7k]
  ------------------
  717|  1.90k|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 963, False: 23.7k]
  ------------------
  718|  1.90k|                                    return OpCode::MULTD;
  719|       |
  720|  4.61k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 4.61k, False: 20.1k]
  ------------------
  721|  6.98k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 2.37k, False: 22.3k]
  ------------------
  722|  6.98k|                                    return OpCode::MULTF;
  723|       |
  724|  2.08k|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 2.08k, False: 22.6k]
  ------------------
  725|  4.85k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 2.76k, False: 21.9k]
  ------------------
  726|  4.85k|                                    return OpCode::MULTI;
  727|       |
  728|  1.07k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 1.07k, False: 23.6k]
  ------------------
  729|  4.77k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 3.69k, False: 21.0k]
  ------------------
  730|  4.77k|                                    return OpCode::MULTU;
  731|  24.7k|                            }
  732|  24.7k|                        }
  733|  22.7k|                        break;
  734|       |
  735|  38.9k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 38.9k, False: 203k]
  ------------------
  736|  93.8k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 54.8k, False: 187k]
  ------------------
  737|  93.8k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 4.31k, False: 89.4k]
  ------------------
  738|  93.8k|                        {
  739|  15.7k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 15.7k, False: 78.1k]
  ------------------
  740|  23.1k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 7.49k, False: 86.3k]
  ------------------
  741|  23.1k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 15.7k, False: 7.46k]
  |  Branch (741:37): [True: 3.34k, False: 19.8k]
  |  Branch (741:53): [True: 8.57k, False: 7.16k]
  |  Branch (741:69): [True: 3.34k, False: 5.22k]
  ------------------
  742|  3.34k|                                {
  743|  3.34k|                                    return OpCode::SEQUI;
  744|  3.34k|                                }
  745|  19.8k|                                break;
  746|       |
  747|  19.8k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 7.28k, False: 86.5k]
  ------------------
  748|  16.8k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 9.51k, False: 84.2k]
  ------------------
  749|  16.8k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 7.78k, False: 9.01k]
  |  Branch (749:37): [True: 3.67k, False: 13.1k]
  |  Branch (749:53): [True: 5.32k, False: 2.46k]
  |  Branch (749:69): [True: 3.67k, False: 1.65k]
  ------------------
  750|  3.67k|                                {
  751|  3.67k|                                    return OpCode::SGEUI;
  752|  3.67k|                                }
  753|  13.1k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 8.79k, False: 4.33k]
  |  Branch (753:42): [True: 4.39k, False: 8.74k]
  |  Branch (753:58): [True: 7.59k, False: 1.19k]
  |  Branch (753:74): [True: 4.39k, False: 3.20k]
  ------------------
  754|  4.39k|                                {
  755|  4.39k|                                    return OpCode::SGTUI;
  756|  4.39k|                                }
  757|  8.74k|                                break;
  758|       |
  759|  8.74k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 5.09k, False: 88.7k]
  ------------------
  760|  28.1k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 23.0k, False: 70.7k]
  ------------------
  761|  28.1k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 11.0k, False: 17.0k]
  |  Branch (761:37): [True: 5.73k, False: 22.4k]
  |  Branch (761:53): [True: 8.68k, False: 2.38k]
  |  Branch (761:69): [True: 5.73k, False: 2.94k]
  ------------------
  762|  5.73k|                                {
  763|  5.73k|                                    return OpCode::SLEUI;
  764|  5.73k|                                }
  765|  22.4k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 15.0k, False: 7.35k]
  |  Branch (765:42): [True: 3.38k, False: 19.0k]
  |  Branch (765:58): [True: 12.7k, False: 2.34k]
  |  Branch (765:74): [True: 3.38k, False: 9.32k]
  ------------------
  766|  3.38k|                                {
  767|  3.38k|                                    return OpCode::SLTUI;
  768|  3.38k|                                }
  769|  19.0k|                                break;
  770|       |
  771|  19.0k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 793, False: 93.0k]
  ------------------
  772|  9.72k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 8.93k, False: 84.8k]
  ------------------
  773|  9.72k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 8.85k, False: 872]
  |  Branch (773:37): [True: 4.66k, False: 5.06k]
  |  Branch (773:53): [True: 7.67k, False: 1.17k]
  |  Branch (773:69): [True: 4.66k, False: 3.01k]
  ------------------
  774|  4.66k|                                {
  775|  4.66k|                                    return OpCode::SNEUI;
  776|  4.66k|                                }
  777|  5.06k|                                break;
  778|       |
  779|  5.06k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 3.14k, False: 90.6k]
  ------------------
  780|  11.6k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 8.46k, False: 85.3k]
  ------------------
  781|  11.6k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 9.47k, False: 2.13k]
  |  Branch (781:37): [True: 3.59k, False: 8.01k]
  |  Branch (781:53): [True: 6.36k, False: 3.10k]
  |  Branch (781:69): [True: 3.59k, False: 2.77k]
  ------------------
  782|  3.59k|                                {
  783|  3.59k|                                    return OpCode::SUBUI;
  784|  3.59k|                                }
  785|  8.01k|                                break;
  786|  93.8k|                        }
  787|       |
  788|  65.0k|                        break;
  789|   242k|                }
  790|       |
  791|   187k|                break;
  792|   242k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|   187k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 129k, False: 1.59M]
  ------------------
  796|   129k|                char c1 = token[0];
  797|   129k|                char c2 = token[1];
  798|   129k|                char c3 = token[2];
  799|   129k|                char c4 = token[3];
  800|   129k|                char c5 = token[4];
  801|   129k|                char c6 = token[5];
  802|       |
  803|   129k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 55.0k, False: 74.4k]
  |  Branch (803:21): [True: 48.6k, False: 80.8k]
  |  Branch (803:37): [True: 53.2k, False: 1.82k]
  |  Branch (803:53): [True: 48.6k, False: 4.59k]
  ------------------
  804|  48.6k|                {
  805|  48.6k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 1.59k, False: 47.0k]
  ------------------
  806|  48.6k|                    {
  807|  6.06k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 6.06k, False: 42.5k]
  ------------------
  808|  16.9k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 10.9k, False: 37.7k]
  ------------------
  809|  16.9k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 15.0k, False: 1.95k]
  ------------------
  810|  15.0k|                            {
  811|  15.0k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 2.82k, False: 12.1k]
  ------------------
  812|  2.82k|                                {
  813|  2.82k|                                    return OpCode::CVTD2F;
  814|  2.82k|                                }
  815|  12.1k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 6.68k, False: 5.51k]
  ------------------
  816|  6.68k|                                {
  817|  6.68k|                                    return OpCode::CVTD2I;
  818|  6.68k|                                }
  819|  15.0k|                            }
  820|  7.47k|                            break;
  821|       |
  822|  7.47k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 2.95k, False: 45.6k]
  ------------------
  823|  14.6k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 11.7k, False: 36.9k]
  ------------------
  824|  14.6k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 12.1k, False: 2.56k]
  ------------------
  825|  12.1k|                            {
  826|  12.1k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 6.69k, False: 5.42k]
  ------------------
  827|  6.69k|                                {
  828|  6.69k|                                    return OpCode::CVTF2D;
  829|  6.69k|                                }
  830|  5.42k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 3.86k, False: 1.56k]
  ------------------
  831|  3.86k|                                {
  832|  3.86k|                                    return OpCode::CVTF2I;
  833|  3.86k|                                }
  834|  12.1k|                            }
  835|  4.13k|                            break;
  836|       |
  837|  12.1k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 12.1k, False: 36.5k]
  ------------------
  838|  15.3k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 3.23k, False: 45.4k]
  ------------------
  839|  15.3k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 11.1k, False: 4.18k]
  ------------------
  840|  11.1k|                            {
  841|  11.1k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 4.42k, False: 6.77k]
  ------------------
  842|  4.42k|                                {
  843|  4.42k|                                    return OpCode::CVTI2D;
  844|  4.42k|                                }
  845|  6.77k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 3.60k, False: 3.16k]
  ------------------
  846|  3.60k|                                {
  847|  3.60k|                                    return OpCode::CVTI2F;
  848|  3.60k|                                }
  849|  11.1k|                            }
  850|  48.6k|                    }
  851|  48.6k|                }
  852|  80.8k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 34.5k, False: 46.2k]
  |  Branch (852:26): [True: 10.4k, False: 70.4k]
  |  Branch (852:42): [True: 22.6k, False: 11.9k]
  |  Branch (852:58): [True: 18.0k, False: 4.58k]
  |  Branch (852:74): [True: 17.4k, False: 623]
  ------------------
  853|  80.8k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 14.1k, False: 3.31k]
  |  Branch (853:42): [True: 10.4k, False: 3.75k]
  ------------------
  854|  10.4k|                {
  855|  10.4k|                    return OpCode::MULTUI;
  856|  10.4k|                }
  857|  91.0k|                break;
  858|   129k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  91.0k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 60.9k, False: 1.66M]
  ------------------
  862|  60.9k|                char c1 = token[0];
  863|  60.9k|                char c2 = token[1];
  864|  60.9k|                char c3 = token[2];
  865|  60.9k|                char c4 = token[3];
  866|  60.9k|                char c5 = token[4];
  867|  60.9k|                char c6 = token[5];
  868|  60.9k|                char c7 = token[6];
  869|       |
  870|  60.9k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 28.6k, False: 32.2k]
  |  Branch (870:21): [True: 22.0k, False: 38.9k]
  |  Branch (870:37): [True: 23.0k, False: 5.53k]
  |  Branch (870:53): [True: 22.0k, False: 1.09k]
  ------------------
  871|  22.0k|                {
  872|  22.0k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 11.3k, False: 10.6k]
  |  Branch (872:25): [True: 2.90k, False: 19.1k]
  |  Branch (872:41): [True: 8.55k, False: 2.78k]
  |  Branch (872:54): [True: 7.48k, False: 1.06k]
  |  Branch (872:70): [True: 2.90k, False: 4.58k]
  ------------------
  873|  2.90k|                    {
  874|  2.90k|                        return OpCode::MOVI2FP;
  875|  2.90k|                    }
  876|  19.1k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 10.6k, False: 8.49k]
  |  Branch (876:30): [True: 5.09k, False: 14.0k]
  |  Branch (876:46): [True: 8.27k, False: 2.33k]
  |  Branch (876:62): [True: 6.86k, False: 1.41k]
  |  Branch (876:75): [True: 5.09k, False: 1.77k]
  ------------------
  877|  5.09k|                    {
  878|  5.09k|                        return OpCode::MOVFP2I;
  879|  5.09k|                    }
  880|  22.0k|                }
  881|  52.9k|                break;
  882|  60.9k|            }
  883|       |
  884|  52.9k|            default: {
  ------------------
  |  Branch (884:13): [True: 50.7k, False: 1.67M]
  ------------------
  885|  50.7k|                break;
  886|  60.9k|            }
  887|  1.72M|        }
  888|       |
  889|       |        // None found
  890|  1.18M|        return OpCode::NONE;
  891|  1.72M|    }
_ZN3dlx3iceEcc:
   17|  2.47M|    {
   18|  2.47M|        constexpr const char diff = 'a' - 'A';
   19|  2.47M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 768k, False: 1.70M]
  |  Branch (19:28): [True: 695k, False: 1.00M]
  ------------------
   20|  2.47M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  1.92M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  33.0k|    {
  193|  33.0k|        ParseError err;
  194|       |
  195|  33.0k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  33.0k|        err.m_LineNumber                           = line_number;
  197|  33.0k|        err.m_Column                               = column;
  198|  33.0k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  33.0k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  33.0k|        return err;
  202|  33.0k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  33.0k|    {
  207|  33.0k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  33.0k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  33.0k|                                                         actual_type);
  210|  33.0k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|  2.70k|    {
  216|  2.70k|        ParseError err;
  217|       |
  218|  2.70k|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|  2.70k|        err.m_LineNumber        = line_number;
  220|  2.70k|        err.m_Column            = column;
  221|  2.70k|        err.invalid_number.text = text;
  222|       |
  223|  2.70k|        return err;
  224|  2.70k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|  2.70k|    {
  228|  2.70k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|  2.70k|                                                token.GetColumn().unsafe(), token.GetText());
  230|  2.70k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      3|    {
  235|      3|        ParseError err;
  236|       |
  237|      3|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      3|        err.m_LineNumber = line_number;
  239|      3|        err.m_Column     = column;
  240|       |
  241|      3|        return err;
  242|      3|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      3|    {
  247|      3|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      3|                                                                     token.GetColumn().unsafe());
  249|      3|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   872k|    {
  255|   872k|        ParseError err;
  256|       |
  257|   872k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   872k|        err.m_LineNumber                   = line_number;
  259|   872k|        err.m_Column                       = column;
  260|   872k|        err.unexpected_token.expected_type = expected_type;
  261|   872k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   872k|        return err;
  264|   872k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   872k|    {
  269|   872k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   872k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   872k|                                                  token.GetType());
  272|   872k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|   191k|    {
  277|   191k|        ParseError err;
  278|       |
  279|   191k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|   191k|        err.m_LineNumber                   = line_number;
  281|   191k|        err.m_Column                       = column;
  282|   191k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|   191k|        return err;
  285|   191k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  1.49k|    {
  289|  1.49k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  1.49k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  1.49k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   381k|    {
  296|   381k|        ParseError err;
  297|       |
  298|   381k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   381k|        err.m_LineNumber                       = line_number;
  300|   381k|        err.m_Column                           = column;
  301|   381k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   381k|        return err;
  304|   381k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   381k|    {
  309|   381k|        return ConstructInvalidLabelIdentifierParseError(
  310|   381k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   381k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  85.5k|    {
  317|  85.5k|        ParseError err;
  318|       |
  319|  85.5k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  85.5k|        err.m_LineNumber                     = line_number;
  321|  85.5k|        err.m_Column                         = column;
  322|  85.5k|        err.label_already_defined.label_name = label_name;
  323|  85.5k|        err.label_already_defined.at_line    = at_line;
  324|  85.5k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  85.5k|        return err;
  327|  85.5k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  85.5k|    {
  332|  85.5k|        return ConstructLabelAlreadyDefinedParseError(
  333|  85.5k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  85.5k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  85.5k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   214k|    {
  340|   214k|        ParseError err;
  341|       |
  342|   214k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   214k|        err.m_LineNumber = line_number;
  344|   214k|        err.m_Column     = column;
  345|       |
  346|   214k|        return err;
  347|   214k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   214k|    {
  352|   214k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   214k|                                                        token.GetColumn().unsafe());
  354|   214k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  27.3k|    {
  360|  27.3k|        ParseError err;
  361|       |
  362|  27.3k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  27.3k|        err.m_LineNumber               = line_number;
  364|  27.3k|        err.m_Column                   = column;
  365|  27.3k|        err.too_few_arguments.required = required;
  366|  27.3k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  27.3k|        return err;
  369|  27.3k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  27.3k|    {
  374|  27.3k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  27.3k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  27.3k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  56.6k|    {
  381|  56.6k|        ParseError err;
  382|       |
  383|  56.6k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  56.6k|        err.m_LineNumber           = line_number;
  385|  56.6k|        err.m_Column               = column;
  386|  56.6k|        err.empty_label.label_name = label_name;
  387|       |
  388|  56.6k|        return err;
  389|  56.6k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  56.6k|    {
  393|  56.6k|        return ConstructEmptyLabelParseError(
  394|  56.6k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  56.6k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 47.4k, False: 9.27k]
  ------------------
  396|  47.4k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  56.6k|                        token.GetText());
  398|  56.6k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  56.0k|    {
  403|  56.0k|        ParseError err;
  404|       |
  405|  56.0k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  56.0k|        err.m_LineNumber = line_number;
  407|  56.0k|        err.m_Column     = column;
  408|       |
  409|  56.0k|        return err;
  410|  56.0k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  56.0k|    {
  414|  56.0k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  56.0k|                                               token.GetColumn().unsafe());
  416|  56.0k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  1.92M|    {
   19|  1.92M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  1.92M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  11.3k|    {
  182|  11.3k|        ParsedProgram program;
  183|       |
  184|  11.3k|        program.m_Tokens = tokens;
  185|       |
  186|  11.3k|        phi::boolean line_has_instruction{false};
  187|  11.3k|        phi::usize   label_count{0u};
  188|       |
  189|  2.14M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 2.13M, False: 11.3k]
  ------------------
  190|  2.13M|        {
  191|  2.13M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  2.13M|            switch (current_token.GetType())
  196|  2.13M|            {
  197|       |                // Ignore comments
  198|  9.20k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 9.20k, False: 2.12M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  9.20k|                    break;
  201|       |
  202|   232k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 232k, False: 1.89M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   232k|                    line_has_instruction = false;
  205|   232k|                    break;
  206|       |
  207|   842k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 842k, False: 1.28M]
  ------------------
  208|   842k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 149k, False: 693k]
  ------------------
  209|   149k|                    {
  210|   149k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|   149k|                                current_token, Token::Type::NewLine));
  212|   149k|                        break;
  213|   149k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   693k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 250k, False: 442k]
  ------------------
  218|   250k|                    {
  219|   250k|                        program.AddParseError(
  220|   250k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   250k|                        break;
  222|   250k|                    }
  223|       |
  224|   442k|                    std::string_view label_name = current_token.GetText();
  225|   442k|                    label_name.remove_suffix(1);
  226|       |
  227|   442k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 190k, False: 252k]
  ------------------
  228|   190k|                    {
  229|   190k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|   190k|                                current_token.GetLineNumber().unsafe(),
  231|   190k|                                current_token.GetColumn().unsafe(), label_name));
  232|   190k|                        break;
  233|   190k|                    }
  234|       |
  235|   252k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 105k, False: 147k]
  ------------------
  236|   105k|                    {
  237|   105k|                        program.AddParseError(
  238|   105k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|   105k|                        break;
  240|   105k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|   147k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 85.5k, False: 61.6k]
  ------------------
  244|  85.5k|                    {
  245|       |                        // Find first defintions of label
  246|  85.5k|                        const Token* first_label_definition =
  247|  85.5k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  85.5k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  85.5k|                                    {
  250|  85.5k|                                        std::string_view token_label_name = t.GetText();
  251|  85.5k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  85.5k|                                        if (token_label_name == label_name)
  254|  85.5k|                                        {
  255|  85.5k|                                            return true;
  256|  85.5k|                                        }
  257|  85.5k|                                    }
  258|       |
  259|  85.5k|                                    return false;
  260|  85.5k|                                });
  261|       |
  262|  85.5k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  85.5k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  85.5k|                                current_token, *first_label_definition));
  266|  85.5k|                        break;
  267|  85.5k|                    }
  268|       |
  269|  61.6k|                    program.m_JumpData[label_name] =
  270|  61.6k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  61.6k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  61.6k|                    break;
  277|   147k|                }
  278|       |
  279|   355k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 355k, False: 1.77M]
  ------------------
  280|   355k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 214k, False: 140k]
  ------------------
  281|   214k|                    {
  282|   214k|                        program.AddParseError(
  283|   214k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   214k|                        break;
  285|   214k|                    }
  286|       |
  287|   140k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|   140k|                    PHI_ASSERT(current_token.HasHint());
  291|   140k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|   140k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|   140k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|   140k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|   140k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|   140k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|   140k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|   140k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|   140k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   310k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 290k, False: 20.0k]
  ------------------
  313|   290k|                    {
  314|       |                        // Get next token
  315|   290k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 1.09k, False: 289k]
  ------------------
  316|  1.09k|                        {
  317|  1.09k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|  1.09k|                                    current_token, number_of_argument_required.unsafe(),
  319|  1.09k|                                    argument_num.unsafe()));
  320|  1.09k|                            break;
  321|  1.09k|                        }
  322|       |
  323|   289k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   289k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 137k, False: 152k]
  ------------------
  327|   137k|                        {
  328|   137k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 56.0k, False: 81.2k]
  ------------------
  329|  56.0k|                            {
  330|  56.0k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  56.0k|                            }
  332|       |
  333|   137k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|   137k|                            continue;
  336|   137k|                        }
  337|       |
  338|   152k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 26.3k, False: 125k]
  ------------------
  339|  26.3k|                        {
  340|  26.3k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  26.3k|                                    token, number_of_argument_required.unsafe(),
  342|  26.3k|                                    argument_num.unsafe()));
  343|  26.3k|                            break;
  344|  26.3k|                        }
  345|       |
  346|   125k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|   125k|                                parse_instruction_argument(
  348|   125k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|   125k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 93.5k, False: 32.2k]
  ------------------
  350|  93.5k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  93.5k|                            break;
  353|  93.5k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  32.2k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  32.2k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  32.2k|                        argument_num++;
  360|  32.2k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  32.2k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|   140k|                    program.m_Instructions.emplace_back(instruction);
  368|   140k|                    line_has_instruction = true;
  369|   140k|                    break;
  370|   355k|                }
  371|       |
  372|   691k|                default:
  ------------------
  |  Branch (372:17): [True: 691k, False: 1.44M]
  ------------------
  373|   691k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   691k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 337k, False: 354k]
  ------------------
  375|   337k|                    {
  376|   337k|                        expected_token_type = Token::Type::NewLine;
  377|   337k|                    }
  378|       |
  379|   691k|                    program.AddParseError(
  380|   691k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   691k|                    break;
  382|  2.13M|            }
  383|  2.13M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  11.3k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 3.27k, False: 8.04k]
  ------------------
  387|  3.27k|        {
  388|  71.2k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 67.9k, False: 3.27k]
  ------------------
  389|  67.9k|            {
  390|  67.9k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  67.9k|                const Token& token = *it;
  393|  67.9k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 56.6k, False: 11.2k]
  ------------------
  394|  56.6k|                {
  395|  56.6k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  56.6k|                    --label_count;
  397|  56.6k|                }
  398|  67.9k|            }
  399|  3.27k|        }
  400|       |
  401|  11.3k|        return program;
  402|  11.3k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  11.3k|    {
  406|  11.3k|        TokenStream tokens = Tokenize(source);
  407|  11.3k|        return Parse(tokens);
  408|  11.3k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|   125k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|   125k|        switch (token.GetType())
   38|   125k|        {
   39|  22.6k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 22.6k, False: 103k]
  ------------------
   40|  22.6k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 12.3k, False: 10.3k]
  ------------------
   41|  22.6k|                                          ArgumentType::AddressDisplacement))
   42|  12.3k|                {
   43|  12.3k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  12.3k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  12.3k|                    return {};
   47|  12.3k|                }
   48|       |
   49|       |                // Get address displacement
   50|  10.3k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  10.3k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  10.3k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 3, False: 10.3k]
  ------------------
   55|      3|                {
   56|      3|                    program.AddParseError(
   57|      3|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      3|                    return {};
   59|      3|                }
   60|       |
   61|  10.3k|                auto         it           = tokens.current_position();
   62|  10.3k|                const Token& first_token  = tokens.consume();
   63|  10.3k|                const Token& second_token = tokens.consume();
   64|  10.3k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  10.3k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 3.55k, False: 6.78k]
  ------------------
   67|  3.55k|                {
   68|  3.55k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  3.55k|                            first_token, Token::Type::OpenBracket));
   70|  3.55k|                    return {};
   71|  3.55k|                }
   72|       |
   73|       |                // Second token is the register
   74|  6.78k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 1.77k, False: 5.01k]
  ------------------
   75|  1.77k|                {
   76|  1.77k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|  1.77k|                            second_token, Token::Type::RegisterInt));
   78|  1.77k|                    return {};
   79|  1.77k|                }
   80|       |
   81|  5.01k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 2.66k, False: 2.34k]
  ------------------
   82|  2.66k|                {
   83|  2.66k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|  2.66k|                            third_token, Token::Type::ClosingBracket));
   85|  2.66k|                    return {};
   86|  2.66k|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|  2.34k|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|  2.34k|                return ConstructInstructionArgumentAddressDisplacement(
   95|  2.34k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|  5.01k|            }
   97|  7.35k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 7.35k, False: 118k]
  ------------------
   98|  7.35k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 1.12k, False: 6.23k]
  ------------------
   99|  1.12k|                {
  100|  1.12k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  1.12k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  1.12k|                    return {};
  103|  1.12k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  6.23k|                return ConstructInstructionArgumentRegisterInt(
  109|  6.23k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  7.35k|            }
  111|  12.4k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 12.4k, False: 113k]
  ------------------
  112|  12.4k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 1.75k, False: 10.6k]
  ------------------
  113|  1.75k|                {
  114|  1.75k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  1.75k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  1.75k|                    return {};
  117|  1.75k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  10.6k|                return ConstructInstructionArgumentRegisterFloat(
  123|  10.6k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  12.4k|            }
  125|  1.49k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 1.49k, False: 124k]
  ------------------
  126|  1.49k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  1.49k|                return {};
  129|  12.4k|            }
  130|  49.7k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 49.7k, False: 75.9k]
  ------------------
  131|       |                // Parse as Label
  132|  49.7k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 13.3k, False: 36.4k]
  ------------------
  133|  13.3k|                {
  134|  13.3k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  13.3k|                            token, expected_argument_type, ArgumentType::Label));
  136|  13.3k|                    return {};
  137|  13.3k|                }
  138|       |
  139|  36.4k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 36.4k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  36.4k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 25.6k, False: 10.8k]
  ------------------
  146|  25.6k|                {
  147|  25.6k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  25.6k|                    return {};
  149|  25.6k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  10.8k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  36.4k|            }
  155|  9.33k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 9.33k, False: 116k]
  ------------------
  156|  9.33k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 4.52k, False: 4.80k]
  ------------------
  157|  4.52k|                {
  158|  4.52k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  4.52k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  4.52k|                    return {};
  161|  4.52k|                }
  162|       |
  163|  4.80k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 2.10k, False: 2.70k]
  ------------------
  164|  2.10k|                {
  165|  2.10k|                    return ConstructInstructionArgumentImmediateValue(
  166|  2.10k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  2.10k|                }
  168|       |
  169|  2.70k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|  2.70k|                return {};
  171|  4.80k|            }
  172|       |
  173|  22.7k|            default:
  ------------------
  |  Branch (173:13): [True: 22.7k, False: 103k]
  ------------------
  174|  22.7k|                program.AddParseError(
  175|  22.7k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  22.7k|                return {};
  177|   125k|        }
  178|   125k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  1.33M|                                tokens.find_first_token_if([&](const Token& t) {
  248|  1.33M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 944k, False: 394k]
  ------------------
  249|   944k|                                    {
  250|   944k|                                        std::string_view token_label_name = t.GetText();
  251|   944k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   944k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 85.5k, False: 858k]
  ------------------
  254|  85.5k|                                        {
  255|  85.5k|                                            return true;
  256|  85.5k|                                        }
  257|   944k|                                    }
  258|       |
  259|  1.25M|                                    return false;
  260|  1.33M|                                });

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  1.77M|    {
   14|  1.77M|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 292k, False: 1.48M]
  ------------------
   15|   292k|        {
   16|   292k|            char first_char = token[0];
   17|   292k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 1.66k, False: 290k]
  |  Branch (17:38): [True: 28.8k, False: 262k]
  ------------------
   18|  30.5k|            {
   19|  30.5k|                char second_char = token[1];
   20|  30.5k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 29.1k, False: 1.33k]
  |  Branch (20:43): [True: 23.1k, False: 5.96k]
  ------------------
   21|  23.1k|                {
   22|  23.1k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  23.1k|                }
   24|  30.5k|            }
   25|   292k|        }
   26|  1.48M|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 348k, False: 1.13M]
  ------------------
   27|   348k|        {
   28|   348k|            char first_char = token[0];
   29|   348k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 802, False: 348k]
  |  Branch (29:38): [True: 27.1k, False: 321k]
  ------------------
   30|  27.9k|            {
   31|  27.9k|                char second_char = token[1];
   32|  27.9k|                char third_char  = token[2];
   33|       |
   34|  27.9k|                switch (second_char)
   35|  27.9k|                {
   36|  11.1k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 11.1k, False: 16.7k]
  ------------------
   37|  11.1k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 7.68k, False: 3.45k]
  |  Branch (37:50): [True: 3.56k, False: 4.11k]
  ------------------
   38|  3.56k|                        {
   39|  3.56k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  3.56k|                        }
   41|  7.57k|                        break;
   42|  11.1k|                    }
   43|  7.57k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 7.19k, False: 20.7k]
  ------------------
   44|  7.19k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 3.65k, False: 3.54k]
  |  Branch (44:50): [True: 1.35k, False: 2.29k]
  ------------------
   45|  1.35k|                        {
   46|  1.35k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  1.35k|                        }
   48|  5.84k|                        break;
   49|  7.19k|                    }
   50|  5.84k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 5.65k, False: 22.2k]
  ------------------
   51|  5.65k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 963, False: 4.68k]
  |  Branch (51:50): [True: 1.34k, False: 3.34k]
  ------------------
   52|  2.31k|                        {
   53|  2.31k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  2.31k|                        }
   55|  3.34k|                        break;
   56|  5.65k|                    }
   57|  3.92k|                    default: {
  ------------------
  |  Branch (57:21): [True: 3.92k, False: 23.9k]
  ------------------
   58|  3.92k|                        break;
   59|  5.65k|                    }
   60|  27.9k|                }
   61|  27.9k|            }
   62|   348k|        }
   63|       |
   64|  1.74M|        return IntRegisterID::None;
   65|  1.77M|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|  1.74M|    {
   69|  1.74M|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 269k, False: 1.47M]
  ------------------
   70|   269k|        {
   71|   269k|            char first_char = token[0];
   72|   269k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 18.8k, False: 250k]
  |  Branch (72:38): [True: 8.05k, False: 242k]
  ------------------
   73|  26.8k|            {
   74|  26.8k|                char second_char = token[1];
   75|  26.8k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 24.7k, False: 2.10k]
  |  Branch (75:43): [True: 15.3k, False: 9.41k]
  ------------------
   76|  15.3k|                {
   77|  15.3k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  15.3k|                }
   79|  26.8k|            }
   80|   269k|        }
   81|  1.47M|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 341k, False: 1.13M]
  ------------------
   82|   341k|        {
   83|   341k|            char first_char = token[0];
   84|   341k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 15.6k, False: 326k]
  |  Branch (84:38): [True: 8.41k, False: 317k]
  ------------------
   85|  24.0k|            {
   86|  24.0k|                char second_char = token[1];
   87|  24.0k|                char third_char  = token[2];
   88|       |
   89|  24.0k|                switch (second_char)
   90|  24.0k|                {
   91|  2.24k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 2.24k, False: 21.8k]
  ------------------
   92|  2.24k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 1.71k, False: 530]
  |  Branch (92:50): [True: 1.25k, False: 464]
  ------------------
   93|  1.25k|                        {
   94|  1.25k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  1.25k|                        }
   96|    994|                        break;
   97|  2.24k|                    }
   98|  2.95k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 2.95k, False: 21.1k]
  ------------------
   99|  2.95k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 2.12k, False: 830]
  |  Branch (99:50): [True: 694, False: 1.42k]
  ------------------
  100|    694|                        {
  101|    694|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|    694|                        }
  103|  2.25k|                        break;
  104|  2.95k|                    }
  105|  10.4k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 10.4k, False: 13.5k]
  ------------------
  106|  10.4k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 3.61k, False: 6.87k]
  |  Branch (106:50): [True: 2.37k, False: 4.50k]
  ------------------
  107|  5.98k|                        {
  108|  5.98k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  5.98k|                        }
  110|  4.50k|                        break;
  111|  10.4k|                    }
  112|  8.37k|                    default: {
  ------------------
  |  Branch (112:21): [True: 8.37k, False: 15.6k]
  ------------------
  113|  8.37k|                        break;
  114|  10.4k|                    }
  115|  24.0k|                }
  116|  24.0k|            }
  117|   341k|        }
  118|       |
  119|  1.72M|        return FloatRegisterID::None;
  120|  1.74M|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|  1.59M|    {
  124|  1.59M|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 334k, False: 1.25M]
  ------------------
  125|   334k|        {
  126|   334k|            char c1 = token[0];
  127|   334k|            char c2 = token[1];
  128|   334k|            char c3 = token[2];
  129|   334k|            char c4 = token[3];
  130|       |
  131|   334k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 10.3k, False: 324k]
  |  Branch (131:34): [True: 9.28k, False: 315k]
  |  Branch (131:49): [True: 6.82k, False: 12.8k]
  |  Branch (131:62): [True: 1.14k, False: 11.6k]
  ------------------
  132|   334k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 2.15k, False: 5.81k]
  |  Branch (132:34): [True: 4.48k, False: 1.33k]
  |  Branch (132:49): [True: 1.21k, False: 5.42k]
  |  Branch (132:62): [True: 3.69k, False: 1.73k]
  ------------------
  133|   334k|        }
  134|       |
  135|  1.25M|        return false;
  136|  1.59M|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  2.00M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   447k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  5.00M|    {
   41|  5.00M|        return m_Type;
   42|  5.00M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  2.14M|    {
   51|  2.14M|        return m_LineNumber;
   52|  2.14M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  2.00M|    {
   56|  2.00M|        return m_Column;
   57|  2.00M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  2.79M|    {
   66|  2.79M|        return m_Text;
   67|  2.79M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   156k|    {
   80|   156k|        return m_HasHint;
   81|   156k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   172k|    {
   85|   172k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   172k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   172k|                   m_Type == Type::ImmediateInteger);
   88|   172k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   172k|        return m_Hint;
   91|   172k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  11.3k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  11.3k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  11.3k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  10.3k|    {
   51|  10.3k|        auto it = m_Iterator;
   52|  41.3k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 31.0k, False: 10.3k]
  ------------------
   53|  31.0k|        {
   54|  31.0k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 3, False: 31.0k]
  ------------------
   55|      3|            {
   56|      3|                return false;
   57|      3|            }
   58|  31.0k|        }
   59|       |
   60|  10.3k|        return true;
   61|  10.3k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  2.43M|    {
   65|  2.43M|        return m_Iterator != m_Tokens.end();
   66|  2.43M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  2.45M|    {
   70|  2.45M|        return m_Iterator == m_Tokens.end();
   71|  2.45M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  2.45M|    {
   85|  2.45M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  2.45M|        return *m_Iterator++;
   91|  2.45M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  10.3k|    {
  164|  10.3k|        return m_Iterator;
  165|  10.3k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  2.34k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  2.34k|        m_Iterator = it;
  179|  2.34k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  3.27k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  3.27k|        return m_Tokens.rbegin();
  224|  3.27k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  67.9k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  67.9k|        return m_Tokens.rend();
  233|  67.9k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  11.3k|    {
   63|  11.3k|        TokenStream tokens;
   64|       |
   65|  11.3k|        std::string_view current_token;
   66|       |
   67|  11.3k|        phi::u64 current_line_number{1u};
   68|  11.3k|        phi::u64 current_column{1u};
   69|  11.3k|        phi::u64 token_begin{0u};
   70|       |
   71|  11.3k|        phi::boolean parsing_comment{false};
   72|       |
   73|  6.24M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 6.23M, False: 11.3k]
  ------------------
   74|  6.23M|        {
   75|  6.23M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  6.23M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 259k, False: 5.97M]
  ------------------
   78|   259k|            {
   79|   259k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 45.4k, False: 214k]
  ------------------
   80|  45.4k|                {
   81|       |                    // Skip empty lines
   82|  45.4k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  45.4k|                                        current_line_number, current_column);
   84|       |
   85|  45.4k|                    parsing_comment = false;
   86|  45.4k|                    current_line_number += 1u;
   87|  45.4k|                    current_column = 1u;
   88|  45.4k|                    continue;
   89|  45.4k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   214k|                tokens.emplace_back(
   93|   214k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   214k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   214k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   214k|                                    current_line_number, current_column);
   98|       |
   99|   214k|                current_token   = std::string_view{};
  100|   214k|                parsing_comment = false;
  101|   214k|                current_line_number += 1u;
  102|   214k|                current_column = 0u;
  103|   214k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  5.97M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 3.86k, False: 5.96M]
  |  Branch (105:34): [True: 8.32k, False: 5.96M]
  ------------------
  106|  12.1k|            {
  107|  12.1k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 4.26k, False: 7.92k]
  ------------------
  108|  4.26k|                {
  109|  4.26k|                    token_begin = i;
  110|  4.26k|                }
  111|  7.92k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 7.15k, False: 776]
  ------------------
  112|  7.15k|                {
  113|  7.15k|                    tokens.emplace_back(ParseToken(
  114|  7.15k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  7.15k|                            current_line_number, current_column - current_token.length()));
  116|  7.15k|                    token_begin   = i;
  117|  7.15k|                    current_token = std::string_view{};
  118|  7.15k|                }
  119|       |
  120|  12.1k|                parsing_comment = true;
  121|  12.1k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  12.1k|            }
  123|  5.96M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 29.9k, False: 5.93M]
  ------------------
  124|  29.9k|            {
  125|       |                // simply append the character
  126|  29.9k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|  29.9k|            }
  128|  5.93M|            else
  129|  5.93M|            {
  130|       |                // Not parsing a comment
  131|  5.93M|                switch (c)
  132|  5.93M|                {
  133|  78.4k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 78.4k, False: 5.85M]
  ------------------
  134|   132k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 53.7k, False: 5.87M]
  ------------------
  135|   223k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 90.8k, False: 5.84M]
  ------------------
  136|   223k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 47.0k, False: 176k]
  ------------------
  137|  47.0k|                        {
  138|  47.0k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  47.0k|                            continue;
  141|  47.0k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   176k|                        tokens.emplace_back(ParseToken(
  145|   176k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   176k|                                current_line_number, current_column - current_token.length()));
  147|   176k|                        current_token = std::string_view{};
  148|   176k|                        break;
  149|   550k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 550k, False: 5.38M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|   550k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 482k, False: 68.6k]
  ------------------
  152|   482k|                        {
  153|   482k|                            current_token =
  154|   482k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|   482k|                            tokens.emplace_back(ParseToken(
  156|   482k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|   482k|                                    current_line_number,
  158|   482k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|   482k|                            current_token = std::string_view{};
  161|   482k|                        }
  162|  68.6k|                        else
  163|  68.6k|                        {
  164|       |                            // Orphan colon
  165|  68.6k|                            token_begin = i;
  166|       |
  167|  68.6k|                            tokens.emplace_back(Token::Type::Colon,
  168|  68.6k|                                                source.substr(token_begin.unsafe(), 1),
  169|  68.6k|                                                current_line_number, current_column);
  170|  68.6k|                        }
  171|   550k|                        break;
  172|   424k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 424k, False: 5.50M]
  ------------------
  173|   735k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 311k, False: 5.62M]
  ------------------
  174|   758k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 22.9k, False: 5.90M]
  ------------------
  175|   758k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 478k, False: 280k]
  ------------------
  176|   478k|                        {
  177|   478k|                            tokens.emplace_back(ParseToken(
  178|   478k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   478k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   478k|                            current_token = std::string_view{};
  182|   478k|                        }
  183|       |
  184|   758k|                        Token::Type type;
  185|   758k|                        switch (c)
  186|   758k|                        {
  187|   424k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 424k, False: 334k]
  ------------------
  188|   424k|                                type = Token::Type::Comma;
  189|   424k|                                break;
  190|   311k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 311k, False: 447k]
  ------------------
  191|   311k|                                type = Token::Type::OpenBracket;
  192|   311k|                                break;
  193|  22.9k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 22.9k, False: 735k]
  ------------------
  194|  22.9k|                                type = Token::Type::ClosingBracket;
  195|  22.9k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 758k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|   758k|#endif
  201|   758k|                        }
  202|       |
  203|   758k|                        token_begin = i;
  204|       |
  205|   758k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|   758k|                                            current_line_number, current_column);
  207|   758k|                        break;
  208|       |
  209|  4.39M|                    default:
  ------------------
  |  Branch (209:21): [True: 4.39M, False: 1.53M]
  ------------------
  210|  4.39M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 1.35M, False: 3.04M]
  ------------------
  211|  1.35M|                        {
  212|  1.35M|                            token_begin = i;
  213|  1.35M|                        }
  214|       |
  215|       |                        // simply append the character
  216|  4.39M|                        current_token =
  217|  4.39M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  5.93M|                }
  219|  5.93M|            }
  220|       |
  221|  6.14M|            current_column += 1u;
  222|  6.14M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  11.3k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 8.03k, False: 3.28k]
  ------------------
  226|  8.03k|        {
  227|  8.03k|            tokens.emplace_back(
  228|  8.03k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  8.03k|                               current_line_number, current_column - current_token.length()));
  230|  8.03k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  11.3k|        tokens.finalize();
  234|       |
  235|  11.3k|        return tokens;
  236|  11.3k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  1.36M|    {
   11|  1.36M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 14.2k, False: 1.35M]
  |  Branch (11:35): [True: 11.8k, False: 2.35k]
  ------------------
   12|  11.8k|        {
   13|  11.8k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  11.8k|            if (number)
  ------------------
  |  Branch (15:17): [True: 3.57k, False: 8.28k]
  ------------------
   16|  3.57k|            {
   17|  3.57k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  3.57k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  3.57k|            }
   20|       |
   21|  8.28k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  11.8k|        }
   23|       |
   24|  1.35M|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 3.65k, False: 1.35M]
  |  Branch (24:35): [True: 7.76k, False: 1.34M]
  ------------------
   25|  11.4k|        {
   26|  11.4k|            return {Token::Type::Comment, token, line_number, column};
   27|  11.4k|        }
   28|       |
   29|  1.34M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 40.1k, False: 1.30M]
  ------------------
   30|  40.1k|        {
   31|  40.1k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  40.1k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  40.1k|        }
   34|       |
   35|  1.30M|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 3.67k, False: 1.29M]
  ------------------
   36|  3.67k|        {
   37|  3.67k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  3.67k|        }
   39|       |
   40|  1.29M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 20.0k, False: 1.27M]
  ------------------
   41|  20.0k|        {
   42|  20.0k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  20.0k|                    static_cast<std::uint32_t>(id)};
   44|  20.0k|        }
   45|       |
   46|  1.27M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 21.2k, False: 1.25M]
  ------------------
   47|  21.2k|        {
   48|  21.2k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  21.2k|                    static_cast<std::uint32_t>(id)};
   50|  21.2k|        }
   51|       |
   52|  1.25M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 362k, False: 894k]
  ------------------
   53|   362k|        {
   54|   362k|            return {Token::Type::OpCode, token, line_number, column,
   55|   362k|                    static_cast<std::uint32_t>(opcode)};
   56|   362k|        }
   57|       |
   58|   894k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|  1.25M|    }

LLVMFuzzerTestOneInput:
    8|  11.3k|{
    9|  11.3k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   10|       |
   11|       |    // Parse it
   12|  11.3k|    dlx::Parser::Parse(source);
   13|       |
   14|  11.3k|    return 0;
   15|  11.3k|}


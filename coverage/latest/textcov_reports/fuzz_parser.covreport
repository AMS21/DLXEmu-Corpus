_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  56.4k|        {
  173|  56.4k|            PHI_ASSERT(index < 3u);
  174|       |
  175|  56.4k|            switch (index.unsafe())
  176|  56.4k|            {
  177|  25.4k|                case 0:
  ------------------
  |  Branch (177:17): [True: 25.4k, False: 30.9k]
  ------------------
  178|  25.4k|                    return m_Arg1Type;
  179|       |
  180|  15.6k|                case 1:
  ------------------
  |  Branch (180:17): [True: 15.6k, False: 40.7k]
  ------------------
  181|  15.6k|                    return m_Arg2Type;
  182|       |
  183|  15.3k|                case 2:
  ------------------
  |  Branch (183:17): [True: 15.3k, False: 41.1k]
  ------------------
  184|  15.3k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 56.4k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  56.4k|#endif
  191|  56.4k|            }
  192|  56.4k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  14.5k|        {
  199|  14.5k|            phi::u8 number_of_argument_required = static_cast<phi::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  14.5k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 14.1k, False: 379]
  ------------------
  203|  14.1k|            {
  204|  14.1k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  205|  14.1k|            }
  206|  14.5k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 7.44k, False: 7.06k]
  ------------------
  207|  7.44k|            {
  208|  7.44k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  209|  7.44k|            }
  210|  14.5k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 3.98k, False: 10.5k]
  ------------------
  211|  3.98k|            {
  212|  3.98k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  213|  3.98k|            }
  214|       |
  215|  14.5k|            return number_of_argument_required;
  216|  14.5k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  14.5k|        {
  225|  14.5k|            return m_Executor;
  226|  14.5k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  10.3k|    {
   38|  10.3k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  10.3k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  10.3k|                                         static_cast<underlying_t>(rhs));
   42|  10.3k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  10.3k|    {
   55|  10.3k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  10.3k|        return static_cast<underlying_t>(type & test) != 0;
   58|  10.3k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  53.7k|    {
   31|  53.7k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 829, False: 52.9k]
  ------------------
   32|    829|        {
   33|    829|            return true;
   34|    829|        }
   35|       |
   36|  52.9k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 598, False: 52.3k]
  ------------------
   37|    598|        {
   38|    598|            return true;
   39|    598|        }
   40|       |
   41|  52.3k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 21.6k, False: 30.6k]
  ------------------
   42|  21.6k|        {
   43|  21.6k|            return true;
   44|  21.6k|        }
   45|       |
   46|  30.6k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 200, False: 30.4k]
  ------------------
   47|    200|        {
   48|    200|            return true;
   49|    200|        }
   50|       |
   51|  30.4k|        return false;
   52|  30.6k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  30.4k|    {
   56|  30.4k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 30.4k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  30.4k|        const char first_char = token.at(0u);
   62|       |
   63|  30.4k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 5.57k, False: 24.8k]
  ------------------
   64|  5.57k|        {
   65|  5.57k|            return phi::is_alpha(first_char);
   66|  5.57k|        }
   67|       |
   68|  24.8k|        phi::boolean just_under_scores = (first_char == '_');
   69|  24.8k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 2.00k, False: 22.8k]
  |  Branch (69:13): [True: 1.55k, False: 23.3k]
  |  Branch (69:43): [True: 1.55k, False: 451]
  ------------------
   70|  1.55k|        {
   71|  1.55k|            return false;
   72|  1.55k|        }
   73|       |
   74|  85.6k|        for (phi::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 71.4k, False: 14.1k]
  ------------------
   75|  71.4k|        {
   76|  71.4k|            const char c{token.at(index)};
   77|       |
   78|  71.4k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 61.7k, False: 9.69k]
  ------------------
   79|  61.7k|            {
   80|  61.7k|                just_under_scores = false;
   81|  61.7k|            }
   82|  9.69k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 562, False: 9.12k]
  ------------------
   83|    562|            {
   84|    562|                continue;
   85|    562|            }
   86|  9.12k|            else
   87|  9.12k|            {
   88|  9.12k|                return false;
   89|  9.12k|            }
   90|  71.4k|        }
   91|       |
   92|  14.1k|        return !just_under_scores;
   93|  23.3k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   98|   118k|    {
   99|   118k|        if (token.is_empty())
  ------------------
  |  Branch (99:13): [True: 0, False: 118k]
  ------------------
  100|      0|        {
  101|      0|            return {};
  102|      0|        }
  103|       |
  104|   118k|        if (token.length() == 1u)
  ------------------
  |  Branch (104:13): [True: 15.3k, False: 102k]
  ------------------
  105|  15.3k|        {
  106|  15.3k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (106:17): [True: 2.22k, False: 13.1k]
  ------------------
  107|  2.22k|            {
  108|  2.22k|                return static_cast<phi::int16_t>(token.at(0u) - '0');
  109|  2.22k|            }
  110|       |
  111|  13.1k|            return {};
  112|  15.3k|        }
  113|       |
  114|       |        // Disallow trailing separators
  115|   102k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (115:13): [True: 809, False: 101k]
  ------------------
  116|    809|        {
  117|    809|            return {};
  118|    809|        }
  119|       |
  120|   101k|        phi::int32_t number{0};
  121|   101k|        phi::boolean is_negative{false};
  122|   101k|        phi::boolean starts_with_zero{false};
  123|   101k|        phi::boolean parsing_binary{false};
  124|   101k|        phi::boolean parsing_octal{false};
  125|   101k|        phi::boolean parsing_hexadecimal{false};
  126|   101k|        phi::boolean parsed_something{false};
  127|   101k|        phi::boolean parsed_separator{false};
  128|       |
  129|       |        // TODO: Move x'th character checks out of the for loop
  130|       |
  131|   113k|        for (phi::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (131:37): [True: 112k, False: 1.43k]
  ------------------
  132|   112k|        {
  133|   112k|            const char c{token.at(index)};
  134|       |
  135|       |            // First character
  136|   112k|            if (index == 0u)
  ------------------
  |  Branch (136:17): [True: 101k, False: 10.1k]
  ------------------
  137|   101k|            {
  138|   101k|                if (c == '+')
  ------------------
  |  Branch (138:21): [True: 210, False: 101k]
  ------------------
  139|    210|                {
  140|    210|                    continue;
  141|    210|                }
  142|       |
  143|   101k|                if (c == '-')
  ------------------
  |  Branch (143:21): [True: 889, False: 100k]
  ------------------
  144|    889|                {
  145|    889|                    is_negative = true;
  146|    889|                    continue;
  147|    889|                }
  148|       |
  149|   100k|                if (c == '0')
  ------------------
  |  Branch (149:21): [True: 1.78k, False: 99.0k]
  ------------------
  150|  1.78k|                {
  151|  1.78k|                    starts_with_zero = true;
  152|  1.78k|                    continue;
  153|  1.78k|                }
  154|       |
  155|  99.0k|                if (c == '\'')
  ------------------
  |  Branch (155:21): [True: 194, False: 98.8k]
  ------------------
  156|    194|                {
  157|    194|                    return {};
  158|    194|                }
  159|  99.0k|            }
  160|       |
  161|       |            // Second character
  162|   108k|            if (index == 1u)
  ------------------
  |  Branch (162:17): [True: 3.72k, False: 105k]
  ------------------
  163|  3.72k|            {
  164|  3.72k|                if (starts_with_zero)
  ------------------
  |  Branch (164:21): [True: 1.78k, False: 1.93k]
  ------------------
  165|  1.78k|                {
  166|       |                    // Binary
  167|  1.78k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (167:25): [True: 204, False: 1.58k]
  |  Branch (167:37): [True: 194, False: 1.38k]
  ------------------
  168|    398|                    {
  169|    398|                        parsing_binary = true;
  170|    398|                        continue;
  171|    398|                    }
  172|       |
  173|       |                    // Hexadecimal
  174|  1.38k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (174:25): [True: 502, False: 887]
  |  Branch (174:37): [True: 202, False: 685]
  ------------------
  175|    704|                    {
  176|    704|                        parsing_hexadecimal = true;
  177|    704|                        continue;
  178|    704|                    }
  179|       |
  180|       |                    // Octal
  181|    685|                    parsing_octal = true;
  182|    685|                }
  183|  3.72k|            }
  184|       |
  185|       |            // Handle separators
  186|   107k|            if (c == '\'')
  ------------------
  |  Branch (186:17): [True: 441, False: 107k]
  ------------------
  187|    441|            {
  188|    441|                if (parsed_separator)
  ------------------
  |  Branch (188:21): [True: 194, False: 247]
  ------------------
  189|    194|                {
  190|    194|                    return {};
  191|    194|                }
  192|       |
  193|    247|                parsed_separator = true;
  194|    247|                continue;
  195|    441|            }
  196|       |
  197|       |            // Check for over/underflow
  198|   107k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (198:17): [True: 3.11k, False: 104k]
  |  Branch (198:32): [True: 194, False: 2.92k]
  ------------------
  199|    194|            {
  200|       |                // Would underflow
  201|    194|                return {};
  202|    194|            }
  203|   107k|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (203:17): [True: 104k, False: 2.92k]
  |  Branch (203:17): [True: 233, False: 106k]
  |  Branch (203:33): [True: 233, False: 104k]
  ------------------
  204|    233|            {
  205|       |                // Would overflow
  206|    233|                return {};
  207|    233|            }
  208|       |
  209|   106k|            parsed_separator = false;
  210|   106k|            parsed_something = true;
  211|       |
  212|   106k|            if (parsing_binary)
  ------------------
  |  Branch (212:17): [True: 590, False: 106k]
  ------------------
  213|    590|            {
  214|    590|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (214:21): [True: 201, False: 389]
  ------------------
  215|    201|                {
  216|    201|                    return {};
  217|    201|                }
  218|       |
  219|    389|                number <<= 1;
  220|    389|                number |= (c - '0');
  221|    389|            }
  222|   106k|            else if (parsing_octal)
  ------------------
  |  Branch (222:22): [True: 872, False: 105k]
  ------------------
  223|    872|            {
  224|    872|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (224:21): [True: 530, False: 342]
  ------------------
  225|    530|                {
  226|    530|                    return {};
  227|    530|                }
  228|       |
  229|    342|                number <<= 3;
  230|    342|                number |= (c - '0');
  231|    342|            }
  232|   105k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (232:22): [True: 1.03k, False: 104k]
  ------------------
  233|  1.03k|            {
  234|  1.03k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (234:21): [True: 403, False: 630]
  ------------------
  235|    403|                {
  236|    403|                    return {};
  237|    403|                }
  238|       |
  239|    630|                number <<= 4;
  240|    630|                number |= phi::hex_digit_value(c).unsafe();
  241|    630|            }
  242|   104k|            else
  243|   104k|            {
  244|   104k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (244:21): [True: 98.3k, False: 6.16k]
  ------------------
  245|  98.3k|                {
  246|  98.3k|                    return {};
  247|  98.3k|                }
  248|       |
  249|       |                // Disallow leading zeros
  250|  6.16k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (250:21): [True: 1.69k, False: 4.46k]
  |  Branch (250:36): [True: 206, False: 1.49k]
  ------------------
  251|    206|                {
  252|    206|                    return {};
  253|    206|                }
  254|       |
  255|  5.95k|                number *= 10;
  256|  5.95k|                number += (c - '0');
  257|  5.95k|            }
  258|   106k|        }
  259|       |
  260|  1.43k|        if (parsed_something)
  ------------------
  |  Branch (260:13): [True: 1.16k, False: 266]
  ------------------
  261|  1.16k|        {
  262|       |            // Check for over/underflow
  263|  1.16k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (263:17): [True: 405, False: 763]
  |  Branch (263:32): [True: 211, False: 194]
  ------------------
  264|    211|            {
  265|       |                // Would underflow
  266|    211|                return {};
  267|    211|            }
  268|    957|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (268:17): [True: 763, False: 194]
  |  Branch (268:17): [True: 345, False: 612]
  |  Branch (268:33): [True: 345, False: 418]
  ------------------
  269|    345|            {
  270|       |                // Would overflow
  271|    345|                return {};
  272|    345|            }
  273|       |
  274|    612|            if (is_negative)
  ------------------
  |  Branch (274:17): [True: 194, False: 418]
  ------------------
  275|    194|            {
  276|    194|                return static_cast<phi::int16_t>(-number);
  277|    194|            }
  278|       |
  279|    418|            return static_cast<phi::int16_t>(number);
  280|    612|        }
  281|       |
  282|    266|        return {};
  283|  1.43k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  8.31k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finalized);
   61|       |#endif
   62|       |
   63|  8.31k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 27.3k, False: 0]
  ------------------
   64|  27.3k|            {
   65|  27.3k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 8.31k, False: 19.0k]
  ------------------
   66|  8.31k|                {
   67|  8.31k|                    return &token;
   68|  8.31k|                }
   69|  27.3k|            }
   70|       |
   71|      0|            return nullptr;
   72|  8.31k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  21.3k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  21.3k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  21.3k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   119k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|   119k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   119k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  37.1k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  37.1k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  37.1k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   16|  14.5k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   21|  3.97k|    {
   22|  3.97k|        PHI_ASSERT(argument_number < 3u);
   23|       |
   24|  3.97k|        switch (argument_number.unsafe())
   25|  3.97k|        {
   26|  2.43k|            case 0u:
  ------------------
  |  Branch (26:13): [True: 2.43k, False: 1.54k]
  ------------------
   27|  2.43k|                m_Arg1 = argument;
   28|  2.43k|                break;
   29|    797|            case 1u:
  ------------------
  |  Branch (29:13): [True: 797, False: 3.17k]
  ------------------
   30|    797|                m_Arg2 = argument;
   31|    797|                break;
   32|    744|            case 2u:
  ------------------
  |  Branch (32:13): [True: 744, False: 3.23k]
  ------------------
   33|    744|                m_Arg3 = argument;
   34|    744|                break;
   35|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   36|      0|            default:
  ------------------
  |  Branch (36:13): [True: 0, False: 3.97k]
  ------------------
   37|      0|                PHI_ASSERT_NOT_REACHED();
   38|  3.97k|#endif
   39|  3.97k|        }
   40|  3.97k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   21|  47.5k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  166|    331|    {
  167|    331|        InstructionArgument arg;
  168|    331|        arg.m_Type                   = ArgumentType::IntRegister;
  169|    331|        arg.register_int.register_id = id;
  170|    331|        return arg;
  171|    331|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  174|  2.01k|    {
  175|  2.01k|        InstructionArgument arg;
  176|  2.01k|        arg.m_Type                     = ArgumentType::FloatRegister;
  177|  2.01k|        arg.register_float.register_id = id;
  178|  2.01k|        return arg;
  179|  2.01k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  182|    207|    {
  183|    207|        InstructionArgument arg;
  184|    207|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  185|    207|        arg.immediate_value.signed_value = value;
  186|    207|        return arg;
  187|    207|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  191|    194|    {
  192|    194|        InstructionArgument arg;
  193|    194|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  194|    194|        arg.address_displacement.register_id  = id;
  195|    194|        arg.address_displacement.displacement = displacement;
  196|    194|        return arg;
  197|    194|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  200|  1.22k|    {
  201|  1.22k|        InstructionArgument arg;
  202|  1.22k|        arg.m_Type           = ArgumentType::Label;
  203|  1.22k|        arg.label.label_name = label_name;
  204|  1.22k|        return arg;
  205|  1.22k|    }

_ZN3dlx21LookUpInstructionInfoENS_6OpCodeE:
  449|  14.5k|    {
  450|  14.5k|        return instruction_table.at(static_cast<phi::size_t>(instruction));
  451|  14.5k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   21|   162k|    {
   22|   162k|        switch (token.length().unsafe())
   23|   162k|        {
   24|       |            // 1 character OpCodes
   25|  18.5k|            case 1: {
  ------------------
  |  Branch (25:13): [True: 18.5k, False: 143k]
  ------------------
   26|  18.5k|                const char c1 = token[0u];
   27|       |
   28|  18.5k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (28:21): [True: 6.96k, False: 11.5k]
  ------------------
   29|  6.96k|                {
   30|  6.96k|                    return OpCode::J;
   31|  6.96k|                }
   32|  11.5k|                break;
   33|  18.5k|            }
   34|       |
   35|       |            // 2 character OpCodes
   36|  21.8k|            case 2: {
  ------------------
  |  Branch (36:13): [True: 21.8k, False: 140k]
  ------------------
   37|  21.8k|                const char c1 = token[0u];
   38|  21.8k|                const char c2 = token[1u];
   39|       |
   40|  21.8k|                switch (c1)
  ------------------
  |  Branch (40:25): [True: 11.4k, False: 10.3k]
  ------------------
   41|  21.8k|                {
   42|    518|                    case 'J':
  ------------------
  |  Branch (42:21): [True: 518, False: 21.3k]
  ------------------
   43|    846|                    case 'j':
  ------------------
  |  Branch (43:21): [True: 328, False: 21.5k]
  ------------------
   44|    846|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (44:29): [True: 389, False: 457]
  ------------------
   45|    389|                        {
   46|    389|                            return OpCode::JR;
   47|    389|                        }
   48|    457|                        break;
   49|       |
   50|  1.50k|                    case 'L':
  ------------------
  |  Branch (50:21): [True: 1.50k, False: 20.3k]
  ------------------
   51|  2.90k|                    case 'l':
  ------------------
  |  Branch (51:21): [True: 1.40k, False: 20.4k]
  ------------------
   52|  2.90k|                        switch (c2)
  ------------------
  |  Branch (52:33): [True: 526, False: 2.38k]
  ------------------
   53|  2.90k|                        {
   54|    343|                            case 'B':
  ------------------
  |  Branch (54:29): [True: 343, False: 2.56k]
  ------------------
   55|    545|                            case 'b':
  ------------------
  |  Branch (55:29): [True: 202, False: 2.70k]
  ------------------
   56|    545|                                return OpCode::LB;
   57|    214|                            case 'D':
  ------------------
  |  Branch (57:29): [True: 214, False: 2.69k]
  ------------------
   58|    408|                            case 'd':
  ------------------
  |  Branch (58:29): [True: 194, False: 2.71k]
  ------------------
   59|    408|                                return OpCode::LD;
   60|    194|                            case 'F':
  ------------------
  |  Branch (60:29): [True: 194, False: 2.71k]
  ------------------
   61|    388|                            case 'f':
  ------------------
  |  Branch (61:29): [True: 194, False: 2.71k]
  ------------------
   62|    388|                                return OpCode::LF;
   63|    196|                            case 'H':
  ------------------
  |  Branch (63:29): [True: 196, False: 2.71k]
  ------------------
   64|    633|                            case 'h':
  ------------------
  |  Branch (64:29): [True: 437, False: 2.46k]
  ------------------
   65|    633|                                return OpCode::LH;
   66|    208|                            case 'W':
  ------------------
  |  Branch (66:29): [True: 208, False: 2.69k]
  ------------------
   67|    406|                            case 'w':
  ------------------
  |  Branch (67:29): [True: 198, False: 2.70k]
  ------------------
   68|    406|                                return OpCode::LW;
   69|  2.90k|                        }
   70|    526|                        break;
   71|    526|                    case 'O':
  ------------------
  |  Branch (71:21): [True: 397, False: 21.4k]
  ------------------
   72|  1.05k|                    case 'o':
  ------------------
  |  Branch (72:21): [True: 658, False: 21.1k]
  ------------------
   73|  1.05k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (73:29): [True: 432, False: 623]
  ------------------
   74|    432|                        {
   75|    432|                            return OpCode::OR;
   76|    432|                        }
   77|    623|                        break;
   78|  3.84k|                    case 'S':
  ------------------
  |  Branch (78:21): [True: 3.84k, False: 17.9k]
  ------------------
   79|  5.54k|                    case 's':
  ------------------
  |  Branch (79:21): [True: 1.70k, False: 20.1k]
  ------------------
   80|  5.54k|                        switch (c2)
  ------------------
  |  Branch (80:33): [True: 1.72k, False: 3.82k]
  ------------------
   81|  5.54k|                        {
   82|    253|                            case 'B':
  ------------------
  |  Branch (82:29): [True: 253, False: 5.29k]
  ------------------
   83|    447|                            case 'b':
  ------------------
  |  Branch (83:29): [True: 194, False: 5.35k]
  ------------------
   84|    447|                                return OpCode::SB;
   85|  1.38k|                            case 'D':
  ------------------
  |  Branch (85:29): [True: 1.38k, False: 4.15k]
  ------------------
   86|  1.60k|                            case 'd':
  ------------------
  |  Branch (86:29): [True: 212, False: 5.33k]
  ------------------
   87|  1.60k|                                return OpCode::SD;
   88|    195|                            case 'F':
  ------------------
  |  Branch (88:29): [True: 195, False: 5.35k]
  ------------------
   89|    389|                            case 'f':
  ------------------
  |  Branch (89:29): [True: 194, False: 5.35k]
  ------------------
   90|    389|                                return OpCode::SF;
   91|    197|                            case 'H':
  ------------------
  |  Branch (91:29): [True: 197, False: 5.35k]
  ------------------
   92|    528|                            case 'h':
  ------------------
  |  Branch (92:29): [True: 331, False: 5.21k]
  ------------------
   93|    528|                                return OpCode::SH;
   94|    196|                            case 'w':
  ------------------
  |  Branch (94:29): [True: 196, False: 5.35k]
  ------------------
   95|    858|                            case 'W':
  ------------------
  |  Branch (95:29): [True: 662, False: 4.88k]
  ------------------
   96|    858|                                return OpCode::SW;
   97|  5.54k|                        }
   98|  1.72k|                        break;
   99|  21.8k|                }
  100|  14.8k|                break;
  101|  21.8k|            }
  102|       |
  103|       |            // 3 character OpCodes
  104|  35.5k|            case 3: {
  ------------------
  |  Branch (104:13): [True: 35.5k, False: 126k]
  ------------------
  105|  35.5k|                const char c1 = token[0u];
  106|  35.5k|                const char c2 = token[1u];
  107|  35.5k|                const char c3 = token[2u];
  108|       |
  109|  35.5k|                switch (c1)
  ------------------
  |  Branch (109:25): [True: 7.73k, False: 27.8k]
  ------------------
  110|  35.5k|                {
  111|  1.40k|                    case 'A':
  ------------------
  |  Branch (111:21): [True: 1.40k, False: 34.1k]
  ------------------
  112|  1.90k|                    case 'a':
  ------------------
  |  Branch (112:21): [True: 499, False: 35.0k]
  ------------------
  113|  1.90k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (113:29): [True: 616, False: 1.28k]
  |  Branch (113:29): [True: 406, False: 1.49k]
  |  Branch (113:45): [True: 406, False: 210]
  ------------------
  114|    406|                        {
  115|    406|                            return OpCode::ADD;
  116|    406|                        }
  117|  1.49k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (117:34): [True: 743, False: 752]
  |  Branch (117:34): [True: 395, False: 1.10k]
  |  Branch (117:50): [True: 395, False: 348]
  ------------------
  118|    395|                        {
  119|    395|                            return OpCode::AND;
  120|    395|                        }
  121|  1.10k|                        break;
  122|       |
  123|  1.10k|                    case 'D':
  ------------------
  |  Branch (123:21): [True: 390, False: 35.1k]
  ------------------
  124|  1.36k|                    case 'd':
  ------------------
  |  Branch (124:21): [True: 972, False: 34.5k]
  ------------------
  125|  1.36k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (125:29): [True: 924, False: 438]
  |  Branch (125:29): [True: 564, False: 798]
  |  Branch (125:45): [True: 564, False: 360]
  ------------------
  126|    564|                        {
  127|    564|                            return OpCode::DIV;
  128|    564|                        }
  129|    798|                        break;
  130|       |
  131|    798|                    case 'E':
  ------------------
  |  Branch (131:21): [True: 354, False: 35.1k]
  ------------------
  132|  2.13k|                    case 'e':
  ------------------
  |  Branch (132:21): [True: 1.77k, False: 33.7k]
  ------------------
  133|  2.13k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (133:29): [True: 1.87k, False: 254]
  ------------------
  134|  1.87k|                        {
  135|  1.87k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (135:33): [True: 900, False: 978]
  ------------------
  136|    900|                            {
  137|    900|                                return OpCode::EQD;
  138|    900|                            }
  139|    978|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (139:38): [True: 644, False: 334]
  ------------------
  140|    644|                            {
  141|    644|                                return OpCode::EQF;
  142|    644|                            }
  143|  1.87k|                        }
  144|    588|                        break;
  145|       |
  146|  2.38k|                    case 'G':
  ------------------
  |  Branch (146:21): [True: 2.38k, False: 33.1k]
  ------------------
  147|  2.97k|                    case 'g':
  ------------------
  |  Branch (147:21): [True: 597, False: 34.9k]
  ------------------
  148|  2.97k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (148:29): [True: 1.11k, False: 1.86k]
  ------------------
  149|  1.11k|                        {
  150|  1.11k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (150:33): [True: 517, False: 594]
  ------------------
  151|    517|                            {
  152|    517|                                return OpCode::GED;
  153|    517|                            }
  154|    594|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (154:38): [True: 388, False: 206]
  ------------------
  155|    388|                            {
  156|    388|                                return OpCode::GEF;
  157|    388|                            }
  158|  1.11k|                        }
  159|  1.86k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (159:34): [True: 993, False: 874]
  ------------------
  160|    993|                        {
  161|    993|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (161:33): [True: 388, False: 605]
  ------------------
  162|    388|                            {
  163|    388|                                return OpCode::GTD;
  164|    388|                            }
  165|    605|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (165:33): [True: 388, False: 217]
  ------------------
  166|    388|                            {
  167|    388|                                return OpCode::GTF;
  168|    388|                            }
  169|    605|                        }
  170|  1.29k|                        break;
  171|       |
  172|  1.29k|                    case 'J':
  ------------------
  |  Branch (172:21): [True: 224, False: 35.3k]
  ------------------
  173|    842|                    case 'j':
  ------------------
  |  Branch (173:21): [True: 618, False: 34.9k]
  ------------------
  174|    842|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (174:29): [True: 597, False: 245]
  |  Branch (174:29): [True: 390, False: 452]
  |  Branch (174:45): [True: 390, False: 207]
  ------------------
  175|    390|                        {
  176|    390|                            return OpCode::JAL;
  177|    390|                        }
  178|    452|                        break;
  179|       |
  180|  1.83k|                    case 'L':
  ------------------
  |  Branch (180:21): [True: 1.83k, False: 33.7k]
  ------------------
  181|  4.96k|                    case 'l':
  ------------------
  |  Branch (181:21): [True: 3.13k, False: 32.4k]
  ------------------
  182|  4.96k|                        switch (c2)
  ------------------
  |  Branch (182:33): [True: 256, False: 4.71k]
  ------------------
  183|  4.96k|                        {
  184|    418|                            case 'B':
  ------------------
  |  Branch (184:29): [True: 418, False: 4.54k]
  ------------------
  185|    693|                            case 'b':
  ------------------
  |  Branch (185:29): [True: 275, False: 4.69k]
  ------------------
  186|    693|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (186:37): [True: 388, False: 305]
  ------------------
  187|    388|                                {
  188|    388|                                    return OpCode::LBU;
  189|    388|                                }
  190|    305|                                break;
  191|       |
  192|    613|                            case 'E':
  ------------------
  |  Branch (192:29): [True: 613, False: 4.35k]
  ------------------
  193|  1.02k|                            case 'e':
  ------------------
  |  Branch (193:29): [True: 412, False: 4.55k]
  ------------------
  194|  1.02k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (194:37): [True: 388, False: 637]
  ------------------
  195|    388|                                {
  196|    388|                                    return OpCode::LED;
  197|    388|                                }
  198|    637|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (198:42): [True: 388, False: 249]
  ------------------
  199|    388|                                {
  200|    388|                                    return OpCode::LEF;
  201|    388|                                }
  202|    249|                                break;
  203|       |
  204|    249|                            case 'H':
  ------------------
  |  Branch (204:29): [True: 238, False: 4.72k]
  ------------------
  205|  1.26k|                            case 'h':
  ------------------
  |  Branch (205:29): [True: 1.02k, False: 3.93k]
  ------------------
  206|  1.26k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (206:37): [True: 388, False: 879]
  ------------------
  207|    388|                                {
  208|    388|                                    return OpCode::LHI;
  209|    388|                                }
  210|    879|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (210:42): [True: 516, False: 363]
  ------------------
  211|    516|                                {
  212|    516|                                    return OpCode::LHU;
  213|    516|                                }
  214|    363|                                break;
  215|       |
  216|    594|                            case 'T':
  ------------------
  |  Branch (216:29): [True: 594, False: 4.37k]
  ------------------
  217|    978|                            case 't':
  ------------------
  |  Branch (217:29): [True: 384, False: 4.58k]
  ------------------
  218|    978|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (218:37): [True: 388, False: 590]
  ------------------
  219|    388|                                {
  220|    388|                                    return OpCode::LTD;
  221|    388|                                }
  222|    590|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (222:42): [True: 388, False: 202]
  ------------------
  223|    388|                                {
  224|    388|                                    return OpCode::LTF;
  225|    388|                                }
  226|    202|                                break;
  227|       |
  228|    224|                            case 'W':
  ------------------
  |  Branch (228:29): [True: 224, False: 4.74k]
  ------------------
  229|    747|                            case 'w':
  ------------------
  |  Branch (229:29): [True: 523, False: 4.44k]
  ------------------
  230|    747|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (230:37): [True: 388, False: 359]
  ------------------
  231|    388|                                {
  232|    388|                                    return OpCode::LWU;
  233|    388|                                }
  234|    359|                                break;
  235|  4.96k|                        }
  236|  1.73k|                        break;
  237|       |
  238|  1.73k|                    case 'N':
  ------------------
  |  Branch (238:21): [True: 489, False: 35.0k]
  ------------------
  239|  1.84k|                    case 'n':
  ------------------
  |  Branch (239:21): [True: 1.35k, False: 34.1k]
  ------------------
  240|  1.84k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (240:29): [True: 1.00k, False: 836]
  ------------------
  241|  1.00k|                        {
  242|  1.00k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (242:33): [True: 391, False: 613]
  ------------------
  243|    391|                            {
  244|    391|                                return OpCode::NED;
  245|    391|                            }
  246|    613|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (246:38): [True: 388, False: 225]
  ------------------
  247|    388|                            {
  248|    388|                                return OpCode::NEF;
  249|    388|                            }
  250|  1.00k|                        }
  251|    836|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (251:34): [True: 595, False: 241]
  |  Branch (251:34): [True: 388, False: 448]
  |  Branch (251:50): [True: 388, False: 207]
  ------------------
  252|    388|                        {
  253|    388|                            return OpCode::NOP;
  254|    388|                        }
  255|       |
  256|    673|                        break;
  257|       |
  258|    673|                    case 'O':
  ------------------
  |  Branch (258:21): [True: 341, False: 35.2k]
  ------------------
  259|    955|                    case 'o':
  ------------------
  |  Branch (259:21): [True: 614, False: 34.9k]
  ------------------
  260|    955|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (260:29): [True: 591, False: 364]
  |  Branch (260:29): [True: 388, False: 567]
  |  Branch (260:45): [True: 388, False: 203]
  ------------------
  261|    388|                        {
  262|    388|                            return OpCode::ORI;
  263|    388|                        }
  264|    567|                        break;
  265|       |
  266|  3.95k|                    case 'S':
  ------------------
  |  Branch (266:21): [True: 3.95k, False: 31.5k]
  ------------------
  267|  9.18k|                    case 's':
  ------------------
  |  Branch (267:21): [True: 5.23k, False: 30.3k]
  ------------------
  268|  9.18k|                        switch (c2)
  ------------------
  |  Branch (268:33): [True: 722, False: 8.46k]
  ------------------
  269|  9.18k|                        {
  270|    342|                            case 'B':
  ------------------
  |  Branch (270:29): [True: 342, False: 8.84k]
  ------------------
  271|    582|                            case 'b':
  ------------------
  |  Branch (271:29): [True: 240, False: 8.94k]
  ------------------
  272|    582|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (272:37): [True: 388, False: 194]
  ------------------
  273|    388|                                {
  274|    388|                                    return OpCode::SBU;
  275|    388|                                }
  276|    194|                                break;
  277|       |
  278|    387|                            case 'E':
  ------------------
  |  Branch (278:29): [True: 387, False: 8.80k]
  ------------------
  279|    594|                            case 'e':
  ------------------
  |  Branch (279:29): [True: 207, False: 8.98k]
  ------------------
  280|    594|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (280:37): [True: 393, False: 201]
  ------------------
  281|    393|                                {
  282|    393|                                    return OpCode::SEQ;
  283|    393|                                }
  284|    201|                                break;
  285|       |
  286|    597|                            case 'G':
  ------------------
  |  Branch (286:29): [True: 597, False: 8.59k]
  ------------------
  287|  1.18k|                            case 'g':
  ------------------
  |  Branch (287:29): [True: 586, False: 8.60k]
  ------------------
  288|  1.18k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (288:37): [True: 410, False: 773]
  ------------------
  289|    410|                                {
  290|    410|                                    return OpCode::SGE;
  291|    410|                                }
  292|    773|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (292:42): [True: 532, False: 241]
  ------------------
  293|    532|                                {
  294|    532|                                    return OpCode::SGT;
  295|    532|                                }
  296|    241|                                break;
  297|       |
  298|    241|                            case 'H':
  ------------------
  |  Branch (298:29): [True: 238, False: 8.94k]
  ------------------
  299|    590|                            case 'h':
  ------------------
  |  Branch (299:29): [True: 352, False: 8.83k]
  ------------------
  300|    590|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (300:37): [True: 388, False: 202]
  ------------------
  301|    388|                                {
  302|    388|                                    return OpCode::SHU;
  303|    388|                                }
  304|    202|                                break;
  305|       |
  306|    552|                            case 'L':
  ------------------
  |  Branch (306:29): [True: 552, False: 8.63k]
  ------------------
  307|  1.91k|                            case 'l':
  ------------------
  |  Branch (307:29): [True: 1.36k, False: 7.82k]
  ------------------
  308|  1.91k|                                switch (c3)
  ------------------
  |  Branch (308:41): [True: 217, False: 1.69k]
  ------------------
  309|  1.91k|                                {
  310|    208|                                    case 'A':
  ------------------
  |  Branch (310:37): [True: 208, False: 1.70k]
  ------------------
  311|    408|                                    case 'a':
  ------------------
  |  Branch (311:37): [True: 200, False: 1.71k]
  ------------------
  312|    408|                                        return OpCode::SLA;
  313|       |
  314|    195|                                    case 'E':
  ------------------
  |  Branch (314:37): [True: 195, False: 1.72k]
  ------------------
  315|    397|                                    case 'e':
  ------------------
  |  Branch (315:37): [True: 202, False: 1.71k]
  ------------------
  316|    397|                                        return OpCode::SLE;
  317|       |
  318|    200|                                    case 'L':
  ------------------
  |  Branch (318:37): [True: 200, False: 1.71k]
  ------------------
  319|    498|                                    case 'l':
  ------------------
  |  Branch (319:37): [True: 298, False: 1.61k]
  ------------------
  320|    498|                                        return OpCode::SLL;
  321|       |
  322|    201|                                    case 'T':
  ------------------
  |  Branch (322:37): [True: 201, False: 1.71k]
  ------------------
  323|    396|                                    case 't':
  ------------------
  |  Branch (323:37): [True: 195, False: 1.72k]
  ------------------
  324|    396|                                        return OpCode::SLT;
  325|  1.91k|                                }
  326|    217|                                break;
  327|       |
  328|    335|                            case 'N':
  ------------------
  |  Branch (328:29): [True: 335, False: 8.85k]
  ------------------
  329|    773|                            case 'n':
  ------------------
  |  Branch (329:29): [True: 438, False: 8.74k]
  ------------------
  330|    773|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (330:37): [True: 389, False: 384]
  ------------------
  331|    389|                                {
  332|    389|                                    return OpCode::SNE;
  333|    389|                                }
  334|    384|                                break;
  335|       |
  336|    775|                            case 'R':
  ------------------
  |  Branch (336:29): [True: 775, False: 8.41k]
  ------------------
  337|  1.27k|                            case 'r':
  ------------------
  |  Branch (337:29): [True: 504, False: 8.68k]
  ------------------
  338|  1.27k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (338:37): [True: 562, False: 717]
  ------------------
  339|    562|                                {
  340|    562|                                    return OpCode::SRA;
  341|    562|                                }
  342|    717|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (342:42): [True: 503, False: 214]
  ------------------
  343|    503|                                {
  344|    503|                                    return OpCode::SRL;
  345|    503|                                }
  346|    214|                                break;
  347|       |
  348|    389|                            case 'U':
  ------------------
  |  Branch (348:29): [True: 389, False: 8.79k]
  ------------------
  349|    634|                            case 'u':
  ------------------
  |  Branch (349:29): [True: 245, False: 8.94k]
  ------------------
  350|    634|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (350:37): [True: 389, False: 245]
  ------------------
  351|    389|                                {
  352|    389|                                    return OpCode::SUB;
  353|    389|                                }
  354|    245|                                break;
  355|       |
  356|    245|                            case 'W':
  ------------------
  |  Branch (356:29): [True: 201, False: 8.98k]
  ------------------
  357|    914|                            case 'w':
  ------------------
  |  Branch (357:29): [True: 713, False: 8.47k]
  ------------------
  358|    914|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (358:37): [True: 516, False: 398]
  ------------------
  359|    516|                                {
  360|    516|                                    return OpCode::SWU;
  361|    516|                                }
  362|    398|                                break;
  363|  9.18k|                        }
  364|       |
  365|  3.56k|                    case 'X':
  ------------------
  |  Branch (365:21): [True: 546, False: 34.9k]
  ------------------
  366|  4.66k|                    case 'x':
  ------------------
  |  Branch (366:21): [True: 1.09k, False: 34.4k]
  ------------------
  367|  4.66k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (367:29): [True: 1.64k, False: 3.02k]
  |  Branch (367:29): [True: 1.02k, False: 3.63k]
  |  Branch (367:45): [True: 1.02k, False: 613]
  ------------------
  368|  1.02k|                        {
  369|  1.02k|                            return OpCode::XOR;
  370|  1.02k|                        }
  371|  3.63k|                        break;
  372|  35.5k|                }
  373|  18.5k|                break;
  374|  35.5k|            }
  375|       |
  376|       |            // 4 character OpCodes
  377|  41.7k|            case 4: {
  ------------------
  |  Branch (377:13): [True: 41.7k, False: 120k]
  ------------------
  378|  41.7k|                const char c1 = token[0u];
  379|  41.7k|                const char c2 = token[1u];
  380|  41.7k|                const char c3 = token[2u];
  381|  41.7k|                const char c4 = token[3u];
  382|       |
  383|  41.7k|                switch (c1)
  ------------------
  |  Branch (383:25): [True: 8.23k, False: 33.4k]
  ------------------
  384|  41.7k|                {
  385|  2.41k|                    case 'A':
  ------------------
  |  Branch (385:21): [True: 2.41k, False: 39.3k]
  ------------------
  386|  4.35k|                    case 'a':
  ------------------
  |  Branch (386:21): [True: 1.94k, False: 39.7k]
  ------------------
  387|  4.35k|                        switch (c2)
  ------------------
  |  Branch (387:33): [True: 209, False: 4.14k]
  ------------------
  388|  4.35k|                        {
  389|  1.42k|                            case 'D':
  ------------------
  |  Branch (389:29): [True: 1.42k, False: 2.93k]
  ------------------
  390|  3.02k|                            case 'd':
  ------------------
  |  Branch (390:29): [True: 1.60k, False: 2.75k]
  ------------------
  391|  3.02k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (391:37): [True: 2.69k, False: 332]
  ------------------
  392|  2.69k|                                {
  393|  2.69k|                                    switch (c4)
  ------------------
  |  Branch (393:45): [True: 197, False: 2.49k]
  ------------------
  394|  2.69k|                                    {
  395|    859|                                        case 'D':
  ------------------
  |  Branch (395:41): [True: 859, False: 1.83k]
  ------------------
  396|  1.06k|                                        case 'd':
  ------------------
  |  Branch (396:41): [True: 207, False: 2.48k]
  ------------------
  397|  1.06k|                                            return OpCode::ADDD;
  398|       |
  399|    194|                                        case 'F':
  ------------------
  |  Branch (399:41): [True: 194, False: 2.49k]
  ------------------
  400|    391|                                        case 'f':
  ------------------
  |  Branch (400:41): [True: 197, False: 2.49k]
  ------------------
  401|    391|                                            return OpCode::ADDF;
  402|       |
  403|    322|                                        case 'I':
  ------------------
  |  Branch (403:41): [True: 322, False: 2.36k]
  ------------------
  404|    516|                                        case 'i':
  ------------------
  |  Branch (404:41): [True: 194, False: 2.49k]
  ------------------
  405|    516|                                            return OpCode::ADDI;
  406|       |
  407|    325|                                        case 'U':
  ------------------
  |  Branch (407:41): [True: 325, False: 2.36k]
  ------------------
  408|    521|                                        case 'u':
  ------------------
  |  Branch (408:41): [True: 196, False: 2.49k]
  ------------------
  409|    521|                                            return OpCode::ADDU;
  410|  2.69k|                                    }
  411|  2.69k|                                }
  412|    529|                                break;
  413|       |
  414|    529|                            case 'N':
  ------------------
  |  Branch (414:29): [True: 198, False: 4.16k]
  ------------------
  415|  1.12k|                            case 'n':
  ------------------
  |  Branch (415:29): [True: 928, False: 3.43k]
  ------------------
  416|  1.12k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (416:37): [True: 789, False: 337]
  |  Branch (416:37): [True: 389, False: 737]
  |  Branch (416:53): [True: 389, False: 400]
  ------------------
  417|    389|                                {
  418|    389|                                    return OpCode::ANDI;
  419|    389|                                }
  420|       |
  421|    737|                                break;
  422|  4.35k|                        }
  423|  1.47k|                        break;
  424|       |
  425|  1.53k|                    case 'B':
  ------------------
  |  Branch (425:21): [True: 1.53k, False: 40.1k]
  ------------------
  426|  3.95k|                    case 'b':
  ------------------
  |  Branch (426:21): [True: 2.41k, False: 39.2k]
  ------------------
  427|  3.95k|                        switch (c2)
  ------------------
  |  Branch (427:33): [True: 279, False: 3.67k]
  ------------------
  428|  3.95k|                        {
  429|    385|                            case 'E':
  ------------------
  |  Branch (429:29): [True: 385, False: 3.56k]
  ------------------
  430|    777|                            case 'e':
  ------------------
  |  Branch (430:29): [True: 392, False: 3.56k]
  ------------------
  431|    777|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (431:37): [True: 583, False: 194]
  |  Branch (431:37): [True: 388, False: 389]
  |  Branch (431:53): [True: 388, False: 195]
  ------------------
  432|    388|                                {
  433|    388|                                    return OpCode::BEQZ;
  434|    388|                                }
  435|    389|                                break;
  436|       |
  437|    389|                            case 'F':
  ------------------
  |  Branch (437:29): [True: 282, False: 3.67k]
  ------------------
  438|  1.42k|                            case 'f':
  ------------------
  |  Branch (438:29): [True: 1.14k, False: 2.80k]
  ------------------
  439|  1.42k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (439:37): [True: 1.23k, False: 194]
  ------------------
  440|  1.23k|                                {
  441|  1.23k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (441:41): [True: 517, False: 718]
  ------------------
  442|    517|                                    {
  443|    517|                                        return OpCode::BFPF;
  444|    517|                                    }
  445|    718|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (445:46): [True: 516, False: 202]
  ------------------
  446|    516|                                    {
  447|    516|                                        return OpCode::BFPT;
  448|    516|                                    }
  449|  1.23k|                                }
  450|    396|                                break;
  451|       |
  452|    396|                            case 'N':
  ------------------
  |  Branch (452:29): [True: 393, False: 3.56k]
  ------------------
  453|  1.46k|                            case 'n':
  ------------------
  |  Branch (453:29): [True: 1.07k, False: 2.87k]
  ------------------
  454|  1.46k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (454:37): [True: 1.05k, False: 417]
  |  Branch (454:37): [True: 516, False: 953]
  |  Branch (454:53): [True: 516, False: 536]
  ------------------
  455|    516|                                {
  456|    516|                                    return OpCode::BNEZ;
  457|    516|                                }
  458|  3.95k|                        }
  459|  2.01k|                        break;
  460|       |
  461|  2.01k|                    case 'D':
  ------------------
  |  Branch (461:21): [True: 444, False: 41.2k]
  ------------------
  462|  2.67k|                    case 'd':
  ------------------
  |  Branch (462:21): [True: 2.22k, False: 39.4k]
  ------------------
  463|  2.67k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (463:29): [True: 2.23k, False: 437]
  |  Branch (463:29): [True: 1.89k, False: 779]
  |  Branch (463:45): [True: 1.89k, False: 342]
  ------------------
  464|  1.89k|                        {
  465|  1.89k|                            switch (c4)
  ------------------
  |  Branch (465:37): [True: 335, False: 1.55k]
  ------------------
  466|  1.89k|                            {
  467|    194|                                case 'D':
  ------------------
  |  Branch (467:33): [True: 194, False: 1.69k]
  ------------------
  468|    388|                                case 'd':
  ------------------
  |  Branch (468:33): [True: 194, False: 1.69k]
  ------------------
  469|    388|                                    return OpCode::DIVD;
  470|       |
  471|    194|                                case 'F':
  ------------------
  |  Branch (471:33): [True: 194, False: 1.69k]
  ------------------
  472|    389|                                case 'f':
  ------------------
  |  Branch (472:33): [True: 195, False: 1.69k]
  ------------------
  473|    389|                                    return OpCode::DIVF;
  474|       |
  475|    194|                                case 'I':
  ------------------
  |  Branch (475:33): [True: 194, False: 1.69k]
  ------------------
  476|    388|                                case 'i':
  ------------------
  |  Branch (476:33): [True: 194, False: 1.69k]
  ------------------
  477|    388|                                    return OpCode::DIVI;
  478|       |
  479|    195|                                case 'U':
  ------------------
  |  Branch (479:33): [True: 195, False: 1.69k]
  ------------------
  480|    391|                                case 'u':
  ------------------
  |  Branch (480:33): [True: 196, False: 1.69k]
  ------------------
  481|    391|                                    return OpCode::DIVU;
  482|  1.89k|                            }
  483|  1.89k|                        }
  484|  1.11k|                        break;
  485|       |
  486|  1.11k|                    case 'H':
  ------------------
  |  Branch (486:21): [True: 207, False: 41.5k]
  ------------------
  487|    995|                    case 'h':
  ------------------
  |  Branch (487:21): [True: 788, False: 40.9k]
  ------------------
  488|    995|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (488:29): [True: 801, False: 194]
  |  Branch (488:29): [True: 388, False: 607]
  |  Branch (488:45): [True: 593, False: 208]
  |  Branch (488:61): [True: 388, False: 205]
  ------------------
  489|    388|                        {
  490|    388|                            return OpCode::HALT;
  491|    388|                        }
  492|    607|                        break;
  493|       |
  494|    607|                    case 'J':
  ------------------
  |  Branch (494:21): [True: 331, False: 41.3k]
  ------------------
  495|  1.58k|                    case 'j':
  ------------------
  |  Branch (495:21): [True: 1.25k, False: 40.4k]
  ------------------
  496|  1.58k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (496:29): [True: 1.24k, False: 341]
  |  Branch (496:29): [True: 516, False: 1.07k]
  |  Branch (496:45): [True: 906, False: 340]
  |  Branch (496:61): [True: 516, False: 390]
  ------------------
  497|    516|                        {
  498|    516|                            return OpCode::JALR;
  499|    516|                        }
  500|  1.07k|                        break;
  501|       |
  502|  1.07k|                    case 'M':
  ------------------
  |  Branch (502:21): [True: 242, False: 41.4k]
  ------------------
  503|  2.44k|                    case 'm':
  ------------------
  |  Branch (503:21): [True: 2.20k, False: 39.5k]
  ------------------
  504|  2.44k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (504:29): [True: 1.42k, False: 1.02k]
  |  Branch (504:29): [True: 1.19k, False: 1.25k]
  |  Branch (504:45): [True: 1.19k, False: 230]
  ------------------
  505|  1.19k|                        {
  506|  1.19k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (506:33): [True: 388, False: 803]
  ------------------
  507|    388|                            {
  508|    388|                                return OpCode::MOVD;
  509|    388|                            }
  510|    803|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (510:38): [True: 516, False: 287]
  ------------------
  511|    516|                            {
  512|    516|                                return OpCode::MOVF;
  513|    516|                            }
  514|  1.19k|                        }
  515|  1.25k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (515:34): [True: 932, False: 319]
  |  Branch (515:34): [True: 407, False: 844]
  |  Branch (515:50): [True: 614, False: 318]
  |  Branch (515:66): [True: 407, False: 207]
  ------------------
  516|    407|                        {
  517|    407|                            return OpCode::MULT;
  518|    407|                        }
  519|  1.13k|                        break;
  520|       |
  521|  6.12k|                    case 'S':
  ------------------
  |  Branch (521:21): [True: 6.12k, False: 35.5k]
  ------------------
  522|  14.6k|                    case 's':
  ------------------
  |  Branch (522:21): [True: 8.50k, False: 33.2k]
  ------------------
  523|  14.6k|                        switch (c2)
  ------------------
  |  Branch (523:33): [True: 608, False: 14.0k]
  ------------------
  524|  14.6k|                        {
  525|  1.19k|                            case 'E':
  ------------------
  |  Branch (525:29): [True: 1.19k, False: 13.4k]
  ------------------
  526|  1.40k|                            case 'e':
  ------------------
  |  Branch (526:29): [True: 215, False: 14.4k]
  ------------------
  527|  1.40k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (527:37): [True: 1.20k, False: 202]
  ------------------
  528|  1.20k|                                {
  529|  1.20k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (529:41): [True: 394, False: 811]
  ------------------
  530|    394|                                    {
  531|    394|                                        return OpCode::SEQI;
  532|    394|                                    }
  533|    811|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (533:46): [True: 403, False: 408]
  ------------------
  534|    403|                                    {
  535|    403|                                        return OpCode::SEQU;
  536|    403|                                    }
  537|  1.20k|                                }
  538|    610|                                break;
  539|       |
  540|    868|                            case 'G':
  ------------------
  |  Branch (540:29): [True: 868, False: 13.7k]
  ------------------
  541|  2.75k|                            case 'g':
  ------------------
  |  Branch (541:29): [True: 1.88k, False: 12.7k]
  ------------------
  542|  2.75k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (542:37): [True: 1.31k, False: 1.43k]
  ------------------
  543|  1.31k|                                {
  544|  1.31k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (544:41): [True: 516, False: 802]
  ------------------
  545|    516|                                    {
  546|    516|                                        return OpCode::SGEI;
  547|    516|                                    }
  548|    802|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (548:46): [True: 557, False: 245]
  ------------------
  549|    557|                                    {
  550|    557|                                        return OpCode::SGEU;
  551|    557|                                    }
  552|  1.31k|                                }
  553|  1.43k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (553:42): [True: 1.22k, False: 215]
  ------------------
  554|  1.22k|                                {
  555|  1.22k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (555:41): [True: 388, False: 834]
  ------------------
  556|    388|                                    {
  557|    388|                                        return OpCode::SGTI;
  558|    388|                                    }
  559|    834|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (559:46): [True: 555, False: 279]
  ------------------
  560|    555|                                    {
  561|    555|                                        return OpCode::SGTU;
  562|    555|                                    }
  563|  1.22k|                                }
  564|    739|                                break;
  565|       |
  566|  1.03k|                            case 'L':
  ------------------
  |  Branch (566:29): [True: 1.03k, False: 13.5k]
  ------------------
  567|  4.13k|                            case 'l':
  ------------------
  |  Branch (567:29): [True: 3.10k, False: 11.5k]
  ------------------
  568|  4.13k|                                switch (c3)
  ------------------
  |  Branch (568:41): [True: 205, False: 3.93k]
  ------------------
  569|  4.13k|                                {
  570|    408|                                    case 'A':
  ------------------
  |  Branch (570:37): [True: 408, False: 3.73k]
  ------------------
  571|    691|                                    case 'a':
  ------------------
  |  Branch (571:37): [True: 283, False: 3.85k]
  ------------------
  572|    691|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (572:45): [True: 388, False: 303]
  ------------------
  573|    388|                                        {
  574|    388|                                            return OpCode::SLAI;
  575|    388|                                        }
  576|    303|                                        break;
  577|       |
  578|    765|                                    case 'E':
  ------------------
  |  Branch (578:37): [True: 765, False: 3.37k]
  ------------------
  579|  1.16k|                                    case 'e':
  ------------------
  |  Branch (579:37): [True: 404, False: 3.73k]
  ------------------
  580|  1.16k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (580:45): [True: 516, False: 653]
  ------------------
  581|    516|                                        {
  582|    516|                                            return OpCode::SLEI;
  583|    516|                                        }
  584|    653|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (584:50): [True: 391, False: 262]
  ------------------
  585|    391|                                        {
  586|    391|                                            return OpCode::SLEU;
  587|    391|                                        }
  588|    262|                                        break;
  589|       |
  590|    262|                                    case 'L':
  ------------------
  |  Branch (590:37): [True: 246, False: 3.89k]
  ------------------
  591|    600|                                    case 'l':
  ------------------
  |  Branch (591:37): [True: 354, False: 3.78k]
  ------------------
  592|    600|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (592:45): [True: 388, False: 212]
  ------------------
  593|    388|                                        {
  594|    388|                                            return OpCode::SLLI;
  595|    388|                                        }
  596|    212|                                        break;
  597|       |
  598|    918|                                    case 'T':
  ------------------
  |  Branch (598:37): [True: 918, False: 3.22k]
  ------------------
  599|  1.47k|                                    case 't':
  ------------------
  |  Branch (599:37): [True: 555, False: 3.58k]
  ------------------
  600|  1.47k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (600:45): [True: 388, False: 1.08k]
  ------------------
  601|    388|                                        {
  602|    388|                                            return OpCode::SLTI;
  603|    388|                                        }
  604|  1.08k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (604:50): [True: 516, False: 569]
  ------------------
  605|    516|                                        {
  606|    516|                                            return OpCode::SLTU;
  607|    516|                                        }
  608|    569|                                        break;
  609|  4.13k|                                }
  610|       |
  611|  1.79k|                            case 'N':
  ------------------
  |  Branch (611:29): [True: 245, False: 14.3k]
  ------------------
  612|  3.42k|                            case 'n':
  ------------------
  |  Branch (612:29): [True: 1.63k, False: 12.9k]
  ------------------
  613|  3.42k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (613:37): [True: 1.86k, False: 1.56k]
  ------------------
  614|  1.86k|                                {
  615|  1.86k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (615:41): [True: 388, False: 1.47k]
  ------------------
  616|    388|                                    {
  617|    388|                                        return OpCode::SNEI;
  618|    388|                                    }
  619|  1.47k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (619:46): [True: 823, False: 653]
  ------------------
  620|    823|                                    {
  621|    823|                                        return OpCode::SNEU;
  622|    823|                                    }
  623|  1.86k|                                }
  624|  2.21k|                                break;
  625|       |
  626|  2.21k|                            case 'R':
  ------------------
  |  Branch (626:29): [True: 769, False: 13.8k]
  ------------------
  627|  1.55k|                            case 'r':
  ------------------
  |  Branch (627:29): [True: 788, False: 13.8k]
  ------------------
  628|  1.55k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (628:37): [True: 778, False: 779]
  |  Branch (628:37): [True: 388, False: 1.16k]
  |  Branch (628:53): [True: 388, False: 390]
  ------------------
  629|    388|                                {
  630|    388|                                    return OpCode::SRAI;
  631|    388|                                }
  632|  1.16k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (632:42): [True: 779, False: 390]
  |  Branch (632:42): [True: 388, False: 781]
  |  Branch (632:58): [True: 388, False: 391]
  ------------------
  633|    388|                                {
  634|    388|                                    return OpCode::SRLI;
  635|    388|                                }
  636|    781|                                break;
  637|       |
  638|    819|                            case 'U':
  ------------------
  |  Branch (638:29): [True: 819, False: 13.8k]
  ------------------
  639|  2.28k|                            case 'u':
  ------------------
  |  Branch (639:29): [True: 1.46k, False: 13.1k]
  ------------------
  640|  2.28k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (640:37): [True: 1.91k, False: 375]
  ------------------
  641|  1.91k|                                {
  642|  1.91k|                                    switch (c4)
  ------------------
  |  Branch (642:45): [True: 228, False: 1.68k]
  ------------------
  643|  1.91k|                                    {
  644|    194|                                        case 'D':
  ------------------
  |  Branch (644:41): [True: 194, False: 1.71k]
  ------------------
  645|    390|                                        case 'd':
  ------------------
  |  Branch (645:41): [True: 196, False: 1.71k]
  ------------------
  646|    390|                                            return OpCode::SUBD;
  647|       |
  648|    194|                                        case 'F':
  ------------------
  |  Branch (648:41): [True: 194, False: 1.71k]
  ------------------
  649|    388|                                        case 'f':
  ------------------
  |  Branch (649:41): [True: 194, False: 1.71k]
  ------------------
  650|    388|                                            return OpCode::SUBF;
  651|       |
  652|    322|                                        case 'I':
  ------------------
  |  Branch (652:41): [True: 322, False: 1.59k]
  ------------------
  653|    516|                                        case 'i':
  ------------------
  |  Branch (653:41): [True: 194, False: 1.71k]
  ------------------
  654|    516|                                            return OpCode::SUBI;
  655|       |
  656|    195|                                        case 'U':
  ------------------
  |  Branch (656:41): [True: 195, False: 1.71k]
  ------------------
  657|    390|                                        case 'u':
  ------------------
  |  Branch (657:41): [True: 195, False: 1.71k]
  ------------------
  658|    390|                                            return OpCode::SUBU;
  659|  1.91k|                                    }
  660|  1.91k|                                }
  661|    603|                                break;
  662|  14.6k|                        }
  663|  5.55k|                        break;
  664|       |
  665|  5.55k|                    case 'T':
  ------------------
  |  Branch (665:21): [True: 195, False: 41.5k]
  ------------------
  666|    973|                    case 't':
  ------------------
  |  Branch (666:21): [True: 778, False: 40.9k]
  ------------------
  667|    973|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (667:29): [True: 776, False: 197]
  |  Branch (667:29): [True: 388, False: 585]
  |  Branch (667:45): [True: 582, False: 194]
  |  Branch (667:61): [True: 388, False: 194]
  ------------------
  668|    388|                        {
  669|    388|                            return OpCode::TRAP;
  670|    388|                        }
  671|    585|                        break;
  672|    771|                    case 'X':
  ------------------
  |  Branch (672:21): [True: 771, False: 40.9k]
  ------------------
  673|  1.87k|                    case 'x':
  ------------------
  |  Branch (673:21): [True: 1.09k, False: 40.6k]
  ------------------
  674|  1.87k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (674:29): [True: 1.63k, False: 237]
  |  Branch (674:29): [True: 388, False: 1.48k]
  |  Branch (674:45): [True: 1.38k, False: 251]
  |  Branch (674:61): [True: 388, False: 994]
  ------------------
  675|    388|                        {
  676|    388|                            return OpCode::XORI;
  677|    388|                        }
  678|  1.48k|                        break;
  679|  41.7k|                }
  680|  23.2k|                break;
  681|  41.7k|            }
  682|       |
  683|       |            // 5 character OpCodes
  684|  23.3k|            case 5: {
  ------------------
  |  Branch (684:13): [True: 23.3k, False: 138k]
  ------------------
  685|  23.3k|                const char c1 = token[0u];
  686|  23.3k|                const char c2 = token[1u];
  687|  23.3k|                const char c3 = token[2u];
  688|  23.3k|                const char c4 = token[3u];
  689|  23.3k|                const char c5 = token[4u];
  690|       |
  691|  23.3k|                switch (c1)
  ------------------
  |  Branch (691:25): [True: 5.03k, False: 18.3k]
  ------------------
  692|  23.3k|                {
  693|    639|                    case 'A':
  ------------------
  |  Branch (693:21): [True: 639, False: 22.7k]
  ------------------
  694|  2.03k|                    case 'a':
  ------------------
  |  Branch (694:21): [True: 1.39k, False: 21.9k]
  ------------------
  695|  2.03k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (695:29): [True: 1.79k, False: 233]
  |  Branch (695:29): [True: 644, False: 1.38k]
  |  Branch (695:45): [True: 1.60k, False: 194]
  |  Branch (695:61): [True: 1.21k, False: 392]
  |  Branch (695:77): [True: 644, False: 569]
  ------------------
  696|    644|                        {
  697|    644|                            return OpCode::ADDUI;
  698|    644|                        }
  699|  1.38k|                        break;
  700|       |
  701|  1.38k|                    case 'D':
  ------------------
  |  Branch (701:21): [True: 377, False: 22.9k]
  ------------------
  702|  1.96k|                    case 'd':
  ------------------
  |  Branch (702:21): [True: 1.58k, False: 21.7k]
  ------------------
  703|  1.96k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (703:29): [True: 1.55k, False: 403]
  |  Branch (703:29): [True: 388, False: 1.57k]
  |  Branch (703:45): [True: 1.22k, False: 328]
  |  Branch (703:61): [True: 777, False: 452]
  |  Branch (703:77): [True: 388, False: 389]
  ------------------
  704|    388|                        {
  705|    388|                            return OpCode::DIVUI;
  706|    388|                        }
  707|  1.57k|                        break;
  708|       |
  709|  1.57k|                    case 'M':
  ------------------
  |  Branch (709:21): [True: 585, False: 22.7k]
  ------------------
  710|  3.96k|                    case 'm':
  ------------------
  |  Branch (710:21): [True: 3.38k, False: 19.9k]
  ------------------
  711|  3.96k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (711:29): [True: 2.93k, False: 1.03k]
  |  Branch (711:29): [True: 2.27k, False: 1.69k]
  |  Branch (711:45): [True: 2.63k, False: 298]
  |  Branch (711:61): [True: 2.27k, False: 368]
  ------------------
  712|  2.27k|                        {
  713|  2.27k|                            switch (c5)
  ------------------
  |  Branch (713:37): [True: 365, False: 1.90k]
  ------------------
  714|  2.27k|                            {
  715|    194|                                case 'D':
  ------------------
  |  Branch (715:33): [True: 194, False: 2.07k]
  ------------------
  716|    388|                                case 'd':
  ------------------
  |  Branch (716:33): [True: 194, False: 2.07k]
  ------------------
  717|    388|                                    return OpCode::MULTD;
  718|       |
  719|    194|                                case 'F':
  ------------------
  |  Branch (719:33): [True: 194, False: 2.07k]
  ------------------
  720|    388|                                case 'f':
  ------------------
  |  Branch (720:33): [True: 194, False: 2.07k]
  ------------------
  721|    388|                                    return OpCode::MULTF;
  722|       |
  723|    194|                                case 'I':
  ------------------
  |  Branch (723:33): [True: 194, False: 2.07k]
  ------------------
  724|    388|                                case 'i':
  ------------------
  |  Branch (724:33): [True: 194, False: 2.07k]
  ------------------
  725|    388|                                    return OpCode::MULTI;
  726|       |
  727|    322|                                case 'U':
  ------------------
  |  Branch (727:33): [True: 322, False: 1.94k]
  ------------------
  728|    742|                                case 'u':
  ------------------
  |  Branch (728:33): [True: 420, False: 1.85k]
  ------------------
  729|    742|                                    return OpCode::MULTU;
  730|  2.27k|                            }
  731|  2.27k|                        }
  732|  2.06k|                        break;
  733|       |
  734|  4.85k|                    case 'S':
  ------------------
  |  Branch (734:21): [True: 4.85k, False: 18.4k]
  ------------------
  735|  10.3k|                    case 's':
  ------------------
  |  Branch (735:21): [True: 5.50k, False: 17.8k]
  ------------------
  736|  10.3k|                        switch (c2)
  ------------------
  |  Branch (736:33): [True: 300, False: 10.0k]
  ------------------
  737|  10.3k|                        {
  738|  1.92k|                            case 'E':
  ------------------
  |  Branch (738:29): [True: 1.92k, False: 8.43k]
  ------------------
  739|  2.13k|                            case 'e':
  ------------------
  |  Branch (739:29): [True: 212, False: 10.1k]
  ------------------
  740|  2.13k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (740:37): [True: 1.94k, False: 196]
  |  Branch (740:37): [True: 644, False: 1.49k]
  |  Branch (740:53): [True: 1.18k, False: 755]
  |  Branch (740:69): [True: 644, False: 541]
  ------------------
  741|    644|                                {
  742|    644|                                    return OpCode::SEQUI;
  743|    644|                                }
  744|  1.49k|                                break;
  745|       |
  746|  1.49k|                            case 'G':
  ------------------
  |  Branch (746:29): [True: 752, False: 9.60k]
  ------------------
  747|  2.25k|                            case 'g':
  ------------------
  |  Branch (747:29): [True: 1.49k, False: 8.85k]
  ------------------
  748|  2.25k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (748:37): [True: 1.13k, False: 1.11k]
  |  Branch (748:37): [True: 516, False: 1.73k]
  |  Branch (748:53): [True: 728, False: 404]
  |  Branch (748:69): [True: 516, False: 212]
  ------------------
  749|    516|                                {
  750|    516|                                    return OpCode::SGEUI;
  751|    516|                                }
  752|  1.73k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (752:42): [True: 1.11k, False: 621]
  |  Branch (752:42): [True: 516, False: 1.21k]
  |  Branch (752:58): [True: 919, False: 195]
  |  Branch (752:74): [True: 516, False: 403]
  ------------------
  753|    516|                                {
  754|    516|                                    return OpCode::SGTUI;
  755|    516|                                }
  756|  1.21k|                                break;
  757|       |
  758|  1.21k|                            case 'L':
  ------------------
  |  Branch (758:29): [True: 563, False: 9.79k]
  ------------------
  759|  2.58k|                            case 'l':
  ------------------
  |  Branch (759:29): [True: 2.01k, False: 8.33k]
  ------------------
  760|  2.58k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (760:37): [True: 1.13k, False: 1.45k]
  |  Branch (760:37): [True: 516, False: 2.06k]
  |  Branch (760:53): [True: 908, False: 222]
  |  Branch (760:69): [True: 516, False: 392]
  ------------------
  761|    516|                                {
  762|    516|                                    return OpCode::SLEUI;
  763|    516|                                }
  764|  2.06k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (764:42): [True: 1.27k, False: 787]
  |  Branch (764:42): [True: 516, False: 1.54k]
  |  Branch (764:58): [True: 1.03k, False: 247]
  |  Branch (764:74): [True: 516, False: 515]
  ------------------
  765|    516|                                {
  766|    516|                                    return OpCode::SLTUI;
  767|    516|                                }
  768|  1.54k|                                break;
  769|       |
  770|  1.54k|                            case 'N':
  ------------------
  |  Branch (770:29): [True: 204, False: 10.1k]
  ------------------
  771|  1.58k|                            case 'n':
  ------------------
  |  Branch (771:29): [True: 1.38k, False: 8.97k]
  ------------------
  772|  1.58k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (772:37): [True: 1.35k, False: 226]
  |  Branch (772:37): [True: 388, False: 1.19k]
  |  Branch (772:53): [True: 953, False: 406]
  |  Branch (772:69): [True: 388, False: 565]
  ------------------
  773|    388|                                {
  774|    388|                                    return OpCode::SNEUI;
  775|    388|                                }
  776|  1.19k|                                break;
  777|       |
  778|  1.19k|                            case 'U':
  ------------------
  |  Branch (778:29): [True: 460, False: 9.89k]
  ------------------
  779|  1.50k|                            case 'u':
  ------------------
  |  Branch (779:29): [True: 1.04k, False: 9.31k]
  ------------------
  780|  1.50k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (780:37): [True: 1.28k, False: 221]
  |  Branch (780:37): [True: 698, False: 803]
  |  Branch (780:53): [True: 1.00k, False: 277]
  |  Branch (780:69): [True: 698, False: 305]
  ------------------
  781|    698|                                {
  782|    698|                                    return OpCode::SUBUI;
  783|    698|                                }
  784|    803|                                break;
  785|  10.3k|                        }
  786|       |
  787|  6.56k|                        break;
  788|  23.3k|                }
  789|       |
  790|  16.6k|                break;
  791|  23.3k|            }
  792|       |
  793|       |            // 6 character OpCodes
  794|  16.6k|            case 6: {
  ------------------
  |  Branch (794:13): [True: 12.5k, False: 149k]
  ------------------
  795|  12.5k|                const char c1 = token[0u];
  796|  12.5k|                const char c2 = token[1u];
  797|  12.5k|                const char c3 = token[2u];
  798|  12.5k|                const char c4 = token[3u];
  799|  12.5k|                const char c5 = token[4u];
  800|  12.5k|                const char c6 = token[5u];
  801|       |
  802|  12.5k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (802:21): [True: 6.21k, False: 6.32k]
  |  Branch (802:21): [True: 5.61k, False: 6.92k]
  |  Branch (802:37): [True: 6.01k, False: 201]
  |  Branch (802:53): [True: 5.61k, False: 398]
  ------------------
  803|  5.61k|                {
  804|  5.61k|                    switch (c4)
  ------------------
  |  Branch (804:29): [True: 283, False: 5.33k]
  ------------------
  805|  5.61k|                    {
  806|    842|                        case 'D':
  ------------------
  |  Branch (806:25): [True: 842, False: 4.77k]
  ------------------
  807|  1.43k|                        case 'd':
  ------------------
  |  Branch (807:25): [True: 589, False: 5.02k]
  ------------------
  808|  1.43k|                            if (c5 == '2')
  ------------------
  |  Branch (808:33): [True: 1.22k, False: 205]
  ------------------
  809|  1.22k|                            {
  810|  1.22k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (810:37): [True: 516, False: 710]
  ------------------
  811|    516|                                {
  812|    516|                                    return OpCode::CVTD2F;
  813|    516|                                }
  814|    710|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (814:42): [True: 516, False: 194]
  ------------------
  815|    516|                                {
  816|    516|                                    return OpCode::CVTD2I;
  817|    516|                                }
  818|  1.22k|                            }
  819|    399|                            break;
  820|       |
  821|    399|                        case 'F':
  ------------------
  |  Branch (821:25): [True: 381, False: 5.23k]
  ------------------
  822|  2.20k|                        case 'f':
  ------------------
  |  Branch (822:25): [True: 1.82k, False: 3.79k]
  ------------------
  823|  2.20k|                            if (c5 == '2')
  ------------------
  |  Branch (823:33): [True: 1.86k, False: 338]
  ------------------
  824|  1.86k|                            {
  825|  1.86k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (825:37): [True: 516, False: 1.35k]
  ------------------
  826|    516|                                {
  827|    516|                                    return OpCode::CVTF2D;
  828|    516|                                }
  829|  1.35k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (829:42): [True: 772, False: 578]
  ------------------
  830|    772|                                {
  831|    772|                                    return OpCode::CVTF2I;
  832|    772|                                }
  833|  1.86k|                            }
  834|    916|                            break;
  835|       |
  836|  1.41k|                        case 'I':
  ------------------
  |  Branch (836:25): [True: 1.41k, False: 4.20k]
  ------------------
  837|  1.70k|                        case 'i':
  ------------------
  |  Branch (837:25): [True: 290, False: 5.32k]
  ------------------
  838|  1.70k|                            if (c5 == '2')
  ------------------
  |  Branch (838:33): [True: 1.22k, False: 474]
  ------------------
  839|  1.22k|                            {
  840|  1.22k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (840:37): [True: 388, False: 838]
  ------------------
  841|    388|                                {
  842|    388|                                    return OpCode::CVTI2D;
  843|    388|                                }
  844|    838|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (844:42): [True: 644, False: 194]
  ------------------
  845|    644|                                {
  846|    644|                                    return OpCode::CVTI2F;
  847|    644|                                }
  848|  1.22k|                            }
  849|  5.61k|                    }
  850|  5.61k|                }
  851|  6.92k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (851:26): [True: 4.27k, False: 2.64k]
  |  Branch (851:26): [True: 516, False: 6.41k]
  |  Branch (851:42): [True: 2.05k, False: 2.22k]
  |  Branch (851:58): [True: 1.73k, False: 323]
  |  Branch (851:74): [True: 1.18k, False: 544]
  ------------------
  852|  6.92k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (852:26): [True: 947, False: 239]
  |  Branch (852:42): [True: 516, False: 431]
  ------------------
  853|    516|                {
  854|    516|                    return OpCode::MULTUI;
  855|    516|                }
  856|  8.67k|                break;
  857|  12.5k|            }
  858|       |
  859|       |            // 7 character OpCodes
  860|  8.67k|            case 7: {
  ------------------
  |  Branch (860:13): [True: 5.87k, False: 156k]
  ------------------
  861|  5.87k|                const char c1 = token[0u];
  862|  5.87k|                const char c2 = token[1u];
  863|  5.87k|                const char c3 = token[2u];
  864|  5.87k|                const char c4 = token[3u];
  865|  5.87k|                const char c5 = token[4u];
  866|  5.87k|                const char c6 = token[5u];
  867|  5.87k|                const char c7 = token[6u];
  868|       |
  869|  5.87k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (869:21): [True: 4.21k, False: 1.66k]
  |  Branch (869:21): [True: 3.81k, False: 2.06k]
  |  Branch (869:37): [True: 4.01k, False: 204]
  |  Branch (869:53): [True: 3.81k, False: 194]
  ------------------
  870|  3.81k|                {
  871|  3.81k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (871:25): [True: 1.52k, False: 2.29k]
  |  Branch (871:25): [True: 388, False: 3.43k]
  |  Branch (871:41): [True: 1.17k, False: 354]
  |  Branch (871:54): [True: 969, False: 203]
  |  Branch (871:70): [True: 388, False: 581]
  ------------------
  872|    388|                    {
  873|    388|                        return OpCode::MOVI2FP;
  874|    388|                    }
  875|  3.43k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (875:25): [True: 2.28k, False: 1.14k]
  |  Branch (875:25): [True: 1.15k, False: 2.27k]
  |  Branch (875:41): [True: 1.67k, False: 605]
  |  Branch (875:57): [True: 1.35k, False: 325]
  |  Branch (875:70): [True: 1.15k, False: 196]
  ------------------
  876|  1.15k|                    {
  877|  1.15k|                        return OpCode::MOVFP2I;
  878|  1.15k|                    }
  879|  3.43k|                }
  880|  4.33k|                break;
  881|  5.87k|            }
  882|       |
  883|  4.33k|            default: {
  ------------------
  |  Branch (883:13): [True: 2.71k, False: 159k]
  ------------------
  884|  2.71k|                break;
  885|  5.87k|            }
  886|   162k|        }
  887|       |
  888|       |        // None found
  889|   100k|        return OpCode::NONE;
  890|   162k|    }
_ZN3dlx3iceEcc:
   15|   267k|    {
   16|   267k|        constexpr const char diff = 'a' - 'A';
   17|   267k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (17:16): [True: 84.4k, False: 182k]
  |  Branch (17:28): [True: 82.4k, False: 100k]
  ------------------
   18|   267k|    }

_ZN3dlx10ParseErrorC2Ev:
   18|   130k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  186|  1.22k|    {
  187|  1.22k|        ParseError err;
  188|       |
  189|  1.22k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  190|  1.22k|        err.m_LineNumber                           = line_number;
  191|  1.22k|        err.m_Column                               = column;
  192|  1.22k|        err.unexpected_argument_type.expected_type = expected_type;
  193|  1.22k|        err.unexpected_argument_type.actual_type   = actual_type;
  194|       |
  195|  1.22k|        return err;
  196|  1.22k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  201|  1.22k|    {
  202|  1.22k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  203|  1.22k|                                                         token.GetColumn().unsafe(), expected_type,
  204|  1.22k|                                                         actual_type);
  205|  1.22k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  209|    194|    {
  210|    194|        ParseError err;
  211|       |
  212|    194|        err.m_Type              = ParseError::Type::InvalidNumber;
  213|    194|        err.m_LineNumber        = line_number;
  214|    194|        err.m_Column            = column;
  215|    194|        err.invalid_number.text = text;
  216|       |
  217|    194|        return err;
  218|    194|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  221|    194|    {
  222|    194|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  223|    194|                                                token.GetColumn().unsafe(), token.GetText());
  224|    194|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  228|      2|    {
  229|      2|        ParseError err;
  230|       |
  231|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  232|      2|        err.m_LineNumber = line_number;
  233|      2|        err.m_Column     = column;
  234|       |
  235|      2|        return err;
  236|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  239|      2|    {
  240|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  241|      2|                                                                     token.GetColumn().unsafe());
  242|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  247|  37.2k|    {
  248|  37.2k|        ParseError err;
  249|       |
  250|  37.2k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  251|  37.2k|        err.m_LineNumber                   = line_number;
  252|  37.2k|        err.m_Column                       = column;
  253|  37.2k|        err.unexpected_token.expected_type = expected_type;
  254|  37.2k|        err.unexpected_token.actual_type   = actual_type;
  255|       |
  256|  37.2k|        return err;
  257|  37.2k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  261|  37.2k|    {
  262|  37.2k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  263|  37.2k|                                                  token.GetColumn().unsafe(), expected_type,
  264|  37.2k|                                                  token.GetType());
  265|  37.2k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  270|  23.5k|    {
  271|  23.5k|        ParseError err;
  272|       |
  273|  23.5k|        err.m_Type                         = ParseError::Type::ReservedIdentifier;
  274|  23.5k|        err.m_LineNumber                   = line_number;
  275|  23.5k|        err.m_Column                       = column;
  276|  23.5k|        err.reserved_identifier.identifier = identifier;
  277|       |
  278|  23.5k|        return err;
  279|  23.5k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorERKNS_5TokenE:
  282|    198|    {
  283|    198|        return ConstructReservedIdentifierParseError(token.GetLineNumber().unsafe(),
  284|    198|                                                     token.GetColumn().unsafe(), token.GetText());
  285|    198|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  290|  24.2k|    {
  291|  24.2k|        ParseError err;
  292|       |
  293|  24.2k|        err.m_Type                              = ParseError::Type::InvalidLabelIdentifier;
  294|  24.2k|        err.m_LineNumber                        = line_number;
  295|  24.2k|        err.m_Column                            = column;
  296|  24.2k|        err.invalid_label_identifier.identifier = identifier;
  297|       |
  298|  24.2k|        return err;
  299|  24.2k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  302|  24.2k|    {
  303|  24.2k|        return ConstructInvalidLabelIdentifierParseError(
  304|  24.2k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  305|  24.2k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  312|  8.31k|    {
  313|  8.31k|        ParseError err;
  314|       |
  315|  8.31k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  316|  8.31k|        err.m_LineNumber                     = line_number;
  317|  8.31k|        err.m_Column                         = column;
  318|  8.31k|        err.label_already_defined.label_name = label_name;
  319|  8.31k|        err.label_already_defined.at_line    = at_line;
  320|  8.31k|        err.label_already_defined.at_column  = at_column;
  321|       |
  322|  8.31k|        return err;
  323|  8.31k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  327|  8.31k|    {
  328|  8.31k|        return ConstructLabelAlreadyDefinedParseError(
  329|  8.31k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  330|  8.31k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  331|  8.31k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  335|  24.1k|    {
  336|  24.1k|        ParseError err;
  337|       |
  338|  24.1k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  339|  24.1k|        err.m_LineNumber = line_number;
  340|  24.1k|        err.m_Column     = column;
  341|       |
  342|  24.1k|        return err;
  343|  24.1k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  346|  24.1k|    {
  347|  24.1k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  348|  24.1k|                                                        token.GetColumn().unsafe());
  349|  24.1k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  354|  3.22k|    {
  355|  3.22k|        ParseError err;
  356|       |
  357|  3.22k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  358|  3.22k|        err.m_LineNumber               = line_number;
  359|  3.22k|        err.m_Column                   = column;
  360|  3.22k|        err.too_few_arguments.required = required;
  361|  3.22k|        err.too_few_arguments.provided = provided;
  362|       |
  363|  3.22k|        return err;
  364|  3.22k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  368|  3.22k|    {
  369|  3.22k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  370|  3.22k|                                                  token.GetColumn().unsafe(), required, provided);
  371|  3.22k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  375|  7.83k|    {
  376|  7.83k|        ParseError err;
  377|       |
  378|  7.83k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  379|  7.83k|        err.m_LineNumber           = line_number;
  380|  7.83k|        err.m_Column               = column;
  381|  7.83k|        err.empty_label.label_name = label_name;
  382|       |
  383|  7.83k|        return err;
  384|  7.83k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  387|  7.83k|    {
  388|  7.83k|        return ConstructEmptyLabelParseError(
  389|  7.83k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  390|  7.83k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (390:17): [True: 7.10k, False: 723]
  ------------------
  391|  7.10k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  392|  7.83k|                        token.GetText());
  393|  7.83k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  397|    311|    {
  398|    311|        ParseError err;
  399|       |
  400|    311|        err.m_Type       = ParseError::Type::TooManyComma;
  401|    311|        err.m_LineNumber = line_number;
  402|    311|        err.m_Column     = column;
  403|       |
  404|    311|        return err;
  405|    311|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  408|    311|    {
  409|    311|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  410|    311|                                               token.GetColumn().unsafe());
  411|    311|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   16|   130k|    {
   17|   130k|        m_ParseErrors.emplace_back(phi::move(error));
   18|   130k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  4.25k|    {
  181|  4.25k|        ParsedProgram program;
  182|       |
  183|  4.25k|        program.m_Tokens = tokens;
  184|       |
  185|  4.25k|        phi::boolean line_has_instruction{false};
  186|  4.25k|        phi::usize   label_count{0u};
  187|       |
  188|   155k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 150k, False: 4.25k]
  ------------------
  189|   150k|        {
  190|   150k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   150k|            switch (current_token.GetType())
  195|   150k|            {
  196|       |                // Ignore comments
  197|    913|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 913, False: 149k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|    913|                    break;
  200|       |
  201|  17.3k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 17.3k, False: 133k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  17.3k|                    line_has_instruction = false;
  204|  17.3k|                    break;
  205|       |
  206|  63.9k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 63.9k, False: 86.9k]
  ------------------
  207|  63.9k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 3.93k, False: 59.9k]
  ------------------
  208|  3.93k|                    {
  209|  3.93k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  3.93k|                                current_token, Token::Type::NewLine));
  211|  3.93k|                        break;
  212|  3.93k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  59.9k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 11.5k, False: 48.4k]
  ------------------
  217|  11.5k|                    {
  218|  11.5k|                        program.AddParseError(
  219|  11.5k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  11.5k|                        break;
  221|  11.5k|                    }
  222|       |
  223|  48.4k|                    phi::string_view label_name = current_token.GetText();
  224|  48.4k|                    label_name.remove_suffix(1u);
  225|       |
  226|  48.4k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 23.3k, False: 25.1k]
  ------------------
  227|  23.3k|                    {
  228|  23.3k|                        program.AddParseError(ConstructReservedIdentifierParseError(
  229|  23.3k|                                current_token.GetLineNumber().unsafe(),
  230|  23.3k|                                current_token.GetColumn().unsafe(), label_name));
  231|  23.3k|                        break;
  232|  23.3k|                    }
  233|       |
  234|  25.1k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 8.67k, False: 16.4k]
  ------------------
  235|  8.67k|                    {
  236|  8.67k|                        program.AddParseError(
  237|  8.67k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  8.67k|                        break;
  239|  8.67k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  16.4k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 8.31k, False: 8.17k]
  ------------------
  243|  8.31k|                    {
  244|       |                        // Find first defintions of label
  245|  8.31k|                        const Token* first_label_definition =
  246|  8.31k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  8.31k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  8.31k|                                    {
  249|  8.31k|                                        phi::string_view token_label_name = t.GetText();
  250|  8.31k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  8.31k|                                        if (token_label_name == label_name)
  253|  8.31k|                                        {
  254|  8.31k|                                            return true;
  255|  8.31k|                                        }
  256|  8.31k|                                    }
  257|       |
  258|  8.31k|                                    return false;
  259|  8.31k|                                });
  260|       |
  261|  8.31k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  8.31k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  8.31k|                                current_token, *first_label_definition));
  265|  8.31k|                        break;
  266|  8.31k|                    }
  267|       |
  268|  8.17k|                    program.m_JumpData[label_name] =
  269|  8.17k|                            static_cast<phi::uint32_t>(program.m_Instructions.size());
  270|  8.17k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  8.17k|                    break;
  276|  16.4k|                }
  277|       |
  278|  38.6k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 38.6k, False: 112k]
  ------------------
  279|  38.6k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 24.1k, False: 14.5k]
  ------------------
  280|  24.1k|                    {
  281|  24.1k|                        program.AddParseError(
  282|  24.1k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  24.1k|                        break;
  284|  24.1k|                    }
  285|       |
  286|  14.5k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  14.5k|                    PHI_ASSERT(current_token.HasHint());
  290|  14.5k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  14.5k|                    const InstructionInfo& info = LookUpInstructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  14.5k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  14.5k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  14.5k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  14.5k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  14.5k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  14.5k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  14.5k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  26.6k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 24.2k, False: 2.35k]
  ------------------
  312|  24.2k|                    {
  313|       |                        // Get next token
  314|  24.2k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 730, False: 23.5k]
  ------------------
  315|    730|                        {
  316|    730|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    730|                                    current_token, number_of_argument_required.unsafe(),
  318|    730|                                    argument_num.unsafe()));
  319|    730|                            break;
  320|    730|                        }
  321|       |
  322|  23.5k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  23.5k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 8.14k, False: 15.4k]
  ------------------
  326|  8.14k|                        {
  327|  8.14k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 311, False: 7.82k]
  ------------------
  328|    311|                            {
  329|    311|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    311|                            }
  331|       |
  332|  8.14k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  8.14k|                            continue;
  335|  8.14k|                        }
  336|       |
  337|  15.4k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 2.49k, False: 12.9k]
  ------------------
  338|  2.49k|                        {
  339|  2.49k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  2.49k|                                    token, number_of_argument_required.unsafe(),
  341|  2.49k|                                    argument_num.unsafe()));
  342|  2.49k|                            break;
  343|  2.49k|                        }
  344|       |
  345|  12.9k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  12.9k|                                parse_instruction_argument(
  347|  12.9k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  12.9k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 8.93k, False: 3.97k]
  ------------------
  349|  8.93k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  8.93k|                            break;
  352|  8.93k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  3.97k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  3.97k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  3.97k|                        argument_num++;
  359|  3.97k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  3.97k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  14.5k|                    program.m_Instructions.emplace_back(instruction);
  367|  14.5k|                    line_has_instruction = true;
  368|  14.5k|                    break;
  369|  38.6k|                }
  370|       |
  371|  30.0k|                default:
  ------------------
  |  Branch (371:17): [True: 30.0k, False: 120k]
  ------------------
  372|  30.0k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  30.0k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 18.2k, False: 11.8k]
  ------------------
  374|  18.2k|                    {
  375|  18.2k|                        expected_token_type = Token::Type::NewLine;
  376|  18.2k|                    }
  377|       |
  378|  30.0k|                    program.AddParseError(
  379|  30.0k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  30.0k|                    break;
  381|   150k|            }
  382|   150k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  4.25k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 452, False: 3.79k]
  ------------------
  386|    452|        {
  387|  9.29k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 8.84k, False: 452]
  ------------------
  388|  8.84k|            {
  389|  8.84k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  8.84k|                const Token& token = *it;
  392|  8.84k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 7.83k, False: 1.01k]
  ------------------
  393|  7.83k|                {
  394|  7.83k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  7.83k|                    --label_count;
  396|  7.83k|                }
  397|  8.84k|            }
  398|    452|        }
  399|       |
  400|  4.25k|        return program;
  401|  4.25k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  4.25k|    {
  405|  4.25k|        TokenStream tokens = Tokenize(source);
  406|  4.25k|        return Parse(tokens);
  407|  4.25k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  12.9k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  12.9k|        switch (token.GetType())
   37|  12.9k|        {
   38|  1.31k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 1.31k, False: 11.5k]
  ------------------
   39|  1.31k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 252, False: 1.06k]
  ------------------
   40|  1.31k|                                          ArgumentType::AddressDisplacement))
   41|    252|                {
   42|    252|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    252|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    252|                    return {};
   46|    252|                }
   47|       |
   48|       |                // Get address displacement
   49|  1.06k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  1.06k|                phi::int16_t value = static_cast<phi::int16_t>(token.GetHint());
   52|       |
   53|  1.06k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 2, False: 1.06k]
  ------------------
   54|      2|                {
   55|      2|                    program.AddParseError(
   56|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      2|                    return {};
   58|      2|                }
   59|       |
   60|  1.06k|                auto         it           = tokens.current_position();
   61|  1.06k|                const Token& first_token  = tokens.consume();
   62|  1.06k|                const Token& second_token = tokens.consume();
   63|  1.06k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  1.06k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 323, False: 742]
  ------------------
   66|    323|                {
   67|    323|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    323|                            first_token, Token::Type::OpenBracket));
   69|    323|                    return {};
   70|    323|                }
   71|       |
   72|       |                // Second token is the register
   73|    742|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 322, False: 420]
  ------------------
   74|    322|                {
   75|    322|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|    322|                            second_token, Token::Type::RegisterInt));
   77|    322|                    return {};
   78|    322|                }
   79|       |
   80|    420|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 226, False: 194]
  ------------------
   81|    226|                {
   82|    226|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|    226|                            third_token, Token::Type::ClosingBracket));
   84|    226|                    return {};
   85|    226|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|    194|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|    194|                return ConstructInstructionArgumentAddressDisplacement(
   94|    194|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|    420|            }
   96|    557|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 557, False: 12.3k]
  ------------------
   97|    557|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 226, False: 331]
  ------------------
   98|    226|                {
   99|    226|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    226|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    226|                    return {};
  102|    226|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|    331|                return ConstructInstructionArgumentRegisterInt(
  108|    331|                        static_cast<IntRegisterID>(token.GetHint()));
  109|    557|            }
  110|  2.20k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 2.20k, False: 10.7k]
  ------------------
  111|  2.20k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 194, False: 2.01k]
  ------------------
  112|    194|                {
  113|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    194|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    194|                    return {};
  116|    194|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  2.01k|                return ConstructInstructionArgumentRegisterFloat(
  122|  2.01k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  2.20k|            }
  124|    198|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 198, False: 12.7k]
  ------------------
  125|    198|                program.AddParseError(ConstructReservedIdentifierParseError(token));
  126|       |
  127|    198|                return {};
  128|  2.20k|            }
  129|  5.64k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 5.64k, False: 7.27k]
  ------------------
  130|       |                // Parse as Label
  131|  5.64k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 361, False: 5.27k]
  ------------------
  132|    361|                {
  133|    361|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|    361|                            token, expected_argument_type, ArgumentType::Label));
  135|    361|                    return {};
  136|    361|                }
  137|       |
  138|  5.27k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 5.27k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentifierParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  5.27k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 4.05k, False: 1.22k]
  ------------------
  145|  4.05k|                {
  146|  4.05k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  4.05k|                    return {};
  148|  4.05k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  1.22k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  5.27k|            }
  154|    595|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 595, False: 12.3k]
  ------------------
  155|    595|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 194, False: 401]
  ------------------
  156|    194|                {
  157|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    194|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    194|                    return {};
  160|    194|                }
  161|       |
  162|    401|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 207, False: 194]
  ------------------
  163|    207|                {
  164|    207|                    return ConstructInstructionArgumentImmediateValue(
  165|    207|                            static_cast<phi::int16_t>(token.GetHint()));
  166|    207|                }
  167|       |
  168|    194|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    194|                return {};
  170|    401|            }
  171|       |
  172|  2.39k|            default:
  ------------------
  |  Branch (172:13): [True: 2.39k, False: 10.5k]
  ------------------
  173|  2.39k|                program.AddParseError(
  174|  2.39k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  2.39k|                return {};
  176|  12.9k|        }
  177|  12.9k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  27.3k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  27.3k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 25.1k, False: 2.18k]
  ------------------
  248|  25.1k|                                    {
  249|  25.1k|                                        phi::string_view token_label_name = t.GetText();
  250|  25.1k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  25.1k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 8.31k, False: 16.8k]
  ------------------
  253|  8.31k|                                        {
  254|  8.31k|                                            return true;
  255|  8.31k|                                        }
  256|  25.1k|                                    }
  257|       |
  258|  19.0k|                                    return false;
  259|  27.3k|                                });

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   10|   168k|    {
   11|   168k|        if (token.length() == 2u)
  ------------------
  |  Branch (11:13): [True: 26.2k, False: 141k]
  ------------------
   12|  26.2k|        {
   13|  26.2k|            const char first_char = token[0u];
   14|  26.2k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (14:17): [True: 414, False: 25.8k]
  |  Branch (14:38): [True: 2.02k, False: 23.7k]
  ------------------
   15|  2.43k|            {
   16|  2.43k|                const char second_char = token[1u];
   17|  2.43k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (17:21): [True: 2.10k, False: 332]
  |  Branch (17:43): [True: 1.68k, False: 423]
  ------------------
   18|  1.68k|                {
   19|  1.68k|                    return static_cast<IntRegisterID>(second_char - '0');
   20|  1.68k|                }
   21|  2.43k|            }
   22|  26.2k|        }
   23|   141k|        else if (token.length() == 3u)
  ------------------
  |  Branch (23:18): [True: 37.2k, False: 104k]
  ------------------
   24|  37.2k|        {
   25|  37.2k|            const char first_char = token[0u];
   26|  37.2k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (26:17): [True: 201, False: 37.0k]
  |  Branch (26:38): [True: 2.02k, False: 35.0k]
  ------------------
   27|  2.22k|            {
   28|  2.22k|                const char second_char = token[1u];
   29|  2.22k|                const char third_char  = token[2u];
   30|       |
   31|  2.22k|                switch (second_char)
   32|  2.22k|                {
   33|    713|                    case '1': {
  ------------------
  |  Branch (33:21): [True: 713, False: 1.51k]
  ------------------
   34|    713|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (34:29): [True: 391, False: 322]
  |  Branch (34:50): [True: 197, False: 194]
  ------------------
   35|    197|                        {
   36|    197|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   37|    197|                        }
   38|    516|                        break;
   39|    713|                    }
   40|    590|                    case '2': {
  ------------------
  |  Branch (40:21): [True: 590, False: 1.63k]
  ------------------
   41|    590|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (41:29): [True: 396, False: 194]
  |  Branch (41:50): [True: 194, False: 202]
  ------------------
   42|    194|                        {
   43|    194|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   44|    194|                        }
   45|    396|                        break;
   46|    590|                    }
   47|    710|                    case '3': {
  ------------------
  |  Branch (47:21): [True: 710, False: 1.51k]
  ------------------
   48|    710|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (48:29): [True: 194, False: 516]
  |  Branch (48:50): [True: 322, False: 194]
  ------------------
   49|    516|                        {
   50|    516|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   51|    516|                        }
   52|    194|                        break;
   53|    710|                    }
   54|    216|                    default: {
  ------------------
  |  Branch (54:21): [True: 216, False: 2.01k]
  ------------------
   55|    216|                        break;
   56|    710|                    }
   57|  2.22k|                }
   58|  2.22k|            }
   59|  37.2k|        }
   60|       |
   61|   165k|        return IntRegisterID::None;
   62|   168k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|   165k|    {
   66|   165k|        if (token.length() == 2u)
  ------------------
  |  Branch (66:13): [True: 24.5k, False: 141k]
  ------------------
   67|  24.5k|        {
   68|  24.5k|            const char first_char = token[0u];
   69|  24.5k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (69:17): [True: 2.80k, False: 21.7k]
  |  Branch (69:38): [True: 838, False: 20.9k]
  ------------------
   70|  3.64k|            {
   71|  3.64k|                const char second_char = token[1u];
   72|  3.64k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (72:21): [True: 3.39k, False: 247]
  |  Branch (72:43): [True: 2.70k, False: 687]
  ------------------
   73|  2.70k|                {
   74|  2.70k|                    return static_cast<FloatRegisterID>(second_char - '0');
   75|  2.70k|                }
   76|  3.64k|            }
   77|  24.5k|        }
   78|   141k|        else if (token.length() == 3u)
  ------------------
  |  Branch (78:18): [True: 36.3k, False: 104k]
  ------------------
   79|  36.3k|        {
   80|  36.3k|            const char first_char = token[0u];
   81|  36.3k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (81:17): [True: 1.52k, False: 34.8k]
  |  Branch (81:38): [True: 1.15k, False: 33.6k]
  ------------------
   82|  2.67k|            {
   83|  2.67k|                const char second_char = token[1u];
   84|  2.67k|                const char third_char  = token[2u];
   85|       |
   86|  2.67k|                switch (second_char)
   87|  2.67k|                {
   88|    584|                    case '1': {
  ------------------
  |  Branch (88:21): [True: 584, False: 2.09k]
  ------------------
   89|    584|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (89:29): [True: 390, False: 194]
  |  Branch (89:50): [True: 194, False: 196]
  ------------------
   90|    194|                        {
   91|    194|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   92|    194|                        }
   93|    390|                        break;
   94|    584|                    }
   95|    627|                    case '2': {
  ------------------
  |  Branch (95:21): [True: 627, False: 2.05k]
  ------------------
   96|    627|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (96:29): [True: 433, False: 194]
  |  Branch (96:50): [True: 238, False: 195]
  ------------------
   97|    238|                        {
   98|    238|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
   99|    238|                        }
  100|    389|                        break;
  101|    627|                    }
  102|    584|                    case '3': {
  ------------------
  |  Branch (102:21): [True: 584, False: 2.09k]
  ------------------
  103|    584|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (103:29): [True: 194, False: 390]
  |  Branch (103:50): [True: 194, False: 196]
  ------------------
  104|    388|                        {
  105|    388|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  106|    388|                        }
  107|    196|                        break;
  108|    584|                    }
  109|    883|                    default: {
  ------------------
  |  Branch (109:21): [True: 883, False: 1.79k]
  ------------------
  110|    883|                        break;
  111|    584|                    }
  112|  2.67k|                }
  113|  2.67k|            }
  114|  36.3k|        }
  115|       |
  116|   162k|        return FloatRegisterID::None;
  117|   165k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  120|   145k|    {
  121|   145k|        if (token.length() == 4u)
  ------------------
  |  Branch (121:13): [True: 34.1k, False: 111k]
  ------------------
  122|  34.1k|        {
  123|  34.1k|            const char c1 = token[0u];
  124|  34.1k|            const char c2 = token[1u];
  125|  34.1k|            const char c3 = token[2u];
  126|  34.1k|            const char c4 = token[3u];
  127|       |
  128|  34.1k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (128:21): [True: 1.05k, False: 33.1k]
  |  Branch (128:34): [True: 1.41k, False: 31.7k]
  |  Branch (128:49): [True: 773, False: 1.69k]
  |  Branch (128:62): [True: 242, False: 1.45k]
  ------------------
  129|  34.1k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (129:21): [True: 200, False: 815]
  |  Branch (129:34): [True: 565, False: 250]
  |  Branch (129:49): [True: 194, False: 571]
  |  Branch (129:62): [True: 388, False: 183]
  ------------------
  130|  34.1k|        }
  131|       |
  132|   111k|        return false;
  133|   145k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   26|   130k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   36|  47.3k|    {}
_ZNK3dlx5Token7GetTypeEv:
   39|   278k|    {
   40|   278k|        return m_Type;
   41|   278k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   49|   153k|    {
   50|   153k|        return m_LineNumber;
   51|   153k|    }
_ZNK3dlx5Token9GetColumnEv:
   54|   138k|    {
   55|   138k|        return m_Column;
   56|   138k|    }
_ZNK3dlx5Token7GetTextEv:
   64|   201k|    {
   65|   201k|        return m_Text;
   66|   201k|    }
_ZNK3dlx5Token7HasHintEv:
   78|  15.9k|    {
   79|  15.9k|        return m_HasHint;
   80|  15.9k|    }
_ZNK3dlx5Token7GetHintEv:
   83|  18.3k|    {
   84|  18.3k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   85|  18.3k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   86|  18.3k|                   m_Type == Type::ImmediateInteger);
   87|  18.3k|        PHI_ASSERT(m_HasHint);
   88|       |
   89|  18.3k|        return m_Hint;
   90|  18.3k|    }

_ZN3dlx11TokenStream8finalizeEv:
   28|  4.25k|    {
   29|       |#if defined(PHI_DEBUG)
   30|       |        PHI_ASSERT(!m_Finalized);
   31|       |#endif
   32|       |
   33|  4.25k|        m_Iterator = 0u;
   34|       |#if defined(PHI_DEBUG)
   35|       |        m_Finalized = true;
   36|       |#endif
   37|  4.25k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   49|  1.06k|    {
   50|  1.06k|        return x + m_Iterator <= m_Tokens.size();
   51|  1.06k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   54|   179k|    {
   55|   179k|        return m_Iterator < m_Tokens.size();
   56|   179k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   59|   177k|    {
   60|   177k|        return m_Iterator >= m_Tokens.size();
   61|   177k|    }
_ZN3dlx11TokenStream7consumeEv:
   74|   177k|    {
   75|   177k|        PHI_ASSERT(!reached_end());
   76|       |#if defined(PHI_DEBUG)
   77|       |        PHI_ASSERT(m_Finalized);
   78|       |#endif
   79|       |
   80|   177k|        return m_Tokens.at(m_Iterator++.unsafe());
   81|   177k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  154|  1.06k|    {
  155|  1.06k|        return m_Iterator;
  156|  1.06k|    }
_ZN3dlx11TokenStream12set_positionEN3phi7integerImEE:
  159|    194|    {
  160|       |#if defined(PHI_DEBUG)
  161|       |        PHI_ASSERT(m_Finalized);
  162|       |#endif
  163|       |
  164|    194|        m_Iterator = pos;
  165|    194|    }
_ZNK3dlx11TokenStream6rbeginEv:
  204|    452|    {
  205|       |#if defined(PHI_DEBUG)
  206|       |        //PHI_ASSERT(m_Finalized);
  207|       |#endif
  208|       |
  209|    452|        return m_Tokens.rbegin();
  210|    452|    }
_ZNK3dlx11TokenStream4rendEv:
  213|  8.84k|    {
  214|       |#if defined(PHI_DEBUG)
  215|       |        //PHI_ASSERT(m_Finalized);
  216|       |#endif
  217|       |
  218|  8.84k|        return m_Tokens.rend();
  219|  8.84k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  4.25k|    {
   66|  4.25k|        TokenStream tokens;
   67|       |
   68|  4.25k|        phi::string_view current_token;
   69|       |
   70|  4.25k|        phi::u64 current_line_number{1u};
   71|  4.25k|        phi::u64 current_column{1u};
   72|  4.25k|        phi::u64 token_begin{0u};
   73|       |
   74|  4.25k|        phi::boolean parsing_comment{false};
   75|       |
   76|   522k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 517k, False: 4.25k]
  ------------------
   77|   517k|        {
   78|   517k|            const char c{source.at(i)};
   79|       |
   80|   517k|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 19.9k, False: 498k]
  ------------------
   81|  19.9k|            {
   82|  19.9k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 3.18k, False: 16.7k]
  ------------------
   83|  3.18k|                {
   84|       |                    // Skip empty lines
   85|  3.18k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  3.18k|                                        current_line_number, current_column);
   87|       |
   88|  3.18k|                    parsing_comment = false;
   89|  3.18k|                    current_line_number += 1u;
   90|  3.18k|                    current_column = 1u;
   91|  3.18k|                    continue;
   92|  3.18k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  16.7k|                tokens.emplace_back(ParseToken(
   96|  16.7k|                        source.substring_view(
   97|  16.7k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  16.7k|                                current_token.length()),
   99|  16.7k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  16.7k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  16.7k|                                    current_line_number, current_column);
  103|       |
  104|  16.7k|                current_token   = phi::string_view{};
  105|  16.7k|                parsing_comment = false;
  106|  16.7k|                current_line_number += 1u;
  107|  16.7k|                current_column = 0u;
  108|  16.7k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|   498k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 502, False: 497k]
  |  Branch (110:34): [True: 851, False: 496k]
  ------------------
  111|  1.35k|            {
  112|  1.35k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 235, False: 1.11k]
  ------------------
  113|    235|                {
  114|    235|                    token_begin = i;
  115|    235|                }
  116|  1.11k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 734, False: 384]
  ------------------
  117|    734|                {
  118|    734|                    tokens.emplace_back(ParseToken(
  119|    734|                            source.substring_view(
  120|    734|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|    734|                                    current_token.length()),
  122|    734|                            current_line_number, current_column - current_token.length()));
  123|    734|                    token_begin   = i;
  124|    734|                    current_token = phi::string_view{};
  125|    734|                }
  126|       |
  127|  1.35k|                parsing_comment = true;
  128|  1.35k|                current_token   = source.substring_view(
  129|  1.35k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  1.35k|                        current_token.length() + 1u);
  131|  1.35k|            }
  132|   496k|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 211, False: 496k]
  ------------------
  133|    211|            {
  134|       |                // simply append the character
  135|    211|                current_token = source.substring_view(
  136|    211|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|    211|                        current_token.length() + 1u);
  138|    211|            }
  139|   496k|            else
  140|   496k|            {
  141|       |                // Not parsing a comment
  142|   496k|                switch (c)
  143|   496k|                {
  144|  4.08k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 4.08k, False: 492k]
  ------------------
  145|  8.79k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 4.71k, False: 491k]
  ------------------
  146|  14.3k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 5.54k, False: 490k]
  ------------------
  147|  14.3k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 943, False: 13.4k]
  ------------------
  148|    943|                        {
  149|    943|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|    943|                            continue;
  152|    943|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  13.4k|                        tokens.emplace_back(ParseToken(
  156|  13.4k|                                source.substring_view(
  157|  13.4k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  13.4k|                                        current_token.length()),
  159|  13.4k|                                current_line_number, current_column - current_token.length()));
  160|  13.4k|                        current_token = phi::string_view{};
  161|  13.4k|                        break;
  162|  52.4k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 52.4k, False: 444k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  52.4k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 50.9k, False: 1.46k]
  ------------------
  165|  50.9k|                        {
  166|  50.9k|                            current_token = source.substring_view(
  167|  50.9k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  50.9k|                                    current_token.length() + 1u);
  169|  50.9k|                            tokens.emplace_back(ParseToken(
  170|  50.9k|                                    source.substring_view(
  171|  50.9k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  50.9k|                                                    token_begin),
  173|  50.9k|                                            current_token.length()),
  174|  50.9k|                                    current_line_number,
  175|  50.9k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  50.9k|                            current_token = phi::string_view{};
  178|  50.9k|                        }
  179|  1.46k|                        else
  180|  1.46k|                        {
  181|       |                            // Orphan colon
  182|  1.46k|                            token_begin = i;
  183|       |
  184|  1.46k|                            tokens.emplace_back(
  185|  1.46k|                                    Token::Type::Colon,
  186|  1.46k|                                    source.substring_view(
  187|  1.46k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  1.46k|                                                    token_begin),
  189|  1.46k|                                            1u),
  190|  1.46k|                                    current_line_number, current_column);
  191|  1.46k|                        }
  192|  52.4k|                        break;
  193|  20.3k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 20.3k, False: 476k]
  ------------------
  194|  35.8k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 15.4k, False: 480k]
  ------------------
  195|  37.1k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 1.31k, False: 495k]
  ------------------
  196|  37.1k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 34.0k, False: 3.11k]
  ------------------
  197|  34.0k|                        {
  198|  34.0k|                            tokens.emplace_back(ParseToken(
  199|  34.0k|                                    source.substring_view(
  200|  34.0k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  34.0k|                                                    token_begin),
  202|  34.0k|                                            current_token.length()),
  203|  34.0k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  34.0k|                            current_token = phi::string_view{};
  206|  34.0k|                        }
  207|       |
  208|  37.1k|                        Token::Type type;
  209|  37.1k|                        switch (c)
  210|  37.1k|                        {
  211|  20.3k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 20.3k, False: 16.7k]
  ------------------
  212|  20.3k|                                type = Token::Type::Comma;
  213|  20.3k|                                break;
  214|  15.4k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 15.4k, False: 21.7k]
  ------------------
  215|  15.4k|                                type = Token::Type::OpenBracket;
  216|  15.4k|                                break;
  217|  1.31k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 1.31k, False: 35.8k]
  ------------------
  218|  1.31k|                                type = Token::Type::ClosingBracket;
  219|  1.31k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 37.1k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  37.1k|#endif
  225|  37.1k|                        }
  226|       |
  227|  37.1k|                        token_begin = i;
  228|       |
  229|  37.1k|                        tokens.emplace_back(
  230|  37.1k|                                type,
  231|  37.1k|                                source.substring_view(
  232|  37.1k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  37.1k|                                        1u),
  234|  37.1k|                                current_line_number, current_column);
  235|  37.1k|                        break;
  236|       |
  237|   392k|                    default:
  ------------------
  |  Branch (237:21): [True: 392k, False: 103k]
  ------------------
  238|   392k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 118k, False: 274k]
  ------------------
  239|   118k|                        {
  240|   118k|                            token_begin = i;
  241|   118k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   392k|                        current_token = source.substring_view(
  245|   392k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   392k|                                current_token.length() + 1u);
  247|   496k|                }
  248|   496k|            }
  249|       |
  250|   513k|            current_column += 1u;
  251|   513k|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  4.25k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 3.11k, False: 1.13k]
  ------------------
  255|  3.11k|        {
  256|  3.11k|            tokens.emplace_back(
  257|  3.11k|                    ParseToken(source.substring_view(
  258|  3.11k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  3.11k|                                       current_token.length()),
  260|  3.11k|                               current_line_number, current_column - current_token.length()));
  261|  3.11k|        }
  262|       |
  263|       |        // Finalize token stream
  264|  4.25k|        tokens.finalize();
  265|       |
  266|  4.25k|        return tokens;
  267|  4.25k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   119k|    {
   14|   119k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 1.42k, False: 117k]
  |  Branch (14:13): [True: 808, False: 118k]
  |  Branch (14:36): [True: 808, False: 616]
  ------------------
   15|    808|        {
   16|    808|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|    808|            if (number)
  ------------------
  |  Branch (18:17): [True: 402, False: 406]
  ------------------
   19|    402|            {
   20|    402|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|    402|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|    402|            }
   23|       |
   24|    406|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|    808|        }
   26|       |
   27|   118k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 315, False: 117k]
  |  Branch (27:13): [True: 969, False: 117k]
  |  Branch (27:36): [True: 654, False: 117k]
  ------------------
   28|    969|        {
   29|    969|            return {Token::Type::Comment, token, line_number, column};
   30|    969|        }
   31|       |
   32|   117k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 2.43k, False: 114k]
  ------------------
   33|  2.43k|        {
   34|  2.43k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  2.43k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  2.43k|        }
   37|       |
   38|   114k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 382, False: 114k]
  ------------------
   39|    382|        {
   40|    382|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|    382|        }
   42|       |
   43|   114k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 1.75k, False: 112k]
  ------------------
   44|  1.75k|        {
   45|  1.75k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  1.75k|                    static_cast<phi::uint32_t>(id)};
   47|  1.75k|        }
   48|       |
   49|   112k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 2.92k, False: 109k]
  ------------------
   50|  2.92k|        {
   51|  2.92k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  2.92k|                    static_cast<phi::uint32_t>(id)};
   53|  2.92k|        }
   54|       |
   55|   109k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 39.8k, False: 69.9k]
  ------------------
   56|  39.8k|        {
   57|  39.8k|            return {Token::Type::OpCode, token, line_number, column,
   58|  39.8k|                    static_cast<phi::uint32_t>(opcode)};
   59|  39.8k|        }
   60|       |
   61|  69.9k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|   109k|    }

LLVMFuzzerTestOneInput:
    7|  4.25k|{
    8|  4.25k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
    9|       |
   10|       |    // Parse it
   11|  4.25k|    dlx::Parser::Parse(source);
   12|       |
   13|  4.25k|    return 0;
   14|  4.25k|}


_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  81.4k|        {
  173|  81.4k|            PHI_ASSERT(index < 3u);
  174|       |
  175|  81.4k|            switch (index.unsafe())
  176|  81.4k|            {
  177|  36.1k|                case 0:
  ------------------
  |  Branch (177:17): [True: 36.1k, False: 45.3k]
  ------------------
  178|  36.1k|                    return m_Arg1Type;
  179|       |
  180|  23.0k|                case 1:
  ------------------
  |  Branch (180:17): [True: 23.0k, False: 58.4k]
  ------------------
  181|  23.0k|                    return m_Arg2Type;
  182|       |
  183|  22.2k|                case 2:
  ------------------
  |  Branch (183:17): [True: 22.2k, False: 59.2k]
  ------------------
  184|  22.2k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 81.4k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  81.4k|#endif
  191|  81.4k|            }
  192|  81.4k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  20.6k|        {
  199|  20.6k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  20.6k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 20.1k, False: 473]
  ------------------
  203|  20.1k|            {
  204|  20.1k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  20.1k|            }
  206|  20.6k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 11.4k, False: 9.17k]
  ------------------
  207|  11.4k|            {
  208|  11.4k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  11.4k|            }
  210|  20.6k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 6.64k, False: 14.0k]
  ------------------
  211|  6.64k|            {
  212|  6.64k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  213|  6.64k|            }
  214|       |
  215|  20.6k|            return number_of_argument_required;
  216|  20.6k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  20.6k|        {
  225|  20.6k|            return m_Executor;
  226|  20.6k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  15.8k|    {
   38|  15.8k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  15.8k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  15.8k|                                         static_cast<underlying_t>(rhs));
   42|  15.8k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  15.8k|    {
   55|  15.8k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  15.8k|        return static_cast<underlying_t>(type & test) != 0;
   58|  15.8k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  70.6k|    {
   31|  70.6k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 935, False: 69.6k]
  ------------------
   32|    935|        {
   33|    935|            return true;
   34|    935|        }
   35|       |
   36|  69.6k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 979, False: 68.7k]
  ------------------
   37|    979|        {
   38|    979|            return true;
   39|    979|        }
   40|       |
   41|  68.7k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 29.8k, False: 38.8k]
  ------------------
   42|  29.8k|        {
   43|  29.8k|            return true;
   44|  29.8k|        }
   45|       |
   46|  38.8k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 456, False: 38.3k]
  ------------------
   47|    456|        {
   48|    456|            return true;
   49|    456|        }
   50|       |
   51|  38.3k|        return false;
   52|  38.8k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  38.3k|    {
   56|  38.3k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 38.3k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  38.3k|        const char first_char = token.at(0u);
   62|       |
   63|  38.3k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 7.06k, False: 31.3k]
  ------------------
   64|  7.06k|        {
   65|  7.06k|            return phi::is_alpha(first_char);
   66|  7.06k|        }
   67|       |
   68|  31.3k|        phi::boolean just_under_scores = (first_char == '_');
   69|  31.3k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 2.82k, False: 28.4k]
  |  Branch (69:13): [True: 2.36k, False: 28.9k]
  |  Branch (69:43): [True: 2.36k, False: 459]
  ------------------
   70|  2.36k|        {
   71|  2.36k|            return false;
   72|  2.36k|        }
   73|       |
   74|   106k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 90.5k, False: 16.2k]
  ------------------
   75|  90.5k|        {
   76|  90.5k|            const char c{token.at(index)};
   77|       |
   78|  90.5k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 77.2k, False: 13.2k]
  ------------------
   79|  77.2k|            {
   80|  77.2k|                just_under_scores = false;
   81|  77.2k|            }
   82|  13.2k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 600, False: 12.6k]
  ------------------
   83|    600|            {
   84|    600|                continue;
   85|    600|            }
   86|  12.6k|            else
   87|  12.6k|            {
   88|  12.6k|                return false;
   89|  12.6k|            }
   90|  90.5k|        }
   91|       |
   92|  16.2k|        return !just_under_scores;
   93|  28.9k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|   165k|    {
  100|   165k|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 165k]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|   165k|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 22.1k, False: 143k]
  ------------------
  106|  22.1k|        {
  107|  22.1k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 3.51k, False: 18.6k]
  ------------------
  108|  3.51k|            {
  109|  3.51k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  3.51k|            }
  111|       |
  112|  18.6k|            return {};
  113|  22.1k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|   143k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 701, False: 142k]
  ------------------
  117|    701|        {
  118|    701|            return {};
  119|    701|        }
  120|       |
  121|   142k|        std::int32_t number{0};
  122|   142k|        phi::boolean is_negative{false};
  123|   142k|        phi::boolean starts_with_zero{false};
  124|   142k|        phi::boolean parsing_binary{false};
  125|   142k|        phi::boolean parsing_octal{false};
  126|   142k|        phi::boolean parsing_hexadecimal{false};
  127|   142k|        phi::boolean parsed_something{false};
  128|   142k|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|   157k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 155k, False: 2.00k]
  ------------------
  133|   155k|        {
  134|   155k|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|   155k|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 142k, False: 13.2k]
  ------------------
  138|   142k|            {
  139|   142k|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 349, False: 142k]
  ------------------
  140|    349|                {
  141|    349|                    continue;
  142|    349|                }
  143|       |
  144|   142k|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 1.03k, False: 141k]
  ------------------
  145|  1.03k|                {
  146|  1.03k|                    is_negative = true;
  147|  1.03k|                    continue;
  148|  1.03k|                }
  149|       |
  150|   141k|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 2.80k, False: 138k]
  ------------------
  151|  2.80k|                {
  152|  2.80k|                    starts_with_zero = true;
  153|  2.80k|                    continue;
  154|  2.80k|                }
  155|       |
  156|   138k|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 201, False: 138k]
  ------------------
  157|    201|                {
  158|    201|                    return {};
  159|    201|                }
  160|   138k|            }
  161|       |
  162|       |            // Second character
  163|   151k|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 5.38k, False: 146k]
  ------------------
  164|  5.38k|            {
  165|  5.38k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 2.80k, False: 2.58k]
  ------------------
  166|  2.80k|                {
  167|       |                    // Binary
  168|  2.80k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 204, False: 2.60k]
  |  Branch (168:37): [True: 322, False: 2.28k]
  ------------------
  169|    526|                    {
  170|    526|                        parsing_binary = true;
  171|    526|                        continue;
  172|    526|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  2.28k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 1.01k, False: 1.27k]
  |  Branch (175:37): [True: 199, False: 1.07k]
  ------------------
  176|  1.21k|                    {
  177|  1.21k|                        parsing_hexadecimal = true;
  178|  1.21k|                        continue;
  179|  1.21k|                    }
  180|       |
  181|       |                    // Octal
  182|  1.07k|                    parsing_octal = true;
  183|  1.07k|                }
  184|  5.38k|            }
  185|       |
  186|       |            // Handle seperators
  187|   149k|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 446, False: 149k]
  ------------------
  188|    446|            {
  189|    446|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 194, False: 252]
  ------------------
  190|    194|                {
  191|    194|                    return {};
  192|    194|                }
  193|       |
  194|    252|                parsed_separator = true;
  195|    252|                continue;
  196|    446|            }
  197|       |
  198|       |            // Check for over/underflow
  199|   149k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 3.96k, False: 145k]
  |  Branch (199:32): [True: 226, False: 3.73k]
  ------------------
  200|    226|            {
  201|       |                // Would underflow
  202|    226|                return {};
  203|    226|            }
  204|   149k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 145k, False: 3.73k]
  |  Branch (204:17): [True: 355, False: 148k]
  |  Branch (204:33): [True: 355, False: 145k]
  ------------------
  205|    355|            {
  206|       |                // Would overflow
  207|    355|                return {};
  208|    355|            }
  209|       |
  210|   148k|            parsed_separator = false;
  211|   148k|            parsed_something = true;
  212|       |
  213|   148k|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 733, False: 148k]
  ------------------
  214|    733|            {
  215|    733|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 341, False: 392]
  ------------------
  216|    341|                {
  217|    341|                    return {};
  218|    341|                }
  219|       |
  220|    392|                number <<= 1;
  221|    392|                number |= (c - '0');
  222|    392|            }
  223|   148k|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 1.26k, False: 146k]
  ------------------
  224|  1.26k|            {
  225|  1.26k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 689, False: 575]
  ------------------
  226|    689|                {
  227|    689|                    return {};
  228|    689|                }
  229|       |
  230|    575|                number <<= 3;
  231|    575|                number |= (c - '0');
  232|    575|            }
  233|   146k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 1.56k, False: 145k]
  ------------------
  234|  1.56k|            {
  235|  1.56k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 915, False: 654]
  ------------------
  236|    915|                {
  237|    915|                    return {};
  238|    915|                }
  239|       |
  240|    654|                number <<= 4;
  241|    654|                number |= phi::hex_digit_value(c).unsafe();
  242|    654|            }
  243|   145k|            else
  244|   145k|            {
  245|   145k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 137k, False: 7.62k]
  ------------------
  246|   137k|                {
  247|   137k|                    return {};
  248|   137k|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|  7.62k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 2.19k, False: 5.42k]
  |  Branch (251:36): [True: 206, False: 1.99k]
  ------------------
  252|    206|                {
  253|    206|                    return {};
  254|    206|                }
  255|       |
  256|  7.41k|                number *= 10;
  257|  7.41k|                number += (c - '0');
  258|  7.41k|            }
  259|   148k|        }
  260|       |
  261|  2.00k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 1.74k, False: 262]
  ------------------
  262|  1.74k|        {
  263|       |            // Check for over/underflow
  264|  1.74k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 552, False: 1.19k]
  |  Branch (264:32): [True: 353, False: 199]
  ------------------
  265|    353|            {
  266|       |                // Would underflow
  267|    353|                return {};
  268|    353|            }
  269|  1.39k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 1.19k, False: 199]
  |  Branch (269:17): [True: 217, False: 1.17k]
  |  Branch (269:33): [True: 217, False: 974]
  ------------------
  270|    217|            {
  271|       |                // Would overflow
  272|    217|                return {};
  273|    217|            }
  274|       |
  275|  1.17k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 199, False: 974]
  ------------------
  276|    199|            {
  277|    199|                return static_cast<std::int16_t>(-number);
  278|    199|            }
  279|       |
  280|    974|            return static_cast<std::int16_t>(number);
  281|  1.17k|        }
  282|       |
  283|    262|        return {};
  284|  2.00k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  9.90k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  9.90k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 47.4k, False: 0]
  ------------------
   64|  47.4k|            {
   65|  47.4k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 9.90k, False: 37.5k]
  ------------------
   66|  9.90k|                {
   67|  9.90k|                    return &token;
   68|  9.90k|                }
   69|  47.4k|            }
   70|       |
   71|      0|            return nullptr;
   72|  9.90k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  34.3k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  34.3k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  34.3k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   166k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   166k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   166k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  58.7k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  58.7k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  58.7k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  20.6k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  6.89k|    {
   25|  6.89k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  6.89k|        switch (argument_number.unsafe())
   28|  6.89k|        {
   29|  3.77k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 3.77k, False: 3.11k]
  ------------------
   30|  3.77k|                m_Arg1 = argument;
   31|  3.77k|                break;
   32|  1.63k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 1.63k, False: 5.25k]
  ------------------
   33|  1.63k|                m_Arg2 = argument;
   34|  1.63k|                break;
   35|  1.48k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 1.48k, False: 5.41k]
  ------------------
   36|  1.48k|                m_Arg3 = argument;
   37|  1.48k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 6.89k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  6.89k|#endif
   42|  6.89k|        }
   43|  6.89k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  68.9k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  172|    459|    {
  173|    459|        InstructionArgument arg;
  174|    459|        arg.m_Type                   = ArgumentType::IntRegister;
  175|    459|        arg.register_int.register_id = id;
  176|    459|        return arg;
  177|    459|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  180|  4.29k|    {
  181|  4.29k|        InstructionArgument arg;
  182|  4.29k|        arg.m_Type                     = ArgumentType::FloatRegister;
  183|  4.29k|        arg.register_float.register_id = id;
  184|  4.29k|        return arg;
  185|  4.29k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  188|    335|    {
  189|    335|        InstructionArgument arg;
  190|    335|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  191|    335|        arg.immediate_value.signed_value = value;
  192|    335|        return arg;
  193|    335|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  197|    450|    {
  198|    450|        InstructionArgument arg;
  199|    450|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  200|    450|        arg.address_displacement.register_id  = id;
  201|    450|        arg.address_displacement.displacement = displacement;
  202|    450|        return arg;
  203|    450|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  206|  1.35k|    {
  207|  1.35k|        InstructionArgument arg;
  208|  1.35k|        arg.m_Type           = ArgumentType::Label;
  209|  1.35k|        arg.label.label_name = label_name;
  210|  1.35k|        return arg;
  211|  1.35k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  20.6k|    {
  453|  20.6k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  20.6k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|   219k|    {
   24|   219k|        switch (token.length().unsafe())
   25|   219k|        {
   26|       |            // 1 character OpCodes
   27|  25.4k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 25.4k, False: 194k]
  ------------------
   28|  25.4k|                const char c1 = token[0u];
   29|       |
   30|  25.4k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 9.18k, False: 16.2k]
  ------------------
   31|  9.18k|                {
   32|  9.18k|                    return OpCode::J;
   33|  9.18k|                }
   34|  16.2k|                break;
   35|  25.4k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|  27.3k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 27.3k, False: 192k]
  ------------------
   39|  27.3k|                const char c1 = token[0u];
   40|  27.3k|                const char c2 = token[1u];
   41|       |
   42|  27.3k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 14.0k, False: 13.2k]
  ------------------
   43|  27.3k|                {
   44|    713|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 713, False: 26.5k]
  ------------------
   45|  1.01k|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 297, False: 27.0k]
  ------------------
   46|  1.01k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 389, False: 621]
  ------------------
   47|    389|                        {
   48|    389|                            return OpCode::JR;
   49|    389|                        }
   50|    621|                        break;
   51|       |
   52|  1.66k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 1.66k, False: 25.6k]
  ------------------
   53|  3.06k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 1.39k, False: 25.9k]
  ------------------
   54|  3.06k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 565, False: 2.49k]
  ------------------
   55|  3.06k|                        {
   56|    370|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 370, False: 2.69k]
  ------------------
   57|    572|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 202, False: 2.85k]
  ------------------
   58|    572|                                return OpCode::LB;
   59|    213|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 213, False: 2.84k]
  ------------------
   60|    407|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 194, False: 2.86k]
  ------------------
   61|    407|                                return OpCode::LD;
   62|    194|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 194, False: 2.86k]
  ------------------
   63|    392|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 198, False: 2.86k]
  ------------------
   64|    392|                                return OpCode::LF;
   65|    324|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 324, False: 2.73k]
  ------------------
   66|    723|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 399, False: 2.66k]
  ------------------
   67|    723|                                return OpCode::LH;
   68|    202|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 202, False: 2.85k]
  ------------------
   69|    401|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 199, False: 2.86k]
  ------------------
   70|    401|                                return OpCode::LW;
   71|  3.06k|                        }
   72|    565|                        break;
   73|    565|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 386, False: 26.9k]
  ------------------
   74|  1.17k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 789, False: 26.5k]
  ------------------
   75|  1.17k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 561, False: 614]
  ------------------
   76|    561|                        {
   77|    561|                            return OpCode::OR;
   78|    561|                        }
   79|    614|                        break;
   80|  6.14k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 6.14k, False: 21.1k]
  ------------------
   81|  8.04k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 1.90k, False: 25.4k]
  ------------------
   82|  8.04k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 2.57k, False: 5.46k]
  ------------------
   83|  8.04k|                        {
   84|    405|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 405, False: 7.63k]
  ------------------
   85|    599|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 194, False: 7.85k]
  ------------------
   86|    599|                                return OpCode::SB;
   87|  2.51k|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 2.51k, False: 5.53k]
  ------------------
   88|  2.72k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 211, False: 7.83k]
  ------------------
   89|  2.72k|                                return OpCode::SD;
   90|    197|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 197, False: 7.84k]
  ------------------
   91|    391|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 194, False: 7.85k]
  ------------------
   92|    391|                                return OpCode::SF;
   93|    325|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 325, False: 7.71k]
  ------------------
   94|    668|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 343, False: 7.70k]
  ------------------
   95|    668|                                return OpCode::SH;
   96|    197|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 197, False: 7.84k]
  ------------------
   97|  1.08k|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 885, False: 7.15k]
  ------------------
   98|  1.08k|                                return OpCode::SW;
   99|  8.04k|                        }
  100|  2.57k|                        break;
  101|  27.3k|                }
  102|  18.3k|                break;
  103|  27.3k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|  46.4k|            case 3: {
  ------------------
  |  Branch (106:13): [True: 46.4k, False: 173k]
  ------------------
  107|  46.4k|                const char c1 = token[0u];
  108|  46.4k|                const char c2 = token[1u];
  109|  46.4k|                const char c3 = token[2u];
  110|       |
  111|  46.4k|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 10.4k, False: 35.9k]
  ------------------
  112|  46.4k|                {
  113|  2.56k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 2.56k, False: 43.9k]
  ------------------
  114|  3.34k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 778, False: 45.6k]
  ------------------
  115|  3.34k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 1.05k, False: 2.29k]
  |  Branch (115:29): [True: 536, False: 2.80k]
  |  Branch (115:45): [True: 536, False: 515]
  ------------------
  116|    536|                        {
  117|    536|                            return OpCode::ADD;
  118|    536|                        }
  119|  2.80k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 1.38k, False: 1.42k]
  |  Branch (119:34): [True: 395, False: 2.41k]
  |  Branch (119:50): [True: 395, False: 987]
  ------------------
  120|    395|                        {
  121|    395|                            return OpCode::AND;
  122|    395|                        }
  123|  2.41k|                        break;
  124|       |
  125|  2.41k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 490, False: 45.9k]
  ------------------
  126|  1.55k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 1.06k, False: 45.4k]
  ------------------
  127|  1.55k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 934, False: 617]
  |  Branch (127:29): [True: 572, False: 979]
  |  Branch (127:45): [True: 572, False: 362]
  ------------------
  128|    572|                        {
  129|    572|                            return OpCode::DIV;
  130|    572|                        }
  131|    979|                        break;
  132|       |
  133|    979|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 505, False: 45.9k]
  ------------------
  134|  2.64k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 2.13k, False: 44.3k]
  ------------------
  135|  2.64k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 2.13k, False: 506]
  ------------------
  136|  2.13k|                        {
  137|  2.13k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 1.15k, False: 981]
  ------------------
  138|  1.15k|                            {
  139|  1.15k|                                return OpCode::EQD;
  140|  1.15k|                            }
  141|    981|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 516, False: 465]
  ------------------
  142|    516|                            {
  143|    516|                                return OpCode::EQF;
  144|    516|                            }
  145|  2.13k|                        }
  146|    971|                        break;
  147|       |
  148|  2.27k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 2.27k, False: 44.1k]
  ------------------
  149|  2.92k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 655, False: 45.8k]
  ------------------
  150|  2.92k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 1.10k, False: 1.82k]
  ------------------
  151|  1.10k|                        {
  152|  1.10k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 388, False: 716]
  ------------------
  153|    388|                            {
  154|    388|                                return OpCode::GED;
  155|    388|                            }
  156|    716|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 516, False: 200]
  ------------------
  157|    516|                            {
  158|    516|                                return OpCode::GEF;
  159|    516|                            }
  160|  1.10k|                        }
  161|  1.82k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 991, False: 832]
  ------------------
  162|    991|                        {
  163|    991|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 388, False: 603]
  ------------------
  164|    388|                            {
  165|    388|                                return OpCode::GTD;
  166|    388|                            }
  167|    603|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 388, False: 215]
  ------------------
  168|    388|                            {
  169|    388|                                return OpCode::GTF;
  170|    388|                            }
  171|    603|                        }
  172|  1.24k|                        break;
  173|       |
  174|  1.24k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 302, False: 46.1k]
  ------------------
  175|  1.57k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 1.27k, False: 45.1k]
  ------------------
  176|  1.57k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 1.23k, False: 337]
  |  Branch (176:29): [True: 1.02k, False: 544]
  |  Branch (176:45): [True: 1.02k, False: 207]
  ------------------
  177|  1.02k|                        {
  178|  1.02k|                            return OpCode::JAL;
  179|  1.02k|                        }
  180|    544|                        break;
  181|       |
  182|  3.09k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 3.09k, False: 43.3k]
  ------------------
  183|  6.82k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 3.73k, False: 42.7k]
  ------------------
  184|  6.82k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 290, False: 6.53k]
  ------------------
  185|  6.82k|                        {
  186|    806|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 806, False: 6.02k]
  ------------------
  187|  1.08k|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 277, False: 6.55k]
  ------------------
  188|  1.08k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 772, False: 311]
  ------------------
  189|    772|                                {
  190|    772|                                    return OpCode::LBU;
  191|    772|                                }
  192|    311|                                break;
  193|       |
  194|  1.76k|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 1.76k, False: 5.06k]
  ------------------
  195|  2.17k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 412, False: 6.41k]
  ------------------
  196|  2.17k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 388, False: 1.79k]
  ------------------
  197|    388|                                {
  198|    388|                                    return OpCode::LED;
  199|    388|                                }
  200|  1.79k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 1.54k, False: 249]
  ------------------
  201|  1.54k|                                {
  202|  1.54k|                                    return OpCode::LEF;
  203|  1.54k|                                }
  204|    249|                                break;
  205|       |
  206|    262|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 262, False: 6.56k]
  ------------------
  207|  1.29k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 1.02k, False: 5.80k]
  ------------------
  208|  1.29k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 388, False: 903]
  ------------------
  209|    388|                                {
  210|    388|                                    return OpCode::LHI;
  211|    388|                                }
  212|    903|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 388, False: 515]
  ------------------
  213|    388|                                {
  214|    388|                                    return OpCode::LHU;
  215|    388|                                }
  216|    515|                                break;
  217|       |
  218|    600|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 600, False: 6.22k]
  ------------------
  219|  1.11k|                            case 't':
  ------------------
  |  Branch (219:29): [True: 512, False: 6.31k]
  ------------------
  220|  1.11k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 516, False: 596]
  ------------------
  221|    516|                                {
  222|    516|                                    return OpCode::LTD;
  223|    516|                                }
  224|    596|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 388, False: 208]
  ------------------
  225|    388|                                {
  226|    388|                                    return OpCode::LTF;
  227|    388|                                }
  228|    208|                                break;
  229|       |
  230|    238|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 238, False: 6.59k]
  ------------------
  231|    875|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 637, False: 6.19k]
  ------------------
  232|    875|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 516, False: 359]
  ------------------
  233|    516|                                {
  234|    516|                                    return OpCode::LWU;
  235|    516|                                }
  236|    359|                                break;
  237|  6.82k|                        }
  238|  1.93k|                        break;
  239|       |
  240|  1.93k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 615, False: 45.8k]
  ------------------
  241|  2.39k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 1.77k, False: 44.6k]
  ------------------
  242|  2.39k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 1.39k, False: 1.00k]
  ------------------
  243|  1.39k|                        {
  244|  1.39k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 775, False: 615]
  ------------------
  245|    775|                            {
  246|    775|                                return OpCode::NED;
  247|    775|                            }
  248|    615|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 388, False: 227]
  ------------------
  249|    388|                            {
  250|    388|                                return OpCode::NEF;
  251|    388|                            }
  252|  1.39k|                        }
  253|  1.00k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 717, False: 285]
  |  Branch (253:34): [True: 517, False: 485]
  |  Branch (253:50): [True: 517, False: 200]
  ------------------
  254|    517|                        {
  255|    517|                            return OpCode::NOP;
  256|    517|                        }
  257|       |
  258|    712|                        break;
  259|       |
  260|    712|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 342, False: 46.1k]
  ------------------
  261|  1.21k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 872, False: 45.5k]
  ------------------
  262|  1.21k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 851, False: 363]
  |  Branch (262:29): [True: 516, False: 698]
  |  Branch (262:45): [True: 516, False: 335]
  ------------------
  263|    516|                        {
  264|    516|                            return OpCode::ORI;
  265|    516|                        }
  266|    698|                        break;
  267|       |
  268|  6.08k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 6.08k, False: 40.3k]
  ------------------
  269|  12.4k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 6.34k, False: 40.1k]
  ------------------
  270|  12.4k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 911, False: 11.5k]
  ------------------
  271|  12.4k|                        {
  272|    726|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 726, False: 11.7k]
  ------------------
  273|  1.09k|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 368, False: 12.0k]
  ------------------
  274|  1.09k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 516, False: 578]
  ------------------
  275|    516|                                {
  276|    516|                                    return OpCode::SBU;
  277|    516|                                }
  278|    578|                                break;
  279|       |
  280|    578|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 389, False: 12.0k]
  ------------------
  281|    747|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 358, False: 12.0k]
  ------------------
  282|    747|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 392, False: 355]
  ------------------
  283|    392|                                {
  284|    392|                                    return OpCode::SEQ;
  285|    392|                                }
  286|    355|                                break;
  287|       |
  288|  1.09k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 1.09k, False: 11.3k]
  ------------------
  289|  1.69k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 602, False: 11.8k]
  ------------------
  290|  1.69k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 413, False: 1.27k]
  ------------------
  291|    413|                                {
  292|    413|                                    return OpCode::SGE;
  293|    413|                                }
  294|  1.27k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 893, False: 386]
  ------------------
  295|    893|                                {
  296|    893|                                    return OpCode::SGT;
  297|    893|                                }
  298|    386|                                break;
  299|       |
  300|    399|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 399, False: 12.0k]
  ------------------
  301|    845|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 446, False: 11.9k]
  ------------------
  302|    845|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 644, False: 201]
  ------------------
  303|    644|                                {
  304|    644|                                    return OpCode::SHU;
  305|    644|                                }
  306|    201|                                break;
  307|       |
  308|    683|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 683, False: 11.7k]
  ------------------
  309|  2.22k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 1.54k, False: 10.8k]
  ------------------
  310|  2.22k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 228, False: 2.00k]
  ------------------
  311|  2.22k|                                {
  312|    325|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 325, False: 1.90k]
  ------------------
  313|    653|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 328, False: 1.90k]
  ------------------
  314|    653|                                        return OpCode::SLA;
  315|       |
  316|    195|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 195, False: 2.03k]
  ------------------
  317|    395|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 200, False: 2.02k]
  ------------------
  318|    395|                                        return OpCode::SLE;
  319|       |
  320|    201|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 201, False: 2.02k]
  ------------------
  321|    553|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 352, False: 1.87k]
  ------------------
  322|    553|                                        return OpCode::SLL;
  323|       |
  324|    204|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 204, False: 2.02k]
  ------------------
  325|    399|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 195, False: 2.03k]
  ------------------
  326|    399|                                        return OpCode::SLT;
  327|  2.22k|                                }
  328|    228|                                break;
  329|       |
  330|    339|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 339, False: 12.0k]
  ------------------
  331|  1.16k|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 824, False: 11.6k]
  ------------------
  332|  1.16k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 773, False: 390]
  ------------------
  333|    773|                                {
  334|    773|                                    return OpCode::SNE;
  335|    773|                                }
  336|    390|                                break;
  337|       |
  338|    907|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 907, False: 11.5k]
  ------------------
  339|  1.42k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 516, False: 11.9k]
  ------------------
  340|  1.42k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 679, False: 744]
  ------------------
  341|    679|                                {
  342|    679|                                    return OpCode::SRA;
  343|    679|                                }
  344|    744|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 515, False: 229]
  ------------------
  345|    515|                                {
  346|    515|                                    return OpCode::SRL;
  347|    515|                                }
  348|    229|                                break;
  349|       |
  350|    789|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 789, False: 11.6k]
  ------------------
  351|  1.16k|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 376, False: 12.0k]
  ------------------
  352|  1.16k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 517, False: 648]
  ------------------
  353|    517|                                {
  354|    517|                                    return OpCode::SUB;
  355|    517|                                }
  356|    648|                                break;
  357|       |
  358|    648|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 323, False: 12.1k]
  ------------------
  359|  1.16k|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 841, False: 11.5k]
  ------------------
  360|  1.16k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 644, False: 520]
  ------------------
  361|    644|                                {
  362|    644|                                    return OpCode::SWU;
  363|    644|                                }
  364|    520|                                break;
  365|  12.4k|                        }
  366|       |
  367|  5.00k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 555, False: 45.9k]
  ------------------
  368|  5.52k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 522, False: 45.9k]
  ------------------
  369|  5.52k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 1.06k, False: 4.46k]
  |  Branch (369:29): [True: 574, False: 4.94k]
  |  Branch (369:45): [True: 574, False: 486]
  ------------------
  370|    574|                        {
  371|    574|                            return OpCode::XOR;
  372|    574|                        }
  373|  4.94k|                        break;
  374|  46.4k|                }
  375|  24.9k|                break;
  376|  46.4k|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  59.4k|            case 4: {
  ------------------
  |  Branch (379:13): [True: 59.4k, False: 160k]
  ------------------
  380|  59.4k|                const char c1 = token[0u];
  381|  59.4k|                const char c2 = token[1u];
  382|  59.4k|                const char c3 = token[2u];
  383|  59.4k|                const char c4 = token[3u];
  384|       |
  385|  59.4k|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 9.61k, False: 49.7k]
  ------------------
  386|  59.4k|                {
  387|  4.21k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 4.21k, False: 55.1k]
  ------------------
  388|  7.60k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 3.38k, False: 56.0k]
  ------------------
  389|  7.60k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 277, False: 7.32k]
  ------------------
  390|  7.60k|                        {
  391|  2.67k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 2.67k, False: 4.92k]
  ------------------
  392|  5.29k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 2.61k, False: 4.98k]
  ------------------
  393|  5.29k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 4.88k, False: 408]
  ------------------
  394|  4.88k|                                {
  395|  4.88k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 456, False: 4.42k]
  ------------------
  396|  4.88k|                                    {
  397|  1.77k|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 1.77k, False: 3.10k]
  ------------------
  398|  2.10k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 329, False: 4.55k]
  ------------------
  399|  2.10k|                                            return OpCode::ADDD;
  400|       |
  401|    194|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 194, False: 4.68k]
  ------------------
  402|    775|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 581, False: 4.30k]
  ------------------
  403|    775|                                            return OpCode::ADDF;
  404|       |
  405|    194|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 194, False: 4.68k]
  ------------------
  406|    772|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 578, False: 4.30k]
  ------------------
  407|    772|                                            return OpCode::ADDI;
  408|       |
  409|    197|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 197, False: 4.68k]
  ------------------
  410|    777|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 580, False: 4.30k]
  ------------------
  411|    777|                                            return OpCode::ADDU;
  412|  4.88k|                                    }
  413|  4.88k|                                }
  414|    864|                                break;
  415|       |
  416|    864|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 844, False: 6.75k]
  ------------------
  417|  2.03k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 1.19k, False: 6.41k]
  ------------------
  418|  2.03k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 1.04k, False: 989]
  |  Branch (418:37): [True: 645, False: 1.38k]
  |  Branch (418:53): [True: 645, False: 400]
  ------------------
  419|    645|                                {
  420|    645|                                    return OpCode::ANDI;
  421|    645|                                }
  422|       |
  423|  1.38k|                                break;
  424|  7.60k|                        }
  425|  2.53k|                        break;
  426|       |
  427|  2.53k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 1.69k, False: 57.7k]
  ------------------
  428|  5.74k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 4.05k, False: 55.3k]
  ------------------
  429|  5.74k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 249, False: 5.50k]
  ------------------
  430|  5.74k|                        {
  431|    641|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 641, False: 5.10k]
  ------------------
  432|  1.03k|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 392, False: 5.35k]
  ------------------
  433|  1.03k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 839, False: 194]
  |  Branch (433:37): [True: 388, False: 645]
  |  Branch (433:53): [True: 388, False: 451]
  ------------------
  434|    388|                                {
  435|    388|                                    return OpCode::BEQZ;
  436|    388|                                }
  437|    645|                                break;
  438|       |
  439|    645|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 445, False: 5.30k]
  ------------------
  440|  1.81k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 1.36k, False: 4.38k]
  ------------------
  441|  1.81k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 1.49k, False: 322]
  ------------------
  442|  1.49k|                                {
  443|  1.49k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 645, False: 846]
  ------------------
  444|    645|                                    {
  445|    645|                                        return OpCode::BFPF;
  446|    645|                                    }
  447|    846|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 388, False: 458]
  ------------------
  448|    388|                                    {
  449|    388|                                        return OpCode::BFPT;
  450|    388|                                    }
  451|  1.49k|                                }
  452|    780|                                break;
  453|       |
  454|    780|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 343, False: 5.40k]
  ------------------
  455|  2.65k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 2.31k, False: 3.43k]
  ------------------
  456|  2.65k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 2.33k, False: 320]
  |  Branch (456:37): [True: 1.54k, False: 1.11k]
  |  Branch (456:53): [True: 1.54k, False: 794]
  ------------------
  457|  1.54k|                                {
  458|  1.54k|                                    return OpCode::BNEZ;
  459|  1.54k|                                }
  460|  5.74k|                        }
  461|  2.78k|                        break;
  462|       |
  463|  2.78k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 1.21k, False: 58.1k]
  ------------------
  464|  4.59k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 3.37k, False: 56.0k]
  ------------------
  465|  4.59k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 3.56k, False: 1.02k]
  |  Branch (465:29): [True: 3.03k, False: 1.55k]
  |  Branch (465:45): [True: 3.03k, False: 530]
  ------------------
  466|  3.03k|                        {
  467|  3.03k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 330, False: 2.70k]
  ------------------
  468|  3.03k|                            {
  469|    450|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 450, False: 2.58k]
  ------------------
  470|    900|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 450, False: 2.58k]
  ------------------
  471|    900|                                    return OpCode::DIVD;
  472|       |
  473|    578|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 578, False: 2.46k]
  ------------------
  474|    773|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 195, False: 2.84k]
  ------------------
  475|    773|                                    return OpCode::DIVF;
  476|       |
  477|    322|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 322, False: 2.71k]
  ------------------
  478|    644|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 322, False: 2.71k]
  ------------------
  479|    644|                                    return OpCode::DIVI;
  480|       |
  481|    195|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 195, False: 2.84k]
  ------------------
  482|    391|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 196, False: 2.84k]
  ------------------
  483|    391|                                    return OpCode::DIVU;
  484|  3.03k|                            }
  485|  3.03k|                        }
  486|  1.88k|                        break;
  487|       |
  488|  1.88k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 219, False: 59.1k]
  ------------------
  489|  1.01k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 792, False: 58.6k]
  ------------------
  490|  1.01k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 801, False: 210]
  |  Branch (490:29): [True: 388, False: 623]
  |  Branch (490:45): [True: 593, False: 208]
  |  Branch (490:61): [True: 388, False: 205]
  ------------------
  491|    388|                        {
  492|    388|                            return OpCode::HALT;
  493|    388|                        }
  494|    623|                        break;
  495|       |
  496|    623|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 343, False: 59.0k]
  ------------------
  497|  2.37k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 2.03k, False: 57.3k]
  ------------------
  498|  2.37k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 2.01k, False: 358]
  |  Branch (498:29): [True: 388, False: 1.98k]
  |  Branch (498:45): [True: 1.42k, False: 599]
  |  Branch (498:61): [True: 388, False: 1.03k]
  ------------------
  499|    388|                        {
  500|    388|                            return OpCode::JALR;
  501|    388|                        }
  502|  1.98k|                        break;
  503|       |
  504|  1.98k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 268, False: 59.1k]
  ------------------
  505|  3.26k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 2.99k, False: 56.4k]
  ------------------
  506|  3.26k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 2.19k, False: 1.06k]
  |  Branch (506:29): [True: 1.96k, False: 1.29k]
  |  Branch (506:45): [True: 1.96k, False: 233]
  ------------------
  507|  1.96k|                        {
  508|  1.96k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 516, False: 1.44k]
  ------------------
  509|    516|                            {
  510|    516|                                return OpCode::MOVD;
  511|    516|                            }
  512|  1.44k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 1.15k, False: 291]
  ------------------
  513|  1.15k|                            {
  514|  1.15k|                                return OpCode::MOVF;
  515|  1.15k|                            }
  516|  1.96k|                        }
  517|  1.29k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 956, False: 343]
  |  Branch (517:34): [True: 394, False: 905]
  |  Branch (517:50): [True: 619, False: 337]
  |  Branch (517:66): [True: 394, False: 225]
  ------------------
  518|    394|                        {
  519|    394|                            return OpCode::MULT;
  520|    394|                        }
  521|  1.19k|                        break;
  522|       |
  523|  9.51k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 9.51k, False: 49.8k]
  ------------------
  524|  21.6k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 12.1k, False: 47.2k]
  ------------------
  525|  21.6k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 1.19k, False: 20.5k]
  ------------------
  526|  21.6k|                        {
  527|  2.24k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 2.24k, False: 19.4k]
  ------------------
  528|  2.60k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 357, False: 21.3k]
  ------------------
  529|  2.60k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 2.25k, False: 347]
  ------------------
  530|  2.25k|                                {
  531|  2.25k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 1.17k, False: 1.08k]
  ------------------
  532|  1.17k|                                    {
  533|  1.17k|                                        return OpCode::SEQI;
  534|  1.17k|                                    }
  535|  1.08k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 662, False: 418]
  ------------------
  536|    662|                                    {
  537|    662|                                        return OpCode::SEQU;
  538|    662|                                    }
  539|  2.25k|                                }
  540|    765|                                break;
  541|       |
  542|  1.55k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 1.55k, False: 20.1k]
  ------------------
  543|  4.13k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 2.58k, False: 19.1k]
  ------------------
  544|  4.13k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 1.91k, False: 2.22k]
  ------------------
  545|  1.91k|                                {
  546|  1.91k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 676, False: 1.23k]
  ------------------
  547|    676|                                    {
  548|    676|                                        return OpCode::SGEI;
  549|    676|                                    }
  550|  1.23k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 994, False: 245]
  ------------------
  551|    994|                                    {
  552|    994|                                        return OpCode::SGEU;
  553|    994|                                    }
  554|  1.91k|                                }
  555|  2.22k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 1.87k, False: 351]
  ------------------
  556|  1.87k|                                {
  557|  1.87k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 516, False: 1.35k]
  ------------------
  558|    516|                                    {
  559|    516|                                        return OpCode::SGTI;
  560|    516|                                    }
  561|  1.35k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 782, False: 574]
  ------------------
  562|    782|                                    {
  563|    782|                                        return OpCode::SGTU;
  564|    782|                                    }
  565|  1.87k|                                }
  566|  1.17k|                                break;
  567|       |
  568|  1.58k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 1.58k, False: 20.1k]
  ------------------
  569|  5.53k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 3.95k, False: 17.7k]
  ------------------
  570|  5.53k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 209, False: 5.32k]
  ------------------
  571|  5.53k|                                {
  572|    632|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 632, False: 4.90k]
  ------------------
  573|  1.07k|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 444, False: 5.09k]
  ------------------
  574|  1.07k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 772, False: 304]
  ------------------
  575|    772|                                        {
  576|    772|                                            return OpCode::SLAI;
  577|    772|                                        }
  578|    304|                                        break;
  579|       |
  580|  1.14k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 1.14k, False: 4.38k]
  ------------------
  581|  1.42k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 276, False: 5.26k]
  ------------------
  582|  1.42k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 516, False: 909]
  ------------------
  583|    516|                                        {
  584|    516|                                            return OpCode::SLEI;
  585|    516|                                        }
  586|    909|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 647, False: 262]
  ------------------
  587|    647|                                        {
  588|    647|                                            return OpCode::SLEU;
  589|    647|                                        }
  590|    262|                                        break;
  591|       |
  592|    262|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 246, False: 5.29k]
  ------------------
  593|    728|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 482, False: 5.05k]
  ------------------
  594|    728|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 516, False: 212]
  ------------------
  595|    516|                                        {
  596|    516|                                            return OpCode::SLLI;
  597|    516|                                        }
  598|    212|                                        break;
  599|       |
  600|  1.04k|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 1.04k, False: 4.49k]
  ------------------
  601|  2.10k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 1.05k, False: 4.48k]
  ------------------
  602|  2.10k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 644, False: 1.45k]
  ------------------
  603|    644|                                        {
  604|    644|                                            return OpCode::SLTI;
  605|    644|                                        }
  606|  1.45k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 644, False: 812]
  ------------------
  607|    644|                                        {
  608|    644|                                            return OpCode::SLTU;
  609|    644|                                        }
  610|    812|                                        break;
  611|  5.53k|                                }
  612|       |
  613|  2.03k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 240, False: 21.4k]
  ------------------
  614|  4.14k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 2.10k, False: 19.5k]
  ------------------
  615|  4.14k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 2.33k, False: 1.80k]
  ------------------
  616|  2.33k|                                {
  617|  2.33k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 516, False: 1.81k]
  ------------------
  618|    516|                                    {
  619|    516|                                        return OpCode::SNEI;
  620|    516|                                    }
  621|  1.81k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 762, False: 1.05k]
  ------------------
  622|    762|                                    {
  623|    762|                                        return OpCode::SNEU;
  624|    762|                                    }
  625|  2.33k|                                }
  626|  2.86k|                                break;
  627|       |
  628|  2.86k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 1.02k, False: 20.6k]
  ------------------
  629|  1.81k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 789, False: 20.9k]
  ------------------
  630|  1.81k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 1.03k, False: 780]
  |  Branch (630:37): [True: 516, False: 1.29k]
  |  Branch (630:53): [True: 516, False: 518]
  ------------------
  631|    516|                                {
  632|    516|                                    return OpCode::SRAI;
  633|    516|                                }
  634|  1.29k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 779, False: 519]
  |  Branch (634:42): [True: 388, False: 910]
  |  Branch (634:58): [True: 388, False: 391]
  ------------------
  635|    388|                                {
  636|    388|                                    return OpCode::SRLI;
  637|    388|                                }
  638|    910|                                break;
  639|       |
  640|  1.41k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 1.41k, False: 20.2k]
  ------------------
  641|  4.07k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 2.65k, False: 19.0k]
  ------------------
  642|  4.07k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 3.08k, False: 988]
  ------------------
  643|  3.08k|                                {
  644|  3.08k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 213, False: 2.86k]
  ------------------
  645|  3.08k|                                    {
  646|    194|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 194, False: 2.88k]
  ------------------
  647|    644|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 450, False: 2.63k]
  ------------------
  648|    644|                                            return OpCode::SUBD;
  649|       |
  650|    578|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 578, False: 2.50k]
  ------------------
  651|    900|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 322, False: 2.76k]
  ------------------
  652|    900|                                            return OpCode::SUBF;
  653|       |
  654|    354|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 354, False: 2.72k]
  ------------------
  655|    548|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 194, False: 2.88k]
  ------------------
  656|    548|                                            return OpCode::SUBI;
  657|       |
  658|    198|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 198, False: 2.88k]
  ------------------
  659|    777|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 579, False: 2.50k]
  ------------------
  660|    777|                                            return OpCode::SUBU;
  661|  3.08k|                                    }
  662|  3.08k|                                }
  663|  1.20k|                                break;
  664|  21.6k|                        }
  665|  8.10k|                        break;
  666|       |
  667|  8.10k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 198, False: 59.2k]
  ------------------
  668|    982|                    case 't':
  ------------------
  |  Branch (668:21): [True: 784, False: 58.6k]
  ------------------
  669|    982|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 776, False: 206]
  |  Branch (669:29): [True: 388, False: 594]
  |  Branch (669:45): [True: 582, False: 194]
  |  Branch (669:61): [True: 388, False: 194]
  ------------------
  670|    388|                        {
  671|    388|                            return OpCode::TRAP;
  672|    388|                        }
  673|    594|                        break;
  674|    862|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 862, False: 58.5k]
  ------------------
  675|  2.51k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 1.65k, False: 57.7k]
  ------------------
  676|  2.51k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 2.30k, False: 209]
  |  Branch (676:29): [True: 1.28k, False: 1.23k]
  |  Branch (676:45): [True: 1.88k, False: 424]
  |  Branch (676:61): [True: 1.28k, False: 599]
  ------------------
  677|  1.28k|                        {
  678|  1.28k|                            return OpCode::XORI;
  679|  1.28k|                        }
  680|  1.23k|                        break;
  681|  59.4k|                }
  682|  30.5k|                break;
  683|  59.4k|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|  35.1k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 35.1k, False: 184k]
  ------------------
  687|  35.1k|                const char c1 = token[0u];
  688|  35.1k|                const char c2 = token[1u];
  689|  35.1k|                const char c3 = token[2u];
  690|  35.1k|                const char c4 = token[3u];
  691|  35.1k|                const char c5 = token[4u];
  692|       |
  693|  35.1k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 5.91k, False: 29.2k]
  ------------------
  694|  35.1k|                {
  695|  1.29k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 1.29k, False: 33.8k]
  ------------------
  696|  3.20k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 1.90k, False: 33.2k]
  ------------------
  697|  3.20k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 2.69k, False: 502]
  |  Branch (697:29): [True: 772, False: 2.42k]
  |  Branch (697:45): [True: 2.37k, False: 322]
  |  Branch (697:61): [True: 1.59k, False: 779]
  |  Branch (697:77): [True: 772, False: 825]
  ------------------
  698|    772|                        {
  699|    772|                            return OpCode::ADDUI;
  700|    772|                        }
  701|  2.42k|                        break;
  702|       |
  703|  2.42k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 275, False: 34.8k]
  ------------------
  704|  2.47k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 2.20k, False: 32.9k]
  ------------------
  705|  2.47k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 2.13k, False: 337]
  |  Branch (705:29): [True: 644, False: 1.83k]
  |  Branch (705:45): [True: 1.73k, False: 409]
  |  Branch (705:61): [True: 1.03k, False: 697]
  |  Branch (705:77): [True: 644, False: 389]
  ------------------
  706|    644|                        {
  707|    644|                            return OpCode::DIVUI;
  708|    644|                        }
  709|  1.83k|                        break;
  710|       |
  711|  1.83k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 869, False: 34.2k]
  ------------------
  712|  5.91k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 5.05k, False: 30.0k]
  ------------------
  713|  5.91k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 3.90k, False: 2.01k]
  |  Branch (713:29): [True: 2.92k, False: 2.99k]
  |  Branch (713:45): [True: 3.26k, False: 640]
  |  Branch (713:61): [True: 2.92k, False: 338]
  ------------------
  714|  2.92k|                        {
  715|  2.92k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 452, False: 2.47k]
  ------------------
  716|  2.92k|                            {
  717|    322|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 322, False: 2.60k]
  ------------------
  718|    772|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 450, False: 2.47k]
  ------------------
  719|    772|                                    return OpCode::MULTD;
  720|       |
  721|    194|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 194, False: 2.73k]
  ------------------
  722|    389|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 195, False: 2.73k]
  ------------------
  723|    389|                                    return OpCode::MULTF;
  724|       |
  725|    194|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 194, False: 2.73k]
  ------------------
  726|    388|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 194, False: 2.73k]
  ------------------
  727|    388|                                    return OpCode::MULTI;
  728|       |
  729|    322|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 322, False: 2.60k]
  ------------------
  730|    926|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 604, False: 2.32k]
  ------------------
  731|    926|                                    return OpCode::MULTU;
  732|  2.92k|                            }
  733|  2.92k|                        }
  734|  3.44k|                        break;
  735|       |
  736|  6.82k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 6.82k, False: 28.3k]
  ------------------
  737|  17.6k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 10.8k, False: 24.3k]
  ------------------
  738|  17.6k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 273, False: 17.3k]
  ------------------
  739|  17.6k|                        {
  740|  4.48k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 4.48k, False: 13.1k]
  ------------------
  741|  4.69k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 211, False: 17.4k]
  ------------------
  742|  4.69k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 4.49k, False: 196]
  |  Branch (742:37): [True: 1.54k, False: 3.15k]
  |  Branch (742:53): [True: 2.85k, False: 1.64k]
  |  Branch (742:69): [True: 1.54k, False: 1.31k]
  ------------------
  743|  1.54k|                                {
  744|  1.54k|                                    return OpCode::SEQUI;
  745|  1.54k|                                }
  746|  3.15k|                                break;
  747|       |
  748|  3.15k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 1.15k, False: 16.4k]
  ------------------
  749|  3.64k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 2.49k, False: 15.1k]
  ------------------
  750|  3.64k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 2.22k, False: 1.41k]
  |  Branch (750:37): [True: 1.15k, False: 2.48k]
  |  Branch (750:53): [True: 1.75k, False: 475]
  |  Branch (750:69): [True: 1.15k, False: 596]
  ------------------
  751|  1.15k|                                {
  752|  1.15k|                                    return OpCode::SGEUI;
  753|  1.15k|                                }
  754|  2.48k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 1.40k, False: 1.08k]
  |  Branch (754:42): [True: 516, False: 1.97k]
  |  Branch (754:58): [True: 1.06k, False: 344]
  |  Branch (754:74): [True: 516, False: 544]
  ------------------
  755|    516|                                {
  756|    516|                                    return OpCode::SGTUI;
  757|    516|                                }
  758|  1.97k|                                break;
  759|       |
  760|  1.97k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 1.08k, False: 16.5k]
  ------------------
  761|  4.53k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 3.44k, False: 14.1k]
  ------------------
  762|  4.53k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 1.76k, False: 2.76k]
  |  Branch (762:37): [True: 772, False: 3.75k]
  |  Branch (762:53): [True: 1.42k, False: 349]
  |  Branch (762:69): [True: 772, False: 648]
  ------------------
  763|    772|                                {
  764|    772|                                    return OpCode::SLEUI;
  765|    772|                                }
  766|  3.75k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 2.44k, False: 1.31k]
  |  Branch (766:42): [True: 1.15k, False: 2.60k]
  |  Branch (766:58): [True: 1.80k, False: 644]
  |  Branch (766:74): [True: 1.15k, False: 643]
  ------------------
  767|  1.15k|                                {
  768|  1.15k|                                    return OpCode::SLTUI;
  769|  1.15k|                                }
  770|  2.60k|                                break;
  771|       |
  772|  2.60k|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 352, False: 17.2k]
  ------------------
  773|  2.50k|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 2.15k, False: 15.4k]
  ------------------
  774|  2.50k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 2.14k, False: 365]
  |  Branch (774:37): [True: 900, False: 1.60k]
  |  Branch (774:53): [True: 1.67k, False: 470]
  |  Branch (774:69): [True: 900, False: 773]
  ------------------
  775|    900|                                {
  776|    900|                                    return OpCode::SNEUI;
  777|    900|                                }
  778|  1.60k|                                break;
  779|       |
  780|  1.60k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 806, False: 16.8k]
  ------------------
  781|  1.98k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 1.17k, False: 16.4k]
  ------------------
  782|  1.98k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 1.52k, False: 457]
  |  Branch (782:37): [True: 614, False: 1.36k]
  |  Branch (782:53): [True: 1.00k, False: 521]
  |  Branch (782:69): [True: 614, False: 389]
  ------------------
  783|    614|                                {
  784|    614|                                    return OpCode::SUBUI;
  785|    614|                                }
  786|  1.36k|                                break;
  787|  17.6k|                        }
  788|       |
  789|  10.9k|                        break;
  790|  35.1k|                }
  791|       |
  792|  24.5k|                break;
  793|  35.1k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|  24.5k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 15.9k, False: 203k]
  ------------------
  797|  15.9k|                const char c1 = token[0u];
  798|  15.9k|                const char c2 = token[1u];
  799|  15.9k|                const char c3 = token[2u];
  800|  15.9k|                const char c4 = token[3u];
  801|  15.9k|                const char c5 = token[4u];
  802|  15.9k|                const char c6 = token[5u];
  803|       |
  804|  15.9k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 7.12k, False: 8.85k]
  |  Branch (804:21): [True: 6.26k, False: 9.71k]
  |  Branch (804:37): [True: 6.66k, False: 464]
  |  Branch (804:53): [True: 6.26k, False: 400]
  ------------------
  805|  6.26k|                {
  806|  6.26k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 540, False: 5.72k]
  ------------------
  807|  6.26k|                    {
  808|  1.24k|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 1.24k, False: 5.02k]
  ------------------
  809|  2.34k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 1.09k, False: 5.16k]
  ------------------
  810|  2.34k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 2.12k, False: 218]
  ------------------
  811|  2.12k|                            {
  812|  2.12k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 900, False: 1.22k]
  ------------------
  813|    900|                                {
  814|    900|                                    return OpCode::CVTD2F;
  815|    900|                                }
  816|  1.22k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 1.02k, False: 194]
  ------------------
  817|  1.02k|                                {
  818|  1.02k|                                    return OpCode::CVTD2I;
  819|  1.02k|                                }
  820|  2.12k|                            }
  821|    412|                            break;
  822|       |
  823|    412|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 220, False: 6.04k]
  ------------------
  824|  1.24k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 1.02k, False: 5.23k]
  ------------------
  825|  1.24k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 1.03k, False: 210]
  ------------------
  826|  1.03k|                            {
  827|  1.03k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 388, False: 646]
  ------------------
  828|    388|                                {
  829|    388|                                    return OpCode::CVTF2D;
  830|    388|                                }
  831|    646|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 388, False: 258]
  ------------------
  832|    388|                                {
  833|    388|                                    return OpCode::CVTF2I;
  834|    388|                                }
  835|  1.03k|                            }
  836|    468|                            break;
  837|       |
  838|  1.80k|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 1.80k, False: 4.46k]
  ------------------
  839|  2.13k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 338, False: 5.92k]
  ------------------
  840|  2.13k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 1.35k, False: 785]
  ------------------
  841|  1.35k|                            {
  842|  1.35k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 644, False: 710]
  ------------------
  843|    644|                                {
  844|    644|                                    return OpCode::CVTI2D;
  845|    644|                                }
  846|    710|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 388, False: 322]
  ------------------
  847|    388|                                {
  848|    388|                                    return OpCode::CVTI2F;
  849|    388|                                }
  850|  1.35k|                            }
  851|  6.26k|                    }
  852|  6.26k|                }
  853|  9.71k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 5.06k, False: 4.65k]
  |  Branch (853:26): [True: 516, False: 9.20k]
  |  Branch (853:42): [True: 2.87k, False: 2.18k]
  |  Branch (853:58): [True: 2.00k, False: 872]
  |  Branch (853:74): [True: 1.58k, False: 417]
  ------------------
  854|  9.71k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 1.13k, False: 448]
  |  Branch (854:42): [True: 516, False: 623]
  ------------------
  855|    516|                {
  856|    516|                    return OpCode::MULTUI;
  857|    516|                }
  858|  11.7k|                break;
  859|  15.9k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|  11.7k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 5.95k, False: 213k]
  ------------------
  863|  5.95k|                const char c1 = token[0u];
  864|  5.95k|                const char c2 = token[1u];
  865|  5.95k|                const char c3 = token[2u];
  866|  5.95k|                const char c4 = token[3u];
  867|  5.95k|                const char c5 = token[4u];
  868|  5.95k|                const char c6 = token[5u];
  869|  5.95k|                const char c7 = token[6u];
  870|       |
  871|  5.95k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 3.65k, False: 2.29k]
  |  Branch (871:21): [True: 2.75k, False: 3.19k]
  |  Branch (871:37): [True: 3.18k, False: 471]
  |  Branch (871:53): [True: 2.75k, False: 434]
  ------------------
  872|  2.75k|                {
  873|  2.75k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 1.48k, False: 1.26k]
  |  Branch (873:25): [True: 644, False: 2.11k]
  |  Branch (873:41): [True: 1.16k, False: 322]
  |  Branch (873:54): [True: 841, False: 323]
  |  Branch (873:70): [True: 644, False: 197]
  ------------------
  874|    644|                    {
  875|    644|                        return OpCode::MOVI2FP;
  876|    644|                    }
  877|  2.11k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 1.25k, False: 852]
  |  Branch (877:25): [True: 516, False: 1.59k]
  |  Branch (877:41): [True: 909, False: 349]
  |  Branch (877:57): [True: 712, False: 197]
  |  Branch (877:70): [True: 516, False: 196]
  ------------------
  878|    516|                    {
  879|    516|                        return OpCode::MOVFP2I;
  880|    516|                    }
  881|  2.11k|                }
  882|  4.79k|                break;
  883|  5.95k|            }
  884|       |
  885|  4.79k|            default: {
  ------------------
  |  Branch (885:13): [True: 4.27k, False: 215k]
  ------------------
  886|  4.27k|                break;
  887|  5.95k|            }
  888|   219k|        }
  889|       |
  890|       |        // None found
  891|   135k|        return OpCode::NONE;
  892|   219k|    }
_ZN3dlx3iceEcc:
   17|   353k|    {
   18|   353k|        constexpr const char diff = 'a' - 'A';
   19|   353k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 109k, False: 244k]
  |  Branch (19:28): [True: 107k, False: 136k]
  ------------------
   20|   353k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   187k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|  1.98k|    {
  195|  1.98k|        ParseError err;
  196|       |
  197|  1.98k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|  1.98k|        err.m_LineNumber                           = line_number;
  199|  1.98k|        err.m_Column                               = column;
  200|  1.98k|        err.unexpected_argument_type.expected_type = expected_type;
  201|  1.98k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|  1.98k|        return err;
  204|  1.98k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|  1.98k|    {
  209|  1.98k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|  1.98k|                                                         token.GetColumn().unsafe(), expected_type,
  211|  1.98k|                                                         actual_type);
  212|  1.98k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|    194|    {
  218|    194|        ParseError err;
  219|       |
  220|    194|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|    194|        err.m_LineNumber        = line_number;
  222|    194|        err.m_Column            = column;
  223|    194|        err.invalid_number.text = text;
  224|       |
  225|    194|        return err;
  226|    194|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|    194|    {
  230|    194|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|    194|                                                token.GetColumn().unsafe(), token.GetText());
  232|    194|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|      2|    {
  237|      2|        ParseError err;
  238|       |
  239|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|      2|        err.m_LineNumber = line_number;
  241|      2|        err.m_Column     = column;
  242|       |
  243|      2|        return err;
  244|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|      2|    {
  249|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|      2|                                                                     token.GetColumn().unsafe());
  251|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  59.7k|    {
  257|  59.7k|        ParseError err;
  258|       |
  259|  59.7k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  59.7k|        err.m_LineNumber                   = line_number;
  261|  59.7k|        err.m_Column                       = column;
  262|  59.7k|        err.unexpected_token.expected_type = expected_type;
  263|  59.7k|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  59.7k|        return err;
  266|  59.7k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  59.7k|    {
  271|  59.7k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  59.7k|                                                  token.GetColumn().unsafe(), expected_type,
  273|  59.7k|                                                  token.GetType());
  274|  59.7k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|  32.4k|    {
  279|  32.4k|        ParseError err;
  280|       |
  281|  32.4k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|  32.4k|        err.m_LineNumber                   = line_number;
  283|  32.4k|        err.m_Column                       = column;
  284|  32.4k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|  32.4k|        return err;
  287|  32.4k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|    194|    {
  291|    194|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|    194|                                                    token.GetColumn().unsafe(), token.GetText());
  293|    194|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  37.3k|    {
  298|  37.3k|        ParseError err;
  299|       |
  300|  37.3k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  37.3k|        err.m_LineNumber                       = line_number;
  302|  37.3k|        err.m_Column                           = column;
  303|  37.3k|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  37.3k|        return err;
  306|  37.3k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  37.3k|    {
  311|  37.3k|        return ConstructInvalidLabelIdentifierParseError(
  312|  37.3k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  37.3k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|  9.90k|    {
  319|  9.90k|        ParseError err;
  320|       |
  321|  9.90k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|  9.90k|        err.m_LineNumber                     = line_number;
  323|  9.90k|        err.m_Column                         = column;
  324|  9.90k|        err.label_already_defined.label_name = label_name;
  325|  9.90k|        err.label_already_defined.at_line    = at_line;
  326|  9.90k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|  9.90k|        return err;
  329|  9.90k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|  9.90k|    {
  334|  9.90k|        return ConstructLabelAlreadyDefinedParseError(
  335|  9.90k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|  9.90k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|  9.90k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|  32.0k|    {
  342|  32.0k|        ParseError err;
  343|       |
  344|  32.0k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|  32.0k|        err.m_LineNumber = line_number;
  346|  32.0k|        err.m_Column     = column;
  347|       |
  348|  32.0k|        return err;
  349|  32.0k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|  32.0k|    {
  354|  32.0k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|  32.0k|                                                        token.GetColumn().unsafe());
  356|  32.0k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|  4.77k|    {
  362|  4.77k|        ParseError err;
  363|       |
  364|  4.77k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|  4.77k|        err.m_LineNumber               = line_number;
  366|  4.77k|        err.m_Column                   = column;
  367|  4.77k|        err.too_few_arguments.required = required;
  368|  4.77k|        err.too_few_arguments.provided = provided;
  369|       |
  370|  4.77k|        return err;
  371|  4.77k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|  4.77k|    {
  376|  4.77k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|  4.77k|                                                  token.GetColumn().unsafe(), required, provided);
  378|  4.77k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|  8.66k|    {
  383|  8.66k|        ParseError err;
  384|       |
  385|  8.66k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|  8.66k|        err.m_LineNumber           = line_number;
  387|  8.66k|        err.m_Column               = column;
  388|  8.66k|        err.empty_label.label_name = label_name;
  389|       |
  390|  8.66k|        return err;
  391|  8.66k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|  8.66k|    {
  395|  8.66k|        return ConstructEmptyLabelParseError(
  396|  8.66k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|  8.66k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 7.80k, False: 861]
  ------------------
  398|  7.80k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|  8.66k|                        token.GetText());
  400|  8.66k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|    545|    {
  405|    545|        ParseError err;
  406|       |
  407|    545|        err.m_Type       = ParseError::Type::TooManyComma;
  408|    545|        err.m_LineNumber = line_number;
  409|    545|        err.m_Column     = column;
  410|       |
  411|    545|        return err;
  412|    545|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|    545|    {
  416|    545|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|    545|                                               token.GetColumn().unsafe());
  418|    545|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   187k|    {
   19|   187k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   187k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  4.51k|    {
  181|  4.51k|        ParsedProgram program;
  182|       |
  183|  4.51k|        program.m_Tokens = tokens;
  184|       |
  185|  4.51k|        phi::boolean line_has_instruction{false};
  186|  4.51k|        phi::usize   label_count{0u};
  187|       |
  188|   223k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 218k, False: 4.51k]
  ------------------
  189|   218k|        {
  190|   218k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   218k|            switch (current_token.GetType())
  195|   218k|            {
  196|       |                // Ignore comments
  197|  1.26k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 1.26k, False: 217k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  1.26k|                    break;
  200|       |
  201|  26.4k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 26.4k, False: 192k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  26.4k|                    line_has_instruction = false;
  204|  26.4k|                    break;
  205|       |
  206|  88.8k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 88.8k, False: 129k]
  ------------------
  207|  88.8k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 5.43k, False: 83.4k]
  ------------------
  208|  5.43k|                    {
  209|  5.43k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  5.43k|                                current_token, Token::Type::NewLine));
  211|  5.43k|                        break;
  212|  5.43k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  83.4k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 19.2k, False: 64.1k]
  ------------------
  217|  19.2k|                    {
  218|  19.2k|                        program.AddParseError(
  219|  19.2k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  19.2k|                        break;
  221|  19.2k|                    }
  222|       |
  223|  64.1k|                    phi::string_view label_name = current_token.GetText();
  224|  64.1k|                    label_name.remove_suffix(1u);
  225|       |
  226|  64.1k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 32.2k, False: 31.9k]
  ------------------
  227|  32.2k|                    {
  228|  32.2k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|  32.2k|                                current_token.GetLineNumber().unsafe(),
  230|  32.2k|                                current_token.GetColumn().unsafe(), label_name));
  231|  32.2k|                        break;
  232|  32.2k|                    }
  233|       |
  234|  31.9k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 13.0k, False: 18.8k]
  ------------------
  235|  13.0k|                    {
  236|  13.0k|                        program.AddParseError(
  237|  13.0k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  13.0k|                        break;
  239|  13.0k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  18.8k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 9.90k, False: 8.99k]
  ------------------
  243|  9.90k|                    {
  244|       |                        // Find first defintions of label
  245|  9.90k|                        const Token* first_label_definition =
  246|  9.90k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  9.90k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  9.90k|                                    {
  249|  9.90k|                                        phi::string_view token_label_name = t.GetText();
  250|  9.90k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  9.90k|                                        if (token_label_name == label_name)
  253|  9.90k|                                        {
  254|  9.90k|                                            return true;
  255|  9.90k|                                        }
  256|  9.90k|                                    }
  257|       |
  258|  9.90k|                                    return false;
  259|  9.90k|                                });
  260|       |
  261|  9.90k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  9.90k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  9.90k|                                current_token, *first_label_definition));
  265|  9.90k|                        break;
  266|  9.90k|                    }
  267|       |
  268|  8.99k|                    program.m_JumpData[label_name] =
  269|  8.99k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|  8.99k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  8.99k|                    break;
  276|  18.8k|                }
  277|       |
  278|  52.7k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 52.7k, False: 165k]
  ------------------
  279|  52.7k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 32.0k, False: 20.6k]
  ------------------
  280|  32.0k|                    {
  281|  32.0k|                        program.AddParseError(
  282|  32.0k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  32.0k|                        break;
  284|  32.0k|                    }
  285|       |
  286|  20.6k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  20.6k|                    PHI_ASSERT(current_token.HasHint());
  290|  20.6k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  20.6k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  20.6k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  20.6k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  20.6k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  20.6k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  20.6k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  20.6k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  20.6k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  39.1k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 35.8k, False: 3.30k]
  ------------------
  312|  35.8k|                    {
  313|       |                        // Get next token
  314|  35.8k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 744, False: 35.0k]
  ------------------
  315|    744|                        {
  316|    744|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    744|                                    current_token, number_of_argument_required.unsafe(),
  318|    744|                                    argument_num.unsafe()));
  319|    744|                            break;
  320|    744|                        }
  321|       |
  322|  35.0k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  35.0k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 11.5k, False: 23.5k]
  ------------------
  326|  11.5k|                        {
  327|  11.5k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 545, False: 11.0k]
  ------------------
  328|    545|                            {
  329|    545|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    545|                            }
  331|       |
  332|  11.5k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  11.5k|                            continue;
  335|  11.5k|                        }
  336|       |
  337|  23.5k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 4.02k, False: 19.4k]
  ------------------
  338|  4.02k|                        {
  339|  4.02k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  4.02k|                                    token, number_of_argument_required.unsafe(),
  341|  4.02k|                                    argument_num.unsafe()));
  342|  4.02k|                            break;
  343|  4.02k|                        }
  344|       |
  345|  19.4k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  19.4k|                                parse_instruction_argument(
  347|  19.4k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  19.4k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 12.5k, False: 6.89k]
  ------------------
  349|  12.5k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  12.5k|                            break;
  352|  12.5k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  6.89k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  6.89k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  6.89k|                        argument_num++;
  359|  6.89k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  6.89k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  20.6k|                    program.m_Instructions.emplace_back(instruction);
  367|  20.6k|                    line_has_instruction = true;
  368|  20.6k|                    break;
  369|  52.7k|                }
  370|       |
  371|  49.2k|                default:
  ------------------
  |  Branch (371:17): [True: 49.2k, False: 169k]
  ------------------
  372|  49.2k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  49.2k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 26.4k, False: 22.7k]
  ------------------
  374|  26.4k|                    {
  375|  26.4k|                        expected_token_type = Token::Type::NewLine;
  376|  26.4k|                    }
  377|       |
  378|  49.2k|                    program.AddParseError(
  379|  49.2k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  49.2k|                    break;
  381|   218k|            }
  382|   218k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  4.51k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 626, False: 3.88k]
  ------------------
  386|    626|        {
  387|  10.5k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 9.89k, False: 626]
  ------------------
  388|  9.89k|            {
  389|  9.89k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  9.89k|                const Token& token = *it;
  392|  9.89k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 8.66k, False: 1.23k]
  ------------------
  393|  8.66k|                {
  394|  8.66k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  8.66k|                    --label_count;
  396|  8.66k|                }
  397|  9.89k|            }
  398|    626|        }
  399|       |
  400|  4.51k|        return program;
  401|  4.51k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  4.51k|    {
  405|  4.51k|        TokenStream tokens = Tokenize(source);
  406|  4.51k|        return Parse(tokens);
  407|  4.51k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  19.4k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  19.4k|        switch (token.GetType())
   37|  19.4k|        {
   38|  2.43k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 2.43k, False: 17.0k]
  ------------------
   39|  2.43k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 326, False: 2.10k]
  ------------------
   40|  2.43k|                                          ArgumentType::AddressDisplacement))
   41|    326|                {
   42|    326|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    326|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    326|                    return {};
   46|    326|                }
   47|       |
   48|       |                // Get address displacement
   49|  2.10k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  2.10k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  2.10k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 2, False: 2.10k]
  ------------------
   54|      2|                {
   55|      2|                    program.AddParseError(
   56|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      2|                    return {};
   58|      2|                }
   59|       |
   60|  2.10k|                auto         it           = tokens.current_position();
   61|  2.10k|                const Token& first_token  = tokens.consume();
   62|  2.10k|                const Token& second_token = tokens.consume();
   63|  2.10k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  2.10k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 499, False: 1.60k]
  ------------------
   66|    499|                {
   67|    499|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    499|                            first_token, Token::Type::OpenBracket));
   69|    499|                    return {};
   70|    499|                }
   71|       |
   72|       |                // Second token is the register
   73|  1.60k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 578, False: 1.02k]
  ------------------
   74|    578|                {
   75|    578|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|    578|                            second_token, Token::Type::RegisterInt));
   77|    578|                    return {};
   78|    578|                }
   79|       |
   80|  1.02k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 578, False: 450]
  ------------------
   81|    578|                {
   82|    578|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|    578|                            third_token, Token::Type::ClosingBracket));
   84|    578|                    return {};
   85|    578|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|    450|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|    450|                return ConstructInstructionArgumentAddressDisplacement(
   94|    450|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|  1.02k|            }
   96|    782|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 782, False: 18.7k]
  ------------------
   97|    782|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 323, False: 459]
  ------------------
   98|    323|                {
   99|    323|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    323|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    323|                    return {};
  102|    323|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|    459|                return ConstructInstructionArgumentRegisterInt(
  108|    459|                        static_cast<IntRegisterID>(token.GetHint()));
  109|    782|            }
  110|  4.48k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 4.48k, False: 14.9k]
  ------------------
  111|  4.48k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 194, False: 4.29k]
  ------------------
  112|    194|                {
  113|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    194|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    194|                    return {};
  116|    194|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  4.29k|                return ConstructInstructionArgumentRegisterFloat(
  122|  4.29k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  4.48k|            }
  124|    194|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 194, False: 19.2k]
  ------------------
  125|    194|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|    194|                return {};
  128|  4.48k|            }
  129|  7.26k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 7.26k, False: 12.2k]
  ------------------
  130|       |                // Parse as Label
  131|  7.26k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 815, False: 6.44k]
  ------------------
  132|    815|                {
  133|    815|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|    815|                            token, expected_argument_type, ArgumentType::Label));
  135|    815|                    return {};
  136|    815|                }
  137|       |
  138|  6.44k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 6.44k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  6.44k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 5.09k, False: 1.35k]
  ------------------
  145|  5.09k|                {
  146|  5.09k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  5.09k|                    return {};
  148|  5.09k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  1.35k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  6.44k|            }
  154|    851|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 851, False: 18.6k]
  ------------------
  155|    851|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 322, False: 529]
  ------------------
  156|    322|                {
  157|    322|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    322|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    322|                    return {};
  160|    322|                }
  161|       |
  162|    529|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 335, False: 194]
  ------------------
  163|    335|                {
  164|    335|                    return ConstructInstructionArgumentImmediateValue(
  165|    335|                            static_cast<std::int16_t>(token.GetHint()));
  166|    335|                }
  167|       |
  168|    194|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    194|                return {};
  170|    529|            }
  171|       |
  172|  3.47k|            default:
  ------------------
  |  Branch (172:13): [True: 3.47k, False: 16.0k]
  ------------------
  173|  3.47k|                program.AddParseError(
  174|  3.47k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  3.47k|                return {};
  176|  19.4k|        }
  177|  19.4k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  47.4k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  47.4k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 40.7k, False: 6.72k]
  ------------------
  248|  40.7k|                                    {
  249|  40.7k|                                        phi::string_view token_label_name = t.GetText();
  250|  40.7k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  40.7k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 9.90k, False: 30.8k]
  ------------------
  253|  9.90k|                                        {
  254|  9.90k|                                            return true;
  255|  9.90k|                                        }
  256|  40.7k|                                    }
  257|       |
  258|  37.5k|                                    return false;
  259|  47.4k|                                });

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|   230k|    {
   13|   230k|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 35.5k, False: 194k]
  ------------------
   14|  35.5k|        {
   15|  35.5k|            const char first_char = token[0u];
   16|  35.5k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 401, False: 35.1k]
  |  Branch (16:38): [True: 2.90k, False: 32.2k]
  ------------------
   17|  3.30k|            {
   18|  3.30k|                const char second_char = token[1u];
   19|  3.30k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 2.96k, False: 342]
  |  Branch (19:43): [True: 2.55k, False: 406]
  ------------------
   20|  2.55k|                {
   21|  2.55k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  2.55k|                }
   23|  3.30k|            }
   24|  35.5k|        }
   25|   194k|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 48.5k, False: 146k]
  ------------------
   26|  48.5k|        {
   27|  48.5k|            const char first_char = token[0u];
   28|  48.5k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 207, False: 48.3k]
  |  Branch (28:38): [True: 2.07k, False: 46.2k]
  ------------------
   29|  2.27k|            {
   30|  2.27k|                const char second_char = token[1u];
   31|  2.27k|                const char third_char  = token[2u];
   32|       |
   33|  2.27k|                switch (second_char)
   34|  2.27k|                {
   35|    590|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 590, False: 1.68k]
  ------------------
   36|    590|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 388, False: 202]
  |  Branch (36:50): [True: 194, False: 194]
  ------------------
   37|    194|                        {
   38|    194|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|    194|                        }
   40|    396|                        break;
   41|    590|                    }
   42|    612|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 612, False: 1.66k]
  ------------------
   43|    612|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 396, False: 216]
  |  Branch (43:50): [True: 194, False: 202]
  ------------------
   44|    194|                        {
   45|    194|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|    194|                        }
   47|    418|                        break;
   48|    612|                    }
   49|    846|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 846, False: 1.43k]
  ------------------
   50|    846|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 194, False: 652]
  |  Branch (50:50): [True: 450, False: 202]
  ------------------
   51|    644|                        {
   52|    644|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|    644|                        }
   54|    202|                        break;
   55|    846|                    }
   56|    231|                    default: {
  ------------------
  |  Branch (56:21): [True: 231, False: 2.04k]
  ------------------
   57|    231|                        break;
   58|    846|                    }
   59|  2.27k|                }
   60|  2.27k|            }
   61|  48.5k|        }
   62|       |
   63|   226k|        return IntRegisterID::None;
   64|   230k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|   226k|    {
   68|   226k|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 32.9k, False: 193k]
  ------------------
   69|  32.9k|        {
   70|  32.9k|            const char first_char = token[0u];
   71|  32.9k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 5.78k, False: 27.1k]
  |  Branch (71:38): [True: 821, False: 26.3k]
  ------------------
   72|  6.60k|            {
   73|  6.60k|                const char second_char = token[1u];
   74|  6.60k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 6.35k, False: 250]
  |  Branch (74:43): [True: 5.66k, False: 691]
  ------------------
   75|  5.66k|                {
   76|  5.66k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  5.66k|                }
   78|  6.60k|            }
   79|  32.9k|        }
   80|   193k|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 47.5k, False: 146k]
  ------------------
   81|  47.5k|        {
   82|  47.5k|            const char first_char = token[0u];
   83|  47.5k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 2.40k, False: 45.1k]
  |  Branch (83:38): [True: 1.67k, False: 43.4k]
  ------------------
   84|  4.07k|            {
   85|  4.07k|                const char second_char = token[1u];
   86|  4.07k|                const char third_char  = token[2u];
   87|       |
   88|  4.07k|                switch (second_char)
   89|  4.07k|                {
   90|    586|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 586, False: 3.48k]
  ------------------
   91|    586|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 392, False: 194]
  |  Branch (91:50): [True: 194, False: 198]
  ------------------
   92|    194|                        {
   93|    194|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|    194|                        }
   95|    392|                        break;
   96|    586|                    }
   97|  1.22k|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 1.22k, False: 2.85k]
  ------------------
   98|  1.22k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 1.02k, False: 194]
  |  Branch (98:50): [True: 318, False: 709]
  ------------------
   99|    318|                        {
  100|    318|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|    318|                        }
  102|    903|                        break;
  103|  1.22k|                    }
  104|  1.10k|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 1.10k, False: 2.96k]
  ------------------
  105|  1.10k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 194, False: 913]
  |  Branch (105:50): [True: 331, False: 582]
  ------------------
  106|    525|                        {
  107|    525|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|    525|                        }
  109|    582|                        break;
  110|  1.10k|                    }
  111|  1.15k|                    default: {
  ------------------
  |  Branch (111:21): [True: 1.15k, False: 2.91k]
  ------------------
  112|  1.15k|                        break;
  113|  1.10k|                    }
  114|  4.07k|                }
  115|  4.07k|            }
  116|  47.5k|        }
  117|       |
  118|   219k|        return FloatRegisterID::None;
  119|   226k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|   199k|    {
  123|   199k|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 47.5k, False: 151k]
  ------------------
  124|  47.5k|        {
  125|  47.5k|            const char c1 = token[0u];
  126|  47.5k|            const char c2 = token[1u];
  127|  47.5k|            const char c3 = token[2u];
  128|  47.5k|            const char c4 = token[3u];
  129|       |
  130|  47.5k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 2.03k, False: 45.5k]
  |  Branch (130:34): [True: 1.31k, False: 44.2k]
  |  Branch (130:49): [True: 1.83k, False: 1.51k]
  |  Branch (130:62): [True: 194, False: 1.32k]
  ------------------
  131|  47.5k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 711, False: 1.31k]
  |  Branch (131:34): [True: 1.07k, False: 245]
  |  Branch (131:49): [True: 450, False: 1.33k]
  |  Branch (131:62): [True: 698, False: 637]
  ------------------
  132|  47.5k|        }
  133|       |
  134|   151k|        return false;
  135|   199k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|   192k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  67.6k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|   418k|    {
   41|   418k|        return m_Type;
   42|   418k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   218k|    {
   51|   218k|        return m_LineNumber;
   52|   218k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   197k|    {
   56|   197k|        return m_Column;
   57|   197k|    }
_ZNK3dlx5Token7GetTextEv:
   65|   275k|    {
   66|   275k|        return m_Text;
   67|   275k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  23.3k|    {
   80|  23.3k|        return m_HasHint;
   81|  23.3k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  28.3k|    {
   85|  28.3k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  28.3k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  28.3k|                   m_Type == Type::ImmediateInteger);
   88|  28.3k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  28.3k|        return m_Hint;
   91|  28.3k|    }

_ZN3dlx11TokenStream8finalizeEv:
   30|  4.51k|    {
   31|       |#if defined(PHI_DEBUG)
   32|       |        PHI_ASSERT(!m_Finialized);
   33|       |#endif
   34|       |
   35|  4.51k|        m_Iterator = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |        m_Finialized = true;
   38|       |#endif
   39|  4.51k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   51|  2.10k|    {
   52|  2.10k|        return x + m_Iterator <= m_Tokens.size();
   53|  2.10k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   56|   258k|    {
   57|   258k|        return m_Iterator < m_Tokens.size();
   58|   258k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   61|   259k|    {
   62|   259k|        return m_Iterator >= m_Tokens.size();
   63|   259k|    }
_ZN3dlx11TokenStream7consumeEv:
   76|   259k|    {
   77|   259k|        PHI_ASSERT(!reached_end());
   78|       |#if defined(PHI_DEBUG)
   79|       |        PHI_ASSERT(m_Finialized);
   80|       |#endif
   81|       |
   82|   259k|        return m_Tokens.at(m_Iterator++.unsafe());
   83|   259k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  155|  2.10k|    {
  156|  2.10k|        return m_Iterator;
  157|  2.10k|    }
_ZN3dlx11TokenStream12set_positionEN3phi7integerImEE:
  160|    450|    {
  161|       |#if defined(PHI_DEBUG)
  162|       |        PHI_ASSERT(m_Finialized);
  163|       |#endif
  164|       |
  165|    450|        m_Iterator = pos;
  166|    450|    }
_ZNK3dlx11TokenStream6rbeginEv:
  205|    626|    {
  206|       |#if defined(PHI_DEBUG)
  207|       |        //PHI_ASSERT(m_Finialized);
  208|       |#endif
  209|       |
  210|    626|        return m_Tokens.rbegin();
  211|    626|    }
_ZNK3dlx11TokenStream4rendEv:
  214|  9.89k|    {
  215|       |#if defined(PHI_DEBUG)
  216|       |        //PHI_ASSERT(m_Finialized);
  217|       |#endif
  218|       |
  219|  9.89k|        return m_Tokens.rend();
  220|  9.89k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  4.51k|    {
   66|  4.51k|        TokenStream tokens;
   67|       |
   68|  4.51k|        phi::string_view current_token;
   69|       |
   70|  4.51k|        phi::u64 current_line_number{1u};
   71|  4.51k|        phi::u64 current_column{1u};
   72|  4.51k|        phi::u64 token_begin{0u};
   73|       |
   74|  4.51k|        phi::boolean parsing_comment{false};
   75|       |
   76|   738k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 733k, False: 4.51k]
  ------------------
   77|   733k|        {
   78|   733k|            const char c{source.at(i)};
   79|       |
   80|   733k|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 30.7k, False: 703k]
  ------------------
   81|  30.7k|            {
   82|  30.7k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 5.95k, False: 24.7k]
  ------------------
   83|  5.95k|                {
   84|       |                    // Skip empty lines
   85|  5.95k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  5.95k|                                        current_line_number, current_column);
   87|       |
   88|  5.95k|                    parsing_comment = false;
   89|  5.95k|                    current_line_number += 1u;
   90|  5.95k|                    current_column = 1u;
   91|  5.95k|                    continue;
   92|  5.95k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  24.7k|                tokens.emplace_back(ParseToken(
   96|  24.7k|                        source.substring_view(
   97|  24.7k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  24.7k|                                current_token.length()),
   99|  24.7k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  24.7k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  24.7k|                                    current_line_number, current_column);
  103|       |
  104|  24.7k|                current_token   = phi::string_view{};
  105|  24.7k|                parsing_comment = false;
  106|  24.7k|                current_line_number += 1u;
  107|  24.7k|                current_column = 0u;
  108|  24.7k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|   703k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 723, False: 702k]
  |  Branch (110:34): [True: 1.01k, False: 701k]
  ------------------
  111|  1.74k|            {
  112|  1.74k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 249, False: 1.49k]
  ------------------
  113|    249|                {
  114|    249|                    token_begin = i;
  115|    249|                }
  116|  1.49k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 1.11k, False: 380]
  ------------------
  117|  1.11k|                {
  118|  1.11k|                    tokens.emplace_back(ParseToken(
  119|  1.11k|                            source.substring_view(
  120|  1.11k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  1.11k|                                    current_token.length()),
  122|  1.11k|                            current_line_number, current_column - current_token.length()));
  123|  1.11k|                    token_begin   = i;
  124|  1.11k|                    current_token = phi::string_view{};
  125|  1.11k|                }
  126|       |
  127|  1.74k|                parsing_comment = true;
  128|  1.74k|                current_token   = source.substring_view(
  129|  1.74k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  1.74k|                        current_token.length() + 1u);
  131|  1.74k|            }
  132|   701k|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 250, False: 701k]
  ------------------
  133|    250|            {
  134|       |                // simply append the character
  135|    250|                current_token = source.substring_view(
  136|    250|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|    250|                        current_token.length() + 1u);
  138|    250|            }
  139|   701k|            else
  140|   701k|            {
  141|       |                // Not parsing a comment
  142|   701k|                switch (c)
  143|   701k|                {
  144|  6.54k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 6.54k, False: 694k]
  ------------------
  145|  11.9k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 5.41k, False: 695k]
  ------------------
  146|  21.8k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 9.90k, False: 691k]
  ------------------
  147|  21.8k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 2.09k, False: 19.7k]
  ------------------
  148|  2.09k|                        {
  149|  2.09k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|  2.09k|                            continue;
  152|  2.09k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  19.7k|                        tokens.emplace_back(ParseToken(
  156|  19.7k|                                source.substring_view(
  157|  19.7k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  19.7k|                                        current_token.length()),
  159|  19.7k|                                current_line_number, current_column - current_token.length()));
  160|  19.7k|                        current_token = phi::string_view{};
  161|  19.7k|                        break;
  162|  70.4k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 70.4k, False: 630k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  70.4k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 66.8k, False: 3.61k]
  ------------------
  165|  66.8k|                        {
  166|  66.8k|                            current_token = source.substring_view(
  167|  66.8k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  66.8k|                                    current_token.length() + 1u);
  169|  66.8k|                            tokens.emplace_back(ParseToken(
  170|  66.8k|                                    source.substring_view(
  171|  66.8k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  66.8k|                                                    token_begin),
  173|  66.8k|                                            current_token.length()),
  174|  66.8k|                                    current_line_number,
  175|  66.8k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  66.8k|                            current_token = phi::string_view{};
  178|  66.8k|                        }
  179|  3.61k|                        else
  180|  3.61k|                        {
  181|       |                            // Orphan colon
  182|  3.61k|                            token_begin = i;
  183|       |
  184|  3.61k|                            tokens.emplace_back(
  185|  3.61k|                                    Token::Type::Colon,
  186|  3.61k|                                    source.substring_view(
  187|  3.61k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  3.61k|                                                    token_begin),
  189|  3.61k|                                            1u),
  190|  3.61k|                                    current_line_number, current_column);
  191|  3.61k|                        }
  192|  70.4k|                        break;
  193|  31.5k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 31.5k, False: 669k]
  ------------------
  194|  55.8k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 24.2k, False: 676k]
  ------------------
  195|  58.7k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 2.92k, False: 698k]
  ------------------
  196|  58.7k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 51.1k, False: 7.63k]
  ------------------
  197|  51.1k|                        {
  198|  51.1k|                            tokens.emplace_back(ParseToken(
  199|  51.1k|                                    source.substring_view(
  200|  51.1k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  51.1k|                                                    token_begin),
  202|  51.1k|                                            current_token.length()),
  203|  51.1k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  51.1k|                            current_token = phi::string_view{};
  206|  51.1k|                        }
  207|       |
  208|  58.7k|                        Token::Type type;
  209|  58.7k|                        switch (c)
  210|  58.7k|                        {
  211|  31.5k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 31.5k, False: 27.2k]
  ------------------
  212|  31.5k|                                type = Token::Type::Comma;
  213|  31.5k|                                break;
  214|  24.2k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 24.2k, False: 34.4k]
  ------------------
  215|  24.2k|                                type = Token::Type::OpenBracket;
  216|  24.2k|                                break;
  217|  2.92k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 2.92k, False: 55.8k]
  ------------------
  218|  2.92k|                                type = Token::Type::ClosingBracket;
  219|  2.92k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 58.7k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  58.7k|#endif
  225|  58.7k|                        }
  226|       |
  227|  58.7k|                        token_begin = i;
  228|       |
  229|  58.7k|                        tokens.emplace_back(
  230|  58.7k|                                type,
  231|  58.7k|                                source.substring_view(
  232|  58.7k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  58.7k|                                        1u),
  234|  58.7k|                                current_line_number, current_column);
  235|  58.7k|                        break;
  236|       |
  237|   550k|                    default:
  ------------------
  |  Branch (237:21): [True: 550k, False: 151k]
  ------------------
  238|   550k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 165k, False: 384k]
  ------------------
  239|   165k|                        {
  240|   165k|                            token_begin = i;
  241|   165k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   550k|                        current_token = source.substring_view(
  245|   550k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   550k|                                current_token.length() + 1u);
  247|   701k|                }
  248|   701k|            }
  249|       |
  250|   725k|            current_column += 1u;
  251|   725k|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  4.51k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 3.26k, False: 1.25k]
  ------------------
  255|  3.26k|        {
  256|  3.26k|            tokens.emplace_back(
  257|  3.26k|                    ParseToken(source.substring_view(
  258|  3.26k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  3.26k|                                       current_token.length()),
  260|  3.26k|                               current_line_number, current_column - current_token.length()));
  261|  3.26k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  4.51k|        tokens.finalize();
  265|       |
  266|  4.51k|        return tokens;
  267|  4.51k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   166k|    {
   14|   166k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 1.79k, False: 165k]
  |  Branch (14:13): [True: 1.07k, False: 165k]
  |  Branch (14:36): [True: 1.07k, False: 727]
  ------------------
   15|  1.07k|        {
   16|  1.07k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  1.07k|            if (number)
  ------------------
  |  Branch (18:17): [True: 531, False: 539]
  ------------------
   19|    531|            {
   20|    531|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|    531|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|    531|            }
   23|       |
   24|    539|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  1.07k|        }
   26|       |
   27|   165k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 536, False: 165k]
  |  Branch (27:13): [True: 1.36k, False: 164k]
  |  Branch (27:36): [True: 826, False: 164k]
  ------------------
   28|  1.36k|        {
   29|  1.36k|            return {Token::Type::Comment, token, line_number, column};
   30|  1.36k|        }
   31|       |
   32|   164k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 4.15k, False: 160k]
  ------------------
   33|  4.15k|        {
   34|  4.15k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  4.15k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  4.15k|        }
   37|       |
   38|   160k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 692, False: 159k]
  ------------------
   39|    692|        {
   40|    692|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|    692|        }
   42|       |
   43|   159k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 2.65k, False: 156k]
  ------------------
   44|  2.65k|        {
   45|  2.65k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  2.65k|                    static_cast<phi::uint32_t>(id)};
   47|  2.65k|        }
   48|       |
   49|   156k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 5.72k, False: 151k]
  ------------------
   50|  5.72k|        {
   51|  5.72k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  5.72k|                    static_cast<phi::uint32_t>(id)};
   53|  5.72k|        }
   54|       |
   55|   151k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 54.5k, False: 96.6k]
  ------------------
   56|  54.5k|        {
   57|  54.5k|            return {Token::Type::OpCode, token, line_number, column,
   58|  54.5k|                    static_cast<phi::uint32_t>(opcode)};
   59|  54.5k|        }
   60|       |
   61|  96.6k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|   151k|    }

LLVMFuzzerTestOneInput:
    8|  4.51k|{
    9|  4.51k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   10|       |
   11|       |    // Parse it
   12|  4.51k|    dlx::Parser::Parse(source);
   13|       |
   14|  4.51k|    return 0;
   15|  4.51k|}


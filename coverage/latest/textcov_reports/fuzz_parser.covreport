_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  75.6k|        {
  173|  75.6k|            PHI_ASSERT(index < 3u);
  174|       |
  175|  75.6k|            switch (index.unsafe())
  176|  75.6k|            {
  177|  33.5k|                case 0:
  ------------------
  |  Branch (177:17): [True: 33.5k, False: 42.1k]
  ------------------
  178|  33.5k|                    return m_Arg1Type;
  179|       |
  180|  21.3k|                case 1:
  ------------------
  |  Branch (180:17): [True: 21.3k, False: 54.2k]
  ------------------
  181|  21.3k|                    return m_Arg2Type;
  182|       |
  183|  20.7k|                case 2:
  ------------------
  |  Branch (183:17): [True: 20.7k, False: 54.8k]
  ------------------
  184|  20.7k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 75.6k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  75.6k|#endif
  191|  75.6k|            }
  192|  75.6k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  19.4k|        {
  199|  19.4k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  19.4k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 18.8k, False: 593]
  ------------------
  203|  18.8k|            {
  204|  18.8k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  18.8k|            }
  206|  19.4k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 11.5k, False: 7.86k]
  ------------------
  207|  11.5k|            {
  208|  11.5k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  11.5k|            }
  210|  19.4k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 6.33k, False: 13.1k]
  ------------------
  211|  6.33k|            {
  212|  6.33k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  213|  6.33k|            }
  214|       |
  215|  19.4k|            return number_of_argument_required;
  216|  19.4k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  19.4k|        {
  225|  19.4k|            return m_Executor;
  226|  19.4k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  12.9k|    {
   38|  12.9k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  12.9k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  12.9k|                                         static_cast<underlying_t>(rhs));
   42|  12.9k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  12.9k|    {
   55|  12.9k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  12.9k|        return static_cast<underlying_t>(type & test) != 0;
   58|  12.9k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  67.3k|    {
   31|  67.3k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 725, False: 66.5k]
  ------------------
   32|    725|        {
   33|    725|            return true;
   34|    725|        }
   35|       |
   36|  66.5k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 600, False: 65.9k]
  ------------------
   37|    600|        {
   38|    600|            return true;
   39|    600|        }
   40|       |
   41|  65.9k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 28.4k, False: 37.5k]
  ------------------
   42|  28.4k|        {
   43|  28.4k|            return true;
   44|  28.4k|        }
   45|       |
   46|  37.5k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 200, False: 37.3k]
  ------------------
   47|    200|        {
   48|    200|            return true;
   49|    200|        }
   50|       |
   51|  37.3k|        return false;
   52|  37.5k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  37.3k|    {
   56|  37.3k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 37.3k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  37.3k|        const char first_char = token.at(0u);
   62|       |
   63|  37.3k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 6.58k, False: 30.7k]
  ------------------
   64|  6.58k|        {
   65|  6.58k|            return phi::is_alpha(first_char);
   66|  6.58k|        }
   67|       |
   68|  30.7k|        phi::boolean just_under_scores = (first_char == '_');
   69|  30.7k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 2.43k, False: 28.3k]
  |  Branch (69:13): [True: 1.84k, False: 28.9k]
  |  Branch (69:43): [True: 1.84k, False: 587]
  ------------------
   70|  1.84k|        {
   71|  1.84k|            return false;
   72|  1.84k|        }
   73|       |
   74|   106k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 90.3k, False: 16.0k]
  ------------------
   75|  90.3k|        {
   76|  90.3k|            const char c{token.at(index)};
   77|       |
   78|  90.3k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 76.7k, False: 13.5k]
  ------------------
   79|  76.7k|            {
   80|  76.7k|                just_under_scores = false;
   81|  76.7k|            }
   82|  13.5k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 673, False: 12.8k]
  ------------------
   83|    673|            {
   84|    673|                continue;
   85|    673|            }
   86|  12.8k|            else
   87|  12.8k|            {
   88|  12.8k|                return false;
   89|  12.8k|            }
   90|  90.3k|        }
   91|       |
   92|  16.0k|        return !just_under_scores;
   93|  28.9k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|   161k|    {
  100|   161k|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 161k]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|   161k|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 19.5k, False: 141k]
  ------------------
  106|  19.5k|        {
  107|  19.5k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 2.43k, False: 17.1k]
  ------------------
  108|  2.43k|            {
  109|  2.43k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  2.43k|            }
  111|       |
  112|  17.1k|            return {};
  113|  19.5k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|   141k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 810, False: 141k]
  ------------------
  117|    810|        {
  118|    810|            return {};
  119|    810|        }
  120|       |
  121|   141k|        std::int32_t number{0};
  122|   141k|        phi::boolean is_negative{false};
  123|   141k|        phi::boolean starts_with_zero{false};
  124|   141k|        phi::boolean parsing_binary{false};
  125|   141k|        phi::boolean parsing_octal{false};
  126|   141k|        phi::boolean parsing_hexadecimal{false};
  127|   141k|        phi::boolean parsed_something{false};
  128|   141k|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|   156k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 153k, False: 2.55k]
  ------------------
  133|   153k|        {
  134|   153k|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|   153k|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 141k, False: 12.5k]
  ------------------
  138|   141k|            {
  139|   141k|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 227, False: 140k]
  ------------------
  140|    227|                {
  141|    227|                    continue;
  142|    227|                }
  143|       |
  144|   140k|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 1.00k, False: 139k]
  ------------------
  145|  1.00k|                {
  146|  1.00k|                    is_negative = true;
  147|  1.00k|                    continue;
  148|  1.00k|                }
  149|       |
  150|   139k|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 2.31k, False: 137k]
  ------------------
  151|  2.31k|                {
  152|  2.31k|                    starts_with_zero = true;
  153|  2.31k|                    continue;
  154|  2.31k|                }
  155|       |
  156|   137k|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 209, False: 137k]
  ------------------
  157|    209|                {
  158|    209|                    return {};
  159|    209|                }
  160|   137k|            }
  161|       |
  162|       |            // Second character
  163|   149k|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 5.37k, False: 144k]
  ------------------
  164|  5.37k|            {
  165|  5.37k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 2.31k, False: 3.06k]
  ------------------
  166|  2.31k|                {
  167|       |                    // Binary
  168|  2.31k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 243, False: 2.06k]
  |  Branch (168:37): [True: 194, False: 1.87k]
  ------------------
  169|    437|                    {
  170|    437|                        parsing_binary = true;
  171|    437|                        continue;
  172|    437|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  1.87k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 625, False: 1.25k]
  |  Branch (175:37): [True: 199, False: 1.05k]
  ------------------
  176|    824|                    {
  177|    824|                        parsing_hexadecimal = true;
  178|    824|                        continue;
  179|    824|                    }
  180|       |
  181|       |                    // Octal
  182|  1.05k|                    parsing_octal = true;
  183|  1.05k|                }
  184|  5.37k|            }
  185|       |
  186|       |            // Handle seperators
  187|   148k|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 709, False: 147k]
  ------------------
  188|    709|            {
  189|    709|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 322, False: 387]
  ------------------
  190|    322|                {
  191|    322|                    return {};
  192|    322|                }
  193|       |
  194|    387|                parsed_separator = true;
  195|    387|                continue;
  196|    709|            }
  197|       |
  198|       |            // Check for over/underflow
  199|   147k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 3.70k, False: 144k]
  |  Branch (199:32): [True: 323, False: 3.38k]
  ------------------
  200|    323|            {
  201|       |                // Would underflow
  202|    323|                return {};
  203|    323|            }
  204|   147k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 144k, False: 3.38k]
  |  Branch (204:17): [True: 227, False: 147k]
  |  Branch (204:33): [True: 227, False: 143k]
  ------------------
  205|    227|            {
  206|       |                // Would overflow
  207|    227|                return {};
  208|    227|            }
  209|       |
  210|   147k|            parsed_separator = false;
  211|   147k|            parsed_something = true;
  212|       |
  213|   147k|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 649, False: 146k]
  ------------------
  214|    649|            {
  215|    649|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 217, False: 432]
  ------------------
  216|    217|                {
  217|    217|                    return {};
  218|    217|                }
  219|       |
  220|    432|                number <<= 1;
  221|    432|                number |= (c - '0');
  222|    432|            }
  223|   146k|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 1.23k, False: 145k]
  ------------------
  224|  1.23k|            {
  225|  1.23k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 576, False: 660]
  ------------------
  226|    576|                {
  227|    576|                    return {};
  228|    576|                }
  229|       |
  230|    660|                number <<= 3;
  231|    660|                number |= (c - '0');
  232|    660|            }
  233|   145k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 1.19k, False: 144k]
  ------------------
  234|  1.19k|            {
  235|  1.19k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 529, False: 669]
  ------------------
  236|    529|                {
  237|    529|                    return {};
  238|    529|                }
  239|       |
  240|    669|                number <<= 4;
  241|    669|                number |= phi::hex_digit_value(c).unsafe();
  242|    669|            }
  243|   144k|            else
  244|   144k|            {
  245|   144k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 135k, False: 8.35k]
  ------------------
  246|   135k|                {
  247|   135k|                    return {};
  248|   135k|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|  8.35k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 2.78k, False: 5.57k]
  |  Branch (251:36): [True: 206, False: 2.57k]
  ------------------
  252|    206|                {
  253|    206|                    return {};
  254|    206|                }
  255|       |
  256|  8.15k|                number *= 10;
  257|  8.15k|                number += (c - '0');
  258|  8.15k|            }
  259|   147k|        }
  260|       |
  261|  2.55k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 2.29k, False: 262]
  ------------------
  262|  2.29k|        {
  263|       |            // Check for over/underflow
  264|  2.29k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 411, False: 1.88k]
  |  Branch (264:32): [True: 211, False: 200]
  ------------------
  265|    211|            {
  266|       |                // Would underflow
  267|    211|                return {};
  268|    211|            }
  269|  2.08k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 1.88k, False: 200]
  |  Branch (269:17): [True: 217, False: 1.86k]
  |  Branch (269:33): [True: 217, False: 1.66k]
  ------------------
  270|    217|            {
  271|       |                // Would overflow
  272|    217|                return {};
  273|    217|            }
  274|       |
  275|  1.86k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 200, False: 1.66k]
  ------------------
  276|    200|            {
  277|    200|                return static_cast<std::int16_t>(-number);
  278|    200|            }
  279|       |
  280|  1.66k|            return static_cast<std::int16_t>(number);
  281|  1.86k|        }
  282|       |
  283|    262|        return {};
  284|  2.55k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  10.0k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  10.0k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 59.7k, False: 0]
  ------------------
   64|  59.7k|            {
   65|  59.7k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 10.0k, False: 49.7k]
  ------------------
   66|  10.0k|                {
   67|  10.0k|                    return &token;
   68|  10.0k|                }
   69|  59.7k|            }
   70|       |
   71|      0|            return nullptr;
   72|  10.0k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  34.8k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  34.8k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  34.8k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   162k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   162k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   162k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  59.6k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  59.6k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  59.6k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  19.4k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  6.09k|    {
   25|  6.09k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  6.09k|        switch (argument_number.unsafe())
   28|  6.09k|        {
   29|  3.58k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 3.58k, False: 2.51k]
  ------------------
   30|  3.58k|                m_Arg1 = argument;
   31|  3.58k|                break;
   32|  1.30k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 1.30k, False: 4.79k]
  ------------------
   33|  1.30k|                m_Arg2 = argument;
   34|  1.30k|                break;
   35|  1.20k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 1.20k, False: 4.89k]
  ------------------
   36|  1.20k|                m_Arg3 = argument;
   37|  1.20k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 6.09k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  6.09k|#endif
   42|  6.09k|        }
   43|  6.09k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  64.4k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  172|    267|    {
  173|    267|        InstructionArgument arg;
  174|    267|        arg.m_Type                   = ArgumentType::IntRegister;
  175|    267|        arg.register_int.register_id = id;
  176|    267|        return arg;
  177|    267|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  180|  3.55k|    {
  181|  3.55k|        InstructionArgument arg;
  182|  3.55k|        arg.m_Type                     = ArgumentType::FloatRegister;
  183|  3.55k|        arg.register_float.register_id = id;
  184|  3.55k|        return arg;
  185|  3.55k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  188|    207|    {
  189|    207|        InstructionArgument arg;
  190|    207|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  191|    207|        arg.immediate_value.signed_value = value;
  192|    207|        return arg;
  193|    207|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  197|    450|    {
  198|    450|        InstructionArgument arg;
  199|    450|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  200|    450|        arg.address_displacement.register_id  = id;
  201|    450|        arg.address_displacement.displacement = displacement;
  202|    450|        return arg;
  203|    450|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  206|  1.61k|    {
  207|  1.61k|        InstructionArgument arg;
  208|  1.61k|        arg.m_Type           = ArgumentType::Label;
  209|  1.61k|        arg.label.label_name = label_name;
  210|  1.61k|        return arg;
  211|  1.61k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  19.4k|    {
  453|  19.4k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  19.4k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|   214k|    {
   24|   214k|        switch (token.length().unsafe())
   25|   214k|        {
   26|       |            // 1 character OpCodes
   27|  23.7k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 23.7k, False: 191k]
  ------------------
   28|  23.7k|                const char c1 = token[0u];
   29|       |
   30|  23.7k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 7.88k, False: 15.9k]
  ------------------
   31|  7.88k|                {
   32|  7.88k|                    return OpCode::J;
   33|  7.88k|                }
   34|  15.9k|                break;
   35|  23.7k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|  27.4k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 27.4k, False: 187k]
  ------------------
   39|  27.4k|                const char c1 = token[0u];
   40|  27.4k|                const char c2 = token[1u];
   41|       |
   42|  27.4k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 14.4k, False: 13.0k]
  ------------------
   43|  27.4k|                {
   44|  1.02k|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 1.02k, False: 26.4k]
  ------------------
   45|  1.33k|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 310, False: 27.1k]
  ------------------
   46|  1.33k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 517, False: 817]
  ------------------
   47|    517|                        {
   48|    517|                            return OpCode::JR;
   49|    517|                        }
   50|    817|                        break;
   51|       |
   52|  1.79k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 1.79k, False: 25.6k]
  ------------------
   53|  3.32k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 1.52k, False: 25.9k]
  ------------------
   54|  3.32k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 752, False: 2.57k]
  ------------------
   55|  3.32k|                        {
   56|    370|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 370, False: 2.95k]
  ------------------
   57|    828|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 458, False: 2.86k]
  ------------------
   58|    828|                                return OpCode::LB;
   59|    213|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 213, False: 3.11k]
  ------------------
   60|    407|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 194, False: 3.12k]
  ------------------
   61|    407|                                return OpCode::LD;
   62|    194|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 194, False: 3.12k]
  ------------------
   63|    388|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 194, False: 3.12k]
  ------------------
   64|    388|                                return OpCode::LF;
   65|    196|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 196, False: 3.12k]
  ------------------
   66|    549|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 353, False: 2.97k]
  ------------------
   67|    549|                                return OpCode::LH;
   68|    200|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 200, False: 3.12k]
  ------------------
   69|    399|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 199, False: 3.12k]
  ------------------
   70|    399|                                return OpCode::LW;
   71|  3.32k|                        }
   72|    752|                        break;
   73|    752|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 392, False: 27.0k]
  ------------------
   74|  1.14k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 754, False: 26.7k]
  ------------------
   75|  1.14k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 521, False: 625]
  ------------------
   76|    521|                        {
   77|    521|                            return OpCode::OR;
   78|    521|                        }
   79|    625|                        break;
   80|  5.33k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 5.33k, False: 22.1k]
  ------------------
   81|  7.24k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 1.91k, False: 25.5k]
  ------------------
   82|  7.24k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 1.69k, False: 5.55k]
  ------------------
   83|  7.24k|                        {
   84|    314|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 314, False: 6.93k]
  ------------------
   85|    509|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 195, False: 7.05k]
  ------------------
   86|    509|                                return OpCode::SB;
   87|  2.06k|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 2.06k, False: 5.18k]
  ------------------
   88|  2.26k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 209, False: 7.03k]
  ------------------
   89|  2.26k|                                return OpCode::SD;
   90|    325|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 325, False: 6.92k]
  ------------------
   91|    519|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 194, False: 7.05k]
  ------------------
   92|    519|                                return OpCode::SF;
   93|    709|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 709, False: 6.53k]
  ------------------
   94|  1.18k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 471, False: 6.77k]
  ------------------
   95|  1.18k|                                return OpCode::SH;
   96|    325|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 325, False: 6.92k]
  ------------------
   97|  1.07k|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 751, False: 6.49k]
  ------------------
   98|  1.07k|                                return OpCode::SW;
   99|  7.24k|                        }
  100|  1.69k|                        break;
  101|  27.4k|                }
  102|  18.3k|                break;
  103|  27.4k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|  46.1k|            case 3: {
  ------------------
  |  Branch (106:13): [True: 46.1k, False: 168k]
  ------------------
  107|  46.1k|                const char c1 = token[0u];
  108|  46.1k|                const char c2 = token[1u];
  109|  46.1k|                const char c3 = token[2u];
  110|       |
  111|  46.1k|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 9.63k, False: 36.5k]
  ------------------
  112|  46.1k|                {
  113|  3.18k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 3.18k, False: 42.9k]
  ------------------
  114|  3.87k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 688, False: 45.4k]
  ------------------
  115|  3.87k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 769, False: 3.10k]
  |  Branch (115:29): [True: 411, False: 3.46k]
  |  Branch (115:45): [True: 411, False: 358]
  ------------------
  116|    411|                        {
  117|    411|                            return OpCode::ADD;
  118|    411|                        }
  119|  3.46k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 2.03k, False: 1.43k]
  |  Branch (119:34): [True: 654, False: 2.81k]
  |  Branch (119:50): [True: 654, False: 1.37k]
  ------------------
  120|    654|                        {
  121|    654|                            return OpCode::AND;
  122|    654|                        }
  123|  2.81k|                        break;
  124|       |
  125|  2.81k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 483, False: 45.6k]
  ------------------
  126|  1.79k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 1.30k, False: 44.8k]
  ------------------
  127|  1.79k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 1.20k, False: 582]
  |  Branch (127:29): [True: 835, False: 955]
  |  Branch (127:45): [True: 835, False: 373]
  ------------------
  128|    835|                        {
  129|    835|                            return OpCode::DIV;
  130|    835|                        }
  131|    955|                        break;
  132|       |
  133|    955|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 357, False: 45.8k]
  ------------------
  134|  1.99k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 1.63k, False: 44.5k]
  ------------------
  135|  1.99k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 1.75k, False: 239]
  ------------------
  136|  1.75k|                        {
  137|  1.75k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 900, False: 857]
  ------------------
  138|    900|                            {
  139|    900|                                return OpCode::EQD;
  140|    900|                            }
  141|    857|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 516, False: 341]
  ------------------
  142|    516|                            {
  143|    516|                                return OpCode::EQF;
  144|    516|                            }
  145|  1.75k|                        }
  146|    580|                        break;
  147|       |
  148|  2.73k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 2.73k, False: 43.4k]
  ------------------
  149|  3.42k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 690, False: 45.4k]
  ------------------
  150|  3.42k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 1.23k, False: 2.18k]
  ------------------
  151|  1.23k|                        {
  152|  1.23k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 644, False: 591]
  ------------------
  153|    644|                            {
  154|    644|                                return OpCode::GED;
  155|    644|                            }
  156|    591|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 388, False: 203]
  ------------------
  157|    388|                            {
  158|    388|                                return OpCode::GEF;
  159|    388|                            }
  160|  1.23k|                        }
  161|  2.18k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 1.24k, False: 946]
  ------------------
  162|  1.24k|                        {
  163|  1.24k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 388, False: 855]
  ------------------
  164|    388|                            {
  165|    388|                                return OpCode::GTD;
  166|    388|                            }
  167|    855|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 516, False: 339]
  ------------------
  168|    516|                            {
  169|    516|                                return OpCode::GTF;
  170|    516|                            }
  171|    855|                        }
  172|  1.48k|                        break;
  173|       |
  174|  1.48k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 222, False: 45.9k]
  ------------------
  175|  1.22k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 1.00k, False: 45.1k]
  ------------------
  176|  1.22k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 982, False: 240]
  |  Branch (176:29): [True: 773, False: 449]
  |  Branch (176:45): [True: 773, False: 209]
  ------------------
  177|    773|                        {
  178|    773|                            return OpCode::JAL;
  179|    773|                        }
  180|    449|                        break;
  181|       |
  182|  2.32k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 2.32k, False: 43.8k]
  ------------------
  183|  6.40k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 4.07k, False: 42.0k]
  ------------------
  184|  6.40k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 297, False: 6.10k]
  ------------------
  185|  6.40k|                        {
  186|    548|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 548, False: 5.85k]
  ------------------
  187|    928|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 380, False: 6.02k]
  ------------------
  188|    928|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 516, False: 412]
  ------------------
  189|    516|                                {
  190|    516|                                    return OpCode::LBU;
  191|    516|                                }
  192|    412|                                break;
  193|       |
  194|    869|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 869, False: 5.53k]
  ------------------
  195|  1.41k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 544, False: 5.85k]
  ------------------
  196|  1.41k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 388, False: 1.02k]
  ------------------
  197|    388|                                {
  198|    388|                                    return OpCode::LED;
  199|    388|                                }
  200|  1.02k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 644, False: 381]
  ------------------
  201|    644|                                {
  202|    644|                                    return OpCode::LEF;
  203|    644|                                }
  204|    381|                                break;
  205|       |
  206|    381|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 235, False: 6.16k]
  ------------------
  207|  1.39k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 1.15k, False: 5.24k]
  ------------------
  208|  1.39k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 644, False: 749]
  ------------------
  209|    644|                                {
  210|    644|                                    return OpCode::LHI;
  211|    644|                                }
  212|    749|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 388, False: 361]
  ------------------
  213|    388|                                {
  214|    388|                                    return OpCode::LHU;
  215|    388|                                }
  216|    361|                                break;
  217|       |
  218|    598|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 598, False: 5.80k]
  ------------------
  219|  1.11k|                            case 't':
  ------------------
  |  Branch (219:29): [True: 515, False: 5.88k]
  ------------------
  220|  1.11k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 516, False: 597]
  ------------------
  221|    516|                                {
  222|    516|                                    return OpCode::LTD;
  223|    516|                                }
  224|    597|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 389, False: 208]
  ------------------
  225|    389|                                {
  226|    389|                                    return OpCode::LTF;
  227|    389|                                }
  228|    208|                                break;
  229|       |
  230|    282|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 282, False: 6.12k]
  ------------------
  231|  1.25k|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 977, False: 5.42k]
  ------------------
  232|  1.25k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 900, False: 359]
  ------------------
  233|    900|                                {
  234|    900|                                    return OpCode::LWU;
  235|    900|                                }
  236|    359|                                break;
  237|  6.40k|                        }
  238|  2.01k|                        break;
  239|       |
  240|  2.01k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 885, False: 45.2k]
  ------------------
  241|  2.41k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 1.53k, False: 44.6k]
  ------------------
  242|  2.41k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 1.13k, False: 1.27k]
  ------------------
  243|  1.13k|                        {
  244|  1.13k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 391, False: 746]
  ------------------
  245|    391|                            {
  246|    391|                                return OpCode::NED;
  247|    391|                            }
  248|    746|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 516, False: 230]
  ------------------
  249|    516|                            {
  250|    516|                                return OpCode::NEF;
  251|    516|                            }
  252|  1.13k|                        }
  253|  1.27k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 974, False: 304]
  |  Branch (253:34): [True: 773, False: 505]
  |  Branch (253:50): [True: 773, False: 201]
  ------------------
  254|    773|                        {
  255|    773|                            return OpCode::NOP;
  256|    773|                        }
  257|       |
  258|    735|                        break;
  259|       |
  260|    735|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 361, False: 45.8k]
  ------------------
  261|    996|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 635, False: 45.5k]
  ------------------
  262|    996|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 603, False: 393]
  |  Branch (262:29): [True: 388, False: 608]
  |  Branch (262:45): [True: 388, False: 215]
  ------------------
  263|    388|                        {
  264|    388|                            return OpCode::ORI;
  265|    388|                        }
  266|    608|                        break;
  267|       |
  268|  6.08k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 6.08k, False: 40.0k]
  ------------------
  269|  12.6k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 6.60k, False: 39.5k]
  ------------------
  270|  12.6k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 890, False: 11.7k]
  ------------------
  271|  12.6k|                        {
  272|    470|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 470, False: 12.2k]
  ------------------
  273|    842|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 372, False: 12.3k]
  ------------------
  274|    842|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 516, False: 326]
  ------------------
  275|    516|                                {
  276|    516|                                    return OpCode::SBU;
  277|    516|                                }
  278|    326|                                break;
  279|       |
  280|    512|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 512, False: 12.1k]
  ------------------
  281|  1.01k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 504, False: 12.1k]
  ------------------
  282|  1.01k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 518, False: 498]
  ------------------
  283|    518|                                {
  284|    518|                                    return OpCode::SEQ;
  285|    518|                                }
  286|    498|                                break;
  287|       |
  288|    883|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 883, False: 11.8k]
  ------------------
  289|  1.63k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 753, False: 11.9k]
  ------------------
  290|  1.63k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 561, False: 1.07k]
  ------------------
  291|    561|                                {
  292|    561|                                    return OpCode::SGE;
  293|    561|                                }
  294|  1.07k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 511, False: 564]
  ------------------
  295|    511|                                {
  296|    511|                                    return OpCode::SGT;
  297|    511|                                }
  298|    564|                                break;
  299|       |
  300|    564|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 273, False: 12.4k]
  ------------------
  301|    717|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 444, False: 12.2k]
  ------------------
  302|    717|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 516, False: 201]
  ------------------
  303|    516|                                {
  304|    516|                                    return OpCode::SHU;
  305|    516|                                }
  306|    201|                                break;
  307|       |
  308|    814|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 814, False: 11.8k]
  ------------------
  309|  2.42k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 1.60k, False: 11.0k]
  ------------------
  310|  2.42k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 245, False: 2.17k]
  ------------------
  311|  2.42k|                                {
  312|    331|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 331, False: 2.08k]
  ------------------
  313|    659|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 328, False: 2.09k]
  ------------------
  314|    659|                                        return OpCode::SLA;
  315|       |
  316|    196|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 196, False: 2.22k]
  ------------------
  317|    530|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 334, False: 2.08k]
  ------------------
  318|    530|                                        return OpCode::SLE;
  319|       |
  320|    201|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 201, False: 2.21k]
  ------------------
  321|    457|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 256, False: 2.16k]
  ------------------
  322|    457|                                        return OpCode::SLL;
  323|       |
  324|    334|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 334, False: 2.08k]
  ------------------
  325|    529|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 195, False: 2.22k]
  ------------------
  326|    529|                                        return OpCode::SLT;
  327|  2.42k|                                }
  328|    245|                                break;
  329|       |
  330|    683|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 683, False: 12.0k]
  ------------------
  331|  1.76k|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 1.08k, False: 11.6k]
  ------------------
  332|  1.76k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 1.03k, False: 734]
  ------------------
  333|  1.03k|                                {
  334|  1.03k|                                    return OpCode::SNE;
  335|  1.03k|                                }
  336|    734|                                break;
  337|       |
  338|    914|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 914, False: 11.7k]
  ------------------
  339|  1.46k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 546, False: 12.1k]
  ------------------
  340|  1.46k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 697, False: 763]
  ------------------
  341|    697|                                {
  342|    697|                                    return OpCode::SRA;
  343|    697|                                }
  344|    763|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 545, False: 218]
  ------------------
  345|    545|                                {
  346|    545|                                    return OpCode::SRL;
  347|    545|                                }
  348|    218|                                break;
  349|       |
  350|    399|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 399, False: 12.2k]
  ------------------
  351|    779|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 380, False: 12.3k]
  ------------------
  352|    779|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 523, False: 256]
  ------------------
  353|    523|                                {
  354|    523|                                    return OpCode::SUB;
  355|    523|                                }
  356|    256|                                break;
  357|       |
  358|    256|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 195, False: 12.4k]
  ------------------
  359|  1.16k|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 969, False: 11.7k]
  ------------------
  360|  1.16k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 644, False: 520]
  ------------------
  361|    644|                                {
  362|    644|                                    return OpCode::SWU;
  363|    644|                                }
  364|    520|                                break;
  365|  12.6k|                        }
  366|       |
  367|  5.75k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 1.30k, False: 44.8k]
  ------------------
  368|  6.17k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 422, False: 45.7k]
  ------------------
  369|  6.17k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 1.61k, False: 4.55k]
  |  Branch (369:29): [True: 1.22k, False: 4.94k]
  |  Branch (369:45): [True: 1.22k, False: 392]
  ------------------
  370|  1.22k|                        {
  371|  1.22k|                            return OpCode::XOR;
  372|  1.22k|                        }
  373|  4.94k|                        break;
  374|  46.1k|                }
  375|  24.2k|                break;
  376|  46.1k|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  56.7k|            case 4: {
  ------------------
  |  Branch (379:13): [True: 56.7k, False: 158k]
  ------------------
  380|  56.7k|                const char c1 = token[0u];
  381|  56.7k|                const char c2 = token[1u];
  382|  56.7k|                const char c3 = token[2u];
  383|  56.7k|                const char c4 = token[3u];
  384|       |
  385|  56.7k|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 8.31k, False: 48.4k]
  ------------------
  386|  56.7k|                {
  387|  4.96k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 4.96k, False: 51.7k]
  ------------------
  388|  7.85k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 2.89k, False: 53.8k]
  ------------------
  389|  7.85k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 632, False: 7.22k]
  ------------------
  390|  7.85k|                        {
  391|  2.17k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 2.17k, False: 5.68k]
  ------------------
  392|  4.79k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 2.62k, False: 5.22k]
  ------------------
  393|  4.79k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 4.51k, False: 282]
  ------------------
  394|  4.51k|                                {
  395|  4.51k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 463, False: 4.05k]
  ------------------
  396|  4.51k|                                    {
  397|  1.39k|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 1.39k, False: 3.12k]
  ------------------
  398|  1.85k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 463, False: 4.05k]
  ------------------
  399|  1.85k|                                            return OpCode::ADDD;
  400|       |
  401|    194|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 194, False: 4.32k]
  ------------------
  402|    775|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 581, False: 3.93k]
  ------------------
  403|    775|                                            return OpCode::ADDF;
  404|       |
  405|    450|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 450, False: 4.06k]
  ------------------
  406|    772|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 322, False: 4.19k]
  ------------------
  407|    772|                                            return OpCode::ADDI;
  408|       |
  409|    455|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 455, False: 4.06k]
  ------------------
  410|    651|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 196, False: 4.32k]
  ------------------
  411|    651|                                            return OpCode::ADDU;
  412|  4.51k|                                    }
  413|  4.51k|                                }
  414|    745|                                break;
  415|       |
  416|  1.23k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 1.23k, False: 6.62k]
  ------------------
  417|  2.42k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 1.19k, False: 6.66k]
  ------------------
  418|  2.42k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 1.04k, False: 1.38k]
  |  Branch (418:37): [True: 389, False: 2.03k]
  |  Branch (418:53): [True: 389, False: 656]
  ------------------
  419|    389|                                {
  420|    389|                                    return OpCode::ANDI;
  421|    389|                                }
  422|       |
  423|  2.03k|                                break;
  424|  7.85k|                        }
  425|  3.41k|                        break;
  426|       |
  427|  3.41k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 1.57k, False: 55.1k]
  ------------------
  428|  5.10k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 3.53k, False: 53.2k]
  ------------------
  429|  5.10k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 231, False: 4.87k]
  ------------------
  430|  5.10k|                        {
  431|    529|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 529, False: 4.57k]
  ------------------
  432|  1.04k|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 520, False: 4.58k]
  ------------------
  433|  1.04k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 727, False: 322]
  |  Branch (433:37): [True: 516, False: 533]
  |  Branch (433:53): [True: 516, False: 211]
  ------------------
  434|    516|                                {
  435|    516|                                    return OpCode::BEQZ;
  436|    516|                                }
  437|    533|                                break;
  438|       |
  439|    533|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 262, False: 4.84k]
  ------------------
  440|  1.42k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 1.16k, False: 3.93k]
  ------------------
  441|  1.42k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 1.23k, False: 194]
  ------------------
  442|  1.23k|                                {
  443|  1.23k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 389, False: 846]
  ------------------
  444|    389|                                    {
  445|    389|                                        return OpCode::BFPF;
  446|    389|                                    }
  447|    846|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 516, False: 330]
  ------------------
  448|    516|                                    {
  449|    516|                                        return OpCode::BFPT;
  450|    516|                                    }
  451|  1.23k|                                }
  452|    524|                                break;
  453|       |
  454|    524|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 327, False: 4.77k]
  ------------------
  455|  2.39k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 2.07k, False: 3.03k]
  ------------------
  456|  2.39k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 2.10k, False: 290]
  |  Branch (456:37): [True: 1.54k, False: 857]
  |  Branch (456:53): [True: 1.54k, False: 567]
  ------------------
  457|  1.54k|                                {
  458|  1.54k|                                    return OpCode::BNEZ;
  459|  1.54k|                                }
  460|  5.10k|                        }
  461|  2.14k|                        break;
  462|       |
  463|  2.14k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 1.12k, False: 55.6k]
  ------------------
  464|  4.01k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 2.89k, False: 53.8k]
  ------------------
  465|  4.01k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 3.10k, False: 916]
  |  Branch (465:29): [True: 2.66k, False: 1.35k]
  |  Branch (465:45): [True: 2.66k, False: 438]
  ------------------
  466|  2.66k|                        {
  467|  2.66k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 210, False: 2.45k]
  ------------------
  468|  2.66k|                            {
  469|    450|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 450, False: 2.21k]
  ------------------
  470|    644|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 194, False: 2.46k]
  ------------------
  471|    644|                                    return OpCode::DIVD;
  472|       |
  473|    450|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 450, False: 2.21k]
  ------------------
  474|    645|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 195, False: 2.46k]
  ------------------
  475|    645|                                    return OpCode::DIVF;
  476|       |
  477|    322|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 322, False: 2.34k]
  ------------------
  478|    644|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 322, False: 2.34k]
  ------------------
  479|    644|                                    return OpCode::DIVI;
  480|       |
  481|    195|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 195, False: 2.46k]
  ------------------
  482|    519|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 324, False: 2.33k]
  ------------------
  483|    519|                                    return OpCode::DIVU;
  484|  2.66k|                            }
  485|  2.66k|                        }
  486|  1.56k|                        break;
  487|       |
  488|  1.56k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 220, False: 56.5k]
  ------------------
  489|  1.26k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 1.04k, False: 55.6k]
  ------------------
  490|  1.26k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 1.05k, False: 207]
  |  Branch (490:29): [True: 516, False: 748]
  |  Branch (490:45): [True: 849, False: 208]
  |  Branch (490:61): [True: 516, False: 333]
  ------------------
  491|    516|                        {
  492|    516|                            return OpCode::HALT;
  493|    516|                        }
  494|    748|                        break;
  495|       |
  496|    748|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 589, False: 56.1k]
  ------------------
  497|  2.37k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 1.78k, False: 54.9k]
  ------------------
  498|  2.37k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 1.77k, False: 601]
  |  Branch (498:29): [True: 516, False: 1.85k]
  |  Branch (498:45): [True: 1.29k, False: 478]
  |  Branch (498:61): [True: 516, False: 776]
  ------------------
  499|    516|                        {
  500|    516|                            return OpCode::JALR;
  501|    516|                        }
  502|  1.85k|                        break;
  503|       |
  504|  1.85k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 314, False: 56.4k]
  ------------------
  505|  3.09k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 2.77k, False: 53.9k]
  ------------------
  506|  3.09k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 1.69k, False: 1.39k]
  |  Branch (506:29): [True: 1.45k, False: 1.63k]
  |  Branch (506:45): [True: 1.45k, False: 240]
  ------------------
  507|  1.45k|                        {
  508|  1.45k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 516, False: 940]
  ------------------
  509|    516|                            {
  510|    516|                                return OpCode::MOVD;
  511|    516|                            }
  512|    940|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 516, False: 424]
  ------------------
  513|    516|                            {
  514|    516|                                return OpCode::MOVF;
  515|    516|                            }
  516|  1.45k|                        }
  517|  1.63k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 1.23k, False: 400]
  |  Branch (517:34): [True: 646, False: 989]
  |  Branch (517:50): [True: 1.00k, False: 231]
  |  Branch (517:66): [True: 646, False: 358]
  ------------------
  518|    646|                        {
  519|    646|                            return OpCode::MULT;
  520|    646|                        }
  521|  1.41k|                        break;
  522|       |
  523|  9.18k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 9.18k, False: 47.5k]
  ------------------
  524|  20.6k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 11.4k, False: 45.2k]
  ------------------
  525|  20.6k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 866, False: 19.8k]
  ------------------
  526|  20.6k|                        {
  527|  1.98k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 1.98k, False: 18.6k]
  ------------------
  528|  2.44k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 459, False: 20.2k]
  ------------------
  529|  2.44k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 1.99k, False: 446]
  ------------------
  530|  1.99k|                                {
  531|  1.99k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 662, False: 1.33k]
  ------------------
  532|    662|                                    {
  533|    662|                                        return OpCode::SEQI;
  534|    662|                                    }
  535|  1.33k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 535, False: 799]
  ------------------
  536|    535|                                    {
  537|    535|                                        return OpCode::SEQU;
  538|    535|                                    }
  539|  1.99k|                                }
  540|  1.24k|                                break;
  541|       |
  542|  1.41k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 1.41k, False: 19.2k]
  ------------------
  543|  4.19k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 2.78k, False: 17.8k]
  ------------------
  544|  4.19k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 1.80k, False: 2.38k]
  ------------------
  545|  1.80k|                                {
  546|  1.80k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 516, False: 1.29k]
  ------------------
  547|    516|                                    {
  548|    516|                                        return OpCode::SGEI;
  549|    516|                                    }
  550|  1.29k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 909, False: 383]
  ------------------
  551|    909|                                    {
  552|    909|                                        return OpCode::SGEU;
  553|    909|                                    }
  554|  1.80k|                                }
  555|  2.38k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 1.90k, False: 479]
  ------------------
  556|  1.90k|                                {
  557|  1.90k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 516, False: 1.38k]
  ------------------
  558|    516|                                    {
  559|    516|                                        return OpCode::SGTI;
  560|    516|                                    }
  561|  1.38k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 1.08k, False: 304]
  ------------------
  562|  1.08k|                                    {
  563|  1.08k|                                        return OpCode::SGTU;
  564|  1.08k|                                    }
  565|  1.90k|                                }
  566|  1.16k|                                break;
  567|       |
  568|  1.31k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 1.31k, False: 19.3k]
  ------------------
  569|  5.89k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 4.58k, False: 16.0k]
  ------------------
  570|  5.89k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 385, False: 5.51k]
  ------------------
  571|  5.89k|                                {
  572|    636|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 636, False: 5.26k]
  ------------------
  573|  1.19k|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 559, False: 5.33k]
  ------------------
  574|  1.19k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 900, False: 295]
  ------------------
  575|    900|                                        {
  576|    900|                                            return OpCode::SLAI;
  577|    900|                                        }
  578|    295|                                        break;
  579|       |
  580|  1.15k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 1.15k, False: 4.74k]
  ------------------
  581|  1.68k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 539, False: 5.35k]
  ------------------
  582|  1.68k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 644, False: 1.04k]
  ------------------
  583|    644|                                        {
  584|    644|                                            return OpCode::SLEI;
  585|    644|                                        }
  586|  1.04k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 775, False: 270]
  ------------------
  587|    775|                                        {
  588|    775|                                            return OpCode::SLEU;
  589|    775|                                        }
  590|    270|                                        break;
  591|       |
  592|    270|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 247, False: 5.64k]
  ------------------
  593|    600|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 353, False: 5.54k]
  ------------------
  594|    600|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 388, False: 212]
  ------------------
  595|    388|                                        {
  596|    388|                                            return OpCode::SLLI;
  597|    388|                                        }
  598|    212|                                        break;
  599|       |
  600|  1.04k|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 1.04k, False: 4.85k]
  ------------------
  601|  2.02k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 981, False: 4.91k]
  ------------------
  602|  2.02k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 644, False: 1.38k]
  ------------------
  603|    644|                                        {
  604|    644|                                            return OpCode::SLTI;
  605|    644|                                        }
  606|  1.38k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 516, False: 867]
  ------------------
  607|    516|                                        {
  608|    516|                                            return OpCode::SLTU;
  609|    516|                                        }
  610|    867|                                        break;
  611|  5.89k|                                }
  612|       |
  613|  2.39k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 369, False: 20.2k]
  ------------------
  614|  4.48k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 2.08k, False: 18.5k]
  ------------------
  615|  4.48k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 2.32k, False: 2.15k]
  ------------------
  616|  2.32k|                                {
  617|  2.32k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 516, False: 1.81k]
  ------------------
  618|    516|                                    {
  619|    516|                                        return OpCode::SNEI;
  620|    516|                                    }
  621|  1.81k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 465, False: 1.34k]
  ------------------
  622|    465|                                    {
  623|    465|                                        return OpCode::SNEU;
  624|    465|                                    }
  625|  2.32k|                                }
  626|  3.50k|                                break;
  627|       |
  628|  3.50k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 902, False: 19.7k]
  ------------------
  629|  1.81k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 917, False: 19.7k]
  ------------------
  630|  1.81k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 907, False: 912]
  |  Branch (630:37): [True: 516, False: 1.30k]
  |  Branch (630:53): [True: 516, False: 391]
  ------------------
  631|    516|                                {
  632|    516|                                    return OpCode::SRAI;
  633|    516|                                }
  634|  1.30k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 907, False: 396]
  |  Branch (634:42): [True: 516, False: 787]
  |  Branch (634:58): [True: 516, False: 391]
  ------------------
  635|    516|                                {
  636|    516|                                    return OpCode::SRLI;
  637|    516|                                }
  638|    787|                                break;
  639|       |
  640|    890|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 890, False: 19.7k]
  ------------------
  641|  2.99k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 2.10k, False: 18.5k]
  ------------------
  642|  2.99k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 2.53k, False: 466]
  ------------------
  643|  2.53k|                                {
  644|  2.53k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 205, False: 2.32k]
  ------------------
  645|  2.53k|                                    {
  646|    194|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 194, False: 2.33k]
  ------------------
  647|    644|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 450, False: 2.08k]
  ------------------
  648|    644|                                            return OpCode::SUBD;
  649|       |
  650|    450|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 450, False: 2.08k]
  ------------------
  651|    644|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 194, False: 2.33k]
  ------------------
  652|    644|                                            return OpCode::SUBF;
  653|       |
  654|    194|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 194, False: 2.33k]
  ------------------
  655|    516|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 322, False: 2.20k]
  ------------------
  656|    516|                                            return OpCode::SUBI;
  657|       |
  658|    198|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 198, False: 2.33k]
  ------------------
  659|    521|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 323, False: 2.20k]
  ------------------
  660|    521|                                            return OpCode::SUBU;
  661|  2.53k|                                    }
  662|  2.53k|                                }
  663|    671|                                break;
  664|  20.6k|                        }
  665|  8.24k|                        break;
  666|       |
  667|  8.24k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 200, False: 56.5k]
  ------------------
  668|    990|                    case 't':
  ------------------
  |  Branch (668:21): [True: 790, False: 55.9k]
  ------------------
  669|    990|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 776, False: 214]
  |  Branch (669:29): [True: 388, False: 602]
  |  Branch (669:45): [True: 582, False: 194]
  |  Branch (669:61): [True: 388, False: 194]
  ------------------
  670|    388|                        {
  671|    388|                            return OpCode::TRAP;
  672|    388|                        }
  673|    602|                        break;
  674|  1.65k|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 1.65k, False: 55.0k]
  ------------------
  675|  3.06k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 1.41k, False: 55.3k]
  ------------------
  676|  3.06k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 2.82k, False: 235]
  |  Branch (676:29): [True: 1.15k, False: 1.90k]
  |  Branch (676:45): [True: 2.42k, False: 404]
  |  Branch (676:61): [True: 1.15k, False: 1.26k]
  ------------------
  677|  1.15k|                        {
  678|  1.15k|                            return OpCode::XORI;
  679|  1.15k|                        }
  680|  1.90k|                        break;
  681|  56.7k|                }
  682|  30.1k|                break;
  683|  56.7k|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|  31.5k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 31.5k, False: 183k]
  ------------------
  687|  31.5k|                const char c1 = token[0u];
  688|  31.5k|                const char c2 = token[1u];
  689|  31.5k|                const char c3 = token[2u];
  690|  31.5k|                const char c4 = token[3u];
  691|  31.5k|                const char c5 = token[4u];
  692|       |
  693|  31.5k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 5.43k, False: 26.1k]
  ------------------
  694|  31.5k|                {
  695|  1.06k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 1.06k, False: 30.5k]
  ------------------
  696|  2.46k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 1.40k, False: 30.1k]
  ------------------
  697|  2.46k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 2.18k, False: 274]
  |  Branch (697:29): [True: 388, False: 2.07k]
  |  Branch (697:45): [True: 1.86k, False: 322]
  |  Branch (697:61): [True: 1.08k, False: 781]
  |  Branch (697:77): [True: 388, False: 697]
  ------------------
  698|    388|                        {
  699|    388|                            return OpCode::ADDUI;
  700|    388|                        }
  701|  2.07k|                        break;
  702|       |
  703|  2.07k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 327, False: 31.2k]
  ------------------
  704|  2.34k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 2.01k, False: 29.5k]
  ------------------
  705|  2.34k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 1.95k, False: 390]
  |  Branch (705:29): [True: 644, False: 1.69k]
  |  Branch (705:45): [True: 1.60k, False: 344]
  |  Branch (705:61): [True: 1.16k, False: 446]
  |  Branch (705:77): [True: 644, False: 517]
  ------------------
  706|    644|                        {
  707|    644|                            return OpCode::DIVUI;
  708|    644|                        }
  709|  1.69k|                        break;
  710|       |
  711|  1.69k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 1.13k, False: 30.4k]
  ------------------
  712|  5.50k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 4.36k, False: 27.2k]
  ------------------
  713|  5.50k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 4.14k, False: 1.35k]
  |  Branch (713:29): [True: 3.21k, False: 2.29k]
  |  Branch (713:45): [True: 3.65k, False: 490]
  |  Branch (713:61): [True: 3.21k, False: 442]
  ------------------
  714|  3.21k|                        {
  715|  3.21k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 459, False: 2.75k]
  ------------------
  716|  3.21k|                            {
  717|    194|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 194, False: 3.02k]
  ------------------
  718|    516|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 322, False: 2.89k]
  ------------------
  719|    516|                                    return OpCode::MULTD;
  720|       |
  721|    194|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 194, False: 3.02k]
  ------------------
  722|    388|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 194, False: 3.02k]
  ------------------
  723|    388|                                    return OpCode::MULTF;
  724|       |
  725|    450|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 450, False: 2.76k]
  ------------------
  726|  1.02k|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 578, False: 2.63k]
  ------------------
  727|  1.02k|                                    return OpCode::MULTI;
  728|       |
  729|    322|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 322, False: 2.89k]
  ------------------
  730|    825|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 503, False: 2.71k]
  ------------------
  731|    825|                                    return OpCode::MULTU;
  732|  3.21k|                            }
  733|  3.21k|                        }
  734|  2.75k|                        break;
  735|       |
  736|  7.40k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 7.40k, False: 24.1k]
  ------------------
  737|  15.8k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 8.44k, False: 23.1k]
  ------------------
  738|  15.8k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 297, False: 15.5k]
  ------------------
  739|  15.8k|                        {
  740|  3.46k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 3.46k, False: 12.3k]
  ------------------
  741|  4.08k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 620, False: 15.2k]
  ------------------
  742|  4.08k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 3.47k, False: 603]
  |  Branch (742:37): [True: 644, False: 3.43k]
  |  Branch (742:53): [True: 1.56k, False: 1.90k]
  |  Branch (742:69): [True: 644, False: 925]
  ------------------
  743|    644|                                {
  744|    644|                                    return OpCode::SEQUI;
  745|    644|                                }
  746|  3.43k|                                break;
  747|       |
  748|  3.43k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 1.17k, False: 14.6k]
  ------------------
  749|  3.27k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 2.10k, False: 13.7k]
  ------------------
  750|  3.27k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 1.55k, False: 1.72k]
  |  Branch (750:37): [True: 772, False: 2.50k]
  |  Branch (750:53): [True: 1.24k, False: 310]
  |  Branch (750:69): [True: 772, False: 468]
  ------------------
  751|    772|                                {
  752|    772|                                    return OpCode::SGEUI;
  753|    772|                                }
  754|  2.50k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 1.71k, False: 791]
  |  Branch (754:42): [True: 644, False: 1.86k]
  |  Branch (754:58): [True: 1.44k, False: 266]
  |  Branch (754:74): [True: 644, False: 803]
  ------------------
  755|    644|                                {
  756|    644|                                    return OpCode::SGTUI;
  757|    644|                                }
  758|  1.86k|                                break;
  759|       |
  760|  1.86k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 718, False: 15.1k]
  ------------------
  761|  4.07k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 3.35k, False: 12.4k]
  ------------------
  762|  4.07k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 2.02k, False: 2.04k]
  |  Branch (762:37): [True: 1.02k, False: 3.04k]
  |  Branch (762:53): [True: 1.80k, False: 224]
  |  Branch (762:69): [True: 1.02k, False: 777]
  ------------------
  763|  1.02k|                                {
  764|  1.02k|                                    return OpCode::SLEUI;
  765|  1.02k|                                }
  766|  3.04k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 1.85k, False: 1.18k]
  |  Branch (766:42): [True: 772, False: 2.27k]
  |  Branch (766:58): [True: 1.28k, False: 572]
  |  Branch (766:74): [True: 772, False: 515]
  ------------------
  767|    772|                                {
  768|    772|                                    return OpCode::SLTUI;
  769|    772|                                }
  770|  2.27k|                                break;
  771|       |
  772|  2.27k|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 230, False: 15.6k]
  ------------------
  773|  2.02k|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 1.79k, False: 14.0k]
  ------------------
  774|  2.02k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 1.76k, False: 258]
  |  Branch (774:37): [True: 902, False: 1.12k]
  |  Branch (774:53): [True: 1.29k, False: 473]
  |  Branch (774:69): [True: 902, False: 391]
  ------------------
  775|    902|                                {
  776|    902|                                    return OpCode::SNEUI;
  777|    902|                                }
  778|  1.12k|                                break;
  779|       |
  780|  1.12k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 542, False: 15.3k]
  ------------------
  781|  2.09k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 1.55k, False: 14.2k]
  ------------------
  782|  2.09k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 1.77k, False: 323]
  |  Branch (782:37): [True: 827, False: 1.26k]
  |  Branch (782:53): [True: 1.25k, False: 511]
  |  Branch (782:69): [True: 827, False: 432]
  ------------------
  783|    827|                                {
  784|    827|                                    return OpCode::SUBUI;
  785|    827|                                }
  786|  1.26k|                                break;
  787|  15.8k|                        }
  788|       |
  789|  10.2k|                        break;
  790|  31.5k|                }
  791|       |
  792|  22.2k|                break;
  793|  31.5k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|  22.2k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 16.7k, False: 198k]
  ------------------
  797|  16.7k|                const char c1 = token[0u];
  798|  16.7k|                const char c2 = token[1u];
  799|  16.7k|                const char c3 = token[2u];
  800|  16.7k|                const char c4 = token[3u];
  801|  16.7k|                const char c5 = token[4u];
  802|  16.7k|                const char c6 = token[5u];
  803|       |
  804|  16.7k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 8.68k, False: 8.03k]
  |  Branch (804:21): [True: 8.07k, False: 8.64k]
  |  Branch (804:37): [True: 8.34k, False: 345]
  |  Branch (804:53): [True: 8.07k, False: 271]
  ------------------
  805|  8.07k|                {
  806|  8.07k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 421, False: 7.65k]
  ------------------
  807|  8.07k|                    {
  808|  1.12k|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 1.12k, False: 6.94k]
  ------------------
  809|  2.22k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 1.10k, False: 6.96k]
  ------------------
  810|  2.22k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 1.87k, False: 356]
  ------------------
  811|  1.87k|                            {
  812|  1.87k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 772, False: 1.10k]
  ------------------
  813|    772|                                {
  814|    772|                                    return OpCode::CVTD2F;
  815|    772|                                }
  816|  1.10k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 772, False: 328]
  ------------------
  817|    772|                                {
  818|    772|                                    return OpCode::CVTD2I;
  819|    772|                                }
  820|  1.87k|                            }
  821|    684|                            break;
  822|       |
  823|    684|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 219, False: 7.85k]
  ------------------
  824|  3.17k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 2.95k, False: 5.11k]
  ------------------
  825|  3.17k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 2.96k, False: 210]
  ------------------
  826|  2.96k|                            {
  827|  2.96k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 1.79k, False: 1.16k]
  ------------------
  828|  1.79k|                                {
  829|  1.79k|                                    return OpCode::CVTF2D;
  830|  1.79k|                                }
  831|  1.16k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 901, False: 262]
  ------------------
  832|    901|                                {
  833|    901|                                    return OpCode::CVTF2I;
  834|    901|                                }
  835|  2.96k|                            }
  836|    472|                            break;
  837|       |
  838|  1.92k|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 1.92k, False: 6.14k]
  ------------------
  839|  2.25k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 322, False: 7.74k]
  ------------------
  840|  2.25k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 1.61k, False: 641]
  ------------------
  841|  1.61k|                            {
  842|  1.61k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 516, False: 1.09k]
  ------------------
  843|    516|                                {
  844|    516|                                    return OpCode::CVTI2D;
  845|    516|                                }
  846|  1.09k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 772, False: 322]
  ------------------
  847|    772|                                {
  848|    772|                                    return OpCode::CVTI2F;
  849|    772|                                }
  850|  1.61k|                            }
  851|  8.07k|                    }
  852|  8.07k|                }
  853|  8.64k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 4.88k, False: 3.76k]
  |  Branch (853:26): [True: 388, False: 8.26k]
  |  Branch (853:42): [True: 2.22k, False: 2.66k]
  |  Branch (853:58): [True: 1.60k, False: 614]
  |  Branch (853:74): [True: 1.33k, False: 276]
  ------------------
  854|  8.64k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 898, False: 433]
  |  Branch (854:42): [True: 388, False: 510]
  ------------------
  855|    388|                {
  856|    388|                    return OpCode::MULTUI;
  857|    388|                }
  858|  10.8k|                break;
  859|  16.7k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|  10.8k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 7.43k, False: 207k]
  ------------------
  863|  7.43k|                const char c1 = token[0u];
  864|  7.43k|                const char c2 = token[1u];
  865|  7.43k|                const char c3 = token[2u];
  866|  7.43k|                const char c4 = token[3u];
  867|  7.43k|                const char c5 = token[4u];
  868|  7.43k|                const char c6 = token[5u];
  869|  7.43k|                const char c7 = token[6u];
  870|       |
  871|  7.43k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 4.77k, False: 2.65k]
  |  Branch (871:21): [True: 3.68k, False: 3.74k]
  |  Branch (871:37): [True: 4.26k, False: 516]
  |  Branch (871:53): [True: 3.68k, False: 578]
  ------------------
  872|  3.68k|                {
  873|  3.68k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 1.35k, False: 2.32k]
  |  Branch (873:25): [True: 772, False: 2.91k]
  |  Branch (873:41): [True: 1.16k, False: 194]
  |  Branch (873:54): [True: 969, False: 195]
  |  Branch (873:70): [True: 772, False: 197]
  ------------------
  874|    772|                    {
  875|    772|                        return OpCode::MOVI2FP;
  876|    772|                    }
  877|  2.91k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 2.31k, False: 596]
  |  Branch (877:25): [True: 772, False: 2.13k]
  |  Branch (877:41): [True: 1.32k, False: 989]
  |  Branch (877:57): [True: 968, False: 357]
  |  Branch (877:70): [True: 772, False: 196]
  ------------------
  878|    772|                    {
  879|    772|                        return OpCode::MOVFP2I;
  880|    772|                    }
  881|  2.91k|                }
  882|  5.88k|                break;
  883|  7.43k|            }
  884|       |
  885|  5.88k|            default: {
  ------------------
  |  Branch (885:13): [True: 4.98k, False: 209k]
  ------------------
  886|  4.98k|                break;
  887|  7.43k|            }
  888|   214k|        }
  889|       |
  890|       |        // None found
  891|   132k|        return OpCode::NONE;
  892|   214k|    }
_ZN3dlx3iceEcc:
   17|   354k|    {
   18|   354k|        constexpr const char diff = 'a' - 'A';
   19|   354k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 111k, False: 243k]
  |  Branch (19:28): [True: 107k, False: 136k]
  ------------------
   20|   354k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   190k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|  1.71k|    {
  195|  1.71k|        ParseError err;
  196|       |
  197|  1.71k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|  1.71k|        err.m_LineNumber                           = line_number;
  199|  1.71k|        err.m_Column                               = column;
  200|  1.71k|        err.unexpected_argument_type.expected_type = expected_type;
  201|  1.71k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|  1.71k|        return err;
  204|  1.71k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|  1.71k|    {
  209|  1.71k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|  1.71k|                                                         token.GetColumn().unsafe(), expected_type,
  211|  1.71k|                                                         actual_type);
  212|  1.71k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|    194|    {
  218|    194|        ParseError err;
  219|       |
  220|    194|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|    194|        err.m_LineNumber        = line_number;
  222|    194|        err.m_Column            = column;
  223|    194|        err.invalid_number.text = text;
  224|       |
  225|    194|        return err;
  226|    194|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|    194|    {
  230|    194|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|    194|                                                token.GetColumn().unsafe(), token.GetText());
  232|    194|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|      2|    {
  237|      2|        ParseError err;
  238|       |
  239|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|      2|        err.m_LineNumber = line_number;
  241|      2|        err.m_Column     = column;
  242|       |
  243|      2|        return err;
  244|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|      2|    {
  249|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|      2|                                                                     token.GetColumn().unsafe());
  251|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  65.3k|    {
  257|  65.3k|        ParseError err;
  258|       |
  259|  65.3k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  65.3k|        err.m_LineNumber                   = line_number;
  261|  65.3k|        err.m_Column                       = column;
  262|  65.3k|        err.unexpected_token.expected_type = expected_type;
  263|  65.3k|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  65.3k|        return err;
  266|  65.3k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  65.3k|    {
  271|  65.3k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  65.3k|                                                  token.GetColumn().unsafe(), expected_type,
  273|  65.3k|                                                  token.GetType());
  274|  65.3k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|  30.2k|    {
  279|  30.2k|        ParseError err;
  280|       |
  281|  30.2k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|  30.2k|        err.m_LineNumber                   = line_number;
  283|  30.2k|        err.m_Column                       = column;
  284|  30.2k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|  30.2k|        return err;
  287|  30.2k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|    322|    {
  291|    322|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|    322|                                                    token.GetColumn().unsafe(), token.GetText());
  293|    322|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  36.3k|    {
  298|  36.3k|        ParseError err;
  299|       |
  300|  36.3k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  36.3k|        err.m_LineNumber                       = line_number;
  302|  36.3k|        err.m_Column                           = column;
  303|  36.3k|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  36.3k|        return err;
  306|  36.3k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  36.3k|    {
  311|  36.3k|        return ConstructInvalidLabelIdentifierParseError(
  312|  36.3k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  36.3k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|  10.0k|    {
  319|  10.0k|        ParseError err;
  320|       |
  321|  10.0k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|  10.0k|        err.m_LineNumber                     = line_number;
  323|  10.0k|        err.m_Column                         = column;
  324|  10.0k|        err.label_already_defined.label_name = label_name;
  325|  10.0k|        err.label_already_defined.at_line    = at_line;
  326|  10.0k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|  10.0k|        return err;
  329|  10.0k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|  10.0k|    {
  334|  10.0k|        return ConstructLabelAlreadyDefinedParseError(
  335|  10.0k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|  10.0k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|  10.0k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|  32.7k|    {
  342|  32.7k|        ParseError err;
  343|       |
  344|  32.7k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|  32.7k|        err.m_LineNumber = line_number;
  346|  32.7k|        err.m_Column     = column;
  347|       |
  348|  32.7k|        return err;
  349|  32.7k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|  32.7k|    {
  354|  32.7k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|  32.7k|                                                        token.GetColumn().unsafe());
  356|  32.7k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|  4.81k|    {
  362|  4.81k|        ParseError err;
  363|       |
  364|  4.81k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|  4.81k|        err.m_LineNumber               = line_number;
  366|  4.81k|        err.m_Column                   = column;
  367|  4.81k|        err.too_few_arguments.required = required;
  368|  4.81k|        err.too_few_arguments.provided = provided;
  369|       |
  370|  4.81k|        return err;
  371|  4.81k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|  4.81k|    {
  376|  4.81k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|  4.81k|                                                  token.GetColumn().unsafe(), required, provided);
  378|  4.81k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|  8.25k|    {
  383|  8.25k|        ParseError err;
  384|       |
  385|  8.25k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|  8.25k|        err.m_LineNumber           = line_number;
  387|  8.25k|        err.m_Column               = column;
  388|  8.25k|        err.empty_label.label_name = label_name;
  389|       |
  390|  8.25k|        return err;
  391|  8.25k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|  8.25k|    {
  395|  8.25k|        return ConstructEmptyLabelParseError(
  396|  8.25k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|  8.25k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 7.20k, False: 1.04k]
  ------------------
  398|  7.20k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|  8.25k|                        token.GetText());
  400|  8.25k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|    608|    {
  405|    608|        ParseError err;
  406|       |
  407|    608|        err.m_Type       = ParseError::Type::TooManyComma;
  408|    608|        err.m_LineNumber = line_number;
  409|    608|        err.m_Column     = column;
  410|       |
  411|    608|        return err;
  412|    608|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|    608|    {
  416|    608|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|    608|                                               token.GetColumn().unsafe());
  418|    608|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   190k|    {
   19|   190k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   190k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  4.48k|    {
  181|  4.48k|        ParsedProgram program;
  182|       |
  183|  4.48k|        program.m_Tokens = tokens;
  184|       |
  185|  4.48k|        phi::boolean line_has_instruction{false};
  186|  4.48k|        phi::usize   label_count{0u};
  187|       |
  188|   224k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 220k, False: 4.48k]
  ------------------
  189|   220k|        {
  190|   220k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   220k|            switch (current_token.GetType())
  195|   220k|            {
  196|       |                // Ignore comments
  197|    928|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 928, False: 219k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|    928|                    break;
  200|       |
  201|  25.9k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 25.9k, False: 194k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  25.9k|                    line_has_instruction = false;
  204|  25.9k|                    break;
  205|       |
  206|  88.4k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 88.4k, False: 131k]
  ------------------
  207|  88.4k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 7.18k, False: 81.2k]
  ------------------
  208|  7.18k|                    {
  209|  7.18k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  7.18k|                                current_token, Token::Type::NewLine));
  211|  7.18k|                        break;
  212|  7.18k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  81.2k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 19.2k, False: 62.0k]
  ------------------
  217|  19.2k|                    {
  218|  19.2k|                        program.AddParseError(
  219|  19.2k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  19.2k|                        break;
  221|  19.2k|                    }
  222|       |
  223|  62.0k|                    phi::string_view label_name = current_token.GetText();
  224|  62.0k|                    label_name.remove_suffix(1u);
  225|       |
  226|  62.0k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 29.9k, False: 32.0k]
  ------------------
  227|  29.9k|                    {
  228|  29.9k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|  29.9k|                                current_token.GetLineNumber().unsafe(),
  230|  29.9k|                                current_token.GetColumn().unsafe(), label_name));
  231|  29.9k|                        break;
  232|  29.9k|                    }
  233|       |
  234|  32.0k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 13.4k, False: 18.6k]
  ------------------
  235|  13.4k|                    {
  236|  13.4k|                        program.AddParseError(
  237|  13.4k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  13.4k|                        break;
  239|  13.4k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  18.6k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 10.0k, False: 8.60k]
  ------------------
  243|  10.0k|                    {
  244|       |                        // Find first defintions of label
  245|  10.0k|                        const Token* first_label_definition =
  246|  10.0k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  10.0k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  10.0k|                                    {
  249|  10.0k|                                        phi::string_view token_label_name = t.GetText();
  250|  10.0k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  10.0k|                                        if (token_label_name == label_name)
  253|  10.0k|                                        {
  254|  10.0k|                                            return true;
  255|  10.0k|                                        }
  256|  10.0k|                                    }
  257|       |
  258|  10.0k|                                    return false;
  259|  10.0k|                                });
  260|       |
  261|  10.0k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  10.0k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  10.0k|                                current_token, *first_label_definition));
  265|  10.0k|                        break;
  266|  10.0k|                    }
  267|       |
  268|  8.60k|                    program.m_JumpData[label_name] =
  269|  8.60k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|  8.60k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  8.60k|                    break;
  276|  18.6k|                }
  277|       |
  278|  52.1k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 52.1k, False: 168k]
  ------------------
  279|  52.1k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 32.7k, False: 19.4k]
  ------------------
  280|  32.7k|                    {
  281|  32.7k|                        program.AddParseError(
  282|  32.7k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  32.7k|                        break;
  284|  32.7k|                    }
  285|       |
  286|  19.4k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  19.4k|                    PHI_ASSERT(current_token.HasHint());
  290|  19.4k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  19.4k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  19.4k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  19.4k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  19.4k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  19.4k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  19.4k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  19.4k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  19.4k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  35.5k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 32.1k, False: 3.41k]
  ------------------
  312|  32.1k|                    {
  313|       |                        // Get next token
  314|  32.1k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 730, False: 31.4k]
  ------------------
  315|    730|                        {
  316|    730|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    730|                                    current_token, number_of_argument_required.unsafe(),
  318|    730|                                    argument_num.unsafe()));
  319|    730|                            break;
  320|    730|                        }
  321|       |
  322|  31.4k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  31.4k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 10.0k, False: 21.3k]
  ------------------
  326|  10.0k|                        {
  327|  10.0k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 608, False: 9.41k]
  ------------------
  328|    608|                            {
  329|    608|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    608|                            }
  331|       |
  332|  10.0k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  10.0k|                            continue;
  335|  10.0k|                        }
  336|       |
  337|  21.3k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 4.08k, False: 17.3k]
  ------------------
  338|  4.08k|                        {
  339|  4.08k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  4.08k|                                    token, number_of_argument_required.unsafe(),
  341|  4.08k|                                    argument_num.unsafe()));
  342|  4.08k|                            break;
  343|  4.08k|                        }
  344|       |
  345|  17.3k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  17.3k|                                parse_instruction_argument(
  347|  17.3k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  17.3k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 11.2k, False: 6.09k]
  ------------------
  349|  11.2k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  11.2k|                            break;
  352|  11.2k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  6.09k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  6.09k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  6.09k|                        argument_num++;
  359|  6.09k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  6.09k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  19.4k|                    program.m_Instructions.emplace_back(instruction);
  367|  19.4k|                    line_has_instruction = true;
  368|  19.4k|                    break;
  369|  52.1k|                }
  370|       |
  371|  52.8k|                default:
  ------------------
  |  Branch (371:17): [True: 52.8k, False: 167k]
  ------------------
  372|  52.8k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  52.8k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 28.7k, False: 24.1k]
  ------------------
  374|  28.7k|                    {
  375|  28.7k|                        expected_token_type = Token::Type::NewLine;
  376|  28.7k|                    }
  377|       |
  378|  52.8k|                    program.AddParseError(
  379|  52.8k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  52.8k|                    break;
  381|   220k|            }
  382|   220k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  4.48k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 652, False: 3.83k]
  ------------------
  386|    652|        {
  387|  10.2k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 9.62k, False: 652]
  ------------------
  388|  9.62k|            {
  389|  9.62k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  9.62k|                const Token& token = *it;
  392|  9.62k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 8.25k, False: 1.37k]
  ------------------
  393|  8.25k|                {
  394|  8.25k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  8.25k|                    --label_count;
  396|  8.25k|                }
  397|  9.62k|            }
  398|    652|        }
  399|       |
  400|  4.48k|        return program;
  401|  4.48k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  4.48k|    {
  405|  4.48k|        TokenStream tokens = Tokenize(source);
  406|  4.48k|        return Parse(tokens);
  407|  4.48k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  17.3k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  17.3k|        switch (token.GetType())
   37|  17.3k|        {
   38|  1.99k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 1.99k, False: 15.3k]
  ------------------
   39|  1.99k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 252, False: 1.73k]
  ------------------
   40|  1.99k|                                          ArgumentType::AddressDisplacement))
   41|    252|                {
   42|    252|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    252|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    252|                    return {};
   46|    252|                }
   47|       |
   48|       |                // Get address displacement
   49|  1.73k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  1.73k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  1.73k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 2, False: 1.73k]
  ------------------
   54|      2|                {
   55|      2|                    program.AddParseError(
   56|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      2|                    return {};
   58|      2|                }
   59|       |
   60|  1.73k|                auto         it           = tokens.current_position();
   61|  1.73k|                const Token& first_token  = tokens.consume();
   62|  1.73k|                const Token& second_token = tokens.consume();
   63|  1.73k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  1.73k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 323, False: 1.41k]
  ------------------
   66|    323|                {
   67|    323|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    323|                            first_token, Token::Type::OpenBracket));
   69|    323|                    return {};
   70|    323|                }
   71|       |
   72|       |                // Second token is the register
   73|  1.41k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 610, False: 804]
  ------------------
   74|    610|                {
   75|    610|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|    610|                            second_token, Token::Type::RegisterInt));
   77|    610|                    return {};
   78|    610|                }
   79|       |
   80|    804|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 354, False: 450]
  ------------------
   81|    354|                {
   82|    354|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|    354|                            third_token, Token::Type::ClosingBracket));
   84|    354|                    return {};
   85|    354|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|    450|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|    450|                return ConstructInstructionArgumentAddressDisplacement(
   94|    450|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|    804|            }
   96|    461|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 461, False: 16.8k]
  ------------------
   97|    461|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 194, False: 267]
  ------------------
   98|    194|                {
   99|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    194|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    194|                    return {};
  102|    194|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|    267|                return ConstructInstructionArgumentRegisterInt(
  108|    267|                        static_cast<IntRegisterID>(token.GetHint()));
  109|    461|            }
  110|  3.75k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 3.75k, False: 13.5k]
  ------------------
  111|  3.75k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 197, False: 3.55k]
  ------------------
  112|    197|                {
  113|    197|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    197|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    197|                    return {};
  116|    197|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  3.55k|                return ConstructInstructionArgumentRegisterFloat(
  122|  3.55k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  3.75k|            }
  124|    322|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 322, False: 16.9k]
  ------------------
  125|    322|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|    322|                return {};
  128|  3.75k|            }
  129|  6.15k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 6.15k, False: 11.1k]
  ------------------
  130|       |                // Parse as Label
  131|  6.15k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 879, False: 5.27k]
  ------------------
  132|    879|                {
  133|    879|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|    879|                            token, expected_argument_type, ArgumentType::Label));
  135|    879|                    return {};
  136|    879|                }
  137|       |
  138|  5.27k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 5.27k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  5.27k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 3.65k, False: 1.61k]
  ------------------
  145|  3.65k|                {
  146|  3.65k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  3.65k|                    return {};
  148|  3.65k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  1.61k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  5.27k|            }
  154|    596|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 596, False: 16.7k]
  ------------------
  155|    596|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 195, False: 401]
  ------------------
  156|    195|                {
  157|    195|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    195|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    195|                    return {};
  160|    195|                }
  161|       |
  162|    401|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 207, False: 194]
  ------------------
  163|    207|                {
  164|    207|                    return ConstructInstructionArgumentImmediateValue(
  165|    207|                            static_cast<std::int16_t>(token.GetHint()));
  166|    207|                }
  167|       |
  168|    194|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    194|                return {};
  170|    401|            }
  171|       |
  172|  4.02k|            default:
  ------------------
  |  Branch (172:13): [True: 4.02k, False: 13.2k]
  ------------------
  173|  4.02k|                program.AddParseError(
  174|  4.02k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  4.02k|                return {};
  176|  17.3k|        }
  177|  17.3k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  59.7k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  59.7k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 47.5k, False: 12.2k]
  ------------------
  248|  47.5k|                                    {
  249|  47.5k|                                        phi::string_view token_label_name = t.GetText();
  250|  47.5k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  47.5k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 10.0k, False: 37.4k]
  ------------------
  253|  10.0k|                                        {
  254|  10.0k|                                            return true;
  255|  10.0k|                                        }
  256|  47.5k|                                    }
  257|       |
  258|  49.7k|                                    return false;
  259|  59.7k|                                });

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|   223k|    {
   13|   223k|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 33.9k, False: 189k]
  ------------------
   14|  33.9k|        {
   15|  33.9k|            const char first_char = token[0u];
   16|  33.9k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 520, False: 33.4k]
  |  Branch (16:38): [True: 2.33k, False: 31.0k]
  ------------------
   17|  2.85k|            {
   18|  2.85k|                const char second_char = token[1u];
   19|  2.85k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 2.49k, False: 364]
  |  Branch (19:43): [True: 2.00k, False: 488]
  ------------------
   20|  2.00k|                {
   21|  2.00k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  2.00k|                }
   23|  2.85k|            }
   24|  33.9k|        }
   25|   189k|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 47.9k, False: 141k]
  ------------------
   26|  47.9k|        {
   27|  47.9k|            const char first_char = token[0u];
   28|  47.9k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 337, False: 47.5k]
  |  Branch (28:38): [True: 2.18k, False: 45.3k]
  ------------------
   29|  2.52k|            {
   30|  2.52k|                const char second_char = token[1u];
   31|  2.52k|                const char third_char  = token[2u];
   32|       |
   33|  2.52k|                switch (second_char)
   34|  2.52k|                {
   35|    849|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 849, False: 1.67k]
  ------------------
   36|    849|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 519, False: 330]
  |  Branch (36:50): [True: 322, False: 197]
  ------------------
   37|    322|                        {
   38|    322|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|    322|                        }
   40|    527|                        break;
   41|    849|                    }
   42|    710|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 710, False: 1.81k]
  ------------------
   43|    710|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 388, False: 322]
  |  Branch (43:50): [True: 194, False: 194]
  ------------------
   44|    194|                        {
   45|    194|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|    194|                        }
   47|    516|                        break;
   48|    710|                    }
   49|    582|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 582, False: 1.93k]
  ------------------
   50|    582|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 194, False: 388]
  |  Branch (50:50): [True: 194, False: 194]
  ------------------
   51|    388|                        {
   52|    388|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|    388|                        }
   54|    194|                        break;
   55|    582|                    }
   56|    379|                    default: {
  ------------------
  |  Branch (56:21): [True: 379, False: 2.14k]
  ------------------
   57|    379|                        break;
   58|    582|                    }
   59|  2.52k|                }
   60|  2.52k|            }
   61|  47.9k|        }
   62|       |
   63|   220k|        return IntRegisterID::None;
   64|   223k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|   220k|    {
   68|   220k|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 31.9k, False: 188k]
  ------------------
   69|  31.9k|        {
   70|  31.9k|            const char first_char = token[0u];
   71|  31.9k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 4.55k, False: 27.3k]
  |  Branch (71:38): [True: 854, False: 26.5k]
  ------------------
   72|  5.41k|            {
   73|  5.41k|                const char second_char = token[1u];
   74|  5.41k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 5.15k, False: 255]
  |  Branch (74:43): [True: 4.45k, False: 701]
  ------------------
   75|  4.45k|                {
   76|  4.45k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  4.45k|                }
   78|  5.41k|            }
   79|  31.9k|        }
   80|   188k|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 47.0k, False: 141k]
  ------------------
   81|  47.0k|        {
   82|  47.0k|            const char first_char = token[0u];
   83|  47.0k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 1.83k, False: 45.1k]
  |  Branch (83:38): [True: 1.19k, False: 43.9k]
  ------------------
   84|  3.02k|            {
   85|  3.02k|                const char second_char = token[1u];
   86|  3.02k|                const char third_char  = token[2u];
   87|       |
   88|  3.02k|                switch (second_char)
   89|  3.02k|                {
   90|    842|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 842, False: 2.18k]
  ------------------
   91|    842|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 392, False: 450]
  |  Branch (91:50): [True: 194, False: 198]
  ------------------
   92|    194|                        {
   93|    194|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|    194|                        }
   95|    648|                        break;
   96|    842|                    }
   97|    650|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 650, False: 2.37k]
  ------------------
   98|    650|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 456, False: 194]
  |  Branch (98:50): [True: 258, False: 198]
  ------------------
   99|    258|                        {
  100|    258|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|    258|                        }
  102|    392|                        break;
  103|    650|                    }
  104|    589|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 589, False: 2.43k]
  ------------------
  105|    589|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 194, False: 395]
  |  Branch (105:50): [True: 198, False: 197]
  ------------------
  106|    392|                        {
  107|    392|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|    392|                        }
  109|    197|                        break;
  110|    589|                    }
  111|    941|                    default: {
  ------------------
  |  Branch (111:21): [True: 941, False: 2.08k]
  ------------------
  112|    941|                        break;
  113|    589|                    }
  114|  3.02k|                }
  115|  3.02k|            }
  116|  47.0k|        }
  117|       |
  118|   214k|        return FloatRegisterID::None;
  119|   220k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|   194k|    {
  123|   194k|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 46.8k, False: 147k]
  ------------------
  124|  46.8k|        {
  125|  46.8k|            const char c1 = token[0u];
  126|  46.8k|            const char c2 = token[1u];
  127|  46.8k|            const char c3 = token[2u];
  128|  46.8k|            const char c4 = token[3u];
  129|       |
  130|  46.8k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 1.74k, False: 45.1k]
  |  Branch (130:34): [True: 906, False: 44.2k]
  |  Branch (130:49): [True: 1.44k, False: 1.20k]
  |  Branch (130:62): [True: 194, False: 1.00k]
  ------------------
  131|  46.8k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 327, False: 1.31k]
  |  Branch (131:34): [True: 1.07k, False: 236]
  |  Branch (131:49): [True: 194, False: 1.20k]
  |  Branch (131:62): [True: 905, False: 302]
  ------------------
  132|  46.8k|        }
  133|       |
  134|   147k|        return false;
  135|   194k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|   191k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  65.1k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|   429k|    {
   41|   429k|        return m_Type;
   42|   429k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   219k|    {
   51|   219k|        return m_LineNumber;
   52|   219k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   200k|    {
   56|   200k|        return m_Column;
   57|   200k|    }
_ZNK3dlx5Token7GetTextEv:
   65|   273k|    {
   66|   273k|        return m_Text;
   67|   273k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  21.5k|    {
   80|  21.5k|        return m_HasHint;
   81|  21.5k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  25.6k|    {
   85|  25.6k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  25.6k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  25.6k|                   m_Type == Type::ImmediateInteger);
   88|  25.6k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  25.6k|        return m_Hint;
   91|  25.6k|    }

_ZN3dlx11TokenStream8finalizeEv:
   30|  4.48k|    {
   31|       |#if defined(PHI_DEBUG)
   32|       |        PHI_ASSERT(!m_Finialized);
   33|       |#endif
   34|       |
   35|  4.48k|        m_Iterator = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |        m_Finialized = true;
   38|       |#endif
   39|  4.48k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   51|  1.73k|    {
   52|  1.73k|        return x + m_Iterator <= m_Tokens.size();
   53|  1.73k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   56|   256k|    {
   57|   256k|        return m_Iterator < m_Tokens.size();
   58|   256k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   61|   256k|    {
   62|   256k|        return m_Iterator >= m_Tokens.size();
   63|   256k|    }
_ZN3dlx11TokenStream7consumeEv:
   76|   256k|    {
   77|   256k|        PHI_ASSERT(!reached_end());
   78|       |#if defined(PHI_DEBUG)
   79|       |        PHI_ASSERT(m_Finialized);
   80|       |#endif
   81|       |
   82|   256k|        return m_Tokens.at(m_Iterator++.unsafe());
   83|   256k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  155|  1.73k|    {
  156|  1.73k|        return m_Iterator;
  157|  1.73k|    }
_ZN3dlx11TokenStream12set_positionEN3phi7integerImEE:
  160|    450|    {
  161|       |#if defined(PHI_DEBUG)
  162|       |        PHI_ASSERT(m_Finialized);
  163|       |#endif
  164|       |
  165|    450|        m_Iterator = pos;
  166|    450|    }
_ZNK3dlx11TokenStream6rbeginEv:
  205|    652|    {
  206|       |#if defined(PHI_DEBUG)
  207|       |        //PHI_ASSERT(m_Finialized);
  208|       |#endif
  209|       |
  210|    652|        return m_Tokens.rbegin();
  211|    652|    }
_ZNK3dlx11TokenStream4rendEv:
  214|  9.62k|    {
  215|       |#if defined(PHI_DEBUG)
  216|       |        //PHI_ASSERT(m_Finialized);
  217|       |#endif
  218|       |
  219|  9.62k|        return m_Tokens.rend();
  220|  9.62k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  4.48k|    {
   66|  4.48k|        TokenStream tokens;
   67|       |
   68|  4.48k|        phi::string_view current_token;
   69|       |
   70|  4.48k|        phi::u64 current_line_number{1u};
   71|  4.48k|        phi::u64 current_column{1u};
   72|  4.48k|        phi::u64 token_begin{0u};
   73|       |
   74|  4.48k|        phi::boolean parsing_comment{false};
   75|       |
   76|   733k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 728k, False: 4.48k]
  ------------------
   77|   728k|        {
   78|   728k|            const char c{source.at(i)};
   79|       |
   80|   728k|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 30.1k, False: 698k]
  ------------------
   81|  30.1k|            {
   82|  30.1k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 6.07k, False: 24.0k]
  ------------------
   83|  6.07k|                {
   84|       |                    // Skip empty lines
   85|  6.07k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  6.07k|                                        current_line_number, current_column);
   87|       |
   88|  6.07k|                    parsing_comment = false;
   89|  6.07k|                    current_line_number += 1u;
   90|  6.07k|                    current_column = 1u;
   91|  6.07k|                    continue;
   92|  6.07k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  24.0k|                tokens.emplace_back(ParseToken(
   96|  24.0k|                        source.substring_view(
   97|  24.0k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  24.0k|                                current_token.length()),
   99|  24.0k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  24.0k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  24.0k|                                    current_line_number, current_column);
  103|       |
  104|  24.0k|                current_token   = phi::string_view{};
  105|  24.0k|                parsing_comment = false;
  106|  24.0k|                current_line_number += 1u;
  107|  24.0k|                current_column = 0u;
  108|  24.0k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|   698k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 733, False: 697k]
  |  Branch (110:34): [True: 697, False: 697k]
  ------------------
  111|  1.43k|            {
  112|  1.43k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 250, False: 1.18k]
  ------------------
  113|    250|                {
  114|    250|                    token_begin = i;
  115|    250|                }
  116|  1.18k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 804, False: 376]
  ------------------
  117|    804|                {
  118|    804|                    tokens.emplace_back(ParseToken(
  119|    804|                            source.substring_view(
  120|    804|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|    804|                                    current_token.length()),
  122|    804|                            current_line_number, current_column - current_token.length()));
  123|    804|                    token_begin   = i;
  124|    804|                    current_token = phi::string_view{};
  125|    804|                }
  126|       |
  127|  1.43k|                parsing_comment = true;
  128|  1.43k|                current_token   = source.substring_view(
  129|  1.43k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  1.43k|                        current_token.length() + 1u);
  131|  1.43k|            }
  132|   697k|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 315, False: 696k]
  ------------------
  133|    315|            {
  134|       |                // simply append the character
  135|    315|                current_token = source.substring_view(
  136|    315|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|    315|                        current_token.length() + 1u);
  138|    315|            }
  139|   696k|            else
  140|   696k|            {
  141|       |                // Not parsing a comment
  142|   696k|                switch (c)
  143|   696k|                {
  144|  7.05k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 7.05k, False: 689k]
  ------------------
  145|  13.5k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 6.51k, False: 690k]
  ------------------
  146|  23.2k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 9.70k, False: 687k]
  ------------------
  147|  23.2k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 2.79k, False: 20.4k]
  ------------------
  148|  2.79k|                        {
  149|  2.79k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|  2.79k|                            continue;
  152|  2.79k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  20.4k|                        tokens.emplace_back(ParseToken(
  156|  20.4k|                                source.substring_view(
  157|  20.4k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  20.4k|                                        current_token.length()),
  159|  20.4k|                                current_line_number, current_column - current_token.length()));
  160|  20.4k|                        current_token = phi::string_view{};
  161|  20.4k|                        break;
  162|  69.0k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 69.0k, False: 627k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  69.0k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 64.4k, False: 4.67k]
  ------------------
  165|  64.4k|                        {
  166|  64.4k|                            current_token = source.substring_view(
  167|  64.4k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  64.4k|                                    current_token.length() + 1u);
  169|  64.4k|                            tokens.emplace_back(ParseToken(
  170|  64.4k|                                    source.substring_view(
  171|  64.4k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  64.4k|                                                    token_begin),
  173|  64.4k|                                            current_token.length()),
  174|  64.4k|                                    current_line_number,
  175|  64.4k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  64.4k|                            current_token = phi::string_view{};
  178|  64.4k|                        }
  179|  4.67k|                        else
  180|  4.67k|                        {
  181|       |                            // Orphan colon
  182|  4.67k|                            token_begin = i;
  183|       |
  184|  4.67k|                            tokens.emplace_back(
  185|  4.67k|                                    Token::Type::Colon,
  186|  4.67k|                                    source.substring_view(
  187|  4.67k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  4.67k|                                                    token_begin),
  189|  4.67k|                                            1u),
  190|  4.67k|                                    current_line_number, current_column);
  191|  4.67k|                        }
  192|  69.0k|                        break;
  193|  31.5k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 31.5k, False: 665k]
  ------------------
  194|  56.8k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 25.3k, False: 671k]
  ------------------
  195|  59.6k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 2.78k, False: 694k]
  ------------------
  196|  59.6k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 49.3k, False: 10.2k]
  ------------------
  197|  49.3k|                        {
  198|  49.3k|                            tokens.emplace_back(ParseToken(
  199|  49.3k|                                    source.substring_view(
  200|  49.3k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  49.3k|                                                    token_begin),
  202|  49.3k|                                            current_token.length()),
  203|  49.3k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  49.3k|                            current_token = phi::string_view{};
  206|  49.3k|                        }
  207|       |
  208|  59.6k|                        Token::Type type;
  209|  59.6k|                        switch (c)
  210|  59.6k|                        {
  211|  31.5k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 31.5k, False: 28.1k]
  ------------------
  212|  31.5k|                                type = Token::Type::Comma;
  213|  31.5k|                                break;
  214|  25.3k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 25.3k, False: 34.3k]
  ------------------
  215|  25.3k|                                type = Token::Type::OpenBracket;
  216|  25.3k|                                break;
  217|  2.78k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 2.78k, False: 56.8k]
  ------------------
  218|  2.78k|                                type = Token::Type::ClosingBracket;
  219|  2.78k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 59.6k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  59.6k|#endif
  225|  59.6k|                        }
  226|       |
  227|  59.6k|                        token_begin = i;
  228|       |
  229|  59.6k|                        tokens.emplace_back(
  230|  59.6k|                                type,
  231|  59.6k|                                source.substring_view(
  232|  59.6k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  59.6k|                                        1u),
  234|  59.6k|                                current_line_number, current_column);
  235|  59.6k|                        break;
  236|       |
  237|   544k|                    default:
  ------------------
  |  Branch (237:21): [True: 544k, False: 152k]
  ------------------
  238|   544k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 161k, False: 383k]
  ------------------
  239|   161k|                        {
  240|   161k|                            token_begin = i;
  241|   161k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   544k|                        current_token = source.substring_view(
  245|   544k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   544k|                                current_token.length() + 1u);
  247|   696k|                }
  248|   696k|            }
  249|       |
  250|   719k|            current_column += 1u;
  251|   719k|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  4.48k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 3.27k, False: 1.21k]
  ------------------
  255|  3.27k|        {
  256|  3.27k|            tokens.emplace_back(
  257|  3.27k|                    ParseToken(source.substring_view(
  258|  3.27k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  3.27k|                                       current_token.length()),
  260|  3.27k|                               current_line_number, current_column - current_token.length()));
  261|  3.27k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  4.48k|        tokens.finalize();
  265|       |
  266|  4.48k|        return tokens;
  267|  4.48k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   162k|    {
   14|   162k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 1.45k, False: 161k]
  |  Branch (14:13): [True: 811, False: 161k]
  |  Branch (14:36): [True: 811, False: 645]
  ------------------
   15|    811|        {
   16|    811|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|    811|            if (number)
  ------------------
  |  Branch (18:17): [True: 403, False: 408]
  ------------------
   19|    403|            {
   20|    403|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|    403|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|    403|            }
   23|       |
   24|    408|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|    811|        }
   26|       |
   27|   161k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 546, False: 161k]
  |  Branch (27:13): [True: 1.05k, False: 160k]
  |  Branch (27:36): [True: 508, False: 160k]
  ------------------
   28|  1.05k|        {
   29|  1.05k|            return {Token::Type::Comment, token, line_number, column};
   30|  1.05k|        }
   31|       |
   32|   160k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 3.89k, False: 156k]
  ------------------
   33|  3.89k|        {
   34|  3.89k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  3.89k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  3.89k|        }
   37|       |
   38|   156k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 899, False: 155k]
  ------------------
   39|    899|        {
   40|    899|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|    899|        }
   42|       |
   43|   155k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 2.18k, False: 153k]
  ------------------
   44|  2.18k|        {
   45|  2.18k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  2.18k|                    static_cast<phi::uint32_t>(id)};
   47|  2.18k|        }
   48|       |
   49|   153k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 4.69k, False: 148k]
  ------------------
   50|  4.69k|        {
   51|  4.69k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  4.69k|                    static_cast<phi::uint32_t>(id)};
   53|  4.69k|        }
   54|       |
   55|   148k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 53.9k, False: 94.9k]
  ------------------
   56|  53.9k|        {
   57|  53.9k|            return {Token::Type::OpCode, token, line_number, column,
   58|  53.9k|                    static_cast<phi::uint32_t>(opcode)};
   59|  53.9k|        }
   60|       |
   61|  94.9k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|   148k|    }

LLVMFuzzerTestOneInput:
    8|  4.48k|{
    9|  4.48k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   10|       |
   11|       |    // Parse it
   12|  4.48k|    dlx::Parser::Parse(source);
   13|       |
   14|  4.48k|    return 0;
   15|  4.48k|}


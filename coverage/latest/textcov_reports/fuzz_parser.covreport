_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  83.4k|        {
  173|  83.4k|            PHI_ASSERT(index < 3u);
  174|       |
  175|  83.4k|            switch (index.unsafe())
  176|  83.4k|            {
  177|  37.0k|                case 0:
  ------------------
  |  Branch (177:17): [True: 37.0k, False: 46.4k]
  ------------------
  178|  37.0k|                    return m_Arg1Type;
  179|       |
  180|  23.7k|                case 1:
  ------------------
  |  Branch (180:17): [True: 23.7k, False: 59.6k]
  ------------------
  181|  23.7k|                    return m_Arg2Type;
  182|       |
  183|  22.6k|                case 2:
  ------------------
  |  Branch (183:17): [True: 22.6k, False: 60.7k]
  ------------------
  184|  22.6k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 83.4k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  83.4k|#endif
  191|  83.4k|            }
  192|  83.4k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  21.8k|        {
  199|  21.8k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  21.8k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 21.4k, False: 469]
  ------------------
  203|  21.4k|            {
  204|  21.4k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  21.4k|            }
  206|  21.8k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 11.0k, False: 10.7k]
  ------------------
  207|  11.0k|            {
  208|  11.0k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  11.0k|            }
  210|  21.8k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 5.66k, False: 16.2k]
  ------------------
  211|  5.66k|            {
  212|  5.66k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  213|  5.66k|            }
  214|       |
  215|  21.8k|            return number_of_argument_required;
  216|  21.8k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  21.8k|        {
  225|  21.8k|            return m_Executor;
  226|  21.8k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  14.0k|    {
   38|  14.0k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  14.0k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  14.0k|                                         static_cast<underlying_t>(rhs));
   42|  14.0k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  14.0k|    {
   55|  14.0k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  14.0k|        return static_cast<underlying_t>(type & test) != 0;
   58|  14.0k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  71.9k|    {
   31|  71.9k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 1.08k, False: 70.8k]
  ------------------
   32|  1.08k|        {
   33|  1.08k|            return true;
   34|  1.08k|        }
   35|       |
   36|  70.8k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 968, False: 69.9k]
  ------------------
   37|    968|        {
   38|    968|            return true;
   39|    968|        }
   40|       |
   41|  69.9k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 30.2k, False: 39.7k]
  ------------------
   42|  30.2k|        {
   43|  30.2k|            return true;
   44|  30.2k|        }
   45|       |
   46|  39.7k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 200, False: 39.5k]
  ------------------
   47|    200|        {
   48|    200|            return true;
   49|    200|        }
   50|       |
   51|  39.5k|        return false;
   52|  39.7k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  39.5k|    {
   56|  39.5k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 39.5k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  39.5k|        const char first_char = token.at(0u);
   62|       |
   63|  39.5k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 6.69k, False: 32.8k]
  ------------------
   64|  6.69k|        {
   65|  6.69k|            return phi::is_alpha(first_char);
   66|  6.69k|        }
   67|       |
   68|  32.8k|        phi::boolean just_under_scores = (first_char == '_');
   69|  32.8k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 2.73k, False: 30.0k]
  |  Branch (69:13): [True: 2.27k, False: 30.5k]
  |  Branch (69:43): [True: 2.27k, False: 459]
  ------------------
   70|  2.27k|        {
   71|  2.27k|            return false;
   72|  2.27k|        }
   73|       |
   74|   110k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 93.6k, False: 16.9k]
  ------------------
   75|  93.6k|        {
   76|  93.6k|            const char c{token.at(index)};
   77|       |
   78|  93.6k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 79.5k, False: 14.1k]
  ------------------
   79|  79.5k|            {
   80|  79.5k|                just_under_scores = false;
   81|  79.5k|            }
   82|  14.1k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 599, False: 13.5k]
  ------------------
   83|    599|            {
   84|    599|                continue;
   85|    599|            }
   86|  13.5k|            else
   87|  13.5k|            {
   88|  13.5k|                return false;
   89|  13.5k|            }
   90|  93.6k|        }
   91|       |
   92|  16.9k|        return !just_under_scores;
   93|  30.5k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|   169k|    {
  100|   169k|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 169k]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|   169k|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 24.3k, False: 145k]
  ------------------
  106|  24.3k|        {
  107|  24.3k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 3.39k, False: 20.9k]
  ------------------
  108|  3.39k|            {
  109|  3.39k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  3.39k|            }
  111|       |
  112|  20.9k|            return {};
  113|  24.3k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|   145k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 765, False: 144k]
  ------------------
  117|    765|        {
  118|    765|            return {};
  119|    765|        }
  120|       |
  121|   144k|        std::int32_t number{0};
  122|   144k|        phi::boolean is_negative{false};
  123|   144k|        phi::boolean starts_with_zero{false};
  124|   144k|        phi::boolean parsing_binary{false};
  125|   144k|        phi::boolean parsing_octal{false};
  126|   144k|        phi::boolean parsing_hexadecimal{false};
  127|   144k|        phi::boolean parsed_something{false};
  128|   144k|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|   162k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 160k, False: 2.29k]
  ------------------
  133|   160k|        {
  134|   160k|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|   160k|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 144k, False: 15.9k]
  ------------------
  138|   144k|            {
  139|   144k|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 360, False: 144k]
  ------------------
  140|    360|                {
  141|    360|                    continue;
  142|    360|                }
  143|       |
  144|   144k|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 1.32k, False: 143k]
  ------------------
  145|  1.32k|                {
  146|  1.32k|                    is_negative = true;
  147|  1.32k|                    continue;
  148|  1.32k|                }
  149|       |
  150|   143k|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 2.28k, False: 140k]
  ------------------
  151|  2.28k|                {
  152|  2.28k|                    starts_with_zero = true;
  153|  2.28k|                    continue;
  154|  2.28k|                }
  155|       |
  156|   140k|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 199, False: 140k]
  ------------------
  157|    199|                {
  158|    199|                    return {};
  159|    199|                }
  160|   140k|            }
  161|       |
  162|       |            // Second character
  163|   156k|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 5.73k, False: 150k]
  ------------------
  164|  5.73k|            {
  165|  5.73k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 2.28k, False: 3.45k]
  ------------------
  166|  2.28k|                {
  167|       |                    // Binary
  168|  2.28k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 206, False: 2.07k]
  |  Branch (168:37): [True: 194, False: 1.88k]
  ------------------
  169|    400|                    {
  170|    400|                        parsing_binary = true;
  171|    400|                        continue;
  172|    400|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  1.88k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 795, False: 1.08k]
  |  Branch (175:37): [True: 199, False: 889]
  ------------------
  176|    994|                    {
  177|    994|                        parsing_hexadecimal = true;
  178|    994|                        continue;
  179|    994|                    }
  180|       |
  181|       |                    // Octal
  182|    889|                    parsing_octal = true;
  183|    889|                }
  184|  5.73k|            }
  185|       |
  186|       |            // Handle seperators
  187|   155k|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 702, False: 154k]
  ------------------
  188|    702|            {
  189|    702|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 322, False: 380]
  ------------------
  190|    322|                {
  191|    322|                    return {};
  192|    322|                }
  193|       |
  194|    380|                parsed_separator = true;
  195|    380|                continue;
  196|    702|            }
  197|       |
  198|       |            // Check for over/underflow
  199|   154k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 5.62k, False: 148k]
  |  Branch (199:32): [True: 258, False: 5.36k]
  ------------------
  200|    258|            {
  201|       |                // Would underflow
  202|    258|                return {};
  203|    258|            }
  204|   154k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 148k, False: 5.36k]
  |  Branch (204:17): [True: 483, False: 153k]
  |  Branch (204:33): [True: 483, False: 148k]
  ------------------
  205|    483|            {
  206|       |                // Would overflow
  207|    483|                return {};
  208|    483|            }
  209|       |
  210|   153k|            parsed_separator = false;
  211|   153k|            parsed_something = true;
  212|       |
  213|   153k|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 609, False: 153k]
  ------------------
  214|    609|            {
  215|    609|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 214, False: 395]
  ------------------
  216|    214|                {
  217|    214|                    return {};
  218|    214|                }
  219|       |
  220|    395|                number <<= 1;
  221|    395|                number |= (c - '0');
  222|    395|            }
  223|   153k|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 1.06k, False: 152k]
  ------------------
  224|  1.06k|            {
  225|  1.06k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 723, False: 340]
  ------------------
  226|    723|                {
  227|    723|                    return {};
  228|    723|                }
  229|       |
  230|    340|                number <<= 3;
  231|    340|                number |= (c - '0');
  232|    340|            }
  233|   152k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 1.45k, False: 150k]
  ------------------
  234|  1.45k|            {
  235|  1.45k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 689, False: 770]
  ------------------
  236|    689|                {
  237|    689|                    return {};
  238|    689|                }
  239|       |
  240|    770|                number <<= 4;
  241|    770|                number |= phi::hex_digit_value(c).unsafe();
  242|    770|            }
  243|   150k|            else
  244|   150k|            {
  245|   150k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 139k, False: 11.2k]
  ------------------
  246|   139k|                {
  247|   139k|                    return {};
  248|   139k|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|  11.2k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 3.04k, False: 8.20k]
  |  Branch (251:36): [True: 206, False: 2.84k]
  ------------------
  252|    206|                {
  253|    206|                    return {};
  254|    206|                }
  255|       |
  256|  11.0k|                number *= 10;
  257|  11.0k|                number += (c - '0');
  258|  11.0k|            }
  259|   153k|        }
  260|       |
  261|  2.29k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 2.03k, False: 262]
  ------------------
  262|  2.03k|        {
  263|       |            // Check for over/underflow
  264|  2.03k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 802, False: 1.23k]
  |  Branch (264:32): [True: 595, False: 207]
  ------------------
  265|    595|            {
  266|       |                // Would underflow
  267|    595|                return {};
  268|    595|            }
  269|  1.43k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 1.23k, False: 207]
  |  Branch (269:17): [True: 355, False: 1.08k]
  |  Branch (269:33): [True: 355, False: 876]
  ------------------
  270|    355|            {
  271|       |                // Would overflow
  272|    355|                return {};
  273|    355|            }
  274|       |
  275|  1.08k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 207, False: 876]
  ------------------
  276|    207|            {
  277|    207|                return static_cast<std::int16_t>(-number);
  278|    207|            }
  279|       |
  280|    876|            return static_cast<std::int16_t>(number);
  281|  1.08k|        }
  282|       |
  283|    262|        return {};
  284|  2.29k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  10.7k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  10.7k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 54.9k, False: 0]
  ------------------
   64|  54.9k|            {
   65|  54.9k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 10.7k, False: 44.2k]
  ------------------
   66|  10.7k|                {
   67|  10.7k|                    return &token;
   68|  10.7k|                }
   69|  54.9k|            }
   70|       |
   71|      0|            return nullptr;
   72|  10.7k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  38.9k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  38.9k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  38.9k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   170k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   170k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   170k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  60.5k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  60.5k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  60.5k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  21.8k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  4.89k|    {
   25|  4.89k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  4.89k|        switch (argument_number.unsafe())
   28|  4.89k|        {
   29|  3.37k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 3.37k, False: 1.51k]
  ------------------
   30|  3.37k|                m_Arg1 = argument;
   31|  3.37k|                break;
   32|    818|            case 1u:
  ------------------
  |  Branch (32:13): [True: 818, False: 4.07k]
  ------------------
   33|    818|                m_Arg2 = argument;
   34|    818|                break;
   35|    700|            case 2u:
  ------------------
  |  Branch (35:13): [True: 700, False: 4.19k]
  ------------------
   36|    700|                m_Arg3 = argument;
   37|    700|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 4.89k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  4.89k|#endif
   42|  4.89k|        }
   43|  4.89k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  70.5k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  172|    347|    {
  173|    347|        InstructionArgument arg;
  174|    347|        arg.m_Type                   = ArgumentType::IntRegister;
  175|    347|        arg.register_int.register_id = id;
  176|    347|        return arg;
  177|    347|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  180|  1.99k|    {
  181|  1.99k|        InstructionArgument arg;
  182|  1.99k|        arg.m_Type                     = ArgumentType::FloatRegister;
  183|  1.99k|        arg.register_float.register_id = id;
  184|  1.99k|        return arg;
  185|  1.99k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  188|    335|    {
  189|    335|        InstructionArgument arg;
  190|    335|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  191|    335|        arg.immediate_value.signed_value = value;
  192|    335|        return arg;
  193|    335|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  197|    834|    {
  198|    834|        InstructionArgument arg;
  199|    834|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  200|    834|        arg.address_displacement.register_id  = id;
  201|    834|        arg.address_displacement.displacement = displacement;
  202|    834|        return arg;
  203|    834|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  206|  1.38k|    {
  207|  1.38k|        InstructionArgument arg;
  208|  1.38k|        arg.m_Type           = ArgumentType::Label;
  209|  1.38k|        arg.label.label_name = label_name;
  210|  1.38k|        return arg;
  211|  1.38k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  21.8k|    {
  453|  21.8k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  21.8k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|   227k|    {
   24|   227k|        switch (token.length().unsafe())
   25|   227k|        {
   26|       |            // 1 character OpCodes
   27|  27.3k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 27.3k, False: 200k]
  ------------------
   28|  27.3k|                const char c1 = token[0u];
   29|       |
   30|  27.3k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 10.8k, False: 16.5k]
  ------------------
   31|  10.8k|                {
   32|  10.8k|                    return OpCode::J;
   33|  10.8k|                }
   34|  16.5k|                break;
   35|  27.3k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|  27.7k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 27.7k, False: 199k]
  ------------------
   39|  27.7k|                const char c1 = token[0u];
   40|  27.7k|                const char c2 = token[1u];
   41|       |
   42|  27.7k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 14.7k, False: 13.0k]
  ------------------
   43|  27.7k|                {
   44|    708|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 708, False: 27.0k]
  ------------------
   45|  1.01k|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 311, False: 27.4k]
  ------------------
   46|  1.01k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 389, False: 630]
  ------------------
   47|    389|                        {
   48|    389|                            return OpCode::JR;
   49|    389|                        }
   50|    630|                        break;
   51|       |
   52|  1.77k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 1.77k, False: 25.9k]
  ------------------
   53|  3.10k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 1.32k, False: 26.4k]
  ------------------
   54|  3.10k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 591, False: 2.51k]
  ------------------
   55|  3.10k|                        {
   56|    501|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 501, False: 2.60k]
  ------------------
   57|    703|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 202, False: 2.89k]
  ------------------
   58|    703|                                return OpCode::LB;
   59|    213|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 213, False: 2.88k]
  ------------------
   60|    407|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 194, False: 2.90k]
  ------------------
   61|    407|                                return OpCode::LD;
   62|    194|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 194, False: 2.90k]
  ------------------
   63|    516|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 322, False: 2.77k]
  ------------------
   64|    516|                                return OpCode::LF;
   65|    196|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 196, False: 2.90k]
  ------------------
   66|    484|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 288, False: 2.81k]
  ------------------
   67|    484|                                return OpCode::LH;
   68|    201|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 201, False: 2.90k]
  ------------------
   69|    400|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 199, False: 2.90k]
  ------------------
   70|    400|                                return OpCode::LW;
   71|  3.10k|                        }
   72|    591|                        break;
   73|    591|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 422, False: 27.3k]
  ------------------
   74|  1.23k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 814, False: 26.9k]
  ------------------
   75|  1.23k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 561, False: 675]
  ------------------
   76|    561|                        {
   77|    561|                            return OpCode::OR;
   78|    561|                        }
   79|    675|                        break;
   80|  5.84k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 5.84k, False: 21.9k]
  ------------------
   81|  7.66k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 1.82k, False: 25.9k]
  ------------------
   82|  7.66k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 1.72k, False: 5.94k]
  ------------------
   83|  7.66k|                        {
   84|    479|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 479, False: 7.18k]
  ------------------
   85|    674|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 195, False: 7.47k]
  ------------------
   86|    674|                                return OpCode::SB;
   87|  2.89k|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 2.89k, False: 4.76k]
  ------------------
   88|  3.14k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 241, False: 7.42k]
  ------------------
   89|  3.14k|                                return OpCode::SD;
   90|    197|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 197, False: 7.47k]
  ------------------
   91|    391|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 194, False: 7.47k]
  ------------------
   92|    391|                                return OpCode::SF;
   93|    709|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 709, False: 6.95k]
  ------------------
   94|  1.05k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 343, False: 7.32k]
  ------------------
   95|  1.05k|                                return OpCode::SH;
   96|    196|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 196, False: 7.47k]
  ------------------
   97|    690|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 494, False: 7.17k]
  ------------------
   98|    690|                                return OpCode::SW;
   99|  7.66k|                        }
  100|  1.72k|                        break;
  101|  27.7k|                }
  102|  18.3k|                break;
  103|  27.7k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|  48.1k|            case 3: {
  ------------------
  |  Branch (106:13): [True: 48.1k, False: 179k]
  ------------------
  107|  48.1k|                const char c1 = token[0u];
  108|  48.1k|                const char c2 = token[1u];
  109|  48.1k|                const char c3 = token[2u];
  110|       |
  111|  48.1k|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 12.9k, False: 35.2k]
  ------------------
  112|  48.1k|                {
  113|  1.43k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 1.43k, False: 46.7k]
  ------------------
  114|  1.94k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 507, False: 47.6k]
  ------------------
  115|  1.94k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 623, False: 1.31k]
  |  Branch (115:29): [True: 403, False: 1.53k]
  |  Branch (115:45): [True: 403, False: 220]
  ------------------
  116|    403|                        {
  117|    403|                            return OpCode::ADD;
  118|    403|                        }
  119|  1.53k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 757, False: 781]
  |  Branch (119:34): [True: 395, False: 1.14k]
  |  Branch (119:50): [True: 395, False: 362]
  ------------------
  120|    395|                        {
  121|    395|                            return OpCode::AND;
  122|    395|                        }
  123|  1.14k|                        break;
  124|       |
  125|  1.14k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 603, False: 47.5k]
  ------------------
  126|  1.94k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 1.34k, False: 46.8k]
  ------------------
  127|  1.94k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 1.21k, False: 732]
  |  Branch (127:29): [True: 702, False: 1.24k]
  |  Branch (127:45): [True: 702, False: 512]
  ------------------
  128|    702|                        {
  129|    702|                            return OpCode::DIV;
  130|    702|                        }
  131|  1.24k|                        break;
  132|       |
  133|  1.24k|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 364, False: 47.8k]
  ------------------
  134|  2.38k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 2.02k, False: 46.1k]
  ------------------
  135|  2.38k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 2.14k, False: 245]
  ------------------
  136|  2.14k|                        {
  137|  2.14k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 1.15k, False: 984]
  ------------------
  138|  1.15k|                            {
  139|  1.15k|                                return OpCode::EQD;
  140|  1.15k|                            }
  141|    984|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 644, False: 340]
  ------------------
  142|    644|                            {
  143|    644|                                return OpCode::EQF;
  144|    644|                            }
  145|  2.14k|                        }
  146|    585|                        break;
  147|       |
  148|  2.81k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 2.81k, False: 45.3k]
  ------------------
  149|  3.66k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 847, False: 47.3k]
  ------------------
  150|  3.66k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 1.23k, False: 2.42k]
  ------------------
  151|  1.23k|                        {
  152|  1.23k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 516, False: 720]
  ------------------
  153|    516|                            {
  154|    516|                                return OpCode::GED;
  155|    516|                            }
  156|    720|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 388, False: 332]
  ------------------
  157|    388|                            {
  158|    388|                                return OpCode::GEF;
  159|    388|                            }
  160|  1.23k|                        }
  161|  2.42k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 1.37k, False: 1.05k]
  ------------------
  162|  1.37k|                        {
  163|  1.37k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 388, False: 983]
  ------------------
  164|    388|                            {
  165|    388|                                return OpCode::GTD;
  166|    388|                            }
  167|    983|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 644, False: 339]
  ------------------
  168|    644|                            {
  169|    644|                                return OpCode::GTF;
  170|    644|                            }
  171|    983|                        }
  172|  1.72k|                        break;
  173|       |
  174|  1.72k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 221, False: 47.9k]
  ------------------
  175|  1.35k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 1.13k, False: 47.0k]
  ------------------
  176|  1.35k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 1.11k, False: 248]
  |  Branch (176:29): [True: 773, False: 585]
  |  Branch (176:45): [True: 773, False: 337]
  ------------------
  177|    773|                        {
  178|    773|                            return OpCode::JAL;
  179|    773|                        }
  180|    585|                        break;
  181|       |
  182|  2.84k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 2.84k, False: 45.3k]
  ------------------
  183|  6.31k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 3.46k, False: 44.7k]
  ------------------
  184|  6.31k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 313, False: 5.99k]
  ------------------
  185|  6.31k|                        {
  186|  1.06k|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 1.06k, False: 5.24k]
  ------------------
  187|  1.33k|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 271, False: 6.04k]
  ------------------
  188|  1.33k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 900, False: 434]
  ------------------
  189|    900|                                {
  190|    900|                                    return OpCode::LBU;
  191|    900|                                }
  192|    434|                                break;
  193|       |
  194|  1.12k|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 1.12k, False: 5.18k]
  ------------------
  195|  1.53k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 412, False: 5.90k]
  ------------------
  196|  1.53k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 516, False: 1.02k]
  ------------------
  197|    516|                                {
  198|    516|                                    return OpCode::LED;
  199|    516|                                }
  200|  1.02k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 772, False: 249]
  ------------------
  201|    772|                                {
  202|    772|                                    return OpCode::LEF;
  203|    772|                                }
  204|    249|                                break;
  205|       |
  206|    249|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 235, False: 6.07k]
  ------------------
  207|  1.13k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 902, False: 5.41k]
  ------------------
  208|  1.13k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 516, False: 621]
  ------------------
  209|    516|                                {
  210|    516|                                    return OpCode::LHI;
  211|    516|                                }
  212|    621|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 388, False: 233]
  ------------------
  213|    388|                                {
  214|    388|                                    return OpCode::LHU;
  215|    388|                                }
  216|    233|                                break;
  217|       |
  218|    603|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 603, False: 5.70k]
  ------------------
  219|    988|                            case 't':
  ------------------
  |  Branch (219:29): [True: 385, False: 5.92k]
  ------------------
  220|    988|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 388, False: 600]
  ------------------
  221|    388|                                {
  222|    388|                                    return OpCode::LTD;
  223|    388|                                }
  224|    600|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 388, False: 212]
  ------------------
  225|    388|                                {
  226|    388|                                    return OpCode::LTF;
  227|    388|                                }
  228|    212|                                break;
  229|       |
  230|    241|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 241, False: 6.07k]
  ------------------
  231|  1.00k|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 762, False: 5.55k]
  ------------------
  232|  1.00k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 644, False: 359]
  ------------------
  233|    644|                                {
  234|    644|                                    return OpCode::LWU;
  235|    644|                                }
  236|    359|                                break;
  237|  6.31k|                        }
  238|  1.80k|                        break;
  239|       |
  240|  1.80k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 614, False: 47.5k]
  ------------------
  241|  2.66k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 2.04k, False: 46.1k]
  ------------------
  242|  2.66k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 1.64k, False: 1.01k]
  ------------------
  243|  1.64k|                        {
  244|  1.64k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 1.03k, False: 613]
  ------------------
  245|  1.03k|                            {
  246|  1.03k|                                return OpCode::NED;
  247|  1.03k|                            }
  248|    613|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 388, False: 225]
  ------------------
  249|    388|                            {
  250|    388|                                return OpCode::NEF;
  251|    388|                            }
  252|  1.64k|                        }
  253|  1.01k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 720, False: 298]
  |  Branch (253:34): [True: 517, False: 501]
  |  Branch (253:50): [True: 517, False: 203]
  ------------------
  254|    517|                        {
  255|    517|                            return OpCode::NOP;
  256|    517|                        }
  257|       |
  258|    726|                        break;
  259|       |
  260|    726|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 380, False: 47.8k]
  ------------------
  261|  1.15k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 775, False: 47.4k]
  ------------------
  262|  1.15k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 745, False: 410]
  |  Branch (262:29): [True: 516, False: 639]
  |  Branch (262:45): [True: 516, False: 229]
  ------------------
  263|    516|                        {
  264|    516|                            return OpCode::ORI;
  265|    516|                        }
  266|    639|                        break;
  267|       |
  268|  5.77k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 5.77k, False: 42.4k]
  ------------------
  269|  12.6k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 6.83k, False: 41.3k]
  ------------------
  270|  12.6k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 790, False: 11.8k]
  ------------------
  271|  12.6k|                        {
  272|    982|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 982, False: 11.6k]
  ------------------
  273|  1.35k|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 372, False: 12.2k]
  ------------------
  274|  1.35k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 645, False: 709]
  ------------------
  275|    645|                                {
  276|    645|                                    return OpCode::SBU;
  277|    645|                                }
  278|    709|                                break;
  279|       |
  280|    709|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 385, False: 12.2k]
  ------------------
  281|    817|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 432, False: 12.1k]
  ------------------
  282|    817|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 389, False: 428]
  ------------------
  283|    389|                                {
  284|    389|                                    return OpCode::SEQ;
  285|    389|                                }
  286|    428|                                break;
  287|       |
  288|  1.48k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 1.48k, False: 11.1k]
  ------------------
  289|  2.47k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 990, False: 11.6k]
  ------------------
  290|  2.47k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 800, False: 1.67k]
  ------------------
  291|    800|                                {
  292|    800|                                    return OpCode::SGE;
  293|    800|                                }
  294|  1.67k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 761, False: 914]
  ------------------
  295|    761|                                {
  296|    761|                                    return OpCode::SGT;
  297|    761|                                }
  298|    914|                                break;
  299|       |
  300|    914|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 237, False: 12.3k]
  ------------------
  301|    589|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 352, False: 12.2k]
  ------------------
  302|    589|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 388, False: 201]
  ------------------
  303|    388|                                {
  304|    388|                                    return OpCode::SHU;
  305|    388|                                }
  306|    201|                                break;
  307|       |
  308|    563|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 563, False: 12.0k]
  ------------------
  309|  2.20k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 1.63k, False: 10.9k]
  ------------------
  310|  2.20k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 246, False: 1.95k]
  ------------------
  311|  2.20k|                                {
  312|    328|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 328, False: 1.87k]
  ------------------
  313|    528|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 200, False: 2.00k]
  ------------------
  314|    528|                                        return OpCode::SLA;
  315|       |
  316|    195|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 195, False: 2.00k]
  ------------------
  317|    523|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 328, False: 1.87k]
  ------------------
  318|    523|                                        return OpCode::SLE;
  319|       |
  320|    201|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 201, False: 2.00k]
  ------------------
  321|    506|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 305, False: 1.89k]
  ------------------
  322|    506|                                        return OpCode::SLL;
  323|       |
  324|    204|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 204, False: 1.99k]
  ------------------
  325|    399|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 195, False: 2.00k]
  ------------------
  326|    399|                                        return OpCode::SLT;
  327|  2.20k|                                }
  328|    246|                                break;
  329|       |
  330|    331|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 331, False: 12.2k]
  ------------------
  331|  1.02k|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 698, False: 11.9k]
  ------------------
  332|  1.02k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 645, False: 384]
  ------------------
  333|    645|                                {
  334|    645|                                    return OpCode::SNE;
  335|    645|                                }
  336|    384|                                break;
  337|       |
  338|    888|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 888, False: 11.7k]
  ------------------
  339|  1.53k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 644, False: 11.9k]
  ------------------
  340|  1.53k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 673, False: 859]
  ------------------
  341|    673|                                {
  342|    673|                                    return OpCode::SRA;
  343|    673|                                }
  344|    859|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 515, False: 344]
  ------------------
  345|    515|                                {
  346|    515|                                    return OpCode::SRL;
  347|    515|                                }
  348|    344|                                break;
  349|       |
  350|    653|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 653, False: 11.9k]
  ------------------
  351|  1.04k|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 395, False: 12.2k]
  ------------------
  352|  1.04k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 776, False: 272]
  ------------------
  353|    776|                                {
  354|    776|                                    return OpCode::SUB;
  355|    776|                                }
  356|    272|                                break;
  357|       |
  358|    272|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 195, False: 12.4k]
  ------------------
  359|    780|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 585, False: 12.0k]
  ------------------
  360|    780|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 388, False: 392]
  ------------------
  361|    388|                                {
  362|    388|                                    return OpCode::SWU;
  363|    388|                                }
  364|    392|                                break;
  365|  12.6k|                        }
  366|       |
  367|  5.30k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 628, False: 47.5k]
  ------------------
  368|  5.87k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 563, False: 47.6k]
  ------------------
  369|  5.87k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 1.08k, False: 4.78k]
  |  Branch (369:29): [True: 596, False: 5.27k]
  |  Branch (369:45): [True: 596, False: 493]
  ------------------
  370|    596|                        {
  371|    596|                            return OpCode::XOR;
  372|    596|                        }
  373|  5.27k|                        break;
  374|  48.1k|                }
  375|  26.6k|                break;
  376|  48.1k|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  58.6k|            case 4: {
  ------------------
  |  Branch (379:13): [True: 58.6k, False: 169k]
  ------------------
  380|  58.6k|                const char c1 = token[0u];
  381|  58.6k|                const char c2 = token[1u];
  382|  58.6k|                const char c3 = token[2u];
  383|  58.6k|                const char c4 = token[3u];
  384|       |
  385|  58.6k|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 9.87k, False: 48.7k]
  ------------------
  386|  58.6k|                {
  387|  3.72k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 3.72k, False: 54.9k]
  ------------------
  388|  6.03k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 2.31k, False: 56.3k]
  ------------------
  389|  6.03k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 218, False: 5.81k]
  ------------------
  390|  6.03k|                        {
  391|  1.65k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 1.65k, False: 4.37k]
  ------------------
  392|  4.14k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 2.49k, False: 3.53k]
  ------------------
  393|  4.14k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 3.74k, False: 407]
  ------------------
  394|  3.74k|                                {
  395|  3.74k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 200, False: 3.54k]
  ------------------
  396|  3.74k|                                    {
  397|    887|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 887, False: 2.85k]
  ------------------
  398|  1.21k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 329, False: 3.41k]
  ------------------
  399|  1.21k|                                            return OpCode::ADDD;
  400|       |
  401|    322|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 322, False: 3.41k]
  ------------------
  402|    775|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 453, False: 3.28k]
  ------------------
  403|    775|                                            return OpCode::ADDF;
  404|       |
  405|    706|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 706, False: 3.03k]
  ------------------
  406|    900|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 194, False: 3.54k]
  ------------------
  407|    900|                                            return OpCode::ADDI;
  408|       |
  409|    326|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 326, False: 3.41k]
  ------------------
  410|    650|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 324, False: 3.41k]
  ------------------
  411|    650|                                            return OpCode::ADDU;
  412|  3.74k|                                    }
  413|  3.74k|                                }
  414|    607|                                break;
  415|       |
  416|    607|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 204, False: 5.82k]
  ------------------
  417|  1.66k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 1.46k, False: 4.57k]
  ------------------
  418|  1.66k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 1.30k, False: 363]
  |  Branch (418:37): [True: 901, False: 763]
  |  Branch (418:53): [True: 901, False: 400]
  ------------------
  419|    901|                                {
  420|    901|                                    return OpCode::ANDI;
  421|    901|                                }
  422|       |
  423|    763|                                break;
  424|  6.03k|                        }
  425|  1.58k|                        break;
  426|       |
  427|  1.84k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 1.84k, False: 56.8k]
  ------------------
  428|  5.64k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 3.80k, False: 54.8k]
  ------------------
  429|  5.64k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 236, False: 5.40k]
  ------------------
  430|  5.64k|                        {
  431|    641|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 641, False: 5.00k]
  ------------------
  432|  1.03k|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 392, False: 5.25k]
  ------------------
  433|  1.03k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 583, False: 450]
  |  Branch (433:37): [True: 388, False: 645]
  |  Branch (433:53): [True: 388, False: 195]
  ------------------
  434|    388|                                {
  435|    388|                                    return OpCode::BEQZ;
  436|    388|                                }
  437|    645|                                break;
  438|       |
  439|    645|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 550, False: 5.09k]
  ------------------
  440|  1.70k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 1.15k, False: 4.49k]
  ------------------
  441|  1.70k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 1.25k, False: 450]
  ------------------
  442|  1.25k|                                {
  443|  1.25k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 517, False: 734]
  ------------------
  444|    517|                                    {
  445|    517|                                        return OpCode::BFPF;
  446|    517|                                    }
  447|    734|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 516, False: 218]
  ------------------
  448|    516|                                    {
  449|    516|                                        return OpCode::BFPT;
  450|    516|                                    }
  451|  1.25k|                                }
  452|    668|                                break;
  453|       |
  454|    668|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 327, False: 5.31k]
  ------------------
  455|  2.67k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 2.34k, False: 3.29k]
  ------------------
  456|  2.67k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 2.22k, False: 448]
  |  Branch (456:37): [True: 1.41k, False: 1.26k]
  |  Branch (456:53): [True: 1.41k, False: 812]
  ------------------
  457|  1.41k|                                {
  458|  1.41k|                                    return OpCode::BNEZ;
  459|  1.41k|                                }
  460|  5.64k|                        }
  461|  2.80k|                        break;
  462|       |
  463|  2.80k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 1.08k, False: 57.5k]
  ------------------
  464|  4.50k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 3.42k, False: 55.2k]
  ------------------
  465|  4.50k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 3.32k, False: 1.17k]
  |  Branch (465:29): [True: 2.92k, False: 1.57k]
  |  Branch (465:45): [True: 2.92k, False: 402]
  ------------------
  466|  2.92k|                        {
  467|  2.92k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 216, False: 2.71k]
  ------------------
  468|  2.92k|                            {
  469|    322|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 322, False: 2.60k]
  ------------------
  470|    517|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 195, False: 2.73k]
  ------------------
  471|    517|                                    return OpCode::DIVD;
  472|       |
  473|    450|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 450, False: 2.47k]
  ------------------
  474|    645|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 195, False: 2.73k]
  ------------------
  475|    645|                                    return OpCode::DIVF;
  476|       |
  477|    451|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 451, False: 2.47k]
  ------------------
  478|    645|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 194, False: 2.73k]
  ------------------
  479|    645|                                    return OpCode::DIVI;
  480|       |
  481|    323|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 323, False: 2.60k]
  ------------------
  482|    903|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 580, False: 2.34k]
  ------------------
  483|    903|                                    return OpCode::DIVU;
  484|  2.92k|                            }
  485|  2.92k|                        }
  486|  1.79k|                        break;
  487|       |
  488|  1.79k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 348, False: 58.3k]
  ------------------
  489|  1.26k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 920, False: 57.7k]
  ------------------
  490|  1.26k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 933, False: 335]
  |  Branch (490:29): [True: 388, False: 880]
  |  Branch (490:45): [True: 721, False: 212]
  |  Branch (490:61): [True: 388, False: 333]
  ------------------
  491|    388|                        {
  492|    388|                            return OpCode::HALT;
  493|    388|                        }
  494|    880|                        break;
  495|       |
  496|    880|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 478, False: 58.1k]
  ------------------
  497|  2.30k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 1.82k, False: 56.8k]
  ------------------
  498|  2.30k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 1.80k, False: 500]
  |  Branch (498:29): [True: 388, False: 1.91k]
  |  Branch (498:45): [True: 1.16k, False: 637]
  |  Branch (498:61): [True: 388, False: 777]
  ------------------
  499|    388|                        {
  500|    388|                            return OpCode::JALR;
  501|    388|                        }
  502|  1.91k|                        break;
  503|       |
  504|  1.91k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 294, False: 58.3k]
  ------------------
  505|  3.25k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 2.95k, False: 55.6k]
  ------------------
  506|  3.25k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 1.70k, False: 1.55k]
  |  Branch (506:29): [True: 1.45k, False: 1.80k]
  |  Branch (506:45): [True: 1.45k, False: 251]
  ------------------
  507|  1.45k|                        {
  508|  1.45k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 644, False: 807]
  ------------------
  509|    644|                            {
  510|    644|                                return OpCode::MOVD;
  511|    644|                            }
  512|    807|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 388, False: 419]
  ------------------
  513|    388|                            {
  514|    388|                                return OpCode::MOVF;
  515|    388|                            }
  516|  1.45k|                        }
  517|  1.80k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 1.41k, False: 389]
  |  Branch (517:34): [True: 646, False: 1.15k]
  |  Branch (517:50): [True: 877, False: 535]
  |  Branch (517:66): [True: 646, False: 231]
  ------------------
  518|    646|                        {
  519|    646|                            return OpCode::MULT;
  520|    646|                        }
  521|  1.57k|                        break;
  522|       |
  523|  8.74k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 8.74k, False: 49.9k]
  ------------------
  524|  21.1k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 12.3k, False: 46.2k]
  ------------------
  525|  21.1k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 708, False: 20.4k]
  ------------------
  526|  21.1k|                        {
  527|  1.47k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 1.47k, False: 19.6k]
  ------------------
  528|  1.88k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 409, False: 20.7k]
  ------------------
  529|  1.88k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 1.48k, False: 399]
  ------------------
  530|  1.48k|                                {
  531|  1.48k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 662, False: 819]
  ------------------
  532|    662|                                    {
  533|    662|                                        return OpCode::SEQI;
  534|    662|                                    }
  535|    819|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 407, False: 412]
  ------------------
  536|    407|                                    {
  537|    407|                                        return OpCode::SEQU;
  538|    407|                                    }
  539|  1.48k|                                }
  540|    811|                                break;
  541|       |
  542|  1.97k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 1.97k, False: 19.1k]
  ------------------
  543|  4.77k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 2.80k, False: 18.3k]
  ------------------
  544|  4.77k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 2.04k, False: 2.73k]
  ------------------
  545|  2.04k|                                {
  546|  2.04k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 644, False: 1.40k]
  ------------------
  547|    644|                                    {
  548|    644|                                        return OpCode::SGEI;
  549|    644|                                    }
  550|  1.40k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 774, False: 629]
  ------------------
  551|    774|                                    {
  552|    774|                                        return OpCode::SGEU;
  553|    774|                                    }
  554|  2.04k|                                }
  555|  2.73k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 1.86k, False: 864]
  ------------------
  556|  1.86k|                                {
  557|  1.86k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 388, False: 1.47k]
  ------------------
  558|    388|                                    {
  559|    388|                                        return OpCode::SGTI;
  560|    388|                                    }
  561|  1.47k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 999, False: 479]
  ------------------
  562|    999|                                    {
  563|    999|                                        return OpCode::SGTU;
  564|    999|                                    }
  565|  1.86k|                                }
  566|  1.97k|                                break;
  567|       |
  568|  2.18k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 2.18k, False: 18.9k]
  ------------------
  569|  5.93k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 3.74k, False: 17.3k]
  ------------------
  570|  5.93k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 214, False: 5.71k]
  ------------------
  571|  5.93k|                                {
  572|    632|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 632, False: 5.30k]
  ------------------
  573|    912|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 280, False: 5.65k]
  ------------------
  574|    912|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 644, False: 268]
  ------------------
  575|    644|                                        {
  576|    644|                                            return OpCode::SLAI;
  577|    644|                                        }
  578|    268|                                        break;
  579|       |
  580|  1.66k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 1.66k, False: 4.27k]
  ------------------
  581|  1.94k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 283, False: 5.65k]
  ------------------
  582|  1.94k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 516, False: 1.42k]
  ------------------
  583|    516|                                        {
  584|    516|                                            return OpCode::SLEI;
  585|    516|                                        }
  586|  1.42k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 1.15k, False: 269]
  ------------------
  587|  1.15k|                                        {
  588|  1.15k|                                            return OpCode::SLEU;
  589|  1.15k|                                        }
  590|    269|                                        break;
  591|       |
  592|    502|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 502, False: 5.43k]
  ------------------
  593|    984|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 482, False: 5.45k]
  ------------------
  594|    984|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 772, False: 212]
  ------------------
  595|    772|                                        {
  596|    772|                                            return OpCode::SLLI;
  597|    772|                                        }
  598|    212|                                        break;
  599|       |
  600|    916|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 916, False: 5.01k]
  ------------------
  601|  1.87k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 963, False: 4.97k]
  ------------------
  602|  1.87k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 644, False: 1.23k]
  ------------------
  603|    644|                                        {
  604|    644|                                            return OpCode::SLTI;
  605|    644|                                        }
  606|  1.23k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 388, False: 847]
  ------------------
  607|    388|                                        {
  608|    388|                                            return OpCode::SLTU;
  609|    388|                                        }
  610|    847|                                        break;
  611|  5.93k|                                }
  612|       |
  613|  2.04k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 239, False: 20.8k]
  ------------------
  614|  4.03k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 1.98k, False: 19.1k]
  ------------------
  615|  4.03k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 2.21k, False: 1.81k]
  ------------------
  616|  2.21k|                                {
  617|  2.21k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 644, False: 1.57k]
  ------------------
  618|    644|                                    {
  619|    644|                                        return OpCode::SNEI;
  620|    644|                                    }
  621|  1.57k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 643, False: 932]
  ------------------
  622|    643|                                    {
  623|    643|                                        return OpCode::SNEU;
  624|    643|                                    }
  625|  2.21k|                                }
  626|  2.74k|                                break;
  627|       |
  628|  2.74k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 897, False: 20.2k]
  ------------------
  629|  1.69k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 793, False: 20.3k]
  ------------------
  630|  1.69k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 906, False: 784]
  |  Branch (630:37): [True: 388, False: 1.30k]
  |  Branch (630:53): [True: 388, False: 518]
  ------------------
  631|    388|                                {
  632|    388|                                    return OpCode::SRAI;
  633|    388|                                }
  634|  1.30k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 779, False: 523]
  |  Branch (634:42): [True: 388, False: 914]
  |  Branch (634:58): [True: 388, False: 391]
  ------------------
  635|    388|                                {
  636|    388|                                    return OpCode::SRLI;
  637|    388|                                }
  638|    914|                                break;
  639|       |
  640|  1.15k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 1.15k, False: 19.9k]
  ------------------
  641|  3.90k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 2.74k, False: 18.3k]
  ------------------
  642|  3.90k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 3.43k, False: 476]
  ------------------
  643|  3.43k|                                {
  644|  3.43k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 464, False: 2.96k]
  ------------------
  645|  3.43k|                                    {
  646|    194|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 194, False: 3.23k]
  ------------------
  647|  1.28k|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 1.09k, False: 2.33k]
  ------------------
  648|  1.28k|                                            return OpCode::SUBD;
  649|       |
  650|    450|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 450, False: 2.98k]
  ------------------
  651|    900|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 450, False: 2.98k]
  ------------------
  652|    900|                                            return OpCode::SUBF;
  653|       |
  654|    194|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 194, False: 3.23k]
  ------------------
  655|    388|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 194, False: 3.23k]
  ------------------
  656|    388|                                            return OpCode::SUBI;
  657|       |
  658|    198|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 198, False: 3.23k]
  ------------------
  659|    393|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 195, False: 3.23k]
  ------------------
  660|    393|                                            return OpCode::SUBU;
  661|  3.43k|                                    }
  662|  3.43k|                                }
  663|    940|                                break;
  664|  21.1k|                        }
  665|  8.08k|                        break;
  666|       |
  667|  8.08k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 200, False: 58.4k]
  ------------------
  668|  1.24k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 1.04k, False: 57.6k]
  ------------------
  669|  1.24k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 1.03k, False: 213]
  |  Branch (669:29): [True: 388, False: 857]
  |  Branch (669:45): [True: 582, False: 450]
  |  Branch (669:61): [True: 388, False: 194]
  ------------------
  670|    388|                        {
  671|    388|                            return OpCode::TRAP;
  672|    388|                        }
  673|    857|                        break;
  674|  1.41k|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 1.41k, False: 57.2k]
  ------------------
  675|  3.42k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 2.00k, False: 56.6k]
  ------------------
  676|  3.42k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 3.07k, False: 350]
  |  Branch (676:29): [True: 2.18k, False: 1.24k]
  |  Branch (676:45): [True: 2.79k, False: 279]
  |  Branch (676:61): [True: 2.18k, False: 615]
  ------------------
  677|  2.18k|                        {
  678|  2.18k|                            return OpCode::XORI;
  679|  2.18k|                        }
  680|  1.24k|                        break;
  681|  58.6k|                }
  682|  30.6k|                break;
  683|  58.6k|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|  34.2k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 34.2k, False: 193k]
  ------------------
  687|  34.2k|                const char c1 = token[0u];
  688|  34.2k|                const char c2 = token[1u];
  689|  34.2k|                const char c3 = token[2u];
  690|  34.2k|                const char c4 = token[3u];
  691|  34.2k|                const char c5 = token[4u];
  692|       |
  693|  34.2k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 5.34k, False: 28.8k]
  ------------------
  694|  34.2k|                {
  695|  1.05k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 1.05k, False: 33.1k]
  ------------------
  696|  2.83k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 1.77k, False: 32.4k]
  ------------------
  697|  2.83k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 2.57k, False: 264]
  |  Branch (697:29): [True: 772, False: 2.06k]
  |  Branch (697:45): [True: 2.25k, False: 322]
  |  Branch (697:61): [True: 1.46k, False: 781]
  |  Branch (697:77): [True: 772, False: 697]
  ------------------
  698|    772|                        {
  699|    772|                            return OpCode::ADDUI;
  700|    772|                        }
  701|  2.06k|                        break;
  702|       |
  703|  2.06k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 516, False: 33.7k]
  ------------------
  704|  2.85k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 2.33k, False: 31.8k]
  ------------------
  705|  2.85k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 2.28k, False: 570]
  |  Branch (705:29): [True: 516, False: 2.33k]
  |  Branch (705:45): [True: 1.91k, False: 374]
  |  Branch (705:61): [True: 1.41k, False: 494]
  |  Branch (705:77): [True: 516, False: 901]
  ------------------
  706|    516|                        {
  707|    516|                            return OpCode::DIVUI;
  708|    516|                        }
  709|  2.33k|                        break;
  710|       |
  711|  2.33k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 930, False: 33.2k]
  ------------------
  712|  7.09k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 6.16k, False: 28.0k]
  ------------------
  713|  7.09k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 5.84k, False: 1.24k]
  |  Branch (713:29): [True: 4.19k, False: 2.89k]
  |  Branch (713:45): [True: 4.49k, False: 1.35k]
  |  Branch (713:61): [True: 4.19k, False: 292]
  ------------------
  714|  4.19k|                        {
  715|  4.19k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 493, False: 3.70k]
  ------------------
  716|  4.19k|                            {
  717|    450|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 450, False: 3.74k]
  ------------------
  718|    772|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 322, False: 3.87k]
  ------------------
  719|    772|                                    return OpCode::MULTD;
  720|       |
  721|    194|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 194, False: 4.00k]
  ------------------
  722|    389|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 195, False: 4.00k]
  ------------------
  723|    389|                                    return OpCode::MULTF;
  724|       |
  725|    834|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 834, False: 3.36k]
  ------------------
  726|  1.02k|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 194, False: 4.00k]
  ------------------
  727|  1.02k|                                    return OpCode::MULTI;
  728|       |
  729|    706|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 706, False: 3.49k]
  ------------------
  730|  1.51k|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 811, False: 3.38k]
  ------------------
  731|  1.51k|                                    return OpCode::MULTU;
  732|  4.19k|                            }
  733|  4.19k|                        }
  734|  3.38k|                        break;
  735|       |
  736|  6.62k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 6.62k, False: 27.5k]
  ------------------
  737|  16.0k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 9.47k, False: 24.7k]
  ------------------
  738|  16.0k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 289, False: 15.8k]
  ------------------
  739|  16.0k|                        {
  740|  2.27k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 2.27k, False: 13.8k]
  ------------------
  741|  2.80k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 527, False: 15.5k]
  ------------------
  742|  2.80k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 2.28k, False: 512]
  |  Branch (742:37): [True: 644, False: 2.15k]
  |  Branch (742:53): [True: 1.31k, False: 976]
  |  Branch (742:69): [True: 644, False: 669]
  ------------------
  743|    644|                                {
  744|    644|                                    return OpCode::SEQUI;
  745|    644|                                }
  746|  2.15k|                                break;
  747|       |
  748|  2.15k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 1.68k, False: 14.4k]
  ------------------
  749|  3.51k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 1.82k, False: 14.2k]
  ------------------
  750|  3.51k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 1.40k, False: 2.10k]
  |  Branch (750:37): [True: 644, False: 2.86k]
  |  Branch (750:53): [True: 856, False: 550]
  |  Branch (750:69): [True: 644, False: 212]
  ------------------
  751|    644|                                {
  752|    644|                                    return OpCode::SGEUI;
  753|    644|                                }
  754|  2.86k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 2.09k, False: 775]
  |  Branch (754:42): [True: 773, False: 2.09k]
  |  Branch (754:58): [True: 1.57k, False: 523]
  |  Branch (754:74): [True: 773, False: 798]
  ------------------
  755|    773|                                {
  756|    773|                                    return OpCode::SGTUI;
  757|    773|                                }
  758|  2.09k|                                break;
  759|       |
  760|  2.09k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 1.46k, False: 14.6k]
  ------------------
  761|  4.06k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 2.60k, False: 13.4k]
  ------------------
  762|  4.06k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 2.05k, False: 2.01k]
  |  Branch (762:37): [True: 516, False: 3.54k]
  |  Branch (762:53): [True: 1.67k, False: 373]
  |  Branch (762:69): [True: 516, False: 1.16k]
  ------------------
  763|    516|                                {
  764|    516|                                    return OpCode::SLEUI;
  765|    516|                                }
  766|  3.54k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 1.70k, False: 1.84k]
  |  Branch (766:42): [True: 644, False: 2.90k]
  |  Branch (766:58): [True: 1.03k, False: 672]
  |  Branch (766:74): [True: 644, False: 387]
  ------------------
  767|    644|                                {
  768|    644|                                    return OpCode::SLTUI;
  769|    644|                                }
  770|  2.90k|                                break;
  771|       |
  772|  2.90k|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 242, False: 15.8k]
  ------------------
  773|  2.95k|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 2.70k, False: 13.3k]
  ------------------
  774|  2.95k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 2.71k, False: 237]
  |  Branch (774:37): [True: 1.41k, False: 1.53k]
  |  Branch (774:53): [True: 2.18k, False: 529]
  |  Branch (774:69): [True: 1.41k, False: 773]
  ------------------
  775|  1.41k|                                {
  776|  1.41k|                                    return OpCode::SNEUI;
  777|  1.41k|                                }
  778|  1.53k|                                break;
  779|       |
  780|  1.53k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 543, False: 15.5k]
  ------------------
  781|  2.48k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 1.93k, False: 14.1k]
  ------------------
  782|  2.48k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 2.15k, False: 323]
  |  Branch (782:37): [True: 442, False: 2.03k]
  |  Branch (782:53): [True: 1.00k, False: 1.15k]
  |  Branch (782:69): [True: 442, False: 561]
  ------------------
  783|    442|                                {
  784|    442|                                    return OpCode::SUBUI;
  785|    442|                                }
  786|  2.03k|                                break;
  787|  16.0k|                        }
  788|       |
  789|  11.0k|                        break;
  790|  34.2k|                }
  791|       |
  792|  24.1k|                break;
  793|  34.2k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|  24.1k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 18.5k, False: 209k]
  ------------------
  797|  18.5k|                const char c1 = token[0u];
  798|  18.5k|                const char c2 = token[1u];
  799|  18.5k|                const char c3 = token[2u];
  800|  18.5k|                const char c4 = token[3u];
  801|  18.5k|                const char c5 = token[4u];
  802|  18.5k|                const char c6 = token[5u];
  803|       |
  804|  18.5k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 8.88k, False: 9.69k]
  |  Branch (804:21): [True: 6.97k, False: 11.6k]
  |  Branch (804:37): [True: 8.64k, False: 240]
  |  Branch (804:53): [True: 6.97k, False: 1.67k]
  ------------------
  805|  6.97k|                {
  806|  6.97k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 667, False: 6.30k]
  ------------------
  807|  6.97k|                    {
  808|    860|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 860, False: 6.11k]
  ------------------
  809|  1.60k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 747, False: 6.22k]
  ------------------
  810|  1.60k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 1.38k, False: 219]
  ------------------
  811|  1.38k|                            {
  812|  1.38k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 516, False: 872]
  ------------------
  813|    516|                                {
  814|    516|                                    return OpCode::CVTD2F;
  815|    516|                                }
  816|    872|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 676, False: 196]
  ------------------
  817|    676|                                {
  818|    676|                                    return OpCode::CVTD2I;
  819|    676|                                }
  820|  1.38k|                            }
  821|    415|                            break;
  822|       |
  823|    415|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 243, False: 6.72k]
  ------------------
  824|  2.12k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 1.88k, False: 5.08k]
  ------------------
  825|  2.12k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 1.91k, False: 210]
  ------------------
  826|  1.91k|                            {
  827|  1.91k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 772, False: 1.14k]
  ------------------
  828|    772|                                {
  829|    772|                                    return OpCode::CVTF2D;
  830|    772|                                }
  831|  1.14k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 900, False: 244]
  ------------------
  832|    900|                                {
  833|    900|                                    return OpCode::CVTF2I;
  834|    900|                                }
  835|  1.91k|                            }
  836|    454|                            break;
  837|       |
  838|  2.05k|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 2.05k, False: 4.91k]
  ------------------
  839|  2.57k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 514, False: 6.45k]
  ------------------
  840|  2.57k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 1.73k, False: 833]
  ------------------
  841|  1.73k|                            {
  842|  1.73k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 772, False: 966]
  ------------------
  843|    772|                                {
  844|    772|                                    return OpCode::CVTI2D;
  845|    772|                                }
  846|    966|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 516, False: 450]
  ------------------
  847|    516|                                {
  848|    516|                                    return OpCode::CVTI2F;
  849|    516|                                }
  850|  1.73k|                            }
  851|  6.97k|                    }
  852|  6.97k|                }
  853|  11.6k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 6.14k, False: 5.46k]
  |  Branch (853:26): [True: 388, False: 11.2k]
  |  Branch (853:42): [True: 3.19k, False: 2.94k]
  |  Branch (853:58): [True: 1.86k, False: 1.33k]
  |  Branch (853:74): [True: 1.54k, False: 316]
  ------------------
  854|  11.6k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 1.20k, False: 335]
  |  Branch (854:42): [True: 388, False: 821]
  ------------------
  855|    388|                {
  856|    388|                    return OpCode::MULTUI;
  857|    388|                }
  858|  14.0k|                break;
  859|  18.5k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|  14.0k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 8.58k, False: 219k]
  ------------------
  863|  8.58k|                const char c1 = token[0u];
  864|  8.58k|                const char c2 = token[1u];
  865|  8.58k|                const char c3 = token[2u];
  866|  8.58k|                const char c4 = token[3u];
  867|  8.58k|                const char c5 = token[4u];
  868|  8.58k|                const char c6 = token[5u];
  869|  8.58k|                const char c7 = token[6u];
  870|       |
  871|  8.58k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 5.38k, False: 3.20k]
  |  Branch (871:21): [True: 4.32k, False: 4.26k]
  |  Branch (871:37): [True: 4.90k, False: 485]
  |  Branch (871:53): [True: 4.32k, False: 578]
  ------------------
  872|  4.32k|                {
  873|  4.32k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 2.25k, False: 2.06k]
  |  Branch (873:25): [True: 1.02k, False: 3.29k]
  |  Branch (873:41): [True: 1.80k, False: 450]
  |  Branch (873:54): [True: 1.48k, False: 323]
  |  Branch (873:70): [True: 1.02k, False: 453]
  ------------------
  874|  1.02k|                    {
  875|  1.02k|                        return OpCode::MOVI2FP;
  876|  1.02k|                    }
  877|  3.29k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 2.05k, False: 1.23k]
  |  Branch (877:25): [True: 644, False: 2.65k]
  |  Branch (877:41): [True: 1.54k, False: 509]
  |  Branch (877:57): [True: 1.09k, False: 453]
  |  Branch (877:70): [True: 644, False: 452]
  ------------------
  878|    644|                    {
  879|    644|                        return OpCode::MOVFP2I;
  880|    644|                    }
  881|  3.29k|                }
  882|  6.91k|                break;
  883|  8.58k|            }
  884|       |
  885|  6.91k|            default: {
  ------------------
  |  Branch (885:13): [True: 4.35k, False: 223k]
  ------------------
  886|  4.35k|                break;
  887|  8.58k|            }
  888|   227k|        }
  889|       |
  890|       |        // None found
  891|   141k|        return OpCode::NONE;
  892|   227k|    }
_ZN3dlx3iceEcc:
   17|   375k|    {
   18|   375k|        constexpr const char diff = 'a' - 'A';
   19|   375k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 114k, False: 261k]
  |  Branch (19:28): [True: 117k, False: 144k]
  ------------------
   20|   375k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   198k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|  2.33k|    {
  195|  2.33k|        ParseError err;
  196|       |
  197|  2.33k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|  2.33k|        err.m_LineNumber                           = line_number;
  199|  2.33k|        err.m_Column                               = column;
  200|  2.33k|        err.unexpected_argument_type.expected_type = expected_type;
  201|  2.33k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|  2.33k|        return err;
  204|  2.33k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|  2.33k|    {
  209|  2.33k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|  2.33k|                                                         token.GetColumn().unsafe(), expected_type,
  211|  2.33k|                                                         actual_type);
  212|  2.33k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|    450|    {
  218|    450|        ParseError err;
  219|       |
  220|    450|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|    450|        err.m_LineNumber        = line_number;
  222|    450|        err.m_Column            = column;
  223|    450|        err.invalid_number.text = text;
  224|       |
  225|    450|        return err;
  226|    450|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|    450|    {
  230|    450|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|    450|                                                token.GetColumn().unsafe(), token.GetText());
  232|    450|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|      2|    {
  237|      2|        ParseError err;
  238|       |
  239|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|      2|        err.m_LineNumber = line_number;
  241|      2|        err.m_Column     = column;
  242|       |
  243|      2|        return err;
  244|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|      2|    {
  249|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|      2|                                                                     token.GetColumn().unsafe());
  251|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  65.4k|    {
  257|  65.4k|        ParseError err;
  258|       |
  259|  65.4k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  65.4k|        err.m_LineNumber                   = line_number;
  261|  65.4k|        err.m_Column                       = column;
  262|  65.4k|        err.unexpected_token.expected_type = expected_type;
  263|  65.4k|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  65.4k|        return err;
  266|  65.4k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  65.4k|    {
  271|  65.4k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  65.4k|                                                  token.GetColumn().unsafe(), expected_type,
  273|  65.4k|                                                  token.GetType());
  274|  65.4k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|  32.6k|    {
  279|  32.6k|        ParseError err;
  280|       |
  281|  32.6k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|  32.6k|        err.m_LineNumber                   = line_number;
  283|  32.6k|        err.m_Column                       = column;
  284|  32.6k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|  32.6k|        return err;
  287|  32.6k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|    194|    {
  291|    194|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|    194|                                                    token.GetColumn().unsafe(), token.GetText());
  293|    194|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  39.2k|    {
  298|  39.2k|        ParseError err;
  299|       |
  300|  39.2k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  39.2k|        err.m_LineNumber                       = line_number;
  302|  39.2k|        err.m_Column                           = column;
  303|  39.2k|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  39.2k|        return err;
  306|  39.2k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  39.2k|    {
  311|  39.2k|        return ConstructInvalidLabelIdentifierParseError(
  312|  39.2k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  39.2k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|  10.7k|    {
  319|  10.7k|        ParseError err;
  320|       |
  321|  10.7k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|  10.7k|        err.m_LineNumber                     = line_number;
  323|  10.7k|        err.m_Column                         = column;
  324|  10.7k|        err.label_already_defined.label_name = label_name;
  325|  10.7k|        err.label_already_defined.at_line    = at_line;
  326|  10.7k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|  10.7k|        return err;
  329|  10.7k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|  10.7k|    {
  334|  10.7k|        return ConstructLabelAlreadyDefinedParseError(
  335|  10.7k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|  10.7k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|  10.7k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|  32.3k|    {
  342|  32.3k|        ParseError err;
  343|       |
  344|  32.3k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|  32.3k|        err.m_LineNumber = line_number;
  346|  32.3k|        err.m_Column     = column;
  347|       |
  348|  32.3k|        return err;
  349|  32.3k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|  32.3k|    {
  354|  32.3k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|  32.3k|                                                        token.GetColumn().unsafe());
  356|  32.3k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|  6.34k|    {
  362|  6.34k|        ParseError err;
  363|       |
  364|  6.34k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|  6.34k|        err.m_LineNumber               = line_number;
  366|  6.34k|        err.m_Column                   = column;
  367|  6.34k|        err.too_few_arguments.required = required;
  368|  6.34k|        err.too_few_arguments.provided = provided;
  369|       |
  370|  6.34k|        return err;
  371|  6.34k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|  6.34k|    {
  376|  6.34k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|  6.34k|                                                  token.GetColumn().unsafe(), required, provided);
  378|  6.34k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|  8.55k|    {
  383|  8.55k|        ParseError err;
  384|       |
  385|  8.55k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|  8.55k|        err.m_LineNumber           = line_number;
  387|  8.55k|        err.m_Column               = column;
  388|  8.55k|        err.empty_label.label_name = label_name;
  389|       |
  390|  8.55k|        return err;
  391|  8.55k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|  8.55k|    {
  395|  8.55k|        return ConstructEmptyLabelParseError(
  396|  8.55k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|  8.55k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 6.90k, False: 1.64k]
  ------------------
  398|  6.90k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|  8.55k|                        token.GetText());
  400|  8.55k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|    796|    {
  405|    796|        ParseError err;
  406|       |
  407|    796|        err.m_Type       = ParseError::Type::TooManyComma;
  408|    796|        err.m_LineNumber = line_number;
  409|    796|        err.m_Column     = column;
  410|       |
  411|    796|        return err;
  412|    796|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|    796|    {
  416|    796|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|    796|                                               token.GetColumn().unsafe());
  418|    796|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   198k|    {
   19|   198k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   198k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  4.56k|    {
  181|  4.56k|        ParsedProgram program;
  182|       |
  183|  4.56k|        program.m_Tokens = tokens;
  184|       |
  185|  4.56k|        phi::boolean line_has_instruction{false};
  186|  4.56k|        phi::usize   label_count{0u};
  187|       |
  188|   235k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 230k, False: 4.56k]
  ------------------
  189|   230k|        {
  190|   230k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   230k|            switch (current_token.GetType())
  195|   230k|            {
  196|       |                // Ignore comments
  197|    954|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 954, False: 229k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|    954|                    break;
  200|       |
  201|  28.6k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 28.6k, False: 202k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  28.6k|                    line_has_instruction = false;
  204|  28.6k|                    break;
  205|       |
  206|  94.0k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 94.0k, False: 136k]
  ------------------
  207|  94.0k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 7.98k, False: 86.0k]
  ------------------
  208|  7.98k|                    {
  209|  7.98k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  7.98k|                                current_token, Token::Type::NewLine));
  211|  7.98k|                        break;
  212|  7.98k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  86.0k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 20.7k, False: 65.2k]
  ------------------
  217|  20.7k|                    {
  218|  20.7k|                        program.AddParseError(
  219|  20.7k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  20.7k|                        break;
  221|  20.7k|                    }
  222|       |
  223|  65.2k|                    phi::string_view label_name = current_token.GetText();
  224|  65.2k|                    label_name.remove_suffix(1u);
  225|       |
  226|  65.2k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 32.4k, False: 32.7k]
  ------------------
  227|  32.4k|                    {
  228|  32.4k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|  32.4k|                                current_token.GetLineNumber().unsafe(),
  230|  32.4k|                                current_token.GetColumn().unsafe(), label_name));
  231|  32.4k|                        break;
  232|  32.4k|                    }
  233|       |
  234|  32.7k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 13.0k, False: 19.6k]
  ------------------
  235|  13.0k|                    {
  236|  13.0k|                        program.AddParseError(
  237|  13.0k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  13.0k|                        break;
  239|  13.0k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  19.6k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 10.7k, False: 8.93k]
  ------------------
  243|  10.7k|                    {
  244|       |                        // Find first defintions of label
  245|  10.7k|                        const Token* first_label_definition =
  246|  10.7k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  10.7k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  10.7k|                                    {
  249|  10.7k|                                        phi::string_view token_label_name = t.GetText();
  250|  10.7k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  10.7k|                                        if (token_label_name == label_name)
  253|  10.7k|                                        {
  254|  10.7k|                                            return true;
  255|  10.7k|                                        }
  256|  10.7k|                                    }
  257|       |
  258|  10.7k|                                    return false;
  259|  10.7k|                                });
  260|       |
  261|  10.7k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  10.7k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  10.7k|                                current_token, *first_label_definition));
  265|  10.7k|                        break;
  266|  10.7k|                    }
  267|       |
  268|  8.93k|                    program.m_JumpData[label_name] =
  269|  8.93k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|  8.93k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  8.93k|                    break;
  276|  19.6k|                }
  277|       |
  278|  54.2k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 54.2k, False: 176k]
  ------------------
  279|  54.2k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 32.3k, False: 21.8k]
  ------------------
  280|  32.3k|                    {
  281|  32.3k|                        program.AddParseError(
  282|  32.3k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  32.3k|                        break;
  284|  32.3k|                    }
  285|       |
  286|  21.8k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  21.8k|                    PHI_ASSERT(current_token.HasHint());
  290|  21.8k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  21.8k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  21.8k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  21.8k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  21.8k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  21.8k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  21.8k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  21.8k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  21.8k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  37.4k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 34.9k, False: 2.55k]
  ------------------
  312|  34.9k|                    {
  313|       |                        // Get next token
  314|  34.9k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 751, False: 34.1k]
  ------------------
  315|    751|                        {
  316|    751|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    751|                                    current_token, number_of_argument_required.unsafe(),
  318|    751|                                    argument_num.unsafe()));
  319|    751|                            break;
  320|    751|                        }
  321|       |
  322|  34.1k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  34.1k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 10.6k, False: 23.4k]
  ------------------
  326|  10.6k|                        {
  327|  10.6k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 796, False: 9.89k]
  ------------------
  328|    796|                            {
  329|    796|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    796|                            }
  331|       |
  332|  10.6k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  10.6k|                            continue;
  335|  10.6k|                        }
  336|       |
  337|  23.4k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 5.59k, False: 17.8k]
  ------------------
  338|  5.59k|                        {
  339|  5.59k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  5.59k|                                    token, number_of_argument_required.unsafe(),
  341|  5.59k|                                    argument_num.unsafe()));
  342|  5.59k|                            break;
  343|  5.59k|                        }
  344|       |
  345|  17.8k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  17.8k|                                parse_instruction_argument(
  347|  17.8k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  17.8k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 12.9k, False: 4.89k]
  ------------------
  349|  12.9k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  12.9k|                            break;
  352|  12.9k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  4.89k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  4.89k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  4.89k|                        argument_num++;
  359|  4.89k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  4.89k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  21.8k|                    program.m_Instructions.emplace_back(instruction);
  367|  21.8k|                    line_has_instruction = true;
  368|  21.8k|                    break;
  369|  54.2k|                }
  370|       |
  371|  52.8k|                default:
  ------------------
  |  Branch (371:17): [True: 52.8k, False: 177k]
  ------------------
  372|  52.8k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  52.8k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 28.1k, False: 24.7k]
  ------------------
  374|  28.1k|                    {
  375|  28.1k|                        expected_token_type = Token::Type::NewLine;
  376|  28.1k|                    }
  377|       |
  378|  52.8k|                    program.AddParseError(
  379|  52.8k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  52.8k|                    break;
  381|   230k|            }
  382|   230k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  4.56k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 655, False: 3.91k]
  ------------------
  386|    655|        {
  387|  11.1k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 10.4k, False: 655]
  ------------------
  388|  10.4k|            {
  389|  10.4k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  10.4k|                const Token& token = *it;
  392|  10.4k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 8.55k, False: 1.90k]
  ------------------
  393|  8.55k|                {
  394|  8.55k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  8.55k|                    --label_count;
  396|  8.55k|                }
  397|  10.4k|            }
  398|    655|        }
  399|       |
  400|  4.56k|        return program;
  401|  4.56k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  4.56k|    {
  405|  4.56k|        TokenStream tokens = Tokenize(source);
  406|  4.56k|        return Parse(tokens);
  407|  4.56k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  17.8k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  17.8k|        switch (token.GetType())
   37|  17.8k|        {
   38|  2.42k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 2.42k, False: 15.4k]
  ------------------
   39|  2.42k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 580, False: 1.84k]
  ------------------
   40|  2.42k|                                          ArgumentType::AddressDisplacement))
   41|    580|                {
   42|    580|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    580|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    580|                    return {};
   46|    580|                }
   47|       |
   48|       |                // Get address displacement
   49|  1.84k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  1.84k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  1.84k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 2, False: 1.83k]
  ------------------
   54|      2|                {
   55|      2|                    program.AddParseError(
   56|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      2|                    return {};
   58|      2|                }
   59|       |
   60|  1.83k|                auto         it           = tokens.current_position();
   61|  1.83k|                const Token& first_token  = tokens.consume();
   62|  1.83k|                const Token& second_token = tokens.consume();
   63|  1.83k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  1.83k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 200, False: 1.63k]
  ------------------
   66|    200|                {
   67|    200|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    200|                            first_token, Token::Type::OpenBracket));
   69|    200|                    return {};
   70|    200|                }
   71|       |
   72|       |                // Second token is the register
   73|  1.63k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 482, False: 1.15k]
  ------------------
   74|    482|                {
   75|    482|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|    482|                            second_token, Token::Type::RegisterInt));
   77|    482|                    return {};
   78|    482|                }
   79|       |
   80|  1.15k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 322, False: 834]
  ------------------
   81|    322|                {
   82|    322|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|    322|                            third_token, Token::Type::ClosingBracket));
   84|    322|                    return {};
   85|    322|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|    834|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|    834|                return ConstructInstructionArgumentAddressDisplacement(
   94|    834|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|  1.15k|            }
   96|    799|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 799, False: 17.0k]
  ------------------
   97|    799|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 452, False: 347]
  ------------------
   98|    452|                {
   99|    452|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    452|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    452|                    return {};
  102|    452|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|    347|                return ConstructInstructionArgumentRegisterInt(
  108|    347|                        static_cast<IntRegisterID>(token.GetHint()));
  109|    799|            }
  110|  2.18k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 2.18k, False: 15.6k]
  ------------------
  111|  2.18k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 194, False: 1.99k]
  ------------------
  112|    194|                {
  113|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    194|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    194|                    return {};
  116|    194|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  1.99k|                return ConstructInstructionArgumentRegisterFloat(
  122|  1.99k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  2.18k|            }
  124|    194|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 194, False: 17.6k]
  ------------------
  125|    194|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|    194|                return {};
  128|  2.18k|            }
  129|  7.64k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 7.64k, False: 10.2k]
  ------------------
  130|       |                // Parse as Label
  131|  7.64k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 913, False: 6.73k]
  ------------------
  132|    913|                {
  133|    913|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|    913|                            token, expected_argument_type, ArgumentType::Label));
  135|    913|                    return {};
  136|    913|                }
  137|       |
  138|  6.73k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 6.73k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  6.73k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 5.34k, False: 1.38k]
  ------------------
  145|  5.34k|                {
  146|  5.34k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  5.34k|                    return {};
  148|  5.34k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  1.38k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  6.73k|            }
  154|    980|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 980, False: 16.8k]
  ------------------
  155|    980|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 195, False: 785]
  ------------------
  156|    195|                {
  157|    195|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    195|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    195|                    return {};
  160|    195|                }
  161|       |
  162|    785|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 335, False: 450]
  ------------------
  163|    335|                {
  164|    335|                    return ConstructInstructionArgumentImmediateValue(
  165|    335|                            static_cast<std::int16_t>(token.GetHint()));
  166|    335|                }
  167|       |
  168|    450|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    450|                return {};
  170|    785|            }
  171|       |
  172|  3.63k|            default:
  ------------------
  |  Branch (172:13): [True: 3.63k, False: 14.2k]
  ------------------
  173|  3.63k|                program.AddParseError(
  174|  3.63k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  3.63k|                return {};
  176|  17.8k|        }
  177|  17.8k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  54.9k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  54.9k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 45.5k, False: 9.37k]
  ------------------
  248|  45.5k|                                    {
  249|  45.5k|                                        phi::string_view token_label_name = t.GetText();
  250|  45.5k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  45.5k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 10.7k, False: 34.8k]
  ------------------
  253|  10.7k|                                        {
  254|  10.7k|                                            return true;
  255|  10.7k|                                        }
  256|  45.5k|                                    }
  257|       |
  258|  44.2k|                                    return false;
  259|  54.9k|                                });

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|   235k|    {
   13|   235k|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 33.7k, False: 202k]
  ------------------
   14|  33.7k|        {
   15|  33.7k|            const char first_char = token[0u];
   16|  33.7k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 391, False: 33.3k]
  |  Branch (16:38): [True: 3.43k, False: 29.9k]
  ------------------
   17|  3.82k|            {
   18|  3.82k|                const char second_char = token[1u];
   19|  3.82k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 3.42k, False: 403]
  |  Branch (19:43): [True: 3.00k, False: 422]
  ------------------
   20|  3.00k|                {
   21|  3.00k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  3.00k|                }
   23|  3.82k|            }
   24|  33.7k|        }
   25|   202k|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 50.4k, False: 151k]
  ------------------
   26|  50.4k|        {
   27|  50.4k|            const char first_char = token[0u];
   28|  50.4k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 206, False: 50.2k]
  |  Branch (28:38): [True: 5.01k, False: 45.2k]
  ------------------
   29|  5.22k|            {
   30|  5.22k|                const char second_char = token[1u];
   31|  5.22k|                const char third_char  = token[2u];
   32|       |
   33|  5.22k|                switch (second_char)
   34|  5.22k|                {
   35|  1.02k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 1.02k, False: 4.19k]
  ------------------
   36|  1.02k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 516, False: 513]
  |  Branch (36:50): [True: 322, False: 194]
  ------------------
   37|    322|                        {
   38|    322|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|    322|                        }
   40|    707|                        break;
   41|  1.02k|                    }
   42|  2.69k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 2.69k, False: 2.53k]
  ------------------
   43|  2.69k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 517, False: 2.17k]
  |  Branch (43:50): [True: 322, False: 195]
  ------------------
   44|    322|                        {
   45|    322|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|    322|                        }
   47|  2.36k|                        break;
   48|  2.69k|                    }
   49|  2.36k|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 1.16k, False: 4.05k]
  ------------------
   50|  1.16k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 322, False: 846]
  |  Branch (50:50): [True: 322, False: 524]
  ------------------
   51|    644|                        {
   52|    644|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|    644|                        }
   54|    524|                        break;
   55|  1.16k|                    }
   56|    524|                    default: {
  ------------------
  |  Branch (56:21): [True: 336, False: 4.88k]
  ------------------
   57|    336|                        break;
   58|  1.16k|                    }
   59|  5.22k|                }
   60|  5.22k|            }
   61|  50.4k|        }
   62|       |
   63|   231k|        return IntRegisterID::None;
   64|   235k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|   231k|    {
   68|   231k|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 30.7k, False: 200k]
  ------------------
   69|  30.7k|        {
   70|  30.7k|            const char first_char = token[0u];
   71|  30.7k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 3.08k, False: 27.6k]
  |  Branch (71:38): [True: 867, False: 26.7k]
  ------------------
   72|  3.95k|            {
   73|  3.95k|                const char second_char = token[1u];
   74|  3.95k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 3.69k, False: 252]
  |  Branch (74:43): [True: 2.97k, False: 723]
  ------------------
   75|  2.97k|                {
   76|  2.97k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  2.97k|                }
   78|  3.95k|            }
   79|  30.7k|        }
   80|   200k|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 49.1k, False: 151k]
  ------------------
   81|  49.1k|        {
   82|  49.1k|            const char first_char = token[0u];
   83|  49.1k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 1.77k, False: 47.3k]
  |  Branch (83:38): [True: 1.39k, False: 45.9k]
  ------------------
   84|  3.16k|            {
   85|  3.16k|                const char second_char = token[1u];
   86|  3.16k|                const char third_char  = token[2u];
   87|       |
   88|  3.16k|                switch (second_char)
   89|  3.16k|                {
   90|    720|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 720, False: 2.44k]
  ------------------
   91|    720|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 526, False: 194]
  |  Branch (91:50): [True: 322, False: 204]
  ------------------
   92|    322|                        {
   93|    322|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|    322|                        }
   95|    398|                        break;
   96|    720|                    }
   97|    622|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 622, False: 2.54k]
  ------------------
   98|    622|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 428, False: 194]
  |  Branch (98:50): [True: 233, False: 195]
  ------------------
   99|    233|                        {
  100|    233|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|    233|                        }
  102|    389|                        break;
  103|    622|                    }
  104|    854|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 854, False: 2.31k]
  ------------------
  105|    854|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 194, False: 660]
  |  Branch (105:50): [True: 206, False: 454]
  ------------------
  106|    400|                        {
  107|    400|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|    400|                        }
  109|    454|                        break;
  110|    854|                    }
  111|    968|                    default: {
  ------------------
  |  Branch (111:21): [True: 968, False: 2.19k]
  ------------------
  112|    968|                        break;
  113|    854|                    }
  114|  3.16k|                }
  115|  3.16k|            }
  116|  49.1k|        }
  117|       |
  118|   227k|        return FloatRegisterID::None;
  119|   231k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|   204k|    {
  123|   204k|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 47.1k, False: 157k]
  ------------------
  124|  47.1k|        {
  125|  47.1k|            const char c1 = token[0u];
  126|  47.1k|            const char c2 = token[1u];
  127|  47.1k|            const char c3 = token[2u];
  128|  47.1k|            const char c4 = token[3u];
  129|       |
  130|  47.1k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 1.40k, False: 45.7k]
  |  Branch (130:34): [True: 1.23k, False: 44.5k]
  |  Branch (130:49): [True: 1.19k, False: 1.44k]
  |  Branch (130:62): [True: 194, False: 1.24k]
  ------------------
  131|  47.1k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 199, False: 1.18k]
  |  Branch (131:34): [True: 946, False: 241]
  |  Branch (131:49): [True: 194, False: 951]
  |  Branch (131:62): [True: 769, False: 182]
  ------------------
  132|  47.1k|        }
  133|       |
  134|   157k|        return false;
  135|   204k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|   203k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  66.4k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|   441k|    {
   41|   441k|        return m_Type;
   42|   441k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   231k|    {
   51|   231k|        return m_LineNumber;
   52|   231k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   209k|    {
   56|   209k|        return m_Column;
   57|   209k|    }
_ZNK3dlx5Token7GetTextEv:
   65|   286k|    {
   66|   286k|        return m_Text;
   67|   286k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  24.4k|    {
   80|  24.4k|        return m_HasHint;
   81|  24.4k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  27.2k|    {
   85|  27.2k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  27.2k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  27.2k|                   m_Type == Type::ImmediateInteger);
   88|  27.2k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  27.2k|        return m_Hint;
   91|  27.2k|    }

_ZN3dlx11TokenStream8finalizeEv:
   30|  4.56k|    {
   31|       |#if defined(PHI_DEBUG)
   32|       |        PHI_ASSERT(!m_Finialized);
   33|       |#endif
   34|       |
   35|  4.56k|        m_Iterator = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |        m_Finialized = true;
   38|       |#endif
   39|  4.56k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   51|  1.84k|    {
   52|  1.84k|        return x + m_Iterator <= m_Tokens.size();
   53|  1.84k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   56|   270k|    {
   57|   270k|        return m_Iterator < m_Tokens.size();
   58|   270k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   61|   270k|    {
   62|   270k|        return m_Iterator >= m_Tokens.size();
   63|   270k|    }
_ZN3dlx11TokenStream7consumeEv:
   76|   270k|    {
   77|   270k|        PHI_ASSERT(!reached_end());
   78|       |#if defined(PHI_DEBUG)
   79|       |        PHI_ASSERT(m_Finialized);
   80|       |#endif
   81|       |
   82|   270k|        return m_Tokens.at(m_Iterator++.unsafe());
   83|   270k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  155|  1.83k|    {
  156|  1.83k|        return m_Iterator;
  157|  1.83k|    }
_ZN3dlx11TokenStream12set_positionEN3phi7integerImEE:
  160|    834|    {
  161|       |#if defined(PHI_DEBUG)
  162|       |        PHI_ASSERT(m_Finialized);
  163|       |#endif
  164|       |
  165|    834|        m_Iterator = pos;
  166|    834|    }
_ZNK3dlx11TokenStream6rbeginEv:
  205|    655|    {
  206|       |#if defined(PHI_DEBUG)
  207|       |        //PHI_ASSERT(m_Finialized);
  208|       |#endif
  209|       |
  210|    655|        return m_Tokens.rbegin();
  211|    655|    }
_ZNK3dlx11TokenStream4rendEv:
  214|  10.4k|    {
  215|       |#if defined(PHI_DEBUG)
  216|       |        //PHI_ASSERT(m_Finialized);
  217|       |#endif
  218|       |
  219|  10.4k|        return m_Tokens.rend();
  220|  10.4k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  4.56k|    {
   66|  4.56k|        TokenStream tokens;
   67|       |
   68|  4.56k|        phi::string_view current_token;
   69|       |
   70|  4.56k|        phi::u64 current_line_number{1u};
   71|  4.56k|        phi::u64 current_column{1u};
   72|  4.56k|        phi::u64 token_begin{0u};
   73|       |
   74|  4.56k|        phi::boolean parsing_comment{false};
   75|       |
   76|   762k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 757k, False: 4.56k]
  ------------------
   77|   757k|        {
   78|   757k|            const char c{source.at(i)};
   79|       |
   80|   757k|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 34.3k, False: 723k]
  ------------------
   81|  34.3k|            {
   82|  34.3k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 7.47k, False: 26.9k]
  ------------------
   83|  7.47k|                {
   84|       |                    // Skip empty lines
   85|  7.47k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  7.47k|                                        current_line_number, current_column);
   87|       |
   88|  7.47k|                    parsing_comment = false;
   89|  7.47k|                    current_line_number += 1u;
   90|  7.47k|                    current_column = 1u;
   91|  7.47k|                    continue;
   92|  7.47k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  26.9k|                tokens.emplace_back(ParseToken(
   96|  26.9k|                        source.substring_view(
   97|  26.9k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  26.9k|                                current_token.length()),
   99|  26.9k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  26.9k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  26.9k|                                    current_line_number, current_column);
  103|       |
  104|  26.9k|                current_token   = phi::string_view{};
  105|  26.9k|                parsing_comment = false;
  106|  26.9k|                current_line_number += 1u;
  107|  26.9k|                current_column = 0u;
  108|  26.9k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|   723k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 633, False: 722k]
  |  Branch (110:34): [True: 774, False: 721k]
  ------------------
  111|  1.40k|            {
  112|  1.40k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 240, False: 1.16k]
  ------------------
  113|    240|                {
  114|    240|                    token_begin = i;
  115|    240|                }
  116|  1.16k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 791, False: 376]
  ------------------
  117|    791|                {
  118|    791|                    tokens.emplace_back(ParseToken(
  119|    791|                            source.substring_view(
  120|    791|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|    791|                                    current_token.length()),
  122|    791|                            current_line_number, current_column - current_token.length()));
  123|    791|                    token_begin   = i;
  124|    791|                    current_token = phi::string_view{};
  125|    791|                }
  126|       |
  127|  1.40k|                parsing_comment = true;
  128|  1.40k|                current_token   = source.substring_view(
  129|  1.40k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  1.40k|                        current_token.length() + 1u);
  131|  1.40k|            }
  132|   721k|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 300, False: 721k]
  ------------------
  133|    300|            {
  134|       |                // simply append the character
  135|    300|                current_token = source.substring_view(
  136|    300|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|    300|                        current_token.length() + 1u);
  138|    300|            }
  139|   721k|            else
  140|   721k|            {
  141|       |                // Not parsing a comment
  142|   721k|                switch (c)
  143|   721k|                {
  144|  6.94k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 6.94k, False: 714k]
  ------------------
  145|  13.3k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 6.39k, False: 715k]
  ------------------
  146|  21.9k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 8.56k, False: 712k]
  ------------------
  147|  21.9k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 2.49k, False: 19.4k]
  ------------------
  148|  2.49k|                        {
  149|  2.49k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|  2.49k|                            continue;
  152|  2.49k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  19.4k|                        tokens.emplace_back(ParseToken(
  156|  19.4k|                                source.substring_view(
  157|  19.4k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  19.4k|                                        current_token.length()),
  159|  19.4k|                                current_line_number, current_column - current_token.length()));
  160|  19.4k|                        current_token = phi::string_view{};
  161|  19.4k|                        break;
  162|  73.4k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 73.4k, False: 647k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  73.4k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 68.8k, False: 4.54k]
  ------------------
  165|  68.8k|                        {
  166|  68.8k|                            current_token = source.substring_view(
  167|  68.8k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  68.8k|                                    current_token.length() + 1u);
  169|  68.8k|                            tokens.emplace_back(ParseToken(
  170|  68.8k|                                    source.substring_view(
  171|  68.8k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  68.8k|                                                    token_begin),
  173|  68.8k|                                            current_token.length()),
  174|  68.8k|                                    current_line_number,
  175|  68.8k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  68.8k|                            current_token = phi::string_view{};
  178|  68.8k|                        }
  179|  4.54k|                        else
  180|  4.54k|                        {
  181|       |                            // Orphan colon
  182|  4.54k|                            token_begin = i;
  183|       |
  184|  4.54k|                            tokens.emplace_back(
  185|  4.54k|                                    Token::Type::Colon,
  186|  4.54k|                                    source.substring_view(
  187|  4.54k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  4.54k|                                                    token_begin),
  189|  4.54k|                                            1u),
  190|  4.54k|                                    current_line_number, current_column);
  191|  4.54k|                        }
  192|  73.4k|                        break;
  193|  30.8k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 30.8k, False: 690k]
  ------------------
  194|  57.4k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 26.5k, False: 694k]
  ------------------
  195|  60.5k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 3.10k, False: 718k]
  ------------------
  196|  60.5k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 51.5k, False: 9.00k]
  ------------------
  197|  51.5k|                        {
  198|  51.5k|                            tokens.emplace_back(ParseToken(
  199|  51.5k|                                    source.substring_view(
  200|  51.5k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  51.5k|                                                    token_begin),
  202|  51.5k|                                            current_token.length()),
  203|  51.5k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  51.5k|                            current_token = phi::string_view{};
  206|  51.5k|                        }
  207|       |
  208|  60.5k|                        Token::Type type;
  209|  60.5k|                        switch (c)
  210|  60.5k|                        {
  211|  30.8k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 30.8k, False: 29.6k]
  ------------------
  212|  30.8k|                                type = Token::Type::Comma;
  213|  30.8k|                                break;
  214|  26.5k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 26.5k, False: 33.9k]
  ------------------
  215|  26.5k|                                type = Token::Type::OpenBracket;
  216|  26.5k|                                break;
  217|  3.10k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 3.10k, False: 57.4k]
  ------------------
  218|  3.10k|                                type = Token::Type::ClosingBracket;
  219|  3.10k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 60.5k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  60.5k|#endif
  225|  60.5k|                        }
  226|       |
  227|  60.5k|                        token_begin = i;
  228|       |
  229|  60.5k|                        tokens.emplace_back(
  230|  60.5k|                                type,
  231|  60.5k|                                source.substring_view(
  232|  60.5k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  60.5k|                                        1u),
  234|  60.5k|                                current_line_number, current_column);
  235|  60.5k|                        break;
  236|       |
  237|   565k|                    default:
  ------------------
  |  Branch (237:21): [True: 565k, False: 155k]
  ------------------
  238|   565k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 169k, False: 395k]
  ------------------
  239|   169k|                        {
  240|   169k|                            token_begin = i;
  241|   169k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   565k|                        current_token = source.substring_view(
  245|   565k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   565k|                                current_token.length() + 1u);
  247|   721k|                }
  248|   721k|            }
  249|       |
  250|   747k|            current_column += 1u;
  251|   747k|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  4.56k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 3.30k, False: 1.26k]
  ------------------
  255|  3.30k|        {
  256|  3.30k|            tokens.emplace_back(
  257|  3.30k|                    ParseToken(source.substring_view(
  258|  3.30k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  3.30k|                                       current_token.length()),
  260|  3.30k|                               current_line_number, current_column - current_token.length()));
  261|  3.30k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  4.56k|        tokens.finalize();
  265|       |
  266|  4.56k|        return tokens;
  267|  4.56k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   170k|    {
   14|   170k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 1.98k, False: 168k]
  |  Branch (14:13): [True: 1.33k, False: 169k]
  |  Branch (14:36): [True: 1.33k, False: 654]
  ------------------
   15|  1.33k|        {
   16|  1.33k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  1.33k|            if (number)
  ------------------
  |  Branch (18:17): [True: 659, False: 673]
  ------------------
   19|    659|            {
   20|    659|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|    659|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|    659|            }
   23|       |
   24|    673|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  1.33k|        }
   26|       |
   27|   169k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 446, False: 169k]
  |  Branch (27:13): [True: 1.03k, False: 168k]
  |  Branch (27:36): [True: 585, False: 168k]
  ------------------
   28|  1.03k|        {
   29|  1.03k|            return {Token::Type::Comment, token, line_number, column};
   30|  1.03k|        }
   31|       |
   32|   168k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 3.81k, False: 164k]
  ------------------
   33|  3.81k|        {
   34|  3.81k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  3.81k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  3.81k|        }
   37|       |
   38|   164k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 763, False: 163k]
  ------------------
   39|    763|        {
   40|    763|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|    763|        }
   42|       |
   43|   163k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 3.19k, False: 160k]
  ------------------
   44|  3.19k|        {
   45|  3.19k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  3.19k|                    static_cast<phi::uint32_t>(id)};
   47|  3.19k|        }
   48|       |
   49|   160k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 2.96k, False: 157k]
  ------------------
   50|  2.96k|        {
   51|  2.96k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  2.96k|                    static_cast<phi::uint32_t>(id)};
   53|  2.96k|        }
   54|       |
   55|   157k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 55.8k, False: 101k]
  ------------------
   56|  55.8k|        {
   57|  55.8k|            return {Token::Type::OpCode, token, line_number, column,
   58|  55.8k|                    static_cast<phi::uint32_t>(opcode)};
   59|  55.8k|        }
   60|       |
   61|   101k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|   157k|    }

LLVMFuzzerTestOneInput:
    8|  4.56k|{
    9|  4.56k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   10|       |
   11|       |    // Parse it
   12|  4.56k|    dlx::Parser::Parse(source);
   13|       |
   14|  4.56k|    return 0;
   15|  4.56k|}


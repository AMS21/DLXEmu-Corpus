_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  45.1k|        {
  169|  45.1k|            PHI_ASSERT(index < 3u);
  170|       |
  171|  45.1k|            switch (index.unsafe())
  172|  45.1k|            {
  173|  20.3k|                case 0:
  ------------------
  |  Branch (173:17): [True: 20.3k, False: 24.7k]
  ------------------
  174|  20.3k|                    return m_Arg1Type;
  175|       |
  176|  12.5k|                case 1:
  ------------------
  |  Branch (176:17): [True: 12.5k, False: 32.5k]
  ------------------
  177|  12.5k|                    return m_Arg2Type;
  178|       |
  179|  12.1k|                case 2:
  ------------------
  |  Branch (179:17): [True: 12.1k, False: 32.9k]
  ------------------
  180|  12.1k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 45.1k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  45.1k|#endif
  187|  45.1k|            }
  188|  45.1k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  11.8k|        {
  195|  11.8k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  11.8k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 11.2k, False: 536]
  ------------------
  199|  11.2k|            {
  200|  11.2k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  11.2k|            }
  202|  11.8k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 7.51k, False: 4.30k]
  ------------------
  203|  7.51k|            {
  204|  7.51k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  7.51k|            }
  206|  11.8k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 4.24k, False: 7.57k]
  ------------------
  207|  4.24k|            {
  208|  4.24k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  4.24k|            }
  210|       |
  211|  11.8k|            return number_of_argument_required;
  212|  11.8k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  11.8k|        {
  221|  11.8k|            return m_Executor;
  222|  11.8k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  7.05k|    {
   38|  7.05k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  7.05k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  7.05k|                                         static_cast<underlying_t>(rhs));
   42|  7.05k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  7.05k|    {
   55|  7.05k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  7.05k|        return static_cast<underlying_t>(type & test) != 0;
   58|  7.05k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  50.8k|    {
   32|  50.8k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 834, False: 49.9k]
  ------------------
   33|    834|        {
   34|    834|            return true;
   35|    834|        }
   36|       |
   37|  49.9k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 496, False: 49.5k]
  ------------------
   38|    496|        {
   39|    496|            return true;
   40|    496|        }
   41|       |
   42|  49.5k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 18.8k, False: 30.6k]
  ------------------
   43|  18.8k|        {
   44|  18.8k|            return true;
   45|  18.8k|        }
   46|       |
   47|  30.6k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 200, False: 30.4k]
  ------------------
   48|    200|        {
   49|    200|            return true;
   50|    200|        }
   51|       |
   52|  30.4k|        return false;
   53|  30.6k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  30.4k|    {
   57|  30.4k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 30.4k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  30.4k|        const char first_char = token.at(0);
   63|       |
   64|  30.4k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 7.10k, False: 23.3k]
  ------------------
   65|  7.10k|        {
   66|  7.10k|            return phi::is_alpha(first_char);
   67|  7.10k|        }
   68|       |
   69|  23.3k|        phi::boolean just_under_scores = (first_char == '_');
   70|  23.3k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 2.72k, False: 20.6k]
  |  Branch (70:15): [True: 20.1k, False: 3.18k]
  |  Branch (70:44): [True: 454, False: 2.72k]
  ------------------
   71|  2.72k|        {
   72|  2.72k|            return false;
   73|  2.72k|        }
   74|       |
   75|  73.4k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 62.0k, False: 11.3k]
  ------------------
   76|  62.0k|        {
   77|  62.0k|            const char c{token.at(index)};
   78|       |
   79|  62.0k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 52.1k, False: 9.88k]
  ------------------
   80|  52.1k|            {
   81|  52.1k|                just_under_scores = false;
   82|  52.1k|            }
   83|  9.88k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 644, False: 9.24k]
  ------------------
   84|    644|            {
   85|    644|                continue;
   86|    644|            }
   87|  9.24k|            else
   88|  9.24k|            {
   89|  9.24k|                return false;
   90|  9.24k|            }
   91|  62.0k|        }
   92|       |
   93|  11.3k|        return !just_under_scores;
   94|  20.6k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   130k|    {
  101|   130k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 130k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   130k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 17.8k, False: 112k]
  ------------------
  107|  17.8k|        {
  108|  17.8k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 1.85k, False: 16.0k]
  ------------------
  109|  1.85k|            {
  110|  1.85k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  1.85k|            }
  112|       |
  113|  16.0k|            return {};
  114|  17.8k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   112k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 1.02k, False: 111k]
  ------------------
  118|  1.02k|        {
  119|  1.02k|            return {};
  120|  1.02k|        }
  121|       |
  122|   111k|        std::int32_t number{0};
  123|   111k|        phi::boolean is_negative{false};
  124|   111k|        phi::boolean starts_with_zero{false};
  125|   111k|        phi::boolean parsing_binary{false};
  126|   111k|        phi::boolean parsing_octal{false};
  127|   111k|        phi::boolean parsing_hexadecimal{false};
  128|   111k|        phi::boolean parsed_something{false};
  129|   111k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   125k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 123k, False: 1.91k]
  ------------------
  134|   123k|        {
  135|   123k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   123k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 111k, False: 11.9k]
  ------------------
  139|   111k|            {
  140|   111k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 262, False: 111k]
  ------------------
  141|    262|                {
  142|    262|                    continue;
  143|    262|                }
  144|       |
  145|   111k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 947, False: 110k]
  ------------------
  146|    947|                {
  147|    947|                    is_negative = true;
  148|    947|                    continue;
  149|    947|                }
  150|       |
  151|   110k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 2.20k, False: 108k]
  ------------------
  152|  2.20k|                {
  153|  2.20k|                    starts_with_zero = true;
  154|  2.20k|                    continue;
  155|  2.20k|                }
  156|       |
  157|   108k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 296, False: 108k]
  ------------------
  158|    296|                {
  159|    296|                    return {};
  160|    296|                }
  161|   108k|            }
  162|       |
  163|       |            // Second character
  164|   119k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 5.21k, False: 114k]
  ------------------
  165|  5.21k|            {
  166|  5.21k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 2.20k, False: 3.01k]
  ------------------
  167|  2.20k|                {
  168|       |                    // Binary
  169|  2.20k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 300, False: 1.90k]
  |  Branch (169:37): [True: 197, False: 1.70k]
  ------------------
  170|    497|                    {
  171|    497|                        parsing_binary = true;
  172|    497|                        continue;
  173|    497|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  1.70k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 529, False: 1.17k]
  |  Branch (176:37): [True: 236, False: 943]
  ------------------
  177|    765|                    {
  178|    765|                        parsing_hexadecimal = true;
  179|    765|                        continue;
  180|    765|                    }
  181|       |
  182|       |                    // Octal
  183|    943|                    parsing_octal = true;
  184|    943|                }
  185|  5.21k|            }
  186|       |
  187|       |            // Handle seperators
  188|   118k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 469, False: 118k]
  ------------------
  189|    469|            {
  190|    469|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 194, False: 275]
  ------------------
  191|    194|                {
  192|    194|                    return {};
  193|    194|                }
  194|       |
  195|    275|                parsed_separator = true;
  196|    275|                continue;
  197|    469|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   118k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 3.05k, False: 115k]
  |  Branch (200:32): [True: 197, False: 2.85k]
  ------------------
  201|    197|            {
  202|       |                // Would underflow
  203|    197|                return {};
  204|    197|            }
  205|   118k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 115k, False: 2.85k]
  |  Branch (205:17): [True: 228, False: 117k]
  |  Branch (205:33): [True: 228, False: 114k]
  ------------------
  206|    228|            {
  207|       |                // Would overflow
  208|    228|                return {};
  209|    228|            }
  210|       |
  211|   117k|            parsed_separator = false;
  212|   117k|            parsed_something = true;
  213|       |
  214|   117k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 756, False: 117k]
  ------------------
  215|    756|            {
  216|    756|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 261, False: 495]
  ------------------
  217|    261|                {
  218|    261|                    return {};
  219|    261|                }
  220|       |
  221|    495|                number <<= 1;
  222|    495|                number |= (c - '0');
  223|    495|            }
  224|   117k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 1.19k, False: 115k]
  ------------------
  225|  1.19k|            {
  226|  1.19k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 809, False: 384]
  ------------------
  227|    809|                {
  228|    809|                    return {};
  229|    809|                }
  230|       |
  231|    384|                number <<= 3;
  232|    384|                number |= (c - '0');
  233|    384|            }
  234|   115k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 1.19k, False: 114k]
  ------------------
  235|  1.19k|            {
  236|  1.19k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 484, False: 708]
  ------------------
  237|    484|                {
  238|    484|                    return {};
  239|    484|                }
  240|       |
  241|    708|                number <<= 4;
  242|    708|                number |= phi::hex_digit_value(c).unsafe();
  243|    708|            }
  244|   114k|            else
  245|   114k|            {
  246|   114k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 107k, False: 7.50k]
  ------------------
  247|   107k|                {
  248|   107k|                    return {};
  249|   107k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  7.50k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 2.66k, False: 4.84k]
  |  Branch (252:36): [True: 213, False: 2.44k]
  ------------------
  253|    213|                {
  254|    213|                    return {};
  255|    213|                }
  256|       |
  257|  7.29k|                number *= 10;
  258|  7.29k|                number += (c - '0');
  259|  7.29k|            }
  260|   117k|        }
  261|       |
  262|  1.91k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 1.65k, False: 255]
  ------------------
  263|  1.65k|        {
  264|       |            // Check for over/underflow
  265|  1.65k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 429, False: 1.22k]
  |  Branch (265:32): [True: 213, False: 216]
  ------------------
  266|    213|            {
  267|       |                // Would underflow
  268|    213|                return {};
  269|    213|            }
  270|  1.44k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 1.22k, False: 216]
  |  Branch (270:17): [True: 214, False: 1.23k]
  |  Branch (270:33): [True: 214, False: 1.01k]
  ------------------
  271|    214|            {
  272|       |                // Would overflow
  273|    214|                return {};
  274|    214|            }
  275|       |
  276|  1.23k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 216, False: 1.01k]
  ------------------
  277|    216|            {
  278|    216|                return static_cast<std::int16_t>(-number);
  279|    216|            }
  280|       |
  281|  1.01k|            return static_cast<std::int16_t>(number);
  282|  1.23k|        }
  283|       |
  284|    255|        return {};
  285|  1.91k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  9.89k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  9.89k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 133k, False: 0]
  ------------------
   64|   133k|            {
   65|   133k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 9.89k, False: 123k]
  ------------------
   66|  9.89k|                {
   67|  9.89k|                    return &token;
   68|  9.89k|                }
   69|   133k|            }
   70|       |
   71|      0|            return nullptr;
   72|  9.89k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|  28.0k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  28.0k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  28.0k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   131k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   131k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   131k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  65.0k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  65.0k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  65.0k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  11.8k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  2.32k|    {
   25|  2.32k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  2.32k|        switch (argument_number.unsafe())
   28|  2.32k|        {
   29|  1.72k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 1.72k, False: 604]
  ------------------
   30|  1.72k|                m_Arg1 = argument;
   31|  1.72k|                break;
   32|    362|            case 1u:
  ------------------
  |  Branch (32:13): [True: 362, False: 1.96k]
  ------------------
   33|    362|                m_Arg2 = argument;
   34|    362|                break;
   35|    242|            case 2u:
  ------------------
  |  Branch (35:13): [True: 242, False: 2.08k]
  ------------------
   36|    242|                m_Arg3 = argument;
   37|    242|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 2.32k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  2.32k|#endif
   42|  2.32k|        }
   43|  2.32k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  37.7k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|    204|    {
  171|    204|        InstructionArgument arg;
  172|    204|        arg.m_Type                   = ArgumentType::IntRegister;
  173|    204|        arg.register_int.register_id = id;
  174|    204|        return arg;
  175|    204|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|    769|    {
  179|    769|        InstructionArgument arg;
  180|    769|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|    769|        arg.register_float.register_id = id;
  182|    769|        return arg;
  183|    769|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|    208|    {
  187|    208|        InstructionArgument arg;
  188|    208|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|    208|        arg.immediate_value.signed_value = value;
  190|    208|        return arg;
  191|    208|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|    211|    {
  196|    211|        InstructionArgument arg;
  197|    211|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|    211|        arg.address_displacement.register_id  = id;
  199|    211|        arg.address_displacement.displacement = displacement;
  200|    211|        return arg;
  201|    211|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|    933|    {
  205|    933|        InstructionArgument arg;
  206|    933|        arg.m_Type           = ArgumentType::Label;
  207|    933|        arg.label.label_name = label_name;
  208|    933|        return arg;
  209|    933|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  11.8k|    {
  453|  11.8k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  11.8k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   172k|    {
   24|   172k|        switch (token.length())
   25|   172k|        {
   26|       |            // 1 character OpCodes
   27|  23.0k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 23.0k, False: 149k]
  ------------------
   28|  23.0k|                char c1 = token[0];
   29|  23.0k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 4.21k, False: 18.8k]
  ------------------
   30|  4.21k|                {
   31|  4.21k|                    return OpCode::J;
   32|  4.21k|                }
   33|  18.8k|                break;
   34|  23.0k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  27.8k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 27.8k, False: 144k]
  ------------------
   38|  27.8k|                char c1 = token[0];
   39|  27.8k|                char c2 = token[1];
   40|       |
   41|  27.8k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 16.3k, False: 11.5k]
  ------------------
   42|  27.8k|                {
   43|    678|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 678, False: 27.1k]
  ------------------
   44|  1.03k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 357, False: 27.5k]
  ------------------
   45|  1.03k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 389, False: 646]
  ------------------
   46|    389|                        {
   47|    389|                            return OpCode::JR;
   48|    389|                        }
   49|    646|                        break;
   50|       |
   51|  1.75k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 1.75k, False: 26.1k]
  ------------------
   52|  3.42k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 1.66k, False: 26.2k]
  ------------------
   53|  3.42k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 1.14k, False: 2.28k]
  ------------------
   54|  3.42k|                        {
   55|    297|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 297, False: 3.12k]
  ------------------
   56|    553|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 256, False: 3.16k]
  ------------------
   57|    553|                                return OpCode::LB;
   58|    217|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 217, False: 3.20k]
  ------------------
   59|    414|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 197, False: 3.22k]
  ------------------
   60|    414|                                return OpCode::LD;
   61|    194|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 194, False: 3.22k]
  ------------------
   62|    392|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 198, False: 3.22k]
  ------------------
   63|    392|                                return OpCode::LF;
   64|    201|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 201, False: 3.22k]
  ------------------
   65|    483|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 282, False: 3.14k]
  ------------------
   66|    483|                                return OpCode::LH;
   67|    230|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 230, False: 3.19k]
  ------------------
   68|    438|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 208, False: 3.21k]
  ------------------
   69|    438|                                return OpCode::LW;
   70|  3.42k|                        }
   71|  1.14k|                        break;
   72|  1.14k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 404, False: 27.4k]
  ------------------
   73|  1.32k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 923, False: 26.9k]
  ------------------
   74|  1.32k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 662, False: 665]
  ------------------
   75|    662|                        {
   76|    662|                            return OpCode::OR;
   77|    662|                        }
   78|    665|                        break;
   79|  3.55k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 3.55k, False: 24.3k]
  ------------------
   80|  5.74k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 2.19k, False: 25.6k]
  ------------------
   81|  5.74k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 2.01k, False: 3.73k]
  ------------------
   82|  5.74k|                        {
   83|    276|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 276, False: 5.46k]
  ------------------
   84|    495|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 219, False: 5.52k]
  ------------------
   85|    495|                                return OpCode::SB;
   86|  1.33k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 1.33k, False: 4.40k]
  ------------------
   87|  1.54k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 210, False: 5.53k]
  ------------------
   88|  1.54k|                                return OpCode::SD;
   89|    201|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 201, False: 5.54k]
  ------------------
   90|    401|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 200, False: 5.54k]
  ------------------
   91|    401|                                return OpCode::SF;
   92|    200|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 200, False: 5.54k]
  ------------------
   93|    491|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 291, False: 5.45k]
  ------------------
   94|    491|                                return OpCode::SH;
   95|    209|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 209, False: 5.53k]
  ------------------
   96|    799|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 590, False: 5.15k]
  ------------------
   97|    799|                                return OpCode::SW;
   98|  5.74k|                        }
   99|  2.01k|                        break;
  100|  27.8k|                }
  101|  20.8k|                break;
  102|  27.8k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|  38.2k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 38.2k, False: 134k]
  ------------------
  106|  38.2k|                char c1 = token[0];
  107|  38.2k|                char c2 = token[1];
  108|  38.2k|                char c3 = token[2];
  109|       |
  110|  38.2k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 10.7k, False: 27.4k]
  ------------------
  111|  38.2k|                {
  112|  1.50k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 1.50k, False: 36.6k]
  ------------------
  113|  2.21k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 706, False: 37.4k]
  ------------------
  114|  2.21k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 629, False: 1.58k]
  |  Branch (114:29): [True: 399, False: 1.81k]
  |  Branch (114:45): [True: 399, False: 230]
  ------------------
  115|    399|                        {
  116|    399|                            return OpCode::ADD;
  117|    399|                        }
  118|  1.81k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 888, False: 926]
  |  Branch (118:34): [True: 405, False: 1.40k]
  |  Branch (118:50): [True: 405, False: 483]
  ------------------
  119|    405|                        {
  120|    405|                            return OpCode::AND;
  121|    405|                        }
  122|  1.40k|                        break;
  123|       |
  124|  1.40k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 247, False: 37.9k]
  ------------------
  125|  1.37k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 1.12k, False: 37.0k]
  ------------------
  126|  1.37k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 906, False: 465]
  |  Branch (126:29): [True: 582, False: 789]
  |  Branch (126:45): [True: 582, False: 324]
  ------------------
  127|    582|                        {
  128|    582|                            return OpCode::DIV;
  129|    582|                        }
  130|    789|                        break;
  131|       |
  132|    789|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 422, False: 37.7k]
  ------------------
  133|  1.44k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 1.02k, False: 37.1k]
  ------------------
  134|  1.44k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 1.16k, False: 281]
  ------------------
  135|  1.16k|                        {
  136|  1.16k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 388, False: 779]
  ------------------
  137|    388|                            {
  138|    388|                                return OpCode::EQD;
  139|    388|                            }
  140|    779|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 393, False: 386]
  ------------------
  141|    393|                            {
  142|    393|                                return OpCode::EQF;
  143|    393|                            }
  144|  1.16k|                        }
  145|    667|                        break;
  146|       |
  147|  2.04k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 2.04k, False: 36.1k]
  ------------------
  148|  2.60k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 561, False: 37.6k]
  ------------------
  149|  2.60k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 1.02k, False: 1.58k]
  ------------------
  150|  1.02k|                        {
  151|  1.02k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 389, False: 635]
  ------------------
  152|    389|                            {
  153|    389|                                return OpCode::GED;
  154|    389|                            }
  155|    635|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 388, False: 247]
  ------------------
  156|    388|                            {
  157|    388|                                return OpCode::GEF;
  158|    388|                            }
  159|  1.02k|                        }
  160|  1.58k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 1.00k, False: 576]
  ------------------
  161|  1.00k|                        {
  162|  1.00k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 389, False: 616]
  ------------------
  163|    389|                            {
  164|    389|                                return OpCode::GTD;
  165|    389|                            }
  166|    616|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 388, False: 228]
  ------------------
  167|    388|                            {
  168|    388|                                return OpCode::GTF;
  169|    388|                            }
  170|    616|                        }
  171|  1.05k|                        break;
  172|       |
  173|  1.05k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 257, False: 37.9k]
  ------------------
  174|  1.03k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 781, False: 37.4k]
  ------------------
  175|  1.03k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 746, False: 292]
  |  Branch (175:29): [True: 405, False: 633]
  |  Branch (175:45): [True: 405, False: 341]
  ------------------
  176|    405|                        {
  177|    405|                            return OpCode::JAL;
  178|    405|                        }
  179|    633|                        break;
  180|       |
  181|  1.83k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 1.83k, False: 36.3k]
  ------------------
  182|  5.06k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 3.23k, False: 34.9k]
  ------------------
  183|  5.06k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 456, False: 4.61k]
  ------------------
  184|  5.06k|                        {
  185|    420|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 420, False: 4.64k]
  ------------------
  186|    746|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 326, False: 4.74k]
  ------------------
  187|    746|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 388, False: 358]
  ------------------
  188|    388|                                {
  189|    388|                                    return OpCode::LBU;
  190|    388|                                }
  191|    358|                                break;
  192|       |
  193|    653|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 653, False: 4.41k]
  ------------------
  194|  1.07k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 417, False: 4.65k]
  ------------------
  195|  1.07k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 388, False: 682]
  ------------------
  196|    388|                                {
  197|    388|                                    return OpCode::LED;
  198|    388|                                }
  199|    682|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 388, False: 294]
  ------------------
  200|    388|                                {
  201|    388|                                    return OpCode::LEF;
  202|    388|                                }
  203|    294|                                break;
  204|       |
  205|    294|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 229, False: 4.83k]
  ------------------
  206|  1.01k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 787, False: 4.28k]
  ------------------
  207|  1.01k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 392, False: 624]
  ------------------
  208|    392|                                {
  209|    392|                                    return OpCode::LHI;
  210|    392|                                }
  211|    624|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 388, False: 236]
  ------------------
  212|    388|                                {
  213|    388|                                    return OpCode::LHU;
  214|    388|                                }
  215|    236|                                break;
  216|       |
  217|    639|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 639, False: 4.42k]
  ------------------
  218|  1.02k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 388, False: 4.68k]
  ------------------
  219|  1.02k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 396, False: 631]
  ------------------
  220|    396|                                {
  221|    396|                                    return OpCode::LTD;
  222|    396|                                }
  223|    631|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 388, False: 243]
  ------------------
  224|    388|                                {
  225|    388|                                    return OpCode::LTF;
  226|    388|                                }
  227|    243|                                break;
  228|       |
  229|    243|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 221, False: 4.84k]
  ------------------
  230|    753|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 532, False: 4.53k]
  ------------------
  231|    753|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 388, False: 365]
  ------------------
  232|    388|                                {
  233|    388|                                    return OpCode::LWU;
  234|    388|                                }
  235|    365|                                break;
  236|  5.06k|                        }
  237|  1.95k|                        break;
  238|       |
  239|  1.95k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 522, False: 37.6k]
  ------------------
  240|  2.03k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 1.50k, False: 36.6k]
  ------------------
  241|  2.03k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 1.08k, False: 951]
  ------------------
  242|  1.08k|                        {
  243|  1.08k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 388, False: 692]
  ------------------
  244|    388|                            {
  245|    388|                                return OpCode::NED;
  246|    388|                            }
  247|    692|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 389, False: 303]
  ------------------
  248|    389|                            {
  249|    389|                                return OpCode::NEF;
  250|    389|                            }
  251|  1.08k|                        }
  252|    951|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 611, False: 340]
  |  Branch (252:34): [True: 389, False: 562]
  |  Branch (252:50): [True: 389, False: 222]
  ------------------
  253|    389|                        {
  254|    389|                            return OpCode::NOP;
  255|    389|                        }
  256|       |
  257|    865|                        break;
  258|       |
  259|    865|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 367, False: 37.8k]
  ------------------
  260|  1.22k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 861, False: 37.3k]
  ------------------
  261|  1.22k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 784, False: 444]
  |  Branch (261:29): [True: 389, False: 839]
  |  Branch (261:45): [True: 389, False: 395]
  ------------------
  262|    389|                        {
  263|    389|                            return OpCode::ORI;
  264|    389|                        }
  265|    839|                        break;
  266|       |
  267|  4.21k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 4.21k, False: 33.9k]
  ------------------
  268|  9.75k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 5.54k, False: 32.6k]
  ------------------
  269|  9.75k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 1.10k, False: 8.65k]
  ------------------
  270|  9.75k|                        {
  271|    344|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 344, False: 9.41k]
  ------------------
  272|    600|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 256, False: 9.50k]
  ------------------
  273|    600|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 390, False: 210]
  ------------------
  274|    390|                                {
  275|    390|                                    return OpCode::SBU;
  276|    390|                                }
  277|    210|                                break;
  278|       |
  279|    404|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 404, False: 9.35k]
  ------------------
  280|    634|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 230, False: 9.52k]
  ------------------
  281|    634|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 400, False: 234]
  ------------------
  282|    400|                                {
  283|    400|                                    return OpCode::SEQ;
  284|    400|                                }
  285|    234|                                break;
  286|       |
  287|    617|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 617, False: 9.14k]
  ------------------
  288|  1.20k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 584, False: 9.17k]
  ------------------
  289|  1.20k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 405, False: 796]
  ------------------
  290|    405|                                {
  291|    405|                                    return OpCode::SGE;
  292|    405|                                }
  293|    796|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 535, False: 261]
  ------------------
  294|    535|                                {
  295|    535|                                    return OpCode::SGT;
  296|    535|                                }
  297|    261|                                break;
  298|       |
  299|    261|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 229, False: 9.53k]
  ------------------
  300|    591|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 362, False: 9.39k]
  ------------------
  301|    591|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 389, False: 202]
  ------------------
  302|    389|                                {
  303|    389|                                    return OpCode::SHU;
  304|    389|                                }
  305|    202|                                break;
  306|       |
  307|    582|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 582, False: 9.17k]
  ------------------
  308|  2.02k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 1.43k, False: 8.32k]
  ------------------
  309|  2.02k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 349, False: 1.67k]
  ------------------
  310|  2.02k|                                {
  311|    202|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 202, False: 1.81k]
  ------------------
  312|    426|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 224, False: 1.79k]
  ------------------
  313|    426|                                        return OpCode::SLA;
  314|       |
  315|    199|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 199, False: 1.82k]
  ------------------
  316|    406|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 207, False: 1.81k]
  ------------------
  317|    406|                                        return OpCode::SLE;
  318|       |
  319|    205|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 205, False: 1.81k]
  ------------------
  320|    419|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 214, False: 1.80k]
  ------------------
  321|    419|                                        return OpCode::SLL;
  322|       |
  323|    222|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 222, False: 1.79k]
  ------------------
  324|    420|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 198, False: 1.82k]
  ------------------
  325|    420|                                        return OpCode::SLT;
  326|  2.02k|                                }
  327|    349|                                break;
  328|       |
  329|    349|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 308, False: 9.45k]
  ------------------
  330|    770|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 462, False: 9.29k]
  ------------------
  331|    770|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 393, False: 377]
  ------------------
  332|    393|                                {
  333|    393|                                    return OpCode::SNE;
  334|    393|                                }
  335|    377|                                break;
  336|       |
  337|    760|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 760, False: 8.99k]
  ------------------
  338|  1.22k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 464, False: 9.29k]
  ------------------
  339|  1.22k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 538, False: 686]
  ------------------
  340|    538|                                {
  341|    538|                                    return OpCode::SRA;
  342|    538|                                }
  343|    686|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 457, False: 229]
  ------------------
  344|    457|                                {
  345|    457|                                    return OpCode::SRL;
  346|    457|                                }
  347|    229|                                break;
  348|       |
  349|    414|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 414, False: 9.34k]
  ------------------
  350|    822|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 408, False: 9.35k]
  ------------------
  351|    822|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 408, False: 414]
  ------------------
  352|    408|                                {
  353|    408|                                    return OpCode::SUB;
  354|    408|                                }
  355|    414|                                break;
  356|       |
  357|    414|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 202, False: 9.55k]
  ------------------
  358|    789|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 587, False: 9.17k]
  ------------------
  359|    789|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 388, False: 401]
  ------------------
  360|    388|                                {
  361|    388|                                    return OpCode::SWU;
  362|    388|                                }
  363|    401|                                break;
  364|  9.75k|                        }
  365|       |
  366|  4.17k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 391, False: 37.8k]
  ------------------
  367|  4.46k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 290, False: 37.9k]
  ------------------
  368|  4.46k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 655, False: 3.81k]
  |  Branch (368:29): [True: 416, False: 4.05k]
  |  Branch (368:45): [True: 416, False: 239]
  ------------------
  369|    416|                        {
  370|    416|                            return OpCode::XOR;
  371|    416|                        }
  372|  4.05k|                        break;
  373|  38.2k|                }
  374|  23.0k|                break;
  375|  38.2k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|  40.4k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 40.4k, False: 132k]
  ------------------
  379|  40.4k|                char c1 = token[0];
  380|  40.4k|                char c2 = token[1];
  381|  40.4k|                char c3 = token[2];
  382|  40.4k|                char c4 = token[3];
  383|       |
  384|  40.4k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 8.84k, False: 31.6k]
  ------------------
  385|  40.4k|                {
  386|  2.46k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 2.46k, False: 38.0k]
  ------------------
  387|  3.97k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 1.51k, False: 38.9k]
  ------------------
  388|  3.97k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 344, False: 3.63k]
  ------------------
  389|  3.97k|                        {
  390|  1.04k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 1.04k, False: 2.93k]
  ------------------
  391|  2.37k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 1.33k, False: 2.64k]
  ------------------
  392|  2.37k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 2.16k, False: 208]
  ------------------
  393|  2.16k|                                {
  394|  2.16k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 204, False: 1.95k]
  ------------------
  395|  2.16k|                                    {
  396|    460|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 460, False: 1.70k]
  ------------------
  397|    657|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 197, False: 1.96k]
  ------------------
  398|    657|                                            return OpCode::ADDD;
  399|       |
  400|    194|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 194, False: 1.96k]
  ------------------
  401|    393|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 199, False: 1.96k]
  ------------------
  402|    393|                                            return OpCode::ADDF;
  403|       |
  404|    194|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 194, False: 1.96k]
  ------------------
  405|    388|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 194, False: 1.96k]
  ------------------
  406|    388|                                            return OpCode::ADDI;
  407|       |
  408|    322|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 322, False: 1.84k]
  ------------------
  409|    520|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 198, False: 1.96k]
  ------------------
  410|    520|                                            return OpCode::ADDU;
  411|  2.16k|                                    }
  412|  2.16k|                                }
  413|    412|                                break;
  414|       |
  415|    412|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 205, False: 3.77k]
  ------------------
  416|  1.26k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 1.05k, False: 2.91k]
  ------------------
  417|  1.26k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 799, False: 465]
  |  Branch (417:37): [True: 390, False: 874]
  |  Branch (417:53): [True: 390, False: 409]
  ------------------
  418|    390|                                {
  419|    390|                                    return OpCode::ANDI;
  420|    390|                                }
  421|       |
  422|    874|                                break;
  423|  3.97k|                        }
  424|  1.63k|                        break;
  425|       |
  426|  1.63k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 1.33k, False: 39.1k]
  ------------------
  427|  3.32k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 1.99k, False: 38.5k]
  ------------------
  428|  3.32k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 232, False: 3.09k]
  ------------------
  429|  3.32k|                        {
  430|    390|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 390, False: 2.93k]
  ------------------
  431|    786|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 396, False: 2.92k]
  ------------------
  432|    786|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 586, False: 200]
  |  Branch (432:37): [True: 389, False: 397]
  |  Branch (432:53): [True: 389, False: 197]
  ------------------
  433|    389|                                {
  434|    389|                                    return OpCode::BEQZ;
  435|    389|                                }
  436|    397|                                break;
  437|       |
  438|    397|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 240, False: 3.08k]
  ------------------
  439|  1.18k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 942, False: 2.38k]
  ------------------
  440|  1.18k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 983, False: 199]
  ------------------
  441|    983|                                {
  442|    983|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 388, False: 595]
  ------------------
  443|    388|                                    {
  444|    388|                                        return OpCode::BFPF;
  445|    388|                                    }
  446|    595|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 388, False: 207]
  ------------------
  447|    388|                                    {
  448|    388|                                        return OpCode::BFPT;
  449|    388|                                    }
  450|    983|                                }
  451|    406|                                break;
  452|       |
  453|    406|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 195, False: 3.13k]
  ------------------
  454|  1.12k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 930, False: 2.39k]
  ------------------
  455|  1.12k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 874, False: 251]
  |  Branch (455:37): [True: 388, False: 737]
  |  Branch (455:53): [True: 388, False: 486]
  ------------------
  456|    388|                                {
  457|    388|                                    return OpCode::BNEZ;
  458|    388|                                }
  459|  3.32k|                        }
  460|  1.77k|                        break;
  461|       |
  462|  1.77k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 515, False: 39.9k]
  ------------------
  463|  2.72k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 2.20k, False: 38.2k]
  ------------------
  464|  2.72k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 2.33k, False: 388]
  |  Branch (464:29): [True: 1.91k, False: 808]
  |  Branch (464:45): [True: 1.91k, False: 420]
  ------------------
  465|  1.91k|                        {
  466|  1.91k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 211, False: 1.70k]
  ------------------
  467|  1.91k|                            {
  468|    315|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 315, False: 1.60k]
  ------------------
  469|    509|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 194, False: 1.72k]
  ------------------
  470|    509|                                    return OpCode::DIVD;
  471|       |
  472|    194|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 194, False: 1.72k]
  ------------------
  473|    408|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 214, False: 1.70k]
  ------------------
  474|    408|                                    return OpCode::DIVF;
  475|       |
  476|    194|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 194, False: 1.72k]
  ------------------
  477|    389|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 195, False: 1.72k]
  ------------------
  478|    389|                                    return OpCode::DIVI;
  479|       |
  480|    201|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 201, False: 1.71k]
  ------------------
  481|    398|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 197, False: 1.71k]
  ------------------
  482|    398|                                    return OpCode::DIVU;
  483|  1.91k|                            }
  484|  1.91k|                        }
  485|  1.01k|                        break;
  486|       |
  487|  1.01k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 328, False: 40.1k]
  ------------------
  488|  1.31k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 986, False: 39.5k]
  ------------------
  489|  1.31k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 1.10k, False: 211]
  |  Branch (489:29): [True: 526, False: 788]
  |  Branch (489:45): [True: 836, False: 267]
  |  Branch (489:61): [True: 526, False: 310]
  ------------------
  490|    526|                        {
  491|    526|                            return OpCode::HALT;
  492|    526|                        }
  493|    788|                        break;
  494|       |
  495|    788|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 223, False: 40.2k]
  ------------------
  496|  1.35k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 1.12k, False: 39.3k]
  ------------------
  497|  1.35k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 1.10k, False: 244]
  |  Branch (497:29): [True: 388, False: 964]
  |  Branch (497:45): [True: 787, False: 321]
  |  Branch (497:61): [True: 388, False: 399]
  ------------------
  498|    388|                        {
  499|    388|                            return OpCode::JALR;
  500|    388|                        }
  501|    964|                        break;
  502|       |
  503|    964|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 272, False: 40.2k]
  ------------------
  504|  2.37k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 2.10k, False: 38.3k]
  ------------------
  505|  2.37k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 1.38k, False: 985]
  |  Branch (505:29): [True: 1.16k, False: 1.21k]
  |  Branch (505:45): [True: 1.16k, False: 227]
  ------------------
  506|  1.16k|                        {
  507|  1.16k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 403, False: 759]
  ------------------
  508|    403|                            {
  509|    403|                                return OpCode::MOVD;
  510|    403|                            }
  511|    759|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 390, False: 369]
  ------------------
  512|    390|                            {
  513|    390|                                return OpCode::MOVF;
  514|    390|                            }
  515|  1.16k|                        }
  516|  1.21k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 869, False: 343]
  |  Branch (516:34): [True: 392, False: 820]
  |  Branch (516:50): [True: 629, False: 240]
  |  Branch (516:66): [True: 392, False: 237]
  ------------------
  517|    392|                        {
  518|    392|                            return OpCode::MULT;
  519|    392|                        }
  520|  1.18k|                        break;
  521|       |
  522|  5.91k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 5.91k, False: 34.5k]
  ------------------
  523|  14.0k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 8.15k, False: 32.3k]
  ------------------
  524|  14.0k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 790, False: 13.2k]
  ------------------
  525|  14.0k|                        {
  526|  1.23k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 1.23k, False: 12.8k]
  ------------------
  527|  1.46k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 233, False: 13.8k]
  ------------------
  528|  1.46k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 1.24k, False: 219]
  ------------------
  529|  1.24k|                                {
  530|  1.24k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 407, False: 837]
  ------------------
  531|    407|                                    {
  532|    407|                                        return OpCode::SEQI;
  533|    407|                                    }
  534|    837|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 409, False: 428]
  ------------------
  535|    409|                                    {
  536|    409|                                        return OpCode::SEQU;
  537|    409|                                    }
  538|  1.24k|                                }
  539|    647|                                break;
  540|       |
  541|    886|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 886, False: 13.1k]
  ------------------
  542|  2.59k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 1.70k, False: 12.3k]
  ------------------
  543|  2.59k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 1.18k, False: 1.41k]
  ------------------
  544|  1.18k|                                {
  545|  1.18k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 388, False: 793]
  ------------------
  546|    388|                                    {
  547|    388|                                        return OpCode::SGEI;
  548|    388|                                    }
  549|    793|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 528, False: 265]
  ------------------
  550|    528|                                    {
  551|    528|                                        return OpCode::SGEU;
  552|    528|                                    }
  553|  1.18k|                                }
  554|  1.41k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 1.19k, False: 219]
  ------------------
  555|  1.19k|                                {
  556|  1.19k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 388, False: 803]
  ------------------
  557|    388|                                    {
  558|    388|                                        return OpCode::SGTI;
  559|    388|                                    }
  560|    803|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 509, False: 294]
  ------------------
  561|    509|                                    {
  562|    509|                                        return OpCode::SGTU;
  563|    509|                                    }
  564|  1.19k|                                }
  565|    778|                                break;
  566|       |
  567|  1.04k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 1.04k, False: 13.0k]
  ------------------
  568|  3.88k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 2.83k, False: 11.2k]
  ------------------
  569|  3.88k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 224, False: 3.66k]
  ------------------
  570|  3.88k|                                {
  571|    376|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 376, False: 3.51k]
  ------------------
  572|    645|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 269, False: 3.61k]
  ------------------
  573|    645|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 388, False: 257]
  ------------------
  574|    388|                                        {
  575|    388|                                            return OpCode::SLAI;
  576|    388|                                        }
  577|    257|                                        break;
  578|       |
  579|    770|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 770, False: 3.11k]
  ------------------
  580|  1.08k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 317, False: 3.56k]
  ------------------
  581|  1.08k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 388, False: 699]
  ------------------
  582|    388|                                        {
  583|    388|                                            return OpCode::SLEI;
  584|    388|                                        }
  585|    699|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 393, False: 306]
  ------------------
  586|    393|                                        {
  587|    393|                                            return OpCode::SLEU;
  588|    393|                                        }
  589|    306|                                        break;
  590|       |
  591|    306|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 250, False: 3.63k]
  ------------------
  592|    611|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 361, False: 3.52k]
  ------------------
  593|    611|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 389, False: 222]
  ------------------
  594|    389|                                        {
  595|    389|                                            return OpCode::SLLI;
  596|    389|                                        }
  597|    222|                                        break;
  598|       |
  599|    810|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 810, False: 3.07k]
  ------------------
  600|  1.31k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 509, False: 3.37k]
  ------------------
  601|  1.31k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 389, False: 930]
  ------------------
  602|    389|                                        {
  603|    389|                                            return OpCode::SLTI;
  604|    389|                                        }
  605|    930|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 394, False: 536]
  ------------------
  606|    394|                                        {
  607|    394|                                            return OpCode::SLTU;
  608|    394|                                        }
  609|    536|                                        break;
  610|  3.88k|                                }
  611|       |
  612|  1.77k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 228, False: 13.8k]
  ------------------
  613|  3.19k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 1.41k, False: 12.6k]
  ------------------
  614|  3.19k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 1.64k, False: 1.54k]
  ------------------
  615|  1.64k|                                {
  616|  1.64k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 405, False: 1.24k]
  ------------------
  617|    405|                                    {
  618|    405|                                        return OpCode::SNEI;
  619|    405|                                    }
  620|  1.24k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 460, False: 780]
  ------------------
  621|    460|                                    {
  622|    460|                                        return OpCode::SNEU;
  623|    460|                                    }
  624|  1.64k|                                }
  625|  2.32k|                                break;
  626|       |
  627|  2.32k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 795, False: 13.2k]
  ------------------
  628|  1.58k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 790, False: 13.2k]
  ------------------
  629|  1.58k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 778, False: 807]
  |  Branch (629:37): [True: 388, False: 1.19k]
  |  Branch (629:53): [True: 388, False: 390]
  ------------------
  630|    388|                                {
  631|    388|                                    return OpCode::SRAI;
  632|    388|                                }
  633|  1.19k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 790, False: 407]
  |  Branch (633:42): [True: 391, False: 806]
  |  Branch (633:58): [True: 391, False: 399]
  ------------------
  634|    391|                                {
  635|    391|                                    return OpCode::SRLI;
  636|    391|                                }
  637|    806|                                break;
  638|       |
  639|    806|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 737, False: 13.3k]
  ------------------
  640|  2.10k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 1.36k, False: 12.6k]
  ------------------
  641|  2.10k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 1.77k, False: 329]
  ------------------
  642|  1.77k|                                {
  643|  1.77k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 207, False: 1.56k]
  ------------------
  644|  1.77k|                                    {
  645|    194|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 194, False: 1.58k]
  ------------------
  646|    389|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 195, False: 1.58k]
  ------------------
  647|    389|                                            return OpCode::SUBD;
  648|       |
  649|    194|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 194, False: 1.58k]
  ------------------
  650|    388|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 194, False: 1.58k]
  ------------------
  651|    388|                                            return OpCode::SUBF;
  652|       |
  653|    195|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 195, False: 1.58k]
  ------------------
  654|    389|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 194, False: 1.58k]
  ------------------
  655|    389|                                            return OpCode::SUBI;
  656|       |
  657|    198|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 198, False: 1.57k]
  ------------------
  658|    403|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 205, False: 1.57k]
  ------------------
  659|    403|                                            return OpCode::SUBU;
  660|  1.77k|                                    }
  661|  1.77k|                                }
  662|    536|                                break;
  663|  14.0k|                        }
  664|  5.88k|                        break;
  665|       |
  666|  5.88k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 221, False: 40.2k]
  ------------------
  667|  1.02k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 802, False: 39.6k]
  ------------------
  668|  1.02k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 776, False: 247]
  |  Branch (668:29): [True: 388, False: 635]
  |  Branch (668:45): [True: 582, False: 194]
  |  Branch (668:61): [True: 388, False: 194]
  ------------------
  669|    388|                        {
  670|    388|                            return OpCode::TRAP;
  671|    388|                        }
  672|    635|                        break;
  673|    740|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 740, False: 39.7k]
  ------------------
  674|  1.49k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 755, False: 39.7k]
  ------------------
  675|  1.49k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 1.25k, False: 242]
  |  Branch (675:29): [True: 390, False: 1.10k]
  |  Branch (675:45): [True: 970, False: 283]
  |  Branch (675:61): [True: 390, False: 580]
  ------------------
  676|    390|                        {
  677|    390|                            return OpCode::XORI;
  678|    390|                        }
  679|  1.10k|                        break;
  680|  40.4k|                }
  681|  23.8k|                break;
  682|  40.4k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  23.8k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 22.2k, False: 150k]
  ------------------
  686|  22.2k|                char c1 = token[0];
  687|  22.2k|                char c2 = token[1];
  688|  22.2k|                char c3 = token[2];
  689|  22.2k|                char c4 = token[3];
  690|  22.2k|                char c5 = token[4];
  691|       |
  692|  22.2k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 5.50k, False: 16.7k]
  ------------------
  693|  22.2k|                {
  694|    726|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 726, False: 21.5k]
  ------------------
  695|  1.99k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 1.27k, False: 20.9k]
  ------------------
  696|  1.99k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 1.64k, False: 352]
  |  Branch (696:29): [True: 388, False: 1.60k]
  |  Branch (696:45): [True: 1.44k, False: 200]
  |  Branch (696:61): [True: 1.04k, False: 400]
  |  Branch (696:77): [True: 388, False: 656]
  ------------------
  697|    388|                        {
  698|    388|                            return OpCode::ADDUI;
  699|    388|                        }
  700|  1.60k|                        break;
  701|       |
  702|  1.60k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 225, False: 22.0k]
  ------------------
  703|  1.89k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 1.67k, False: 20.5k]
  ------------------
  704|  1.89k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 1.62k, False: 272]
  |  Branch (704:29): [True: 388, False: 1.51k]
  |  Branch (704:45): [True: 1.31k, False: 314]
  |  Branch (704:61): [True: 779, False: 533]
  |  Branch (704:77): [True: 388, False: 391]
  ------------------
  705|    388|                        {
  706|    388|                            return OpCode::DIVUI;
  707|    388|                        }
  708|  1.51k|                        break;
  709|       |
  710|  1.51k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 610, False: 21.6k]
  ------------------
  711|  3.57k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 2.96k, False: 19.3k]
  ------------------
  712|  3.57k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 2.51k, False: 1.05k]
  |  Branch (712:29): [True: 1.97k, False: 1.60k]
  |  Branch (712:45): [True: 2.23k, False: 287]
  |  Branch (712:61): [True: 1.97k, False: 257]
  ------------------
  713|  1.97k|                        {
  714|  1.97k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 290, False: 1.68k]
  ------------------
  715|  1.97k|                            {
  716|    200|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 200, False: 1.77k]
  ------------------
  717|    394|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 194, False: 1.78k]
  ------------------
  718|    394|                                    return OpCode::MULTD;
  719|       |
  720|    194|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 194, False: 1.78k]
  ------------------
  721|    388|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 194, False: 1.78k]
  ------------------
  722|    388|                                    return OpCode::MULTF;
  723|       |
  724|    194|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 194, False: 1.78k]
  ------------------
  725|    388|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 194, False: 1.78k]
  ------------------
  726|    388|                                    return OpCode::MULTI;
  727|       |
  728|    194|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 194, False: 1.78k]
  ------------------
  729|    515|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 321, False: 1.65k]
  ------------------
  730|    515|                                    return OpCode::MULTU;
  731|  1.97k|                            }
  732|  1.97k|                        }
  733|  1.89k|                        break;
  734|       |
  735|  3.94k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 3.94k, False: 18.3k]
  ------------------
  736|  9.29k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 5.35k, False: 16.9k]
  ------------------
  737|  9.29k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 500, False: 8.79k]
  ------------------
  738|  9.29k|                        {
  739|  1.54k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 1.54k, False: 7.75k]
  ------------------
  740|  1.97k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 429, False: 8.86k]
  ------------------
  741|  1.97k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 1.54k, False: 426]
  |  Branch (741:37): [True: 388, False: 1.58k]
  |  Branch (741:53): [True: 946, False: 600]
  |  Branch (741:69): [True: 388, False: 558]
  ------------------
  742|    388|                                {
  743|    388|                                    return OpCode::SEQUI;
  744|    388|                                }
  745|  1.58k|                                break;
  746|       |
  747|  1.58k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 781, False: 8.51k]
  ------------------
  748|  1.91k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 1.13k, False: 8.15k]
  ------------------
  749|  1.91k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 887, False: 1.03k]
  |  Branch (749:37): [True: 388, False: 1.53k]
  |  Branch (749:53): [True: 601, False: 286]
  |  Branch (749:69): [True: 388, False: 213]
  ------------------
  750|    388|                                {
  751|    388|                                    return OpCode::SGEUI;
  752|    388|                                }
  753|  1.53k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 1.02k, False: 507]
  |  Branch (753:42): [True: 388, False: 1.14k]
  |  Branch (753:58): [True: 794, False: 230]
  |  Branch (753:74): [True: 388, False: 406]
  ------------------
  754|    388|                                {
  755|    388|                                    return OpCode::SGTUI;
  756|    388|                                }
  757|  1.14k|                                break;
  758|       |
  759|  1.14k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 582, False: 8.71k]
  ------------------
  760|  2.37k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 1.78k, False: 7.50k]
  ------------------
  761|  2.37k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 1.14k, False: 1.23k]
  |  Branch (761:37): [True: 388, False: 1.98k]
  |  Branch (761:53): [True: 783, False: 357]
  |  Branch (761:69): [True: 388, False: 395]
  ------------------
  762|    388|                                {
  763|    388|                                    return OpCode::SLEUI;
  764|    388|                                }
  765|  1.98k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 1.00k, False: 975]
  |  Branch (765:42): [True: 390, False: 1.59k]
  |  Branch (765:58): [True: 779, False: 228]
  |  Branch (765:74): [True: 390, False: 389]
  ------------------
  766|    390|                                {
  767|    390|                                    return OpCode::SLTUI;
  768|    390|                                }
  769|  1.59k|                                break;
  770|       |
  771|  1.59k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 207, False: 9.08k]
  ------------------
  772|  1.28k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 1.08k, False: 8.21k]
  ------------------
  773|  1.28k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 1.03k, False: 256]
  |  Branch (773:37): [True: 388, False: 900]
  |  Branch (773:53): [True: 777, False: 255]
  |  Branch (773:69): [True: 388, False: 389]
  ------------------
  774|    388|                                {
  775|    388|                                    return OpCode::SNEUI;
  776|    388|                                }
  777|    900|                                break;
  778|       |
  779|    900|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 414, False: 8.88k]
  ------------------
  780|  1.24k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 833, False: 8.46k]
  ------------------
  781|  1.24k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 1.03k, False: 210]
  |  Branch (781:37): [True: 444, False: 803]
  |  Branch (781:53): [True: 753, False: 284]
  |  Branch (781:69): [True: 444, False: 309]
  ------------------
  782|    444|                                {
  783|    444|                                    return OpCode::SUBUI;
  784|    444|                                }
  785|    803|                                break;
  786|  9.29k|                        }
  787|       |
  788|  6.52k|                        break;
  789|  22.2k|                }
  790|       |
  791|  17.0k|                break;
  792|  22.2k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  17.0k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 10.6k, False: 161k]
  ------------------
  796|  10.6k|                char c1 = token[0];
  797|  10.6k|                char c2 = token[1];
  798|  10.6k|                char c3 = token[2];
  799|  10.6k|                char c4 = token[3];
  800|  10.6k|                char c5 = token[4];
  801|  10.6k|                char c6 = token[5];
  802|       |
  803|  10.6k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 4.59k, False: 6.00k]
  |  Branch (803:21): [True: 4.12k, False: 6.47k]
  |  Branch (803:37): [True: 4.34k, False: 255]
  |  Branch (803:53): [True: 4.12k, False: 221]
  ------------------
  804|  4.12k|                {
  805|  4.12k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 254, False: 3.86k]
  ------------------
  806|  4.12k|                    {
  807|    690|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 690, False: 3.43k]
  ------------------
  808|  1.29k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 600, False: 3.52k]
  ------------------
  809|  1.29k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 978, False: 312]
  ------------------
  810|    978|                            {
  811|    978|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 388, False: 590]
  ------------------
  812|    388|                                {
  813|    388|                                    return OpCode::CVTD2F;
  814|    388|                                }
  815|    590|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 388, False: 202]
  ------------------
  816|    388|                                {
  817|    388|                                    return OpCode::CVTD2I;
  818|    388|                                }
  819|    978|                            }
  820|    514|                            break;
  821|       |
  822|    514|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 213, False: 3.91k]
  ------------------
  823|  1.22k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 1.01k, False: 3.11k]
  ------------------
  824|  1.22k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 979, False: 244]
  ------------------
  825|    979|                            {
  826|    979|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 388, False: 591]
  ------------------
  827|    388|                                {
  828|    388|                                    return OpCode::CVTF2D;
  829|    388|                                }
  830|    591|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 391, False: 200]
  ------------------
  831|    391|                                {
  832|    391|                                    return OpCode::CVTF2I;
  833|    391|                                }
  834|    979|                            }
  835|    444|                            break;
  836|       |
  837|  1.16k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 1.16k, False: 2.96k]
  ------------------
  838|  1.35k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 195, False: 3.92k]
  ------------------
  839|  1.35k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 971, False: 385]
  ------------------
  840|    971|                            {
  841|    971|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 388, False: 583]
  ------------------
  842|    388|                                {
  843|    388|                                    return OpCode::CVTI2D;
  844|    388|                                }
  845|    583|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 388, False: 195]
  ------------------
  846|    388|                                {
  847|    388|                                    return OpCode::CVTI2F;
  848|    388|                                }
  849|    971|                            }
  850|  4.12k|                    }
  851|  4.12k|                }
  852|  6.47k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 2.69k, False: 3.77k]
  |  Branch (852:26): [True: 388, False: 6.08k]
  |  Branch (852:42): [True: 1.57k, False: 1.12k]
  |  Branch (852:58): [True: 1.19k, False: 386]
  |  Branch (852:74): [True: 977, False: 215]
  ------------------
  853|  6.47k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 719, False: 258]
  |  Branch (853:42): [True: 388, False: 331]
  ------------------
  854|    388|                {
  855|    388|                    return OpCode::MULTUI;
  856|    388|                }
  857|  7.88k|                break;
  858|  10.6k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  7.88k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 5.40k, False: 167k]
  ------------------
  862|  5.40k|                char c1 = token[0];
  863|  5.40k|                char c2 = token[1];
  864|  5.40k|                char c3 = token[2];
  865|  5.40k|                char c4 = token[3];
  866|  5.40k|                char c5 = token[4];
  867|  5.40k|                char c6 = token[5];
  868|  5.40k|                char c7 = token[6];
  869|       |
  870|  5.40k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 2.70k, False: 2.69k]
  |  Branch (870:21): [True: 2.16k, False: 3.23k]
  |  Branch (870:37): [True: 2.36k, False: 341]
  |  Branch (870:53): [True: 2.16k, False: 202]
  ------------------
  871|  2.16k|                {
  872|  2.16k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 1.10k, False: 1.06k]
  |  Branch (872:25): [True: 388, False: 1.77k]
  |  Branch (872:41): [True: 897, False: 206]
  |  Branch (872:54): [True: 696, False: 201]
  |  Branch (872:70): [True: 388, False: 308]
  ------------------
  873|    388|                    {
  874|    388|                        return OpCode::MOVI2FP;
  875|    388|                    }
  876|  1.77k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 1.04k, False: 737]
  |  Branch (876:30): [True: 388, False: 1.38k]
  |  Branch (876:46): [True: 812, False: 228]
  |  Branch (876:62): [True: 585, False: 227]
  |  Branch (876:75): [True: 388, False: 197]
  ------------------
  877|    388|                    {
  878|    388|                        return OpCode::MOVFP2I;
  879|    388|                    }
  880|  2.16k|                }
  881|  4.62k|                break;
  882|  5.40k|            }
  883|       |
  884|  4.73k|            default: {
  ------------------
  |  Branch (884:13): [True: 4.73k, False: 167k]
  ------------------
  885|  4.73k|                break;
  886|  5.40k|            }
  887|   172k|        }
  888|       |
  889|       |        // None found
  890|   120k|        return OpCode::NONE;
  891|   172k|    }
_ZN3dlx3iceEcc:
   17|   239k|    {
   18|   239k|        constexpr const char diff = 'a' - 'A';
   19|   239k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 67.7k, False: 172k]
  |  Branch (19:28): [True: 67.5k, False: 104k]
  ------------------
   20|   239k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   182k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  1.92k|    {
  193|  1.92k|        ParseError err;
  194|       |
  195|  1.92k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  1.92k|        err.m_LineNumber                           = line_number;
  197|  1.92k|        err.m_Column                               = column;
  198|  1.92k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  1.92k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  1.92k|        return err;
  202|  1.92k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  1.92k|    {
  207|  1.92k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  1.92k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  1.92k|                                                         actual_type);
  210|  1.92k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    282|    {
  216|    282|        ParseError err;
  217|       |
  218|    282|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    282|        err.m_LineNumber        = line_number;
  220|    282|        err.m_Column            = column;
  221|    282|        err.invalid_number.text = text;
  222|       |
  223|    282|        return err;
  224|    282|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    282|    {
  228|    282|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    282|                                                token.GetColumn().unsafe(), token.GetText());
  230|    282|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      3|    {
  235|      3|        ParseError err;
  236|       |
  237|      3|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      3|        err.m_LineNumber = line_number;
  239|      3|        err.m_Column     = column;
  240|       |
  241|      3|        return err;
  242|      3|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      3|    {
  247|      3|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      3|                                                                     token.GetColumn().unsafe());
  249|      3|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|  79.9k|    {
  255|  79.9k|        ParseError err;
  256|       |
  257|  79.9k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|  79.9k|        err.m_LineNumber                   = line_number;
  259|  79.9k|        err.m_Column                       = column;
  260|  79.9k|        err.unexpected_token.expected_type = expected_type;
  261|  79.9k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|  79.9k|        return err;
  264|  79.9k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|  79.9k|    {
  269|  79.9k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|  79.9k|                                                  token.GetColumn().unsafe(), expected_type,
  271|  79.9k|                                                  token.GetType());
  272|  79.9k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  20.5k|    {
  277|  20.5k|        ParseError err;
  278|       |
  279|  20.5k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  20.5k|        err.m_LineNumber                   = line_number;
  281|  20.5k|        err.m_Column                       = column;
  282|  20.5k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  20.5k|        return err;
  285|  20.5k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|    194|    {
  289|    194|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|    194|                                                    token.GetColumn().unsafe(), token.GetText());
  291|    194|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|  39.7k|    {
  296|  39.7k|        ParseError err;
  297|       |
  298|  39.7k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|  39.7k|        err.m_LineNumber                       = line_number;
  300|  39.7k|        err.m_Column                           = column;
  301|  39.7k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|  39.7k|        return err;
  304|  39.7k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|  39.7k|    {
  309|  39.7k|        return ConstructInvalidLabelIdentifierParseError(
  310|  39.7k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|  39.7k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  9.89k|    {
  317|  9.89k|        ParseError err;
  318|       |
  319|  9.89k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  9.89k|        err.m_LineNumber                     = line_number;
  321|  9.89k|        err.m_Column                         = column;
  322|  9.89k|        err.label_already_defined.label_name = label_name;
  323|  9.89k|        err.label_already_defined.at_line    = at_line;
  324|  9.89k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  9.89k|        return err;
  327|  9.89k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  9.89k|    {
  332|  9.89k|        return ConstructLabelAlreadyDefinedParseError(
  333|  9.89k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  9.89k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  9.89k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|  20.3k|    {
  340|  20.3k|        ParseError err;
  341|       |
  342|  20.3k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|  20.3k|        err.m_LineNumber = line_number;
  344|  20.3k|        err.m_Column     = column;
  345|       |
  346|  20.3k|        return err;
  347|  20.3k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|  20.3k|    {
  352|  20.3k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|  20.3k|                                                        token.GetColumn().unsafe());
  354|  20.3k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  2.75k|    {
  360|  2.75k|        ParseError err;
  361|       |
  362|  2.75k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  2.75k|        err.m_LineNumber               = line_number;
  364|  2.75k|        err.m_Column                   = column;
  365|  2.75k|        err.too_few_arguments.required = required;
  366|  2.75k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  2.75k|        return err;
  369|  2.75k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  2.75k|    {
  374|  2.75k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  2.75k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  2.75k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  4.37k|    {
  381|  4.37k|        ParseError err;
  382|       |
  383|  4.37k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  4.37k|        err.m_LineNumber           = line_number;
  385|  4.37k|        err.m_Column               = column;
  386|  4.37k|        err.empty_label.label_name = label_name;
  387|       |
  388|  4.37k|        return err;
  389|  4.37k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  4.37k|    {
  393|  4.37k|        return ConstructEmptyLabelParseError(
  394|  4.37k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  4.37k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 3.60k, False: 776]
  ------------------
  396|  3.60k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  4.37k|                        token.GetText());
  398|  4.37k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  2.97k|    {
  403|  2.97k|        ParseError err;
  404|       |
  405|  2.97k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  2.97k|        err.m_LineNumber = line_number;
  407|  2.97k|        err.m_Column     = column;
  408|       |
  409|  2.97k|        return err;
  410|  2.97k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  2.97k|    {
  414|  2.97k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  2.97k|                                               token.GetColumn().unsafe());
  416|  2.97k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   182k|    {
   19|   182k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   182k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  4.08k|    {
  182|  4.08k|        ParsedProgram program;
  183|       |
  184|  4.08k|        program.m_Tokens = tokens;
  185|       |
  186|  4.08k|        phi::boolean line_has_instruction{false};
  187|  4.08k|        phi::usize   label_count{0u};
  188|       |
  189|   206k|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 202k, False: 4.08k]
  ------------------
  190|   202k|        {
  191|   202k|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|   202k|            switch (current_token.GetType())
  196|   202k|            {
  197|       |                // Ignore comments
  198|  1.00k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 1.00k, False: 201k]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  1.00k|                    break;
  201|       |
  202|  19.5k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 19.5k, False: 182k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|  19.5k|                    line_has_instruction = false;
  205|  19.5k|                    break;
  206|       |
  207|  86.0k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 86.0k, False: 116k]
  ------------------
  208|  86.0k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 13.2k, False: 72.7k]
  ------------------
  209|  13.2k|                    {
  210|  13.2k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  13.2k|                                current_token, Token::Type::NewLine));
  212|  13.2k|                        break;
  213|  13.2k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|  72.7k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 24.7k, False: 47.9k]
  ------------------
  218|  24.7k|                    {
  219|  24.7k|                        program.AddParseError(
  220|  24.7k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|  24.7k|                        break;
  222|  24.7k|                    }
  223|       |
  224|  47.9k|                    std::string_view label_name = current_token.GetText();
  225|  47.9k|                    label_name.remove_suffix(1);
  226|       |
  227|  47.9k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 20.3k, False: 27.6k]
  ------------------
  228|  20.3k|                    {
  229|  20.3k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  20.3k|                                current_token.GetLineNumber().unsafe(),
  231|  20.3k|                                current_token.GetColumn().unsafe(), label_name));
  232|  20.3k|                        break;
  233|  20.3k|                    }
  234|       |
  235|  27.6k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 13.0k, False: 14.5k]
  ------------------
  236|  13.0k|                    {
  237|  13.0k|                        program.AddParseError(
  238|  13.0k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  13.0k|                        break;
  240|  13.0k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  14.5k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 9.89k, False: 4.68k]
  ------------------
  244|  9.89k|                    {
  245|       |                        // Find first defintions of label
  246|  9.89k|                        const Token* first_label_definition =
  247|  9.89k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  9.89k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  9.89k|                                    {
  250|  9.89k|                                        std::string_view token_label_name = t.GetText();
  251|  9.89k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  9.89k|                                        if (token_label_name == label_name)
  254|  9.89k|                                        {
  255|  9.89k|                                            return true;
  256|  9.89k|                                        }
  257|  9.89k|                                    }
  258|       |
  259|  9.89k|                                    return false;
  260|  9.89k|                                });
  261|       |
  262|  9.89k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  9.89k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  9.89k|                                current_token, *first_label_definition));
  266|  9.89k|                        break;
  267|  9.89k|                    }
  268|       |
  269|  4.68k|                    program.m_JumpData[label_name] =
  270|  4.68k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  4.68k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  4.68k|                    break;
  277|  14.5k|                }
  278|       |
  279|  32.1k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 32.1k, False: 170k]
  ------------------
  280|  32.1k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 20.3k, False: 11.8k]
  ------------------
  281|  20.3k|                    {
  282|  20.3k|                        program.AddParseError(
  283|  20.3k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|  20.3k|                        break;
  285|  20.3k|                    }
  286|       |
  287|  11.8k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  11.8k|                    PHI_ASSERT(current_token.HasHint());
  291|  11.8k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  11.8k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  11.8k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  11.8k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  11.8k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  11.8k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  11.8k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  11.8k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  11.8k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|  22.5k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 20.8k, False: 1.71k]
  ------------------
  313|  20.8k|                    {
  314|       |                        // Get next token
  315|  20.8k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 659, False: 20.2k]
  ------------------
  316|    659|                        {
  317|    659|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    659|                                    current_token, number_of_argument_required.unsafe(),
  319|    659|                                    argument_num.unsafe()));
  320|    659|                            break;
  321|    659|                        }
  322|       |
  323|  20.2k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|  20.2k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 8.43k, False: 11.7k]
  ------------------
  327|  8.43k|                        {
  328|  8.43k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 2.97k, False: 5.45k]
  ------------------
  329|  2.97k|                            {
  330|  2.97k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  2.97k|                            }
  332|       |
  333|  8.43k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  8.43k|                            continue;
  336|  8.43k|                        }
  337|       |
  338|  11.7k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 2.09k, False: 9.67k]
  ------------------
  339|  2.09k|                        {
  340|  2.09k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  2.09k|                                    token, number_of_argument_required.unsafe(),
  342|  2.09k|                                    argument_num.unsafe()));
  343|  2.09k|                            break;
  344|  2.09k|                        }
  345|       |
  346|  9.67k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  9.67k|                                parse_instruction_argument(
  348|  9.67k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  9.67k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 7.35k, False: 2.32k]
  ------------------
  350|  7.35k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  7.35k|                            break;
  353|  7.35k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  2.32k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  2.32k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  2.32k|                        argument_num++;
  360|  2.32k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  2.32k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  11.8k|                    program.m_Instructions.emplace_back(instruction);
  368|  11.8k|                    line_has_instruction = true;
  369|  11.8k|                    break;
  370|  32.1k|                }
  371|       |
  372|  63.6k|                default:
  ------------------
  |  Branch (372:17): [True: 63.6k, False: 138k]
  ------------------
  373|  63.6k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|  63.6k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 30.0k, False: 33.6k]
  ------------------
  375|  30.0k|                    {
  376|  30.0k|                        expected_token_type = Token::Type::NewLine;
  377|  30.0k|                    }
  378|       |
  379|  63.6k|                    program.AddParseError(
  380|  63.6k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|  63.6k|                    break;
  382|   202k|            }
  383|   202k|        }
  384|       |
  385|       |        // Check for empty labels
  386|  4.08k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 741, False: 3.34k]
  ------------------
  387|    741|        {
  388|  6.10k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 5.36k, False: 741]
  ------------------
  389|  5.36k|            {
  390|  5.36k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  5.36k|                const Token& token = *it;
  393|  5.36k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 4.37k, False: 985]
  ------------------
  394|  4.37k|                {
  395|  4.37k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  4.37k|                    --label_count;
  397|  4.37k|                }
  398|  5.36k|            }
  399|    741|        }
  400|       |
  401|  4.08k|        return program;
  402|  4.08k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  4.08k|    {
  406|  4.08k|        TokenStream tokens = Tokenize(source);
  407|  4.08k|        return Parse(tokens);
  408|  4.08k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  9.67k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  9.67k|        switch (token.GetType())
   38|  9.67k|        {
   39|  1.13k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 1.13k, False: 8.54k]
  ------------------
   40|  1.13k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 306, False: 824]
  ------------------
   41|  1.13k|                                          ArgumentType::AddressDisplacement))
   42|    306|                {
   43|    306|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|    306|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|    306|                    return {};
   47|    306|                }
   48|       |
   49|       |                // Get address displacement
   50|    824|                PHI_ASSERT(token.HasHint());
   51|       |
   52|    824|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|    824|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 3, False: 821]
  ------------------
   55|      3|                {
   56|      3|                    program.AddParseError(
   57|      3|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      3|                    return {};
   59|      3|                }
   60|       |
   61|    821|                auto         it           = tokens.current_position();
   62|    821|                const Token& first_token  = tokens.consume();
   63|    821|                const Token& second_token = tokens.consume();
   64|    821|                const Token& third_token  = tokens.consume();
   65|       |
   66|    821|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 209, False: 612]
  ------------------
   67|    209|                {
   68|    209|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|    209|                            first_token, Token::Type::OpenBracket));
   70|    209|                    return {};
   71|    209|                }
   72|       |
   73|       |                // Second token is the register
   74|    612|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 206, False: 406]
  ------------------
   75|    206|                {
   76|    206|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|    206|                            second_token, Token::Type::RegisterInt));
   78|    206|                    return {};
   79|    206|                }
   80|       |
   81|    406|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 195, False: 211]
  ------------------
   82|    195|                {
   83|    195|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|    195|                            third_token, Token::Type::ClosingBracket));
   85|    195|                    return {};
   86|    195|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|    211|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|    211|                return ConstructInstructionArgumentAddressDisplacement(
   95|    211|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|    406|            }
   97|    398|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 398, False: 9.27k]
  ------------------
   98|    398|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 194, False: 204]
  ------------------
   99|    194|                {
  100|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|    194|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|    194|                    return {};
  103|    194|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|    204|                return ConstructInstructionArgumentRegisterInt(
  109|    204|                        static_cast<IntRegisterID>(token.GetHint()));
  110|    398|            }
  111|    966|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 966, False: 8.71k]
  ------------------
  112|    966|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 197, False: 769]
  ------------------
  113|    197|                {
  114|    197|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|    197|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|    197|                    return {};
  117|    197|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|    769|                return ConstructInstructionArgumentRegisterFloat(
  123|    769|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|    966|            }
  125|    194|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 194, False: 9.48k]
  ------------------
  126|    194|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|    194|                return {};
  129|    966|            }
  130|  3.86k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 3.86k, False: 5.80k]
  ------------------
  131|       |                // Parse as Label
  132|  3.86k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 1.02k, False: 2.84k]
  ------------------
  133|  1.02k|                {
  134|  1.02k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  1.02k|                            token, expected_argument_type, ArgumentType::Label));
  136|  1.02k|                    return {};
  137|  1.02k|                }
  138|       |
  139|  2.84k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 2.84k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  2.84k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 1.91k, False: 933]
  ------------------
  146|  1.91k|                {
  147|  1.91k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  1.91k|                    return {};
  149|  1.91k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|    933|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  2.84k|            }
  155|    694|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 694, False: 8.98k]
  ------------------
  156|    694|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 204, False: 490]
  ------------------
  157|    204|                {
  158|    204|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|    204|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|    204|                    return {};
  161|    204|                }
  162|       |
  163|    490|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 208, False: 282]
  ------------------
  164|    208|                {
  165|    208|                    return ConstructInstructionArgumentImmediateValue(
  166|    208|                            static_cast<std::int16_t>(token.GetHint()));
  167|    208|                }
  168|       |
  169|    282|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    282|                return {};
  171|    490|            }
  172|       |
  173|  2.42k|            default:
  ------------------
  |  Branch (173:13): [True: 2.42k, False: 7.25k]
  ------------------
  174|  2.42k|                program.AddParseError(
  175|  2.42k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  2.42k|                return {};
  177|  9.67k|        }
  178|  9.67k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|   133k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   133k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 96.8k, False: 36.5k]
  ------------------
  249|  96.8k|                                    {
  250|  96.8k|                                        std::string_view token_label_name = t.GetText();
  251|  96.8k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  96.8k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 9.89k, False: 86.9k]
  ------------------
  254|  9.89k|                                        {
  255|  9.89k|                                            return true;
  256|  9.89k|                                        }
  257|  96.8k|                                    }
  258|       |
  259|   123k|                                    return false;
  260|   133k|                                });

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   177k|    {
   14|   177k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 31.0k, False: 146k]
  ------------------
   15|  31.0k|        {
   16|  31.0k|            char first_char = token[0];
   17|  31.0k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 420, False: 30.6k]
  |  Branch (17:38): [True: 2.09k, False: 28.5k]
  ------------------
   18|  2.51k|            {
   19|  2.51k|                char second_char = token[1];
   20|  2.51k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 2.19k, False: 314]
  |  Branch (20:43): [True: 1.68k, False: 509]
  ------------------
   21|  1.68k|                {
   22|  1.68k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  1.68k|                }
   24|  2.51k|            }
   25|  31.0k|        }
   26|   146k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 39.7k, False: 106k]
  ------------------
   27|  39.7k|        {
   28|  39.7k|            char first_char = token[0];
   29|  39.7k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 222, False: 39.5k]
  |  Branch (29:38): [True: 2.05k, False: 37.4k]
  ------------------
   30|  2.27k|            {
   31|  2.27k|                char second_char = token[1];
   32|  2.27k|                char third_char  = token[2];
   33|       |
   34|  2.27k|                switch (second_char)
   35|  2.27k|                {
   36|    600|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 600, False: 1.67k]
  ------------------
   37|    600|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 399, False: 201]
  |  Branch (37:50): [True: 197, False: 202]
  ------------------
   38|    197|                        {
   39|    197|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|    197|                        }
   41|    403|                        break;
   42|    600|                    }
   43|    647|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 647, False: 1.62k]
  ------------------
   44|    647|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 453, False: 194]
  |  Branch (44:50): [True: 194, False: 259]
  ------------------
   45|    194|                        {
   46|    194|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|    194|                        }
   48|    453|                        break;
   49|    647|                    }
   50|    618|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 618, False: 1.65k]
  ------------------
   51|    618|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 194, False: 424]
  |  Branch (51:50): [True: 194, False: 230]
  ------------------
   52|    388|                        {
   53|    388|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|    388|                        }
   55|    230|                        break;
   56|    618|                    }
   57|    408|                    default: {
  ------------------
  |  Branch (57:21): [True: 408, False: 1.86k]
  ------------------
   58|    408|                        break;
   59|    618|                    }
   60|  2.27k|                }
   61|  2.27k|            }
   62|  39.7k|        }
   63|       |
   64|   174k|        return IntRegisterID::None;
   65|   177k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   174k|    {
   69|   174k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 29.3k, False: 145k]
  ------------------
   70|  29.3k|        {
   71|  29.3k|            char first_char = token[0];
   72|  29.3k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 1.64k, False: 27.6k]
  |  Branch (72:38): [True: 891, False: 26.8k]
  ------------------
   73|  2.54k|            {
   74|  2.54k|                char second_char = token[1];
   75|  2.54k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 2.26k, False: 277]
  |  Branch (75:43): [True: 1.47k, False: 790]
  ------------------
   76|  1.47k|                {
   77|  1.47k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  1.47k|                }
   79|  2.54k|            }
   80|  29.3k|        }
   81|   145k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 38.9k, False: 106k]
  ------------------
   82|  38.9k|        {
   83|  38.9k|            char first_char = token[0];
   84|  38.9k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 1.63k, False: 37.3k]
  |  Branch (84:38): [True: 1.18k, False: 36.1k]
  ------------------
   85|  2.82k|            {
   86|  2.82k|                char second_char = token[1];
   87|  2.82k|                char third_char  = token[2];
   88|       |
   89|  2.82k|                switch (second_char)
   90|  2.82k|                {
   91|    614|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 614, False: 2.20k]
  ------------------
   92|    614|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 420, False: 194]
  |  Branch (92:50): [True: 197, False: 223]
  ------------------
   93|    197|                        {
   94|    197|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|    197|                        }
   96|    417|                        break;
   97|    614|                    }
   98|    598|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 598, False: 2.22k]
  ------------------
   99|    598|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 395, False: 203]
  |  Branch (99:50): [True: 195, False: 200]
  ------------------
  100|    195|                        {
  101|    195|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|    195|                        }
  103|    403|                        break;
  104|    598|                    }
  105|    597|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 597, False: 2.22k]
  ------------------
  106|    597|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 194, False: 403]
  |  Branch (106:50): [True: 197, False: 206]
  ------------------
  107|    391|                        {
  108|    391|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|    391|                        }
  110|    206|                        break;
  111|    597|                    }
  112|  1.01k|                    default: {
  ------------------
  |  Branch (112:21): [True: 1.01k, False: 1.80k]
  ------------------
  113|  1.01k|                        break;
  114|    597|                    }
  115|  2.82k|                }
  116|  2.82k|            }
  117|  38.9k|        }
  118|       |
  119|   172k|        return FloatRegisterID::None;
  120|   174k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   157k|    {
  124|   157k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 33.7k, False: 123k]
  ------------------
  125|  33.7k|        {
  126|  33.7k|            char c1 = token[0];
  127|  33.7k|            char c2 = token[1];
  128|  33.7k|            char c3 = token[2];
  129|  33.7k|            char c4 = token[3];
  130|       |
  131|  33.7k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 1.32k, False: 32.4k]
  |  Branch (131:34): [True: 819, False: 31.6k]
  |  Branch (131:49): [True: 981, False: 1.16k]
  |  Branch (131:62): [True: 195, False: 968]
  ------------------
  132|  33.7k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 300, False: 876]
  |  Branch (132:34): [True: 642, False: 234]
  |  Branch (132:49): [True: 194, False: 748]
  |  Branch (132:62): [True: 451, False: 297]
  ------------------
  133|  33.7k|        }
  134|       |
  135|   123k|        return false;
  136|   157k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|   185k|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|  39.5k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|   464k|    {
   41|   464k|        return m_Type;
   42|   464k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   204k|    {
   51|   204k|        return m_LineNumber;
   52|   204k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   192k|    {
   56|   192k|        return m_Column;
   57|   192k|    }
_ZNK3dlx5Token7GetTextEv:
   65|   286k|    {
   66|   286k|        return m_Text;
   67|   286k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  13.1k|    {
   80|  13.1k|        return m_HasHint;
   81|  13.1k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  14.0k|    {
   85|  14.0k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  14.0k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  14.0k|                   m_Type == Type::ImmediateInteger);
   88|  14.0k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  14.0k|        return m_Hint;
   91|  14.0k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  4.08k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  4.08k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  4.08k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|    824|    {
   51|    824|        auto it = m_Iterator;
   52|  3.28k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 2.46k, False: 821]
  ------------------
   53|  2.46k|        {
   54|  2.46k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 3, False: 2.46k]
  ------------------
   55|      3|            {
   56|      3|                return false;
   57|      3|            }
   58|  2.46k|        }
   59|       |
   60|    821|        return true;
   61|    824|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|   227k|    {
   65|   227k|        return m_Iterator != m_Tokens.end();
   66|   227k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|   225k|    {
   70|   225k|        return m_Iterator == m_Tokens.end();
   71|   225k|    }
_ZN3dlx11TokenStream7consumeEv:
   84|   225k|    {
   85|   225k|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|   225k|        return *m_Iterator++;
   91|   225k|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|    821|    {
  164|    821|        return m_Iterator;
  165|    821|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|    211|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|    211|        m_Iterator = it;
  179|    211|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    741|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    741|        return m_Tokens.rbegin();
  224|    741|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  5.36k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  5.36k|        return m_Tokens.rend();
  233|  5.36k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  4.08k|    {
   63|  4.08k|        TokenStream tokens;
   64|       |
   65|  4.08k|        std::string_view current_token;
   66|       |
   67|  4.08k|        phi::u64 current_line_number{1u};
   68|  4.08k|        phi::u64 current_column{1u};
   69|  4.08k|        phi::u64 token_begin{0u};
   70|       |
   71|  4.08k|        phi::boolean parsing_comment{false};
   72|       |
   73|   595k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 591k, False: 4.08k]
  ------------------
   74|   591k|        {
   75|   591k|            const char c{source.at(i.unsafe())};
   76|       |
   77|   591k|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 21.7k, False: 569k]
  ------------------
   78|  21.7k|            {
   79|  21.7k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 4.25k, False: 17.5k]
  ------------------
   80|  4.25k|                {
   81|       |                    // Skip empty lines
   82|  4.25k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  4.25k|                                        current_line_number, current_column);
   84|       |
   85|  4.25k|                    parsing_comment = false;
   86|  4.25k|                    current_line_number += 1u;
   87|  4.25k|                    current_column = 1u;
   88|  4.25k|                    continue;
   89|  4.25k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|  17.5k|                tokens.emplace_back(
   93|  17.5k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|  17.5k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|  17.5k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|  17.5k|                                    current_line_number, current_column);
   98|       |
   99|  17.5k|                current_token   = std::string_view{};
  100|  17.5k|                parsing_comment = false;
  101|  17.5k|                current_line_number += 1u;
  102|  17.5k|                current_column = 0u;
  103|  17.5k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|   569k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 710, False: 568k]
  |  Branch (105:34): [True: 961, False: 567k]
  ------------------
  106|  1.67k|            {
  107|  1.67k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 340, False: 1.33k]
  ------------------
  108|    340|                {
  109|    340|                    token_begin = i;
  110|    340|                }
  111|  1.33k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 907, False: 424]
  ------------------
  112|    907|                {
  113|    907|                    tokens.emplace_back(ParseToken(
  114|    907|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|    907|                            current_line_number, current_column - current_token.length()));
  116|    907|                    token_begin   = i;
  117|    907|                    current_token = std::string_view{};
  118|    907|                }
  119|       |
  120|  1.67k|                parsing_comment = true;
  121|  1.67k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  1.67k|            }
  123|   567k|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 1.80k, False: 566k]
  ------------------
  124|  1.80k|            {
  125|       |                // simply append the character
  126|  1.80k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|  1.80k|            }
  128|   566k|            else
  129|   566k|            {
  130|       |                // Not parsing a comment
  131|   566k|                switch (c)
  132|   566k|                {
  133|  7.42k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 7.42k, False: 558k]
  ------------------
  134|  13.1k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 5.69k, False: 560k]
  ------------------
  135|  20.7k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 7.61k, False: 558k]
  ------------------
  136|  20.7k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 4.97k, False: 15.7k]
  ------------------
  137|  4.97k|                        {
  138|  4.97k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  4.97k|                            continue;
  141|  4.97k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|  15.7k|                        tokens.emplace_back(ParseToken(
  145|  15.7k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|  15.7k|                                current_line_number, current_column - current_token.length()));
  147|  15.7k|                        current_token = std::string_view{};
  148|  15.7k|                        break;
  149|  57.8k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 57.8k, False: 508k]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  57.8k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 51.5k, False: 6.29k]
  ------------------
  152|  51.5k|                        {
  153|  51.5k|                            current_token =
  154|  51.5k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  51.5k|                            tokens.emplace_back(ParseToken(
  156|  51.5k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  51.5k|                                    current_line_number,
  158|  51.5k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  51.5k|                            current_token = std::string_view{};
  161|  51.5k|                        }
  162|  6.29k|                        else
  163|  6.29k|                        {
  164|       |                            // Orphan colon
  165|  6.29k|                            token_begin = i;
  166|       |
  167|  6.29k|                            tokens.emplace_back(Token::Type::Colon,
  168|  6.29k|                                                source.substr(token_begin.unsafe(), 1),
  169|  6.29k|                                                current_line_number, current_column);
  170|  6.29k|                        }
  171|  57.8k|                        break;
  172|  34.1k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 34.1k, False: 532k]
  ------------------
  173|  62.8k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 28.7k, False: 537k]
  ------------------
  174|  65.0k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 2.23k, False: 563k]
  ------------------
  175|  65.0k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 43.1k, False: 21.9k]
  ------------------
  176|  43.1k|                        {
  177|  43.1k|                            tokens.emplace_back(ParseToken(
  178|  43.1k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|  43.1k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|  43.1k|                            current_token = std::string_view{};
  182|  43.1k|                        }
  183|       |
  184|  65.0k|                        Token::Type type;
  185|  65.0k|                        switch (c)
  186|  65.0k|                        {
  187|  34.1k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 34.1k, False: 30.9k]
  ------------------
  188|  34.1k|                                type = Token::Type::Comma;
  189|  34.1k|                                break;
  190|  28.7k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 28.7k, False: 36.3k]
  ------------------
  191|  28.7k|                                type = Token::Type::OpenBracket;
  192|  28.7k|                                break;
  193|  2.23k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 2.23k, False: 62.8k]
  ------------------
  194|  2.23k|                                type = Token::Type::ClosingBracket;
  195|  2.23k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 65.0k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  65.0k|#endif
  201|  65.0k|                        }
  202|       |
  203|  65.0k|                        token_begin = i;
  204|       |
  205|  65.0k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  65.0k|                                            current_line_number, current_column);
  207|  65.0k|                        break;
  208|       |
  209|   422k|                    default:
  ------------------
  |  Branch (209:21): [True: 422k, False: 143k]
  ------------------
  210|   422k|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 130k, False: 291k]
  ------------------
  211|   130k|                        {
  212|   130k|                            token_begin = i;
  213|   130k|                        }
  214|       |
  215|       |                        // simply append the character
  216|   422k|                        current_token =
  217|   422k|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|   566k|                }
  219|   566k|            }
  220|       |
  221|   582k|            current_column += 1u;
  222|   582k|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  4.08k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 3.00k, False: 1.07k]
  ------------------
  226|  3.00k|        {
  227|  3.00k|            tokens.emplace_back(
  228|  3.00k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  3.00k|                               current_line_number, current_column - current_token.length()));
  230|  3.00k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  4.08k|        tokens.finalize();
  234|       |
  235|  4.08k|        return tokens;
  236|  4.08k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   131k|    {
   11|   131k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 1.74k, False: 130k]
  |  Branch (11:35): [True: 1.06k, False: 684]
  ------------------
   12|  1.06k|        {
   13|  1.06k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  1.06k|            if (number)
  ------------------
  |  Branch (15:17): [True: 441, False: 619]
  ------------------
   16|    441|            {
   17|    441|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|    441|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|    441|            }
   20|       |
   21|    619|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  1.06k|        }
   23|       |
   24|   130k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 508, False: 130k]
  |  Branch (24:35): [True: 739, False: 129k]
  ------------------
   25|  1.24k|        {
   26|  1.24k|            return {Token::Type::Comment, token, line_number, column};
   27|  1.24k|        }
   28|       |
   29|   129k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 2.64k, False: 126k]
  ------------------
   30|  2.64k|        {
   31|  2.64k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  2.64k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  2.64k|        }
   34|       |
   35|   126k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 445, False: 126k]
  ------------------
   36|    445|        {
   37|    445|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|    445|        }
   39|       |
   40|   126k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 1.63k, False: 124k]
  ------------------
   41|  1.63k|        {
   42|  1.63k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  1.63k|                    static_cast<std::uint32_t>(id)};
   44|  1.63k|        }
   45|       |
   46|   124k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 1.76k, False: 123k]
  ------------------
   47|  1.76k|        {
   48|  1.76k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  1.76k|                    static_cast<std::uint32_t>(id)};
   50|  1.76k|        }
   51|       |
   52|   123k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 33.0k, False: 90.0k]
  ------------------
   53|  33.0k|        {
   54|  33.0k|            return {Token::Type::OpCode, token, line_number, column,
   55|  33.0k|                    static_cast<std::uint32_t>(opcode)};
   56|  33.0k|        }
   57|       |
   58|  90.0k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   123k|    }

LLVMFuzzerTestOneInput:
    8|  4.08k|{
    9|  4.08k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   10|       |
   11|       |    // Parse it
   12|  4.08k|    dlx::Parser::Parse(source);
   13|       |
   14|  4.08k|    return 0;
   15|  4.08k|}


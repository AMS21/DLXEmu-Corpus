_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  46.7k|        {
  173|  46.7k|            PHI_ASSERT(index < 3u);
  174|       |
  175|  46.7k|            switch (index.unsafe())
  176|  46.7k|            {
  177|  21.1k|                case 0:
  ------------------
  |  Branch (177:17): [True: 21.1k, False: 25.6k]
  ------------------
  178|  21.1k|                    return m_Arg1Type;
  179|       |
  180|  13.0k|                case 1:
  ------------------
  |  Branch (180:17): [True: 13.0k, False: 33.6k]
  ------------------
  181|  13.0k|                    return m_Arg2Type;
  182|       |
  183|  12.5k|                case 2:
  ------------------
  |  Branch (183:17): [True: 12.5k, False: 34.2k]
  ------------------
  184|  12.5k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 46.7k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  46.7k|#endif
  191|  46.7k|            }
  192|  46.7k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  12.1k|        {
  199|  12.1k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  12.1k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 11.6k, False: 511]
  ------------------
  203|  11.6k|            {
  204|  11.6k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  11.6k|            }
  206|  12.1k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 6.84k, False: 5.27k]
  ------------------
  207|  6.84k|            {
  208|  6.84k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  6.84k|            }
  210|  12.1k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 3.62k, False: 8.49k]
  ------------------
  211|  3.62k|            {
  212|  3.62k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  213|  3.62k|            }
  214|       |
  215|  12.1k|            return number_of_argument_required;
  216|  12.1k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  12.1k|        {
  225|  12.1k|            return m_Executor;
  226|  12.1k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  7.73k|    {
   38|  7.73k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  7.73k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  7.73k|                                         static_cast<underlying_t>(rhs));
   42|  7.73k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  7.73k|    {
   55|  7.73k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  7.73k|        return static_cast<underlying_t>(type & test) != 0;
   58|  7.73k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  45.6k|    {
   31|  45.6k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 718, False: 44.9k]
  ------------------
   32|    718|        {
   33|    718|            return true;
   34|    718|        }
   35|       |
   36|  44.9k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 611, False: 44.3k]
  ------------------
   37|    611|        {
   38|    611|            return true;
   39|    611|        }
   40|       |
   41|  44.3k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 19.8k, False: 24.4k]
  ------------------
   42|  19.8k|        {
   43|  19.8k|            return true;
   44|  19.8k|        }
   45|       |
   46|  24.4k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 328, False: 24.1k]
  ------------------
   47|    328|        {
   48|    328|            return true;
   49|    328|        }
   50|       |
   51|  24.1k|        return false;
   52|  24.4k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  24.1k|    {
   56|  24.1k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 24.1k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  24.1k|        const char first_char = token.at(0u);
   62|       |
   63|  24.1k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 5.23k, False: 18.9k]
  ------------------
   64|  5.23k|        {
   65|  5.23k|            return phi::is_alpha(first_char);
   66|  5.23k|        }
   67|       |
   68|  18.9k|        phi::boolean just_under_scores = (first_char == '_');
   69|  18.9k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 1.91k, False: 17.0k]
  |  Branch (69:13): [True: 1.46k, False: 17.4k]
  |  Branch (69:43): [True: 1.46k, False: 455]
  ------------------
   70|  1.46k|        {
   71|  1.46k|            return false;
   72|  1.46k|        }
   73|       |
   74|  62.5k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 52.8k, False: 9.74k]
  ------------------
   75|  52.8k|        {
   76|  52.8k|            const char c{token.at(index)};
   77|       |
   78|  52.8k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 44.5k, False: 8.25k]
  ------------------
   79|  44.5k|            {
   80|  44.5k|                just_under_scores = false;
   81|  44.5k|            }
   82|  8.25k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 538, False: 7.71k]
  ------------------
   83|    538|            {
   84|    538|                continue;
   85|    538|            }
   86|  7.71k|            else
   87|  7.71k|            {
   88|  7.71k|                return false;
   89|  7.71k|            }
   90|  52.8k|        }
   91|       |
   92|  9.74k|        return !just_under_scores;
   93|  17.4k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|   108k|    {
  100|   108k|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 108k]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|   108k|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 13.9k, False: 94.5k]
  ------------------
  106|  13.9k|        {
  107|  13.9k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 1.97k, False: 12.0k]
  ------------------
  108|  1.97k|            {
  109|  1.97k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  1.97k|            }
  111|       |
  112|  12.0k|            return {};
  113|  13.9k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|  94.5k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 758, False: 93.8k]
  ------------------
  117|    758|        {
  118|    758|            return {};
  119|    758|        }
  120|       |
  121|  93.8k|        std::int32_t number{0};
  122|  93.8k|        phi::boolean is_negative{false};
  123|  93.8k|        phi::boolean starts_with_zero{false};
  124|  93.8k|        phi::boolean parsing_binary{false};
  125|  93.8k|        phi::boolean parsing_octal{false};
  126|  93.8k|        phi::boolean parsing_hexadecimal{false};
  127|  93.8k|        phi::boolean parsed_something{false};
  128|  93.8k|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|   107k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 105k, False: 1.98k]
  ------------------
  133|   105k|        {
  134|   105k|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|   105k|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 93.8k, False: 11.9k]
  ------------------
  138|  93.8k|            {
  139|  93.8k|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 219, False: 93.6k]
  ------------------
  140|    219|                {
  141|    219|                    continue;
  142|    219|                }
  143|       |
  144|  93.6k|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 996, False: 92.6k]
  ------------------
  145|    996|                {
  146|    996|                    is_negative = true;
  147|    996|                    continue;
  148|    996|                }
  149|       |
  150|  92.6k|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 1.94k, False: 90.6k]
  ------------------
  151|  1.94k|                {
  152|  1.94k|                    starts_with_zero = true;
  153|  1.94k|                    continue;
  154|  1.94k|                }
  155|       |
  156|  90.6k|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 201, False: 90.4k]
  ------------------
  157|    201|                {
  158|    201|                    return {};
  159|    201|                }
  160|  90.6k|            }
  161|       |
  162|       |            // Second character
  163|   102k|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 4.50k, False: 97.8k]
  ------------------
  164|  4.50k|            {
  165|  4.50k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 1.94k, False: 2.56k]
  ------------------
  166|  1.94k|                {
  167|       |                    // Binary
  168|  1.94k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 366, False: 1.57k]
  |  Branch (168:37): [True: 194, False: 1.38k]
  ------------------
  169|    560|                    {
  170|    560|                        parsing_binary = true;
  171|    560|                        continue;
  172|    560|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  1.38k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 497, False: 886]
  |  Branch (175:37): [True: 199, False: 687]
  ------------------
  176|    696|                    {
  177|    696|                        parsing_hexadecimal = true;
  178|    696|                        continue;
  179|    696|                    }
  180|       |
  181|       |                    // Octal
  182|    687|                    parsing_octal = true;
  183|    687|                }
  184|  4.50k|            }
  185|       |
  186|       |            // Handle seperators
  187|   101k|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 446, False: 100k]
  ------------------
  188|    446|            {
  189|    446|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 194, False: 252]
  ------------------
  190|    194|                {
  191|    194|                    return {};
  192|    194|                }
  193|       |
  194|    252|                parsed_separator = true;
  195|    252|                continue;
  196|    446|            }
  197|       |
  198|       |            // Check for over/underflow
  199|   100k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 3.71k, False: 96.9k]
  |  Branch (199:32): [True: 196, False: 3.51k]
  ------------------
  200|    196|            {
  201|       |                // Would underflow
  202|    196|                return {};
  203|    196|            }
  204|   100k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 96.9k, False: 3.51k]
  |  Branch (204:17): [True: 356, False: 100k]
  |  Branch (204:33): [True: 356, False: 96.6k]
  ------------------
  205|    356|            {
  206|       |                // Would overflow
  207|    356|                return {};
  208|    356|            }
  209|       |
  210|   100k|            parsed_separator = false;
  211|   100k|            parsed_something = true;
  212|       |
  213|   100k|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 802, False: 99.3k]
  ------------------
  214|    802|            {
  215|    802|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 245, False: 557]
  ------------------
  216|    245|                {
  217|    245|                    return {};
  218|    245|                }
  219|       |
  220|    557|                number <<= 1;
  221|    557|                number |= (c - '0');
  222|    557|            }
  223|  99.3k|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 879, False: 98.4k]
  ------------------
  224|    879|            {
  225|    879|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 558, False: 321]
  ------------------
  226|    558|                {
  227|    558|                    return {};
  228|    558|                }
  229|       |
  230|    321|                number <<= 3;
  231|    321|                number |= (c - '0');
  232|    321|            }
  233|  98.4k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 1.04k, False: 97.4k]
  ------------------
  234|  1.04k|            {
  235|  1.04k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 401, False: 643]
  ------------------
  236|    401|                {
  237|    401|                    return {};
  238|    401|                }
  239|       |
  240|    643|                number <<= 4;
  241|    643|                number |= phi::hex_digit_value(c).unsafe();
  242|    643|            }
  243|  97.4k|            else
  244|  97.4k|            {
  245|  97.4k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 89.4k, False: 7.93k]
  ------------------
  246|  89.4k|                {
  247|  89.4k|                    return {};
  248|  89.4k|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|  7.93k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 2.30k, False: 5.62k]
  |  Branch (251:36): [True: 206, False: 2.10k]
  ------------------
  252|    206|                {
  253|    206|                    return {};
  254|    206|                }
  255|       |
  256|  7.72k|                number *= 10;
  257|  7.72k|                number += (c - '0');
  258|  7.72k|            }
  259|   100k|        }
  260|       |
  261|  1.98k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 1.71k, False: 274]
  ------------------
  262|  1.71k|        {
  263|       |            // Check for over/underflow
  264|  1.71k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 543, False: 1.16k]
  |  Branch (264:32): [True: 340, False: 203]
  ------------------
  265|    340|            {
  266|       |                // Would underflow
  267|    340|                return {};
  268|    340|            }
  269|  1.37k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 1.16k, False: 203]
  |  Branch (269:17): [True: 224, False: 1.14k]
  |  Branch (269:33): [True: 224, False: 945]
  ------------------
  270|    224|            {
  271|       |                // Would overflow
  272|    224|                return {};
  273|    224|            }
  274|       |
  275|  1.14k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 203, False: 945]
  ------------------
  276|    203|            {
  277|    203|                return static_cast<std::int16_t>(-number);
  278|    203|            }
  279|       |
  280|    945|            return static_cast<std::int16_t>(number);
  281|  1.14k|        }
  282|       |
  283|    274|        return {};
  284|  1.98k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  7.65k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  7.65k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 38.2k, False: 0]
  ------------------
   64|  38.2k|            {
   65|  38.2k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 7.65k, False: 30.6k]
  ------------------
   66|  7.65k|                {
   67|  7.65k|                    return &token;
   68|  7.65k|                }
   69|  38.2k|            }
   70|       |
   71|      0|            return nullptr;
   72|  7.65k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  21.0k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  21.0k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  21.0k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   109k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   109k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   109k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  40.5k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  40.5k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  40.5k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  12.1k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  2.72k|    {
   25|  2.72k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  2.72k|        switch (argument_number.unsafe())
   28|  2.72k|        {
   29|  1.98k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 1.98k, False: 732]
  ------------------
   30|  1.98k|                m_Arg1 = argument;
   31|  1.98k|                break;
   32|    407|            case 1u:
  ------------------
  |  Branch (32:13): [True: 407, False: 2.31k]
  ------------------
   33|    407|                m_Arg2 = argument;
   34|    407|                break;
   35|    325|            case 2u:
  ------------------
  |  Branch (35:13): [True: 325, False: 2.39k]
  ------------------
   36|    325|                m_Arg3 = argument;
   37|    325|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 2.72k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  2.72k|#endif
   42|  2.72k|        }
   43|  2.72k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  39.0k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  172|    203|    {
  173|    203|        InstructionArgument arg;
  174|    203|        arg.m_Type                   = ArgumentType::IntRegister;
  175|    203|        arg.register_int.register_id = id;
  176|    203|        return arg;
  177|    203|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  180|    943|    {
  181|    943|        InstructionArgument arg;
  182|    943|        arg.m_Type                     = ArgumentType::FloatRegister;
  183|    943|        arg.register_float.register_id = id;
  184|    943|        return arg;
  185|    943|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  188|    207|    {
  189|    207|        InstructionArgument arg;
  190|    207|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  191|    207|        arg.immediate_value.signed_value = value;
  192|    207|        return arg;
  193|    207|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  197|    354|    {
  198|    354|        InstructionArgument arg;
  199|    354|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  200|    354|        arg.address_displacement.register_id  = id;
  201|    354|        arg.address_displacement.displacement = displacement;
  202|    354|        return arg;
  203|    354|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  206|  1.01k|    {
  207|  1.01k|        InstructionArgument arg;
  208|  1.01k|        arg.m_Type           = ArgumentType::Label;
  209|  1.01k|        arg.label.label_name = label_name;
  210|  1.01k|        return arg;
  211|  1.01k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  12.1k|    {
  453|  12.1k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  12.1k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|   145k|    {
   24|   145k|        switch (token.length().unsafe())
   25|   145k|        {
   26|       |            // 1 character OpCodes
   27|  17.1k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 17.1k, False: 128k]
  ------------------
   28|  17.1k|                const char c1 = token[0u];
   29|       |
   30|  17.1k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 5.11k, False: 12.0k]
  ------------------
   31|  5.11k|                {
   32|  5.11k|                    return OpCode::J;
   33|  5.11k|                }
   34|  12.0k|                break;
   35|  17.1k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|  20.6k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 20.6k, False: 124k]
  ------------------
   39|  20.6k|                const char c1 = token[0u];
   40|  20.6k|                const char c2 = token[1u];
   41|       |
   42|  20.6k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 10.7k, False: 9.83k]
  ------------------
   43|  20.6k|                {
   44|    566|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 566, False: 20.0k]
  ------------------
   45|    860|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 294, False: 20.3k]
  ------------------
   46|    860|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 389, False: 471]
  ------------------
   47|    389|                        {
   48|    389|                            return OpCode::JR;
   49|    389|                        }
   50|    471|                        break;
   51|       |
   52|  1.54k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 1.54k, False: 19.0k]
  ------------------
   53|  2.90k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 1.35k, False: 19.2k]
  ------------------
   54|  2.90k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 579, False: 2.32k]
  ------------------
   55|  2.90k|                        {
   56|    372|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 372, False: 2.52k]
  ------------------
   57|    581|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 209, False: 2.69k]
  ------------------
   58|    581|                                return OpCode::LB;
   59|    213|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 213, False: 2.68k]
  ------------------
   60|    407|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 194, False: 2.70k]
  ------------------
   61|    407|                                return OpCode::LD;
   62|    194|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 194, False: 2.70k]
  ------------------
   63|    388|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 194, False: 2.70k]
  ------------------
   64|    388|                                return OpCode::LF;
   65|    197|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 197, False: 2.70k]
  ------------------
   66|    541|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 344, False: 2.55k]
  ------------------
   67|    541|                                return OpCode::LH;
   68|    200|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 200, False: 2.70k]
  ------------------
   69|    404|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 204, False: 2.69k]
  ------------------
   70|    404|                                return OpCode::LW;
   71|  2.90k|                        }
   72|    579|                        break;
   73|    579|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 305, False: 20.3k]
  ------------------
   74|  1.02k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 721, False: 19.9k]
  ------------------
   75|  1.02k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 515, False: 511]
  ------------------
   76|    515|                        {
   77|    515|                            return OpCode::OR;
   78|    515|                        }
   79|    511|                        break;
   80|  3.36k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 3.36k, False: 17.2k]
  ------------------
   81|  5.05k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 1.68k, False: 18.9k]
  ------------------
   82|  5.05k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 1.16k, False: 3.88k]
  ------------------
   83|  5.05k|                        {
   84|    273|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 273, False: 4.77k]
  ------------------
   85|    482|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 209, False: 4.84k]
  ------------------
   86|    482|                                return OpCode::SB;
   87|  1.45k|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 1.45k, False: 3.59k]
  ------------------
   88|  1.66k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 206, False: 4.84k]
  ------------------
   89|  1.66k|                                return OpCode::SD;
   90|    197|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 197, False: 4.85k]
  ------------------
   91|    391|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 194, False: 4.85k]
  ------------------
   92|    391|                                return OpCode::SF;
   93|    197|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 197, False: 4.85k]
  ------------------
   94|    540|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 343, False: 4.70k]
  ------------------
   95|    540|                                return OpCode::SH;
   96|    199|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 199, False: 4.85k]
  ------------------
   97|    811|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 612, False: 4.43k]
  ------------------
   98|    811|                                return OpCode::SW;
   99|  5.05k|                        }
  100|  1.16k|                        break;
  101|  20.6k|                }
  102|  13.5k|                break;
  103|  20.6k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|  32.8k|            case 3: {
  ------------------
  |  Branch (106:13): [True: 32.8k, False: 112k]
  ------------------
  107|  32.8k|                const char c1 = token[0u];
  108|  32.8k|                const char c2 = token[1u];
  109|  32.8k|                const char c3 = token[2u];
  110|       |
  111|  32.8k|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 7.44k, False: 25.3k]
  ------------------
  112|  32.8k|                {
  113|  1.37k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 1.37k, False: 31.4k]
  ------------------
  114|  1.87k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 501, False: 32.3k]
  ------------------
  115|  1.87k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 635, False: 1.24k]
  |  Branch (115:29): [True: 404, False: 1.47k]
  |  Branch (115:45): [True: 404, False: 231]
  ------------------
  116|    404|                        {
  117|    404|                            return OpCode::ADD;
  118|    404|                        }
  119|  1.47k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 738, False: 736]
  |  Branch (119:34): [True: 397, False: 1.07k]
  |  Branch (119:50): [True: 397, False: 341]
  ------------------
  120|    397|                        {
  121|    397|                            return OpCode::AND;
  122|    397|                        }
  123|  1.07k|                        break;
  124|       |
  125|  1.07k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 256, False: 32.5k]
  ------------------
  126|  1.20k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 949, False: 31.8k]
  ------------------
  127|  1.20k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 919, False: 286]
  |  Branch (127:29): [True: 574, False: 631]
  |  Branch (127:45): [True: 574, False: 345]
  ------------------
  128|    574|                        {
  129|    574|                            return OpCode::DIV;
  130|    574|                        }
  131|    631|                        break;
  132|       |
  133|    631|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 349, False: 32.4k]
  ------------------
  134|  1.32k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 976, False: 31.8k]
  ------------------
  135|  1.32k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 1.11k, False: 214]
  ------------------
  136|  1.11k|                        {
  137|  1.11k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 388, False: 723]
  ------------------
  138|    388|                            {
  139|    388|                                return OpCode::EQD;
  140|    388|                            }
  141|    723|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 388, False: 335]
  ------------------
  142|    388|                            {
  143|    388|                                return OpCode::EQF;
  144|    388|                            }
  145|  1.11k|                        }
  146|    549|                        break;
  147|       |
  148|  1.93k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 1.93k, False: 30.8k]
  ------------------
  149|  2.45k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 526, False: 32.2k]
  ------------------
  150|  2.45k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 977, False: 1.47k]
  ------------------
  151|    977|                        {
  152|    977|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 388, False: 589]
  ------------------
  153|    388|                            {
  154|    388|                                return OpCode::GED;
  155|    388|                            }
  156|    589|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 388, False: 201]
  ------------------
  157|    388|                            {
  158|    388|                                return OpCode::GEF;
  159|    388|                            }
  160|    977|                        }
  161|  1.47k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 988, False: 491]
  ------------------
  162|    988|                        {
  163|    988|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 388, False: 600]
  ------------------
  164|    388|                            {
  165|    388|                                return OpCode::GTD;
  166|    388|                            }
  167|    600|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 388, False: 212]
  ------------------
  168|    388|                            {
  169|    388|                                return OpCode::GTF;
  170|    388|                            }
  171|    600|                        }
  172|    904|                        break;
  173|       |
  174|    904|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 204, False: 32.6k]
  ------------------
  175|    804|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 600, False: 32.2k]
  ------------------
  176|    804|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 595, False: 209]
  |  Branch (176:29): [True: 389, False: 415]
  |  Branch (176:45): [True: 389, False: 206]
  ------------------
  177|    389|                        {
  178|    389|                            return OpCode::JAL;
  179|    389|                        }
  180|    415|                        break;
  181|       |
  182|  1.84k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 1.84k, False: 30.9k]
  ------------------
  183|  5.09k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 3.25k, False: 29.5k]
  ------------------
  184|  5.09k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 239, False: 4.85k]
  ------------------
  185|  5.09k|                        {
  186|    418|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 418, False: 4.67k]
  ------------------
  187|    695|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 277, False: 4.81k]
  ------------------
  188|    695|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 388, False: 307]
  ------------------
  189|    388|                                {
  190|    388|                                    return OpCode::LBU;
  191|    388|                                }
  192|    307|                                break;
  193|       |
  194|    616|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 616, False: 4.47k]
  ------------------
  195|  1.02k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 413, False: 4.67k]
  ------------------
  196|  1.02k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 388, False: 641]
  ------------------
  197|    388|                                {
  198|    388|                                    return OpCode::LED;
  199|    388|                                }
  200|    641|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 388, False: 253]
  ------------------
  201|    388|                                {
  202|    388|                                    return OpCode::LEF;
  203|    388|                                }
  204|    253|                                break;
  205|       |
  206|    253|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 235, False: 4.85k]
  ------------------
  207|  1.26k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 1.03k, False: 4.06k]
  ------------------
  208|  1.26k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 516, False: 749]
  ------------------
  209|    516|                                {
  210|    516|                                    return OpCode::LHI;
  211|    516|                                }
  212|    749|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 388, False: 361]
  ------------------
  213|    388|                                {
  214|    388|                                    return OpCode::LHU;
  215|    388|                                }
  216|    361|                                break;
  217|       |
  218|    605|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 605, False: 4.48k]
  ------------------
  219|    989|                            case 't':
  ------------------
  |  Branch (219:29): [True: 384, False: 4.70k]
  ------------------
  220|    989|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 389, False: 600]
  ------------------
  221|    389|                                {
  222|    389|                                    return OpCode::LTD;
  223|    389|                                }
  224|    600|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 392, False: 208]
  ------------------
  225|    392|                                {
  226|    392|                                    return OpCode::LTF;
  227|    392|                                }
  228|    208|                                break;
  229|       |
  230|    242|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 242, False: 4.85k]
  ------------------
  231|    875|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 633, False: 4.45k]
  ------------------
  232|    875|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 516, False: 359]
  ------------------
  233|    516|                                {
  234|    516|                                    return OpCode::LWU;
  235|    516|                                }
  236|    359|                                break;
  237|  5.09k|                        }
  238|  1.72k|                        break;
  239|       |
  240|  1.72k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 485, False: 32.3k]
  ------------------
  241|  1.84k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 1.35k, False: 31.4k]
  ------------------
  242|  1.84k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 1.00k, False: 834]
  ------------------
  243|  1.00k|                        {
  244|  1.00k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 391, False: 616]
  ------------------
  245|    391|                            {
  246|    391|                                return OpCode::NED;
  247|    391|                            }
  248|    616|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 388, False: 228]
  ------------------
  249|    388|                            {
  250|    388|                                return OpCode::NEF;
  251|    388|                            }
  252|  1.00k|                        }
  253|    834|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 590, False: 244]
  |  Branch (253:34): [True: 389, False: 445]
  |  Branch (253:50): [True: 389, False: 201]
  ------------------
  254|    389|                        {
  255|    389|                            return OpCode::NOP;
  256|    389|                        }
  257|       |
  258|    673|                        break;
  259|       |
  260|    673|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 260, False: 32.5k]
  ------------------
  261|    866|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 606, False: 32.2k]
  ------------------
  262|    866|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 594, False: 272]
  |  Branch (262:29): [True: 388, False: 478]
  |  Branch (262:45): [True: 388, False: 206]
  ------------------
  263|    388|                        {
  264|    388|                            return OpCode::ORI;
  265|    388|                        }
  266|    478|                        break;
  267|       |
  268|  3.95k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 3.95k, False: 28.8k]
  ------------------
  269|  9.20k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 5.25k, False: 27.5k]
  ------------------
  270|  9.20k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 658, False: 8.54k]
  ------------------
  271|  9.20k|                        {
  272|    343|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 343, False: 8.86k]
  ------------------
  273|    584|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 241, False: 8.96k]
  ------------------
  274|    584|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 388, False: 196]
  ------------------
  275|    388|                                {
  276|    388|                                    return OpCode::SBU;
  277|    388|                                }
  278|    196|                                break;
  279|       |
  280|    384|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 384, False: 8.82k]
  ------------------
  281|    633|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 249, False: 8.95k]
  ------------------
  282|    633|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 388, False: 245]
  ------------------
  283|    388|                                {
  284|    388|                                    return OpCode::SEQ;
  285|    388|                                }
  286|    245|                                break;
  287|       |
  288|    593|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 593, False: 8.61k]
  ------------------
  289|  1.18k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 588, False: 8.61k]
  ------------------
  290|  1.18k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 411, False: 770]
  ------------------
  291|    411|                                {
  292|    411|                                    return OpCode::SGE;
  293|    411|                                }
  294|    770|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 512, False: 258]
  ------------------
  295|    512|                                {
  296|    512|                                    return OpCode::SGT;
  297|    512|                                }
  298|    258|                                break;
  299|       |
  300|    258|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 239, False: 8.96k]
  ------------------
  301|    589|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 350, False: 8.85k]
  ------------------
  302|    589|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 388, False: 201]
  ------------------
  303|    388|                                {
  304|    388|                                    return OpCode::SHU;
  305|    388|                                }
  306|    201|                                break;
  307|       |
  308|    556|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 556, False: 8.64k]
  ------------------
  309|  2.01k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 1.46k, False: 7.74k]
  ------------------
  310|  2.01k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 230, False: 1.78k]
  ------------------
  311|  2.01k|                                {
  312|    199|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 199, False: 1.82k]
  ------------------
  313|    399|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 200, False: 1.81k]
  ------------------
  314|    399|                                        return OpCode::SLA;
  315|       |
  316|    323|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 323, False: 1.69k]
  ------------------
  317|    529|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 206, False: 1.81k]
  ------------------
  318|    529|                                        return OpCode::SLE;
  319|       |
  320|    201|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 201, False: 1.81k]
  ------------------
  321|    459|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 258, False: 1.76k]
  ------------------
  322|    459|                                        return OpCode::SLL;
  323|       |
  324|    207|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 207, False: 1.81k]
  ------------------
  325|    402|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 195, False: 1.82k]
  ------------------
  326|    402|                                        return OpCode::SLT;
  327|  2.01k|                                }
  328|    230|                                break;
  329|       |
  330|    329|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 329, False: 8.87k]
  ------------------
  331|    777|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 448, False: 8.75k]
  ------------------
  332|    777|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 394, False: 383]
  ------------------
  333|    394|                                {
  334|    394|                                    return OpCode::SNE;
  335|    394|                                }
  336|    383|                                break;
  337|       |
  338|    790|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 790, False: 8.41k]
  ------------------
  339|  1.33k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 547, False: 8.65k]
  ------------------
  340|  1.33k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 560, False: 777]
  ------------------
  341|    560|                                {
  342|    560|                                    return OpCode::SRA;
  343|    560|                                }
  344|    777|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 544, False: 233]
  ------------------
  345|    544|                                {
  346|    544|                                    return OpCode::SRL;
  347|    544|                                }
  348|    233|                                break;
  349|       |
  350|    390|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 390, False: 8.81k]
  ------------------
  351|    647|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 257, False: 8.94k]
  ------------------
  352|    647|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 397, False: 250]
  ------------------
  353|    397|                                {
  354|    397|                                    return OpCode::SUB;
  355|    397|                                }
  356|    250|                                break;
  357|       |
  358|    250|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 195, False: 9.01k]
  ------------------
  359|    780|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 585, False: 8.62k]
  ------------------
  360|    780|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 388, False: 392]
  ------------------
  361|    388|                                {
  362|    388|                                    return OpCode::SWU;
  363|    388|                                }
  364|    392|                                break;
  365|  9.20k|                        }
  366|       |
  367|  3.47k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 431, False: 32.3k]
  ------------------
  368|  3.73k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 260, False: 32.5k]
  ------------------
  369|  3.73k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 655, False: 3.08k]
  |  Branch (369:29): [True: 428, False: 3.30k]
  |  Branch (369:45): [True: 428, False: 227]
  ------------------
  370|    428|                        {
  371|    428|                            return OpCode::XOR;
  372|    428|                        }
  373|  3.30k|                        break;
  374|  32.8k|                }
  375|  17.2k|                break;
  376|  32.8k|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  38.2k|            case 4: {
  ------------------
  |  Branch (379:13): [True: 38.2k, False: 107k]
  ------------------
  380|  38.2k|                const char c1 = token[0u];
  381|  38.2k|                const char c2 = token[1u];
  382|  38.2k|                const char c3 = token[2u];
  383|  38.2k|                const char c4 = token[3u];
  384|       |
  385|  38.2k|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 5.53k, False: 32.7k]
  ------------------
  386|  38.2k|                {
  387|  2.41k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 2.41k, False: 35.8k]
  ------------------
  388|  3.93k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 1.51k, False: 36.7k]
  ------------------
  389|  3.93k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 212, False: 3.72k]
  ------------------
  390|  3.93k|                        {
  391|  1.12k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 1.12k, False: 2.80k]
  ------------------
  392|  2.46k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 1.33k, False: 2.59k]
  ------------------
  393|  2.46k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 2.21k, False: 243]
  ------------------
  394|  2.21k|                                {
  395|  2.21k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 199, False: 2.01k]
  ------------------
  396|  2.21k|                                    {
  397|    520|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 520, False: 1.69k]
  ------------------
  398|    717|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 197, False: 2.02k]
  ------------------
  399|    717|                                            return OpCode::ADDD;
  400|       |
  401|    194|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 194, False: 2.02k]
  ------------------
  402|    391|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 197, False: 2.02k]
  ------------------
  403|    391|                                            return OpCode::ADDF;
  404|       |
  405|    194|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 194, False: 2.02k]
  ------------------
  406|    388|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 194, False: 2.02k]
  ------------------
  407|    388|                                            return OpCode::ADDI;
  408|       |
  409|    199|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 199, False: 2.01k]
  ------------------
  410|    523|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 324, False: 1.89k]
  ------------------
  411|    523|                                            return OpCode::ADDU;
  412|  2.21k|                                    }
  413|  2.21k|                                }
  414|    442|                                break;
  415|       |
  416|    442|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 199, False: 3.73k]
  ------------------
  417|  1.26k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 1.06k, False: 2.87k]
  ------------------
  418|  1.26k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 919, False: 341]
  |  Branch (418:37): [True: 517, False: 743]
  |  Branch (418:53): [True: 517, False: 402]
  ------------------
  419|    517|                                {
  420|    517|                                    return OpCode::ANDI;
  421|    517|                                }
  422|       |
  423|    743|                                break;
  424|  3.93k|                        }
  425|  1.39k|                        break;
  426|       |
  427|  1.44k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 1.44k, False: 36.8k]
  ------------------
  428|  3.65k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 2.21k, False: 36.0k]
  ------------------
  429|  3.65k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 203, False: 3.45k]
  ------------------
  430|  3.65k|                        {
  431|    385|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 385, False: 3.27k]
  ------------------
  432|    777|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 392, False: 3.26k]
  ------------------
  433|    777|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 583, False: 194]
  |  Branch (433:37): [True: 388, False: 389]
  |  Branch (433:53): [True: 388, False: 195]
  ------------------
  434|    388|                                {
  435|    388|                                    return OpCode::BEQZ;
  436|    388|                                }
  437|    389|                                break;
  438|       |
  439|    389|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 260, False: 3.39k]
  ------------------
  440|  1.30k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 1.04k, False: 2.61k]
  ------------------
  441|  1.30k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 1.10k, False: 194]
  ------------------
  442|  1.10k|                                {
  443|  1.10k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 517, False: 590]
  ------------------
  444|    517|                                    {
  445|    517|                                        return OpCode::BFPF;
  446|    517|                                    }
  447|    590|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 388, False: 202]
  ------------------
  448|    388|                                    {
  449|    388|                                        return OpCode::BFPT;
  450|    388|                                    }
  451|  1.10k|                                }
  452|    396|                                break;
  453|       |
  454|    396|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 324, False: 3.33k]
  ------------------
  455|  1.37k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 1.05k, False: 2.60k]
  ------------------
  456|  1.37k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 1.08k, False: 291]
  |  Branch (456:37): [True: 516, False: 859]
  |  Branch (456:53): [True: 516, False: 568]
  ------------------
  457|    516|                                {
  458|    516|                                    return OpCode::BNEZ;
  459|    516|                                }
  460|  3.65k|                        }
  461|  1.84k|                        break;
  462|       |
  463|  1.84k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 625, False: 37.6k]
  ------------------
  464|  2.93k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 2.30k, False: 35.9k]
  ------------------
  465|  2.93k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 2.28k, False: 642]
  |  Branch (465:29): [True: 1.88k, False: 1.04k]
  |  Branch (465:45): [True: 1.88k, False: 400]
  ------------------
  466|  1.88k|                        {
  467|  1.88k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 202, False: 1.68k]
  ------------------
  468|  1.88k|                            {
  469|    194|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 194, False: 1.69k]
  ------------------
  470|    389|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 195, False: 1.69k]
  ------------------
  471|    389|                                    return OpCode::DIVD;
  472|       |
  473|    322|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 322, False: 1.56k]
  ------------------
  474|    517|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 195, False: 1.69k]
  ------------------
  475|    517|                                    return OpCode::DIVF;
  476|       |
  477|    195|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 195, False: 1.69k]
  ------------------
  478|    389|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 194, False: 1.69k]
  ------------------
  479|    389|                                    return OpCode::DIVI;
  480|       |
  481|    195|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 195, False: 1.69k]
  ------------------
  482|    392|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 197, False: 1.69k]
  ------------------
  483|    392|                                    return OpCode::DIVU;
  484|  1.88k|                            }
  485|  1.88k|                        }
  486|  1.24k|                        break;
  487|       |
  488|  1.24k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 212, False: 38.0k]
  ------------------
  489|  1.16k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 948, False: 37.3k]
  ------------------
  490|  1.16k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 962, False: 198]
  |  Branch (490:29): [True: 518, False: 642]
  |  Branch (490:45): [True: 724, False: 238]
  |  Branch (490:61): [True: 518, False: 206]
  ------------------
  491|    518|                        {
  492|    518|                            return OpCode::HALT;
  493|    518|                        }
  494|    642|                        break;
  495|       |
  496|    642|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 200, False: 38.0k]
  ------------------
  497|  1.18k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 989, False: 37.2k]
  ------------------
  498|  1.18k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 992, False: 197]
  |  Branch (498:29): [True: 388, False: 801]
  |  Branch (498:45): [True: 778, False: 214]
  |  Branch (498:61): [True: 388, False: 390]
  ------------------
  499|    388|                        {
  500|    388|                            return OpCode::JALR;
  501|    388|                        }
  502|    801|                        break;
  503|       |
  504|    801|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 254, False: 38.0k]
  ------------------
  505|  2.38k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 2.13k, False: 36.1k]
  ------------------
  506|  2.38k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 1.43k, False: 959]
  |  Branch (506:29): [True: 1.20k, False: 1.18k]
  |  Branch (506:45): [True: 1.20k, False: 230]
  ------------------
  507|  1.20k|                        {
  508|  1.20k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 388, False: 812]
  ------------------
  509|    388|                            {
  510|    388|                                return OpCode::MOVD;
  511|    388|                            }
  512|    812|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 516, False: 296]
  ------------------
  513|    516|                            {
  514|    516|                                return OpCode::MOVF;
  515|    516|                            }
  516|  1.20k|                        }
  517|  1.18k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 844, False: 345]
  |  Branch (517:34): [True: 392, False: 797]
  |  Branch (517:50): [True: 618, False: 226]
  |  Branch (517:66): [True: 392, False: 226]
  ------------------
  518|    392|                        {
  519|    392|                            return OpCode::MULT;
  520|    392|                        }
  521|  1.09k|                        break;
  522|       |
  523|  6.39k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 6.39k, False: 31.8k]
  ------------------
  524|  15.0k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 8.66k, False: 29.6k]
  ------------------
  525|  15.0k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 625, False: 14.4k]
  ------------------
  526|  15.0k|                        {
  527|  1.47k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 1.47k, False: 13.5k]
  ------------------
  528|  1.70k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 232, False: 14.8k]
  ------------------
  529|  1.70k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 1.47k, False: 226]
  ------------------
  530|  1.47k|                                {
  531|  1.47k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 406, False: 1.07k]
  ------------------
  532|    406|                                    {
  533|    406|                                        return OpCode::SEQI;
  534|    406|                                    }
  535|  1.07k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 534, False: 538]
  ------------------
  536|    534|                                    {
  537|    534|                                        return OpCode::SEQU;
  538|    534|                                    }
  539|  1.47k|                                }
  540|    764|                                break;
  541|       |
  542|    881|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 881, False: 14.1k]
  ------------------
  543|  2.69k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 1.81k, False: 13.2k]
  ------------------
  544|  2.69k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 1.27k, False: 1.41k]
  ------------------
  545|  1.27k|                                {
  546|  1.27k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 516, False: 761]
  ------------------
  547|    516|                                    {
  548|    516|                                        return OpCode::SGEI;
  549|    516|                                    }
  550|    761|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 506, False: 255]
  ------------------
  551|    506|                                    {
  552|    506|                                        return OpCode::SGEU;
  553|    506|                                    }
  554|  1.27k|                                }
  555|  1.41k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 1.20k, False: 209]
  ------------------
  556|  1.20k|                                {
  557|  1.20k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 388, False: 821]
  ------------------
  558|    388|                                    {
  559|    388|                                        return OpCode::SGTI;
  560|    388|                                    }
  561|    821|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 528, False: 293]
  ------------------
  562|    528|                                    {
  563|    528|                                        return OpCode::SGTU;
  564|    528|                                    }
  565|  1.20k|                                }
  566|    757|                                break;
  567|       |
  568|  1.02k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 1.02k, False: 14.0k]
  ------------------
  569|  4.20k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 3.18k, False: 11.8k]
  ------------------
  570|  4.20k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 209, False: 4.00k]
  ------------------
  571|  4.20k|                                {
  572|    376|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 376, False: 3.83k]
  ------------------
  573|    652|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 276, False: 3.93k]
  ------------------
  574|    652|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 388, False: 264]
  ------------------
  575|    388|                                        {
  576|    388|                                            return OpCode::SLAI;
  577|    388|                                        }
  578|    264|                                        break;
  579|       |
  580|    893|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 893, False: 3.31k]
  ------------------
  581|  1.17k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 282, False: 3.92k]
  ------------------
  582|  1.17k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 388, False: 787]
  ------------------
  583|    388|                                        {
  584|    388|                                            return OpCode::SLEI;
  585|    388|                                        }
  586|    787|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 391, False: 396]
  ------------------
  587|    391|                                        {
  588|    391|                                            return OpCode::SLEU;
  589|    391|                                        }
  590|    396|                                        break;
  591|       |
  592|    396|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 246, False: 3.96k]
  ------------------
  593|    600|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 354, False: 3.85k]
  ------------------
  594|    600|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 388, False: 212]
  ------------------
  595|    388|                                        {
  596|    388|                                            return OpCode::SLLI;
  597|    388|                                        }
  598|    212|                                        break;
  599|       |
  600|  1.04k|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 1.04k, False: 3.16k]
  ------------------
  601|  1.57k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 527, False: 3.68k]
  ------------------
  602|  1.57k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 516, False: 1.05k]
  ------------------
  603|    516|                                        {
  604|    516|                                            return OpCode::SLTI;
  605|    516|                                        }
  606|  1.05k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 516, False: 541]
  ------------------
  607|    516|                                        {
  608|    516|                                            return OpCode::SLTU;
  609|    516|                                        }
  610|    541|                                        break;
  611|  4.20k|                                }
  612|       |
  613|  1.86k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 242, False: 14.8k]
  ------------------
  614|  3.51k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 1.65k, False: 13.4k]
  ------------------
  615|  3.51k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 2.01k, False: 1.50k]
  ------------------
  616|  2.01k|                                {
  617|  2.01k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 516, False: 1.49k]
  ------------------
  618|    516|                                    {
  619|    516|                                        return OpCode::SNEI;
  620|    516|                                    }
  621|  1.49k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 593, False: 902]
  ------------------
  622|    593|                                    {
  623|    593|                                        return OpCode::SNEU;
  624|    593|                                    }
  625|  2.01k|                                }
  626|  2.40k|                                break;
  627|       |
  628|  2.40k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 769, False: 14.2k]
  ------------------
  629|  1.56k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 794, False: 14.2k]
  ------------------
  630|  1.56k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 778, False: 785]
  |  Branch (630:37): [True: 388, False: 1.17k]
  |  Branch (630:53): [True: 388, False: 390]
  ------------------
  631|    388|                                {
  632|    388|                                    return OpCode::SRAI;
  633|    388|                                }
  634|  1.17k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 779, False: 396]
  |  Branch (634:42): [True: 388, False: 787]
  |  Branch (634:58): [True: 388, False: 391]
  ------------------
  635|    388|                                {
  636|    388|                                    return OpCode::SRLI;
  637|    388|                                }
  638|    787|                                break;
  639|       |
  640|  1.03k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 1.03k, False: 14.0k]
  ------------------
  641|  2.37k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 1.34k, False: 13.7k]
  ------------------
  642|  2.37k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 2.01k, False: 355]
  ------------------
  643|  2.01k|                                {
  644|  2.01k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 203, False: 1.81k]
  ------------------
  645|  2.01k|                                    {
  646|    194|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 194, False: 1.82k]
  ------------------
  647|    388|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 194, False: 1.82k]
  ------------------
  648|    388|                                            return OpCode::SUBD;
  649|       |
  650|    194|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 194, False: 1.82k]
  ------------------
  651|    388|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 194, False: 1.82k]
  ------------------
  652|    388|                                            return OpCode::SUBF;
  653|       |
  654|    194|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 194, False: 1.82k]
  ------------------
  655|    388|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 194, False: 1.82k]
  ------------------
  656|    388|                                            return OpCode::SUBI;
  657|       |
  658|    454|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 454, False: 1.56k]
  ------------------
  659|    649|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 195, False: 1.82k]
  ------------------
  660|    649|                                            return OpCode::SUBU;
  661|  2.01k|                                    }
  662|  2.01k|                                }
  663|    558|                                break;
  664|  15.0k|                        }
  665|  5.89k|                        break;
  666|       |
  667|  5.89k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 206, False: 38.0k]
  ------------------
  668|    988|                    case 't':
  ------------------
  |  Branch (668:21): [True: 782, False: 37.5k]
  ------------------
  669|    988|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 777, False: 211]
  |  Branch (669:29): [True: 388, False: 600]
  |  Branch (669:45): [True: 582, False: 195]
  |  Branch (669:61): [True: 388, False: 194]
  ------------------
  670|    388|                        {
  671|    388|                            return OpCode::TRAP;
  672|    388|                        }
  673|    600|                        break;
  674|    734|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 734, False: 37.5k]
  ------------------
  675|  1.44k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 715, False: 37.5k]
  ------------------
  676|  1.44k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 1.12k, False: 329]
  |  Branch (676:29): [True: 389, False: 1.06k]
  |  Branch (676:45): [True: 843, False: 277]
  |  Branch (676:61): [True: 389, False: 454]
  ------------------
  677|    389|                        {
  678|    389|                            return OpCode::XORI;
  679|    389|                        }
  680|  1.06k|                        break;
  681|  38.2k|                }
  682|  20.1k|                break;
  683|  38.2k|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|  20.1k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 20.0k, False: 125k]
  ------------------
  687|  20.0k|                const char c1 = token[0u];
  688|  20.0k|                const char c2 = token[1u];
  689|  20.0k|                const char c3 = token[2u];
  690|  20.0k|                const char c4 = token[3u];
  691|  20.0k|                const char c5 = token[4u];
  692|       |
  693|  20.0k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 3.24k, False: 16.8k]
  ------------------
  694|  20.0k|                {
  695|    781|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 781, False: 19.2k]
  ------------------
  696|  1.92k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 1.14k, False: 18.9k]
  ------------------
  697|  1.92k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 1.54k, False: 380]
  |  Branch (697:29): [True: 388, False: 1.53k]
  |  Branch (697:45): [True: 1.35k, False: 194]
  |  Branch (697:61): [True: 957, False: 394]
  |  Branch (697:77): [True: 388, False: 569]
  ------------------
  698|    388|                        {
  699|    388|                            return OpCode::ADDUI;
  700|    388|                        }
  701|  1.53k|                        break;
  702|       |
  703|  1.53k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 259, False: 19.7k]
  ------------------
  704|  1.82k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 1.56k, False: 18.4k]
  ------------------
  705|  1.82k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 1.51k, False: 307]
  |  Branch (705:29): [True: 388, False: 1.43k]
  |  Branch (705:45): [True: 1.23k, False: 286]
  |  Branch (705:61): [True: 777, False: 455]
  |  Branch (705:77): [True: 388, False: 389]
  ------------------
  706|    388|                        {
  707|    388|                            return OpCode::DIVUI;
  708|    388|                        }
  709|  1.43k|                        break;
  710|       |
  711|  1.43k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 689, False: 19.3k]
  ------------------
  712|  3.82k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 3.14k, False: 16.9k]
  ------------------
  713|  3.82k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 2.81k, False: 1.01k]
  |  Branch (713:29): [True: 2.27k, False: 1.55k]
  |  Branch (713:45): [True: 2.53k, False: 278]
  |  Branch (713:61): [True: 2.27k, False: 265]
  ------------------
  714|  2.27k|                        {
  715|  2.27k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 351, False: 1.92k]
  ------------------
  716|  2.27k|                            {
  717|    194|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 194, False: 2.08k]
  ------------------
  718|    388|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 194, False: 2.08k]
  ------------------
  719|    388|                                    return OpCode::MULTD;
  720|       |
  721|    322|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 322, False: 1.95k]
  ------------------
  722|    516|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 194, False: 2.08k]
  ------------------
  723|    516|                                    return OpCode::MULTF;
  724|       |
  725|    322|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 322, False: 1.95k]
  ------------------
  726|    516|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 194, False: 2.08k]
  ------------------
  727|    516|                                    return OpCode::MULTI;
  728|       |
  729|    194|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 194, False: 2.08k]
  ------------------
  730|    503|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 309, False: 1.96k]
  ------------------
  731|    503|                                    return OpCode::MULTU;
  732|  2.27k|                            }
  733|  2.27k|                        }
  734|  1.90k|                        break;
  735|       |
  736|  3.77k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 3.77k, False: 16.2k]
  ------------------
  737|  9.22k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 5.45k, False: 14.6k]
  ------------------
  738|  9.22k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 261, False: 8.96k]
  ------------------
  739|  9.22k|                        {
  740|  1.63k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 1.63k, False: 7.58k]
  ------------------
  741|  1.94k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 305, False: 8.91k]
  ------------------
  742|  1.94k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 1.65k, False: 291]
  |  Branch (742:37): [True: 388, False: 1.55k]
  |  Branch (742:53): [True: 1.05k, False: 593]
  |  Branch (742:69): [True: 388, False: 670]
  ------------------
  743|    388|                                {
  744|    388|                                    return OpCode::SEQUI;
  745|    388|                                }
  746|  1.55k|                                break;
  747|       |
  748|  1.55k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 765, False: 8.45k]
  ------------------
  749|  2.15k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 1.39k, False: 7.83k]
  ------------------
  750|  2.15k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 1.14k, False: 1.01k]
  |  Branch (750:37): [True: 516, False: 1.64k]
  |  Branch (750:53): [True: 728, False: 416]
  |  Branch (750:69): [True: 516, False: 212]
  ------------------
  751|    516|                                {
  752|    516|                                    return OpCode::SGEUI;
  753|    516|                                }
  754|  1.64k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 1.00k, False: 635]
  |  Branch (754:42): [True: 388, False: 1.25k]
  |  Branch (754:58): [True: 793, False: 212]
  |  Branch (754:74): [True: 388, False: 405]
  ------------------
  755|    388|                                {
  756|    388|                                    return OpCode::SGTUI;
  757|    388|                                }
  758|  1.25k|                                break;
  759|       |
  760|  1.25k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 560, False: 8.66k]
  ------------------
  761|  2.32k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 1.76k, False: 7.45k]
  ------------------
  762|  2.32k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 1.00k, False: 1.32k]
  |  Branch (762:37): [True: 388, False: 1.94k]
  |  Branch (762:53): [True: 781, False: 223]
  |  Branch (762:69): [True: 388, False: 393]
  ------------------
  763|    388|                                {
  764|    388|                                    return OpCode::SLEUI;
  765|    388|                                }
  766|  1.94k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 1.15k, False: 790]
  |  Branch (766:42): [True: 388, False: 1.55k]
  |  Branch (766:58): [True: 903, False: 247]
  |  Branch (766:74): [True: 388, False: 515]
  ------------------
  767|    388|                                {
  768|    388|                                    return OpCode::SLTUI;
  769|    388|                                }
  770|  1.55k|                                break;
  771|       |
  772|  1.55k|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 203, False: 9.02k]
  ------------------
  773|  1.34k|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 1.13k, False: 8.08k]
  ------------------
  774|  1.34k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 1.10k, False: 238]
  |  Branch (774:37): [True: 388, False: 953]
  |  Branch (774:53): [True: 777, False: 326]
  |  Branch (774:69): [True: 388, False: 389]
  ------------------
  775|    388|                                {
  776|    388|                                    return OpCode::SNEUI;
  777|    388|                                }
  778|    953|                                break;
  779|       |
  780|    953|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 407, False: 8.81k]
  ------------------
  781|  1.19k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 788, False: 8.43k]
  ------------------
  782|  1.19k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 999, False: 196]
  |  Branch (782:37): [True: 445, False: 750]
  |  Branch (782:53): [True: 747, False: 252]
  |  Branch (782:69): [True: 445, False: 302]
  ------------------
  783|    445|                                {
  784|    445|                                    return OpCode::SUBUI;
  785|    445|                                }
  786|    750|                                break;
  787|  9.22k|                        }
  788|       |
  789|  6.32k|                        break;
  790|  20.0k|                }
  791|       |
  792|  14.4k|                break;
  793|  20.0k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|  14.4k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 9.77k, False: 135k]
  ------------------
  797|  9.77k|                const char c1 = token[0u];
  798|  9.77k|                const char c2 = token[1u];
  799|  9.77k|                const char c3 = token[2u];
  800|  9.77k|                const char c4 = token[3u];
  801|  9.77k|                const char c5 = token[4u];
  802|  9.77k|                const char c6 = token[5u];
  803|       |
  804|  9.77k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 5.14k, False: 4.63k]
  |  Branch (804:21): [True: 4.42k, False: 5.34k]
  |  Branch (804:37): [True: 4.94k, False: 199]
  |  Branch (804:53): [True: 4.42k, False: 515]
  ------------------
  805|  4.42k|                {
  806|  4.42k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 408, False: 4.02k]
  ------------------
  807|  4.42k|                    {
  808|    637|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 637, False: 3.79k]
  ------------------
  809|  1.22k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 590, False: 3.83k]
  ------------------
  810|  1.22k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 1.00k, False: 224]
  ------------------
  811|  1.00k|                            {
  812|  1.00k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 420, False: 583]
  ------------------
  813|    420|                                {
  814|    420|                                    return OpCode::CVTD2F;
  815|    420|                                }
  816|    583|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 388, False: 195]
  ------------------
  817|    388|                                {
  818|    388|                                    return OpCode::CVTD2I;
  819|    388|                                }
  820|  1.00k|                            }
  821|    419|                            break;
  822|       |
  823|    419|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 219, False: 4.20k]
  ------------------
  824|  1.30k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 1.08k, False: 3.33k]
  ------------------
  825|  1.30k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 1.09k, False: 210]
  ------------------
  826|  1.09k|                            {
  827|  1.09k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 388, False: 710]
  ------------------
  828|    388|                                {
  829|    388|                                    return OpCode::CVTF2D;
  830|    388|                                }
  831|    710|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 516, False: 194]
  ------------------
  832|    516|                                {
  833|    516|                                    return OpCode::CVTF2I;
  834|    516|                                }
  835|  1.09k|                            }
  836|    404|                            break;
  837|       |
  838|  1.16k|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 1.16k, False: 3.26k]
  ------------------
  839|  1.48k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 322, False: 4.10k]
  ------------------
  840|  1.48k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 971, False: 514]
  ------------------
  841|    971|                            {
  842|    971|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 388, False: 583]
  ------------------
  843|    388|                                {
  844|    388|                                    return OpCode::CVTI2D;
  845|    388|                                }
  846|    583|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 388, False: 195]
  ------------------
  847|    388|                                {
  848|    388|                                    return OpCode::CVTI2F;
  849|    388|                                }
  850|    971|                            }
  851|  4.42k|                    }
  852|  4.42k|                }
  853|  5.34k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 2.87k, False: 2.47k]
  |  Branch (853:26): [True: 388, False: 4.96k]
  |  Branch (853:42): [True: 1.51k, False: 1.35k]
  |  Branch (853:58): [True: 1.15k, False: 356]
  |  Branch (853:74): [True: 938, False: 221]
  ------------------
  854|  5.34k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 702, False: 236]
  |  Branch (854:42): [True: 388, False: 314]
  ------------------
  855|    388|                {
  856|    388|                    return OpCode::MULTUI;
  857|    388|                }
  858|  6.90k|                break;
  859|  9.77k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|  6.90k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 4.40k, False: 140k]
  ------------------
  863|  4.40k|                const char c1 = token[0u];
  864|  4.40k|                const char c2 = token[1u];
  865|  4.40k|                const char c3 = token[2u];
  866|  4.40k|                const char c4 = token[3u];
  867|  4.40k|                const char c5 = token[4u];
  868|  4.40k|                const char c6 = token[5u];
  869|  4.40k|                const char c7 = token[6u];
  870|       |
  871|  4.40k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 2.47k, False: 1.92k]
  |  Branch (871:21): [True: 1.98k, False: 2.41k]
  |  Branch (871:37): [True: 2.18k, False: 295]
  |  Branch (871:53): [True: 1.98k, False: 196]
  ------------------
  872|  1.98k|                {
  873|  1.98k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 974, False: 1.01k]
  |  Branch (873:25): [True: 388, False: 1.59k]
  |  Branch (873:41): [True: 780, False: 194]
  |  Branch (873:54): [True: 585, False: 195]
  |  Branch (873:70): [True: 388, False: 197]
  ------------------
  874|    388|                    {
  875|    388|                        return OpCode::MOVI2FP;
  876|    388|                    }
  877|  1.59k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 1.00k, False: 596]
  |  Branch (877:25): [True: 388, False: 1.21k]
  |  Branch (877:41): [True: 781, False: 221]
  |  Branch (877:57): [True: 584, False: 197]
  |  Branch (877:70): [True: 388, False: 196]
  ------------------
  878|    388|                    {
  879|    388|                        return OpCode::MOVFP2I;
  880|    388|                    }
  881|  1.59k|                }
  882|  3.62k|                break;
  883|  4.40k|            }
  884|       |
  885|  3.62k|            default: {
  ------------------
  |  Branch (885:13): [True: 2.29k, False: 143k]
  ------------------
  886|  2.29k|                break;
  887|  4.40k|            }
  888|   145k|        }
  889|       |
  890|       |        // None found
  891|  90.1k|        return OpCode::NONE;
  892|   145k|    }
_ZN3dlx3iceEcc:
   17|   231k|    {
   18|   231k|        constexpr const char diff = 'a' - 'A';
   19|   231k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 70.0k, False: 161k]
  |  Branch (19:28): [True: 69.5k, False: 91.8k]
  ------------------
   20|   231k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   130k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|  1.68k|    {
  195|  1.68k|        ParseError err;
  196|       |
  197|  1.68k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|  1.68k|        err.m_LineNumber                           = line_number;
  199|  1.68k|        err.m_Column                               = column;
  200|  1.68k|        err.unexpected_argument_type.expected_type = expected_type;
  201|  1.68k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|  1.68k|        return err;
  204|  1.68k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|  1.68k|    {
  209|  1.68k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|  1.68k|                                                         token.GetColumn().unsafe(), expected_type,
  211|  1.68k|                                                         actual_type);
  212|  1.68k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|    197|    {
  218|    197|        ParseError err;
  219|       |
  220|    197|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|    197|        err.m_LineNumber        = line_number;
  222|    197|        err.m_Column            = column;
  223|    197|        err.invalid_number.text = text;
  224|       |
  225|    197|        return err;
  226|    197|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|    197|    {
  230|    197|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|    197|                                                token.GetColumn().unsafe(), token.GetText());
  232|    197|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|      2|    {
  237|      2|        ParseError err;
  238|       |
  239|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|      2|        err.m_LineNumber = line_number;
  241|      2|        err.m_Column     = column;
  242|       |
  243|      2|        return err;
  244|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|      2|    {
  249|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|      2|                                                                     token.GetColumn().unsafe());
  251|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  44.4k|    {
  257|  44.4k|        ParseError err;
  258|       |
  259|  44.4k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  44.4k|        err.m_LineNumber                   = line_number;
  261|  44.4k|        err.m_Column                       = column;
  262|  44.4k|        err.unexpected_token.expected_type = expected_type;
  263|  44.4k|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  44.4k|        return err;
  266|  44.4k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  44.4k|    {
  271|  44.4k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  44.4k|                                                  token.GetColumn().unsafe(), expected_type,
  273|  44.4k|                                                  token.GetType());
  274|  44.4k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|  21.6k|    {
  279|  21.6k|        ParseError err;
  280|       |
  281|  21.6k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|  21.6k|        err.m_LineNumber                   = line_number;
  283|  21.6k|        err.m_Column                       = column;
  284|  21.6k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|  21.6k|        return err;
  287|  21.6k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|    194|    {
  291|    194|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|    194|                                                    token.GetColumn().unsafe(), token.GetText());
  293|    194|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  25.7k|    {
  298|  25.7k|        ParseError err;
  299|       |
  300|  25.7k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  25.7k|        err.m_LineNumber                       = line_number;
  302|  25.7k|        err.m_Column                           = column;
  303|  25.7k|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  25.7k|        return err;
  306|  25.7k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  25.7k|    {
  311|  25.7k|        return ConstructInvalidLabelIdentifierParseError(
  312|  25.7k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  25.7k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|  7.65k|    {
  319|  7.65k|        ParseError err;
  320|       |
  321|  7.65k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|  7.65k|        err.m_LineNumber                     = line_number;
  323|  7.65k|        err.m_Column                         = column;
  324|  7.65k|        err.label_already_defined.label_name = label_name;
  325|  7.65k|        err.label_already_defined.at_line    = at_line;
  326|  7.65k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|  7.65k|        return err;
  329|  7.65k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|  7.65k|    {
  334|  7.65k|        return ConstructLabelAlreadyDefinedParseError(
  335|  7.65k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|  7.65k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|  7.65k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|  22.1k|    {
  342|  22.1k|        ParseError err;
  343|       |
  344|  22.1k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|  22.1k|        err.m_LineNumber = line_number;
  346|  22.1k|        err.m_Column     = column;
  347|       |
  348|  22.1k|        return err;
  349|  22.1k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|  22.1k|    {
  354|  22.1k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|  22.1k|                                                        token.GetColumn().unsafe());
  356|  22.1k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|  2.63k|    {
  362|  2.63k|        ParseError err;
  363|       |
  364|  2.63k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|  2.63k|        err.m_LineNumber               = line_number;
  366|  2.63k|        err.m_Column                   = column;
  367|  2.63k|        err.too_few_arguments.required = required;
  368|  2.63k|        err.too_few_arguments.provided = provided;
  369|       |
  370|  2.63k|        return err;
  371|  2.63k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|  2.63k|    {
  376|  2.63k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|  2.63k|                                                  token.GetColumn().unsafe(), required, provided);
  378|  2.63k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|  4.03k|    {
  383|  4.03k|        ParseError err;
  384|       |
  385|  4.03k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|  4.03k|        err.m_LineNumber           = line_number;
  387|  4.03k|        err.m_Column               = column;
  388|  4.03k|        err.empty_label.label_name = label_name;
  389|       |
  390|  4.03k|        return err;
  391|  4.03k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|  4.03k|    {
  395|  4.03k|        return ConstructEmptyLabelParseError(
  396|  4.03k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|  4.03k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 3.53k, False: 500]
  ------------------
  398|  3.53k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|  4.03k|                        token.GetText());
  400|  4.03k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|    486|    {
  405|    486|        ParseError err;
  406|       |
  407|    486|        err.m_Type       = ParseError::Type::TooManyComma;
  408|    486|        err.m_LineNumber = line_number;
  409|    486|        err.m_Column     = column;
  410|       |
  411|    486|        return err;
  412|    486|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|    486|    {
  416|    486|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|    486|                                               token.GetColumn().unsafe());
  418|    486|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   130k|    {
   19|   130k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   130k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  4.12k|    {
  181|  4.12k|        ParsedProgram program;
  182|       |
  183|  4.12k|        program.m_Tokens = tokens;
  184|       |
  185|  4.12k|        phi::boolean line_has_instruction{false};
  186|  4.12k|        phi::usize   label_count{0u};
  187|       |
  188|   153k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 149k, False: 4.12k]
  ------------------
  189|   149k|        {
  190|   149k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   149k|            switch (current_token.GetType())
  195|   149k|            {
  196|       |                // Ignore comments
  197|    820|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 820, False: 148k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|    820|                    break;
  200|       |
  201|  16.1k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 16.1k, False: 133k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  16.1k|                    line_has_instruction = false;
  204|  16.1k|                    break;
  205|       |
  206|  61.3k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 61.3k, False: 88.0k]
  ------------------
  207|  61.3k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 4.52k, False: 56.7k]
  ------------------
  208|  4.52k|                    {
  209|  4.52k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  4.52k|                                current_token, Token::Type::NewLine));
  211|  4.52k|                        break;
  212|  4.52k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  56.7k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 14.6k, False: 42.1k]
  ------------------
  217|  14.6k|                    {
  218|  14.6k|                        program.AddParseError(
  219|  14.6k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  14.6k|                        break;
  221|  14.6k|                    }
  222|       |
  223|  42.1k|                    phi::string_view label_name = current_token.GetText();
  224|  42.1k|                    label_name.remove_suffix(1u);
  225|       |
  226|  42.1k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 21.4k, False: 20.6k]
  ------------------
  227|  21.4k|                    {
  228|  21.4k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|  21.4k|                                current_token.GetLineNumber().unsafe(),
  230|  21.4k|                                current_token.GetColumn().unsafe(), label_name));
  231|  21.4k|                        break;
  232|  21.4k|                    }
  233|       |
  234|  20.6k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 8.70k, False: 11.9k]
  ------------------
  235|  8.70k|                    {
  236|  8.70k|                        program.AddParseError(
  237|  8.70k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  8.70k|                        break;
  239|  8.70k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  11.9k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 7.65k, False: 4.30k]
  ------------------
  243|  7.65k|                    {
  244|       |                        // Find first defintions of label
  245|  7.65k|                        const Token* first_label_definition =
  246|  7.65k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  7.65k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  7.65k|                                    {
  249|  7.65k|                                        phi::string_view token_label_name = t.GetText();
  250|  7.65k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  7.65k|                                        if (token_label_name == label_name)
  253|  7.65k|                                        {
  254|  7.65k|                                            return true;
  255|  7.65k|                                        }
  256|  7.65k|                                    }
  257|       |
  258|  7.65k|                                    return false;
  259|  7.65k|                                });
  260|       |
  261|  7.65k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  7.65k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  7.65k|                                current_token, *first_label_definition));
  265|  7.65k|                        break;
  266|  7.65k|                    }
  267|       |
  268|  4.30k|                    program.m_JumpData[label_name] =
  269|  4.30k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|  4.30k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  4.30k|                    break;
  276|  11.9k|                }
  277|       |
  278|  34.3k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 34.3k, False: 115k]
  ------------------
  279|  34.3k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 22.1k, False: 12.1k]
  ------------------
  280|  22.1k|                    {
  281|  22.1k|                        program.AddParseError(
  282|  22.1k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  22.1k|                        break;
  284|  22.1k|                    }
  285|       |
  286|  12.1k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  12.1k|                    PHI_ASSERT(current_token.HasHint());
  290|  12.1k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  12.1k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  12.1k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  12.1k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  12.1k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  12.1k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  12.1k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  12.1k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  12.1k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  21.2k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 19.4k, False: 1.85k]
  ------------------
  312|  19.4k|                    {
  313|       |                        // Get next token
  314|  19.4k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 700, False: 18.7k]
  ------------------
  315|    700|                        {
  316|    700|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    700|                                    current_token, number_of_argument_required.unsafe(),
  318|    700|                                    argument_num.unsafe()));
  319|    700|                            break;
  320|    700|                        }
  321|       |
  322|  18.7k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  18.7k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 6.43k, False: 12.2k]
  ------------------
  326|  6.43k|                        {
  327|  6.43k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 486, False: 5.94k]
  ------------------
  328|    486|                            {
  329|    486|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    486|                            }
  331|       |
  332|  6.43k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  6.43k|                            continue;
  335|  6.43k|                        }
  336|       |
  337|  12.2k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 1.93k, False: 10.3k]
  ------------------
  338|  1.93k|                        {
  339|  1.93k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  1.93k|                                    token, number_of_argument_required.unsafe(),
  341|  1.93k|                                    argument_num.unsafe()));
  342|  1.93k|                            break;
  343|  1.93k|                        }
  344|       |
  345|  10.3k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  10.3k|                                parse_instruction_argument(
  347|  10.3k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  10.3k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 7.63k, False: 2.72k]
  ------------------
  349|  7.63k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  7.63k|                            break;
  352|  7.63k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  2.72k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  2.72k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  2.72k|                        argument_num++;
  359|  2.72k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  2.72k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  12.1k|                    program.m_Instructions.emplace_back(instruction);
  367|  12.1k|                    line_has_instruction = true;
  368|  12.1k|                    break;
  369|  34.3k|                }
  370|       |
  371|  36.8k|                default:
  ------------------
  |  Branch (371:17): [True: 36.8k, False: 112k]
  ------------------
  372|  36.8k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  36.8k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 20.1k, False: 16.6k]
  ------------------
  374|  20.1k|                    {
  375|  20.1k|                        expected_token_type = Token::Type::NewLine;
  376|  20.1k|                    }
  377|       |
  378|  36.8k|                    program.AddParseError(
  379|  36.8k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  36.8k|                    break;
  381|   149k|            }
  382|   149k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  4.12k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 549, False: 3.57k]
  ------------------
  386|    549|        {
  387|  5.25k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 4.70k, False: 549]
  ------------------
  388|  4.70k|            {
  389|  4.70k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  4.70k|                const Token& token = *it;
  392|  4.70k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 4.03k, False: 671]
  ------------------
  393|  4.03k|                {
  394|  4.03k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  4.03k|                    --label_count;
  396|  4.03k|                }
  397|  4.70k|            }
  398|    549|        }
  399|       |
  400|  4.12k|        return program;
  401|  4.12k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  4.12k|    {
  405|  4.12k|        TokenStream tokens = Tokenize(source);
  406|  4.12k|        return Parse(tokens);
  407|  4.12k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  10.3k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  10.3k|        switch (token.GetType())
   37|  10.3k|        {
   38|  1.52k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 1.52k, False: 8.83k]
  ------------------
   39|  1.52k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 520, False: 1.00k]
  ------------------
   40|  1.52k|                                          ArgumentType::AddressDisplacement))
   41|    520|                {
   42|    520|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    520|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    520|                    return {};
   46|    520|                }
   47|       |
   48|       |                // Get address displacement
   49|  1.00k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  1.00k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  1.00k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 2, False: 1.00k]
  ------------------
   54|      2|                {
   55|      2|                    program.AddParseError(
   56|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      2|                    return {};
   58|      2|                }
   59|       |
   60|  1.00k|                auto         it           = tokens.current_position();
   61|  1.00k|                const Token& first_token  = tokens.consume();
   62|  1.00k|                const Token& second_token = tokens.consume();
   63|  1.00k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  1.00k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 198, False: 807]
  ------------------
   66|    198|                {
   67|    198|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    198|                            first_token, Token::Type::OpenBracket));
   69|    198|                    return {};
   70|    198|                }
   71|       |
   72|       |                // Second token is the register
   73|    807|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 259, False: 548]
  ------------------
   74|    259|                {
   75|    259|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|    259|                            second_token, Token::Type::RegisterInt));
   77|    259|                    return {};
   78|    259|                }
   79|       |
   80|    548|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 194, False: 354]
  ------------------
   81|    194|                {
   82|    194|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|    194|                            third_token, Token::Type::ClosingBracket));
   84|    194|                    return {};
   85|    194|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|    354|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|    354|                return ConstructInstructionArgumentAddressDisplacement(
   94|    354|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|    548|            }
   96|    397|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 397, False: 9.96k]
  ------------------
   97|    397|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 194, False: 203]
  ------------------
   98|    194|                {
   99|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    194|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    194|                    return {};
  102|    194|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|    203|                return ConstructInstructionArgumentRegisterInt(
  108|    203|                        static_cast<IntRegisterID>(token.GetHint()));
  109|    397|            }
  110|  1.13k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 1.13k, False: 9.22k]
  ------------------
  111|  1.13k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 194, False: 943]
  ------------------
  112|    194|                {
  113|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    194|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    194|                    return {};
  116|    194|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|    943|                return ConstructInstructionArgumentRegisterFloat(
  122|    943|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  1.13k|            }
  124|    194|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 194, False: 10.1k]
  ------------------
  125|    194|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|    194|                return {};
  128|  1.13k|            }
  129|  4.07k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 4.07k, False: 6.28k]
  ------------------
  130|       |                // Parse as Label
  131|  4.07k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 578, False: 3.49k]
  ------------------
  132|    578|                {
  133|    578|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|    578|                            token, expected_argument_type, ArgumentType::Label));
  135|    578|                    return {};
  136|    578|                }
  137|       |
  138|  3.49k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 3.49k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  3.49k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 2.48k, False: 1.01k]
  ------------------
  145|  2.48k|                {
  146|  2.48k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  2.48k|                    return {};
  148|  2.48k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  1.01k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  3.49k|            }
  154|    601|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 601, False: 9.75k]
  ------------------
  155|    601|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 197, False: 404]
  ------------------
  156|    197|                {
  157|    197|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    197|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    197|                    return {};
  160|    197|                }
  161|       |
  162|    404|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 207, False: 197]
  ------------------
  163|    207|                {
  164|    207|                    return ConstructInstructionArgumentImmediateValue(
  165|    207|                            static_cast<std::int16_t>(token.GetHint()));
  166|    207|                }
  167|       |
  168|    197|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    197|                return {};
  170|    404|            }
  171|       |
  172|  2.42k|            default:
  ------------------
  |  Branch (172:13): [True: 2.42k, False: 7.93k]
  ------------------
  173|  2.42k|                program.AddParseError(
  174|  2.42k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  2.42k|                return {};
  176|  10.3k|        }
  177|  10.3k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  38.2k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  38.2k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 31.8k, False: 6.42k]
  ------------------
  248|  31.8k|                                    {
  249|  31.8k|                                        phi::string_view token_label_name = t.GetText();
  250|  31.8k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  31.8k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 7.65k, False: 24.1k]
  ------------------
  253|  7.65k|                                        {
  254|  7.65k|                                            return true;
  255|  7.65k|                                        }
  256|  31.8k|                                    }
  257|       |
  258|  30.6k|                                    return false;
  259|  38.2k|                                });

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|   150k|    {
   13|   150k|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 24.0k, False: 126k]
  ------------------
   14|  24.0k|        {
   15|  24.0k|            const char first_char = token[0u];
   16|  24.0k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 400, False: 23.6k]
  |  Branch (16:38): [True: 1.94k, False: 21.6k]
  ------------------
   17|  2.34k|            {
   18|  2.34k|                const char second_char = token[1u];
   19|  2.34k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 2.06k, False: 276]
  |  Branch (19:43): [True: 1.66k, False: 401]
  ------------------
   20|  1.66k|                {
   21|  1.66k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  1.66k|                }
   23|  2.34k|            }
   24|  24.0k|        }
   25|   126k|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 34.3k, False: 91.9k]
  ------------------
   26|  34.3k|        {
   27|  34.3k|            const char first_char = token[0u];
   28|  34.3k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 205, False: 34.1k]
  |  Branch (28:38): [True: 1.77k, False: 32.3k]
  ------------------
   29|  1.97k|            {
   30|  1.97k|                const char second_char = token[1u];
   31|  1.97k|                const char third_char  = token[2u];
   32|       |
   33|  1.97k|                switch (second_char)
   34|  1.97k|                {
   35|    588|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 588, False: 1.39k]
  ------------------
   36|    588|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 390, False: 198]
  |  Branch (36:50): [True: 194, False: 196]
  ------------------
   37|    194|                        {
   38|    194|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|    194|                        }
   40|    394|                        break;
   41|    588|                    }
   42|    583|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 583, False: 1.39k]
  ------------------
   43|    583|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 389, False: 194]
  |  Branch (43:50): [True: 195, False: 194]
  ------------------
   44|    195|                        {
   45|    195|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|    195|                        }
   47|    388|                        break;
   48|    583|                    }
   49|    582|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 582, False: 1.39k]
  ------------------
   50|    582|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 194, False: 388]
  |  Branch (50:50): [True: 194, False: 194]
  ------------------
   51|    388|                        {
   52|    388|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|    388|                        }
   54|    194|                        break;
   55|    582|                    }
   56|    226|                    default: {
  ------------------
  |  Branch (56:21): [True: 226, False: 1.75k]
  ------------------
   57|    226|                        break;
   58|    582|                    }
   59|  1.97k|                }
   60|  1.97k|            }
   61|  34.3k|        }
   62|       |
   63|   147k|        return IntRegisterID::None;
   64|   150k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|   147k|    {
   68|   147k|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 22.3k, False: 125k]
  ------------------
   69|  22.3k|        {
   70|  22.3k|            const char first_char = token[0u];
   71|  22.3k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 1.78k, False: 20.5k]
  |  Branch (71:38): [True: 734, False: 19.8k]
  ------------------
   72|  2.51k|            {
   73|  2.51k|                const char second_char = token[1u];
   74|  2.51k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 2.26k, False: 252]
  |  Branch (74:43): [True: 1.71k, False: 552]
  ------------------
   75|  1.71k|                {
   76|  1.71k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  1.71k|                }
   78|  2.51k|            }
   79|  22.3k|        }
   80|   125k|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 33.5k, False: 91.9k]
  ------------------
   81|  33.5k|        {
   82|  33.5k|            const char first_char = token[0u];
   83|  33.5k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 1.43k, False: 32.1k]
  |  Branch (83:38): [True: 1.00k, False: 31.1k]
  ------------------
   84|  2.43k|            {
   85|  2.43k|                const char second_char = token[1u];
   86|  2.43k|                const char third_char  = token[2u];
   87|       |
   88|  2.43k|                switch (second_char)
   89|  2.43k|                {
   90|    592|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 592, False: 1.84k]
  ------------------
   91|    592|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 398, False: 194]
  |  Branch (91:50): [True: 194, False: 204]
  ------------------
   92|    194|                        {
   93|    194|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|    194|                        }
   95|    398|                        break;
   96|    592|                    }
   97|    593|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 593, False: 1.84k]
  ------------------
   98|    593|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 398, False: 195]
  |  Branch (98:50): [True: 203, False: 195]
  ------------------
   99|    203|                        {
  100|    203|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|    203|                        }
  102|    390|                        break;
  103|    593|                    }
  104|    583|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 583, False: 1.85k]
  ------------------
  105|    583|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 194, False: 389]
  |  Branch (105:50): [True: 194, False: 195]
  ------------------
  106|    388|                        {
  107|    388|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|    388|                        }
  109|    195|                        break;
  110|    583|                    }
  111|    669|                    default: {
  ------------------
  |  Branch (111:21): [True: 669, False: 1.76k]
  ------------------
  112|    669|                        break;
  113|    583|                    }
  114|  2.43k|                }
  115|  2.43k|            }
  116|  33.5k|        }
  117|       |
  118|   145k|        return FloatRegisterID::None;
  119|   147k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|   129k|    {
  123|   129k|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 30.7k, False: 98.7k]
  ------------------
  124|  30.7k|        {
  125|  30.7k|            const char c1 = token[0u];
  126|  30.7k|            const char c2 = token[1u];
  127|  30.7k|            const char c3 = token[2u];
  128|  30.7k|            const char c4 = token[3u];
  129|       |
  130|  30.7k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 1.11k, False: 29.6k]
  |  Branch (130:34): [True: 512, False: 29.1k]
  |  Branch (130:49): [True: 927, False: 701]
  |  Branch (130:62): [True: 195, False: 506]
  ------------------
  131|  30.7k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 199, False: 923]
  |  Branch (131:34): [True: 692, False: 231]
  |  Branch (131:49): [True: 322, False: 569]
  |  Branch (131:62): [True: 384, False: 185]
  ------------------
  132|  30.7k|        }
  133|       |
  134|  98.7k|        return false;
  135|   129k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|   128k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  42.1k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|   280k|    {
   41|   280k|        return m_Type;
   42|   280k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   150k|    {
   51|   150k|        return m_LineNumber;
   52|   150k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   138k|    {
   56|   138k|        return m_Column;
   57|   138k|    }
_ZNK3dlx5Token7GetTextEv:
   65|   184k|    {
   66|   184k|        return m_Text;
   67|   184k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  13.5k|    {
   80|  13.5k|        return m_HasHint;
   81|  13.5k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  14.8k|    {
   85|  14.8k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  14.8k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  14.8k|                   m_Type == Type::ImmediateInteger);
   88|  14.8k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  14.8k|        return m_Hint;
   91|  14.8k|    }

_ZN3dlx11TokenStream8finalizeEv:
   30|  4.12k|    {
   31|       |#if defined(PHI_DEBUG)
   32|       |        PHI_ASSERT(!m_Finialized);
   33|       |#endif
   34|       |
   35|  4.12k|        m_Iterator = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |        m_Finialized = true;
   38|       |#endif
   39|  4.12k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   51|  1.00k|    {
   52|  1.00k|        return x + m_Iterator <= m_Tokens.size();
   53|  1.00k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   56|   172k|    {
   57|   172k|        return m_Iterator < m_Tokens.size();
   58|   172k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   61|   171k|    {
   62|   171k|        return m_Iterator >= m_Tokens.size();
   63|   171k|    }
_ZN3dlx11TokenStream7consumeEv:
   76|   171k|    {
   77|   171k|        PHI_ASSERT(!reached_end());
   78|       |#if defined(PHI_DEBUG)
   79|       |        PHI_ASSERT(m_Finialized);
   80|       |#endif
   81|       |
   82|   171k|        return m_Tokens.at(m_Iterator++.unsafe());
   83|   171k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  155|  1.00k|    {
  156|  1.00k|        return m_Iterator;
  157|  1.00k|    }
_ZN3dlx11TokenStream12set_positionEN3phi7integerImEE:
  160|    354|    {
  161|       |#if defined(PHI_DEBUG)
  162|       |        PHI_ASSERT(m_Finialized);
  163|       |#endif
  164|       |
  165|    354|        m_Iterator = pos;
  166|    354|    }
_ZNK3dlx11TokenStream6rbeginEv:
  205|    549|    {
  206|       |#if defined(PHI_DEBUG)
  207|       |        //PHI_ASSERT(m_Finialized);
  208|       |#endif
  209|       |
  210|    549|        return m_Tokens.rbegin();
  211|    549|    }
_ZNK3dlx11TokenStream4rendEv:
  214|  4.70k|    {
  215|       |#if defined(PHI_DEBUG)
  216|       |        //PHI_ASSERT(m_Finialized);
  217|       |#endif
  218|       |
  219|  4.70k|        return m_Tokens.rend();
  220|  4.70k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  4.12k|    {
   66|  4.12k|        TokenStream tokens;
   67|       |
   68|  4.12k|        phi::string_view current_token;
   69|       |
   70|  4.12k|        phi::u64 current_line_number{1u};
   71|  4.12k|        phi::u64 current_column{1u};
   72|  4.12k|        phi::u64 token_begin{0u};
   73|       |
   74|  4.12k|        phi::boolean parsing_comment{false};
   75|       |
   76|   481k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 477k, False: 4.12k]
  ------------------
   77|   477k|        {
   78|   477k|            const char c{source.at(i)};
   79|       |
   80|   477k|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 18.1k, False: 459k]
  ------------------
   81|  18.1k|            {
   82|  18.1k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 3.23k, False: 14.9k]
  ------------------
   83|  3.23k|                {
   84|       |                    // Skip empty lines
   85|  3.23k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  3.23k|                                        current_line_number, current_column);
   87|       |
   88|  3.23k|                    parsing_comment = false;
   89|  3.23k|                    current_line_number += 1u;
   90|  3.23k|                    current_column = 1u;
   91|  3.23k|                    continue;
   92|  3.23k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  14.9k|                tokens.emplace_back(ParseToken(
   96|  14.9k|                        source.substring_view(
   97|  14.9k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  14.9k|                                current_token.length()),
   99|  14.9k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  14.9k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  14.9k|                                    current_line_number, current_column);
  103|       |
  104|  14.9k|                current_token   = phi::string_view{};
  105|  14.9k|                parsing_comment = false;
  106|  14.9k|                current_line_number += 1u;
  107|  14.9k|                current_column = 0u;
  108|  14.9k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|   459k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 587, False: 458k]
  |  Branch (110:34): [True: 700, False: 457k]
  ------------------
  111|  1.28k|            {
  112|  1.28k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 244, False: 1.04k]
  ------------------
  113|    244|                {
  114|    244|                    token_begin = i;
  115|    244|                }
  116|  1.04k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 666, False: 377]
  ------------------
  117|    666|                {
  118|    666|                    tokens.emplace_back(ParseToken(
  119|    666|                            source.substring_view(
  120|    666|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|    666|                                    current_token.length()),
  122|    666|                            current_line_number, current_column - current_token.length()));
  123|    666|                    token_begin   = i;
  124|    666|                    current_token = phi::string_view{};
  125|    666|                }
  126|       |
  127|  1.28k|                parsing_comment = true;
  128|  1.28k|                current_token   = source.substring_view(
  129|  1.28k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  1.28k|                        current_token.length() + 1u);
  131|  1.28k|            }
  132|   457k|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 267, False: 457k]
  ------------------
  133|    267|            {
  134|       |                // simply append the character
  135|    267|                current_token = source.substring_view(
  136|    267|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|    267|                        current_token.length() + 1u);
  138|    267|            }
  139|   457k|            else
  140|   457k|            {
  141|       |                // Not parsing a comment
  142|   457k|                switch (c)
  143|   457k|                {
  144|  4.75k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 4.75k, False: 452k]
  ------------------
  145|  8.88k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 4.13k, False: 453k]
  ------------------
  146|  14.7k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 5.86k, False: 451k]
  ------------------
  147|  14.7k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 1.94k, False: 12.8k]
  ------------------
  148|  1.94k|                        {
  149|  1.94k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|  1.94k|                            continue;
  152|  1.94k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  12.8k|                        tokens.emplace_back(ParseToken(
  156|  12.8k|                                source.substring_view(
  157|  12.8k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  12.8k|                                        current_token.length()),
  159|  12.8k|                                current_line_number, current_column - current_token.length()));
  160|  12.8k|                        current_token = phi::string_view{};
  161|  12.8k|                        break;
  162|  46.7k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 46.7k, False: 410k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  46.7k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 43.8k, False: 2.92k]
  ------------------
  165|  43.8k|                        {
  166|  43.8k|                            current_token = source.substring_view(
  167|  43.8k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  43.8k|                                    current_token.length() + 1u);
  169|  43.8k|                            tokens.emplace_back(ParseToken(
  170|  43.8k|                                    source.substring_view(
  171|  43.8k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  43.8k|                                                    token_begin),
  173|  43.8k|                                            current_token.length()),
  174|  43.8k|                                    current_line_number,
  175|  43.8k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  43.8k|                            current_token = phi::string_view{};
  178|  43.8k|                        }
  179|  2.92k|                        else
  180|  2.92k|                        {
  181|       |                            // Orphan colon
  182|  2.92k|                            token_begin = i;
  183|       |
  184|  2.92k|                            tokens.emplace_back(
  185|  2.92k|                                    Token::Type::Colon,
  186|  2.92k|                                    source.substring_view(
  187|  2.92k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  2.92k|                                                    token_begin),
  189|  2.92k|                                            1u),
  190|  2.92k|                                    current_line_number, current_column);
  191|  2.92k|                        }
  192|  46.7k|                        break;
  193|  20.9k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 20.9k, False: 436k]
  ------------------
  194|  38.5k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 17.5k, False: 439k]
  ------------------
  195|  40.5k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 2.02k, False: 455k]
  ------------------
  196|  40.5k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 34.1k, False: 6.37k]
  ------------------
  197|  34.1k|                        {
  198|  34.1k|                            tokens.emplace_back(ParseToken(
  199|  34.1k|                                    source.substring_view(
  200|  34.1k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  34.1k|                                                    token_begin),
  202|  34.1k|                                            current_token.length()),
  203|  34.1k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  34.1k|                            current_token = phi::string_view{};
  206|  34.1k|                        }
  207|       |
  208|  40.5k|                        Token::Type type;
  209|  40.5k|                        switch (c)
  210|  40.5k|                        {
  211|  20.9k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 20.9k, False: 19.5k]
  ------------------
  212|  20.9k|                                type = Token::Type::Comma;
  213|  20.9k|                                break;
  214|  17.5k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 17.5k, False: 23.0k]
  ------------------
  215|  17.5k|                                type = Token::Type::OpenBracket;
  216|  17.5k|                                break;
  217|  2.02k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 2.02k, False: 38.5k]
  ------------------
  218|  2.02k|                                type = Token::Type::ClosingBracket;
  219|  2.02k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 40.5k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  40.5k|#endif
  225|  40.5k|                        }
  226|       |
  227|  40.5k|                        token_begin = i;
  228|       |
  229|  40.5k|                        tokens.emplace_back(
  230|  40.5k|                                type,
  231|  40.5k|                                source.substring_view(
  232|  40.5k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  40.5k|                                        1u),
  234|  40.5k|                                current_line_number, current_column);
  235|  40.5k|                        break;
  236|       |
  237|   355k|                    default:
  ------------------
  |  Branch (237:21): [True: 355k, False: 102k]
  ------------------
  238|   355k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 108k, False: 246k]
  ------------------
  239|   108k|                        {
  240|   108k|                            token_begin = i;
  241|   108k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   355k|                        current_token = source.substring_view(
  245|   355k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   355k|                                current_token.length() + 1u);
  247|   457k|                }
  248|   457k|            }
  249|       |
  250|   472k|            current_column += 1u;
  251|   472k|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  4.12k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 3.04k, False: 1.07k]
  ------------------
  255|  3.04k|        {
  256|  3.04k|            tokens.emplace_back(
  257|  3.04k|                    ParseToken(source.substring_view(
  258|  3.04k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  3.04k|                                       current_token.length()),
  260|  3.04k|                               current_line_number, current_column - current_token.length()));
  261|  3.04k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  4.12k|        tokens.finalize();
  265|       |
  266|  4.12k|        return tokens;
  267|  4.12k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   109k|    {
   14|   109k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 1.44k, False: 108k]
  |  Branch (14:13): [True: 816, False: 108k]
  |  Branch (14:36): [True: 816, False: 628]
  ------------------
   15|    816|        {
   16|    816|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|    816|            if (number)
  ------------------
  |  Branch (18:17): [True: 405, False: 411]
  ------------------
   19|    405|            {
   20|    405|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|    405|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|    405|            }
   23|       |
   24|    411|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|    816|        }
   26|       |
   27|   108k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 399, False: 108k]
  |  Branch (27:13): [True: 910, False: 107k]
  |  Branch (27:36): [True: 511, False: 107k]
  ------------------
   28|    910|        {
   29|    910|            return {Token::Type::Comment, token, line_number, column};
   30|    910|        }
   31|       |
   32|   107k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 2.71k, False: 105k]
  ------------------
   33|  2.71k|        {
   34|  2.71k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  2.71k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  2.71k|        }
   37|       |
   38|   105k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 378, False: 104k]
  ------------------
   39|    378|        {
   40|    378|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|    378|        }
   42|       |
   43|   104k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 1.72k, False: 102k]
  ------------------
   44|  1.72k|        {
   45|  1.72k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  1.72k|                    static_cast<phi::uint32_t>(id)};
   47|  1.72k|        }
   48|       |
   49|   102k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 1.88k, False: 101k]
  ------------------
   50|  1.88k|        {
   51|  1.88k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  1.88k|                    static_cast<phi::uint32_t>(id)};
   53|  1.88k|        }
   54|       |
   55|   101k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 35.4k, False: 65.6k]
  ------------------
   56|  35.4k|        {
   57|  35.4k|            return {Token::Type::OpCode, token, line_number, column,
   58|  35.4k|                    static_cast<phi::uint32_t>(opcode)};
   59|  35.4k|        }
   60|       |
   61|  65.6k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|   101k|    }

LLVMFuzzerTestOneInput:
    8|  4.12k|{
    9|  4.12k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   10|       |
   11|       |    // Parse it
   12|  4.12k|    dlx::Parser::Parse(source);
   13|       |
   14|  4.12k|    return 0;
   15|  4.12k|}


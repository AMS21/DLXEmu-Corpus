_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  1.85M|        {
  169|  1.85M|            PHI_ASSERT(index < 3u);
  170|       |
  171|  1.85M|            switch (index.unsafe())
  172|  1.85M|            {
  173|   847k|                case 0:
  ------------------
  |  Branch (173:17): [True: 847k, False: 1.00M]
  ------------------
  174|   847k|                    return m_Arg1Type;
  175|       |
  176|   512k|                case 1:
  ------------------
  |  Branch (176:17): [True: 512k, False: 1.33M]
  ------------------
  177|   512k|                    return m_Arg2Type;
  178|       |
  179|   491k|                case 2:
  ------------------
  |  Branch (179:17): [True: 491k, False: 1.36M]
  ------------------
  180|   491k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 1.85M]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  1.85M|#endif
  187|  1.85M|            }
  188|  1.85M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   469k|        {
  195|   469k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   469k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 457k, False: 12.3k]
  ------------------
  199|   457k|            {
  200|   457k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   457k|            }
  202|   469k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 261k, False: 208k]
  ------------------
  203|   261k|            {
  204|   261k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   261k|            }
  206|   469k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 146k, False: 322k]
  ------------------
  207|   146k|            {
  208|   146k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   146k|            }
  210|       |
  211|   469k|            return number_of_argument_required;
  212|   469k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   469k|        {
  221|   469k|            return m_Executor;
  222|   469k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   363k|    {
   38|   363k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   363k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   363k|                                         static_cast<underlying_t>(rhs));
   42|   363k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   363k|    {
   55|   363k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   363k|        return static_cast<underlying_t>(type & test) != 0;
   58|   363k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  1.45M|    {
   31|  1.45M|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 20.0k, False: 1.43M]
  ------------------
   32|  20.0k|        {
   33|  20.0k|            return true;
   34|  20.0k|        }
   35|       |
   36|  1.43M|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 5.22k, False: 1.42M]
  ------------------
   37|  5.22k|        {
   38|  5.22k|            return true;
   39|  5.22k|        }
   40|       |
   41|  1.42M|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 542k, False: 885k]
  ------------------
   42|   542k|        {
   43|   542k|            return true;
   44|   542k|        }
   45|       |
   46|   885k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 4.58k, False: 880k]
  ------------------
   47|  4.58k|        {
   48|  4.58k|            return true;
   49|  4.58k|        }
   50|       |
   51|   880k|        return false;
   52|   885k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|   880k|    {
   56|   880k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 880k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|   880k|        const char first_char = token.at(0u);
   62|       |
   63|   880k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 183k, False: 697k]
  ------------------
   64|   183k|        {
   65|   183k|            return phi::is_alpha(first_char);
   66|   183k|        }
   67|       |
   68|   697k|        phi::boolean just_under_scores = (first_char == '_');
   69|   697k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 120k, False: 577k]
  |  Branch (69:13): [True: 97.8k, False: 599k]
  |  Branch (69:43): [True: 97.8k, False: 22.3k]
  ------------------
   70|  97.8k|        {
   71|  97.8k|            return false;
   72|  97.8k|        }
   73|       |
   74|  2.25M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 1.88M, False: 372k]
  ------------------
   75|  1.88M|        {
   76|  1.88M|            const char c{token.at(index)};
   77|       |
   78|  1.88M|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 1.63M, False: 248k]
  ------------------
   79|  1.63M|            {
   80|  1.63M|                just_under_scores = false;
   81|  1.63M|            }
   82|   248k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 21.5k, False: 227k]
  ------------------
   83|  21.5k|            {
   84|  21.5k|                continue;
   85|  21.5k|            }
   86|   227k|            else
   87|   227k|            {
   88|   227k|                return false;
   89|   227k|            }
   90|  1.88M|        }
   91|       |
   92|   372k|        return !just_under_scores;
   93|   599k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|  4.05M|    {
  100|  4.05M|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 4.05M]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|  4.05M|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 673k, False: 3.37M]
  ------------------
  106|   673k|        {
  107|   673k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 93.0k, False: 580k]
  ------------------
  108|  93.0k|            {
  109|  93.0k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  93.0k|            }
  111|       |
  112|   580k|            return {};
  113|   673k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|  3.37M|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 35.4k, False: 3.34M]
  ------------------
  117|  35.4k|        {
  118|  35.4k|            return {};
  119|  35.4k|        }
  120|       |
  121|  3.34M|        std::int32_t number{0};
  122|  3.34M|        phi::boolean is_negative{false};
  123|  3.34M|        phi::boolean starts_with_zero{false};
  124|  3.34M|        phi::boolean parsing_binary{false};
  125|  3.34M|        phi::boolean parsing_octal{false};
  126|  3.34M|        phi::boolean parsing_hexadecimal{false};
  127|  3.34M|        phi::boolean parsed_something{false};
  128|  3.34M|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|  3.74M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 3.68M, False: 59.6k]
  ------------------
  133|  3.68M|        {
  134|  3.68M|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|  3.68M|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 3.34M, False: 343k]
  ------------------
  138|  3.34M|            {
  139|  3.34M|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 7.09k, False: 3.33M]
  ------------------
  140|  7.09k|                {
  141|  7.09k|                    continue;
  142|  7.09k|                }
  143|       |
  144|  3.33M|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 25.3k, False: 3.30M]
  ------------------
  145|  25.3k|                {
  146|  25.3k|                    is_negative = true;
  147|  25.3k|                    continue;
  148|  25.3k|                }
  149|       |
  150|  3.30M|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 51.1k, False: 3.25M]
  ------------------
  151|  51.1k|                {
  152|  51.1k|                    starts_with_zero = true;
  153|  51.1k|                    continue;
  154|  51.1k|                }
  155|       |
  156|  3.25M|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 7.22k, False: 3.25M]
  ------------------
  157|  7.22k|                {
  158|  7.22k|                    return {};
  159|  7.22k|                }
  160|  3.25M|            }
  161|       |
  162|       |            // Second character
  163|  3.59M|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 143k, False: 3.45M]
  ------------------
  164|   143k|            {
  165|   143k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 51.1k, False: 92.3k]
  ------------------
  166|  51.1k|                {
  167|       |                    // Binary
  168|  51.1k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 6.80k, False: 44.3k]
  |  Branch (168:37): [True: 1.78k, False: 42.5k]
  ------------------
  169|  8.58k|                    {
  170|  8.58k|                        parsing_binary = true;
  171|  8.58k|                        continue;
  172|  8.58k|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  42.5k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 17.5k, False: 25.0k]
  |  Branch (175:37): [True: 4.17k, False: 20.8k]
  ------------------
  176|  21.7k|                    {
  177|  21.7k|                        parsing_hexadecimal = true;
  178|  21.7k|                        continue;
  179|  21.7k|                    }
  180|       |
  181|       |                    // Octal
  182|  20.8k|                    parsing_octal = true;
  183|  20.8k|                }
  184|   143k|            }
  185|       |
  186|       |            // Handle seperators
  187|  3.56M|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 9.80k, False: 3.55M]
  ------------------
  188|  9.80k|            {
  189|  9.80k|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 4.58k, False: 5.22k]
  ------------------
  190|  4.58k|                {
  191|  4.58k|                    return {};
  192|  4.58k|                }
  193|       |
  194|  5.22k|                parsed_separator = true;
  195|  5.22k|                continue;
  196|  9.80k|            }
  197|       |
  198|       |            // Check for over/underflow
  199|  3.55M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 95.6k, False: 3.45M]
  |  Branch (199:32): [True: 4.32k, False: 91.3k]
  ------------------
  200|  4.32k|            {
  201|       |                // Would underflow
  202|  4.32k|                return {};
  203|  4.32k|            }
  204|  3.54M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 3.45M, False: 91.3k]
  |  Branch (204:17): [True: 11.6k, False: 3.53M]
  |  Branch (204:33): [True: 11.6k, False: 3.44M]
  ------------------
  205|  11.6k|            {
  206|       |                // Would overflow
  207|  11.6k|                return {};
  208|  11.6k|            }
  209|       |
  210|  3.53M|            parsed_separator = false;
  211|  3.53M|            parsed_something = true;
  212|       |
  213|  3.53M|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 10.2k, False: 3.52M]
  ------------------
  214|  10.2k|            {
  215|  10.2k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 2.97k, False: 7.32k]
  ------------------
  216|  2.97k|                {
  217|  2.97k|                    return {};
  218|  2.97k|                }
  219|       |
  220|  7.32k|                number <<= 1;
  221|  7.32k|                number |= (c - '0');
  222|  7.32k|            }
  223|  3.52M|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 21.3k, False: 3.50M]
  ------------------
  224|  21.3k|            {
  225|  21.3k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 14.2k, False: 7.12k]
  ------------------
  226|  14.2k|                {
  227|  14.2k|                    return {};
  228|  14.2k|                }
  229|       |
  230|  7.12k|                number <<= 3;
  231|  7.12k|                number |= (c - '0');
  232|  7.12k|            }
  233|  3.50M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 32.8k, False: 3.47M]
  ------------------
  234|  32.8k|            {
  235|  32.8k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 17.4k, False: 15.3k]
  ------------------
  236|  17.4k|                {
  237|  17.4k|                    return {};
  238|  17.4k|                }
  239|       |
  240|  15.3k|                number <<= 4;
  241|  15.3k|                number |= phi::hex_digit_value(c).unsafe();
  242|  15.3k|            }
  243|  3.47M|            else
  244|  3.47M|            {
  245|  3.47M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 3.21M, False: 261k]
  ------------------
  246|  3.21M|                {
  247|  3.21M|                    return {};
  248|  3.21M|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|   261k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 83.2k, False: 178k]
  |  Branch (251:36): [True: 7.23k, False: 75.9k]
  ------------------
  252|  7.23k|                {
  253|  7.23k|                    return {};
  254|  7.23k|                }
  255|       |
  256|   254k|                number *= 10;
  257|   254k|                number += (c - '0');
  258|   254k|            }
  259|  3.53M|        }
  260|       |
  261|  59.6k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 56.4k, False: 3.12k]
  ------------------
  262|  56.4k|        {
  263|       |            // Check for over/underflow
  264|  56.4k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 11.4k, False: 45.0k]
  |  Branch (264:32): [True: 9.65k, False: 1.79k]
  ------------------
  265|  9.65k|            {
  266|       |                // Would underflow
  267|  9.65k|                return {};
  268|  9.65k|            }
  269|  46.8k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 45.0k, False: 1.79k]
  |  Branch (269:17): [True: 5.02k, False: 41.8k]
  |  Branch (269:33): [True: 5.02k, False: 40.0k]
  ------------------
  270|  5.02k|            {
  271|       |                // Would overflow
  272|  5.02k|                return {};
  273|  5.02k|            }
  274|       |
  275|  41.8k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 1.79k, False: 40.0k]
  ------------------
  276|  1.79k|            {
  277|  1.79k|                return static_cast<std::int16_t>(-number);
  278|  1.79k|            }
  279|       |
  280|  40.0k|            return static_cast<std::int16_t>(number);
  281|  41.8k|        }
  282|       |
  283|  3.12k|        return {};
  284|  59.6k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   229k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   229k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 3.31M, False: 0]
  ------------------
   64|  3.31M|            {
   65|  3.31M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 229k, False: 3.08M]
  ------------------
   66|   229k|                {
   67|   229k|                    return &token;
   68|   229k|                }
   69|  3.31M|            }
   70|       |
   71|      0|            return nullptr;
   72|   229k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  1.02M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.02M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.02M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  4.09M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  4.09M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  4.09M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  2.17M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.17M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.17M|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   469k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|   134k|    {
   25|   134k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|   134k|        switch (argument_number.unsafe())
   28|   134k|        {
   29|  98.0k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 98.0k, False: 36.2k]
  ------------------
   30|  98.0k|                m_Arg1 = argument;
   31|  98.0k|                break;
   32|  22.2k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 22.2k, False: 111k]
  ------------------
   33|  22.2k|                m_Arg2 = argument;
   34|  22.2k|                break;
   35|  13.9k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 13.9k, False: 120k]
  ------------------
   36|  13.9k|                m_Arg3 = argument;
   37|  13.9k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 134k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|   134k|#endif
   42|   134k|        }
   43|   134k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  1.54M|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  20.0k|    {
  171|  20.0k|        InstructionArgument arg;
  172|  20.0k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  20.0k|        arg.register_int.register_id = id;
  174|  20.0k|        return arg;
  175|  20.0k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  38.8k|    {
  179|  38.8k|        InstructionArgument arg;
  180|  38.8k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  38.8k|        arg.register_float.register_id = id;
  182|  38.8k|        return arg;
  183|  38.8k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  8.59k|    {
  187|  8.59k|        InstructionArgument arg;
  188|  8.59k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  8.59k|        arg.immediate_value.signed_value = value;
  190|  8.59k|        return arg;
  191|  8.59k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|  12.0k|    {
  196|  12.0k|        InstructionArgument arg;
  197|  12.0k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|  12.0k|        arg.address_displacement.register_id  = id;
  199|  12.0k|        arg.address_displacement.displacement = displacement;
  200|  12.0k|        return arg;
  201|  12.0k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  204|  54.7k|    {
  205|  54.7k|        InstructionArgument arg;
  206|  54.7k|        arg.m_Type           = ArgumentType::Label;
  207|  54.7k|        arg.label.label_name = label_name;
  208|  54.7k|        return arg;
  209|  54.7k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   469k|    {
  453|   469k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   469k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|  5.14M|    {
   24|  5.14M|        switch (token.length().unsafe())
   25|  5.14M|        {
   26|       |            // 1 character OpCodes
   27|   749k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 749k, False: 4.39M]
  ------------------
   28|   749k|                const char c1 = token[0u];
   29|       |
   30|   749k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 206k, False: 543k]
  ------------------
   31|   206k|                {
   32|   206k|                    return OpCode::J;
   33|   206k|                }
   34|   543k|                break;
   35|   749k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|   791k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 791k, False: 4.35M]
  ------------------
   39|   791k|                const char c1 = token[0u];
   40|   791k|                const char c2 = token[1u];
   41|       |
   42|   791k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 505k, False: 286k]
  ------------------
   43|   791k|                {
   44|  14.7k|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 14.7k, False: 776k]
  ------------------
   45|  23.1k|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 8.47k, False: 783k]
  ------------------
   46|  23.1k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 9.65k, False: 13.5k]
  ------------------
   47|  9.65k|                        {
   48|  9.65k|                            return OpCode::JR;
   49|  9.65k|                        }
   50|  13.5k|                        break;
   51|       |
   52|  28.8k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 28.8k, False: 762k]
  ------------------
   53|  56.3k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 27.4k, False: 764k]
  ------------------
   54|  56.3k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 22.9k, False: 33.3k]
  ------------------
   55|  56.3k|                        {
   56|  8.80k|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 8.80k, False: 47.5k]
  ------------------
   57|  14.6k|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 5.87k, False: 50.4k]
  ------------------
   58|  14.6k|                                return OpCode::LB;
   59|  1.90k|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 1.90k, False: 54.4k]
  ------------------
   60|  2.39k|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 496, False: 55.8k]
  ------------------
   61|  2.39k|                                return OpCode::LD;
   62|  2.05k|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 2.05k, False: 54.2k]
  ------------------
   63|  5.12k|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 3.06k, False: 53.2k]
  ------------------
   64|  5.12k|                                return OpCode::LF;
   65|  3.41k|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 3.41k, False: 52.9k]
  ------------------
   66|  5.76k|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 2.34k, False: 53.9k]
  ------------------
   67|  5.76k|                                return OpCode::LH;
   68|  1.71k|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 1.71k, False: 54.6k]
  ------------------
   69|  5.41k|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 3.70k, False: 52.6k]
  ------------------
   70|  5.41k|                                return OpCode::LW;
   71|  56.3k|                        }
   72|  22.9k|                        break;
   73|  22.9k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 8.21k, False: 783k]
  ------------------
   74|  23.9k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 15.6k, False: 775k]
  ------------------
   75|  23.9k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 12.5k, False: 11.3k]
  ------------------
   76|  12.5k|                        {
   77|  12.5k|                            return OpCode::OR;
   78|  12.5k|                        }
   79|  11.3k|                        break;
   80|   134k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 134k, False: 657k]
  ------------------
   81|   182k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 48.5k, False: 743k]
  ------------------
   82|   182k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 43.3k, False: 139k]
  ------------------
   83|   182k|                        {
   84|  7.92k|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 7.92k, False: 174k]
  ------------------
   85|  17.2k|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 9.29k, False: 173k]
  ------------------
   86|  17.2k|                                return OpCode::SB;
   87|  48.3k|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 48.3k, False: 134k]
  ------------------
   88|  59.7k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 11.4k, False: 171k]
  ------------------
   89|  59.7k|                                return OpCode::SD;
   90|  6.44k|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 6.44k, False: 176k]
  ------------------
   91|  8.38k|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 1.94k, False: 180k]
  ------------------
   92|  8.38k|                                return OpCode::SF;
   93|  12.4k|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 12.4k, False: 170k]
  ------------------
   94|  18.1k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 5.64k, False: 177k]
  ------------------
   95|  18.1k|                                return OpCode::SH;
   96|  8.44k|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 8.44k, False: 174k]
  ------------------
   97|  35.9k|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 27.4k, False: 155k]
  ------------------
   98|  35.9k|                                return OpCode::SW;
   99|   182k|                        }
  100|  43.3k|                        break;
  101|   791k|                }
  102|   596k|                break;
  103|   791k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|   997k|            case 3: {
  ------------------
  |  Branch (106:13): [True: 997k, False: 4.14M]
  ------------------
  107|   997k|                const char c1 = token[0u];
  108|   997k|                const char c2 = token[1u];
  109|   997k|                const char c3 = token[2u];
  110|       |
  111|   997k|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 286k, False: 710k]
  ------------------
  112|   997k|                {
  113|  48.0k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 48.0k, False: 949k]
  ------------------
  114|  60.0k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 11.9k, False: 985k]
  ------------------
  115|  60.0k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 17.4k, False: 42.5k]
  |  Branch (115:29): [True: 15.0k, False: 44.9k]
  |  Branch (115:45): [True: 15.0k, False: 2.40k]
  ------------------
  116|  15.0k|                        {
  117|  15.0k|                            return OpCode::ADD;
  118|  15.0k|                        }
  119|  44.9k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 23.6k, False: 21.2k]
  |  Branch (119:34): [True: 7.67k, False: 37.2k]
  |  Branch (119:50): [True: 7.67k, False: 16.0k]
  ------------------
  120|  7.67k|                        {
  121|  7.67k|                            return OpCode::AND;
  122|  7.67k|                        }
  123|  37.2k|                        break;
  124|       |
  125|  37.2k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 8.03k, False: 989k]
  ------------------
  126|  56.3k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 48.2k, False: 949k]
  ------------------
  127|  56.3k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 37.5k, False: 18.7k]
  |  Branch (127:29): [True: 27.8k, False: 28.4k]
  |  Branch (127:45): [True: 27.8k, False: 9.71k]
  ------------------
  128|  27.8k|                        {
  129|  27.8k|                            return OpCode::DIV;
  130|  27.8k|                        }
  131|  28.4k|                        break;
  132|       |
  133|  28.4k|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 4.73k, False: 992k]
  ------------------
  134|  32.6k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 27.9k, False: 969k]
  ------------------
  135|  32.6k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 28.7k, False: 3.89k]
  ------------------
  136|  28.7k|                        {
  137|  28.7k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 14.6k, False: 14.1k]
  ------------------
  138|  14.6k|                            {
  139|  14.6k|                                return OpCode::EQD;
  140|  14.6k|                            }
  141|  14.1k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 10.3k, False: 3.86k]
  ------------------
  142|  10.3k|                            {
  143|  10.3k|                                return OpCode::EQF;
  144|  10.3k|                            }
  145|  28.7k|                        }
  146|  7.75k|                        break;
  147|       |
  148|  54.2k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 54.2k, False: 943k]
  ------------------
  149|  70.3k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 16.1k, False: 981k]
  ------------------
  150|  70.3k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 26.1k, False: 44.1k]
  ------------------
  151|  26.1k|                        {
  152|  26.1k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 17.3k, False: 8.81k]
  ------------------
  153|  17.3k|                            {
  154|  17.3k|                                return OpCode::GED;
  155|  17.3k|                            }
  156|  8.81k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 3.59k, False: 5.22k]
  ------------------
  157|  3.59k|                            {
  158|  3.59k|                                return OpCode::GEF;
  159|  3.59k|                            }
  160|  26.1k|                        }
  161|  44.1k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 16.5k, False: 27.5k]
  ------------------
  162|  16.5k|                        {
  163|  16.5k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 5.73k, False: 10.8k]
  ------------------
  164|  5.73k|                            {
  165|  5.73k|                                return OpCode::GTD;
  166|  5.73k|                            }
  167|  10.8k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 6.08k, False: 4.76k]
  ------------------
  168|  6.08k|                            {
  169|  6.08k|                                return OpCode::GTF;
  170|  6.08k|                            }
  171|  10.8k|                        }
  172|  37.5k|                        break;
  173|       |
  174|  37.5k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 5.74k, False: 991k]
  ------------------
  175|  25.1k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 19.3k, False: 977k]
  ------------------
  176|  25.1k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 18.4k, False: 6.62k]
  |  Branch (176:29): [True: 14.1k, False: 10.9k]
  |  Branch (176:45): [True: 14.1k, False: 4.29k]
  ------------------
  177|  14.1k|                        {
  178|  14.1k|                            return OpCode::JAL;
  179|  14.1k|                        }
  180|  10.9k|                        break;
  181|       |
  182|  40.5k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 40.5k, False: 956k]
  ------------------
  183|   110k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 70.0k, False: 927k]
  ------------------
  184|   110k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 7.78k, False: 102k]
  ------------------
  185|   110k|                        {
  186|  24.9k|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 24.9k, False: 85.6k]
  ------------------
  187|  30.7k|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 5.85k, False: 104k]
  ------------------
  188|  30.7k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 14.4k, False: 16.3k]
  ------------------
  189|  14.4k|                                {
  190|  14.4k|                                    return OpCode::LBU;
  191|  14.4k|                                }
  192|  16.3k|                                break;
  193|       |
  194|  16.3k|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 14.2k, False: 96.3k]
  ------------------
  195|  21.8k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 7.68k, False: 102k]
  ------------------
  196|  21.8k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 7.94k, False: 13.9k]
  ------------------
  197|  7.94k|                                {
  198|  7.94k|                                    return OpCode::LED;
  199|  7.94k|                                }
  200|  13.9k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 10.3k, False: 3.57k]
  ------------------
  201|  10.3k|                                {
  202|  10.3k|                                    return OpCode::LEF;
  203|  10.3k|                                }
  204|  3.57k|                                break;
  205|       |
  206|  3.57k|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 2.32k, False: 108k]
  ------------------
  207|  17.0k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 14.7k, False: 95.8k]
  ------------------
  208|  17.0k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 11.1k, False: 5.87k]
  ------------------
  209|  11.1k|                                {
  210|  11.1k|                                    return OpCode::LHI;
  211|  11.1k|                                }
  212|  5.87k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 3.62k, False: 2.25k]
  ------------------
  213|  3.62k|                                {
  214|  3.62k|                                    return OpCode::LHU;
  215|  3.62k|                                }
  216|  2.25k|                                break;
  217|       |
  218|  8.35k|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 8.35k, False: 102k]
  ------------------
  219|  16.2k|                            case 't':
  ------------------
  |  Branch (219:29): [True: 7.92k, False: 102k]
  ------------------
  220|  16.2k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 9.55k, False: 6.72k]
  ------------------
  221|  9.55k|                                {
  222|  9.55k|                                    return OpCode::LTD;
  223|  9.55k|                                }
  224|  6.72k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 4.04k, False: 2.68k]
  ------------------
  225|  4.04k|                                {
  226|  4.04k|                                    return OpCode::LTF;
  227|  4.04k|                                }
  228|  2.68k|                                break;
  229|       |
  230|  5.03k|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 5.03k, False: 105k]
  ------------------
  231|  16.8k|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 11.7k, False: 98.7k]
  ------------------
  232|  16.8k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 8.90k, False: 7.89k]
  ------------------
  233|  8.90k|                                {
  234|  8.90k|                                    return OpCode::LWU;
  235|  8.90k|                                }
  236|  7.89k|                                break;
  237|   110k|                        }
  238|  40.5k|                        break;
  239|       |
  240|  40.5k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 7.48k, False: 989k]
  ------------------
  241|  35.4k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 27.9k, False: 969k]
  ------------------
  242|  35.4k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 21.3k, False: 14.1k]
  ------------------
  243|  21.3k|                        {
  244|  21.3k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 8.16k, False: 13.1k]
  ------------------
  245|  8.16k|                            {
  246|  8.16k|                                return OpCode::NED;
  247|  8.16k|                            }
  248|  13.1k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 8.75k, False: 4.42k]
  ------------------
  249|  8.75k|                            {
  250|  8.75k|                                return OpCode::NEF;
  251|  8.75k|                            }
  252|  21.3k|                        }
  253|  14.1k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 7.78k, False: 6.32k]
  |  Branch (253:34): [True: 5.67k, False: 8.43k]
  |  Branch (253:50): [True: 5.67k, False: 2.11k]
  ------------------
  254|  5.67k|                        {
  255|  5.67k|                            return OpCode::NOP;
  256|  5.67k|                        }
  257|       |
  258|  12.8k|                        break;
  259|       |
  260|  12.8k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 8.16k, False: 989k]
  ------------------
  261|  29.0k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 20.8k, False: 976k]
  ------------------
  262|  29.0k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 18.7k, False: 10.2k]
  |  Branch (262:29): [True: 12.6k, False: 16.4k]
  |  Branch (262:45): [True: 12.6k, False: 6.17k]
  ------------------
  263|  12.6k|                        {
  264|  12.6k|                            return OpCode::ORI;
  265|  12.6k|                        }
  266|  16.4k|                        break;
  267|       |
  268|   146k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 146k, False: 850k]
  ------------------
  269|   272k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 125k, False: 872k]
  ------------------
  270|   272k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 29.8k, False: 242k]
  ------------------
  271|   272k|                        {
  272|  21.0k|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 21.0k, False: 251k]
  ------------------
  273|  25.5k|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 4.52k, False: 267k]
  ------------------
  274|  25.5k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 13.8k, False: 11.6k]
  ------------------
  275|  13.8k|                                {
  276|  13.8k|                                    return OpCode::SBU;
  277|  13.8k|                                }
  278|  11.6k|                                break;
  279|       |
  280|  11.6k|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 9.19k, False: 262k]
  ------------------
  281|  16.4k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 7.23k, False: 264k]
  ------------------
  282|  16.4k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 9.01k, False: 7.41k]
  ------------------
  283|  9.01k|                                {
  284|  9.01k|                                    return OpCode::SEQ;
  285|  9.01k|                                }
  286|  7.41k|                                break;
  287|       |
  288|  18.2k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 18.2k, False: 253k]
  ------------------
  289|  29.5k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 11.2k, False: 260k]
  ------------------
  290|  29.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 8.59k, False: 20.9k]
  ------------------
  291|  8.59k|                                {
  292|  8.59k|                                    return OpCode::SGE;
  293|  8.59k|                                }
  294|  20.9k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 7.96k, False: 12.9k]
  ------------------
  295|  7.96k|                                {
  296|  7.96k|                                    return OpCode::SGT;
  297|  7.96k|                                }
  298|  12.9k|                                break;
  299|       |
  300|  12.9k|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 4.53k, False: 267k]
  ------------------
  301|  9.86k|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 5.33k, False: 266k]
  ------------------
  302|  9.86k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 8.37k, False: 1.49k]
  ------------------
  303|  8.37k|                                {
  304|  8.37k|                                    return OpCode::SHU;
  305|  8.37k|                                }
  306|  1.49k|                                break;
  307|       |
  308|  24.6k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 24.6k, False: 247k]
  ------------------
  309|  58.8k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 34.1k, False: 237k]
  ------------------
  310|  58.8k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 4.54k, False: 54.3k]
  ------------------
  311|  58.8k|                                {
  312|  5.73k|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 5.73k, False: 53.1k]
  ------------------
  313|  18.3k|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 12.6k, False: 46.2k]
  ------------------
  314|  18.3k|                                        return OpCode::SLA;
  315|       |
  316|  2.64k|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 2.64k, False: 56.2k]
  ------------------
  317|  11.3k|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 8.70k, False: 50.1k]
  ------------------
  318|  11.3k|                                        return OpCode::SLE;
  319|       |
  320|  4.86k|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 4.86k, False: 53.9k]
  ------------------
  321|  13.6k|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 8.76k, False: 50.0k]
  ------------------
  322|  13.6k|                                        return OpCode::SLL;
  323|       |
  324|  6.96k|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 6.96k, False: 51.8k]
  ------------------
  325|  10.9k|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 3.99k, False: 54.8k]
  ------------------
  326|  10.9k|                                        return OpCode::SLT;
  327|  58.8k|                                }
  328|  4.54k|                                break;
  329|       |
  330|  7.91k|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 7.91k, False: 264k]
  ------------------
  331|  20.2k|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 12.3k, False: 259k]
  ------------------
  332|  20.2k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 11.7k, False: 8.47k]
  ------------------
  333|  11.7k|                                {
  334|  11.7k|                                    return OpCode::SNE;
  335|  11.7k|                                }
  336|  8.47k|                                break;
  337|       |
  338|  22.1k|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 22.1k, False: 249k]
  ------------------
  339|  36.4k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 14.3k, False: 257k]
  ------------------
  340|  36.4k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 12.2k, False: 24.2k]
  ------------------
  341|  12.2k|                                {
  342|  12.2k|                                    return OpCode::SRA;
  343|  12.2k|                                }
  344|  24.2k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 17.1k, False: 7.03k]
  ------------------
  345|  17.1k|                                {
  346|  17.1k|                                    return OpCode::SRL;
  347|  17.1k|                                }
  348|  7.03k|                                break;
  349|       |
  350|  17.0k|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 17.0k, False: 255k]
  ------------------
  351|  24.6k|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 7.59k, False: 264k]
  ------------------
  352|  24.6k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 19.8k, False: 4.81k]
  ------------------
  353|  19.8k|                                {
  354|  19.8k|                                    return OpCode::SUB;
  355|  19.8k|                                }
  356|  4.81k|                                break;
  357|       |
  358|  4.97k|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 4.97k, False: 267k]
  ------------------
  359|  20.6k|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 15.6k, False: 256k]
  ------------------
  360|  20.6k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 7.23k, False: 13.3k]
  ------------------
  361|  7.23k|                                {
  362|  7.23k|                                    return OpCode::SWU;
  363|  7.23k|                                }
  364|  13.3k|                                break;
  365|   272k|                        }
  366|       |
  367|   113k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 11.6k, False: 985k]
  ------------------
  368|   120k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 7.51k, False: 989k]
  ------------------
  369|   120k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 16.0k, False: 104k]
  |  Branch (369:29): [True: 9.81k, False: 111k]
  |  Branch (369:45): [True: 9.81k, False: 6.27k]
  ------------------
  370|  9.81k|                        {
  371|  9.81k|                            return OpCode::XOR;
  372|  9.81k|                        }
  373|   111k|                        break;
  374|   997k|                }
  375|   589k|                break;
  376|   997k|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  1.19M|            case 4: {
  ------------------
  |  Branch (379:13): [True: 1.19M, False: 3.95M]
  ------------------
  380|  1.19M|                const char c1 = token[0u];
  381|  1.19M|                const char c2 = token[1u];
  382|  1.19M|                const char c3 = token[2u];
  383|  1.19M|                const char c4 = token[3u];
  384|       |
  385|  1.19M|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 255k, False: 936k]
  ------------------
  386|  1.19M|                {
  387|  73.8k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 73.8k, False: 1.11M]
  ------------------
  388|   137k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 63.7k, False: 1.12M]
  ------------------
  389|   137k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 7.54k, False: 130k]
  ------------------
  390|   137k|                        {
  391|  46.2k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 46.2k, False: 91.3k]
  ------------------
  392|   100k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 54.6k, False: 83.0k]
  ------------------
  393|   100k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 91.1k, False: 9.75k]
  ------------------
  394|  91.1k|                                {
  395|  91.1k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 8.56k, False: 82.5k]
  ------------------
  396|  91.1k|                                    {
  397|  17.8k|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 17.8k, False: 73.2k]
  ------------------
  398|  25.7k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 7.87k, False: 83.2k]
  ------------------
  399|  25.7k|                                            return OpCode::ADDD;
  400|       |
  401|  7.94k|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 7.94k, False: 83.1k]
  ------------------
  402|  13.4k|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 5.48k, False: 85.6k]
  ------------------
  403|  13.4k|                                            return OpCode::ADDF;
  404|       |
  405|  11.5k|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 11.5k, False: 79.6k]
  ------------------
  406|  18.0k|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 6.50k, False: 84.6k]
  ------------------
  407|  18.0k|                                            return OpCode::ADDI;
  408|       |
  409|  13.9k|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 13.9k, False: 77.1k]
  ------------------
  410|  25.4k|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 11.4k, False: 79.7k]
  ------------------
  411|  25.4k|                                            return OpCode::ADDU;
  412|  91.1k|                                    }
  413|  91.1k|                                }
  414|  18.3k|                                break;
  415|       |
  416|  18.3k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 11.0k, False: 126k]
  ------------------
  417|  29.2k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 18.1k, False: 119k]
  ------------------
  418|  29.2k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 13.2k, False: 15.9k]
  |  Branch (418:37): [True: 5.19k, False: 24.0k]
  |  Branch (418:53): [True: 5.19k, False: 8.09k]
  ------------------
  419|  5.19k|                                {
  420|  5.19k|                                    return OpCode::ANDI;
  421|  5.19k|                                }
  422|       |
  423|  24.0k|                                break;
  424|   137k|                        }
  425|  49.8k|                        break;
  426|       |
  427|  49.8k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 26.0k, False: 1.16M]
  ------------------
  428|  83.0k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 56.9k, False: 1.13M]
  ------------------
  429|  83.0k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 4.04k, False: 78.9k]
  ------------------
  430|  83.0k|                        {
  431|  12.2k|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 12.2k, False: 70.7k]
  ------------------
  432|  17.2k|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 4.99k, False: 78.0k]
  ------------------
  433|  17.2k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 10.5k, False: 6.74k]
  |  Branch (433:37): [True: 4.96k, False: 12.3k]
  |  Branch (433:53): [True: 4.96k, False: 5.56k]
  ------------------
  434|  4.96k|                                {
  435|  4.96k|                                    return OpCode::BEQZ;
  436|  4.96k|                                }
  437|  12.3k|                                break;
  438|       |
  439|  12.3k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 6.73k, False: 76.2k]
  ------------------
  440|  26.2k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 19.5k, False: 63.5k]
  ------------------
  441|  26.2k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 20.7k, False: 5.54k]
  ------------------
  442|  20.7k|                                {
  443|  20.7k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 9.74k, False: 10.9k]
  ------------------
  444|  9.74k|                                    {
  445|  9.74k|                                        return OpCode::BFPF;
  446|  9.74k|                                    }
  447|  10.9k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 8.37k, False: 2.61k]
  ------------------
  448|  8.37k|                                    {
  449|  8.37k|                                        return OpCode::BFPT;
  450|  8.37k|                                    }
  451|  20.7k|                                }
  452|  8.15k|                                break;
  453|       |
  454|  9.46k|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 9.46k, False: 73.5k]
  ------------------
  455|  35.4k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 25.9k, False: 57.0k]
  ------------------
  456|  35.4k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 30.7k, False: 4.72k]
  |  Branch (456:37): [True: 17.7k, False: 17.7k]
  |  Branch (456:53): [True: 17.7k, False: 13.0k]
  ------------------
  457|  17.7k|                                {
  458|  17.7k|                                    return OpCode::BNEZ;
  459|  17.7k|                                }
  460|  83.0k|                        }
  461|  42.2k|                        break;
  462|       |
  463|  42.2k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 11.1k, False: 1.18M]
  ------------------
  464|  90.8k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 79.7k, False: 1.11M]
  ------------------
  465|  90.8k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 73.2k, False: 17.5k]
  |  Branch (465:29): [True: 56.0k, False: 34.8k]
  |  Branch (465:45): [True: 56.0k, False: 17.2k]
  ------------------
  466|  56.0k|                        {
  467|  56.0k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 8.46k, False: 47.5k]
  ------------------
  468|  56.0k|                            {
  469|  3.10k|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 3.10k, False: 52.9k]
  ------------------
  470|  8.98k|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 5.87k, False: 50.1k]
  ------------------
  471|  8.98k|                                    return OpCode::DIVD;
  472|       |
  473|  6.69k|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 6.69k, False: 49.3k]
  ------------------
  474|  8.87k|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 2.18k, False: 53.8k]
  ------------------
  475|  8.87k|                                    return OpCode::DIVF;
  476|       |
  477|  7.51k|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 7.51k, False: 48.5k]
  ------------------
  478|  19.5k|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 12.0k, False: 44.0k]
  ------------------
  479|  19.5k|                                    return OpCode::DIVI;
  480|       |
  481|  7.02k|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 7.02k, False: 49.0k]
  ------------------
  482|  10.1k|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 3.17k, False: 52.8k]
  ------------------
  483|  10.1k|                                    return OpCode::DIVU;
  484|  56.0k|                            }
  485|  56.0k|                        }
  486|  43.2k|                        break;
  487|       |
  488|  43.2k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 2.89k, False: 1.18M]
  ------------------
  489|  29.0k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 26.1k, False: 1.16M]
  ------------------
  490|  29.0k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 25.7k, False: 3.28k]
  |  Branch (490:29): [True: 15.8k, False: 13.1k]
  |  Branch (490:45): [True: 23.6k, False: 2.08k]
  |  Branch (490:61): [True: 15.8k, False: 7.76k]
  ------------------
  491|  15.8k|                        {
  492|  15.8k|                            return OpCode::HALT;
  493|  15.8k|                        }
  494|  13.1k|                        break;
  495|       |
  496|  13.1k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 6.24k, False: 1.18M]
  ------------------
  497|  42.0k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 35.7k, False: 1.15M]
  ------------------
  498|  42.0k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 35.4k, False: 6.52k]
  |  Branch (498:29): [True: 11.2k, False: 30.8k]
  |  Branch (498:45): [True: 25.8k, False: 9.61k]
  |  Branch (498:61): [True: 11.2k, False: 14.6k]
  ------------------
  499|  11.2k|                        {
  500|  11.2k|                            return OpCode::JALR;
  501|  11.2k|                        }
  502|  30.8k|                        break;
  503|       |
  504|  30.8k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 13.2k, False: 1.17M]
  ------------------
  505|  70.0k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 56.7k, False: 1.13M]
  ------------------
  506|  70.0k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 40.1k, False: 29.8k]
  |  Branch (506:29): [True: 36.0k, False: 34.0k]
  |  Branch (506:45): [True: 36.0k, False: 4.18k]
  ------------------
  507|  36.0k|                        {
  508|  36.0k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 7.35k, False: 28.6k]
  ------------------
  509|  7.35k|                            {
  510|  7.35k|                                return OpCode::MOVD;
  511|  7.35k|                            }
  512|  28.6k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 18.0k, False: 10.6k]
  ------------------
  513|  18.0k|                            {
  514|  18.0k|                                return OpCode::MOVF;
  515|  18.0k|                            }
  516|  36.0k|                        }
  517|  34.0k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 24.1k, False: 9.87k]
  |  Branch (517:34): [True: 16.4k, False: 17.5k]
  |  Branch (517:50): [True: 19.3k, False: 4.78k]
  |  Branch (517:66): [True: 16.4k, False: 2.91k]
  ------------------
  518|  16.4k|                        {
  519|  16.4k|                            return OpCode::MULT;
  520|  16.4k|                        }
  521|  28.2k|                        break;
  522|       |
  523|   209k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 209k, False: 982k]
  ------------------
  524|   430k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 220k, False: 970k]
  ------------------
  525|   430k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 17.7k, False: 412k]
  ------------------
  526|   430k|                        {
  527|  29.7k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 29.7k, False: 400k]
  ------------------
  528|  37.3k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 7.54k, False: 422k]
  ------------------
  529|  37.3k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 29.9k, False: 7.36k]
  ------------------
  530|  29.9k|                                {
  531|  29.9k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 11.5k, False: 18.3k]
  ------------------
  532|  11.5k|                                    {
  533|  11.5k|                                        return OpCode::SEQI;
  534|  11.5k|                                    }
  535|  18.3k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 7.72k, False: 10.6k]
  ------------------
  536|  7.72k|                                    {
  537|  7.72k|                                        return OpCode::SEQU;
  538|  7.72k|                                    }
  539|  29.9k|                                }
  540|  18.0k|                                break;
  541|       |
  542|  29.3k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 29.3k, False: 400k]
  ------------------
  543|   100k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 71.4k, False: 358k]
  ------------------
  544|   100k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 50.6k, False: 50.0k]
  ------------------
  545|  50.6k|                                {
  546|  50.6k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 20.7k, False: 29.9k]
  ------------------
  547|  20.7k|                                    {
  548|  20.7k|                                        return OpCode::SGEI;
  549|  20.7k|                                    }
  550|  29.9k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 23.1k, False: 6.73k]
  ------------------
  551|  23.1k|                                    {
  552|  23.1k|                                        return OpCode::SGEU;
  553|  23.1k|                                    }
  554|  50.6k|                                }
  555|  50.0k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 39.5k, False: 10.5k]
  ------------------
  556|  39.5k|                                {
  557|  39.5k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 14.2k, False: 25.2k]
  ------------------
  558|  14.2k|                                    {
  559|  14.2k|                                        return OpCode::SGTI;
  560|  14.2k|                                    }
  561|  25.2k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 20.9k, False: 4.24k]
  ------------------
  562|  20.9k|                                    {
  563|  20.9k|                                        return OpCode::SGTU;
  564|  20.9k|                                    }
  565|  39.5k|                                }
  566|  21.4k|                                break;
  567|       |
  568|  31.6k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 31.6k, False: 398k]
  ------------------
  569|   111k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 80.1k, False: 350k]
  ------------------
  570|   111k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 6.92k, False: 104k]
  ------------------
  571|   111k|                                {
  572|  8.59k|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 8.59k, False: 103k]
  ------------------
  573|  15.3k|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 6.77k, False: 105k]
  ------------------
  574|  15.3k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 10.2k, False: 5.07k]
  ------------------
  575|  10.2k|                                        {
  576|  10.2k|                                            return OpCode::SLAI;
  577|  10.2k|                                        }
  578|  5.07k|                                        break;
  579|       |
  580|  21.3k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 21.3k, False: 90.5k]
  ------------------
  581|  25.5k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 4.17k, False: 107k]
  ------------------
  582|  25.5k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 10.8k, False: 14.6k]
  ------------------
  583|  10.8k|                                        {
  584|  10.8k|                                            return OpCode::SLEI;
  585|  10.8k|                                        }
  586|  14.6k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 11.5k, False: 3.12k]
  ------------------
  587|  11.5k|                                        {
  588|  11.5k|                                            return OpCode::SLEU;
  589|  11.5k|                                        }
  590|  3.12k|                                        break;
  591|       |
  592|  4.52k|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 4.52k, False: 107k]
  ------------------
  593|  16.3k|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 11.8k, False: 100k]
  ------------------
  594|  16.3k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 11.2k, False: 5.09k]
  ------------------
  595|  11.2k|                                        {
  596|  11.2k|                                            return OpCode::SLLI;
  597|  11.2k|                                        }
  598|  5.09k|                                        break;
  599|       |
  600|  29.3k|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 29.3k, False: 82.5k]
  ------------------
  601|  47.6k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 18.3k, False: 93.5k]
  ------------------
  602|  47.6k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 13.0k, False: 34.6k]
  ------------------
  603|  13.0k|                                        {
  604|  13.0k|                                            return OpCode::SLTI;
  605|  13.0k|                                        }
  606|  34.6k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 19.9k, False: 14.6k]
  ------------------
  607|  19.9k|                                        {
  608|  19.9k|                                            return OpCode::SLTU;
  609|  19.9k|                                        }
  610|  14.6k|                                        break;
  611|   111k|                                }
  612|       |
  613|  38.6k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 3.75k, False: 426k]
  ------------------
  614|  78.4k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 39.8k, False: 390k]
  ------------------
  615|  78.4k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 43.5k, False: 34.9k]
  ------------------
  616|  43.5k|                                {
  617|  43.5k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 11.2k, False: 32.2k]
  ------------------
  618|  11.2k|                                    {
  619|  11.2k|                                        return OpCode::SNEI;
  620|  11.2k|                                    }
  621|  32.2k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 16.5k, False: 15.6k]
  ------------------
  622|  16.5k|                                    {
  623|  16.5k|                                        return OpCode::SNEU;
  624|  16.5k|                                    }
  625|  43.5k|                                }
  626|  50.6k|                                break;
  627|       |
  628|  50.6k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 21.3k, False: 408k]
  ------------------
  629|  41.3k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 19.9k, False: 410k]
  ------------------
  630|  41.3k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 20.1k, False: 21.1k]
  |  Branch (630:37): [True: 15.7k, False: 25.6k]
  |  Branch (630:53): [True: 15.7k, False: 4.42k]
  ------------------
  631|  15.7k|                                {
  632|  15.7k|                                    return OpCode::SRAI;
  633|  15.7k|                                }
  634|  25.6k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 20.5k, False: 5.01k]
  |  Branch (634:42): [True: 7.72k, False: 17.8k]
  |  Branch (634:58): [True: 7.72k, False: 12.8k]
  ------------------
  635|  7.72k|                                {
  636|  7.72k|                                    return OpCode::SRLI;
  637|  7.72k|                                }
  638|  17.8k|                                break;
  639|       |
  640|  28.6k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 28.6k, False: 401k]
  ------------------
  641|  77.6k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 49.0k, False: 381k]
  ------------------
  642|  77.6k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 69.2k, False: 8.43k]
  ------------------
  643|  69.2k|                                {
  644|  69.2k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 13.3k, False: 55.8k]
  ------------------
  645|  69.2k|                                    {
  646|  11.8k|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 11.8k, False: 57.3k]
  ------------------
  647|  17.0k|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 5.23k, False: 64.0k]
  ------------------
  648|  17.0k|                                            return OpCode::SUBD;
  649|       |
  650|  5.67k|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 5.67k, False: 63.5k]
  ------------------
  651|  12.6k|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 6.98k, False: 62.2k]
  ------------------
  652|  12.6k|                                            return OpCode::SUBF;
  653|       |
  654|  4.32k|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 4.32k, False: 64.9k]
  ------------------
  655|  13.5k|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 9.20k, False: 60.0k]
  ------------------
  656|  13.5k|                                            return OpCode::SUBI;
  657|       |
  658|  6.67k|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 6.67k, False: 62.5k]
  ------------------
  659|  12.5k|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 5.90k, False: 63.3k]
  ------------------
  660|  12.5k|                                            return OpCode::SUBU;
  661|  69.2k|                                    }
  662|  69.2k|                                }
  663|  21.8k|                                break;
  664|   430k|                        }
  665|   147k|                        break;
  666|       |
  667|   147k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 3.87k, False: 1.18M]
  ------------------
  668|  13.3k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 9.48k, False: 1.18M]
  ------------------
  669|  13.3k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 8.27k, False: 5.08k]
  |  Branch (669:29): [True: 2.75k, False: 10.6k]
  |  Branch (669:45): [True: 5.28k, False: 2.98k]
  |  Branch (669:61): [True: 2.75k, False: 2.53k]
  ------------------
  670|  2.75k|                        {
  671|  2.75k|                            return OpCode::TRAP;
  672|  2.75k|                        }
  673|  10.6k|                        break;
  674|  20.8k|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 20.8k, False: 1.17M]
  ------------------
  675|  40.0k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 19.1k, False: 1.17M]
  ------------------
  676|  40.0k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 31.4k, False: 8.56k]
  |  Branch (676:29): [True: 15.2k, False: 24.7k]
  |  Branch (676:45): [True: 26.7k, False: 4.74k]
  |  Branch (676:61): [True: 15.2k, False: 11.4k]
  ------------------
  677|  15.2k|                        {
  678|  15.2k|                            return OpCode::XORI;
  679|  15.2k|                        }
  680|  24.7k|                        break;
  681|  1.19M|                }
  682|   646k|                break;
  683|  1.19M|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|   703k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 703k, False: 4.44M]
  ------------------
  687|   703k|                const char c1 = token[0u];
  688|   703k|                const char c2 = token[1u];
  689|   703k|                const char c3 = token[2u];
  690|   703k|                const char c4 = token[3u];
  691|   703k|                const char c5 = token[4u];
  692|       |
  693|   703k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 164k, False: 538k]
  ------------------
  694|   703k|                {
  695|  19.3k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 19.3k, False: 683k]
  ------------------
  696|  72.9k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 53.6k, False: 649k]
  ------------------
  697|  72.9k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 66.7k, False: 6.22k]
  |  Branch (697:29): [True: 14.3k, False: 58.5k]
  |  Branch (697:45): [True: 56.9k, False: 9.78k]
  |  Branch (697:61): [True: 41.6k, False: 15.2k]
  |  Branch (697:77): [True: 14.3k, False: 27.2k]
  ------------------
  698|  14.3k|                        {
  699|  14.3k|                            return OpCode::ADDUI;
  700|  14.3k|                        }
  701|  58.5k|                        break;
  702|       |
  703|  58.5k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 5.04k, False: 697k]
  ------------------
  704|  64.6k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 59.5k, False: 643k]
  ------------------
  705|  64.6k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 51.4k, False: 13.1k]
  |  Branch (705:29): [True: 17.1k, False: 47.4k]
  |  Branch (705:45): [True: 37.2k, False: 14.2k]
  |  Branch (705:61): [True: 27.4k, False: 9.86k]
  |  Branch (705:77): [True: 17.1k, False: 10.2k]
  ------------------
  706|  17.1k|                        {
  707|  17.1k|                            return OpCode::DIVUI;
  708|  17.1k|                        }
  709|  47.4k|                        break;
  710|       |
  711|  47.4k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 30.2k, False: 672k]
  ------------------
  712|   113k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 83.4k, False: 619k]
  ------------------
  713|   113k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 80.0k, False: 33.6k]
  |  Branch (713:29): [True: 64.6k, False: 49.0k]
  |  Branch (713:45): [True: 67.5k, False: 12.4k]
  |  Branch (713:61): [True: 64.6k, False: 2.90k]
  ------------------
  714|  64.6k|                        {
  715|  64.6k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 10.1k, False: 54.5k]
  ------------------
  716|  64.6k|                            {
  717|  5.10k|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 5.10k, False: 59.5k]
  ------------------
  718|  7.54k|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 2.43k, False: 62.2k]
  ------------------
  719|  7.54k|                                    return OpCode::MULTD;
  720|       |
  721|  12.3k|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 12.3k, False: 52.3k]
  ------------------
  722|  21.8k|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 9.48k, False: 55.1k]
  ------------------
  723|  21.8k|                                    return OpCode::MULTF;
  724|       |
  725|  7.31k|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 7.31k, False: 57.3k]
  ------------------
  726|  13.8k|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 6.52k, False: 58.1k]
  ------------------
  727|  13.8k|                                    return OpCode::MULTI;
  728|       |
  729|  3.33k|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 3.33k, False: 61.3k]
  ------------------
  730|  11.3k|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 7.99k, False: 56.6k]
  ------------------
  731|  11.3k|                                    return OpCode::MULTU;
  732|  64.6k|                            }
  733|  64.6k|                        }
  734|  59.2k|                        break;
  735|       |
  736|   123k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 123k, False: 579k]
  ------------------
  737|   287k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 164k, False: 538k]
  ------------------
  738|   287k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 10.6k, False: 276k]
  ------------------
  739|   287k|                        {
  740|  45.5k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 45.5k, False: 241k]
  ------------------
  741|  62.5k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 17.0k, False: 270k]
  ------------------
  742|  62.5k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 45.5k, False: 16.9k]
  |  Branch (742:37): [True: 10.8k, False: 51.7k]
  |  Branch (742:53): [True: 25.5k, False: 20.0k]
  |  Branch (742:69): [True: 10.8k, False: 14.7k]
  ------------------
  743|  10.8k|                                {
  744|  10.8k|                                    return OpCode::SEQUI;
  745|  10.8k|                                }
  746|  51.7k|                                break;
  747|       |
  748|  51.7k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 28.8k, False: 258k]
  ------------------
  749|  65.6k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 36.8k, False: 250k]
  ------------------
  750|  65.6k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 30.2k, False: 35.3k]
  |  Branch (750:37): [True: 13.9k, False: 51.6k]
  |  Branch (750:53): [True: 21.9k, False: 8.29k]
  |  Branch (750:69): [True: 13.9k, False: 8.00k]
  ------------------
  751|  13.9k|                                {
  752|  13.9k|                                    return OpCode::SGEUI;
  753|  13.9k|                                }
  754|  51.6k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 34.7k, False: 16.8k]
  |  Branch (754:42): [True: 14.6k, False: 37.0k]
  |  Branch (754:58): [True: 31.4k, False: 3.36k]
  |  Branch (754:74): [True: 14.6k, False: 16.7k]
  ------------------
  755|  14.6k|                                {
  756|  14.6k|                                    return OpCode::SGTUI;
  757|  14.6k|                                }
  758|  37.0k|                                break;
  759|       |
  760|  37.0k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 19.1k, False: 268k]
  ------------------
  761|  81.8k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 62.6k, False: 224k]
  ------------------
  762|  81.8k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 34.5k, False: 47.2k]
  |  Branch (762:37): [True: 15.5k, False: 66.2k]
  |  Branch (762:53): [True: 27.1k, False: 7.46k]
  |  Branch (762:69): [True: 15.5k, False: 11.5k]
  ------------------
  763|  15.5k|                                {
  764|  15.5k|                                    return OpCode::SLEUI;
  765|  15.5k|                                }
  766|  66.2k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 39.2k, False: 27.0k]
  |  Branch (766:42): [True: 12.1k, False: 54.0k]
  |  Branch (766:58): [True: 32.1k, False: 7.09k]
  |  Branch (766:74): [True: 12.1k, False: 19.9k]
  ------------------
  767|  12.1k|                                {
  768|  12.1k|                                    return OpCode::SLTUI;
  769|  12.1k|                                }
  770|  54.0k|                                break;
  771|       |
  772|  54.0k|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 2.50k, False: 284k]
  ------------------
  773|  30.7k|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 28.2k, False: 259k]
  ------------------
  774|  30.7k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 28.1k, False: 2.59k]
  |  Branch (774:37): [True: 14.6k, False: 16.0k]
  |  Branch (774:53): [True: 25.1k, False: 3.02k]
  |  Branch (774:69): [True: 14.6k, False: 10.4k]
  ------------------
  775|  14.6k|                                {
  776|  14.6k|                                    return OpCode::SNEUI;
  777|  14.6k|                                }
  778|  16.0k|                                break;
  779|       |
  780|  16.0k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 10.6k, False: 276k]
  ------------------
  781|  35.9k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 25.2k, False: 262k]
  ------------------
  782|  35.9k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 27.2k, False: 8.68k]
  |  Branch (782:37): [True: 12.8k, False: 23.0k]
  |  Branch (782:53): [True: 20.1k, False: 7.09k]
  |  Branch (782:69): [True: 12.8k, False: 7.26k]
  ------------------
  783|  12.8k|                                {
  784|  12.8k|                                    return OpCode::SUBUI;
  785|  12.8k|                                }
  786|  23.0k|                                break;
  787|   287k|                        }
  788|       |
  789|   192k|                        break;
  790|   703k|                }
  791|       |
  792|   522k|                break;
  793|   703k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|   522k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 382k, False: 4.76M]
  ------------------
  797|   382k|                const char c1 = token[0u];
  798|   382k|                const char c2 = token[1u];
  799|   382k|                const char c3 = token[2u];
  800|   382k|                const char c4 = token[3u];
  801|   382k|                const char c5 = token[4u];
  802|   382k|                const char c6 = token[5u];
  803|       |
  804|   382k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 170k, False: 211k]
  |  Branch (804:21): [True: 147k, False: 234k]
  |  Branch (804:37): [True: 164k, False: 5.88k]
  |  Branch (804:53): [True: 147k, False: 17.2k]
  ------------------
  805|   147k|                {
  806|   147k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 5.12k, False: 142k]
  ------------------
  807|   147k|                    {
  808|  27.3k|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 27.3k, False: 120k]
  ------------------
  809|  50.1k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 22.7k, False: 124k]
  ------------------
  810|  50.1k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 42.9k, False: 7.21k]
  ------------------
  811|  42.9k|                            {
  812|  42.9k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 13.9k, False: 29.0k]
  ------------------
  813|  13.9k|                                {
  814|  13.9k|                                    return OpCode::CVTD2F;
  815|  13.9k|                                }
  816|  29.0k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 20.1k, False: 8.80k]
  ------------------
  817|  20.1k|                                {
  818|  20.1k|                                    return OpCode::CVTD2I;
  819|  20.1k|                                }
  820|  42.9k|                            }
  821|  16.0k|                            break;
  822|       |
  823|  16.0k|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 9.27k, False: 138k]
  ------------------
  824|  52.8k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 43.6k, False: 104k]
  ------------------
  825|  52.8k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 44.6k, False: 8.22k]
  ------------------
  826|  44.6k|                            {
  827|  44.6k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 19.9k, False: 24.7k]
  ------------------
  828|  19.9k|                                {
  829|  19.9k|                                    return OpCode::CVTF2D;
  830|  19.9k|                                }
  831|  24.7k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 17.9k, False: 6.83k]
  ------------------
  832|  17.9k|                                {
  833|  17.9k|                                    return OpCode::CVTF2I;
  834|  17.9k|                                }
  835|  44.6k|                            }
  836|  15.0k|                            break;
  837|       |
  838|  31.5k|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 31.5k, False: 116k]
  ------------------
  839|  39.5k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 8.01k, False: 139k]
  ------------------
  840|  39.5k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 28.3k, False: 11.1k]
  ------------------
  841|  28.3k|                            {
  842|  28.3k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 12.1k, False: 16.2k]
  ------------------
  843|  12.1k|                                {
  844|  12.1k|                                    return OpCode::CVTI2D;
  845|  12.1k|                                }
  846|  16.2k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 9.00k, False: 7.23k]
  ------------------
  847|  9.00k|                                {
  848|  9.00k|                                    return OpCode::CVTI2F;
  849|  9.00k|                                }
  850|  28.3k|                            }
  851|   147k|                    }
  852|   147k|                }
  853|   234k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 97.6k, False: 136k]
  |  Branch (853:26): [True: 24.6k, False: 209k]
  |  Branch (853:42): [True: 58.7k, False: 38.8k]
  |  Branch (853:58): [True: 42.7k, False: 16.0k]
  |  Branch (853:74): [True: 39.9k, False: 2.75k]
  ------------------
  854|   234k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 32.8k, False: 7.05k]
  |  Branch (854:42): [True: 24.6k, False: 8.20k]
  ------------------
  855|  24.6k|                {
  856|  24.6k|                    return OpCode::MULTUI;
  857|  24.6k|                }
  858|   264k|                break;
  859|   382k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|   264k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 186k, False: 4.95M]
  ------------------
  863|   186k|                const char c1 = token[0u];
  864|   186k|                const char c2 = token[1u];
  865|   186k|                const char c3 = token[2u];
  866|   186k|                const char c4 = token[3u];
  867|   186k|                const char c5 = token[4u];
  868|   186k|                const char c6 = token[5u];
  869|   186k|                const char c7 = token[6u];
  870|       |
  871|   186k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 93.5k, False: 93.2k]
  |  Branch (871:21): [True: 71.9k, False: 114k]
  |  Branch (871:37): [True: 79.0k, False: 14.5k]
  |  Branch (871:53): [True: 71.9k, False: 7.13k]
  ------------------
  872|  71.9k|                {
  873|  71.9k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 34.8k, False: 37.0k]
  |  Branch (873:25): [True: 11.1k, False: 60.7k]
  |  Branch (873:41): [True: 25.6k, False: 9.21k]
  |  Branch (873:54): [True: 22.4k, False: 3.14k]
  |  Branch (873:70): [True: 11.1k, False: 11.3k]
  ------------------
  874|  11.1k|                    {
  875|  11.1k|                        return OpCode::MOVI2FP;
  876|  11.1k|                    }
  877|  60.7k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 36.9k, False: 23.8k]
  |  Branch (877:25): [True: 20.1k, False: 40.6k]
  |  Branch (877:41): [True: 30.5k, False: 6.32k]
  |  Branch (877:57): [True: 26.3k, False: 4.24k]
  |  Branch (877:70): [True: 20.1k, False: 6.16k]
  ------------------
  878|  20.1k|                    {
  879|  20.1k|                        return OpCode::MOVFP2I;
  880|  20.1k|                    }
  881|  60.7k|                }
  882|   155k|                break;
  883|   186k|            }
  884|       |
  885|   155k|            default: {
  ------------------
  |  Branch (885:13): [True: 142k, False: 5.00M]
  ------------------
  886|   142k|                break;
  887|   186k|            }
  888|  5.14M|        }
  889|       |
  890|       |        // None found
  891|  3.46M|        return OpCode::NONE;
  892|  5.14M|    }
_ZN3dlx3iceEcc:
   17|  7.37M|    {
   18|  7.37M|        constexpr const char diff = 'a' - 'A';
   19|  7.37M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 2.26M, False: 5.10M]
  |  Branch (19:28): [True: 2.09M, False: 3.01M]
  ------------------
   20|  7.37M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  5.47M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|   100k|    {
  195|   100k|        ParseError err;
  196|       |
  197|   100k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|   100k|        err.m_LineNumber                           = line_number;
  199|   100k|        err.m_Column                               = column;
  200|   100k|        err.unexpected_argument_type.expected_type = expected_type;
  201|   100k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|   100k|        return err;
  204|   100k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|   100k|    {
  209|   100k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|   100k|                                                         token.GetColumn().unsafe(), expected_type,
  211|   100k|                                                         actual_type);
  212|   100k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|  6.76k|    {
  218|  6.76k|        ParseError err;
  219|       |
  220|  6.76k|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|  6.76k|        err.m_LineNumber        = line_number;
  222|  6.76k|        err.m_Column            = column;
  223|  6.76k|        err.invalid_number.text = text;
  224|       |
  225|  6.76k|        return err;
  226|  6.76k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|  6.76k|    {
  230|  6.76k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|  6.76k|                                                token.GetColumn().unsafe(), token.GetText());
  232|  6.76k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|      5|    {
  237|      5|        ParseError err;
  238|       |
  239|      5|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|      5|        err.m_LineNumber = line_number;
  241|      5|        err.m_Column     = column;
  242|       |
  243|      5|        return err;
  244|      5|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|      5|    {
  249|      5|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|      5|                                                                     token.GetColumn().unsafe());
  251|      5|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  2.43M|    {
  257|  2.43M|        ParseError err;
  258|       |
  259|  2.43M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  2.43M|        err.m_LineNumber                   = line_number;
  261|  2.43M|        err.m_Column                       = column;
  262|  2.43M|        err.unexpected_token.expected_type = expected_type;
  263|  2.43M|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  2.43M|        return err;
  266|  2.43M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  2.43M|    {
  271|  2.43M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  2.43M|                                                  token.GetColumn().unsafe(), expected_type,
  273|  2.43M|                                                  token.GetType());
  274|  2.43M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|   580k|    {
  279|   580k|        ParseError err;
  280|       |
  281|   580k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|   580k|        err.m_LineNumber                   = line_number;
  283|   580k|        err.m_Column                       = column;
  284|   580k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|   580k|        return err;
  287|   580k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|  7.98k|    {
  291|  7.98k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|  7.98k|                                                    token.GetColumn().unsafe(), token.GetText());
  293|  7.98k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  1.06M|    {
  298|  1.06M|        ParseError err;
  299|       |
  300|  1.06M|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  1.06M|        err.m_LineNumber                       = line_number;
  302|  1.06M|        err.m_Column                           = column;
  303|  1.06M|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  1.06M|        return err;
  306|  1.06M|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  1.06M|    {
  311|  1.06M|        return ConstructInvalidLabelIdentifierParseError(
  312|  1.06M|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  1.06M|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|   229k|    {
  319|   229k|        ParseError err;
  320|       |
  321|   229k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|   229k|        err.m_LineNumber                     = line_number;
  323|   229k|        err.m_Column                         = column;
  324|   229k|        err.label_already_defined.label_name = label_name;
  325|   229k|        err.label_already_defined.at_line    = at_line;
  326|   229k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|   229k|        return err;
  329|   229k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|   229k|    {
  334|   229k|        return ConstructLabelAlreadyDefinedParseError(
  335|   229k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|   229k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|   229k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|   650k|    {
  342|   650k|        ParseError err;
  343|       |
  344|   650k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|   650k|        err.m_LineNumber = line_number;
  346|   650k|        err.m_Column     = column;
  347|       |
  348|   650k|        return err;
  349|   650k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|   650k|    {
  354|   650k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|   650k|                                                        token.GetColumn().unsafe());
  356|   650k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|  79.0k|    {
  362|  79.0k|        ParseError err;
  363|       |
  364|  79.0k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|  79.0k|        err.m_LineNumber               = line_number;
  366|  79.0k|        err.m_Column                   = column;
  367|  79.0k|        err.too_few_arguments.required = required;
  368|  79.0k|        err.too_few_arguments.provided = provided;
  369|       |
  370|  79.0k|        return err;
  371|  79.0k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|  79.0k|    {
  376|  79.0k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|  79.0k|                                                  token.GetColumn().unsafe(), required, provided);
  378|  79.0k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|   187k|    {
  383|   187k|        ParseError err;
  384|       |
  385|   187k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|   187k|        err.m_LineNumber           = line_number;
  387|   187k|        err.m_Column               = column;
  388|   187k|        err.empty_label.label_name = label_name;
  389|       |
  390|   187k|        return err;
  391|   187k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|   187k|    {
  395|   187k|        return ConstructEmptyLabelParseError(
  396|   187k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|   187k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 158k, False: 29.0k]
  ------------------
  398|   158k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|   187k|                        token.GetText());
  400|   187k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|   139k|    {
  405|   139k|        ParseError err;
  406|       |
  407|   139k|        err.m_Type       = ParseError::Type::TooManyComma;
  408|   139k|        err.m_LineNumber = line_number;
  409|   139k|        err.m_Column     = column;
  410|       |
  411|   139k|        return err;
  412|   139k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|   139k|    {
  416|   139k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|   139k|                                               token.GetColumn().unsafe());
  418|   139k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  5.47M|    {
   19|  5.47M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  5.47M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  27.7k|    {
  181|  27.7k|        ParsedProgram program;
  182|       |
  183|  27.7k|        program.m_Tokens = tokens;
  184|       |
  185|  27.7k|        phi::boolean line_has_instruction{false};
  186|  27.7k|        phi::usize   label_count{0u};
  187|       |
  188|  6.24M|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 6.21M, False: 27.7k]
  ------------------
  189|  6.21M|        {
  190|  6.21M|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|  6.21M|            switch (current_token.GetType())
  195|  6.21M|            {
  196|       |                // Ignore comments
  197|  39.1k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 39.1k, False: 6.17M]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  39.1k|                    break;
  200|       |
  201|   743k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 743k, False: 5.47M]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|   743k|                    line_has_instruction = false;
  204|   743k|                    break;
  205|       |
  206|  2.37M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 2.37M, False: 3.83M]
  ------------------
  207|  2.37M|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 394k, False: 1.98M]
  ------------------
  208|   394k|                    {
  209|   394k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|   394k|                                current_token, Token::Type::NewLine));
  211|   394k|                        break;
  212|   394k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  1.98M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 674k, False: 1.30M]
  ------------------
  217|   674k|                    {
  218|   674k|                        program.AddParseError(
  219|   674k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|   674k|                        break;
  221|   674k|                    }
  222|       |
  223|  1.30M|                    phi::string_view label_name = current_token.GetText();
  224|  1.30M|                    label_name.remove_suffix(1u);
  225|       |
  226|  1.30M|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 572k, False: 737k]
  ------------------
  227|   572k|                    {
  228|   572k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|   572k|                                current_token.GetLineNumber().unsafe(),
  230|   572k|                                current_token.GetColumn().unsafe(), label_name));
  231|   572k|                        break;
  232|   572k|                    }
  233|       |
  234|   737k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 307k, False: 430k]
  ------------------
  235|   307k|                    {
  236|   307k|                        program.AddParseError(
  237|   307k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|   307k|                        break;
  239|   307k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|   430k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 229k, False: 200k]
  ------------------
  243|   229k|                    {
  244|       |                        // Find first defintions of label
  245|   229k|                        const Token* first_label_definition =
  246|   229k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   229k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|   229k|                                    {
  249|   229k|                                        phi::string_view token_label_name = t.GetText();
  250|   229k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   229k|                                        if (token_label_name == label_name)
  253|   229k|                                        {
  254|   229k|                                            return true;
  255|   229k|                                        }
  256|   229k|                                    }
  257|       |
  258|   229k|                                    return false;
  259|   229k|                                });
  260|       |
  261|   229k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|   229k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|   229k|                                current_token, *first_label_definition));
  265|   229k|                        break;
  266|   229k|                    }
  267|       |
  268|   200k|                    program.m_JumpData[label_name] =
  269|   200k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|   200k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|   200k|                    break;
  276|   430k|                }
  277|       |
  278|  1.11M|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 1.11M, False: 5.09M]
  ------------------
  279|  1.11M|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 650k, False: 469k]
  ------------------
  280|   650k|                    {
  281|   650k|                        program.AddParseError(
  282|   650k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|   650k|                        break;
  284|   650k|                    }
  285|       |
  286|   469k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|   469k|                    PHI_ASSERT(current_token.HasHint());
  290|   469k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|   469k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|   469k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|   469k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|   469k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|   469k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|   469k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|   469k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|   469k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  1.02M|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 945k, False: 81.0k]
  ------------------
  312|   945k|                    {
  313|       |                        // Get next token
  314|   945k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 2.31k, False: 942k]
  ------------------
  315|  2.31k|                        {
  316|  2.31k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|  2.31k|                                    current_token, number_of_argument_required.unsafe(),
  318|  2.31k|                                    argument_num.unsafe()));
  319|  2.31k|                            break;
  320|  2.31k|                        }
  321|       |
  322|   942k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|   942k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 422k, False: 520k]
  ------------------
  326|   422k|                        {
  327|   422k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 139k, False: 282k]
  ------------------
  328|   139k|                            {
  329|   139k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|   139k|                            }
  331|       |
  332|   422k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|   422k|                            continue;
  335|   422k|                        }
  336|       |
  337|   520k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 76.7k, False: 443k]
  ------------------
  338|  76.7k|                        {
  339|  76.7k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  76.7k|                                    token, number_of_argument_required.unsafe(),
  341|  76.7k|                                    argument_num.unsafe()));
  342|  76.7k|                            break;
  343|  76.7k|                        }
  344|       |
  345|   443k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|   443k|                                parse_instruction_argument(
  347|   443k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|   443k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 309k, False: 134k]
  ------------------
  349|   309k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|   309k|                            break;
  352|   309k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|   134k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|   134k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|   134k|                        argument_num++;
  359|   134k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|   134k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|   469k|                    program.m_Instructions.emplace_back(instruction);
  367|   469k|                    line_has_instruction = true;
  368|   469k|                    break;
  369|  1.11M|                }
  370|       |
  371|  1.93M|                default:
  ------------------
  |  Branch (371:17): [True: 1.93M, False: 4.28M]
  ------------------
  372|  1.93M|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  1.93M|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 942k, False: 991k]
  ------------------
  374|   942k|                    {
  375|   942k|                        expected_token_type = Token::Type::NewLine;
  376|   942k|                    }
  377|       |
  378|  1.93M|                    program.AddParseError(
  379|  1.93M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  1.93M|                    break;
  381|  6.21M|            }
  382|  6.21M|        }
  383|       |
  384|       |        // Check for empty labels
  385|  27.7k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 9.00k, False: 18.7k]
  ------------------
  386|  9.00k|        {
  387|   231k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 222k, False: 9.00k]
  ------------------
  388|   222k|            {
  389|   222k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|   222k|                const Token& token = *it;
  392|   222k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 187k, False: 35.8k]
  ------------------
  393|   187k|                {
  394|   187k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|   187k|                    --label_count;
  396|   187k|                }
  397|   222k|            }
  398|  9.00k|        }
  399|       |
  400|  27.7k|        return program;
  401|  27.7k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  27.7k|    {
  405|  27.7k|        TokenStream tokens = Tokenize(source);
  406|  27.7k|        return Parse(tokens);
  407|  27.7k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|   443k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|   443k|        switch (token.GetType())
   37|   443k|        {
   38|  73.8k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 73.8k, False: 369k]
  ------------------
   39|  73.8k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 28.1k, False: 45.6k]
  ------------------
   40|  73.8k|                                          ArgumentType::AddressDisplacement))
   41|  28.1k|                {
   42|  28.1k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|  28.1k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|  28.1k|                    return {};
   46|  28.1k|                }
   47|       |
   48|       |                // Get address displacement
   49|  45.6k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  45.6k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  45.6k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 5, False: 45.6k]
  ------------------
   54|      5|                {
   55|      5|                    program.AddParseError(
   56|      5|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      5|                    return {};
   58|      5|                }
   59|       |
   60|  45.6k|                auto         it           = tokens.current_position();
   61|  45.6k|                const Token& first_token  = tokens.consume();
   62|  45.6k|                const Token& second_token = tokens.consume();
   63|  45.6k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  45.6k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 16.2k, False: 29.4k]
  ------------------
   66|  16.2k|                {
   67|  16.2k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|  16.2k|                            first_token, Token::Type::OpenBracket));
   69|  16.2k|                    return {};
   70|  16.2k|                }
   71|       |
   72|       |                // Second token is the register
   73|  29.4k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 9.92k, False: 19.5k]
  ------------------
   74|  9.92k|                {
   75|  9.92k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|  9.92k|                            second_token, Token::Type::RegisterInt));
   77|  9.92k|                    return {};
   78|  9.92k|                }
   79|       |
   80|  19.5k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 7.50k, False: 12.0k]
  ------------------
   81|  7.50k|                {
   82|  7.50k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|  7.50k|                            third_token, Token::Type::ClosingBracket));
   84|  7.50k|                    return {};
   85|  7.50k|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|  12.0k|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|  12.0k|                return ConstructInstructionArgumentAddressDisplacement(
   94|  12.0k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|  19.5k|            }
   96|  24.0k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 24.0k, False: 419k]
  ------------------
   97|  24.0k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 4.03k, False: 20.0k]
  ------------------
   98|  4.03k|                {
   99|  4.03k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|  4.03k|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|  4.03k|                    return {};
  102|  4.03k|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  20.0k|                return ConstructInstructionArgumentRegisterInt(
  108|  20.0k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  24.0k|            }
  110|  45.6k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 45.6k, False: 397k]
  ------------------
  111|  45.6k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 6.82k, False: 38.8k]
  ------------------
  112|  6.82k|                {
  113|  6.82k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|  6.82k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|  6.82k|                    return {};
  116|  6.82k|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  38.8k|                return ConstructInstructionArgumentRegisterFloat(
  122|  38.8k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  45.6k|            }
  124|  7.98k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 7.98k, False: 435k]
  ------------------
  125|  7.98k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|  7.98k|                return {};
  128|  45.6k|            }
  129|   184k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 184k, False: 259k]
  ------------------
  130|       |                // Parse as Label
  131|   184k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 41.4k, False: 142k]
  ------------------
  132|  41.4k|                {
  133|  41.4k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  41.4k|                            token, expected_argument_type, ArgumentType::Label));
  135|  41.4k|                    return {};
  136|  41.4k|                }
  137|       |
  138|   142k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 142k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|   142k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 88.1k, False: 54.7k]
  ------------------
  145|  88.1k|                {
  146|  88.1k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  88.1k|                    return {};
  148|  88.1k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  54.7k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|   142k|            }
  154|  35.2k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 35.2k, False: 408k]
  ------------------
  155|  35.2k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 19.8k, False: 15.3k]
  ------------------
  156|  19.8k|                {
  157|  19.8k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|  19.8k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|  19.8k|                    return {};
  160|  19.8k|                }
  161|       |
  162|  15.3k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 8.59k, False: 6.76k]
  ------------------
  163|  8.59k|                {
  164|  8.59k|                    return ConstructInstructionArgumentImmediateValue(
  165|  8.59k|                            static_cast<std::int16_t>(token.GetHint()));
  166|  8.59k|                }
  167|       |
  168|  6.76k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|  6.76k|                return {};
  170|  15.3k|            }
  171|       |
  172|  72.4k|            default:
  ------------------
  |  Branch (172:13): [True: 72.4k, False: 371k]
  ------------------
  173|  72.4k|                program.AddParseError(
  174|  72.4k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  72.4k|                return {};
  176|   443k|        }
  177|   443k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  3.31M|                                tokens.find_first_token_if([&](const Token& t) {
  247|  3.31M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 2.40M, False: 918k]
  ------------------
  248|  2.40M|                                    {
  249|  2.40M|                                        phi::string_view token_label_name = t.GetText();
  250|  2.40M|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  2.40M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 229k, False: 2.17M]
  ------------------
  253|   229k|                                        {
  254|   229k|                                            return true;
  255|   229k|                                        }
  256|  2.40M|                                    }
  257|       |
  258|  3.08M|                                    return false;
  259|  3.31M|                                });

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|  5.32M|    {
   13|  5.32M|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 912k, False: 4.40M]
  ------------------
   14|   912k|        {
   15|   912k|            const char first_char = token[0u];
   16|   912k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 4.70k, False: 907k]
  |  Branch (16:38): [True: 81.5k, False: 825k]
  ------------------
   17|  86.2k|            {
   18|  86.2k|                const char second_char = token[1u];
   19|  86.2k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 83.1k, False: 3.14k]
  |  Branch (19:43): [True: 66.1k, False: 17.0k]
  ------------------
   20|  66.1k|                {
   21|  66.1k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  66.1k|                }
   23|  86.2k|            }
   24|   912k|        }
   25|  4.40M|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 1.05M, False: 3.35M]
  ------------------
   26|  1.05M|        {
   27|  1.05M|            const char first_char = token[0u];
   28|  1.05M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 2.85k, False: 1.05M]
  |  Branch (28:38): [True: 67.5k, False: 982k]
  ------------------
   29|  70.3k|            {
   30|  70.3k|                const char second_char = token[1u];
   31|  70.3k|                const char third_char  = token[2u];
   32|       |
   33|  70.3k|                switch (second_char)
   34|  70.3k|                {
   35|  27.1k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 27.1k, False: 43.2k]
  ------------------
   36|  27.1k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 18.6k, False: 8.46k]
  |  Branch (36:50): [True: 10.0k, False: 8.63k]
  ------------------
   37|  10.0k|                        {
   38|  10.0k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|  10.0k|                        }
   40|  17.1k|                        break;
   41|  27.1k|                    }
   42|  23.1k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 23.1k, False: 47.2k]
  ------------------
   43|  23.1k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 10.6k, False: 12.5k]
  |  Branch (43:50): [True: 6.38k, False: 4.22k]
  ------------------
   44|  6.38k|                        {
   45|  6.38k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|  6.38k|                        }
   47|  16.7k|                        break;
   48|  23.1k|                    }
   49|  16.7k|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 10.3k, False: 60.0k]
  ------------------
   50|  10.3k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 1.60k, False: 8.73k]
  |  Branch (50:50): [True: 2.88k, False: 5.84k]
  ------------------
   51|  4.48k|                        {
   52|  4.48k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|  4.48k|                        }
   54|  5.84k|                        break;
   55|  10.3k|                    }
   56|  9.73k|                    default: {
  ------------------
  |  Branch (56:21): [True: 9.73k, False: 60.6k]
  ------------------
   57|  9.73k|                        break;
   58|  10.3k|                    }
   59|  70.3k|                }
   60|  70.3k|            }
   61|  1.05M|        }
   62|       |
   63|  5.23M|        return IntRegisterID::None;
   64|  5.32M|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|  5.23M|    {
   68|  5.23M|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 846k, False: 4.38M]
  ------------------
   69|   846k|        {
   70|   846k|            const char first_char = token[0u];
   71|   846k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 61.4k, False: 784k]
  |  Branch (71:38): [True: 21.1k, False: 763k]
  ------------------
   72|  82.6k|            {
   73|  82.6k|                const char second_char = token[1u];
   74|  82.6k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 77.9k, False: 4.64k]
  |  Branch (74:43): [True: 54.4k, False: 23.5k]
  ------------------
   75|  54.4k|                {
   76|  54.4k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  54.4k|                }
   78|  82.6k|            }
   79|   846k|        }
   80|  4.38M|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 1.03M, False: 3.35M]
  ------------------
   81|  1.03M|        {
   82|  1.03M|            const char first_char = token[0u];
   83|  1.03M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 51.4k, False: 980k]
  |  Branch (83:38): [True: 24.4k, False: 956k]
  ------------------
   84|  75.9k|            {
   85|  75.9k|                const char second_char = token[1u];
   86|  75.9k|                const char third_char  = token[2u];
   87|       |
   88|  75.9k|                switch (second_char)
   89|  75.9k|                {
   90|  5.09k|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 5.09k, False: 70.8k]
  ------------------
   91|  5.09k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 4.04k, False: 1.04k]
  |  Branch (91:50): [True: 2.46k, False: 1.58k]
  ------------------
   92|  2.46k|                        {
   93|  2.46k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|  2.46k|                        }
   95|  2.63k|                        break;
   96|  5.09k|                    }
   97|  10.3k|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 10.3k, False: 65.5k]
  ------------------
   98|  10.3k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 8.91k, False: 1.40k]
  |  Branch (98:50): [True: 3.71k, False: 5.20k]
  ------------------
   99|  3.71k|                        {
  100|  3.71k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|  3.71k|                        }
  102|  6.60k|                        break;
  103|  10.3k|                    }
  104|  38.2k|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 38.2k, False: 37.6k]
  ------------------
  105|  38.2k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 21.9k, False: 16.2k]
  |  Branch (105:50): [True: 6.48k, False: 9.81k]
  ------------------
  106|  28.4k|                        {
  107|  28.4k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|  28.4k|                        }
  109|  9.81k|                        break;
  110|  38.2k|                    }
  111|  22.2k|                    default: {
  ------------------
  |  Branch (111:21): [True: 22.2k, False: 53.6k]
  ------------------
  112|  22.2k|                        break;
  113|  38.2k|                    }
  114|  75.9k|                }
  115|  75.9k|            }
  116|  1.03M|        }
  117|       |
  118|  5.14M|        return FloatRegisterID::None;
  119|  5.23M|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|  4.77M|    {
  123|  4.77M|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 982k, False: 3.78M]
  ------------------
  124|   982k|        {
  125|   982k|            const char c1 = token[0u];
  126|   982k|            const char c2 = token[1u];
  127|   982k|            const char c3 = token[2u];
  128|   982k|            const char c4 = token[3u];
  129|       |
  130|   982k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 33.5k, False: 949k]
  |  Branch (130:34): [True: 26.9k, False: 922k]
  |  Branch (130:49): [True: 27.5k, False: 33.0k]
  |  Branch (130:62): [True: 2.00k, False: 31.0k]
  ------------------
  131|   982k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 5.84k, False: 23.6k]
  |  Branch (131:34): [True: 21.1k, False: 2.54k]
  |  Branch (131:49): [True: 4.54k, False: 22.4k]
  |  Branch (131:62): [True: 17.5k, False: 4.90k]
  ------------------
  132|   982k|        }
  133|       |
  134|  3.78M|        return false;
  135|  4.77M|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|  5.86M|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  1.42M|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  14.1M|    {
   41|  14.1M|        return m_Type;
   42|  14.1M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  6.17M|    {
   51|  6.17M|        return m_LineNumber;
   52|  6.17M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  5.70M|    {
   56|  5.70M|        return m_Column;
   57|  5.70M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  7.88M|    {
   66|  7.88M|        return m_Text;
   67|  7.88M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   530k|    {
   80|   530k|        return m_HasHint;
   81|   530k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   594k|    {
   85|   594k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   594k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   594k|                   m_Type == Type::ImmediateInteger);
   88|   594k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   594k|        return m_Hint;
   91|   594k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  27.7k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  27.7k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  27.7k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  45.6k|    {
   51|  45.6k|        auto it = m_Iterator;
   52|   182k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 137k, False: 45.6k]
  ------------------
   53|   137k|        {
   54|   137k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 5, False: 137k]
  ------------------
   55|      5|            {
   56|      5|                return false;
   57|      5|            }
   58|   137k|        }
   59|       |
   60|  45.6k|        return true;
   61|  45.6k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  7.18M|    {
   65|  7.18M|        return m_Iterator != m_Tokens.end();
   66|  7.18M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  7.29M|    {
   70|  7.29M|        return m_Iterator == m_Tokens.end();
   71|  7.29M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  7.29M|    {
   85|  7.29M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  7.29M|        return *m_Iterator++;
   91|  7.29M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  45.6k|    {
  164|  45.6k|        return m_Iterator;
  165|  45.6k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  12.0k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  12.0k|        m_Iterator = it;
  179|  12.0k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  9.00k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  9.00k|        return m_Tokens.rbegin();
  224|  9.00k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|   222k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|   222k|        return m_Tokens.rend();
  233|   222k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  27.7k|    {
   66|  27.7k|        TokenStream tokens;
   67|       |
   68|  27.7k|        phi::string_view current_token;
   69|       |
   70|  27.7k|        phi::u64 current_line_number{1u};
   71|  27.7k|        phi::u64 current_column{1u};
   72|  27.7k|        phi::u64 token_begin{0u};
   73|       |
   74|  27.7k|        phi::boolean parsing_comment{false};
   75|       |
   76|  18.4M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 18.3M, False: 27.7k]
  ------------------
   77|  18.3M|        {
   78|  18.3M|            const char c{source.at(i)};
   79|       |
   80|  18.3M|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 823k, False: 17.5M]
  ------------------
   81|   823k|            {
   82|   823k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 132k, False: 691k]
  ------------------
   83|   132k|                {
   84|       |                    // Skip empty lines
   85|   132k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|   132k|                                        current_line_number, current_column);
   87|       |
   88|   132k|                    parsing_comment = false;
   89|   132k|                    current_line_number += 1u;
   90|   132k|                    current_column = 1u;
   91|   132k|                    continue;
   92|   132k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|   691k|                tokens.emplace_back(ParseToken(
   96|   691k|                        source.substring_view(
   97|   691k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|   691k|                                current_token.length()),
   99|   691k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|   691k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|   691k|                                    current_line_number, current_column);
  103|       |
  104|   691k|                current_token   = phi::string_view{};
  105|   691k|                parsing_comment = false;
  106|   691k|                current_line_number += 1u;
  107|   691k|                current_column = 0u;
  108|   691k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|  17.5M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 12.4k, False: 17.5M]
  |  Branch (110:34): [True: 35.7k, False: 17.5M]
  ------------------
  111|  48.2k|            {
  112|  48.2k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 24.0k, False: 24.2k]
  ------------------
  113|  24.0k|                {
  114|  24.0k|                    token_begin = i;
  115|  24.0k|                }
  116|  24.2k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 21.9k, False: 2.30k]
  ------------------
  117|  21.9k|                {
  118|  21.9k|                    tokens.emplace_back(ParseToken(
  119|  21.9k|                            source.substring_view(
  120|  21.9k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  21.9k|                                    current_token.length()),
  122|  21.9k|                            current_line_number, current_column - current_token.length()));
  123|  21.9k|                    token_begin   = i;
  124|  21.9k|                    current_token = phi::string_view{};
  125|  21.9k|                }
  126|       |
  127|  48.2k|                parsing_comment = true;
  128|  48.2k|                current_token   = source.substring_view(
  129|  48.2k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  48.2k|                        current_token.length() + 1u);
  131|  48.2k|            }
  132|  17.5M|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 82.8k, False: 17.4M]
  ------------------
  133|  82.8k|            {
  134|       |                // simply append the character
  135|  82.8k|                current_token = source.substring_view(
  136|  82.8k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|  82.8k|                        current_token.length() + 1u);
  138|  82.8k|            }
  139|  17.4M|            else
  140|  17.4M|            {
  141|       |                // Not parsing a comment
  142|  17.4M|                switch (c)
  143|  17.4M|                {
  144|   219k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 219k, False: 17.2M]
  ------------------
  145|   382k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 163k, False: 17.2M]
  ------------------
  146|   659k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 276k, False: 17.1M]
  ------------------
  147|   659k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 125k, False: 533k]
  ------------------
  148|   125k|                        {
  149|   125k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|   125k|                            continue;
  152|   125k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|   533k|                        tokens.emplace_back(ParseToken(
  156|   533k|                                source.substring_view(
  157|   533k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|   533k|                                        current_token.length()),
  159|   533k|                                current_line_number, current_column - current_token.length()));
  160|   533k|                        current_token = phi::string_view{};
  161|   533k|                        break;
  162|  1.61M|                    case ':':
  ------------------
  |  Branch (162:21): [True: 1.61M, False: 15.8M]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  1.61M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 1.41M, False: 200k]
  ------------------
  165|  1.41M|                        {
  166|  1.41M|                            current_token = source.substring_view(
  167|  1.41M|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  1.41M|                                    current_token.length() + 1u);
  169|  1.41M|                            tokens.emplace_back(ParseToken(
  170|  1.41M|                                    source.substring_view(
  171|  1.41M|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  1.41M|                                                    token_begin),
  173|  1.41M|                                            current_token.length()),
  174|  1.41M|                                    current_line_number,
  175|  1.41M|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  1.41M|                            current_token = phi::string_view{};
  178|  1.41M|                        }
  179|   200k|                        else
  180|   200k|                        {
  181|       |                            // Orphan colon
  182|   200k|                            token_begin = i;
  183|       |
  184|   200k|                            tokens.emplace_back(
  185|   200k|                                    Token::Type::Colon,
  186|   200k|                                    source.substring_view(
  187|   200k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|   200k|                                                    token_begin),
  189|   200k|                                            1u),
  190|   200k|                                    current_line_number, current_column);
  191|   200k|                        }
  192|  1.61M|                        break;
  193|  1.23M|                    case ',':
  ------------------
  |  Branch (193:21): [True: 1.23M, False: 16.2M]
  ------------------
  194|  2.10M|                    case '(':
  ------------------
  |  Branch (194:21): [True: 865k, False: 16.5M]
  ------------------
  195|  2.17M|                    case ')':
  ------------------
  |  Branch (195:21): [True: 73.4k, False: 17.3M]
  ------------------
  196|  2.17M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 1.41M, False: 761k]
  ------------------
  197|  1.41M|                        {
  198|  1.41M|                            tokens.emplace_back(ParseToken(
  199|  1.41M|                                    source.substring_view(
  200|  1.41M|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  1.41M|                                                    token_begin),
  202|  1.41M|                                            current_token.length()),
  203|  1.41M|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  1.41M|                            current_token = phi::string_view{};
  206|  1.41M|                        }
  207|       |
  208|  2.17M|                        Token::Type type;
  209|  2.17M|                        switch (c)
  210|  2.17M|                        {
  211|  1.23M|                            case ',':
  ------------------
  |  Branch (211:29): [True: 1.23M, False: 939k]
  ------------------
  212|  1.23M|                                type = Token::Type::Comma;
  213|  1.23M|                                break;
  214|   865k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 865k, False: 1.30M]
  ------------------
  215|   865k|                                type = Token::Type::OpenBracket;
  216|   865k|                                break;
  217|  73.4k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 73.4k, False: 2.10M]
  ------------------
  218|  73.4k|                                type = Token::Type::ClosingBracket;
  219|  73.4k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 2.17M]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  2.17M|#endif
  225|  2.17M|                        }
  226|       |
  227|  2.17M|                        token_begin = i;
  228|       |
  229|  2.17M|                        tokens.emplace_back(
  230|  2.17M|                                type,
  231|  2.17M|                                source.substring_view(
  232|  2.17M|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  2.17M|                                        1u),
  234|  2.17M|                                current_line_number, current_column);
  235|  2.17M|                        break;
  236|       |
  237|  12.9M|                    default:
  ------------------
  |  Branch (237:21): [True: 12.9M, False: 4.45M]
  ------------------
  238|  12.9M|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 4.05M, False: 8.94M]
  ------------------
  239|  4.05M|                        {
  240|  4.05M|                            token_begin = i;
  241|  4.05M|                        }
  242|       |
  243|       |                        // simply append the character
  244|  12.9M|                        current_token = source.substring_view(
  245|  12.9M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|  12.9M|                                current_token.length() + 1u);
  247|  17.4M|                }
  248|  17.4M|            }
  249|       |
  250|  18.1M|            current_column += 1u;
  251|  18.1M|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  27.7k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 18.8k, False: 8.91k]
  ------------------
  255|  18.8k|        {
  256|  18.8k|            tokens.emplace_back(
  257|  18.8k|                    ParseToken(source.substring_view(
  258|  18.8k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  18.8k|                                       current_token.length()),
  260|  18.8k|                               current_line_number, current_column - current_token.length()));
  261|  18.8k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  27.7k|        tokens.finalize();
  265|       |
  266|  27.7k|        return tokens;
  267|  27.7k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|  4.09M|    {
   14|  4.09M|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 46.7k, False: 4.04M]
  |  Branch (14:13): [True: 41.8k, False: 4.05M]
  |  Branch (14:36): [True: 41.8k, False: 4.93k]
  ------------------
   15|  41.8k|        {
   16|  41.8k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  41.8k|            if (number)
  ------------------
  |  Branch (18:17): [True: 12.3k, False: 29.5k]
  ------------------
   19|  12.3k|            {
   20|  12.3k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  12.3k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  12.3k|            }
   23|       |
   24|  29.5k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  41.8k|        }
   26|       |
   27|  4.05M|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 12.1k, False: 4.04M]
  |  Branch (27:13): [True: 45.9k, False: 4.00M]
  |  Branch (27:36): [True: 33.7k, False: 4.00M]
  ------------------
   28|  45.9k|        {
   29|  45.9k|            return {Token::Type::Comment, token, line_number, column};
   30|  45.9k|        }
   31|       |
   32|  4.00M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 122k, False: 3.88M]
  ------------------
   33|   122k|        {
   34|   122k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|   122k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|   122k|        }
   37|       |
   38|  3.88M|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 17.4k, False: 3.86M]
  ------------------
   39|  17.4k|        {
   40|  17.4k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  17.4k|        }
   42|       |
   43|  3.86M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 66.9k, False: 3.80M]
  ------------------
   44|  66.9k|        {
   45|  66.9k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  66.9k|                    static_cast<phi::uint32_t>(id)};
   47|  66.9k|        }
   48|       |
   49|  3.80M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 83.8k, False: 3.71M]
  ------------------
   50|  83.8k|        {
   51|  83.8k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  83.8k|                    static_cast<phi::uint32_t>(id)};
   53|  83.8k|        }
   54|       |
   55|  3.71M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 1.14M, False: 2.57M]
  ------------------
   56|  1.14M|        {
   57|  1.14M|            return {Token::Type::OpCode, token, line_number, column,
   58|  1.14M|                    static_cast<phi::uint32_t>(opcode)};
   59|  1.14M|        }
   60|       |
   61|  2.57M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  3.71M|    }

LLVMFuzzerTestOneInput:
    8|  27.7k|{
    9|  27.7k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   10|       |
   11|       |    // Parse it
   12|  27.7k|    dlx::Parser::Parse(source);
   13|       |
   14|  27.7k|    return 0;
   15|  27.7k|}


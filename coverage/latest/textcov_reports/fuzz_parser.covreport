_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  1.12M|        {
  169|  1.12M|            PHI_ASSERT(index < 3u);
  170|       |
  171|  1.12M|            switch (index.unsafe())
  172|  1.12M|            {
  173|   510k|                case 0:
  ------------------
  |  Branch (173:17): [True: 510k, False: 612k]
  ------------------
  174|   510k|                    return m_Arg1Type;
  175|       |
  176|   311k|                case 1:
  ------------------
  |  Branch (176:17): [True: 311k, False: 810k]
  ------------------
  177|   311k|                    return m_Arg2Type;
  178|       |
  179|   300k|                case 2:
  ------------------
  |  Branch (179:17): [True: 300k, False: 822k]
  ------------------
  180|   300k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 1.12M]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  1.12M|#endif
  187|  1.12M|            }
  188|  1.12M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   285k|        {
  195|   285k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   285k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 276k, False: 9.35k]
  ------------------
  199|   276k|            {
  200|   276k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   276k|            }
  202|   285k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 165k, False: 119k]
  ------------------
  203|   165k|            {
  204|   165k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   165k|            }
  206|   285k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 98.2k, False: 187k]
  ------------------
  207|  98.2k|            {
  208|  98.2k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  98.2k|            }
  210|       |
  211|   285k|            return number_of_argument_required;
  212|   285k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   285k|        {
  221|   285k|            return m_Executor;
  222|   285k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   215k|    {
   38|   215k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   215k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   215k|                                         static_cast<underlying_t>(rhs));
   42|   215k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   215k|    {
   55|   215k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   215k|        return static_cast<underlying_t>(type & test) != 0;
   58|   215k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|   901k|    {
   32|   901k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 16.0k, False: 885k]
  ------------------
   33|  16.0k|        {
   34|  16.0k|            return true;
   35|  16.0k|        }
   36|       |
   37|   885k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 3.71k, False: 881k]
  ------------------
   38|  3.71k|        {
   39|  3.71k|            return true;
   40|  3.71k|        }
   41|       |
   42|   881k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 333k, False: 548k]
  ------------------
   43|   333k|        {
   44|   333k|            return true;
   45|   333k|        }
   46|       |
   47|   548k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 2.85k, False: 545k]
  ------------------
   48|  2.85k|        {
   49|  2.85k|            return true;
   50|  2.85k|        }
   51|       |
   52|   545k|        return false;
   53|   548k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|   545k|    {
   57|   545k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 545k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|   545k|        const char first_char = token.at(0);
   63|       |
   64|   545k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 113k, False: 431k]
  ------------------
   65|   113k|        {
   66|   113k|            return phi::is_alpha(first_char);
   67|   113k|        }
   68|       |
   69|   431k|        phi::boolean just_under_scores = (first_char == '_');
   70|   431k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 57.3k, False: 374k]
  |  Branch (70:15): [True: 365k, False: 66.0k]
  |  Branch (70:44): [True: 8.66k, False: 57.3k]
  ------------------
   71|  57.3k|        {
   72|  57.3k|            return false;
   73|  57.3k|        }
   74|       |
   75|  1.41M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 1.17M, False: 231k]
  ------------------
   76|  1.17M|        {
   77|  1.17M|            const char c{token.at(index)};
   78|       |
   79|  1.17M|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 1.02M, False: 153k]
  ------------------
   80|  1.02M|            {
   81|  1.02M|                just_under_scores = false;
   82|  1.02M|            }
   83|   153k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 11.1k, False: 142k]
  ------------------
   84|  11.1k|            {
   85|  11.1k|                continue;
   86|  11.1k|            }
   87|   142k|            else
   88|   142k|            {
   89|   142k|                return false;
   90|   142k|            }
   91|  1.17M|        }
   92|       |
   93|   231k|        return !just_under_scores;
   94|   374k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|  2.61M|    {
  101|  2.61M|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 2.61M]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|  2.61M|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 418k, False: 2.19M]
  ------------------
  107|   418k|        {
  108|   418k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 66.6k, False: 351k]
  ------------------
  109|  66.6k|            {
  110|  66.6k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  66.6k|            }
  112|       |
  113|   351k|            return {};
  114|   418k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|  2.19M|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 25.0k, False: 2.16M]
  ------------------
  118|  25.0k|        {
  119|  25.0k|            return {};
  120|  25.0k|        }
  121|       |
  122|  2.16M|        std::int32_t number{0};
  123|  2.16M|        phi::boolean is_negative{false};
  124|  2.16M|        phi::boolean starts_with_zero{false};
  125|  2.16M|        phi::boolean parsing_binary{false};
  126|  2.16M|        phi::boolean parsing_octal{false};
  127|  2.16M|        phi::boolean parsing_hexadecimal{false};
  128|  2.16M|        phi::boolean parsed_something{false};
  129|  2.16M|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|  2.42M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 2.38M, False: 39.1k]
  ------------------
  134|  2.38M|        {
  135|  2.38M|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|  2.38M|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 2.16M, False: 219k]
  ------------------
  139|  2.16M|            {
  140|  2.16M|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 3.63k, False: 2.16M]
  ------------------
  141|  3.63k|                {
  142|  3.63k|                    continue;
  143|  3.63k|                }
  144|       |
  145|  2.16M|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 18.5k, False: 2.14M]
  ------------------
  146|  18.5k|                {
  147|  18.5k|                    is_negative = true;
  148|  18.5k|                    continue;
  149|  18.5k|                }
  150|       |
  151|  2.14M|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 37.2k, False: 2.11M]
  ------------------
  152|  37.2k|                {
  153|  37.2k|                    starts_with_zero = true;
  154|  37.2k|                    continue;
  155|  37.2k|                }
  156|       |
  157|  2.11M|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 4.62k, False: 2.10M]
  ------------------
  158|  4.62k|                {
  159|  4.62k|                    return {};
  160|  4.62k|                }
  161|  2.11M|            }
  162|       |
  163|       |            // Second character
  164|  2.32M|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 95.6k, False: 2.22M]
  ------------------
  165|  95.6k|            {
  166|  95.6k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 37.2k, False: 58.3k]
  ------------------
  167|  37.2k|                {
  168|       |                    // Binary
  169|  37.2k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 4.91k, False: 32.3k]
  |  Branch (169:37): [True: 1.11k, False: 31.2k]
  ------------------
  170|  6.03k|                    {
  171|  6.03k|                        parsing_binary = true;
  172|  6.03k|                        continue;
  173|  6.03k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  31.2k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 12.3k, False: 18.8k]
  |  Branch (176:37): [True: 3.05k, False: 15.8k]
  ------------------
  177|  15.4k|                    {
  178|  15.4k|                        parsing_hexadecimal = true;
  179|  15.4k|                        continue;
  180|  15.4k|                    }
  181|       |
  182|       |                    // Octal
  183|  15.8k|                    parsing_octal = true;
  184|  15.8k|                }
  185|  95.6k|            }
  186|       |
  187|       |            // Handle seperators
  188|  2.30M|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 5.51k, False: 2.29M]
  ------------------
  189|  5.51k|            {
  190|  5.51k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 2.49k, False: 3.01k]
  ------------------
  191|  2.49k|                {
  192|  2.49k|                    return {};
  193|  2.49k|                }
  194|       |
  195|  3.01k|                parsed_separator = true;
  196|  3.01k|                continue;
  197|  5.51k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|  2.29M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 64.5k, False: 2.23M]
  |  Branch (200:32): [True: 2.79k, False: 61.7k]
  ------------------
  201|  2.79k|            {
  202|       |                // Would underflow
  203|  2.79k|                return {};
  204|  2.79k|            }
  205|  2.29M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 2.23M, False: 61.7k]
  |  Branch (205:17): [True: 5.22k, False: 2.29M]
  |  Branch (205:33): [True: 5.22k, False: 2.22M]
  ------------------
  206|  5.22k|            {
  207|       |                // Would overflow
  208|  5.22k|                return {};
  209|  5.22k|            }
  210|       |
  211|  2.29M|            parsed_separator = false;
  212|  2.29M|            parsed_something = true;
  213|       |
  214|  2.29M|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 7.37k, False: 2.28M]
  ------------------
  215|  7.37k|            {
  216|  7.37k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 2.02k, False: 5.35k]
  ------------------
  217|  2.02k|                {
  218|  2.02k|                    return {};
  219|  2.02k|                }
  220|       |
  221|  5.35k|                number <<= 1;
  222|  5.35k|                number |= (c - '0');
  223|  5.35k|            }
  224|  2.28M|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 16.4k, False: 2.26M]
  ------------------
  225|  16.4k|            {
  226|  16.4k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 11.1k, False: 5.31k]
  ------------------
  227|  11.1k|                {
  228|  11.1k|                    return {};
  229|  11.1k|                }
  230|       |
  231|  5.31k|                number <<= 3;
  232|  5.31k|                number |= (c - '0');
  233|  5.31k|            }
  234|  2.26M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 23.6k, False: 2.24M]
  ------------------
  235|  23.6k|            {
  236|  23.6k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 12.3k, False: 11.2k]
  ------------------
  237|  12.3k|                {
  238|  12.3k|                    return {};
  239|  12.3k|                }
  240|       |
  241|  11.2k|                number <<= 4;
  242|  11.2k|                number |= phi::hex_digit_value(c).unsafe();
  243|  11.2k|            }
  244|  2.24M|            else
  245|  2.24M|            {
  246|  2.24M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 2.08M, False: 159k]
  ------------------
  247|  2.08M|                {
  248|  2.08M|                    return {};
  249|  2.08M|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|   159k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 53.4k, False: 106k]
  |  Branch (252:36): [True: 6.71k, False: 46.7k]
  ------------------
  253|  6.71k|                {
  254|  6.71k|                    return {};
  255|  6.71k|                }
  256|       |
  257|   152k|                number *= 10;
  258|   152k|                number += (c - '0');
  259|   152k|            }
  260|  2.29M|        }
  261|       |
  262|  39.1k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 36.9k, False: 2.26k]
  ------------------
  263|  36.9k|        {
  264|       |            // Check for over/underflow
  265|  36.9k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 7.59k, False: 29.3k]
  |  Branch (265:32): [True: 6.33k, False: 1.26k]
  ------------------
  266|  6.33k|            {
  267|       |                // Would underflow
  268|  6.33k|                return {};
  269|  6.33k|            }
  270|  30.5k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 29.3k, False: 1.26k]
  |  Branch (270:17): [True: 3.53k, False: 27.0k]
  |  Branch (270:33): [True: 3.53k, False: 25.8k]
  ------------------
  271|  3.53k|            {
  272|       |                // Would overflow
  273|  3.53k|                return {};
  274|  3.53k|            }
  275|       |
  276|  27.0k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 1.26k, False: 25.8k]
  ------------------
  277|  1.26k|            {
  278|  1.26k|                return static_cast<std::int16_t>(-number);
  279|  1.26k|            }
  280|       |
  281|  25.8k|            return static_cast<std::int16_t>(number);
  282|  27.0k|        }
  283|       |
  284|  2.26k|        return {};
  285|  39.1k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   153k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   153k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 2.33M, False: 0]
  ------------------
   64|  2.33M|            {
   65|  2.33M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 153k, False: 2.18M]
  ------------------
   66|   153k|                {
   67|   153k|                    return &token;
   68|   153k|                }
   69|  2.33M|            }
   70|       |
   71|      0|            return nullptr;
   72|   153k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   648k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   648k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   648k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  2.64M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.64M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.64M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  1.44M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.44M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.44M|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   285k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  73.5k|    {
   25|  73.5k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  73.5k|        switch (argument_number.unsafe())
   28|  73.5k|        {
   29|  50.1k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 50.1k, False: 23.4k]
  ------------------
   30|  50.1k|                m_Arg1 = argument;
   31|  50.1k|                break;
   32|  15.1k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 15.1k, False: 58.4k]
  ------------------
   33|  15.1k|                m_Arg2 = argument;
   34|  15.1k|                break;
   35|  8.29k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 8.29k, False: 65.2k]
  ------------------
   36|  8.29k|                m_Arg3 = argument;
   37|  8.29k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 73.5k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  73.5k|#endif
   42|  73.5k|        }
   43|  73.5k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|   930k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  15.2k|    {
  171|  15.2k|        InstructionArgument arg;
  172|  15.2k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  15.2k|        arg.register_int.register_id = id;
  174|  15.2k|        return arg;
  175|  15.2k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  23.6k|    {
  179|  23.6k|        InstructionArgument arg;
  180|  23.6k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  23.6k|        arg.register_float.register_id = id;
  182|  23.6k|        return arg;
  183|  23.6k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  3.80k|    {
  187|  3.80k|        InstructionArgument arg;
  188|  3.80k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  3.80k|        arg.immediate_value.signed_value = value;
  190|  3.80k|        return arg;
  191|  3.80k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|  7.15k|    {
  196|  7.15k|        InstructionArgument arg;
  197|  7.15k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|  7.15k|        arg.address_displacement.register_id  = id;
  199|  7.15k|        arg.address_displacement.displacement = displacement;
  200|  7.15k|        return arg;
  201|  7.15k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  23.7k|    {
  205|  23.7k|        InstructionArgument arg;
  206|  23.7k|        arg.m_Type           = ArgumentType::Label;
  207|  23.7k|        arg.label.label_name = label_name;
  208|  23.7k|        return arg;
  209|  23.7k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   285k|    {
  453|   285k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   285k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|  3.27M|    {
   24|  3.27M|        switch (token.length())
   25|  3.27M|        {
   26|       |            // 1 character OpCodes
   27|   459k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 459k, False: 2.81M]
  ------------------
   28|   459k|                char c1 = token[0];
   29|   459k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 116k, False: 343k]
  ------------------
   30|   116k|                {
   31|   116k|                    return OpCode::J;
   32|   116k|                }
   33|   343k|                break;
   34|   459k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|   496k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 496k, False: 2.78M]
  ------------------
   38|   496k|                char c1 = token[0];
   39|   496k|                char c2 = token[1];
   40|       |
   41|   496k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 312k, False: 183k]
  ------------------
   42|   496k|                {
   43|  9.05k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 9.05k, False: 487k]
  ------------------
   44|  14.4k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 5.41k, False: 490k]
  ------------------
   45|  14.4k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 6.43k, False: 8.03k]
  ------------------
   46|  6.43k|                        {
   47|  6.43k|                            return OpCode::JR;
   48|  6.43k|                        }
   49|  8.03k|                        break;
   50|       |
   51|  18.2k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 18.2k, False: 477k]
  ------------------
   52|  37.9k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 19.6k, False: 476k]
  ------------------
   53|  37.9k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 15.4k, False: 22.4k]
  ------------------
   54|  37.9k|                        {
   55|  5.70k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 5.70k, False: 32.2k]
  ------------------
   56|  8.93k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 3.22k, False: 34.7k]
  ------------------
   57|  8.93k|                                return OpCode::LB;
   58|  1.51k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 1.51k, False: 36.4k]
  ------------------
   59|  1.88k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 368, False: 37.5k]
  ------------------
   60|  1.88k|                                return OpCode::LD;
   61|  1.39k|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 1.39k, False: 36.5k]
  ------------------
   62|  3.69k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 2.29k, False: 35.6k]
  ------------------
   63|  3.69k|                                return OpCode::LF;
   64|  2.25k|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 2.25k, False: 35.7k]
  ------------------
   65|  4.12k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 1.87k, False: 36.0k]
  ------------------
   66|  4.12k|                                return OpCode::LH;
   67|  1.57k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 1.57k, False: 36.3k]
  ------------------
   68|  3.86k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 2.28k, False: 35.6k]
  ------------------
   69|  3.86k|                                return OpCode::LW;
   70|  37.9k|                        }
   71|  15.4k|                        break;
   72|  15.4k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 5.50k, False: 490k]
  ------------------
   73|  16.0k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 10.5k, False: 485k]
  ------------------
   74|  16.0k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 8.33k, False: 7.71k]
  ------------------
   75|  8.33k|                        {
   76|  8.33k|                            return OpCode::OR;
   77|  8.33k|                        }
   78|  7.71k|                        break;
   79|  79.8k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 79.8k, False: 416k]
  ------------------
   80|   114k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 34.9k, False: 461k]
  ------------------
   81|   114k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 28.8k, False: 86.0k]
  ------------------
   82|   114k|                        {
   83|  4.90k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 4.90k, False: 109k]
  ------------------
   84|  12.7k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 7.80k, False: 107k]
  ------------------
   85|  12.7k|                                return OpCode::SB;
   86|  27.2k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 27.2k, False: 87.5k]
  ------------------
   87|  35.7k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 8.44k, False: 106k]
  ------------------
   88|  35.7k|                                return OpCode::SD;
   89|  3.49k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 3.49k, False: 111k]
  ------------------
   90|  5.05k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 1.55k, False: 113k]
  ------------------
   91|  5.05k|                                return OpCode::SF;
   92|  7.50k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 7.50k, False: 107k]
  ------------------
   93|  11.8k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 4.35k, False: 110k]
  ------------------
   94|  11.8k|                                return OpCode::SH;
   95|  3.99k|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 3.99k, False: 110k]
  ------------------
   96|  20.7k|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 16.7k, False: 98.1k]
  ------------------
   97|  20.7k|                                return OpCode::SW;
   98|   114k|                        }
   99|  28.8k|                        break;
  100|   496k|                }
  101|   372k|                break;
  102|   496k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   641k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 641k, False: 2.63M]
  ------------------
  106|   641k|                char c1 = token[0];
  107|   641k|                char c2 = token[1];
  108|   641k|                char c3 = token[2];
  109|       |
  110|   641k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 194k, False: 447k]
  ------------------
  111|   641k|                {
  112|  27.9k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 27.9k, False: 613k]
  ------------------
  113|  35.7k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 7.80k, False: 633k]
  ------------------
  114|  35.7k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 11.8k, False: 23.9k]
  |  Branch (114:29): [True: 10.1k, False: 25.5k]
  |  Branch (114:45): [True: 10.1k, False: 1.67k]
  ------------------
  115|  10.1k|                        {
  116|  10.1k|                            return OpCode::ADD;
  117|  10.1k|                        }
  118|  25.5k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 12.1k, False: 13.4k]
  |  Branch (118:34): [True: 3.89k, False: 21.6k]
  |  Branch (118:50): [True: 3.89k, False: 8.27k]
  ------------------
  119|  3.89k|                        {
  120|  3.89k|                            return OpCode::AND;
  121|  3.89k|                        }
  122|  21.6k|                        break;
  123|       |
  124|  21.6k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 4.62k, False: 636k]
  ------------------
  125|  38.0k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 33.4k, False: 608k]
  ------------------
  126|  38.0k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 25.5k, False: 12.4k]
  |  Branch (126:29): [True: 18.1k, False: 19.9k]
  |  Branch (126:45): [True: 18.1k, False: 7.45k]
  ------------------
  127|  18.1k|                        {
  128|  18.1k|                            return OpCode::DIV;
  129|  18.1k|                        }
  130|  19.9k|                        break;
  131|       |
  132|  19.9k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 2.86k, False: 638k]
  ------------------
  133|  18.4k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 15.5k, False: 626k]
  ------------------
  134|  18.4k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 15.8k, False: 2.59k]
  ------------------
  135|  15.8k|                        {
  136|  15.8k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 8.16k, False: 7.66k]
  ------------------
  137|  8.16k|                            {
  138|  8.16k|                                return OpCode::EQD;
  139|  8.16k|                            }
  140|  7.66k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 5.31k, False: 2.35k]
  ------------------
  141|  5.31k|                            {
  142|  5.31k|                                return OpCode::EQF;
  143|  5.31k|                            }
  144|  15.8k|                        }
  145|  4.94k|                        break;
  146|       |
  147|  39.5k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 39.5k, False: 602k]
  ------------------
  148|  49.1k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 9.57k, False: 632k]
  ------------------
  149|  49.1k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 19.2k, False: 29.9k]
  ------------------
  150|  19.2k|                        {
  151|  19.2k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 13.9k, False: 5.32k]
  ------------------
  152|  13.9k|                            {
  153|  13.9k|                                return OpCode::GED;
  154|  13.9k|                            }
  155|  5.32k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 2.43k, False: 2.89k]
  ------------------
  156|  2.43k|                            {
  157|  2.43k|                                return OpCode::GEF;
  158|  2.43k|                            }
  159|  19.2k|                        }
  160|  29.9k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 12.3k, False: 17.6k]
  ------------------
  161|  12.3k|                        {
  162|  12.3k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 4.32k, False: 7.97k]
  ------------------
  163|  4.32k|                            {
  164|  4.32k|                                return OpCode::GTD;
  165|  4.32k|                            }
  166|  7.97k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 4.16k, False: 3.81k]
  ------------------
  167|  4.16k|                            {
  168|  4.16k|                                return OpCode::GTF;
  169|  4.16k|                            }
  170|  7.97k|                        }
  171|  24.3k|                        break;
  172|       |
  173|  24.3k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 3.54k, False: 638k]
  ------------------
  174|  17.1k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 13.6k, False: 627k]
  ------------------
  175|  17.1k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 13.0k, False: 4.14k]
  |  Branch (175:29): [True: 9.67k, False: 7.51k]
  |  Branch (175:45): [True: 9.67k, False: 3.37k]
  ------------------
  176|  9.67k|                        {
  177|  9.67k|                            return OpCode::JAL;
  178|  9.67k|                        }
  179|  7.51k|                        break;
  180|       |
  181|  26.3k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 26.3k, False: 615k]
  ------------------
  182|  72.5k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 46.2k, False: 595k]
  ------------------
  183|  72.5k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 5.55k, False: 66.9k]
  ------------------
  184|  72.5k|                        {
  185|  15.9k|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 15.9k, False: 56.5k]
  ------------------
  186|  19.6k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 3.67k, False: 68.8k]
  ------------------
  187|  19.6k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 9.07k, False: 10.5k]
  ------------------
  188|  9.07k|                                {
  189|  9.07k|                                    return OpCode::LBU;
  190|  9.07k|                                }
  191|  10.5k|                                break;
  192|       |
  193|  10.5k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 10.0k, False: 62.4k]
  ------------------
  194|  14.2k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 4.22k, False: 68.3k]
  ------------------
  195|  14.2k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 4.74k, False: 9.55k]
  ------------------
  196|  4.74k|                                {
  197|  4.74k|                                    return OpCode::LED;
  198|  4.74k|                                }
  199|  9.55k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 7.56k, False: 1.99k]
  ------------------
  200|  7.56k|                                {
  201|  7.56k|                                    return OpCode::LEF;
  202|  7.56k|                                }
  203|  1.99k|                                break;
  204|       |
  205|  1.99k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 1.34k, False: 71.1k]
  ------------------
  206|  11.0k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 9.69k, False: 62.8k]
  ------------------
  207|  11.0k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 7.43k, False: 3.60k]
  ------------------
  208|  7.43k|                                {
  209|  7.43k|                                    return OpCode::LHI;
  210|  7.43k|                                }
  211|  3.60k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 2.21k, False: 1.39k]
  ------------------
  212|  2.21k|                                {
  213|  2.21k|                                    return OpCode::LHU;
  214|  2.21k|                                }
  215|  1.39k|                                break;
  216|       |
  217|  5.41k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 5.41k, False: 67.1k]
  ------------------
  218|  10.8k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 5.42k, False: 67.1k]
  ------------------
  219|  10.8k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 5.93k, False: 4.91k]
  ------------------
  220|  5.93k|                                {
  221|  5.93k|                                    return OpCode::LTD;
  222|  5.93k|                                }
  223|  4.91k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 2.72k, False: 2.18k]
  ------------------
  224|  2.72k|                                {
  225|  2.72k|                                    return OpCode::LTF;
  226|  2.72k|                                }
  227|  2.18k|                                break;
  228|       |
  229|  3.99k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 3.99k, False: 68.5k]
  ------------------
  230|  11.1k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 7.18k, False: 65.3k]
  ------------------
  231|  11.1k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 5.42k, False: 5.76k]
  ------------------
  232|  5.42k|                                {
  233|  5.42k|                                    return OpCode::LWU;
  234|  5.42k|                                }
  235|  5.76k|                                break;
  236|  72.5k|                        }
  237|  27.4k|                        break;
  238|       |
  239|  27.4k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 4.25k, False: 637k]
  ------------------
  240|  23.7k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 19.5k, False: 622k]
  ------------------
  241|  23.7k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 15.3k, False: 8.41k]
  ------------------
  242|  15.3k|                        {
  243|  15.3k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 5.22k, False: 10.1k]
  ------------------
  244|  5.22k|                            {
  245|  5.22k|                                return OpCode::NED;
  246|  5.22k|                            }
  247|  10.1k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 6.15k, False: 3.97k]
  ------------------
  248|  6.15k|                            {
  249|  6.15k|                                return OpCode::NEF;
  250|  6.15k|                            }
  251|  15.3k|                        }
  252|  8.41k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 4.62k, False: 3.78k]
  |  Branch (252:34): [True: 3.37k, False: 5.04k]
  |  Branch (252:50): [True: 3.37k, False: 1.25k]
  ------------------
  253|  3.37k|                        {
  254|  3.37k|                            return OpCode::NOP;
  255|  3.37k|                        }
  256|       |
  257|  9.02k|                        break;
  258|       |
  259|  9.02k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 5.38k, False: 636k]
  ------------------
  260|  19.8k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 14.4k, False: 627k]
  ------------------
  261|  19.8k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 12.8k, False: 6.95k]
  |  Branch (261:29): [True: 8.50k, False: 11.3k]
  |  Branch (261:45): [True: 8.50k, False: 4.38k]
  ------------------
  262|  8.50k|                        {
  263|  8.50k|                            return OpCode::ORI;
  264|  8.50k|                        }
  265|  11.3k|                        break;
  266|       |
  267|  79.7k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 79.7k, False: 561k]
  ------------------
  268|   161k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 81.6k, False: 559k]
  ------------------
  269|   161k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 20.9k, False: 140k]
  ------------------
  270|   161k|                        {
  271|  12.0k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 12.0k, False: 149k]
  ------------------
  272|  14.4k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 2.41k, False: 159k]
  ------------------
  273|  14.4k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 7.08k, False: 7.36k]
  ------------------
  274|  7.08k|                                {
  275|  7.08k|                                    return OpCode::SBU;
  276|  7.08k|                                }
  277|  7.36k|                                break;
  278|       |
  279|  7.36k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 7.14k, False: 154k]
  ------------------
  280|  11.6k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 4.51k, False: 156k]
  ------------------
  281|  11.6k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 7.06k, False: 4.59k]
  ------------------
  282|  7.06k|                                {
  283|  7.06k|                                    return OpCode::SEQ;
  284|  7.06k|                                }
  285|  4.59k|                                break;
  286|       |
  287|  9.92k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 9.92k, False: 151k]
  ------------------
  288|  16.5k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 6.59k, False: 154k]
  ------------------
  289|  16.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 4.99k, False: 11.5k]
  ------------------
  290|  4.99k|                                {
  291|  4.99k|                                    return OpCode::SGE;
  292|  4.99k|                                }
  293|  11.5k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 4.23k, False: 7.29k]
  ------------------
  294|  4.23k|                                {
  295|  4.23k|                                    return OpCode::SGT;
  296|  4.23k|                                }
  297|  7.29k|                                break;
  298|       |
  299|  7.29k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 2.57k, False: 158k]
  ------------------
  300|  5.69k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 3.11k, False: 158k]
  ------------------
  301|  5.69k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 4.90k, False: 788]
  ------------------
  302|  4.90k|                                {
  303|  4.90k|                                    return OpCode::SHU;
  304|  4.90k|                                }
  305|    788|                                break;
  306|       |
  307|  12.7k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 12.7k, False: 148k]
  ------------------
  308|  35.1k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 22.3k, False: 139k]
  ------------------
  309|  35.1k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 3.45k, False: 31.7k]
  ------------------
  310|  35.1k|                                {
  311|  3.66k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 3.66k, False: 31.5k]
  ------------------
  312|  9.10k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 5.44k, False: 29.7k]
  ------------------
  313|  9.10k|                                        return OpCode::SLA;
  314|       |
  315|  1.95k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 1.95k, False: 33.2k]
  ------------------
  316|  7.44k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 5.49k, False: 29.6k]
  ------------------
  317|  7.44k|                                        return OpCode::SLE;
  318|       |
  319|  3.45k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 3.45k, False: 31.7k]
  ------------------
  320|  8.40k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 4.95k, False: 30.2k]
  ------------------
  321|  8.40k|                                        return OpCode::SLL;
  322|       |
  323|  3.82k|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 3.82k, False: 31.3k]
  ------------------
  324|  6.77k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 2.94k, False: 32.2k]
  ------------------
  325|  6.77k|                                        return OpCode::SLT;
  326|  35.1k|                                }
  327|  3.45k|                                break;
  328|       |
  329|  4.74k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 4.74k, False: 156k]
  ------------------
  330|  11.3k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 6.63k, False: 154k]
  ------------------
  331|  11.3k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 6.22k, False: 5.14k]
  ------------------
  332|  6.22k|                                {
  333|  6.22k|                                    return OpCode::SNE;
  334|  6.22k|                                }
  335|  5.14k|                                break;
  336|       |
  337|  14.2k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 14.2k, False: 147k]
  ------------------
  338|  21.1k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 6.90k, False: 154k]
  ------------------
  339|  21.1k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 9.32k, False: 11.7k]
  ------------------
  340|  9.32k|                                {
  341|  9.32k|                                    return OpCode::SRA;
  342|  9.32k|                                }
  343|  11.7k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 8.93k, False: 2.84k]
  ------------------
  344|  8.93k|                                {
  345|  8.93k|                                    return OpCode::SRL;
  346|  8.93k|                                }
  347|  2.84k|                                break;
  348|       |
  349|  6.97k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 6.97k, False: 154k]
  ------------------
  350|  12.2k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 5.23k, False: 156k]
  ------------------
  351|  12.2k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 9.58k, False: 2.61k]
  ------------------
  352|  9.58k|                                {
  353|  9.58k|                                    return OpCode::SUB;
  354|  9.58k|                                }
  355|  2.61k|                                break;
  356|       |
  357|  3.00k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 3.00k, False: 158k]
  ------------------
  358|  12.2k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 9.28k, False: 152k]
  ------------------
  359|  12.2k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 5.31k, False: 6.96k]
  ------------------
  360|  5.31k|                                {
  361|  5.31k|                                    return OpCode::SWU;
  362|  5.31k|                                }
  363|  6.96k|                                break;
  364|   161k|                        }
  365|       |
  366|  68.4k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 6.38k, False: 635k]
  ------------------
  367|  73.2k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 4.78k, False: 636k]
  ------------------
  368|  73.2k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 9.39k, False: 63.8k]
  |  Branch (368:29): [True: 5.65k, False: 67.5k]
  |  Branch (368:45): [True: 5.65k, False: 3.74k]
  ------------------
  369|  5.65k|                        {
  370|  5.65k|                            return OpCode::XOR;
  371|  5.65k|                        }
  372|  67.5k|                        break;
  373|   641k|                }
  374|   388k|                break;
  375|   641k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   774k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 774k, False: 2.50M]
  ------------------
  379|   774k|                char c1 = token[0];
  380|   774k|                char c2 = token[1];
  381|   774k|                char c3 = token[2];
  382|   774k|                char c4 = token[3];
  383|       |
  384|   774k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 170k, False: 604k]
  ------------------
  385|   774k|                {
  386|  42.0k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 42.0k, False: 732k]
  ------------------
  387|  82.7k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 40.6k, False: 734k]
  ------------------
  388|  82.7k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 5.47k, False: 77.2k]
  ------------------
  389|  82.7k|                        {
  390|  30.9k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 30.9k, False: 51.7k]
  ------------------
  391|  61.1k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 30.2k, False: 52.5k]
  ------------------
  392|  61.1k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 56.3k, False: 4.80k]
  ------------------
  393|  56.3k|                                {
  394|  56.3k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 4.88k, False: 51.5k]
  ------------------
  395|  56.3k|                                    {
  396|  11.4k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 11.4k, False: 44.9k]
  ------------------
  397|  16.0k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 4.54k, False: 51.8k]
  ------------------
  398|  16.0k|                                            return OpCode::ADDD;
  399|       |
  400|  3.58k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 3.58k, False: 52.8k]
  ------------------
  401|  6.02k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 2.44k, False: 53.9k]
  ------------------
  402|  6.02k|                                            return OpCode::ADDF;
  403|       |
  404|  7.08k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 7.08k, False: 49.3k]
  ------------------
  405|  11.7k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 4.68k, False: 51.7k]
  ------------------
  406|  11.7k|                                            return OpCode::ADDI;
  407|       |
  408|  9.49k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 9.49k, False: 46.8k]
  ------------------
  409|  17.7k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 8.21k, False: 48.1k]
  ------------------
  410|  17.7k|                                            return OpCode::ADDU;
  411|  56.3k|                                    }
  412|  56.3k|                                }
  413|  9.69k|                                break;
  414|       |
  415|  9.69k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 5.37k, False: 77.3k]
  ------------------
  416|  16.0k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 10.6k, False: 72.0k]
  ------------------
  417|  16.0k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 7.78k, False: 8.28k]
  |  Branch (417:37): [True: 3.62k, False: 12.4k]
  |  Branch (417:53): [True: 3.62k, False: 4.15k]
  ------------------
  418|  3.62k|                                {
  419|  3.62k|                                    return OpCode::ANDI;
  420|  3.62k|                                }
  421|       |
  422|  12.4k|                                break;
  423|  82.7k|                        }
  424|  27.6k|                        break;
  425|       |
  426|  27.6k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 17.3k, False: 757k]
  ------------------
  427|  52.0k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 34.7k, False: 740k]
  ------------------
  428|  52.0k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 2.51k, False: 49.5k]
  ------------------
  429|  52.0k|                        {
  430|  7.92k|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 7.92k, False: 44.1k]
  ------------------
  431|  10.6k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 2.77k, False: 49.3k]
  ------------------
  432|  10.6k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 6.00k, False: 4.68k]
  |  Branch (432:37): [True: 2.75k, False: 7.93k]
  |  Branch (432:53): [True: 2.75k, False: 3.24k]
  ------------------
  433|  2.75k|                                {
  434|  2.75k|                                    return OpCode::BEQZ;
  435|  2.75k|                                }
  436|  7.93k|                                break;
  437|       |
  438|  7.93k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 4.80k, False: 47.2k]
  ------------------
  439|  16.7k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 11.9k, False: 40.1k]
  ------------------
  440|  16.7k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 12.9k, False: 3.76k]
  ------------------
  441|  12.9k|                                {
  442|  12.9k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 5.92k, False: 7.03k]
  ------------------
  443|  5.92k|                                    {
  444|  5.92k|                                        return OpCode::BFPF;
  445|  5.92k|                                    }
  446|  7.03k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 5.39k, False: 1.64k]
  ------------------
  447|  5.39k|                                    {
  448|  5.39k|                                        return OpCode::BFPT;
  449|  5.39k|                                    }
  450|  12.9k|                                }
  451|  5.40k|                                break;
  452|       |
  453|  6.45k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 6.45k, False: 45.6k]
  ------------------
  454|  22.1k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 15.7k, False: 36.3k]
  ------------------
  455|  22.1k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 19.1k, False: 3.03k]
  |  Branch (455:37): [True: 9.63k, False: 12.5k]
  |  Branch (455:53): [True: 9.63k, False: 9.50k]
  ------------------
  456|  9.63k|                                {
  457|  9.63k|                                    return OpCode::BNEZ;
  458|  9.63k|                                }
  459|  52.0k|                        }
  460|  28.3k|                        break;
  461|       |
  462|  28.3k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 7.79k, False: 766k]
  ------------------
  463|  63.1k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 55.3k, False: 719k]
  ------------------
  464|  63.1k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 51.7k, False: 11.4k]
  |  Branch (464:29): [True: 37.6k, False: 25.5k]
  |  Branch (464:45): [True: 37.6k, False: 14.0k]
  ------------------
  465|  37.6k|                        {
  466|  37.6k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 5.73k, False: 31.9k]
  ------------------
  467|  37.6k|                            {
  468|  2.43k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 2.43k, False: 35.2k]
  ------------------
  469|  6.25k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 3.82k, False: 33.8k]
  ------------------
  470|  6.25k|                                    return OpCode::DIVD;
  471|       |
  472|  3.87k|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 3.87k, False: 33.7k]
  ------------------
  473|  5.64k|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 1.76k, False: 35.8k]
  ------------------
  474|  5.64k|                                    return OpCode::DIVF;
  475|       |
  476|  5.20k|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 5.20k, False: 32.4k]
  ------------------
  477|  12.9k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 7.78k, False: 29.8k]
  ------------------
  478|  12.9k|                                    return OpCode::DIVI;
  479|       |
  480|  5.17k|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 5.17k, False: 32.4k]
  ------------------
  481|  7.03k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 1.85k, False: 35.8k]
  ------------------
  482|  7.03k|                                    return OpCode::DIVU;
  483|  37.6k|                            }
  484|  37.6k|                        }
  485|  31.2k|                        break;
  486|       |
  487|  31.2k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 2.23k, False: 772k]
  ------------------
  488|  21.0k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 18.8k, False: 755k]
  ------------------
  489|  21.0k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 18.5k, False: 2.53k]
  |  Branch (489:29): [True: 13.0k, False: 7.96k]
  |  Branch (489:45): [True: 17.0k, False: 1.43k]
  |  Branch (489:61): [True: 13.0k, False: 4.00k]
  ------------------
  490|  13.0k|                        {
  491|  13.0k|                            return OpCode::HALT;
  492|  13.0k|                        }
  493|  7.96k|                        break;
  494|       |
  495|  7.96k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 3.90k, False: 770k]
  ------------------
  496|  26.7k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 22.8k, False: 751k]
  ------------------
  497|  26.7k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 22.6k, False: 4.09k]
  |  Branch (497:29): [True: 7.20k, False: 19.5k]
  |  Branch (497:45): [True: 17.1k, False: 5.47k]
  |  Branch (497:61): [True: 7.20k, False: 9.98k]
  ------------------
  498|  7.20k|                        {
  499|  7.20k|                            return OpCode::JALR;
  500|  7.20k|                        }
  501|  19.5k|                        break;
  502|       |
  503|  19.5k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 6.89k, False: 767k]
  ------------------
  504|  43.6k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 36.7k, False: 737k]
  ------------------
  505|  43.6k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 24.6k, False: 19.0k]
  |  Branch (505:29): [True: 21.8k, False: 21.8k]
  |  Branch (505:45): [True: 21.8k, False: 2.79k]
  ------------------
  506|  21.8k|                        {
  507|  21.8k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 3.89k, False: 17.9k]
  ------------------
  508|  3.89k|                            {
  509|  3.89k|                                return OpCode::MOVD;
  510|  3.89k|                            }
  511|  17.9k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 11.3k, False: 6.57k]
  ------------------
  512|  11.3k|                            {
  513|  11.3k|                                return OpCode::MOVF;
  514|  11.3k|                            }
  515|  21.8k|                        }
  516|  21.8k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 15.9k, False: 5.89k]
  |  Branch (516:34): [True: 12.0k, False: 9.76k]
  |  Branch (516:50): [True: 13.6k, False: 2.26k]
  |  Branch (516:66): [True: 12.0k, False: 1.60k]
  ------------------
  517|  12.0k|                        {
  518|  12.0k|                            return OpCode::MULT;
  519|  12.0k|                        }
  520|  16.3k|                        break;
  521|       |
  522|   134k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 134k, False: 640k]
  ------------------
  523|   279k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 145k, False: 629k]
  ------------------
  524|   279k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 12.0k, False: 267k]
  ------------------
  525|   279k|                        {
  526|  18.7k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 18.7k, False: 260k]
  ------------------
  527|  23.7k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 5.00k, False: 274k]
  ------------------
  528|  23.7k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 18.8k, False: 4.87k]
  ------------------
  529|  18.8k|                                {
  530|  18.8k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 7.83k, False: 10.9k]
  ------------------
  531|  7.83k|                                    {
  532|  7.83k|                                        return OpCode::SEQI;
  533|  7.83k|                                    }
  534|  10.9k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 5.06k, False: 5.93k]
  ------------------
  535|  5.06k|                                    {
  536|  5.06k|                                        return OpCode::SEQU;
  537|  5.06k|                                    }
  538|  18.8k|                                }
  539|  10.8k|                                break;
  540|       |
  541|  17.7k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 17.7k, False: 261k]
  ------------------
  542|  65.7k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 47.9k, False: 231k]
  ------------------
  543|  65.7k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 34.0k, False: 31.7k]
  ------------------
  544|  34.0k|                                {
  545|  34.0k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 11.9k, False: 22.0k]
  ------------------
  546|  11.9k|                                    {
  547|  11.9k|                                        return OpCode::SGEI;
  548|  11.9k|                                    }
  549|  22.0k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 18.2k, False: 3.85k]
  ------------------
  550|  18.2k|                                    {
  551|  18.2k|                                        return OpCode::SGEU;
  552|  18.2k|                                    }
  553|  34.0k|                                }
  554|  31.7k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 25.9k, False: 5.74k]
  ------------------
  555|  25.9k|                                {
  556|  25.9k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 11.5k, False: 14.4k]
  ------------------
  557|  11.5k|                                    {
  558|  11.5k|                                        return OpCode::SGTI;
  559|  11.5k|                                    }
  560|  14.4k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 12.0k, False: 2.31k]
  ------------------
  561|  12.0k|                                    {
  562|  12.0k|                                        return OpCode::SGTU;
  563|  12.0k|                                    }
  564|  25.9k|                                }
  565|  11.9k|                                break;
  566|       |
  567|  18.1k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 18.1k, False: 261k]
  ------------------
  568|  72.8k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 54.6k, False: 224k]
  ------------------
  569|  72.8k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 4.87k, False: 68.0k]
  ------------------
  570|  72.8k|                                {
  571|  5.94k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 5.94k, False: 66.9k]
  ------------------
  572|  9.70k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 3.75k, False: 69.1k]
  ------------------
  573|  9.70k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 6.82k, False: 2.88k]
  ------------------
  574|  6.82k|                                        {
  575|  6.82k|                                            return OpCode::SLAI;
  576|  6.82k|                                        }
  577|  2.88k|                                        break;
  578|       |
  579|  13.0k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 13.0k, False: 59.8k]
  ------------------
  580|  16.2k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 3.17k, False: 69.7k]
  ------------------
  581|  16.2k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 7.18k, False: 9.04k]
  ------------------
  582|  7.18k|                                        {
  583|  7.18k|                                            return OpCode::SLEI;
  584|  7.18k|                                        }
  585|  9.04k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 6.86k, False: 2.17k]
  ------------------
  586|  6.86k|                                        {
  587|  6.86k|                                            return OpCode::SLEU;
  588|  6.86k|                                        }
  589|  2.17k|                                        break;
  590|       |
  591|  3.09k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 3.09k, False: 69.7k]
  ------------------
  592|  10.0k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 6.99k, False: 65.8k]
  ------------------
  593|  10.0k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 7.01k, False: 3.07k]
  ------------------
  594|  7.01k|                                        {
  595|  7.01k|                                            return OpCode::SLLI;
  596|  7.01k|                                        }
  597|  3.07k|                                        break;
  598|       |
  599|  21.1k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 21.1k, False: 51.7k]
  ------------------
  600|  31.9k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 10.8k, False: 62.0k]
  ------------------
  601|  31.9k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 7.18k, False: 24.8k]
  ------------------
  602|  7.18k|                                        {
  603|  7.18k|                                            return OpCode::SLTI;
  604|  7.18k|                                        }
  605|  24.8k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 15.3k, False: 9.43k]
  ------------------
  606|  15.3k|                                        {
  607|  15.3k|                                            return OpCode::SLTU;
  608|  15.3k|                                        }
  609|  9.43k|                                        break;
  610|  72.8k|                                }
  611|       |
  612|  24.5k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 2.06k, False: 277k]
  ------------------
  613|  48.1k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 23.6k, False: 255k]
  ------------------
  614|  48.1k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 26.2k, False: 21.9k]
  ------------------
  615|  26.2k|                                {
  616|  26.2k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 7.25k, False: 19.0k]
  ------------------
  617|  7.25k|                                    {
  618|  7.25k|                                        return OpCode::SNEI;
  619|  7.25k|                                    }
  620|  19.0k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 10.2k, False: 8.79k]
  ------------------
  621|  10.2k|                                    {
  622|  10.2k|                                        return OpCode::SNEU;
  623|  10.2k|                                    }
  624|  26.2k|                                }
  625|  30.6k|                                break;
  626|       |
  627|  30.6k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 16.2k, False: 263k]
  ------------------
  628|  28.7k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 12.4k, False: 266k]
  ------------------
  629|  28.7k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 15.2k, False: 13.4k]
  |  Branch (629:37): [True: 12.6k, False: 16.0k]
  |  Branch (629:53): [True: 12.6k, False: 2.57k]
  ------------------
  630|  12.6k|                                {
  631|  12.6k|                                    return OpCode::SRAI;
  632|  12.6k|                                }
  633|  16.0k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 13.0k, False: 2.99k]
  |  Branch (633:42): [True: 4.39k, False: 11.6k]
  |  Branch (633:58): [True: 4.39k, False: 8.69k]
  ------------------
  634|  4.39k|                                {
  635|  4.39k|                                    return OpCode::SRLI;
  636|  4.39k|                                }
  637|  11.6k|                                break;
  638|       |
  639|  13.8k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 13.8k, False: 265k]
  ------------------
  640|  50.3k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 36.5k, False: 242k]
  ------------------
  641|  50.3k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 45.4k, False: 4.92k]
  ------------------
  642|  45.4k|                                {
  643|  45.4k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 5.30k, False: 40.1k]
  ------------------
  644|  45.4k|                                    {
  645|  10.7k|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 10.7k, False: 34.7k]
  ------------------
  646|  14.0k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 3.28k, False: 42.1k]
  ------------------
  647|  14.0k|                                            return OpCode::SUBD;
  648|       |
  649|  3.18k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 3.18k, False: 42.2k]
  ------------------
  650|  7.73k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 4.55k, False: 40.9k]
  ------------------
  651|  7.73k|                                            return OpCode::SUBF;
  652|       |
  653|  3.04k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 3.04k, False: 42.4k]
  ------------------
  654|  10.7k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 7.67k, False: 37.7k]
  ------------------
  655|  10.7k|                                            return OpCode::SUBI;
  656|       |
  657|  3.43k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 3.43k, False: 42.0k]
  ------------------
  658|  7.67k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 4.23k, False: 41.2k]
  ------------------
  659|  7.67k|                                            return OpCode::SUBU;
  660|  45.4k|                                    }
  661|  45.4k|                                }
  662|  10.2k|                                break;
  663|   279k|                        }
  664|  87.3k|                        break;
  665|       |
  666|  87.3k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 2.67k, False: 772k]
  ------------------
  667|  9.57k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 6.89k, False: 767k]
  ------------------
  668|  9.57k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 6.00k, False: 3.56k]
  |  Branch (668:29): [True: 2.11k, False: 7.45k]
  |  Branch (668:45): [True: 3.86k, False: 2.14k]
  |  Branch (668:61): [True: 2.11k, False: 1.74k]
  ------------------
  669|  2.11k|                        {
  670|  2.11k|                            return OpCode::TRAP;
  671|  2.11k|                        }
  672|  7.45k|                        break;
  673|  14.1k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 14.1k, False: 760k]
  ------------------
  674|  25.9k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 11.7k, False: 763k]
  ------------------
  675|  25.9k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 18.9k, False: 6.99k]
  |  Branch (675:29): [True: 8.94k, False: 16.9k]
  |  Branch (675:45): [True: 15.9k, False: 2.99k]
  |  Branch (675:61): [True: 8.94k, False: 6.96k]
  ------------------
  676|  8.94k|                        {
  677|  8.94k|                            return OpCode::XORI;
  678|  8.94k|                        }
  679|  16.9k|                        break;
  680|   774k|                }
  681|   413k|                break;
  682|   774k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|   452k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 452k, False: 2.82M]
  ------------------
  686|   452k|                char c1 = token[0];
  687|   452k|                char c2 = token[1];
  688|   452k|                char c3 = token[2];
  689|   452k|                char c4 = token[3];
  690|   452k|                char c5 = token[4];
  691|       |
  692|   452k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 104k, False: 347k]
  ------------------
  693|   452k|                {
  694|  9.65k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 9.65k, False: 443k]
  ------------------
  695|  45.1k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 35.5k, False: 417k]
  ------------------
  696|  45.1k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 41.2k, False: 3.97k]
  |  Branch (696:29): [True: 7.94k, False: 37.2k]
  |  Branch (696:45): [True: 34.9k, False: 6.27k]
  |  Branch (696:61): [True: 27.6k, False: 7.33k]
  |  Branch (696:77): [True: 7.94k, False: 19.6k]
  ------------------
  697|  7.94k|                        {
  698|  7.94k|                            return OpCode::ADDUI;
  699|  7.94k|                        }
  700|  37.2k|                        break;
  701|       |
  702|  37.2k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 3.21k, False: 449k]
  ------------------
  703|  47.4k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 44.2k, False: 408k]
  ------------------
  704|  47.4k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 38.7k, False: 8.73k]
  |  Branch (704:29): [True: 12.4k, False: 35.0k]
  |  Branch (704:45): [True: 26.3k, False: 12.3k]
  |  Branch (704:61): [True: 19.5k, False: 6.83k]
  |  Branch (704:77): [True: 12.4k, False: 7.10k]
  ------------------
  705|  12.4k|                        {
  706|  12.4k|                            return OpCode::DIVUI;
  707|  12.4k|                        }
  708|  35.0k|                        break;
  709|       |
  710|  35.0k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 18.1k, False: 434k]
  ------------------
  711|  72.9k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 54.8k, False: 397k]
  ------------------
  712|  72.9k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 52.3k, False: 20.6k]
  |  Branch (712:29): [True: 42.6k, False: 30.3k]
  |  Branch (712:45): [True: 43.9k, False: 8.33k]
  |  Branch (712:61): [True: 42.6k, False: 1.38k]
  ------------------
  713|  42.6k|                        {
  714|  42.6k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 8.41k, False: 34.1k]
  ------------------
  715|  42.6k|                            {
  716|  3.44k|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 3.44k, False: 39.1k]
  ------------------
  717|  5.07k|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 1.63k, False: 40.9k]
  ------------------
  718|  5.07k|                                    return OpCode::MULTD;
  719|       |
  720|  8.53k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 8.53k, False: 34.0k]
  ------------------
  721|  13.0k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 4.48k, False: 38.1k]
  ------------------
  722|  13.0k|                                    return OpCode::MULTF;
  723|       |
  724|  4.32k|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 4.32k, False: 38.2k]
  ------------------
  725|  8.79k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 4.47k, False: 38.1k]
  ------------------
  726|  8.79k|                                    return OpCode::MULTI;
  727|       |
  728|  1.72k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 1.72k, False: 40.8k]
  ------------------
  729|  7.30k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 5.57k, False: 37.0k]
  ------------------
  730|  7.30k|                                    return OpCode::MULTU;
  731|  42.6k|                            }
  732|  42.6k|                        }
  733|  38.7k|                        break;
  734|       |
  735|  75.5k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 75.5k, False: 377k]
  ------------------
  736|   182k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 106k, False: 346k]
  ------------------
  737|   182k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 8.00k, False: 174k]
  ------------------
  738|   182k|                        {
  739|  27.5k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 27.5k, False: 154k]
  ------------------
  740|  39.2k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 11.6k, False: 170k]
  ------------------
  741|  39.2k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 27.5k, False: 11.6k]
  |  Branch (741:37): [True: 6.19k, False: 33.0k]
  |  Branch (741:53): [True: 15.3k, False: 12.1k]
  |  Branch (741:69): [True: 6.19k, False: 9.17k]
  ------------------
  742|  6.19k|                                {
  743|  6.19k|                                    return OpCode::SEQUI;
  744|  6.19k|                                }
  745|  33.0k|                                break;
  746|       |
  747|  33.0k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 18.2k, False: 163k]
  ------------------
  748|  40.4k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 22.1k, False: 159k]
  ------------------
  749|  40.4k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 19.0k, False: 21.3k]
  |  Branch (749:37): [True: 9.72k, False: 30.6k]
  |  Branch (749:53): [True: 13.8k, False: 5.27k]
  |  Branch (749:69): [True: 9.72k, False: 4.09k]
  ------------------
  750|  9.72k|                                {
  751|  9.72k|                                    return OpCode::SGEUI;
  752|  9.72k|                                }
  753|  30.6k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 20.8k, False: 9.80k]
  |  Branch (753:42): [True: 8.87k, False: 21.8k]
  |  Branch (753:58): [True: 18.4k, False: 2.46k]
  |  Branch (753:74): [True: 8.87k, False: 9.56k]
  ------------------
  754|  8.87k|                                {
  755|  8.87k|                                    return OpCode::SGTUI;
  756|  8.87k|                                }
  757|  21.8k|                                break;
  758|       |
  759|  21.8k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 11.1k, False: 171k]
  ------------------
  760|  53.2k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 42.0k, False: 140k]
  ------------------
  761|  53.2k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 21.0k, False: 32.1k]
  |  Branch (761:37): [True: 9.73k, False: 43.4k]
  |  Branch (761:53): [True: 16.6k, False: 4.40k]
  |  Branch (761:69): [True: 9.73k, False: 6.88k]
  ------------------
  762|  9.73k|                                {
  763|  9.73k|                                    return OpCode::SLEUI;
  764|  9.73k|                                }
  765|  43.4k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 27.3k, False: 16.1k]
  |  Branch (765:42): [True: 7.48k, False: 35.9k]
  |  Branch (765:58): [True: 22.8k, False: 4.44k]
  |  Branch (765:74): [True: 7.48k, False: 15.3k]
  ------------------
  766|  7.48k|                                {
  767|  7.48k|                                    return OpCode::SLTUI;
  768|  7.48k|                                }
  769|  35.9k|                                break;
  770|       |
  771|  35.9k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 1.53k, False: 180k]
  ------------------
  772|  18.1k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 16.6k, False: 165k]
  ------------------
  773|  18.1k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 16.5k, False: 1.62k]
  |  Branch (773:37): [True: 9.24k, False: 8.89k]
  |  Branch (773:53): [True: 14.8k, False: 1.62k]
  |  Branch (773:69): [True: 9.24k, False: 5.65k]
  ------------------
  774|  9.24k|                                {
  775|  9.24k|                                    return OpCode::SNEUI;
  776|  9.24k|                                }
  777|  8.89k|                                break;
  778|       |
  779|  8.89k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 7.20k, False: 174k]
  ------------------
  780|  23.1k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 15.9k, False: 166k]
  ------------------
  781|  23.1k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 17.2k, False: 5.96k]
  |  Branch (781:37): [True: 7.81k, False: 15.3k]
  |  Branch (781:53): [True: 12.2k, False: 4.98k]
  |  Branch (781:69): [True: 7.81k, False: 4.39k]
  ------------------
  782|  7.81k|                                {
  783|  7.81k|                                    return OpCode::SUBUI;
  784|  7.81k|                                }
  785|  15.3k|                                break;
  786|   182k|                        }
  787|       |
  788|   123k|                        break;
  789|   452k|                }
  790|       |
  791|   339k|                break;
  792|   452k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|   339k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 241k, False: 3.03M]
  ------------------
  796|   241k|                char c1 = token[0];
  797|   241k|                char c2 = token[1];
  798|   241k|                char c3 = token[2];
  799|   241k|                char c4 = token[3];
  800|   241k|                char c5 = token[4];
  801|   241k|                char c6 = token[5];
  802|       |
  803|   241k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 104k, False: 136k]
  |  Branch (803:21): [True: 91.0k, False: 150k]
  |  Branch (803:37): [True: 100k, False: 3.97k]
  |  Branch (803:53): [True: 91.0k, False: 9.95k]
  ------------------
  804|  91.0k|                {
  805|  91.0k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 3.10k, False: 87.9k]
  ------------------
  806|  91.0k|                    {
  807|  14.4k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 14.4k, False: 76.5k]
  ------------------
  808|  31.9k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 17.4k, False: 73.5k]
  ------------------
  809|  31.9k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 26.9k, False: 5.01k]
  ------------------
  810|  26.9k|                            {
  811|  26.9k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 6.85k, False: 20.0k]
  ------------------
  812|  6.85k|                                {
  813|  6.85k|                                    return OpCode::CVTD2F;
  814|  6.85k|                                }
  815|  20.0k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 12.3k, False: 7.66k]
  ------------------
  816|  12.3k|                                {
  817|  12.3k|                                    return OpCode::CVTD2I;
  818|  12.3k|                                }
  819|  26.9k|                            }
  820|  12.6k|                            break;
  821|       |
  822|  12.6k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 5.70k, False: 85.3k]
  ------------------
  823|  30.5k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 24.8k, False: 66.2k]
  ------------------
  824|  30.5k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 25.4k, False: 5.08k]
  ------------------
  825|  25.4k|                            {
  826|  25.4k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 12.9k, False: 12.5k]
  ------------------
  827|  12.9k|                                {
  828|  12.9k|                                    return OpCode::CVTF2D;
  829|  12.9k|                                }
  830|  12.5k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 9.12k, False: 3.40k]
  ------------------
  831|  9.12k|                                {
  832|  9.12k|                                    return OpCode::CVTF2I;
  833|  9.12k|                                }
  834|  25.4k|                            }
  835|  8.48k|                            break;
  836|       |
  837|  21.0k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 21.0k, False: 70.0k]
  ------------------
  838|  25.5k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 4.49k, False: 86.5k]
  ------------------
  839|  25.5k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 19.3k, False: 6.16k]
  ------------------
  840|  19.3k|                            {
  841|  19.3k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 8.68k, False: 10.6k]
  ------------------
  842|  8.68k|                                {
  843|  8.68k|                                    return OpCode::CVTI2D;
  844|  8.68k|                                }
  845|  10.6k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 5.78k, False: 4.86k]
  ------------------
  846|  5.78k|                                {
  847|  5.78k|                                    return OpCode::CVTI2F;
  848|  5.78k|                                }
  849|  19.3k|                            }
  850|  91.0k|                    }
  851|  91.0k|                }
  852|   150k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 62.5k, False: 88.1k]
  |  Branch (852:26): [True: 17.4k, False: 133k]
  |  Branch (852:42): [True: 38.7k, False: 23.8k]
  |  Branch (852:58): [True: 29.7k, False: 8.95k]
  |  Branch (852:74): [True: 28.3k, False: 1.42k]
  ------------------
  853|   150k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 23.1k, False: 5.26k]
  |  Branch (853:42): [True: 17.4k, False: 5.67k]
  ------------------
  854|  17.4k|                {
  855|  17.4k|                    return OpCode::MULTUI;
  856|  17.4k|                }
  857|   168k|                break;
  858|   241k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|   168k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 119k, False: 3.15M]
  ------------------
  862|   119k|                char c1 = token[0];
  863|   119k|                char c2 = token[1];
  864|   119k|                char c3 = token[2];
  865|   119k|                char c4 = token[3];
  866|   119k|                char c5 = token[4];
  867|   119k|                char c6 = token[5];
  868|   119k|                char c7 = token[6];
  869|       |
  870|   119k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 60.6k, False: 58.9k]
  |  Branch (870:21): [True: 46.9k, False: 72.6k]
  |  Branch (870:37): [True: 50.3k, False: 10.2k]
  |  Branch (870:53): [True: 46.9k, False: 3.43k]
  ------------------
  871|  46.9k|                {
  872|  46.9k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 21.3k, False: 25.6k]
  |  Branch (872:25): [True: 5.94k, False: 41.0k]
  |  Branch (872:41): [True: 16.6k, False: 4.64k]
  |  Branch (872:54): [True: 14.8k, False: 1.87k]
  |  Branch (872:70): [True: 5.94k, False: 8.86k]
  ------------------
  873|  5.94k|                    {
  874|  5.94k|                        return OpCode::MOVI2FP;
  875|  5.94k|                    }
  876|  41.0k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 25.5k, False: 15.4k]
  |  Branch (876:30): [True: 15.2k, False: 25.7k]
  |  Branch (876:46): [True: 21.6k, False: 3.92k]
  |  Branch (876:62): [True: 19.1k, False: 2.46k]
  |  Branch (876:75): [True: 15.2k, False: 3.92k]
  ------------------
  877|  15.2k|                    {
  878|  15.2k|                        return OpCode::MOVFP2I;
  879|  15.2k|                    }
  880|  46.9k|                }
  881|  98.4k|                break;
  882|   119k|            }
  883|       |
  884|  98.4k|            default: {
  ------------------
  |  Branch (884:13): [True: 92.0k, False: 3.18M]
  ------------------
  885|  92.0k|                break;
  886|   119k|            }
  887|  3.27M|        }
  888|       |
  889|       |        // None found
  890|  2.21M|        return OpCode::NONE;
  891|  3.27M|    }
_ZN3dlx3iceEcc:
   17|  4.70M|    {
   18|  4.70M|        constexpr const char diff = 'a' - 'A';
   19|  4.70M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 1.45M, False: 3.25M]
  |  Branch (19:28): [True: 1.34M, False: 1.90M]
  ------------------
   20|  4.70M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  3.62M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  68.5k|    {
  193|  68.5k|        ParseError err;
  194|       |
  195|  68.5k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  68.5k|        err.m_LineNumber                           = line_number;
  197|  68.5k|        err.m_Column                               = column;
  198|  68.5k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  68.5k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  68.5k|        return err;
  202|  68.5k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  68.5k|    {
  207|  68.5k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  68.5k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  68.5k|                                                         actual_type);
  210|  68.5k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|  4.91k|    {
  216|  4.91k|        ParseError err;
  217|       |
  218|  4.91k|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|  4.91k|        err.m_LineNumber        = line_number;
  220|  4.91k|        err.m_Column            = column;
  221|  4.91k|        err.invalid_number.text = text;
  222|       |
  223|  4.91k|        return err;
  224|  4.91k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|  4.91k|    {
  228|  4.91k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|  4.91k|                                                token.GetColumn().unsafe(), token.GetText());
  230|  4.91k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      3|    {
  235|      3|        ParseError err;
  236|       |
  237|      3|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      3|        err.m_LineNumber = line_number;
  239|      3|        err.m_Column     = column;
  240|       |
  241|      3|        return err;
  242|      3|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      3|    {
  247|      3|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      3|                                                                     token.GetColumn().unsafe());
  249|      3|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|  1.65M|    {
  255|  1.65M|        ParseError err;
  256|       |
  257|  1.65M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|  1.65M|        err.m_LineNumber                   = line_number;
  259|  1.65M|        err.m_Column                       = column;
  260|  1.65M|        err.unexpected_token.expected_type = expected_type;
  261|  1.65M|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|  1.65M|        return err;
  264|  1.65M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|  1.65M|    {
  269|  1.65M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|  1.65M|                                                  token.GetColumn().unsafe(), expected_type,
  271|  1.65M|                                                  token.GetType());
  272|  1.65M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|   362k|    {
  277|   362k|        ParseError err;
  278|       |
  279|   362k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|   362k|        err.m_LineNumber                   = line_number;
  281|   362k|        err.m_Column                       = column;
  282|   362k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|   362k|        return err;
  285|   362k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  5.62k|    {
  289|  5.62k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  5.62k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  5.62k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   698k|    {
  296|   698k|        ParseError err;
  297|       |
  298|   698k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   698k|        err.m_LineNumber                       = line_number;
  300|   698k|        err.m_Column                           = column;
  301|   698k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   698k|        return err;
  304|   698k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   698k|    {
  309|   698k|        return ConstructInvalidLabelIdentifierParseError(
  310|   698k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   698k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|   153k|    {
  317|   153k|        ParseError err;
  318|       |
  319|   153k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|   153k|        err.m_LineNumber                     = line_number;
  321|   153k|        err.m_Column                         = column;
  322|   153k|        err.label_already_defined.label_name = label_name;
  323|   153k|        err.label_already_defined.at_line    = at_line;
  324|   153k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|   153k|        return err;
  327|   153k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|   153k|    {
  332|   153k|        return ConstructLabelAlreadyDefinedParseError(
  333|   153k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|   153k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|   153k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   427k|    {
  340|   427k|        ParseError err;
  341|       |
  342|   427k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   427k|        err.m_LineNumber = line_number;
  344|   427k|        err.m_Column     = column;
  345|       |
  346|   427k|        return err;
  347|   427k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   427k|    {
  352|   427k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   427k|                                                        token.GetColumn().unsafe());
  354|   427k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  51.7k|    {
  360|  51.7k|        ParseError err;
  361|       |
  362|  51.7k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  51.7k|        err.m_LineNumber               = line_number;
  364|  51.7k|        err.m_Column                   = column;
  365|  51.7k|        err.too_few_arguments.required = required;
  366|  51.7k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  51.7k|        return err;
  369|  51.7k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  51.7k|    {
  374|  51.7k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  51.7k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  51.7k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|   113k|    {
  381|   113k|        ParseError err;
  382|       |
  383|   113k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|   113k|        err.m_LineNumber           = line_number;
  385|   113k|        err.m_Column               = column;
  386|   113k|        err.empty_label.label_name = label_name;
  387|       |
  388|   113k|        return err;
  389|   113k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|   113k|    {
  393|   113k|        return ConstructEmptyLabelParseError(
  394|   113k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|   113k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 96.1k, False: 17.6k]
  ------------------
  396|  96.1k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|   113k|                        token.GetText());
  398|   113k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  93.6k|    {
  403|  93.6k|        ParseError err;
  404|       |
  405|  93.6k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  93.6k|        err.m_LineNumber = line_number;
  407|  93.6k|        err.m_Column     = column;
  408|       |
  409|  93.6k|        return err;
  410|  93.6k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  93.6k|    {
  414|  93.6k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  93.6k|                                               token.GetColumn().unsafe());
  416|  93.6k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  3.62M|    {
   19|  3.62M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  3.62M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  18.8k|    {
  182|  18.8k|        ParsedProgram program;
  183|       |
  184|  18.8k|        program.m_Tokens = tokens;
  185|       |
  186|  18.8k|        phi::boolean line_has_instruction{false};
  187|  18.8k|        phi::usize   label_count{0u};
  188|       |
  189|  4.09M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 4.07M, False: 18.8k]
  ------------------
  190|  4.07M|        {
  191|  4.07M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  4.07M|            switch (current_token.GetType())
  196|  4.07M|            {
  197|       |                // Ignore comments
  198|  26.3k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 26.3k, False: 4.04M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  26.3k|                    break;
  201|       |
  202|   463k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 463k, False: 3.61M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   463k|                    line_has_instruction = false;
  205|   463k|                    break;
  206|       |
  207|  1.56M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 1.56M, False: 2.51M]
  ------------------
  208|  1.56M|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 276k, False: 1.28M]
  ------------------
  209|   276k|                    {
  210|   276k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|   276k|                                current_token, Token::Type::NewLine));
  212|   276k|                        break;
  213|   276k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|  1.28M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 454k, False: 828k]
  ------------------
  218|   454k|                    {
  219|   454k|                        program.AddParseError(
  220|   454k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   454k|                        break;
  222|   454k|                    }
  223|       |
  224|   828k|                    std::string_view label_name = current_token.GetText();
  225|   828k|                    label_name.remove_suffix(1);
  226|       |
  227|   828k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 356k, False: 471k]
  ------------------
  228|   356k|                    {
  229|   356k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|   356k|                                current_token.GetLineNumber().unsafe(),
  231|   356k|                                current_token.GetColumn().unsafe(), label_name));
  232|   356k|                        break;
  233|   356k|                    }
  234|       |
  235|   471k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 194k, False: 277k]
  ------------------
  236|   194k|                    {
  237|   194k|                        program.AddParseError(
  238|   194k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|   194k|                        break;
  240|   194k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|   277k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 153k, False: 123k]
  ------------------
  244|   153k|                    {
  245|       |                        // Find first defintions of label
  246|   153k|                        const Token* first_label_definition =
  247|   153k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   153k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|   153k|                                    {
  250|   153k|                                        std::string_view token_label_name = t.GetText();
  251|   153k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   153k|                                        if (token_label_name == label_name)
  254|   153k|                                        {
  255|   153k|                                            return true;
  256|   153k|                                        }
  257|   153k|                                    }
  258|       |
  259|   153k|                                    return false;
  260|   153k|                                });
  261|       |
  262|   153k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|   153k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|   153k|                                current_token, *first_label_definition));
  266|   153k|                        break;
  267|   153k|                    }
  268|       |
  269|   123k|                    program.m_JumpData[label_name] =
  270|   123k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|   123k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|   123k|                    break;
  277|   277k|                }
  278|       |
  279|   713k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 713k, False: 3.36M]
  ------------------
  280|   713k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 427k, False: 285k]
  ------------------
  281|   427k|                    {
  282|   427k|                        program.AddParseError(
  283|   427k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   427k|                        break;
  285|   427k|                    }
  286|       |
  287|   285k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|   285k|                    PHI_ASSERT(current_token.HasHint());
  291|   285k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|   285k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|   285k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|   285k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|   285k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|   285k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|   285k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|   285k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|   285k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   622k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 581k, False: 41.3k]
  ------------------
  313|   581k|                    {
  314|       |                        // Get next token
  315|   581k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 1.63k, False: 579k]
  ------------------
  316|  1.63k|                        {
  317|  1.63k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|  1.63k|                                    current_token, number_of_argument_required.unsafe(),
  319|  1.63k|                                    argument_num.unsafe()));
  320|  1.63k|                            break;
  321|  1.63k|                        }
  322|       |
  323|   579k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   579k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 263k, False: 316k]
  ------------------
  327|   263k|                        {
  328|   263k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 93.6k, False: 169k]
  ------------------
  329|  93.6k|                            {
  330|  93.6k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  93.6k|                            }
  332|       |
  333|   263k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|   263k|                            continue;
  336|   263k|                        }
  337|       |
  338|   316k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 50.1k, False: 266k]
  ------------------
  339|  50.1k|                        {
  340|  50.1k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  50.1k|                                    token, number_of_argument_required.unsafe(),
  342|  50.1k|                                    argument_num.unsafe()));
  343|  50.1k|                            break;
  344|  50.1k|                        }
  345|       |
  346|   266k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|   266k|                                parse_instruction_argument(
  348|   266k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|   266k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 192k, False: 73.5k]
  ------------------
  350|   192k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|   192k|                            break;
  353|   192k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  73.5k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  73.5k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  73.5k|                        argument_num++;
  360|  73.5k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  73.5k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|   285k|                    program.m_Instructions.emplace_back(instruction);
  368|   285k|                    line_has_instruction = true;
  369|   285k|                    break;
  370|   713k|                }
  371|       |
  372|  1.31M|                default:
  ------------------
  |  Branch (372:17): [True: 1.31M, False: 2.76M]
  ------------------
  373|  1.31M|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|  1.31M|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 641k, False: 668k]
  ------------------
  375|   641k|                    {
  376|   641k|                        expected_token_type = Token::Type::NewLine;
  377|   641k|                    }
  378|       |
  379|  1.31M|                    program.AddParseError(
  380|  1.31M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|  1.31M|                    break;
  382|  4.07M|            }
  383|  4.07M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  18.8k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 5.84k, False: 12.9k]
  ------------------
  387|  5.84k|        {
  388|   141k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 135k, False: 5.84k]
  ------------------
  389|   135k|            {
  390|   135k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|   135k|                const Token& token = *it;
  393|   135k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 113k, False: 21.8k]
  ------------------
  394|   113k|                {
  395|   113k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|   113k|                    --label_count;
  397|   113k|                }
  398|   135k|            }
  399|  5.84k|        }
  400|       |
  401|  18.8k|        return program;
  402|  18.8k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  18.8k|    {
  406|  18.8k|        TokenStream tokens = Tokenize(source);
  407|  18.8k|        return Parse(tokens);
  408|  18.8k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|   266k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|   266k|        switch (token.GetType())
   38|   266k|        {
   39|  52.0k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 52.0k, False: 214k]
  ------------------
   40|  52.0k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 26.1k, False: 25.9k]
  ------------------
   41|  52.0k|                                          ArgumentType::AddressDisplacement))
   42|  26.1k|                {
   43|  26.1k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  26.1k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  26.1k|                    return {};
   47|  26.1k|                }
   48|       |
   49|       |                // Get address displacement
   50|  25.9k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  25.9k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  25.9k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 3, False: 25.9k]
  ------------------
   55|      3|                {
   56|      3|                    program.AddParseError(
   57|      3|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      3|                    return {};
   59|      3|                }
   60|       |
   61|  25.9k|                auto         it           = tokens.current_position();
   62|  25.9k|                const Token& first_token  = tokens.consume();
   63|  25.9k|                const Token& second_token = tokens.consume();
   64|  25.9k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  25.9k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 8.77k, False: 17.1k]
  ------------------
   67|  8.77k|                {
   68|  8.77k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  8.77k|                            first_token, Token::Type::OpenBracket));
   70|  8.77k|                    return {};
   71|  8.77k|                }
   72|       |
   73|       |                // Second token is the register
   74|  17.1k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 5.73k, False: 11.4k]
  ------------------
   75|  5.73k|                {
   76|  5.73k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|  5.73k|                            second_token, Token::Type::RegisterInt));
   78|  5.73k|                    return {};
   79|  5.73k|                }
   80|       |
   81|  11.4k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 4.25k, False: 7.15k]
  ------------------
   82|  4.25k|                {
   83|  4.25k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|  4.25k|                            third_token, Token::Type::ClosingBracket));
   85|  4.25k|                    return {};
   86|  4.25k|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|  7.15k|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|  7.15k|                return ConstructInstructionArgumentAddressDisplacement(
   95|  7.15k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|  11.4k|            }
   97|  17.4k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 17.4k, False: 248k]
  ------------------
   98|  17.4k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 2.18k, False: 15.2k]
  ------------------
   99|  2.18k|                {
  100|  2.18k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  2.18k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  2.18k|                    return {};
  103|  2.18k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  15.2k|                return ConstructInstructionArgumentRegisterInt(
  109|  15.2k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  17.4k|            }
  111|  27.3k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 27.3k, False: 238k]
  ------------------
  112|  27.3k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 3.73k, False: 23.6k]
  ------------------
  113|  3.73k|                {
  114|  3.73k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  3.73k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  3.73k|                    return {};
  117|  3.73k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  23.6k|                return ConstructInstructionArgumentRegisterFloat(
  123|  23.6k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  27.3k|            }
  125|  5.62k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 5.62k, False: 260k]
  ------------------
  126|  5.62k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  5.62k|                return {};
  129|  27.3k|            }
  130|   101k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 101k, False: 164k]
  ------------------
  131|       |                // Parse as Label
  132|   101k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 27.9k, False: 73.2k]
  ------------------
  133|  27.9k|                {
  134|  27.9k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  27.9k|                            token, expected_argument_type, ArgumentType::Label));
  136|  27.9k|                    return {};
  137|  27.9k|                }
  138|       |
  139|  73.2k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 73.2k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  73.2k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 49.5k, False: 23.7k]
  ------------------
  146|  49.5k|                {
  147|  49.5k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  49.5k|                    return {};
  149|  49.5k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  23.7k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  73.2k|            }
  155|  17.3k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 17.3k, False: 248k]
  ------------------
  156|  17.3k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 8.58k, False: 8.72k]
  ------------------
  157|  8.58k|                {
  158|  8.58k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  8.58k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  8.58k|                    return {};
  161|  8.58k|                }
  162|       |
  163|  8.72k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 3.80k, False: 4.91k]
  ------------------
  164|  3.80k|                {
  165|  3.80k|                    return ConstructInstructionArgumentImmediateValue(
  166|  3.80k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  3.80k|                }
  168|       |
  169|  4.91k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|  4.91k|                return {};
  171|  8.72k|            }
  172|       |
  173|  45.1k|            default:
  ------------------
  |  Branch (173:13): [True: 45.1k, False: 220k]
  ------------------
  174|  45.1k|                program.AddParseError(
  175|  45.1k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  45.1k|                return {};
  177|   266k|        }
  178|   266k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  2.33M|                                tokens.find_first_token_if([&](const Token& t) {
  248|  2.33M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 1.66M, False: 668k]
  ------------------
  249|  1.66M|                                    {
  250|  1.66M|                                        std::string_view token_label_name = t.GetText();
  251|  1.66M|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  1.66M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 153k, False: 1.51M]
  ------------------
  254|   153k|                                        {
  255|   153k|                                            return true;
  256|   153k|                                        }
  257|  1.66M|                                    }
  258|       |
  259|  2.18M|                                    return false;
  260|  2.33M|                                });

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  3.39M|    {
   14|  3.39M|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 576k, False: 2.81M]
  ------------------
   15|   576k|        {
   16|   576k|            char first_char = token[0];
   17|   576k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 3.53k, False: 572k]
  |  Branch (17:38): [True: 57.5k, False: 515k]
  ------------------
   18|  61.0k|            {
   19|  61.0k|                char second_char = token[1];
   20|  61.0k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 58.7k, False: 2.36k]
  |  Branch (20:43): [True: 46.8k, False: 11.8k]
  ------------------
   21|  46.8k|                {
   22|  46.8k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  46.8k|                }
   24|  61.0k|            }
   25|   576k|        }
   26|  2.81M|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 678k, False: 2.14M]
  ------------------
   27|   678k|        {
   28|   678k|            char first_char = token[0];
   29|   678k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 2.20k, False: 675k]
  |  Branch (29:38): [True: 48.3k, False: 627k]
  ------------------
   30|  50.5k|            {
   31|  50.5k|                char second_char = token[1];
   32|  50.5k|                char third_char  = token[2];
   33|       |
   34|  50.5k|                switch (second_char)
   35|  50.5k|                {
   36|  19.6k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 19.6k, False: 30.8k]
  ------------------
   37|  19.6k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 14.1k, False: 5.51k]
  |  Branch (37:50): [True: 7.60k, False: 6.51k]
  ------------------
   38|  7.60k|                        {
   39|  7.60k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  7.60k|                        }
   41|  12.0k|                        break;
   42|  19.6k|                    }
   43|  14.9k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 14.9k, False: 35.6k]
  ------------------
   44|  14.9k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 7.14k, False: 7.77k]
  |  Branch (44:50): [True: 3.56k, False: 3.58k]
  ------------------
   45|  3.56k|                        {
   46|  3.56k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  3.56k|                        }
   48|  11.3k|                        break;
   49|  14.9k|                    }
   50|  11.3k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 8.41k, False: 42.1k]
  ------------------
   51|  8.41k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 1.21k, False: 7.19k]
  |  Branch (51:50): [True: 1.85k, False: 5.33k]
  ------------------
   52|  3.07k|                        {
   53|  3.07k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  3.07k|                        }
   55|  5.33k|                        break;
   56|  8.41k|                    }
   57|  7.56k|                    default: {
  ------------------
  |  Branch (57:21): [True: 7.56k, False: 42.9k]
  ------------------
   58|  7.56k|                        break;
   59|  8.41k|                    }
   60|  50.5k|                }
   61|  50.5k|            }
   62|   678k|        }
   63|       |
   64|  3.33M|        return IntRegisterID::None;
   65|  3.39M|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|  3.33M|    {
   69|  3.33M|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 529k, False: 2.80M]
  ------------------
   70|   529k|        {
   71|   529k|            char first_char = token[0];
   72|   529k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 38.5k, False: 490k]
  |  Branch (72:38): [True: 15.4k, False: 475k]
  ------------------
   73|  53.9k|            {
   74|  53.9k|                char second_char = token[1];
   75|  53.9k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 50.3k, False: 3.55k]
  |  Branch (75:43): [True: 33.2k, False: 17.1k]
  ------------------
   76|  33.2k|                {
   77|  33.2k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  33.2k|                }
   79|  53.9k|            }
   80|   529k|        }
   81|  2.80M|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 663k, False: 2.14M]
  ------------------
   82|   663k|        {
   83|   663k|            char first_char = token[0];
   84|   663k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 34.8k, False: 629k]
  |  Branch (84:38): [True: 16.4k, False: 612k]
  ------------------
   85|  51.3k|            {
   86|  51.3k|                char second_char = token[1];
   87|  51.3k|                char third_char  = token[2];
   88|       |
   89|  51.3k|                switch (second_char)
   90|  51.3k|                {
   91|  3.93k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 3.93k, False: 47.3k]
  ------------------
   92|  3.93k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 2.89k, False: 1.04k]
  |  Branch (92:50): [True: 1.92k, False: 967]
  ------------------
   93|  1.92k|                        {
   94|  1.92k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  1.92k|                        }
   96|  2.01k|                        break;
   97|  3.93k|                    }
   98|  5.45k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 5.45k, False: 45.8k]
  ------------------
   99|  5.45k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 4.36k, False: 1.09k]
  |  Branch (99:50): [True: 1.75k, False: 2.61k]
  ------------------
  100|  1.75k|                        {
  101|  1.75k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  1.75k|                        }
  103|  3.70k|                        break;
  104|  5.45k|                    }
  105|  25.3k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 25.3k, False: 25.9k]
  ------------------
  106|  25.3k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 14.3k, False: 11.0k]
  |  Branch (106:50): [True: 4.30k, False: 6.70k]
  ------------------
  107|  18.6k|                        {
  108|  18.6k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  18.6k|                        }
  110|  6.70k|                        break;
  111|  25.3k|                    }
  112|  16.5k|                    default: {
  ------------------
  |  Branch (112:21): [True: 16.5k, False: 34.7k]
  ------------------
  113|  16.5k|                        break;
  114|  25.3k|                    }
  115|  51.3k|                }
  116|  51.3k|            }
  117|   663k|        }
  118|       |
  119|  3.27M|        return FloatRegisterID::None;
  120|  3.33M|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|  3.05M|    {
  124|  3.05M|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 641k, False: 2.41M]
  ------------------
  125|   641k|        {
  126|   641k|            char c1 = token[0];
  127|   641k|            char c2 = token[1];
  128|   641k|            char c3 = token[2];
  129|   641k|            char c4 = token[3];
  130|       |
  131|   641k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 23.7k, False: 617k]
  |  Branch (131:34): [True: 17.3k, False: 600k]
  |  Branch (131:49): [True: 18.4k, False: 22.7k]
  |  Branch (131:62): [True: 1.82k, False: 20.8k]
  ------------------
  132|   641k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 4.45k, False: 15.7k]
  |  Branch (132:34): [True: 13.5k, False: 2.21k]
  |  Branch (132:49): [True: 2.81k, False: 15.1k]
  |  Branch (132:62): [True: 11.5k, False: 3.66k]
  ------------------
  133|   641k|        }
  134|       |
  135|  2.41M|        return false;
  136|  3.05M|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  3.81M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   918k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  9.41M|    {
   41|  9.41M|        return m_Type;
   42|  9.41M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  4.06M|    {
   51|  4.06M|        return m_LineNumber;
   52|  4.06M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  3.78M|    {
   56|  3.78M|        return m_Column;
   57|  3.78M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  5.13M|    {
   66|  5.13M|        return m_Text;
   67|  5.13M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   320k|    {
   80|   320k|        return m_HasHint;
   81|   320k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   361k|    {
   85|   361k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   361k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   361k|                   m_Type == Type::ImmediateInteger);
   88|   361k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   361k|        return m_Hint;
   91|   361k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  18.8k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  18.8k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  18.8k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  25.9k|    {
   51|  25.9k|        auto it = m_Iterator;
   52|   103k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 77.7k, False: 25.9k]
  ------------------
   53|  77.7k|        {
   54|  77.7k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 3, False: 77.7k]
  ------------------
   55|      3|            {
   56|      3|                return false;
   57|      3|            }
   58|  77.7k|        }
   59|       |
   60|  25.9k|        return true;
   61|  25.9k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  4.67M|    {
   65|  4.67M|        return m_Iterator != m_Tokens.end();
   66|  4.67M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  4.73M|    {
   70|  4.73M|        return m_Iterator == m_Tokens.end();
   71|  4.73M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  4.73M|    {
   85|  4.73M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  4.73M|        return *m_Iterator++;
   91|  4.73M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  25.9k|    {
  164|  25.9k|        return m_Iterator;
  165|  25.9k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  7.15k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  7.15k|        m_Iterator = it;
  179|  7.15k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  5.84k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  5.84k|        return m_Tokens.rbegin();
  224|  5.84k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|   135k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|   135k|        return m_Tokens.rend();
  233|   135k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  18.8k|    {
   63|  18.8k|        TokenStream tokens;
   64|       |
   65|  18.8k|        std::string_view current_token;
   66|       |
   67|  18.8k|        phi::u64 current_line_number{1u};
   68|  18.8k|        phi::u64 current_column{1u};
   69|  18.8k|        phi::u64 token_begin{0u};
   70|       |
   71|  18.8k|        phi::boolean parsing_comment{false};
   72|       |
   73|  11.9M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 11.9M, False: 18.8k]
  ------------------
   74|  11.9M|        {
   75|  11.9M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  11.9M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 516k, False: 11.4M]
  ------------------
   78|   516k|            {
   79|   516k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 83.5k, False: 432k]
  ------------------
   80|  83.5k|                {
   81|       |                    // Skip empty lines
   82|  83.5k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  83.5k|                                        current_line_number, current_column);
   84|       |
   85|  83.5k|                    parsing_comment = false;
   86|  83.5k|                    current_line_number += 1u;
   87|  83.5k|                    current_column = 1u;
   88|  83.5k|                    continue;
   89|  83.5k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   432k|                tokens.emplace_back(
   93|   432k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   432k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   432k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   432k|                                    current_line_number, current_column);
   98|       |
   99|   432k|                current_token   = std::string_view{};
  100|   432k|                parsing_comment = false;
  101|   432k|                current_line_number += 1u;
  102|   432k|                current_column = 0u;
  103|   432k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  11.4M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 8.56k, False: 11.4M]
  |  Branch (105:34): [True: 23.2k, False: 11.4M]
  ------------------
  106|  31.8k|            {
  107|  31.8k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 17.1k, False: 14.6k]
  ------------------
  108|  17.1k|                {
  109|  17.1k|                    token_begin = i;
  110|  17.1k|                }
  111|  14.6k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 13.2k, False: 1.39k]
  ------------------
  112|  13.2k|                {
  113|  13.2k|                    tokens.emplace_back(ParseToken(
  114|  13.2k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  13.2k|                            current_line_number, current_column - current_token.length()));
  116|  13.2k|                    token_begin   = i;
  117|  13.2k|                    current_token = std::string_view{};
  118|  13.2k|                }
  119|       |
  120|  31.8k|                parsing_comment = true;
  121|  31.8k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  31.8k|            }
  123|  11.4M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 66.7k, False: 11.3M]
  ------------------
  124|  66.7k|            {
  125|       |                // simply append the character
  126|  66.7k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|  66.7k|            }
  128|  11.3M|            else
  129|  11.3M|            {
  130|       |                // Not parsing a comment
  131|  11.3M|                switch (c)
  132|  11.3M|                {
  133|   150k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 150k, False: 11.1M]
  ------------------
  134|   261k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 110k, False: 11.2M]
  ------------------
  135|   440k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 178k, False: 11.1M]
  ------------------
  136|   440k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 87.3k, False: 353k]
  ------------------
  137|  87.3k|                        {
  138|  87.3k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  87.3k|                            continue;
  141|  87.3k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   353k|                        tokens.emplace_back(ParseToken(
  145|   353k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   353k|                                current_line_number, current_column - current_token.length()));
  147|   353k|                        current_token = std::string_view{};
  148|   353k|                        break;
  149|  1.03M|                    case ':':
  ------------------
  |  Branch (149:21): [True: 1.03M, False: 10.2M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  1.03M|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 906k, False: 131k]
  ------------------
  152|   906k|                        {
  153|   906k|                            current_token =
  154|   906k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|   906k|                            tokens.emplace_back(ParseToken(
  156|   906k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|   906k|                                    current_line_number,
  158|   906k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|   906k|                            current_token = std::string_view{};
  161|   906k|                        }
  162|   131k|                        else
  163|   131k|                        {
  164|       |                            // Orphan colon
  165|   131k|                            token_begin = i;
  166|       |
  167|   131k|                            tokens.emplace_back(Token::Type::Colon,
  168|   131k|                                                source.substr(token_begin.unsafe(), 1),
  169|   131k|                                                current_line_number, current_column);
  170|   131k|                        }
  171|  1.03M|                        break;
  172|   808k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 808k, False: 10.5M]
  ------------------
  173|  1.39M|                    case '(':
  ------------------
  |  Branch (173:21): [True: 585k, False: 10.7M]
  ------------------
  174|  1.44M|                    case ')':
  ------------------
  |  Branch (174:21): [True: 46.0k, False: 11.2M]
  ------------------
  175|  1.44M|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 925k, False: 515k]
  ------------------
  176|   925k|                        {
  177|   925k|                            tokens.emplace_back(ParseToken(
  178|   925k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   925k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   925k|                            current_token = std::string_view{};
  182|   925k|                        }
  183|       |
  184|  1.44M|                        Token::Type type;
  185|  1.44M|                        switch (c)
  186|  1.44M|                        {
  187|   808k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 808k, False: 631k]
  ------------------
  188|   808k|                                type = Token::Type::Comma;
  189|   808k|                                break;
  190|   585k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 585k, False: 854k]
  ------------------
  191|   585k|                                type = Token::Type::OpenBracket;
  192|   585k|                                break;
  193|  46.0k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 46.0k, False: 1.39M]
  ------------------
  194|  46.0k|                                type = Token::Type::ClosingBracket;
  195|  46.0k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 1.44M]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  1.44M|#endif
  201|  1.44M|                        }
  202|       |
  203|  1.44M|                        token_begin = i;
  204|       |
  205|  1.44M|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  1.44M|                                            current_line_number, current_column);
  207|  1.44M|                        break;
  208|       |
  209|  8.41M|                    default:
  ------------------
  |  Branch (209:21): [True: 8.41M, False: 2.91M]
  ------------------
  210|  8.41M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 2.61M, False: 5.80M]
  ------------------
  211|  2.61M|                        {
  212|  2.61M|                            token_begin = i;
  213|  2.61M|                        }
  214|       |
  215|       |                        // simply append the character
  216|  8.41M|                        current_token =
  217|  8.41M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  11.3M|                }
  219|  11.3M|            }
  220|       |
  221|  11.7M|            current_column += 1u;
  222|  11.7M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  18.8k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 13.0k, False: 5.76k]
  ------------------
  226|  13.0k|        {
  227|  13.0k|            tokens.emplace_back(
  228|  13.0k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  13.0k|                               current_line_number, current_column - current_token.length()));
  230|  13.0k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  18.8k|        tokens.finalize();
  234|       |
  235|  18.8k|        return tokens;
  236|  18.8k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  2.64M|    {
   11|  2.64M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 25.4k, False: 2.61M]
  |  Branch (11:35): [True: 21.6k, False: 3.78k]
  ------------------
   12|  21.6k|        {
   13|  21.6k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  21.6k|            if (number)
  ------------------
  |  Branch (15:17): [True: 6.37k, False: 15.2k]
  ------------------
   16|  6.37k|            {
   17|  6.37k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  6.37k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  6.37k|            }
   20|       |
   21|  15.2k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  21.6k|        }
   23|       |
   24|  2.62M|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 8.27k, False: 2.61M]
  |  Branch (24:35): [True: 22.1k, False: 2.59M]
  ------------------
   25|  30.4k|        {
   26|  30.4k|            return {Token::Type::Comment, token, line_number, column};
   27|  30.4k|        }
   28|       |
   29|  2.59M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 87.3k, False: 2.50M]
  ------------------
   30|  87.3k|        {
   31|  87.3k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  87.3k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  87.3k|        }
   34|       |
   35|  2.50M|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 11.4k, False: 2.49M]
  ------------------
   36|  11.4k|        {
   37|  11.4k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  11.4k|        }
   39|       |
   40|  2.49M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 45.0k, False: 2.44M]
  ------------------
   41|  45.0k|        {
   42|  45.0k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  45.0k|                    static_cast<std::uint32_t>(id)};
   44|  45.0k|        }
   45|       |
   46|  2.44M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 51.8k, False: 2.39M]
  ------------------
   47|  51.8k|        {
   48|  51.8k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  51.8k|                    static_cast<std::uint32_t>(id)};
   50|  51.8k|        }
   51|       |
   52|  2.39M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 728k, False: 1.66M]
  ------------------
   53|   728k|        {
   54|   728k|            return {Token::Type::OpCode, token, line_number, column,
   55|   728k|                    static_cast<std::uint32_t>(opcode)};
   56|   728k|        }
   57|       |
   58|  1.66M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|  2.39M|    }

LLVMFuzzerTestOneInput:
    8|  18.8k|{
    9|  18.8k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   10|       |
   11|       |    // Parse it
   12|  18.8k|    dlx::Parser::Parse(source);
   13|       |
   14|  18.8k|    return 0;
   15|  18.8k|}


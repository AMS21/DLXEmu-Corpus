_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   147k|        {
  169|   147k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   147k|            switch (index.unsafe())
  172|   147k|            {
  173|  66.2k|                case 0:
  ------------------
  |  Branch (173:17): [True: 66.2k, False: 80.9k]
  ------------------
  174|  66.2k|                    return m_Arg1Type;
  175|       |
  176|  41.1k|                case 1:
  ------------------
  |  Branch (176:17): [True: 41.1k, False: 106k]
  ------------------
  177|  41.1k|                    return m_Arg2Type;
  178|       |
  179|  39.7k|                case 2:
  ------------------
  |  Branch (179:17): [True: 39.7k, False: 107k]
  ------------------
  180|  39.7k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 147k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   147k|#endif
  187|   147k|            }
  188|   147k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  37.9k|        {
  195|  37.9k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  37.9k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 36.2k, False: 1.69k]
  ------------------
  199|  36.2k|            {
  200|  36.2k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  36.2k|            }
  202|  37.9k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 22.0k, False: 15.8k]
  ------------------
  203|  22.0k|            {
  204|  22.0k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  22.0k|            }
  206|  37.9k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 13.5k, False: 24.3k]
  ------------------
  207|  13.5k|            {
  208|  13.5k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  13.5k|            }
  210|       |
  211|  37.9k|            return number_of_argument_required;
  212|  37.9k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  37.9k|        {
  221|  37.9k|            return m_Executor;
  222|  37.9k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  26.5k|    {
   38|  26.5k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  26.5k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  26.5k|                                         static_cast<underlying_t>(rhs));
   42|  26.5k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  26.5k|    {
   55|  26.5k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  26.5k|        return static_cast<underlying_t>(type & test) != 0;
   58|  26.5k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|   144k|    {
   32|   144k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 3.92k, False: 140k]
  ------------------
   33|  3.92k|        {
   34|  3.92k|            return true;
   35|  3.92k|        }
   36|       |
   37|   140k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 937, False: 139k]
  ------------------
   38|    937|        {
   39|    937|            return true;
   40|    937|        }
   41|       |
   42|   139k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 52.7k, False: 86.9k]
  ------------------
   43|  52.7k|        {
   44|  52.7k|            return true;
   45|  52.7k|        }
   46|       |
   47|  86.9k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 234, False: 86.6k]
  ------------------
   48|    234|        {
   49|    234|            return true;
   50|    234|        }
   51|       |
   52|  86.6k|        return false;
   53|  86.9k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  86.6k|    {
   57|  86.6k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 86.6k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  86.6k|        const char first_char = token.at(0);
   63|       |
   64|  86.6k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 18.4k, False: 68.2k]
  ------------------
   65|  18.4k|        {
   66|  18.4k|            return phi::is_alpha(first_char);
   67|  18.4k|        }
   68|       |
   69|  68.2k|        phi::boolean just_under_scores = (first_char == '_');
   70|  68.2k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 9.20k, False: 59.0k]
  |  Branch (70:15): [True: 57.3k, False: 10.8k]
  |  Branch (70:44): [True: 1.63k, False: 9.20k]
  ------------------
   71|  9.20k|        {
   72|  9.20k|            return false;
   73|  9.20k|        }
   74|       |
   75|   219k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 184k, False: 35.0k]
  ------------------
   76|   184k|        {
   77|   184k|            const char c{token.at(index)};
   78|       |
   79|   184k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 158k, False: 25.9k]
  ------------------
   80|   158k|            {
   81|   158k|                just_under_scores = false;
   82|   158k|            }
   83|  25.9k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 1.94k, False: 23.9k]
  ------------------
   84|  1.94k|            {
   85|  1.94k|                continue;
   86|  1.94k|            }
   87|  23.9k|            else
   88|  23.9k|            {
   89|  23.9k|                return false;
   90|  23.9k|            }
   91|   184k|        }
   92|       |
   93|  35.0k|        return !just_under_scores;
   94|  59.0k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   394k|    {
  101|   394k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 394k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   394k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 57.0k, False: 337k]
  ------------------
  107|  57.0k|        {
  108|  57.0k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 6.10k, False: 50.9k]
  ------------------
  109|  6.10k|            {
  110|  6.10k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  6.10k|            }
  112|       |
  113|  50.9k|            return {};
  114|  57.0k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   337k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 2.61k, False: 334k]
  ------------------
  118|  2.61k|        {
  119|  2.61k|            return {};
  120|  2.61k|        }
  121|       |
  122|   334k|        std::int32_t number{0};
  123|   334k|        phi::boolean is_negative{false};
  124|   334k|        phi::boolean starts_with_zero{false};
  125|   334k|        phi::boolean parsing_binary{false};
  126|   334k|        phi::boolean parsing_octal{false};
  127|   334k|        phi::boolean parsing_hexadecimal{false};
  128|   334k|        phi::boolean parsed_something{false};
  129|   334k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   376k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 370k, False: 5.58k]
  ------------------
  134|   370k|        {
  135|   370k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   370k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 334k, False: 36.2k]
  ------------------
  139|   334k|            {
  140|   334k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 495, False: 333k]
  ------------------
  141|    495|                {
  142|    495|                    continue;
  143|    495|                }
  144|       |
  145|   333k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 2.66k, False: 331k]
  ------------------
  146|  2.66k|                {
  147|  2.66k|                    is_negative = true;
  148|  2.66k|                    continue;
  149|  2.66k|                }
  150|       |
  151|   331k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 7.18k, False: 324k]
  ------------------
  152|  7.18k|                {
  153|  7.18k|                    starts_with_zero = true;
  154|  7.18k|                    continue;
  155|  7.18k|                }
  156|       |
  157|   324k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 691, False: 323k]
  ------------------
  158|    691|                {
  159|    691|                    return {};
  160|    691|                }
  161|   324k|            }
  162|       |
  163|       |            // Second character
  164|   359k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 15.0k, False: 344k]
  ------------------
  165|  15.0k|            {
  166|  15.0k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 7.18k, False: 7.87k]
  ------------------
  167|  7.18k|                {
  168|       |                    // Binary
  169|  7.18k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 1.00k, False: 6.18k]
  |  Branch (169:37): [True: 195, False: 5.98k]
  ------------------
  170|  1.20k|                    {
  171|  1.20k|                        parsing_binary = true;
  172|  1.20k|                        continue;
  173|  1.20k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  5.98k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 2.80k, False: 3.17k]
  |  Branch (176:37): [True: 471, False: 2.70k]
  ------------------
  177|  3.27k|                    {
  178|  3.27k|                        parsing_hexadecimal = true;
  179|  3.27k|                        continue;
  180|  3.27k|                    }
  181|       |
  182|       |                    // Octal
  183|  2.70k|                    parsing_octal = true;
  184|  2.70k|                }
  185|  15.0k|            }
  186|       |
  187|       |            // Handle seperators
  188|   355k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 497, False: 354k]
  ------------------
  189|    497|            {
  190|    497|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 194, False: 303]
  ------------------
  191|    194|                {
  192|    194|                    return {};
  193|    194|                }
  194|       |
  195|    303|                parsed_separator = true;
  196|    303|                continue;
  197|    497|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   354k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 10.3k, False: 344k]
  |  Branch (200:32): [True: 613, False: 9.69k]
  ------------------
  201|    613|            {
  202|       |                // Would underflow
  203|    613|                return {};
  204|    613|            }
  205|   354k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 344k, False: 9.69k]
  |  Branch (205:17): [True: 649, False: 353k]
  |  Branch (205:33): [True: 649, False: 343k]
  ------------------
  206|    649|            {
  207|       |                // Would overflow
  208|    649|                return {};
  209|    649|            }
  210|       |
  211|   353k|            parsed_separator = false;
  212|   353k|            parsed_something = true;
  213|       |
  214|   353k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 1.63k, False: 351k]
  ------------------
  215|  1.63k|            {
  216|  1.63k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 404, False: 1.23k]
  ------------------
  217|    404|                {
  218|    404|                    return {};
  219|    404|                }
  220|       |
  221|  1.23k|                number <<= 1;
  222|  1.23k|                number |= (c - '0');
  223|  1.23k|            }
  224|   351k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 3.00k, False: 348k]
  ------------------
  225|  3.00k|            {
  226|  3.00k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 2.13k, False: 874]
  ------------------
  227|  2.13k|                {
  228|  2.13k|                    return {};
  229|  2.13k|                }
  230|       |
  231|    874|                number <<= 3;
  232|    874|                number |= (c - '0');
  233|    874|            }
  234|   348k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 5.37k, False: 343k]
  ------------------
  235|  5.37k|            {
  236|  5.37k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 2.67k, False: 2.69k]
  ------------------
  237|  2.67k|                {
  238|  2.67k|                    return {};
  239|  2.67k|                }
  240|       |
  241|  2.69k|                number <<= 4;
  242|  2.69k|                number |= phi::hex_digit_value(c).unsafe();
  243|  2.69k|            }
  244|   343k|            else
  245|   343k|            {
  246|   343k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 320k, False: 22.6k]
  ------------------
  247|   320k|                {
  248|   320k|                    return {};
  249|   320k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  22.6k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 7.23k, False: 15.3k]
  |  Branch (252:36): [True: 738, False: 6.49k]
  ------------------
  253|    738|                {
  254|    738|                    return {};
  255|    738|                }
  256|       |
  257|  21.8k|                number *= 10;
  258|  21.8k|                number += (c - '0');
  259|  21.8k|            }
  260|   353k|        }
  261|       |
  262|  5.58k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 5.16k, False: 424]
  ------------------
  263|  5.16k|        {
  264|       |            // Check for over/underflow
  265|  5.16k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 1.13k, False: 4.02k]
  |  Branch (265:32): [True: 900, False: 239]
  ------------------
  266|    900|            {
  267|       |                // Would underflow
  268|    900|                return {};
  269|    900|            }
  270|  4.26k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 4.02k, False: 239]
  |  Branch (270:17): [True: 638, False: 3.62k]
  |  Branch (270:33): [True: 638, False: 3.38k]
  ------------------
  271|    638|            {
  272|       |                // Would overflow
  273|    638|                return {};
  274|    638|            }
  275|       |
  276|  3.62k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 239, False: 3.38k]
  ------------------
  277|    239|            {
  278|    239|                return static_cast<std::int16_t>(-number);
  279|    239|            }
  280|       |
  281|  3.38k|            return static_cast<std::int16_t>(number);
  282|  3.62k|        }
  283|       |
  284|    424|        return {};
  285|  5.58k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  26.1k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  26.1k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 397k, False: 0]
  ------------------
   64|   397k|            {
   65|   397k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 26.1k, False: 371k]
  ------------------
   66|  26.1k|                {
   67|  26.1k|                    return &token;
   68|  26.1k|                }
   69|   397k|            }
   70|       |
   71|      0|            return nullptr;
   72|  26.1k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|  91.1k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  91.1k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  91.1k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   398k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   398k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   398k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|   212k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   212k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   212k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  37.9k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  9.37k|    {
   25|  9.37k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  9.37k|        switch (argument_number.unsafe())
   28|  9.37k|        {
   29|  6.55k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 6.55k, False: 2.81k]
  ------------------
   30|  6.55k|                m_Arg1 = argument;
   31|  6.55k|                break;
   32|  1.88k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 1.88k, False: 7.49k]
  ------------------
   33|  1.88k|                m_Arg2 = argument;
   34|  1.88k|                break;
   35|    933|            case 2u:
  ------------------
  |  Branch (35:13): [True: 933, False: 8.44k]
  ------------------
   36|    933|                m_Arg3 = argument;
   37|    933|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 9.37k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  9.37k|#endif
   42|  9.37k|        }
   43|  9.37k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|   123k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  1.71k|    {
  171|  1.71k|        InstructionArgument arg;
  172|  1.71k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  1.71k|        arg.register_int.register_id = id;
  174|  1.71k|        return arg;
  175|  1.71k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  2.99k|    {
  179|  2.99k|        InstructionArgument arg;
  180|  2.99k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  2.99k|        arg.register_float.register_id = id;
  182|  2.99k|        return arg;
  183|  2.99k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|    625|    {
  187|    625|        InstructionArgument arg;
  188|    625|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|    625|        arg.immediate_value.signed_value = value;
  190|    625|        return arg;
  191|    625|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|    707|    {
  196|    707|        InstructionArgument arg;
  197|    707|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|    707|        arg.address_displacement.register_id  = id;
  199|    707|        arg.address_displacement.displacement = displacement;
  200|    707|        return arg;
  201|    707|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  3.33k|    {
  205|  3.33k|        InstructionArgument arg;
  206|  3.33k|        arg.m_Type           = ArgumentType::Label;
  207|  3.33k|        arg.label.label_name = label_name;
  208|  3.33k|        return arg;
  209|  3.33k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  37.9k|    {
  453|  37.9k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  37.9k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   508k|    {
   24|   508k|        switch (token.length())
   25|   508k|        {
   26|       |            // 1 character OpCodes
   27|  68.9k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 68.9k, False: 439k]
  ------------------
   28|  68.9k|                char c1 = token[0];
   29|  68.9k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 15.0k, False: 53.8k]
  ------------------
   30|  15.0k|                {
   31|  15.0k|                    return OpCode::J;
   32|  15.0k|                }
   33|  53.8k|                break;
   34|  68.9k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  77.9k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 77.9k, False: 430k]
  ------------------
   38|  77.9k|                char c1 = token[0];
   39|  77.9k|                char c2 = token[1];
   40|       |
   41|  77.9k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 48.3k, False: 29.5k]
  ------------------
   42|  77.9k|                {
   43|  1.70k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 1.70k, False: 76.2k]
  ------------------
   44|  3.53k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 1.82k, False: 76.0k]
  ------------------
   45|  3.53k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 1.81k, False: 1.72k]
  ------------------
   46|  1.81k|                        {
   47|  1.81k|                            return OpCode::JR;
   48|  1.81k|                        }
   49|  1.72k|                        break;
   50|       |
   51|  4.23k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 4.23k, False: 73.6k]
  ------------------
   52|  8.06k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 3.83k, False: 74.0k]
  ------------------
   53|  8.06k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 2.44k, False: 5.62k]
  ------------------
   54|  8.06k|                        {
   55|  1.35k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 1.35k, False: 6.71k]
  ------------------
   56|  1.69k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 333, False: 7.73k]
  ------------------
   57|  1.69k|                                return OpCode::LB;
   58|    604|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 604, False: 7.46k]
  ------------------
   59|    801|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 197, False: 7.87k]
  ------------------
   60|    801|                                return OpCode::LD;
   61|    450|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 450, False: 7.61k]
  ------------------
   62|  1.03k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 582, False: 7.48k]
  ------------------
   63|  1.03k|                                return OpCode::LF;
   64|    329|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 329, False: 7.73k]
  ------------------
   65|    618|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 289, False: 7.77k]
  ------------------
   66|    618|                                return OpCode::LH;
   67|    629|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 629, False: 7.43k]
  ------------------
   68|  1.48k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 852, False: 7.21k]
  ------------------
   69|  1.48k|                                return OpCode::LW;
   70|  8.06k|                        }
   71|  2.44k|                        break;
   72|  2.44k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 827, False: 77.0k]
  ------------------
   73|  2.76k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 1.93k, False: 75.9k]
  ------------------
   74|  2.76k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 1.57k, False: 1.19k]
  ------------------
   75|  1.57k|                        {
   76|  1.57k|                            return OpCode::OR;
   77|  1.57k|                        }
   78|  1.19k|                        break;
   79|  9.75k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 9.75k, False: 68.1k]
  ------------------
   80|  15.2k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 5.47k, False: 72.4k]
  ------------------
   81|  15.2k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 4.92k, False: 10.3k]
  ------------------
   82|  15.2k|                        {
   83|    540|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 540, False: 14.6k]
  ------------------
   84|  1.06k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 529, False: 14.6k]
  ------------------
   85|  1.06k|                                return OpCode::SB;
   86|  3.48k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 3.48k, False: 11.7k]
  ------------------
   87|  3.96k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 487, False: 14.7k]
  ------------------
   88|  3.96k|                                return OpCode::SD;
   89|    529|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 529, False: 14.6k]
  ------------------
   90|    897|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 368, False: 14.8k]
  ------------------
   91|    897|                                return OpCode::SF;
   92|    709|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 709, False: 14.5k]
  ------------------
   93|  1.95k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 1.24k, False: 13.9k]
  ------------------
   94|  1.95k|                                return OpCode::SH;
   95|    601|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 601, False: 14.6k]
  ------------------
   96|  2.42k|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 1.81k, False: 13.4k]
  ------------------
   97|  2.42k|                                return OpCode::SW;
   98|  15.2k|                        }
   99|  4.92k|                        break;
  100|  77.9k|                }
  101|  58.6k|                break;
  102|  77.9k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   101k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 101k, False: 406k]
  ------------------
  106|   101k|                char c1 = token[0];
  107|   101k|                char c2 = token[1];
  108|   101k|                char c3 = token[2];
  109|       |
  110|   101k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 33.2k, False: 68.1k]
  ------------------
  111|   101k|                {
  112|  5.12k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 5.12k, False: 96.2k]
  ------------------
  113|  6.80k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 1.68k, False: 99.6k]
  ------------------
  114|  6.80k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 1.63k, False: 5.17k]
  |  Branch (114:29): [True: 1.21k, False: 5.59k]
  |  Branch (114:45): [True: 1.21k, False: 424]
  ------------------
  115|  1.21k|                        {
  116|  1.21k|                            return OpCode::ADD;
  117|  1.21k|                        }
  118|  5.59k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 2.21k, False: 3.37k]
  |  Branch (118:34): [True: 918, False: 4.67k]
  |  Branch (118:50): [True: 918, False: 1.29k]
  ------------------
  119|    918|                        {
  120|    918|                            return OpCode::AND;
  121|    918|                        }
  122|  4.67k|                        break;
  123|       |
  124|  4.67k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 692, False: 100k]
  ------------------
  125|  4.39k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 3.70k, False: 97.6k]
  ------------------
  126|  4.39k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 3.04k, False: 1.35k]
  |  Branch (126:29): [True: 2.11k, False: 2.28k]
  |  Branch (126:45): [True: 2.11k, False: 931]
  ------------------
  127|  2.11k|                        {
  128|  2.11k|                            return OpCode::DIV;
  129|  2.11k|                        }
  130|  2.28k|                        break;
  131|       |
  132|  2.28k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 498, False: 100k]
  ------------------
  133|  2.58k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 2.08k, False: 99.2k]
  ------------------
  134|  2.58k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 2.02k, False: 557]
  ------------------
  135|  2.02k|                        {
  136|  2.02k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 868, False: 1.16k]
  ------------------
  137|    868|                            {
  138|    868|                                return OpCode::EQD;
  139|    868|                            }
  140|  1.16k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 740, False: 420]
  ------------------
  141|    740|                            {
  142|    740|                                return OpCode::EQF;
  143|    740|                            }
  144|  2.02k|                        }
  145|    977|                        break;
  146|       |
  147|  5.86k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 5.86k, False: 95.4k]
  ------------------
  148|  7.00k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 1.13k, False: 100k]
  ------------------
  149|  7.00k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 2.10k, False: 4.89k]
  ------------------
  150|  2.10k|                        {
  151|  2.10k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 1.03k, False: 1.06k]
  ------------------
  152|  1.03k|                            {
  153|  1.03k|                                return OpCode::GED;
  154|  1.03k|                            }
  155|  1.06k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 773, False: 296]
  ------------------
  156|    773|                            {
  157|    773|                                return OpCode::GEF;
  158|    773|                            }
  159|  2.10k|                        }
  160|  4.89k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 2.29k, False: 2.59k]
  ------------------
  161|  2.29k|                        {
  162|  2.29k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 650, False: 1.64k]
  ------------------
  163|    650|                            {
  164|    650|                                return OpCode::GTD;
  165|    650|                            }
  166|  1.64k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 388, False: 1.26k]
  ------------------
  167|    388|                            {
  168|    388|                                return OpCode::GTF;
  169|    388|                            }
  170|  1.64k|                        }
  171|  4.15k|                        break;
  172|       |
  173|  4.15k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 520, False: 100k]
  ------------------
  174|  2.87k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 2.35k, False: 99.0k]
  ------------------
  175|  2.87k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 2.27k, False: 606]
  |  Branch (175:29): [True: 1.16k, False: 1.71k]
  |  Branch (175:45): [True: 1.16k, False: 1.11k]
  ------------------
  176|  1.16k|                        {
  177|  1.16k|                            return OpCode::JAL;
  178|  1.16k|                        }
  179|  1.71k|                        break;
  180|       |
  181|  4.20k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 4.20k, False: 97.1k]
  ------------------
  182|  12.8k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 8.66k, False: 92.6k]
  ------------------
  183|  12.8k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 1.19k, False: 11.6k]
  ------------------
  184|  12.8k|                        {
  185|  2.89k|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 2.89k, False: 9.97k]
  ------------------
  186|  3.63k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 737, False: 12.1k]
  ------------------
  187|  3.63k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 1.06k, False: 2.57k]
  ------------------
  188|  1.06k|                                {
  189|  1.06k|                                    return OpCode::LBU;
  190|  1.06k|                                }
  191|  2.57k|                                break;
  192|       |
  193|  2.57k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 1.16k, False: 11.7k]
  ------------------
  194|  1.83k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 675, False: 12.1k]
  ------------------
  195|  1.83k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 644, False: 1.19k]
  ------------------
  196|    644|                                {
  197|    644|                                    return OpCode::LED;
  198|    644|                                }
  199|  1.19k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 772, False: 421]
  ------------------
  200|    772|                                {
  201|    772|                                    return OpCode::LEF;
  202|    772|                                }
  203|    421|                                break;
  204|       |
  205|    421|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 408, False: 12.4k]
  ------------------
  206|  1.96k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 1.55k, False: 11.3k]
  ------------------
  207|  1.96k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 903, False: 1.06k]
  ------------------
  208|    903|                                {
  209|    903|                                    return OpCode::LHI;
  210|    903|                                }
  211|  1.06k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 679, False: 382]
  ------------------
  212|    679|                                {
  213|    679|                                    return OpCode::LHU;
  214|    679|                                }
  215|    382|                                break;
  216|       |
  217|  1.35k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 1.35k, False: 11.5k]
  ------------------
  218|  2.18k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 827, False: 12.0k]
  ------------------
  219|  2.18k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 1.33k, False: 850]
  ------------------
  220|  1.33k|                                {
  221|  1.33k|                                    return OpCode::LTD;
  222|  1.33k|                                }
  223|    850|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 516, False: 334]
  ------------------
  224|    516|                                {
  225|    516|                                    return OpCode::LTF;
  226|    516|                                }
  227|    334|                                break;
  228|       |
  229|    527|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 527, False: 12.3k]
  ------------------
  230|  2.05k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 1.53k, False: 11.3k]
  ------------------
  231|  2.05k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 772, False: 1.28k]
  ------------------
  232|    772|                                {
  233|    772|                                    return OpCode::LWU;
  234|    772|                                }
  235|  1.28k|                                break;
  236|  12.8k|                        }
  237|  6.19k|                        break;
  238|       |
  239|  6.19k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 1.60k, False: 99.7k]
  ------------------
  240|  4.05k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 2.44k, False: 98.9k]
  ------------------
  241|  4.05k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 1.69k, False: 2.35k]
  ------------------
  242|  1.69k|                        {
  243|  1.69k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 648, False: 1.05k]
  ------------------
  244|    648|                            {
  245|    648|                                return OpCode::NED;
  246|    648|                            }
  247|  1.05k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 516, False: 535]
  ------------------
  248|    516|                            {
  249|    516|                                return OpCode::NEF;
  250|    516|                            }
  251|  1.69k|                        }
  252|  2.35k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 1.73k, False: 620]
  |  Branch (252:34): [True: 1.45k, False: 905]
  |  Branch (252:50): [True: 1.45k, False: 285]
  ------------------
  253|  1.45k|                        {
  254|  1.45k|                            return OpCode::NOP;
  255|  1.45k|                        }
  256|       |
  257|  1.44k|                        break;
  258|       |
  259|  1.44k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 808, False: 100k]
  ------------------
  260|  2.87k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 2.07k, False: 99.2k]
  ------------------
  261|  2.87k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 1.73k, False: 1.14k]
  |  Branch (261:29): [True: 1.03k, False: 1.84k]
  |  Branch (261:45): [True: 1.03k, False: 704]
  ------------------
  262|  1.03k|                        {
  263|  1.03k|                            return OpCode::ORI;
  264|  1.03k|                        }
  265|  1.84k|                        break;
  266|       |
  267|  11.5k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 11.5k, False: 89.8k]
  ------------------
  268|  22.9k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 11.4k, False: 89.8k]
  ------------------
  269|  22.9k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 2.51k, False: 20.4k]
  ------------------
  270|  22.9k|                        {
  271|    993|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 993, False: 22.0k]
  ------------------
  272|  1.31k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 317, False: 22.6k]
  ------------------
  273|  1.31k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 647, False: 663]
  ------------------
  274|    647|                                {
  275|    647|                                    return OpCode::SBU;
  276|    647|                                }
  277|    663|                                break;
  278|       |
  279|    815|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 815, False: 22.1k]
  ------------------
  280|  1.32k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 509, False: 22.4k]
  ------------------
  281|  1.32k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 802, False: 522]
  ------------------
  282|    802|                                {
  283|    802|                                    return OpCode::SEQ;
  284|    802|                                }
  285|    522|                                break;
  286|       |
  287|  1.39k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 1.39k, False: 21.5k]
  ------------------
  288|  2.58k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 1.18k, False: 21.8k]
  ------------------
  289|  2.58k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 678, False: 1.90k]
  ------------------
  290|    678|                                {
  291|    678|                                    return OpCode::SGE;
  292|    678|                                }
  293|  1.90k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 1.17k, False: 725]
  ------------------
  294|  1.17k|                                {
  295|  1.17k|                                    return OpCode::SGT;
  296|  1.17k|                                }
  297|    725|                                break;
  298|       |
  299|    775|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 775, False: 22.2k]
  ------------------
  300|  1.23k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 461, False: 22.5k]
  ------------------
  301|  1.23k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 1.02k, False: 208]
  ------------------
  302|  1.02k|                                {
  303|  1.02k|                                    return OpCode::SHU;
  304|  1.02k|                                }
  305|    208|                                break;
  306|       |
  307|  1.89k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 1.89k, False: 21.1k]
  ------------------
  308|  5.52k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 3.63k, False: 19.3k]
  ------------------
  309|  5.52k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 476, False: 5.05k]
  ------------------
  310|  5.52k|                                {
  311|    588|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 588, False: 4.94k]
  ------------------
  312|  1.45k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 862, False: 4.66k]
  ------------------
  313|  1.45k|                                        return OpCode::SLA;
  314|       |
  315|    582|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 582, False: 4.94k]
  ------------------
  316|  1.47k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 891, False: 4.63k]
  ------------------
  317|  1.47k|                                        return OpCode::SLE;
  318|       |
  319|    609|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 609, False: 4.92k]
  ------------------
  320|  1.33k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 724, False: 4.80k]
  ------------------
  321|  1.33k|                                        return OpCode::SLL;
  322|       |
  323|    467|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 467, False: 5.06k]
  ------------------
  324|    797|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 330, False: 5.19k]
  ------------------
  325|    797|                                        return OpCode::SLT;
  326|  5.52k|                                }
  327|    476|                                break;
  328|       |
  329|    567|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 567, False: 22.4k]
  ------------------
  330|  1.77k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 1.21k, False: 21.7k]
  ------------------
  331|  1.77k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 1.14k, False: 638]
  ------------------
  332|  1.14k|                                {
  333|  1.14k|                                    return OpCode::SNE;
  334|  1.14k|                                }
  335|    638|                                break;
  336|       |
  337|  1.73k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 1.73k, False: 21.2k]
  ------------------
  338|  2.66k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 938, False: 22.0k]
  ------------------
  339|  2.66k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 1.37k, False: 1.29k]
  ------------------
  340|  1.37k|                                {
  341|  1.37k|                                    return OpCode::SRA;
  342|  1.37k|                                }
  343|  1.29k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 668, False: 624]
  ------------------
  344|    668|                                {
  345|    668|                                    return OpCode::SRL;
  346|    668|                                }
  347|    624|                                break;
  348|       |
  349|  1.17k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 1.17k, False: 21.8k]
  ------------------
  350|  1.95k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 779, False: 22.2k]
  ------------------
  351|  1.95k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 1.25k, False: 700]
  ------------------
  352|  1.25k|                                {
  353|  1.25k|                                    return OpCode::SUB;
  354|  1.25k|                                }
  355|    700|                                break;
  356|       |
  357|    700|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 456, False: 22.5k]
  ------------------
  358|  2.10k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 1.64k, False: 21.3k]
  ------------------
  359|  2.10k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 1.06k, False: 1.04k]
  ------------------
  360|  1.06k|                                {
  361|  1.06k|                                    return OpCode::SWU;
  362|  1.06k|                                }
  363|  1.04k|                                break;
  364|  22.9k|                        }
  365|       |
  366|  9.17k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 1.05k, False: 100k]
  ------------------
  367|  9.76k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 587, False: 100k]
  ------------------
  368|  9.76k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 1.52k, False: 8.23k]
  |  Branch (368:29): [True: 1.07k, False: 8.68k]
  |  Branch (368:45): [True: 1.07k, False: 457]
  ------------------
  369|  1.07k|                        {
  370|  1.07k|                            return OpCode::XOR;
  371|  1.07k|                        }
  372|  8.68k|                        break;
  373|   101k|                }
  374|  65.2k|                break;
  375|   101k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   119k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 119k, False: 388k]
  ------------------
  379|   119k|                char c1 = token[0];
  380|   119k|                char c2 = token[1];
  381|   119k|                char c3 = token[2];
  382|   119k|                char c4 = token[3];
  383|       |
  384|   119k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 26.1k, False: 93.8k]
  ------------------
  385|   119k|                {
  386|  7.99k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 7.99k, False: 111k]
  ------------------
  387|  15.4k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 7.46k, False: 112k]
  ------------------
  388|  15.4k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 1.14k, False: 14.3k]
  ------------------
  389|  15.4k|                        {
  390|  5.72k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 5.72k, False: 9.72k]
  ------------------
  391|  11.1k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 5.43k, False: 10.0k]
  ------------------
  392|  11.1k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 10.7k, False: 453]
  ------------------
  393|  10.7k|                                {
  394|  10.7k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 1.31k, False: 9.39k]
  ------------------
  395|  10.7k|                                    {
  396|  1.91k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 1.91k, False: 8.79k]
  ------------------
  397|  2.89k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 977, False: 9.73k]
  ------------------
  398|  2.89k|                                            return OpCode::ADDD;
  399|       |
  400|    450|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 450, False: 10.2k]
  ------------------
  401|    809|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 359, False: 10.3k]
  ------------------
  402|    809|                                            return OpCode::ADDF;
  403|       |
  404|    835|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 835, False: 9.87k]
  ------------------
  405|  2.09k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 1.25k, False: 9.45k]
  ------------------
  406|  2.09k|                                            return OpCode::ADDI;
  407|       |
  408|  1.47k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 1.47k, False: 9.23k]
  ------------------
  409|  3.60k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 2.12k, False: 8.58k]
  ------------------
  410|  3.60k|                                            return OpCode::ADDU;
  411|  10.7k|                                    }
  412|  10.7k|                                }
  413|  1.76k|                                break;
  414|       |
  415|  1.76k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 643, False: 14.8k]
  ------------------
  416|  3.15k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 2.50k, False: 12.9k]
  ------------------
  417|  3.15k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 1.87k, False: 1.27k]
  |  Branch (417:37): [True: 935, False: 2.21k]
  |  Branch (417:53): [True: 935, False: 940]
  ------------------
  418|    935|                                {
  419|    935|                                    return OpCode::ANDI;
  420|    935|                                }
  421|       |
  422|  2.21k|                                break;
  423|  15.4k|                        }
  424|  5.12k|                        break;
  425|       |
  426|  5.12k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 3.57k, False: 116k]
  ------------------
  427|  8.06k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 4.48k, False: 115k]
  ------------------
  428|  8.06k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 550, False: 7.51k]
  ------------------
  429|  8.06k|                        {
  430|    555|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 555, False: 7.50k]
  ------------------
  431|  1.46k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 911, False: 7.15k]
  ------------------
  432|  1.46k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 1.13k, False: 332]
  |  Branch (432:37): [True: 901, False: 565]
  |  Branch (432:53): [True: 901, False: 233]
  ------------------
  433|    901|                                {
  434|    901|                                    return OpCode::BEQZ;
  435|    901|                                }
  436|    565|                                break;
  437|       |
  438|    565|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 493, False: 7.56k]
  ------------------
  439|  2.57k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 2.08k, False: 5.98k]
  ------------------
  440|  2.57k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 2.25k, False: 324]
  ------------------
  441|  2.25k|                                {
  442|  2.25k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 548, False: 1.70k]
  ------------------
  443|    548|                                    {
  444|    548|                                        return OpCode::BFPF;
  445|    548|                                    }
  446|  1.70k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 1.35k, False: 350]
  ------------------
  447|  1.35k|                                    {
  448|  1.35k|                                        return OpCode::BFPT;
  449|  1.35k|                                    }
  450|  2.25k|                                }
  451|    674|                                break;
  452|       |
  453|    990|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 990, False: 7.07k]
  ------------------
  454|  3.47k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 2.48k, False: 5.58k]
  ------------------
  455|  3.47k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 3.08k, False: 383]
  |  Branch (455:37): [True: 1.30k, False: 2.16k]
  |  Branch (455:53): [True: 1.30k, False: 1.77k]
  ------------------
  456|  1.30k|                                {
  457|  1.30k|                                    return OpCode::BNEZ;
  458|  1.30k|                                }
  459|  8.06k|                        }
  460|  3.95k|                        break;
  461|       |
  462|  3.95k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 1.72k, False: 118k]
  ------------------
  463|  9.62k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 7.89k, False: 112k]
  ------------------
  464|  9.62k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 8.44k, False: 1.17k]
  |  Branch (464:29): [True: 6.43k, False: 3.18k]
  |  Branch (464:45): [True: 6.43k, False: 2.01k]
  ------------------
  465|  6.43k|                        {
  466|  6.43k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 1.01k, False: 5.42k]
  ------------------
  467|  6.43k|                            {
  468|    992|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 992, False: 5.44k]
  ------------------
  469|  1.50k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 515, False: 5.91k]
  ------------------
  470|  1.50k|                                    return OpCode::DIVD;
  471|       |
  472|    258|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 258, False: 6.17k]
  ------------------
  473|  1.00k|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 743, False: 5.69k]
  ------------------
  474|  1.00k|                                    return OpCode::DIVF;
  475|       |
  476|  1.09k|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 1.09k, False: 5.33k]
  ------------------
  477|  1.80k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 712, False: 5.72k]
  ------------------
  478|  1.80k|                                    return OpCode::DIVI;
  479|       |
  480|    615|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 615, False: 5.81k]
  ------------------
  481|  1.10k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 491, False: 5.94k]
  ------------------
  482|  1.10k|                                    return OpCode::DIVU;
  483|  6.43k|                            }
  484|  6.43k|                        }
  485|  4.20k|                        break;
  486|       |
  487|  4.20k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 666, False: 119k]
  ------------------
  488|  3.04k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 2.38k, False: 117k]
  ------------------
  489|  3.04k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 2.34k, False: 705]
  |  Branch (489:29): [True: 1.13k, False: 1.91k]
  |  Branch (489:45): [True: 1.98k, False: 356]
  |  Branch (489:61): [True: 1.13k, False: 857]
  ------------------
  490|  1.13k|                        {
  491|  1.13k|                            return OpCode::HALT;
  492|  1.13k|                        }
  493|  1.91k|                        break;
  494|       |
  495|  1.91k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 530, False: 119k]
  ------------------
  496|  4.64k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 4.11k, False: 115k]
  ------------------
  497|  4.64k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 4.04k, False: 594]
  |  Branch (497:29): [True: 2.18k, False: 2.45k]
  |  Branch (497:45): [True: 3.37k, False: 671]
  |  Branch (497:61): [True: 2.18k, False: 1.19k]
  ------------------
  498|  2.18k|                        {
  499|  2.18k|                            return OpCode::JALR;
  500|  2.18k|                        }
  501|  2.45k|                        break;
  502|       |
  503|  2.45k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 1.23k, False: 118k]
  ------------------
  504|  8.45k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 7.22k, False: 112k]
  ------------------
  505|  8.45k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 5.13k, False: 3.32k]
  |  Branch (505:29): [True: 4.68k, False: 3.77k]
  |  Branch (505:45): [True: 4.68k, False: 454]
  ------------------
  506|  4.68k|                        {
  507|  4.68k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 531, False: 4.15k]
  ------------------
  508|    531|                            {
  509|    531|                                return OpCode::MOVD;
  510|    531|                            }
  511|  4.15k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 2.32k, False: 1.82k]
  ------------------
  512|  2.32k|                            {
  513|  2.32k|                                return OpCode::MOVF;
  514|  2.32k|                            }
  515|  4.68k|                        }
  516|  3.77k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 2.92k, False: 851]
  |  Branch (516:34): [True: 2.23k, False: 1.54k]
  |  Branch (516:50): [True: 2.61k, False: 304]
  |  Branch (516:66): [True: 2.23k, False: 385]
  ------------------
  517|  2.23k|                        {
  518|  2.23k|                            return OpCode::MULT;
  519|  2.23k|                        }
  520|  3.36k|                        break;
  521|       |
  522|  18.7k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 18.7k, False: 101k]
  ------------------
  523|  39.0k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 20.3k, False: 99.6k]
  ------------------
  524|  39.0k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 2.30k, False: 36.7k]
  ------------------
  525|  39.0k|                        {
  526|  3.56k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 3.56k, False: 35.4k]
  ------------------
  527|  4.31k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 753, False: 38.2k]
  ------------------
  528|  4.31k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 3.58k, False: 737]
  ------------------
  529|  3.58k|                                {
  530|  3.58k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 1.56k, False: 2.02k]
  ------------------
  531|  1.56k|                                    {
  532|  1.56k|                                        return OpCode::SEQI;
  533|  1.56k|                                    }
  534|  2.02k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 810, False: 1.21k]
  ------------------
  535|    810|                                    {
  536|    810|                                        return OpCode::SEQU;
  537|    810|                                    }
  538|  3.58k|                                }
  539|  1.94k|                                break;
  540|       |
  541|  1.94k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 1.83k, False: 37.2k]
  ------------------
  542|  6.73k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 4.90k, False: 34.1k]
  ------------------
  543|  6.73k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 2.93k, False: 3.79k]
  ------------------
  544|  2.93k|                                {
  545|  2.93k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 950, False: 1.98k]
  ------------------
  546|    950|                                    {
  547|    950|                                        return OpCode::SGEI;
  548|    950|                                    }
  549|  1.98k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 1.47k, False: 518]
  ------------------
  550|  1.47k|                                    {
  551|  1.47k|                                        return OpCode::SGEU;
  552|  1.47k|                                    }
  553|  2.93k|                                }
  554|  3.79k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 3.23k, False: 566]
  ------------------
  555|  3.23k|                                {
  556|  3.23k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 1.04k, False: 2.18k]
  ------------------
  557|  1.04k|                                    {
  558|  1.04k|                                        return OpCode::SGTI;
  559|  1.04k|                                    }
  560|  2.18k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 1.59k, False: 587]
  ------------------
  561|  1.59k|                                    {
  562|  1.59k|                                        return OpCode::SGTU;
  563|  1.59k|                                    }
  564|  3.23k|                                }
  565|  1.67k|                                break;
  566|       |
  567|  3.05k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 3.05k, False: 35.9k]
  ------------------
  568|  10.5k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 7.54k, False: 31.5k]
  ------------------
  569|  10.5k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 940, False: 9.65k]
  ------------------
  570|  10.5k|                                {
  571|  1.20k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 1.20k, False: 9.38k]
  ------------------
  572|  1.89k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 696, False: 9.89k]
  ------------------
  573|  1.89k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 1.15k, False: 742]
  ------------------
  574|  1.15k|                                        {
  575|  1.15k|                                            return OpCode::SLAI;
  576|  1.15k|                                        }
  577|    742|                                        break;
  578|       |
  579|  2.62k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 2.62k, False: 7.96k]
  ------------------
  580|  2.96k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 342, False: 10.2k]
  ------------------
  581|  2.96k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 1.35k, False: 1.61k]
  ------------------
  582|  1.35k|                                        {
  583|  1.35k|                                            return OpCode::SLEI;
  584|  1.35k|                                        }
  585|  1.61k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 936, False: 683]
  ------------------
  586|    936|                                        {
  587|    936|                                            return OpCode::SLEU;
  588|    936|                                        }
  589|    683|                                        break;
  590|       |
  591|    683|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 376, False: 10.2k]
  ------------------
  592|  1.41k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 1.03k, False: 9.55k]
  ------------------
  593|  1.41k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 677, False: 738]
  ------------------
  594|    677|                                        {
  595|    677|                                            return OpCode::SLLI;
  596|    677|                                        }
  597|    738|                                        break;
  598|       |
  599|  2.07k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 2.07k, False: 8.52k]
  ------------------
  600|  3.36k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 1.29k, False: 9.29k]
  ------------------
  601|  3.36k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 774, False: 2.59k]
  ------------------
  602|    774|                                        {
  603|    774|                                            return OpCode::SLTI;
  604|    774|                                        }
  605|  2.59k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 1.41k, False: 1.17k]
  ------------------
  606|  1.41k|                                        {
  607|  1.41k|                                            return OpCode::SLTU;
  608|  1.41k|                                        }
  609|  1.17k|                                        break;
  610|  10.5k|                                }
  611|       |
  612|  4.57k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 295, False: 38.7k]
  ------------------
  613|  9.35k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 4.77k, False: 34.2k]
  ------------------
  614|  9.35k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 5.46k, False: 3.89k]
  ------------------
  615|  5.46k|                                {
  616|  5.46k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 1.54k, False: 3.92k]
  ------------------
  617|  1.54k|                                    {
  618|  1.54k|                                        return OpCode::SNEI;
  619|  1.54k|                                    }
  620|  3.92k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 1.87k, False: 2.04k]
  ------------------
  621|  1.87k|                                    {
  622|  1.87k|                                        return OpCode::SNEU;
  623|  1.87k|                                    }
  624|  5.46k|                                }
  625|  5.93k|                                break;
  626|       |
  627|  5.93k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 1.91k, False: 37.1k]
  ------------------
  628|  3.18k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 1.26k, False: 37.7k]
  ------------------
  629|  3.18k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 1.81k, False: 1.36k]
  |  Branch (629:37): [True: 1.41k, False: 1.77k]
  |  Branch (629:53): [True: 1.41k, False: 406]
  ------------------
  630|  1.41k|                                {
  631|  1.41k|                                    return OpCode::SRAI;
  632|  1.41k|                                }
  633|  1.77k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 1.29k, False: 472]
  |  Branch (633:42): [True: 644, False: 1.12k]
  |  Branch (633:58): [True: 644, False: 655]
  ------------------
  634|    644|                                {
  635|    644|                                    return OpCode::SRLI;
  636|    644|                                }
  637|  1.12k|                                break;
  638|       |
  639|  2.34k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 2.34k, False: 36.6k]
  ------------------
  640|  6.84k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 4.49k, False: 34.5k]
  ------------------
  641|  6.84k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 5.94k, False: 904]
  ------------------
  642|  5.94k|                                {
  643|  5.94k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 645, False: 5.29k]
  ------------------
  644|  5.94k|                                    {
  645|    866|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 866, False: 5.07k]
  ------------------
  646|  1.57k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 708, False: 5.23k]
  ------------------
  647|  1.57k|                                            return OpCode::SUBD;
  648|       |
  649|    578|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 578, False: 5.36k]
  ------------------
  650|    900|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 322, False: 5.61k]
  ------------------
  651|    900|                                            return OpCode::SUBF;
  652|       |
  653|    691|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 691, False: 5.24k]
  ------------------
  654|  1.52k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 835, False: 5.10k]
  ------------------
  655|  1.52k|                                            return OpCode::SUBI;
  656|       |
  657|    838|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 838, False: 5.10k]
  ------------------
  658|  1.29k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 457, False: 5.48k]
  ------------------
  659|  1.29k|                                            return OpCode::SUBU;
  660|  5.94k|                                    }
  661|  5.94k|                                }
  662|  1.54k|                                break;
  663|  39.0k|                        }
  664|  14.5k|                        break;
  665|       |
  666|  14.5k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 522, False: 119k]
  ------------------
  667|  1.71k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 1.19k, False: 118k]
  ------------------
  668|  1.71k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 1.04k, False: 671]
  |  Branch (668:29): [True: 644, False: 1.06k]
  |  Branch (668:45): [True: 838, False: 204]
  |  Branch (668:61): [True: 644, False: 194]
  ------------------
  669|    644|                        {
  670|    644|                            return OpCode::TRAP;
  671|    644|                        }
  672|  1.06k|                        break;
  673|  2.29k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 2.29k, False: 117k]
  ------------------
  674|  3.77k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 1.48k, False: 118k]
  ------------------
  675|  3.77k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 2.95k, False: 815]
  |  Branch (675:29): [True: 904, False: 2.86k]
  |  Branch (675:45): [True: 2.47k, False: 479]
  |  Branch (675:61): [True: 904, False: 1.57k]
  ------------------
  676|    904|                        {
  677|    904|                            return OpCode::XORI;
  678|    904|                        }
  679|  2.86k|                        break;
  680|   119k|                }
  681|  65.6k|                break;
  682|   119k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  71.8k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 71.8k, False: 436k]
  ------------------
  686|  71.8k|                char c1 = token[0];
  687|  71.8k|                char c2 = token[1];
  688|  71.8k|                char c3 = token[2];
  689|  71.8k|                char c4 = token[3];
  690|  71.8k|                char c5 = token[4];
  691|       |
  692|  71.8k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 17.4k, False: 54.4k]
  ------------------
  693|  71.8k|                {
  694|  1.68k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 1.68k, False: 70.1k]
  ------------------
  695|  7.80k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 6.12k, False: 65.7k]
  ------------------
  696|  7.80k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 6.89k, False: 912]
  |  Branch (696:29): [True: 1.09k, False: 6.71k]
  |  Branch (696:45): [True: 6.04k, False: 851]
  |  Branch (696:61): [True: 5.08k, False: 960]
  |  Branch (696:77): [True: 1.09k, False: 3.98k]
  ------------------
  697|  1.09k|                        {
  698|  1.09k|                            return OpCode::ADDUI;
  699|  1.09k|                        }
  700|  6.71k|                        break;
  701|       |
  702|  6.71k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 366, False: 71.4k]
  ------------------
  703|  6.42k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 6.05k, False: 65.7k]
  ------------------
  704|  6.42k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 5.73k, False: 686]
  |  Branch (704:29): [True: 1.50k, False: 4.91k]
  |  Branch (704:45): [True: 4.03k, False: 1.70k]
  |  Branch (704:61): [True: 2.63k, False: 1.40k]
  |  Branch (704:77): [True: 1.50k, False: 1.12k]
  ------------------
  705|  1.50k|                        {
  706|  1.50k|                            return OpCode::DIVUI;
  707|  1.50k|                        }
  708|  4.91k|                        break;
  709|       |
  710|  4.91k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 3.13k, False: 68.7k]
  ------------------
  711|  12.5k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 9.46k, False: 62.3k]
  ------------------
  712|  12.5k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 8.75k, False: 3.84k]
  |  Branch (712:29): [True: 6.92k, False: 5.67k]
  |  Branch (712:45): [True: 7.28k, False: 1.46k]
  |  Branch (712:61): [True: 6.92k, False: 354]
  ------------------
  713|  6.92k|                        {
  714|  6.92k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 1.76k, False: 5.16k]
  ------------------
  715|  6.92k|                            {
  716|    208|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 208, False: 6.72k]
  ------------------
  717|    562|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 354, False: 6.57k]
  ------------------
  718|    562|                                    return OpCode::MULTD;
  719|       |
  720|  1.47k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 1.47k, False: 5.45k]
  ------------------
  721|  2.31k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 835, False: 6.09k]
  ------------------
  722|  2.31k|                                    return OpCode::MULTF;
  723|       |
  724|    450|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 450, False: 6.47k]
  ------------------
  725|  1.09k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 642, False: 6.28k]
  ------------------
  726|  1.09k|                                    return OpCode::MULTI;
  727|       |
  728|    450|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 450, False: 6.47k]
  ------------------
  729|  1.19k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 745, False: 6.18k]
  ------------------
  730|  1.19k|                                    return OpCode::MULTU;
  731|  6.92k|                            }
  732|  6.92k|                        }
  733|  7.43k|                        break;
  734|       |
  735|  11.2k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 11.2k, False: 60.6k]
  ------------------
  736|  27.5k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 16.3k, False: 55.4k]
  ------------------
  737|  27.5k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 1.07k, False: 26.5k]
  ------------------
  738|  27.5k|                        {
  739|  4.35k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 4.35k, False: 23.2k]
  ------------------
  740|  6.57k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 2.22k, False: 25.3k]
  ------------------
  741|  6.57k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 4.35k, False: 2.22k]
  |  Branch (741:37): [True: 852, False: 5.72k]
  |  Branch (741:53): [True: 2.24k, False: 2.11k]
  |  Branch (741:69): [True: 852, False: 1.39k]
  ------------------
  742|    852|                                {
  743|    852|                                    return OpCode::SEQUI;
  744|    852|                                }
  745|  5.72k|                                break;
  746|       |
  747|  5.72k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 2.71k, False: 24.8k]
  ------------------
  748|  6.13k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 3.41k, False: 24.1k]
  ------------------
  749|  6.13k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 2.92k, False: 3.21k]
  |  Branch (749:37): [True: 1.83k, False: 4.30k]
  |  Branch (749:53): [True: 2.07k, False: 844]
  |  Branch (749:69): [True: 1.83k, False: 246]
  ------------------
  750|  1.83k|                                {
  751|  1.83k|                                    return OpCode::SGEUI;
  752|  1.83k|                                }
  753|  4.30k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 3.17k, False: 1.12k]
  |  Branch (753:42): [True: 1.50k, False: 2.79k]
  |  Branch (753:58): [True: 2.52k, False: 654]
  |  Branch (753:74): [True: 1.50k, False: 1.01k]
  ------------------
  754|  1.50k|                                {
  755|  1.50k|                                    return OpCode::SGTUI;
  756|  1.50k|                                }
  757|  2.79k|                                break;
  758|       |
  759|  2.79k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 2.11k, False: 25.4k]
  ------------------
  760|  7.40k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 5.28k, False: 22.3k]
  ------------------
  761|  7.40k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 3.67k, False: 3.73k]
  |  Branch (761:37): [True: 1.57k, False: 5.83k]
  |  Branch (761:53): [True: 2.51k, False: 1.15k]
  |  Branch (761:69): [True: 1.57k, False: 942]
  ------------------
  762|  1.57k|                                {
  763|  1.57k|                                    return OpCode::SLEUI;
  764|  1.57k|                                }
  765|  5.83k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 3.26k, False: 2.56k]
  |  Branch (765:42): [True: 1.19k, False: 4.63k]
  |  Branch (765:58): [True: 2.61k, False: 656]
  |  Branch (765:74): [True: 1.19k, False: 1.41k]
  ------------------
  766|  1.19k|                                {
  767|  1.19k|                                    return OpCode::SLTUI;
  768|  1.19k|                                }
  769|  4.63k|                                break;
  770|       |
  771|  4.63k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 337, False: 27.2k]
  ------------------
  772|  3.01k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 2.67k, False: 24.9k]
  ------------------
  773|  3.01k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 2.63k, False: 374]
  |  Branch (773:37): [True: 1.42k, False: 1.58k]
  |  Branch (773:53): [True: 2.07k, False: 563]
  |  Branch (773:69): [True: 1.42k, False: 647]
  ------------------
  774|  1.42k|                                {
  775|  1.42k|                                    return OpCode::SNEUI;
  776|  1.42k|                                }
  777|  1.58k|                                break;
  778|       |
  779|  1.58k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 1.21k, False: 26.3k]
  ------------------
  780|  3.39k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 2.18k, False: 25.4k]
  ------------------
  781|  3.39k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 2.64k, False: 754]
  |  Branch (781:37): [True: 795, False: 2.60k]
  |  Branch (781:53): [True: 1.67k, False: 968]
  |  Branch (781:69): [True: 795, False: 882]
  ------------------
  782|    795|                                {
  783|    795|                                    return OpCode::SUBUI;
  784|    795|                                }
  785|  2.60k|                                break;
  786|  27.5k|                        }
  787|       |
  788|  18.4k|                        break;
  789|  71.8k|                }
  790|       |
  791|  54.8k|                break;
  792|  71.8k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  54.8k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 36.8k, False: 471k]
  ------------------
  796|  36.8k|                char c1 = token[0];
  797|  36.8k|                char c2 = token[1];
  798|  36.8k|                char c3 = token[2];
  799|  36.8k|                char c4 = token[3];
  800|  36.8k|                char c5 = token[4];
  801|  36.8k|                char c6 = token[5];
  802|       |
  803|  36.8k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 14.5k, False: 22.3k]
  |  Branch (803:21): [True: 12.3k, False: 24.4k]
  |  Branch (803:37): [True: 13.9k, False: 570]
  |  Branch (803:53): [True: 12.3k, False: 1.58k]
  ------------------
  804|  12.3k|                {
  805|  12.3k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 449, False: 11.9k]
  ------------------
  806|  12.3k|                    {
  807|  1.71k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 1.71k, False: 10.6k]
  ------------------
  808|  3.01k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 1.29k, False: 11.0k]
  ------------------
  809|  3.01k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 2.37k, False: 644]
  ------------------
  810|  2.37k|                            {
  811|  2.37k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 932, False: 1.43k]
  ------------------
  812|    932|                                {
  813|    932|                                    return OpCode::CVTD2F;
  814|    932|                                }
  815|  1.43k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 1.02k, False: 410]
  ------------------
  816|  1.02k|                                {
  817|  1.02k|                                    return OpCode::CVTD2I;
  818|  1.02k|                                }
  819|  2.37k|                            }
  820|  1.05k|                            break;
  821|       |
  822|  1.05k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 708, False: 11.6k]
  ------------------
  823|  4.53k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 3.82k, False: 8.55k]
  ------------------
  824|  4.53k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 3.89k, False: 634]
  ------------------
  825|  3.89k|                            {
  826|  3.89k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 2.24k, False: 1.65k]
  ------------------
  827|  2.24k|                                {
  828|  2.24k|                                    return OpCode::CVTF2D;
  829|  2.24k|                                }
  830|  1.65k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 1.01k, False: 639]
  ------------------
  831|  1.01k|                                {
  832|  1.01k|                                    return OpCode::CVTF2I;
  833|  1.01k|                                }
  834|  3.89k|                            }
  835|  1.27k|                            break;
  836|       |
  837|  3.41k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 3.41k, False: 8.96k]
  ------------------
  838|  4.38k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 968, False: 11.4k]
  ------------------
  839|  4.38k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 3.10k, False: 1.28k]
  ------------------
  840|  3.10k|                            {
  841|  3.10k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 900, False: 2.20k]
  ------------------
  842|    900|                                {
  843|    900|                                    return OpCode::CVTI2D;
  844|    900|                                }
  845|  2.20k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 1.17k, False: 1.02k]
  ------------------
  846|  1.17k|                                {
  847|  1.17k|                                    return OpCode::CVTI2F;
  848|  1.17k|                                }
  849|  3.10k|                            }
  850|  12.3k|                    }
  851|  12.3k|                }
  852|  24.4k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 11.0k, False: 13.3k]
  |  Branch (852:26): [True: 3.53k, False: 20.9k]
  |  Branch (852:42): [True: 7.58k, False: 3.51k]
  |  Branch (852:58): [True: 5.97k, False: 1.60k]
  |  Branch (852:74): [True: 5.60k, False: 376]
  ------------------
  853|  24.4k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 4.30k, False: 1.29k]
  |  Branch (853:42): [True: 3.53k, False: 773]
  ------------------
  854|  3.53k|                {
  855|  3.53k|                    return OpCode::MULTUI;
  856|  3.53k|                }
  857|  26.0k|                break;
  858|  36.8k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  26.0k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 17.4k, False: 490k]
  ------------------
  862|  17.4k|                char c1 = token[0];
  863|  17.4k|                char c2 = token[1];
  864|  17.4k|                char c3 = token[2];
  865|  17.4k|                char c4 = token[3];
  866|  17.4k|                char c5 = token[4];
  867|  17.4k|                char c6 = token[5];
  868|  17.4k|                char c7 = token[6];
  869|       |
  870|  17.4k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 8.86k, False: 8.60k]
  |  Branch (870:21): [True: 6.84k, False: 10.6k]
  |  Branch (870:37): [True: 7.13k, False: 1.72k]
  |  Branch (870:53): [True: 6.84k, False: 291]
  ------------------
  871|  6.84k|                {
  872|  6.84k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 3.71k, False: 3.13k]
  |  Branch (872:25): [True: 1.14k, False: 5.70k]
  |  Branch (872:41): [True: 2.66k, False: 1.04k]
  |  Branch (872:54): [True: 2.17k, False: 486]
  |  Branch (872:70): [True: 1.14k, False: 1.03k]
  ------------------
  873|  1.14k|                    {
  874|  1.14k|                        return OpCode::MOVI2FP;
  875|  1.14k|                    }
  876|  5.70k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 3.11k, False: 2.59k]
  |  Branch (876:30): [True: 1.66k, False: 4.03k]
  |  Branch (876:46): [True: 2.36k, False: 754]
  |  Branch (876:62): [True: 1.99k, False: 367]
  |  Branch (876:75): [True: 1.66k, False: 325]
  ------------------
  877|  1.66k|                    {
  878|  1.66k|                        return OpCode::MOVFP2I;
  879|  1.66k|                    }
  880|  6.84k|                }
  881|  14.6k|                break;
  882|  17.4k|            }
  883|       |
  884|  14.6k|            default: {
  ------------------
  |  Branch (884:13): [True: 13.9k, False: 494k]
  ------------------
  885|  13.9k|                break;
  886|  17.4k|            }
  887|   508k|        }
  888|       |
  889|       |        // None found
  890|   352k|        return OpCode::NONE;
  891|   508k|    }
_ZN3dlx3iceEcc:
   17|   724k|    {
   18|   724k|        constexpr const char diff = 'a' - 'A';
   19|   724k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 215k, False: 508k]
  |  Branch (19:28): [True: 209k, False: 298k]
  ------------------
   20|   724k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   557k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  7.21k|    {
  193|  7.21k|        ParseError err;
  194|       |
  195|  7.21k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  7.21k|        err.m_LineNumber                           = line_number;
  197|  7.21k|        err.m_Column                               = column;
  198|  7.21k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  7.21k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  7.21k|        return err;
  202|  7.21k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  7.21k|    {
  207|  7.21k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  7.21k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  7.21k|                                                         actual_type);
  210|  7.21k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    735|    {
  216|    735|        ParseError err;
  217|       |
  218|    735|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    735|        err.m_LineNumber        = line_number;
  220|    735|        err.m_Column            = column;
  221|    735|        err.invalid_number.text = text;
  222|       |
  223|    735|        return err;
  224|    735|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    735|    {
  228|    735|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    735|                                                token.GetColumn().unsafe(), token.GetText());
  230|    735|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      3|    {
  235|      3|        ParseError err;
  236|       |
  237|      3|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      3|        err.m_LineNumber = line_number;
  239|      3|        err.m_Column     = column;
  240|       |
  241|      3|        return err;
  242|      3|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      3|    {
  247|      3|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      3|                                                                     token.GetColumn().unsafe());
  249|      3|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   251k|    {
  255|   251k|        ParseError err;
  256|       |
  257|   251k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   251k|        err.m_LineNumber                   = line_number;
  259|   251k|        err.m_Column                       = column;
  260|   251k|        err.unexpected_token.expected_type = expected_type;
  261|   251k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   251k|        return err;
  264|   251k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   251k|    {
  269|   251k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   251k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   251k|                                                  token.GetType());
  272|   251k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  58.5k|    {
  277|  58.5k|        ParseError err;
  278|       |
  279|  58.5k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  58.5k|        err.m_LineNumber                   = line_number;
  281|  58.5k|        err.m_Column                       = column;
  282|  58.5k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  58.5k|        return err;
  285|  58.5k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|    690|    {
  289|    690|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|    690|                                                    token.GetColumn().unsafe(), token.GetText());
  291|    690|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   113k|    {
  296|   113k|        ParseError err;
  297|       |
  298|   113k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   113k|        err.m_LineNumber                       = line_number;
  300|   113k|        err.m_Column                           = column;
  301|   113k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   113k|        return err;
  304|   113k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   113k|    {
  309|   113k|        return ConstructInvalidLabelIdentifierParseError(
  310|   113k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   113k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  26.1k|    {
  317|  26.1k|        ParseError err;
  318|       |
  319|  26.1k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  26.1k|        err.m_LineNumber                     = line_number;
  321|  26.1k|        err.m_Column                         = column;
  322|  26.1k|        err.label_already_defined.label_name = label_name;
  323|  26.1k|        err.label_already_defined.at_line    = at_line;
  324|  26.1k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  26.1k|        return err;
  327|  26.1k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  26.1k|    {
  332|  26.1k|        return ConstructLabelAlreadyDefinedParseError(
  333|  26.1k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  26.1k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  26.1k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|  62.8k|    {
  340|  62.8k|        ParseError err;
  341|       |
  342|  62.8k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|  62.8k|        err.m_LineNumber = line_number;
  344|  62.8k|        err.m_Column     = column;
  345|       |
  346|  62.8k|        return err;
  347|  62.8k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|  62.8k|    {
  352|  62.8k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|  62.8k|                                                        token.GetColumn().unsafe());
  354|  62.8k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  7.93k|    {
  360|  7.93k|        ParseError err;
  361|       |
  362|  7.93k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  7.93k|        err.m_LineNumber               = line_number;
  364|  7.93k|        err.m_Column                   = column;
  365|  7.93k|        err.too_few_arguments.required = required;
  366|  7.93k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  7.93k|        return err;
  369|  7.93k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  7.93k|    {
  374|  7.93k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  7.93k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  7.93k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  15.4k|    {
  381|  15.4k|        ParseError err;
  382|       |
  383|  15.4k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  15.4k|        err.m_LineNumber           = line_number;
  385|  15.4k|        err.m_Column               = column;
  386|  15.4k|        err.empty_label.label_name = label_name;
  387|       |
  388|  15.4k|        return err;
  389|  15.4k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  15.4k|    {
  393|  15.4k|        return ConstructEmptyLabelParseError(
  394|  15.4k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  15.4k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 13.0k, False: 2.48k]
  ------------------
  396|  13.0k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  15.4k|                        token.GetText());
  398|  15.4k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  13.9k|    {
  403|  13.9k|        ParseError err;
  404|       |
  405|  13.9k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  13.9k|        err.m_LineNumber = line_number;
  407|  13.9k|        err.m_Column     = column;
  408|       |
  409|  13.9k|        return err;
  410|  13.9k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  13.9k|    {
  414|  13.9k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  13.9k|                                               token.GetColumn().unsafe());
  416|  13.9k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   557k|    {
   19|   557k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   557k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  5.69k|    {
  182|  5.69k|        ParsedProgram program;
  183|       |
  184|  5.69k|        program.m_Tokens = tokens;
  185|       |
  186|  5.69k|        phi::boolean line_has_instruction{false};
  187|  5.69k|        phi::usize   label_count{0u};
  188|       |
  189|   623k|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 617k, False: 5.69k]
  ------------------
  190|   617k|        {
  191|   617k|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|   617k|            switch (current_token.GetType())
  196|   617k|            {
  197|       |                // Ignore comments
  198|  3.21k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 3.21k, False: 614k]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  3.21k|                    break;
  201|       |
  202|  63.6k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 63.6k, False: 553k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|  63.6k|                    line_has_instruction = false;
  205|  63.6k|                    break;
  206|       |
  207|   251k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 251k, False: 366k]
  ------------------
  208|   251k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 44.7k, False: 206k]
  ------------------
  209|  44.7k|                    {
  210|  44.7k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  44.7k|                                current_token, Token::Type::NewLine));
  212|  44.7k|                        break;
  213|  44.7k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   206k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 72.7k, False: 133k]
  ------------------
  218|  72.7k|                    {
  219|  72.7k|                        program.AddParseError(
  220|  72.7k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|  72.7k|                        break;
  222|  72.7k|                    }
  223|       |
  224|   133k|                    std::string_view label_name = current_token.GetText();
  225|   133k|                    label_name.remove_suffix(1);
  226|       |
  227|   133k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 57.8k, False: 76.1k]
  ------------------
  228|  57.8k|                    {
  229|  57.8k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  57.8k|                                current_token.GetLineNumber().unsafe(),
  231|  57.8k|                                current_token.GetColumn().unsafe(), label_name));
  232|  57.8k|                        break;
  233|  57.8k|                    }
  234|       |
  235|  76.1k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 33.3k, False: 42.7k]
  ------------------
  236|  33.3k|                    {
  237|  33.3k|                        program.AddParseError(
  238|  33.3k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  33.3k|                        break;
  240|  33.3k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  42.7k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 26.1k, False: 16.5k]
  ------------------
  244|  26.1k|                    {
  245|       |                        // Find first defintions of label
  246|  26.1k|                        const Token* first_label_definition =
  247|  26.1k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  26.1k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  26.1k|                                    {
  250|  26.1k|                                        std::string_view token_label_name = t.GetText();
  251|  26.1k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  26.1k|                                        if (token_label_name == label_name)
  254|  26.1k|                                        {
  255|  26.1k|                                            return true;
  256|  26.1k|                                        }
  257|  26.1k|                                    }
  258|       |
  259|  26.1k|                                    return false;
  260|  26.1k|                                });
  261|       |
  262|  26.1k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  26.1k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  26.1k|                                current_token, *first_label_definition));
  266|  26.1k|                        break;
  267|  26.1k|                    }
  268|       |
  269|  16.5k|                    program.m_JumpData[label_name] =
  270|  16.5k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  16.5k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  16.5k|                    break;
  277|  42.7k|                }
  278|       |
  279|   100k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 100k, False: 516k]
  ------------------
  280|   100k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 62.8k, False: 37.9k]
  ------------------
  281|  62.8k|                    {
  282|  62.8k|                        program.AddParseError(
  283|  62.8k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|  62.8k|                        break;
  285|  62.8k|                    }
  286|       |
  287|  37.9k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  37.9k|                    PHI_ASSERT(current_token.HasHint());
  291|  37.9k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  37.9k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  37.9k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  37.9k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  37.9k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  37.9k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  37.9k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  37.9k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  37.9k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|  82.2k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 76.2k, False: 5.96k]
  ------------------
  313|  76.2k|                    {
  314|       |                        // Get next token
  315|  76.2k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 771, False: 75.4k]
  ------------------
  316|    771|                        {
  317|    771|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    771|                                    current_token, number_of_argument_required.unsafe(),
  319|    771|                                    argument_num.unsafe()));
  320|    771|                            break;
  321|    771|                        }
  322|       |
  323|  75.4k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|  75.4k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 34.9k, False: 40.5k]
  ------------------
  327|  34.9k|                        {
  328|  34.9k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 13.9k, False: 20.9k]
  ------------------
  329|  13.9k|                            {
  330|  13.9k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  13.9k|                            }
  332|       |
  333|  34.9k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  34.9k|                            continue;
  336|  34.9k|                        }
  337|       |
  338|  40.5k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 7.16k, False: 33.4k]
  ------------------
  339|  7.16k|                        {
  340|  7.16k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  7.16k|                                    token, number_of_argument_required.unsafe(),
  342|  7.16k|                                    argument_num.unsafe()));
  343|  7.16k|                            break;
  344|  7.16k|                        }
  345|       |
  346|  33.4k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  33.4k|                                parse_instruction_argument(
  348|  33.4k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  33.4k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 24.0k, False: 9.37k]
  ------------------
  350|  24.0k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  24.0k|                            break;
  353|  24.0k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  9.37k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  9.37k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  9.37k|                        argument_num++;
  360|  9.37k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  9.37k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  37.9k|                    program.m_Instructions.emplace_back(instruction);
  368|  37.9k|                    line_has_instruction = true;
  369|  37.9k|                    break;
  370|   100k|                }
  371|       |
  372|   198k|                default:
  ------------------
  |  Branch (372:17): [True: 198k, False: 419k]
  ------------------
  373|   198k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   198k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 95.0k, False: 103k]
  ------------------
  375|  95.0k|                    {
  376|  95.0k|                        expected_token_type = Token::Type::NewLine;
  377|  95.0k|                    }
  378|       |
  379|   198k|                    program.AddParseError(
  380|   198k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   198k|                    break;
  382|   617k|            }
  383|   617k|        }
  384|       |
  385|       |        // Check for empty labels
  386|  5.69k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 1.31k, False: 4.38k]
  ------------------
  387|  1.31k|        {
  388|  20.0k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 18.6k, False: 1.31k]
  ------------------
  389|  18.6k|            {
  390|  18.6k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  18.6k|                const Token& token = *it;
  393|  18.6k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 15.4k, False: 3.19k]
  ------------------
  394|  15.4k|                {
  395|  15.4k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  15.4k|                    --label_count;
  397|  15.4k|                }
  398|  18.6k|            }
  399|  1.31k|        }
  400|       |
  401|  5.69k|        return program;
  402|  5.69k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  5.69k|    {
  406|  5.69k|        TokenStream tokens = Tokenize(source);
  407|  5.69k|        return Parse(tokens);
  408|  5.69k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  33.4k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  33.4k|        switch (token.GetType())
   38|  33.4k|        {
   39|  4.29k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 4.29k, False: 29.1k]
  ------------------
   40|  4.29k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 1.59k, False: 2.70k]
  ------------------
   41|  4.29k|                                          ArgumentType::AddressDisplacement))
   42|  1.59k|                {
   43|  1.59k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  1.59k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  1.59k|                    return {};
   47|  1.59k|                }
   48|       |
   49|       |                // Get address displacement
   50|  2.70k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  2.70k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  2.70k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 3, False: 2.69k]
  ------------------
   55|      3|                {
   56|      3|                    program.AddParseError(
   57|      3|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      3|                    return {};
   59|      3|                }
   60|       |
   61|  2.69k|                auto         it           = tokens.current_position();
   62|  2.69k|                const Token& first_token  = tokens.consume();
   63|  2.69k|                const Token& second_token = tokens.consume();
   64|  2.69k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  2.69k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 847, False: 1.85k]
  ------------------
   67|    847|                {
   68|    847|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|    847|                            first_token, Token::Type::OpenBracket));
   70|    847|                    return {};
   71|    847|                }
   72|       |
   73|       |                // Second token is the register
   74|  1.85k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 374, False: 1.47k]
  ------------------
   75|    374|                {
   76|    374|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|    374|                            second_token, Token::Type::RegisterInt));
   78|    374|                    return {};
   79|    374|                }
   80|       |
   81|  1.47k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 770, False: 707]
  ------------------
   82|    770|                {
   83|    770|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|    770|                            third_token, Token::Type::ClosingBracket));
   85|    770|                    return {};
   86|    770|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|    707|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|    707|                return ConstructInstructionArgumentAddressDisplacement(
   95|    707|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|  1.47k|            }
   97|  2.16k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 2.16k, False: 31.2k]
  ------------------
   98|  2.16k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 450, False: 1.71k]
  ------------------
   99|    450|                {
  100|    450|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|    450|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|    450|                    return {};
  103|    450|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  1.71k|                return ConstructInstructionArgumentRegisterInt(
  109|  1.71k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  2.16k|            }
  111|  3.44k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 3.44k, False: 29.9k]
  ------------------
  112|  3.44k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 450, False: 2.99k]
  ------------------
  113|    450|                {
  114|    450|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|    450|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|    450|                    return {};
  117|    450|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  2.99k|                return ConstructInstructionArgumentRegisterFloat(
  123|  2.99k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  3.44k|            }
  125|    690|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 690, False: 32.7k]
  ------------------
  126|    690|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|    690|                return {};
  129|  3.44k|            }
  130|  13.9k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 13.9k, False: 19.4k]
  ------------------
  131|       |                // Parse as Label
  132|  13.9k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 3.44k, False: 10.5k]
  ------------------
  133|  3.44k|                {
  134|  3.44k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  3.44k|                            token, expected_argument_type, ArgumentType::Label));
  136|  3.44k|                    return {};
  137|  3.44k|                }
  138|       |
  139|  10.5k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 10.5k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  10.5k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 7.18k, False: 3.33k]
  ------------------
  146|  7.18k|                {
  147|  7.18k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  7.18k|                    return {};
  149|  7.18k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  3.33k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  10.5k|            }
  155|  2.63k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 2.63k, False: 30.7k]
  ------------------
  156|  2.63k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 1.27k, False: 1.36k]
  ------------------
  157|  1.27k|                {
  158|  1.27k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  1.27k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  1.27k|                    return {};
  161|  1.27k|                }
  162|       |
  163|  1.36k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 625, False: 735]
  ------------------
  164|    625|                {
  165|    625|                    return ConstructInstructionArgumentImmediateValue(
  166|    625|                            static_cast<std::int16_t>(token.GetHint()));
  167|    625|                }
  168|       |
  169|    735|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    735|                return {};
  171|  1.36k|            }
  172|       |
  173|  6.21k|            default:
  ------------------
  |  Branch (173:13): [True: 6.21k, False: 27.1k]
  ------------------
  174|  6.21k|                program.AddParseError(
  175|  6.21k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  6.21k|                return {};
  177|  33.4k|        }
  178|  33.4k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|   397k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   397k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 274k, False: 123k]
  ------------------
  249|   274k|                                    {
  250|   274k|                                        std::string_view token_label_name = t.GetText();
  251|   274k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   274k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 26.1k, False: 247k]
  ------------------
  254|  26.1k|                                        {
  255|  26.1k|                                            return true;
  256|  26.1k|                                        }
  257|   274k|                                    }
  258|       |
  259|   371k|                                    return false;
  260|   397k|                                });

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   525k|    {
   14|   525k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 90.3k, False: 435k]
  ------------------
   15|  90.3k|        {
   16|  90.3k|            char first_char = token[0];
   17|  90.3k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 480, False: 89.8k]
  |  Branch (17:38): [True: 8.78k, False: 81.0k]
  ------------------
   18|  9.26k|            {
   19|  9.26k|                char second_char = token[1];
   20|  9.26k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 8.89k, False: 374]
  |  Branch (20:43): [True: 7.78k, False: 1.10k]
  ------------------
   21|  7.78k|                {
   22|  7.78k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  7.78k|                }
   24|  9.26k|            }
   25|  90.3k|        }
   26|   435k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 106k, False: 329k]
  ------------------
   27|   106k|        {
   28|   106k|            char first_char = token[0];
   29|   106k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 262, False: 105k]
  |  Branch (29:38): [True: 8.28k, False: 97.6k]
  ------------------
   30|  8.54k|            {
   31|  8.54k|                char second_char = token[1];
   32|  8.54k|                char third_char  = token[2];
   33|       |
   34|  8.54k|                switch (second_char)
   35|  8.54k|                {
   36|  2.63k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 2.63k, False: 5.91k]
  ------------------
   37|  2.63k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 2.17k, False: 457]
  |  Branch (37:50): [True: 973, False: 1.20k]
  ------------------
   38|    973|                        {
   39|    973|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|    973|                        }
   41|  1.65k|                        break;
   42|  2.63k|                    }
   43|  2.67k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 2.67k, False: 5.86k]
  ------------------
   44|  2.67k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 1.58k, False: 1.09k]
  |  Branch (44:50): [True: 456, False: 1.12k]
  ------------------
   45|    456|                        {
   46|    456|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|    456|                        }
   48|  2.22k|                        break;
   49|  2.67k|                    }
   50|  2.35k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 2.35k, False: 6.18k]
  ------------------
   51|  2.35k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 450, False: 1.90k]
  |  Branch (51:50): [True: 322, False: 1.58k]
  ------------------
   52|    772|                        {
   53|    772|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|    772|                        }
   55|  1.58k|                        break;
   56|  2.35k|                    }
   57|  1.58k|                    default: {
  ------------------
  |  Branch (57:21): [True: 880, False: 7.66k]
  ------------------
   58|    880|                        break;
   59|  2.35k|                    }
   60|  8.54k|                }
   61|  8.54k|            }
   62|   106k|        }
   63|       |
   64|   515k|        return IntRegisterID::None;
   65|   525k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   515k|    {
   69|   515k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 82.5k, False: 432k]
  ------------------
   70|  82.5k|        {
   71|  82.5k|            char first_char = token[0];
   72|  82.5k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 5.55k, False: 76.9k]
  |  Branch (72:38): [True: 2.89k, False: 74.0k]
  ------------------
   73|  8.44k|            {
   74|  8.44k|                char second_char = token[1];
   75|  8.44k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 7.72k, False: 723]
  |  Branch (75:43): [True: 4.61k, False: 3.10k]
  ------------------
   76|  4.61k|                {
   77|  4.61k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  4.61k|                }
   79|  8.44k|            }
   80|  82.5k|        }
   81|   432k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 103k, False: 329k]
  ------------------
   82|   103k|        {
   83|   103k|            char first_char = token[0];
   84|   103k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 4.83k, False: 99.1k]
  |  Branch (84:38): [True: 3.07k, False: 96.0k]
  ------------------
   85|  7.90k|            {
   86|  7.90k|                char second_char = token[1];
   87|  7.90k|                char third_char  = token[2];
   88|       |
   89|  7.90k|                switch (second_char)
   90|  7.90k|                {
   91|  1.07k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 1.07k, False: 6.83k]
  ------------------
   92|  1.07k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 810, False: 266]
  |  Branch (92:50): [True: 459, False: 351]
  ------------------
   93|    459|                        {
   94|    459|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|    459|                        }
   96|    617|                        break;
   97|  1.07k|                    }
   98|    904|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 904, False: 7.00k]
  ------------------
   99|    904|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 692, False: 212]
  |  Branch (99:50): [True: 219, False: 473]
  ------------------
  100|    219|                        {
  101|    219|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|    219|                        }
  103|    685|                        break;
  104|    904|                    }
  105|  3.02k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 3.02k, False: 4.88k]
  ------------------
  106|  3.02k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 1.34k, False: 1.67k]
  |  Branch (106:50): [True: 578, False: 1.10k]
  ------------------
  107|  1.92k|                        {
  108|  1.92k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  1.92k|                        }
  110|  1.10k|                        break;
  111|  3.02k|                    }
  112|  2.90k|                    default: {
  ------------------
  |  Branch (112:21): [True: 2.90k, False: 5.00k]
  ------------------
  113|  2.90k|                        break;
  114|  3.02k|                    }
  115|  7.90k|                }
  116|  7.90k|            }
  117|   103k|        }
  118|       |
  119|   508k|        return FloatRegisterID::None;
  120|   515k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   469k|    {
  124|   469k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 96.9k, False: 372k]
  ------------------
  125|  96.9k|        {
  126|  96.9k|            char c1 = token[0];
  127|  96.9k|            char c2 = token[1];
  128|  96.9k|            char c3 = token[2];
  129|  96.9k|            char c4 = token[3];
  130|       |
  131|  96.9k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 3.09k, False: 93.8k]
  |  Branch (131:34): [True: 2.89k, False: 90.9k]
  |  Branch (131:49): [True: 2.01k, False: 3.97k]
  |  Branch (131:62): [True: 452, False: 3.52k]
  ------------------
  132|  96.9k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 747, False: 1.71k]
  |  Branch (132:34): [True: 1.19k, False: 527]
  |  Branch (132:49): [True: 226, False: 1.71k]
  |  Branch (132:62): [True: 1.12k, False: 587]
  ------------------
  133|  96.9k|        }
  134|       |
  135|   372k|        return false;
  136|   469k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|   576k|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   124k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  1.44M|    {
   41|  1.44M|        return m_Type;
   42|  1.44M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   621k|    {
   51|   621k|        return m_LineNumber;
   52|   621k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   583k|    {
   56|   583k|        return m_Column;
   57|   583k|    }
_ZNK3dlx5Token7GetTextEv:
   65|   824k|    {
   66|   824k|        return m_Text;
   67|   824k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  41.9k|    {
   80|  41.9k|        return m_HasHint;
   81|  41.9k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  46.6k|    {
   85|  46.6k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  46.6k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  46.6k|                   m_Type == Type::ImmediateInteger);
   88|  46.6k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  46.6k|        return m_Hint;
   91|  46.6k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  5.69k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  5.69k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  5.69k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  2.70k|    {
   51|  2.70k|        auto it = m_Iterator;
   52|  10.7k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 8.09k, False: 2.69k]
  ------------------
   53|  8.09k|        {
   54|  8.09k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 3, False: 8.09k]
  ------------------
   55|      3|            {
   56|      3|                return false;
   57|      3|            }
   58|  8.09k|        }
   59|       |
   60|  2.69k|        return true;
   61|  2.70k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|   699k|    {
   65|   699k|        return m_Iterator != m_Tokens.end();
   66|   699k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|   701k|    {
   70|   701k|        return m_Iterator == m_Tokens.end();
   71|   701k|    }
_ZN3dlx11TokenStream7consumeEv:
   84|   701k|    {
   85|   701k|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|   701k|        return *m_Iterator++;
   91|   701k|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  2.69k|    {
  164|  2.69k|        return m_Iterator;
  165|  2.69k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|    707|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|    707|        m_Iterator = it;
  179|    707|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  1.31k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  1.31k|        return m_Tokens.rbegin();
  224|  1.31k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  18.6k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  18.6k|        return m_Tokens.rend();
  233|  18.6k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  5.69k|    {
   63|  5.69k|        TokenStream tokens;
   64|       |
   65|  5.69k|        std::string_view current_token;
   66|       |
   67|  5.69k|        phi::u64 current_line_number{1u};
   68|  5.69k|        phi::u64 current_column{1u};
   69|  5.69k|        phi::u64 token_begin{0u};
   70|       |
   71|  5.69k|        phi::boolean parsing_comment{false};
   72|       |
   73|  1.82M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 1.81M, False: 5.69k]
  ------------------
   74|  1.81M|        {
   75|  1.81M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  1.81M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 71.0k, False: 1.74M]
  ------------------
   78|  71.0k|            {
   79|  71.0k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 12.4k, False: 58.5k]
  ------------------
   80|  12.4k|                {
   81|       |                    // Skip empty lines
   82|  12.4k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  12.4k|                                        current_line_number, current_column);
   84|       |
   85|  12.4k|                    parsing_comment = false;
   86|  12.4k|                    current_line_number += 1u;
   87|  12.4k|                    current_column = 1u;
   88|  12.4k|                    continue;
   89|  12.4k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|  58.5k|                tokens.emplace_back(
   93|  58.5k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|  58.5k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|  58.5k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|  58.5k|                                    current_line_number, current_column);
   98|       |
   99|  58.5k|                current_token   = std::string_view{};
  100|  58.5k|                parsing_comment = false;
  101|  58.5k|                current_line_number += 1u;
  102|  58.5k|                current_column = 0u;
  103|  58.5k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  1.74M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 1.34k, False: 1.74M]
  |  Branch (105:34): [True: 3.05k, False: 1.74M]
  ------------------
  106|  4.39k|            {
  107|  4.39k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 1.77k, False: 2.62k]
  ------------------
  108|  1.77k|                {
  109|  1.77k|                    token_begin = i;
  110|  1.77k|                }
  111|  2.62k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 2.11k, False: 509]
  ------------------
  112|  2.11k|                {
  113|  2.11k|                    tokens.emplace_back(ParseToken(
  114|  2.11k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  2.11k|                            current_line_number, current_column - current_token.length()));
  116|  2.11k|                    token_begin   = i;
  117|  2.11k|                    current_token = std::string_view{};
  118|  2.11k|                }
  119|       |
  120|  4.39k|                parsing_comment = true;
  121|  4.39k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  4.39k|            }
  123|  1.74M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 10.6k, False: 1.73M]
  ------------------
  124|  10.6k|            {
  125|       |                // simply append the character
  126|  10.6k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|  10.6k|            }
  128|  1.73M|            else
  129|  1.73M|            {
  130|       |                // Not parsing a comment
  131|  1.73M|                switch (c)
  132|  1.73M|                {
  133|  23.8k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 23.8k, False: 1.70M]
  ------------------
  134|  39.7k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 15.8k, False: 1.71M]
  ------------------
  135|  65.2k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 25.5k, False: 1.70M]
  ------------------
  136|  65.2k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 13.9k, False: 51.3k]
  ------------------
  137|  13.9k|                        {
  138|  13.9k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  13.9k|                            continue;
  141|  13.9k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|  51.3k|                        tokens.emplace_back(ParseToken(
  145|  51.3k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|  51.3k|                                current_line_number, current_column - current_token.length()));
  147|  51.3k|                        current_token = std::string_view{};
  148|  51.3k|                        break;
  149|   167k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 167k, False: 1.56M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|   167k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 147k, False: 20.1k]
  ------------------
  152|   147k|                        {
  153|   147k|                            current_token =
  154|   147k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|   147k|                            tokens.emplace_back(ParseToken(
  156|   147k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|   147k|                                    current_line_number,
  158|   147k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|   147k|                            current_token = std::string_view{};
  161|   147k|                        }
  162|  20.1k|                        else
  163|  20.1k|                        {
  164|       |                            // Orphan colon
  165|  20.1k|                            token_begin = i;
  166|       |
  167|  20.1k|                            tokens.emplace_back(Token::Type::Colon,
  168|  20.1k|                                                source.substr(token_begin.unsafe(), 1),
  169|  20.1k|                                                current_line_number, current_column);
  170|  20.1k|                        }
  171|   167k|                        break;
  172|   112k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 112k, False: 1.61M]
  ------------------
  173|   205k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 92.6k, False: 1.63M]
  ------------------
  174|   212k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 6.60k, False: 1.72M]
  ------------------
  175|   212k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 134k, False: 77.3k]
  ------------------
  176|   134k|                        {
  177|   134k|                            tokens.emplace_back(ParseToken(
  178|   134k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   134k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   134k|                            current_token = std::string_view{};
  182|   134k|                        }
  183|       |
  184|   212k|                        Token::Type type;
  185|   212k|                        switch (c)
  186|   212k|                        {
  187|   112k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 112k, False: 99.2k]
  ------------------
  188|   112k|                                type = Token::Type::Comma;
  189|   112k|                                break;
  190|  92.6k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 92.6k, False: 119k]
  ------------------
  191|  92.6k|                                type = Token::Type::OpenBracket;
  192|  92.6k|                                break;
  193|  6.60k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 6.60k, False: 205k]
  ------------------
  194|  6.60k|                                type = Token::Type::ClosingBracket;
  195|  6.60k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 212k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|   212k|#endif
  201|   212k|                        }
  202|       |
  203|   212k|                        token_begin = i;
  204|       |
  205|   212k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|   212k|                                            current_line_number, current_column);
  207|   212k|                        break;
  208|       |
  209|  1.28M|                    default:
  ------------------
  |  Branch (209:21): [True: 1.28M, False: 444k]
  ------------------
  210|  1.28M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 394k, False: 892k]
  ------------------
  211|   394k|                        {
  212|   394k|                            token_begin = i;
  213|   394k|                        }
  214|       |
  215|       |                        // simply append the character
  216|  1.28M|                        current_token =
  217|  1.28M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  1.73M|                }
  219|  1.73M|            }
  220|       |
  221|  1.79M|            current_column += 1u;
  222|  1.79M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  5.69k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 4.14k, False: 1.55k]
  ------------------
  226|  4.14k|        {
  227|  4.14k|            tokens.emplace_back(
  228|  4.14k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  4.14k|                               current_line_number, current_column - current_token.length()));
  230|  4.14k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  5.69k|        tokens.finalize();
  234|       |
  235|  5.69k|        return tokens;
  236|  5.69k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   398k|    {
   11|   398k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 4.49k, False: 393k]
  |  Branch (11:35): [True: 3.25k, False: 1.24k]
  ------------------
   12|  3.25k|        {
   13|  3.25k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  3.25k|            if (number)
  ------------------
  |  Branch (15:17): [True: 935, False: 2.31k]
  ------------------
   16|    935|            {
   17|    935|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|    935|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|    935|            }
   20|       |
   21|  2.31k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  3.25k|        }
   23|       |
   24|   394k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 1.15k, False: 393k]
  |  Branch (24:35): [True: 2.73k, False: 390k]
  ------------------
   25|  3.88k|        {
   26|  3.88k|            return {Token::Type::Comment, token, line_number, column};
   27|  3.88k|        }
   28|       |
   29|   390k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 8.79k, False: 382k]
  ------------------
   30|  8.79k|        {
   31|  8.79k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  8.79k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  8.79k|        }
   34|       |
   35|   382k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 1.11k, False: 380k]
  ------------------
   36|  1.11k|        {
   37|  1.11k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  1.11k|        }
   39|       |
   40|   380k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 6.06k, False: 374k]
  ------------------
   41|  6.06k|        {
   42|  6.06k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  6.06k|                    static_cast<std::uint32_t>(id)};
   44|  6.06k|        }
   45|       |
   46|   374k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 6.28k, False: 368k]
  ------------------
   47|  6.28k|        {
   48|  6.28k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  6.28k|                    static_cast<std::uint32_t>(id)};
   50|  6.28k|        }
   51|       |
   52|   368k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 102k, False: 265k]
  ------------------
   53|   102k|        {
   54|   102k|            return {Token::Type::OpCode, token, line_number, column,
   55|   102k|                    static_cast<std::uint32_t>(opcode)};
   56|   102k|        }
   57|       |
   58|   265k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   368k|    }

LLVMFuzzerTestOneInput:
    8|  5.69k|{
    9|  5.69k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   10|       |
   11|       |    // Parse it
   12|  5.69k|    dlx::Parser::Parse(source);
   13|       |
   14|  5.69k|    return 0;
   15|  5.69k|}


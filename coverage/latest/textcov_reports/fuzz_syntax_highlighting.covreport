_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  195|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  200|  42.9k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  238|  8.58k|    {
  239|  8.58k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (239:13): [True: 3.92k, False: 4.66k]
  ------------------
  240|  3.92k|        {
  241|  3.92k|            return m_Line < other.m_Line;
  242|  3.92k|        }
  243|       |
  244|  4.66k|        return m_Column <= other.m_Column;
  245|  8.58k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  249|      1|    {
  250|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (250:13): [True: 0, False: 1]
  ------------------
  251|      0|        {
  252|      0|            return m_Line > other.m_Line;
  253|      0|        }
  254|       |
  255|      1|        return m_Column >= other.m_Column;
  256|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  263|  2.82M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  291|      1|    {
  292|      1|        Colorize();
  293|      1|        m_Lines.push_back(Line());
  294|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  297|      1|    {
  298|      1|        VerifyInternalState();
  299|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  347|  8.58k|    {
  348|  8.58k|        m_ErrorMarkers.clear();
  349|  8.58k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  412|  8.58k|    {
  413|  8.58k|        m_Breakpoints.clear();
  414|  8.58k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  492|  8.58k|    {
  493|  8.58k|        m_Lines.clear();
  494|  8.58k|        ResetState();
  495|  8.58k|        m_Lines.emplace_back(Line());
  496|       |
  497|  8.58k|        for (const char character : text)
  ------------------
  |  Branch (497:35): [True: 4.60M, False: 8.58k]
  ------------------
  498|  4.60M|        {
  499|  4.60M|            if (character == '\r' ||
  ------------------
  |  Branch (499:17): [True: 8.50k, False: 4.59M]
  |  Branch (499:17): [True: 1.56M, False: 3.03M]
  ------------------
  500|  4.60M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (500:18): [True: 1.83M, False: 2.76M]
  |  Branch (500:48): [True: 1.61M, False: 212k]
  |  Branch (500:69): [True: 1.55M, False: 65.1k]
  ------------------
  501|  1.56M|            {
  502|       |                // ignore the carriage return character and control characters
  503|  1.56M|            }
  504|  3.03M|            else if (character == '\n')
  ------------------
  |  Branch (504:22): [True: 212k, False: 2.82M]
  ------------------
  505|   212k|            {
  506|   212k|                m_Lines.emplace_back(Line());
  507|   212k|            }
  508|  2.82M|            else
  509|  2.82M|            {
  510|  2.82M|                m_Lines.back().emplace_back(
  511|  2.82M|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  512|  2.82M|            }
  513|  4.60M|        }
  514|       |
  515|  8.58k|        m_TextChanged = true;
  516|  8.58k|        m_ScrollToTop = true;
  517|       |
  518|  8.58k|        m_UndoBuffer.clear();
  519|  8.58k|        m_UndoIndex = 0u;
  520|       |
  521|  8.58k|        Colorize();
  522|  8.58k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  525|  8.58k|    {
  526|  8.58k|        const phi::u32 max_line = GetMaxLineNumber();
  527|       |
  528|  8.58k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  529|  8.58k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1501|      1|    {
 1502|       |        // Lines should never be empty
 1503|      1|        PHI_ASSERT(!m_Lines.empty());
 1504|       |
 1505|       |        // Verify Selection is still in a valid state
 1506|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1507|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1508|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1509|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1510|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1511|       |
 1512|       |        // Verify cursor position
 1513|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1514|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1515|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1516|       |
 1517|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1518|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1519|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1520|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1521|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1522|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1523|       |#endif
 1524|       |
 1525|       |        // Verify that all breakpoints are on existing lines
 1526|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1526:35): [True: 0, False: 1]
  ------------------
 1527|      0|        {
 1528|      0|            PHI_ASSERT(break_point != 0u);
 1529|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1530|      0|        }
 1531|       |
 1532|       |        // Verify that all error markers are on existing lines
 1533|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1533:34): [True: 0, False: 1]
  ------------------
 1534|      0|        {
 1535|      0|            const phi::u32 line_number = error_marker.first;
 1536|       |
 1537|      0|            PHI_ASSERT(line_number != 0u);
 1538|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1539|      0|        }
 1540|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1543|      1|    {
 1544|      1|        constexpr const static Palette palette = {{
 1545|      1|                0xff7f7f7f, // Default
 1546|      1|                0xffd69c56, // OpCode
 1547|      1|                0xff00ff00, // Register
 1548|      1|                0xff7070e0, // IntegerLiteral
 1549|      1|                0xff206020, // Comment
 1550|      1|                0xff101010, // Background
 1551|      1|                0xffe0e0e0, // Cursor
 1552|      1|                0x80a06020, // Selection
 1553|      1|                0x800020ff, // ErrorMarker
 1554|      1|                0x40f08000, // Breakpoint
 1555|      1|                0xff707000, // Line number
 1556|      1|                0x40000000, // Current line fill
 1557|      1|                0x40808080, // Current line fill (inactive)
 1558|      1|                0x40a0a0a0, // Current line edge
 1559|      1|        }};
 1560|       |
 1561|      1|        return palette;
 1562|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1729|  8.58k|    {
 1730|       |        // TODO: This is quite unreadable
 1731|  8.58k|        const phi::u32 to_line =
 1732|  8.58k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1732:17): [True: 8.58k, False: 0]
  ------------------
 1733|  8.58k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1734|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1735|       |
 1736|  8.58k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1737|  8.58k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1738|  8.58k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1739|  8.58k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1740|  8.58k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1846|  8.58k|    {
 1847|  8.58k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1848|  8.58k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1849|  8.58k|        PHI_ASSERT(start <= end);
 1850|       |
 1851|  8.58k|        std::string result;
 1852|       |
 1853|  8.58k|        phi::u32   lstart = start.m_Line;
 1854|  8.58k|        phi::u32   lend   = end.m_Line;
 1855|  8.58k|        phi::u32   istart = GetCharacterIndex(start);
 1856|  8.58k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1857|  8.58k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1858|  8.58k|        phi::usize size   = 0u;
 1859|       |
 1860|   229k|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1860:35): [True: 220k, False: 8.58k]
  ------------------
 1861|   220k|        {
 1862|   220k|            PHI_ASSERT(i < m_Lines.size());
 1863|   220k|            size += m_Lines[i.unsafe()].size();
 1864|   220k|        }
 1865|       |
 1866|  8.58k|        result.reserve((size + size / 8u).unsafe());
 1867|       |
 1868|  3.04M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1868:16): [True: 2.18M, False: 861k]
  |  Branch (1868:16): [True: 3.03M, False: 8.58k]
  |  Branch (1868:33): [True: 852k, False: 8.58k]
  ------------------
 1869|  3.03M|        {
 1870|  3.03M|            PHI_ASSERT(lstart < m_Lines.size());
 1871|       |
 1872|  3.03M|            const Line& line = m_Lines[lstart.unsafe()];
 1873|  3.03M|            if (istart < line.size())
  ------------------
  |  Branch (1873:17): [True: 2.82M, False: 212k]
  ------------------
 1874|  2.82M|            {
 1875|  2.82M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1876|  2.82M|                istart++;
 1877|  2.82M|            }
 1878|   212k|            else
 1879|   212k|            {
 1880|   212k|                istart = 0u;
 1881|   212k|                ++lstart;
 1882|       |
 1883|   212k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1883:21): [True: 212k, False: 0]
  ------------------
 1884|   212k|                {
 1885|   212k|                    result += '\n';
 1886|   212k|                }
 1887|   212k|            }
 1888|  3.03M|        }
 1889|       |
 1890|  8.58k|        return result;
 1891|  8.58k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2427|  17.1k|    {
 2428|  17.1k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2429|       |
 2430|  17.1k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2431|  17.1k|        phi::u32    index = 0u;
 2432|  1.14M|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2432:35): [True: 1.14M, False: 8.94k]
  |  Branch (2432:35): [True: 1.13M, False: 17.1k]
  |  Branch (2432:58): [True: 1.13M, False: 8.23k]
  ------------------
 2433|  1.13M|        {
 2434|  1.13M|            PHI_ASSERT(index < line.size());
 2435|  1.13M|            const Char character = line[index.unsafe()].m_Char;
 2436|       |
 2437|  1.13M|            if (character == '\t')
  ------------------
  |  Branch (2437:17): [True: 17.9k, False: 1.11M]
  ------------------
 2438|  17.9k|            {
 2439|  17.9k|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2440|  17.9k|            }
 2441|  1.11M|            else
 2442|  1.11M|            {
 2443|  1.11M|                ++column;
 2444|  1.11M|            }
 2445|       |
 2446|  1.13M|            index += UTF8CharLength(character);
 2447|  1.13M|        }
 2448|       |
 2449|  17.1k|        return index;
 2450|  17.1k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2499|  8.58k|    {
 2500|  8.58k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2500:13): [True: 0, False: 8.58k]
  ------------------
 2501|      0|        {
 2502|      0|            return 0u;
 2503|      0|        }
 2504|       |
 2505|  8.58k|        const Line& line = m_Lines[line_number.unsafe()];
 2506|  8.58k|        phi::u32    col  = 0u;
 2507|       |
 2508|  1.14M|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2508:32): [True: 1.13M, False: 8.58k]
  ------------------
 2509|  1.13M|        {
 2510|  1.13M|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2511|  1.13M|            if (character == '\t')
  ------------------
  |  Branch (2511:17): [True: 17.9k, False: 1.11M]
  ------------------
 2512|  17.9k|            {
 2513|  17.9k|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2514|  17.9k|            }
 2515|  1.11M|            else
 2516|  1.11M|            {
 2517|  1.11M|                col++;
 2518|  1.11M|            }
 2519|       |
 2520|  1.13M|            i += UTF8CharLength(character);
 2521|  1.13M|        }
 2522|       |
 2523|  8.58k|        return col;
 2524|  8.58k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2527|  8.58k|    {
 2528|  8.58k|        PHI_ASSERT(!m_Lines.empty());
 2529|       |
 2530|  8.58k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2531|  8.58k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3659|  1.25M|    {
 3660|  1.25M|        PaletteIndex palette_index{PaletteIndex::Default};
 3661|       |
 3662|       |        // Determine palette color
 3663|  1.25M|        switch (token.GetType())
 3664|  1.25M|        {
 3665|  7.35k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3665:13): [True: 7.35k, False: 1.25M]
  ------------------
 3666|  7.35k|                palette_index = PaletteIndex::Comment;
 3667|  7.35k|                break;
 3668|  8.21k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3668:13): [True: 8.21k, False: 1.24M]
  ------------------
 3669|  24.3k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3669:13): [True: 16.1k, False: 1.24M]
  ------------------
 3670|  24.3k|                palette_index = PaletteIndex::IntegerLiteral;
 3671|  24.3k|                break;
 3672|   142k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3672:13): [True: 142k, False: 1.11M]
  ------------------
 3673|   142k|                palette_index = PaletteIndex::OpCode;
 3674|   142k|                break;
 3675|  4.73k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3675:13): [True: 4.73k, False: 1.25M]
  ------------------
 3676|  9.92k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3676:13): [True: 5.18k, False: 1.25M]
  ------------------
 3677|  10.8k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3677:13): [True: 962, False: 1.25M]
  ------------------
 3678|  10.8k|                palette_index = PaletteIndex::Register;
 3679|  10.8k|                break;
 3680|   212k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3680:13): [True: 212k, False: 1.04M]
  ------------------
 3681|   212k|                return;
 3682|   860k|            default:
  ------------------
  |  Branch (3682:13): [True: 860k, False: 397k]
  ------------------
 3683|   860k|                break;
 3684|  1.25M|        }
 3685|       |
 3686|  1.04M|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3687|  1.04M|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3688|       |
 3689|  1.04M|        for (phi::u64 index{token.GetColumn() - 1u};
 3690|  3.77M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3690:14): [True: 2.72M, False: 1.04M]
  ------------------
 3691|  2.72M|        {
 3692|  2.72M|            PHI_ASSERT(index < line.size());
 3693|  2.72M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3694|  2.72M|        }
 3695|  1.04M|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3698|  8.58k|    {
 3699|  8.58k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3700|       |
 3701|  8.58k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3701:38): [True: 1.25M, False: 8.58k]
  ------------------
 3702|  1.25M|        {
 3703|  1.25M|            ColorizeToken(token);
 3704|  1.25M|        }
 3705|  8.58k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3708|  8.58k|    {
 3709|  8.58k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3710|  8.58k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3711|  8.58k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3712|       |
 3713|       |        // Clear breakpoints and markers
 3714|  8.58k|        ClearBreakPoints();
 3715|  8.58k|        ClearErrorMarkers();
 3716|  8.58k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  133|  1.13M|{
  134|  1.13M|    return UTF8CharLength(static_cast<char>(characater));
  135|  1.13M|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  103|  2.26M|{
  104|  2.26M|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (104:9): [True: 4.75k, False: 2.26M]
  ------------------
  105|  4.75k|    {
  106|  4.75k|        return 6_u8;
  107|  4.75k|    }
  108|       |
  109|  2.26M|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (109:9): [True: 5.59k, False: 2.25M]
  ------------------
  110|  5.59k|    {
  111|  5.59k|        return 5_u8;
  112|  5.59k|    }
  113|       |
  114|  2.25M|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (114:9): [True: 9.18k, False: 2.24M]
  ------------------
  115|  9.18k|    {
  116|  9.18k|        return 4_u8;
  117|  9.18k|    }
  118|       |
  119|  2.24M|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (119:9): [True: 12.4k, False: 2.23M]
  ------------------
  120|  12.4k|    {
  121|  12.4k|        return 3_u8;
  122|  12.4k|    }
  123|       |
  124|  2.23M|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (124:9): [True: 45.5k, False: 2.18M]
  ------------------
  125|  45.5k|    {
  126|  45.5k|        return 2_u8;
  127|  45.5k|    }
  128|       |
  129|  2.18M|    return 1_u8;
  130|  2.23M|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  174|  8.58k|    {
  175|  8.58k|        return m_DLXProgram;
  176|  8.58k|    }
_ZN6dlxemu8Emulator12ParseProgramENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  179|  8.58k|    {
  180|  8.58k|        m_DLXProgram = dlx::Parser::Parse(source);
  181|       |
  182|  8.58k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (182:13): [True: 141, False: 8.44k]
  ------------------
  183|    141|        {
  184|    141|            m_Processor.LoadProgram(m_DLXProgram);
  185|    141|        }
  186|  8.58k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  199|  8.58k|    {
  200|  8.58k|        return m_CodeEditor;
  201|  8.58k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   37|      1|    {
   38|      1|        Shutdown();
   39|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  107|      1|    {
  108|      1|        if (imgui_initialized)
  ------------------
  |  Branch (108:13): [True: 0, False: 1]
  ------------------
  109|      0|        {
  110|      0|            ShutdownImGui();
  111|      0|        }
  112|       |
  113|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (113:13): [True: 0, False: 1]
  ------------------
  114|      0|        {
  115|      0|            glfwDestroyWindow(m_Window);
  116|      0|        }
  117|       |
  118|      1|        if (glfw_initialized)
  ------------------
  |  Branch (118:13): [True: 0, False: 1]
  ------------------
  119|      0|        {
  120|      0|            glfwTerminate();
  121|      0|        }
  122|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   239k|        {
  169|   239k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   239k|            switch (index.unsafe())
  172|   239k|            {
  173|   108k|                case 0:
  ------------------
  |  Branch (173:17): [True: 108k, False: 131k]
  ------------------
  174|   108k|                    return m_Arg1Type;
  175|       |
  176|  65.9k|                case 1:
  ------------------
  |  Branch (176:17): [True: 65.9k, False: 174k]
  ------------------
  177|  65.9k|                    return m_Arg2Type;
  178|       |
  179|  65.5k|                case 2:
  ------------------
  |  Branch (179:17): [True: 65.5k, False: 174k]
  ------------------
  180|  65.5k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 239k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   239k|#endif
  187|   239k|            }
  188|   239k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  64.7k|        {
  195|  64.7k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  64.7k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 63.2k, False: 1.49k]
  ------------------
  199|  63.2k|            {
  200|  63.2k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  63.2k|            }
  202|  64.7k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 36.3k, False: 28.4k]
  ------------------
  203|  36.3k|            {
  204|  36.3k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  36.3k|            }
  206|  64.7k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 15.7k, False: 48.9k]
  ------------------
  207|  15.7k|            {
  208|  15.7k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  15.7k|            }
  210|       |
  211|  64.7k|            return number_of_argument_required;
  212|  64.7k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  64.7k|        {
  221|  64.7k|            return m_Executor;
  222|  64.7k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  35.9k|    {
   38|  35.9k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  35.9k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  35.9k|                                         static_cast<underlying_t>(rhs));
   42|  35.9k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  35.9k|    {
   55|  35.9k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  35.9k|        return static_cast<underlying_t>(type & test) != 0;
   58|  35.9k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|   255k|    {
   32|   255k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 4.83k, False: 250k]
  ------------------
   33|  4.83k|        {
   34|  4.83k|            return true;
   35|  4.83k|        }
   36|       |
   37|   250k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 965, False: 249k]
  ------------------
   38|    965|        {
   39|    965|            return true;
   40|    965|        }
   41|       |
   42|   249k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 70.3k, False: 178k]
  ------------------
   43|  70.3k|        {
   44|  70.3k|            return true;
   45|  70.3k|        }
   46|       |
   47|   178k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 771, False: 178k]
  ------------------
   48|    771|        {
   49|    771|            return true;
   50|    771|        }
   51|       |
   52|   178k|        return false;
   53|   178k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|   178k|    {
   57|   178k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 178k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|   178k|        const char first_char = token.at(0);
   63|       |
   64|   178k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 41.3k, False: 136k]
  ------------------
   65|  41.3k|        {
   66|  41.3k|            return phi::is_alpha(first_char);
   67|  41.3k|        }
   68|       |
   69|   136k|        phi::boolean just_under_scores = (first_char == '_');
   70|   136k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 28.5k, False: 108k]
  |  Branch (70:15): [True: 106k, False: 30.4k]
  |  Branch (70:44): [True: 1.86k, False: 28.5k]
  ------------------
   71|  28.5k|        {
   72|  28.5k|            return false;
   73|  28.5k|        }
   74|       |
   75|   344k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 277k, False: 66.4k]
  ------------------
   76|   277k|        {
   77|   277k|            const char c{token.at(index)};
   78|       |
   79|   277k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 233k, False: 44.2k]
  ------------------
   80|   233k|            {
   81|   233k|                just_under_scores = false;
   82|   233k|            }
   83|  44.2k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 2.43k, False: 41.8k]
  ------------------
   84|  2.43k|            {
   85|  2.43k|                continue;
   86|  2.43k|            }
   87|  41.8k|            else
   88|  41.8k|            {
   89|  41.8k|                return false;
   90|  41.8k|            }
   91|   277k|        }
   92|       |
   93|  66.4k|        return !just_under_scores;
   94|   108k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   673k|    {
  101|   673k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 673k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   673k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 117k, False: 556k]
  ------------------
  107|   117k|        {
  108|   117k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 12.1k, False: 105k]
  ------------------
  109|  12.1k|            {
  110|  12.1k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  12.1k|            }
  112|       |
  113|   105k|            return {};
  114|   117k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   556k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 1.56k, False: 554k]
  ------------------
  118|  1.56k|        {
  119|  1.56k|            return {};
  120|  1.56k|        }
  121|       |
  122|   554k|        std::int32_t number{0};
  123|   554k|        phi::boolean is_negative{false};
  124|   554k|        phi::boolean starts_with_zero{false};
  125|   554k|        phi::boolean parsing_binary{false};
  126|   554k|        phi::boolean parsing_octal{false};
  127|   554k|        phi::boolean parsing_hexadecimal{false};
  128|   554k|        phi::boolean parsed_something{false};
  129|   554k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   616k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 608k, False: 8.15k]
  ------------------
  134|   608k|        {
  135|   608k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   608k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 554k, False: 53.5k]
  ------------------
  139|   554k|            {
  140|   554k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 2.85k, False: 551k]
  ------------------
  141|  2.85k|                {
  142|  2.85k|                    continue;
  143|  2.85k|                }
  144|       |
  145|   551k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 8.65k, False: 543k]
  ------------------
  146|  8.65k|                {
  147|  8.65k|                    is_negative = true;
  148|  8.65k|                    continue;
  149|  8.65k|                }
  150|       |
  151|   543k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 10.6k, False: 532k]
  ------------------
  152|  10.6k|                {
  153|  10.6k|                    starts_with_zero = true;
  154|  10.6k|                    continue;
  155|  10.6k|                }
  156|       |
  157|   532k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 884, False: 531k]
  ------------------
  158|    884|                {
  159|    884|                    return {};
  160|    884|                }
  161|   532k|            }
  162|       |
  163|       |            // Second character
  164|   585k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 30.2k, False: 555k]
  ------------------
  165|  30.2k|            {
  166|  30.2k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 10.6k, False: 19.6k]
  ------------------
  167|  10.6k|                {
  168|       |                    // Binary
  169|  10.6k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 2.98k, False: 7.63k]
  |  Branch (169:37): [True: 1.34k, False: 6.28k]
  ------------------
  170|  4.33k|                    {
  171|  4.33k|                        parsing_binary = true;
  172|  4.33k|                        continue;
  173|  4.33k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  6.28k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 2.16k, False: 4.12k]
  |  Branch (176:37): [True: 986, False: 3.14k]
  ------------------
  177|  3.14k|                    {
  178|  3.14k|                        parsing_hexadecimal = true;
  179|  3.14k|                        continue;
  180|  3.14k|                    }
  181|       |
  182|       |                    // Octal
  183|  3.14k|                    parsing_octal = true;
  184|  3.14k|                }
  185|  30.2k|            }
  186|       |
  187|       |            // Handle seperators
  188|   577k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 2.73k, False: 575k]
  ------------------
  189|  2.73k|            {
  190|  2.73k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 1.07k, False: 1.65k]
  ------------------
  191|  1.07k|                {
  192|  1.07k|                    return {};
  193|  1.07k|                }
  194|       |
  195|  1.65k|                parsed_separator = true;
  196|  1.65k|                continue;
  197|  2.73k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   575k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 11.9k, False: 563k]
  |  Branch (200:32): [True: 210, False: 11.7k]
  ------------------
  201|    210|            {
  202|       |                // Would underflow
  203|    210|                return {};
  204|    210|            }
  205|   574k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 563k, False: 11.7k]
  |  Branch (205:17): [True: 921, False: 574k]
  |  Branch (205:33): [True: 921, False: 562k]
  ------------------
  206|    921|            {
  207|       |                // Would overflow
  208|    921|                return {};
  209|    921|            }
  210|       |
  211|   574k|            parsed_separator = false;
  212|   574k|            parsed_something = true;
  213|       |
  214|   574k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 3.53k, False: 570k]
  ------------------
  215|  3.53k|            {
  216|  3.53k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 3.13k, False: 394]
  ------------------
  217|  3.13k|                {
  218|  3.13k|                    return {};
  219|  3.13k|                }
  220|       |
  221|    394|                number <<= 1;
  222|    394|                number |= (c - '0');
  223|    394|            }
  224|   570k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 3.91k, False: 566k]
  ------------------
  225|  3.91k|            {
  226|  3.91k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 2.56k, False: 1.34k]
  ------------------
  227|  2.56k|                {
  228|  2.56k|                    return {};
  229|  2.56k|                }
  230|       |
  231|  1.34k|                number <<= 3;
  232|  1.34k|                number |= (c - '0');
  233|  1.34k|            }
  234|   566k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 6.64k, False: 559k]
  ------------------
  235|  6.64k|            {
  236|  6.64k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 2.04k, False: 4.59k]
  ------------------
  237|  2.04k|                {
  238|  2.04k|                    return {};
  239|  2.04k|                }
  240|       |
  241|  4.59k|                number <<= 4;
  242|  4.59k|                number |= phi::hex_digit_value(c).unsafe();
  243|  4.59k|            }
  244|   559k|            else
  245|   559k|            {
  246|   559k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 535k, False: 24.9k]
  ------------------
  247|   535k|                {
  248|   535k|                    return {};
  249|   535k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  24.9k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 11.8k, False: 13.0k]
  |  Branch (252:36): [True: 834, False: 11.0k]
  ------------------
  253|    834|                {
  254|    834|                    return {};
  255|    834|                }
  256|       |
  257|  24.0k|                number *= 10;
  258|  24.0k|                number += (c - '0');
  259|  24.0k|            }
  260|   574k|        }
  261|       |
  262|  8.15k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 6.89k, False: 1.26k]
  ------------------
  263|  6.89k|        {
  264|       |            // Check for over/underflow
  265|  6.89k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 2.17k, False: 4.71k]
  |  Branch (265:32): [True: 444, False: 1.73k]
  ------------------
  266|    444|            {
  267|       |                // Would underflow
  268|    444|                return {};
  269|    444|            }
  270|  6.44k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 4.71k, False: 1.73k]
  |  Branch (270:17): [True: 886, False: 5.56k]
  |  Branch (270:33): [True: 886, False: 3.82k]
  ------------------
  271|    886|            {
  272|       |                // Would overflow
  273|    886|                return {};
  274|    886|            }
  275|       |
  276|  5.56k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 1.73k, False: 3.82k]
  ------------------
  277|  1.73k|            {
  278|  1.73k|                return static_cast<std::int16_t>(-number);
  279|  1.73k|            }
  280|       |
  281|  3.82k|            return static_cast<std::int16_t>(number);
  282|  5.56k|        }
  283|       |
  284|  1.26k|        return {};
  285|  8.15k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  61.0k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  61.0k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 1.07M, False: 0]
  ------------------
   64|  1.07M|            {
   65|  1.07M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 61.0k, False: 1.01M]
  ------------------
   66|  61.0k|                {
   67|  61.0k|                    return &token;
   68|  61.0k|                }
   69|  1.07M|            }
   70|       |
   71|      0|            return nullptr;
   72|  61.0k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   267k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   267k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   267k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   681k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   681k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   681k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|   309k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   309k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   309k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  64.7k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  12.2k|    {
   25|  12.2k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  12.2k|        switch (argument_number.unsafe())
   28|  12.2k|        {
   29|  11.1k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 11.1k, False: 1.13k]
  ------------------
   30|  11.1k|                m_Arg1 = argument;
   31|  11.1k|                break;
   32|    843|            case 1u:
  ------------------
  |  Branch (32:13): [True: 843, False: 11.3k]
  ------------------
   33|    843|                m_Arg2 = argument;
   34|    843|                break;
   35|    290|            case 2u:
  ------------------
  |  Branch (35:13): [True: 290, False: 11.9k]
  ------------------
   36|    290|                m_Arg3 = argument;
   37|    290|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 12.2k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  12.2k|#endif
   42|  12.2k|        }
   43|  12.2k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|   206k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  1.95k|    {
  171|  1.95k|        InstructionArgument arg;
  172|  1.95k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  1.95k|        arg.register_int.register_id = id;
  174|  1.95k|        return arg;
  175|  1.95k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|    158|    {
  179|    158|        InstructionArgument arg;
  180|    158|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|    158|        arg.register_float.register_id = id;
  182|    158|        return arg;
  183|    158|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  1.23k|    {
  187|  1.23k|        InstructionArgument arg;
  188|  1.23k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  1.23k|        arg.immediate_value.signed_value = value;
  190|  1.23k|        return arg;
  191|  1.23k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|    547|    {
  196|    547|        InstructionArgument arg;
  197|    547|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|    547|        arg.address_displacement.register_id  = id;
  199|    547|        arg.address_displacement.displacement = displacement;
  200|    547|        return arg;
  201|    547|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  8.34k|    {
  205|  8.34k|        InstructionArgument arg;
  206|  8.34k|        arg.m_Type           = ArgumentType::Label;
  207|  8.34k|        arg.label.label_name = label_name;
  208|  8.34k|        return arg;
  209|  8.34k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  64.7k|    {
  453|  64.7k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  64.7k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   15|      1|    {
   16|      1|        m_Values.resize(starting_size.unsafe());
   17|      1|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   887k|    {
   24|   887k|        switch (token.length())
   25|   887k|        {
   26|       |            // 1 character OpCodes
   27|   144k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 144k, False: 743k]
  ------------------
   28|   144k|                char c1 = token[0];
   29|   144k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 32.4k, False: 112k]
  ------------------
   30|  32.4k|                {
   31|  32.4k|                    return OpCode::J;
   32|  32.4k|                }
   33|   112k|                break;
   34|   144k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|   153k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 153k, False: 734k]
  ------------------
   38|   153k|                char c1 = token[0];
   39|   153k|                char c2 = token[1];
   40|       |
   41|   153k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 94.5k, False: 58.6k]
  ------------------
   42|   153k|                {
   43|  8.35k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 8.35k, False: 144k]
  ------------------
   44|  9.88k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 1.52k, False: 151k]
  ------------------
   45|  9.88k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 1.12k, False: 8.75k]
  ------------------
   46|  1.12k|                        {
   47|  1.12k|                            return OpCode::JR;
   48|  1.12k|                        }
   49|  8.75k|                        break;
   50|       |
   51|  10.1k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 10.1k, False: 143k]
  ------------------
   52|  17.7k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 7.55k, False: 145k]
  ------------------
   53|  17.7k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 7.13k, False: 10.5k]
  ------------------
   54|  17.7k|                        {
   55|    722|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 722, False: 17.0k]
  ------------------
   56|  1.81k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 1.09k, False: 16.6k]
  ------------------
   57|  1.81k|                                return OpCode::LB;
   58|  1.23k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 1.23k, False: 16.4k]
  ------------------
   59|  2.10k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 870, False: 16.8k]
  ------------------
   60|  2.10k|                                return OpCode::LD;
   61|  1.49k|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 1.49k, False: 16.2k]
  ------------------
   62|  2.22k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 730, False: 16.9k]
  ------------------
   63|  2.22k|                                return OpCode::LF;
   64|  1.15k|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 1.15k, False: 16.5k]
  ------------------
   65|  3.03k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 1.87k, False: 15.8k]
  ------------------
   66|  3.03k|                                return OpCode::LH;
   67|    670|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 670, False: 17.0k]
  ------------------
   68|  1.41k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 744, False: 16.9k]
  ------------------
   69|  1.41k|                                return OpCode::LW;
   70|  17.7k|                        }
   71|  7.13k|                        break;
   72|  7.13k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 4.28k, False: 148k]
  ------------------
   73|  10.5k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 6.24k, False: 146k]
  ------------------
   74|  10.5k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 4.41k, False: 6.11k]
  ------------------
   75|  4.41k|                        {
   76|  4.41k|                            return OpCode::OR;
   77|  4.41k|                        }
   78|  6.11k|                        break;
   79|  11.2k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 11.2k, False: 141k]
  ------------------
   80|  20.4k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 9.24k, False: 143k]
  ------------------
   81|  20.4k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 6.94k, False: 13.5k]
  ------------------
   82|  20.4k|                        {
   83|  1.36k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 1.36k, False: 19.1k]
  ------------------
   84|  1.70k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 339, False: 20.1k]
  ------------------
   85|  1.70k|                                return OpCode::SB;
   86|  4.35k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 4.35k, False: 16.1k]
  ------------------
   87|  5.23k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 884, False: 19.5k]
  ------------------
   88|  5.23k|                                return OpCode::SD;
   89|    812|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 812, False: 19.6k]
  ------------------
   90|  1.02k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 209, False: 20.2k]
  ------------------
   91|  1.02k|                                return OpCode::SF;
   92|    580|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 580, False: 19.8k]
  ------------------
   93|  3.38k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 2.80k, False: 17.6k]
  ------------------
   94|  3.38k|                                return OpCode::SH;
   95|    934|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 934, False: 19.5k]
  ------------------
   96|  2.17k|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 1.24k, False: 19.2k]
  ------------------
   97|  2.17k|                                return OpCode::SW;
   98|  20.4k|                        }
   99|  6.94k|                        break;
  100|   153k|                }
  101|   123k|                break;
  102|   153k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   196k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 196k, False: 691k]
  ------------------
  106|   196k|                char c1 = token[0];
  107|   196k|                char c2 = token[1];
  108|   196k|                char c3 = token[2];
  109|       |
  110|   196k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 67.7k, False: 128k]
  ------------------
  111|   196k|                {
  112|  6.93k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 6.93k, False: 189k]
  ------------------
  113|  10.3k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 3.37k, False: 192k]
  ------------------
  114|  10.3k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 3.77k, False: 6.52k]
  |  Branch (114:29): [True: 1.60k, False: 8.70k]
  |  Branch (114:45): [True: 1.60k, False: 2.17k]
  ------------------
  115|  1.60k|                        {
  116|  1.60k|                            return OpCode::ADD;
  117|  1.60k|                        }
  118|  8.70k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 1.82k, False: 6.88k]
  |  Branch (118:34): [True: 1.03k, False: 7.66k]
  |  Branch (118:50): [True: 1.03k, False: 785]
  ------------------
  119|  1.03k|                        {
  120|  1.03k|                            return OpCode::AND;
  121|  1.03k|                        }
  122|  7.66k|                        break;
  123|       |
  124|  7.66k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 5.07k, False: 191k]
  ------------------
  125|  6.31k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 1.24k, False: 195k]
  ------------------
  126|  6.31k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 4.34k, False: 1.97k]
  |  Branch (126:29): [True: 793, False: 5.52k]
  |  Branch (126:45): [True: 793, False: 3.54k]
  ------------------
  127|    793|                        {
  128|    793|                            return OpCode::DIV;
  129|    793|                        }
  130|  5.52k|                        break;
  131|       |
  132|  5.52k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 1.64k, False: 194k]
  ------------------
  133|  7.08k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 5.43k, False: 190k]
  ------------------
  134|  7.08k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 5.01k, False: 2.07k]
  ------------------
  135|  5.01k|                        {
  136|  5.01k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 932, False: 4.07k]
  ------------------
  137|    932|                            {
  138|    932|                                return OpCode::EQD;
  139|    932|                            }
  140|  4.07k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 1.70k, False: 2.37k]
  ------------------
  141|  1.70k|                            {
  142|  1.70k|                                return OpCode::EQF;
  143|  1.70k|                            }
  144|  5.01k|                        }
  145|  4.44k|                        break;
  146|       |
  147|  4.44k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 3.35k, False: 192k]
  ------------------
  148|  10.4k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 7.09k, False: 189k]
  ------------------
  149|  10.4k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 3.36k, False: 7.09k]
  ------------------
  150|  3.36k|                        {
  151|  3.36k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 1.09k, False: 2.26k]
  ------------------
  152|  1.09k|                            {
  153|  1.09k|                                return OpCode::GED;
  154|  1.09k|                            }
  155|  2.26k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 1.50k, False: 761]
  ------------------
  156|  1.50k|                            {
  157|  1.50k|                                return OpCode::GEF;
  158|  1.50k|                            }
  159|  3.36k|                        }
  160|  7.09k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 5.22k, False: 1.87k]
  ------------------
  161|  5.22k|                        {
  162|  5.22k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 1.84k, False: 3.37k]
  ------------------
  163|  1.84k|                            {
  164|  1.84k|                                return OpCode::GTD;
  165|  1.84k|                            }
  166|  3.37k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 2.02k, False: 1.35k]
  ------------------
  167|  2.02k|                            {
  168|  2.02k|                                return OpCode::GTF;
  169|  2.02k|                            }
  170|  3.37k|                        }
  171|  3.98k|                        break;
  172|       |
  173|  6.21k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 6.21k, False: 190k]
  ------------------
  174|  6.91k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 697, False: 195k]
  ------------------
  175|  6.91k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 3.19k, False: 3.72k]
  |  Branch (175:29): [True: 2.27k, False: 4.64k]
  |  Branch (175:45): [True: 2.27k, False: 919]
  ------------------
  176|  2.27k|                        {
  177|  2.27k|                            return OpCode::JAL;
  178|  2.27k|                        }
  179|  4.64k|                        break;
  180|       |
  181|  18.6k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 18.6k, False: 177k]
  ------------------
  182|  24.7k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 6.15k, False: 190k]
  ------------------
  183|  24.7k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 4.05k, False: 20.7k]
  ------------------
  184|  24.7k|                        {
  185|    801|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 801, False: 23.9k]
  ------------------
  186|  2.62k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 1.82k, False: 22.9k]
  ------------------
  187|  2.62k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 1.55k, False: 1.06k]
  ------------------
  188|  1.55k|                                {
  189|  1.55k|                                    return OpCode::LBU;
  190|  1.55k|                                }
  191|  1.06k|                                break;
  192|       |
  193|  3.04k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 3.04k, False: 21.7k]
  ------------------
  194|  4.45k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 1.41k, False: 23.3k]
  ------------------
  195|  4.45k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 1.22k, False: 3.23k]
  ------------------
  196|  1.22k|                                {
  197|  1.22k|                                    return OpCode::LED;
  198|  1.22k|                                }
  199|  3.23k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 2.18k, False: 1.04k]
  ------------------
  200|  2.18k|                                {
  201|  2.18k|                                    return OpCode::LEF;
  202|  2.18k|                                }
  203|  1.04k|                                break;
  204|       |
  205|  3.44k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 3.44k, False: 21.3k]
  ------------------
  206|  5.25k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 1.81k, False: 22.9k]
  ------------------
  207|  5.25k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 1.77k, False: 3.48k]
  ------------------
  208|  1.77k|                                {
  209|  1.77k|                                    return OpCode::LHI;
  210|  1.77k|                                }
  211|  3.48k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 1.80k, False: 1.67k]
  ------------------
  212|  1.80k|                                {
  213|  1.80k|                                    return OpCode::LHU;
  214|  1.80k|                                }
  215|  1.67k|                                break;
  216|       |
  217|  1.67k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 888, False: 23.9k]
  ------------------
  218|  6.41k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 5.52k, False: 19.2k]
  ------------------
  219|  6.41k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 2.41k, False: 4.00k]
  ------------------
  220|  2.41k|                                {
  221|  2.41k|                                    return OpCode::LTD;
  222|  2.41k|                                }
  223|  4.00k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 2.48k, False: 1.51k]
  ------------------
  224|  2.48k|                                {
  225|  2.48k|                                    return OpCode::LTF;
  226|  2.48k|                                }
  227|  1.51k|                                break;
  228|       |
  229|  1.51k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 646, False: 24.1k]
  ------------------
  230|  1.99k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 1.34k, False: 23.4k]
  ------------------
  231|  1.99k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 1.24k, False: 752]
  ------------------
  232|  1.24k|                                {
  233|  1.24k|                                    return OpCode::LWU;
  234|  1.24k|                                }
  235|    752|                                break;
  236|  24.7k|                        }
  237|  10.1k|                        break;
  238|       |
  239|  10.1k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 7.73k, False: 188k]
  ------------------
  240|  11.0k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 3.26k, False: 193k]
  ------------------
  241|  11.0k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 6.13k, False: 4.87k]
  ------------------
  242|  6.13k|                        {
  243|  6.13k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 2.01k, False: 4.11k]
  ------------------
  244|  2.01k|                            {
  245|  2.01k|                                return OpCode::NED;
  246|  2.01k|                            }
  247|  4.11k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 2.51k, False: 1.59k]
  ------------------
  248|  2.51k|                            {
  249|  2.51k|                                return OpCode::NEF;
  250|  2.51k|                            }
  251|  6.13k|                        }
  252|  4.87k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 3.56k, False: 1.31k]
  |  Branch (252:34): [True: 2.04k, False: 2.83k]
  |  Branch (252:50): [True: 2.04k, False: 1.52k]
  ------------------
  253|  2.04k|                        {
  254|  2.04k|                            return OpCode::NOP;
  255|  2.04k|                        }
  256|       |
  257|  4.43k|                        break;
  258|       |
  259|  4.43k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 3.83k, False: 192k]
  ------------------
  260|  5.97k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 2.13k, False: 194k]
  ------------------
  261|  5.97k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 4.16k, False: 1.80k]
  |  Branch (261:29): [True: 1.11k, False: 4.86k]
  |  Branch (261:45): [True: 1.11k, False: 3.05k]
  ------------------
  262|  1.11k|                        {
  263|  1.11k|                            return OpCode::ORI;
  264|  1.11k|                        }
  265|  4.86k|                        break;
  266|       |
  267|  27.6k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 27.6k, False: 168k]
  ------------------
  268|  40.5k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 12.9k, False: 183k]
  ------------------
  269|  40.5k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 4.29k, False: 36.2k]
  ------------------
  270|  40.5k|                        {
  271|  2.36k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 2.36k, False: 38.1k]
  ------------------
  272|  5.03k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 2.67k, False: 37.8k]
  ------------------
  273|  5.03k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 3.22k, False: 1.81k]
  ------------------
  274|  3.22k|                                {
  275|  3.22k|                                    return OpCode::SBU;
  276|  3.22k|                                }
  277|  1.81k|                                break;
  278|       |
  279|  1.81k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 1.39k, False: 39.1k]
  ------------------
  280|  2.71k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 1.32k, False: 39.2k]
  ------------------
  281|  2.71k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 1.43k, False: 1.28k]
  ------------------
  282|  1.43k|                                {
  283|  1.43k|                                    return OpCode::SEQ;
  284|  1.43k|                                }
  285|  1.28k|                                break;
  286|       |
  287|  3.06k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 3.06k, False: 37.4k]
  ------------------
  288|  4.59k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 1.53k, False: 39.0k]
  ------------------
  289|  4.59k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 1.03k, False: 3.55k]
  ------------------
  290|  1.03k|                                {
  291|  1.03k|                                    return OpCode::SGE;
  292|  1.03k|                                }
  293|  3.55k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 1.69k, False: 1.86k]
  ------------------
  294|  1.69k|                                {
  295|  1.69k|                                    return OpCode::SGT;
  296|  1.69k|                                }
  297|  1.86k|                                break;
  298|       |
  299|  1.86k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 579, False: 39.9k]
  ------------------
  300|  2.68k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 2.10k, False: 38.4k]
  ------------------
  301|  2.68k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 2.05k, False: 629]
  ------------------
  302|  2.05k|                                {
  303|  2.05k|                                    return OpCode::SHU;
  304|  2.05k|                                }
  305|    629|                                break;
  306|       |
  307|  5.74k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 5.74k, False: 34.8k]
  ------------------
  308|  9.25k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 3.50k, False: 37.0k]
  ------------------
  309|  9.25k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 1.60k, False: 7.65k]
  ------------------
  310|  9.25k|                                {
  311|    897|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 897, False: 8.36k]
  ------------------
  312|  1.31k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 417, False: 8.84k]
  ------------------
  313|  1.31k|                                        return OpCode::SLA;
  314|       |
  315|    676|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 676, False: 8.58k]
  ------------------
  316|  1.56k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 886, False: 8.37k]
  ------------------
  317|  1.56k|                                        return OpCode::SLE;
  318|       |
  319|  1.41k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 1.41k, False: 7.84k]
  ------------------
  320|  2.30k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 889, False: 8.36k]
  ------------------
  321|  2.30k|                                        return OpCode::SLL;
  322|       |
  323|    524|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 524, False: 8.73k]
  ------------------
  324|  2.47k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 1.95k, False: 7.30k]
  ------------------
  325|  2.47k|                                        return OpCode::SLT;
  326|  9.25k|                                }
  327|  1.60k|                                break;
  328|       |
  329|  1.60k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 1.57k, False: 38.9k]
  ------------------
  330|  2.56k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 988, False: 39.5k]
  ------------------
  331|  2.56k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 1.27k, False: 1.28k]
  ------------------
  332|  1.27k|                                {
  333|  1.27k|                                    return OpCode::SNE;
  334|  1.27k|                                }
  335|  1.28k|                                break;
  336|       |
  337|  1.28k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 881, False: 39.6k]
  ------------------
  338|  3.37k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 2.49k, False: 38.0k]
  ------------------
  339|  3.37k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 1.20k, False: 2.16k]
  ------------------
  340|  1.20k|                                {
  341|  1.20k|                                    return OpCode::SRA;
  342|  1.20k|                                }
  343|  2.16k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 1.25k, False: 913]
  ------------------
  344|  1.25k|                                {
  345|  1.25k|                                    return OpCode::SRL;
  346|  1.25k|                                }
  347|    913|                                break;
  348|       |
  349|  1.73k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 1.73k, False: 38.8k]
  ------------------
  350|  3.31k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 1.58k, False: 38.9k]
  ------------------
  351|  3.31k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 1.67k, False: 1.63k]
  ------------------
  352|  1.67k|                                {
  353|  1.67k|                                    return OpCode::SUB;
  354|  1.67k|                                }
  355|  1.63k|                                break;
  356|       |
  357|  1.73k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 1.73k, False: 38.8k]
  ------------------
  358|  2.71k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 985, False: 39.5k]
  ------------------
  359|  2.71k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 1.59k, False: 1.12k]
  ------------------
  360|  1.59k|                                {
  361|  1.59k|                                    return OpCode::SWU;
  362|  1.59k|                                }
  363|  1.12k|                                break;
  364|  40.5k|                        }
  365|       |
  366|  19.1k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 2.75k, False: 193k]
  ------------------
  367|  21.5k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 2.36k, False: 193k]
  ------------------
  368|  21.5k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 4.66k, False: 16.8k]
  |  Branch (368:29): [True: 1.76k, False: 19.8k]
  |  Branch (368:45): [True: 1.76k, False: 2.90k]
  ------------------
  369|  1.76k|                        {
  370|  1.76k|                            return OpCode::XOR;
  371|  1.76k|                        }
  372|  19.8k|                        break;
  373|   196k|                }
  374|   133k|                break;
  375|   196k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   183k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 183k, False: 703k]
  ------------------
  379|   183k|                char c1 = token[0];
  380|   183k|                char c2 = token[1];
  381|   183k|                char c3 = token[2];
  382|   183k|                char c4 = token[3];
  383|       |
  384|   183k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 52.7k, False: 131k]
  ------------------
  385|   183k|                {
  386|  12.3k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 12.3k, False: 171k]
  ------------------
  387|  14.9k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 2.53k, False: 181k]
  ------------------
  388|  14.9k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 1.66k, False: 13.2k]
  ------------------
  389|  14.9k|                        {
  390|  5.69k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 5.69k, False: 9.21k]
  ------------------
  391|  9.61k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 3.91k, False: 10.9k]
  ------------------
  392|  9.61k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 8.48k, False: 1.12k]
  ------------------
  393|  8.48k|                                {
  394|  8.48k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 1.58k, False: 6.90k]
  ------------------
  395|  8.48k|                                    {
  396|    852|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 852, False: 7.63k]
  ------------------
  397|  1.55k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 706, False: 7.78k]
  ------------------
  398|  1.55k|                                            return OpCode::ADDD;
  399|       |
  400|    964|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 964, False: 7.52k]
  ------------------
  401|  1.43k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 467, False: 8.01k]
  ------------------
  402|  1.43k|                                            return OpCode::ADDF;
  403|       |
  404|    679|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 679, False: 7.80k]
  ------------------
  405|  1.32k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 650, False: 7.83k]
  ------------------
  406|  1.32k|                                            return OpCode::ADDI;
  407|       |
  408|  1.53k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 1.53k, False: 6.95k]
  ------------------
  409|  2.58k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 1.05k, False: 7.43k]
  ------------------
  410|  2.58k|                                            return OpCode::ADDU;
  411|  8.48k|                                    }
  412|  8.48k|                                }
  413|  2.71k|                                break;
  414|       |
  415|  2.73k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 2.73k, False: 12.1k]
  ------------------
  416|  3.63k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 897, False: 14.0k]
  ------------------
  417|  3.63k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 2.72k, False: 907]
  |  Branch (417:37): [True: 1.39k, False: 2.23k]
  |  Branch (417:53): [True: 1.39k, False: 1.32k]
  ------------------
  418|  1.39k|                                {
  419|  1.39k|                                    return OpCode::ANDI;
  420|  1.39k|                                }
  421|       |
  422|  2.23k|                                break;
  423|  14.9k|                        }
  424|  6.60k|                        break;
  425|       |
  426|  12.4k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 12.4k, False: 171k]
  ------------------
  427|  13.0k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 627, False: 183k]
  ------------------
  428|  13.0k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 1.44k, False: 11.5k]
  ------------------
  429|  13.0k|                        {
  430|  1.29k|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 1.29k, False: 11.7k]
  ------------------
  431|  2.12k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 826, False: 12.2k]
  ------------------
  432|  2.12k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 1.60k, False: 523]
  |  Branch (432:37): [True: 648, False: 1.47k]
  |  Branch (432:53): [True: 648, False: 952]
  ------------------
  433|    648|                                {
  434|    648|                                    return OpCode::BEQZ;
  435|    648|                                }
  436|  1.47k|                                break;
  437|       |
  438|  4.40k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 4.40k, False: 8.62k]
  ------------------
  439|  5.82k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 1.41k, False: 11.6k]
  ------------------
  440|  5.82k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 4.30k, False: 1.51k]
  ------------------
  441|  4.30k|                                {
  442|  4.30k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 1.32k, False: 2.97k]
  ------------------
  443|  1.32k|                                    {
  444|  1.32k|                                        return OpCode::BFPF;
  445|  1.32k|                                    }
  446|  2.97k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 1.68k, False: 1.29k]
  ------------------
  447|  1.68k|                                    {
  448|  1.68k|                                        return OpCode::BFPT;
  449|  1.68k|                                    }
  450|  4.30k|                                }
  451|  2.80k|                                break;
  452|       |
  453|  2.80k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 1.75k, False: 11.2k]
  ------------------
  454|  3.63k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 1.88k, False: 11.1k]
  ------------------
  455|  3.63k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 2.19k, False: 1.44k]
  |  Branch (455:37): [True: 1.64k, False: 1.99k]
  |  Branch (455:53): [True: 1.64k, False: 550]
  ------------------
  456|  1.64k|                                {
  457|  1.64k|                                    return OpCode::BNEZ;
  458|  1.64k|                                }
  459|  13.0k|                        }
  460|  7.72k|                        break;
  461|       |
  462|  7.72k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 3.51k, False: 180k]
  ------------------
  463|  10.3k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 6.87k, False: 176k]
  ------------------
  464|  10.3k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 8.41k, False: 1.97k]
  |  Branch (464:29): [True: 7.14k, False: 3.24k]
  |  Branch (464:45): [True: 7.14k, False: 1.26k]
  ------------------
  465|  7.14k|                        {
  466|  7.14k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 1.81k, False: 5.33k]
  ------------------
  467|  7.14k|                            {
  468|    611|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 611, False: 6.53k]
  ------------------
  469|  1.33k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 723, False: 6.42k]
  ------------------
  470|  1.33k|                                    return OpCode::DIVD;
  471|       |
  472|    530|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 530, False: 6.61k]
  ------------------
  473|  1.47k|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 946, False: 6.20k]
  ------------------
  474|  1.47k|                                    return OpCode::DIVF;
  475|       |
  476|    714|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 714, False: 6.43k]
  ------------------
  477|  1.03k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 322, False: 6.82k]
  ------------------
  478|  1.03k|                                    return OpCode::DIVI;
  479|       |
  480|    649|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 649, False: 6.49k]
  ------------------
  481|  1.48k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 840, False: 6.30k]
  ------------------
  482|  1.48k|                                    return OpCode::DIVU;
  483|  7.14k|                            }
  484|  7.14k|                        }
  485|  5.05k|                        break;
  486|       |
  487|  5.55k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 5.55k, False: 178k]
  ------------------
  488|  8.51k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 2.96k, False: 180k]
  ------------------
  489|  8.51k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 7.83k, False: 678]
  |  Branch (489:29): [True: 1.49k, False: 7.01k]
  |  Branch (489:45): [True: 5.63k, False: 2.19k]
  |  Branch (489:61): [True: 1.49k, False: 4.14k]
  ------------------
  490|  1.49k|                        {
  491|  1.49k|                            return OpCode::HALT;
  492|  1.49k|                        }
  493|  7.01k|                        break;
  494|       |
  495|  7.01k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 6.12k, False: 177k]
  ------------------
  496|  7.85k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 1.73k, False: 182k]
  ------------------
  497|  7.85k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 4.64k, False: 3.21k]
  |  Branch (497:29): [True: 2.22k, False: 5.63k]
  |  Branch (497:45): [True: 3.98k, False: 655]
  |  Branch (497:61): [True: 2.22k, False: 1.76k]
  ------------------
  498|  2.22k|                        {
  499|  2.22k|                            return OpCode::JALR;
  500|  2.22k|                        }
  501|  5.63k|                        break;
  502|       |
  503|  5.63k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 2.55k, False: 181k]
  ------------------
  504|  10.4k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 7.84k, False: 175k]
  ------------------
  505|  10.4k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 6.07k, False: 4.32k]
  |  Branch (505:29): [True: 5.27k, False: 5.12k]
  |  Branch (505:45): [True: 5.27k, False: 802]
  ------------------
  506|  5.27k|                        {
  507|  5.27k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 2.85k, False: 2.41k]
  ------------------
  508|  2.85k|                            {
  509|  2.85k|                                return OpCode::MOVD;
  510|  2.85k|                            }
  511|  2.41k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 1.74k, False: 672]
  ------------------
  512|  1.74k|                            {
  513|  1.74k|                                return OpCode::MOVF;
  514|  1.74k|                            }
  515|  5.27k|                        }
  516|  5.12k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 3.69k, False: 1.43k]
  |  Branch (516:34): [True: 1.65k, False: 3.47k]
  |  Branch (516:50): [True: 2.06k, False: 1.63k]
  |  Branch (516:66): [True: 1.65k, False: 406]
  ------------------
  517|  1.65k|                        {
  518|  1.65k|                            return OpCode::MULT;
  519|  1.65k|                        }
  520|  4.14k|                        break;
  521|       |
  522|  39.2k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 39.2k, False: 144k]
  ------------------
  523|  56.8k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 17.5k, False: 166k]
  ------------------
  524|  56.8k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 5.71k, False: 51.0k]
  ------------------
  525|  56.8k|                        {
  526|  1.51k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 1.51k, False: 55.2k]
  ------------------
  527|  5.40k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 3.89k, False: 52.9k]
  ------------------
  528|  5.40k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 3.37k, False: 2.02k]
  ------------------
  529|  3.37k|                                {
  530|  3.37k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 1.40k, False: 1.97k]
  ------------------
  531|  1.40k|                                    {
  532|  1.40k|                                        return OpCode::SEQI;
  533|  1.40k|                                    }
  534|  1.97k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 845, False: 1.12k]
  ------------------
  535|    845|                                    {
  536|    845|                                        return OpCode::SEQU;
  537|    845|                                    }
  538|  3.37k|                                }
  539|  3.15k|                                break;
  540|       |
  541|  9.00k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 9.00k, False: 47.7k]
  ------------------
  542|  9.64k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 637, False: 56.1k]
  ------------------
  543|  9.64k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 3.50k, False: 6.13k]
  ------------------
  544|  3.50k|                                {
  545|  3.50k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 1.14k, False: 2.36k]
  ------------------
  546|  1.14k|                                    {
  547|  1.14k|                                        return OpCode::SGEI;
  548|  1.14k|                                    }
  549|  2.36k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 1.56k, False: 799]
  ------------------
  550|  1.56k|                                    {
  551|  1.56k|                                        return OpCode::SGEU;
  552|  1.56k|                                    }
  553|  3.50k|                                }
  554|  6.13k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 4.96k, False: 1.17k]
  ------------------
  555|  4.96k|                                {
  556|  4.96k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 1.20k, False: 3.76k]
  ------------------
  557|  1.20k|                                    {
  558|  1.20k|                                        return OpCode::SGTI;
  559|  1.20k|                                    }
  560|  3.76k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 2.50k, False: 1.25k]
  ------------------
  561|  2.50k|                                    {
  562|  2.50k|                                        return OpCode::SGTU;
  563|  2.50k|                                    }
  564|  4.96k|                                }
  565|  3.22k|                                break;
  566|       |
  567|  10.1k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 10.1k, False: 46.6k]
  ------------------
  568|  14.5k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 4.34k, False: 52.4k]
  ------------------
  569|  14.5k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 1.04k, False: 13.4k]
  ------------------
  570|  14.5k|                                {
  571|  1.31k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 1.31k, False: 13.2k]
  ------------------
  572|  2.23k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 916, False: 13.6k]
  ------------------
  573|  2.23k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 1.27k, False: 954]
  ------------------
  574|  1.27k|                                        {
  575|  1.27k|                                            return OpCode::SLAI;
  576|  1.27k|                                        }
  577|    954|                                        break;
  578|       |
  579|  1.09k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 1.09k, False: 13.4k]
  ------------------
  580|  3.20k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 2.10k, False: 12.4k]
  ------------------
  581|  3.20k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 1.01k, False: 2.18k]
  ------------------
  582|  1.01k|                                        {
  583|  1.01k|                                            return OpCode::SLEI;
  584|  1.01k|                                        }
  585|  2.18k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 811, False: 1.37k]
  ------------------
  586|    811|                                        {
  587|    811|                                            return OpCode::SLEU;
  588|    811|                                        }
  589|  1.37k|                                        break;
  590|       |
  591|  3.28k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 3.28k, False: 11.2k]
  ------------------
  592|  3.93k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 650, False: 13.8k]
  ------------------
  593|  3.93k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 3.08k, False: 847]
  ------------------
  594|  3.08k|                                        {
  595|  3.08k|                                            return OpCode::SLLI;
  596|  3.08k|                                        }
  597|    847|                                        break;
  598|       |
  599|    938|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 938, False: 13.5k]
  ------------------
  600|  4.11k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 3.17k, False: 11.3k]
  ------------------
  601|  4.11k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 1.30k, False: 2.80k]
  ------------------
  602|  1.30k|                                        {
  603|  1.30k|                                            return OpCode::SLTI;
  604|  1.30k|                                        }
  605|  2.80k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 1.33k, False: 1.47k]
  ------------------
  606|  1.33k|                                        {
  607|  1.33k|                                            return OpCode::SLTU;
  608|  1.33k|                                        }
  609|  1.47k|                                        break;
  610|  14.5k|                                }
  611|       |
  612|  9.49k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 3.79k, False: 53.0k]
  ------------------
  613|  11.3k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 1.86k, False: 54.9k]
  ------------------
  614|  11.3k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 6.63k, False: 4.72k]
  ------------------
  615|  6.63k|                                {
  616|  6.63k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 1.20k, False: 5.42k]
  ------------------
  617|  1.20k|                                    {
  618|  1.20k|                                        return OpCode::SNEI;
  619|  1.20k|                                    }
  620|  5.42k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 1.75k, False: 3.67k]
  ------------------
  621|  1.75k|                                    {
  622|  1.75k|                                        return OpCode::SNEU;
  623|  1.75k|                                    }
  624|  6.63k|                                }
  625|  8.40k|                                break;
  626|       |
  627|  8.40k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 1.37k, False: 55.4k]
  ------------------
  628|  4.54k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 3.16k, False: 53.6k]
  ------------------
  629|  4.54k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 1.21k, False: 3.33k]
  |  Branch (629:37): [True: 716, False: 3.83k]
  |  Branch (629:53): [True: 716, False: 495]
  ------------------
  630|    716|                                {
  631|    716|                                    return OpCode::SRAI;
  632|    716|                                }
  633|  3.83k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 2.66k, False: 1.16k]
  |  Branch (633:42): [True: 1.91k, False: 1.91k]
  |  Branch (633:58): [True: 1.91k, False: 750]
  ------------------
  634|  1.91k|                                {
  635|  1.91k|                                    return OpCode::SRLI;
  636|  1.91k|                                }
  637|  1.91k|                                break;
  638|       |
  639|  5.18k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 5.18k, False: 51.6k]
  ------------------
  640|  11.3k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 6.13k, False: 50.6k]
  ------------------
  641|  11.3k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 9.84k, False: 1.46k]
  ------------------
  642|  9.84k|                                {
  643|  9.84k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 2.25k, False: 7.59k]
  ------------------
  644|  9.84k|                                    {
  645|  1.87k|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 1.87k, False: 7.97k]
  ------------------
  646|  2.89k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 1.01k, False: 8.83k]
  ------------------
  647|  2.89k|                                            return OpCode::SUBD;
  648|       |
  649|    426|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 426, False: 9.42k]
  ------------------
  650|  1.09k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 668, False: 9.18k]
  ------------------
  651|  1.09k|                                            return OpCode::SUBF;
  652|       |
  653|    628|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 628, False: 9.22k]
  ------------------
  654|  1.26k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 639, False: 9.21k]
  ------------------
  655|  1.26k|                                            return OpCode::SUBI;
  656|       |
  657|  1.12k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 1.12k, False: 8.72k]
  ------------------
  658|  2.33k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 1.21k, False: 8.63k]
  ------------------
  659|  2.33k|                                            return OpCode::SUBU;
  660|  9.84k|                                    }
  661|  9.84k|                                }
  662|  3.72k|                                break;
  663|  56.8k|                        }
  664|  26.1k|                        break;
  665|       |
  666|  26.1k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 3.27k, False: 180k]
  ------------------
  667|  4.78k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 1.51k, False: 182k]
  ------------------
  668|  4.78k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 2.89k, False: 1.89k]
  |  Branch (668:29): [True: 965, False: 3.82k]
  |  Branch (668:45): [True: 1.94k, False: 949]
  |  Branch (668:61): [True: 965, False: 981]
  ------------------
  669|    965|                        {
  670|    965|                            return OpCode::TRAP;
  671|    965|                        }
  672|  3.82k|                        break;
  673|  3.82k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 3.37k, False: 180k]
  ------------------
  674|  4.35k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 981, False: 182k]
  ------------------
  675|  4.35k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 2.84k, False: 1.51k]
  |  Branch (675:29): [True: 1.10k, False: 3.24k]
  |  Branch (675:45): [True: 2.00k, False: 843]
  |  Branch (675:61): [True: 1.10k, False: 896]
  ------------------
  676|  1.10k|                        {
  677|  1.10k|                            return OpCode::XORI;
  678|  1.10k|                        }
  679|  3.24k|                        break;
  680|   183k|                }
  681|   122k|                break;
  682|   183k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|   122k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 109k, False: 778k]
  ------------------
  686|   109k|                char c1 = token[0];
  687|   109k|                char c2 = token[1];
  688|   109k|                char c3 = token[2];
  689|   109k|                char c4 = token[3];
  690|   109k|                char c5 = token[4];
  691|       |
  692|   109k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 37.9k, False: 71.4k]
  ------------------
  693|   109k|                {
  694|  5.80k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 5.80k, False: 103k]
  ------------------
  695|  7.48k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 1.68k, False: 107k]
  ------------------
  696|  7.48k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 6.07k, False: 1.41k]
  |  Branch (696:29): [True: 876, False: 6.60k]
  |  Branch (696:45): [True: 4.97k, False: 1.10k]
  |  Branch (696:61): [True: 4.09k, False: 879]
  |  Branch (696:77): [True: 876, False: 3.21k]
  ------------------
  697|    876|                        {
  698|    876|                            return OpCode::ADDUI;
  699|    876|                        }
  700|  6.60k|                        break;
  701|       |
  702|  6.60k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 3.74k, False: 105k]
  ------------------
  703|  10.1k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 6.37k, False: 102k]
  ------------------
  704|  10.1k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 9.03k, False: 1.08k]
  |  Branch (704:29): [True: 1.40k, False: 8.71k]
  |  Branch (704:45): [True: 6.15k, False: 2.87k]
  |  Branch (704:61): [True: 2.88k, False: 3.27k]
  |  Branch (704:77): [True: 1.40k, False: 1.48k]
  ------------------
  705|  1.40k|                        {
  706|  1.40k|                            return OpCode::DIVUI;
  707|  1.40k|                        }
  708|  8.71k|                        break;
  709|       |
  710|  8.71k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 4.15k, False: 105k]
  ------------------
  711|  10.6k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 6.47k, False: 102k]
  ------------------
  712|  10.6k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 7.72k, False: 2.90k]
  |  Branch (712:29): [True: 5.71k, False: 4.92k]
  |  Branch (712:45): [True: 6.35k, False: 1.37k]
  |  Branch (712:61): [True: 5.71k, False: 642]
  ------------------
  713|  5.71k|                        {
  714|  5.71k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 699, False: 5.01k]
  ------------------
  715|  5.71k|                            {
  716|  1.21k|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 1.21k, False: 4.50k]
  ------------------
  717|  1.58k|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 370, False: 5.34k]
  ------------------
  718|  1.58k|                                    return OpCode::MULTD;
  719|       |
  720|    525|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 525, False: 5.18k]
  ------------------
  721|    941|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 416, False: 5.29k]
  ------------------
  722|    941|                                    return OpCode::MULTF;
  723|       |
  724|    494|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 494, False: 5.21k]
  ------------------
  725|  1.10k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 610, False: 5.10k]
  ------------------
  726|  1.10k|                                    return OpCode::MULTI;
  727|       |
  728|    538|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 538, False: 5.17k]
  ------------------
  729|  1.38k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 848, False: 4.86k]
  ------------------
  730|  1.38k|                                    return OpCode::MULTU;
  731|  5.71k|                            }
  732|  5.71k|                        }
  733|  5.61k|                        break;
  734|       |
  735|  25.5k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 25.5k, False: 83.7k]
  ------------------
  736|  43.1k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 17.6k, False: 91.6k]
  ------------------
  737|  43.1k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 3.94k, False: 39.2k]
  ------------------
  738|  43.1k|                        {
  739|  1.42k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 1.42k, False: 41.7k]
  ------------------
  740|  5.20k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 3.78k, False: 39.3k]
  ------------------
  741|  5.20k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 3.51k, False: 1.69k]
  |  Branch (741:37): [True: 1.45k, False: 3.75k]
  |  Branch (741:53): [True: 2.51k, False: 1.00k]
  |  Branch (741:69): [True: 1.45k, False: 1.06k]
  ------------------
  742|  1.45k|                                {
  743|  1.45k|                                    return OpCode::SEQUI;
  744|  1.45k|                                }
  745|  3.75k|                                break;
  746|       |
  747|  7.48k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 7.48k, False: 35.6k]
  ------------------
  748|  8.98k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 1.50k, False: 41.6k]
  ------------------
  749|  8.98k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 4.40k, False: 4.58k]
  |  Branch (749:37): [True: 1.83k, False: 7.15k]
  |  Branch (749:53): [True: 3.02k, False: 1.38k]
  |  Branch (749:69): [True: 1.83k, False: 1.19k]
  ------------------
  750|  1.83k|                                {
  751|  1.83k|                                    return OpCode::SGEUI;
  752|  1.83k|                                }
  753|  7.15k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 3.58k, False: 3.56k]
  |  Branch (753:42): [True: 740, False: 6.41k]
  |  Branch (753:58): [True: 1.99k, False: 1.59k]
  |  Branch (753:74): [True: 740, False: 1.25k]
  ------------------
  754|    740|                                {
  755|    740|                                    return OpCode::SGTUI;
  756|    740|                                }
  757|  6.41k|                                break;
  758|       |
  759|  6.41k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 6.04k, False: 37.1k]
  ------------------
  760|  9.38k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 3.33k, False: 39.8k]
  ------------------
  761|  9.38k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 2.26k, False: 7.11k]
  |  Branch (761:37): [True: 918, False: 8.46k]
  |  Branch (761:53): [True: 1.52k, False: 742]
  |  Branch (761:69): [True: 918, False: 609]
  ------------------
  762|    918|                                {
  763|    918|                                    return OpCode::SLEUI;
  764|    918|                                }
  765|  8.46k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 4.11k, False: 4.35k]
  |  Branch (765:42): [True: 2.40k, False: 6.06k]
  |  Branch (765:58): [True: 3.17k, False: 934]
  |  Branch (765:74): [True: 2.40k, False: 774]
  ------------------
  766|  2.40k|                                {
  767|  2.40k|                                    return OpCode::SLTUI;
  768|  2.40k|                                }
  769|  6.06k|                                break;
  770|       |
  771|  6.06k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 1.92k, False: 41.2k]
  ------------------
  772|  5.52k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 3.60k, False: 39.5k]
  ------------------
  773|  5.52k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 5.25k, False: 264]
  |  Branch (773:37): [True: 1.89k, False: 3.62k]
  |  Branch (773:53): [True: 3.28k, False: 1.97k]
  |  Branch (773:69): [True: 1.89k, False: 1.38k]
  ------------------
  774|  1.89k|                                {
  775|  1.89k|                                    return OpCode::SNEUI;
  776|  1.89k|                                }
  777|  3.62k|                                break;
  778|       |
  779|  3.62k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 3.18k, False: 39.9k]
  ------------------
  780|  10.1k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 6.94k, False: 36.2k]
  ------------------
  781|  10.1k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 8.86k, False: 1.27k]
  |  Branch (781:37): [True: 1.04k, False: 9.08k]
  |  Branch (781:53): [True: 2.71k, False: 6.14k]
  |  Branch (781:69): [True: 1.04k, False: 1.66k]
  ------------------
  782|  1.04k|                                {
  783|  1.04k|                                    return OpCode::SUBUI;
  784|  1.04k|                                }
  785|  9.08k|                                break;
  786|  43.1k|                        }
  787|       |
  788|  32.8k|                        break;
  789|   109k|                }
  790|       |
  791|  91.7k|                break;
  792|   109k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  91.7k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 46.8k, False: 840k]
  ------------------
  796|  46.8k|                char c1 = token[0];
  797|  46.8k|                char c2 = token[1];
  798|  46.8k|                char c3 = token[2];
  799|  46.8k|                char c4 = token[3];
  800|  46.8k|                char c5 = token[4];
  801|  46.8k|                char c6 = token[5];
  802|       |
  803|  46.8k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 15.0k, False: 31.7k]
  |  Branch (803:21): [True: 12.9k, False: 33.8k]
  |  Branch (803:37): [True: 14.3k, False: 752]
  |  Branch (803:53): [True: 12.9k, False: 1.31k]
  ------------------
  804|  12.9k|                {
  805|  12.9k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 1.26k, False: 11.7k]
  ------------------
  806|  12.9k|                    {
  807|  3.81k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 3.81k, False: 9.18k]
  ------------------
  808|  4.38k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 564, False: 12.4k]
  ------------------
  809|  4.38k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 3.69k, False: 693]
  ------------------
  810|  3.69k|                            {
  811|  3.69k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 468, False: 3.22k]
  ------------------
  812|    468|                                {
  813|    468|                                    return OpCode::CVTD2F;
  814|    468|                                }
  815|  3.22k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 2.78k, False: 441]
  ------------------
  816|  2.78k|                                {
  817|  2.78k|                                    return OpCode::CVTD2I;
  818|  2.78k|                                }
  819|  3.69k|                            }
  820|  1.13k|                            break;
  821|       |
  822|  3.67k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 3.67k, False: 9.32k]
  ------------------
  823|  3.94k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 269, False: 12.7k]
  ------------------
  824|  3.94k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 2.44k, False: 1.49k]
  ------------------
  825|  2.44k|                            {
  826|  2.44k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 644, False: 1.79k]
  ------------------
  827|    644|                                {
  828|    644|                                    return OpCode::CVTF2D;
  829|    644|                                }
  830|  1.79k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 624, False: 1.17k]
  ------------------
  831|    624|                                {
  832|    624|                                    return OpCode::CVTF2I;
  833|    624|                                }
  834|  2.44k|                            }
  835|  2.67k|                            break;
  836|       |
  837|  2.67k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 1.06k, False: 11.9k]
  ------------------
  838|  3.41k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 2.35k, False: 10.6k]
  ------------------
  839|  3.41k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 1.59k, False: 1.81k]
  ------------------
  840|  1.59k|                            {
  841|  1.59k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 856, False: 743]
  ------------------
  842|    856|                                {
  843|    856|                                    return OpCode::CVTI2D;
  844|    856|                                }
  845|    743|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 500, False: 243]
  ------------------
  846|    500|                                {
  847|    500|                                    return OpCode::CVTI2F;
  848|    500|                                }
  849|  1.59k|                            }
  850|  12.9k|                    }
  851|  12.9k|                }
  852|  33.8k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 6.84k, False: 26.9k]
  |  Branch (852:26): [True: 1.15k, False: 32.6k]
  |  Branch (852:42): [True: 5.15k, False: 1.69k]
  |  Branch (852:58): [True: 4.25k, False: 893]
  |  Branch (852:74): [True: 3.70k, False: 554]
  ------------------
  853|  33.8k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 2.53k, False: 1.16k]
  |  Branch (853:42): [True: 1.15k, False: 1.37k]
  ------------------
  854|  1.15k|                {
  855|  1.15k|                    return OpCode::MULTUI;
  856|  1.15k|                }
  857|  39.7k|                break;
  858|  46.8k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  39.7k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 24.7k, False: 863k]
  ------------------
  862|  24.7k|                char c1 = token[0];
  863|  24.7k|                char c2 = token[1];
  864|  24.7k|                char c3 = token[2];
  865|  24.7k|                char c4 = token[3];
  866|  24.7k|                char c5 = token[4];
  867|  24.7k|                char c6 = token[5];
  868|  24.7k|                char c7 = token[6];
  869|       |
  870|  24.7k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 6.97k, False: 17.7k]
  |  Branch (870:21): [True: 5.03k, False: 19.6k]
  |  Branch (870:37): [True: 5.53k, False: 1.43k]
  |  Branch (870:53): [True: 5.03k, False: 500]
  ------------------
  871|  5.03k|                {
  872|  5.03k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 2.69k, False: 2.34k]
  |  Branch (872:25): [True: 1.21k, False: 3.82k]
  |  Branch (872:41): [True: 2.19k, False: 498]
  |  Branch (872:54): [True: 1.55k, False: 643]
  |  Branch (872:70): [True: 1.21k, False: 343]
  ------------------
  873|  1.21k|                    {
  874|  1.21k|                        return OpCode::MOVI2FP;
  875|  1.21k|                    }
  876|  3.82k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 2.10k, False: 1.72k]
  |  Branch (876:30): [True: 540, False: 3.28k]
  |  Branch (876:46): [True: 1.62k, False: 485]
  |  Branch (876:62): [True: 822, False: 798]
  |  Branch (876:75): [True: 540, False: 282]
  ------------------
  877|    540|                    {
  878|    540|                        return OpCode::MOVFP2I;
  879|    540|                    }
  880|  5.03k|                }
  881|  22.9k|                break;
  882|  24.7k|            }
  883|       |
  884|  29.1k|            default: {
  ------------------
  |  Branch (884:13): [True: 29.1k, False: 858k]
  ------------------
  885|  29.1k|                break;
  886|  24.7k|            }
  887|   887k|        }
  888|       |
  889|       |        // None found
  890|   674k|        return OpCode::NONE;
  891|   887k|    }
_ZN3dlx3iceEcc:
   17|  1.02M|    {
   18|  1.02M|        constexpr const char diff = 'a' - 'A';
   19|  1.02M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 281k, False: 743k]
  |  Branch (19:28): [True: 230k, False: 512k]
  ------------------
   20|  1.02M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   941k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  10.8k|    {
  193|  10.8k|        ParseError err;
  194|       |
  195|  10.8k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  10.8k|        err.m_LineNumber                           = line_number;
  197|  10.8k|        err.m_Column                               = column;
  198|  10.8k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  10.8k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  10.8k|        return err;
  202|  10.8k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  10.8k|    {
  207|  10.8k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  10.8k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  10.8k|                                                         actual_type);
  210|  10.8k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    996|    {
  216|    996|        ParseError err;
  217|       |
  218|    996|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    996|        err.m_LineNumber        = line_number;
  220|    996|        err.m_Column            = column;
  221|    996|        err.invalid_number.text = text;
  222|       |
  223|    996|        return err;
  224|    996|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    996|    {
  228|    996|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    996|                                                token.GetColumn().unsafe(), token.GetText());
  230|    996|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|     22|    {
  235|     22|        ParseError err;
  236|       |
  237|     22|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|     22|        err.m_LineNumber = line_number;
  239|     22|        err.m_Column     = column;
  240|       |
  241|     22|        return err;
  242|     22|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|     22|    {
  247|     22|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|     22|                                                                     token.GetColumn().unsafe());
  249|     22|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   430k|    {
  255|   430k|        ParseError err;
  256|       |
  257|   430k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   430k|        err.m_LineNumber                   = line_number;
  259|   430k|        err.m_Column                       = column;
  260|   430k|        err.unexpected_token.expected_type = expected_type;
  261|   430k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   430k|        return err;
  264|   430k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   430k|    {
  269|   430k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   430k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   430k|                                                  token.GetType());
  272|   430k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  77.3k|    {
  277|  77.3k|        ParseError err;
  278|       |
  279|  77.3k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  77.3k|        err.m_LineNumber                   = line_number;
  281|  77.3k|        err.m_Column                       = column;
  282|  77.3k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  77.3k|        return err;
  285|  77.3k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|    375|    {
  289|    375|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|    375|                                                    token.GetColumn().unsafe(), token.GetText());
  291|    375|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   229k|    {
  296|   229k|        ParseError err;
  297|       |
  298|   229k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   229k|        err.m_LineNumber                       = line_number;
  300|   229k|        err.m_Column                           = column;
  301|   229k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   229k|        return err;
  304|   229k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   229k|    {
  309|   229k|        return ConstructInvalidLabelIdentifierParseError(
  310|   229k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   229k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  61.0k|    {
  317|  61.0k|        ParseError err;
  318|       |
  319|  61.0k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  61.0k|        err.m_LineNumber                     = line_number;
  321|  61.0k|        err.m_Column                         = column;
  322|  61.0k|        err.label_already_defined.label_name = label_name;
  323|  61.0k|        err.label_already_defined.at_line    = at_line;
  324|  61.0k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  61.0k|        return err;
  327|  61.0k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  61.0k|    {
  332|  61.0k|        return ConstructLabelAlreadyDefinedParseError(
  333|  61.0k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  61.0k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  61.0k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|  75.2k|    {
  340|  75.2k|        ParseError err;
  341|       |
  342|  75.2k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|  75.2k|        err.m_LineNumber = line_number;
  344|  75.2k|        err.m_Column     = column;
  345|       |
  346|  75.2k|        return err;
  347|  75.2k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|  75.2k|    {
  352|  75.2k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|  75.2k|                                                        token.GetColumn().unsafe());
  354|  75.2k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  20.9k|    {
  360|  20.9k|        ParseError err;
  361|       |
  362|  20.9k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  20.9k|        err.m_LineNumber               = line_number;
  364|  20.9k|        err.m_Column                   = column;
  365|  20.9k|        err.too_few_arguments.required = required;
  366|  20.9k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  20.9k|        return err;
  369|  20.9k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  20.9k|    {
  374|  20.9k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  20.9k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  20.9k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  18.1k|    {
  381|  18.1k|        ParseError err;
  382|       |
  383|  18.1k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  18.1k|        err.m_LineNumber           = line_number;
  385|  18.1k|        err.m_Column               = column;
  386|  18.1k|        err.empty_label.label_name = label_name;
  387|       |
  388|  18.1k|        return err;
  389|  18.1k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  18.1k|    {
  393|  18.1k|        return ConstructEmptyLabelParseError(
  394|  18.1k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  18.1k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 14.3k, False: 3.82k]
  ------------------
  396|  14.3k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  18.1k|                        token.GetText());
  398|  18.1k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  17.3k|    {
  403|  17.3k|        ParseError err;
  404|       |
  405|  17.3k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  17.3k|        err.m_LineNumber = line_number;
  407|  17.3k|        err.m_Column     = column;
  408|       |
  409|  17.3k|        return err;
  410|  17.3k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  17.3k|    {
  414|  17.3k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  17.3k|                                               token.GetColumn().unsafe());
  416|  17.3k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   941k|    {
   19|   941k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   941k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  8.58k|    {
  182|  8.58k|        ParsedProgram program;
  183|       |
  184|  8.58k|        program.m_Tokens = tokens;
  185|       |
  186|  8.58k|        phi::boolean line_has_instruction{false};
  187|  8.58k|        phi::usize   label_count{0u};
  188|       |
  189|  1.14M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 1.13M, False: 8.58k]
  ------------------
  190|  1.13M|        {
  191|  1.13M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  1.13M|            switch (current_token.GetType())
  196|  1.13M|            {
  197|       |                // Ignore comments
  198|  5.28k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 5.28k, False: 1.13M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  5.28k|                    break;
  201|       |
  202|   191k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 191k, False: 943k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   191k|                    line_has_instruction = false;
  205|   191k|                    break;
  206|       |
  207|   471k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 471k, False: 664k]
  ------------------
  208|   471k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 90.4k, False: 380k]
  ------------------
  209|  90.4k|                    {
  210|  90.4k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  90.4k|                                current_token, Token::Type::NewLine));
  212|  90.4k|                        break;
  213|  90.4k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   380k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 142k, False: 237k]
  ------------------
  218|   142k|                    {
  219|   142k|                        program.AddParseError(
  220|   142k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   142k|                        break;
  222|   142k|                    }
  223|       |
  224|   237k|                    std::string_view label_name = current_token.GetText();
  225|   237k|                    label_name.remove_suffix(1);
  226|       |
  227|   237k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 76.9k, False: 160k]
  ------------------
  228|  76.9k|                    {
  229|  76.9k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  76.9k|                                current_token.GetLineNumber().unsafe(),
  231|  76.9k|                                current_token.GetColumn().unsafe(), label_name));
  232|  76.9k|                        break;
  233|  76.9k|                    }
  234|       |
  235|   160k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 77.8k, False: 83.1k]
  ------------------
  236|  77.8k|                    {
  237|  77.8k|                        program.AddParseError(
  238|  77.8k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  77.8k|                        break;
  240|  77.8k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  83.1k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 61.0k, False: 22.1k]
  ------------------
  244|  61.0k|                    {
  245|       |                        // Find first defintions of label
  246|  61.0k|                        const Token* first_label_definition =
  247|  61.0k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  61.0k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  61.0k|                                    {
  250|  61.0k|                                        std::string_view token_label_name = t.GetText();
  251|  61.0k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  61.0k|                                        if (token_label_name == label_name)
  254|  61.0k|                                        {
  255|  61.0k|                                            return true;
  256|  61.0k|                                        }
  257|  61.0k|                                    }
  258|       |
  259|  61.0k|                                    return false;
  260|  61.0k|                                });
  261|       |
  262|  61.0k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  61.0k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  61.0k|                                current_token, *first_label_definition));
  266|  61.0k|                        break;
  267|  61.0k|                    }
  268|       |
  269|  22.1k|                    program.m_JumpData[label_name] =
  270|  22.1k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  22.1k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  22.1k|                    break;
  277|  83.1k|                }
  278|       |
  279|   139k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 139k, False: 995k]
  ------------------
  280|   139k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 75.2k, False: 64.7k]
  ------------------
  281|  75.2k|                    {
  282|  75.2k|                        program.AddParseError(
  283|  75.2k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|  75.2k|                        break;
  285|  75.2k|                    }
  286|       |
  287|  64.7k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  64.7k|                    PHI_ASSERT(current_token.HasHint());
  291|  64.7k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  64.7k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  64.7k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  64.7k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  64.7k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  64.7k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  64.7k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  64.7k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  64.7k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   122k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 112k, False: 10.1k]
  ------------------
  313|   112k|                    {
  314|       |                        // Get next token
  315|   112k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 1.03k, False: 111k]
  ------------------
  316|  1.03k|                        {
  317|  1.03k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|  1.03k|                                    current_token, number_of_argument_required.unsafe(),
  319|  1.03k|                                    argument_num.unsafe()));
  320|  1.03k|                            break;
  321|  1.03k|                        }
  322|       |
  323|   111k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   111k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 45.8k, False: 65.7k]
  ------------------
  327|  45.8k|                        {
  328|  45.8k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 17.3k, False: 28.5k]
  ------------------
  329|  17.3k|                            {
  330|  17.3k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  17.3k|                            }
  332|       |
  333|  45.8k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  45.8k|                            continue;
  336|  45.8k|                        }
  337|       |
  338|  65.7k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 19.9k, False: 45.8k]
  ------------------
  339|  19.9k|                        {
  340|  19.9k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  19.9k|                                    token, number_of_argument_required.unsafe(),
  342|  19.9k|                                    argument_num.unsafe()));
  343|  19.9k|                            break;
  344|  19.9k|                        }
  345|       |
  346|  45.8k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  45.8k|                                parse_instruction_argument(
  348|  45.8k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  45.8k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 33.5k, False: 12.2k]
  ------------------
  350|  33.5k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  33.5k|                            break;
  353|  33.5k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  12.2k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  12.2k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  12.2k|                        argument_num++;
  360|  12.2k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  12.2k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  64.7k|                    program.m_Instructions.emplace_back(instruction);
  368|  64.7k|                    line_has_instruction = true;
  369|  64.7k|                    break;
  370|   139k|                }
  371|       |
  372|   327k|                default:
  ------------------
  |  Branch (372:17): [True: 327k, False: 808k]
  ------------------
  373|   327k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   327k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 165k, False: 161k]
  ------------------
  375|   165k|                    {
  376|   165k|                        expected_token_type = Token::Type::NewLine;
  377|   165k|                    }
  378|       |
  379|   327k|                    program.AddParseError(
  380|   327k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   327k|                    break;
  382|  1.13M|            }
  383|  1.13M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  8.58k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 2.44k, False: 6.14k]
  ------------------
  387|  2.44k|        {
  388|  26.1k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 23.7k, False: 2.44k]
  ------------------
  389|  23.7k|            {
  390|  23.7k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  23.7k|                const Token& token = *it;
  393|  23.7k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 18.1k, False: 5.61k]
  ------------------
  394|  18.1k|                {
  395|  18.1k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  18.1k|                    --label_count;
  397|  18.1k|                }
  398|  23.7k|            }
  399|  2.44k|        }
  400|       |
  401|  8.58k|        return program;
  402|  8.58k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  8.58k|    {
  406|  8.58k|        TokenStream tokens = Tokenize(source);
  407|  8.58k|        return Parse(tokens);
  408|  8.58k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  45.8k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  45.8k|        switch (token.GetType())
   38|  45.8k|        {
   39|  6.15k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 6.15k, False: 39.6k]
  ------------------
   40|  6.15k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 2.56k, False: 3.58k]
  ------------------
   41|  6.15k|                                          ArgumentType::AddressDisplacement))
   42|  2.56k|                {
   43|  2.56k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  2.56k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  2.56k|                    return {};
   47|  2.56k|                }
   48|       |
   49|       |                // Get address displacement
   50|  3.58k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  3.58k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  3.58k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 22, False: 3.56k]
  ------------------
   55|     22|                {
   56|     22|                    program.AddParseError(
   57|     22|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|     22|                    return {};
   59|     22|                }
   60|       |
   61|  3.56k|                auto         it           = tokens.current_position();
   62|  3.56k|                const Token& first_token  = tokens.consume();
   63|  3.56k|                const Token& second_token = tokens.consume();
   64|  3.56k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  3.56k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 1.56k, False: 2.00k]
  ------------------
   67|  1.56k|                {
   68|  1.56k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  1.56k|                            first_token, Token::Type::OpenBracket));
   70|  1.56k|                    return {};
   71|  1.56k|                }
   72|       |
   73|       |                // Second token is the register
   74|  2.00k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 1.06k, False: 943]
  ------------------
   75|  1.06k|                {
   76|  1.06k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|  1.06k|                            second_token, Token::Type::RegisterInt));
   78|  1.06k|                    return {};
   79|  1.06k|                }
   80|       |
   81|    943|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 396, False: 547]
  ------------------
   82|    396|                {
   83|    396|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|    396|                            third_token, Token::Type::ClosingBracket));
   85|    396|                    return {};
   86|    396|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|    547|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|    547|                return ConstructInstructionArgumentAddressDisplacement(
   95|    547|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|    943|            }
   97|  3.31k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 3.31k, False: 42.5k]
  ------------------
   98|  3.31k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 1.35k, False: 1.95k]
  ------------------
   99|  1.35k|                {
  100|  1.35k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  1.35k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  1.35k|                    return {};
  103|  1.35k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  1.95k|                return ConstructInstructionArgumentRegisterInt(
  109|  1.95k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  3.31k|            }
  111|    979|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 979, False: 44.8k]
  ------------------
  112|    979|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 821, False: 158]
  ------------------
  113|    821|                {
  114|    821|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|    821|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|    821|                    return {};
  117|    821|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|    158|                return ConstructInstructionArgumentRegisterFloat(
  123|    158|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|    979|            }
  125|    375|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 375, False: 45.4k]
  ------------------
  126|    375|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|    375|                return {};
  129|    979|            }
  130|  21.7k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 21.7k, False: 24.0k]
  ------------------
  131|       |                // Parse as Label
  132|  21.7k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 4.57k, False: 17.2k]
  ------------------
  133|  4.57k|                {
  134|  4.57k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  4.57k|                            token, expected_argument_type, ArgumentType::Label));
  136|  4.57k|                    return {};
  137|  4.57k|                }
  138|       |
  139|  17.2k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 17.2k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  17.2k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 8.86k, False: 8.34k]
  ------------------
  146|  8.86k|                {
  147|  8.86k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  8.86k|                    return {};
  149|  8.86k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  8.34k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  17.2k|            }
  155|  3.72k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 3.72k, False: 42.1k]
  ------------------
  156|  3.72k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 1.49k, False: 2.23k]
  ------------------
  157|  1.49k|                {
  158|  1.49k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  1.49k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  1.49k|                    return {};
  161|  1.49k|                }
  162|       |
  163|  2.23k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 1.23k, False: 996]
  ------------------
  164|  1.23k|                {
  165|  1.23k|                    return ConstructInstructionArgumentImmediateValue(
  166|  1.23k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  1.23k|                }
  168|       |
  169|    996|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    996|                return {};
  171|  2.23k|            }
  172|       |
  173|  9.50k|            default:
  ------------------
  |  Branch (173:13): [True: 9.50k, False: 36.3k]
  ------------------
  174|  9.50k|                program.AddParseError(
  175|  9.50k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  9.50k|                return {};
  177|  45.8k|        }
  178|  45.8k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  1.07M|                                tokens.find_first_token_if([&](const Token& t) {
  248|  1.07M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 707k, False: 366k]
  ------------------
  249|   707k|                                    {
  250|   707k|                                        std::string_view token_label_name = t.GetText();
  251|   707k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   707k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 61.0k, False: 646k]
  ------------------
  254|  61.0k|                                        {
  255|  61.0k|                                            return true;
  256|  61.0k|                                        }
  257|   707k|                                    }
  258|       |
  259|  1.01M|                                    return false;
  260|  1.07M|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    141|    {
  354|    141|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 141]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    141|        m_CurrentProgram = &program;
  361|       |
  362|    141|        m_ProgramCounter               = 0u;
  363|    141|        m_Halted                       = false;
  364|    141|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    141|        m_LastRaisedException          = Exception::None;
  366|    141|        m_CurrentStepCount             = 0u;
  367|       |
  368|    141|        return true;
  369|    141|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   903k|    {
   14|   903k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 161k, False: 741k]
  ------------------
   15|   161k|        {
   16|   161k|            char first_char = token[0];
   17|   161k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 6.23k, False: 155k]
  |  Branch (17:38): [True: 6.07k, False: 149k]
  ------------------
   18|  12.3k|            {
   19|  12.3k|                char second_char = token[1];
   20|  12.3k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 10.2k, False: 2.07k]
  |  Branch (20:43): [True: 6.23k, False: 3.99k]
  ------------------
   21|  6.23k|                {
   22|  6.23k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  6.23k|                }
   24|  12.3k|            }
   25|   161k|        }
   26|   741k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 203k, False: 538k]
  ------------------
   27|   203k|        {
   28|   203k|            char first_char = token[0];
   29|   203k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 9.04k, False: 194k]
  |  Branch (29:38): [True: 2.43k, False: 192k]
  ------------------
   30|  11.4k|            {
   31|  11.4k|                char second_char = token[1];
   32|  11.4k|                char third_char  = token[2];
   33|       |
   34|  11.4k|                switch (second_char)
   35|  11.4k|                {
   36|  2.81k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 2.81k, False: 8.65k]
  ------------------
   37|  2.81k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 1.82k, False: 992]
  |  Branch (37:50): [True: 829, False: 997]
  ------------------
   38|    829|                        {
   39|    829|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|    829|                        }
   41|  1.98k|                        break;
   42|  2.81k|                    }
   43|  2.91k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 2.91k, False: 8.55k]
  ------------------
   44|  2.91k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 2.12k, False: 791]
  |  Branch (44:50): [True: 1.38k, False: 737]
  ------------------
   45|  1.38k|                        {
   46|  1.38k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  1.38k|                        }
   48|  1.52k|                        break;
   49|  2.91k|                    }
   50|  2.05k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 2.05k, False: 9.42k]
  ------------------
   51|  2.05k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 912, False: 1.14k]
  |  Branch (51:50): [True: 653, False: 489]
  ------------------
   52|  1.56k|                        {
   53|  1.56k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  1.56k|                        }
   55|    489|                        break;
   56|  2.05k|                    }
   57|  3.68k|                    default: {
  ------------------
  |  Branch (57:21): [True: 3.68k, False: 7.78k]
  ------------------
   58|  3.68k|                        break;
   59|  2.05k|                    }
   60|  11.4k|                }
   61|  11.4k|            }
   62|   203k|        }
   63|       |
   64|   893k|        return IntRegisterID::None;
   65|   903k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   893k|    {
   69|   893k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 155k, False: 737k]
  ------------------
   70|   155k|        {
   71|   155k|            char first_char = token[0];
   72|   155k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 3.86k, False: 151k]
  |  Branch (72:38): [True: 3.98k, False: 147k]
  ------------------
   73|  7.84k|            {
   74|  7.84k|                char second_char = token[1];
   75|  7.84k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 6.26k, False: 1.58k]
  |  Branch (75:43): [True: 2.29k, False: 3.97k]
  ------------------
   76|  2.29k|                {
   77|  2.29k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  2.29k|                }
   79|  7.84k|            }
   80|   155k|        }
   81|   737k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 199k, False: 538k]
  ------------------
   82|   199k|        {
   83|   199k|            char first_char = token[0];
   84|   199k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 11.0k, False: 188k]
  |  Branch (84:38): [True: 2.26k, False: 186k]
  ------------------
   85|  13.2k|            {
   86|  13.2k|                char second_char = token[1];
   87|  13.2k|                char third_char  = token[2];
   88|       |
   89|  13.2k|                switch (second_char)
   90|  13.2k|                {
   91|  3.89k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 3.89k, False: 9.37k]
  ------------------
   92|  3.89k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 2.77k, False: 1.12k]
  |  Branch (92:50): [True: 1.59k, False: 1.18k]
  ------------------
   93|  1.59k|                        {
   94|  1.59k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  1.59k|                        }
   96|  2.30k|                        break;
   97|  3.89k|                    }
   98|  2.30k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 2.27k, False: 11.0k]
  ------------------
   99|  2.27k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 1.65k, False: 614]
  |  Branch (99:50): [True: 801, False: 858]
  ------------------
  100|    801|                        {
  101|    801|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|    801|                        }
  103|  1.47k|                        break;
  104|  2.27k|                    }
  105|  2.15k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 2.15k, False: 11.1k]
  ------------------
  106|  2.15k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 578, False: 1.57k]
  |  Branch (106:50): [True: 438, False: 1.13k]
  ------------------
  107|  1.01k|                        {
  108|  1.01k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  1.01k|                        }
  110|  1.13k|                        break;
  111|  2.15k|                    }
  112|  4.95k|                    default: {
  ------------------
  |  Branch (112:21): [True: 4.95k, False: 8.32k]
  ------------------
  113|  4.95k|                        break;
  114|  2.15k|                    }
  115|  13.2k|                }
  116|  13.2k|            }
  117|   199k|        }
  118|       |
  119|   887k|        return FloatRegisterID::None;
  120|   893k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   828k|    {
  124|   828k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 156k, False: 672k]
  ------------------
  125|   156k|        {
  126|   156k|            char c1 = token[0];
  127|   156k|            char c2 = token[1];
  128|   156k|            char c3 = token[2];
  129|   156k|            char c4 = token[3];
  130|       |
  131|   156k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 4.41k, False: 151k]
  |  Branch (131:34): [True: 1.40k, False: 150k]
  |  Branch (131:49): [True: 1.62k, False: 4.19k]
  |  Branch (131:62): [True: 2.44k, False: 1.74k]
  ------------------
  132|   156k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 1.75k, False: 2.31k]
  |  Branch (132:34): [True: 625, False: 1.69k]
  |  Branch (132:49): [True: 1.72k, False: 660]
  |  Branch (132:62): [True: 9, False: 651]
  ------------------
  133|   156k|        }
  134|       |
  135|   672k|        return false;
  136|   828k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  1.08M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   170k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  4.15M|    {
   41|  4.15M|        return m_Type;
   42|  4.15M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  3.15M|    {
   51|  3.15M|        return m_LineNumber;
   52|  3.15M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  5.82M|    {
   56|  5.82M|        return m_Column;
   57|  5.82M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  3.77M|    {
   61|  3.77M|        return m_Text.length();
   62|  3.77M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  1.71M|    {
   66|  1.71M|        return m_Text;
   67|  1.71M|    }
_ZNK3dlx5Token7HasHintEv:
   79|  70.5k|    {
   80|  70.5k|        return m_HasHint;
   81|  70.5k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  72.2k|    {
   85|  72.2k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  72.2k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  72.2k|                   m_Type == Type::ImmediateInteger);
   88|  72.2k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  72.2k|        return m_Hint;
   91|  72.2k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  8.58k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  8.58k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  8.58k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  3.58k|    {
   51|  3.58k|        auto it = m_Iterator;
   52|  14.3k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 10.7k, False: 3.56k]
  ------------------
   53|  10.7k|        {
   54|  10.7k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 22, False: 10.7k]
  ------------------
   55|     22|            {
   56|     22|                return false;
   57|     22|            }
   58|  10.7k|        }
   59|       |
   60|  3.56k|        return true;
   61|  3.58k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  1.25M|    {
   65|  1.25M|        return m_Iterator != m_Tokens.end();
   66|  1.25M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  1.25M|    {
   70|  1.25M|        return m_Iterator == m_Tokens.end();
   71|  1.25M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  1.25M|    {
   85|  1.25M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  1.25M|        return *m_Iterator++;
   91|  1.25M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  3.56k|    {
  164|  3.56k|        return m_Iterator;
  165|  3.56k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|    547|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|    547|        m_Iterator = it;
  179|    547|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  8.58k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  8.58k|        return m_Tokens.begin();
  188|  8.58k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  8.58k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  8.58k|        return m_Tokens.end();
  206|  8.58k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  2.44k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  2.44k|        return m_Tokens.rbegin();
  224|  2.44k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  23.7k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  23.7k|        return m_Tokens.rend();
  233|  23.7k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  8.58k|    {
   63|  8.58k|        TokenStream tokens;
   64|       |
   65|  8.58k|        std::string_view current_token;
   66|       |
   67|  8.58k|        phi::u64 current_line_number{1u};
   68|  8.58k|        phi::u64 current_column{1u};
   69|  8.58k|        phi::u64 token_begin{0u};
   70|       |
   71|  8.58k|        phi::boolean parsing_comment{false};
   72|       |
   73|  3.04M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 3.03M, False: 8.58k]
  ------------------
   74|  3.03M|        {
   75|  3.03M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  3.03M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 212k, False: 2.82M]
  ------------------
   78|   212k|            {
   79|   212k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 83.7k, False: 128k]
  ------------------
   80|  83.7k|                {
   81|       |                    // Skip empty lines
   82|  83.7k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  83.7k|                                        current_line_number, current_column);
   84|       |
   85|  83.7k|                    parsing_comment = false;
   86|  83.7k|                    current_line_number += 1u;
   87|  83.7k|                    current_column = 1u;
   88|  83.7k|                    continue;
   89|  83.7k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   128k|                tokens.emplace_back(
   93|   128k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   128k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   128k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   128k|                                    current_line_number, current_column);
   98|       |
   99|   128k|                current_token   = std::string_view{};
  100|   128k|                parsing_comment = false;
  101|   128k|                current_line_number += 1u;
  102|   128k|                current_column = 0u;
  103|   128k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  2.82M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 4.64k, False: 2.82M]
  |  Branch (105:34): [True: 5.40k, False: 2.81M]
  ------------------
  106|  10.0k|            {
  107|  10.0k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 1.02k, False: 9.02k]
  ------------------
  108|  1.02k|                {
  109|  1.02k|                    token_begin = i;
  110|  1.02k|                }
  111|  9.02k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 6.32k, False: 2.69k]
  ------------------
  112|  6.32k|                {
  113|  6.32k|                    tokens.emplace_back(ParseToken(
  114|  6.32k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  6.32k|                            current_line_number, current_column - current_token.length()));
  116|  6.32k|                    token_begin   = i;
  117|  6.32k|                    current_token = std::string_view{};
  118|  6.32k|                }
  119|       |
  120|  10.0k|                parsing_comment = true;
  121|  10.0k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  10.0k|            }
  123|  2.81M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 17.1k, False: 2.79M]
  ------------------
  124|  17.1k|            {
  125|       |                // simply append the character
  126|  17.1k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|  17.1k|            }
  128|  2.79M|            else
  129|  2.79M|            {
  130|       |                // Not parsing a comment
  131|  2.79M|                switch (c)
  132|  2.79M|                {
  133|  34.7k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 34.7k, False: 2.76M]
  ------------------
  134|  99.8k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 65.1k, False: 2.73M]
  ------------------
  135|  99.8k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 0, False: 2.79M]
  ------------------
  136|  99.8k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 32.0k, False: 67.7k]
  ------------------
  137|  32.0k|                        {
  138|  32.0k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  32.0k|                            continue;
  141|  32.0k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|  67.7k|                        tokens.emplace_back(ParseToken(
  145|  67.7k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|  67.7k|                                current_line_number, current_column - current_token.length()));
  147|  67.7k|                        current_token = std::string_view{};
  148|  67.7k|                        break;
  149|   329k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 329k, False: 2.46M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|   329k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 274k, False: 55.3k]
  ------------------
  152|   274k|                        {
  153|   274k|                            current_token =
  154|   274k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|   274k|                            tokens.emplace_back(ParseToken(
  156|   274k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|   274k|                                    current_line_number,
  158|   274k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|   274k|                            current_token = std::string_view{};
  161|   274k|                        }
  162|  55.3k|                        else
  163|  55.3k|                        {
  164|       |                            // Orphan colon
  165|  55.3k|                            token_begin = i;
  166|       |
  167|  55.3k|                            tokens.emplace_back(Token::Type::Colon,
  168|  55.3k|                                                source.substr(token_begin.unsafe(), 1),
  169|  55.3k|                                                current_line_number, current_column);
  170|  55.3k|                        }
  171|   329k|                        break;
  172|   217k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 217k, False: 2.58M]
  ------------------
  173|   261k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 44.3k, False: 2.75M]
  ------------------
  174|   309k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 47.8k, False: 2.75M]
  ------------------
  175|   309k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 198k, False: 111k]
  ------------------
  176|   198k|                        {
  177|   198k|                            tokens.emplace_back(ParseToken(
  178|   198k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   198k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   198k|                            current_token = std::string_view{};
  182|   198k|                        }
  183|       |
  184|   309k|                        Token::Type type;
  185|   309k|                        switch (c)
  186|   309k|                        {
  187|   217k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 217k, False: 92.2k]
  ------------------
  188|   217k|                                type = Token::Type::Comma;
  189|   217k|                                break;
  190|  44.3k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 44.3k, False: 265k]
  ------------------
  191|  44.3k|                                type = Token::Type::OpenBracket;
  192|  44.3k|                                break;
  193|  47.8k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 47.8k, False: 261k]
  ------------------
  194|  47.8k|                                type = Token::Type::ClosingBracket;
  195|  47.8k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 309k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|   309k|#endif
  201|   309k|                        }
  202|       |
  203|   309k|                        token_begin = i;
  204|       |
  205|   309k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|   309k|                                            current_line_number, current_column);
  207|   309k|                        break;
  208|       |
  209|  2.05M|                    default:
  ------------------
  |  Branch (209:21): [True: 2.05M, False: 739k]
  ------------------
  210|  2.05M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 673k, False: 1.38M]
  ------------------
  211|   673k|                        {
  212|   673k|                            token_begin = i;
  213|   673k|                        }
  214|       |
  215|       |                        // simply append the character
  216|  2.05M|                        current_token =
  217|  2.05M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  2.79M|                }
  219|  2.79M|            }
  220|       |
  221|  2.92M|            current_column += 1u;
  222|  2.92M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  8.58k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 6.07k, False: 2.51k]
  ------------------
  226|  6.07k|        {
  227|  6.07k|            tokens.emplace_back(
  228|  6.07k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  6.07k|                               current_line_number, current_column - current_token.length()));
  230|  6.07k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  8.58k|        tokens.finalize();
  234|       |
  235|  8.58k|        return tokens;
  236|  8.58k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   681k|    {
   11|   681k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 10.5k, False: 670k]
  |  Branch (11:35): [True: 8.21k, False: 2.37k]
  ------------------
   12|  8.21k|        {
   13|  8.21k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  8.21k|            if (number)
  ------------------
  |  Branch (15:17): [True: 1.60k, False: 6.61k]
  ------------------
   16|  1.60k|            {
   17|  1.60k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  1.60k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  1.60k|            }
   20|       |
   21|  6.61k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  8.21k|        }
   23|       |
   24|   672k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 4.28k, False: 668k]
  |  Branch (24:35): [True: 3.07k, False: 665k]
  ------------------
   25|  7.35k|        {
   26|  7.35k|            return {Token::Type::Comment, token, line_number, column};
   27|  7.35k|        }
   28|       |
   29|   665k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 16.1k, False: 649k]
  ------------------
   30|  16.1k|        {
   31|  16.1k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  16.1k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  16.1k|        }
   34|       |
   35|   649k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 962, False: 648k]
  ------------------
   36|    962|        {
   37|    962|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|    962|        }
   39|       |
   40|   648k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 5.18k, False: 643k]
  ------------------
   41|  5.18k|        {
   42|  5.18k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  5.18k|                    static_cast<std::uint32_t>(id)};
   44|  5.18k|        }
   45|       |
   46|   643k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 4.73k, False: 638k]
  ------------------
   47|  4.73k|        {
   48|  4.73k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  4.73k|                    static_cast<std::uint32_t>(id)};
   50|  4.73k|        }
   51|       |
   52|   638k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 142k, False: 495k]
  ------------------
   53|   142k|        {
   54|   142k|            return {Token::Type::OpCode, token, line_number, column,
   55|   142k|                    static_cast<std::uint32_t>(opcode)};
   56|   142k|        }
   57|       |
   58|   495k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   638k|    }

_ZN6ImVec2C2Ev:
  263|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

LLVMFuzzerTestOneInput:
   11|  8.58k|{
   12|  8.58k|    static dlxemu::Emulator emu;
   13|       |
   14|  8.58k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   15|       |
   16|  8.58k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   17|       |
   18|       |    // Parse it
   19|  8.58k|    editor.SetText(std::string(source.data(), source.size()));
   20|  8.58k|    editor.m_FullText = editor.GetText();
   21|       |
   22|  8.58k|    emu.ParseProgram(editor.m_FullText);
   23|       |
   24|  8.58k|    editor.ColorizeInternal();
   25|       |
   26|  8.58k|    return 0;
   27|  8.58k|}


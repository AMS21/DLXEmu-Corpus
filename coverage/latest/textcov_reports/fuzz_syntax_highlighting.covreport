_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  196|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  201|  32.7k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  239|  6.55k|    {
  240|  6.55k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (240:13): [True: 2.58k, False: 3.97k]
  ------------------
  241|  2.58k|        {
  242|  2.58k|            return m_Line < other.m_Line;
  243|  2.58k|        }
  244|       |
  245|  3.97k|        return m_Column <= other.m_Column;
  246|  6.55k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  250|      1|    {
  251|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (251:13): [True: 0, False: 1]
  ------------------
  252|      0|        {
  253|      0|            return m_Line > other.m_Line;
  254|      0|        }
  255|       |
  256|      1|        return m_Column >= other.m_Column;
  257|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  264|  1.82M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  292|      1|    {
  293|      1|        Colorize();
  294|      1|        m_Lines.push_back(Line());
  295|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  298|      1|    {
  299|      1|        VerifyInternalState();
  300|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  348|  6.55k|    {
  349|  6.55k|        m_ErrorMarkers.clear();
  350|  6.55k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  413|  6.55k|    {
  414|  6.55k|        m_Breakpoints.clear();
  415|  6.55k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  493|  6.55k|    {
  494|  6.55k|        m_Lines.clear();
  495|  6.55k|        ResetState();
  496|  6.55k|        m_Lines.emplace_back(Line());
  497|       |
  498|  6.55k|        for (const char character : text)
  ------------------
  |  Branch (498:35): [True: 2.83M, False: 6.55k]
  ------------------
  499|  2.83M|        {
  500|  2.83M|            if (character == '\r' ||
  ------------------
  |  Branch (500:17): [True: 2.72k, False: 2.83M]
  |  Branch (500:17): [True: 882k, False: 1.95M]
  ------------------
  501|  2.83M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (501:18): [True: 1.04M, False: 1.78M]
  |  Branch (501:48): [True: 918k, False: 128k]
  |  Branch (501:69): [True: 879k, False: 38.7k]
  ------------------
  502|   882k|            {
  503|       |                // ignore the carriage return character and control characters
  504|   882k|            }
  505|  1.95M|            else if (character == '\n')
  ------------------
  |  Branch (505:22): [True: 128k, False: 1.82M]
  ------------------
  506|   128k|            {
  507|   128k|                m_Lines.emplace_back(Line());
  508|   128k|            }
  509|  1.82M|            else
  510|  1.82M|            {
  511|  1.82M|                m_Lines.back().emplace_back(
  512|  1.82M|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  513|  1.82M|            }
  514|  2.83M|        }
  515|       |
  516|  6.55k|        m_TextChanged = true;
  517|  6.55k|        m_ScrollToTop = true;
  518|       |
  519|  6.55k|        m_UndoBuffer.clear();
  520|  6.55k|        m_UndoIndex = 0u;
  521|       |
  522|  6.55k|        Colorize();
  523|  6.55k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  526|  6.55k|    {
  527|  6.55k|        const phi::u32 max_line = GetMaxLineNumber();
  528|       |
  529|  6.55k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  530|  6.55k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1493|      1|    {
 1494|       |        // Lines should never be empty
 1495|      1|        PHI_ASSERT(!m_Lines.empty());
 1496|       |
 1497|       |        // Verify Selection is still in a valid state
 1498|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1499|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1500|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1501|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1502|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1503|       |
 1504|       |        // Verify cursor position
 1505|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1506|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1507|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1508|       |
 1509|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1510|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1511|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1512|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1513|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1514|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1515|       |#endif
 1516|       |
 1517|       |        // Verify that all breakpoints are on existing lines
 1518|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1518:35): [True: 0, False: 1]
  ------------------
 1519|      0|        {
 1520|      0|            PHI_ASSERT(break_point != 0u);
 1521|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1522|      0|        }
 1523|       |
 1524|       |        // Verify that all error markers are on existing lines
 1525|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1525:34): [True: 0, False: 1]
  ------------------
 1526|      0|        {
 1527|      0|            const phi::u32 line_number = error_marker.first;
 1528|       |
 1529|      0|            PHI_ASSERT(line_number != 0u);
 1530|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1531|      0|        }
 1532|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1535|      1|    {
 1536|      1|        constexpr const static Palette palette = {{
 1537|      1|                0xff7f7f7f, // Default
 1538|      1|                0xffd69c56, // OpCode
 1539|      1|                0xff00ff00, // Register
 1540|      1|                0xff7070e0, // IntegerLiteral
 1541|      1|                0xff206020, // Comment
 1542|      1|                0xff101010, // Background
 1543|      1|                0xffe0e0e0, // Cursor
 1544|      1|                0x80a06020, // Selection
 1545|      1|                0x800020ff, // ErrorMarker
 1546|      1|                0x40f08000, // Breakpoint
 1547|      1|                0xff707000, // Line number
 1548|      1|                0x40000000, // Current line fill
 1549|      1|                0x40808080, // Current line fill (inactive)
 1550|      1|                0x40a0a0a0, // Current line edge
 1551|      1|        }};
 1552|       |
 1553|      1|        return palette;
 1554|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1721|  6.55k|    {
 1722|       |        // TODO: This is quite unreadable
 1723|  6.55k|        const phi::u32 to_line =
 1724|  6.55k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1724:17): [True: 6.55k, False: 0]
  ------------------
 1725|  6.55k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1726|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1727|       |
 1728|  6.55k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1729|  6.55k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1730|  6.55k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1731|  6.55k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1732|  6.55k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1838|  6.55k|    {
 1839|  6.55k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1840|  6.55k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1841|  6.55k|        PHI_ASSERT(start <= end);
 1842|       |
 1843|  6.55k|        std::string result;
 1844|       |
 1845|  6.55k|        phi::u32   lstart = start.m_Line;
 1846|  6.55k|        phi::u32   lend   = end.m_Line;
 1847|  6.55k|        phi::u32   istart = GetCharacterIndex(start);
 1848|  6.55k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1849|  6.55k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1850|  6.55k|        phi::usize size   = 0u;
 1851|       |
 1852|   141k|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1852:35): [True: 135k, False: 6.55k]
  ------------------
 1853|   135k|        {
 1854|   135k|            PHI_ASSERT(i < m_Lines.size());
 1855|   135k|            size += m_Lines[i.unsafe()].size();
 1856|   135k|        }
 1857|       |
 1858|  6.55k|        result.reserve((size + size / 8u).unsafe());
 1859|       |
 1860|  1.96M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1860:16): [True: 1.39M, False: 563k]
  |  Branch (1860:16): [True: 1.95M, False: 6.55k]
  |  Branch (1860:33): [True: 556k, False: 6.55k]
  ------------------
 1861|  1.95M|        {
 1862|  1.95M|            PHI_ASSERT(lstart < m_Lines.size());
 1863|       |
 1864|  1.95M|            const Line& line = m_Lines[lstart.unsafe()];
 1865|  1.95M|            if (istart < line.size())
  ------------------
  |  Branch (1865:17): [True: 1.82M, False: 128k]
  ------------------
 1866|  1.82M|            {
 1867|  1.82M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1868|  1.82M|                istart++;
 1869|  1.82M|            }
 1870|   128k|            else
 1871|   128k|            {
 1872|   128k|                istart = 0u;
 1873|   128k|                ++lstart;
 1874|       |
 1875|   128k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1875:21): [True: 128k, False: 0]
  ------------------
 1876|   128k|                {
 1877|   128k|                    result += '\n';
 1878|   128k|                }
 1879|   128k|            }
 1880|  1.95M|        }
 1881|       |
 1882|  6.55k|        return result;
 1883|  6.55k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2421|  13.1k|    {
 2422|  13.1k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2423|       |
 2424|  13.1k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2425|  13.1k|        phi::u32    index = 0u;
 2426|   819k|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2426:35): [True: 812k, False: 6.77k]
  |  Branch (2426:35): [True: 806k, False: 13.1k]
  |  Branch (2426:58): [True: 806k, False: 6.34k]
  ------------------
 2427|   806k|        {
 2428|   806k|            PHI_ASSERT(index < line.size());
 2429|   806k|            const Char character = line[index.unsafe()].m_Char;
 2430|       |
 2431|   806k|            if (character == '\t')
  ------------------
  |  Branch (2431:17): [True: 14.3k, False: 791k]
  ------------------
 2432|  14.3k|            {
 2433|  14.3k|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2434|  14.3k|            }
 2435|   791k|            else
 2436|   791k|            {
 2437|   791k|                ++column;
 2438|   791k|            }
 2439|       |
 2440|   806k|            index += UTF8CharLength(character);
 2441|   806k|        }
 2442|       |
 2443|  13.1k|        return index;
 2444|  13.1k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2493|  6.55k|    {
 2494|  6.55k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2494:13): [True: 0, False: 6.55k]
  ------------------
 2495|      0|        {
 2496|      0|            return 0u;
 2497|      0|        }
 2498|       |
 2499|  6.55k|        const Line& line = m_Lines[line_number.unsafe()];
 2500|  6.55k|        phi::u32    col  = 0u;
 2501|       |
 2502|   812k|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2502:32): [True: 806k, False: 6.55k]
  ------------------
 2503|   806k|        {
 2504|   806k|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2505|   806k|            if (character == '\t')
  ------------------
  |  Branch (2505:17): [True: 14.3k, False: 791k]
  ------------------
 2506|  14.3k|            {
 2507|  14.3k|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2508|  14.3k|            }
 2509|   791k|            else
 2510|   791k|            {
 2511|   791k|                col++;
 2512|   791k|            }
 2513|       |
 2514|   806k|            i += UTF8CharLength(character);
 2515|   806k|        }
 2516|       |
 2517|  6.55k|        return col;
 2518|  6.55k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2521|  6.55k|    {
 2522|  6.55k|        PHI_ASSERT(!m_Lines.empty());
 2523|       |
 2524|  6.55k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2525|  6.55k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3660|   774k|    {
 3661|   774k|        PaletteIndex palette_index{PaletteIndex::Default};
 3662|       |
 3663|       |        // Determine palette color
 3664|   774k|        switch (token.GetType())
 3665|   774k|        {
 3666|  5.75k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3666:13): [True: 5.75k, False: 768k]
  ------------------
 3667|  5.75k|                palette_index = PaletteIndex::Comment;
 3668|  5.75k|                break;
 3669|  5.96k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3669:13): [True: 5.96k, False: 768k]
  ------------------
 3670|  14.9k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3670:13): [True: 8.99k, False: 765k]
  ------------------
 3671|  14.9k|                palette_index = PaletteIndex::IntegerLiteral;
 3672|  14.9k|                break;
 3673|   108k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3673:13): [True: 108k, False: 665k]
  ------------------
 3674|   108k|                palette_index = PaletteIndex::OpCode;
 3675|   108k|                break;
 3676|  3.14k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3676:13): [True: 3.14k, False: 771k]
  ------------------
 3677|  11.4k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3677:13): [True: 8.34k, False: 765k]
  ------------------
 3678|  12.7k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3678:13): [True: 1.27k, False: 772k]
  ------------------
 3679|  12.7k|                palette_index = PaletteIndex::Register;
 3680|  12.7k|                break;
 3681|   128k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3681:13): [True: 128k, False: 645k]
  ------------------
 3682|   128k|                return;
 3683|   503k|            default:
  ------------------
  |  Branch (3683:13): [True: 503k, False: 270k]
  ------------------
 3684|   503k|                break;
 3685|   774k|        }
 3686|       |
 3687|   645k|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3688|   645k|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3689|       |
 3690|   645k|        for (phi::u64 index{token.GetColumn() - 1u};
 3691|  2.40M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3691:14): [True: 1.75M, False: 645k]
  ------------------
 3692|  1.75M|        {
 3693|  1.75M|            PHI_ASSERT(index < line.size());
 3694|  1.75M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3695|  1.75M|        }
 3696|   645k|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3699|  6.55k|    {
 3700|  6.55k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3701|       |
 3702|  6.55k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3702:38): [True: 774k, False: 6.55k]
  ------------------
 3703|   774k|        {
 3704|   774k|            ColorizeToken(token);
 3705|   774k|        }
 3706|  6.55k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3709|  6.55k|    {
 3710|  6.55k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3711|  6.55k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3712|  6.55k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3713|       |
 3714|       |        // Clear breakpoints and markers
 3715|  6.55k|        ClearBreakPoints();
 3716|  6.55k|        ClearErrorMarkers();
 3717|  6.55k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  134|   806k|{
  135|   806k|    return UTF8CharLength(static_cast<char>(characater));
  136|   806k|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  104|  1.61M|{
  105|  1.61M|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (105:9): [True: 2.82k, False: 1.60M]
  ------------------
  106|  2.82k|    {
  107|  2.82k|        return 6_u8;
  108|  2.82k|    }
  109|       |
  110|  1.60M|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (110:9): [True: 4.77k, False: 1.60M]
  ------------------
  111|  4.77k|    {
  112|  4.77k|        return 5_u8;
  113|  4.77k|    }
  114|       |
  115|  1.60M|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (115:9): [True: 3.68k, False: 1.60M]
  ------------------
  116|  3.68k|    {
  117|  3.68k|        return 4_u8;
  118|  3.68k|    }
  119|       |
  120|  1.60M|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (120:9): [True: 9.21k, False: 1.59M]
  ------------------
  121|  9.21k|    {
  122|  9.21k|        return 3_u8;
  123|  9.21k|    }
  124|       |
  125|  1.59M|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (125:9): [True: 23.7k, False: 1.56M]
  ------------------
  126|  23.7k|    {
  127|  23.7k|        return 2_u8;
  128|  23.7k|    }
  129|       |
  130|  1.56M|    return 1_u8;
  131|  1.59M|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  174|  6.55k|    {
  175|  6.55k|        return m_DLXProgram;
  176|  6.55k|    }
_ZN6dlxemu8Emulator12ParseProgramENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  179|  6.55k|    {
  180|  6.55k|        m_DLXProgram = dlx::Parser::Parse(source);
  181|       |
  182|  6.55k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (182:13): [True: 148, False: 6.41k]
  ------------------
  183|    148|        {
  184|    148|            m_Processor.LoadProgram(m_DLXProgram);
  185|    148|        }
  186|  6.55k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  199|  6.55k|    {
  200|  6.55k|        return m_CodeEditor;
  201|  6.55k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   37|      1|    {
   38|      1|        Shutdown();
   39|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  107|      1|    {
  108|      1|        if (imgui_initialized)
  ------------------
  |  Branch (108:13): [True: 0, False: 1]
  ------------------
  109|      0|        {
  110|      0|            ShutdownImGui();
  111|      0|        }
  112|       |
  113|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (113:13): [True: 0, False: 1]
  ------------------
  114|      0|        {
  115|      0|            glfwDestroyWindow(m_Window);
  116|      0|        }
  117|       |
  118|      1|        if (glfw_initialized)
  ------------------
  |  Branch (118:13): [True: 0, False: 1]
  ------------------
  119|      0|        {
  120|      0|            glfwTerminate();
  121|      0|        }
  122|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   182k|        {
  169|   182k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   182k|            switch (index.unsafe())
  172|   182k|            {
  173|  80.8k|                case 0:
  ------------------
  |  Branch (173:17): [True: 80.8k, False: 101k]
  ------------------
  174|  80.8k|                    return m_Arg1Type;
  175|       |
  176|  51.0k|                case 1:
  ------------------
  |  Branch (176:17): [True: 51.0k, False: 131k]
  ------------------
  177|  51.0k|                    return m_Arg2Type;
  178|       |
  179|  50.5k|                case 2:
  ------------------
  |  Branch (179:17): [True: 50.5k, False: 131k]
  ------------------
  180|  50.5k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 182k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   182k|#endif
  187|   182k|            }
  188|   182k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  48.6k|        {
  195|  48.6k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  48.6k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 47.9k, False: 754]
  ------------------
  199|  47.9k|            {
  200|  47.9k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  47.9k|            }
  202|  48.6k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 28.0k, False: 20.6k]
  ------------------
  203|  28.0k|            {
  204|  28.0k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  28.0k|            }
  206|  48.6k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 16.4k, False: 32.2k]
  ------------------
  207|  16.4k|            {
  208|  16.4k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  16.4k|            }
  210|       |
  211|  48.6k|            return number_of_argument_required;
  212|  48.6k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  48.6k|        {
  221|  48.6k|            return m_Executor;
  222|  48.6k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  28.8k|    {
   38|  28.8k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  28.8k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  28.8k|                                         static_cast<underlying_t>(rhs));
   42|  28.8k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  28.8k|    {
   55|  28.8k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  28.8k|        return static_cast<underlying_t>(type & test) != 0;
   58|  28.8k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|   175k|    {
   32|   175k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 3.57k, False: 171k]
  ------------------
   33|  3.57k|        {
   34|  3.57k|            return true;
   35|  3.57k|        }
   36|       |
   37|   171k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 387, False: 171k]
  ------------------
   38|    387|        {
   39|    387|            return true;
   40|    387|        }
   41|       |
   42|   171k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 54.7k, False: 116k]
  ------------------
   43|  54.7k|        {
   44|  54.7k|            return true;
   45|  54.7k|        }
   46|       |
   47|   116k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 418, False: 116k]
  ------------------
   48|    418|        {
   49|    418|            return true;
   50|    418|        }
   51|       |
   52|   116k|        return false;
   53|   116k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|   116k|    {
   57|   116k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 116k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|   116k|        const char first_char = token.at(0);
   63|       |
   64|   116k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 23.3k, False: 93.0k]
  ------------------
   65|  23.3k|        {
   66|  23.3k|            return phi::is_alpha(first_char);
   67|  23.3k|        }
   68|       |
   69|  93.0k|        phi::boolean just_under_scores = (first_char == '_');
   70|  93.0k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 15.0k, False: 77.9k]
  |  Branch (70:15): [True: 77.0k, False: 15.9k]
  |  Branch (70:44): [True: 853, False: 15.0k]
  ------------------
   71|  15.0k|        {
   72|  15.0k|            return false;
   73|  15.0k|        }
   74|       |
   75|   257k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 208k, False: 48.8k]
  ------------------
   76|   208k|        {
   77|   208k|            const char c{token.at(index)};
   78|       |
   79|   208k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 178k, False: 30.0k]
  ------------------
   80|   178k|            {
   81|   178k|                just_under_scores = false;
   82|   178k|            }
   83|  30.0k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 931, False: 29.0k]
  ------------------
   84|    931|            {
   85|    931|                continue;
   86|    931|            }
   87|  29.0k|            else
   88|  29.0k|            {
   89|  29.0k|                return false;
   90|  29.0k|            }
   91|   208k|        }
   92|       |
   93|  48.8k|        return !just_under_scores;
   94|  77.9k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   435k|    {
  101|   435k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 435k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   435k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 65.3k, False: 370k]
  ------------------
  107|  65.3k|        {
  108|  65.3k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 6.99k, False: 58.3k]
  ------------------
  109|  6.99k|            {
  110|  6.99k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  6.99k|            }
  112|       |
  113|  58.3k|            return {};
  114|  65.3k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   370k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 492, False: 369k]
  ------------------
  118|    492|        {
  119|    492|            return {};
  120|    492|        }
  121|       |
  122|   369k|        std::int32_t number{0};
  123|   369k|        phi::boolean is_negative{false};
  124|   369k|        phi::boolean starts_with_zero{false};
  125|   369k|        phi::boolean parsing_binary{false};
  126|   369k|        phi::boolean parsing_octal{false};
  127|   369k|        phi::boolean parsing_hexadecimal{false};
  128|   369k|        phi::boolean parsed_something{false};
  129|   369k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   415k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 410k, False: 5.47k]
  ------------------
  134|   410k|        {
  135|   410k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   410k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 369k, False: 40.6k]
  ------------------
  139|   369k|            {
  140|   369k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 1.58k, False: 368k]
  ------------------
  141|  1.58k|                {
  142|  1.58k|                    continue;
  143|  1.58k|                }
  144|       |
  145|   368k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 4.27k, False: 363k]
  ------------------
  146|  4.27k|                {
  147|  4.27k|                    is_negative = true;
  148|  4.27k|                    continue;
  149|  4.27k|                }
  150|       |
  151|   363k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 8.29k, False: 355k]
  ------------------
  152|  8.29k|                {
  153|  8.29k|                    starts_with_zero = true;
  154|  8.29k|                    continue;
  155|  8.29k|                }
  156|       |
  157|   355k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 967, False: 354k]
  ------------------
  158|    967|                {
  159|    967|                    return {};
  160|    967|                }
  161|   355k|            }
  162|       |
  163|       |            // Second character
  164|   395k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 19.2k, False: 375k]
  ------------------
  165|  19.2k|            {
  166|  19.2k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 8.29k, False: 10.9k]
  ------------------
  167|  8.29k|                {
  168|       |                    // Binary
  169|  8.29k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 868, False: 7.42k]
  |  Branch (169:37): [True: 226, False: 7.20k]
  ------------------
  170|  1.09k|                    {
  171|  1.09k|                        parsing_binary = true;
  172|  1.09k|                        continue;
  173|  1.09k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  7.20k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 1.26k, False: 5.94k]
  |  Branch (176:37): [True: 974, False: 4.96k]
  ------------------
  177|  2.23k|                    {
  178|  2.23k|                        parsing_hexadecimal = true;
  179|  2.23k|                        continue;
  180|  2.23k|                    }
  181|       |
  182|       |                    // Octal
  183|  4.96k|                    parsing_octal = true;
  184|  4.96k|                }
  185|  19.2k|            }
  186|       |
  187|       |            // Handle seperators
  188|   391k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 1.03k, False: 390k]
  ------------------
  189|  1.03k|            {
  190|  1.03k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 377, False: 659]
  ------------------
  191|    377|                {
  192|    377|                    return {};
  193|    377|                }
  194|       |
  195|    659|                parsed_separator = true;
  196|    659|                continue;
  197|  1.03k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   390k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 10.6k, False: 380k]
  |  Branch (200:32): [True: 569, False: 10.0k]
  ------------------
  201|    569|            {
  202|       |                // Would underflow
  203|    569|                return {};
  204|    569|            }
  205|   390k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 380k, False: 10.0k]
  |  Branch (205:17): [True: 904, False: 389k]
  |  Branch (205:33): [True: 904, False: 379k]
  ------------------
  206|    904|            {
  207|       |                // Would overflow
  208|    904|                return {};
  209|    904|            }
  210|       |
  211|   389k|            parsed_separator = false;
  212|   389k|            parsed_something = true;
  213|       |
  214|   389k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 1.23k, False: 388k]
  ------------------
  215|  1.23k|            {
  216|  1.23k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 838, False: 394]
  ------------------
  217|    838|                {
  218|    838|                    return {};
  219|    838|                }
  220|       |
  221|    394|                number <<= 1;
  222|    394|                number |= (c - '0');
  223|    394|            }
  224|   388k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 7.45k, False: 380k]
  ------------------
  225|  7.45k|            {
  226|  7.45k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 4.50k, False: 2.94k]
  ------------------
  227|  4.50k|                {
  228|  4.50k|                    return {};
  229|  4.50k|                }
  230|       |
  231|  2.94k|                number <<= 3;
  232|  2.94k|                number |= (c - '0');
  233|  2.94k|            }
  234|   380k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 4.92k, False: 375k]
  ------------------
  235|  4.92k|            {
  236|  4.92k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 1.19k, False: 3.72k]
  ------------------
  237|  1.19k|                {
  238|  1.19k|                    return {};
  239|  1.19k|                }
  240|       |
  241|  3.72k|                number <<= 4;
  242|  3.72k|                number |= phi::hex_digit_value(c).unsafe();
  243|  3.72k|            }
  244|   375k|            else
  245|   375k|            {
  246|   375k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 354k, False: 21.2k]
  ------------------
  247|   354k|                {
  248|   354k|                    return {};
  249|   354k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  21.2k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 7.36k, False: 13.9k]
  |  Branch (252:36): [True: 355, False: 7.00k]
  ------------------
  253|    355|                {
  254|    355|                    return {};
  255|    355|                }
  256|       |
  257|  20.9k|                number *= 10;
  258|  20.9k|                number += (c - '0');
  259|  20.9k|            }
  260|   389k|        }
  261|       |
  262|  5.47k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 5.18k, False: 291]
  ------------------
  263|  5.18k|        {
  264|       |            // Check for over/underflow
  265|  5.18k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 1.15k, False: 4.03k]
  |  Branch (265:32): [True: 653, False: 503]
  ------------------
  266|    653|            {
  267|       |                // Would underflow
  268|    653|                return {};
  269|    653|            }
  270|  4.53k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 4.03k, False: 503]
  |  Branch (270:17): [True: 673, False: 3.86k]
  |  Branch (270:33): [True: 673, False: 3.35k]
  ------------------
  271|    673|            {
  272|       |                // Would overflow
  273|    673|                return {};
  274|    673|            }
  275|       |
  276|  3.86k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 503, False: 3.35k]
  ------------------
  277|    503|            {
  278|    503|                return static_cast<std::int16_t>(-number);
  279|    503|            }
  280|       |
  281|  3.35k|            return static_cast<std::int16_t>(number);
  282|  3.86k|        }
  283|       |
  284|    291|        return {};
  285|  5.47k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  39.8k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  39.8k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 757k, False: 0]
  ------------------
   64|   757k|            {
   65|   757k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 39.8k, False: 718k]
  ------------------
   66|  39.8k|                {
   67|  39.8k|                    return &token;
   68|  39.8k|                }
   69|   757k|            }
   70|       |
   71|      0|            return nullptr;
   72|  39.8k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   158k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   158k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   158k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   441k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   441k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   441k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|   174k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   174k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   174k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  48.6k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  12.4k|    {
   25|  12.4k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  12.4k|        switch (argument_number.unsafe())
   28|  12.4k|        {
   29|  9.49k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 9.49k, False: 2.93k]
  ------------------
   30|  9.49k|                m_Arg1 = argument;
   31|  9.49k|                break;
   32|  1.85k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 1.85k, False: 10.5k]
  ------------------
   33|  1.85k|                m_Arg2 = argument;
   34|  1.85k|                break;
   35|  1.07k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 1.07k, False: 11.3k]
  ------------------
   36|  1.07k|                m_Arg3 = argument;
   37|  1.07k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 12.4k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  12.4k|#endif
   42|  12.4k|        }
   43|  12.4k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|   158k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  4.92k|    {
  171|  4.92k|        InstructionArgument arg;
  172|  4.92k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  4.92k|        arg.register_int.register_id = id;
  174|  4.92k|        return arg;
  175|  4.92k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|    306|    {
  179|    306|        InstructionArgument arg;
  180|    306|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|    306|        arg.register_float.register_id = id;
  182|    306|        return arg;
  183|    306|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  1.33k|    {
  187|  1.33k|        InstructionArgument arg;
  188|  1.33k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  1.33k|        arg.immediate_value.signed_value = value;
  190|  1.33k|        return arg;
  191|  1.33k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|    356|    {
  196|    356|        InstructionArgument arg;
  197|    356|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|    356|        arg.address_displacement.register_id  = id;
  199|    356|        arg.address_displacement.displacement = displacement;
  200|    356|        return arg;
  201|    356|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  5.50k|    {
  205|  5.50k|        InstructionArgument arg;
  206|  5.50k|        arg.m_Type           = ArgumentType::Label;
  207|  5.50k|        arg.label.label_name = label_name;
  208|  5.50k|        return arg;
  209|  5.50k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  48.6k|    {
  453|  48.6k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  48.6k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   579k|    {
   24|   579k|        switch (token.length())
   25|   579k|        {
   26|       |            // 1 character OpCodes
   27|  81.0k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 81.0k, False: 498k]
  ------------------
   28|  81.0k|                char c1 = token[0];
   29|  81.0k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 22.8k, False: 58.1k]
  ------------------
   30|  22.8k|                {
   31|  22.8k|                    return OpCode::J;
   32|  22.8k|                }
   33|  58.1k|                break;
   34|  81.0k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  91.4k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 91.4k, False: 487k]
  ------------------
   38|  91.4k|                char c1 = token[0];
   39|  91.4k|                char c2 = token[1];
   40|       |
   41|  91.4k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 52.4k, False: 38.9k]
  ------------------
   42|  91.4k|                {
   43|  4.76k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 4.76k, False: 86.6k]
  ------------------
   44|  6.02k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 1.26k, False: 90.1k]
  ------------------
   45|  6.02k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 915, False: 5.11k]
  ------------------
   46|    915|                        {
   47|    915|                            return OpCode::JR;
   48|    915|                        }
   49|  5.11k|                        break;
   50|       |
   51|  9.24k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 9.24k, False: 82.1k]
  ------------------
   52|  14.8k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 5.58k, False: 85.8k]
  ------------------
   53|  14.8k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 5.04k, False: 9.79k]
  ------------------
   54|  14.8k|                        {
   55|    710|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 710, False: 14.1k]
  ------------------
   56|  1.43k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 726, False: 14.1k]
  ------------------
   57|  1.43k|                                return OpCode::LB;
   58|  1.93k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 1.93k, False: 12.8k]
  ------------------
   59|  2.71k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 782, False: 14.0k]
  ------------------
   60|  2.71k|                                return OpCode::LD;
   61|    349|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 349, False: 14.4k]
  ------------------
   62|  1.25k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 910, False: 13.9k]
  ------------------
   63|  1.25k|                                return OpCode::LF;
   64|  1.24k|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 1.24k, False: 13.5k]
  ------------------
   65|  2.28k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 1.04k, False: 13.7k]
  ------------------
   66|  2.28k|                                return OpCode::LH;
   67|  1.16k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 1.16k, False: 13.6k]
  ------------------
   68|  2.09k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 930, False: 13.9k]
  ------------------
   69|  2.09k|                                return OpCode::LW;
   70|  14.8k|                        }
   71|  5.04k|                        break;
   72|  5.04k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 867, False: 90.5k]
  ------------------
   73|  4.15k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 3.28k, False: 88.1k]
  ------------------
   74|  4.15k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 1.09k, False: 3.05k]
  ------------------
   75|  1.09k|                        {
   76|  1.09k|                            return OpCode::OR;
   77|  1.09k|                        }
   78|  3.05k|                        break;
   79|  7.08k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 7.08k, False: 84.3k]
  ------------------
   80|  13.9k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 6.85k, False: 84.5k]
  ------------------
   81|  13.9k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 4.84k, False: 9.09k]
  ------------------
   82|  13.9k|                        {
   83|    509|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 509, False: 13.4k]
  ------------------
   84|  1.33k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 822, False: 13.1k]
  ------------------
   85|  1.33k|                                return OpCode::SB;
   86|  2.05k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 2.05k, False: 11.8k]
  ------------------
   87|  3.02k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 972, False: 12.9k]
  ------------------
   88|  3.02k|                                return OpCode::SD;
   89|    624|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 624, False: 13.3k]
  ------------------
   90|    826|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 202, False: 13.7k]
  ------------------
   91|    826|                                return OpCode::SF;
   92|    688|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 688, False: 13.2k]
  ------------------
   93|  2.72k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 2.04k, False: 11.8k]
  ------------------
   94|  2.72k|                                return OpCode::SH;
   95|    412|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 412, False: 13.5k]
  ------------------
   96|  1.18k|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 772, False: 13.1k]
  ------------------
   97|  1.18k|                                return OpCode::SW;
   98|  13.9k|                        }
   99|  4.84k|                        break;
  100|  91.4k|                }
  101|  70.5k|                break;
  102|  91.4k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   129k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 129k, False: 449k]
  ------------------
  106|   129k|                char c1 = token[0];
  107|   129k|                char c2 = token[1];
  108|   129k|                char c3 = token[2];
  109|       |
  110|   129k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 40.5k, False: 88.8k]
  ------------------
  111|   129k|                {
  112|  5.17k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 5.17k, False: 124k]
  ------------------
  113|  7.82k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 2.64k, False: 126k]
  ------------------
  114|  7.82k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 2.70k, False: 5.11k]
  |  Branch (114:29): [True: 1.21k, False: 6.60k]
  |  Branch (114:45): [True: 1.21k, False: 1.48k]
  ------------------
  115|  1.21k|                        {
  116|  1.21k|                            return OpCode::ADD;
  117|  1.21k|                        }
  118|  6.60k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 1.62k, False: 4.98k]
  |  Branch (118:34): [True: 747, False: 5.86k]
  |  Branch (118:50): [True: 747, False: 875]
  ------------------
  119|    747|                        {
  120|    747|                            return OpCode::AND;
  121|    747|                        }
  122|  5.86k|                        break;
  123|       |
  124|  5.86k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 2.20k, False: 127k]
  ------------------
  125|  3.44k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 1.23k, False: 128k]
  ------------------
  126|  3.44k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 2.06k, False: 1.37k]
  |  Branch (126:29): [True: 807, False: 2.63k]
  |  Branch (126:45): [True: 807, False: 1.26k]
  ------------------
  127|    807|                        {
  128|    807|                            return OpCode::DIV;
  129|    807|                        }
  130|  2.63k|                        break;
  131|       |
  132|  2.63k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 2.25k, False: 127k]
  ------------------
  133|  6.05k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 3.79k, False: 125k]
  ------------------
  134|  6.05k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 4.25k, False: 1.79k]
  ------------------
  135|  4.25k|                        {
  136|  4.25k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 1.77k, False: 2.48k]
  ------------------
  137|  1.77k|                            {
  138|  1.77k|                                return OpCode::EQD;
  139|  1.77k|                            }
  140|  2.48k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 2.03k, False: 454]
  ------------------
  141|  2.03k|                            {
  142|  2.03k|                                return OpCode::EQF;
  143|  2.03k|                            }
  144|  4.25k|                        }
  145|  2.24k|                        break;
  146|       |
  147|  2.41k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 2.41k, False: 126k]
  ------------------
  148|  6.82k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 4.41k, False: 124k]
  ------------------
  149|  6.82k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 3.12k, False: 3.69k]
  ------------------
  150|  3.12k|                        {
  151|  3.12k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 1.31k, False: 1.81k]
  ------------------
  152|  1.31k|                            {
  153|  1.31k|                                return OpCode::GED;
  154|  1.31k|                            }
  155|  1.81k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 1.51k, False: 296]
  ------------------
  156|  1.51k|                            {
  157|  1.51k|                                return OpCode::GEF;
  158|  1.51k|                            }
  159|  3.12k|                        }
  160|  3.69k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 3.05k, False: 647]
  ------------------
  161|  3.05k|                        {
  162|  3.05k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 997, False: 2.05k]
  ------------------
  163|    997|                            {
  164|    997|                                return OpCode::GTD;
  165|    997|                            }
  166|  2.05k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 1.42k, False: 626]
  ------------------
  167|  1.42k|                            {
  168|  1.42k|                                return OpCode::GTF;
  169|  1.42k|                            }
  170|  2.05k|                        }
  171|  1.56k|                        break;
  172|       |
  173|  4.85k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 4.85k, False: 124k]
  ------------------
  174|  5.38k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 535, False: 128k]
  ------------------
  175|  5.38k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 2.84k, False: 2.54k]
  |  Branch (175:29): [True: 1.19k, False: 4.18k]
  |  Branch (175:45): [True: 1.19k, False: 1.64k]
  ------------------
  176|  1.19k|                        {
  177|  1.19k|                            return OpCode::JAL;
  178|  1.19k|                        }
  179|  4.18k|                        break;
  180|       |
  181|  12.4k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 12.4k, False: 116k]
  ------------------
  182|  18.7k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 6.29k, False: 123k]
  ------------------
  183|  18.7k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 3.02k, False: 15.7k]
  ------------------
  184|  18.7k|                        {
  185|    758|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 758, False: 18.0k]
  ------------------
  186|  1.79k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 1.04k, False: 17.7k]
  ------------------
  187|  1.79k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 887, False: 912]
  ------------------
  188|    887|                                {
  189|    887|                                    return OpCode::LBU;
  190|    887|                                }
  191|    912|                                break;
  192|       |
  193|  1.62k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 1.62k, False: 17.1k]
  ------------------
  194|  2.81k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 1.19k, False: 17.5k]
  ------------------
  195|  2.81k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 1.32k, False: 1.48k]
  ------------------
  196|  1.32k|                                {
  197|  1.32k|                                    return OpCode::LED;
  198|  1.32k|                                }
  199|  1.48k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 836, False: 648]
  ------------------
  200|    836|                                {
  201|    836|                                    return OpCode::LEF;
  202|    836|                                }
  203|    648|                                break;
  204|       |
  205|  2.06k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 2.06k, False: 16.7k]
  ------------------
  206|  3.29k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 1.23k, False: 17.5k]
  ------------------
  207|  3.29k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 1.17k, False: 2.12k]
  ------------------
  208|  1.17k|                                {
  209|  1.17k|                                    return OpCode::LHI;
  210|  1.17k|                                }
  211|  2.12k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 871, False: 1.25k]
  ------------------
  212|    871|                                {
  213|    871|                                    return OpCode::LHU;
  214|    871|                                }
  215|  1.25k|                                break;
  216|       |
  217|  1.25k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 700, False: 18.0k]
  ------------------
  218|  4.90k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 4.20k, False: 14.5k]
  ------------------
  219|  4.90k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 1.56k, False: 3.34k]
  ------------------
  220|  1.56k|                                {
  221|  1.56k|                                    return OpCode::LTD;
  222|  1.56k|                                }
  223|  3.34k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 2.20k, False: 1.13k]
  ------------------
  224|  2.20k|                                {
  225|  2.20k|                                    return OpCode::LTF;
  226|  2.20k|                                }
  227|  1.13k|                                break;
  228|       |
  229|  1.13k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 524, False: 18.2k]
  ------------------
  230|  2.94k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 2.42k, False: 16.3k]
  ------------------
  231|  2.94k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 1.99k, False: 949]
  ------------------
  232|  1.99k|                                {
  233|  1.99k|                                    return OpCode::LWU;
  234|  1.99k|                                }
  235|    949|                                break;
  236|  18.7k|                        }
  237|  7.92k|                        break;
  238|       |
  239|  7.92k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 3.27k, False: 126k]
  ------------------
  240|  5.26k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 1.99k, False: 127k]
  ------------------
  241|  5.26k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 2.12k, False: 3.14k]
  ------------------
  242|  2.12k|                        {
  243|  2.12k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 725, False: 1.39k]
  ------------------
  244|    725|                            {
  245|    725|                                return OpCode::NED;
  246|    725|                            }
  247|  1.39k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 819, False: 580]
  ------------------
  248|    819|                            {
  249|    819|                                return OpCode::NEF;
  250|    819|                            }
  251|  2.12k|                        }
  252|  3.14k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 2.03k, False: 1.10k]
  |  Branch (252:34): [True: 1.15k, False: 1.99k]
  |  Branch (252:50): [True: 1.15k, False: 886]
  ------------------
  253|  1.15k|                        {
  254|  1.15k|                            return OpCode::NOP;
  255|  1.15k|                        }
  256|       |
  257|  2.57k|                        break;
  258|       |
  259|  2.57k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 1.18k, False: 128k]
  ------------------
  260|  2.67k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 1.49k, False: 127k]
  ------------------
  261|  2.67k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 1.12k, False: 1.55k]
  |  Branch (261:29): [True: 737, False: 1.94k]
  |  Branch (261:45): [True: 737, False: 386]
  ------------------
  262|    737|                        {
  263|    737|                            return OpCode::ORI;
  264|    737|                        }
  265|  1.94k|                        break;
  266|       |
  267|  22.4k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 22.4k, False: 106k]
  ------------------
  268|  30.3k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 7.82k, False: 121k]
  ------------------
  269|  30.3k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 2.41k, False: 27.8k]
  ------------------
  270|  30.3k|                        {
  271|  1.81k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 1.81k, False: 28.4k]
  ------------------
  272|  3.15k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 1.34k, False: 28.9k]
  ------------------
  273|  3.15k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 1.80k, False: 1.35k]
  ------------------
  274|  1.80k|                                {
  275|  1.80k|                                    return OpCode::SBU;
  276|  1.80k|                                }
  277|  1.35k|                                break;
  278|       |
  279|  1.90k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 1.90k, False: 28.4k]
  ------------------
  280|  2.71k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 816, False: 29.4k]
  ------------------
  281|  2.71k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 1.27k, False: 1.44k]
  ------------------
  282|  1.27k|                                {
  283|  1.27k|                                    return OpCode::SEQ;
  284|  1.27k|                                }
  285|  1.44k|                                break;
  286|       |
  287|  2.78k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 2.78k, False: 27.5k]
  ------------------
  288|  3.70k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 916, False: 29.3k]
  ------------------
  289|  3.70k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 1.61k, False: 2.08k]
  ------------------
  290|  1.61k|                                {
  291|  1.61k|                                    return OpCode::SGE;
  292|  1.61k|                                }
  293|  2.08k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 951, False: 1.13k]
  ------------------
  294|    951|                                {
  295|    951|                                    return OpCode::SGT;
  296|    951|                                }
  297|  1.13k|                                break;
  298|       |
  299|  1.13k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 402, False: 29.9k]
  ------------------
  300|  2.95k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 2.54k, False: 27.7k]
  ------------------
  301|  2.95k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 2.53k, False: 413]
  ------------------
  302|  2.53k|                                {
  303|  2.53k|                                    return OpCode::SHU;
  304|  2.53k|                                }
  305|    413|                                break;
  306|       |
  307|  4.17k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 4.17k, False: 26.1k]
  ------------------
  308|  5.83k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 1.66k, False: 28.6k]
  ------------------
  309|  5.83k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 1.16k, False: 4.66k]
  ------------------
  310|  5.83k|                                {
  311|    655|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 655, False: 5.17k]
  ------------------
  312|  1.05k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 395, False: 5.43k]
  ------------------
  313|  1.05k|                                        return OpCode::SLA;
  314|       |
  315|    448|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 448, False: 5.38k]
  ------------------
  316|    646|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 198, False: 5.63k]
  ------------------
  317|    646|                                        return OpCode::SLE;
  318|       |
  319|    433|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 433, False: 5.39k]
  ------------------
  320|  1.86k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 1.43k, False: 4.40k]
  ------------------
  321|  1.86k|                                        return OpCode::SLL;
  322|       |
  323|    364|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 364, False: 5.46k]
  ------------------
  324|  1.10k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 742, False: 5.09k]
  ------------------
  325|  1.10k|                                        return OpCode::SLT;
  326|  5.83k|                                }
  327|  1.16k|                                break;
  328|       |
  329|  1.16k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 1.13k, False: 29.1k]
  ------------------
  330|  1.85k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 712, False: 29.5k]
  ------------------
  331|  1.85k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 964, False: 887]
  ------------------
  332|    964|                                {
  333|    964|                                    return OpCode::SNE;
  334|    964|                                }
  335|    887|                                break;
  336|       |
  337|    887|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 401, False: 29.9k]
  ------------------
  338|  4.23k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 3.82k, False: 26.4k]
  ------------------
  339|  4.23k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 1.66k, False: 2.56k]
  ------------------
  340|  1.66k|                                {
  341|  1.66k|                                    return OpCode::SRA;
  342|  1.66k|                                }
  343|  2.56k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 1.92k, False: 643]
  ------------------
  344|  1.92k|                                {
  345|  1.92k|                                    return OpCode::SRL;
  346|  1.92k|                                }
  347|    643|                                break;
  348|       |
  349|    982|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 982, False: 29.3k]
  ------------------
  350|  1.89k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 913, False: 29.3k]
  ------------------
  351|  1.89k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 1.19k, False: 698]
  ------------------
  352|  1.19k|                                {
  353|  1.19k|                                    return OpCode::SUB;
  354|  1.19k|                                }
  355|    698|                                break;
  356|       |
  357|  1.14k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 1.14k, False: 29.1k]
  ------------------
  358|  1.55k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 408, False: 29.9k]
  ------------------
  359|  1.55k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 836, False: 719]
  ------------------
  360|    836|                                {
  361|    836|                                    return OpCode::SWU;
  362|    836|                                }
  363|    719|                                break;
  364|  30.3k|                        }
  365|       |
  366|  12.0k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 1.14k, False: 128k]
  ------------------
  367|  13.1k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 1.17k, False: 128k]
  ------------------
  368|  13.1k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 2.93k, False: 10.2k]
  |  Branch (368:29): [True: 1.39k, False: 11.7k]
  |  Branch (368:45): [True: 1.39k, False: 1.53k]
  ------------------
  369|  1.39k|                        {
  370|  1.39k|                            return OpCode::XOR;
  371|  1.39k|                        }
  372|  11.7k|                        break;
  373|   129k|                }
  374|  81.2k|                break;
  375|   129k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   131k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 131k, False: 447k]
  ------------------
  379|   131k|                char c1 = token[0];
  380|   131k|                char c2 = token[1];
  381|   131k|                char c3 = token[2];
  382|   131k|                char c4 = token[3];
  383|       |
  384|   131k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 36.9k, False: 95.0k]
  ------------------
  385|   131k|                {
  386|  10.3k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 10.3k, False: 121k]
  ------------------
  387|  12.0k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 1.76k, False: 130k]
  ------------------
  388|  12.0k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 1.19k, False: 10.9k]
  ------------------
  389|  12.0k|                        {
  390|  5.42k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 5.42k, False: 6.67k]
  ------------------
  391|  8.30k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 2.88k, False: 9.21k]
  ------------------
  392|  8.30k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 7.23k, False: 1.07k]
  ------------------
  393|  7.23k|                                {
  394|  7.23k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 805, False: 6.42k]
  ------------------
  395|  7.23k|                                    {
  396|    333|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 333, False: 6.89k]
  ------------------
  397|    714|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 381, False: 6.84k]
  ------------------
  398|    714|                                            return OpCode::ADDD;
  399|       |
  400|  1.61k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 1.61k, False: 5.62k]
  ------------------
  401|  2.73k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 1.12k, False: 6.10k]
  ------------------
  402|  2.73k|                                            return OpCode::ADDF;
  403|       |
  404|    579|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 579, False: 6.65k]
  ------------------
  405|  1.75k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 1.17k, False: 6.05k]
  ------------------
  406|  1.75k|                                            return OpCode::ADDI;
  407|       |
  408|    579|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 579, False: 6.65k]
  ------------------
  409|  1.22k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 643, False: 6.58k]
  ------------------
  410|  1.22k|                                            return OpCode::ADDU;
  411|  7.23k|                                    }
  412|  7.23k|                                }
  413|  1.88k|                                break;
  414|       |
  415|  2.04k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 2.04k, False: 10.0k]
  ------------------
  416|  2.59k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 554, False: 11.5k]
  ------------------
  417|  2.59k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 2.04k, False: 558]
  |  Branch (417:37): [True: 1.40k, False: 1.19k]
  |  Branch (417:53): [True: 1.40k, False: 639]
  ------------------
  418|  1.40k|                                {
  419|  1.40k|                                    return OpCode::ANDI;
  420|  1.40k|                                }
  421|       |
  422|  1.19k|                                break;
  423|  12.0k|                        }
  424|  4.27k|                        break;
  425|       |
  426|  11.2k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 11.2k, False: 120k]
  ------------------
  427|  11.9k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 726, False: 131k]
  ------------------
  428|  11.9k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 1.08k, False: 10.8k]
  ------------------
  429|  11.9k|                        {
  430|  1.27k|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 1.27k, False: 10.6k]
  ------------------
  431|  2.08k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 813, False: 11.1k]
  ------------------
  432|  2.08k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 1.72k, False: 366]
  |  Branch (432:37): [True: 692, False: 1.39k]
  |  Branch (432:53): [True: 692, False: 1.02k]
  ------------------
  433|    692|                                {
  434|    692|                                    return OpCode::BEQZ;
  435|    692|                                }
  436|  1.39k|                                break;
  437|       |
  438|  5.72k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 5.72k, False: 6.25k]
  ------------------
  439|  6.47k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 755, False: 11.2k]
  ------------------
  440|  6.47k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 5.59k, False: 883]
  ------------------
  441|  5.59k|                                {
  442|  5.59k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 3.82k, False: 1.77k]
  ------------------
  443|  3.82k|                                    {
  444|  3.82k|                                        return OpCode::BFPF;
  445|  3.82k|                                    }
  446|  1.77k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 1.12k, False: 646]
  ------------------
  447|  1.12k|                                    {
  448|  1.12k|                                        return OpCode::BFPT;
  449|  1.12k|                                    }
  450|  5.59k|                                }
  451|  1.52k|                                break;
  452|       |
  453|  1.52k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 1.14k, False: 10.8k]
  ------------------
  454|  2.32k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 1.18k, False: 10.7k]
  ------------------
  455|  2.32k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 1.93k, False: 398]
  |  Branch (455:37): [True: 1.32k, False: 1.00k]
  |  Branch (455:53): [True: 1.32k, False: 610]
  ------------------
  456|  1.32k|                                {
  457|  1.32k|                                    return OpCode::BNEZ;
  458|  1.32k|                                }
  459|  11.9k|                        }
  460|  5.01k|                        break;
  461|       |
  462|  5.01k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 2.00k, False: 129k]
  ------------------
  463|  7.08k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 5.08k, False: 126k]
  ------------------
  464|  7.08k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 5.89k, False: 1.19k]
  |  Branch (464:29): [True: 5.50k, False: 1.57k]
  |  Branch (464:45): [True: 5.50k, False: 387]
  ------------------
  465|  5.50k|                        {
  466|  5.50k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 972, False: 4.53k]
  ------------------
  467|  5.50k|                            {
  468|    482|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 482, False: 5.02k]
  ------------------
  469|  1.10k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 622, False: 4.88k]
  ------------------
  470|  1.10k|                                    return OpCode::DIVD;
  471|       |
  472|    468|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 468, False: 5.03k]
  ------------------
  473|  1.51k|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 1.04k, False: 4.45k]
  ------------------
  474|  1.51k|                                    return OpCode::DIVF;
  475|       |
  476|    595|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 595, False: 4.90k]
  ------------------
  477|    966|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 371, False: 5.13k]
  ------------------
  478|    966|                                    return OpCode::DIVI;
  479|       |
  480|    424|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 424, False: 5.08k]
  ------------------
  481|    945|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 521, False: 4.98k]
  ------------------
  482|    945|                                    return OpCode::DIVU;
  483|  5.50k|                            }
  484|  5.50k|                        }
  485|  2.54k|                        break;
  486|       |
  487|  2.54k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 1.75k, False: 130k]
  ------------------
  488|  3.73k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 1.97k, False: 129k]
  ------------------
  489|  3.73k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 2.84k, False: 884]
  |  Branch (489:29): [True: 1.12k, False: 2.60k]
  |  Branch (489:45): [True: 1.68k, False: 1.16k]
  |  Branch (489:61): [True: 1.12k, False: 557]
  ------------------
  490|  1.12k|                        {
  491|  1.12k|                            return OpCode::HALT;
  492|  1.12k|                        }
  493|  2.60k|                        break;
  494|       |
  495|  3.93k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 3.93k, False: 127k]
  ------------------
  496|  4.65k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 725, False: 131k]
  ------------------
  497|  4.65k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 3.05k, False: 1.60k]
  |  Branch (497:29): [True: 1.87k, False: 2.78k]
  |  Branch (497:45): [True: 2.62k, False: 423]
  |  Branch (497:61): [True: 1.87k, False: 750]
  ------------------
  498|  1.87k|                        {
  499|  1.87k|                            return OpCode::JALR;
  500|  1.87k|                        }
  501|  2.78k|                        break;
  502|       |
  503|  2.78k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 1.44k, False: 130k]
  ------------------
  504|  5.36k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 3.92k, False: 128k]
  ------------------
  505|  5.36k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 2.37k, False: 2.99k]
  |  Branch (505:29): [True: 1.95k, False: 3.41k]
  |  Branch (505:45): [True: 1.95k, False: 419]
  ------------------
  506|  1.95k|                        {
  507|  1.95k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 756, False: 1.20k]
  ------------------
  508|    756|                            {
  509|    756|                                return OpCode::MOVD;
  510|    756|                            }
  511|  1.20k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 858, False: 342]
  ------------------
  512|    858|                            {
  513|    858|                                return OpCode::MOVF;
  514|    858|                            }
  515|  1.95k|                        }
  516|  3.41k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 2.70k, False: 705]
  |  Branch (516:34): [True: 967, False: 2.44k]
  |  Branch (516:50): [True: 1.87k, False: 832]
  |  Branch (516:66): [True: 967, False: 907]
  ------------------
  517|    967|                        {
  518|    967|                            return OpCode::MULT;
  519|    967|                        }
  520|  2.78k|                        break;
  521|       |
  522|  31.0k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 31.0k, False: 100k]
  ------------------
  523|  42.6k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 11.6k, False: 120k]
  ------------------
  524|  42.6k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 3.06k, False: 39.6k]
  ------------------
  525|  42.6k|                        {
  526|  1.85k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 1.85k, False: 40.8k]
  ------------------
  527|  4.20k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 2.35k, False: 40.3k]
  ------------------
  528|  4.20k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 2.74k, False: 1.46k]
  ------------------
  529|  2.74k|                                {
  530|  2.74k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 766, False: 1.97k]
  ------------------
  531|    766|                                    {
  532|    766|                                        return OpCode::SEQI;
  533|    766|                                    }
  534|  1.97k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 1.35k, False: 621]
  ------------------
  535|  1.35k|                                    {
  536|  1.35k|                                        return OpCode::SEQU;
  537|  1.35k|                                    }
  538|  2.74k|                                }
  539|  2.08k|                                break;
  540|       |
  541|  6.72k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 6.72k, False: 35.9k]
  ------------------
  542|  7.11k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 388, False: 42.3k]
  ------------------
  543|  7.11k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 3.00k, False: 4.11k]
  ------------------
  544|  3.00k|                                {
  545|  3.00k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 844, False: 2.15k]
  ------------------
  546|    844|                                    {
  547|    844|                                        return OpCode::SGEI;
  548|    844|                                    }
  549|  2.15k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 1.52k, False: 636]
  ------------------
  550|  1.52k|                                    {
  551|  1.52k|                                        return OpCode::SGEU;
  552|  1.52k|                                    }
  553|  3.00k|                                }
  554|  4.11k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 3.23k, False: 879]
  ------------------
  555|  3.23k|                                {
  556|  3.23k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 708, False: 2.52k]
  ------------------
  557|    708|                                    {
  558|    708|                                        return OpCode::SGTI;
  559|    708|                                    }
  560|  2.52k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 1.34k, False: 1.18k]
  ------------------
  561|  1.34k|                                    {
  562|  1.34k|                                        return OpCode::SGTU;
  563|  1.34k|                                    }
  564|  3.23k|                                }
  565|  2.69k|                                break;
  566|       |
  567|  9.31k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 9.31k, False: 33.3k]
  ------------------
  568|  11.8k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 2.55k, False: 40.1k]
  ------------------
  569|  11.8k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 1.05k, False: 10.8k]
  ------------------
  570|  11.8k|                                {
  571|    908|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 908, False: 10.9k]
  ------------------
  572|  2.66k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 1.75k, False: 10.1k]
  ------------------
  573|  2.66k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 884, False: 1.78k]
  ------------------
  574|    884|                                        {
  575|    884|                                            return OpCode::SLAI;
  576|    884|                                        }
  577|  1.78k|                                        break;
  578|       |
  579|  1.78k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 953, False: 10.9k]
  ------------------
  580|  2.37k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 1.42k, False: 10.4k]
  ------------------
  581|  2.37k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 910, False: 1.46k]
  ------------------
  582|    910|                                        {
  583|    910|                                            return OpCode::SLEI;
  584|    910|                                        }
  585|  1.46k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 859, False: 609]
  ------------------
  586|    859|                                        {
  587|    859|                                            return OpCode::SLEU;
  588|    859|                                        }
  589|    609|                                        break;
  590|       |
  591|  1.08k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 1.08k, False: 10.7k]
  ------------------
  592|  1.35k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 270, False: 11.5k]
  ------------------
  593|  1.35k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 983, False: 375]
  ------------------
  594|    983|                                        {
  595|    983|                                            return OpCode::SLLI;
  596|    983|                                        }
  597|    375|                                        break;
  598|       |
  599|  1.04k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 1.04k, False: 10.8k]
  ------------------
  600|  4.40k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 3.36k, False: 8.50k]
  ------------------
  601|  4.40k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 1.62k, False: 2.78k]
  ------------------
  602|  1.62k|                                        {
  603|  1.62k|                                            return OpCode::SLTI;
  604|  1.62k|                                        }
  605|  2.78k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 1.53k, False: 1.25k]
  ------------------
  606|  1.53k|                                        {
  607|  1.53k|                                            return OpCode::SLTU;
  608|  1.53k|                                        }
  609|  1.25k|                                        break;
  610|  11.8k|                                }
  611|       |
  612|  8.34k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 3.26k, False: 39.4k]
  ------------------
  613|  10.0k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 1.73k, False: 40.9k]
  ------------------
  614|  10.0k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 4.85k, False: 5.22k]
  ------------------
  615|  4.85k|                                {
  616|  4.85k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 964, False: 3.88k]
  ------------------
  617|    964|                                    {
  618|    964|                                        return OpCode::SNEI;
  619|    964|                                    }
  620|  3.88k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 1.13k, False: 2.75k]
  ------------------
  621|  1.13k|                                    {
  622|  1.13k|                                        return OpCode::SNEU;
  623|  1.13k|                                    }
  624|  4.85k|                                }
  625|  7.97k|                                break;
  626|       |
  627|  7.97k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 1.60k, False: 41.0k]
  ------------------
  628|  4.35k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 2.75k, False: 39.9k]
  ------------------
  629|  4.35k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 1.67k, False: 2.68k]
  |  Branch (629:37): [True: 852, False: 3.50k]
  |  Branch (629:53): [True: 852, False: 819]
  ------------------
  630|    852|                                {
  631|    852|                                    return OpCode::SRAI;
  632|    852|                                }
  633|  3.50k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 2.01k, False: 1.49k]
  |  Branch (633:42): [True: 1.02k, False: 2.47k]
  |  Branch (633:58): [True: 1.02k, False: 982]
  ------------------
  634|  1.02k|                                {
  635|  1.02k|                                    return OpCode::SRLI;
  636|  1.02k|                                }
  637|  2.47k|                                break;
  638|       |
  639|  2.88k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 2.88k, False: 39.8k]
  ------------------
  640|  7.09k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 4.21k, False: 38.4k]
  ------------------
  641|  7.09k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 6.21k, False: 884]
  ------------------
  642|  6.21k|                                {
  643|  6.21k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 1.38k, False: 4.82k]
  ------------------
  644|  6.21k|                                    {
  645|  1.01k|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 1.01k, False: 5.19k]
  ------------------
  646|  1.33k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 322, False: 5.89k]
  ------------------
  647|  1.33k|                                            return OpCode::SUBD;
  648|       |
  649|  1.09k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 1.09k, False: 5.12k]
  ------------------
  650|  1.68k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 595, False: 5.61k]
  ------------------
  651|  1.68k|                                            return OpCode::SUBF;
  652|       |
  653|    378|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 378, False: 5.83k]
  ------------------
  654|    810|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 432, False: 5.78k]
  ------------------
  655|    810|                                            return OpCode::SUBI;
  656|       |
  657|    487|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 487, False: 5.72k]
  ------------------
  658|    992|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 505, False: 5.70k]
  ------------------
  659|    992|                                            return OpCode::SUBU;
  660|  6.21k|                                    }
  661|  6.21k|                                }
  662|  2.27k|                                break;
  663|  42.6k|                        }
  664|  20.5k|                        break;
  665|       |
  666|  20.5k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 3.42k, False: 128k]
  ------------------
  667|  4.55k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 1.12k, False: 130k]
  ------------------
  668|  4.55k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 3.35k, False: 1.19k]
  |  Branch (668:29): [True: 548, False: 4.00k]
  |  Branch (668:45): [True: 2.85k, False: 505]
  |  Branch (668:61): [True: 548, False: 2.30k]
  ------------------
  669|    548|                        {
  670|    548|                            return OpCode::TRAP;
  671|    548|                        }
  672|  4.00k|                        break;
  673|  4.00k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 2.09k, False: 129k]
  ------------------
  674|  2.84k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 750, False: 131k]
  ------------------
  675|  2.84k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 2.12k, False: 719]
  |  Branch (675:29): [True: 628, False: 2.21k]
  |  Branch (675:45): [True: 1.43k, False: 692]
  |  Branch (675:61): [True: 628, False: 808]
  ------------------
  676|    628|                        {
  677|    628|                            return OpCode::XORI;
  678|    628|                        }
  679|  2.21k|                        break;
  680|   131k|                }
  681|  83.7k|                break;
  682|   131k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  83.7k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 75.8k, False: 503k]
  ------------------
  686|  75.8k|                char c1 = token[0];
  687|  75.8k|                char c2 = token[1];
  688|  75.8k|                char c3 = token[2];
  689|  75.8k|                char c4 = token[3];
  690|  75.8k|                char c5 = token[4];
  691|       |
  692|  75.8k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 26.3k, False: 49.5k]
  ------------------
  693|  75.8k|                {
  694|  4.39k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 4.39k, False: 71.4k]
  ------------------
  695|  5.57k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 1.18k, False: 74.6k]
  ------------------
  696|  5.57k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 4.37k, False: 1.20k]
  |  Branch (696:29): [True: 820, False: 4.75k]
  |  Branch (696:45): [True: 3.57k, False: 803]
  |  Branch (696:61): [True: 2.31k, False: 1.25k]
  |  Branch (696:77): [True: 820, False: 1.49k]
  ------------------
  697|    820|                        {
  698|    820|                            return OpCode::ADDUI;
  699|    820|                        }
  700|  4.75k|                        break;
  701|       |
  702|  4.75k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 997, False: 74.8k]
  ------------------
  703|  5.26k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 4.26k, False: 71.5k]
  ------------------
  704|  5.26k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 4.65k, False: 606]
  |  Branch (704:29): [True: 1.01k, False: 4.25k]
  |  Branch (704:45): [True: 4.16k, False: 491]
  |  Branch (704:61): [True: 1.96k, False: 2.20k]
  |  Branch (704:77): [True: 1.01k, False: 949]
  ------------------
  705|  1.01k|                        {
  706|  1.01k|                            return OpCode::DIVUI;
  707|  1.01k|                        }
  708|  4.25k|                        break;
  709|       |
  710|  4.35k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 4.35k, False: 71.5k]
  ------------------
  711|  9.07k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 4.71k, False: 71.1k]
  ------------------
  712|  9.07k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 7.69k, False: 1.37k]
  |  Branch (712:29): [True: 5.03k, False: 4.03k]
  |  Branch (712:45): [True: 6.80k, False: 891]
  |  Branch (712:61): [True: 5.03k, False: 1.76k]
  ------------------
  713|  5.03k|                        {
  714|  5.03k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 679, False: 4.35k]
  ------------------
  715|  5.03k|                            {
  716|    370|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 370, False: 4.66k]
  ------------------
  717|    969|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 599, False: 4.43k]
  ------------------
  718|    969|                                    return OpCode::MULTD;
  719|       |
  720|    379|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 379, False: 4.65k]
  ------------------
  721|    749|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 370, False: 4.66k]
  ------------------
  722|    749|                                    return OpCode::MULTF;
  723|       |
  724|    597|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 597, False: 4.43k]
  ------------------
  725|  1.36k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 770, False: 4.26k]
  ------------------
  726|  1.36k|                                    return OpCode::MULTI;
  727|       |
  728|    586|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 586, False: 4.44k]
  ------------------
  729|  1.27k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 685, False: 4.35k]
  ------------------
  730|  1.27k|                                    return OpCode::MULTU;
  731|  5.03k|                            }
  732|  5.03k|                        }
  733|  4.71k|                        break;
  734|       |
  735|  17.3k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 17.3k, False: 58.4k]
  ------------------
  736|  29.6k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 12.2k, False: 63.6k]
  ------------------
  737|  29.6k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 1.95k, False: 27.6k]
  ------------------
  738|  29.6k|                        {
  739|  1.21k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 1.21k, False: 28.4k]
  ------------------
  740|  3.16k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 1.94k, False: 27.6k]
  ------------------
  741|  3.16k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 2.33k, False: 828]
  |  Branch (741:37): [True: 922, False: 2.23k]
  |  Branch (741:53): [True: 1.91k, False: 416]
  |  Branch (741:69): [True: 922, False: 995]
  ------------------
  742|    922|                                {
  743|    922|                                    return OpCode::SEQUI;
  744|    922|                                }
  745|  2.23k|                                break;
  746|       |
  747|  5.98k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 5.98k, False: 23.6k]
  ------------------
  748|  6.62k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 638, False: 29.0k]
  ------------------
  749|  6.62k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 2.78k, False: 3.83k]
  |  Branch (749:37): [True: 1.51k, False: 5.11k]
  |  Branch (749:53): [True: 2.15k, False: 629]
  |  Branch (749:69): [True: 1.51k, False: 647]
  ------------------
  750|  1.51k|                                {
  751|  1.51k|                                    return OpCode::SGEUI;
  752|  1.51k|                                }
  753|  5.11k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 3.30k, False: 1.81k]
  |  Branch (753:42): [True: 990, False: 4.12k]
  |  Branch (753:58): [True: 2.05k, False: 1.24k]
  |  Branch (753:74): [True: 990, False: 1.06k]
  ------------------
  754|    990|                                {
  755|    990|                                    return OpCode::SGTUI;
  756|    990|                                }
  757|  4.12k|                                break;
  758|       |
  759|  4.12k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 3.40k, False: 26.2k]
  ------------------
  760|  5.15k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 1.74k, False: 27.8k]
  ------------------
  761|  5.15k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 1.38k, False: 3.76k]
  |  Branch (761:37): [True: 583, False: 4.56k]
  |  Branch (761:53): [True: 1.17k, False: 206]
  |  Branch (761:69): [True: 583, False: 595]
  ------------------
  762|    583|                                {
  763|    583|                                    return OpCode::SLEUI;
  764|    583|                                }
  765|  4.56k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 2.59k, False: 1.97k]
  |  Branch (765:42): [True: 972, False: 3.59k]
  |  Branch (765:58): [True: 2.01k, False: 580]
  |  Branch (765:74): [True: 972, False: 1.04k]
  ------------------
  766|    972|                                {
  767|    972|                                    return OpCode::SLTUI;
  768|    972|                                }
  769|  3.59k|                                break;
  770|       |
  771|  3.59k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 2.00k, False: 27.6k]
  ------------------
  772|  5.76k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 3.75k, False: 25.8k]
  ------------------
  773|  5.76k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 4.85k, False: 904]
  |  Branch (773:37): [True: 2.01k, False: 3.74k]
  |  Branch (773:53): [True: 2.98k, False: 1.87k]
  |  Branch (773:69): [True: 2.01k, False: 973]
  ------------------
  774|  2.01k|                                {
  775|  2.01k|                                    return OpCode::SNEUI;
  776|  2.01k|                                }
  777|  3.74k|                                break;
  778|       |
  779|  3.74k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 1.35k, False: 28.2k]
  ------------------
  780|  6.98k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 5.63k, False: 24.0k]
  ------------------
  781|  6.98k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 6.07k, False: 918]
  |  Branch (781:37): [True: 1.70k, False: 5.28k]
  |  Branch (781:53): [True: 2.63k, False: 3.43k]
  |  Branch (781:69): [True: 1.70k, False: 928]
  ------------------
  782|  1.70k|                                {
  783|  1.70k|                                    return OpCode::SUBUI;
  784|  1.70k|                                }
  785|  5.28k|                                break;
  786|  29.6k|                        }
  787|       |
  788|  20.9k|                        break;
  789|  75.8k|                }
  790|       |
  791|  60.9k|                break;
  792|  75.8k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  60.9k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 35.4k, False: 543k]
  ------------------
  796|  35.4k|                char c1 = token[0];
  797|  35.4k|                char c2 = token[1];
  798|  35.4k|                char c3 = token[2];
  799|  35.4k|                char c4 = token[3];
  800|  35.4k|                char c5 = token[4];
  801|  35.4k|                char c6 = token[5];
  802|       |
  803|  35.4k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 11.3k, False: 24.1k]
  |  Branch (803:21): [True: 9.90k, False: 25.5k]
  |  Branch (803:37): [True: 10.8k, False: 515]
  |  Branch (803:53): [True: 9.90k, False: 905]
  ------------------
  804|  9.90k|                {
  805|  9.90k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 1.02k, False: 8.87k]
  ------------------
  806|  9.90k|                    {
  807|  2.03k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 2.03k, False: 7.86k]
  ------------------
  808|  2.91k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 882, False: 9.02k]
  ------------------
  809|  2.91k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 2.03k, False: 887]
  ------------------
  810|  2.03k|                            {
  811|  2.03k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 1.20k, False: 826]
  ------------------
  812|  1.20k|                                {
  813|  1.20k|                                    return OpCode::CVTD2F;
  814|  1.20k|                                }
  815|    826|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 596, False: 230]
  ------------------
  816|    596|                                {
  817|    596|                                    return OpCode::CVTD2I;
  818|    596|                                }
  819|  2.03k|                            }
  820|  1.11k|                            break;
  821|       |
  822|  2.35k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 2.35k, False: 7.54k]
  ------------------
  823|  3.56k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 1.21k, False: 8.69k]
  ------------------
  824|  3.56k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 2.02k, False: 1.54k]
  ------------------
  825|  2.02k|                            {
  826|  2.02k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 1.12k, False: 900]
  ------------------
  827|  1.12k|                                {
  828|  1.12k|                                    return OpCode::CVTF2D;
  829|  1.12k|                                }
  830|    900|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 436, False: 464]
  ------------------
  831|    436|                                {
  832|    436|                                    return OpCode::CVTF2I;
  833|    436|                                }
  834|  2.02k|                            }
  835|  2.00k|                            break;
  836|       |
  837|  2.00k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 803, False: 9.10k]
  ------------------
  838|  2.39k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 1.58k, False: 8.31k]
  ------------------
  839|  2.39k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 1.22k, False: 1.17k]
  ------------------
  840|  1.22k|                            {
  841|  1.22k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 396, False: 824]
  ------------------
  842|    396|                                {
  843|    396|                                    return OpCode::CVTI2D;
  844|    396|                                }
  845|    824|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 628, False: 196]
  ------------------
  846|    628|                                {
  847|    628|                                    return OpCode::CVTI2F;
  848|    628|                                }
  849|  1.22k|                            }
  850|  9.90k|                    }
  851|  9.90k|                }
  852|  25.5k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 8.52k, False: 17.0k]
  |  Branch (852:26): [True: 1.48k, False: 24.0k]
  |  Branch (852:42): [True: 6.38k, False: 2.14k]
  |  Branch (852:58): [True: 5.67k, False: 708]
  |  Branch (852:74): [True: 3.90k, False: 1.77k]
  ------------------
  853|  25.5k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 2.74k, False: 1.15k]
  |  Branch (853:42): [True: 1.48k, False: 1.26k]
  ------------------
  854|  1.48k|                {
  855|  1.48k|                    return OpCode::MULTUI;
  856|  1.48k|                }
  857|  29.6k|                break;
  858|  35.4k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  29.6k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 19.8k, False: 559k]
  ------------------
  862|  19.8k|                char c1 = token[0];
  863|  19.8k|                char c2 = token[1];
  864|  19.8k|                char c3 = token[2];
  865|  19.8k|                char c4 = token[3];
  866|  19.8k|                char c5 = token[4];
  867|  19.8k|                char c6 = token[5];
  868|  19.8k|                char c7 = token[6];
  869|       |
  870|  19.8k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 8.51k, False: 11.3k]
  |  Branch (870:21): [True: 6.14k, False: 13.6k]
  |  Branch (870:37): [True: 7.17k, False: 1.33k]
  |  Branch (870:53): [True: 6.14k, False: 1.03k]
  ------------------
  871|  6.14k|                {
  872|  6.14k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 3.07k, False: 3.07k]
  |  Branch (872:25): [True: 1.56k, False: 4.58k]
  |  Branch (872:41): [True: 2.44k, False: 630]
  |  Branch (872:54): [True: 1.81k, False: 636]
  |  Branch (872:70): [True: 1.56k, False: 252]
  ------------------
  873|  1.56k|                    {
  874|  1.56k|                        return OpCode::MOVI2FP;
  875|  1.56k|                    }
  876|  4.58k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 2.94k, False: 1.64k]
  |  Branch (876:30): [True: 508, False: 4.08k]
  |  Branch (876:46): [True: 2.63k, False: 313]
  |  Branch (876:62): [True: 1.05k, False: 1.58k]
  |  Branch (876:75): [True: 508, False: 542]
  ------------------
  877|    508|                    {
  878|    508|                        return OpCode::MOVFP2I;
  879|    508|                    }
  880|  6.14k|                }
  881|  17.7k|                break;
  882|  19.8k|            }
  883|       |
  884|  17.7k|            default: {
  ------------------
  |  Branch (884:13): [True: 14.3k, False: 564k]
  ------------------
  885|  14.3k|                break;
  886|  19.8k|            }
  887|   579k|        }
  888|       |
  889|       |        // None found
  890|   416k|        return OpCode::NONE;
  891|   579k|    }
_ZN3dlx3iceEcc:
   17|   730k|    {
   18|   730k|        constexpr const char diff = 'a' - 'A';
   19|   730k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 209k, False: 520k]
  |  Branch (19:28): [True: 190k, False: 330k]
  ------------------
   20|   730k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   572k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  6.91k|    {
  193|  6.91k|        ParseError err;
  194|       |
  195|  6.91k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  6.91k|        err.m_LineNumber                           = line_number;
  197|  6.91k|        err.m_Column                               = column;
  198|  6.91k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  6.91k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  6.91k|        return err;
  202|  6.91k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  6.91k|    {
  207|  6.91k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  6.91k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  6.91k|                                                         actual_type);
  210|  6.91k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    363|    {
  216|    363|        ParseError err;
  217|       |
  218|    363|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    363|        err.m_LineNumber        = line_number;
  220|    363|        err.m_Column            = column;
  221|    363|        err.invalid_number.text = text;
  222|       |
  223|    363|        return err;
  224|    363|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    363|    {
  228|    363|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    363|                                                token.GetColumn().unsafe(), token.GetText());
  230|    363|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      5|    {
  235|      5|        ParseError err;
  236|       |
  237|      5|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      5|        err.m_LineNumber = line_number;
  239|      5|        err.m_Column     = column;
  240|       |
  241|      5|        return err;
  242|      5|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      5|    {
  247|      5|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      5|                                                                     token.GetColumn().unsafe());
  249|      5|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   237k|    {
  255|   237k|        ParseError err;
  256|       |
  257|   237k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   237k|        err.m_LineNumber                   = line_number;
  259|   237k|        err.m_Column                       = column;
  260|   237k|        err.unexpected_token.expected_type = expected_type;
  261|   237k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   237k|        return err;
  264|   237k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   237k|    {
  269|   237k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   237k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   237k|                                                  token.GetType());
  272|   237k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  59.7k|    {
  277|  59.7k|        ParseError err;
  278|       |
  279|  59.7k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  59.7k|        err.m_LineNumber                   = line_number;
  281|  59.7k|        err.m_Column                       = column;
  282|  59.7k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  59.7k|        return err;
  285|  59.7k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|    582|    {
  289|    582|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|    582|                                                    token.GetColumn().unsafe(), token.GetText());
  291|    582|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   125k|    {
  296|   125k|        ParseError err;
  297|       |
  298|   125k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   125k|        err.m_LineNumber                       = line_number;
  300|   125k|        err.m_Column                           = column;
  301|   125k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   125k|        return err;
  304|   125k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   125k|    {
  309|   125k|        return ConstructInvalidLabelIdentifierParseError(
  310|   125k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   125k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  39.8k|    {
  317|  39.8k|        ParseError err;
  318|       |
  319|  39.8k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  39.8k|        err.m_LineNumber                     = line_number;
  321|  39.8k|        err.m_Column                         = column;
  322|  39.8k|        err.label_already_defined.label_name = label_name;
  323|  39.8k|        err.label_already_defined.at_line    = at_line;
  324|  39.8k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  39.8k|        return err;
  327|  39.8k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  39.8k|    {
  332|  39.8k|        return ConstructLabelAlreadyDefinedParseError(
  333|  39.8k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  39.8k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  39.8k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|  56.8k|    {
  340|  56.8k|        ParseError err;
  341|       |
  342|  56.8k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|  56.8k|        err.m_LineNumber = line_number;
  344|  56.8k|        err.m_Column     = column;
  345|       |
  346|  56.8k|        return err;
  347|  56.8k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|  56.8k|    {
  352|  56.8k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|  56.8k|                                                        token.GetColumn().unsafe());
  354|  56.8k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  17.3k|    {
  360|  17.3k|        ParseError err;
  361|       |
  362|  17.3k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  17.3k|        err.m_LineNumber               = line_number;
  364|  17.3k|        err.m_Column                   = column;
  365|  17.3k|        err.too_few_arguments.required = required;
  366|  17.3k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  17.3k|        return err;
  369|  17.3k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  17.3k|    {
  374|  17.3k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  17.3k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  17.3k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  17.4k|    {
  381|  17.4k|        ParseError err;
  382|       |
  383|  17.4k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  17.4k|        err.m_LineNumber           = line_number;
  385|  17.4k|        err.m_Column               = column;
  386|  17.4k|        err.empty_label.label_name = label_name;
  387|       |
  388|  17.4k|        return err;
  389|  17.4k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  17.4k|    {
  393|  17.4k|        return ConstructEmptyLabelParseError(
  394|  17.4k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  17.4k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 15.3k, False: 2.17k]
  ------------------
  396|  15.3k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  17.4k|                        token.GetText());
  398|  17.4k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  10.9k|    {
  403|  10.9k|        ParseError err;
  404|       |
  405|  10.9k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  10.9k|        err.m_LineNumber = line_number;
  407|  10.9k|        err.m_Column     = column;
  408|       |
  409|  10.9k|        return err;
  410|  10.9k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  10.9k|    {
  414|  10.9k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  10.9k|                                               token.GetColumn().unsafe());
  416|  10.9k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   572k|    {
   19|   572k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   572k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  6.55k|    {
  182|  6.55k|        ParsedProgram program;
  183|       |
  184|  6.55k|        program.m_Tokens = tokens;
  185|       |
  186|  6.55k|        phi::boolean line_has_instruction{false};
  187|  6.55k|        phi::usize   label_count{0u};
  188|       |
  189|   692k|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 686k, False: 6.55k]
  ------------------
  190|   686k|        {
  191|   686k|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|   686k|            switch (current_token.GetType())
  196|   686k|            {
  197|       |                // Ignore comments
  198|  3.62k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 3.62k, False: 682k]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  3.62k|                    break;
  201|       |
  202|   112k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 112k, False: 574k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   112k|                    line_has_instruction = false;
  205|   112k|                    break;
  206|       |
  207|   282k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 282k, False: 404k]
  ------------------
  208|   282k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 46.1k, False: 236k]
  ------------------
  209|  46.1k|                    {
  210|  46.1k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  46.1k|                                current_token, Token::Type::NewLine));
  212|  46.1k|                        break;
  213|  46.1k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   236k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 74.1k, False: 161k]
  ------------------
  218|  74.1k|                    {
  219|  74.1k|                        program.AddParseError(
  220|  74.1k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|  74.1k|                        break;
  222|  74.1k|                    }
  223|       |
  224|   161k|                    std::string_view label_name = current_token.GetText();
  225|   161k|                    label_name.remove_suffix(1);
  226|       |
  227|   161k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 59.1k, False: 102k]
  ------------------
  228|  59.1k|                    {
  229|  59.1k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  59.1k|                                current_token.GetLineNumber().unsafe(),
  231|  59.1k|                                current_token.GetColumn().unsafe(), label_name));
  232|  59.1k|                        break;
  233|  59.1k|                    }
  234|       |
  235|   102k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 43.4k, False: 59.3k]
  ------------------
  236|  43.4k|                    {
  237|  43.4k|                        program.AddParseError(
  238|  43.4k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  43.4k|                        break;
  240|  43.4k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  59.3k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 39.8k, False: 19.4k]
  ------------------
  244|  39.8k|                    {
  245|       |                        // Find first defintions of label
  246|  39.8k|                        const Token* first_label_definition =
  247|  39.8k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  39.8k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  39.8k|                                    {
  250|  39.8k|                                        std::string_view token_label_name = t.GetText();
  251|  39.8k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  39.8k|                                        if (token_label_name == label_name)
  254|  39.8k|                                        {
  255|  39.8k|                                            return true;
  256|  39.8k|                                        }
  257|  39.8k|                                    }
  258|       |
  259|  39.8k|                                    return false;
  260|  39.8k|                                });
  261|       |
  262|  39.8k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  39.8k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  39.8k|                                current_token, *first_label_definition));
  266|  39.8k|                        break;
  267|  39.8k|                    }
  268|       |
  269|  19.4k|                    program.m_JumpData[label_name] =
  270|  19.4k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  19.4k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  19.4k|                    break;
  277|  59.3k|                }
  278|       |
  279|   105k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 105k, False: 580k]
  ------------------
  280|   105k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 56.8k, False: 48.6k]
  ------------------
  281|  56.8k|                    {
  282|  56.8k|                        program.AddParseError(
  283|  56.8k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|  56.8k|                        break;
  285|  56.8k|                    }
  286|       |
  287|  48.6k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  48.6k|                    PHI_ASSERT(current_token.HasHint());
  291|  48.6k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  48.6k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  48.6k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  48.6k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  48.6k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  48.6k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  48.6k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  48.6k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  48.6k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|  91.7k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 84.4k, False: 7.34k]
  ------------------
  313|  84.4k|                    {
  314|       |                        // Get next token
  315|  84.4k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 937, False: 83.5k]
  ------------------
  316|    937|                        {
  317|    937|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    937|                                    current_token, number_of_argument_required.unsafe(),
  319|    937|                                    argument_num.unsafe()));
  320|    937|                            break;
  321|    937|                        }
  322|       |
  323|  83.5k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|  83.5k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 30.6k, False: 52.8k]
  ------------------
  327|  30.6k|                        {
  328|  30.6k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 10.9k, False: 19.7k]
  ------------------
  329|  10.9k|                            {
  330|  10.9k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  10.9k|                            }
  332|       |
  333|  30.6k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  30.6k|                            continue;
  336|  30.6k|                        }
  337|       |
  338|  52.8k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 16.4k, False: 36.3k]
  ------------------
  339|  16.4k|                        {
  340|  16.4k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  16.4k|                                    token, number_of_argument_required.unsafe(),
  342|  16.4k|                                    argument_num.unsafe()));
  343|  16.4k|                            break;
  344|  16.4k|                        }
  345|       |
  346|  36.3k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  36.3k|                                parse_instruction_argument(
  348|  36.3k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  36.3k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 23.9k, False: 12.4k]
  ------------------
  350|  23.9k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  23.9k|                            break;
  353|  23.9k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  12.4k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  12.4k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  12.4k|                        argument_num++;
  360|  12.4k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  12.4k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  48.6k|                    program.m_Instructions.emplace_back(instruction);
  368|  48.6k|                    line_has_instruction = true;
  369|  48.6k|                    break;
  370|   105k|                }
  371|       |
  372|   182k|                default:
  ------------------
  |  Branch (372:17): [True: 182k, False: 503k]
  ------------------
  373|   182k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   182k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 93.2k, False: 89.5k]
  ------------------
  375|  93.2k|                    {
  376|  93.2k|                        expected_token_type = Token::Type::NewLine;
  377|  93.2k|                    }
  378|       |
  379|   182k|                    program.AddParseError(
  380|   182k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   182k|                    break;
  382|   686k|            }
  383|   686k|        }
  384|       |
  385|       |        // Check for empty labels
  386|  6.55k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 1.68k, False: 4.87k]
  ------------------
  387|  1.68k|        {
  388|  23.1k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 21.4k, False: 1.68k]
  ------------------
  389|  21.4k|            {
  390|  21.4k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  21.4k|                const Token& token = *it;
  393|  21.4k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 17.4k, False: 3.93k]
  ------------------
  394|  17.4k|                {
  395|  17.4k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  17.4k|                    --label_count;
  397|  17.4k|                }
  398|  21.4k|            }
  399|  1.68k|        }
  400|       |
  401|  6.55k|        return program;
  402|  6.55k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  6.55k|    {
  406|  6.55k|        TokenStream tokens = Tokenize(source);
  407|  6.55k|        return Parse(tokens);
  408|  6.55k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  36.3k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  36.3k|        switch (token.GetType())
   38|  36.3k|        {
   39|  3.25k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 3.25k, False: 33.1k]
  ------------------
   40|  3.25k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 1.84k, False: 1.41k]
  ------------------
   41|  3.25k|                                          ArgumentType::AddressDisplacement))
   42|  1.84k|                {
   43|  1.84k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  1.84k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  1.84k|                    return {};
   47|  1.84k|                }
   48|       |
   49|       |                // Get address displacement
   50|  1.41k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  1.41k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  1.41k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 5, False: 1.40k]
  ------------------
   55|      5|                {
   56|      5|                    program.AddParseError(
   57|      5|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      5|                    return {};
   59|      5|                }
   60|       |
   61|  1.40k|                auto         it           = tokens.current_position();
   62|  1.40k|                const Token& first_token  = tokens.consume();
   63|  1.40k|                const Token& second_token = tokens.consume();
   64|  1.40k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  1.40k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 516, False: 893]
  ------------------
   67|    516|                {
   68|    516|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|    516|                            first_token, Token::Type::OpenBracket));
   70|    516|                    return {};
   71|    516|                }
   72|       |
   73|       |                // Second token is the register
   74|    893|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 231, False: 662]
  ------------------
   75|    231|                {
   76|    231|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|    231|                            second_token, Token::Type::RegisterInt));
   78|    231|                    return {};
   79|    231|                }
   80|       |
   81|    662|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 306, False: 356]
  ------------------
   82|    306|                {
   83|    306|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|    306|                            third_token, Token::Type::ClosingBracket));
   85|    306|                    return {};
   86|    306|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|    356|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|    356|                return ConstructInstructionArgumentAddressDisplacement(
   95|    356|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|    662|            }
   97|  5.88k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 5.88k, False: 30.5k]
  ------------------
   98|  5.88k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 967, False: 4.92k]
  ------------------
   99|    967|                {
  100|    967|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|    967|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|    967|                    return {};
  103|    967|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  4.92k|                return ConstructInstructionArgumentRegisterInt(
  109|  4.92k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  5.88k|            }
  111|    836|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 836, False: 35.5k]
  ------------------
  112|    836|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 530, False: 306]
  ------------------
  113|    530|                {
  114|    530|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|    530|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|    530|                    return {};
  117|    530|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|    306|                return ConstructInstructionArgumentRegisterFloat(
  123|    306|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|    836|            }
  125|    582|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 582, False: 35.8k]
  ------------------
  126|    582|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|    582|                return {};
  129|    836|            }
  130|  16.4k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 16.4k, False: 19.9k]
  ------------------
  131|       |                // Parse as Label
  132|  16.4k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 2.85k, False: 13.5k]
  ------------------
  133|  2.85k|                {
  134|  2.85k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  2.85k|                            token, expected_argument_type, ArgumentType::Label));
  136|  2.85k|                    return {};
  137|  2.85k|                }
  138|       |
  139|  13.5k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 13.5k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  13.5k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 8.07k, False: 5.50k]
  ------------------
  146|  8.07k|                {
  147|  8.07k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  8.07k|                    return {};
  149|  8.07k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  5.50k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  13.5k|            }
  155|  2.41k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 2.41k, False: 33.9k]
  ------------------
  156|  2.41k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 720, False: 1.69k]
  ------------------
  157|    720|                {
  158|    720|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|    720|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|    720|                    return {};
  161|    720|                }
  162|       |
  163|  1.69k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 1.33k, False: 363]
  ------------------
  164|  1.33k|                {
  165|  1.33k|                    return ConstructInstructionArgumentImmediateValue(
  166|  1.33k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  1.33k|                }
  168|       |
  169|    363|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    363|                return {};
  171|  1.69k|            }
  172|       |
  173|  6.98k|            default:
  ------------------
  |  Branch (173:13): [True: 6.98k, False: 29.4k]
  ------------------
  174|  6.98k|                program.AddParseError(
  175|  6.98k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  6.98k|                return {};
  177|  36.3k|        }
  178|  36.3k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|   757k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   757k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 540k, False: 217k]
  ------------------
  249|   540k|                                    {
  250|   540k|                                        std::string_view token_label_name = t.GetText();
  251|   540k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   540k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 39.8k, False: 500k]
  ------------------
  254|  39.8k|                                        {
  255|  39.8k|                                            return true;
  256|  39.8k|                                        }
  257|   540k|                                    }
  258|       |
  259|   718k|                                    return false;
  260|   757k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    148|    {
  354|    148|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 148]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    148|        m_CurrentProgram = &program;
  361|       |
  362|    148|        m_ProgramCounter               = 0u;
  363|    148|        m_Halted                       = false;
  364|    148|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    148|        m_LastRaisedException          = Exception::None;
  366|    148|        m_CurrentStepCount             = 0u;
  367|       |
  368|    148|        return true;
  369|    148|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   594k|    {
   14|   594k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 101k, False: 492k]
  ------------------
   15|   101k|        {
   16|   101k|            char first_char = token[0];
   17|   101k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 3.53k, False: 98.4k]
  |  Branch (17:38): [True: 7.83k, False: 90.5k]
  ------------------
   18|  11.3k|            {
   19|  11.3k|                char second_char = token[1];
   20|  11.3k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 11.0k, False: 360]
  |  Branch (20:43): [True: 9.15k, False: 1.85k]
  ------------------
   21|  9.15k|                {
   22|  9.15k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  9.15k|                }
   24|  11.3k|            }
   25|   101k|        }
   26|   492k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 134k, False: 358k]
  ------------------
   27|   134k|        {
   28|   134k|            char first_char = token[0];
   29|   134k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 6.35k, False: 127k]
  |  Branch (29:38): [True: 1.08k, False: 126k]
  ------------------
   30|  7.43k|            {
   31|  7.43k|                char second_char = token[1];
   32|  7.43k|                char third_char  = token[2];
   33|       |
   34|  7.43k|                switch (second_char)
   35|  7.43k|                {
   36|  1.15k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 1.15k, False: 6.27k]
  ------------------
   37|  1.15k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 796, False: 363]
  |  Branch (37:50): [True: 416, False: 380]
  ------------------
   38|    416|                        {
   39|    416|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|    416|                        }
   41|    743|                        break;
   42|  1.15k|                    }
   43|  2.99k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 2.99k, False: 4.44k]
  ------------------
   44|  2.99k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 1.94k, False: 1.04k]
  |  Branch (44:50): [True: 922, False: 1.02k]
  ------------------
   45|    922|                        {
   46|    922|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|    922|                        }
   48|  2.07k|                        break;
   49|  2.99k|                    }
   50|  2.07k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 1.78k, False: 5.65k]
  ------------------
   51|  1.78k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 578, False: 1.20k]
  |  Branch (51:50): [True: 849, False: 354]
  ------------------
   52|  1.42k|                        {
   53|  1.42k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  1.42k|                        }
   55|    354|                        break;
   56|  1.78k|                    }
   57|  1.50k|                    default: {
  ------------------
  |  Branch (57:21): [True: 1.50k, False: 5.93k]
  ------------------
   58|  1.50k|                        break;
   59|  1.78k|                    }
   60|  7.43k|                }
   61|  7.43k|            }
   62|   134k|        }
   63|       |
   64|   582k|        return IntRegisterID::None;
   65|   594k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   582k|    {
   69|   582k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 92.7k, False: 490k]
  ------------------
   70|  92.7k|        {
   71|  92.7k|            char first_char = token[0];
   72|  92.7k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 2.21k, False: 90.5k]
  |  Branch (72:38): [True: 1.88k, False: 88.6k]
  ------------------
   73|  4.10k|            {
   74|  4.10k|                char second_char = token[1];
   75|  4.10k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 3.64k, False: 454]
  |  Branch (75:43): [True: 1.37k, False: 2.27k]
  ------------------
   76|  1.37k|                {
   77|  1.37k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  1.37k|                }
   79|  4.10k|            }
   80|  92.7k|        }
   81|   490k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 131k, False: 358k]
  ------------------
   82|   131k|        {
   83|   131k|            char first_char = token[0];
   84|   131k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 7.85k, False: 123k]
  |  Branch (84:38): [True: 3.20k, False: 120k]
  ------------------
   85|  11.0k|            {
   86|  11.0k|                char second_char = token[1];
   87|  11.0k|                char third_char  = token[2];
   88|       |
   89|  11.0k|                switch (second_char)
   90|  11.0k|                {
   91|  2.69k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 2.69k, False: 8.37k]
  ------------------
   92|  2.69k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 2.09k, False: 596]
  |  Branch (92:50): [True: 808, False: 1.28k]
  ------------------
   93|    808|                        {
   94|    808|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|    808|                        }
   96|  1.88k|                        break;
   97|  2.69k|                    }
   98|  1.88k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 1.77k, False: 9.29k]
  ------------------
   99|  1.77k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 1.14k, False: 626]
  |  Branch (99:50): [True: 806, False: 338]
  ------------------
  100|    806|                        {
  101|    806|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|    806|                        }
  103|    964|                        break;
  104|  1.77k|                    }
  105|  1.02k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 1.02k, False: 10.0k]
  ------------------
  106|  1.02k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 354, False: 666]
  |  Branch (106:50): [True: 194, False: 472]
  ------------------
  107|    548|                        {
  108|    548|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|    548|                        }
  110|    472|                        break;
  111|  1.02k|                    }
  112|  5.58k|                    default: {
  ------------------
  |  Branch (112:21): [True: 5.58k, False: 5.48k]
  ------------------
  113|  5.58k|                        break;
  114|  1.02k|                    }
  115|  11.0k|                }
  116|  11.0k|            }
  117|   131k|        }
  118|       |
  119|   579k|        return FloatRegisterID::None;
  120|   582k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   537k|    {
  124|   537k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 111k, False: 425k]
  ------------------
  125|   111k|        {
  126|   111k|            char c1 = token[0];
  127|   111k|            char c2 = token[1];
  128|   111k|            char c3 = token[2];
  129|   111k|            char c4 = token[3];
  130|       |
  131|   111k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 4.47k, False: 107k]
  |  Branch (131:34): [True: 3.67k, False: 103k]
  |  Branch (131:49): [True: 1.92k, False: 6.22k]
  |  Branch (131:62): [True: 2.77k, False: 3.45k]
  ------------------
  132|   111k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 1.76k, False: 2.92k]
  |  Branch (132:34): [True: 868, False: 2.06k]
  |  Branch (132:49): [True: 1.68k, False: 947]
  |  Branch (132:62): [True: 9, False: 938]
  ------------------
  133|   111k|        }
  134|       |
  135|   425k|        return false;
  136|   537k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|   643k|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   130k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  2.65M|    {
   41|  2.65M|        return m_Type;
   42|  2.65M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  1.95M|    {
   51|  1.95M|        return m_LineNumber;
   52|  1.95M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  3.66M|    {
   56|  3.66M|        return m_Column;
   57|  3.66M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  2.40M|    {
   61|  2.40M|        return m_Text.length();
   62|  2.40M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  1.18M|    {
   66|  1.18M|        return m_Text;
   67|  1.18M|    }
_ZNK3dlx5Token7HasHintEv:
   79|  51.7k|    {
   80|  51.7k|        return m_HasHint;
   81|  51.7k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  57.0k|    {
   85|  57.0k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  57.0k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  57.0k|                   m_Type == Type::ImmediateInteger);
   88|  57.0k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  57.0k|        return m_Hint;
   91|  57.0k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  6.55k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  6.55k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  6.55k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  1.41k|    {
   51|  1.41k|        auto it = m_Iterator;
   52|  5.64k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 4.23k, False: 1.40k]
  ------------------
   53|  4.23k|        {
   54|  4.23k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 5, False: 4.23k]
  ------------------
   55|      5|            {
   56|      5|                return false;
   57|      5|            }
   58|  4.23k|        }
   59|       |
   60|  1.40k|        return true;
   61|  1.41k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|   777k|    {
   65|   777k|        return m_Iterator != m_Tokens.end();
   66|   777k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|   774k|    {
   70|   774k|        return m_Iterator == m_Tokens.end();
   71|   774k|    }
_ZN3dlx11TokenStream7consumeEv:
   84|   774k|    {
   85|   774k|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|   774k|        return *m_Iterator++;
   91|   774k|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  1.40k|    {
  164|  1.40k|        return m_Iterator;
  165|  1.40k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|    356|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|    356|        m_Iterator = it;
  179|    356|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  6.55k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  6.55k|        return m_Tokens.begin();
  188|  6.55k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  6.55k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  6.55k|        return m_Tokens.end();
  206|  6.55k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  1.68k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  1.68k|        return m_Tokens.rbegin();
  224|  1.68k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  21.4k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  21.4k|        return m_Tokens.rend();
  233|  21.4k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  6.55k|    {
   63|  6.55k|        TokenStream tokens;
   64|       |
   65|  6.55k|        std::string_view current_token;
   66|       |
   67|  6.55k|        phi::u64 current_line_number{1u};
   68|  6.55k|        phi::u64 current_column{1u};
   69|  6.55k|        phi::u64 token_begin{0u};
   70|       |
   71|  6.55k|        phi::boolean parsing_comment{false};
   72|       |
   73|  1.96M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 1.95M, False: 6.55k]
  ------------------
   74|  1.95M|        {
   75|  1.95M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  1.95M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 128k, False: 1.82M]
  ------------------
   78|   128k|            {
   79|   128k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 46.9k, False: 81.8k]
  ------------------
   80|  46.9k|                {
   81|       |                    // Skip empty lines
   82|  46.9k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  46.9k|                                        current_line_number, current_column);
   84|       |
   85|  46.9k|                    parsing_comment = false;
   86|  46.9k|                    current_line_number += 1u;
   87|  46.9k|                    current_column = 1u;
   88|  46.9k|                    continue;
   89|  46.9k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|  81.8k|                tokens.emplace_back(
   93|  81.8k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|  81.8k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|  81.8k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|  81.8k|                                    current_line_number, current_column);
   98|       |
   99|  81.8k|                current_token   = std::string_view{};
  100|  81.8k|                parsing_comment = false;
  101|  81.8k|                current_line_number += 1u;
  102|  81.8k|                current_column = 0u;
  103|  81.8k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  1.82M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 3.13k, False: 1.82M]
  |  Branch (105:34): [True: 3.39k, False: 1.82M]
  ------------------
  106|  6.53k|            {
  107|  6.53k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 833, False: 5.69k]
  ------------------
  108|    833|                {
  109|    833|                    token_begin = i;
  110|    833|                }
  111|  5.69k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 4.92k, False: 779]
  ------------------
  112|  4.92k|                {
  113|  4.92k|                    tokens.emplace_back(ParseToken(
  114|  4.92k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  4.92k|                            current_line_number, current_column - current_token.length()));
  116|  4.92k|                    token_begin   = i;
  117|  4.92k|                    current_token = std::string_view{};
  118|  4.92k|                }
  119|       |
  120|  6.53k|                parsing_comment = true;
  121|  6.53k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  6.53k|            }
  123|  1.82M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 13.4k, False: 1.80M]
  ------------------
  124|  13.4k|            {
  125|       |                // simply append the character
  126|  13.4k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|  13.4k|            }
  128|  1.80M|            else
  129|  1.80M|            {
  130|       |                // Not parsing a comment
  131|  1.80M|                switch (c)
  132|  1.80M|                {
  133|  28.2k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 28.2k, False: 1.77M]
  ------------------
  134|  66.9k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 38.6k, False: 1.76M]
  ------------------
  135|  66.9k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 0, False: 1.80M]
  ------------------
  136|  66.9k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 15.1k, False: 51.7k]
  ------------------
  137|  15.1k|                        {
  138|  15.1k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  15.1k|                            continue;
  141|  15.1k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|  51.7k|                        tokens.emplace_back(ParseToken(
  145|  51.7k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|  51.7k|                                current_line_number, current_column - current_token.length()));
  147|  51.7k|                        current_token = std::string_view{};
  148|  51.7k|                        break;
  149|   209k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 209k, False: 1.59M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|   209k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 180k, False: 29.4k]
  ------------------
  152|   180k|                        {
  153|   180k|                            current_token =
  154|   180k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|   180k|                            tokens.emplace_back(ParseToken(
  156|   180k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|   180k|                                    current_line_number,
  158|   180k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|   180k|                            current_token = std::string_view{};
  161|   180k|                        }
  162|  29.4k|                        else
  163|  29.4k|                        {
  164|       |                            // Orphan colon
  165|  29.4k|                            token_begin = i;
  166|       |
  167|  29.4k|                            tokens.emplace_back(Token::Type::Colon,
  168|  29.4k|                                                source.substr(token_begin.unsafe(), 1),
  169|  29.4k|                                                current_line_number, current_column);
  170|  29.4k|                        }
  171|   209k|                        break;
  172|   124k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 124k, False: 1.68M]
  ------------------
  173|   145k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 20.8k, False: 1.78M]
  ------------------
  174|   174k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 29.3k, False: 1.77M]
  ------------------
  175|   174k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 117k, False: 57.1k]
  ------------------
  176|   117k|                        {
  177|   117k|                            tokens.emplace_back(ParseToken(
  178|   117k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   117k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   117k|                            current_token = std::string_view{};
  182|   117k|                        }
  183|       |
  184|   174k|                        Token::Type type;
  185|   174k|                        switch (c)
  186|   174k|                        {
  187|   124k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 124k, False: 50.2k]
  ------------------
  188|   124k|                                type = Token::Type::Comma;
  189|   124k|                                break;
  190|  20.8k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 20.8k, False: 153k]
  ------------------
  191|  20.8k|                                type = Token::Type::OpenBracket;
  192|  20.8k|                                break;
  193|  29.3k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 29.3k, False: 145k]
  ------------------
  194|  29.3k|                                type = Token::Type::ClosingBracket;
  195|  29.3k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 174k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|   174k|#endif
  201|   174k|                        }
  202|       |
  203|   174k|                        token_begin = i;
  204|       |
  205|   174k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|   174k|                                            current_line_number, current_column);
  207|   174k|                        break;
  208|       |
  209|  1.35M|                    default:
  ------------------
  |  Branch (209:21): [True: 1.35M, False: 451k]
  ------------------
  210|  1.35M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 435k, False: 919k]
  ------------------
  211|   435k|                        {
  212|   435k|                            token_begin = i;
  213|   435k|                        }
  214|       |
  215|       |                        // simply append the character
  216|  1.35M|                        current_token =
  217|  1.35M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  1.80M|                }
  219|  1.80M|            }
  220|       |
  221|  1.89M|            current_column += 1u;
  222|  1.89M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  6.55k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 4.68k, False: 1.87k]
  ------------------
  226|  4.68k|        {
  227|  4.68k|            tokens.emplace_back(
  228|  4.68k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  4.68k|                               current_line_number, current_column - current_token.length()));
  230|  4.68k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  6.55k|        tokens.finalize();
  234|       |
  235|  6.55k|        return tokens;
  236|  6.55k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   441k|    {
   11|   441k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 6.91k, False: 434k]
  |  Branch (11:35): [True: 5.96k, False: 949]
  ------------------
   12|  5.96k|        {
   13|  5.96k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  5.96k|            if (number)
  ------------------
  |  Branch (15:17): [True: 1.86k, False: 4.10k]
  ------------------
   16|  1.86k|            {
   17|  1.86k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  1.86k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  1.86k|            }
   20|       |
   21|  4.10k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  5.96k|        }
   23|       |
   24|   435k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 2.81k, False: 432k]
  |  Branch (24:35): [True: 2.93k, False: 429k]
  ------------------
   25|  5.75k|        {
   26|  5.75k|            return {Token::Type::Comment, token, line_number, column};
   27|  5.75k|        }
   28|       |
   29|   429k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 8.99k, False: 420k]
  ------------------
   30|  8.99k|        {
   31|  8.99k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  8.99k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  8.99k|        }
   34|       |
   35|   420k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 1.27k, False: 419k]
  ------------------
   36|  1.27k|        {
   37|  1.27k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  1.27k|        }
   39|       |
   40|   419k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 8.34k, False: 410k]
  ------------------
   41|  8.34k|        {
   42|  8.34k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  8.34k|                    static_cast<std::uint32_t>(id)};
   44|  8.34k|        }
   45|       |
   46|   410k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 3.14k, False: 407k]
  ------------------
   47|  3.14k|        {
   48|  3.14k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  3.14k|                    static_cast<std::uint32_t>(id)};
   50|  3.14k|        }
   51|       |
   52|   407k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 108k, False: 299k]
  ------------------
   53|   108k|        {
   54|   108k|            return {Token::Type::OpCode, token, line_number, column,
   55|   108k|                    static_cast<std::uint32_t>(opcode)};
   56|   108k|        }
   57|       |
   58|   299k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   407k|    }

_ZN6ImVec2C2Ev:
  262|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

LLVMFuzzerTestOneInput:
   11|  6.55k|{
   12|  6.55k|    static dlxemu::Emulator emu;
   13|       |
   14|  6.55k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   15|       |
   16|  6.55k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   17|       |
   18|       |    // Parse it
   19|  6.55k|    editor.SetText(std::string(source.data(), source.size()));
   20|  6.55k|    editor.m_FullText = editor.GetText();
   21|       |
   22|  6.55k|    emu.ParseProgram(editor.m_FullText);
   23|       |
   24|  6.55k|    editor.ColorizeInternal();
   25|       |
   26|  6.55k|    return 0;
   27|  6.55k|}


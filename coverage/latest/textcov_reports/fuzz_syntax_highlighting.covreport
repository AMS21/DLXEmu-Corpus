_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  195|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  200|  20.5k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  238|  4.10k|    {
  239|  4.10k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (239:13): [True: 1.29k, False: 2.81k]
  ------------------
  240|  1.29k|        {
  241|  1.29k|            return m_Line < other.m_Line;
  242|  1.29k|        }
  243|       |
  244|  2.81k|        return m_Column <= other.m_Column;
  245|  4.10k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  249|      1|    {
  250|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (250:13): [True: 0, False: 1]
  ------------------
  251|      0|        {
  252|      0|            return m_Line > other.m_Line;
  253|      0|        }
  254|       |
  255|      1|        return m_Column >= other.m_Column;
  256|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  263|   649k|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  291|      1|    {
  292|      1|        Colorize();
  293|      1|        m_Lines.push_back(Line());
  294|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  297|      1|    {
  298|      1|        VerifyInternalState();
  299|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  347|  4.10k|    {
  348|  4.10k|        m_ErrorMarkers.clear();
  349|  4.10k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  412|  4.10k|    {
  413|  4.10k|        m_Breakpoints.clear();
  414|  4.10k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  492|  4.10k|    {
  493|  4.10k|        m_Lines.clear();
  494|  4.10k|        ResetState();
  495|  4.10k|        m_Lines.emplace_back(Line());
  496|       |
  497|  4.10k|        for (const char character : text)
  ------------------
  |  Branch (497:35): [True: 1.02M, False: 4.10k]
  ------------------
  498|  1.02M|        {
  499|  1.02M|            if (character == '\r' ||
  ------------------
  |  Branch (499:17): [True: 1.22k, False: 1.02M]
  |  Branch (499:17): [True: 326k, False: 696k]
  ------------------
  500|  1.02M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (500:18): [True: 386k, False: 635k]
  |  Branch (500:48): [True: 339k, False: 47.2k]
  |  Branch (500:69): [True: 325k, False: 13.9k]
  ------------------
  501|   326k|            {
  502|       |                // ignore the carriage return character and control characters
  503|   326k|            }
  504|   696k|            else if (character == '\n')
  ------------------
  |  Branch (504:22): [True: 47.2k, False: 649k]
  ------------------
  505|  47.2k|            {
  506|  47.2k|                m_Lines.emplace_back(Line());
  507|  47.2k|            }
  508|   649k|            else
  509|   649k|            {
  510|   649k|                m_Lines.back().emplace_back(
  511|   649k|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  512|   649k|            }
  513|  1.02M|        }
  514|       |
  515|  4.10k|        m_TextChanged = true;
  516|  4.10k|        m_ScrollToTop = true;
  517|       |
  518|  4.10k|        m_UndoBuffer.clear();
  519|  4.10k|        m_UndoIndex = 0u;
  520|       |
  521|  4.10k|        Colorize();
  522|  4.10k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  525|  4.10k|    {
  526|  4.10k|        const phi::u32 max_line = GetMaxLineNumber();
  527|       |
  528|  4.10k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  529|  4.10k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1501|      1|    {
 1502|       |        // Lines should never be empty
 1503|      1|        PHI_ASSERT(!m_Lines.empty());
 1504|       |
 1505|       |        // Verify Selection is still in a valid state
 1506|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1507|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1508|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1509|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1510|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1511|       |
 1512|       |        // Verify cursor position
 1513|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1514|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1515|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1516|       |
 1517|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1518|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1519|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1520|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1521|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1522|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1523|       |#endif
 1524|       |
 1525|       |        // Verify that all breakpoints are on existing lines
 1526|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1526:35): [True: 0, False: 1]
  ------------------
 1527|      0|        {
 1528|      0|            PHI_ASSERT(break_point != 0u);
 1529|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1530|      0|        }
 1531|       |
 1532|       |        // Verify that all error markers are on existing lines
 1533|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1533:34): [True: 0, False: 1]
  ------------------
 1534|      0|        {
 1535|      0|            const phi::u32 line_number = error_marker.first;
 1536|       |
 1537|      0|            PHI_ASSERT(line_number != 0u);
 1538|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1539|      0|        }
 1540|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1543|      1|    {
 1544|      1|        constexpr const static Palette palette = {{
 1545|      1|                0xff7f7f7f, // Default
 1546|      1|                0xffd69c56, // OpCode
 1547|      1|                0xff00ff00, // Register
 1548|      1|                0xff7070e0, // IntegerLiteral
 1549|      1|                0xff206020, // Comment
 1550|      1|                0xff101010, // Background
 1551|      1|                0xffe0e0e0, // Cursor
 1552|      1|                0x80a06020, // Selection
 1553|      1|                0x800020ff, // ErrorMarker
 1554|      1|                0x40f08000, // Breakpoint
 1555|      1|                0xff707000, // Line number
 1556|      1|                0x40000000, // Current line fill
 1557|      1|                0x40808080, // Current line fill (inactive)
 1558|      1|                0x40a0a0a0, // Current line edge
 1559|      1|        }};
 1560|       |
 1561|      1|        return palette;
 1562|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1729|  4.10k|    {
 1730|       |        // TODO: This is quite unreadable
 1731|  4.10k|        const phi::u32 to_line =
 1732|  4.10k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1732:17): [True: 4.10k, False: 0]
  ------------------
 1733|  4.10k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1734|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1735|       |
 1736|  4.10k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1737|  4.10k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1738|  4.10k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1739|  4.10k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1740|  4.10k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1846|  4.10k|    {
 1847|  4.10k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1848|  4.10k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1849|  4.10k|        PHI_ASSERT(start <= end);
 1850|       |
 1851|  4.10k|        std::string result;
 1852|       |
 1853|  4.10k|        phi::u32   lstart = start.m_Line;
 1854|  4.10k|        phi::u32   lend   = end.m_Line;
 1855|  4.10k|        phi::u32   istart = GetCharacterIndex(start);
 1856|  4.10k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1857|  4.10k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1858|  4.10k|        phi::usize size   = 0u;
 1859|       |
 1860|  55.4k|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1860:35): [True: 51.3k, False: 4.10k]
  ------------------
 1861|  51.3k|        {
 1862|  51.3k|            PHI_ASSERT(i < m_Lines.size());
 1863|  51.3k|            size += m_Lines[i.unsafe()].size();
 1864|  51.3k|        }
 1865|       |
 1866|  4.10k|        result.reserve((size + size / 8u).unsafe());
 1867|       |
 1868|   700k|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1868:16): [True: 520k, False: 180k]
  |  Branch (1868:16): [True: 696k, False: 4.10k]
  |  Branch (1868:33): [True: 176k, False: 4.10k]
  ------------------
 1869|   696k|        {
 1870|   696k|            PHI_ASSERT(lstart < m_Lines.size());
 1871|       |
 1872|   696k|            const Line& line = m_Lines[lstart.unsafe()];
 1873|   696k|            if (istart < line.size())
  ------------------
  |  Branch (1873:17): [True: 649k, False: 47.2k]
  ------------------
 1874|   649k|            {
 1875|   649k|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1876|   649k|                istart++;
 1877|   649k|            }
 1878|  47.2k|            else
 1879|  47.2k|            {
 1880|  47.2k|                istart = 0u;
 1881|  47.2k|                ++lstart;
 1882|       |
 1883|  47.2k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1883:21): [True: 47.2k, False: 0]
  ------------------
 1884|  47.2k|                {
 1885|  47.2k|                    result += '\n';
 1886|  47.2k|                }
 1887|  47.2k|            }
 1888|   696k|        }
 1889|       |
 1890|  4.10k|        return result;
 1891|  4.10k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2427|  8.21k|    {
 2428|  8.21k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2429|       |
 2430|  8.21k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2431|  8.21k|        phi::u32    index = 0u;
 2432|   298k|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2432:35): [True: 294k, False: 4.21k]
  |  Branch (2432:35): [True: 290k, False: 8.21k]
  |  Branch (2432:58): [True: 290k, False: 3.99k]
  ------------------
 2433|   290k|        {
 2434|   290k|            PHI_ASSERT(index < line.size());
 2435|   290k|            const Char character = line[index.unsafe()].m_Char;
 2436|       |
 2437|   290k|            if (character == '\t')
  ------------------
  |  Branch (2437:17): [True: 4.37k, False: 286k]
  ------------------
 2438|  4.37k|            {
 2439|  4.37k|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2440|  4.37k|            }
 2441|   286k|            else
 2442|   286k|            {
 2443|   286k|                ++column;
 2444|   286k|            }
 2445|       |
 2446|   290k|            index += UTF8CharLength(character);
 2447|   290k|        }
 2448|       |
 2449|  8.21k|        return index;
 2450|  8.21k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2499|  4.10k|    {
 2500|  4.10k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2500:13): [True: 0, False: 4.10k]
  ------------------
 2501|      0|        {
 2502|      0|            return 0u;
 2503|      0|        }
 2504|       |
 2505|  4.10k|        const Line& line = m_Lines[line_number.unsafe()];
 2506|  4.10k|        phi::u32    col  = 0u;
 2507|       |
 2508|   294k|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2508:32): [True: 290k, False: 4.10k]
  ------------------
 2509|   290k|        {
 2510|   290k|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2511|   290k|            if (character == '\t')
  ------------------
  |  Branch (2511:17): [True: 4.37k, False: 286k]
  ------------------
 2512|  4.37k|            {
 2513|  4.37k|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2514|  4.37k|            }
 2515|   286k|            else
 2516|   286k|            {
 2517|   286k|                col++;
 2518|   286k|            }
 2519|       |
 2520|   290k|            i += UTF8CharLength(character);
 2521|   290k|        }
 2522|       |
 2523|  4.10k|        return col;
 2524|  4.10k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2527|  4.10k|    {
 2528|  4.10k|        PHI_ASSERT(!m_Lines.empty());
 2529|       |
 2530|  4.10k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2531|  4.10k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3659|   282k|    {
 3660|   282k|        PaletteIndex palette_index{PaletteIndex::Default};
 3661|       |
 3662|       |        // Determine palette color
 3663|   282k|        switch (token.GetType())
 3664|   282k|        {
 3665|  1.96k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3665:13): [True: 1.96k, False: 280k]
  ------------------
 3666|  1.96k|                palette_index = PaletteIndex::Comment;
 3667|  1.96k|                break;
 3668|  1.62k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3668:13): [True: 1.62k, False: 281k]
  ------------------
 3669|  4.91k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3669:13): [True: 3.29k, False: 279k]
  ------------------
 3670|  4.91k|                palette_index = PaletteIndex::IntegerLiteral;
 3671|  4.91k|                break;
 3672|  34.9k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3672:13): [True: 34.9k, False: 247k]
  ------------------
 3673|  34.9k|                palette_index = PaletteIndex::OpCode;
 3674|  34.9k|                break;
 3675|  1.17k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3675:13): [True: 1.17k, False: 281k]
  ------------------
 3676|  2.73k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3676:13): [True: 1.55k, False: 281k]
  ------------------
 3677|  3.00k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3677:13): [True: 268, False: 282k]
  ------------------
 3678|  3.00k|                palette_index = PaletteIndex::Register;
 3679|  3.00k|                break;
 3680|  47.2k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3680:13): [True: 47.2k, False: 235k]
  ------------------
 3681|  47.2k|                return;
 3682|   190k|            default:
  ------------------
  |  Branch (3682:13): [True: 190k, False: 92.0k]
  ------------------
 3683|   190k|                break;
 3684|   282k|        }
 3685|       |
 3686|   235k|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3687|   235k|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3688|       |
 3689|   235k|        for (phi::u64 index{token.GetColumn() - 1u};
 3690|   862k|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3690:14): [True: 626k, False: 235k]
  ------------------
 3691|   626k|        {
 3692|   626k|            PHI_ASSERT(index < line.size());
 3693|   626k|            line[index.unsafe()].m_ColorIndex = palette_index;
 3694|   626k|        }
 3695|   235k|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3698|  4.10k|    {
 3699|  4.10k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3700|       |
 3701|  4.10k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3701:38): [True: 282k, False: 4.10k]
  ------------------
 3702|   282k|        {
 3703|   282k|            ColorizeToken(token);
 3704|   282k|        }
 3705|  4.10k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3708|  4.10k|    {
 3709|  4.10k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3710|  4.10k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3711|  4.10k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3712|       |
 3713|       |        // Clear breakpoints and markers
 3714|  4.10k|        ClearBreakPoints();
 3715|  4.10k|        ClearErrorMarkers();
 3716|  4.10k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  133|   290k|{
  134|   290k|    return UTF8CharLength(static_cast<char>(characater));
  135|   290k|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  103|   581k|{
  104|   581k|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (104:9): [True: 1.31k, False: 579k]
  ------------------
  105|  1.31k|    {
  106|  1.31k|        return 6_u8;
  107|  1.31k|    }
  108|       |
  109|   579k|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (109:9): [True: 1.61k, False: 578k]
  ------------------
  110|  1.61k|    {
  111|  1.61k|        return 5_u8;
  112|  1.61k|    }
  113|       |
  114|   578k|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (114:9): [True: 2.22k, False: 575k]
  ------------------
  115|  2.22k|    {
  116|  2.22k|        return 4_u8;
  117|  2.22k|    }
  118|       |
  119|   575k|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (119:9): [True: 3.32k, False: 572k]
  ------------------
  120|  3.32k|    {
  121|  3.32k|        return 3_u8;
  122|  3.32k|    }
  123|       |
  124|   572k|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (124:9): [True: 11.4k, False: 561k]
  ------------------
  125|  11.4k|    {
  126|  11.4k|        return 2_u8;
  127|  11.4k|    }
  128|       |
  129|   561k|    return 1_u8;
  130|   572k|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  174|  4.10k|    {
  175|  4.10k|        return m_DLXProgram;
  176|  4.10k|    }
_ZN6dlxemu8Emulator12ParseProgramENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  179|  4.10k|    {
  180|  4.10k|        m_DLXProgram = dlx::Parser::Parse(source);
  181|       |
  182|  4.10k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (182:13): [True: 137, False: 3.96k]
  ------------------
  183|    137|        {
  184|    137|            m_Processor.LoadProgram(m_DLXProgram);
  185|    137|        }
  186|  4.10k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  199|  4.10k|    {
  200|  4.10k|        return m_CodeEditor;
  201|  4.10k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   37|      1|    {
   38|      1|        Shutdown();
   39|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  107|      1|    {
  108|      1|        if (imgui_initialized)
  ------------------
  |  Branch (108:13): [True: 0, False: 1]
  ------------------
  109|      0|        {
  110|      0|            ShutdownImGui();
  111|      0|        }
  112|       |
  113|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (113:13): [True: 0, False: 1]
  ------------------
  114|      0|        {
  115|      0|            glfwDestroyWindow(m_Window);
  116|      0|        }
  117|       |
  118|      1|        if (glfw_initialized)
  ------------------
  |  Branch (118:13): [True: 0, False: 1]
  ------------------
  119|      0|        {
  120|      0|            glfwTerminate();
  121|      0|        }
  122|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  60.2k|        {
  169|  60.2k|            PHI_ASSERT(index < 3u);
  170|       |
  171|  60.2k|            switch (index.unsafe())
  172|  60.2k|            {
  173|  26.8k|                case 0:
  ------------------
  |  Branch (173:17): [True: 26.8k, False: 33.3k]
  ------------------
  174|  26.8k|                    return m_Arg1Type;
  175|       |
  176|  16.7k|                case 1:
  ------------------
  |  Branch (176:17): [True: 16.7k, False: 43.5k]
  ------------------
  177|  16.7k|                    return m_Arg2Type;
  178|       |
  179|  16.6k|                case 2:
  ------------------
  |  Branch (179:17): [True: 16.6k, False: 43.6k]
  ------------------
  180|  16.6k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 60.2k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  60.2k|#endif
  187|  60.2k|            }
  188|  60.2k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  16.2k|        {
  195|  16.2k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  16.2k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 16.0k, False: 254]
  ------------------
  199|  16.0k|            {
  200|  16.0k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  16.0k|            }
  202|  16.2k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 9.37k, False: 6.92k]
  ------------------
  203|  9.37k|            {
  204|  9.37k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  9.37k|            }
  206|  16.2k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 5.03k, False: 11.2k]
  ------------------
  207|  5.03k|            {
  208|  5.03k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  5.03k|            }
  210|       |
  211|  16.2k|            return number_of_argument_required;
  212|  16.2k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  16.2k|        {
  221|  16.2k|            return m_Executor;
  222|  16.2k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  9.03k|    {
   38|  9.03k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  9.03k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  9.03k|                                         static_cast<underlying_t>(rhs));
   42|  9.03k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  9.03k|    {
   55|  9.03k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  9.03k|        return static_cast<underlying_t>(type & test) != 0;
   58|  9.03k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  57.8k|    {
   32|  57.8k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 1.33k, False: 56.5k]
  ------------------
   33|  1.33k|        {
   34|  1.33k|            return true;
   35|  1.33k|        }
   36|       |
   37|  56.5k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 236, False: 56.2k]
  ------------------
   38|    236|        {
   39|    236|            return true;
   40|    236|        }
   41|       |
   42|  56.2k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 17.0k, False: 39.2k]
  ------------------
   43|  17.0k|        {
   44|  17.0k|            return true;
   45|  17.0k|        }
   46|       |
   47|  39.2k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 194, False: 39.0k]
  ------------------
   48|    194|        {
   49|    194|            return true;
   50|    194|        }
   51|       |
   52|  39.0k|        return false;
   53|  39.2k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  39.0k|    {
   57|  39.0k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 39.0k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  39.0k|        const char first_char = token.at(0);
   63|       |
   64|  39.0k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 9.27k, False: 29.7k]
  ------------------
   65|  9.27k|        {
   66|  9.27k|            return phi::is_alpha(first_char);
   67|  9.27k|        }
   68|       |
   69|  29.7k|        phi::boolean just_under_scores = (first_char == '_');
   70|  29.7k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 5.52k, False: 24.2k]
  |  Branch (70:15): [True: 23.8k, False: 5.94k]
  |  Branch (70:44): [True: 421, False: 5.52k]
  ------------------
   71|  5.52k|        {
   72|  5.52k|            return false;
   73|  5.52k|        }
   74|       |
   75|  81.8k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 67.2k, False: 14.6k]
  ------------------
   76|  67.2k|        {
   77|  67.2k|            const char c{token.at(index)};
   78|       |
   79|  67.2k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 56.9k, False: 10.3k]
  ------------------
   80|  56.9k|            {
   81|  56.9k|                just_under_scores = false;
   82|  56.9k|            }
   83|  10.3k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 685, False: 9.63k]
  ------------------
   84|    685|            {
   85|    685|                continue;
   86|    685|            }
   87|  9.63k|            else
   88|  9.63k|            {
   89|  9.63k|                return false;
   90|  9.63k|            }
   91|  67.2k|        }
   92|       |
   93|  14.6k|        return !just_under_scores;
   94|  24.2k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   152k|    {
  101|   152k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 152k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   152k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 26.7k, False: 125k]
  ------------------
  107|  26.7k|        {
  108|  26.7k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 2.55k, False: 24.1k]
  ------------------
  109|  2.55k|            {
  110|  2.55k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  2.55k|            }
  112|       |
  113|  24.1k|            return {};
  114|  26.7k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   125k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 340, False: 125k]
  ------------------
  118|    340|        {
  119|    340|            return {};
  120|    340|        }
  121|       |
  122|   125k|        std::int32_t number{0};
  123|   125k|        phi::boolean is_negative{false};
  124|   125k|        phi::boolean starts_with_zero{false};
  125|   125k|        phi::boolean parsing_binary{false};
  126|   125k|        phi::boolean parsing_octal{false};
  127|   125k|        phi::boolean parsing_hexadecimal{false};
  128|   125k|        phi::boolean parsed_something{false};
  129|   125k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   140k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 138k, False: 1.63k]
  ------------------
  134|   138k|        {
  135|   138k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   138k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 125k, False: 12.8k]
  ------------------
  139|   125k|            {
  140|   125k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 581, False: 125k]
  ------------------
  141|    581|                {
  142|    581|                    continue;
  143|    581|                }
  144|       |
  145|   125k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 1.83k, False: 123k]
  ------------------
  146|  1.83k|                {
  147|  1.83k|                    is_negative = true;
  148|  1.83k|                    continue;
  149|  1.83k|                }
  150|       |
  151|   123k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 2.18k, False: 121k]
  ------------------
  152|  2.18k|                {
  153|  2.18k|                    starts_with_zero = true;
  154|  2.18k|                    continue;
  155|  2.18k|                }
  156|       |
  157|   121k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 419, False: 120k]
  ------------------
  158|    419|                {
  159|    419|                    return {};
  160|    419|                }
  161|   121k|            }
  162|       |
  163|       |            // Second character
  164|   133k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 6.39k, False: 127k]
  ------------------
  165|  6.39k|            {
  166|  6.39k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 2.18k, False: 4.21k]
  ------------------
  167|  2.18k|                {
  168|       |                    // Binary
  169|  2.18k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 222, False: 1.95k]
  |  Branch (169:37): [True: 268, False: 1.69k]
  ------------------
  170|    490|                    {
  171|    490|                        parsing_binary = true;
  172|    490|                        continue;
  173|    490|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  1.69k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 526, False: 1.16k]
  |  Branch (176:37): [True: 274, False: 891]
  ------------------
  177|    800|                    {
  178|    800|                        parsing_hexadecimal = true;
  179|    800|                        continue;
  180|    800|                    }
  181|       |
  182|       |                    // Octal
  183|    891|                    parsing_octal = true;
  184|    891|                }
  185|  6.39k|            }
  186|       |
  187|       |            // Handle seperators
  188|   132k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 573, False: 131k]
  ------------------
  189|    573|            {
  190|    573|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 195, False: 378]
  ------------------
  191|    195|                {
  192|    195|                    return {};
  193|    195|                }
  194|       |
  195|    378|                parsed_separator = true;
  196|    378|                continue;
  197|    573|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   131k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 2.59k, False: 128k]
  |  Branch (200:32): [True: 66, False: 2.52k]
  ------------------
  201|     66|            {
  202|       |                // Would underflow
  203|     66|                return {};
  204|     66|            }
  205|   131k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 128k, False: 2.52k]
  |  Branch (205:17): [True: 303, False: 131k]
  |  Branch (205:33): [True: 303, False: 128k]
  ------------------
  206|    303|            {
  207|       |                // Would overflow
  208|    303|                return {};
  209|    303|            }
  210|       |
  211|   131k|            parsed_separator = false;
  212|   131k|            parsed_something = true;
  213|       |
  214|   131k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 646, False: 130k]
  ------------------
  215|    646|            {
  216|    646|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 258, False: 388]
  ------------------
  217|    258|                {
  218|    258|                    return {};
  219|    258|                }
  220|       |
  221|    388|                number <<= 1;
  222|    388|                number |= (c - '0');
  223|    388|            }
  224|   130k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 1.44k, False: 129k]
  ------------------
  225|  1.44k|            {
  226|  1.44k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 751, False: 690]
  ------------------
  227|    751|                {
  228|    751|                    return {};
  229|    751|                }
  230|       |
  231|    690|                number <<= 3;
  232|    690|                number |= (c - '0');
  233|    690|            }
  234|   129k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 1.80k, False: 127k]
  ------------------
  235|  1.80k|            {
  236|  1.80k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 493, False: 1.30k]
  ------------------
  237|    493|                {
  238|    493|                    return {};
  239|    493|                }
  240|       |
  241|  1.30k|                number <<= 4;
  242|  1.30k|                number |= phi::hex_digit_value(c).unsafe();
  243|  1.30k|            }
  244|   127k|            else
  245|   127k|            {
  246|   127k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 121k, False: 6.02k]
  ------------------
  247|   121k|                {
  248|   121k|                    return {};
  249|   121k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  6.02k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 2.60k, False: 3.41k]
  |  Branch (252:36): [True: 207, False: 2.39k]
  ------------------
  253|    207|                {
  254|    207|                    return {};
  255|    207|                }
  256|       |
  257|  5.81k|                number *= 10;
  258|  5.81k|                number += (c - '0');
  259|  5.81k|            }
  260|   131k|        }
  261|       |
  262|  1.63k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 1.38k, False: 249]
  ------------------
  263|  1.38k|        {
  264|       |            // Check for over/underflow
  265|  1.38k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 401, False: 982]
  |  Branch (265:32): [True: 81, False: 320]
  ------------------
  266|     81|            {
  267|       |                // Would underflow
  268|     81|                return {};
  269|     81|            }
  270|  1.30k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 982, False: 320]
  |  Branch (270:17): [True: 282, False: 1.02k]
  |  Branch (270:33): [True: 282, False: 700]
  ------------------
  271|    282|            {
  272|       |                // Would overflow
  273|    282|                return {};
  274|    282|            }
  275|       |
  276|  1.02k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 320, False: 700]
  ------------------
  277|    320|            {
  278|    320|                return static_cast<std::int16_t>(-number);
  279|    320|            }
  280|       |
  281|    700|            return static_cast<std::int16_t>(number);
  282|  1.02k|        }
  283|       |
  284|    249|        return {};
  285|  1.63k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  13.7k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  13.7k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 220k, False: 0]
  ------------------
   64|   220k|            {
   65|   220k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 13.7k, False: 207k]
  ------------------
   66|  13.7k|                {
   67|  13.7k|                    return &token;
   68|  13.7k|                }
   69|   220k|            }
   70|       |
   71|      0|            return nullptr;
   72|  13.7k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|  59.0k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  59.0k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  59.0k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   154k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   154k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   154k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  69.0k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  69.0k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  69.0k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  16.2k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  3.59k|    {
   25|  3.59k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  3.59k|        switch (argument_number.unsafe())
   28|  3.59k|        {
   29|  3.20k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 3.20k, False: 386]
  ------------------
   30|  3.20k|                m_Arg1 = argument;
   31|  3.20k|                break;
   32|    320|            case 1u:
  ------------------
  |  Branch (32:13): [True: 320, False: 3.27k]
  ------------------
   33|    320|                m_Arg2 = argument;
   34|    320|                break;
   35|     66|            case 2u:
  ------------------
  |  Branch (35:13): [True: 66, False: 3.52k]
  ------------------
   36|     66|                m_Arg3 = argument;
   37|     66|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 3.59k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  3.59k|#endif
   42|  3.59k|        }
   43|  3.59k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  52.4k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|    701|    {
  171|    701|        InstructionArgument arg;
  172|    701|        arg.m_Type                   = ArgumentType::IntRegister;
  173|    701|        arg.register_int.register_id = id;
  174|    701|        return arg;
  175|    701|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|     68|    {
  179|     68|        InstructionArgument arg;
  180|     68|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|     68|        arg.register_float.register_id = id;
  182|     68|        return arg;
  183|     68|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|    194|    {
  187|    194|        InstructionArgument arg;
  188|    194|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|    194|        arg.immediate_value.signed_value = value;
  190|    194|        return arg;
  191|    194|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|    202|    {
  196|    202|        InstructionArgument arg;
  197|    202|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|    202|        arg.address_displacement.register_id  = id;
  199|    202|        arg.address_displacement.displacement = displacement;
  200|    202|        return arg;
  201|    202|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  2.42k|    {
  205|  2.42k|        InstructionArgument arg;
  206|  2.42k|        arg.m_Type           = ArgumentType::Label;
  207|  2.42k|        arg.label.label_name = label_name;
  208|  2.42k|        return arg;
  209|  2.42k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  16.2k|    {
  453|  16.2k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  16.2k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   15|      1|    {
   16|      1|        m_Values.resize(starting_size.unsafe());
   17|      1|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   201k|    {
   24|   201k|        switch (token.length())
   25|   201k|        {
   26|       |            // 1 character OpCodes
   27|  33.2k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 33.2k, False: 167k]
  ------------------
   28|  33.2k|                char c1 = token[0];
   29|  33.2k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 8.18k, False: 25.0k]
  ------------------
   30|  8.18k|                {
   31|  8.18k|                    return OpCode::J;
   32|  8.18k|                }
   33|  25.0k|                break;
   34|  33.2k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  33.2k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 33.2k, False: 167k]
  ------------------
   38|  33.2k|                char c1 = token[0];
   39|  33.2k|                char c2 = token[1];
   40|       |
   41|  33.2k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 19.7k, False: 13.4k]
  ------------------
   42|  33.2k|                {
   43|  1.95k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 1.95k, False: 31.2k]
  ------------------
   44|  2.48k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 525, False: 32.6k]
  ------------------
   45|  2.48k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 487, False: 1.99k]
  ------------------
   46|    487|                        {
   47|    487|                            return OpCode::JR;
   48|    487|                        }
   49|  1.99k|                        break;
   50|       |
   51|  2.48k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 2.48k, False: 30.7k]
  ------------------
   52|  4.12k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 1.64k, False: 31.5k]
  ------------------
   53|  4.12k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 1.76k, False: 2.36k]
  ------------------
   54|  4.12k|                        {
   55|    233|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 233, False: 3.89k]
  ------------------
   56|    447|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 214, False: 3.91k]
  ------------------
   57|    447|                                return OpCode::LB;
   58|    200|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 200, False: 3.92k]
  ------------------
   59|    440|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 240, False: 3.88k]
  ------------------
   60|    440|                                return OpCode::LD;
   61|    273|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 273, False: 3.85k]
  ------------------
   62|    529|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 256, False: 3.87k]
  ------------------
   63|    529|                                return OpCode::LF;
   64|    284|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 284, False: 3.84k]
  ------------------
   65|    558|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 274, False: 3.85k]
  ------------------
   66|    558|                                return OpCode::LH;
   67|    196|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 196, False: 3.93k]
  ------------------
   68|    391|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 195, False: 3.93k]
  ------------------
   69|    391|                                return OpCode::LW;
   70|  4.12k|                        }
   71|  1.76k|                        break;
   72|  1.76k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 475, False: 32.7k]
  ------------------
   73|  2.00k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 1.52k, False: 31.6k]
  ------------------
   74|  2.00k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 424, False: 1.57k]
  ------------------
   75|    424|                        {
   76|    424|                            return OpCode::OR;
   77|    424|                        }
   78|  1.57k|                        break;
   79|  2.48k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 2.48k, False: 30.7k]
  ------------------
   80|  4.86k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 2.38k, False: 30.8k]
  ------------------
   81|  4.86k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 1.38k, False: 3.47k]
  ------------------
   82|  4.86k|                        {
   83|    226|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 226, False: 4.63k]
  ------------------
   84|    428|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 202, False: 4.66k]
  ------------------
   85|    428|                                return OpCode::SB;
   86|  1.06k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 1.06k, False: 3.79k]
  ------------------
   87|  1.26k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 201, False: 4.66k]
  ------------------
   88|  1.26k|                                return OpCode::SD;
   89|    201|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 201, False: 4.66k]
  ------------------
   90|    404|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 203, False: 4.66k]
  ------------------
   91|    404|                                return OpCode::SF;
   92|    216|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 216, False: 4.64k]
  ------------------
   93|    776|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 560, False: 4.30k]
  ------------------
   94|    776|                                return OpCode::SH;
   95|    219|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 219, False: 4.64k]
  ------------------
   96|    603|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 384, False: 4.48k]
  ------------------
   97|    603|                                return OpCode::SW;
   98|  4.86k|                        }
   99|  1.38k|                        break;
  100|  33.2k|                }
  101|  26.4k|                break;
  102|  33.2k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|  43.1k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 43.1k, False: 157k]
  ------------------
  106|  43.1k|                char c1 = token[0];
  107|  43.1k|                char c2 = token[1];
  108|  43.1k|                char c3 = token[2];
  109|       |
  110|  43.1k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 13.1k, False: 29.9k]
  ------------------
  111|  43.1k|                {
  112|  1.78k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 1.78k, False: 41.3k]
  ------------------
  113|  2.72k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 941, False: 42.2k]
  ------------------
  114|  2.72k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 763, False: 1.96k]
  |  Branch (114:29): [True: 305, False: 2.42k]
  |  Branch (114:45): [True: 305, False: 458]
  ------------------
  115|    305|                        {
  116|    305|                            return OpCode::ADD;
  117|    305|                        }
  118|  2.42k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 691, False: 1.72k]
  |  Branch (118:34): [True: 446, False: 1.97k]
  |  Branch (118:50): [True: 446, False: 245]
  ------------------
  119|    446|                        {
  120|    446|                            return OpCode::AND;
  121|    446|                        }
  122|  1.97k|                        break;
  123|       |
  124|  1.97k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 794, False: 42.3k]
  ------------------
  125|  1.19k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 396, False: 42.7k]
  ------------------
  126|  1.19k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 759, False: 431]
  |  Branch (126:29): [True: 275, False: 915]
  |  Branch (126:45): [True: 275, False: 484]
  ------------------
  127|    275|                        {
  128|    275|                            return OpCode::DIV;
  129|    275|                        }
  130|    915|                        break;
  131|       |
  132|    915|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 558, False: 42.5k]
  ------------------
  133|  1.80k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 1.24k, False: 41.9k]
  ------------------
  134|  1.80k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 1.27k, False: 529]
  ------------------
  135|  1.27k|                        {
  136|  1.27k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 388, False: 888]
  ------------------
  137|    388|                            {
  138|    388|                                return OpCode::EQD;
  139|    388|                            }
  140|    888|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 416, False: 472]
  ------------------
  141|    416|                            {
  142|    416|                                return OpCode::EQF;
  143|    416|                            }
  144|  1.27k|                        }
  145|  1.00k|                        break;
  146|       |
  147|  1.00k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 975, False: 42.1k]
  ------------------
  148|  2.34k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 1.37k, False: 41.7k]
  ------------------
  149|  2.34k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 1.03k, False: 1.31k]
  ------------------
  150|  1.03k|                        {
  151|  1.03k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 389, False: 645]
  ------------------
  152|    389|                            {
  153|    389|                                return OpCode::GED;
  154|    389|                            }
  155|    645|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 390, False: 255]
  ------------------
  156|    390|                            {
  157|    390|                                return OpCode::GEF;
  158|    390|                            }
  159|  1.03k|                        }
  160|  1.31k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 1.02k, False: 288]
  ------------------
  161|  1.02k|                        {
  162|  1.02k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 389, False: 635]
  ------------------
  163|    389|                            {
  164|    389|                                return OpCode::GTD;
  165|    389|                            }
  166|    635|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 388, False: 247]
  ------------------
  167|    388|                            {
  168|    388|                                return OpCode::GTF;
  169|    388|                            }
  170|    635|                        }
  171|    790|                        break;
  172|       |
  173|  1.45k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 1.45k, False: 41.6k]
  ------------------
  174|  1.75k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 294, False: 42.8k]
  ------------------
  175|  1.75k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 754, False: 997]
  |  Branch (175:29): [True: 450, False: 1.30k]
  |  Branch (175:45): [True: 450, False: 304]
  ------------------
  176|    450|                        {
  177|    450|                            return OpCode::JAL;
  178|    450|                        }
  179|  1.30k|                        break;
  180|       |
  181|  4.37k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 4.37k, False: 38.7k]
  ------------------
  182|  5.83k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 1.45k, False: 41.6k]
  ------------------
  183|  5.83k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 968, False: 4.86k]
  ------------------
  184|  5.83k|                        {
  185|    254|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 254, False: 5.57k]
  ------------------
  186|    739|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 485, False: 5.34k]
  ------------------
  187|    739|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 404, False: 335]
  ------------------
  188|    404|                                {
  189|    404|                                    return OpCode::LBU;
  190|    404|                                }
  191|    335|                                break;
  192|       |
  193|    591|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 591, False: 5.23k]
  ------------------
  194|  1.05k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 460, False: 5.37k]
  ------------------
  195|  1.05k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 451, False: 600]
  ------------------
  196|    451|                                {
  197|    451|                                    return OpCode::LED;
  198|    451|                                }
  199|    600|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 388, False: 212]
  ------------------
  200|    388|                                {
  201|    388|                                    return OpCode::LEF;
  202|    388|                                }
  203|    212|                                break;
  204|       |
  205|    713|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 713, False: 5.11k]
  ------------------
  206|  1.26k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 548, False: 5.28k]
  ------------------
  207|  1.26k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 524, False: 737]
  ------------------
  208|    524|                                {
  209|    524|                                    return OpCode::LHI;
  210|    524|                                }
  211|    737|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 398, False: 339]
  ------------------
  212|    398|                                {
  213|    398|                                    return OpCode::LHU;
  214|    398|                                }
  215|    339|                                break;
  216|       |
  217|    339|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 246, False: 5.58k]
  ------------------
  218|  1.21k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 971, False: 4.85k]
  ------------------
  219|  1.21k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 429, False: 788]
  ------------------
  220|    429|                                {
  221|    429|                                    return OpCode::LTD;
  222|    429|                                }
  223|    788|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 513, False: 275]
  ------------------
  224|    513|                                {
  225|    513|                                    return OpCode::LTF;
  226|    513|                                }
  227|    275|                                break;
  228|       |
  229|    275|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 196, False: 5.63k]
  ------------------
  230|    594|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 398, False: 5.43k]
  ------------------
  231|    594|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 389, False: 205]
  ------------------
  232|    389|                                {
  233|    389|                                    return OpCode::LWU;
  234|    389|                                }
  235|    205|                                break;
  236|  5.83k|                        }
  237|  2.33k|                        break;
  238|       |
  239|  2.33k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 1.49k, False: 41.6k]
  ------------------
  240|  2.25k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 757, False: 42.3k]
  ------------------
  241|  2.25k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 1.21k, False: 1.03k]
  ------------------
  242|  1.21k|                        {
  243|  1.21k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 407, False: 810]
  ------------------
  244|    407|                            {
  245|    407|                                return OpCode::NED;
  246|    407|                            }
  247|    810|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 399, False: 411]
  ------------------
  248|    399|                            {
  249|    399|                                return OpCode::NEF;
  250|    399|                            }
  251|  1.21k|                        }
  252|  1.03k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 603, False: 436]
  |  Branch (252:34): [True: 397, False: 642]
  |  Branch (252:50): [True: 397, False: 206]
  ------------------
  253|    397|                        {
  254|    397|                            return OpCode::NOP;
  255|    397|                        }
  256|       |
  257|  1.05k|                        break;
  258|       |
  259|  1.05k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 492, False: 42.6k]
  ------------------
  260|  1.17k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 686, False: 42.4k]
  ------------------
  261|  1.17k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 650, False: 528]
  |  Branch (261:29): [True: 396, False: 782]
  |  Branch (261:45): [True: 396, False: 254]
  ------------------
  262|    396|                        {
  263|    396|                            return OpCode::ORI;
  264|    396|                        }
  265|    782|                        break;
  266|       |
  267|  6.77k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 6.77k, False: 36.3k]
  ------------------
  268|  10.0k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 3.23k, False: 39.9k]
  ------------------
  269|  10.0k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 850, False: 9.15k]
  ------------------
  270|  10.0k|                        {
  271|    416|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 416, False: 9.58k]
  ------------------
  272|    842|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 426, False: 9.57k]
  ------------------
  273|    842|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 389, False: 453]
  ------------------
  274|    389|                                {
  275|    389|                                    return OpCode::SBU;
  276|    389|                                }
  277|    453|                                break;
  278|       |
  279|    463|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 463, False: 9.54k]
  ------------------
  280|    766|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 303, False: 9.70k]
  ------------------
  281|    766|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 423, False: 343]
  ------------------
  282|    423|                                {
  283|    423|                                    return OpCode::SEQ;
  284|    423|                                }
  285|    343|                                break;
  286|       |
  287|    953|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 953, False: 9.05k]
  ------------------
  288|  1.25k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 299, False: 9.70k]
  ------------------
  289|  1.25k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 402, False: 850]
  ------------------
  290|    402|                                {
  291|    402|                                    return OpCode::SGE;
  292|    402|                                }
  293|    850|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 464, False: 386]
  ------------------
  294|    464|                                {
  295|    464|                                    return OpCode::SGT;
  296|    464|                                }
  297|    386|                                break;
  298|       |
  299|    386|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 202, False: 9.80k]
  ------------------
  300|    644|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 442, False: 9.56k]
  ------------------
  301|    644|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 432, False: 212]
  ------------------
  302|    432|                                {
  303|    432|                                    return OpCode::SHU;
  304|    432|                                }
  305|    212|                                break;
  306|       |
  307|  1.30k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 1.30k, False: 8.70k]
  ------------------
  308|  2.36k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 1.05k, False: 8.94k]
  ------------------
  309|  2.36k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 371, False: 1.98k]
  ------------------
  310|  2.36k|                                {
  311|    265|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 265, False: 2.09k]
  ------------------
  312|    468|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 203, False: 2.15k]
  ------------------
  313|    468|                                        return OpCode::SLA;
  314|       |
  315|    196|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 196, False: 2.16k]
  ------------------
  316|    392|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 196, False: 2.16k]
  ------------------
  317|    392|                                        return OpCode::SLE;
  318|       |
  319|    237|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 237, False: 2.12k]
  ------------------
  320|    684|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 447, False: 1.91k]
  ------------------
  321|    684|                                        return OpCode::SLL;
  322|       |
  323|    203|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 203, False: 2.15k]
  ------------------
  324|    445|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 242, False: 2.11k]
  ------------------
  325|    445|                                        return OpCode::SLT;
  326|  2.36k|                                }
  327|    371|                                break;
  328|       |
  329|    484|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 484, False: 9.52k]
  ------------------
  330|    702|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 218, False: 9.78k]
  ------------------
  331|    702|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 404, False: 298]
  ------------------
  332|    404|                                {
  333|    404|                                    return OpCode::SNE;
  334|    404|                                }
  335|    298|                                break;
  336|       |
  337|    298|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 232, False: 9.77k]
  ------------------
  338|    966|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 734, False: 9.27k]
  ------------------
  339|    966|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 405, False: 561]
  ------------------
  340|    405|                                {
  341|    405|                                    return OpCode::SRA;
  342|    405|                                }
  343|    561|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 335, False: 226]
  ------------------
  344|    335|                                {
  345|    335|                                    return OpCode::SRL;
  346|    335|                                }
  347|    226|                                break;
  348|       |
  349|    470|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 470, False: 9.53k]
  ------------------
  350|    836|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 366, False: 9.63k]
  ------------------
  351|    836|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 519, False: 317]
  ------------------
  352|    519|                                {
  353|    519|                                    return OpCode::SUB;
  354|    519|                                }
  355|    317|                                break;
  356|       |
  357|    545|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 545, False: 9.46k]
  ------------------
  358|    787|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 242, False: 9.76k]
  ------------------
  359|    787|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 410, False: 377]
  ------------------
  360|    410|                                {
  361|    410|                                    return OpCode::SWU;
  362|    410|                                }
  363|    377|                                break;
  364|  10.0k|                        }
  365|       |
  366|  4.34k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 510, False: 42.6k]
  ------------------
  367|  4.73k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 390, False: 42.7k]
  ------------------
  368|  4.73k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 826, False: 3.90k]
  |  Branch (368:29): [True: 400, False: 4.33k]
  |  Branch (368:45): [True: 400, False: 426]
  ------------------
  369|    400|                        {
  370|    400|                            return OpCode::XOR;
  371|    400|                        }
  372|  4.33k|                        break;
  373|  43.1k|                }
  374|  27.6k|                break;
  375|  43.1k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|  43.6k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 43.6k, False: 157k]
  ------------------
  379|  43.6k|                char c1 = token[0];
  380|  43.6k|                char c2 = token[1];
  381|  43.6k|                char c3 = token[2];
  382|  43.6k|                char c4 = token[3];
  383|       |
  384|  43.6k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 11.7k, False: 31.9k]
  ------------------
  385|  43.6k|                {
  386|  2.91k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 2.91k, False: 40.7k]
  ------------------
  387|  3.49k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 578, False: 43.0k]
  ------------------
  388|  3.49k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 366, False: 3.12k]
  ------------------
  389|  3.49k|                        {
  390|  1.24k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 1.24k, False: 2.24k]
  ------------------
  391|  2.10k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 857, False: 2.63k]
  ------------------
  392|  2.10k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 1.85k, False: 247]
  ------------------
  393|  1.85k|                                {
  394|  1.85k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 371, False: 1.48k]
  ------------------
  395|  1.85k|                                    {
  396|    195|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 195, False: 1.66k]
  ------------------
  397|    389|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 194, False: 1.66k]
  ------------------
  398|    389|                                            return OpCode::ADDD;
  399|       |
  400|    202|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 202, False: 1.65k]
  ------------------
  401|    396|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 194, False: 1.66k]
  ------------------
  402|    396|                                            return OpCode::ADDF;
  403|       |
  404|    196|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 196, False: 1.66k]
  ------------------
  405|    262|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 66, False: 1.79k]
  ------------------
  406|    262|                                            return OpCode::ADDI;
  407|       |
  408|    246|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 246, False: 1.61k]
  ------------------
  409|    440|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 194, False: 1.66k]
  ------------------
  410|    440|                                            return OpCode::ADDU;
  411|  1.85k|                                    }
  412|  1.85k|                                }
  413|    618|                                break;
  414|       |
  415|    786|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 786, False: 2.70k]
  ------------------
  416|  1.02k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 234, False: 3.25k]
  ------------------
  417|  1.02k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 781, False: 239]
  |  Branch (417:37): [True: 262, False: 758]
  |  Branch (417:53): [True: 262, False: 519]
  ------------------
  418|    262|                                {
  419|    262|                                    return OpCode::ANDI;
  420|    262|                                }
  421|       |
  422|    758|                                break;
  423|  3.49k|                        }
  424|  1.74k|                        break;
  425|       |
  426|  2.91k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 2.91k, False: 40.7k]
  ------------------
  427|  3.14k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 231, False: 43.4k]
  ------------------
  428|  3.14k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 402, False: 2.73k]
  ------------------
  429|  3.14k|                        {
  430|    397|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 397, False: 2.74k]
  ------------------
  431|    735|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 338, False: 2.80k]
  ------------------
  432|    735|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 509, False: 226]
  |  Branch (432:37): [True: 262, False: 473]
  |  Branch (432:53): [True: 262, False: 247]
  ------------------
  433|    262|                                {
  434|    262|                                    return OpCode::BEQZ;
  435|    262|                                }
  436|    473|                                break;
  437|       |
  438|  1.01k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 1.01k, False: 2.12k]
  ------------------
  439|  1.21k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 200, False: 2.94k]
  ------------------
  440|  1.21k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 1.00k, False: 218]
  ------------------
  441|  1.00k|                                {
  442|  1.00k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 388, False: 613]
  ------------------
  443|    388|                                    {
  444|    388|                                        return OpCode::BFPF;
  445|    388|                                    }
  446|    613|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 388, False: 225]
  ------------------
  447|    388|                                    {
  448|    388|                                        return OpCode::BFPT;
  449|    388|                                    }
  450|  1.00k|                                }
  451|    443|                                break;
  452|       |
  453|    443|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 393, False: 2.74k]
  ------------------
  454|    785|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 392, False: 2.74k]
  ------------------
  455|    785|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 589, False: 196]
  |  Branch (455:37): [True: 393, False: 392]
  |  Branch (455:53): [True: 393, False: 196]
  ------------------
  456|    393|                                {
  457|    393|                                    return OpCode::BNEZ;
  458|    393|                                }
  459|  3.14k|                        }
  460|  1.71k|                        break;
  461|       |
  462|  1.71k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 707, False: 42.9k]
  ------------------
  463|  2.56k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 1.85k, False: 41.8k]
  ------------------
  464|  2.56k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 2.24k, False: 315]
  |  Branch (464:29): [True: 1.94k, False: 611]
  |  Branch (464:45): [True: 1.94k, False: 296]
  ------------------
  465|  1.94k|                        {
  466|  1.94k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 515, False: 1.43k]
  ------------------
  467|  1.94k|                            {
  468|    194|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 194, False: 1.75k]
  ------------------
  469|    388|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 194, False: 1.75k]
  ------------------
  470|    388|                                    return OpCode::DIVD;
  471|       |
  472|    194|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 194, False: 1.75k]
  ------------------
  473|    388|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 194, False: 1.75k]
  ------------------
  474|    388|                                    return OpCode::DIVF;
  475|       |
  476|    194|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 194, False: 1.75k]
  ------------------
  477|    260|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 66, False: 1.88k]
  ------------------
  478|    260|                                    return OpCode::DIVI;
  479|       |
  480|    202|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 202, False: 1.74k]
  ------------------
  481|    398|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 196, False: 1.75k]
  ------------------
  482|    398|                                    return OpCode::DIVU;
  483|  1.94k|                            }
  484|  1.94k|                        }
  485|  1.12k|                        break;
  486|       |
  487|  1.12k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 741, False: 42.9k]
  ------------------
  488|  1.40k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 665, False: 42.9k]
  ------------------
  489|  1.40k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 1.14k, False: 261]
  |  Branch (489:29): [True: 390, False: 1.01k]
  |  Branch (489:45): [True: 743, False: 402]
  |  Branch (489:61): [True: 390, False: 353]
  ------------------
  490|    390|                        {
  491|    390|                            return OpCode::HALT;
  492|    390|                        }
  493|  1.01k|                        break;
  494|       |
  495|  1.32k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 1.32k, False: 42.3k]
  ------------------
  496|  1.75k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 434, False: 43.2k]
  ------------------
  497|  1.75k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 1.03k, False: 722]
  |  Branch (497:29): [True: 392, False: 1.36k]
  |  Branch (497:45): [True: 818, False: 215]
  |  Branch (497:61): [True: 392, False: 426]
  ------------------
  498|    392|                        {
  499|    392|                            return OpCode::JALR;
  500|    392|                        }
  501|  1.36k|                        break;
  502|       |
  503|  1.36k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 636, False: 43.0k]
  ------------------
  504|  2.40k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 1.76k, False: 41.8k]
  ------------------
  505|  2.40k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 1.25k, False: 1.15k]
  |  Branch (505:29): [True: 1.03k, False: 1.37k]
  |  Branch (505:45): [True: 1.03k, False: 219]
  ------------------
  506|  1.03k|                        {
  507|  1.03k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 394, False: 638]
  ------------------
  508|    394|                            {
  509|    394|                                return OpCode::MOVD;
  510|    394|                            }
  511|    638|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 395, False: 243]
  ------------------
  512|    395|                            {
  513|    395|                                return OpCode::MOVF;
  514|    395|                            }
  515|  1.03k|                        }
  516|  1.37k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 1.00k, False: 366]
  |  Branch (516:34): [True: 401, False: 972]
  |  Branch (516:50): [True: 653, False: 354]
  |  Branch (516:66): [True: 401, False: 252]
  ------------------
  517|    401|                        {
  518|    401|                            return OpCode::MULT;
  519|    401|                        }
  520|  1.21k|                        break;
  521|       |
  522|  10.6k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 10.6k, False: 32.9k]
  ------------------
  523|  14.7k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 4.05k, False: 39.5k]
  ------------------
  524|  14.7k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 1.12k, False: 13.6k]
  ------------------
  525|  14.7k|                        {
  526|    534|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 534, False: 14.2k]
  ------------------
  527|  1.49k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 959, False: 13.7k]
  ------------------
  528|  1.49k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 1.03k, False: 459]
  ------------------
  529|  1.03k|                                {
  530|  1.03k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 394, False: 640]
  ------------------
  531|    394|                                    {
  532|    394|                                        return OpCode::SEQI;
  533|    394|                                    }
  534|    640|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 400, False: 240]
  ------------------
  535|    400|                                    {
  536|    400|                                        return OpCode::SEQU;
  537|    400|                                    }
  538|  1.03k|                                }
  539|    699|                                break;
  540|       |
  541|  2.34k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 2.34k, False: 12.3k]
  ------------------
  542|  2.61k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 261, False: 14.4k]
  ------------------
  543|  2.61k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 1.22k, False: 1.38k]
  ------------------
  544|  1.22k|                                {
  545|  1.22k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 388, False: 840]
  ------------------
  546|    388|                                    {
  547|    388|                                        return OpCode::SGEI;
  548|    388|                                    }
  549|    840|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 399, False: 441]
  ------------------
  550|    399|                                    {
  551|    399|                                        return OpCode::SGEU;
  552|    399|                                    }
  553|  1.22k|                                }
  554|  1.38k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 1.11k, False: 271]
  ------------------
  555|  1.11k|                                {
  556|  1.11k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 389, False: 722]
  ------------------
  557|    389|                                    {
  558|    389|                                        return OpCode::SGTI;
  559|    389|                                    }
  560|    722|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 391, False: 331]
  ------------------
  561|    391|                                    {
  562|    391|                                        return OpCode::SGTU;
  563|    391|                                    }
  564|  1.11k|                                }
  565|  1.04k|                                break;
  566|       |
  567|  2.51k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 2.51k, False: 12.2k]
  ------------------
  568|  4.09k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 1.58k, False: 13.1k]
  ------------------
  569|  4.09k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 298, False: 3.79k]
  ------------------
  570|  4.09k|                                {
  571|    404|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 404, False: 3.69k]
  ------------------
  572|    598|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 194, False: 3.90k]
  ------------------
  573|    598|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 388, False: 210]
  ------------------
  574|    388|                                        {
  575|    388|                                            return OpCode::SLAI;
  576|    388|                                        }
  577|    210|                                        break;
  578|       |
  579|    263|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 263, False: 3.83k]
  ------------------
  580|  1.05k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 790, False: 3.30k]
  ------------------
  581|  1.05k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 268, False: 785]
  ------------------
  582|    268|                                        {
  583|    268|                                            return OpCode::SLEI;
  584|    268|                                        }
  585|    785|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 391, False: 394]
  ------------------
  586|    391|                                        {
  587|    391|                                            return OpCode::SLEU;
  588|    391|                                        }
  589|    394|                                        break;
  590|       |
  591|    570|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 570, False: 3.52k]
  ------------------
  592|    908|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 338, False: 3.75k]
  ------------------
  593|    908|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 511, False: 397]
  ------------------
  594|    511|                                        {
  595|    511|                                            return OpCode::SLLI;
  596|    511|                                        }
  597|    397|                                        break;
  598|       |
  599|    397|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 366, False: 3.72k]
  ------------------
  600|  1.23k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 872, False: 3.22k]
  ------------------
  601|  1.23k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 388, False: 850]
  ------------------
  602|    388|                                        {
  603|    388|                                            return OpCode::SLTI;
  604|    388|                                        }
  605|    850|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 437, False: 413]
  ------------------
  606|    437|                                        {
  607|    437|                                            return OpCode::SLTU;
  608|    437|                                        }
  609|    413|                                        break;
  610|  4.09k|                                }
  611|       |
  612|  2.75k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 1.03k, False: 13.6k]
  ------------------
  613|  3.11k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 366, False: 14.3k]
  ------------------
  614|  3.11k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 1.58k, False: 1.53k]
  ------------------
  615|  1.58k|                                {
  616|  1.58k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 388, False: 1.19k]
  ------------------
  617|    388|                                    {
  618|    388|                                        return OpCode::SNEI;
  619|    388|                                    }
  620|  1.19k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 262, False: 931]
  ------------------
  621|    262|                                    {
  622|    262|                                        return OpCode::SNEU;
  623|    262|                                    }
  624|  1.58k|                                }
  625|  2.46k|                                break;
  626|       |
  627|  2.46k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 329, False: 14.4k]
  ------------------
  628|  1.55k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 1.22k, False: 13.5k]
  ------------------
  629|  1.55k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 758, False: 799]
  |  Branch (629:37): [True: 388, False: 1.16k]
  |  Branch (629:53): [True: 388, False: 370]
  ------------------
  630|    388|                                {
  631|    388|                                    return OpCode::SRAI;
  632|    388|                                }
  633|  1.16k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 662, False: 507]
  |  Branch (633:42): [True: 456, False: 713]
  |  Branch (633:58): [True: 456, False: 206]
  ------------------
  634|    456|                                {
  635|    456|                                    return OpCode::SRLI;
  636|    456|                                }
  637|    713|                                break;
  638|       |
  639|  1.11k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 1.11k, False: 13.6k]
  ------------------
  640|  2.45k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 1.34k, False: 13.3k]
  ------------------
  641|  2.45k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 2.12k, False: 336]
  ------------------
  642|  2.12k|                                {
  643|  2.12k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 533, False: 1.58k]
  ------------------
  644|  2.12k|                                    {
  645|    202|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 202, False: 1.91k]
  ------------------
  646|    396|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 194, False: 1.92k]
  ------------------
  647|    396|                                            return OpCode::SUBD;
  648|       |
  649|     66|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 66, False: 2.05k]
  ------------------
  650|    265|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 199, False: 1.92k]
  ------------------
  651|    265|                                            return OpCode::SUBF;
  652|       |
  653|    194|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 194, False: 1.92k]
  ------------------
  654|    389|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 195, False: 1.92k]
  ------------------
  655|    389|                                            return OpCode::SUBI;
  656|       |
  657|    227|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 227, False: 1.89k]
  ------------------
  658|    537|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 310, False: 1.81k]
  ------------------
  659|    537|                                            return OpCode::SUBU;
  660|  2.12k|                                    }
  661|  2.12k|                                }
  662|    869|                                break;
  663|  14.7k|                        }
  664|  6.91k|                        break;
  665|       |
  666|  6.91k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 996, False: 42.6k]
  ------------------
  667|  1.33k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 337, False: 43.3k]
  ------------------
  668|  1.33k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 926, False: 407]
  |  Branch (668:29): [True: 388, False: 945]
  |  Branch (668:45): [True: 669, False: 257]
  |  Branch (668:61): [True: 388, False: 281]
  ------------------
  669|    388|                        {
  670|    388|                            return OpCode::TRAP;
  671|    388|                        }
  672|    945|                        break;
  673|    945|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 888, False: 42.7k]
  ------------------
  674|  1.12k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 237, False: 43.4k]
  ------------------
  675|  1.12k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 828, False: 297]
  |  Branch (675:29): [True: 389, False: 736]
  |  Branch (675:45): [True: 623, False: 205]
  |  Branch (675:61): [True: 389, False: 234]
  ------------------
  676|    389|                        {
  677|    389|                            return OpCode::XORI;
  678|    389|                        }
  679|    736|                        break;
  680|  43.6k|                }
  681|  28.4k|                break;
  682|  43.6k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  28.4k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 24.2k, False: 176k]
  ------------------
  686|  24.2k|                char c1 = token[0];
  687|  24.2k|                char c2 = token[1];
  688|  24.2k|                char c3 = token[2];
  689|  24.2k|                char c4 = token[3];
  690|  24.2k|                char c5 = token[4];
  691|       |
  692|  24.2k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 8.07k, False: 16.1k]
  ------------------
  693|  24.2k|                {
  694|  1.17k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 1.17k, False: 23.0k]
  ------------------
  695|  1.58k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 404, False: 23.8k]
  ------------------
  696|  1.58k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 1.21k, False: 372]
  |  Branch (696:29): [True: 260, False: 1.32k]
  |  Branch (696:45): [True: 922, False: 288]
  |  Branch (696:61): [True: 786, False: 136]
  |  Branch (696:77): [True: 260, False: 526]
  ------------------
  697|    260|                        {
  698|    260|                            return OpCode::ADDUI;
  699|    260|                        }
  700|  1.32k|                        break;
  701|       |
  702|  1.32k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 410, False: 23.8k]
  ------------------
  703|  1.84k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 1.43k, False: 22.8k]
  ------------------
  704|  1.84k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 1.58k, False: 258]
  |  Branch (704:29): [True: 260, False: 1.58k]
  |  Branch (704:45): [True: 1.37k, False: 204]
  |  Branch (704:61): [True: 656, False: 722]
  |  Branch (704:77): [True: 260, False: 396]
  ------------------
  705|    260|                        {
  706|    260|                            return OpCode::DIVUI;
  707|    260|                        }
  708|  1.58k|                        break;
  709|       |
  710|  1.58k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 1.40k, False: 22.8k]
  ------------------
  711|  3.12k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 1.72k, False: 22.5k]
  ------------------
  712|  3.12k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 2.51k, False: 611]
  |  Branch (712:29): [True: 1.78k, False: 1.33k]
  |  Branch (712:45): [True: 2.02k, False: 489]
  |  Branch (712:61): [True: 1.78k, False: 233]
  ------------------
  713|  1.78k|                        {
  714|  1.78k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 216, False: 1.57k]
  ------------------
  715|  1.78k|                            {
  716|    194|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 194, False: 1.59k]
  ------------------
  717|    388|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 194, False: 1.59k]
  ------------------
  718|    388|                                    return OpCode::MULTD;
  719|       |
  720|    195|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 195, False: 1.59k]
  ------------------
  721|    405|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 210, False: 1.57k]
  ------------------
  722|    405|                                    return OpCode::MULTF;
  723|       |
  724|    195|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 195, False: 1.59k]
  ------------------
  725|    389|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 194, False: 1.59k]
  ------------------
  726|    389|                                    return OpCode::MULTI;
  727|       |
  728|    194|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 194, False: 1.59k]
  ------------------
  729|    390|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 196, False: 1.59k]
  ------------------
  730|    390|                                    return OpCode::MULTU;
  731|  1.78k|                            }
  732|  1.78k|                        }
  733|  1.54k|                        break;
  734|       |
  735|  5.86k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 5.86k, False: 18.3k]
  ------------------
  736|  9.64k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 3.77k, False: 20.4k]
  ------------------
  737|  9.64k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 851, False: 8.79k]
  ------------------
  738|  9.64k|                        {
  739|    459|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 459, False: 9.18k]
  ------------------
  740|  1.36k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 907, False: 8.73k]
  ------------------
  741|  1.36k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 1.00k, False: 364]
  |  Branch (741:37): [True: 392, False: 974]
  |  Branch (741:53): [True: 774, False: 228]
  |  Branch (741:69): [True: 392, False: 382]
  ------------------
  742|    392|                                {
  743|    392|                                    return OpCode::SEQUI;
  744|    392|                                }
  745|    974|                                break;
  746|       |
  747|  1.48k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 1.48k, False: 8.15k]
  ------------------
  748|  1.71k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 235, False: 9.40k]
  ------------------
  749|  1.71k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 806, False: 911]
  |  Branch (749:37): [True: 388, False: 1.32k]
  |  Branch (749:53): [True: 584, False: 222]
  |  Branch (749:69): [True: 388, False: 196]
  ------------------
  750|    388|                                {
  751|    388|                                    return OpCode::SGEUI;
  752|    388|                                }
  753|  1.32k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 739, False: 590]
  |  Branch (753:42): [True: 132, False: 1.19k]
  |  Branch (753:58): [True: 331, False: 408]
  |  Branch (753:74): [True: 132, False: 199]
  ------------------
  754|    132|                                {
  755|    132|                                    return OpCode::SGTUI;
  756|    132|                                }
  757|  1.19k|                                break;
  758|       |
  759|  1.31k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 1.31k, False: 8.32k]
  ------------------
  760|  2.26k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 953, False: 8.68k]
  ------------------
  761|  2.26k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 772, False: 1.49k]
  |  Branch (761:37): [True: 264, False: 2.00k]
  |  Branch (761:53): [True: 541, False: 231]
  |  Branch (761:69): [True: 264, False: 277]
  ------------------
  762|    264|                                {
  763|    264|                                    return OpCode::SLEUI;
  764|    264|                                }
  765|  2.00k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 894, False: 1.10k]
  |  Branch (765:42): [True: 389, False: 1.61k]
  |  Branch (765:58): [True: 592, False: 302]
  |  Branch (765:74): [True: 389, False: 203]
  ------------------
  766|    389|                                {
  767|    389|                                    return OpCode::SLTUI;
  768|    389|                                }
  769|  1.61k|                                break;
  770|       |
  771|  1.61k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 510, False: 9.13k]
  ------------------
  772|  1.20k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 690, False: 8.95k]
  ------------------
  773|  1.20k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 984, False: 216]
  |  Branch (773:37): [True: 344, False: 856]
  |  Branch (773:53): [True: 590, False: 394]
  |  Branch (773:69): [True: 344, False: 246]
  ------------------
  774|    344|                                {
  775|    344|                                    return OpCode::SNEUI;
  776|    344|                                }
  777|    856|                                break;
  778|       |
  779|    856|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 775, False: 8.86k]
  ------------------
  780|  2.24k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 1.46k, False: 8.17k]
  ------------------
  781|  2.24k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 1.93k, False: 307]
  |  Branch (781:37): [True: 260, False: 1.98k]
  |  Branch (781:53): [True: 756, False: 1.17k]
  |  Branch (781:69): [True: 260, False: 496]
  ------------------
  782|    260|                                {
  783|    260|                                    return OpCode::SUBUI;
  784|    260|                                }
  785|  1.98k|                                break;
  786|  9.64k|                        }
  787|       |
  788|  7.47k|                        break;
  789|  24.2k|                }
  790|       |
  791|  19.9k|                break;
  792|  24.2k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  19.9k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 10.7k, False: 190k]
  ------------------
  796|  10.7k|                char c1 = token[0];
  797|  10.7k|                char c2 = token[1];
  798|  10.7k|                char c3 = token[2];
  799|  10.7k|                char c4 = token[3];
  800|  10.7k|                char c5 = token[4];
  801|  10.7k|                char c6 = token[5];
  802|       |
  803|  10.7k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 2.98k, False: 7.80k]
  |  Branch (803:21): [True: 2.37k, False: 8.41k]
  |  Branch (803:37): [True: 2.75k, False: 235]
  |  Branch (803:53): [True: 2.37k, False: 377]
  ------------------
  804|  2.37k|                {
  805|  2.37k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 262, False: 2.11k]
  ------------------
  806|  2.37k|                    {
  807|    600|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 600, False: 1.77k]
  ------------------
  808|    666|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 66, False: 2.30k]
  ------------------
  809|    666|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 578, False: 88]
  ------------------
  810|    578|                            {
  811|    578|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 132, False: 446]
  ------------------
  812|    132|                                {
  813|    132|                                    return OpCode::CVTD2F;
  814|    132|                                }
  815|    446|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 378, False: 68]
  ------------------
  816|    378|                                {
  817|    378|                                    return OpCode::CVTD2I;
  818|    378|                                }
  819|    578|                            }
  820|    156|                            break;
  821|       |
  822|    655|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 655, False: 1.72k]
  ------------------
  823|    723|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 68, False: 2.30k]
  ------------------
  824|    723|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 464, False: 259]
  ------------------
  825|    464|                            {
  826|    464|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 260, False: 204]
  ------------------
  827|    260|                                {
  828|    260|                                    return OpCode::CVTF2D;
  829|    260|                                }
  830|    204|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 136, False: 68]
  ------------------
  831|    136|                                {
  832|    136|                                    return OpCode::CVTF2I;
  833|    136|                                }
  834|    464|                            }
  835|    327|                            break;
  836|       |
  837|    327|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 196, False: 2.17k]
  ------------------
  838|    724|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 528, False: 1.84k]
  ------------------
  839|    724|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 342, False: 382]
  ------------------
  840|    342|                            {
  841|    342|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 133, False: 209]
  ------------------
  842|    133|                                {
  843|    133|                                    return OpCode::CVTI2D;
  844|    133|                                }
  845|    209|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 132, False: 77]
  ------------------
  846|    132|                                {
  847|    132|                                    return OpCode::CVTI2F;
  848|    132|                                }
  849|    342|                            }
  850|  2.37k|                    }
  851|  2.37k|                }
  852|  8.41k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 2.42k, False: 5.99k]
  |  Branch (852:26): [True: 389, False: 8.03k]
  |  Branch (852:42): [True: 1.76k, False: 661]
  |  Branch (852:58): [True: 1.43k, False: 335]
  |  Branch (852:74): [True: 1.21k, False: 212]
  ------------------
  853|  8.41k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 774, False: 444]
  |  Branch (853:42): [True: 389, False: 385]
  ------------------
  854|    389|                {
  855|    389|                    return OpCode::MULTUI;
  856|    389|                }
  857|  9.23k|                break;
  858|  10.7k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  9.23k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 5.97k, False: 195k]
  ------------------
  862|  5.97k|                char c1 = token[0];
  863|  5.97k|                char c2 = token[1];
  864|  5.97k|                char c3 = token[2];
  865|  5.97k|                char c4 = token[3];
  866|  5.97k|                char c5 = token[4];
  867|  5.97k|                char c6 = token[5];
  868|  5.97k|                char c7 = token[6];
  869|       |
  870|  5.97k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 2.30k, False: 3.67k]
  |  Branch (870:21): [True: 1.75k, False: 4.21k]
  |  Branch (870:37): [True: 1.96k, False: 341]
  |  Branch (870:53): [True: 1.75k, False: 205]
  ------------------
  871|  1.75k|                {
  872|  1.75k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 1.03k, False: 723]
  |  Branch (872:25): [True: 388, False: 1.36k]
  |  Branch (872:41): [True: 793, False: 241]
  |  Branch (872:54): [True: 599, False: 194]
  |  Branch (872:70): [True: 388, False: 211]
  ------------------
  873|    388|                    {
  874|    388|                        return OpCode::MOVI2FP;
  875|    388|                    }
  876|  1.36k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 651, False: 718]
  |  Branch (876:30): [True: 132, False: 1.23k]
  |  Branch (876:46): [True: 451, False: 200]
  |  Branch (876:62): [True: 198, False: 253]
  |  Branch (876:75): [True: 132, False: 66]
  ------------------
  877|    132|                    {
  878|    132|                        return OpCode::MOVFP2I;
  879|    132|                    }
  880|  1.75k|                }
  881|  5.45k|                break;
  882|  5.97k|            }
  883|       |
  884|  6.77k|            default: {
  ------------------
  |  Branch (884:13): [True: 6.77k, False: 194k]
  ------------------
  885|  6.77k|                break;
  886|  5.97k|            }
  887|   201k|        }
  888|       |
  889|       |        // None found
  890|   149k|        return OpCode::NONE;
  891|   201k|    }
_ZN3dlx3iceEcc:
   17|   243k|    {
   18|   243k|        constexpr const char diff = 'a' - 'A';
   19|   243k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 66.3k, False: 177k]
  |  Branch (19:28): [True: 58.0k, False: 119k]
  ------------------
   20|   243k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   209k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  2.13k|    {
  193|  2.13k|        ParseError err;
  194|       |
  195|  2.13k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  2.13k|        err.m_LineNumber                           = line_number;
  197|  2.13k|        err.m_Column                               = column;
  198|  2.13k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  2.13k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  2.13k|        return err;
  202|  2.13k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  2.13k|    {
  207|  2.13k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  2.13k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  2.13k|                                                         actual_type);
  210|  2.13k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    198|    {
  216|    198|        ParseError err;
  217|       |
  218|    198|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    198|        err.m_LineNumber        = line_number;
  220|    198|        err.m_Column            = column;
  221|    198|        err.invalid_number.text = text;
  222|       |
  223|    198|        return err;
  224|    198|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    198|    {
  228|    198|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    198|                                                token.GetColumn().unsafe(), token.GetText());
  230|    198|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      7|    {
  235|      7|        ParseError err;
  236|       |
  237|      7|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      7|        err.m_LineNumber = line_number;
  239|      7|        err.m_Column     = column;
  240|       |
  241|      7|        return err;
  242|      7|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      7|    {
  247|      7|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      7|                                                                     token.GetColumn().unsafe());
  249|      7|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|  94.1k|    {
  255|  94.1k|        ParseError err;
  256|       |
  257|  94.1k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|  94.1k|        err.m_LineNumber                   = line_number;
  259|  94.1k|        err.m_Column                       = column;
  260|  94.1k|        err.unexpected_token.expected_type = expected_type;
  261|  94.1k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|  94.1k|        return err;
  264|  94.1k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|  94.1k|    {
  269|  94.1k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|  94.1k|                                                  token.GetColumn().unsafe(), expected_type,
  271|  94.1k|                                                  token.GetType());
  272|  94.1k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  18.8k|    {
  277|  18.8k|        ParseError err;
  278|       |
  279|  18.8k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  18.8k|        err.m_LineNumber                   = line_number;
  281|  18.8k|        err.m_Column                       = column;
  282|  18.8k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  18.8k|        return err;
  285|  18.8k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|     68|    {
  289|     68|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|     68|                                                    token.GetColumn().unsafe(), token.GetText());
  291|     68|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|  49.0k|    {
  296|  49.0k|        ParseError err;
  297|       |
  298|  49.0k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|  49.0k|        err.m_LineNumber                       = line_number;
  300|  49.0k|        err.m_Column                           = column;
  301|  49.0k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|  49.0k|        return err;
  304|  49.0k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|  49.0k|    {
  309|  49.0k|        return ConstructInvalidLabelIdentifierParseError(
  310|  49.0k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|  49.0k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  13.7k|    {
  317|  13.7k|        ParseError err;
  318|       |
  319|  13.7k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  13.7k|        err.m_LineNumber                     = line_number;
  321|  13.7k|        err.m_Column                         = column;
  322|  13.7k|        err.label_already_defined.label_name = label_name;
  323|  13.7k|        err.label_already_defined.at_line    = at_line;
  324|  13.7k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  13.7k|        return err;
  327|  13.7k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  13.7k|    {
  332|  13.7k|        return ConstructLabelAlreadyDefinedParseError(
  333|  13.7k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  13.7k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  13.7k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|  17.7k|    {
  340|  17.7k|        ParseError err;
  341|       |
  342|  17.7k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|  17.7k|        err.m_LineNumber = line_number;
  344|  17.7k|        err.m_Column     = column;
  345|       |
  346|  17.7k|        return err;
  347|  17.7k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|  17.7k|    {
  352|  17.7k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|  17.7k|                                                        token.GetColumn().unsafe());
  354|  17.7k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  5.75k|    {
  360|  5.75k|        ParseError err;
  361|       |
  362|  5.75k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  5.75k|        err.m_LineNumber               = line_number;
  364|  5.75k|        err.m_Column                   = column;
  365|  5.75k|        err.too_few_arguments.required = required;
  366|  5.75k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  5.75k|        return err;
  369|  5.75k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  5.75k|    {
  374|  5.75k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  5.75k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  5.75k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  4.03k|    {
  381|  4.03k|        ParseError err;
  382|       |
  383|  4.03k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  4.03k|        err.m_LineNumber           = line_number;
  385|  4.03k|        err.m_Column               = column;
  386|  4.03k|        err.empty_label.label_name = label_name;
  387|       |
  388|  4.03k|        return err;
  389|  4.03k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  4.03k|    {
  393|  4.03k|        return ConstructEmptyLabelParseError(
  394|  4.03k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  4.03k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 3.16k, False: 876]
  ------------------
  396|  3.16k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  4.03k|                        token.GetText());
  398|  4.03k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  4.28k|    {
  403|  4.28k|        ParseError err;
  404|       |
  405|  4.28k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  4.28k|        err.m_LineNumber = line_number;
  407|  4.28k|        err.m_Column     = column;
  408|       |
  409|  4.28k|        return err;
  410|  4.28k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  4.28k|    {
  414|  4.28k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  4.28k|                                               token.GetColumn().unsafe());
  416|  4.28k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   209k|    {
   19|   209k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   209k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  4.10k|    {
  182|  4.10k|        ParsedProgram program;
  183|       |
  184|  4.10k|        program.m_Tokens = tokens;
  185|       |
  186|  4.10k|        phi::boolean line_has_instruction{false};
  187|  4.10k|        phi::usize   label_count{0u};
  188|       |
  189|   256k|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 252k, False: 4.10k]
  ------------------
  190|   252k|        {
  191|   252k|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|   252k|            switch (current_token.GetType())
  196|   252k|            {
  197|       |                // Ignore comments
  198|  1.48k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 1.48k, False: 251k]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  1.48k|                    break;
  201|       |
  202|  42.0k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 42.0k, False: 210k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|  42.0k|                    line_has_instruction = false;
  205|  42.0k|                    break;
  206|       |
  207|   103k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 103k, False: 149k]
  ------------------
  208|   103k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 19.4k, False: 83.9k]
  ------------------
  209|  19.4k|                    {
  210|  19.4k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  19.4k|                                current_token, Token::Type::NewLine));
  212|  19.4k|                        break;
  213|  19.4k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|  83.9k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 30.9k, False: 52.9k]
  ------------------
  218|  30.9k|                    {
  219|  30.9k|                        program.AddParseError(
  220|  30.9k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|  30.9k|                        break;
  222|  30.9k|                    }
  223|       |
  224|  52.9k|                    std::string_view label_name = current_token.GetText();
  225|  52.9k|                    label_name.remove_suffix(1);
  226|       |
  227|  52.9k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 18.8k, False: 34.1k]
  ------------------
  228|  18.8k|                    {
  229|  18.8k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  18.8k|                                current_token.GetLineNumber().unsafe(),
  231|  18.8k|                                current_token.GetColumn().unsafe(), label_name));
  232|  18.8k|                        break;
  233|  18.8k|                    }
  234|       |
  235|  34.1k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 15.6k, False: 18.5k]
  ------------------
  236|  15.6k|                    {
  237|  15.6k|                        program.AddParseError(
  238|  15.6k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  15.6k|                        break;
  240|  15.6k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  18.5k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 13.7k, False: 4.79k]
  ------------------
  244|  13.7k|                    {
  245|       |                        // Find first defintions of label
  246|  13.7k|                        const Token* first_label_definition =
  247|  13.7k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  13.7k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  13.7k|                                    {
  250|  13.7k|                                        std::string_view token_label_name = t.GetText();
  251|  13.7k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  13.7k|                                        if (token_label_name == label_name)
  254|  13.7k|                                        {
  255|  13.7k|                                            return true;
  256|  13.7k|                                        }
  257|  13.7k|                                    }
  258|       |
  259|  13.7k|                                    return false;
  260|  13.7k|                                });
  261|       |
  262|  13.7k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  13.7k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  13.7k|                                current_token, *first_label_definition));
  266|  13.7k|                        break;
  267|  13.7k|                    }
  268|       |
  269|  4.79k|                    program.m_JumpData[label_name] =
  270|  4.79k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  4.79k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  4.79k|                    break;
  277|  18.5k|                }
  278|       |
  279|  34.0k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 34.0k, False: 218k]
  ------------------
  280|  34.0k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 17.7k, False: 16.2k]
  ------------------
  281|  17.7k|                    {
  282|  17.7k|                        program.AddParseError(
  283|  17.7k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|  17.7k|                        break;
  285|  17.7k|                    }
  286|       |
  287|  16.2k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  16.2k|                    PHI_ASSERT(current_token.HasHint());
  291|  16.2k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  16.2k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  16.2k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  16.2k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  16.2k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  16.2k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  16.2k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  16.2k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  16.2k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|  30.8k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 28.1k, False: 2.75k]
  ------------------
  313|  28.1k|                    {
  314|       |                        // Get next token
  315|  28.1k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 701, False: 27.4k]
  ------------------
  316|    701|                        {
  317|    701|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    701|                                    current_token, number_of_argument_required.unsafe(),
  319|    701|                                    argument_num.unsafe()));
  320|    701|                            break;
  321|    701|                        }
  322|       |
  323|  27.4k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|  27.4k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 11.0k, False: 16.4k]
  ------------------
  327|  11.0k|                        {
  328|  11.0k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 4.28k, False: 6.73k]
  ------------------
  329|  4.28k|                            {
  330|  4.28k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  4.28k|                            }
  332|       |
  333|  11.0k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  11.0k|                            continue;
  336|  11.0k|                        }
  337|       |
  338|  16.4k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 5.05k, False: 11.3k]
  ------------------
  339|  5.05k|                        {
  340|  5.05k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  5.05k|                                    token, number_of_argument_required.unsafe(),
  342|  5.05k|                                    argument_num.unsafe()));
  343|  5.05k|                            break;
  344|  5.05k|                        }
  345|       |
  346|  11.3k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  11.3k|                                parse_instruction_argument(
  348|  11.3k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  11.3k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 7.78k, False: 3.59k]
  ------------------
  350|  7.78k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  7.78k|                            break;
  353|  7.78k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  3.59k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  3.59k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  3.59k|                        argument_num++;
  360|  3.59k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  3.59k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  16.2k|                    program.m_Instructions.emplace_back(instruction);
  368|  16.2k|                    line_has_instruction = true;
  369|  16.2k|                    break;
  370|  34.0k|                }
  371|       |
  372|  71.8k|                default:
  ------------------
  |  Branch (372:17): [True: 71.8k, False: 180k]
  ------------------
  373|  71.8k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|  71.8k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 37.0k, False: 34.8k]
  ------------------
  375|  37.0k|                    {
  376|  37.0k|                        expected_token_type = Token::Type::NewLine;
  377|  37.0k|                    }
  378|       |
  379|  71.8k|                    program.AddParseError(
  380|  71.8k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|  71.8k|                    break;
  382|   252k|            }
  383|   252k|        }
  384|       |
  385|       |        // Check for empty labels
  386|  4.10k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 871, False: 3.23k]
  ------------------
  387|    871|        {
  388|  6.14k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 5.27k, False: 871]
  ------------------
  389|  5.27k|            {
  390|  5.27k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  5.27k|                const Token& token = *it;
  393|  5.27k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 4.03k, False: 1.23k]
  ------------------
  394|  4.03k|                {
  395|  4.03k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  4.03k|                    --label_count;
  397|  4.03k|                }
  398|  5.27k|            }
  399|    871|        }
  400|       |
  401|  4.10k|        return program;
  402|  4.10k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  4.10k|    {
  406|  4.10k|        TokenStream tokens = Tokenize(source);
  407|  4.10k|        return Parse(tokens);
  408|  4.10k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  11.3k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  11.3k|        switch (token.GetType())
   38|  11.3k|        {
   39|  1.29k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 1.29k, False: 10.0k]
  ------------------
   40|  1.29k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 445, False: 854]
  ------------------
   41|  1.29k|                                          ArgumentType::AddressDisplacement))
   42|    445|                {
   43|    445|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|    445|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|    445|                    return {};
   47|    445|                }
   48|       |
   49|       |                // Get address displacement
   50|    854|                PHI_ASSERT(token.HasHint());
   51|       |
   52|    854|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|    854|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 7, False: 847]
  ------------------
   55|      7|                {
   56|      7|                    program.AddParseError(
   57|      7|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      7|                    return {};
   59|      7|                }
   60|       |
   61|    847|                auto         it           = tokens.current_position();
   62|    847|                const Token& first_token  = tokens.consume();
   63|    847|                const Token& second_token = tokens.consume();
   64|    847|                const Token& third_token  = tokens.consume();
   65|       |
   66|    847|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 244, False: 603]
  ------------------
   67|    244|                {
   68|    244|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|    244|                            first_token, Token::Type::OpenBracket));
   70|    244|                    return {};
   71|    244|                }
   72|       |
   73|       |                // Second token is the register
   74|    603|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 202, False: 401]
  ------------------
   75|    202|                {
   76|    202|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|    202|                            second_token, Token::Type::RegisterInt));
   78|    202|                    return {};
   79|    202|                }
   80|       |
   81|    401|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 199, False: 202]
  ------------------
   82|    199|                {
   83|    199|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|    199|                            third_token, Token::Type::ClosingBracket));
   85|    199|                    return {};
   86|    199|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|    202|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|    202|                return ConstructInstructionArgumentAddressDisplacement(
   95|    202|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|    401|            }
   97|    899|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 899, False: 10.4k]
  ------------------
   98|    899|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 198, False: 701]
  ------------------
   99|    198|                {
  100|    198|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|    198|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|    198|                    return {};
  103|    198|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|    701|                return ConstructInstructionArgumentRegisterInt(
  109|    701|                        static_cast<IntRegisterID>(token.GetHint()));
  110|    899|            }
  111|    265|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 265, False: 11.1k]
  ------------------
  112|    265|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 197, False: 68]
  ------------------
  113|    197|                {
  114|    197|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|    197|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|    197|                    return {};
  117|    197|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|     68|                return ConstructInstructionArgumentRegisterFloat(
  123|     68|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|    265|            }
  125|     68|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 68, False: 11.3k]
  ------------------
  126|     68|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|     68|                return {};
  129|    265|            }
  130|  5.96k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 5.96k, False: 5.41k]
  ------------------
  131|       |                // Parse as Label
  132|  5.96k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 1.08k, False: 4.88k]
  ------------------
  133|  1.08k|                {
  134|  1.08k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  1.08k|                            token, expected_argument_type, ArgumentType::Label));
  136|  1.08k|                    return {};
  137|  1.08k|                }
  138|       |
  139|  4.88k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 4.88k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  4.88k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 2.45k, False: 2.42k]
  ------------------
  146|  2.45k|                {
  147|  2.45k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  2.45k|                    return {};
  149|  2.45k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  2.42k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  4.88k|            }
  155|    601|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 601, False: 10.7k]
  ------------------
  156|    601|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 209, False: 392]
  ------------------
  157|    209|                {
  158|    209|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|    209|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|    209|                    return {};
  161|    209|                }
  162|       |
  163|    392|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 194, False: 198]
  ------------------
  164|    194|                {
  165|    194|                    return ConstructInstructionArgumentImmediateValue(
  166|    194|                            static_cast<std::int16_t>(token.GetHint()));
  167|    194|                }
  168|       |
  169|    198|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    198|                return {};
  171|    392|            }
  172|       |
  173|  2.28k|            default:
  ------------------
  |  Branch (173:13): [True: 2.28k, False: 9.10k]
  ------------------
  174|  2.28k|                program.AddParseError(
  175|  2.28k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  2.28k|                return {};
  177|  11.3k|        }
  178|  11.3k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|   220k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   220k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 147k, False: 73.7k]
  ------------------
  249|   147k|                                    {
  250|   147k|                                        std::string_view token_label_name = t.GetText();
  251|   147k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   147k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 13.7k, False: 133k]
  ------------------
  254|  13.7k|                                        {
  255|  13.7k|                                            return true;
  256|  13.7k|                                        }
  257|   147k|                                    }
  258|       |
  259|   207k|                                    return false;
  260|   220k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    137|    {
  354|    137|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 137]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    137|        m_CurrentProgram = &program;
  361|       |
  362|    137|        m_ProgramCounter               = 0u;
  363|    137|        m_Halted                       = false;
  364|    137|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    137|        m_LastRaisedException          = Exception::None;
  366|    137|        m_CurrentStepCount             = 0u;
  367|       |
  368|    137|        return true;
  369|    137|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   205k|    {
   14|   205k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 35.5k, False: 169k]
  ------------------
   15|  35.5k|        {
   16|  35.5k|            char first_char = token[0];
   17|  35.5k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 1.54k, False: 33.9k]
  |  Branch (17:38): [True: 1.30k, False: 32.6k]
  ------------------
   18|  2.84k|            {
   19|  2.84k|                char second_char = token[1];
   20|  2.84k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 2.57k, False: 271]
  |  Branch (20:43): [True: 1.71k, False: 862]
  ------------------
   21|  1.71k|                {
   22|  1.71k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  1.71k|                }
   24|  2.84k|            }
   25|  35.5k|        }
   26|   169k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 45.1k, False: 124k]
  ------------------
   27|  45.1k|        {
   28|  45.1k|            char first_char = token[0];
   29|  45.1k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 2.48k, False: 42.6k]
  |  Branch (29:38): [True: 341, False: 42.2k]
  ------------------
   30|  2.82k|            {
   31|  2.82k|                char second_char = token[1];
   32|  2.82k|                char third_char  = token[2];
   33|       |
   34|  2.82k|                switch (second_char)
   35|  2.82k|                {
   36|    630|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 630, False: 2.19k]
  ------------------
   37|    630|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 430, False: 200]
  |  Branch (37:50): [True: 198, False: 232]
  ------------------
   38|    198|                        {
   39|    198|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|    198|                        }
   41|    432|                        break;
   42|    630|                    }
   43|    982|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 982, False: 1.84k]
  ------------------
   44|    982|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 781, False: 201]
  |  Branch (44:50): [True: 582, False: 199]
  ------------------
   45|    582|                        {
   46|    582|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|    582|                        }
   48|    400|                        break;
   49|    982|                    }
   50|    600|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 600, False: 2.22k]
  ------------------
   51|    600|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 196, False: 404]
  |  Branch (51:50): [True: 199, False: 205]
  ------------------
   52|    395|                        {
   53|    395|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|    395|                        }
   55|    205|                        break;
   56|    600|                    }
   57|    616|                    default: {
  ------------------
  |  Branch (57:21): [True: 616, False: 2.21k]
  ------------------
   58|    616|                        break;
   59|    600|                    }
   60|  2.82k|                }
   61|  2.82k|            }
   62|  45.1k|        }
   63|       |
   64|   202k|        return IntRegisterID::None;
   65|   205k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   202k|    {
   69|   202k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 33.8k, False: 168k]
  ------------------
   70|  33.8k|        {
   71|  33.8k|            char first_char = token[0];
   72|  33.8k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 758, False: 33.0k]
  |  Branch (72:38): [True: 854, False: 32.2k]
  ------------------
   73|  1.61k|            {
   74|  1.61k|                char second_char = token[1];
   75|  1.61k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 1.36k, False: 252]
  |  Branch (75:43): [True: 607, False: 753]
  ------------------
   76|    607|                {
   77|    607|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|    607|                }
   79|  1.61k|            }
   80|  33.8k|        }
   81|   168k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 43.9k, False: 124k]
  ------------------
   82|  43.9k|        {
   83|  43.9k|            char first_char = token[0];
   84|  43.9k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 2.25k, False: 41.6k]
  |  Branch (84:38): [True: 474, False: 41.2k]
  ------------------
   85|  2.73k|            {
   86|  2.73k|                char second_char = token[1];
   87|  2.73k|                char third_char  = token[2];
   88|       |
   89|  2.73k|                switch (second_char)
   90|  2.73k|                {
   91|    670|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 670, False: 2.06k]
  ------------------
   92|    670|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 463, False: 207]
  |  Branch (92:50): [True: 213, False: 250]
  ------------------
   93|    213|                        {
   94|    213|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|    213|                        }
   96|    457|                        break;
   97|    670|                    }
   98|    595|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 595, False: 2.13k]
  ------------------
   99|    595|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 395, False: 200]
  |  Branch (99:50): [True: 199, False: 196]
  ------------------
  100|    199|                        {
  101|    199|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|    199|                        }
  103|    396|                        break;
  104|    595|                    }
  105|    591|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 591, False: 2.13k]
  ------------------
  106|    591|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 194, False: 397]
  |  Branch (106:50): [True: 198, False: 199]
  ------------------
  107|    392|                        {
  108|    392|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|    392|                        }
  110|    199|                        break;
  111|    591|                    }
  112|    874|                    default: {
  ------------------
  |  Branch (112:21): [True: 874, False: 1.85k]
  ------------------
  113|    874|                        break;
  114|    591|                    }
  115|  2.73k|                }
  116|  2.73k|            }
  117|  43.9k|        }
  118|       |
  119|   201k|        return FloatRegisterID::None;
  120|   202k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   187k|    {
  124|   187k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 37.7k, False: 149k]
  ------------------
  125|  37.7k|        {
  126|  37.7k|            char c1 = token[0];
  127|  37.7k|            char c2 = token[1];
  128|  37.7k|            char c3 = token[2];
  129|  37.7k|            char c4 = token[3];
  130|       |
  131|  37.7k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 1.03k, False: 36.6k]
  |  Branch (131:34): [True: 405, False: 36.2k]
  |  Branch (131:49): [True: 283, False: 1.15k]
  |  Branch (131:62): [True: 701, False: 454]
  ------------------
  132|  37.7k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 483, False: 501]
  |  Branch (132:34): [True: 199, False: 302]
  |  Branch (132:49): [True: 461, False: 221]
  |  Branch (132:62): [True: 1, False: 220]
  ------------------
  133|  37.7k|        }
  134|       |
  135|   149k|        return false;
  136|   187k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|   241k|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|  41.2k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|   912k|    {
   41|   912k|        return m_Type;
   42|   912k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   711k|    {
   51|   711k|        return m_LineNumber;
   52|   711k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  1.32M|    {
   56|  1.32M|        return m_Column;
   57|  1.32M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|   862k|    {
   61|   862k|        return m_Text.length();
   62|   862k|    }
_ZNK3dlx5Token7GetTextEv:
   65|   370k|    {
   66|   370k|        return m_Text;
   67|   370k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  17.5k|    {
   80|  17.5k|        return m_HasHint;
   81|  17.5k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  18.3k|    {
   85|  18.3k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  18.3k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  18.3k|                   m_Type == Type::ImmediateInteger);
   88|  18.3k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  18.3k|        return m_Hint;
   91|  18.3k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  4.10k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  4.10k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  4.10k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|    854|    {
   51|    854|        auto it = m_Iterator;
   52|  3.40k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 2.55k, False: 847]
  ------------------
   53|  2.55k|        {
   54|  2.55k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 7, False: 2.54k]
  ------------------
   55|      7|            {
   56|      7|                return false;
   57|      7|            }
   58|  2.55k|        }
   59|       |
   60|    847|        return true;
   61|    854|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|   285k|    {
   65|   285k|        return m_Iterator != m_Tokens.end();
   66|   285k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|   282k|    {
   70|   282k|        return m_Iterator == m_Tokens.end();
   71|   282k|    }
_ZN3dlx11TokenStream7consumeEv:
   84|   282k|    {
   85|   282k|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|   282k|        return *m_Iterator++;
   91|   282k|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|    847|    {
  164|    847|        return m_Iterator;
  165|    847|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|    202|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|    202|        m_Iterator = it;
  179|    202|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  4.10k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  4.10k|        return m_Tokens.begin();
  188|  4.10k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  4.10k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  4.10k|        return m_Tokens.end();
  206|  4.10k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    871|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    871|        return m_Tokens.rbegin();
  224|    871|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  5.27k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  5.27k|        return m_Tokens.rend();
  233|  5.27k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  4.10k|    {
   63|  4.10k|        TokenStream tokens;
   64|       |
   65|  4.10k|        std::string_view current_token;
   66|       |
   67|  4.10k|        phi::u64 current_line_number{1u};
   68|  4.10k|        phi::u64 current_column{1u};
   69|  4.10k|        phi::u64 token_begin{0u};
   70|       |
   71|  4.10k|        phi::boolean parsing_comment{false};
   72|       |
   73|   700k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 696k, False: 4.10k]
  ------------------
   74|   696k|        {
   75|   696k|            const char c{source.at(i.unsafe())};
   76|       |
   77|   696k|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 47.2k, False: 649k]
  ------------------
   78|  47.2k|            {
   79|  47.2k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 18.7k, False: 28.4k]
  ------------------
   80|  18.7k|                {
   81|       |                    // Skip empty lines
   82|  18.7k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  18.7k|                                        current_line_number, current_column);
   84|       |
   85|  18.7k|                    parsing_comment = false;
   86|  18.7k|                    current_line_number += 1u;
   87|  18.7k|                    current_column = 1u;
   88|  18.7k|                    continue;
   89|  18.7k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|  28.4k|                tokens.emplace_back(
   93|  28.4k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|  28.4k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|  28.4k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|  28.4k|                                    current_line_number, current_column);
   98|       |
   99|  28.4k|                current_token   = std::string_view{};
  100|  28.4k|                parsing_comment = false;
  101|  28.4k|                current_line_number += 1u;
  102|  28.4k|                current_column = 0u;
  103|  28.4k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|   649k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 1.32k, False: 647k]
  |  Branch (105:34): [True: 1.40k, False: 646k]
  ------------------
  106|  2.72k|            {
  107|  2.72k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 386, False: 2.34k]
  ------------------
  108|    386|                {
  109|    386|                    token_begin = i;
  110|    386|                }
  111|  2.34k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 1.58k, False: 761]
  ------------------
  112|  1.58k|                {
  113|  1.58k|                    tokens.emplace_back(ParseToken(
  114|  1.58k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  1.58k|                            current_line_number, current_column - current_token.length()));
  116|  1.58k|                    token_begin   = i;
  117|  1.58k|                    current_token = std::string_view{};
  118|  1.58k|                }
  119|       |
  120|  2.72k|                parsing_comment = true;
  121|  2.72k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  2.72k|            }
  123|   646k|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 4.86k, False: 641k]
  ------------------
  124|  4.86k|            {
  125|       |                // simply append the character
  126|  4.86k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|  4.86k|            }
  128|   641k|            else
  129|   641k|            {
  130|       |                // Not parsing a comment
  131|   641k|                switch (c)
  132|   641k|                {
  133|  8.59k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 8.59k, False: 633k]
  ------------------
  134|  22.5k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 13.9k, False: 627k]
  ------------------
  135|  22.5k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 0, False: 641k]
  ------------------
  136|  22.5k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 6.39k, False: 16.1k]
  ------------------
  137|  6.39k|                        {
  138|  6.39k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  6.39k|                            continue;
  141|  6.39k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|  16.1k|                        tokens.emplace_back(ParseToken(
  145|  16.1k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|  16.1k|                                current_line_number, current_column - current_token.length()));
  147|  16.1k|                        current_token = std::string_view{};
  148|  16.1k|                        break;
  149|  72.6k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 72.6k, False: 568k]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  72.6k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 60.8k, False: 11.8k]
  ------------------
  152|  60.8k|                        {
  153|  60.8k|                            current_token =
  154|  60.8k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  60.8k|                            tokens.emplace_back(ParseToken(
  156|  60.8k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  60.8k|                                    current_line_number,
  158|  60.8k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  60.8k|                            current_token = std::string_view{};
  161|  60.8k|                        }
  162|  11.8k|                        else
  163|  11.8k|                        {
  164|       |                            // Orphan colon
  165|  11.8k|                            token_begin = i;
  166|       |
  167|  11.8k|                            tokens.emplace_back(Token::Type::Colon,
  168|  11.8k|                                                source.substr(token_begin.unsafe(), 1),
  169|  11.8k|                                                current_line_number, current_column);
  170|  11.8k|                        }
  171|  72.6k|                        break;
  172|  49.0k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 49.0k, False: 592k]
  ------------------
  173|  58.2k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 9.19k, False: 632k]
  ------------------
  174|  69.0k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 10.7k, False: 630k]
  ------------------
  175|  69.0k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 44.6k, False: 24.3k]
  ------------------
  176|  44.6k|                        {
  177|  44.6k|                            tokens.emplace_back(ParseToken(
  178|  44.6k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|  44.6k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|  44.6k|                            current_token = std::string_view{};
  182|  44.6k|                        }
  183|       |
  184|  69.0k|                        Token::Type type;
  185|  69.0k|                        switch (c)
  186|  69.0k|                        {
  187|  49.0k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 49.0k, False: 19.9k]
  ------------------
  188|  49.0k|                                type = Token::Type::Comma;
  189|  49.0k|                                break;
  190|  9.19k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 9.19k, False: 59.8k]
  ------------------
  191|  9.19k|                                type = Token::Type::OpenBracket;
  192|  9.19k|                                break;
  193|  10.7k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 10.7k, False: 58.2k]
  ------------------
  194|  10.7k|                                type = Token::Type::ClosingBracket;
  195|  10.7k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 69.0k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  69.0k|#endif
  201|  69.0k|                        }
  202|       |
  203|  69.0k|                        token_begin = i;
  204|       |
  205|  69.0k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  69.0k|                                            current_line_number, current_column);
  207|  69.0k|                        break;
  208|       |
  209|   477k|                    default:
  ------------------
  |  Branch (209:21): [True: 477k, False: 164k]
  ------------------
  210|   477k|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 152k, False: 324k]
  ------------------
  211|   152k|                        {
  212|   152k|                            token_begin = i;
  213|   152k|                        }
  214|       |
  215|       |                        // simply append the character
  216|   477k|                        current_token =
  217|   477k|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|   641k|                }
  219|   641k|            }
  220|       |
  221|   671k|            current_column += 1u;
  222|   671k|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  4.10k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 2.99k, False: 1.11k]
  ------------------
  226|  2.99k|        {
  227|  2.99k|            tokens.emplace_back(
  228|  2.99k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  2.99k|                               current_line_number, current_column - current_token.length()));
  230|  2.99k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  4.10k|        tokens.finalize();
  234|       |
  235|  4.10k|        return tokens;
  236|  4.10k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   154k|    {
   11|   154k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 2.18k, False: 152k]
  |  Branch (11:35): [True: 1.62k, False: 561]
  ------------------
   12|  1.62k|        {
   13|  1.62k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  1.62k|            if (number)
  ------------------
  |  Branch (15:17): [True: 279, False: 1.34k]
  ------------------
   16|    279|            {
   17|    279|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|    279|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|    279|            }
   20|       |
   21|  1.34k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  1.62k|        }
   23|       |
   24|   153k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 1.07k, False: 151k]
  |  Branch (24:35): [True: 895, False: 151k]
  ------------------
   25|  1.96k|        {
   26|  1.96k|            return {Token::Type::Comment, token, line_number, column};
   27|  1.96k|        }
   28|       |
   29|   151k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 3.29k, False: 147k]
  ------------------
   30|  3.29k|        {
   31|  3.29k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  3.29k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  3.29k|        }
   34|       |
   35|   147k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 268, False: 147k]
  ------------------
   36|    268|        {
   37|    268|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|    268|        }
   39|       |
   40|   147k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 1.55k, False: 145k]
  ------------------
   41|  1.55k|        {
   42|  1.55k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  1.55k|                    static_cast<std::uint32_t>(id)};
   44|  1.55k|        }
   45|       |
   46|   145k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 1.17k, False: 144k]
  ------------------
   47|  1.17k|        {
   48|  1.17k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  1.17k|                    static_cast<std::uint32_t>(id)};
   50|  1.17k|        }
   51|       |
   52|   144k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 34.9k, False: 109k]
  ------------------
   53|  34.9k|        {
   54|  34.9k|            return {Token::Type::OpCode, token, line_number, column,
   55|  34.9k|                    static_cast<std::uint32_t>(opcode)};
   56|  34.9k|        }
   57|       |
   58|   109k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   144k|    }

_ZN6ImVec2C2Ev:
  263|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

LLVMFuzzerTestOneInput:
   11|  4.10k|{
   12|  4.10k|    static dlxemu::Emulator emu;
   13|       |
   14|  4.10k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   15|       |
   16|  4.10k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   17|       |
   18|       |    // Parse it
   19|  4.10k|    editor.SetText(std::string(source.data(), source.size()));
   20|  4.10k|    editor.m_FullText = editor.GetText();
   21|       |
   22|  4.10k|    emu.ParseProgram(editor.m_FullText);
   23|       |
   24|  4.10k|    editor.ColorizeInternal();
   25|       |
   26|  4.10k|    return 0;
   27|  4.10k|}


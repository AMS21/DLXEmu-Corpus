_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  194|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  199|   176k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  237|  35.2k|    {
  238|  35.2k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (238:13): [True: 21.4k, False: 13.7k]
  ------------------
  239|  21.4k|        {
  240|  21.4k|            return m_Line < other.m_Line;
  241|  21.4k|        }
  242|       |
  243|  13.7k|        return m_Column <= other.m_Column;
  244|  35.2k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  248|      1|    {
  249|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (249:13): [True: 0, False: 1]
  ------------------
  250|      0|        {
  251|      0|            return m_Line > other.m_Line;
  252|      0|        }
  253|       |
  254|      1|        return m_Column >= other.m_Column;
  255|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  262|  12.2M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  290|      1|    {
  291|      1|        Colorize();
  292|      1|        m_Lines.push_back(Line());
  293|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  296|      1|    {
  297|      1|        VerifyInternalState();
  298|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  346|  35.2k|    {
  347|  35.2k|        m_ErrorMarkers.clear();
  348|  35.2k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  411|  35.2k|    {
  412|  35.2k|        m_Breakpoints.clear();
  413|  35.2k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  508|  35.2k|    {
  509|  35.2k|        m_Lines.clear();
  510|  35.2k|        ResetState();
  511|  35.2k|        m_Lines.emplace_back(Line());
  512|       |
  513|  35.2k|        for (const char character : text)
  ------------------
  |  Branch (513:35): [True: 21.0M, False: 35.2k]
  ------------------
  514|  21.0M|        {
  515|  21.0M|            if (character == '\r' ||
  ------------------
  |  Branch (515:17): [True: 24.0k, False: 21.0M]
  |  Branch (515:17): [True: 7.82M, False: 13.2M]
  ------------------
  516|  21.0M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (516:18): [True: 9.00M, False: 12.0M]
  |  Branch (516:48): [True: 8.06M, False: 941k]
  |  Branch (516:69): [True: 7.80M, False: 258k]
  ------------------
  517|  7.82M|            {
  518|       |                // ignore the carriage return character and control characters
  519|  7.82M|            }
  520|  13.2M|            else if (character == '\n')
  ------------------
  |  Branch (520:22): [True: 941k, False: 12.2M]
  ------------------
  521|   941k|            {
  522|   941k|                m_Lines.emplace_back(Line());
  523|   941k|            }
  524|  12.2M|            else
  525|  12.2M|            {
  526|  12.2M|                m_Lines.back().emplace_back(
  527|  12.2M|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  528|  12.2M|            }
  529|  21.0M|        }
  530|       |
  531|  35.2k|        m_TextChanged = true;
  532|  35.2k|        m_ScrollToTop = true;
  533|       |
  534|  35.2k|        m_UndoBuffer.clear();
  535|  35.2k|        m_UndoIndex = 0u;
  536|       |
  537|  35.2k|        Colorize();
  538|  35.2k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  541|  35.2k|    {
  542|  35.2k|        const phi::u32 max_line = GetMaxLineNumber();
  543|       |
  544|  35.2k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  545|  35.2k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1505|      1|    {
 1506|       |        // Lines should never be empty
 1507|      1|        PHI_ASSERT(!m_Lines.empty());
 1508|       |
 1509|       |        // Verify Selection is still in a valid state
 1510|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1511|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1512|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1513|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1514|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1515|       |
 1516|       |        // Verify cursor position
 1517|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1518|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1519|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1520|       |
 1521|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1522|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1523|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1524|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1525|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1526|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1527|       |#endif
 1528|       |
 1529|       |        // Verify that all breakpoints are on existing lines
 1530|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1530:35): [True: 0, False: 1]
  ------------------
 1531|      0|        {
 1532|      0|            PHI_ASSERT(break_point != 0u);
 1533|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1534|      0|        }
 1535|       |
 1536|       |        // Verify that all error markers are on existing lines
 1537|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1537:34): [True: 0, False: 1]
  ------------------
 1538|      0|        {
 1539|      0|            const phi::u32 line_number = error_marker.first;
 1540|       |
 1541|      0|            PHI_ASSERT(line_number != 0u);
 1542|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1543|      0|        }
 1544|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1547|      1|    {
 1548|      1|        constexpr const static Palette palette = {{
 1549|      1|                0xff7f7f7f, // Default
 1550|      1|                0xffd69c56, // OpCode
 1551|      1|                0xff00ff00, // Register
 1552|      1|                0xff7070e0, // IntegerLiteral
 1553|      1|                0xff206020, // Comment
 1554|      1|                0xff101010, // Background
 1555|      1|                0xffe0e0e0, // Cursor
 1556|      1|                0x80a06020, // Selection
 1557|      1|                0x800020ff, // ErrorMarker
 1558|      1|                0x40f08000, // Breakpoint
 1559|      1|                0xff707000, // Line number
 1560|      1|                0x40000000, // Current line fill
 1561|      1|                0x40808080, // Current line fill (inactive)
 1562|      1|                0x40a0a0a0, // Current line edge
 1563|      1|        }};
 1564|       |
 1565|      1|        return palette;
 1566|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1733|  35.2k|    {
 1734|       |        // TODO: This is quite unreadable
 1735|  35.2k|        const phi::u32 to_line =
 1736|  35.2k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1736:17): [True: 35.2k, False: 0]
  ------------------
 1737|  35.2k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1738|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1739|       |
 1740|  35.2k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1741|  35.2k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1742|  35.2k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1743|  35.2k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1744|  35.2k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1850|  35.2k|    {
 1851|  35.2k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1852|  35.2k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1853|  35.2k|        PHI_ASSERT(start <= end);
 1854|       |
 1855|  35.2k|        std::string result;
 1856|       |
 1857|  35.2k|        phi::u32   lstart = start.m_Line;
 1858|  35.2k|        phi::u32   lend   = end.m_Line;
 1859|  35.2k|        phi::u32   istart = GetCharacterIndex(start);
 1860|  35.2k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1861|  35.2k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1862|  35.2k|        phi::usize size   = 0u;
 1863|       |
 1864|  1.01M|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1864:35): [True: 977k, False: 35.2k]
  ------------------
 1865|   977k|        {
 1866|   977k|            PHI_ASSERT(i < m_Lines.size());
 1867|   977k|            size += m_Lines[i.unsafe()].size();
 1868|   977k|        }
 1869|       |
 1870|  35.2k|        result.reserve((size + size / 8u).unsafe());
 1871|       |
 1872|  13.2M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1872:16): [True: 8.66M, False: 4.60M]
  |  Branch (1872:16): [True: 13.2M, False: 35.2k]
  |  Branch (1872:33): [True: 4.57M, False: 35.2k]
  ------------------
 1873|  13.2M|        {
 1874|  13.2M|            PHI_ASSERT(lstart < m_Lines.size());
 1875|       |
 1876|  13.2M|            const Line& line = m_Lines[lstart.unsafe()];
 1877|  13.2M|            if (istart < line.size())
  ------------------
  |  Branch (1877:17): [True: 12.2M, False: 941k]
  ------------------
 1878|  12.2M|            {
 1879|  12.2M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1880|  12.2M|                istart++;
 1881|  12.2M|            }
 1882|   941k|            else
 1883|   941k|            {
 1884|   941k|                istart = 0u;
 1885|   941k|                ++lstart;
 1886|       |
 1887|   941k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1887:21): [True: 941k, False: 0]
  ------------------
 1888|   941k|                {
 1889|   941k|                    result += '\n';
 1890|   941k|                }
 1891|   941k|            }
 1892|  13.2M|        }
 1893|       |
 1894|  35.2k|        return result;
 1895|  35.2k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2431|  70.4k|    {
 2432|  70.4k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2433|       |
 2434|  70.4k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2435|  70.4k|        phi::u32    index = 0u;
 2436|  3.42M|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2436:35): [True: 3.39M, False: 36.9k]
  |  Branch (2436:35): [True: 3.35M, False: 70.4k]
  |  Branch (2436:58): [True: 3.35M, False: 33.4k]
  ------------------
 2437|  3.35M|        {
 2438|  3.35M|            PHI_ASSERT(index < line.size());
 2439|  3.35M|            const Char character = line[index.unsafe()].m_Char;
 2440|       |
 2441|  3.35M|            if (character == '\t')
  ------------------
  |  Branch (2441:17): [True: 45.0k, False: 3.31M]
  ------------------
 2442|  45.0k|            {
 2443|  45.0k|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2444|  45.0k|            }
 2445|  3.31M|            else
 2446|  3.31M|            {
 2447|  3.31M|                ++column;
 2448|  3.31M|            }
 2449|       |
 2450|  3.35M|            index += UTF8CharLength(character);
 2451|  3.35M|        }
 2452|       |
 2453|  70.4k|        return index;
 2454|  70.4k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2503|  35.2k|    {
 2504|  35.2k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2504:13): [True: 0, False: 35.2k]
  ------------------
 2505|      0|        {
 2506|      0|            return 0u;
 2507|      0|        }
 2508|       |
 2509|  35.2k|        const Line& line = m_Lines[line_number.unsafe()];
 2510|  35.2k|        phi::u32    col  = 0u;
 2511|       |
 2512|  3.39M|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2512:32): [True: 3.35M, False: 35.2k]
  ------------------
 2513|  3.35M|        {
 2514|  3.35M|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2515|  3.35M|            if (character == '\t')
  ------------------
  |  Branch (2515:17): [True: 45.0k, False: 3.31M]
  ------------------
 2516|  45.0k|            {
 2517|  45.0k|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2518|  45.0k|            }
 2519|  3.31M|            else
 2520|  3.31M|            {
 2521|  3.31M|                col++;
 2522|  3.31M|            }
 2523|       |
 2524|  3.35M|            i += UTF8CharLength(character);
 2525|  3.35M|        }
 2526|       |
 2527|  35.2k|        return col;
 2528|  35.2k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2531|  35.2k|    {
 2532|  35.2k|        PHI_ASSERT(!m_Lines.empty());
 2533|       |
 2534|  35.2k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2535|  35.2k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3663|  4.88M|    {
 3664|  4.88M|        PaletteIndex palette_index{PaletteIndex::Default};
 3665|       |
 3666|       |        // Determine palette color
 3667|  4.88M|        switch (token.GetType())
 3668|  4.88M|        {
 3669|  29.7k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3669:13): [True: 29.7k, False: 4.85M]
  ------------------
 3670|  29.7k|                palette_index = PaletteIndex::Comment;
 3671|  29.7k|                break;
 3672|  34.6k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3672:13): [True: 34.6k, False: 4.84M]
  ------------------
 3673|  70.1k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3673:13): [True: 35.5k, False: 4.84M]
  ------------------
 3674|  70.1k|                palette_index = PaletteIndex::IntegerLiteral;
 3675|  70.1k|                break;
 3676|   313k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3676:13): [True: 313k, False: 4.56M]
  ------------------
 3677|   313k|                palette_index = PaletteIndex::OpCode;
 3678|   313k|                break;
 3679|  11.0k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3679:13): [True: 11.0k, False: 4.87M]
  ------------------
 3680|  26.0k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3680:13): [True: 14.9k, False: 4.86M]
  ------------------
 3681|  27.9k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3681:13): [True: 1.94k, False: 4.88M]
  ------------------
 3682|  27.9k|                palette_index = PaletteIndex::Register;
 3683|  27.9k|                break;
 3684|   941k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3684:13): [True: 941k, False: 3.94M]
  ------------------
 3685|   941k|                return;
 3686|  3.49M|            default:
  ------------------
  |  Branch (3686:13): [True: 3.49M, False: 1.38M]
  ------------------
 3687|  3.49M|                break;
 3688|  4.88M|        }
 3689|       |
 3690|  3.94M|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3691|  3.94M|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3692|       |
 3693|  3.94M|        for (phi::u64 index{token.GetColumn() - 1u};
 3694|  15.8M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3694:14): [True: 11.9M, False: 3.94M]
  ------------------
 3695|  11.9M|        {
 3696|  11.9M|            PHI_ASSERT(index < line.size());
 3697|  11.9M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3698|  11.9M|        }
 3699|  3.94M|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3702|  35.2k|    {
 3703|  35.2k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3704|       |
 3705|  35.2k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3705:38): [True: 4.88M, False: 35.2k]
  ------------------
 3706|  4.88M|        {
 3707|  4.88M|            ColorizeToken(token);
 3708|  4.88M|        }
 3709|  35.2k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3712|  35.2k|    {
 3713|  35.2k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3714|  35.2k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3715|  35.2k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3716|       |
 3717|       |        // Clear breakpoints and markers
 3718|  35.2k|        ClearBreakPoints();
 3719|  35.2k|        ClearErrorMarkers();
 3720|  35.2k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  132|  3.35M|{
  133|  3.35M|    return UTF8CharLength(static_cast<char>(characater));
  134|  3.35M|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  102|  6.71M|{
  103|  6.71M|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (103:9): [True: 17.1k, False: 6.69M]
  ------------------
  104|  17.1k|    {
  105|  17.1k|        return 6_u8;
  106|  17.1k|    }
  107|       |
  108|  6.69M|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (108:9): [True: 18.6k, False: 6.67M]
  ------------------
  109|  18.6k|    {
  110|  18.6k|        return 5_u8;
  111|  18.6k|    }
  112|       |
  113|  6.67M|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (113:9): [True: 30.9k, False: 6.64M]
  ------------------
  114|  30.9k|    {
  115|  30.9k|        return 4_u8;
  116|  30.9k|    }
  117|       |
  118|  6.64M|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (118:9): [True: 50.8k, False: 6.59M]
  ------------------
  119|  50.8k|    {
  120|  50.8k|        return 3_u8;
  121|  50.8k|    }
  122|       |
  123|  6.59M|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (123:9): [True: 195k, False: 6.40M]
  ------------------
  124|   195k|    {
  125|   195k|        return 2_u8;
  126|   195k|    }
  127|       |
  128|  6.40M|    return 1_u8;
  129|  6.59M|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  174|  35.2k|    {
  175|  35.2k|        return m_DLXProgram;
  176|  35.2k|    }
_ZN6dlxemu8Emulator12ParseProgramENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  179|  35.2k|    {
  180|  35.2k|        m_DLXProgram = dlx::Parser::Parse(source);
  181|       |
  182|  35.2k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (182:13): [True: 162, False: 35.0k]
  ------------------
  183|    162|        {
  184|    162|            m_Processor.LoadProgram(m_DLXProgram);
  185|    162|        }
  186|  35.2k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  199|  35.2k|    {
  200|  35.2k|        return m_CodeEditor;
  201|  35.2k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   37|      1|    {
   38|      1|        Shutdown();
   39|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  106|      1|    {
  107|      1|        if (imgui_initialized)
  ------------------
  |  Branch (107:13): [True: 0, False: 1]
  ------------------
  108|      0|        {
  109|      0|            ShutdownImGui();
  110|      0|        }
  111|       |
  112|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (112:13): [True: 0, False: 1]
  ------------------
  113|      0|        {
  114|      0|            glfwDestroyWindow(m_Window);
  115|      0|        }
  116|       |
  117|      1|        if (glfw_initialized)
  ------------------
  |  Branch (117:13): [True: 0, False: 1]
  ------------------
  118|      0|        {
  119|      0|            glfwTerminate();
  120|      0|        }
  121|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   649k|        {
  169|   649k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   649k|            switch (index.unsafe())
  172|   649k|            {
  173|   294k|                case 0:
  ------------------
  |  Branch (173:17): [True: 294k, False: 355k]
  ------------------
  174|   294k|                    return m_Arg1Type;
  175|       |
  176|   178k|                case 1:
  ------------------
  |  Branch (176:17): [True: 178k, False: 470k]
  ------------------
  177|   178k|                    return m_Arg2Type;
  178|       |
  179|   176k|                case 2:
  ------------------
  |  Branch (179:17): [True: 176k, False: 473k]
  ------------------
  180|   176k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 649k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   649k|#endif
  187|   649k|            }
  188|   649k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   174k|        {
  195|   174k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   174k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 172k, False: 1.90k]
  ------------------
  199|   172k|            {
  200|   172k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   172k|            }
  202|   174k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 101k, False: 73.3k]
  ------------------
  203|   101k|            {
  204|   101k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   101k|            }
  206|   174k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 56.8k, False: 118k]
  ------------------
  207|  56.8k|            {
  208|  56.8k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  56.8k|            }
  210|       |
  211|   174k|            return number_of_argument_required;
  212|   174k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   174k|        {
  221|   174k|            return m_Executor;
  222|   174k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  95.4k|    {
   38|  95.4k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  95.4k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  95.4k|                                         static_cast<underlying_t>(rhs));
   42|  95.4k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  95.4k|    {
   55|  95.4k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  95.4k|        return static_cast<underlying_t>(type & test) != 0;
   58|  95.4k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|   889k|    {
   32|   889k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 9.19k, False: 880k]
  ------------------
   33|  9.19k|        {
   34|  9.19k|            return true;
   35|  9.19k|        }
   36|       |
   37|   880k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 2.85k, False: 877k]
  ------------------
   38|  2.85k|        {
   39|  2.85k|            return true;
   40|  2.85k|        }
   41|       |
   42|   877k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 161k, False: 716k]
  ------------------
   43|   161k|        {
   44|   161k|            return true;
   45|   161k|        }
   46|       |
   47|   716k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 1.62k, False: 715k]
  ------------------
   48|  1.62k|        {
   49|  1.62k|            return true;
   50|  1.62k|        }
   51|       |
   52|   715k|        return false;
   53|   716k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|   715k|    {
   57|   715k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 715k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|   715k|        const char first_char = token.at(0);
   63|       |
   64|   715k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 172k, False: 542k]
  ------------------
   65|   172k|        {
   66|   172k|            return phi::is_alpha(first_char);
   67|   172k|        }
   68|       |
   69|   542k|        phi::boolean just_under_scores = (first_char == '_');
   70|   542k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 145k, False: 396k]
  |  Branch (70:15): [True: 392k, False: 149k]
  |  Branch (70:44): [True: 3.42k, False: 145k]
  ------------------
   71|   145k|        {
   72|   145k|            return false;
   73|   145k|        }
   74|       |
   75|  1.33M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 1.11M, False: 217k]
  ------------------
   76|  1.11M|        {
   77|  1.11M|            const char c{token.at(index)};
   78|       |
   79|  1.11M|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 927k, False: 189k]
  ------------------
   80|   927k|            {
   81|   927k|                just_under_scores = false;
   82|   927k|            }
   83|   189k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 11.1k, False: 178k]
  ------------------
   84|  11.1k|            {
   85|  11.1k|                continue;
   86|  11.1k|            }
   87|   178k|            else
   88|   178k|            {
   89|   178k|                return false;
   90|   178k|            }
   91|  1.11M|        }
   92|       |
   93|   217k|        return !just_under_scores;
   94|   396k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|  2.38M|    {
  101|  2.38M|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 2.38M]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|  2.38M|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 407k, False: 1.98M]
  ------------------
  107|   407k|        {
  108|   407k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 28.7k, False: 378k]
  ------------------
  109|  28.7k|            {
  110|  28.7k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  28.7k|            }
  112|       |
  113|   378k|            return {};
  114|   407k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|  1.98M|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 8.22k, False: 1.97M]
  ------------------
  118|  8.22k|        {
  119|  8.22k|            return {};
  120|  8.22k|        }
  121|       |
  122|  1.97M|        std::int32_t number{0};
  123|  1.97M|        phi::boolean is_negative{false};
  124|  1.97M|        phi::boolean starts_with_zero{false};
  125|  1.97M|        phi::boolean parsing_binary{false};
  126|  1.97M|        phi::boolean parsing_octal{false};
  127|  1.97M|        phi::boolean parsing_hexadecimal{false};
  128|  1.97M|        phi::boolean parsed_something{false};
  129|  1.97M|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|  2.23M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 2.22M, False: 15.7k]
  ------------------
  134|  2.22M|        {
  135|  2.22M|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|  2.22M|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 1.97M, False: 249k]
  ------------------
  139|  1.97M|            {
  140|  1.97M|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 9.17k, False: 1.96M]
  ------------------
  141|  9.17k|                {
  142|  9.17k|                    continue;
  143|  9.17k|                }
  144|       |
  145|  1.96M|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 40.6k, False: 1.92M]
  ------------------
  146|  40.6k|                {
  147|  40.6k|                    is_negative = true;
  148|  40.6k|                    continue;
  149|  40.6k|                }
  150|       |
  151|  1.92M|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 33.4k, False: 1.89M]
  ------------------
  152|  33.4k|                {
  153|  33.4k|                    starts_with_zero = true;
  154|  33.4k|                    continue;
  155|  33.4k|                }
  156|       |
  157|  1.89M|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 4.98k, False: 1.88M]
  ------------------
  158|  4.98k|                {
  159|  4.98k|                    return {};
  160|  4.98k|                }
  161|  1.89M|            }
  162|       |
  163|       |            // Second character
  164|  2.13M|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 125k, False: 2.00M]
  ------------------
  165|   125k|            {
  166|   125k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 33.4k, False: 91.6k]
  ------------------
  167|  33.4k|                {
  168|       |                    // Binary
  169|  33.4k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 1.16k, False: 32.2k]
  |  Branch (169:37): [True: 3.01k, False: 29.2k]
  ------------------
  170|  4.18k|                    {
  171|  4.18k|                        parsing_binary = true;
  172|  4.18k|                        continue;
  173|  4.18k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  29.2k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 4.29k, False: 24.9k]
  |  Branch (176:37): [True: 3.61k, False: 21.3k]
  ------------------
  177|  7.91k|                    {
  178|  7.91k|                        parsing_hexadecimal = true;
  179|  7.91k|                        continue;
  180|  7.91k|                    }
  181|       |
  182|       |                    // Octal
  183|  21.3k|                    parsing_octal = true;
  184|  21.3k|                }
  185|   125k|            }
  186|       |
  187|       |            // Handle seperators
  188|  2.12M|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 9.89k, False: 2.11M]
  ------------------
  189|  9.89k|            {
  190|  9.89k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 1.71k, False: 8.18k]
  ------------------
  191|  1.71k|                {
  192|  1.71k|                    return {};
  193|  1.71k|                }
  194|       |
  195|  8.18k|                parsed_separator = true;
  196|  8.18k|                continue;
  197|  9.89k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|  2.11M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 50.7k, False: 2.06M]
  |  Branch (200:32): [True: 1.05k, False: 49.6k]
  ------------------
  201|  1.05k|            {
  202|       |                // Would underflow
  203|  1.05k|                return {};
  204|  1.05k|            }
  205|  2.11M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 2.06M, False: 49.6k]
  |  Branch (205:17): [True: 6.66k, False: 2.10M]
  |  Branch (205:33): [True: 6.66k, False: 2.05M]
  ------------------
  206|  6.66k|            {
  207|       |                // Would overflow
  208|  6.66k|                return {};
  209|  6.66k|            }
  210|       |
  211|  2.10M|            parsed_separator = false;
  212|  2.10M|            parsed_something = true;
  213|       |
  214|  2.10M|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 5.11k, False: 2.09M]
  ------------------
  215|  5.11k|            {
  216|  5.11k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 2.62k, False: 2.49k]
  ------------------
  217|  2.62k|                {
  218|  2.62k|                    return {};
  219|  2.62k|                }
  220|       |
  221|  2.49k|                number <<= 1;
  222|  2.49k|                number |= (c - '0');
  223|  2.49k|            }
  224|  2.09M|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 58.0k, False: 2.04M]
  ------------------
  225|  58.0k|            {
  226|  58.0k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 19.9k, False: 38.0k]
  ------------------
  227|  19.9k|                {
  228|  19.9k|                    return {};
  229|  19.9k|                }
  230|       |
  231|  38.0k|                number <<= 3;
  232|  38.0k|                number |= (c - '0');
  233|  38.0k|            }
  234|  2.04M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 23.1k, False: 2.01M]
  ------------------
  235|  23.1k|            {
  236|  23.1k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 4.41k, False: 18.6k]
  ------------------
  237|  4.41k|                {
  238|  4.41k|                    return {};
  239|  4.41k|                }
  240|       |
  241|  18.6k|                number <<= 4;
  242|  18.6k|                number |= phi::hex_digit_value(c).unsafe();
  243|  18.6k|            }
  244|  2.01M|            else
  245|  2.01M|            {
  246|  2.01M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 1.91M, False: 103k]
  ------------------
  247|  1.91M|                {
  248|  1.91M|                    return {};
  249|  1.91M|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|   103k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 48.8k, False: 55.1k]
  |  Branch (252:36): [True: 1.89k, False: 46.9k]
  ------------------
  253|  1.89k|                {
  254|  1.89k|                    return {};
  255|  1.89k|                }
  256|       |
  257|   102k|                number *= 10;
  258|   102k|                number += (c - '0');
  259|   102k|            }
  260|  2.10M|        }
  261|       |
  262|  15.7k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 14.2k, False: 1.54k]
  ------------------
  263|  14.2k|        {
  264|       |            // Check for over/underflow
  265|  14.2k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 2.98k, False: 11.2k]
  |  Branch (265:32): [True: 992, False: 1.98k]
  ------------------
  266|    992|            {
  267|       |                // Would underflow
  268|    992|                return {};
  269|    992|            }
  270|  13.2k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 11.2k, False: 1.98k]
  |  Branch (270:17): [True: 3.19k, False: 10.0k]
  |  Branch (270:33): [True: 3.19k, False: 8.07k]
  ------------------
  271|  3.19k|            {
  272|       |                // Would overflow
  273|  3.19k|                return {};
  274|  3.19k|            }
  275|       |
  276|  10.0k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 1.98k, False: 8.07k]
  ------------------
  277|  1.98k|            {
  278|  1.98k|                return static_cast<std::int16_t>(-number);
  279|  1.98k|            }
  280|       |
  281|  8.07k|            return static_cast<std::int16_t>(number);
  282|  10.0k|        }
  283|       |
  284|  1.54k|        return {};
  285|  15.7k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   232k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   232k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 4.94M, False: 0]
  ------------------
   64|  4.94M|            {
   65|  4.94M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 232k, False: 4.70M]
  ------------------
   66|   232k|                {
   67|   232k|                    return &token;
   68|   232k|                }
   69|  4.94M|            }
   70|       |
   71|      0|            return nullptr;
   72|   232k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|  1.22M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.22M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.22M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  2.41M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.41M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.41M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  1.23M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.23M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.23M|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   18|   174k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   23|  33.5k|    {
   24|  33.5k|        PHI_ASSERT(argument_number < 3u);
   25|       |
   26|  33.5k|        switch (argument_number.unsafe())
   27|  33.5k|        {
   28|  30.8k|            case 0u:
  ------------------
  |  Branch (28:13): [True: 30.8k, False: 2.71k]
  ------------------
   29|  30.8k|                m_Arg1 = argument;
   30|  30.8k|                break;
   31|  1.90k|            case 1u:
  ------------------
  |  Branch (31:13): [True: 1.90k, False: 31.6k]
  ------------------
   32|  1.90k|                m_Arg2 = argument;
   33|  1.90k|                break;
   34|    810|            case 2u:
  ------------------
  |  Branch (34:13): [True: 810, False: 32.7k]
  ------------------
   35|    810|                m_Arg3 = argument;
   36|    810|                break;
   37|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   38|      0|            default:
  ------------------
  |  Branch (38:13): [True: 0, False: 33.5k]
  ------------------
   39|      0|                PHI_ASSERT_NOT_REACHED();
   40|  33.5k|#endif
   41|  33.5k|        }
   42|  33.5k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   23|   558k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  173|  4.89k|    {
  174|  4.89k|        InstructionArgument arg;
  175|  4.89k|        arg.m_Type                   = ArgumentType::IntRegister;
  176|  4.89k|        arg.register_int.register_id = id;
  177|  4.89k|        return arg;
  178|  4.89k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  182|  1.58k|    {
  183|  1.58k|        InstructionArgument arg;
  184|  1.58k|        arg.m_Type                     = ArgumentType::FloatRegister;
  185|  1.58k|        arg.register_float.register_id = id;
  186|  1.58k|        return arg;
  187|  1.58k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  191|  1.38k|    {
  192|  1.38k|        InstructionArgument arg;
  193|  1.38k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  194|  1.38k|        arg.immediate_value.signed_value = value;
  195|  1.38k|        return arg;
  196|  1.38k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  200|  1.39k|    {
  201|  1.39k|        InstructionArgument arg;
  202|  1.39k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  203|  1.39k|        arg.address_displacement.register_id  = id;
  204|  1.39k|        arg.address_displacement.displacement = displacement;
  205|  1.39k|        return arg;
  206|  1.39k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  210|  24.3k|    {
  211|  24.3k|        InstructionArgument arg;
  212|  24.3k|        arg.m_Type           = ArgumentType::Label;
  213|  24.3k|        arg.label.label_name = label_name;
  214|  24.3k|        return arg;
  215|  24.3k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   174k|    {
  453|   174k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   174k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   14|      1|    {
   15|      1|        m_Values.resize(starting_size.unsafe());
   16|      1|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|  3.16M|    {
   24|  3.16M|        switch (token.length())
   25|  3.16M|        {
   26|       |            // 1 character OpCodes
   27|   555k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 555k, False: 2.61M]
  ------------------
   28|   555k|                char c1 = token[0];
   29|   555k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 102k, False: 452k]
  ------------------
   30|   102k|                {
   31|   102k|                    return OpCode::J;
   32|   102k|                }
   33|   452k|                break;
   34|   555k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|   561k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 561k, False: 2.60M]
  ------------------
   38|   561k|                char c1 = token[0];
   39|   561k|                char c2 = token[1];
   40|       |
   41|   561k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 362k, False: 198k]
  ------------------
   42|   561k|                {
   43|  51.5k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 51.5k, False: 509k]
  ------------------
   44|  60.9k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 9.40k, False: 552k]
  ------------------
   45|  60.9k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 8.00k, False: 52.9k]
  ------------------
   46|  8.00k|                        {
   47|  8.00k|                            return OpCode::JR;
   48|  8.00k|                        }
   49|  52.9k|                        break;
   50|       |
   51|  52.9k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 30.8k, False: 530k]
  ------------------
   52|  49.1k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 18.3k, False: 543k]
  ------------------
   53|  49.1k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 27.7k, False: 21.3k]
  ------------------
   54|  49.1k|                        {
   55|  3.09k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 3.09k, False: 46.0k]
  ------------------
   56|  5.80k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 2.70k, False: 46.4k]
  ------------------
   57|  5.80k|                                return OpCode::LB;
   58|  1.78k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 1.78k, False: 47.4k]
  ------------------
   59|  3.26k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 1.48k, False: 47.7k]
  ------------------
   60|  3.26k|                                return OpCode::LD;
   61|  1.77k|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 1.77k, False: 47.4k]
  ------------------
   62|  4.56k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 2.78k, False: 46.4k]
  ------------------
   63|  4.56k|                                return OpCode::LF;
   64|  2.28k|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 2.28k, False: 46.8k]
  ------------------
   65|  4.61k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 2.33k, False: 46.8k]
  ------------------
   66|  4.61k|                                return OpCode::LH;
   67|  1.99k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 1.99k, False: 47.1k]
  ------------------
   68|  3.14k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 1.14k, False: 48.0k]
  ------------------
   69|  3.14k|                                return OpCode::LW;
   70|  49.1k|                        }
   71|  27.7k|                        break;
   72|  27.7k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 6.58k, False: 554k]
  ------------------
   73|  41.4k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 34.8k, False: 526k]
  ------------------
   74|  41.4k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 4.65k, False: 36.8k]
  ------------------
   75|  4.65k|                        {
   76|  4.65k|                            return OpCode::OR;
   77|  4.65k|                        }
   78|  36.8k|                        break;
   79|  36.8k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 26.0k, False: 535k]
  ------------------
   80|  47.0k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 20.9k, False: 540k]
  ------------------
   81|  47.0k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 19.3k, False: 27.7k]
  ------------------
   82|  47.0k|                        {
   83|  1.60k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 1.60k, False: 45.4k]
  ------------------
   84|  4.97k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 3.37k, False: 43.7k]
  ------------------
   85|  4.97k|                                return OpCode::SB;
   86|  7.96k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 7.96k, False: 39.1k]
  ------------------
   87|  9.22k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 1.25k, False: 45.8k]
  ------------------
   88|  9.22k|                                return OpCode::SD;
   89|  2.03k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 2.03k, False: 45.0k]
  ------------------
   90|  3.02k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 986, False: 46.1k]
  ------------------
   91|  3.02k|                                return OpCode::SF;
   92|  1.45k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 1.45k, False: 45.6k]
  ------------------
   93|  5.60k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 4.15k, False: 42.9k]
  ------------------
   94|  5.60k|                                return OpCode::SH;
   95|  1.32k|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 1.32k, False: 45.7k]
  ------------------
   96|  4.90k|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 3.58k, False: 43.5k]
  ------------------
   97|  4.90k|                                return OpCode::SW;
   98|  47.0k|                        }
   99|  19.3k|                        break;
  100|   561k|                }
  101|   499k|                break;
  102|   561k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   579k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 579k, False: 2.58M]
  ------------------
  106|   579k|                char c1 = token[0];
  107|   579k|                char c2 = token[1];
  108|   579k|                char c3 = token[2];
  109|       |
  110|   579k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 211k, False: 367k]
  ------------------
  111|   579k|                {
  112|  25.2k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 25.2k, False: 554k]
  ------------------
  113|  37.9k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 12.7k, False: 566k]
  ------------------
  114|  37.9k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 9.10k, False: 28.8k]
  |  Branch (114:29): [True: 4.04k, False: 33.9k]
  |  Branch (114:45): [True: 4.04k, False: 5.06k]
  ------------------
  115|  4.04k|                        {
  116|  4.04k|                            return OpCode::ADD;
  117|  4.04k|                        }
  118|  33.9k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 11.1k, False: 22.7k]
  |  Branch (118:34): [True: 4.98k, False: 28.9k]
  |  Branch (118:50): [True: 4.98k, False: 6.20k]
  ------------------
  119|  4.98k|                        {
  120|  4.98k|                            return OpCode::AND;
  121|  4.98k|                        }
  122|  28.9k|                        break;
  123|       |
  124|  28.9k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 15.2k, False: 564k]
  ------------------
  125|  20.8k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 5.64k, False: 573k]
  ------------------
  126|  20.8k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 9.21k, False: 11.6k]
  |  Branch (126:29): [True: 2.75k, False: 18.1k]
  |  Branch (126:45): [True: 2.75k, False: 6.46k]
  ------------------
  127|  2.75k|                        {
  128|  2.75k|                            return OpCode::DIV;
  129|  2.75k|                        }
  130|  18.1k|                        break;
  131|       |
  132|  18.1k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 4.52k, False: 574k]
  ------------------
  133|  24.1k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 19.6k, False: 559k]
  ------------------
  134|  24.1k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 16.8k, False: 7.30k]
  ------------------
  135|  16.8k|                        {
  136|  16.8k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 2.54k, False: 14.2k]
  ------------------
  137|  2.54k|                            {
  138|  2.54k|                                return OpCode::EQD;
  139|  2.54k|                            }
  140|  14.2k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 7.08k, False: 7.19k]
  ------------------
  141|  7.08k|                            {
  142|  7.08k|                                return OpCode::EQF;
  143|  7.08k|                            }
  144|  16.8k|                        }
  145|  14.5k|                        break;
  146|       |
  147|  14.5k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 11.0k, False: 568k]
  ------------------
  148|  22.7k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 11.6k, False: 567k]
  ------------------
  149|  22.7k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 7.78k, False: 14.9k]
  ------------------
  150|  7.78k|                        {
  151|  7.78k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 2.39k, False: 5.38k]
  ------------------
  152|  2.39k|                            {
  153|  2.39k|                                return OpCode::GED;
  154|  2.39k|                            }
  155|  5.38k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 2.72k, False: 2.65k]
  ------------------
  156|  2.72k|                            {
  157|  2.72k|                                return OpCode::GEF;
  158|  2.72k|                            }
  159|  7.78k|                        }
  160|  14.9k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 10.3k, False: 4.55k]
  ------------------
  161|  10.3k|                        {
  162|  10.3k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 1.91k, False: 8.47k]
  ------------------
  163|  1.91k|                            {
  164|  1.91k|                                return OpCode::GTD;
  165|  1.91k|                            }
  166|  8.47k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 2.81k, False: 5.65k]
  ------------------
  167|  2.81k|                            {
  168|  2.81k|                                return OpCode::GTF;
  169|  2.81k|                            }
  170|  8.47k|                        }
  171|  12.8k|                        break;
  172|       |
  173|  27.1k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 27.1k, False: 552k]
  ------------------
  174|  31.0k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 3.88k, False: 575k]
  ------------------
  175|  31.0k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 9.54k, False: 21.4k]
  |  Branch (175:29): [True: 5.81k, False: 25.2k]
  |  Branch (175:45): [True: 5.81k, False: 3.72k]
  ------------------
  176|  5.81k|                        {
  177|  5.81k|                            return OpCode::JAL;
  178|  5.81k|                        }
  179|  25.2k|                        break;
  180|       |
  181|  46.5k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 46.5k, False: 532k]
  ------------------
  182|  59.5k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 13.0k, False: 566k]
  ------------------
  183|  59.5k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 15.5k, False: 44.0k]
  ------------------
  184|  59.5k|                        {
  185|  3.21k|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 3.21k, False: 56.3k]
  ------------------
  186|  6.11k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 2.90k, False: 56.6k]
  ------------------
  187|  6.11k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 2.46k, False: 3.64k]
  ------------------
  188|  2.46k|                                {
  189|  2.46k|                                    return OpCode::LBU;
  190|  2.46k|                                }
  191|  3.64k|                                break;
  192|       |
  193|  4.35k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 4.35k, False: 55.2k]
  ------------------
  194|  14.4k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 10.0k, False: 49.5k]
  ------------------
  195|  14.4k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 7.96k, False: 6.43k]
  ------------------
  196|  7.96k|                                {
  197|  7.96k|                                    return OpCode::LED;
  198|  7.96k|                                }
  199|  6.43k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 3.39k, False: 3.04k]
  ------------------
  200|  3.39k|                                {
  201|  3.39k|                                    return OpCode::LEF;
  202|  3.39k|                                }
  203|  3.04k|                                break;
  204|       |
  205|  6.08k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 6.08k, False: 53.5k]
  ------------------
  206|  10.2k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 4.18k, False: 55.4k]
  ------------------
  207|  10.2k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 3.83k, False: 6.44k]
  ------------------
  208|  3.83k|                                {
  209|  3.83k|                                    return OpCode::LHI;
  210|  3.83k|                                }
  211|  6.44k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 2.14k, False: 4.29k]
  ------------------
  212|  2.14k|                                {
  213|  2.14k|                                    return OpCode::LHU;
  214|  2.14k|                                }
  215|  4.29k|                                break;
  216|       |
  217|  4.29k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 1.39k, False: 58.1k]
  ------------------
  218|  7.37k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 5.97k, False: 53.6k]
  ------------------
  219|  7.37k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 2.54k, False: 4.83k]
  ------------------
  220|  2.54k|                                {
  221|  2.54k|                                    return OpCode::LTD;
  222|  2.54k|                                }
  223|  4.83k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 3.41k, False: 1.41k]
  ------------------
  224|  3.41k|                                {
  225|  3.41k|                                    return OpCode::LTF;
  226|  3.41k|                                }
  227|  1.41k|                                break;
  228|       |
  229|  1.95k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 1.95k, False: 57.6k]
  ------------------
  230|  5.90k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 3.94k, False: 55.6k]
  ------------------
  231|  5.90k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 3.30k, False: 2.59k]
  ------------------
  232|  3.30k|                                {
  233|  3.30k|                                    return OpCode::LWU;
  234|  3.30k|                                }
  235|  2.59k|                                break;
  236|  59.5k|                        }
  237|  30.5k|                        break;
  238|       |
  239|  30.5k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 21.4k, False: 557k]
  ------------------
  240|  30.7k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 9.30k, False: 570k]
  ------------------
  241|  30.7k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 10.7k, False: 19.9k]
  ------------------
  242|  10.7k|                        {
  243|  10.7k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 4.48k, False: 6.30k]
  ------------------
  244|  4.48k|                            {
  245|  4.48k|                                return OpCode::NED;
  246|  4.48k|                            }
  247|  6.30k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 2.96k, False: 3.34k]
  ------------------
  248|  2.96k|                            {
  249|  2.96k|                                return OpCode::NEF;
  250|  2.96k|                            }
  251|  10.7k|                        }
  252|  19.9k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 9.13k, False: 10.7k]
  |  Branch (252:34): [True: 3.51k, False: 16.4k]
  |  Branch (252:50): [True: 3.51k, False: 5.62k]
  ------------------
  253|  3.51k|                        {
  254|  3.51k|                            return OpCode::NOP;
  255|  3.51k|                        }
  256|       |
  257|  19.7k|                        break;
  258|       |
  259|  19.7k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 6.07k, False: 573k]
  ------------------
  260|  25.4k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 19.3k, False: 559k]
  ------------------
  261|  25.4k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 11.0k, False: 14.4k]
  |  Branch (261:29): [True: 4.83k, False: 20.5k]
  |  Branch (261:45): [True: 4.83k, False: 6.16k]
  ------------------
  262|  4.83k|                        {
  263|  4.83k|                            return OpCode::ORI;
  264|  4.83k|                        }
  265|  20.5k|                        break;
  266|       |
  267|  74.8k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 74.8k, False: 504k]
  ------------------
  268|   105k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 30.6k, False: 548k]
  ------------------
  269|   105k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 11.0k, False: 94.4k]
  ------------------
  270|   105k|                        {
  271|  3.01k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 3.01k, False: 102k]
  ------------------
  272|  8.05k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 5.03k, False: 100k]
  ------------------
  273|  8.05k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 2.52k, False: 5.52k]
  ------------------
  274|  2.52k|                                {
  275|  2.52k|                                    return OpCode::SBU;
  276|  2.52k|                                }
  277|  5.52k|                                break;
  278|       |
  279|  9.37k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 9.37k, False: 96.0k]
  ------------------
  280|  11.7k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 2.38k, False: 103k]
  ------------------
  281|  11.7k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 3.94k, False: 7.81k]
  ------------------
  282|  3.94k|                                {
  283|  3.94k|                                    return OpCode::SEQ;
  284|  3.94k|                                }
  285|  7.81k|                                break;
  286|       |
  287|  12.9k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 12.9k, False: 92.5k]
  ------------------
  288|  17.4k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 4.48k, False: 100k]
  ------------------
  289|  17.4k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 4.23k, False: 13.1k]
  ------------------
  290|  4.23k|                                {
  291|  4.23k|                                    return OpCode::SGE;
  292|  4.23k|                                }
  293|  13.1k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 5.63k, False: 7.54k]
  ------------------
  294|  5.63k|                                {
  295|  5.63k|                                    return OpCode::SGT;
  296|  5.63k|                                }
  297|  7.54k|                                break;
  298|       |
  299|  7.54k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 1.38k, False: 104k]
  ------------------
  300|  5.61k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 4.23k, False: 101k]
  ------------------
  301|  5.61k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 3.86k, False: 1.75k]
  ------------------
  302|  3.86k|                                {
  303|  3.86k|                                    return OpCode::SHU;
  304|  3.86k|                                }
  305|  1.75k|                                break;
  306|       |
  307|  13.9k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 13.9k, False: 91.4k]
  ------------------
  308|  23.1k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 9.13k, False: 96.3k]
  ------------------
  309|  23.1k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 6.71k, False: 16.4k]
  ------------------
  310|  23.1k|                                {
  311|  2.05k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 2.05k, False: 21.0k]
  ------------------
  312|  3.30k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 1.25k, False: 21.8k]
  ------------------
  313|  3.30k|                                        return OpCode::SLA;
  314|       |
  315|    963|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 963, False: 22.1k]
  ------------------
  316|  2.42k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 1.46k, False: 21.6k]
  ------------------
  317|  2.42k|                                        return OpCode::SLE;
  318|       |
  319|  3.10k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 3.10k, False: 20.0k]
  ------------------
  320|  5.88k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 2.78k, False: 20.3k]
  ------------------
  321|  5.88k|                                        return OpCode::SLL;
  322|       |
  323|  3.48k|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 3.48k, False: 19.6k]
  ------------------
  324|  4.80k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 1.32k, False: 21.8k]
  ------------------
  325|  4.80k|                                        return OpCode::SLT;
  326|  23.1k|                                }
  327|  6.71k|                                break;
  328|       |
  329|  7.13k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 7.13k, False: 98.3k]
  ------------------
  330|  9.98k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 2.84k, False: 102k]
  ------------------
  331|  9.98k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 5.82k, False: 4.16k]
  ------------------
  332|  5.82k|                                {
  333|  5.82k|                                    return OpCode::SNE;
  334|  5.82k|                                }
  335|  4.16k|                                break;
  336|       |
  337|  4.16k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 1.22k, False: 104k]
  ------------------
  338|  6.38k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 5.15k, False: 100k]
  ------------------
  339|  6.38k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 2.20k, False: 4.18k]
  ------------------
  340|  2.20k|                                {
  341|  2.20k|                                    return OpCode::SRA;
  342|  2.20k|                                }
  343|  4.18k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 2.48k, False: 1.69k]
  ------------------
  344|  2.48k|                                {
  345|  2.48k|                                    return OpCode::SRL;
  346|  2.48k|                                }
  347|  1.69k|                                break;
  348|       |
  349|  3.29k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 3.29k, False: 102k]
  ------------------
  350|  6.06k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 2.77k, False: 102k]
  ------------------
  351|  6.06k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 3.34k, False: 2.71k]
  ------------------
  352|  3.34k|                                {
  353|  3.34k|                                    return OpCode::SUB;
  354|  3.34k|                                }
  355|  2.71k|                                break;
  356|       |
  357|  4.17k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 4.17k, False: 101k]
  ------------------
  358|  6.01k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 1.84k, False: 103k]
  ------------------
  359|  6.01k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 2.48k, False: 3.53k]
  ------------------
  360|  2.48k|                                {
  361|  2.48k|                                    return OpCode::SWU;
  362|  2.48k|                                }
  363|  3.53k|                                break;
  364|   105k|                        }
  365|       |
  366|  59.2k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 6.71k, False: 572k]
  ------------------
  367|  62.3k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 3.11k, False: 576k]
  ------------------
  368|  62.3k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 7.29k, False: 55.0k]
  |  Branch (368:29): [True: 2.80k, False: 59.5k]
  |  Branch (368:45): [True: 2.80k, False: 4.49k]
  ------------------
  369|  2.80k|                        {
  370|  2.80k|                            return OpCode::XOR;
  371|  2.80k|                        }
  372|  59.5k|                        break;
  373|   579k|                }
  374|   441k|                break;
  375|   579k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   549k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 549k, False: 2.61M]
  ------------------
  379|   549k|                char c1 = token[0];
  380|   549k|                char c2 = token[1];
  381|   549k|                char c3 = token[2];
  382|   549k|                char c4 = token[3];
  383|       |
  384|   549k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 199k, False: 350k]
  ------------------
  385|   549k|                {
  386|  36.1k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 36.1k, False: 513k]
  ------------------
  387|  38.8k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 2.68k, False: 546k]
  ------------------
  388|  38.8k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 6.43k, False: 32.3k]
  ------------------
  389|  38.8k|                        {
  390|  12.7k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 12.7k, False: 26.0k]
  ------------------
  391|  20.4k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 7.66k, False: 31.1k]
  ------------------
  392|  20.4k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 17.9k, False: 2.47k]
  ------------------
  393|  17.9k|                                {
  394|  17.9k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 3.19k, False: 14.7k]
  ------------------
  395|  17.9k|                                    {
  396|  1.62k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 1.62k, False: 16.3k]
  ------------------
  397|  4.50k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 2.87k, False: 15.0k]
  ------------------
  398|  4.50k|                                            return OpCode::ADDD;
  399|       |
  400|  2.13k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 2.13k, False: 15.8k]
  ------------------
  401|  3.47k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 1.34k, False: 16.6k]
  ------------------
  402|  3.47k|                                            return OpCode::ADDF;
  403|       |
  404|    897|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 897, False: 17.0k]
  ------------------
  405|  1.65k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 757, False: 17.2k]
  ------------------
  406|  1.65k|                                            return OpCode::ADDI;
  407|       |
  408|  3.99k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 3.99k, False: 13.9k]
  ------------------
  409|  5.13k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 1.14k, False: 16.8k]
  ------------------
  410|  5.13k|                                            return OpCode::ADDU;
  411|  17.9k|                                    }
  412|  17.9k|                                }
  413|  5.66k|                                break;
  414|       |
  415|  8.07k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 8.07k, False: 30.7k]
  ------------------
  416|  11.9k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 3.88k, False: 34.9k]
  ------------------
  417|  11.9k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 8.03k, False: 3.92k]
  |  Branch (417:37): [True: 2.30k, False: 9.65k]
  |  Branch (417:53): [True: 2.30k, False: 5.72k]
  ------------------
  418|  2.30k|                                {
  419|  2.30k|                                    return OpCode::ANDI;
  420|  2.30k|                                }
  421|       |
  422|  9.65k|                                break;
  423|  38.8k|                        }
  424|  21.7k|                        break;
  425|       |
  426|  26.7k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 26.7k, False: 522k]
  ------------------
  427|  28.3k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 1.56k, False: 547k]
  ------------------
  428|  28.3k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 7.88k, False: 20.4k]
  ------------------
  429|  28.3k|                        {
  430|  2.18k|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 2.18k, False: 26.1k]
  ------------------
  431|  6.16k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 3.98k, False: 24.3k]
  ------------------
  432|  6.16k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 4.36k, False: 1.80k]
  |  Branch (432:37): [True: 2.31k, False: 3.85k]
  |  Branch (432:53): [True: 2.31k, False: 2.04k]
  ------------------
  433|  2.31k|                                {
  434|  2.31k|                                    return OpCode::BEQZ;
  435|  2.31k|                                }
  436|  3.85k|                                break;
  437|       |
  438|  8.47k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 8.47k, False: 19.8k]
  ------------------
  439|  9.66k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 1.18k, False: 27.1k]
  ------------------
  440|  9.66k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 7.96k, False: 1.70k]
  ------------------
  441|  7.96k|                                {
  442|  7.96k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 2.07k, False: 5.88k]
  ------------------
  443|  2.07k|                                    {
  444|  2.07k|                                        return OpCode::BFPF;
  445|  2.07k|                                    }
  446|  5.88k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 2.39k, False: 3.48k]
  ------------------
  447|  2.39k|                                    {
  448|  2.39k|                                        return OpCode::BFPT;
  449|  2.39k|                                    }
  450|  7.96k|                                }
  451|  5.18k|                                break;
  452|       |
  453|  5.18k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 2.46k, False: 25.8k]
  ------------------
  454|  4.65k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 2.18k, False: 26.1k]
  ------------------
  455|  4.65k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 3.05k, False: 1.59k]
  |  Branch (455:37): [True: 1.58k, False: 3.06k]
  |  Branch (455:53): [True: 1.58k, False: 1.46k]
  ------------------
  456|  1.58k|                                {
  457|  1.58k|                                    return OpCode::BNEZ;
  458|  1.58k|                                }
  459|  28.3k|                        }
  460|  19.9k|                        break;
  461|       |
  462|  19.9k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 16.0k, False: 533k]
  ------------------
  463|  39.0k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 22.9k, False: 526k]
  ------------------
  464|  39.0k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 28.2k, False: 10.7k]
  |  Branch (464:29): [True: 22.1k, False: 16.8k]
  |  Branch (464:45): [True: 22.1k, False: 6.08k]
  ------------------
  465|  22.1k|                        {
  466|  22.1k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 6.57k, False: 15.5k]
  ------------------
  467|  22.1k|                            {
  468|  1.35k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 1.35k, False: 20.8k]
  ------------------
  469|  3.23k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 1.87k, False: 20.2k]
  ------------------
  470|  3.23k|                                    return OpCode::DIVD;
  471|       |
  472|  1.47k|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 1.47k, False: 20.6k]
  ------------------
  473|  2.93k|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 1.45k, False: 20.7k]
  ------------------
  474|  2.93k|                                    return OpCode::DIVF;
  475|       |
  476|  1.50k|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 1.50k, False: 20.6k]
  ------------------
  477|  3.16k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 1.66k, False: 20.5k]
  ------------------
  478|  3.16k|                                    return OpCode::DIVI;
  479|       |
  480|  4.13k|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 4.13k, False: 18.0k]
  ------------------
  481|  6.25k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 2.12k, False: 20.0k]
  ------------------
  482|  6.25k|                                    return OpCode::DIVU;
  483|  22.1k|                            }
  484|  22.1k|                        }
  485|  23.4k|                        break;
  486|       |
  487|  23.4k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 5.79k, False: 543k]
  ------------------
  488|  14.0k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 8.26k, False: 541k]
  ------------------
  489|  14.0k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 9.32k, False: 4.73k]
  |  Branch (489:29): [True: 3.69k, False: 10.3k]
  |  Branch (489:45): [True: 6.97k, False: 2.35k]
  |  Branch (489:61): [True: 3.69k, False: 3.28k]
  ------------------
  490|  3.69k|                        {
  491|  3.69k|                            return OpCode::HALT;
  492|  3.69k|                        }
  493|  10.3k|                        break;
  494|       |
  495|  20.4k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 20.4k, False: 528k]
  ------------------
  496|  25.6k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 5.25k, False: 544k]
  ------------------
  497|  25.6k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 9.40k, False: 16.2k]
  |  Branch (497:29): [True: 3.30k, False: 22.3k]
  |  Branch (497:45): [True: 6.58k, False: 2.82k]
  |  Branch (497:61): [True: 3.30k, False: 3.28k]
  ------------------
  498|  3.30k|                        {
  499|  3.30k|                            return OpCode::JALR;
  500|  3.30k|                        }
  501|  22.3k|                        break;
  502|       |
  503|  22.3k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 5.86k, False: 543k]
  ------------------
  504|  27.2k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 21.3k, False: 527k]
  ------------------
  505|  27.2k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 11.1k, False: 16.1k]
  |  Branch (505:29): [True: 7.86k, False: 19.3k]
  |  Branch (505:45): [True: 7.86k, False: 3.25k]
  ------------------
  506|  7.86k|                        {
  507|  7.86k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 1.99k, False: 5.86k]
  ------------------
  508|  1.99k|                            {
  509|  1.99k|                                return OpCode::MOVD;
  510|  1.99k|                            }
  511|  5.86k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 3.80k, False: 2.06k]
  ------------------
  512|  3.80k|                            {
  513|  3.80k|                                return OpCode::MOVF;
  514|  3.80k|                            }
  515|  7.86k|                        }
  516|  19.3k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 11.4k, False: 7.95k]
  |  Branch (516:34): [True: 3.39k, False: 15.9k]
  |  Branch (516:50): [True: 4.63k, False: 6.79k]
  |  Branch (516:66): [True: 3.39k, False: 1.24k]
  ------------------
  517|  3.39k|                        {
  518|  3.39k|                            return OpCode::MULT;
  519|  3.39k|                        }
  520|  18.0k|                        break;
  521|       |
  522|   106k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 106k, False: 443k]
  ------------------
  523|   143k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 37.3k, False: 511k]
  ------------------
  524|   143k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 19.1k, False: 124k]
  ------------------
  525|   143k|                        {
  526|  5.83k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 5.83k, False: 137k]
  ------------------
  527|  13.2k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 7.40k, False: 136k]
  ------------------
  528|  13.2k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 7.97k, False: 5.27k]
  ------------------
  529|  7.97k|                                {
  530|  7.97k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 3.18k, False: 4.78k]
  ------------------
  531|  3.18k|                                    {
  532|  3.18k|                                        return OpCode::SEQI;
  533|  3.18k|                                    }
  534|  4.78k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 2.37k, False: 2.40k]
  ------------------
  535|  2.37k|                                    {
  536|  2.37k|                                        return OpCode::SEQU;
  537|  2.37k|                                    }
  538|  7.97k|                                }
  539|  7.67k|                                break;
  540|       |
  541|  26.4k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 26.4k, False: 117k]
  ------------------
  542|  28.2k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 1.71k, False: 141k]
  ------------------
  543|  28.2k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 8.36k, False: 19.8k]
  ------------------
  544|  8.36k|                                {
  545|  8.36k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 1.88k, False: 6.48k]
  ------------------
  546|  1.88k|                                    {
  547|  1.88k|                                        return OpCode::SGEI;
  548|  1.88k|                                    }
  549|  6.48k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 3.26k, False: 3.21k]
  ------------------
  550|  3.26k|                                    {
  551|  3.26k|                                        return OpCode::SGEU;
  552|  3.26k|                                    }
  553|  8.36k|                                }
  554|  19.8k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 11.1k, False: 8.65k]
  ------------------
  555|  11.1k|                                {
  556|  11.1k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 2.61k, False: 8.58k]
  ------------------
  557|  2.61k|                                    {
  558|  2.61k|                                        return OpCode::SGTI;
  559|  2.61k|                                    }
  560|  8.58k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 3.39k, False: 5.19k]
  ------------------
  561|  3.39k|                                    {
  562|  3.39k|                                        return OpCode::SGTU;
  563|  3.39k|                                    }
  564|  11.1k|                                }
  565|  17.0k|                                break;
  566|       |
  567|  24.6k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 24.6k, False: 118k]
  ------------------
  568|  36.8k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 12.1k, False: 131k]
  ------------------
  569|  36.8k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 5.94k, False: 30.8k]
  ------------------
  570|  36.8k|                                {
  571|  2.42k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 2.42k, False: 34.4k]
  ------------------
  572|  4.37k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 1.94k, False: 34.8k]
  ------------------
  573|  4.37k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 2.29k, False: 2.08k]
  ------------------
  574|  2.29k|                                        {
  575|  2.29k|                                            return OpCode::SLAI;
  576|  2.29k|                                        }
  577|  2.08k|                                        break;
  578|       |
  579|  2.08k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 1.74k, False: 35.0k]
  ------------------
  580|  8.90k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 7.16k, False: 29.6k]
  ------------------
  581|  8.90k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 2.08k, False: 6.82k]
  ------------------
  582|  2.08k|                                        {
  583|  2.08k|                                            return OpCode::SLEI;
  584|  2.08k|                                        }
  585|  6.82k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 3.66k, False: 3.15k]
  ------------------
  586|  3.66k|                                        {
  587|  3.66k|                                            return OpCode::SLEU;
  588|  3.66k|                                        }
  589|  3.15k|                                        break;
  590|       |
  591|  6.91k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 6.91k, False: 29.9k]
  ------------------
  592|  7.84k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 930, False: 35.9k]
  ------------------
  593|  7.84k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 6.21k, False: 1.62k]
  ------------------
  594|  6.21k|                                        {
  595|  6.21k|                                            return OpCode::SLLI;
  596|  6.21k|                                        }
  597|  1.62k|                                        break;
  598|       |
  599|  2.40k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 2.40k, False: 34.4k]
  ------------------
  600|  9.76k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 7.36k, False: 29.4k]
  ------------------
  601|  9.76k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 4.16k, False: 5.59k]
  ------------------
  602|  4.16k|                                        {
  603|  4.16k|                                            return OpCode::SLTI;
  604|  4.16k|                                        }
  605|  5.59k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 2.87k, False: 2.71k]
  ------------------
  606|  2.87k|                                        {
  607|  2.87k|                                            return OpCode::SLTU;
  608|  2.87k|                                        }
  609|  2.71k|                                        break;
  610|  36.8k|                                }
  611|       |
  612|  28.5k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 13.0k, False: 130k]
  ------------------
  613|  31.9k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 3.43k, False: 140k]
  ------------------
  614|  31.9k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 13.1k, False: 18.7k]
  ------------------
  615|  13.1k|                                {
  616|  13.1k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 2.21k, False: 10.9k]
  ------------------
  617|  2.21k|                                    {
  618|  2.21k|                                        return OpCode::SNEI;
  619|  2.21k|                                    }
  620|  10.9k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 1.88k, False: 9.09k]
  ------------------
  621|  1.88k|                                    {
  622|  1.88k|                                        return OpCode::SNEU;
  623|  1.88k|                                    }
  624|  13.1k|                                }
  625|  27.8k|                                break;
  626|       |
  627|  27.8k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 2.26k, False: 141k]
  ------------------
  628|  12.2k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 10.0k, False: 133k]
  ------------------
  629|  12.2k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 6.25k, False: 6.02k]
  |  Branch (629:37): [True: 2.57k, False: 9.70k]
  |  Branch (629:53): [True: 2.57k, False: 3.68k]
  ------------------
  630|  2.57k|                                {
  631|  2.57k|                                    return OpCode::SRAI;
  632|  2.57k|                                }
  633|  9.70k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 4.74k, False: 4.95k]
  |  Branch (633:42): [True: 3.24k, False: 6.45k]
  |  Branch (633:58): [True: 3.24k, False: 1.50k]
  ------------------
  634|  3.24k|                                {
  635|  3.24k|                                    return OpCode::SRLI;
  636|  3.24k|                                }
  637|  6.45k|                                break;
  638|       |
  639|  8.19k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 8.19k, False: 135k]
  ------------------
  640|  17.4k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 9.27k, False: 134k]
  ------------------
  641|  17.4k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 14.8k, False: 2.56k]
  ------------------
  642|  14.8k|                                {
  643|  14.8k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 3.31k, False: 11.5k]
  ------------------
  644|  14.8k|                                    {
  645|    839|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 839, False: 14.0k]
  ------------------
  646|  1.94k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 1.10k, False: 13.7k]
  ------------------
  647|  1.94k|                                            return OpCode::SUBD;
  648|       |
  649|  1.07k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 1.07k, False: 13.8k]
  ------------------
  650|  2.67k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 1.60k, False: 13.2k]
  ------------------
  651|  2.67k|                                            return OpCode::SUBF;
  652|       |
  653|  1.28k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 1.28k, False: 13.6k]
  ------------------
  654|  3.07k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 1.78k, False: 13.1k]
  ------------------
  655|  3.07k|                                            return OpCode::SUBI;
  656|       |
  657|  2.04k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 2.04k, False: 12.8k]
  ------------------
  658|  3.88k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 1.84k, False: 13.0k]
  ------------------
  659|  3.88k|                                            return OpCode::SUBU;
  660|  14.8k|                                    }
  661|  14.8k|                                }
  662|  5.88k|                                break;
  663|   143k|                        }
  664|  84.1k|                        break;
  665|       |
  666|  84.1k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 13.4k, False: 535k]
  ------------------
  667|  19.0k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 5.61k, False: 543k]
  ------------------
  668|  19.0k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 8.97k, False: 10.0k]
  |  Branch (668:29): [True: 3.55k, False: 15.5k]
  |  Branch (668:45): [True: 7.24k, False: 1.73k]
  |  Branch (668:61): [True: 3.55k, False: 3.68k]
  ------------------
  669|  3.55k|                        {
  670|  3.55k|                            return OpCode::TRAP;
  671|  3.55k|                        }
  672|  15.5k|                        break;
  673|  15.5k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 11.9k, False: 537k]
  ------------------
  674|  14.1k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 2.26k, False: 547k]
  ------------------
  675|  14.1k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 9.67k, False: 4.51k]
  |  Branch (675:29): [True: 2.76k, False: 11.4k]
  |  Branch (675:45): [True: 6.66k, False: 3.00k]
  |  Branch (675:61): [True: 2.76k, False: 3.89k]
  ------------------
  676|  2.76k|                        {
  677|  2.76k|                            return OpCode::XORI;
  678|  2.76k|                        }
  679|  11.4k|                        break;
  680|   549k|                }
  681|   426k|                break;
  682|   549k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|   426k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 336k, False: 2.83M]
  ------------------
  686|   336k|                char c1 = token[0];
  687|   336k|                char c2 = token[1];
  688|   336k|                char c3 = token[2];
  689|   336k|                char c4 = token[3];
  690|   336k|                char c5 = token[4];
  691|       |
  692|   336k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 143k, False: 193k]
  ------------------
  693|   336k|                {
  694|  21.2k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 21.2k, False: 315k]
  ------------------
  695|  25.1k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 3.93k, False: 332k]
  ------------------
  696|  25.1k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 14.0k, False: 11.1k]
  |  Branch (696:29): [True: 2.21k, False: 22.9k]
  |  Branch (696:45): [True: 10.5k, False: 3.45k]
  |  Branch (696:61): [True: 8.44k, False: 2.12k]
  |  Branch (696:77): [True: 2.21k, False: 6.22k]
  ------------------
  697|  2.21k|                        {
  698|  2.21k|                            return OpCode::ADDUI;
  699|  2.21k|                        }
  700|  22.9k|                        break;
  701|       |
  702|  22.9k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 4.21k, False: 332k]
  ------------------
  703|  23.7k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 19.4k, False: 317k]
  ------------------
  704|  23.7k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 18.8k, False: 4.82k]
  |  Branch (704:29): [True: 2.17k, False: 21.5k]
  |  Branch (704:45): [True: 17.8k, False: 1.02k]
  |  Branch (704:61): [True: 8.49k, False: 9.35k]
  |  Branch (704:77): [True: 2.17k, False: 6.32k]
  ------------------
  705|  2.17k|                        {
  706|  2.17k|                            return OpCode::DIVUI;
  707|  2.17k|                        }
  708|  21.5k|                        break;
  709|       |
  710|  21.5k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 12.6k, False: 324k]
  ------------------
  711|  35.0k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 22.3k, False: 314k]
  ------------------
  712|  35.0k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 25.8k, False: 9.14k]
  |  Branch (712:29): [True: 15.4k, False: 19.5k]
  |  Branch (712:45): [True: 17.6k, False: 8.22k]
  |  Branch (712:61): [True: 15.4k, False: 2.21k]
  ------------------
  713|  15.4k|                        {
  714|  15.4k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 3.48k, False: 11.9k]
  ------------------
  715|  15.4k|                            {
  716|  1.63k|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 1.63k, False: 13.7k]
  ------------------
  717|  2.85k|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 1.21k, False: 14.2k]
  ------------------
  718|  2.85k|                                    return OpCode::MULTD;
  719|       |
  720|  1.07k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 1.07k, False: 14.3k]
  ------------------
  721|  3.14k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 2.06k, False: 13.3k]
  ------------------
  722|  3.14k|                                    return OpCode::MULTF;
  723|       |
  724|    985|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 985, False: 14.4k]
  ------------------
  725|  1.92k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 939, False: 14.4k]
  ------------------
  726|  1.92k|                                    return OpCode::MULTI;
  727|       |
  728|  1.09k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 1.09k, False: 14.3k]
  ------------------
  729|  4.01k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 2.91k, False: 12.5k]
  ------------------
  730|  4.01k|                                    return OpCode::MULTU;
  731|  15.4k|                            }
  732|  15.4k|                        }
  733|  23.0k|                        break;
  734|       |
  735|  73.7k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 73.7k, False: 263k]
  ------------------
  736|   109k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 36.1k, False: 300k]
  ------------------
  737|   109k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 14.5k, False: 95.2k]
  ------------------
  738|   109k|                        {
  739|  5.14k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 5.14k, False: 104k]
  ------------------
  740|  12.1k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 6.98k, False: 102k]
  ------------------
  741|  12.1k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 7.91k, False: 4.22k]
  |  Branch (741:37): [True: 2.61k, False: 9.52k]
  |  Branch (741:53): [True: 5.14k, False: 2.76k]
  |  Branch (741:69): [True: 2.61k, False: 2.53k]
  ------------------
  742|  2.61k|                                {
  743|  2.61k|                                    return OpCode::SEQUI;
  744|  2.61k|                                }
  745|  9.52k|                                break;
  746|       |
  747|  25.3k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 25.3k, False: 84.4k]
  ------------------
  748|  27.6k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 2.28k, False: 107k]
  ------------------
  749|  27.6k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 6.47k, False: 21.2k]
  |  Branch (749:37): [True: 2.87k, False: 24.8k]
  |  Branch (749:53): [True: 4.69k, False: 1.77k]
  |  Branch (749:69): [True: 2.87k, False: 1.82k]
  ------------------
  750|  2.87k|                                {
  751|  2.87k|                                    return OpCode::SGEUI;
  752|  2.87k|                                }
  753|  24.8k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 12.7k, False: 12.0k]
  |  Branch (753:42): [True: 2.12k, False: 22.6k]
  |  Branch (753:58): [True: 3.90k, False: 8.87k]
  |  Branch (753:74): [True: 2.12k, False: 1.78k]
  ------------------
  754|  2.12k|                                {
  755|  2.12k|                                    return OpCode::SGTUI;
  756|  2.12k|                                }
  757|  22.6k|                                break;
  758|       |
  759|  22.6k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 16.6k, False: 93.1k]
  ------------------
  760|  28.4k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 11.7k, False: 98.0k]
  ------------------
  761|  28.4k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 10.3k, False: 18.0k]
  |  Branch (761:37): [True: 1.90k, False: 26.5k]
  |  Branch (761:53): [True: 6.77k, False: 3.61k]
  |  Branch (761:69): [True: 1.90k, False: 4.87k]
  ------------------
  762|  1.90k|                                {
  763|  1.90k|                                    return OpCode::SLEUI;
  764|  1.90k|                                }
  765|  26.5k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 9.04k, False: 17.4k]
  |  Branch (765:42): [True: 2.19k, False: 24.3k]
  |  Branch (765:58): [True: 4.52k, False: 4.52k]
  |  Branch (765:74): [True: 2.19k, False: 2.33k]
  ------------------
  766|  2.19k|                                {
  767|  2.19k|                                    return OpCode::SLTUI;
  768|  2.19k|                                }
  769|  24.3k|                                break;
  770|       |
  771|  24.3k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 7.45k, False: 102k]
  ------------------
  772|  10.5k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 3.11k, False: 106k]
  ------------------
  773|  10.5k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 5.04k, False: 5.52k]
  |  Branch (773:37): [True: 2.02k, False: 8.54k]
  |  Branch (773:53): [True: 3.03k, False: 2.00k]
  |  Branch (773:69): [True: 2.02k, False: 1.01k]
  ------------------
  774|  2.02k|                                {
  775|  2.02k|                                    return OpCode::SNEUI;
  776|  2.02k|                                }
  777|  8.54k|                                break;
  778|       |
  779|  8.54k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 4.14k, False: 105k]
  ------------------
  780|  16.4k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 12.3k, False: 97.5k]
  ------------------
  781|  16.4k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 13.9k, False: 2.49k]
  |  Branch (781:37): [True: 3.27k, False: 13.1k]
  |  Branch (781:53): [True: 4.75k, False: 9.19k]
  |  Branch (781:69): [True: 3.27k, False: 1.47k]
  ------------------
  782|  3.27k|                                {
  783|  3.27k|                                    return OpCode::SUBUI;
  784|  3.27k|                                }
  785|  13.1k|                                break;
  786|   109k|                        }
  787|       |
  788|  92.8k|                        break;
  789|   336k|                }
  790|       |
  791|   303k|                break;
  792|   336k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|   303k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 179k, False: 2.98M]
  ------------------
  796|   179k|                char c1 = token[0];
  797|   179k|                char c2 = token[1];
  798|   179k|                char c3 = token[2];
  799|   179k|                char c4 = token[3];
  800|   179k|                char c5 = token[4];
  801|   179k|                char c6 = token[5];
  802|       |
  803|   179k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 26.4k, False: 152k]
  |  Branch (803:21): [True: 20.6k, False: 158k]
  |  Branch (803:37): [True: 24.9k, False: 1.53k]
  |  Branch (803:53): [True: 20.6k, False: 4.29k]
  ------------------
  804|  20.6k|                {
  805|  20.6k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 2.19k, False: 18.4k]
  ------------------
  806|  20.6k|                    {
  807|  3.73k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 3.73k, False: 16.9k]
  ------------------
  808|  4.64k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 904, False: 19.7k]
  ------------------
  809|  4.64k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 3.58k, False: 1.05k]
  ------------------
  810|  3.58k|                            {
  811|  3.58k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 1.36k, False: 2.22k]
  ------------------
  812|  1.36k|                                {
  813|  1.36k|                                    return OpCode::CVTD2F;
  814|  1.36k|                                }
  815|  2.22k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 1.39k, False: 824]
  ------------------
  816|  1.39k|                                {
  817|  1.39k|                                    return OpCode::CVTD2I;
  818|  1.39k|                                }
  819|  3.58k|                            }
  820|  1.87k|                            break;
  821|       |
  822|  6.14k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 6.14k, False: 14.4k]
  ------------------
  823|  7.16k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 1.01k, False: 19.6k]
  ------------------
  824|  7.16k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 4.88k, False: 2.28k]
  ------------------
  825|  4.88k|                            {
  826|  4.88k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 2.09k, False: 2.79k]
  ------------------
  827|  2.09k|                                {
  828|  2.09k|                                    return OpCode::CVTF2D;
  829|  2.09k|                                }
  830|  2.79k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 1.35k, False: 1.43k]
  ------------------
  831|  1.35k|                                {
  832|  1.35k|                                    return OpCode::CVTF2I;
  833|  1.35k|                                }
  834|  4.88k|                            }
  835|  3.72k|                            break;
  836|       |
  837|  3.72k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 1.14k, False: 19.4k]
  ------------------
  838|  6.64k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 5.49k, False: 15.1k]
  ------------------
  839|  6.64k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 4.85k, False: 1.78k]
  ------------------
  840|  4.85k|                            {
  841|  4.85k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 1.52k, False: 3.32k]
  ------------------
  842|  1.52k|                                {
  843|  1.52k|                                    return OpCode::CVTI2D;
  844|  1.52k|                                }
  845|  3.32k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 1.57k, False: 1.75k]
  ------------------
  846|  1.57k|                                {
  847|  1.57k|                                    return OpCode::CVTI2F;
  848|  1.57k|                                }
  849|  4.85k|                            }
  850|  20.6k|                    }
  851|  20.6k|                }
  852|   158k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 33.7k, False: 124k]
  |  Branch (852:26): [True: 3.62k, False: 155k]
  |  Branch (852:42): [True: 21.2k, False: 12.4k]
  |  Branch (852:58): [True: 15.3k, False: 5.99k]
  |  Branch (852:74): [True: 12.9k, False: 2.32k]
  ------------------
  853|   158k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 7.61k, False: 5.35k]
  |  Branch (853:42): [True: 3.62k, False: 3.98k]
  ------------------
  854|  3.62k|                {
  855|  3.62k|                    return OpCode::MULTUI;
  856|  3.62k|                }
  857|   166k|                break;
  858|   179k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|   166k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 111k, False: 3.05M]
  ------------------
  862|   111k|                char c1 = token[0];
  863|   111k|                char c2 = token[1];
  864|   111k|                char c3 = token[2];
  865|   111k|                char c4 = token[3];
  866|   111k|                char c5 = token[4];
  867|   111k|                char c6 = token[5];
  868|   111k|                char c7 = token[6];
  869|       |
  870|   111k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 26.8k, False: 84.9k]
  |  Branch (870:21): [True: 19.2k, False: 92.5k]
  |  Branch (870:37): [True: 21.8k, False: 4.91k]
  |  Branch (870:53): [True: 19.2k, False: 2.61k]
  ------------------
  871|  19.2k|                {
  872|  19.2k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 10.4k, False: 8.85k]
  |  Branch (872:25): [True: 2.01k, False: 17.2k]
  |  Branch (872:41): [True: 4.14k, False: 6.28k]
  |  Branch (872:54): [True: 3.21k, False: 930]
  |  Branch (872:70): [True: 2.01k, False: 1.19k]
  ------------------
  873|  2.01k|                    {
  874|  2.01k|                        return OpCode::MOVI2FP;
  875|  2.01k|                    }
  876|  17.2k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 7.45k, False: 9.80k]
  |  Branch (876:30): [True: 1.84k, False: 15.4k]
  |  Branch (876:46): [True: 5.13k, False: 2.32k]
  |  Branch (876:62): [True: 2.90k, False: 2.22k]
  |  Branch (876:75): [True: 1.84k, False: 1.06k]
  ------------------
  877|  1.84k|                    {
  878|  1.84k|                        return OpCode::MOVFP2I;
  879|  1.84k|                    }
  880|  19.2k|                }
  881|   107k|                break;
  882|   111k|            }
  883|       |
  884|   295k|            default: {
  ------------------
  |  Branch (884:13): [True: 295k, False: 2.87M]
  ------------------
  885|   295k|                break;
  886|   111k|            }
  887|  3.16M|        }
  888|       |
  889|       |        // None found
  890|  2.69M|        return OpCode::NONE;
  891|  3.16M|    }
_ZN3dlx3iceEcc:
   17|  3.07M|    {
   18|  3.07M|        constexpr const char diff = 'a' - 'A';
   19|  3.07M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 668k, False: 2.41M]
  |  Branch (19:28): [True: 550k, False: 1.86M]
  ------------------
   20|  3.07M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  3.65M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  32.8k|    {
  193|  32.8k|        ParseError err;
  194|       |
  195|  32.8k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  32.8k|        err.m_LineNumber                           = line_number;
  197|  32.8k|        err.m_Column                               = column;
  198|  32.8k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  32.8k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  32.8k|        return err;
  202|  32.8k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  32.8k|    {
  207|  32.8k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  32.8k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  32.8k|                                                         actual_type);
  210|  32.8k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|  1.48k|    {
  216|  1.48k|        ParseError err;
  217|       |
  218|  1.48k|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|  1.48k|        err.m_LineNumber        = line_number;
  220|  1.48k|        err.m_Column            = column;
  221|  1.48k|        err.invalid_number.text = text;
  222|       |
  223|  1.48k|        return err;
  224|  1.48k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|  1.48k|    {
  228|  1.48k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|  1.48k|                                                token.GetColumn().unsafe(), token.GetText());
  230|  1.48k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|     14|    {
  235|     14|        ParseError err;
  236|       |
  237|     14|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|     14|        err.m_LineNumber = line_number;
  239|     14|        err.m_Column     = column;
  240|       |
  241|     14|        return err;
  242|     14|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|     14|    {
  247|     14|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|     14|                                                                     token.GetColumn().unsafe());
  249|     14|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|  1.87M|    {
  255|  1.87M|        ParseError err;
  256|       |
  257|  1.87M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|  1.87M|        err.m_LineNumber                   = line_number;
  259|  1.87M|        err.m_Column                       = column;
  260|  1.87M|        err.unexpected_token.expected_type = expected_type;
  261|  1.87M|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|  1.87M|        return err;
  264|  1.87M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|  1.87M|    {
  269|  1.87M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|  1.87M|                                                  token.GetColumn().unsafe(), expected_type,
  271|  1.87M|                                                  token.GetType());
  272|  1.87M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|   175k|    {
  277|   175k|        ParseError err;
  278|       |
  279|   175k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|   175k|        err.m_LineNumber                   = line_number;
  281|   175k|        err.m_Column                       = column;
  282|   175k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|   175k|        return err;
  285|   175k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|    742|    {
  289|    742|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|    742|                                                    token.GetColumn().unsafe(), token.GetText());
  291|    742|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|  1.02M|    {
  296|  1.02M|        ParseError err;
  297|       |
  298|  1.02M|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|  1.02M|        err.m_LineNumber                       = line_number;
  300|  1.02M|        err.m_Column                           = column;
  301|  1.02M|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|  1.02M|        return err;
  304|  1.02M|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|  1.02M|    {
  309|  1.02M|        return ConstructInvalidLabelIdentifierParseError(
  310|  1.02M|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|  1.02M|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|   232k|    {
  317|   232k|        ParseError err;
  318|       |
  319|   232k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|   232k|        err.m_LineNumber                     = line_number;
  321|   232k|        err.m_Column                         = column;
  322|   232k|        err.label_already_defined.label_name = label_name;
  323|   232k|        err.label_already_defined.at_line    = at_line;
  324|   232k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|   232k|        return err;
  327|   232k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|   232k|    {
  332|   232k|        return ConstructLabelAlreadyDefinedParseError(
  333|   232k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|   232k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|   232k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   130k|    {
  340|   130k|        ParseError err;
  341|       |
  342|   130k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   130k|        err.m_LineNumber = line_number;
  344|   130k|        err.m_Column     = column;
  345|       |
  346|   130k|        return err;
  347|   130k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   130k|    {
  352|   130k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   130k|                                                        token.GetColumn().unsafe());
  354|   130k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  56.1k|    {
  360|  56.1k|        ParseError err;
  361|       |
  362|  56.1k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  56.1k|        err.m_LineNumber               = line_number;
  364|  56.1k|        err.m_Column                   = column;
  365|  56.1k|        err.too_few_arguments.required = required;
  366|  56.1k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  56.1k|        return err;
  369|  56.1k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  56.1k|    {
  374|  56.1k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  56.1k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  56.1k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  57.0k|    {
  381|  57.0k|        ParseError err;
  382|       |
  383|  57.0k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  57.0k|        err.m_LineNumber           = line_number;
  385|  57.0k|        err.m_Column               = column;
  386|  57.0k|        err.empty_label.label_name = label_name;
  387|       |
  388|  57.0k|        return err;
  389|  57.0k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  57.0k|    {
  393|  57.0k|        return ConstructEmptyLabelParseError(
  394|  57.0k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  57.0k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 39.2k, False: 17.7k]
  ------------------
  396|  39.2k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  57.0k|                        token.GetText());
  398|  57.0k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  64.9k|    {
  403|  64.9k|        ParseError err;
  404|       |
  405|  64.9k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  64.9k|        err.m_LineNumber = line_number;
  407|  64.9k|        err.m_Column     = column;
  408|       |
  409|  64.9k|        return err;
  410|  64.9k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  64.9k|    {
  414|  64.9k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  64.9k|                                               token.GetColumn().unsafe());
  416|  64.9k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  3.65M|    {
   19|  3.65M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  3.65M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  35.2k|    {
  182|  35.2k|        ParsedProgram program;
  183|       |
  184|  35.2k|        program.m_Tokens = tokens;
  185|       |
  186|  35.2k|        phi::boolean line_has_instruction{false};
  187|  35.2k|        phi::usize   label_count{0u};
  188|       |
  189|  4.58M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 4.54M, False: 35.2k]
  ------------------
  190|  4.54M|        {
  191|  4.54M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  4.54M|            switch (current_token.GetType())
  196|  4.54M|            {
  197|       |                // Ignore comments
  198|  21.7k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 21.7k, False: 4.52M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  21.7k|                    break;
  201|       |
  202|   887k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 887k, False: 3.65M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   887k|                    line_has_instruction = false;
  205|   887k|                    break;
  206|       |
  207|  1.90M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 1.90M, False: 2.64M]
  ------------------
  208|  1.90M|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 411k, False: 1.49M]
  ------------------
  209|   411k|                    {
  210|   411k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|   411k|                                current_token, Token::Type::NewLine));
  212|   411k|                        break;
  213|   411k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|  1.49M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 649k, False: 842k]
  ------------------
  218|   649k|                    {
  219|   649k|                        program.AddParseError(
  220|   649k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   649k|                        break;
  222|   649k|                    }
  223|       |
  224|   842k|                    std::string_view label_name = current_token.GetText();
  225|   842k|                    label_name.remove_suffix(1);
  226|       |
  227|   842k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 174k, False: 667k]
  ------------------
  228|   174k|                    {
  229|   174k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|   174k|                                current_token.GetLineNumber().unsafe(),
  231|   174k|                                current_token.GetColumn().unsafe(), label_name));
  232|   174k|                        break;
  233|   174k|                    }
  234|       |
  235|   667k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 353k, False: 313k]
  ------------------
  236|   353k|                    {
  237|   353k|                        program.AddParseError(
  238|   353k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|   353k|                        break;
  240|   353k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|   313k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 232k, False: 81.6k]
  ------------------
  244|   232k|                    {
  245|       |                        // Find first defintions of label
  246|   232k|                        const Token* first_label_definition =
  247|   232k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   232k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|   232k|                                    {
  250|   232k|                                        std::string_view token_label_name = t.GetText();
  251|   232k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   232k|                                        if (token_label_name == label_name)
  254|   232k|                                        {
  255|   232k|                                            return true;
  256|   232k|                                        }
  257|   232k|                                    }
  258|       |
  259|   232k|                                    return false;
  260|   232k|                                });
  261|       |
  262|   232k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|   232k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|   232k|                                current_token, *first_label_definition));
  266|   232k|                        break;
  267|   232k|                    }
  268|       |
  269|  81.6k|                    program.m_JumpData[label_name] =
  270|  81.6k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  81.6k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  81.6k|                    break;
  277|   313k|                }
  278|       |
  279|   305k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 305k, False: 4.24M]
  ------------------
  280|   305k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 130k, False: 174k]
  ------------------
  281|   130k|                    {
  282|   130k|                        program.AddParseError(
  283|   130k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   130k|                        break;
  285|   130k|                    }
  286|       |
  287|   174k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|   174k|                    PHI_ASSERT(current_token.HasHint());
  291|   174k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|   174k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|   174k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|   174k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|   174k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|   174k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|   174k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|   174k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|   174k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   348k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 321k, False: 27.0k]
  ------------------
  313|   321k|                    {
  314|       |                        // Get next token
  315|   321k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 2.42k, False: 319k]
  ------------------
  316|  2.42k|                        {
  317|  2.42k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|  2.42k|                                    current_token, number_of_argument_required.unsafe(),
  319|  2.42k|                                    argument_num.unsafe()));
  320|  2.42k|                            break;
  321|  2.42k|                        }
  322|       |
  323|   319k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   319k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 140k, False: 178k]
  ------------------
  327|   140k|                        {
  328|   140k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 64.9k, False: 75.2k]
  ------------------
  329|  64.9k|                            {
  330|  64.9k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  64.9k|                            }
  332|       |
  333|   140k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|   140k|                            continue;
  336|   140k|                        }
  337|       |
  338|   178k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 53.7k, False: 125k]
  ------------------
  339|  53.7k|                        {
  340|  53.7k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  53.7k|                                    token, number_of_argument_required.unsafe(),
  342|  53.7k|                                    argument_num.unsafe()));
  343|  53.7k|                            break;
  344|  53.7k|                        }
  345|       |
  346|   125k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|   125k|                                parse_instruction_argument(
  348|   125k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|   125k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 91.6k, False: 33.5k]
  ------------------
  350|  91.6k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  91.6k|                            break;
  353|  91.6k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  33.5k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  33.5k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  33.5k|                        argument_num++;
  360|  33.5k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  33.5k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|   174k|                    program.m_Instructions.emplace_back(instruction);
  368|   174k|                    line_has_instruction = true;
  369|   174k|                    break;
  370|   305k|                }
  371|       |
  372|  1.42M|                default:
  ------------------
  |  Branch (372:17): [True: 1.42M, False: 3.11M]
  ------------------
  373|  1.42M|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|  1.42M|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 620k, False: 807k]
  ------------------
  375|   620k|                    {
  376|   620k|                        expected_token_type = Token::Type::NewLine;
  377|   620k|                    }
  378|       |
  379|  1.42M|                    program.AddParseError(
  380|  1.42M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|  1.42M|                    break;
  382|  4.54M|            }
  383|  4.54M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  35.2k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 12.0k, False: 23.1k]
  ------------------
  387|  12.0k|        {
  388|  96.9k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 84.8k, False: 12.0k]
  ------------------
  389|  84.8k|            {
  390|  84.8k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  84.8k|                const Token& token = *it;
  393|  84.8k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 57.0k, False: 27.8k]
  ------------------
  394|  57.0k|                {
  395|  57.0k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  57.0k|                    --label_count;
  397|  57.0k|                }
  398|  84.8k|            }
  399|  12.0k|        }
  400|       |
  401|  35.2k|        return program;
  402|  35.2k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  35.2k|    {
  406|  35.2k|        TokenStream tokens = Tokenize(source);
  407|  35.2k|        return Parse(tokens);
  408|  35.2k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|   125k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|   125k|        switch (token.GetType())
   38|   125k|        {
   39|  8.90k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 8.90k, False: 116k]
  ------------------
   40|  8.90k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 3.32k, False: 5.58k]
  ------------------
   41|  8.90k|                                          ArgumentType::AddressDisplacement))
   42|  3.32k|                {
   43|  3.32k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  3.32k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  3.32k|                    return {};
   47|  3.32k|                }
   48|       |
   49|       |                // Get address displacement
   50|  5.58k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  5.58k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  5.58k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 14, False: 5.56k]
  ------------------
   55|     14|                {
   56|     14|                    program.AddParseError(
   57|     14|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|     14|                    return {};
   59|     14|                }
   60|       |
   61|  5.56k|                auto         it           = tokens.current_position();
   62|  5.56k|                const Token& first_token  = tokens.consume();
   63|  5.56k|                const Token& second_token = tokens.consume();
   64|  5.56k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  5.56k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 992, False: 4.57k]
  ------------------
   67|    992|                {
   68|    992|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|    992|                            first_token, Token::Type::OpenBracket));
   70|    992|                    return {};
   71|    992|                }
   72|       |
   73|       |                // Second token is the register
   74|  4.57k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 1.41k, False: 3.16k]
  ------------------
   75|  1.41k|                {
   76|  1.41k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|  1.41k|                            second_token, Token::Type::RegisterInt));
   78|  1.41k|                    return {};
   79|  1.41k|                }
   80|       |
   81|  3.16k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 1.77k, False: 1.39k]
  ------------------
   82|  1.77k|                {
   83|  1.77k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|  1.77k|                            third_token, Token::Type::ClosingBracket));
   85|  1.77k|                    return {};
   86|  1.77k|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|  1.39k|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|  1.39k|                return ConstructInstructionArgumentAddressDisplacement(
   95|  1.39k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|  3.16k|            }
   97|  6.69k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 6.69k, False: 118k]
  ------------------
   98|  6.69k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 1.79k, False: 4.89k]
  ------------------
   99|  1.79k|                {
  100|  1.79k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  1.79k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  1.79k|                    return {};
  103|  1.79k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  4.89k|                return ConstructInstructionArgumentRegisterInt(
  109|  4.89k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  6.69k|            }
  111|  3.88k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 3.88k, False: 121k]
  ------------------
  112|  3.88k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 2.29k, False: 1.58k]
  ------------------
  113|  2.29k|                {
  114|  2.29k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  2.29k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  2.29k|                    return {};
  117|  2.29k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  1.58k|                return ConstructInstructionArgumentRegisterFloat(
  123|  1.58k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  3.88k|            }
  125|    742|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 742, False: 124k]
  ------------------
  126|    742|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|    742|                return {};
  129|  3.88k|            }
  130|  71.4k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 71.4k, False: 53.8k]
  ------------------
  131|       |                // Parse as Label
  132|  71.4k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 23.8k, False: 47.6k]
  ------------------
  133|  23.8k|                {
  134|  23.8k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  23.8k|                            token, expected_argument_type, ArgumentType::Label));
  136|  23.8k|                    return {};
  137|  23.8k|                }
  138|       |
  139|  47.6k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 47.6k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  47.6k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 23.3k, False: 24.3k]
  ------------------
  146|  23.3k|                {
  147|  23.3k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  23.3k|                    return {};
  149|  23.3k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  24.3k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  47.6k|            }
  155|  4.52k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 4.52k, False: 120k]
  ------------------
  156|  4.52k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 1.65k, False: 2.86k]
  ------------------
  157|  1.65k|                {
  158|  1.65k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  1.65k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  1.65k|                    return {};
  161|  1.65k|                }
  162|       |
  163|  2.86k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 1.38k, False: 1.48k]
  ------------------
  164|  1.38k|                {
  165|  1.38k|                    return ConstructInstructionArgumentImmediateValue(
  166|  1.38k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  1.38k|                }
  168|       |
  169|  1.48k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|  1.48k|                return {};
  171|  2.86k|            }
  172|       |
  173|  29.0k|            default:
  ------------------
  |  Branch (173:13): [True: 29.0k, False: 96.1k]
  ------------------
  174|  29.0k|                program.AddParseError(
  175|  29.0k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  29.0k|                return {};
  177|   125k|        }
  178|   125k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  4.94M|                                tokens.find_first_token_if([&](const Token& t) {
  248|  4.94M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 2.74M, False: 2.19M]
  ------------------
  249|  2.74M|                                    {
  250|  2.74M|                                        std::string_view token_label_name = t.GetText();
  251|  2.74M|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  2.74M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 232k, False: 2.51M]
  ------------------
  254|   232k|                                        {
  255|   232k|                                            return true;
  256|   232k|                                        }
  257|  2.74M|                                    }
  258|       |
  259|  4.70M|                                    return false;
  260|  4.94M|                                });

_ZN3dlx9ProcessorC2Ev:
   63|      1|    {
   64|       |        // Mark R0 as ready only
   65|      1|        m_IntRegisters[0].SetReadOnly(true);
   66|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  352|    162|    {
  353|    162|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (353:13): [True: 0, False: 162]
  ------------------
  354|      0|        {
  355|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  356|      0|            return false;
  357|      0|        }
  358|       |
  359|    162|        m_CurrentProgram = &program;
  360|       |
  361|    162|        m_ProgramCounter               = 0u;
  362|    162|        m_Halted                       = false;
  363|    162|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  364|    162|        m_LastRaisedException          = Exception::None;
  365|    162|        m_CurrentStepCount             = 0u;
  366|       |
  367|    162|        return true;
  368|    162|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  3.20M|    {
   14|  3.20M|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 587k, False: 2.61M]
  ------------------
   15|   587k|        {
   16|   587k|            char first_char = token[0];
   17|   587k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 27.6k, False: 559k]
  |  Branch (17:38): [True: 14.2k, False: 545k]
  ------------------
   18|  41.9k|            {
   19|  41.9k|                char second_char = token[1];
   20|  41.9k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 35.7k, False: 6.19k]
  |  Branch (20:43): [True: 16.1k, False: 19.5k]
  ------------------
   21|  16.1k|                {
   22|  16.1k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  16.1k|                }
   24|  41.9k|            }
   25|   587k|        }
   26|  2.61M|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 591k, False: 2.02M]
  ------------------
   27|   591k|        {
   28|   591k|            char first_char = token[0];
   29|   591k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 24.7k, False: 566k]
  |  Branch (29:38): [True: 5.11k, False: 561k]
  ------------------
   30|  29.8k|            {
   31|  29.8k|                char second_char = token[1];
   32|  29.8k|                char third_char  = token[2];
   33|       |
   34|  29.8k|                switch (second_char)
   35|  29.8k|                {
   36|  3.98k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 3.98k, False: 25.8k]
  ------------------
   37|  3.98k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 2.94k, False: 1.04k]
  |  Branch (37:50): [True: 1.22k, False: 1.71k]
  ------------------
   38|  1.22k|                        {
   39|  1.22k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  1.22k|                        }
   41|  2.76k|                        break;
   42|  3.98k|                    }
   43|  7.04k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 7.04k, False: 22.8k]
  ------------------
   44|  7.04k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 6.06k, False: 974]
  |  Branch (44:50): [True: 4.23k, False: 1.83k]
  ------------------
   45|  4.23k|                        {
   46|  4.23k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  4.23k|                        }
   48|  2.81k|                        break;
   49|  7.04k|                    }
   50|  3.74k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 3.74k, False: 26.1k]
  ------------------
   51|  3.74k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 1.47k, False: 2.27k]
  |  Branch (51:50): [True: 1.05k, False: 1.22k]
  ------------------
   52|  2.52k|                        {
   53|  2.52k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  2.52k|                        }
   55|  1.22k|                        break;
   56|  3.74k|                    }
   57|  15.1k|                    default: {
  ------------------
  |  Branch (57:21): [True: 15.1k, False: 14.7k]
  ------------------
   58|  15.1k|                        break;
   59|  3.74k|                    }
   60|  29.8k|                }
   61|  29.8k|            }
   62|   591k|        }
   63|       |
   64|  3.18M|        return IntRegisterID::None;
   65|  3.20M|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|  3.18M|    {
   69|  3.18M|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 571k, False: 2.61M]
  ------------------
   70|   571k|        {
   71|   571k|            char first_char = token[0];
   72|   571k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 11.0k, False: 560k]
  |  Branch (72:38): [True: 13.5k, False: 546k]
  ------------------
   73|  24.5k|            {
   74|  24.5k|                char second_char = token[1];
   75|  24.5k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 22.4k, False: 2.03k]
  |  Branch (75:43): [True: 9.51k, False: 12.9k]
  ------------------
   76|  9.51k|                {
   77|  9.51k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  9.51k|                }
   79|  24.5k|            }
   80|   571k|        }
   81|  2.61M|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 583k, False: 2.02M]
  ------------------
   82|   583k|        {
   83|   583k|            char first_char = token[0];
   84|   583k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 14.0k, False: 569k]
  |  Branch (84:38): [True: 4.44k, False: 565k]
  ------------------
   85|  18.4k|            {
   86|  18.4k|                char second_char = token[1];
   87|  18.4k|                char third_char  = token[2];
   88|       |
   89|  18.4k|                switch (second_char)
   90|  18.4k|                {
   91|  5.52k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 5.52k, False: 12.9k]
  ------------------
   92|  5.52k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 3.90k, False: 1.61k]
  |  Branch (92:50): [True: 1.20k, False: 2.70k]
  ------------------
   93|  1.20k|                        {
   94|  1.20k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  1.20k|                        }
   96|  4.31k|                        break;
   97|  5.52k|                    }
   98|  4.31k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 3.98k, False: 14.4k]
  ------------------
   99|  3.98k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 3.04k, False: 949]
  |  Branch (99:50): [True: 1.46k, False: 1.57k]
  ------------------
  100|  1.46k|                        {
  101|  1.46k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  1.46k|                        }
  103|  2.52k|                        break;
  104|  3.98k|                    }
  105|  4.11k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 4.11k, False: 14.3k]
  ------------------
  106|  4.11k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 1.13k, False: 2.97k]
  |  Branch (106:50): [True: 618, False: 2.35k]
  ------------------
  107|  1.75k|                        {
  108|  1.75k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  1.75k|                        }
  110|  2.35k|                        break;
  111|  4.11k|                    }
  112|  4.83k|                    default: {
  ------------------
  |  Branch (112:21): [True: 4.83k, False: 13.6k]
  ------------------
  113|  4.83k|                        break;
  114|  4.11k|                    }
  115|  18.4k|                }
  116|  18.4k|            }
  117|   583k|        }
  118|       |
  119|  3.16M|        return FloatRegisterID::None;
  120|  3.18M|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|  3.03M|    {
  124|  3.03M|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 499k, False: 2.53M]
  ------------------
  125|   499k|        {
  126|   499k|            char c1 = token[0];
  127|   499k|            char c2 = token[1];
  128|   499k|            char c3 = token[2];
  129|   499k|            char c4 = token[3];
  130|       |
  131|   499k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 7.15k, False: 492k]
  |  Branch (131:34): [True: 2.98k, False: 489k]
  |  Branch (131:49): [True: 632, False: 9.51k]
  |  Branch (131:62): [True: 5.27k, False: 4.24k]
  ------------------
  132|   499k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 3.73k, False: 2.17k]
  |  Branch (132:34): [True: 962, False: 1.21k]
  |  Branch (132:49): [True: 3.57k, False: 1.12k]
  |  Branch (132:62): [True: 0, False: 1.12k]
  ------------------
  133|   499k|        }
  134|       |
  135|  2.53M|        return false;
  136|  3.03M|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  4.50M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   378k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  16.9M|    {
   41|  16.9M|        return m_Type;
   42|  16.9M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  11.9M|    {
   51|  11.9M|        return m_LineNumber;
   52|  11.9M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  23.6M|    {
   56|  23.6M|        return m_Column;
   57|  23.6M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  15.8M|    {
   61|  15.8M|        return m_Text.length();
   62|  15.8M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  6.60M|    {
   66|  6.60M|        return m_Text;
   67|  6.60M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   183k|    {
   80|   183k|        return m_HasHint;
   81|   183k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   189k|    {
   85|   189k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   189k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   189k|                   m_Type == Type::ImmediateInteger);
   88|   189k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   189k|        return m_Hint;
   91|   189k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  35.2k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  35.2k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  35.2k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  5.58k|    {
   51|  5.58k|        auto it = m_Iterator;
   52|  22.2k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 16.7k, False: 5.56k]
  ------------------
   53|  16.7k|        {
   54|  16.7k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 14, False: 16.7k]
  ------------------
   55|     14|            {
   56|     14|                return false;
   57|     14|            }
   58|  16.7k|        }
   59|       |
   60|  5.56k|        return true;
   61|  5.58k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  4.90M|    {
   65|  4.90M|        return m_Iterator != m_Tokens.end();
   66|  4.90M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  4.88M|    {
   70|  4.88M|        return m_Iterator == m_Tokens.end();
   71|  4.88M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  4.88M|    {
   85|  4.88M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  4.88M|        return *m_Iterator++;
   91|  4.88M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  5.56k|    {
  164|  5.56k|        return m_Iterator;
  165|  5.56k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  1.39k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  1.39k|        m_Iterator = it;
  179|  1.39k|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  35.2k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  35.2k|        return m_Tokens.begin();
  188|  35.2k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  35.2k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  35.2k|        return m_Tokens.end();
  206|  35.2k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  12.0k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  12.0k|        return m_Tokens.rbegin();
  224|  12.0k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  84.8k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  84.8k|        return m_Tokens.rend();
  233|  84.8k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  35.2k|    {
   63|  35.2k|        TokenStream tokens;
   64|       |
   65|  35.2k|        std::string_view current_token;
   66|       |
   67|  35.2k|        phi::u64 current_line_number{1u};
   68|  35.2k|        phi::u64 current_column{1u};
   69|  35.2k|        phi::u64 token_begin{0u};
   70|       |
   71|  35.2k|        phi::boolean parsing_comment{false};
   72|       |
   73|  13.2M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 13.2M, False: 35.2k]
  ------------------
   74|  13.2M|        {
   75|  13.2M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  13.2M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 941k, False: 12.2M]
  ------------------
   78|   941k|            {
   79|   941k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 499k, False: 442k]
  ------------------
   80|   499k|                {
   81|       |                    // Skip empty lines
   82|   499k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|   499k|                                        current_line_number, current_column);
   84|       |
   85|   499k|                    parsing_comment = false;
   86|   499k|                    current_line_number += 1u;
   87|   499k|                    current_column = 1u;
   88|   499k|                    continue;
   89|   499k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   442k|                tokens.emplace_back(
   93|   442k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   442k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   442k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   442k|                                    current_line_number, current_column);
   98|       |
   99|   442k|                current_token   = std::string_view{};
  100|   442k|                parsing_comment = false;
  101|   442k|                current_line_number += 1u;
  102|   442k|                current_column = 0u;
  103|   442k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  12.2M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 16.3k, False: 12.2M]
  |  Branch (105:34): [True: 43.5k, False: 12.2M]
  ------------------
  106|  59.8k|            {
  107|  59.8k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 4.26k, False: 55.6k]
  ------------------
  108|  4.26k|                {
  109|  4.26k|                    token_begin = i;
  110|  4.26k|                }
  111|  55.6k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 25.4k, False: 30.1k]
  ------------------
  112|  25.4k|                {
  113|  25.4k|                    tokens.emplace_back(ParseToken(
  114|  25.4k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  25.4k|                            current_line_number, current_column - current_token.length()));
  116|  25.4k|                    token_begin   = i;
  117|  25.4k|                    current_token = std::string_view{};
  118|  25.4k|                }
  119|       |
  120|  59.8k|                parsing_comment = true;
  121|  59.8k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  59.8k|            }
  123|  12.2M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 178k, False: 12.0M]
  ------------------
  124|   178k|            {
  125|       |                // simply append the character
  126|   178k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   178k|            }
  128|  12.0M|            else
  129|  12.0M|            {
  130|       |                // Not parsing a comment
  131|  12.0M|                switch (c)
  132|  12.0M|                {
  133|   129k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 129k, False: 11.9M]
  ------------------
  134|   387k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 257k, False: 11.7M]
  ------------------
  135|   387k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 0, False: 12.0M]
  ------------------
  136|   387k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 159k, False: 228k]
  ------------------
  137|   159k|                        {
  138|   159k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|   159k|                            continue;
  141|   159k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   228k|                        tokens.emplace_back(ParseToken(
  145|   228k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   228k|                                current_line_number, current_column - current_token.length()));
  147|   228k|                        current_token = std::string_view{};
  148|   228k|                        break;
  149|  1.31M|                    case ':':
  ------------------
  |  Branch (149:21): [True: 1.31M, False: 10.7M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  1.31M|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 1.03M, False: 281k]
  ------------------
  152|  1.03M|                        {
  153|  1.03M|                            current_token =
  154|  1.03M|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  1.03M|                            tokens.emplace_back(ParseToken(
  156|  1.03M|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  1.03M|                                    current_line_number,
  158|  1.03M|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  1.03M|                            current_token = std::string_view{};
  161|  1.03M|                        }
  162|   281k|                        else
  163|   281k|                        {
  164|       |                            // Orphan colon
  165|   281k|                            token_begin = i;
  166|       |
  167|   281k|                            tokens.emplace_back(Token::Type::Colon,
  168|   281k|                                                source.substr(token_begin.unsafe(), 1),
  169|   281k|                                                current_line_number, current_column);
  170|   281k|                        }
  171|  1.31M|                        break;
  172|   838k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 838k, False: 11.2M]
  ------------------
  173|  1.02M|                    case '(':
  ------------------
  |  Branch (173:21): [True: 186k, False: 11.8M]
  ------------------
  174|  1.23M|                    case ')':
  ------------------
  |  Branch (174:21): [True: 214k, False: 11.8M]
  ------------------
  175|  1.23M|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 661k, False: 577k]
  ------------------
  176|   661k|                        {
  177|   661k|                            tokens.emplace_back(ParseToken(
  178|   661k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   661k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   661k|                            current_token = std::string_view{};
  182|   661k|                        }
  183|       |
  184|  1.23M|                        Token::Type type;
  185|  1.23M|                        switch (c)
  186|  1.23M|                        {
  187|   838k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 838k, False: 401k]
  ------------------
  188|   838k|                                type = Token::Type::Comma;
  189|   838k|                                break;
  190|   186k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 186k, False: 1.05M]
  ------------------
  191|   186k|                                type = Token::Type::OpenBracket;
  192|   186k|                                break;
  193|   214k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 214k, False: 1.02M]
  ------------------
  194|   214k|                                type = Token::Type::ClosingBracket;
  195|   214k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 1.23M]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  1.23M|#endif
  201|  1.23M|                        }
  202|       |
  203|  1.23M|                        token_begin = i;
  204|       |
  205|  1.23M|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  1.23M|                                            current_line_number, current_column);
  207|  1.23M|                        break;
  208|       |
  209|  9.10M|                    default:
  ------------------
  |  Branch (209:21): [True: 9.10M, False: 2.94M]
  ------------------
  210|  9.10M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 2.38M, False: 6.72M]
  ------------------
  211|  2.38M|                        {
  212|  2.38M|                            token_begin = i;
  213|  2.38M|                        }
  214|       |
  215|       |                        // simply append the character
  216|  9.10M|                        current_token =
  217|  9.10M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  12.0M|                }
  219|  12.0M|            }
  220|       |
  221|  12.5M|            current_column += 1u;
  222|  12.5M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  35.2k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 24.9k, False: 10.2k]
  ------------------
  226|  24.9k|        {
  227|  24.9k|            tokens.emplace_back(
  228|  24.9k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  24.9k|                               current_line_number, current_column - current_token.length()));
  230|  24.9k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  35.2k|        tokens.finalize();
  234|       |
  235|  35.2k|        return tokens;
  236|  35.2k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  2.41M|    {
   11|  2.41M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 47.5k, False: 2.37M]
  |  Branch (11:35): [True: 34.6k, False: 12.9k]
  ------------------
   12|  34.6k|        {
   13|  34.6k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  34.6k|            if (number)
  ------------------
  |  Branch (15:17): [True: 3.20k, False: 31.4k]
  ------------------
   16|  3.20k|            {
   17|  3.20k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  3.20k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  3.20k|            }
   20|       |
   21|  31.4k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  34.6k|        }
   23|       |
   24|  2.38M|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 13.8k, False: 2.37M]
  |  Branch (24:35): [True: 15.8k, False: 2.35M]
  ------------------
   25|  29.7k|        {
   26|  29.7k|            return {Token::Type::Comment, token, line_number, column};
   27|  29.7k|        }
   28|       |
   29|  2.35M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 35.5k, False: 2.31M]
  ------------------
   30|  35.5k|        {
   31|  35.5k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  35.5k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  35.5k|        }
   34|       |
   35|  2.31M|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 1.94k, False: 2.31M]
  ------------------
   36|  1.94k|        {
   37|  1.94k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  1.94k|        }
   39|       |
   40|  2.31M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 14.9k, False: 2.30M]
  ------------------
   41|  14.9k|        {
   42|  14.9k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  14.9k|                    static_cast<std::uint32_t>(id)};
   44|  14.9k|        }
   45|       |
   46|  2.30M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 11.0k, False: 2.29M]
  ------------------
   47|  11.0k|        {
   48|  11.0k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  11.0k|                    static_cast<std::uint32_t>(id)};
   50|  11.0k|        }
   51|       |
   52|  2.29M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 313k, False: 1.97M]
  ------------------
   53|   313k|        {
   54|   313k|            return {Token::Type::OpCode, token, line_number, column,
   55|   313k|                    static_cast<std::uint32_t>(opcode)};
   56|   313k|        }
   57|       |
   58|  1.97M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|  2.29M|    }

_ZN6ImVec2C2Ev:
  263|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

LLVMFuzzerTestOneInput:
   11|  35.2k|{
   12|  35.2k|    static dlxemu::Emulator emu;
   13|       |
   14|  35.2k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   15|       |
   16|  35.2k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   17|       |
   18|       |    // Parse it
   19|  35.2k|    editor.SetText(std::string(source.data(), source.size()));
   20|  35.2k|    editor.m_FullText = editor.GetText();
   21|       |
   22|  35.2k|    emu.ParseProgram(editor.m_FullText);
   23|       |
   24|  35.2k|    editor.ColorizeInternal();
   25|       |
   26|  35.2k|    return 0;
   27|  35.2k|}


_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  197|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  202|  22.5k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  240|  4.50k|    {
  241|  4.50k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (241:13): [True: 1.19k, False: 3.31k]
  ------------------
  242|  1.19k|        {
  243|  1.19k|            return m_Line < other.m_Line;
  244|  1.19k|        }
  245|       |
  246|  3.31k|        return m_Column <= other.m_Column;
  247|  4.50k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  251|      1|    {
  252|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (252:13): [True: 0, False: 1]
  ------------------
  253|      0|        {
  254|      0|            return m_Line > other.m_Line;
  255|      0|        }
  256|       |
  257|      1|        return m_Column >= other.m_Column;
  258|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  265|   603k|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  293|      1|    {
  294|      1|        Colorize();
  295|      1|        m_Lines.push_back(Line());
  296|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  299|      1|    {
  300|      1|        VerifyInternalState();
  301|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  349|  4.50k|    {
  350|  4.50k|        m_ErrorMarkers.clear();
  351|  4.50k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  414|  4.50k|    {
  415|  4.50k|        m_Breakpoints.clear();
  416|  4.50k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  494|  4.50k|    {
  495|  4.50k|        m_Lines.clear();
  496|  4.50k|        ResetState();
  497|  4.50k|        m_Lines.emplace_back(Line());
  498|       |
  499|  4.50k|        for (const char character : text)
  ------------------
  |  Branch (499:35): [True: 771k, False: 4.50k]
  ------------------
  500|   771k|        {
  501|   771k|            if (character == '\r' ||
  ------------------
  |  Branch (501:17): [True: 915, False: 770k]
  |  Branch (501:17): [True: 133k, False: 637k]
  ------------------
  502|   771k|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (502:18): [True: 177k, False: 593k]
  |  Branch (502:48): [True: 142k, False: 34.5k]
  |  Branch (502:69): [True: 132k, False: 10.2k]
  ------------------
  503|   133k|            {
  504|       |                // ignore the carriage return character and control characters
  505|   133k|            }
  506|   637k|            else if (character == '\n')
  ------------------
  |  Branch (506:22): [True: 34.5k, False: 603k]
  ------------------
  507|  34.5k|            {
  508|  34.5k|                m_Lines.emplace_back(Line());
  509|  34.5k|            }
  510|   603k|            else
  511|   603k|            {
  512|   603k|                m_Lines.back().emplace_back(
  513|   603k|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  514|   603k|            }
  515|   771k|        }
  516|       |
  517|  4.50k|        m_TextChanged = true;
  518|  4.50k|        m_ScrollToTop = true;
  519|       |
  520|  4.50k|        m_UndoBuffer.clear();
  521|  4.50k|        m_UndoIndex = 0u;
  522|       |
  523|  4.50k|        Colorize();
  524|  4.50k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  527|  4.50k|    {
  528|  4.50k|        const phi::u32 max_line = GetMaxLineNumber();
  529|       |
  530|  4.50k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  531|  4.50k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1494|      1|    {
 1495|       |        // Lines should never be empty
 1496|      1|        PHI_ASSERT(!m_Lines.empty());
 1497|       |
 1498|       |        // Verify Selection is still in a valid state
 1499|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1500|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1501|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1502|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1503|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1504|       |
 1505|       |        // Verify cursor position
 1506|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1507|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1508|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1509|       |
 1510|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1511|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1512|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1513|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1514|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1515|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1516|       |#endif
 1517|       |
 1518|       |        // Verify that all breakpoints are on existing lines
 1519|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1519:35): [True: 0, False: 1]
  ------------------
 1520|      0|        {
 1521|      0|            PHI_ASSERT(break_point != 0u);
 1522|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1523|      0|        }
 1524|       |
 1525|       |        // Verify that all error markers are on existing lines
 1526|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1526:34): [True: 0, False: 1]
  ------------------
 1527|      0|        {
 1528|      0|            const phi::u32 line_number = error_marker.first;
 1529|       |
 1530|      0|            PHI_ASSERT(line_number != 0u);
 1531|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1532|      0|        }
 1533|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1536|      1|    {
 1537|      1|        constexpr const static Palette palette = {{
 1538|      1|                0xff7f7f7f, // Default
 1539|      1|                0xffd69c56, // OpCode
 1540|      1|                0xff00ff00, // Register
 1541|      1|                0xff7070e0, // IntegerLiteral
 1542|      1|                0xff206020, // Comment
 1543|      1|                0xff101010, // Background
 1544|      1|                0xffe0e0e0, // Cursor
 1545|      1|                0x80a06020, // Selection
 1546|      1|                0x800020ff, // ErrorMarker
 1547|      1|                0x40f08000, // Breakpoint
 1548|      1|                0xff707000, // Line number
 1549|      1|                0x40000000, // Current line fill
 1550|      1|                0x40808080, // Current line fill (inactive)
 1551|      1|                0x40a0a0a0, // Current line edge
 1552|      1|        }};
 1553|       |
 1554|      1|        return palette;
 1555|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1722|  4.50k|    {
 1723|       |        // TODO: This is quite unreadable
 1724|  4.50k|        const phi::u32 to_line =
 1725|  4.50k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1725:17): [True: 4.50k, False: 0]
  ------------------
 1726|  4.50k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1727|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1728|       |
 1729|  4.50k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1730|  4.50k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1731|  4.50k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1732|  4.50k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1733|  4.50k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1839|  4.50k|    {
 1840|  4.50k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1841|  4.50k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1842|  4.50k|        PHI_ASSERT(start <= end);
 1843|       |
 1844|  4.50k|        std::string result;
 1845|       |
 1846|  4.50k|        phi::u32   lstart = start.m_Line;
 1847|  4.50k|        phi::u32   lend   = end.m_Line;
 1848|  4.50k|        phi::u32   istart = GetCharacterIndex(start);
 1849|  4.50k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1850|  4.50k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1851|  4.50k|        phi::usize size   = 0u;
 1852|       |
 1853|  43.5k|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1853:35): [True: 39.0k, False: 4.50k]
  ------------------
 1854|  39.0k|        {
 1855|  39.0k|            PHI_ASSERT(i < m_Lines.size());
 1856|  39.0k|            size += m_Lines[i.unsafe()].size();
 1857|  39.0k|        }
 1858|       |
 1859|  4.50k|        result.reserve((size + size / 8u).unsafe());
 1860|       |
 1861|   642k|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1861:16): [True: 508k, False: 134k]
  |  Branch (1861:16): [True: 637k, False: 4.50k]
  |  Branch (1861:33): [True: 129k, False: 4.50k]
  ------------------
 1862|   637k|        {
 1863|   637k|            PHI_ASSERT(lstart < m_Lines.size());
 1864|       |
 1865|   637k|            const Line& line = m_Lines[lstart.unsafe()];
 1866|   637k|            if (istart < line.size())
  ------------------
  |  Branch (1866:17): [True: 603k, False: 34.5k]
  ------------------
 1867|   603k|            {
 1868|   603k|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1869|   603k|                istart++;
 1870|   603k|            }
 1871|  34.5k|            else
 1872|  34.5k|            {
 1873|  34.5k|                istart = 0u;
 1874|  34.5k|                ++lstart;
 1875|       |
 1876|  34.5k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1876:21): [True: 34.5k, False: 0]
  ------------------
 1877|  34.5k|                {
 1878|  34.5k|                    result += '\n';
 1879|  34.5k|                }
 1880|  34.5k|            }
 1881|   637k|        }
 1882|       |
 1883|  4.50k|        return result;
 1884|  4.50k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2422|  9.01k|    {
 2423|  9.01k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2424|       |
 2425|  9.01k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2426|  9.01k|        phi::u32    index = 0u;
 2427|   372k|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2427:35): [True: 367k, False: 4.60k]
  |  Branch (2427:35): [True: 363k, False: 9.01k]
  |  Branch (2427:58): [True: 363k, False: 4.41k]
  ------------------
 2428|   363k|        {
 2429|   363k|            PHI_ASSERT(index < line.size());
 2430|   363k|            const Char character = line[index.unsafe()].m_Char;
 2431|       |
 2432|   363k|            if (character == '\t')
  ------------------
  |  Branch (2432:17): [True: 5.95k, False: 357k]
  ------------------
 2433|  5.95k|            {
 2434|  5.95k|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2435|  5.95k|            }
 2436|   357k|            else
 2437|   357k|            {
 2438|   357k|                ++column;
 2439|   357k|            }
 2440|       |
 2441|   363k|            index += UTF8CharLength(character);
 2442|   363k|        }
 2443|       |
 2444|  9.01k|        return index;
 2445|  9.01k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2494|  4.50k|    {
 2495|  4.50k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2495:13): [True: 0, False: 4.50k]
  ------------------
 2496|      0|        {
 2497|      0|            return 0u;
 2498|      0|        }
 2499|       |
 2500|  4.50k|        const Line& line = m_Lines[line_number.unsafe()];
 2501|  4.50k|        phi::u32    col  = 0u;
 2502|       |
 2503|   367k|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2503:32): [True: 363k, False: 4.50k]
  ------------------
 2504|   363k|        {
 2505|   363k|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2506|   363k|            if (character == '\t')
  ------------------
  |  Branch (2506:17): [True: 5.95k, False: 357k]
  ------------------
 2507|  5.95k|            {
 2508|  5.95k|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2509|  5.95k|            }
 2510|   357k|            else
 2511|   357k|            {
 2512|   357k|                col++;
 2513|   357k|            }
 2514|       |
 2515|   363k|            i += UTF8CharLength(character);
 2516|   363k|        }
 2517|       |
 2518|  4.50k|        return col;
 2519|  4.50k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2522|  4.50k|    {
 2523|  4.50k|        PHI_ASSERT(!m_Lines.empty());
 2524|       |
 2525|  4.50k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2526|  4.50k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3661|   228k|    {
 3662|   228k|        PaletteIndex palette_index{PaletteIndex::Default};
 3663|       |
 3664|       |        // Determine palette color
 3665|   228k|        switch (token.GetType())
 3666|   228k|        {
 3667|  1.84k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3667:13): [True: 1.84k, False: 226k]
  ------------------
 3668|  1.84k|                palette_index = PaletteIndex::Comment;
 3669|  1.84k|                break;
 3670|    942|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3670:13): [True: 942, False: 227k]
  ------------------
 3671|  3.92k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3671:13): [True: 2.98k, False: 225k]
  ------------------
 3672|  3.92k|                palette_index = PaletteIndex::IntegerLiteral;
 3673|  3.92k|                break;
 3674|  45.5k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3674:13): [True: 45.5k, False: 182k]
  ------------------
 3675|  45.5k|                palette_index = PaletteIndex::OpCode;
 3676|  45.5k|                break;
 3677|  1.77k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3677:13): [True: 1.77k, False: 226k]
  ------------------
 3678|  3.71k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3678:13): [True: 1.94k, False: 226k]
  ------------------
 3679|  4.17k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3679:13): [True: 454, False: 227k]
  ------------------
 3680|  4.17k|                palette_index = PaletteIndex::Register;
 3681|  4.17k|                break;
 3682|  34.5k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3682:13): [True: 34.5k, False: 193k]
  ------------------
 3683|  34.5k|                return;
 3684|   138k|            default:
  ------------------
  |  Branch (3684:13): [True: 138k, False: 90.0k]
  ------------------
 3685|   138k|                break;
 3686|   228k|        }
 3687|       |
 3688|   193k|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3689|   193k|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3690|       |
 3691|   193k|        for (phi::u64 index{token.GetColumn() - 1u};
 3692|   780k|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3692:14): [True: 586k, False: 193k]
  ------------------
 3693|   586k|        {
 3694|   586k|            PHI_ASSERT(index < line.size());
 3695|   586k|            line[index.unsafe()].m_ColorIndex = palette_index;
 3696|   586k|        }
 3697|   193k|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3700|  4.50k|    {
 3701|  4.50k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3702|       |
 3703|  4.50k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3703:38): [True: 228k, False: 4.50k]
  ------------------
 3704|   228k|        {
 3705|   228k|            ColorizeToken(token);
 3706|   228k|        }
 3707|  4.50k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3710|  4.50k|    {
 3711|  4.50k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3712|  4.50k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3713|  4.50k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3714|       |
 3715|       |        // Clear breakpoints and markers
 3716|  4.50k|        ClearBreakPoints();
 3717|  4.50k|        ClearErrorMarkers();
 3718|  4.50k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  135|   363k|{
  136|   363k|    return UTF8CharLength(static_cast<char>(characater));
  137|   363k|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  105|   726k|{
  106|   726k|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (106:9): [True: 578, False: 725k]
  ------------------
  107|    578|    {
  108|    578|        return 6_u8;
  109|    578|    }
  110|       |
  111|   725k|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (111:9): [True: 1.14k, False: 724k]
  ------------------
  112|  1.14k|    {
  113|  1.14k|        return 5_u8;
  114|  1.14k|    }
  115|       |
  116|   724k|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (116:9): [True: 1.21k, False: 723k]
  ------------------
  117|  1.21k|    {
  118|  1.21k|        return 4_u8;
  119|  1.21k|    }
  120|       |
  121|   723k|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (121:9): [True: 1.46k, False: 722k]
  ------------------
  122|  1.46k|    {
  123|  1.46k|        return 3_u8;
  124|  1.46k|    }
  125|       |
  126|   722k|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (126:9): [True: 5.95k, False: 716k]
  ------------------
  127|  5.95k|    {
  128|  5.95k|        return 2_u8;
  129|  5.95k|    }
  130|       |
  131|   716k|    return 1_u8;
  132|   722k|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  183|  4.50k|    {
  184|  4.50k|        return m_DLXProgram;
  185|  4.50k|    }
_ZN6dlxemu8Emulator12ParseProgramEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  188|  4.50k|    {
  189|  4.50k|        m_DLXProgram = dlx::Parser::Parse(source);
  190|       |
  191|  4.50k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (191:13): [True: 203, False: 4.30k]
  ------------------
  192|    203|        {
  193|    203|            m_Processor.LoadProgram(m_DLXProgram);
  194|    203|        }
  195|  4.50k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  208|  4.50k|    {
  209|  4.50k|        return m_CodeEditor;
  210|  4.50k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   38|      1|    {
   39|      1|        Shutdown();
   40|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  108|      1|    {
  109|      1|        if (imgui_initialized)
  ------------------
  |  Branch (109:13): [True: 0, False: 1]
  ------------------
  110|      0|        {
  111|      0|            ShutdownImGui();
  112|      0|        }
  113|       |
  114|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (114:13): [True: 0, False: 1]
  ------------------
  115|      0|        {
  116|      0|            glfwDestroyWindow(m_Window);
  117|      0|        }
  118|       |
  119|      1|        if (glfw_initialized)
  ------------------
  |  Branch (119:13): [True: 0, False: 1]
  ------------------
  120|      0|        {
  121|      0|            glfwTerminate();
  122|      0|        }
  123|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  71.9k|        {
  173|  71.9k|            PHI_ASSERT(index < 3u);
  174|       |
  175|  71.9k|            switch (index.unsafe())
  176|  71.9k|            {
  177|  32.0k|                case 0:
  ------------------
  |  Branch (177:17): [True: 32.0k, False: 39.9k]
  ------------------
  178|  32.0k|                    return m_Arg1Type;
  179|       |
  180|  20.1k|                case 1:
  ------------------
  |  Branch (180:17): [True: 20.1k, False: 51.8k]
  ------------------
  181|  20.1k|                    return m_Arg2Type;
  182|       |
  183|  19.7k|                case 2:
  ------------------
  |  Branch (183:17): [True: 19.7k, False: 52.1k]
  ------------------
  184|  19.7k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 71.9k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  71.9k|#endif
  191|  71.9k|            }
  192|  71.9k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  19.3k|        {
  199|  19.3k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  19.3k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 18.9k, False: 460]
  ------------------
  203|  18.9k|            {
  204|  18.9k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  18.9k|            }
  206|  19.3k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 11.0k, False: 8.31k]
  ------------------
  207|  11.0k|            {
  208|  11.0k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  11.0k|            }
  210|  19.3k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 6.04k, False: 13.3k]
  ------------------
  211|  6.04k|            {
  212|  6.04k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  213|  6.04k|            }
  214|       |
  215|  19.3k|            return number_of_argument_required;
  216|  19.3k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  19.3k|        {
  225|  19.3k|            return m_Executor;
  226|  19.3k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  10.2k|    {
   38|  10.2k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  10.2k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  10.2k|                                         static_cast<underlying_t>(rhs));
   42|  10.2k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  10.2k|    {
   55|  10.2k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  10.2k|        return static_cast<underlying_t>(type & test) != 0;
   58|  10.2k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  64.3k|    {
   31|  64.3k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 1.83k, False: 62.4k]
  ------------------
   32|  1.83k|        {
   33|  1.83k|            return true;
   34|  1.83k|        }
   35|       |
   36|  62.4k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 375, False: 62.0k]
  ------------------
   37|    375|        {
   38|    375|            return true;
   39|    375|        }
   40|       |
   41|  62.0k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 26.5k, False: 35.5k]
  ------------------
   42|  26.5k|        {
   43|  26.5k|            return true;
   44|  26.5k|        }
   45|       |
   46|  35.5k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 354, False: 35.1k]
  ------------------
   47|    354|        {
   48|    354|            return true;
   49|    354|        }
   50|       |
   51|  35.1k|        return false;
   52|  35.5k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  35.1k|    {
   56|  35.1k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 35.1k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  35.1k|        const char first_char = token.at(0u);
   62|       |
   63|  35.1k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 7.56k, False: 27.6k]
  ------------------
   64|  7.56k|        {
   65|  7.56k|            return phi::is_alpha(first_char);
   66|  7.56k|        }
   67|       |
   68|  27.6k|        phi::boolean just_under_scores = (first_char == '_');
   69|  27.6k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 3.15k, False: 24.4k]
  |  Branch (69:13): [True: 2.61k, False: 25.0k]
  |  Branch (69:43): [True: 2.61k, False: 541]
  ------------------
   70|  2.61k|        {
   71|  2.61k|            return false;
   72|  2.61k|        }
   73|       |
   74|  91.8k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 74.7k, False: 17.1k]
  ------------------
   75|  74.7k|        {
   76|  74.7k|            const char c{token.at(index)};
   77|       |
   78|  74.7k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 65.9k, False: 8.75k]
  ------------------
   79|  65.9k|            {
   80|  65.9k|                just_under_scores = false;
   81|  65.9k|            }
   82|  8.75k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 845, False: 7.91k]
  ------------------
   83|    845|            {
   84|    845|                continue;
   85|    845|            }
   86|  7.91k|            else
   87|  7.91k|            {
   88|  7.91k|                return false;
   89|  7.91k|            }
   90|  74.7k|        }
   91|       |
   92|  17.1k|        return !just_under_scores;
   93|  25.0k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|   142k|    {
  100|   142k|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 142k]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|   142k|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 18.8k, False: 123k]
  ------------------
  106|  18.8k|        {
  107|  18.8k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 2.09k, False: 16.7k]
  ------------------
  108|  2.09k|            {
  109|  2.09k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  2.09k|            }
  111|       |
  112|  16.7k|            return {};
  113|  18.8k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|   123k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 248, False: 123k]
  ------------------
  117|    248|        {
  118|    248|            return {};
  119|    248|        }
  120|       |
  121|   123k|        std::int32_t number{0};
  122|   123k|        phi::boolean is_negative{false};
  123|   123k|        phi::boolean starts_with_zero{false};
  124|   123k|        phi::boolean parsing_binary{false};
  125|   123k|        phi::boolean parsing_octal{false};
  126|   123k|        phi::boolean parsing_hexadecimal{false};
  127|   123k|        phi::boolean parsed_something{false};
  128|   123k|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|   137k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 135k, False: 2.28k]
  ------------------
  133|   135k|        {
  134|   135k|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|   135k|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 123k, False: 11.6k]
  ------------------
  138|   123k|            {
  139|   123k|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 430, False: 123k]
  ------------------
  140|    430|                {
  141|    430|                    continue;
  142|    430|                }
  143|       |
  144|   123k|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 1.35k, False: 121k]
  ------------------
  145|  1.35k|                {
  146|  1.35k|                    is_negative = true;
  147|  1.35k|                    continue;
  148|  1.35k|                }
  149|       |
  150|   121k|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 2.75k, False: 118k]
  ------------------
  151|  2.75k|                {
  152|  2.75k|                    starts_with_zero = true;
  153|  2.75k|                    continue;
  154|  2.75k|                }
  155|       |
  156|   118k|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 240, False: 118k]
  ------------------
  157|    240|                {
  158|    240|                    return {};
  159|    240|                }
  160|   118k|            }
  161|       |
  162|       |            // Second character
  163|   130k|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 5.44k, False: 124k]
  ------------------
  164|  5.44k|            {
  165|  5.44k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 2.75k, False: 2.69k]
  ------------------
  166|  2.75k|                {
  167|       |                    // Binary
  168|  2.75k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 218, False: 2.53k]
  |  Branch (168:37): [True: 347, False: 2.18k]
  ------------------
  169|    565|                    {
  170|    565|                        parsing_binary = true;
  171|    565|                        continue;
  172|    565|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  2.18k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 517, False: 1.66k]
  |  Branch (175:37): [True: 655, False: 1.01k]
  ------------------
  176|  1.17k|                    {
  177|  1.17k|                        parsing_hexadecimal = true;
  178|  1.17k|                        continue;
  179|  1.17k|                    }
  180|       |
  181|       |                    // Octal
  182|  1.01k|                    parsing_octal = true;
  183|  1.01k|                }
  184|  5.44k|            }
  185|       |
  186|       |            // Handle seperators
  187|   128k|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 412, False: 128k]
  ------------------
  188|    412|            {
  189|    412|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 194, False: 218]
  ------------------
  190|    194|                {
  191|    194|                    return {};
  192|    194|                }
  193|       |
  194|    218|                parsed_separator = true;
  195|    218|                continue;
  196|    412|            }
  197|       |
  198|       |            // Check for over/underflow
  199|   128k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 3.14k, False: 125k]
  |  Branch (199:32): [True: 194, False: 2.94k]
  ------------------
  200|    194|            {
  201|       |                // Would underflow
  202|    194|                return {};
  203|    194|            }
  204|   127k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 125k, False: 2.94k]
  |  Branch (204:17): [True: 235, False: 127k]
  |  Branch (204:33): [True: 235, False: 124k]
  ------------------
  205|    235|            {
  206|       |                // Would overflow
  207|    235|                return {};
  208|    235|            }
  209|       |
  210|   127k|            parsed_separator = false;
  211|   127k|            parsed_something = true;
  212|       |
  213|   127k|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 587, False: 127k]
  ------------------
  214|    587|            {
  215|    587|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 199, False: 388]
  ------------------
  216|    199|                {
  217|    199|                    return {};
  218|    199|                }
  219|       |
  220|    388|                number <<= 1;
  221|    388|                number |= (c - '0');
  222|    388|            }
  223|   127k|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 1.22k, False: 125k]
  ------------------
  224|  1.22k|            {
  225|  1.22k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 713, False: 514]
  ------------------
  226|    713|                {
  227|    713|                    return {};
  228|    713|                }
  229|       |
  230|    514|                number <<= 3;
  231|    514|                number |= (c - '0');
  232|    514|            }
  233|   125k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 1.47k, False: 124k]
  ------------------
  234|  1.47k|            {
  235|  1.47k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 543, False: 932]
  ------------------
  236|    543|                {
  237|    543|                    return {};
  238|    543|                }
  239|       |
  240|    932|                number <<= 4;
  241|    932|                number |= phi::hex_digit_value(c).unsafe();
  242|    932|            }
  243|   124k|            else
  244|   124k|            {
  245|   124k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 118k, False: 5.79k]
  ------------------
  246|   118k|                {
  247|   118k|                    return {};
  248|   118k|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|  5.79k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 1.96k, False: 3.83k]
  |  Branch (251:36): [True: 194, False: 1.76k]
  ------------------
  252|    194|                {
  253|    194|                    return {};
  254|    194|                }
  255|       |
  256|  5.60k|                number *= 10;
  257|  5.60k|                number += (c - '0');
  258|  5.60k|            }
  259|   127k|        }
  260|       |
  261|  2.28k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 1.62k, False: 658]
  ------------------
  262|  1.62k|        {
  263|       |            // Check for over/underflow
  264|  1.62k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 637, False: 985]
  |  Branch (264:32): [True: 203, False: 434]
  ------------------
  265|    203|            {
  266|       |                // Would underflow
  267|    203|                return {};
  268|    203|            }
  269|  1.41k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 985, False: 434]
  |  Branch (269:17): [True: 247, False: 1.17k]
  |  Branch (269:33): [True: 247, False: 738]
  ------------------
  270|    247|            {
  271|       |                // Would overflow
  272|    247|                return {};
  273|    247|            }
  274|       |
  275|  1.17k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 434, False: 738]
  ------------------
  276|    434|            {
  277|    434|                return static_cast<std::int16_t>(-number);
  278|    434|            }
  279|       |
  280|    738|            return static_cast<std::int16_t>(number);
  281|  1.17k|        }
  282|       |
  283|    658|        return {};
  284|  2.28k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  13.0k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  13.0k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 128k, False: 0]
  ------------------
   64|   128k|            {
   65|   128k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 13.0k, False: 115k]
  ------------------
   66|  13.0k|                {
   67|  13.0k|                    return &token;
   68|  13.0k|                }
   69|   128k|            }
   70|       |
   71|      0|            return nullptr;
   72|  13.0k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  40.2k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  40.2k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  40.2k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   144k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   144k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   144k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  43.4k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  43.4k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  43.4k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  19.3k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  4.28k|    {
   25|  4.28k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  4.28k|        switch (argument_number.unsafe())
   28|  4.28k|        {
   29|  3.51k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 3.51k, False: 764]
  ------------------
   30|  3.51k|                m_Arg1 = argument;
   31|  3.51k|                break;
   32|    433|            case 1u:
  ------------------
  |  Branch (32:13): [True: 433, False: 3.85k]
  ------------------
   33|    433|                m_Arg2 = argument;
   34|    433|                break;
   35|    331|            case 2u:
  ------------------
  |  Branch (35:13): [True: 331, False: 3.95k]
  ------------------
   36|    331|                m_Arg3 = argument;
   37|    331|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 4.28k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  4.28k|#endif
   42|  4.28k|        }
   43|  4.28k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  62.4k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  172|  1.13k|    {
  173|  1.13k|        InstructionArgument arg;
  174|  1.13k|        arg.m_Type                   = ArgumentType::IntRegister;
  175|  1.13k|        arg.register_int.register_id = id;
  176|  1.13k|        return arg;
  177|  1.13k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  180|    227|    {
  181|    227|        InstructionArgument arg;
  182|    227|        arg.m_Type                     = ArgumentType::FloatRegister;
  183|    227|        arg.register_float.register_id = id;
  184|    227|        return arg;
  185|    227|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  188|    228|    {
  189|    228|        InstructionArgument arg;
  190|    228|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  191|    228|        arg.immediate_value.signed_value = value;
  192|    228|        return arg;
  193|    228|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  197|    226|    {
  198|    226|        InstructionArgument arg;
  199|    226|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  200|    226|        arg.address_displacement.register_id  = id;
  201|    226|        arg.address_displacement.displacement = displacement;
  202|    226|        return arg;
  203|    226|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  206|  2.46k|    {
  207|  2.46k|        InstructionArgument arg;
  208|  2.46k|        arg.m_Type           = ArgumentType::Label;
  209|  2.46k|        arg.label.label_name = label_name;
  210|  2.46k|        return arg;
  211|  2.46k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  19.3k|    {
  453|  19.3k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  19.3k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|   196k|    {
   24|   196k|        switch (token.length().unsafe())
   25|   196k|        {
   26|       |            // 1 character OpCodes
   27|  24.2k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 24.2k, False: 172k]
  ------------------
   28|  24.2k|                const char c1 = token[0u];
   29|       |
   30|  24.2k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 8.73k, False: 15.4k]
  ------------------
   31|  8.73k|                {
   32|  8.73k|                    return OpCode::J;
   33|  8.73k|                }
   34|  15.4k|                break;
   35|  24.2k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|  26.1k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 26.1k, False: 170k]
  ------------------
   39|  26.1k|                const char c1 = token[0u];
   40|  26.1k|                const char c2 = token[1u];
   41|       |
   42|  26.1k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 14.3k, False: 11.8k]
  ------------------
   43|  26.1k|                {
   44|    951|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 951, False: 25.2k]
  ------------------
   45|  1.45k|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 504, False: 25.6k]
  ------------------
   46|  1.45k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 562, False: 893]
  ------------------
   47|    562|                        {
   48|    562|                            return OpCode::JR;
   49|    562|                        }
   50|    893|                        break;
   51|       |
   52|  2.28k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 2.28k, False: 23.8k]
  ------------------
   53|  3.80k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 1.52k, False: 24.6k]
  ------------------
   54|  3.80k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 1.36k, False: 2.44k]
  ------------------
   55|  3.80k|                        {
   56|    205|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 205, False: 3.60k]
  ------------------
   57|    464|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 259, False: 3.54k]
  ------------------
   58|    464|                                return OpCode::LB;
   59|    204|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 204, False: 3.60k]
  ------------------
   60|    420|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 216, False: 3.59k]
  ------------------
   61|    420|                                return OpCode::LD;
   62|    330|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 330, False: 3.47k]
  ------------------
   63|    646|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 316, False: 3.49k]
  ------------------
   64|    646|                                return OpCode::LF;
   65|    243|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 243, False: 3.56k]
  ------------------
   66|    522|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 279, False: 3.52k]
  ------------------
   67|    522|                                return OpCode::LH;
   68|    196|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 196, False: 3.61k]
  ------------------
   69|    391|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 195, False: 3.61k]
  ------------------
   70|    391|                                return OpCode::LW;
   71|  3.80k|                        }
   72|  1.36k|                        break;
   73|  1.36k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 342, False: 25.8k]
  ------------------
   74|  1.18k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 841, False: 25.3k]
  ------------------
   75|  1.18k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 399, False: 784]
  ------------------
   76|    399|                        {
   77|    399|                            return OpCode::OR;
   78|    399|                        }
   79|    784|                        break;
   80|  2.67k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 2.67k, False: 23.4k]
  ------------------
   81|  5.36k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 2.68k, False: 23.4k]
  ------------------
   82|  5.36k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 1.45k, False: 3.90k]
  ------------------
   83|  5.36k|                        {
   84|    331|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 331, False: 5.03k]
  ------------------
   85|    531|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 200, False: 5.16k]
  ------------------
   86|    531|                                return OpCode::SB;
   87|  1.01k|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 1.01k, False: 4.34k]
  ------------------
   88|  1.20k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 194, False: 5.17k]
  ------------------
   89|  1.20k|                                return OpCode::SD;
   90|    451|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 451, False: 4.91k]
  ------------------
   91|    645|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 194, False: 5.17k]
  ------------------
   92|    645|                                return OpCode::SF;
   93|    225|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 225, False: 5.13k]
  ------------------
   94|    653|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 428, False: 4.93k]
  ------------------
   95|    653|                                return OpCode::SH;
   96|    348|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 348, False: 5.01k]
  ------------------
   97|    868|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 520, False: 4.84k]
  ------------------
   98|    868|                                return OpCode::SW;
   99|  5.36k|                        }
  100|  1.45k|                        break;
  101|  26.1k|                }
  102|  18.8k|                break;
  103|  26.1k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|  41.4k|            case 3: {
  ------------------
  |  Branch (106:13): [True: 41.4k, False: 155k]
  ------------------
  107|  41.4k|                const char c1 = token[0u];
  108|  41.4k|                const char c2 = token[1u];
  109|  41.4k|                const char c3 = token[2u];
  110|       |
  111|  41.4k|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 10.1k, False: 31.3k]
  ------------------
  112|  41.4k|                {
  113|  2.31k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 2.31k, False: 39.1k]
  ------------------
  114|  2.62k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 302, False: 41.1k]
  ------------------
  115|  2.62k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 1.24k, False: 1.37k]
  |  Branch (115:29): [True: 929, False: 1.69k]
  |  Branch (115:45): [True: 929, False: 318]
  ------------------
  116|    929|                        {
  117|    929|                            return OpCode::ADD;
  118|    929|                        }
  119|  1.69k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 994, False: 698]
  |  Branch (119:34): [True: 638, False: 1.05k]
  |  Branch (119:50): [True: 638, False: 356]
  ------------------
  120|    638|                        {
  121|    638|                            return OpCode::AND;
  122|    638|                        }
  123|  1.05k|                        break;
  124|       |
  125|  1.05k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 397, False: 41.0k]
  ------------------
  126|  1.26k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 868, False: 40.5k]
  ------------------
  127|  1.26k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 851, False: 414]
  |  Branch (127:29): [True: 537, False: 728]
  |  Branch (127:45): [True: 537, False: 314]
  ------------------
  128|    537|                        {
  129|    537|                            return OpCode::DIV;
  130|    537|                        }
  131|    728|                        break;
  132|       |
  133|    731|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 731, False: 40.6k]
  ------------------
  134|  1.63k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 902, False: 40.5k]
  ------------------
  135|  1.63k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 1.09k, False: 543]
  ------------------
  136|  1.09k|                        {
  137|  1.09k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 388, False: 702]
  ------------------
  138|    388|                            {
  139|    388|                                return OpCode::EQD;
  140|    388|                            }
  141|    702|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 433, False: 269]
  ------------------
  142|    433|                            {
  143|    433|                                return OpCode::EQF;
  144|    433|                            }
  145|  1.09k|                        }
  146|    812|                        break;
  147|       |
  148|  1.03k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 1.03k, False: 40.3k]
  ------------------
  149|  2.48k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 1.45k, False: 39.9k]
  ------------------
  150|  2.48k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 1.03k, False: 1.45k]
  ------------------
  151|  1.03k|                        {
  152|  1.03k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 421, False: 611]
  ------------------
  153|    421|                            {
  154|    421|                                return OpCode::GED;
  155|    421|                            }
  156|    611|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 388, False: 223]
  ------------------
  157|    388|                            {
  158|    388|                                return OpCode::GEF;
  159|    388|                            }
  160|  1.03k|                        }
  161|  1.45k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 1.24k, False: 211]
  ------------------
  162|  1.24k|                        {
  163|  1.24k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 644, False: 598]
  ------------------
  164|    644|                            {
  165|    644|                                return OpCode::GTD;
  166|    644|                            }
  167|    598|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 388, False: 210]
  ------------------
  168|    388|                            {
  169|    388|                                return OpCode::GTF;
  170|    388|                            }
  171|    598|                        }
  172|    644|                        break;
  173|       |
  174|    966|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 966, False: 40.4k]
  ------------------
  175|  1.29k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 327, False: 41.0k]
  ------------------
  176|  1.29k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 752, False: 541]
  |  Branch (176:29): [True: 398, False: 895]
  |  Branch (176:45): [True: 398, False: 354]
  ------------------
  177|    398|                        {
  178|    398|                            return OpCode::JAL;
  179|    398|                        }
  180|    895|                        break;
  181|       |
  182|  4.53k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 4.53k, False: 36.8k]
  ------------------
  183|  5.91k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 1.38k, False: 40.0k]
  ------------------
  184|  5.91k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 494, False: 5.42k]
  ------------------
  185|  5.91k|                        {
  186|    223|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 223, False: 5.69k]
  ------------------
  187|    632|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 409, False: 5.50k]
  ------------------
  188|    632|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 388, False: 244]
  ------------------
  189|    388|                                {
  190|    388|                                    return OpCode::LBU;
  191|    388|                                }
  192|    244|                                break;
  193|       |
  194|    724|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 724, False: 5.19k]
  ------------------
  195|  1.64k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 916, False: 5.00k]
  ------------------
  196|  1.64k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 772, False: 868]
  ------------------
  197|    772|                                {
  198|    772|                                    return OpCode::LED;
  199|    772|                                }
  200|    868|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 388, False: 480]
  ------------------
  201|    388|                                {
  202|    388|                                    return OpCode::LEF;
  203|    388|                                }
  204|    480|                                break;
  205|       |
  206|    702|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 702, False: 5.21k]
  ------------------
  207|  1.27k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 576, False: 5.34k]
  ------------------
  208|  1.27k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 516, False: 762]
  ------------------
  209|    516|                                {
  210|    516|                                    return OpCode::LHI;
  211|    516|                                }
  212|    762|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 516, False: 246]
  ------------------
  213|    516|                                {
  214|    516|                                    return OpCode::LHU;
  215|    516|                                }
  216|    246|                                break;
  217|       |
  218|    349|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 349, False: 5.56k]
  ------------------
  219|  1.27k|                            case 't':
  ------------------
  |  Branch (219:29): [True: 930, False: 4.98k]
  ------------------
  220|  1.27k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 423, False: 856]
  ------------------
  221|    423|                                {
  222|    423|                                    return OpCode::LTD;
  223|    423|                                }
  224|    856|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 517, False: 339]
  ------------------
  225|    517|                                {
  226|    517|                                    return OpCode::LTF;
  227|    517|                                }
  228|    339|                                break;
  229|       |
  230|    339|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 197, False: 5.72k]
  ------------------
  231|    595|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 398, False: 5.52k]
  ------------------
  232|    595|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 389, False: 206]
  ------------------
  233|    389|                                {
  234|    389|                                    return OpCode::LWU;
  235|    389|                                }
  236|    206|                                break;
  237|  5.91k|                        }
  238|  2.00k|                        break;
  239|       |
  240|  2.00k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 1.55k, False: 39.8k]
  ------------------
  241|  2.57k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 1.01k, False: 40.4k]
  ------------------
  242|  2.57k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 1.41k, False: 1.15k]
  ------------------
  243|  1.41k|                        {
  244|  1.41k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 388, False: 1.02k]
  ------------------
  245|    388|                            {
  246|    388|                                return OpCode::NED;
  247|    388|                            }
  248|  1.02k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 555, False: 473]
  ------------------
  249|    555|                            {
  250|    555|                                return OpCode::NEF;
  251|    555|                            }
  252|  1.41k|                        }
  253|  1.15k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 752, False: 404]
  |  Branch (253:34): [True: 520, False: 636]
  |  Branch (253:50): [True: 520, False: 232]
  ------------------
  254|    520|                        {
  255|    520|                            return OpCode::NOP;
  256|    520|                        }
  257|       |
  258|  1.10k|                        break;
  259|       |
  260|  1.10k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 652, False: 40.7k]
  ------------------
  261|  1.15k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 498, False: 40.9k]
  ------------------
  262|  1.15k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 801, False: 349]
  |  Branch (262:29): [True: 588, False: 562]
  |  Branch (262:45): [True: 588, False: 213]
  ------------------
  263|    588|                        {
  264|    588|                            return OpCode::ORI;
  265|    588|                        }
  266|    562|                        break;
  267|       |
  268|  7.87k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 7.87k, False: 33.5k]
  ------------------
  269|  11.3k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 3.51k, False: 37.9k]
  ------------------
  270|  11.3k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 960, False: 10.4k]
  ------------------
  271|  11.3k|                        {
  272|    659|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 659, False: 10.7k]
  ------------------
  273|  1.07k|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 418, False: 10.9k]
  ------------------
  274|  1.07k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 516, False: 561]
  ------------------
  275|    516|                                {
  276|    516|                                    return OpCode::SBU;
  277|    516|                                }
  278|    561|                                break;
  279|       |
  280|    561|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 424, False: 10.9k]
  ------------------
  281|  1.04k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 616, False: 10.7k]
  ------------------
  282|  1.04k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 670, False: 370]
  ------------------
  283|    670|                                {
  284|    670|                                    return OpCode::SEQ;
  285|    670|                                }
  286|    370|                                break;
  287|       |
  288|    989|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 989, False: 10.3k]
  ------------------
  289|  1.49k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 510, False: 10.8k]
  ------------------
  290|  1.49k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 399, False: 1.10k]
  ------------------
  291|    399|                                {
  292|    399|                                    return OpCode::SGE;
  293|    399|                                }
  294|  1.10k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 455, False: 645]
  ------------------
  295|    455|                                {
  296|    455|                                    return OpCode::SGT;
  297|    455|                                }
  298|    645|                                break;
  299|       |
  300|    645|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 197, False: 11.1k]
  ------------------
  301|    585|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 388, False: 10.9k]
  ------------------
  302|    585|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 388, False: 197]
  ------------------
  303|    388|                                {
  304|    388|                                    return OpCode::SHU;
  305|    388|                                }
  306|    197|                                break;
  307|       |
  308|  1.35k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 1.35k, False: 10.0k]
  ------------------
  309|  2.24k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 884, False: 10.5k]
  ------------------
  310|  2.24k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 376, False: 1.86k]
  ------------------
  311|  2.24k|                                {
  312|    195|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 195, False: 2.04k]
  ------------------
  313|    395|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 200, False: 2.04k]
  ------------------
  314|    395|                                        return OpCode::SLA;
  315|       |
  316|    197|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 197, False: 2.04k]
  ------------------
  317|    394|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 197, False: 2.04k]
  ------------------
  318|    394|                                        return OpCode::SLE;
  319|       |
  320|    210|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 210, False: 2.03k]
  ------------------
  321|    528|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 318, False: 1.92k]
  ------------------
  322|    528|                                        return OpCode::SLL;
  323|       |
  324|    200|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 200, False: 2.04k]
  ------------------
  325|    549|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 349, False: 1.89k]
  ------------------
  326|    549|                                        return OpCode::SLT;
  327|  2.24k|                                }
  328|    376|                                break;
  329|       |
  330|    581|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 581, False: 10.8k]
  ------------------
  331|    792|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 211, False: 11.1k]
  ------------------
  332|    792|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 558, False: 234]
  ------------------
  333|    558|                                {
  334|    558|                                    return OpCode::SNE;
  335|    558|                                }
  336|    234|                                break;
  337|       |
  338|    455|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 455, False: 10.9k]
  ------------------
  339|  1.55k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 1.09k, False: 10.2k]
  ------------------
  340|  1.55k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 399, False: 1.15k]
  ------------------
  341|    399|                                {
  342|    399|                                    return OpCode::SRA;
  343|    399|                                }
  344|  1.15k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 936, False: 219]
  ------------------
  345|    936|                                {
  346|    936|                                    return OpCode::SRL;
  347|    936|                                }
  348|    219|                                break;
  349|       |
  350|    463|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 463, False: 10.9k]
  ------------------
  351|    758|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 295, False: 11.0k]
  ------------------
  352|    758|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 491, False: 267]
  ------------------
  353|    491|                                {
  354|    491|                                    return OpCode::SUB;
  355|    491|                                }
  356|    267|                                break;
  357|       |
  358|    666|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 666, False: 10.7k]
  ------------------
  359|    878|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 212, False: 11.1k]
  ------------------
  360|    878|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 388, False: 490]
  ------------------
  361|    388|                                {
  362|    388|                                    return OpCode::SWU;
  363|    388|                                }
  364|    490|                                break;
  365|  11.3k|                        }
  366|       |
  367|  4.85k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 536, False: 40.8k]
  ------------------
  368|  5.30k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 446, False: 40.9k]
  ------------------
  369|  5.30k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 1.06k, False: 4.23k]
  |  Branch (369:29): [True: 500, False: 4.80k]
  |  Branch (369:45): [True: 500, False: 562]
  ------------------
  370|    500|                        {
  371|    500|                            return OpCode::XOR;
  372|    500|                        }
  373|  4.80k|                        break;
  374|  41.4k|                }
  375|  22.7k|                break;
  376|  41.4k|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  48.7k|            case 4: {
  ------------------
  |  Branch (379:13): [True: 48.7k, False: 147k]
  ------------------
  380|  48.7k|                const char c1 = token[0u];
  381|  48.7k|                const char c2 = token[1u];
  382|  48.7k|                const char c3 = token[2u];
  383|  48.7k|                const char c4 = token[3u];
  384|       |
  385|  48.7k|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 8.32k, False: 40.4k]
  ------------------
  386|  48.7k|                {
  387|  5.20k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 5.20k, False: 43.5k]
  ------------------
  388|  5.86k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 653, False: 48.1k]
  ------------------
  389|  5.86k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 248, False: 5.61k]
  ------------------
  390|  5.86k|                        {
  391|  2.12k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 2.12k, False: 3.73k]
  ------------------
  392|  3.16k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 1.04k, False: 4.82k]
  ------------------
  393|  3.16k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 2.95k, False: 216]
  ------------------
  394|  2.95k|                                {
  395|  2.95k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 794, False: 2.15k]
  ------------------
  396|  2.95k|                                    {
  397|    226|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 226, False: 2.72k]
  ------------------
  398|    422|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 196, False: 2.75k]
  ------------------
  399|    422|                                            return OpCode::ADDD;
  400|       |
  401|    195|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 195, False: 2.75k]
  ------------------
  402|    645|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 450, False: 2.50k]
  ------------------
  403|    645|                                            return OpCode::ADDF;
  404|       |
  405|    199|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 199, False: 2.75k]
  ------------------
  406|    425|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 226, False: 2.72k]
  ------------------
  407|    425|                                            return OpCode::ADDI;
  408|       |
  409|    343|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 343, False: 2.60k]
  ------------------
  410|    665|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 322, False: 2.62k]
  ------------------
  411|    665|                                            return OpCode::ADDU;
  412|  2.95k|                                    }
  413|  2.95k|                                }
  414|  1.01k|                                break;
  415|       |
  416|  2.24k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 2.24k, False: 3.61k]
  ------------------
  417|  2.44k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 197, False: 5.66k]
  ------------------
  418|  2.44k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 2.24k, False: 203]
  |  Branch (418:37): [True: 1.44k, False: 998]
  |  Branch (418:53): [True: 1.44k, False: 795]
  ------------------
  419|  1.44k|                                {
  420|  1.44k|                                    return OpCode::ANDI;
  421|  1.44k|                                }
  422|       |
  423|    998|                                break;
  424|  5.86k|                        }
  425|  2.25k|                        break;
  426|       |
  427|  3.83k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 3.83k, False: 44.9k]
  ------------------
  428|  4.15k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 317, False: 48.4k]
  ------------------
  429|  4.15k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 267, False: 3.88k]
  ------------------
  430|  4.15k|                        {
  431|    692|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 692, False: 3.46k]
  ------------------
  432|  1.10k|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 408, False: 3.74k]
  ------------------
  433|  1.10k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 745, False: 355]
  |  Branch (433:37): [True: 388, False: 712]
  |  Branch (433:53): [True: 388, False: 357]
  ------------------
  434|    388|                                {
  435|    388|                                    return OpCode::BEQZ;
  436|    388|                                }
  437|    712|                                break;
  438|       |
  439|  1.27k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 1.27k, False: 2.87k]
  ------------------
  440|  1.61k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 337, False: 3.81k]
  ------------------
  441|  1.61k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 1.26k, False: 345]
  ------------------
  442|  1.26k|                                {
  443|  1.26k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 676, False: 591]
  ------------------
  444|    676|                                    {
  445|    676|                                        return OpCode::BFPF;
  446|    676|                                    }
  447|    591|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 388, False: 203]
  ------------------
  448|    388|                                    {
  449|    388|                                        return OpCode::BFPT;
  450|    388|                                    }
  451|  1.26k|                                }
  452|    548|                                break;
  453|       |
  454|    770|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 770, False: 3.38k]
  ------------------
  455|  1.17k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 404, False: 3.74k]
  ------------------
  456|  1.17k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 969, False: 205]
  |  Branch (456:37): [True: 645, False: 529]
  |  Branch (456:53): [True: 645, False: 324]
  ------------------
  457|    645|                                {
  458|    645|                                    return OpCode::BNEZ;
  459|    645|                                }
  460|  4.15k|                        }
  461|  2.05k|                        break;
  462|       |
  463|  2.05k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 1.05k, False: 47.6k]
  ------------------
  464|  3.86k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 2.80k, False: 45.9k]
  ------------------
  465|  3.86k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 3.45k, False: 412]
  |  Branch (465:29): [True: 2.94k, False: 918]
  |  Branch (465:45): [True: 2.94k, False: 506]
  ------------------
  466|  2.94k|                        {
  467|  2.94k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 571, False: 2.37k]
  ------------------
  468|  2.94k|                            {
  469|    194|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 194, False: 2.75k]
  ------------------
  470|    390|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 196, False: 2.74k]
  ------------------
  471|    390|                                    return OpCode::DIVD;
  472|       |
  473|    194|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 194, False: 2.75k]
  ------------------
  474|    389|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 195, False: 2.74k]
  ------------------
  475|    389|                                    return OpCode::DIVF;
  476|       |
  477|    588|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 588, False: 2.35k]
  ------------------
  478|    943|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 355, False: 2.58k]
  ------------------
  479|    943|                                    return OpCode::DIVI;
  480|       |
  481|    194|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 194, False: 2.75k]
  ------------------
  482|    651|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 457, False: 2.48k]
  ------------------
  483|    651|                                    return OpCode::DIVU;
  484|  2.94k|                            }
  485|  2.94k|                        }
  486|  1.48k|                        break;
  487|       |
  488|  1.48k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 704, False: 48.0k]
  ------------------
  489|  1.87k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 1.17k, False: 47.5k]
  ------------------
  490|  1.87k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 1.51k, False: 360]
  |  Branch (490:29): [True: 677, False: 1.19k]
  |  Branch (490:45): [True: 904, False: 610]
  |  Branch (490:61): [True: 677, False: 227]
  ------------------
  491|    677|                        {
  492|    677|                            return OpCode::HALT;
  493|    677|                        }
  494|  1.19k|                        break;
  495|       |
  496|  1.19k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 1.10k, False: 47.6k]
  ------------------
  497|  1.51k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 406, False: 48.3k]
  ------------------
  498|  1.51k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 1.14k, False: 371]
  |  Branch (498:29): [True: 516, False: 998]
  |  Branch (498:45): [True: 948, False: 195]
  |  Branch (498:61): [True: 516, False: 432]
  ------------------
  499|    516|                        {
  500|    516|                            return OpCode::JALR;
  501|    516|                        }
  502|    998|                        break;
  503|       |
  504|    998|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 708, False: 48.0k]
  ------------------
  505|  2.36k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 1.65k, False: 47.0k]
  ------------------
  506|  2.36k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 1.22k, False: 1.13k]
  |  Branch (506:29): [True: 1.00k, False: 1.36k]
  |  Branch (506:45): [True: 1.00k, False: 227]
  ------------------
  507|  1.00k|                        {
  508|  1.00k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 388, False: 612]
  ------------------
  509|    388|                            {
  510|    388|                                return OpCode::MOVD;
  511|    388|                            }
  512|    612|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 388, False: 224]
  ------------------
  513|    388|                            {
  514|    388|                                return OpCode::MOVF;
  515|    388|                            }
  516|  1.00k|                        }
  517|  1.36k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 1.07k, False: 287]
  |  Branch (517:34): [True: 475, False: 889]
  |  Branch (517:50): [True: 720, False: 357]
  |  Branch (517:66): [True: 475, False: 245]
  ------------------
  518|    475|                        {
  519|    475|                            return OpCode::MULT;
  520|    475|                        }
  521|  1.11k|                        break;
  522|       |
  523|  13.1k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 13.1k, False: 35.6k]
  ------------------
  524|  17.8k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 4.70k, False: 44.0k]
  ------------------
  525|  17.8k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 876, False: 16.9k]
  ------------------
  526|  17.8k|                        {
  527|    602|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 602, False: 17.2k]
  ------------------
  528|  1.82k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 1.21k, False: 16.6k]
  ------------------
  529|  1.82k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 1.42k, False: 391]
  ------------------
  530|  1.42k|                                {
  531|  1.42k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 388, False: 1.04k]
  ------------------
  532|    388|                                    {
  533|    388|                                        return OpCode::SEQI;
  534|    388|                                    }
  535|  1.04k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 517, False: 524]
  ------------------
  536|    517|                                    {
  537|    517|                                        return OpCode::SEQU;
  538|    517|                                    }
  539|  1.42k|                                }
  540|    915|                                break;
  541|       |
  542|  2.49k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 2.49k, False: 15.3k]
  ------------------
  543|  2.86k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 374, False: 17.4k]
  ------------------
  544|  2.86k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 1.47k, False: 1.39k]
  ------------------
  545|  1.47k|                                {
  546|  1.47k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 420, False: 1.05k]
  ------------------
  547|    420|                                    {
  548|    420|                                        return OpCode::SGEI;
  549|    420|                                    }
  550|  1.05k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 534, False: 521]
  ------------------
  551|    534|                                    {
  552|    534|                                        return OpCode::SGEU;
  553|    534|                                    }
  554|  1.47k|                                }
  555|  1.39k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 1.11k, False: 281]
  ------------------
  556|  1.11k|                                {
  557|  1.11k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 393, False: 717]
  ------------------
  558|    393|                                    {
  559|    393|                                        return OpCode::SGTI;
  560|    393|                                    }
  561|    717|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 434, False: 283]
  ------------------
  562|    434|                                    {
  563|    434|                                        return OpCode::SGTU;
  564|    434|                                    }
  565|  1.11k|                                }
  566|  1.08k|                                break;
  567|       |
  568|  3.47k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 3.47k, False: 14.3k]
  ------------------
  569|  5.42k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 1.95k, False: 15.8k]
  ------------------
  570|  5.42k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 234, False: 5.19k]
  ------------------
  571|  5.42k|                                {
  572|    556|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 556, False: 4.87k]
  ------------------
  573|  1.00k|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 451, False: 4.97k]
  ------------------
  574|  1.00k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 548, False: 459]
  ------------------
  575|    548|                                        {
  576|    548|                                            return OpCode::SLAI;
  577|    548|                                        }
  578|    459|                                        break;
  579|       |
  580|    459|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 390, False: 5.03k]
  ------------------
  581|  1.55k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 1.16k, False: 4.26k]
  ------------------
  582|  1.55k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 398, False: 1.15k]
  ------------------
  583|    398|                                        {
  584|    398|                                            return OpCode::SLEI;
  585|    398|                                        }
  586|  1.15k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 780, False: 376]
  ------------------
  587|    780|                                        {
  588|    780|                                            return OpCode::SLEU;
  589|    780|                                        }
  590|    376|                                        break;
  591|       |
  592|    544|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 544, False: 4.88k]
  ------------------
  593|    738|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 194, False: 5.23k]
  ------------------
  594|    738|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 516, False: 222]
  ------------------
  595|    516|                                        {
  596|    516|                                            return OpCode::SLLI;
  597|    516|                                        }
  598|    222|                                        break;
  599|       |
  600|    777|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 777, False: 4.64k]
  ------------------
  601|  1.89k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 1.11k, False: 4.31k]
  ------------------
  602|  1.89k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 421, False: 1.47k]
  ------------------
  603|    421|                                        {
  604|    421|                                            return OpCode::SLTI;
  605|    421|                                        }
  606|  1.47k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 817, False: 655]
  ------------------
  607|    817|                                        {
  608|    817|                                            return OpCode::SLTU;
  609|    817|                                        }
  610|    655|                                        break;
  611|  5.42k|                                }
  612|       |
  613|  3.40k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 1.45k, False: 16.3k]
  ------------------
  614|  3.86k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 464, False: 17.3k]
  ------------------
  615|  3.86k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 1.98k, False: 1.88k]
  ------------------
  616|  1.98k|                                {
  617|  1.98k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 390, False: 1.59k]
  ------------------
  618|    390|                                    {
  619|    390|                                        return OpCode::SNEI;
  620|    390|                                    }
  621|  1.59k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 612, False: 980]
  ------------------
  622|    612|                                    {
  623|    612|                                        return OpCode::SNEU;
  624|    612|                                    }
  625|  1.98k|                                }
  626|  2.86k|                                break;
  627|       |
  628|  2.86k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 199, False: 17.6k]
  ------------------
  629|  1.56k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 1.37k, False: 16.4k]
  ------------------
  630|  1.56k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 684, False: 885]
  |  Branch (630:37): [True: 420, False: 1.14k]
  |  Branch (630:53): [True: 420, False: 264]
  ------------------
  631|    420|                                {
  632|    420|                                    return OpCode::SRAI;
  633|    420|                                }
  634|  1.14k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 878, False: 271]
  |  Branch (634:42): [True: 678, False: 471]
  |  Branch (634:58): [True: 678, False: 200]
  ------------------
  635|    678|                                {
  636|    678|                                    return OpCode::SRLI;
  637|    678|                                }
  638|    471|                                break;
  639|       |
  640|  1.48k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 1.48k, False: 16.3k]
  ------------------
  641|  3.36k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 1.88k, False: 15.9k]
  ------------------
  642|  3.36k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 2.97k, False: 391]
  ------------------
  643|  2.97k|                                {
  644|  2.97k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 304, False: 2.66k]
  ------------------
  645|  2.97k|                                    {
  646|    580|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 580, False: 2.39k]
  ------------------
  647|    966|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 386, False: 2.58k]
  ------------------
  648|    966|                                            return OpCode::SUBD;
  649|       |
  650|    322|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 322, False: 2.64k]
  ------------------
  651|    516|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 194, False: 2.77k]
  ------------------
  652|    516|                                            return OpCode::SUBF;
  653|       |
  654|    194|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 194, False: 2.77k]
  ------------------
  655|    517|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 323, False: 2.64k]
  ------------------
  656|    517|                                            return OpCode::SUBI;
  657|       |
  658|    345|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 345, False: 2.62k]
  ------------------
  659|    667|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 322, False: 2.64k]
  ------------------
  660|    667|                                            return OpCode::SUBU;
  661|  2.97k|                                    }
  662|  2.97k|                                }
  663|    695|                                break;
  664|  17.8k|                        }
  665|  6.90k|                        break;
  666|       |
  667|  6.90k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 1.31k, False: 47.4k]
  ------------------
  668|  1.55k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 239, False: 48.5k]
  ------------------
  669|  1.55k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 1.29k, False: 260]
  |  Branch (669:29): [True: 388, False: 1.16k]
  |  Branch (669:45): [True: 1.07k, False: 221]
  |  Branch (669:61): [True: 388, False: 683]
  ------------------
  670|    388|                        {
  671|    388|                            return OpCode::TRAP;
  672|    388|                        }
  673|  1.16k|                        break;
  674|  1.16k|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 1.02k, False: 47.7k]
  ------------------
  675|  1.41k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 386, False: 48.3k]
  ------------------
  676|  1.41k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 1.18k, False: 230]
  |  Branch (676:29): [True: 644, False: 767]
  |  Branch (676:45): [True: 857, False: 324]
  |  Branch (676:61): [True: 644, False: 213]
  ------------------
  677|    644|                        {
  678|    644|                            return OpCode::XORI;
  679|    644|                        }
  680|    767|                        break;
  681|  48.7k|                }
  682|  26.2k|                break;
  683|  48.7k|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|  28.6k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 28.6k, False: 167k]
  ------------------
  687|  28.6k|                const char c1 = token[0u];
  688|  28.6k|                const char c2 = token[1u];
  689|  28.6k|                const char c3 = token[2u];
  690|  28.6k|                const char c4 = token[3u];
  691|  28.6k|                const char c5 = token[4u];
  692|       |
  693|  28.6k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 5.83k, False: 22.7k]
  ------------------
  694|  28.6k|                {
  695|  2.27k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 2.27k, False: 26.3k]
  ------------------
  696|  2.69k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 422, False: 28.2k]
  ------------------
  697|  2.69k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 2.13k, False: 562]
  |  Branch (697:29): [True: 901, False: 1.79k]
  |  Branch (697:45): [True: 1.89k, False: 241]
  |  Branch (697:61): [True: 1.63k, False: 261]
  |  Branch (697:77): [True: 901, False: 733]
  ------------------
  698|    901|                        {
  699|    901|                            return OpCode::ADDUI;
  700|    901|                        }
  701|  1.79k|                        break;
  702|       |
  703|  1.79k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 791, False: 27.8k]
  ------------------
  704|  3.21k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 2.42k, False: 26.2k]
  ------------------
  705|  3.21k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 2.87k, False: 335]
  |  Branch (705:29): [True: 708, False: 2.50k]
  |  Branch (705:45): [True: 2.42k, False: 450]
  |  Branch (705:61): [True: 1.35k, False: 1.07k]
  |  Branch (705:77): [True: 708, False: 649]
  ------------------
  706|    708|                        {
  707|    708|                            return OpCode::DIVUI;
  708|    708|                        }
  709|  2.50k|                        break;
  710|       |
  711|  2.50k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 2.39k, False: 26.2k]
  ------------------
  712|  4.01k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 1.61k, False: 27.0k]
  ------------------
  713|  4.01k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 3.46k, False: 550]
  |  Branch (713:29): [True: 2.79k, False: 1.21k]
  |  Branch (713:45): [True: 3.00k, False: 456]
  |  Branch (713:61): [True: 2.79k, False: 211]
  ------------------
  714|  2.79k|                        {
  715|  2.79k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 570, False: 2.22k]
  ------------------
  716|  2.79k|                            {
  717|    194|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 194, False: 2.60k]
  ------------------
  718|    676|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 482, False: 2.31k]
  ------------------
  719|    676|                                    return OpCode::MULTD;
  720|       |
  721|    194|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 194, False: 2.60k]
  ------------------
  722|    388|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 194, False: 2.60k]
  ------------------
  723|    388|                                    return OpCode::MULTF;
  724|       |
  725|    258|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 258, False: 2.53k]
  ------------------
  726|    580|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 322, False: 2.47k]
  ------------------
  727|    580|                                    return OpCode::MULTI;
  728|       |
  729|    258|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 258, False: 2.53k]
  ------------------
  730|    580|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 322, False: 2.47k]
  ------------------
  731|    580|                                    return OpCode::MULTU;
  732|  2.79k|                            }
  733|  2.79k|                        }
  734|  1.78k|                        break;
  735|       |
  736|  8.31k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 8.31k, False: 20.3k]
  ------------------
  737|  12.8k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 4.55k, False: 24.0k]
  ------------------
  738|  12.8k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 487, False: 12.3k]
  ------------------
  739|  12.8k|                        {
  740|    821|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 821, False: 12.0k]
  ------------------
  741|  1.52k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 703, False: 12.1k]
  ------------------
  742|  1.52k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 1.25k, False: 274]
  |  Branch (742:37): [True: 619, False: 905]
  |  Branch (742:53): [True: 1.03k, False: 220]
  |  Branch (742:69): [True: 619, False: 411]
  ------------------
  743|    619|                                {
  744|    619|                                    return OpCode::SEQUI;
  745|    619|                                }
  746|    905|                                break;
  747|       |
  748|  2.82k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 2.82k, False: 10.0k]
  ------------------
  749|  3.28k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 457, False: 12.4k]
  ------------------
  750|  3.28k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 1.53k, False: 1.74k]
  |  Branch (750:37): [True: 644, False: 2.63k]
  |  Branch (750:53): [True: 998, False: 537]
  |  Branch (750:69): [True: 644, False: 354]
  ------------------
  751|    644|                                {
  752|    644|                                    return OpCode::SGEUI;
  753|    644|                                }
  754|  2.63k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 1.63k, False: 1.00k]
  |  Branch (754:42): [True: 1.19k, False: 1.44k]
  |  Branch (754:58): [True: 1.41k, False: 220]
  |  Branch (754:74): [True: 1.19k, False: 224]
  ------------------
  755|  1.19k|                                {
  756|  1.19k|                                    return OpCode::SGTUI;
  757|  1.19k|                                }
  758|  1.44k|                                break;
  759|       |
  760|  1.64k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 1.64k, False: 11.2k]
  ------------------
  761|  2.78k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 1.14k, False: 11.7k]
  ------------------
  762|  2.78k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 1.38k, False: 1.40k]
  |  Branch (762:37): [True: 646, False: 2.14k]
  |  Branch (762:53): [True: 1.18k, False: 203]
  |  Branch (762:69): [True: 646, False: 538]
  ------------------
  763|    646|                                {
  764|    646|                                    return OpCode::SLEUI;
  765|    646|                                }
  766|  2.14k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 1.03k, False: 1.10k]
  |  Branch (766:42): [True: 388, False: 1.75k]
  |  Branch (766:58): [True: 589, False: 445]
  |  Branch (766:74): [True: 388, False: 201]
  ------------------
  767|    388|                                {
  768|    388|                                    return OpCode::SLTUI;
  769|    388|                                }
  770|  1.75k|                                break;
  771|       |
  772|  1.75k|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 817, False: 12.0k]
  ------------------
  773|  1.59k|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 778, False: 12.0k]
  ------------------
  774|  1.59k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 1.25k, False: 345]
  |  Branch (774:37): [True: 548, False: 1.04k]
  |  Branch (774:53): [True: 750, False: 500]
  |  Branch (774:69): [True: 548, False: 202]
  ------------------
  775|    548|                                {
  776|    548|                                    return OpCode::SNEUI;
  777|    548|                                }
  778|  1.04k|                                break;
  779|       |
  780|  1.04k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 941, False: 11.9k]
  ------------------
  781|  3.19k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 2.25k, False: 10.6k]
  ------------------
  782|  3.19k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 2.85k, False: 346]
  |  Branch (782:37): [True: 516, False: 2.68k]
  |  Branch (782:53): [True: 1.13k, False: 1.71k]
  |  Branch (782:69): [True: 516, False: 622]
  ------------------
  783|    516|                                {
  784|    516|                                    return OpCode::SUBUI;
  785|    516|                                }
  786|  2.68k|                                break;
  787|  12.8k|                        }
  788|       |
  789|  8.32k|                        break;
  790|  28.6k|                }
  791|       |
  792|  20.2k|                break;
  793|  28.6k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|  20.2k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 15.5k, False: 181k]
  ------------------
  797|  15.5k|                const char c1 = token[0u];
  798|  15.5k|                const char c2 = token[1u];
  799|  15.5k|                const char c3 = token[2u];
  800|  15.5k|                const char c4 = token[3u];
  801|  15.5k|                const char c5 = token[4u];
  802|  15.5k|                const char c6 = token[5u];
  803|       |
  804|  15.5k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 7.57k, False: 8.01k]
  |  Branch (804:21): [True: 7.15k, False: 8.43k]
  |  Branch (804:37): [True: 7.37k, False: 205]
  |  Branch (804:53): [True: 7.15k, False: 220]
  ------------------
  805|  7.15k|                {
  806|  7.15k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 250, False: 6.90k]
  ------------------
  807|  7.15k|                    {
  808|  1.62k|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 1.62k, False: 5.53k]
  ------------------
  809|  1.94k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 322, False: 6.83k]
  ------------------
  810|  1.94k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 1.61k, False: 333]
  ------------------
  811|  1.61k|                            {
  812|  1.61k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 452, False: 1.15k]
  ------------------
  813|    452|                                {
  814|    452|                                    return OpCode::CVTD2F;
  815|    452|                                }
  816|  1.15k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 965, False: 194]
  ------------------
  817|    965|                                {
  818|    965|                                    return OpCode::CVTD2I;
  819|    965|                                }
  820|  1.61k|                            }
  821|    527|                            break;
  822|       |
  823|  1.44k|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 1.44k, False: 5.70k]
  ------------------
  824|  1.80k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 357, False: 6.79k]
  ------------------
  825|  1.80k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 1.40k, False: 401]
  ------------------
  826|  1.40k|                            {
  827|  1.40k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 580, False: 823]
  ------------------
  828|    580|                                {
  829|    580|                                    return OpCode::CVTF2D;
  830|    580|                                }
  831|    823|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 596, False: 227]
  ------------------
  832|    596|                                {
  833|    596|                                    return OpCode::CVTF2I;
  834|    596|                                }
  835|  1.40k|                            }
  836|    628|                            break;
  837|       |
  838|    628|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 323, False: 6.82k]
  ------------------
  839|  3.15k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 2.83k, False: 4.32k]
  ------------------
  840|  3.15k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 2.78k, False: 365]
  ------------------
  841|  2.78k|                            {
  842|  2.78k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 1.83k, False: 952]
  ------------------
  843|  1.83k|                                {
  844|  1.83k|                                    return OpCode::CVTI2D;
  845|  1.83k|                                }
  846|    952|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 612, False: 340]
  ------------------
  847|    612|                                {
  848|    612|                                    return OpCode::CVTI2F;
  849|    612|                                }
  850|  2.78k|                            }
  851|  7.15k|                    }
  852|  7.15k|                }
  853|  8.43k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 3.47k, False: 4.96k]
  |  Branch (853:26): [True: 388, False: 8.05k]
  |  Branch (853:42): [True: 2.28k, False: 1.18k]
  |  Branch (853:58): [True: 1.97k, False: 310]
  |  Branch (853:74): [True: 1.78k, False: 194]
  ------------------
  854|  8.43k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 964, False: 820]
  |  Branch (854:42): [True: 388, False: 576]
  ------------------
  855|    388|                {
  856|    388|                    return OpCode::MULTUI;
  857|    388|                }
  858|  10.1k|                break;
  859|  15.5k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|  10.1k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 7.86k, False: 188k]
  ------------------
  863|  7.86k|                const char c1 = token[0u];
  864|  7.86k|                const char c2 = token[1u];
  865|  7.86k|                const char c3 = token[2u];
  866|  7.86k|                const char c4 = token[3u];
  867|  7.86k|                const char c5 = token[4u];
  868|  7.86k|                const char c6 = token[5u];
  869|  7.86k|                const char c7 = token[6u];
  870|       |
  871|  7.86k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 3.96k, False: 3.89k]
  |  Branch (871:21): [True: 3.17k, False: 4.68k]
  |  Branch (871:37): [True: 3.62k, False: 339]
  |  Branch (871:53): [True: 3.17k, False: 456]
  ------------------
  872|  3.17k|                {
  873|  3.17k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 1.45k, False: 1.71k]
  |  Branch (873:25): [True: 548, False: 2.62k]
  |  Branch (873:41): [True: 1.22k, False: 228]
  |  Branch (873:54): [True: 1.01k, False: 212]
  |  Branch (873:70): [True: 548, False: 465]
  ------------------
  874|    548|                    {
  875|    548|                        return OpCode::MOVI2FP;
  876|    548|                    }
  877|  2.62k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 1.66k, False: 959]
  |  Branch (877:25): [True: 484, False: 2.13k]
  |  Branch (877:41): [True: 1.34k, False: 323]
  |  Branch (877:57): [True: 710, False: 631]
  |  Branch (877:70): [True: 484, False: 226]
  ------------------
  878|    484|                    {
  879|    484|                        return OpCode::MOVFP2I;
  880|    484|                    }
  881|  2.62k|                }
  882|  6.82k|                break;
  883|  7.86k|            }
  884|       |
  885|  6.82k|            default: {
  ------------------
  |  Branch (885:13): [True: 3.98k, False: 192k]
  ------------------
  886|  3.98k|                break;
  887|  7.86k|            }
  888|   196k|        }
  889|       |
  890|       |        // None found
  891|   124k|        return OpCode::NONE;
  892|   196k|    }
_ZN3dlx3iceEcc:
   17|   312k|    {
   18|   312k|        constexpr const char diff = 'a' - 'A';
   19|   312k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 104k, False: 207k]
  |  Branch (19:28): [True: 87.7k, False: 119k]
  ------------------
   20|   312k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   164k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|  2.17k|    {
  195|  2.17k|        ParseError err;
  196|       |
  197|  2.17k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|  2.17k|        err.m_LineNumber                           = line_number;
  199|  2.17k|        err.m_Column                               = column;
  200|  2.17k|        err.unexpected_argument_type.expected_type = expected_type;
  201|  2.17k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|  2.17k|        return err;
  204|  2.17k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|  2.17k|    {
  209|  2.17k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|  2.17k|                                                         token.GetColumn().unsafe(), expected_type,
  211|  2.17k|                                                         actual_type);
  212|  2.17k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|    194|    {
  218|    194|        ParseError err;
  219|       |
  220|    194|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|    194|        err.m_LineNumber        = line_number;
  222|    194|        err.m_Column            = column;
  223|    194|        err.invalid_number.text = text;
  224|       |
  225|    194|        return err;
  226|    194|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|    194|    {
  230|    194|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|    194|                                                token.GetColumn().unsafe(), token.GetText());
  232|    194|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|      2|    {
  237|      2|        ParseError err;
  238|       |
  239|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|      2|        err.m_LineNumber = line_number;
  241|      2|        err.m_Column     = column;
  242|       |
  243|      2|        return err;
  244|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|      2|    {
  249|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|      2|                                                                     token.GetColumn().unsafe());
  251|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  51.1k|    {
  257|  51.1k|        ParseError err;
  258|       |
  259|  51.1k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  51.1k|        err.m_LineNumber                   = line_number;
  261|  51.1k|        err.m_Column                       = column;
  262|  51.1k|        err.unexpected_token.expected_type = expected_type;
  263|  51.1k|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  51.1k|        return err;
  266|  51.1k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  51.1k|    {
  271|  51.1k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  51.1k|                                                  token.GetColumn().unsafe(), expected_type,
  273|  51.1k|                                                  token.GetType());
  274|  51.1k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|  29.3k|    {
  279|  29.3k|        ParseError err;
  280|       |
  281|  29.3k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|  29.3k|        err.m_LineNumber                   = line_number;
  283|  29.3k|        err.m_Column                       = column;
  284|  29.3k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|  29.3k|        return err;
  287|  29.3k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|    194|    {
  291|    194|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|    194|                                                    token.GetColumn().unsafe(), token.GetText());
  293|    194|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  30.3k|    {
  298|  30.3k|        ParseError err;
  299|       |
  300|  30.3k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  30.3k|        err.m_LineNumber                       = line_number;
  302|  30.3k|        err.m_Column                           = column;
  303|  30.3k|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  30.3k|        return err;
  306|  30.3k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  30.3k|    {
  311|  30.3k|        return ConstructInvalidLabelIdentifierParseError(
  312|  30.3k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  30.3k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|  13.0k|    {
  319|  13.0k|        ParseError err;
  320|       |
  321|  13.0k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|  13.0k|        err.m_LineNumber                     = line_number;
  323|  13.0k|        err.m_Column                         = column;
  324|  13.0k|        err.label_already_defined.label_name = label_name;
  325|  13.0k|        err.label_already_defined.at_line    = at_line;
  326|  13.0k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|  13.0k|        return err;
  329|  13.0k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|  13.0k|    {
  334|  13.0k|        return ConstructLabelAlreadyDefinedParseError(
  335|  13.0k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|  13.0k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|  13.0k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|  24.5k|    {
  342|  24.5k|        ParseError err;
  343|       |
  344|  24.5k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|  24.5k|        err.m_LineNumber = line_number;
  346|  24.5k|        err.m_Column     = column;
  347|       |
  348|  24.5k|        return err;
  349|  24.5k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|  24.5k|    {
  354|  24.5k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|  24.5k|                                                        token.GetColumn().unsafe());
  356|  24.5k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|  6.55k|    {
  362|  6.55k|        ParseError err;
  363|       |
  364|  6.55k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|  6.55k|        err.m_LineNumber               = line_number;
  366|  6.55k|        err.m_Column                   = column;
  367|  6.55k|        err.too_few_arguments.required = required;
  368|  6.55k|        err.too_few_arguments.provided = provided;
  369|       |
  370|  6.55k|        return err;
  371|  6.55k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|  6.55k|    {
  376|  6.55k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|  6.55k|                                                  token.GetColumn().unsafe(), required, provided);
  378|  6.55k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|  6.14k|    {
  383|  6.14k|        ParseError err;
  384|       |
  385|  6.14k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|  6.14k|        err.m_LineNumber           = line_number;
  387|  6.14k|        err.m_Column               = column;
  388|  6.14k|        err.empty_label.label_name = label_name;
  389|       |
  390|  6.14k|        return err;
  391|  6.14k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|  6.14k|    {
  395|  6.14k|        return ConstructEmptyLabelParseError(
  396|  6.14k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|  6.14k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 5.22k, False: 922]
  ------------------
  398|  5.22k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|  6.14k|                        token.GetText());
  400|  6.14k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|    955|    {
  405|    955|        ParseError err;
  406|       |
  407|    955|        err.m_Type       = ParseError::Type::TooManyComma;
  408|    955|        err.m_LineNumber = line_number;
  409|    955|        err.m_Column     = column;
  410|       |
  411|    955|        return err;
  412|    955|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|    955|    {
  416|    955|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|    955|                                               token.GetColumn().unsafe());
  418|    955|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   164k|    {
   19|   164k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   164k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  4.50k|    {
  181|  4.50k|        ParsedProgram program;
  182|       |
  183|  4.50k|        program.m_Tokens = tokens;
  184|       |
  185|  4.50k|        phi::boolean line_has_instruction{false};
  186|  4.50k|        phi::usize   label_count{0u};
  187|       |
  188|   201k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 197k, False: 4.50k]
  ------------------
  189|   197k|        {
  190|   197k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   197k|            switch (current_token.GetType())
  195|   197k|            {
  196|       |                // Ignore comments
  197|  1.02k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 1.02k, False: 196k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  1.02k|                    break;
  200|       |
  201|  28.6k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 28.6k, False: 168k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  28.6k|                    line_has_instruction = false;
  204|  28.6k|                    break;
  205|       |
  206|  82.3k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 82.3k, False: 114k]
  ------------------
  207|  82.3k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 6.04k, False: 76.2k]
  ------------------
  208|  6.04k|                    {
  209|  6.04k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  6.04k|                                current_token, Token::Type::NewLine));
  211|  6.04k|                        break;
  212|  6.04k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  76.2k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 17.3k, False: 58.8k]
  ------------------
  217|  17.3k|                    {
  218|  17.3k|                        program.AddParseError(
  219|  17.3k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  17.3k|                        break;
  221|  17.3k|                    }
  222|       |
  223|  58.8k|                    phi::string_view label_name = current_token.GetText();
  224|  58.8k|                    label_name.remove_suffix(1u);
  225|       |
  226|  58.8k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 29.1k, False: 29.7k]
  ------------------
  227|  29.1k|                    {
  228|  29.1k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|  29.1k|                                current_token.GetLineNumber().unsafe(),
  230|  29.1k|                                current_token.GetColumn().unsafe(), label_name));
  231|  29.1k|                        break;
  232|  29.1k|                    }
  233|       |
  234|  29.7k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 10.0k, False: 19.7k]
  ------------------
  235|  10.0k|                    {
  236|  10.0k|                        program.AddParseError(
  237|  10.0k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  10.0k|                        break;
  239|  10.0k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  19.7k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 13.0k, False: 6.72k]
  ------------------
  243|  13.0k|                    {
  244|       |                        // Find first defintions of label
  245|  13.0k|                        const Token* first_label_definition =
  246|  13.0k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  13.0k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  13.0k|                                    {
  249|  13.0k|                                        phi::string_view token_label_name = t.GetText();
  250|  13.0k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  13.0k|                                        if (token_label_name == label_name)
  253|  13.0k|                                        {
  254|  13.0k|                                            return true;
  255|  13.0k|                                        }
  256|  13.0k|                                    }
  257|       |
  258|  13.0k|                                    return false;
  259|  13.0k|                                });
  260|       |
  261|  13.0k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  13.0k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  13.0k|                                current_token, *first_label_definition));
  265|  13.0k|                        break;
  266|  13.0k|                    }
  267|       |
  268|  6.72k|                    program.m_JumpData[label_name] =
  269|  6.72k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|  6.72k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  6.72k|                    break;
  276|  19.7k|                }
  277|       |
  278|  43.9k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 43.9k, False: 153k]
  ------------------
  279|  43.9k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 24.5k, False: 19.3k]
  ------------------
  280|  24.5k|                    {
  281|  24.5k|                        program.AddParseError(
  282|  24.5k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  24.5k|                        break;
  284|  24.5k|                    }
  285|       |
  286|  19.3k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  19.3k|                    PHI_ASSERT(current_token.HasHint());
  290|  19.3k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  19.3k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  19.3k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  19.3k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  19.3k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  19.3k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  19.3k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  19.3k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  19.3k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  32.6k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 29.3k, False: 3.30k]
  ------------------
  312|  29.3k|                    {
  313|       |                        // Get next token
  314|  29.3k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 844, False: 28.5k]
  ------------------
  315|    844|                        {
  316|    844|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    844|                                    current_token, number_of_argument_required.unsafe(),
  318|    844|                                    argument_num.unsafe()));
  319|    844|                            break;
  320|    844|                        }
  321|       |
  322|  28.5k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  28.5k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 9.01k, False: 19.5k]
  ------------------
  326|  9.01k|                        {
  327|  9.01k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 955, False: 8.05k]
  ------------------
  328|    955|                            {
  329|    955|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    955|                            }
  331|       |
  332|  9.01k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  9.01k|                            continue;
  335|  9.01k|                        }
  336|       |
  337|  19.5k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 5.70k, False: 13.8k]
  ------------------
  338|  5.70k|                        {
  339|  5.70k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  5.70k|                                    token, number_of_argument_required.unsafe(),
  341|  5.70k|                                    argument_num.unsafe()));
  342|  5.70k|                            break;
  343|  5.70k|                        }
  344|       |
  345|  13.8k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  13.8k|                                parse_instruction_argument(
  347|  13.8k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  13.8k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 9.52k, False: 4.28k]
  ------------------
  349|  9.52k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  9.52k|                            break;
  352|  9.52k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  4.28k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  4.28k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  4.28k|                        argument_num++;
  359|  4.28k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  4.28k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  19.3k|                    program.m_Instructions.emplace_back(instruction);
  367|  19.3k|                    line_has_instruction = true;
  368|  19.3k|                    break;
  369|  43.9k|                }
  370|       |
  371|  41.0k|                default:
  ------------------
  |  Branch (371:17): [True: 41.0k, False: 155k]
  ------------------
  372|  41.0k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  41.0k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 21.0k, False: 19.9k]
  ------------------
  374|  21.0k|                    {
  375|  21.0k|                        expected_token_type = Token::Type::NewLine;
  376|  21.0k|                    }
  377|       |
  378|  41.0k|                    program.AddParseError(
  379|  41.0k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  41.0k|                    break;
  381|   197k|            }
  382|   197k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  4.50k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 795, False: 3.71k]
  ------------------
  386|    795|        {
  387|  8.33k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 7.54k, False: 795]
  ------------------
  388|  7.54k|            {
  389|  7.54k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  7.54k|                const Token& token = *it;
  392|  7.54k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 6.14k, False: 1.39k]
  ------------------
  393|  6.14k|                {
  394|  6.14k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  6.14k|                    --label_count;
  396|  6.14k|                }
  397|  7.54k|            }
  398|    795|        }
  399|       |
  400|  4.50k|        return program;
  401|  4.50k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  4.50k|    {
  405|  4.50k|        TokenStream tokens = Tokenize(source);
  406|  4.50k|        return Parse(tokens);
  407|  4.50k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  13.8k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  13.8k|        switch (token.GetType())
   37|  13.8k|        {
   38|  1.43k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 1.43k, False: 12.3k]
  ------------------
   39|  1.43k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 572, False: 860]
  ------------------
   40|  1.43k|                                          ArgumentType::AddressDisplacement))
   41|    572|                {
   42|    572|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    572|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    572|                    return {};
   46|    572|                }
   47|       |
   48|       |                // Get address displacement
   49|    860|                PHI_ASSERT(token.HasHint());
   50|       |
   51|    860|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|    860|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 2, False: 858]
  ------------------
   54|      2|                {
   55|      2|                    program.AddParseError(
   56|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      2|                    return {};
   58|      2|                }
   59|       |
   60|    858|                auto         it           = tokens.current_position();
   61|    858|                const Token& first_token  = tokens.consume();
   62|    858|                const Token& second_token = tokens.consume();
   63|    858|                const Token& third_token  = tokens.consume();
   64|       |
   65|    858|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 211, False: 647]
  ------------------
   66|    211|                {
   67|    211|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    211|                            first_token, Token::Type::OpenBracket));
   69|    211|                    return {};
   70|    211|                }
   71|       |
   72|       |                // Second token is the register
   73|    647|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 227, False: 420]
  ------------------
   74|    227|                {
   75|    227|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|    227|                            second_token, Token::Type::RegisterInt));
   77|    227|                    return {};
   78|    227|                }
   79|       |
   80|    420|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 194, False: 226]
  ------------------
   81|    194|                {
   82|    194|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|    194|                            third_token, Token::Type::ClosingBracket));
   84|    194|                    return {};
   85|    194|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|    226|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|    226|                return ConstructInstructionArgumentAddressDisplacement(
   94|    226|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|    420|            }
   96|  1.33k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 1.33k, False: 12.4k]
  ------------------
   97|  1.33k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 196, False: 1.13k]
  ------------------
   98|    196|                {
   99|    196|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    196|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    196|                    return {};
  102|    196|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  1.13k|                return ConstructInstructionArgumentRegisterInt(
  108|  1.13k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  1.33k|            }
  110|    679|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 679, False: 13.1k]
  ------------------
  111|    679|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 452, False: 227]
  ------------------
  112|    452|                {
  113|    452|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    452|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    452|                    return {};
  116|    452|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|    227|                return ConstructInstructionArgumentRegisterFloat(
  122|    227|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|    679|            }
  124|    194|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 194, False: 13.6k]
  ------------------
  125|    194|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|    194|                return {};
  128|    679|            }
  129|  6.17k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 6.17k, False: 7.63k]
  ------------------
  130|       |                // Parse as Label
  131|  6.17k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 758, False: 5.41k]
  ------------------
  132|    758|                {
  133|    758|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|    758|                            token, expected_argument_type, ArgumentType::Label));
  135|    758|                    return {};
  136|    758|                }
  137|       |
  138|  5.41k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 5.41k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  5.41k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 2.94k, False: 2.46k]
  ------------------
  145|  2.94k|                {
  146|  2.94k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  2.94k|                    return {};
  148|  2.94k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  2.46k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  5.41k|            }
  154|    619|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 619, False: 13.1k]
  ------------------
  155|    619|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 197, False: 422]
  ------------------
  156|    197|                {
  157|    197|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    197|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    197|                    return {};
  160|    197|                }
  161|       |
  162|    422|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 228, False: 194]
  ------------------
  163|    228|                {
  164|    228|                    return ConstructInstructionArgumentImmediateValue(
  165|    228|                            static_cast<std::int16_t>(token.GetHint()));
  166|    228|                }
  167|       |
  168|    194|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    194|                return {};
  170|    422|            }
  171|       |
  172|  3.38k|            default:
  ------------------
  |  Branch (172:13): [True: 3.38k, False: 10.4k]
  ------------------
  173|  3.38k|                program.AddParseError(
  174|  3.38k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  3.38k|                return {};
  176|  13.8k|        }
  177|  13.8k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|   128k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   128k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 83.4k, False: 45.3k]
  ------------------
  248|  83.4k|                                    {
  249|  83.4k|                                        phi::string_view token_label_name = t.GetText();
  250|  83.4k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  83.4k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 13.0k, False: 70.4k]
  ------------------
  253|  13.0k|                                        {
  254|  13.0k|                                            return true;
  255|  13.0k|                                        }
  256|  83.4k|                                    }
  257|       |
  258|   115k|                                    return false;
  259|   128k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    203|    {
  354|    203|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 203]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    203|        m_CurrentProgram = &program;
  361|       |
  362|    203|        m_ProgramCounter               = 0u;
  363|    203|        m_Halted                       = false;
  364|    203|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    203|        m_LastRaisedException          = Exception::None;
  366|    203|        m_CurrentStepCount             = 0u;
  367|       |
  368|    203|        return true;
  369|    203|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|   202k|    {
   13|   202k|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 29.5k, False: 172k]
  ------------------
   14|  29.5k|        {
   15|  29.5k|            const char first_char = token[0u];
   16|  29.5k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 1.42k, False: 28.1k]
  |  Branch (16:38): [True: 1.75k, False: 26.4k]
  ------------------
   17|  3.17k|            {
   18|  3.17k|                const char second_char = token[1u];
   19|  3.17k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 2.92k, False: 245]
  |  Branch (19:43): [True: 2.32k, False: 599]
  ------------------
   20|  2.32k|                {
   21|  2.32k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  2.32k|                }
   23|  3.17k|            }
   24|  29.5k|        }
   25|   172k|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 43.9k, False: 129k]
  ------------------
   26|  43.9k|        {
   27|  43.9k|            const char first_char = token[0u];
   28|  43.9k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 2.74k, False: 41.1k]
  |  Branch (28:38): [True: 325, False: 40.8k]
  ------------------
   29|  3.06k|            {
   30|  3.06k|                const char second_char = token[1u];
   31|  3.06k|                const char third_char  = token[2u];
   32|       |
   33|  3.06k|                switch (second_char)
   34|  3.06k|                {
   35|    882|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 882, False: 2.18k]
  ------------------
   36|    882|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 559, False: 323]
  |  Branch (36:50): [True: 358, False: 201]
  ------------------
   37|    358|                        {
   38|    358|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|    358|                        }
   40|    524|                        break;
   41|    882|                    }
   42|    937|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 937, False: 2.13k]
  ------------------
   43|    937|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 743, False: 194]
  |  Branch (43:50): [True: 547, False: 196]
  ------------------
   44|    547|                        {
   45|    547|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|    547|                        }
   47|    390|                        break;
   48|    937|                    }
   49|    889|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 889, False: 2.17k]
  ------------------
   50|    889|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 194, False: 695]
  |  Branch (50:50): [True: 358, False: 337]
  ------------------
   51|    552|                        {
   52|    552|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|    552|                        }
   54|    337|                        break;
   55|    889|                    }
   56|    359|                    default: {
  ------------------
  |  Branch (56:21): [True: 359, False: 2.70k]
  ------------------
   57|    359|                        break;
   58|    889|                    }
   59|  3.06k|                }
   60|  3.06k|            }
   61|  43.9k|        }
   62|       |
   63|   198k|        return IntRegisterID::None;
   64|   202k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|   198k|    {
   68|   198k|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 27.2k, False: 171k]
  ------------------
   69|  27.2k|        {
   70|  27.2k|            const char first_char = token[0u];
   71|  27.2k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 901, False: 26.3k]
  |  Branch (71:38): [True: 1.10k, False: 25.2k]
  ------------------
   72|  2.00k|            {
   73|  2.00k|                const char second_char = token[1u];
   74|  2.00k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 1.77k, False: 226]
  |  Branch (74:43): [True: 1.11k, False: 664]
  ------------------
   75|  1.11k|                {
   76|  1.11k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  1.11k|                }
   78|  2.00k|            }
   79|  27.2k|        }
   80|   171k|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 42.4k, False: 129k]
  ------------------
   81|  42.4k|        {
   82|  42.4k|            const char first_char = token[0u];
   83|  42.4k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 2.35k, False: 40.1k]
  |  Branch (83:38): [True: 525, False: 39.5k]
  ------------------
   84|  2.88k|            {
   85|  2.88k|                const char second_char = token[1u];
   86|  2.88k|                const char third_char  = token[2u];
   87|       |
   88|  2.88k|                switch (second_char)
   89|  2.88k|                {
   90|    712|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 712, False: 2.16k]
  ------------------
   91|    712|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 517, False: 195]
  |  Branch (91:50): [True: 195, False: 322]
  ------------------
   92|    195|                        {
   93|    195|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|    195|                        }
   95|    517|                        break;
   96|    712|                    }
   97|    915|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 915, False: 1.96k]
  ------------------
   98|    915|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 657, False: 258]
  |  Branch (98:50): [True: 453, False: 204]
  ------------------
   99|    453|                        {
  100|    453|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|    453|                        }
  102|    462|                        break;
  103|    915|                    }
  104|    583|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 583, False: 2.29k]
  ------------------
  105|    583|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 194, False: 389]
  |  Branch (105:50): [True: 194, False: 195]
  ------------------
  106|    388|                        {
  107|    388|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|    388|                        }
  109|    195|                        break;
  110|    583|                    }
  111|    671|                    default: {
  ------------------
  |  Branch (111:21): [True: 671, False: 2.21k]
  ------------------
  112|    671|                        break;
  113|    583|                    }
  114|  2.88k|                }
  115|  2.88k|            }
  116|  42.4k|        }
  117|       |
  118|   196k|        return FloatRegisterID::None;
  119|   198k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|   174k|    {
  123|   174k|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 39.5k, False: 134k]
  ------------------
  124|  39.5k|        {
  125|  39.5k|            const char c1 = token[0u];
  126|  39.5k|            const char c2 = token[1u];
  127|  39.5k|            const char c3 = token[2u];
  128|  39.5k|            const char c4 = token[3u];
  129|       |
  130|  39.5k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 1.22k, False: 38.3k]
  |  Branch (130:34): [True: 392, False: 37.9k]
  |  Branch (130:49): [True: 233, False: 1.38k]
  |  Branch (130:62): [True: 1.03k, False: 353]
  ------------------
  131|  39.5k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 827, False: 437]
  |  Branch (131:34): [True: 199, False: 238]
  |  Branch (131:49): [True: 805, False: 221]
  |  Branch (131:62): [True: 3, False: 218]
  ------------------
  132|  39.5k|        }
  133|       |
  134|   134k|        return false;
  135|   174k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|   175k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  52.4k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|   676k|    {
   41|   676k|        return m_Type;
   42|   676k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   583k|    {
   51|   583k|        return m_LineNumber;
   52|   583k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  1.15M|    {
   56|  1.15M|        return m_Column;
   57|  1.15M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|   780k|    {
   61|   780k|        return m_Text.length();
   62|   780k|    }
_ZNK3dlx5Token7GetTextEv:
   65|   293k|    {
   66|   293k|        return m_Text;
   67|   293k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  20.6k|    {
   80|  20.6k|        return m_HasHint;
   81|  20.6k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  22.0k|    {
   85|  22.0k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  22.0k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  22.0k|                   m_Type == Type::ImmediateInteger);
   88|  22.0k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  22.0k|        return m_Hint;
   91|  22.0k|    }

_ZN3dlx11TokenStream8finalizeEv:
   30|  4.50k|    {
   31|       |#if defined(PHI_DEBUG)
   32|       |        PHI_ASSERT(!m_Finialized);
   33|       |#endif
   34|       |
   35|  4.50k|        m_Iterator = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |        m_Finialized = true;
   38|       |#endif
   39|  4.50k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   51|    860|    {
   52|    860|        return x + m_Iterator <= m_Tokens.size();
   53|    860|    }
_ZNK3dlx11TokenStream8has_moreEv:
   56|   230k|    {
   57|   230k|        return m_Iterator < m_Tokens.size();
   58|   230k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   61|   228k|    {
   62|   228k|        return m_Iterator >= m_Tokens.size();
   63|   228k|    }
_ZN3dlx11TokenStream7consumeEv:
   76|   228k|    {
   77|   228k|        PHI_ASSERT(!reached_end());
   78|       |#if defined(PHI_DEBUG)
   79|       |        PHI_ASSERT(m_Finialized);
   80|       |#endif
   81|       |
   82|   228k|        return m_Tokens.at(m_Iterator++.unsafe());
   83|   228k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  155|    858|    {
  156|    858|        return m_Iterator;
  157|    858|    }
_ZN3dlx11TokenStream12set_positionEN3phi7integerImEE:
  160|    226|    {
  161|       |#if defined(PHI_DEBUG)
  162|       |        PHI_ASSERT(m_Finialized);
  163|       |#endif
  164|       |
  165|    226|        m_Iterator = pos;
  166|    226|    }
_ZNK3dlx11TokenStream5beginEv:
  169|  4.50k|    {
  170|       |#if defined(PHI_DEBUG)
  171|       |        //PHI_ASSERT(m_Finialized);
  172|       |#endif
  173|       |
  174|  4.50k|        return m_Tokens.begin();
  175|  4.50k|    }
_ZNK3dlx11TokenStream3endEv:
  187|  4.50k|    {
  188|       |#if defined(PHI_DEBUG)
  189|       |        //PHI_ASSERT(m_Finialized);
  190|       |#endif
  191|       |
  192|  4.50k|        return m_Tokens.end();
  193|  4.50k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  205|    795|    {
  206|       |#if defined(PHI_DEBUG)
  207|       |        //PHI_ASSERT(m_Finialized);
  208|       |#endif
  209|       |
  210|    795|        return m_Tokens.rbegin();
  211|    795|    }
_ZNK3dlx11TokenStream4rendEv:
  214|  7.54k|    {
  215|       |#if defined(PHI_DEBUG)
  216|       |        //PHI_ASSERT(m_Finialized);
  217|       |#endif
  218|       |
  219|  7.54k|        return m_Tokens.rend();
  220|  7.54k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  4.50k|    {
   66|  4.50k|        TokenStream tokens;
   67|       |
   68|  4.50k|        phi::string_view current_token;
   69|       |
   70|  4.50k|        phi::u64 current_line_number{1u};
   71|  4.50k|        phi::u64 current_column{1u};
   72|  4.50k|        phi::u64 token_begin{0u};
   73|       |
   74|  4.50k|        phi::boolean parsing_comment{false};
   75|       |
   76|   642k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 637k, False: 4.50k]
  ------------------
   77|   637k|        {
   78|   637k|            const char c{source.at(i)};
   79|       |
   80|   637k|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 34.5k, False: 603k]
  ------------------
   81|  34.5k|            {
   82|  34.5k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 7.68k, False: 26.8k]
  ------------------
   83|  7.68k|                {
   84|       |                    // Skip empty lines
   85|  7.68k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  7.68k|                                        current_line_number, current_column);
   87|       |
   88|  7.68k|                    parsing_comment = false;
   89|  7.68k|                    current_line_number += 1u;
   90|  7.68k|                    current_column = 1u;
   91|  7.68k|                    continue;
   92|  7.68k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  26.8k|                tokens.emplace_back(ParseToken(
   96|  26.8k|                        source.substring_view(
   97|  26.8k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  26.8k|                                current_token.length()),
   99|  26.8k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  26.8k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  26.8k|                                    current_line_number, current_column);
  103|       |
  104|  26.8k|                current_token   = phi::string_view{};
  105|  26.8k|                parsing_comment = false;
  106|  26.8k|                current_line_number += 1u;
  107|  26.8k|                current_column = 0u;
  108|  26.8k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|   603k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 914, False: 602k]
  |  Branch (110:34): [True: 1.48k, False: 601k]
  ------------------
  111|  2.39k|            {
  112|  2.39k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 307, False: 2.08k]
  ------------------
  113|    307|                {
  114|    307|                    token_begin = i;
  115|    307|                }
  116|  2.08k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 1.53k, False: 552]
  ------------------
  117|  1.53k|                {
  118|  1.53k|                    tokens.emplace_back(ParseToken(
  119|  1.53k|                            source.substring_view(
  120|  1.53k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  1.53k|                                    current_token.length()),
  122|  1.53k|                            current_line_number, current_column - current_token.length()));
  123|  1.53k|                    token_begin   = i;
  124|  1.53k|                    current_token = phi::string_view{};
  125|  1.53k|                }
  126|       |
  127|  2.39k|                parsing_comment = true;
  128|  2.39k|                current_token   = source.substring_view(
  129|  2.39k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  2.39k|                        current_token.length() + 1u);
  131|  2.39k|            }
  132|   601k|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 2.42k, False: 598k]
  ------------------
  133|  2.42k|            {
  134|       |                // simply append the character
  135|  2.42k|                current_token = source.substring_view(
  136|  2.42k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|  2.42k|                        current_token.length() + 1u);
  138|  2.42k|            }
  139|   598k|            else
  140|   598k|            {
  141|       |                // Not parsing a comment
  142|   598k|                switch (c)
  143|   598k|                {
  144|  6.52k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 6.52k, False: 592k]
  ------------------
  145|  16.7k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 10.2k, False: 588k]
  ------------------
  146|  16.7k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 0, False: 598k]
  ------------------
  147|  16.7k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 2.23k, False: 14.4k]
  ------------------
  148|  2.23k|                        {
  149|  2.23k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|  2.23k|                            continue;
  152|  2.23k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  14.4k|                        tokens.emplace_back(ParseToken(
  156|  14.4k|                                source.substring_view(
  157|  14.4k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  14.4k|                                        current_token.length()),
  159|  14.4k|                                current_line_number, current_column - current_token.length()));
  160|  14.4k|                        current_token = phi::string_view{};
  161|  14.4k|                        break;
  162|  67.1k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 67.1k, False: 531k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  67.1k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 61.4k, False: 5.72k]
  ------------------
  165|  61.4k|                        {
  166|  61.4k|                            current_token = source.substring_view(
  167|  61.4k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  61.4k|                                    current_token.length() + 1u);
  169|  61.4k|                            tokens.emplace_back(ParseToken(
  170|  61.4k|                                    source.substring_view(
  171|  61.4k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  61.4k|                                                    token_begin),
  173|  61.4k|                                            current_token.length()),
  174|  61.4k|                                    current_line_number,
  175|  61.4k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  61.4k|                            current_token = phi::string_view{};
  178|  61.4k|                        }
  179|  5.72k|                        else
  180|  5.72k|                        {
  181|       |                            // Orphan colon
  182|  5.72k|                            token_begin = i;
  183|       |
  184|  5.72k|                            tokens.emplace_back(
  185|  5.72k|                                    Token::Type::Colon,
  186|  5.72k|                                    source.substring_view(
  187|  5.72k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  5.72k|                                                    token_begin),
  189|  5.72k|                                            1u),
  190|  5.72k|                                    current_line_number, current_column);
  191|  5.72k|                        }
  192|  67.1k|                        break;
  193|  30.7k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 30.7k, False: 567k]
  ------------------
  194|  36.8k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 6.15k, False: 592k]
  ------------------
  195|  43.4k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 6.55k, False: 592k]
  ------------------
  196|  43.4k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 36.7k, False: 6.65k]
  ------------------
  197|  36.7k|                        {
  198|  36.7k|                            tokens.emplace_back(ParseToken(
  199|  36.7k|                                    source.substring_view(
  200|  36.7k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  36.7k|                                                    token_begin),
  202|  36.7k|                                            current_token.length()),
  203|  36.7k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  36.7k|                            current_token = phi::string_view{};
  206|  36.7k|                        }
  207|       |
  208|  43.4k|                        Token::Type type;
  209|  43.4k|                        switch (c)
  210|  43.4k|                        {
  211|  30.7k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 30.7k, False: 12.7k]
  ------------------
  212|  30.7k|                                type = Token::Type::Comma;
  213|  30.7k|                                break;
  214|  6.15k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 6.15k, False: 37.2k]
  ------------------
  215|  6.15k|                                type = Token::Type::OpenBracket;
  216|  6.15k|                                break;
  217|  6.55k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 6.55k, False: 36.8k]
  ------------------
  218|  6.55k|                                type = Token::Type::ClosingBracket;
  219|  6.55k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 43.4k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  43.4k|#endif
  225|  43.4k|                        }
  226|       |
  227|  43.4k|                        token_begin = i;
  228|       |
  229|  43.4k|                        tokens.emplace_back(
  230|  43.4k|                                type,
  231|  43.4k|                                source.substring_view(
  232|  43.4k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  43.4k|                                        1u),
  234|  43.4k|                                current_line_number, current_column);
  235|  43.4k|                        break;
  236|       |
  237|   471k|                    default:
  ------------------
  |  Branch (237:21): [True: 471k, False: 127k]
  ------------------
  238|   471k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 142k, False: 328k]
  ------------------
  239|   142k|                        {
  240|   142k|                            token_begin = i;
  241|   142k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   471k|                        current_token = source.substring_view(
  245|   471k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   471k|                                current_token.length() + 1u);
  247|   598k|                }
  248|   598k|            }
  249|       |
  250|   628k|            current_column += 1u;
  251|   628k|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  4.50k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 3.33k, False: 1.17k]
  ------------------
  255|  3.33k|        {
  256|  3.33k|            tokens.emplace_back(
  257|  3.33k|                    ParseToken(source.substring_view(
  258|  3.33k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  3.33k|                                       current_token.length()),
  260|  3.33k|                               current_line_number, current_column - current_token.length()));
  261|  3.33k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  4.50k|        tokens.finalize();
  265|       |
  266|  4.50k|        return tokens;
  267|  4.50k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   144k|    {
   14|   144k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 1.16k, False: 143k]
  |  Branch (14:13): [True: 942, False: 143k]
  |  Branch (14:36): [True: 942, False: 223]
  ------------------
   15|    942|        {
   16|    942|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|    942|            if (number)
  ------------------
  |  Branch (18:17): [True: 281, False: 661]
  ------------------
   19|    281|            {
   20|    281|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|    281|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|    281|            }
   23|       |
   24|    661|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|    942|        }
   26|       |
   27|   143k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 695, False: 142k]
  |  Branch (27:13): [True: 1.84k, False: 141k]
  |  Branch (27:36): [True: 1.14k, False: 141k]
  ------------------
   28|  1.84k|        {
   29|  1.84k|            return {Token::Type::Comment, token, line_number, column};
   30|  1.84k|        }
   31|       |
   32|   141k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 2.98k, False: 138k]
  ------------------
   33|  2.98k|        {
   34|  2.98k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  2.98k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  2.98k|        }
   37|       |
   38|   138k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 454, False: 138k]
  ------------------
   39|    454|        {
   40|    454|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|    454|        }
   42|       |
   43|   138k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 1.94k, False: 136k]
  ------------------
   44|  1.94k|        {
   45|  1.94k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  1.94k|                    static_cast<phi::uint32_t>(id)};
   47|  1.94k|        }
   48|       |
   49|   136k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 1.77k, False: 134k]
  ------------------
   50|  1.77k|        {
   51|  1.77k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  1.77k|                    static_cast<phi::uint32_t>(id)};
   53|  1.77k|        }
   54|       |
   55|   134k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 45.5k, False: 88.9k]
  ------------------
   56|  45.5k|        {
   57|  45.5k|            return {Token::Type::OpCode, token, line_number, column,
   58|  45.5k|                    static_cast<phi::uint32_t>(opcode)};
   59|  45.5k|        }
   60|       |
   61|  88.9k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|   134k|    }

_ZN6ImVec2C2Ev:
  262|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

LLVMFuzzerTestOneInput:
   10|  4.50k|{
   11|  4.50k|    static dlxemu::Emulator emu;
   12|       |
   13|  4.50k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   14|       |
   15|  4.50k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   16|       |
   17|       |    // Parse it
   18|  4.50k|    editor.SetText(std::string(source.data(), source.length().unsafe()));
   19|  4.50k|    editor.m_FullText = editor.GetText();
   20|       |
   21|  4.50k|    emu.ParseProgram(editor.m_FullText);
   22|       |
   23|  4.50k|    editor.ColorizeInternal();
   24|       |
   25|  4.50k|    return 0;
   26|  4.50k|}


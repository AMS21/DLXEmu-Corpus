_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  197|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  202|  22.2k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  240|  4.44k|    {
  241|  4.44k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (241:13): [True: 1.19k, False: 3.25k]
  ------------------
  242|  1.19k|        {
  243|  1.19k|            return m_Line < other.m_Line;
  244|  1.19k|        }
  245|       |
  246|  3.25k|        return m_Column <= other.m_Column;
  247|  4.44k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  251|      1|    {
  252|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (252:13): [True: 0, False: 1]
  ------------------
  253|      0|        {
  254|      0|            return m_Line > other.m_Line;
  255|      0|        }
  256|       |
  257|      1|        return m_Column >= other.m_Column;
  258|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  265|   586k|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  293|      1|    {
  294|      1|        Colorize();
  295|      1|        m_Lines.push_back(Line());
  296|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  299|      1|    {
  300|      1|        VerifyInternalState();
  301|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  349|  4.44k|    {
  350|  4.44k|        m_ErrorMarkers.clear();
  351|  4.44k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  414|  4.44k|    {
  415|  4.44k|        m_Breakpoints.clear();
  416|  4.44k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  494|  4.44k|    {
  495|  4.44k|        m_Lines.clear();
  496|  4.44k|        ResetState();
  497|  4.44k|        m_Lines.emplace_back(Line());
  498|       |
  499|  4.44k|        for (const char character : text)
  ------------------
  |  Branch (499:35): [True: 739k, False: 4.44k]
  ------------------
  500|   739k|        {
  501|   739k|            if (character == '\r' ||
  ------------------
  |  Branch (501:17): [True: 567, False: 739k]
  |  Branch (501:17): [True: 119k, False: 620k]
  ------------------
  502|   739k|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (502:18): [True: 162k, False: 576k]
  |  Branch (502:48): [True: 128k, False: 33.9k]
  |  Branch (502:69): [True: 118k, False: 10.0k]
  ------------------
  503|   119k|            {
  504|       |                // ignore the carriage return character and control characters
  505|   119k|            }
  506|   620k|            else if (character == '\n')
  ------------------
  |  Branch (506:22): [True: 33.9k, False: 586k]
  ------------------
  507|  33.9k|            {
  508|  33.9k|                m_Lines.emplace_back(Line());
  509|  33.9k|            }
  510|   586k|            else
  511|   586k|            {
  512|   586k|                m_Lines.back().emplace_back(
  513|   586k|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  514|   586k|            }
  515|   739k|        }
  516|       |
  517|  4.44k|        m_TextChanged = true;
  518|  4.44k|        m_ScrollToTop = true;
  519|       |
  520|  4.44k|        m_UndoBuffer.clear();
  521|  4.44k|        m_UndoIndex = 0u;
  522|       |
  523|  4.44k|        Colorize();
  524|  4.44k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  527|  4.44k|    {
  528|  4.44k|        const phi::u32 max_line = GetMaxLineNumber();
  529|       |
  530|  4.44k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  531|  4.44k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1494|      1|    {
 1495|       |        // Lines should never be empty
 1496|      1|        PHI_ASSERT(!m_Lines.empty());
 1497|       |
 1498|       |        // Verify Selection is still in a valid state
 1499|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1500|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1501|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1502|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1503|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1504|       |
 1505|       |        // Verify cursor position
 1506|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1507|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1508|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1509|       |
 1510|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1511|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1512|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1513|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1514|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1515|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1516|       |#endif
 1517|       |
 1518|       |        // Verify that all breakpoints are on existing lines
 1519|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1519:35): [True: 0, False: 1]
  ------------------
 1520|      0|        {
 1521|      0|            PHI_ASSERT(break_point != 0u);
 1522|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1523|      0|        }
 1524|       |
 1525|       |        // Verify that all error markers are on existing lines
 1526|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1526:34): [True: 0, False: 1]
  ------------------
 1527|      0|        {
 1528|      0|            const phi::u32 line_number = error_marker.first;
 1529|       |
 1530|      0|            PHI_ASSERT(line_number != 0u);
 1531|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1532|      0|        }
 1533|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1536|      1|    {
 1537|      1|        constexpr const static Palette palette = {{
 1538|      1|                0xff7f7f7f, // Default
 1539|      1|                0xffd69c56, // OpCode
 1540|      1|                0xff00ff00, // Register
 1541|      1|                0xff7070e0, // IntegerLiteral
 1542|      1|                0xff206020, // Comment
 1543|      1|                0xff101010, // Background
 1544|      1|                0xffe0e0e0, // Cursor
 1545|      1|                0x80a06020, // Selection
 1546|      1|                0x800020ff, // ErrorMarker
 1547|      1|                0x40f08000, // Breakpoint
 1548|      1|                0xff707000, // Line number
 1549|      1|                0x40000000, // Current line fill
 1550|      1|                0x40808080, // Current line fill (inactive)
 1551|      1|                0x40a0a0a0, // Current line edge
 1552|      1|        }};
 1553|       |
 1554|      1|        return palette;
 1555|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1722|  4.44k|    {
 1723|       |        // TODO: This is quite unreadable
 1724|  4.44k|        const phi::u32 to_line =
 1725|  4.44k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1725:17): [True: 4.44k, False: 0]
  ------------------
 1726|  4.44k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1727|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1728|       |
 1729|  4.44k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1730|  4.44k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1731|  4.44k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1732|  4.44k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1733|  4.44k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1839|  4.44k|    {
 1840|  4.44k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1841|  4.44k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1842|  4.44k|        PHI_ASSERT(start <= end);
 1843|       |
 1844|  4.44k|        std::string result;
 1845|       |
 1846|  4.44k|        phi::u32   lstart = start.m_Line;
 1847|  4.44k|        phi::u32   lend   = end.m_Line;
 1848|  4.44k|        phi::u32   istart = GetCharacterIndex(start);
 1849|  4.44k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1850|  4.44k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1851|  4.44k|        phi::usize size   = 0u;
 1852|       |
 1853|  42.7k|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1853:35): [True: 38.3k, False: 4.44k]
  ------------------
 1854|  38.3k|        {
 1855|  38.3k|            PHI_ASSERT(i < m_Lines.size());
 1856|  38.3k|            size += m_Lines[i.unsafe()].size();
 1857|  38.3k|        }
 1858|       |
 1859|  4.44k|        result.reserve((size + size / 8u).unsafe());
 1860|       |
 1861|   625k|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1861:16): [True: 494k, False: 130k]
  |  Branch (1861:16): [True: 620k, False: 4.44k]
  |  Branch (1861:33): [True: 125k, False: 4.44k]
  ------------------
 1862|   620k|        {
 1863|   620k|            PHI_ASSERT(lstart < m_Lines.size());
 1864|       |
 1865|   620k|            const Line& line = m_Lines[lstart.unsafe()];
 1866|   620k|            if (istart < line.size())
  ------------------
  |  Branch (1866:17): [True: 586k, False: 33.9k]
  ------------------
 1867|   586k|            {
 1868|   586k|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1869|   586k|                istart++;
 1870|   586k|            }
 1871|  33.9k|            else
 1872|  33.9k|            {
 1873|  33.9k|                istart = 0u;
 1874|  33.9k|                ++lstart;
 1875|       |
 1876|  33.9k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1876:21): [True: 33.9k, False: 0]
  ------------------
 1877|  33.9k|                {
 1878|  33.9k|                    result += '\n';
 1879|  33.9k|                }
 1880|  33.9k|            }
 1881|   620k|        }
 1882|       |
 1883|  4.44k|        return result;
 1884|  4.44k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2422|  8.88k|    {
 2423|  8.88k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2424|       |
 2425|  8.88k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2426|  8.88k|        phi::u32    index = 0u;
 2427|   359k|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2427:35): [True: 354k, False: 4.53k]
  |  Branch (2427:35): [True: 350k, False: 8.88k]
  |  Branch (2427:58): [True: 350k, False: 4.35k]
  ------------------
 2428|   350k|        {
 2429|   350k|            PHI_ASSERT(index < line.size());
 2430|   350k|            const Char character = line[index.unsafe()].m_Char;
 2431|       |
 2432|   350k|            if (character == '\t')
  ------------------
  |  Branch (2432:17): [True: 5.71k, False: 344k]
  ------------------
 2433|  5.71k|            {
 2434|  5.71k|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2435|  5.71k|            }
 2436|   344k|            else
 2437|   344k|            {
 2438|   344k|                ++column;
 2439|   344k|            }
 2440|       |
 2441|   350k|            index += UTF8CharLength(character);
 2442|   350k|        }
 2443|       |
 2444|  8.88k|        return index;
 2445|  8.88k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2494|  4.44k|    {
 2495|  4.44k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2495:13): [True: 0, False: 4.44k]
  ------------------
 2496|      0|        {
 2497|      0|            return 0u;
 2498|      0|        }
 2499|       |
 2500|  4.44k|        const Line& line = m_Lines[line_number.unsafe()];
 2501|  4.44k|        phi::u32    col  = 0u;
 2502|       |
 2503|   354k|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2503:32): [True: 350k, False: 4.44k]
  ------------------
 2504|   350k|        {
 2505|   350k|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2506|   350k|            if (character == '\t')
  ------------------
  |  Branch (2506:17): [True: 5.71k, False: 344k]
  ------------------
 2507|  5.71k|            {
 2508|  5.71k|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2509|  5.71k|            }
 2510|   344k|            else
 2511|   344k|            {
 2512|   344k|                col++;
 2513|   344k|            }
 2514|       |
 2515|   350k|            i += UTF8CharLength(character);
 2516|   350k|        }
 2517|       |
 2518|  4.44k|        return col;
 2519|  4.44k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2522|  4.44k|    {
 2523|  4.44k|        PHI_ASSERT(!m_Lines.empty());
 2524|       |
 2525|  4.44k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2526|  4.44k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3661|   228k|    {
 3662|   228k|        PaletteIndex palette_index{PaletteIndex::Default};
 3663|       |
 3664|       |        // Determine palette color
 3665|   228k|        switch (token.GetType())
 3666|   228k|        {
 3667|  1.45k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3667:13): [True: 1.45k, False: 227k]
  ------------------
 3668|  1.45k|                palette_index = PaletteIndex::Comment;
 3669|  1.45k|                break;
 3670|  1.15k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3670:13): [True: 1.15k, False: 227k]
  ------------------
 3671|  3.96k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3671:13): [True: 2.80k, False: 225k]
  ------------------
 3672|  3.96k|                palette_index = PaletteIndex::IntegerLiteral;
 3673|  3.96k|                break;
 3674|  47.7k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3674:13): [True: 47.7k, False: 180k]
  ------------------
 3675|  47.7k|                palette_index = PaletteIndex::OpCode;
 3676|  47.7k|                break;
 3677|  2.09k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3677:13): [True: 2.09k, False: 226k]
  ------------------
 3678|  3.74k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3678:13): [True: 1.64k, False: 226k]
  ------------------
 3679|  4.32k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3679:13): [True: 585, False: 227k]
  ------------------
 3680|  4.32k|                palette_index = PaletteIndex::Register;
 3681|  4.32k|                break;
 3682|  33.9k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3682:13): [True: 33.9k, False: 194k]
  ------------------
 3683|  33.9k|                return;
 3684|   137k|            default:
  ------------------
  |  Branch (3684:13): [True: 137k, False: 91.4k]
  ------------------
 3685|   137k|                break;
 3686|   228k|        }
 3687|       |
 3688|   194k|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3689|   194k|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3690|       |
 3691|   194k|        for (phi::u64 index{token.GetColumn() - 1u};
 3692|   765k|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3692:14): [True: 570k, False: 194k]
  ------------------
 3693|   570k|        {
 3694|   570k|            PHI_ASSERT(index < line.size());
 3695|   570k|            line[index.unsafe()].m_ColorIndex = palette_index;
 3696|   570k|        }
 3697|   194k|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3700|  4.44k|    {
 3701|  4.44k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3702|       |
 3703|  4.44k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3703:38): [True: 228k, False: 4.44k]
  ------------------
 3704|   228k|        {
 3705|   228k|            ColorizeToken(token);
 3706|   228k|        }
 3707|  4.44k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3710|  4.44k|    {
 3711|  4.44k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3712|  4.44k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3713|  4.44k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3714|       |
 3715|       |        // Clear breakpoints and markers
 3716|  4.44k|        ClearBreakPoints();
 3717|  4.44k|        ClearErrorMarkers();
 3718|  4.44k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  135|   350k|{
  136|   350k|    return UTF8CharLength(static_cast<char>(characater));
  137|   350k|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  105|   700k|{
  106|   700k|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (106:9): [True: 580, False: 699k]
  ------------------
  107|    580|    {
  108|    580|        return 6_u8;
  109|    580|    }
  110|       |
  111|   699k|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (111:9): [True: 1.13k, False: 698k]
  ------------------
  112|  1.13k|    {
  113|  1.13k|        return 5_u8;
  114|  1.13k|    }
  115|       |
  116|   698k|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (116:9): [True: 1.09k, False: 697k]
  ------------------
  117|  1.09k|    {
  118|  1.09k|        return 4_u8;
  119|  1.09k|    }
  120|       |
  121|   697k|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (121:9): [True: 1.43k, False: 696k]
  ------------------
  122|  1.43k|    {
  123|  1.43k|        return 3_u8;
  124|  1.43k|    }
  125|       |
  126|   696k|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (126:9): [True: 6.56k, False: 689k]
  ------------------
  127|  6.56k|    {
  128|  6.56k|        return 2_u8;
  129|  6.56k|    }
  130|       |
  131|   689k|    return 1_u8;
  132|   696k|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  183|  4.44k|    {
  184|  4.44k|        return m_DLXProgram;
  185|  4.44k|    }
_ZN6dlxemu8Emulator12ParseProgramEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  188|  4.44k|    {
  189|  4.44k|        m_DLXProgram = dlx::Parser::Parse(source);
  190|       |
  191|  4.44k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (191:13): [True: 199, False: 4.24k]
  ------------------
  192|    199|        {
  193|    199|            m_Processor.LoadProgram(m_DLXProgram);
  194|    199|        }
  195|  4.44k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  208|  4.44k|    {
  209|  4.44k|        return m_CodeEditor;
  210|  4.44k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   38|      1|    {
   39|      1|        Shutdown();
   40|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  108|      1|    {
  109|      1|        if (imgui_initialized)
  ------------------
  |  Branch (109:13): [True: 0, False: 1]
  ------------------
  110|      0|        {
  111|      0|            ShutdownImGui();
  112|      0|        }
  113|       |
  114|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (114:13): [True: 0, False: 1]
  ------------------
  115|      0|        {
  116|      0|            glfwDestroyWindow(m_Window);
  117|      0|        }
  118|       |
  119|      1|        if (glfw_initialized)
  ------------------
  |  Branch (119:13): [True: 0, False: 1]
  ------------------
  120|      0|        {
  121|      0|            glfwTerminate();
  122|      0|        }
  123|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  73.3k|        {
  173|  73.3k|            PHI_ASSERT(index < 3u);
  174|       |
  175|  73.3k|            switch (index.unsafe())
  176|  73.3k|            {
  177|  32.5k|                case 0:
  ------------------
  |  Branch (177:17): [True: 32.5k, False: 40.7k]
  ------------------
  178|  32.5k|                    return m_Arg1Type;
  179|       |
  180|  20.7k|                case 1:
  ------------------
  |  Branch (180:17): [True: 20.7k, False: 52.6k]
  ------------------
  181|  20.7k|                    return m_Arg2Type;
  182|       |
  183|  20.0k|                case 2:
  ------------------
  |  Branch (183:17): [True: 20.0k, False: 53.3k]
  ------------------
  184|  20.0k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 73.3k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  73.3k|#endif
  191|  73.3k|            }
  192|  73.3k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  19.7k|        {
  199|  19.7k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  19.7k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 19.2k, False: 525]
  ------------------
  203|  19.2k|            {
  204|  19.2k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  19.2k|            }
  206|  19.7k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 10.9k, False: 8.82k]
  ------------------
  207|  10.9k|            {
  208|  10.9k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  10.9k|            }
  210|  19.7k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 6.17k, False: 13.5k]
  ------------------
  211|  6.17k|            {
  212|  6.17k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  213|  6.17k|            }
  214|       |
  215|  19.7k|            return number_of_argument_required;
  216|  19.7k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  19.7k|        {
  225|  19.7k|            return m_Executor;
  226|  19.7k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  10.7k|    {
   38|  10.7k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  10.7k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  10.7k|                                         static_cast<underlying_t>(rhs));
   42|  10.7k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  10.7k|    {
   55|  10.7k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  10.7k|        return static_cast<underlying_t>(type & test) != 0;
   58|  10.7k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  60.3k|    {
   31|  60.3k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 1.54k, False: 58.8k]
  ------------------
   32|  1.54k|        {
   33|  1.54k|            return true;
   34|  1.54k|        }
   35|       |
   36|  58.8k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 368, False: 58.4k]
  ------------------
   37|    368|        {
   38|    368|            return true;
   39|    368|        }
   40|       |
   41|  58.4k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 24.4k, False: 34.0k]
  ------------------
   42|  24.4k|        {
   43|  24.4k|            return true;
   44|  24.4k|        }
   45|       |
   46|  34.0k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 194, False: 33.8k]
  ------------------
   47|    194|        {
   48|    194|            return true;
   49|    194|        }
   50|       |
   51|  33.8k|        return false;
   52|  34.0k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  33.8k|    {
   56|  33.8k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 33.8k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  33.8k|        const char first_char = token.at(0u);
   62|       |
   63|  33.8k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 7.28k, False: 26.5k]
  ------------------
   64|  7.28k|        {
   65|  7.28k|            return phi::is_alpha(first_char);
   66|  7.28k|        }
   67|       |
   68|  26.5k|        phi::boolean just_under_scores = (first_char == '_');
   69|  26.5k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 2.66k, False: 23.8k]
  |  Branch (69:13): [True: 2.23k, False: 24.2k]
  |  Branch (69:43): [True: 2.23k, False: 430]
  ------------------
   70|  2.23k|        {
   71|  2.23k|            return false;
   72|  2.23k|        }
   73|       |
   74|  85.9k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 69.2k, False: 16.6k]
  ------------------
   75|  69.2k|        {
   76|  69.2k|            const char c{token.at(index)};
   77|       |
   78|  69.2k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 60.9k, False: 8.38k]
  ------------------
   79|  60.9k|            {
   80|  60.9k|                just_under_scores = false;
   81|  60.9k|            }
   82|  8.38k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 721, False: 7.66k]
  ------------------
   83|    721|            {
   84|    721|                continue;
   85|    721|            }
   86|  7.66k|            else
   87|  7.66k|            {
   88|  7.66k|                return false;
   89|  7.66k|            }
   90|  69.2k|        }
   91|       |
   92|  16.6k|        return !just_under_scores;
   93|  24.2k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|   141k|    {
  100|   141k|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 141k]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|   141k|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 19.6k, False: 121k]
  ------------------
  106|  19.6k|        {
  107|  19.6k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 2.18k, False: 17.5k]
  ------------------
  108|  2.18k|            {
  109|  2.18k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  2.18k|            }
  111|       |
  112|  17.5k|            return {};
  113|  19.6k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|   121k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 241, False: 121k]
  ------------------
  117|    241|        {
  118|    241|            return {};
  119|    241|        }
  120|       |
  121|   121k|        std::int32_t number{0};
  122|   121k|        phi::boolean is_negative{false};
  123|   121k|        phi::boolean starts_with_zero{false};
  124|   121k|        phi::boolean parsing_binary{false};
  125|   121k|        phi::boolean parsing_octal{false};
  126|   121k|        phi::boolean parsing_hexadecimal{false};
  127|   121k|        phi::boolean parsed_something{false};
  128|   121k|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|   134k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 132k, False: 1.78k]
  ------------------
  133|   132k|        {
  134|   132k|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|   132k|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 121k, False: 11.6k]
  ------------------
  138|   121k|            {
  139|   121k|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 269, False: 120k]
  ------------------
  140|    269|                {
  141|    269|                    continue;
  142|    269|                }
  143|       |
  144|   120k|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 1.47k, False: 119k]
  ------------------
  145|  1.47k|                {
  146|  1.47k|                    is_negative = true;
  147|  1.47k|                    continue;
  148|  1.47k|                }
  149|       |
  150|   119k|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 2.17k, False: 117k]
  ------------------
  151|  2.17k|                {
  152|  2.17k|                    starts_with_zero = true;
  153|  2.17k|                    continue;
  154|  2.17k|                }
  155|       |
  156|   117k|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 223, False: 117k]
  ------------------
  157|    223|                {
  158|    223|                    return {};
  159|    223|                }
  160|   117k|            }
  161|       |
  162|       |            // Second character
  163|   128k|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 4.79k, False: 123k]
  ------------------
  164|  4.79k|            {
  165|  4.79k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 2.17k, False: 2.62k]
  ------------------
  166|  2.17k|                {
  167|       |                    // Binary
  168|  2.17k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 218, False: 1.96k]
  |  Branch (168:37): [True: 219, False: 1.74k]
  ------------------
  169|    437|                    {
  170|    437|                        parsing_binary = true;
  171|    437|                        continue;
  172|    437|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  1.74k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 454, False: 1.28k]
  |  Branch (175:37): [True: 529, False: 758]
  ------------------
  176|    983|                    {
  177|    983|                        parsing_hexadecimal = true;
  178|    983|                        continue;
  179|    983|                    }
  180|       |
  181|       |                    // Octal
  182|    758|                    parsing_octal = true;
  183|    758|                }
  184|  4.79k|            }
  185|       |
  186|       |            // Handle seperators
  187|   127k|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 412, False: 126k]
  ------------------
  188|    412|            {
  189|    412|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 194, False: 218]
  ------------------
  190|    194|                {
  191|    194|                    return {};
  192|    194|                }
  193|       |
  194|    218|                parsed_separator = true;
  195|    218|                continue;
  196|    412|            }
  197|       |
  198|       |            // Check for over/underflow
  199|   126k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 3.98k, False: 122k]
  |  Branch (199:32): [True: 322, False: 3.65k]
  ------------------
  200|    322|            {
  201|       |                // Would underflow
  202|    322|                return {};
  203|    322|            }
  204|   126k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 122k, False: 3.65k]
  |  Branch (204:17): [True: 259, False: 126k]
  |  Branch (204:33): [True: 259, False: 122k]
  ------------------
  205|    259|            {
  206|       |                // Would overflow
  207|    259|                return {};
  208|    259|            }
  209|       |
  210|   126k|            parsed_separator = false;
  211|   126k|            parsed_something = true;
  212|       |
  213|   126k|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 587, False: 125k]
  ------------------
  214|    587|            {
  215|    587|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 199, False: 388]
  ------------------
  216|    199|                {
  217|    199|                    return {};
  218|    199|                }
  219|       |
  220|    388|                number <<= 1;
  221|    388|                number |= (c - '0');
  222|    388|            }
  223|   125k|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 958, False: 124k]
  ------------------
  224|    958|            {
  225|    958|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 573, False: 385]
  ------------------
  226|    573|                {
  227|    573|                    return {};
  228|    573|                }
  229|       |
  230|    385|                number <<= 3;
  231|    385|                number |= (c - '0');
  232|    385|            }
  233|   124k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 1.43k, False: 123k]
  ------------------
  234|  1.43k|            {
  235|  1.43k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 444, False: 991]
  ------------------
  236|    444|                {
  237|    444|                    return {};
  238|    444|                }
  239|       |
  240|    991|                number <<= 4;
  241|    991|                number |= phi::hex_digit_value(c).unsafe();
  242|    991|            }
  243|   123k|            else
  244|   123k|            {
  245|   123k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 116k, False: 6.46k]
  ------------------
  246|   116k|                {
  247|   116k|                    return {};
  248|   116k|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|  6.46k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 2.05k, False: 4.41k]
  |  Branch (251:36): [True: 322, False: 1.73k]
  ------------------
  252|    322|                {
  253|    322|                    return {};
  254|    322|                }
  255|       |
  256|  6.14k|                number *= 10;
  257|  6.14k|                number += (c - '0');
  258|  6.14k|            }
  259|   126k|        }
  260|       |
  261|  1.78k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 1.32k, False: 457]
  ------------------
  262|  1.32k|        {
  263|       |            // Check for over/underflow
  264|  1.32k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 509, False: 815]
  |  Branch (264:32): [True: 203, False: 306]
  ------------------
  265|    203|            {
  266|       |                // Would underflow
  267|    203|                return {};
  268|    203|            }
  269|  1.12k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 815, False: 306]
  |  Branch (269:17): [True: 250, False: 871]
  |  Branch (269:33): [True: 250, False: 565]
  ------------------
  270|    250|            {
  271|       |                // Would overflow
  272|    250|                return {};
  273|    250|            }
  274|       |
  275|    871|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 306, False: 565]
  ------------------
  276|    306|            {
  277|    306|                return static_cast<std::int16_t>(-number);
  278|    306|            }
  279|       |
  280|    565|            return static_cast<std::int16_t>(number);
  281|    871|        }
  282|       |
  283|    457|        return {};
  284|  1.78k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  11.0k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  11.0k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 98.8k, False: 0]
  ------------------
   64|  98.8k|            {
   65|  98.8k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 11.0k, False: 87.7k]
  ------------------
   66|  11.0k|                {
   67|  11.0k|                    return &token;
   68|  11.0k|                }
   69|  98.8k|            }
   70|       |
   71|      0|            return nullptr;
   72|  11.0k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  39.2k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  39.2k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  39.2k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   142k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   142k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   142k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  46.5k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  46.5k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  46.5k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  19.7k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  3.91k|    {
   25|  3.91k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  3.91k|        switch (argument_number.unsafe())
   28|  3.91k|        {
   29|  3.28k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 3.28k, False: 632]
  ------------------
   30|  3.28k|                m_Arg1 = argument;
   31|  3.28k|                break;
   32|    413|            case 1u:
  ------------------
  |  Branch (32:13): [True: 413, False: 3.50k]
  ------------------
   33|    413|                m_Arg2 = argument;
   34|    413|                break;
   35|    219|            case 2u:
  ------------------
  |  Branch (35:13): [True: 219, False: 3.69k]
  ------------------
   36|    219|                m_Arg3 = argument;
   37|    219|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 3.91k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  3.91k|#endif
   42|  3.91k|        }
   43|  3.91k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  63.2k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  172|    870|    {
  173|    870|        InstructionArgument arg;
  174|    870|        arg.m_Type                   = ArgumentType::IntRegister;
  175|    870|        arg.register_int.register_id = id;
  176|    870|        return arg;
  177|    870|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  180|    547|    {
  181|    547|        InstructionArgument arg;
  182|    547|        arg.m_Type                     = ArgumentType::FloatRegister;
  183|    547|        arg.register_float.register_id = id;
  184|    547|        return arg;
  185|    547|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  188|    196|    {
  189|    196|        InstructionArgument arg;
  190|    196|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  191|    196|        arg.immediate_value.signed_value = value;
  192|    196|        return arg;
  193|    196|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  197|    194|    {
  198|    194|        InstructionArgument arg;
  199|    194|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  200|    194|        arg.address_displacement.register_id  = id;
  201|    194|        arg.address_displacement.displacement = displacement;
  202|    194|        return arg;
  203|    194|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  206|  2.11k|    {
  207|  2.11k|        InstructionArgument arg;
  208|  2.11k|        arg.m_Type           = ArgumentType::Label;
  209|  2.11k|        arg.label.label_name = label_name;
  210|  2.11k|        return arg;
  211|  2.11k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  19.7k|    {
  453|  19.7k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  19.7k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|   191k|    {
   24|   191k|        switch (token.length().unsafe())
   25|   191k|        {
   26|       |            // 1 character OpCodes
   27|  24.3k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 24.3k, False: 166k]
  ------------------
   28|  24.3k|                const char c1 = token[0u];
   29|       |
   30|  24.3k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 9.15k, False: 15.2k]
  ------------------
   31|  9.15k|                {
   32|  9.15k|                    return OpCode::J;
   33|  9.15k|                }
   34|  15.2k|                break;
   35|  24.3k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|  26.3k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 26.3k, False: 164k]
  ------------------
   39|  26.3k|                const char c1 = token[0u];
   40|  26.3k|                const char c2 = token[1u];
   41|       |
   42|  26.3k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 14.5k, False: 11.8k]
  ------------------
   43|  26.3k|                {
   44|    877|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 877, False: 25.5k]
  ------------------
   45|  1.37k|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 497, False: 25.9k]
  ------------------
   46|  1.37k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 565, False: 809]
  ------------------
   47|    565|                        {
   48|    565|                            return OpCode::JR;
   49|    565|                        }
   50|    809|                        break;
   51|       |
   52|  2.28k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 2.28k, False: 24.1k]
  ------------------
   53|  4.22k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 1.94k, False: 24.4k]
  ------------------
   54|  4.22k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 1.40k, False: 2.82k]
  ------------------
   55|  4.22k|                        {
   56|    203|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 203, False: 4.02k]
  ------------------
   57|    398|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 195, False: 4.03k]
  ------------------
   58|    398|                                return OpCode::LB;
   59|    203|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 203, False: 4.02k]
  ------------------
   60|    547|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 344, False: 3.88k]
  ------------------
   61|    547|                                return OpCode::LD;
   62|    357|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 357, False: 3.87k]
  ------------------
   63|    840|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 483, False: 3.74k]
  ------------------
   64|    840|                                return OpCode::LF;
   65|    243|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 243, False: 3.98k]
  ------------------
   66|    521|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 278, False: 3.94k]
  ------------------
   67|    521|                                return OpCode::LH;
   68|    196|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 196, False: 4.03k]
  ------------------
   69|    520|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 324, False: 3.90k]
  ------------------
   70|    520|                                return OpCode::LW;
   71|  4.22k|                        }
   72|  1.40k|                        break;
   73|  1.40k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 372, False: 26.0k]
  ------------------
   74|  1.26k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 895, False: 25.5k]
  ------------------
   75|  1.26k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 403, False: 864]
  ------------------
   76|    403|                        {
   77|    403|                            return OpCode::OR;
   78|    403|                        }
   79|    864|                        break;
   80|  2.43k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 2.43k, False: 23.9k]
  ------------------
   81|  4.97k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 2.53k, False: 23.8k]
  ------------------
   82|  4.97k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 1.40k, False: 3.56k]
  ------------------
   83|  4.97k|                        {
   84|    336|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 336, False: 4.63k]
  ------------------
   85|    536|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 200, False: 4.77k]
  ------------------
   86|    536|                                return OpCode::SB;
   87|  1.11k|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 1.11k, False: 3.86k]
  ------------------
   88|  1.30k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 194, False: 4.77k]
  ------------------
   89|  1.30k|                                return OpCode::SD;
   90|    323|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 323, False: 4.64k]
  ------------------
   91|    517|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 194, False: 4.77k]
  ------------------
   92|    517|                                return OpCode::SF;
   93|    225|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 225, False: 4.74k]
  ------------------
   94|    622|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 397, False: 4.57k]
  ------------------
   95|    622|                                return OpCode::SH;
   96|    340|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 340, False: 4.63k]
  ------------------
   97|    587|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 247, False: 4.72k]
  ------------------
   98|    587|                                return OpCode::SW;
   99|  4.97k|                        }
  100|  1.40k|                        break;
  101|  26.3k|                }
  102|  19.0k|                break;
  103|  26.3k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|  42.0k|            case 3: {
  ------------------
  |  Branch (106:13): [True: 42.0k, False: 149k]
  ------------------
  107|  42.0k|                const char c1 = token[0u];
  108|  42.0k|                const char c2 = token[1u];
  109|  42.0k|                const char c3 = token[2u];
  110|       |
  111|  42.0k|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 9.91k, False: 32.1k]
  ------------------
  112|  42.0k|                {
  113|  2.17k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 2.17k, False: 39.8k]
  ------------------
  114|  2.54k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 369, False: 41.6k]
  ------------------
  115|  2.54k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 1.01k, False: 1.53k]
  |  Branch (115:29): [True: 666, False: 1.87k]
  |  Branch (115:45): [True: 666, False: 345]
  ------------------
  116|    666|                        {
  117|    666|                            return OpCode::ADD;
  118|    666|                        }
  119|  1.87k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 1.04k, False: 839]
  |  Branch (119:34): [True: 794, False: 1.08k]
  |  Branch (119:50): [True: 794, False: 246]
  ------------------
  120|    794|                        {
  121|    794|                            return OpCode::AND;
  122|    794|                        }
  123|  1.08k|                        break;
  124|       |
  125|  1.08k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 384, False: 41.6k]
  ------------------
  126|  1.04k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 660, False: 41.3k]
  ------------------
  127|  1.04k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 724, False: 320]
  |  Branch (127:29): [True: 403, False: 641]
  |  Branch (127:45): [True: 403, False: 321]
  ------------------
  128|    403|                        {
  129|    403|                            return OpCode::DIV;
  130|    403|                        }
  131|    641|                        break;
  132|       |
  133|  1.01k|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 1.01k, False: 41.0k]
  ------------------
  134|  2.13k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 1.11k, False: 40.9k]
  ------------------
  135|  2.13k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 1.31k, False: 814]
  ------------------
  136|  1.31k|                        {
  137|  1.31k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 388, False: 929]
  ------------------
  138|    388|                            {
  139|    388|                                return OpCode::EQD;
  140|    388|                            }
  141|    929|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 630, False: 299]
  ------------------
  142|    630|                            {
  143|    630|                                return OpCode::EQF;
  144|    630|                            }
  145|  1.31k|                        }
  146|  1.11k|                        break;
  147|       |
  148|  1.11k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 1.04k, False: 41.0k]
  ------------------
  149|  2.37k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 1.32k, False: 40.7k]
  ------------------
  150|  2.37k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 1.04k, False: 1.33k]
  ------------------
  151|  1.04k|                        {
  152|  1.04k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 389, False: 652]
  ------------------
  153|    389|                            {
  154|    389|                                return OpCode::GED;
  155|    389|                            }
  156|    652|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 388, False: 264]
  ------------------
  157|    388|                            {
  158|    388|                                return OpCode::GEF;
  159|    388|                            }
  160|  1.04k|                        }
  161|  1.33k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 1.11k, False: 218]
  ------------------
  162|  1.11k|                        {
  163|  1.11k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 388, False: 727]
  ------------------
  164|    388|                            {
  165|    388|                                return OpCode::GTD;
  166|    388|                            }
  167|    727|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 516, False: 211]
  ------------------
  168|    516|                            {
  169|    516|                                return OpCode::GTF;
  170|    516|                            }
  171|    727|                        }
  172|    693|                        break;
  173|       |
  174|  1.02k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 1.02k, False: 41.0k]
  ------------------
  175|  1.34k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 329, False: 41.7k]
  ------------------
  176|  1.34k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 753, False: 596]
  |  Branch (176:29): [True: 397, False: 952]
  |  Branch (176:45): [True: 397, False: 356]
  ------------------
  177|    397|                        {
  178|    397|                            return OpCode::JAL;
  179|    397|                        }
  180|    952|                        break;
  181|       |
  182|  4.71k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 4.71k, False: 37.3k]
  ------------------
  183|  6.26k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 1.54k, False: 40.5k]
  ------------------
  184|  6.26k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 608, False: 5.65k]
  ------------------
  185|  6.26k|                        {
  186|    264|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 264, False: 5.99k]
  ------------------
  187|    675|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 411, False: 5.85k]
  ------------------
  188|    675|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 388, False: 287]
  ------------------
  189|    388|                                {
  190|    388|                                    return OpCode::LBU;
  191|    388|                                }
  192|    287|                                break;
  193|       |
  194|  1.00k|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 1.00k, False: 5.26k]
  ------------------
  195|  1.54k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 548, False: 5.71k]
  ------------------
  196|  1.54k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 772, False: 777]
  ------------------
  197|    772|                                {
  198|    772|                                    return OpCode::LED;
  199|    772|                                }
  200|    777|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 516, False: 261]
  ------------------
  201|    516|                                {
  202|    516|                                    return OpCode::LEF;
  203|    516|                                }
  204|    261|                                break;
  205|       |
  206|    586|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 586, False: 5.67k]
  ------------------
  207|  1.29k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 708, False: 5.55k]
  ------------------
  208|  1.29k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 646, False: 648]
  ------------------
  209|    646|                                {
  210|    646|                                    return OpCode::LHI;
  211|    646|                                }
  212|    648|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 388, False: 260]
  ------------------
  213|    388|                                {
  214|    388|                                    return OpCode::LHU;
  215|    388|                                }
  216|    260|                                break;
  217|       |
  218|    349|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 349, False: 5.91k]
  ------------------
  219|  1.41k|                            case 't':
  ------------------
  |  Branch (219:29): [True: 1.06k, False: 5.19k]
  ------------------
  220|  1.41k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 517, False: 895]
  ------------------
  221|    517|                                {
  222|    517|                                    return OpCode::LTD;
  223|    517|                                }
  224|    895|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 552, False: 343]
  ------------------
  225|    552|                                {
  226|    552|                                    return OpCode::LTF;
  227|    552|                                }
  228|    343|                                break;
  229|       |
  230|    343|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 197, False: 6.06k]
  ------------------
  231|    723|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 526, False: 5.73k]
  ------------------
  232|    723|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 389, False: 334]
  ------------------
  233|    389|                                {
  234|    389|                                    return OpCode::LWU;
  235|    389|                                }
  236|    334|                                break;
  237|  6.26k|                        }
  238|  2.09k|                        break;
  239|       |
  240|  2.09k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 1.43k, False: 40.6k]
  ------------------
  241|  2.57k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 1.14k, False: 40.9k]
  ------------------
  242|  2.57k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 1.38k, False: 1.18k]
  ------------------
  243|  1.38k|                        {
  244|  1.38k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 390, False: 998]
  ------------------
  245|    390|                            {
  246|    390|                                return OpCode::NED;
  247|    390|                            }
  248|    998|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 523, False: 475]
  ------------------
  249|    523|                            {
  250|    523|                                return OpCode::NEF;
  251|    523|                            }
  252|  1.38k|                        }
  253|  1.18k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 845, False: 340]
  |  Branch (253:34): [True: 645, False: 540]
  |  Branch (253:50): [True: 645, False: 200]
  ------------------
  254|    645|                        {
  255|    645|                            return OpCode::NOP;
  256|    645|                        }
  257|       |
  258|  1.01k|                        break;
  259|       |
  260|  1.01k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 516, False: 41.5k]
  ------------------
  261|  1.11k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 595, False: 41.4k]
  ------------------
  262|  1.11k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 644, False: 467]
  |  Branch (262:29): [True: 425, False: 686]
  |  Branch (262:45): [True: 425, False: 219]
  ------------------
  263|    425|                        {
  264|    425|                            return OpCode::ORI;
  265|    425|                        }
  266|    686|                        break;
  267|       |
  268|  8.31k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 8.31k, False: 33.7k]
  ------------------
  269|  11.7k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 3.41k, False: 38.6k]
  ------------------
  270|  11.7k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 785, False: 10.9k]
  ------------------
  271|  11.7k|                        {
  272|    533|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 533, False: 11.1k]
  ------------------
  273|    951|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 418, False: 11.3k]
  ------------------
  274|    951|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 388, False: 563]
  ------------------
  275|    388|                                {
  276|    388|                                    return OpCode::SBU;
  277|    388|                                }
  278|    563|                                break;
  279|       |
  280|    563|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 414, False: 11.3k]
  ------------------
  281|    775|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 361, False: 11.3k]
  ------------------
  282|    775|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 412, False: 363]
  ------------------
  283|    412|                                {
  284|    412|                                    return OpCode::SEQ;
  285|    412|                                }
  286|    363|                                break;
  287|       |
  288|  1.39k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 1.39k, False: 10.3k]
  ------------------
  289|  1.64k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 249, False: 11.4k]
  ------------------
  290|  1.64k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 655, False: 985]
  ------------------
  291|    655|                                {
  292|    655|                                    return OpCode::SGE;
  293|    655|                                }
  294|    985|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 609, False: 376]
  ------------------
  295|    609|                                {
  296|    609|                                    return OpCode::SGT;
  297|    609|                                }
  298|    376|                                break;
  299|       |
  300|    376|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 326, False: 11.4k]
  ------------------
  301|    843|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 517, False: 11.2k]
  ------------------
  302|    843|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 516, False: 327]
  ------------------
  303|    516|                                {
  304|    516|                                    return OpCode::SHU;
  305|    516|                                }
  306|    327|                                break;
  307|       |
  308|  1.44k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 1.44k, False: 10.2k]
  ------------------
  309|  2.57k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 1.13k, False: 10.5k]
  ------------------
  310|  2.57k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 404, False: 2.17k]
  ------------------
  311|  2.57k|                                {
  312|    195|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 195, False: 2.38k]
  ------------------
  313|    395|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 200, False: 2.37k]
  ------------------
  314|    395|                                        return OpCode::SLA;
  315|       |
  316|    197|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 197, False: 2.38k]
  ------------------
  317|    524|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 327, False: 2.25k]
  ------------------
  318|    524|                                        return OpCode::SLE;
  319|       |
  320|    255|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 255, False: 2.32k]
  ------------------
  321|    573|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 318, False: 2.26k]
  ------------------
  322|    573|                                        return OpCode::SLL;
  323|       |
  324|    325|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 325, False: 2.25k]
  ------------------
  325|    683|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 358, False: 2.22k]
  ------------------
  326|    683|                                        return OpCode::SLT;
  327|  2.57k|                                }
  328|    404|                                break;
  329|       |
  330|    726|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 726, False: 11.0k]
  ------------------
  331|    941|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 215, False: 11.5k]
  ------------------
  332|    941|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 691, False: 250]
  ------------------
  333|    691|                                {
  334|    691|                                    return OpCode::SNE;
  335|    691|                                }
  336|    250|                                break;
  337|       |
  338|    340|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 340, False: 11.3k]
  ------------------
  339|  1.56k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 1.22k, False: 10.5k]
  ------------------
  340|  1.56k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 527, False: 1.04k]
  ------------------
  341|    527|                                {
  342|    527|                                    return OpCode::SRA;
  343|    527|                                }
  344|  1.04k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 824, False: 218]
  ------------------
  345|    824|                                {
  346|    824|                                    return OpCode::SRL;
  347|    824|                                }
  348|    218|                                break;
  349|       |
  350|    594|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 594, False: 11.1k]
  ------------------
  351|    899|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 305, False: 11.4k]
  ------------------
  352|    899|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 625, False: 274]
  ------------------
  353|    625|                                {
  354|    625|                                    return OpCode::SUB;
  355|    625|                                }
  356|    274|                                break;
  357|       |
  358|    538|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 538, False: 11.1k]
  ------------------
  359|    749|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 211, False: 11.5k]
  ------------------
  360|    749|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 516, False: 233]
  ------------------
  361|    516|                                {
  362|    516|                                    return OpCode::SWU;
  363|    516|                                }
  364|    233|                                break;
  365|  11.7k|                        }
  366|       |
  367|  4.29k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 505, False: 41.5k]
  ------------------
  368|  4.81k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 517, False: 41.5k]
  ------------------
  369|  4.81k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 972, False: 3.84k]
  |  Branch (369:29): [True: 628, False: 4.18k]
  |  Branch (369:45): [True: 628, False: 344]
  ------------------
  370|    628|                        {
  371|    628|                            return OpCode::XOR;
  372|    628|                        }
  373|  4.18k|                        break;
  374|  42.0k|                }
  375|  22.3k|                break;
  376|  42.0k|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  47.9k|            case 4: {
  ------------------
  |  Branch (379:13): [True: 47.9k, False: 143k]
  ------------------
  380|  47.9k|                const char c1 = token[0u];
  381|  47.9k|                const char c2 = token[1u];
  382|  47.9k|                const char c3 = token[2u];
  383|  47.9k|                const char c4 = token[3u];
  384|       |
  385|  47.9k|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 8.07k, False: 39.8k]
  ------------------
  386|  47.9k|                {
  387|  4.60k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 4.60k, False: 43.3k]
  ------------------
  388|  5.13k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 530, False: 47.4k]
  ------------------
  389|  5.13k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 245, False: 4.88k]
  ------------------
  390|  5.13k|                        {
  391|  1.59k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 1.59k, False: 3.53k]
  ------------------
  392|  2.50k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 908, False: 4.22k]
  ------------------
  393|  2.50k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 2.27k, False: 230]
  ------------------
  394|  2.27k|                                {
  395|  2.27k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 537, False: 1.73k]
  ------------------
  396|  2.27k|                                    {
  397|    194|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 194, False: 2.08k]
  ------------------
  398|    390|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 196, False: 2.08k]
  ------------------
  399|    390|                                            return OpCode::ADDD;
  400|       |
  401|    195|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 195, False: 2.08k]
  ------------------
  402|    389|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 194, False: 2.08k]
  ------------------
  403|    389|                                            return OpCode::ADDF;
  404|       |
  405|    195|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 195, False: 2.08k]
  ------------------
  406|    421|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 226, False: 2.05k]
  ------------------
  407|    421|                                            return OpCode::ADDI;
  408|       |
  409|    345|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 345, False: 1.93k]
  ------------------
  410|    539|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 194, False: 2.08k]
  ------------------
  411|    539|                                            return OpCode::ADDU;
  412|  2.27k|                                    }
  413|  2.27k|                                }
  414|    767|                                break;
  415|       |
  416|  2.18k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 2.18k, False: 2.94k]
  ------------------
  417|  2.38k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 195, False: 4.93k]
  ------------------
  418|  2.38k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 2.18k, False: 201]
  |  Branch (418:37): [True: 1.67k, False: 704]
  |  Branch (418:53): [True: 1.67k, False: 503]
  ------------------
  419|  1.67k|                                {
  420|  1.67k|                                    return OpCode::ANDI;
  421|  1.67k|                                }
  422|       |
  423|    704|                                break;
  424|  5.13k|                        }
  425|  1.71k|                        break;
  426|       |
  427|  3.04k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 3.04k, False: 44.9k]
  ------------------
  428|  3.31k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 268, False: 47.6k]
  ------------------
  429|  3.31k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 278, False: 3.03k]
  ------------------
  430|  3.31k|                        {
  431|    439|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 439, False: 2.87k]
  ------------------
  432|    984|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 545, False: 2.76k]
  ------------------
  433|    984|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 747, False: 237]
  |  Branch (433:37): [True: 516, False: 468]
  |  Branch (433:53): [True: 516, False: 231]
  ------------------
  434|    516|                                {
  435|    516|                                    return OpCode::BEQZ;
  436|    516|                                }
  437|    468|                                break;
  438|       |
  439|  1.01k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 1.01k, False: 2.30k]
  ------------------
  440|  1.23k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 223, False: 3.09k]
  ------------------
  441|  1.23k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 1.00k, False: 236]
  ------------------
  442|  1.00k|                                {
  443|  1.00k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 388, False: 612]
  ------------------
  444|    388|                                    {
  445|    388|                                        return OpCode::BFPF;
  446|    388|                                    }
  447|    612|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 388, False: 224]
  ------------------
  448|    388|                                    {
  449|    388|                                        return OpCode::BFPT;
  450|    388|                                    }
  451|  1.00k|                                }
  452|    460|                                break;
  453|       |
  454|    460|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 385, False: 2.92k]
  ------------------
  455|    815|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 430, False: 2.88k]
  ------------------
  456|    815|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 616, False: 199]
  |  Branch (456:37): [True: 420, False: 395]
  |  Branch (456:53): [True: 420, False: 196]
  ------------------
  457|    420|                                {
  458|    420|                                    return OpCode::BNEZ;
  459|    420|                                }
  460|  3.31k|                        }
  461|  1.60k|                        break;
  462|       |
  463|  1.60k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 1.03k, False: 46.9k]
  ------------------
  464|  3.58k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 2.55k, False: 45.3k]
  ------------------
  465|  3.58k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 3.16k, False: 423]
  |  Branch (465:29): [True: 2.82k, False: 764]
  |  Branch (465:45): [True: 2.82k, False: 341]
  ------------------
  466|  2.82k|                        {
  467|  2.82k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 491, False: 2.33k]
  ------------------
  468|  2.82k|                            {
  469|    194|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 194, False: 2.62k]
  ------------------
  470|    518|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 324, False: 2.49k]
  ------------------
  471|    518|                                    return OpCode::DIVD;
  472|       |
  473|    194|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 194, False: 2.62k]
  ------------------
  474|    389|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 195, False: 2.62k]
  ------------------
  475|    389|                                    return OpCode::DIVF;
  476|       |
  477|    326|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 326, False: 2.49k]
  ------------------
  478|    777|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 451, False: 2.37k]
  ------------------
  479|    777|                                    return OpCode::DIVI;
  480|       |
  481|    451|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 451, False: 2.37k]
  ------------------
  482|    647|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 196, False: 2.62k]
  ------------------
  483|    647|                                    return OpCode::DIVU;
  484|  2.82k|                            }
  485|  2.82k|                        }
  486|  1.25k|                        break;
  487|       |
  488|  1.25k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 575, False: 47.3k]
  ------------------
  489|  1.23k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 656, False: 47.2k]
  ------------------
  490|  1.23k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 999, False: 232]
  |  Branch (490:29): [True: 420, False: 811]
  |  Branch (490:45): [True: 647, False: 352]
  |  Branch (490:61): [True: 420, False: 227]
  ------------------
  491|    420|                        {
  492|    420|                            return OpCode::HALT;
  493|    420|                        }
  494|    811|                        break;
  495|       |
  496|  1.06k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 1.06k, False: 46.8k]
  ------------------
  497|  1.58k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 519, False: 47.4k]
  ------------------
  498|  1.58k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 1.14k, False: 445]
  |  Branch (498:29): [True: 388, False: 1.20k]
  |  Branch (498:45): [True: 819, False: 324]
  |  Branch (498:61): [True: 388, False: 431]
  ------------------
  499|    388|                        {
  500|    388|                            return OpCode::JALR;
  501|    388|                        }
  502|  1.20k|                        break;
  503|       |
  504|  1.20k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 783, False: 47.1k]
  ------------------
  505|  2.57k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 1.79k, False: 46.1k]
  ------------------
  506|  2.57k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 1.24k, False: 1.33k]
  |  Branch (506:29): [True: 1.01k, False: 1.55k]
  |  Branch (506:45): [True: 1.01k, False: 226]
  ------------------
  507|  1.01k|                        {
  508|  1.01k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 388, False: 629]
  ------------------
  509|    388|                            {
  510|    388|                                return OpCode::MOVD;
  511|    388|                            }
  512|    629|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 388, False: 241]
  ------------------
  513|    388|                            {
  514|    388|                                return OpCode::MOVF;
  515|    388|                            }
  516|  1.01k|                        }
  517|  1.55k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 1.28k, False: 279]
  |  Branch (517:34): [True: 550, False: 1.00k]
  |  Branch (517:50): [True: 924, False: 356]
  |  Branch (517:66): [True: 550, False: 374]
  ------------------
  518|    550|                        {
  519|    550|                            return OpCode::MULT;
  520|    550|                        }
  521|  1.25k|                        break;
  522|       |
  523|  14.7k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 14.7k, False: 33.1k]
  ------------------
  524|  19.0k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 4.30k, False: 43.6k]
  ------------------
  525|  19.0k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 798, False: 18.2k]
  ------------------
  526|  19.0k|                        {
  527|    605|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 605, False: 18.4k]
  ------------------
  528|  1.57k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 971, False: 18.1k]
  ------------------
  529|  1.57k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 1.17k, False: 403]
  ------------------
  530|  1.17k|                                {
  531|  1.17k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 516, False: 657]
  ------------------
  532|    516|                                    {
  533|    516|                                        return OpCode::SEQI;
  534|    516|                                    }
  535|    657|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 389, False: 268]
  ------------------
  536|    389|                                    {
  537|    389|                                        return OpCode::SEQU;
  538|    389|                                    }
  539|  1.17k|                                }
  540|    671|                                break;
  541|       |
  542|  2.67k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 2.67k, False: 16.4k]
  ------------------
  543|  3.04k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 367, False: 18.7k]
  ------------------
  544|  3.04k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 1.37k, False: 1.66k]
  ------------------
  545|  1.37k|                                {
  546|  1.37k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 388, False: 988]
  ------------------
  547|    388|                                    {
  548|    388|                                        return OpCode::SGEI;
  549|    388|                                    }
  550|    988|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 468, False: 520]
  ------------------
  551|    468|                                    {
  552|    468|                                        return OpCode::SGEU;
  553|    468|                                    }
  554|  1.37k|                                }
  555|  1.66k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 1.39k, False: 270]
  ------------------
  556|  1.39k|                                {
  557|  1.39k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 517, False: 877]
  ------------------
  558|    517|                                    {
  559|    517|                                        return OpCode::SGTI;
  560|    517|                                    }
  561|    877|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 551, False: 326]
  ------------------
  562|    551|                                    {
  563|    551|                                        return OpCode::SGTU;
  564|    551|                                    }
  565|  1.39k|                                }
  566|  1.11k|                                break;
  567|       |
  568|  4.55k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 4.55k, False: 14.5k]
  ------------------
  569|  6.81k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 2.26k, False: 16.8k]
  ------------------
  570|  6.81k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 255, False: 6.56k]
  ------------------
  571|  6.81k|                                {
  572|    395|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 395, False: 6.42k]
  ------------------
  573|    589|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 194, False: 6.62k]
  ------------------
  574|    589|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 388, False: 201]
  ------------------
  575|    388|                                        {
  576|    388|                                            return OpCode::SLAI;
  577|    388|                                        }
  578|    201|                                        break;
  579|       |
  580|    392|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 392, False: 6.42k]
  ------------------
  581|  1.93k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 1.53k, False: 5.27k]
  ------------------
  582|  1.93k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 654, False: 1.27k]
  ------------------
  583|    654|                                        {
  584|    654|                                            return OpCode::SLEI;
  585|    654|                                        }
  586|  1.27k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 777, False: 499]
  ------------------
  587|    777|                                        {
  588|    777|                                            return OpCode::SLEU;
  589|    777|                                        }
  590|    499|                                        break;
  591|       |
  592|    588|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 588, False: 6.22k]
  ------------------
  593|    793|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 205, False: 6.61k]
  ------------------
  594|    793|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 516, False: 277]
  ------------------
  595|    516|                                        {
  596|    516|                                            return OpCode::SLLI;
  597|    516|                                        }
  598|    277|                                        break;
  599|       |
  600|    629|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 629, False: 6.18k]
  ------------------
  601|  3.25k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 2.62k, False: 4.19k]
  ------------------
  602|  3.25k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 1.71k, False: 1.53k]
  ------------------
  603|  1.71k|                                        {
  604|  1.71k|                                            return OpCode::SLTI;
  605|  1.71k|                                        }
  606|  1.53k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 1.05k, False: 476]
  ------------------
  607|  1.05k|                                        {
  608|  1.05k|                                            return OpCode::SLTU;
  609|  1.05k|                                        }
  610|    476|                                        break;
  611|  6.81k|                                }
  612|       |
  613|  3.34k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 1.63k, False: 17.4k]
  ------------------
  614|  3.78k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 444, False: 18.6k]
  ------------------
  615|  3.78k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 2.34k, False: 1.43k]
  ------------------
  616|  2.34k|                                {
  617|  2.34k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 405, False: 1.94k]
  ------------------
  618|    405|                                    {
  619|    405|                                        return OpCode::SNEI;
  620|    405|                                    }
  621|  1.94k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 612, False: 1.33k]
  ------------------
  622|    612|                                    {
  623|    612|                                        return OpCode::SNEU;
  624|    612|                                    }
  625|  2.34k|                                }
  626|  2.76k|                                break;
  627|       |
  628|  2.76k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 199, False: 18.8k]
  ------------------
  629|  1.53k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 1.33k, False: 17.7k]
  ------------------
  630|  1.53k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 655, False: 883]
  |  Branch (630:37): [True: 420, False: 1.11k]
  |  Branch (630:53): [True: 420, False: 235]
  ------------------
  631|    420|                                {
  632|    420|                                    return OpCode::SRAI;
  633|    420|                                }
  634|  1.11k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 877, False: 241]
  |  Branch (634:42): [True: 677, False: 441]
  |  Branch (634:58): [True: 677, False: 200]
  ------------------
  635|    677|                                {
  636|    677|                                    return OpCode::SRLI;
  637|    677|                                }
  638|    441|                                break;
  639|       |
  640|  1.72k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 1.72k, False: 17.3k]
  ------------------
  641|  3.24k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 1.52k, False: 17.5k]
  ------------------
  642|  3.24k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 2.86k, False: 382]
  ------------------
  643|  2.86k|                                {
  644|  2.86k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 437, False: 2.42k]
  ------------------
  645|  2.86k|                                    {
  646|    370|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 370, False: 2.49k]
  ------------------
  647|    724|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 354, False: 2.50k]
  ------------------
  648|    724|                                            return OpCode::SUBD;
  649|       |
  650|    194|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 194, False: 2.66k]
  ------------------
  651|    388|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 194, False: 2.66k]
  ------------------
  652|    388|                                            return OpCode::SUBF;
  653|       |
  654|    450|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 450, False: 2.41k]
  ------------------
  655|    646|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 196, False: 2.66k]
  ------------------
  656|    646|                                            return OpCode::SUBI;
  657|       |
  658|    345|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 345, False: 2.51k]
  ------------------
  659|    667|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 322, False: 2.54k]
  ------------------
  660|    667|                                            return OpCode::SUBU;
  661|  2.86k|                                    }
  662|  2.86k|                                }
  663|    819|                                break;
  664|  19.0k|                        }
  665|  6.61k|                        break;
  666|       |
  667|  6.61k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 1.45k, False: 46.4k]
  ------------------
  668|  1.66k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 214, False: 47.7k]
  ------------------
  669|  1.66k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 1.44k, False: 221]
  |  Branch (669:29): [True: 644, False: 1.02k]
  |  Branch (669:45): [True: 1.10k, False: 342]
  |  Branch (669:61): [True: 644, False: 459]
  ------------------
  670|    644|                        {
  671|    644|                            return OpCode::TRAP;
  672|    644|                        }
  673|  1.02k|                        break;
  674|  1.14k|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 1.14k, False: 46.8k]
  ------------------
  675|  1.69k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 552, False: 47.3k]
  ------------------
  676|  1.69k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 1.34k, False: 352]
  |  Branch (676:29): [True: 548, False: 1.14k]
  |  Branch (676:45): [True: 889, False: 455]
  |  Branch (676:61): [True: 548, False: 341]
  ------------------
  677|    548|                        {
  678|    548|                            return OpCode::XORI;
  679|    548|                        }
  680|  1.14k|                        break;
  681|  47.9k|                }
  682|  24.6k|                break;
  683|  47.9k|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|  26.2k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 26.2k, False: 165k]
  ------------------
  687|  26.2k|                const char c1 = token[0u];
  688|  26.2k|                const char c2 = token[1u];
  689|  26.2k|                const char c3 = token[2u];
  690|  26.2k|                const char c4 = token[3u];
  691|  26.2k|                const char c5 = token[4u];
  692|       |
  693|  26.2k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 5.35k, False: 20.9k]
  ------------------
  694|  26.2k|                {
  695|  1.88k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 1.88k, False: 24.3k]
  ------------------
  696|  2.50k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 624, False: 25.6k]
  ------------------
  697|  2.50k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 2.08k, False: 419]
  |  Branch (697:29): [True: 388, False: 2.11k]
  |  Branch (697:45): [True: 1.47k, False: 608]
  |  Branch (697:61): [True: 1.21k, False: 267]
  |  Branch (697:77): [True: 388, False: 823]
  ------------------
  698|    388|                        {
  699|    388|                            return OpCode::ADDUI;
  700|    388|                        }
  701|  2.11k|                        break;
  702|       |
  703|  2.11k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 524, False: 25.7k]
  ------------------
  704|  2.58k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 2.06k, False: 24.1k]
  ------------------
  705|  2.58k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 2.25k, False: 336]
  |  Branch (705:29): [True: 388, False: 2.20k]
  |  Branch (705:45): [True: 2.05k, False: 194]
  |  Branch (705:61): [True: 1.03k, False: 1.02k]
  |  Branch (705:77): [True: 388, False: 645]
  ------------------
  706|    388|                        {
  707|    388|                            return OpCode::DIVUI;
  708|    388|                        }
  709|  2.20k|                        break;
  710|       |
  711|  2.20k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 1.89k, False: 24.3k]
  ------------------
  712|  3.91k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 2.01k, False: 24.2k]
  ------------------
  713|  3.91k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 3.31k, False: 597]
  |  Branch (713:29): [True: 2.67k, False: 1.23k]
  |  Branch (713:45): [True: 2.89k, False: 424]
  |  Branch (713:61): [True: 2.67k, False: 216]
  ------------------
  714|  2.67k|                        {
  715|  2.67k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 340, False: 2.33k]
  ------------------
  716|  2.67k|                            {
  717|    194|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 194, False: 2.48k]
  ------------------
  718|    420|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 226, False: 2.45k]
  ------------------
  719|    420|                                    return OpCode::MULTD;
  720|       |
  721|    322|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 322, False: 2.35k]
  ------------------
  722|    900|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 578, False: 2.09k]
  ------------------
  723|    900|                                    return OpCode::MULTF;
  724|       |
  725|    242|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 242, False: 2.43k]
  ------------------
  726|    564|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 322, False: 2.35k]
  ------------------
  727|    564|                                    return OpCode::MULTI;
  728|       |
  729|    226|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 226, False: 2.45k]
  ------------------
  730|    452|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 226, False: 2.45k]
  ------------------
  731|    452|                                    return OpCode::MULTU;
  732|  2.67k|                            }
  733|  2.67k|                        }
  734|  1.57k|                        break;
  735|       |
  736|  7.88k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 7.88k, False: 18.3k]
  ------------------
  737|  11.9k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 4.02k, False: 22.2k]
  ------------------
  738|  11.9k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 515, False: 11.3k]
  ------------------
  739|  11.9k|                        {
  740|    608|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 608, False: 11.2k]
  ------------------
  741|  1.33k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 722, False: 11.1k]
  ------------------
  742|  1.33k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 1.03k, False: 300]
  |  Branch (742:37): [True: 537, False: 793]
  |  Branch (742:53): [True: 806, False: 224]
  |  Branch (742:69): [True: 537, False: 269]
  ------------------
  743|    537|                                {
  744|    537|                                    return OpCode::SEQUI;
  745|    537|                                }
  746|    793|                                break;
  747|       |
  748|  1.71k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 1.71k, False: 10.1k]
  ------------------
  749|  2.04k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 329, False: 11.5k]
  ------------------
  750|  2.04k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 1.11k, False: 931]
  |  Branch (750:37): [True: 516, False: 1.53k]
  |  Branch (750:53): [True: 710, False: 407]
  |  Branch (750:69): [True: 516, False: 194]
  ------------------
  751|    516|                                {
  752|    516|                                    return OpCode::SGEUI;
  753|    516|                                }
  754|  1.53k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 870, False: 662]
  |  Branch (754:42): [True: 420, False: 1.11k]
  |  Branch (754:58): [True: 653, False: 217]
  |  Branch (754:74): [True: 420, False: 233]
  ------------------
  755|    420|                                {
  756|    420|                                    return OpCode::SGTUI;
  757|    420|                                }
  758|  1.11k|                                break;
  759|       |
  760|  2.11k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 2.11k, False: 9.79k]
  ------------------
  761|  3.25k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 1.14k, False: 10.7k]
  ------------------
  762|  3.25k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 1.51k, False: 1.73k]
  |  Branch (762:37): [True: 774, False: 2.47k]
  |  Branch (762:53): [True: 1.18k, False: 335]
  |  Branch (762:69): [True: 774, False: 407]
  ------------------
  763|    774|                                {
  764|    774|                                    return OpCode::SLEUI;
  765|    774|                                }
  766|  2.47k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 1.36k, False: 1.11k]
  |  Branch (766:42): [True: 484, False: 1.99k]
  |  Branch (766:58): [True: 1.07k, False: 293]
  |  Branch (766:74): [True: 484, False: 588]
  ------------------
  767|    484|                                {
  768|    484|                                    return OpCode::SLTUI;
  769|    484|                                }
  770|  1.99k|                                break;
  771|       |
  772|  1.99k|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 1.13k, False: 10.7k]
  ------------------
  773|  1.78k|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 657, False: 11.2k]
  ------------------
  774|  1.78k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 1.55k, False: 233]
  |  Branch (774:37): [True: 868, False: 919]
  |  Branch (774:53): [True: 1.07k, False: 484]
  |  Branch (774:69): [True: 868, False: 202]
  ------------------
  775|    868|                                {
  776|    868|                                    return OpCode::SNEUI;
  777|    868|                                }
  778|    919|                                break;
  779|       |
  780|  1.04k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 1.04k, False: 10.8k]
  ------------------
  781|  2.97k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 1.92k, False: 9.97k]
  ------------------
  782|  2.97k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 2.63k, False: 338]
  |  Branch (782:37): [True: 548, False: 2.42k]
  |  Branch (782:53): [True: 1.17k, False: 1.46k]
  |  Branch (782:69): [True: 548, False: 622]
  ------------------
  783|    548|                                {
  784|    548|                                    return OpCode::SUBUI;
  785|    548|                                }
  786|  2.42k|                                break;
  787|  11.9k|                        }
  788|       |
  789|  7.75k|                        break;
  790|  26.2k|                }
  791|       |
  792|  19.0k|                break;
  793|  26.2k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|  19.0k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 13.9k, False: 177k]
  ------------------
  797|  13.9k|                const char c1 = token[0u];
  798|  13.9k|                const char c2 = token[1u];
  799|  13.9k|                const char c3 = token[2u];
  800|  13.9k|                const char c4 = token[3u];
  801|  13.9k|                const char c5 = token[4u];
  802|  13.9k|                const char c6 = token[5u];
  803|       |
  804|  13.9k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 6.13k, False: 7.81k]
  |  Branch (804:21): [True: 5.40k, False: 8.55k]
  |  Branch (804:37): [True: 5.75k, False: 383]
  |  Branch (804:53): [True: 5.40k, False: 352]
  ------------------
  805|  5.40k|                {
  806|  5.40k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 252, False: 5.15k]
  ------------------
  807|  5.40k|                    {
  808|  1.32k|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 1.32k, False: 4.07k]
  ------------------
  809|  1.77k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 450, False: 4.95k]
  ------------------
  810|  1.77k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 1.32k, False: 453]
  ------------------
  811|  1.32k|                            {
  812|  1.32k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 709, False: 614]
  ------------------
  813|    709|                                {
  814|    709|                                    return OpCode::CVTD2F;
  815|    709|                                }
  816|    614|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 420, False: 194]
  ------------------
  817|    420|                                {
  818|    420|                                    return OpCode::CVTD2I;
  819|    420|                                }
  820|  1.32k|                            }
  821|    647|                            break;
  822|       |
  823|  1.34k|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 1.34k, False: 4.05k]
  ------------------
  824|  1.54k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 197, False: 5.20k]
  ------------------
  825|  1.54k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 1.30k, False: 238]
  ------------------
  826|  1.30k|                            {
  827|  1.30k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 548, False: 759]
  ------------------
  828|    548|                                {
  829|    548|                                    return OpCode::CVTF2D;
  830|    548|                                }
  831|    759|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 532, False: 227]
  ------------------
  832|    532|                                {
  833|    532|                                    return OpCode::CVTF2I;
  834|    532|                                }
  835|  1.30k|                            }
  836|    465|                            break;
  837|       |
  838|    465|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 323, False: 5.07k]
  ------------------
  839|  1.82k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 1.50k, False: 3.89k]
  ------------------
  840|  1.82k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 1.48k, False: 344]
  ------------------
  841|  1.48k|                            {
  842|  1.48k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 741, False: 744]
  ------------------
  843|    741|                                {
  844|    741|                                    return OpCode::CVTI2D;
  845|    741|                                }
  846|    744|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 452, False: 292]
  ------------------
  847|    452|                                {
  848|    452|                                    return OpCode::CVTI2F;
  849|    452|                                }
  850|  1.48k|                            }
  851|  5.40k|                    }
  852|  5.40k|                }
  853|  8.55k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 3.89k, False: 4.66k]
  |  Branch (853:26): [True: 805, False: 7.74k]
  |  Branch (853:42): [True: 2.65k, False: 1.23k]
  |  Branch (853:58): [True: 2.37k, False: 277]
  |  Branch (853:74): [True: 2.18k, False: 195]
  ------------------
  854|  8.55k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 1.25k, False: 931]
  |  Branch (854:42): [True: 805, False: 448]
  ------------------
  855|    805|                {
  856|    805|                    return OpCode::MULTUI;
  857|    805|                }
  858|  9.74k|                break;
  859|  13.9k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|  9.74k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 7.10k, False: 184k]
  ------------------
  863|  7.10k|                const char c1 = token[0u];
  864|  7.10k|                const char c2 = token[1u];
  865|  7.10k|                const char c3 = token[2u];
  866|  7.10k|                const char c4 = token[3u];
  867|  7.10k|                const char c5 = token[4u];
  868|  7.10k|                const char c6 = token[5u];
  869|  7.10k|                const char c7 = token[6u];
  870|       |
  871|  7.10k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 3.75k, False: 3.35k]
  |  Branch (871:21): [True: 2.97k, False: 4.12k]
  |  Branch (871:37): [True: 3.30k, False: 452]
  |  Branch (871:53): [True: 2.97k, False: 326]
  ------------------
  872|  2.97k|                {
  873|  2.97k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 1.72k, False: 1.25k]
  |  Branch (873:25): [True: 900, False: 2.07k]
  |  Branch (873:41): [True: 1.33k, False: 394]
  |  Branch (873:54): [True: 1.11k, False: 221]
  |  Branch (873:70): [True: 900, False: 210]
  ------------------
  874|    900|                    {
  875|    900|                        return OpCode::MOVI2FP;
  876|    900|                    }
  877|  2.07k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 1.16k, False: 914]
  |  Branch (877:25): [True: 420, False: 1.65k]
  |  Branch (877:41): [True: 842, False: 323]
  |  Branch (877:57): [True: 630, False: 212]
  |  Branch (877:70): [True: 420, False: 210]
  ------------------
  878|    420|                    {
  879|    420|                        return OpCode::MOVFP2I;
  880|    420|                    }
  881|  2.07k|                }
  882|  5.78k|                break;
  883|  7.10k|            }
  884|       |
  885|  5.78k|            default: {
  ------------------
  |  Branch (885:13): [True: 3.25k, False: 188k]
  ------------------
  886|  3.25k|                break;
  887|  7.10k|            }
  888|   191k|        }
  889|       |
  890|       |        // None found
  891|   119k|        return OpCode::NONE;
  892|   191k|    }
_ZN3dlx3iceEcc:
   17|   297k|    {
   18|   297k|        constexpr const char diff = 'a' - 'A';
   19|   297k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 95.1k, False: 201k]
  |  Branch (19:28): [True: 87.1k, False: 114k]
  ------------------
   20|   297k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   164k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|  2.45k|    {
  195|  2.45k|        ParseError err;
  196|       |
  197|  2.45k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|  2.45k|        err.m_LineNumber                           = line_number;
  199|  2.45k|        err.m_Column                               = column;
  200|  2.45k|        err.unexpected_argument_type.expected_type = expected_type;
  201|  2.45k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|  2.45k|        return err;
  204|  2.45k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|  2.45k|    {
  209|  2.45k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|  2.45k|                                                         token.GetColumn().unsafe(), expected_type,
  211|  2.45k|                                                         actual_type);
  212|  2.45k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|    194|    {
  218|    194|        ParseError err;
  219|       |
  220|    194|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|    194|        err.m_LineNumber        = line_number;
  222|    194|        err.m_Column            = column;
  223|    194|        err.invalid_number.text = text;
  224|       |
  225|    194|        return err;
  226|    194|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|    194|    {
  230|    194|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|    194|                                                token.GetColumn().unsafe(), token.GetText());
  232|    194|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|      2|    {
  237|      2|        ParseError err;
  238|       |
  239|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|      2|        err.m_LineNumber = line_number;
  241|      2|        err.m_Column     = column;
  242|       |
  243|      2|        return err;
  244|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|      2|    {
  249|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|      2|                                                                     token.GetColumn().unsafe());
  251|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  52.7k|    {
  257|  52.7k|        ParseError err;
  258|       |
  259|  52.7k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  52.7k|        err.m_LineNumber                   = line_number;
  261|  52.7k|        err.m_Column                       = column;
  262|  52.7k|        err.unexpected_token.expected_type = expected_type;
  263|  52.7k|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  52.7k|        return err;
  266|  52.7k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  52.7k|    {
  271|  52.7k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  52.7k|                                                  token.GetColumn().unsafe(), expected_type,
  273|  52.7k|                                                  token.GetType());
  274|  52.7k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|  26.9k|    {
  279|  26.9k|        ParseError err;
  280|       |
  281|  26.9k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|  26.9k|        err.m_LineNumber                   = line_number;
  283|  26.9k|        err.m_Column                       = column;
  284|  26.9k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|  26.9k|        return err;
  287|  26.9k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|    386|    {
  291|    386|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|    386|                                                    token.GetColumn().unsafe(), token.GetText());
  293|    386|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  28.7k|    {
  298|  28.7k|        ParseError err;
  299|       |
  300|  28.7k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  28.7k|        err.m_LineNumber                       = line_number;
  302|  28.7k|        err.m_Column                           = column;
  303|  28.7k|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  28.7k|        return err;
  306|  28.7k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  28.7k|    {
  311|  28.7k|        return ConstructInvalidLabelIdentifierParseError(
  312|  28.7k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  28.7k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|  11.0k|    {
  319|  11.0k|        ParseError err;
  320|       |
  321|  11.0k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|  11.0k|        err.m_LineNumber                     = line_number;
  323|  11.0k|        err.m_Column                         = column;
  324|  11.0k|        err.label_already_defined.label_name = label_name;
  325|  11.0k|        err.label_already_defined.at_line    = at_line;
  326|  11.0k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|  11.0k|        return err;
  329|  11.0k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|  11.0k|    {
  334|  11.0k|        return ConstructLabelAlreadyDefinedParseError(
  335|  11.0k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|  11.0k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|  11.0k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|  26.6k|    {
  342|  26.6k|        ParseError err;
  343|       |
  344|  26.6k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|  26.6k|        err.m_LineNumber = line_number;
  346|  26.6k|        err.m_Column     = column;
  347|       |
  348|  26.6k|        return err;
  349|  26.6k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|  26.6k|    {
  354|  26.6k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|  26.6k|                                                        token.GetColumn().unsafe());
  356|  26.6k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|  6.67k|    {
  362|  6.67k|        ParseError err;
  363|       |
  364|  6.67k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|  6.67k|        err.m_LineNumber               = line_number;
  366|  6.67k|        err.m_Column                   = column;
  367|  6.67k|        err.too_few_arguments.required = required;
  368|  6.67k|        err.too_few_arguments.provided = provided;
  369|       |
  370|  6.67k|        return err;
  371|  6.67k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|  6.67k|    {
  376|  6.67k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|  6.67k|                                                  token.GetColumn().unsafe(), required, provided);
  378|  6.67k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|  7.90k|    {
  383|  7.90k|        ParseError err;
  384|       |
  385|  7.90k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|  7.90k|        err.m_LineNumber           = line_number;
  387|  7.90k|        err.m_Column               = column;
  388|  7.90k|        err.empty_label.label_name = label_name;
  389|       |
  390|  7.90k|        return err;
  391|  7.90k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|  7.90k|    {
  395|  7.90k|        return ConstructEmptyLabelParseError(
  396|  7.90k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|  7.90k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 7.10k, False: 800]
  ------------------
  398|  7.10k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|  7.90k|                        token.GetText());
  400|  7.90k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|  1.08k|    {
  405|  1.08k|        ParseError err;
  406|       |
  407|  1.08k|        err.m_Type       = ParseError::Type::TooManyComma;
  408|  1.08k|        err.m_LineNumber = line_number;
  409|  1.08k|        err.m_Column     = column;
  410|       |
  411|  1.08k|        return err;
  412|  1.08k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|  1.08k|    {
  416|  1.08k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|  1.08k|                                               token.GetColumn().unsafe());
  418|  1.08k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   164k|    {
   19|   164k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   164k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  4.44k|    {
  181|  4.44k|        ParsedProgram program;
  182|       |
  183|  4.44k|        program.m_Tokens = tokens;
  184|       |
  185|  4.44k|        phi::boolean line_has_instruction{false};
  186|  4.44k|        phi::usize   label_count{0u};
  187|       |
  188|   200k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 195k, False: 4.44k]
  ------------------
  189|   195k|        {
  190|   195k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   195k|            switch (current_token.GetType())
  195|   195k|            {
  196|       |                // Ignore comments
  197|    860|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 860, False: 194k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|    860|                    break;
  200|       |
  201|  27.9k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 27.9k, False: 167k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  27.9k|                    line_has_instruction = false;
  204|  27.9k|                    break;
  205|       |
  206|  78.0k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 78.0k, False: 117k]
  ------------------
  207|  78.0k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 6.75k, False: 71.3k]
  ------------------
  208|  6.75k|                    {
  209|  6.75k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  6.75k|                                current_token, Token::Type::NewLine));
  211|  6.75k|                        break;
  212|  6.75k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  71.3k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 16.5k, False: 54.8k]
  ------------------
  217|  16.5k|                    {
  218|  16.5k|                        program.AddParseError(
  219|  16.5k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  16.5k|                        break;
  221|  16.5k|                    }
  222|       |
  223|  54.8k|                    phi::string_view label_name = current_token.GetText();
  224|  54.8k|                    label_name.remove_suffix(1u);
  225|       |
  226|  54.8k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 26.5k, False: 28.2k]
  ------------------
  227|  26.5k|                    {
  228|  26.5k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|  26.5k|                                current_token.GetLineNumber().unsafe(),
  230|  26.5k|                                current_token.GetColumn().unsafe(), label_name));
  231|  26.5k|                        break;
  232|  26.5k|                    }
  233|       |
  234|  28.2k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 8.77k, False: 19.4k]
  ------------------
  235|  8.77k|                    {
  236|  8.77k|                        program.AddParseError(
  237|  8.77k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  8.77k|                        break;
  239|  8.77k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  19.4k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 11.0k, False: 8.43k]
  ------------------
  243|  11.0k|                    {
  244|       |                        // Find first defintions of label
  245|  11.0k|                        const Token* first_label_definition =
  246|  11.0k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  11.0k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  11.0k|                                    {
  249|  11.0k|                                        phi::string_view token_label_name = t.GetText();
  250|  11.0k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  11.0k|                                        if (token_label_name == label_name)
  253|  11.0k|                                        {
  254|  11.0k|                                            return true;
  255|  11.0k|                                        }
  256|  11.0k|                                    }
  257|       |
  258|  11.0k|                                    return false;
  259|  11.0k|                                });
  260|       |
  261|  11.0k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  11.0k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  11.0k|                                current_token, *first_label_definition));
  265|  11.0k|                        break;
  266|  11.0k|                    }
  267|       |
  268|  8.43k|                    program.m_JumpData[label_name] =
  269|  8.43k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|  8.43k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  8.43k|                    break;
  276|  19.4k|                }
  277|       |
  278|  46.4k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 46.4k, False: 149k]
  ------------------
  279|  46.4k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 26.6k, False: 19.7k]
  ------------------
  280|  26.6k|                    {
  281|  26.6k|                        program.AddParseError(
  282|  26.6k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  26.6k|                        break;
  284|  26.6k|                    }
  285|       |
  286|  19.7k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  19.7k|                    PHI_ASSERT(current_token.HasHint());
  290|  19.7k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  19.7k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  19.7k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  19.7k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  19.7k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  19.7k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  19.7k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  19.7k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  19.7k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  33.7k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 30.8k, False: 2.95k]
  ------------------
  312|  30.8k|                    {
  313|       |                        // Get next token
  314|  30.8k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 852, False: 29.9k]
  ------------------
  315|    852|                        {
  316|    852|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    852|                                    current_token, number_of_argument_required.unsafe(),
  318|    852|                                    argument_num.unsafe()));
  319|    852|                            break;
  320|    852|                        }
  321|       |
  322|  29.9k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  29.9k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 10.0k, False: 19.8k]
  ------------------
  326|  10.0k|                        {
  327|  10.0k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 1.08k, False: 8.99k]
  ------------------
  328|  1.08k|                            {
  329|  1.08k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|  1.08k|                            }
  331|       |
  332|  10.0k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  10.0k|                            continue;
  335|  10.0k|                        }
  336|       |
  337|  19.8k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 5.82k, False: 14.0k]
  ------------------
  338|  5.82k|                        {
  339|  5.82k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  5.82k|                                    token, number_of_argument_required.unsafe(),
  341|  5.82k|                                    argument_num.unsafe()));
  342|  5.82k|                            break;
  343|  5.82k|                        }
  344|       |
  345|  14.0k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  14.0k|                                parse_instruction_argument(
  347|  14.0k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  14.0k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 10.1k, False: 3.91k]
  ------------------
  349|  10.1k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  10.1k|                            break;
  352|  10.1k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  3.91k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  3.91k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  3.91k|                        argument_num++;
  359|  3.91k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  3.91k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  19.7k|                    program.m_Instructions.emplace_back(instruction);
  367|  19.7k|                    line_has_instruction = true;
  368|  19.7k|                    break;
  369|  46.4k|                }
  370|       |
  371|  42.3k|                default:
  ------------------
  |  Branch (371:17): [True: 42.3k, False: 153k]
  ------------------
  372|  42.3k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  42.3k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 23.8k, False: 18.5k]
  ------------------
  374|  23.8k|                    {
  375|  23.8k|                        expected_token_type = Token::Type::NewLine;
  376|  23.8k|                    }
  377|       |
  378|  42.3k|                    program.AddParseError(
  379|  42.3k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  42.3k|                    break;
  381|   195k|            }
  382|   195k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  4.44k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 755, False: 3.68k]
  ------------------
  386|    755|        {
  387|  10.0k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 9.32k, False: 755]
  ------------------
  388|  9.32k|            {
  389|  9.32k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  9.32k|                const Token& token = *it;
  392|  9.32k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 7.90k, False: 1.42k]
  ------------------
  393|  7.90k|                {
  394|  7.90k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  7.90k|                    --label_count;
  396|  7.90k|                }
  397|  9.32k|            }
  398|    755|        }
  399|       |
  400|  4.44k|        return program;
  401|  4.44k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  4.44k|    {
  405|  4.44k|        TokenStream tokens = Tokenize(source);
  406|  4.44k|        return Parse(tokens);
  407|  4.44k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  14.0k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  14.0k|        switch (token.GetType())
   37|  14.0k|        {
   38|  1.54k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 1.54k, False: 12.5k]
  ------------------
   39|  1.54k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 607, False: 940]
  ------------------
   40|  1.54k|                                          ArgumentType::AddressDisplacement))
   41|    607|                {
   42|    607|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    607|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    607|                    return {};
   46|    607|                }
   47|       |
   48|       |                // Get address displacement
   49|    940|                PHI_ASSERT(token.HasHint());
   50|       |
   51|    940|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|    940|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 2, False: 938]
  ------------------
   54|      2|                {
   55|      2|                    program.AddParseError(
   56|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      2|                    return {};
   58|      2|                }
   59|       |
   60|    938|                auto         it           = tokens.current_position();
   61|    938|                const Token& first_token  = tokens.consume();
   62|    938|                const Token& second_token = tokens.consume();
   63|    938|                const Token& third_token  = tokens.consume();
   64|       |
   65|    938|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 323, False: 615]
  ------------------
   66|    323|                {
   67|    323|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    323|                            first_token, Token::Type::OpenBracket));
   69|    323|                    return {};
   70|    323|                }
   71|       |
   72|       |                // Second token is the register
   73|    615|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 227, False: 388]
  ------------------
   74|    227|                {
   75|    227|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|    227|                            second_token, Token::Type::RegisterInt));
   77|    227|                    return {};
   78|    227|                }
   79|       |
   80|    388|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 194, False: 194]
  ------------------
   81|    194|                {
   82|    194|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|    194|                            third_token, Token::Type::ClosingBracket));
   84|    194|                    return {};
   85|    194|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|    194|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|    194|                return ConstructInstructionArgumentAddressDisplacement(
   94|    194|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|    388|            }
   96|  1.06k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 1.06k, False: 12.9k]
  ------------------
   97|  1.06k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 197, False: 870]
  ------------------
   98|    197|                {
   99|    197|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    197|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    197|                    return {};
  102|    197|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|    870|                return ConstructInstructionArgumentRegisterInt(
  108|    870|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  1.06k|            }
  110|    998|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 998, False: 13.0k]
  ------------------
  111|    998|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 451, False: 547]
  ------------------
  112|    451|                {
  113|    451|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    451|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    451|                    return {};
  116|    451|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|    547|                return ConstructInstructionArgumentRegisterFloat(
  122|    547|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|    998|            }
  124|    386|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 386, False: 13.6k]
  ------------------
  125|    386|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|    386|                return {};
  128|    998|            }
  129|  6.43k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 6.43k, False: 7.62k]
  ------------------
  130|       |                // Parse as Label
  131|  6.43k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 875, False: 5.55k]
  ------------------
  132|    875|                {
  133|    875|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|    875|                            token, expected_argument_type, ArgumentType::Label));
  135|    875|                    return {};
  136|    875|                }
  137|       |
  138|  5.55k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 5.55k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  5.55k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 3.44k, False: 2.11k]
  ------------------
  145|  3.44k|                {
  146|  3.44k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  3.44k|                    return {};
  148|  3.44k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  2.11k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  5.55k|            }
  154|    715|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 715, False: 13.3k]
  ------------------
  155|    715|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 325, False: 390]
  ------------------
  156|    325|                {
  157|    325|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    325|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    325|                    return {};
  160|    325|                }
  161|       |
  162|    390|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 196, False: 194]
  ------------------
  163|    196|                {
  164|    196|                    return ConstructInstructionArgumentImmediateValue(
  165|    196|                            static_cast<std::int16_t>(token.GetHint()));
  166|    196|                }
  167|       |
  168|    194|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    194|                return {};
  170|    390|            }
  171|       |
  172|  2.91k|            default:
  ------------------
  |  Branch (172:13): [True: 2.91k, False: 11.1k]
  ------------------
  173|  2.91k|                program.AddParseError(
  174|  2.91k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  2.91k|                return {};
  176|  14.0k|        }
  177|  14.0k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  98.8k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  98.8k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 72.9k, False: 25.8k]
  ------------------
  248|  72.9k|                                    {
  249|  72.9k|                                        phi::string_view token_label_name = t.GetText();
  250|  72.9k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  72.9k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 11.0k, False: 61.9k]
  ------------------
  253|  11.0k|                                        {
  254|  11.0k|                                            return true;
  255|  11.0k|                                        }
  256|  72.9k|                                    }
  257|       |
  258|  87.7k|                                    return false;
  259|  98.8k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    199|    {
  354|    199|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 199]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    199|        m_CurrentProgram = &program;
  361|       |
  362|    199|        m_ProgramCounter               = 0u;
  363|    199|        m_Halted                       = false;
  364|    199|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    199|        m_LastRaisedException          = Exception::None;
  366|    199|        m_CurrentStepCount             = 0u;
  367|       |
  368|    199|        return true;
  369|    199|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|   197k|    {
   13|   197k|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 29.8k, False: 167k]
  ------------------
   14|  29.8k|        {
   15|  29.8k|            const char first_char = token[0u];
   16|  29.8k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 1.44k, False: 28.4k]
  |  Branch (16:38): [True: 1.56k, False: 26.8k]
  ------------------
   17|  3.00k|            {
   18|  3.00k|                const char second_char = token[1u];
   19|  3.00k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 2.63k, False: 374]
  |  Branch (19:43): [True: 2.05k, False: 575]
  ------------------
   20|  2.05k|                {
   21|  2.05k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  2.05k|                }
   23|  3.00k|            }
   24|  29.8k|        }
   25|   167k|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 44.2k, False: 122k]
  ------------------
   26|  44.2k|        {
   27|  44.2k|            const char first_char = token[0u];
   28|  44.2k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 2.47k, False: 41.7k]
  |  Branch (28:38): [True: 307, False: 41.4k]
  ------------------
   29|  2.78k|            {
   30|  2.78k|                const char second_char = token[1u];
   31|  2.78k|                const char third_char  = token[2u];
   32|       |
   33|  2.78k|                switch (second_char)
   34|  2.78k|                {
   35|    743|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 743, False: 2.04k]
  ------------------
   36|    743|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 420, False: 323]
  |  Branch (36:50): [True: 221, False: 199]
  ------------------
   37|    221|                        {
   38|    221|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|    221|                        }
   40|    522|                        break;
   41|    743|                    }
   42|    784|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 784, False: 2.00k]
  ------------------
   43|    784|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 590, False: 194]
  |  Branch (43:50): [True: 396, False: 194]
  ------------------
   44|    396|                        {
   45|    396|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|    396|                        }
   47|    388|                        break;
   48|    784|                    }
   49|    852|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 852, False: 1.93k]
  ------------------
   50|    852|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 194, False: 658]
  |  Branch (50:50): [True: 324, False: 334]
  ------------------
   51|    518|                        {
   52|    518|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|    518|                        }
   54|    334|                        break;
   55|    852|                    }
   56|    405|                    default: {
  ------------------
  |  Branch (56:21): [True: 405, False: 2.37k]
  ------------------
   57|    405|                        break;
   58|    852|                    }
   59|  2.78k|                }
   60|  2.78k|            }
   61|  44.2k|        }
   62|       |
   63|   193k|        return IntRegisterID::None;
   64|   197k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|   193k|    {
   68|   193k|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 27.8k, False: 165k]
  ------------------
   69|  27.8k|        {
   70|  27.8k|            const char first_char = token[0u];
   71|  27.8k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 1.28k, False: 26.5k]
  |  Branch (71:38): [True: 1.09k, False: 25.4k]
  ------------------
   72|  2.38k|            {
   73|  2.38k|                const char second_char = token[1u];
   74|  2.38k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 2.16k, False: 226]
  |  Branch (74:43): [True: 1.42k, False: 732]
  ------------------
   75|  1.42k|                {
   76|  1.42k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  1.42k|                }
   78|  2.38k|            }
   79|  27.8k|        }
   80|   165k|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 43.0k, False: 122k]
  ------------------
   81|  43.0k|        {
   82|  43.0k|            const char first_char = token[0u];
   83|  43.0k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 2.56k, False: 40.5k]
  |  Branch (83:38): [True: 820, False: 39.7k]
  ------------------
   84|  3.38k|            {
   85|  3.38k|                const char second_char = token[1u];
   86|  3.38k|                const char third_char  = token[2u];
   87|       |
   88|  3.38k|                switch (second_char)
   89|  3.38k|                {
   90|    936|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 936, False: 2.45k]
  ------------------
   91|    936|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 739, False: 197]
  |  Branch (91:50): [True: 417, False: 322]
  ------------------
   92|    417|                        {
   93|    417|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|    417|                        }
   95|    519|                        break;
   96|    936|                    }
   97|    843|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 843, False: 2.54k]
  ------------------
   98|    843|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 393, False: 450]
  |  Branch (98:50): [True: 196, False: 197]
  ------------------
   99|    196|                        {
  100|    196|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|    196|                        }
  102|    647|                        break;
  103|    843|                    }
  104|    871|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 871, False: 2.51k]
  ------------------
  105|    871|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 226, False: 645]
  |  Branch (105:50): [True: 194, False: 451]
  ------------------
  106|    420|                        {
  107|    420|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|    420|                        }
  109|    451|                        break;
  110|    871|                    }
  111|    738|                    default: {
  ------------------
  |  Branch (111:21): [True: 738, False: 2.65k]
  ------------------
  112|    738|                        break;
  113|    871|                    }
  114|  3.38k|                }
  115|  3.38k|            }
  116|  43.0k|        }
  117|       |
  118|   191k|        return FloatRegisterID::None;
  119|   193k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|   171k|    {
  123|   171k|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 39.8k, False: 131k]
  ------------------
  124|  39.8k|        {
  125|  39.8k|            const char c1 = token[0u];
  126|  39.8k|            const char c2 = token[1u];
  127|  39.8k|            const char c3 = token[2u];
  128|  39.8k|            const char c4 = token[3u];
  129|       |
  130|  39.8k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 1.17k, False: 38.6k]
  |  Branch (130:34): [True: 391, False: 38.2k]
  |  Branch (130:49): [True: 201, False: 1.36k]
  |  Branch (130:62): [True: 998, False: 368]
  ------------------
  131|  39.8k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 794, False: 405]
  |  Branch (131:34): [True: 201, False: 204]
  |  Branch (131:49): [True: 776, False: 219]
  |  Branch (131:62): [True: 3, False: 216]
  ------------------
  132|  39.8k|        }
  133|       |
  134|   131k|        return false;
  135|   171k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|   173k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  54.5k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|   651k|    {
   41|   651k|        return m_Type;
   42|   651k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   584k|    {
   51|   584k|        return m_LineNumber;
   52|   584k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  1.13M|    {
   56|  1.13M|        return m_Column;
   57|  1.13M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|   765k|    {
   61|   765k|        return m_Text.length();
   62|   765k|    }
_ZNK3dlx5Token7GetTextEv:
   65|   275k|    {
   66|   275k|        return m_Text;
   67|   275k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  21.1k|    {
   80|  21.1k|        return m_HasHint;
   81|  21.1k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  22.5k|    {
   85|  22.5k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  22.5k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  22.5k|                   m_Type == Type::ImmediateInteger);
   88|  22.5k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  22.5k|        return m_Hint;
   91|  22.5k|    }

_ZN3dlx11TokenStream8finalizeEv:
   30|  4.44k|    {
   31|       |#if defined(PHI_DEBUG)
   32|       |        PHI_ASSERT(!m_Finialized);
   33|       |#endif
   34|       |
   35|  4.44k|        m_Iterator = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |        m_Finialized = true;
   38|       |#endif
   39|  4.44k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   51|    940|    {
   52|    940|        return x + m_Iterator <= m_Tokens.size();
   53|    940|    }
_ZNK3dlx11TokenStream8has_moreEv:
   56|   230k|    {
   57|   230k|        return m_Iterator < m_Tokens.size();
   58|   230k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   61|   228k|    {
   62|   228k|        return m_Iterator >= m_Tokens.size();
   63|   228k|    }
_ZN3dlx11TokenStream7consumeEv:
   76|   228k|    {
   77|   228k|        PHI_ASSERT(!reached_end());
   78|       |#if defined(PHI_DEBUG)
   79|       |        PHI_ASSERT(m_Finialized);
   80|       |#endif
   81|       |
   82|   228k|        return m_Tokens.at(m_Iterator++.unsafe());
   83|   228k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  155|    938|    {
  156|    938|        return m_Iterator;
  157|    938|    }
_ZN3dlx11TokenStream12set_positionEN3phi7integerImEE:
  160|    194|    {
  161|       |#if defined(PHI_DEBUG)
  162|       |        PHI_ASSERT(m_Finialized);
  163|       |#endif
  164|       |
  165|    194|        m_Iterator = pos;
  166|    194|    }
_ZNK3dlx11TokenStream5beginEv:
  169|  4.44k|    {
  170|       |#if defined(PHI_DEBUG)
  171|       |        //PHI_ASSERT(m_Finialized);
  172|       |#endif
  173|       |
  174|  4.44k|        return m_Tokens.begin();
  175|  4.44k|    }
_ZNK3dlx11TokenStream3endEv:
  187|  4.44k|    {
  188|       |#if defined(PHI_DEBUG)
  189|       |        //PHI_ASSERT(m_Finialized);
  190|       |#endif
  191|       |
  192|  4.44k|        return m_Tokens.end();
  193|  4.44k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  205|    755|    {
  206|       |#if defined(PHI_DEBUG)
  207|       |        //PHI_ASSERT(m_Finialized);
  208|       |#endif
  209|       |
  210|    755|        return m_Tokens.rbegin();
  211|    755|    }
_ZNK3dlx11TokenStream4rendEv:
  214|  9.32k|    {
  215|       |#if defined(PHI_DEBUG)
  216|       |        //PHI_ASSERT(m_Finialized);
  217|       |#endif
  218|       |
  219|  9.32k|        return m_Tokens.rend();
  220|  9.32k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  4.44k|    {
   66|  4.44k|        TokenStream tokens;
   67|       |
   68|  4.44k|        phi::string_view current_token;
   69|       |
   70|  4.44k|        phi::u64 current_line_number{1u};
   71|  4.44k|        phi::u64 current_column{1u};
   72|  4.44k|        phi::u64 token_begin{0u};
   73|       |
   74|  4.44k|        phi::boolean parsing_comment{false};
   75|       |
   76|   625k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 620k, False: 4.44k]
  ------------------
   77|   620k|        {
   78|   620k|            const char c{source.at(i)};
   79|       |
   80|   620k|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 33.9k, False: 586k]
  ------------------
   81|  33.9k|            {
   82|  33.9k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 6.71k, False: 27.2k]
  ------------------
   83|  6.71k|                {
   84|       |                    // Skip empty lines
   85|  6.71k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  6.71k|                                        current_line_number, current_column);
   87|       |
   88|  6.71k|                    parsing_comment = false;
   89|  6.71k|                    current_line_number += 1u;
   90|  6.71k|                    current_column = 1u;
   91|  6.71k|                    continue;
   92|  6.71k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  27.2k|                tokens.emplace_back(ParseToken(
   96|  27.2k|                        source.substring_view(
   97|  27.2k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  27.2k|                                current_token.length()),
   99|  27.2k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  27.2k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  27.2k|                                    current_line_number, current_column);
  103|       |
  104|  27.2k|                current_token   = phi::string_view{};
  105|  27.2k|                parsing_comment = false;
  106|  27.2k|                current_line_number += 1u;
  107|  27.2k|                current_column = 0u;
  108|  27.2k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|   586k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 893, False: 585k]
  |  Branch (110:34): [True: 1.00k, False: 584k]
  ------------------
  111|  1.89k|            {
  112|  1.89k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 304, False: 1.59k]
  ------------------
  113|    304|                {
  114|    304|                    token_begin = i;
  115|    304|                }
  116|  1.59k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 1.14k, False: 448]
  ------------------
  117|  1.14k|                {
  118|  1.14k|                    tokens.emplace_back(ParseToken(
  119|  1.14k|                            source.substring_view(
  120|  1.14k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  1.14k|                                    current_token.length()),
  122|  1.14k|                            current_line_number, current_column - current_token.length()));
  123|  1.14k|                    token_begin   = i;
  124|  1.14k|                    current_token = phi::string_view{};
  125|  1.14k|                }
  126|       |
  127|  1.89k|                parsing_comment = true;
  128|  1.89k|                current_token   = source.substring_view(
  129|  1.89k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  1.89k|                        current_token.length() + 1u);
  131|  1.89k|            }
  132|   584k|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 1.62k, False: 583k]
  ------------------
  133|  1.62k|            {
  134|       |                // simply append the character
  135|  1.62k|                current_token = source.substring_view(
  136|  1.62k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|  1.62k|                        current_token.length() + 1u);
  138|  1.62k|            }
  139|   583k|            else
  140|   583k|            {
  141|       |                // Not parsing a comment
  142|   583k|                switch (c)
  143|   583k|                {
  144|  6.19k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 6.19k, False: 577k]
  ------------------
  145|  16.1k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 9.99k, False: 573k]
  ------------------
  146|  16.1k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 0, False: 583k]
  ------------------
  147|  16.1k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 2.47k, False: 13.7k]
  ------------------
  148|  2.47k|                        {
  149|  2.47k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|  2.47k|                            continue;
  152|  2.47k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  13.7k|                        tokens.emplace_back(ParseToken(
  156|  13.7k|                                source.substring_view(
  157|  13.7k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  13.7k|                                        current_token.length()),
  159|  13.7k|                                current_line_number, current_column - current_token.length()));
  160|  13.7k|                        current_token = phi::string_view{};
  161|  13.7k|                        break;
  162|  63.1k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 63.1k, False: 520k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  63.1k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 57.7k, False: 5.38k]
  ------------------
  165|  57.7k|                        {
  166|  57.7k|                            current_token = source.substring_view(
  167|  57.7k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  57.7k|                                    current_token.length() + 1u);
  169|  57.7k|                            tokens.emplace_back(ParseToken(
  170|  57.7k|                                    source.substring_view(
  171|  57.7k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  57.7k|                                                    token_begin),
  173|  57.7k|                                            current_token.length()),
  174|  57.7k|                                    current_line_number,
  175|  57.7k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  57.7k|                            current_token = phi::string_view{};
  178|  57.7k|                        }
  179|  5.38k|                        else
  180|  5.38k|                        {
  181|       |                            // Orphan colon
  182|  5.38k|                            token_begin = i;
  183|       |
  184|  5.38k|                            tokens.emplace_back(
  185|  5.38k|                                    Token::Type::Colon,
  186|  5.38k|                                    source.substring_view(
  187|  5.38k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  5.38k|                                                    token_begin),
  189|  5.38k|                                            1u),
  190|  5.38k|                                    current_line_number, current_column);
  191|  5.38k|                        }
  192|  63.1k|                        break;
  193|  33.3k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 33.3k, False: 549k]
  ------------------
  194|  39.7k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 6.40k, False: 576k]
  ------------------
  195|  46.5k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 6.87k, False: 576k]
  ------------------
  196|  46.5k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 39.5k, False: 7.09k]
  ------------------
  197|  39.5k|                        {
  198|  39.5k|                            tokens.emplace_back(ParseToken(
  199|  39.5k|                                    source.substring_view(
  200|  39.5k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  39.5k|                                                    token_begin),
  202|  39.5k|                                            current_token.length()),
  203|  39.5k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  39.5k|                            current_token = phi::string_view{};
  206|  39.5k|                        }
  207|       |
  208|  46.5k|                        Token::Type type;
  209|  46.5k|                        switch (c)
  210|  46.5k|                        {
  211|  33.3k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 33.3k, False: 13.2k]
  ------------------
  212|  33.3k|                                type = Token::Type::Comma;
  213|  33.3k|                                break;
  214|  6.40k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 6.40k, False: 40.1k]
  ------------------
  215|  6.40k|                                type = Token::Type::OpenBracket;
  216|  6.40k|                                break;
  217|  6.87k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 6.87k, False: 39.7k]
  ------------------
  218|  6.87k|                                type = Token::Type::ClosingBracket;
  219|  6.87k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 46.5k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  46.5k|#endif
  225|  46.5k|                        }
  226|       |
  227|  46.5k|                        token_begin = i;
  228|       |
  229|  46.5k|                        tokens.emplace_back(
  230|  46.5k|                                type,
  231|  46.5k|                                source.substring_view(
  232|  46.5k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  46.5k|                                        1u),
  234|  46.5k|                                current_line_number, current_column);
  235|  46.5k|                        break;
  236|       |
  237|   457k|                    default:
  ------------------
  |  Branch (237:21): [True: 457k, False: 125k]
  ------------------
  238|   457k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 141k, False: 316k]
  ------------------
  239|   141k|                        {
  240|   141k|                            token_begin = i;
  241|   141k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   457k|                        current_token = source.substring_view(
  245|   457k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   457k|                                current_token.length() + 1u);
  247|   583k|                }
  248|   583k|            }
  249|       |
  250|   611k|            current_column += 1u;
  251|   611k|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  4.44k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 3.28k, False: 1.15k]
  ------------------
  255|  3.28k|        {
  256|  3.28k|            tokens.emplace_back(
  257|  3.28k|                    ParseToken(source.substring_view(
  258|  3.28k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  3.28k|                                       current_token.length()),
  260|  3.28k|                               current_line_number, current_column - current_token.length()));
  261|  3.28k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  4.44k|        tokens.finalize();
  265|       |
  266|  4.44k|        return tokens;
  267|  4.44k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   142k|    {
   14|   142k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 1.37k, False: 141k]
  |  Branch (14:13): [True: 1.15k, False: 141k]
  |  Branch (14:36): [True: 1.15k, False: 219]
  ------------------
   15|  1.15k|        {
   16|  1.15k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  1.15k|            if (number)
  ------------------
  |  Branch (18:17): [True: 249, False: 908]
  ------------------
   19|    249|            {
   20|    249|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|    249|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|    249|            }
   23|       |
   24|    908|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  1.15k|        }
   26|       |
   27|   141k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 671, False: 140k]
  |  Branch (27:13): [True: 1.45k, False: 140k]
  |  Branch (27:36): [True: 779, False: 140k]
  ------------------
   28|  1.45k|        {
   29|  1.45k|            return {Token::Type::Comment, token, line_number, column};
   30|  1.45k|        }
   31|       |
   32|   140k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 2.80k, False: 137k]
  ------------------
   33|  2.80k|        {
   34|  2.80k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  2.80k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  2.80k|        }
   37|       |
   38|   137k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 585, False: 136k]
  ------------------
   39|    585|        {
   40|    585|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|    585|        }
   42|       |
   43|   136k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 1.64k, False: 134k]
  ------------------
   44|  1.64k|        {
   45|  1.64k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  1.64k|                    static_cast<phi::uint32_t>(id)};
   47|  1.64k|        }
   48|       |
   49|   134k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 2.09k, False: 132k]
  ------------------
   50|  2.09k|        {
   51|  2.09k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  2.09k|                    static_cast<phi::uint32_t>(id)};
   53|  2.09k|        }
   54|       |
   55|   132k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 47.7k, False: 85.1k]
  ------------------
   56|  47.7k|        {
   57|  47.7k|            return {Token::Type::OpCode, token, line_number, column,
   58|  47.7k|                    static_cast<phi::uint32_t>(opcode)};
   59|  47.7k|        }
   60|       |
   61|  85.1k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|   132k|    }

_ZN6ImVec2C2Ev:
  262|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

LLVMFuzzerTestOneInput:
   10|  4.44k|{
   11|  4.44k|    static dlxemu::Emulator emu;
   12|       |
   13|  4.44k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   14|       |
   15|  4.44k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   16|       |
   17|       |    // Parse it
   18|  4.44k|    editor.SetText(std::string(source.data(), source.length().unsafe()));
   19|  4.44k|    editor.m_FullText = editor.GetText();
   20|       |
   21|  4.44k|    emu.ParseProgram(editor.m_FullText);
   22|       |
   23|  4.44k|    editor.ColorizeInternal();
   24|       |
   25|  4.44k|    return 0;
   26|  4.44k|}


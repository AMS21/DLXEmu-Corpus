_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  194|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  199|  20.8k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  232|  4.17k|    {
  233|  4.17k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (233:13): [True: 978, False: 3.19k]
  ------------------
  234|    978|        {
  235|    978|            return m_Line < other.m_Line;
  236|    978|        }
  237|       |
  238|  3.19k|        return m_Column <= other.m_Column;
  239|  4.17k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  242|      1|    {
  243|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (243:13): [True: 0, False: 1]
  ------------------
  244|      0|        {
  245|      0|            return m_Line > other.m_Line;
  246|      0|        }
  247|       |
  248|      1|        return m_Column >= other.m_Column;
  249|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  256|   432k|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  284|      1|    {
  285|      1|        Colorize();
  286|      1|        m_Lines.emplace_back();
  287|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  290|      1|    {
  291|      1|        VerifyInternalState();
  292|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  340|  4.17k|    {
  341|  4.17k|        m_ErrorMarkers.clear();
  342|  4.17k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  405|  4.17k|    {
  406|  4.17k|        m_Breakpoints.clear();
  407|  4.17k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  485|  4.17k|    {
  486|  4.17k|        m_Lines.clear();
  487|  4.17k|        ResetState();
  488|  4.17k|        m_Lines.emplace_back();
  489|       |
  490|  4.17k|        for (const char character : text)
  ------------------
  |  Branch (490:35): [True: 465k, False: 4.17k]
  ------------------
  491|   465k|        {
  492|   465k|            if (character == '\r' ||
  ------------------
  |  Branch (492:17): [True: 282, False: 465k]
  |  Branch (492:17): [True: 11.0k, False: 454k]
  ------------------
  493|   465k|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (493:18): [True: 38.6k, False: 426k]
  |  Branch (493:48): [True: 16.4k, False: 22.2k]
  |  Branch (493:69): [True: 10.8k, False: 5.59k]
  ------------------
  494|  11.0k|            {
  495|       |                // ignore the carriage return character and control characters
  496|  11.0k|            }
  497|   454k|            else if (character == '\n')
  ------------------
  |  Branch (497:22): [True: 22.2k, False: 432k]
  ------------------
  498|  22.2k|            {
  499|  22.2k|                m_Lines.emplace_back();
  500|  22.2k|            }
  501|   432k|            else
  502|   432k|            {
  503|   432k|                m_Lines.back().emplace_back(static_cast<Char>(character), PaletteIndex::Default);
  504|   432k|            }
  505|   465k|        }
  506|       |
  507|  4.17k|        m_TextChanged = true;
  508|  4.17k|        m_ScrollToTop = true;
  509|       |
  510|  4.17k|        m_UndoBuffer.clear();
  511|  4.17k|        m_UndoIndex = 0u;
  512|       |
  513|  4.17k|        Colorize();
  514|  4.17k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  517|  4.17k|    {
  518|  4.17k|        const phi::u32 max_line = GetMaxLineNumber();
  519|       |
  520|  4.17k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  521|  4.17k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1484|      1|    {
 1485|       |        // Lines should never be empty
 1486|      1|        PHI_ASSERT(!m_Lines.empty());
 1487|       |
 1488|       |        // Verify Selection is still in a valid state
 1489|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1490|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1491|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1492|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1493|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1494|       |
 1495|       |        // Verify cursor position
 1496|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1497|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1498|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1499|       |
 1500|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1501|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1502|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1503|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1504|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1505|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1506|       |#endif
 1507|       |
 1508|       |        // Verify that all breakpoints are on existing lines
 1509|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1509:35): [True: 0, False: 1]
  ------------------
 1510|      0|        {
 1511|      0|            PHI_ASSERT(break_point != 0u);
 1512|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1513|      0|        }
 1514|       |
 1515|       |        // Verify that all error markers are on existing lines
 1516|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1516:34): [True: 0, False: 1]
  ------------------
 1517|      0|        {
 1518|      0|            const phi::u32 line_number = error_marker.first;
 1519|       |
 1520|      0|            PHI_ASSERT(line_number != 0u);
 1521|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1522|      0|        }
 1523|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1526|      1|    {
 1527|      1|        constexpr const static Palette palette = {{
 1528|      1|                0xff7f7f7f, // Default
 1529|      1|                0xffd69c56, // OpCode
 1530|      1|                0xff00ff00, // Register
 1531|      1|                0xff7070e0, // IntegerLiteral
 1532|      1|                0xff206020, // Comment
 1533|      1|                0xff101010, // Background
 1534|      1|                0xffe0e0e0, // Cursor
 1535|      1|                0x80a06020, // Selection
 1536|      1|                0x800020ff, // ErrorMarker
 1537|      1|                0x40f08000, // Breakpoint
 1538|      1|                0xff707000, // Line number
 1539|      1|                0x40000000, // Current line fill
 1540|      1|                0x40808080, // Current line fill (inactive)
 1541|      1|                0x40a0a0a0, // Current line edge
 1542|      1|        }};
 1543|       |
 1544|      1|        return palette;
 1545|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1710|  4.17k|    {
 1711|       |        // TODO: This is quite unreadable
 1712|  4.17k|        const phi::u32 to_line =
 1713|  4.17k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1713:17): [True: 4.17k, False: 0]
  ------------------
 1714|  4.17k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1715|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1716|       |
 1717|  4.17k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1718|  4.17k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1719|  4.17k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1720|  4.17k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1721|  4.17k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1826|  4.17k|    {
 1827|  4.17k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1828|  4.17k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1829|  4.17k|        PHI_ASSERT(start <= end);
 1830|       |
 1831|  4.17k|        std::string result;
 1832|       |
 1833|  4.17k|        phi::u32   lstart = start.m_Line;
 1834|  4.17k|        phi::u32   lend   = end.m_Line;
 1835|  4.17k|        phi::u32   istart = GetCharacterIndex(start);
 1836|  4.17k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1837|  4.17k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1838|  4.17k|        phi::usize size   = 0u;
 1839|       |
 1840|  30.6k|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1840:35): [True: 26.4k, False: 4.17k]
  ------------------
 1841|  26.4k|        {
 1842|  26.4k|            PHI_ASSERT(i < m_Lines.size());
 1843|  26.4k|            size += m_Lines[i.unsafe()].size();
 1844|  26.4k|        }
 1845|       |
 1846|  4.17k|        result.reserve((size + size / 8u).unsafe());
 1847|       |
 1848|   458k|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1848:16): [True: 394k, False: 63.4k]
  |  Branch (1848:16): [True: 454k, False: 4.17k]
  |  Branch (1848:33): [True: 59.3k, False: 4.17k]
  ------------------
 1849|   454k|        {
 1850|   454k|            PHI_ASSERT(lstart < m_Lines.size());
 1851|       |
 1852|   454k|            const Line& line = m_Lines[lstart.unsafe()];
 1853|   454k|            if (istart < line.size())
  ------------------
  |  Branch (1853:17): [True: 432k, False: 22.2k]
  ------------------
 1854|   432k|            {
 1855|   432k|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1856|   432k|                istart++;
 1857|   432k|            }
 1858|  22.2k|            else
 1859|  22.2k|            {
 1860|  22.2k|                istart = 0u;
 1861|  22.2k|                ++lstart;
 1862|       |
 1863|  22.2k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1863:21): [True: 22.2k, False: 0]
  ------------------
 1864|  22.2k|                {
 1865|  22.2k|                    result += '\n';
 1866|  22.2k|                }
 1867|  22.2k|            }
 1868|   454k|        }
 1869|       |
 1870|  4.17k|        return result;
 1871|  4.17k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2403|  8.34k|    {
 2404|  8.34k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2405|       |
 2406|  8.34k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2407|  8.34k|        phi::u32    index = 0u;
 2408|   304k|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2408:35): [True: 300k, False: 4.24k]
  |  Branch (2408:35): [True: 296k, False: 8.34k]
  |  Branch (2408:58): [True: 296k, False: 4.10k]
  ------------------
 2409|   296k|        {
 2410|   296k|            PHI_ASSERT(index < line.size());
 2411|   296k|            const Char character = line[index.unsafe()].m_Char;
 2412|       |
 2413|   296k|            if (character == '\t')
  ------------------
  |  Branch (2413:17): [True: 3.92k, False: 292k]
  ------------------
 2414|  3.92k|            {
 2415|  3.92k|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2416|  3.92k|            }
 2417|   292k|            else
 2418|   292k|            {
 2419|   292k|                ++column;
 2420|   292k|            }
 2421|       |
 2422|   296k|            index += UTF8CharLength(character);
 2423|   296k|        }
 2424|       |
 2425|  8.34k|        return index;
 2426|  8.34k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2473|  4.17k|    {
 2474|  4.17k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2474:13): [True: 0, False: 4.17k]
  ------------------
 2475|      0|        {
 2476|      0|            return 0u;
 2477|      0|        }
 2478|       |
 2479|  4.17k|        const Line& line = m_Lines[line_number.unsafe()];
 2480|  4.17k|        phi::u32    col  = 0u;
 2481|       |
 2482|   300k|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2482:32): [True: 296k, False: 4.17k]
  ------------------
 2483|   296k|        {
 2484|   296k|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2485|   296k|            if (character == '\t')
  ------------------
  |  Branch (2485:17): [True: 3.92k, False: 292k]
  ------------------
 2486|  3.92k|            {
 2487|  3.92k|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2488|  3.92k|            }
 2489|   292k|            else
 2490|   292k|            {
 2491|   292k|                col++;
 2492|   292k|            }
 2493|       |
 2494|   296k|            i += UTF8CharLength(character);
 2495|   296k|        }
 2496|       |
 2497|  4.17k|        return col;
 2498|  4.17k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2501|  4.17k|    {
 2502|  4.17k|        PHI_ASSERT(!m_Lines.empty());
 2503|       |
 2504|  4.17k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2505|  4.17k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3639|   158k|    {
 3640|   158k|        PaletteIndex palette_index{PaletteIndex::Default};
 3641|       |
 3642|       |        // Determine palette color
 3643|   158k|        switch (token.GetType())
 3644|   158k|        {
 3645|  1.13k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3645:13): [True: 1.13k, False: 157k]
  ------------------
 3646|  1.13k|                palette_index = PaletteIndex::Comment;
 3647|  1.13k|                break;
 3648|    837|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3648:13): [True: 837, False: 157k]
  ------------------
 3649|  2.84k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3649:13): [True: 2.00k, False: 156k]
  ------------------
 3650|  2.84k|                palette_index = PaletteIndex::IntegerLiteral;
 3651|  2.84k|                break;
 3652|  37.3k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3652:13): [True: 37.3k, False: 121k]
  ------------------
 3653|  37.3k|                palette_index = PaletteIndex::OpCode;
 3654|  37.3k|                break;
 3655|  1.18k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3655:13): [True: 1.18k, False: 157k]
  ------------------
 3656|  2.71k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3656:13): [True: 1.52k, False: 157k]
  ------------------
 3657|  3.10k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3657:13): [True: 388, False: 158k]
  ------------------
 3658|  3.10k|                palette_index = PaletteIndex::Register;
 3659|  3.10k|                break;
 3660|  22.2k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3660:13): [True: 22.2k, False: 136k]
  ------------------
 3661|  22.2k|                return;
 3662|  91.9k|            default:
  ------------------
  |  Branch (3662:13): [True: 91.9k, False: 66.6k]
  ------------------
 3663|  91.9k|                break;
 3664|   158k|        }
 3665|       |
 3666|   136k|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3667|   136k|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3668|       |
 3669|   136k|        for (phi::u64 index{token.GetColumn() - 1u};
 3670|   558k|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3670:14): [True: 422k, False: 136k]
  ------------------
 3671|   422k|        {
 3672|   422k|            PHI_ASSERT(index < line.size());
 3673|   422k|            line[index.unsafe()].m_ColorIndex = palette_index;
 3674|   422k|        }
 3675|   136k|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3678|  4.17k|    {
 3679|  4.17k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3680|       |
 3681|  4.17k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3681:38): [True: 158k, False: 4.17k]
  ------------------
 3682|   158k|        {
 3683|   158k|            ColorizeToken(token);
 3684|   158k|        }
 3685|  4.17k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3688|  4.17k|    {
 3689|  4.17k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3690|  4.17k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3691|  4.17k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3692|       |
 3693|       |        // Clear breakpoints and markers
 3694|  4.17k|        ClearBreakPoints();
 3695|  4.17k|        ClearErrorMarkers();
 3696|  4.17k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  132|   296k|{
  133|   296k|    return UTF8CharLength(static_cast<char>(character));
  134|   296k|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  102|   593k|{
  103|   593k|    if ((character & 0xFE) == 0xFC)
  ------------------
  |  Branch (103:9): [True: 552, False: 592k]
  ------------------
  104|    552|    {
  105|    552|        return 6_u8;
  106|    552|    }
  107|       |
  108|   592k|    if ((character & 0xFC) == 0xF8)
  ------------------
  |  Branch (108:9): [True: 1.04k, False: 591k]
  ------------------
  109|  1.04k|    {
  110|  1.04k|        return 5_u8;
  111|  1.04k|    }
  112|       |
  113|   591k|    if ((character & 0xF8) == 0xF0)
  ------------------
  |  Branch (113:9): [True: 772, False: 590k]
  ------------------
  114|    772|    {
  115|    772|        return 4_u8;
  116|    772|    }
  117|       |
  118|   590k|    if ((character & 0xF0) == 0xE0)
  ------------------
  |  Branch (118:9): [True: 1.11k, False: 589k]
  ------------------
  119|  1.11k|    {
  120|  1.11k|        return 3_u8;
  121|  1.11k|    }
  122|       |
  123|   589k|    if ((character & 0xE0) == 0xC0)
  ------------------
  |  Branch (123:9): [True: 3.81k, False: 585k]
  ------------------
  124|  3.81k|    {
  125|  3.81k|        return 2_u8;
  126|  3.81k|    }
  127|       |
  128|   585k|    return 1_u8;
  129|   589k|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  183|  4.17k|    {
  184|  4.17k|        return m_DLXProgram;
  185|  4.17k|    }
_ZN6dlxemu8Emulator12ParseProgramEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  188|  4.17k|    {
  189|  4.17k|        m_DLXProgram = dlx::Parser::Parse(source);
  190|       |
  191|  4.17k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (191:13): [True: 213, False: 3.96k]
  ------------------
  192|    213|        {
  193|    213|            m_Processor.LoadProgram(m_DLXProgram);
  194|    213|        }
  195|  4.17k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  208|  4.17k|    {
  209|  4.17k|        return m_CodeEditor;
  210|  4.17k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   38|      1|    {
   39|      1|        Shutdown();
   40|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  108|      1|    {
  109|      1|        if (imgui_initialized)
  ------------------
  |  Branch (109:13): [True: 0, False: 1]
  ------------------
  110|      0|        {
  111|      0|            ShutdownImGui();
  112|      0|        }
  113|       |
  114|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (114:13): [True: 0, False: 1]
  ------------------
  115|      0|        {
  116|      0|            glfwDestroyWindow(m_Window);
  117|      0|        }
  118|       |
  119|      1|        if (glfw_initialized)
  ------------------
  |  Branch (119:13): [True: 0, False: 1]
  ------------------
  120|      0|        {
  121|      0|            glfwTerminate();
  122|      0|        }
  123|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  58.4k|        {
  173|  58.4k|            PHI_ASSERT(index < 3u);
  174|       |
  175|  58.4k|            switch (index.unsafe())
  176|  58.4k|            {
  177|  26.0k|                case 0:
  ------------------
  |  Branch (177:17): [True: 26.0k, False: 32.3k]
  ------------------
  178|  26.0k|                    return m_Arg1Type;
  179|       |
  180|  16.3k|                case 1:
  ------------------
  |  Branch (180:17): [True: 16.3k, False: 42.0k]
  ------------------
  181|  16.3k|                    return m_Arg2Type;
  182|       |
  183|  15.9k|                case 2:
  ------------------
  |  Branch (183:17): [True: 15.9k, False: 42.4k]
  ------------------
  184|  15.9k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 58.4k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  58.4k|#endif
  191|  58.4k|            }
  192|  58.4k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  15.7k|        {
  199|  15.7k|            phi::u8 number_of_argument_required = static_cast<phi::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  15.7k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 15.4k, False: 315]
  ------------------
  203|  15.4k|            {
  204|  15.4k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  205|  15.4k|            }
  206|  15.7k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 8.07k, False: 7.63k]
  ------------------
  207|  8.07k|            {
  208|  8.07k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  209|  8.07k|            }
  210|  15.7k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 4.10k, False: 11.6k]
  ------------------
  211|  4.10k|            {
  212|  4.10k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  213|  4.10k|            }
  214|       |
  215|  15.7k|            return number_of_argument_required;
  216|  15.7k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  15.7k|        {
  225|  15.7k|            return m_Executor;
  226|  15.7k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  8.54k|    {
   38|  8.54k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  8.54k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  8.54k|                                         static_cast<underlying_t>(rhs));
   42|  8.54k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  8.54k|    {
   55|  8.54k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  8.54k|        return static_cast<underlying_t>(type & test) != 0;
   58|  8.54k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  48.7k|    {
   31|  48.7k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 1.27k, False: 47.4k]
  ------------------
   32|  1.27k|        {
   33|  1.27k|            return true;
   34|  1.27k|        }
   35|       |
   36|  47.4k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 345, False: 47.1k]
  ------------------
   37|    345|        {
   38|    345|            return true;
   39|    345|        }
   40|       |
   41|  47.1k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 20.4k, False: 26.6k]
  ------------------
   42|  20.4k|        {
   43|  20.4k|            return true;
   44|  20.4k|        }
   45|       |
   46|  26.6k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 194, False: 26.5k]
  ------------------
   47|    194|        {
   48|    194|            return true;
   49|    194|        }
   50|       |
   51|  26.5k|        return false;
   52|  26.6k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  26.5k|    {
   56|  26.5k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 26.5k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  26.5k|        const char first_char = token.at(0u);
   62|       |
   63|  26.5k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 5.10k, False: 21.3k]
  ------------------
   64|  5.10k|        {
   65|  5.10k|            return phi::is_alpha(first_char);
   66|  5.10k|        }
   67|       |
   68|  21.3k|        phi::boolean just_under_scores = (first_char == '_');
   69|  21.3k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 2.13k, False: 19.2k]
  |  Branch (69:13): [True: 1.72k, False: 19.6k]
  |  Branch (69:43): [True: 1.72k, False: 415]
  ------------------
   70|  1.72k|        {
   71|  1.72k|            return false;
   72|  1.72k|        }
   73|       |
   74|  73.9k|        for (phi::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 60.5k, False: 13.3k]
  ------------------
   75|  60.5k|        {
   76|  60.5k|            const char c{token.at(index)};
   77|       |
   78|  60.5k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 53.4k, False: 7.04k]
  ------------------
   79|  53.4k|            {
   80|  53.4k|                just_under_scores = false;
   81|  53.4k|            }
   82|  7.04k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 760, False: 6.28k]
  ------------------
   83|    760|            {
   84|    760|                continue;
   85|    760|            }
   86|  6.28k|            else
   87|  6.28k|            {
   88|  6.28k|                return false;
   89|  6.28k|            }
   90|  60.5k|        }
   91|       |
   92|  13.3k|        return !just_under_scores;
   93|  19.6k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   98|   104k|    {
   99|   104k|        if (token.is_empty())
  ------------------
  |  Branch (99:13): [True: 0, False: 104k]
  ------------------
  100|      0|        {
  101|      0|            return {};
  102|      0|        }
  103|       |
  104|   104k|        if (token.length() == 1u)
  ------------------
  |  Branch (104:13): [True: 14.0k, False: 90.1k]
  ------------------
  105|  14.0k|        {
  106|  14.0k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (106:17): [True: 1.73k, False: 12.2k]
  ------------------
  107|  1.73k|            {
  108|  1.73k|                return static_cast<phi::int16_t>(token.at(0u) - '0');
  109|  1.73k|            }
  110|       |
  111|  12.2k|            return {};
  112|  14.0k|        }
  113|       |
  114|       |        // Disallow trailing separators
  115|  90.1k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (115:13): [True: 212, False: 89.9k]
  ------------------
  116|    212|        {
  117|    212|            return {};
  118|    212|        }
  119|       |
  120|  89.9k|        phi::int32_t number{0};
  121|  89.9k|        phi::boolean is_negative{false};
  122|  89.9k|        phi::boolean starts_with_zero{false};
  123|  89.9k|        phi::boolean parsing_binary{false};
  124|  89.9k|        phi::boolean parsing_octal{false};
  125|  89.9k|        phi::boolean parsing_hexadecimal{false};
  126|  89.9k|        phi::boolean parsed_something{false};
  127|  89.9k|        phi::boolean parsed_separator{false};
  128|       |
  129|       |        // TODO: Move x'th character checks out of the for loop
  130|       |
  131|   100k|        for (phi::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (131:37): [True: 99.1k, False: 1.32k]
  ------------------
  132|  99.1k|        {
  133|  99.1k|            const char c{token.at(index)};
  134|       |
  135|       |            // First character
  136|  99.1k|            if (index == 0u)
  ------------------
  |  Branch (136:17): [True: 89.9k, False: 9.22k]
  ------------------
  137|  89.9k|            {
  138|  89.9k|                if (c == '+')
  ------------------
  |  Branch (138:21): [True: 205, False: 89.7k]
  ------------------
  139|    205|                {
  140|    205|                    continue;
  141|    205|                }
  142|       |
  143|  89.7k|                if (c == '-')
  ------------------
  |  Branch (143:21): [True: 1.07k, False: 88.6k]
  ------------------
  144|  1.07k|                {
  145|  1.07k|                    is_negative = true;
  146|  1.07k|                    continue;
  147|  1.07k|                }
  148|       |
  149|  88.6k|                if (c == '0')
  ------------------
  |  Branch (149:21): [True: 1.65k, False: 86.9k]
  ------------------
  150|  1.65k|                {
  151|  1.65k|                    starts_with_zero = true;
  152|  1.65k|                    continue;
  153|  1.65k|                }
  154|       |
  155|  86.9k|                if (c == '\'')
  ------------------
  |  Branch (155:21): [True: 205, False: 86.7k]
  ------------------
  156|    205|                {
  157|    205|                    return {};
  158|    205|                }
  159|  86.9k|            }
  160|       |
  161|       |            // Second character
  162|  95.9k|            if (index == 1u)
  ------------------
  |  Branch (162:17): [True: 3.67k, False: 92.3k]
  ------------------
  163|  3.67k|            {
  164|  3.67k|                if (starts_with_zero)
  ------------------
  |  Branch (164:21): [True: 1.65k, False: 2.01k]
  ------------------
  165|  1.65k|                {
  166|       |                    // Binary
  167|  1.65k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (167:25): [True: 206, False: 1.45k]
  |  Branch (167:37): [True: 218, False: 1.23k]
  ------------------
  168|    424|                    {
  169|    424|                        parsing_binary = true;
  170|    424|                        continue;
  171|    424|                    }
  172|       |
  173|       |                    // Hexadecimal
  174|  1.23k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (174:25): [True: 385, False: 850]
  |  Branch (174:37): [True: 269, False: 581]
  ------------------
  175|    654|                    {
  176|    654|                        parsing_hexadecimal = true;
  177|    654|                        continue;
  178|    654|                    }
  179|       |
  180|       |                    // Octal
  181|    581|                    parsing_octal = true;
  182|    581|                }
  183|  3.67k|            }
  184|       |
  185|       |            // Handle separators
  186|  94.9k|            if (c == '\'')
  ------------------
  |  Branch (186:17): [True: 410, False: 94.5k]
  ------------------
  187|    410|            {
  188|    410|                if (parsed_separator)
  ------------------
  |  Branch (188:21): [True: 194, False: 216]
  ------------------
  189|    194|                {
  190|    194|                    return {};
  191|    194|                }
  192|       |
  193|    216|                parsed_separator = true;
  194|    216|                continue;
  195|    410|            }
  196|       |
  197|       |            // Check for over/underflow
  198|  94.5k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (198:17): [True: 2.77k, False: 91.7k]
  |  Branch (198:32): [True: 194, False: 2.57k]
  ------------------
  199|    194|            {
  200|       |                // Would underflow
  201|    194|                return {};
  202|    194|            }
  203|  94.3k|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (203:17): [True: 91.7k, False: 2.57k]
  |  Branch (203:17): [True: 237, False: 94.0k]
  |  Branch (203:33): [True: 237, False: 91.4k]
  ------------------
  204|    237|            {
  205|       |                // Would overflow
  206|    237|                return {};
  207|    237|            }
  208|       |
  209|  94.0k|            parsed_separator = false;
  210|  94.0k|            parsed_something = true;
  211|       |
  212|  94.0k|            if (parsing_binary)
  ------------------
  |  Branch (212:17): [True: 584, False: 93.4k]
  ------------------
  213|    584|            {
  214|    584|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (214:21): [True: 196, False: 388]
  ------------------
  215|    196|                {
  216|    196|                    return {};
  217|    196|                }
  218|       |
  219|    388|                number <<= 1;
  220|    388|                number |= (c - '0');
  221|    388|            }
  222|  93.4k|            else if (parsing_octal)
  ------------------
  |  Branch (222:22): [True: 767, False: 92.7k]
  ------------------
  223|    767|            {
  224|    767|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (224:21): [True: 395, False: 372]
  ------------------
  225|    395|                {
  226|    395|                    return {};
  227|    395|                }
  228|       |
  229|    372|                number <<= 3;
  230|    372|                number |= (c - '0');
  231|    372|            }
  232|  92.7k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (232:22): [True: 1.02k, False: 91.7k]
  ------------------
  233|  1.02k|            {
  234|  1.02k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (234:21): [True: 379, False: 647]
  ------------------
  235|    379|                {
  236|    379|                    return {};
  237|    379|                }
  238|       |
  239|    647|                number <<= 4;
  240|    647|                number |= phi::hex_digit_value(c).unsafe();
  241|    647|            }
  242|  91.7k|            else
  243|  91.7k|            {
  244|  91.7k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (244:21): [True: 86.5k, False: 5.10k]
  ------------------
  245|  86.5k|                {
  246|  86.5k|                    return {};
  247|  86.5k|                }
  248|       |
  249|       |                // Disallow leading zeros
  250|  5.10k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (250:21): [True: 1.55k, False: 3.55k]
  |  Branch (250:36): [True: 194, False: 1.36k]
  ------------------
  251|    194|                {
  252|    194|                    return {};
  253|    194|                }
  254|       |
  255|  4.91k|                number *= 10;
  256|  4.91k|                number += (c - '0');
  257|  4.91k|            }
  258|  94.0k|        }
  259|       |
  260|  1.32k|        if (parsed_something)
  ------------------
  |  Branch (260:13): [True: 974, False: 355]
  ------------------
  261|    974|        {
  262|       |            // Check for over/underflow
  263|    974|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (263:17): [True: 421, False: 553]
  |  Branch (263:32): [True: 203, False: 218]
  ------------------
  264|    203|            {
  265|       |                // Would underflow
  266|    203|                return {};
  267|    203|            }
  268|    771|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (268:17): [True: 553, False: 218]
  |  Branch (268:17): [True: 250, False: 521]
  |  Branch (268:33): [True: 250, False: 303]
  ------------------
  269|    250|            {
  270|       |                // Would overflow
  271|    250|                return {};
  272|    250|            }
  273|       |
  274|    521|            if (is_negative)
  ------------------
  |  Branch (274:17): [True: 218, False: 303]
  ------------------
  275|    218|            {
  276|    218|                return static_cast<phi::int16_t>(-number);
  277|    218|            }
  278|       |
  279|    303|            return static_cast<phi::int16_t>(number);
  280|    521|        }
  281|       |
  282|    355|        return {};
  283|  1.32k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  8.61k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finalized);
   61|       |#endif
   62|       |
   63|  8.61k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 33.6k, False: 0]
  ------------------
   64|  33.6k|            {
   65|  33.6k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 8.61k, False: 24.9k]
  ------------------
   66|  8.61k|                {
   67|  8.61k|                    return &token;
   68|  8.61k|                }
   69|  33.6k|            }
   70|       |
   71|      0|            return nullptr;
   72|  8.61k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  23.7k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  23.7k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  23.7k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   105k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|   105k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   105k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  29.5k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  29.5k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  29.5k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   16|  15.7k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   21|  3.29k|    {
   22|  3.29k|        PHI_ASSERT(argument_number < 3u);
   23|       |
   24|  3.29k|        switch (argument_number.unsafe())
   25|  3.29k|        {
   26|  2.76k|            case 0u:
  ------------------
  |  Branch (26:13): [True: 2.76k, False: 537]
  ------------------
   27|  2.76k|                m_Arg1 = argument;
   28|  2.76k|                break;
   29|    333|            case 1u:
  ------------------
  |  Branch (29:13): [True: 333, False: 2.96k]
  ------------------
   30|    333|                m_Arg2 = argument;
   31|    333|                break;
   32|    204|            case 2u:
  ------------------
  |  Branch (32:13): [True: 204, False: 3.09k]
  ------------------
   33|    204|                m_Arg3 = argument;
   34|    204|                break;
   35|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   36|      0|            default:
  ------------------
  |  Branch (36:13): [True: 0, False: 3.29k]
  ------------------
   37|      0|                PHI_ASSERT_NOT_REACHED();
   38|  3.29k|#endif
   39|  3.29k|        }
   40|  3.29k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   21|  50.4k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  166|    731|    {
  167|    731|        InstructionArgument arg;
  168|    731|        arg.m_Type                   = ArgumentType::IntRegister;
  169|    731|        arg.register_int.register_id = id;
  170|    731|        return arg;
  171|    731|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  174|    195|    {
  175|    195|        InstructionArgument arg;
  176|    195|        arg.m_Type                     = ArgumentType::FloatRegister;
  177|    195|        arg.register_float.register_id = id;
  178|    195|        return arg;
  179|    195|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  182|    196|    {
  183|    196|        InstructionArgument arg;
  184|    196|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  185|    196|        arg.immediate_value.signed_value = value;
  186|    196|        return arg;
  187|    196|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  191|    322|    {
  192|    322|        InstructionArgument arg;
  193|    322|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  194|    322|        arg.address_displacement.register_id  = id;
  195|    322|        arg.address_displacement.displacement = displacement;
  196|    322|        return arg;
  197|    322|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  200|  1.85k|    {
  201|  1.85k|        InstructionArgument arg;
  202|  1.85k|        arg.m_Type           = ArgumentType::Label;
  203|  1.85k|        arg.label.label_name = label_name;
  204|  1.85k|        return arg;
  205|  1.85k|    }

_ZN3dlx21LookUpInstructionInfoENS_6OpCodeE:
  449|  15.7k|    {
  450|  15.7k|        return instruction_table.at(static_cast<phi::size_t>(instruction));
  451|  15.7k|    }

_ZN3dlx11IntRegisterC2Ev:
   12|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   40|      1|    {
   41|      1|        m_IsReadOnly = read_only;
   42|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   12|      1|    {
   13|      1|        m_Values.resize(starting_size.unsafe());
   14|      1|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   21|   145k|    {
   22|   145k|        switch (token.length().unsafe())
   23|   145k|        {
   24|       |            // 1 character OpCodes
   25|  17.0k|            case 1: {
  ------------------
  |  Branch (25:13): [True: 17.0k, False: 128k]
  ------------------
   26|  17.0k|                const char c1 = token[0u];
   27|       |
   28|  17.0k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (28:21): [True: 8.10k, False: 8.92k]
  ------------------
   29|  8.10k|                {
   30|  8.10k|                    return OpCode::J;
   31|  8.10k|                }
   32|  8.92k|                break;
   33|  17.0k|            }
   34|       |
   35|       |            // 2 character OpCodes
   36|  20.0k|            case 2: {
  ------------------
  |  Branch (36:13): [True: 20.0k, False: 125k]
  ------------------
   37|  20.0k|                const char c1 = token[0u];
   38|  20.0k|                const char c2 = token[1u];
   39|       |
   40|  20.0k|                switch (c1)
  ------------------
  |  Branch (40:25): [True: 10.6k, False: 9.39k]
  ------------------
   41|  20.0k|                {
   42|    625|                    case 'J':
  ------------------
  |  Branch (42:21): [True: 625, False: 19.4k]
  ------------------
   43|    945|                    case 'j':
  ------------------
  |  Branch (43:21): [True: 320, False: 19.7k]
  ------------------
   44|    945|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (44:29): [True: 425, False: 520]
  ------------------
   45|    425|                        {
   46|    425|                            return OpCode::JR;
   47|    425|                        }
   48|    520|                        break;
   49|       |
   50|  1.66k|                    case 'L':
  ------------------
  |  Branch (50:21): [True: 1.66k, False: 18.4k]
  ------------------
   51|  3.04k|                    case 'l':
  ------------------
  |  Branch (51:21): [True: 1.38k, False: 18.6k]
  ------------------
   52|  3.04k|                        switch (c2)
  ------------------
  |  Branch (52:33): [True: 849, False: 2.19k]
  ------------------
   53|  3.04k|                        {
   54|    196|                            case 'B':
  ------------------
  |  Branch (54:29): [True: 196, False: 2.84k]
  ------------------
   55|    391|                            case 'b':
  ------------------
  |  Branch (55:29): [True: 195, False: 2.85k]
  ------------------
   56|    391|                                return OpCode::LB;
   57|    199|                            case 'D':
  ------------------
  |  Branch (57:29): [True: 199, False: 2.84k]
  ------------------
   58|    402|                            case 'd':
  ------------------
  |  Branch (58:29): [True: 203, False: 2.84k]
  ------------------
   59|    402|                                return OpCode::LD;
   60|    283|                            case 'F':
  ------------------
  |  Branch (60:29): [True: 283, False: 2.76k]
  ------------------
   61|    528|                            case 'f':
  ------------------
  |  Branch (61:29): [True: 245, False: 2.80k]
  ------------------
   62|    528|                                return OpCode::LF;
   63|    288|                            case 'H':
  ------------------
  |  Branch (63:29): [True: 288, False: 2.75k]
  ------------------
   64|    486|                            case 'h':
  ------------------
  |  Branch (64:29): [True: 198, False: 2.84k]
  ------------------
   65|    486|                                return OpCode::LH;
   66|    195|                            case 'W':
  ------------------
  |  Branch (66:29): [True: 195, False: 2.85k]
  ------------------
   67|    389|                            case 'w':
  ------------------
  |  Branch (67:29): [True: 194, False: 2.85k]
  ------------------
   68|    389|                                return OpCode::LW;
   69|  3.04k|                        }
   70|    849|                        break;
   71|    849|                    case 'O':
  ------------------
  |  Branch (71:21): [True: 347, False: 19.7k]
  ------------------
   72|  1.16k|                    case 'o':
  ------------------
  |  Branch (72:21): [True: 815, False: 19.2k]
  ------------------
   73|  1.16k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (73:29): [True: 392, False: 770]
  ------------------
   74|    392|                        {
   75|    392|                            return OpCode::OR;
   76|    392|                        }
   77|    770|                        break;
   78|  1.81k|                    case 'S':
  ------------------
  |  Branch (78:21): [True: 1.81k, False: 18.2k]
  ------------------
   79|  4.24k|                    case 's':
  ------------------
  |  Branch (79:21): [True: 2.43k, False: 17.6k]
  ------------------
   80|  4.24k|                        switch (c2)
  ------------------
  |  Branch (80:33): [True: 962, False: 3.28k]
  ------------------
   81|  4.24k|                        {
   82|    201|                            case 'B':
  ------------------
  |  Branch (82:29): [True: 201, False: 4.04k]
  ------------------
   83|    397|                            case 'b':
  ------------------
  |  Branch (83:29): [True: 196, False: 4.05k]
  ------------------
   84|    397|                                return OpCode::SB;
   85|  1.07k|                            case 'D':
  ------------------
  |  Branch (85:29): [True: 1.07k, False: 3.17k]
  ------------------
   86|  1.26k|                            case 'd':
  ------------------
  |  Branch (86:29): [True: 194, False: 4.05k]
  ------------------
   87|  1.26k|                                return OpCode::SD;
   88|    323|                            case 'F':
  ------------------
  |  Branch (88:29): [True: 323, False: 3.92k]
  ------------------
   89|    517|                            case 'f':
  ------------------
  |  Branch (89:29): [True: 194, False: 4.05k]
  ------------------
   90|    517|                                return OpCode::SF;
   91|    263|                            case 'H':
  ------------------
  |  Branch (91:29): [True: 263, False: 3.98k]
  ------------------
   92|    660|                            case 'h':
  ------------------
  |  Branch (92:29): [True: 397, False: 3.85k]
  ------------------
   93|    660|                                return OpCode::SH;
   94|    203|                            case 'w':
  ------------------
  |  Branch (94:29): [True: 203, False: 4.04k]
  ------------------
   95|    447|                            case 'W':
  ------------------
  |  Branch (95:29): [True: 244, False: 4.00k]
  ------------------
   96|    447|                                return OpCode::SW;
   97|  4.24k|                        }
   98|    962|                        break;
   99|  20.0k|                }
  100|  13.7k|                break;
  101|  20.0k|            }
  102|       |
  103|       |            // 3 character OpCodes
  104|  33.8k|            case 3: {
  ------------------
  |  Branch (104:13): [True: 33.8k, False: 111k]
  ------------------
  105|  33.8k|                const char c1 = token[0u];
  106|  33.8k|                const char c2 = token[1u];
  107|  33.8k|                const char c3 = token[2u];
  108|       |
  109|  33.8k|                switch (c1)
  ------------------
  |  Branch (109:25): [True: 7.50k, False: 26.3k]
  ------------------
  110|  33.8k|                {
  111|  1.37k|                    case 'A':
  ------------------
  |  Branch (111:21): [True: 1.37k, False: 32.4k]
  ------------------
  112|  1.62k|                    case 'a':
  ------------------
  |  Branch (112:21): [True: 243, False: 33.6k]
  ------------------
  113|  1.62k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (113:29): [True: 695, False: 926]
  |  Branch (113:29): [True: 420, False: 1.20k]
  |  Branch (113:45): [True: 420, False: 275]
  ------------------
  114|    420|                        {
  115|    420|                            return OpCode::ADD;
  116|    420|                        }
  117|  1.20k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (117:34): [True: 693, False: 508]
  |  Branch (117:34): [True: 485, False: 716]
  |  Branch (117:50): [True: 485, False: 208]
  ------------------
  118|    485|                        {
  119|    485|                            return OpCode::AND;
  120|    485|                        }
  121|    716|                        break;
  122|       |
  123|    716|                    case 'D':
  ------------------
  |  Branch (123:21): [True: 455, False: 33.3k]
  ------------------
  124|  1.56k|                    case 'd':
  ------------------
  |  Branch (124:21): [True: 1.10k, False: 32.7k]
  ------------------
  125|  1.56k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (125:29): [True: 1.29k, False: 264]
  |  Branch (125:29): [True: 901, False: 661]
  |  Branch (125:45): [True: 901, False: 397]
  ------------------
  126|    901|                        {
  127|    901|                            return OpCode::DIV;
  128|    901|                        }
  129|    661|                        break;
  130|       |
  131|    661|                    case 'E':
  ------------------
  |  Branch (131:21): [True: 592, False: 33.2k]
  ------------------
  132|  1.50k|                    case 'e':
  ------------------
  |  Branch (132:21): [True: 908, False: 32.9k]
  ------------------
  133|  1.50k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (133:29): [True: 1.11k, False: 383]
  ------------------
  134|  1.11k|                        {
  135|  1.11k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (135:33): [True: 389, False: 728]
  ------------------
  136|    389|                            {
  137|    389|                                return OpCode::EQD;
  138|    389|                            }
  139|    728|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (139:38): [True: 457, False: 271]
  ------------------
  140|    457|                            {
  141|    457|                                return OpCode::EQF;
  142|    457|                            }
  143|  1.11k|                        }
  144|    654|                        break;
  145|       |
  146|  1.02k|                    case 'G':
  ------------------
  |  Branch (146:21): [True: 1.02k, False: 32.8k]
  ------------------
  147|  2.20k|                    case 'g':
  ------------------
  |  Branch (147:21): [True: 1.18k, False: 32.6k]
  ------------------
  148|  2.20k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (148:29): [True: 1.00k, False: 1.19k]
  ------------------
  149|  1.00k|                        {
  150|  1.00k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (150:33): [True: 389, False: 617]
  ------------------
  151|    389|                            {
  152|    389|                                return OpCode::GED;
  153|    389|                            }
  154|    617|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (154:38): [True: 388, False: 229]
  ------------------
  155|    388|                            {
  156|    388|                                return OpCode::GEF;
  157|    388|                            }
  158|  1.00k|                        }
  159|  1.19k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (159:34): [True: 980, False: 218]
  ------------------
  160|    980|                        {
  161|    980|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (161:33): [True: 388, False: 592]
  ------------------
  162|    388|                            {
  163|    388|                                return OpCode::GTD;
  164|    388|                            }
  165|    592|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (165:33): [True: 388, False: 204]
  ------------------
  166|    388|                            {
  167|    388|                                return OpCode::GTF;
  168|    388|                            }
  169|    592|                        }
  170|    651|                        break;
  171|       |
  172|    705|                    case 'J':
  ------------------
  |  Branch (172:21): [True: 705, False: 33.1k]
  ------------------
  173|    953|                    case 'j':
  ------------------
  |  Branch (173:21): [True: 248, False: 33.6k]
  ------------------
  174|    953|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (174:29): [True: 608, False: 345]
  |  Branch (174:29): [True: 395, False: 558]
  |  Branch (174:45): [True: 395, False: 213]
  ------------------
  175|    395|                        {
  176|    395|                            return OpCode::JAL;
  177|    395|                        }
  178|    558|                        break;
  179|       |
  180|  3.43k|                    case 'L':
  ------------------
  |  Branch (180:21): [True: 3.43k, False: 30.4k]
  ------------------
  181|  4.81k|                    case 'l':
  ------------------
  |  Branch (181:21): [True: 1.38k, False: 32.4k]
  ------------------
  182|  4.81k|                        switch (c2)
  ------------------
  |  Branch (182:33): [True: 496, False: 4.31k]
  ------------------
  183|  4.81k|                        {
  184|    200|                            case 'B':
  ------------------
  |  Branch (184:29): [True: 200, False: 4.61k]
  ------------------
  185|    623|                            case 'b':
  ------------------
  |  Branch (185:29): [True: 423, False: 4.39k]
  ------------------
  186|    623|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (186:37): [True: 388, False: 235]
  ------------------
  187|    388|                                {
  188|    388|                                    return OpCode::LBU;
  189|    388|                                }
  190|    235|                                break;
  191|       |
  192|    599|                            case 'E':
  ------------------
  |  Branch (192:29): [True: 599, False: 4.21k]
  ------------------
  193|  1.00k|                            case 'e':
  ------------------
  |  Branch (193:29): [True: 403, False: 4.41k]
  ------------------
  194|  1.00k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (194:37): [True: 388, False: 614]
  ------------------
  195|    388|                                {
  196|    388|                                    return OpCode::LED;
  197|    388|                                }
  198|    614|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (198:42): [True: 388, False: 226]
  ------------------
  199|    388|                                {
  200|    388|                                    return OpCode::LEF;
  201|    388|                                }
  202|    226|                                break;
  203|       |
  204|    585|                            case 'H':
  ------------------
  |  Branch (204:29): [True: 585, False: 4.23k]
  ------------------
  205|    995|                            case 'h':
  ------------------
  |  Branch (205:29): [True: 410, False: 4.40k]
  ------------------
  206|    995|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (206:37): [True: 388, False: 607]
  ------------------
  207|    388|                                {
  208|    388|                                    return OpCode::LHI;
  209|    388|                                }
  210|    607|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (210:42): [True: 388, False: 219]
  ------------------
  211|    388|                                {
  212|    388|                                    return OpCode::LHU;
  213|    388|                                }
  214|    219|                                break;
  215|       |
  216|    219|                            case 'T':
  ------------------
  |  Branch (216:29): [True: 218, False: 4.59k]
  ------------------
  217|  1.10k|                            case 't':
  ------------------
  |  Branch (217:29): [True: 887, False: 3.92k]
  ------------------
  218|  1.10k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (218:37): [True: 516, False: 589]
  ------------------
  219|    516|                                {
  220|    516|                                    return OpCode::LTD;
  221|    516|                                }
  222|    589|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (222:42): [True: 388, False: 201]
  ------------------
  223|    388|                                {
  224|    388|                                    return OpCode::LTF;
  225|    388|                                }
  226|    201|                                break;
  227|       |
  228|    201|                            case 'W':
  ------------------
  |  Branch (228:29): [True: 197, False: 4.61k]
  ------------------
  229|    594|                            case 'w':
  ------------------
  |  Branch (229:29): [True: 397, False: 4.41k]
  ------------------
  230|    594|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (230:37): [True: 388, False: 206]
  ------------------
  231|    388|                                {
  232|    388|                                    return OpCode::LWU;
  233|    388|                                }
  234|    206|                                break;
  235|  4.81k|                        }
  236|  1.58k|                        break;
  237|       |
  238|  1.58k|                    case 'N':
  ------------------
  |  Branch (238:21): [True: 1.23k, False: 32.6k]
  ------------------
  239|  1.96k|                    case 'n':
  ------------------
  |  Branch (239:21): [True: 736, False: 33.1k]
  ------------------
  240|  1.96k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (240:29): [True: 1.11k, False: 849]
  ------------------
  241|  1.11k|                        {
  242|  1.11k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (242:33): [True: 388, False: 730]
  ------------------
  243|    388|                            {
  244|    388|                                return OpCode::NED;
  245|    388|                            }
  246|    730|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (246:38): [True: 389, False: 341]
  ------------------
  247|    389|                            {
  248|    389|                                return OpCode::NEF;
  249|    389|                            }
  250|  1.11k|                        }
  251|    849|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (251:34): [True: 587, False: 262]
  |  Branch (251:34): [True: 388, False: 461]
  |  Branch (251:50): [True: 388, False: 199]
  ------------------
  252|    388|                        {
  253|    388|                            return OpCode::NOP;
  254|    388|                        }
  255|       |
  256|    802|                        break;
  257|       |
  258|    802|                    case 'O':
  ------------------
  |  Branch (258:21): [True: 445, False: 33.4k]
  ------------------
  259|    899|                    case 'o':
  ------------------
  |  Branch (259:21): [True: 454, False: 33.3k]
  ------------------
  260|    899|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (260:29): [True: 594, False: 305]
  |  Branch (260:29): [True: 388, False: 511]
  |  Branch (260:45): [True: 388, False: 206]
  ------------------
  261|    388|                        {
  262|    388|                            return OpCode::ORI;
  263|    388|                        }
  264|    511|                        break;
  265|       |
  266|  6.73k|                    case 'S':
  ------------------
  |  Branch (266:21): [True: 6.73k, False: 27.1k]
  ------------------
  267|  10.0k|                    case 's':
  ------------------
  |  Branch (267:21): [True: 3.28k, False: 30.5k]
  ------------------
  268|  10.0k|                        switch (c2)
  ------------------
  |  Branch (268:33): [True: 591, False: 9.43k]
  ------------------
  269|  10.0k|                        {
  270|    397|                            case 'B':
  ------------------
  |  Branch (270:29): [True: 397, False: 9.62k]
  ------------------
  271|    812|                            case 'b':
  ------------------
  |  Branch (271:29): [True: 415, False: 9.60k]
  ------------------
  272|    812|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (272:37): [True: 388, False: 424]
  ------------------
  273|    388|                                {
  274|    388|                                    return OpCode::SBU;
  275|    388|                                }
  276|    424|                                break;
  277|       |
  278|    424|                            case 'E':
  ------------------
  |  Branch (278:29): [True: 401, False: 9.62k]
  ------------------
  279|    792|                            case 'e':
  ------------------
  |  Branch (279:29): [True: 391, False: 9.63k]
  ------------------
  280|    792|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (280:37): [True: 407, False: 385]
  ------------------
  281|    407|                                {
  282|    407|                                    return OpCode::SEQ;
  283|    407|                                }
  284|    385|                                break;
  285|       |
  286|  1.08k|                            case 'G':
  ------------------
  |  Branch (286:29): [True: 1.08k, False: 8.94k]
  ------------------
  287|  1.33k|                            case 'g':
  ------------------
  |  Branch (287:29): [True: 250, False: 9.77k]
  ------------------
  288|  1.33k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (288:37): [True: 394, False: 936]
  ------------------
  289|    394|                                {
  290|    394|                                    return OpCode::SGE;
  291|    394|                                }
  292|    936|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (292:42): [True: 564, False: 372]
  ------------------
  293|    564|                                {
  294|    564|                                    return OpCode::SGT;
  295|    564|                                }
  296|    372|                                break;
  297|       |
  298|    372|                            case 'H':
  ------------------
  |  Branch (298:29): [True: 228, False: 9.79k]
  ------------------
  299|    616|                            case 'h':
  ------------------
  |  Branch (299:29): [True: 388, False: 9.63k]
  ------------------
  300|    616|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (300:37): [True: 388, False: 228]
  ------------------
  301|    388|                                {
  302|    388|                                    return OpCode::SHU;
  303|    388|                                }
  304|    228|                                break;
  305|       |
  306|  1.45k|                            case 'L':
  ------------------
  |  Branch (306:29): [True: 1.45k, False: 8.57k]
  ------------------
  307|  2.36k|                            case 'l':
  ------------------
  |  Branch (307:29): [True: 911, False: 9.11k]
  ------------------
  308|  2.36k|                                switch (c3)
  ------------------
  |  Branch (308:41): [True: 370, False: 1.99k]
  ------------------
  309|  2.36k|                                {
  310|    323|                                    case 'A':
  ------------------
  |  Branch (310:37): [True: 323, False: 2.04k]
  ------------------
  311|    521|                                    case 'a':
  ------------------
  |  Branch (311:37): [True: 198, False: 2.16k]
  ------------------
  312|    521|                                        return OpCode::SLA;
  313|       |
  314|    195|                                    case 'E':
  ------------------
  |  Branch (314:37): [True: 195, False: 2.16k]
  ------------------
  315|    390|                                    case 'e':
  ------------------
  |  Branch (315:37): [True: 195, False: 2.16k]
  ------------------
  316|    390|                                        return OpCode::SLE;
  317|       |
  318|    323|                                    case 'L':
  ------------------
  |  Branch (318:37): [True: 323, False: 2.04k]
  ------------------
  319|    644|                                    case 'l':
  ------------------
  |  Branch (319:37): [True: 321, False: 2.04k]
  ------------------
  320|    644|                                        return OpCode::SLL;
  321|       |
  322|    194|                                    case 'T':
  ------------------
  |  Branch (322:37): [True: 194, False: 2.16k]
  ------------------
  323|    438|                                    case 't':
  ------------------
  |  Branch (323:37): [True: 244, False: 2.11k]
  ------------------
  324|    438|                                        return OpCode::SLT;
  325|  2.36k|                                }
  326|    370|                                break;
  327|       |
  328|    545|                            case 'N':
  ------------------
  |  Branch (328:29): [True: 545, False: 9.47k]
  ------------------
  329|    750|                            case 'n':
  ------------------
  |  Branch (329:29): [True: 205, False: 9.81k]
  ------------------
  330|    750|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (330:37): [True: 519, False: 231]
  ------------------
  331|    519|                                {
  332|    519|                                    return OpCode::SNE;
  333|    519|                                }
  334|    231|                                break;
  335|       |
  336|    360|                            case 'R':
  ------------------
  |  Branch (336:29): [True: 360, False: 9.66k]
  ------------------
  337|  1.46k|                            case 'r':
  ------------------
  |  Branch (337:29): [True: 1.10k, False: 8.92k]
  ------------------
  338|  1.46k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (338:37): [True: 534, False: 928]
  ------------------
  339|    534|                                {
  340|    534|                                    return OpCode::SRA;
  341|    534|                                }
  342|    928|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (342:42): [True: 730, False: 198]
  ------------------
  343|    730|                                {
  344|    730|                                    return OpCode::SRL;
  345|    730|                                }
  346|    198|                                break;
  347|       |
  348|    422|                            case 'U':
  ------------------
  |  Branch (348:29): [True: 422, False: 9.60k]
  ------------------
  349|    678|                            case 'u':
  ------------------
  |  Branch (349:29): [True: 256, False: 9.76k]
  ------------------
  350|    678|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (350:37): [True: 461, False: 217]
  ------------------
  351|    461|                                {
  352|    461|                                    return OpCode::SUB;
  353|    461|                                }
  354|    217|                                break;
  355|       |
  356|    410|                            case 'W':
  ------------------
  |  Branch (356:29): [True: 410, False: 9.61k]
  ------------------
  357|    628|                            case 'w':
  ------------------
  |  Branch (357:29): [True: 218, False: 9.80k]
  ------------------
  358|    628|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (358:37): [True: 388, False: 240]
  ------------------
  359|    388|                                {
  360|    388|                                    return OpCode::SWU;
  361|    388|                                }
  362|    240|                                break;
  363|  10.0k|                        }
  364|       |
  365|  3.65k|                    case 'X':
  ------------------
  |  Branch (365:21): [True: 402, False: 33.4k]
  ------------------
  366|  4.05k|                    case 'x':
  ------------------
  |  Branch (366:21): [True: 395, False: 33.4k]
  ------------------
  367|  4.05k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (367:29): [True: 762, False: 3.29k]
  |  Branch (367:29): [True: 496, False: 3.55k]
  |  Branch (367:45): [True: 496, False: 266]
  ------------------
  368|    496|                        {
  369|    496|                            return OpCode::XOR;
  370|    496|                        }
  371|  3.55k|                        break;
  372|  33.8k|                }
  373|  17.2k|                break;
  374|  33.8k|            }
  375|       |
  376|       |            // 4 character OpCodes
  377|  36.5k|            case 4: {
  ------------------
  |  Branch (377:13): [True: 36.5k, False: 108k]
  ------------------
  378|  36.5k|                const char c1 = token[0u];
  379|  36.5k|                const char c2 = token[1u];
  380|  36.5k|                const char c3 = token[2u];
  381|  36.5k|                const char c4 = token[3u];
  382|       |
  383|  36.5k|                switch (c1)
  ------------------
  |  Branch (383:25): [True: 5.25k, False: 31.3k]
  ------------------
  384|  36.5k|                {
  385|  2.70k|                    case 'A':
  ------------------
  |  Branch (385:21): [True: 2.70k, False: 33.8k]
  ------------------
  386|  3.12k|                    case 'a':
  ------------------
  |  Branch (386:21): [True: 418, False: 36.1k]
  ------------------
  387|  3.12k|                        switch (c2)
  ------------------
  |  Branch (387:33): [True: 203, False: 2.91k]
  ------------------
  388|  3.12k|                        {
  389|  1.30k|                            case 'D':
  ------------------
  |  Branch (389:29): [True: 1.30k, False: 1.81k]
  ------------------
  390|  2.05k|                            case 'd':
  ------------------
  |  Branch (390:29): [True: 752, False: 2.37k]
  ------------------
  391|  2.05k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (391:37): [True: 1.86k, False: 197]
  ------------------
  392|  1.86k|                                {
  393|  1.86k|                                    switch (c4)
  ------------------
  |  Branch (393:45): [True: 281, False: 1.57k]
  ------------------
  394|  1.86k|                                    {
  395|    194|                                        case 'D':
  ------------------
  |  Branch (395:41): [True: 194, False: 1.66k]
  ------------------
  396|    388|                                        case 'd':
  ------------------
  |  Branch (396:41): [True: 194, False: 1.66k]
  ------------------
  397|    388|                                            return OpCode::ADDD;
  398|       |
  399|    195|                                        case 'F':
  ------------------
  |  Branch (399:41): [True: 195, False: 1.66k]
  ------------------
  400|    389|                                        case 'f':
  ------------------
  |  Branch (400:41): [True: 194, False: 1.66k]
  ------------------
  401|    389|                                            return OpCode::ADDF;
  402|       |
  403|    194|                                        case 'I':
  ------------------
  |  Branch (403:41): [True: 194, False: 1.66k]
  ------------------
  404|    388|                                        case 'i':
  ------------------
  |  Branch (404:41): [True: 194, False: 1.66k]
  ------------------
  405|    388|                                            return OpCode::ADDI;
  406|       |
  407|    205|                                        case 'U':
  ------------------
  |  Branch (407:41): [True: 205, False: 1.65k]
  ------------------
  408|    414|                                        case 'u':
  ------------------
  |  Branch (408:41): [True: 209, False: 1.65k]
  ------------------
  409|    414|                                            return OpCode::ADDU;
  410|  1.86k|                                    }
  411|  1.86k|                                }
  412|    478|                                break;
  413|       |
  414|    635|                            case 'N':
  ------------------
  |  Branch (414:29): [True: 635, False: 2.48k]
  ------------------
  415|    862|                            case 'n':
  ------------------
  |  Branch (415:29): [True: 227, False: 2.89k]
  ------------------
  416|    862|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (416:37): [True: 634, False: 228]
  |  Branch (416:37): [True: 388, False: 474]
  |  Branch (416:53): [True: 388, False: 246]
  ------------------
  417|    388|                                {
  418|    388|                                    return OpCode::ANDI;
  419|    388|                                }
  420|       |
  421|    474|                                break;
  422|  3.12k|                        }
  423|  1.15k|                        break;
  424|       |
  425|  2.94k|                    case 'B':
  ------------------
  |  Branch (425:21): [True: 2.94k, False: 33.6k]
  ------------------
  426|  3.24k|                    case 'b':
  ------------------
  |  Branch (426:21): [True: 295, False: 36.2k]
  ------------------
  427|  3.24k|                        switch (c2)
  ------------------
  |  Branch (427:33): [True: 211, False: 3.03k]
  ------------------
  428|  3.24k|                        {
  429|    550|                            case 'E':
  ------------------
  |  Branch (429:29): [True: 550, False: 2.69k]
  ------------------
  430|    954|                            case 'e':
  ------------------
  |  Branch (430:29): [True: 404, False: 2.83k]
  ------------------
  431|    954|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (431:37): [True: 604, False: 350]
  |  Branch (431:37): [True: 388, False: 566]
  |  Branch (431:53): [True: 388, False: 216]
  ------------------
  432|    388|                                {
  433|    388|                                    return OpCode::BEQZ;
  434|    388|                                }
  435|    566|                                break;
  436|       |
  437|    969|                            case 'F':
  ------------------
  |  Branch (437:29): [True: 969, False: 2.27k]
  ------------------
  438|  1.17k|                            case 'f':
  ------------------
  |  Branch (438:29): [True: 203, False: 3.04k]
  ------------------
  439|  1.17k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (439:37): [True: 973, False: 199]
  ------------------
  440|    973|                                {
  441|    973|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (441:41): [True: 388, False: 585]
  ------------------
  442|    388|                                    {
  443|    388|                                        return OpCode::BFPF;
  444|    388|                                    }
  445|    585|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (445:46): [True: 388, False: 197]
  ------------------
  446|    388|                                    {
  447|    388|                                        return OpCode::BFPT;
  448|    388|                                    }
  449|    973|                                }
  450|    396|                                break;
  451|       |
  452|    396|                            case 'N':
  ------------------
  |  Branch (452:29): [True: 385, False: 2.85k]
  ------------------
  453|    906|                            case 'n':
  ------------------
  |  Branch (453:29): [True: 521, False: 2.72k]
  ------------------
  454|    906|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (454:37): [True: 710, False: 196]
  |  Branch (454:37): [True: 516, False: 390]
  |  Branch (454:53): [True: 516, False: 194]
  ------------------
  455|    516|                                {
  456|    516|                                    return OpCode::BNEZ;
  457|    516|                                }
  458|  3.24k|                        }
  459|  1.56k|                        break;
  460|       |
  461|  1.56k|                    case 'D':
  ------------------
  |  Branch (461:21): [True: 897, False: 35.6k]
  ------------------
  462|  3.39k|                    case 'd':
  ------------------
  |  Branch (462:21): [True: 2.50k, False: 34.0k]
  ------------------
  463|  3.39k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (463:29): [True: 3.19k, False: 204]
  |  Branch (463:29): [True: 2.68k, False: 714]
  |  Branch (463:45): [True: 2.68k, False: 510]
  ------------------
  464|  2.68k|                        {
  465|  2.68k|                            switch (c4)
  ------------------
  |  Branch (465:37): [True: 1.00k, False: 1.68k]
  ------------------
  466|  2.68k|                            {
  467|    194|                                case 'D':
  ------------------
  |  Branch (467:33): [True: 194, False: 2.49k]
  ------------------
  468|    390|                                case 'd':
  ------------------
  |  Branch (468:33): [True: 196, False: 2.48k]
  ------------------
  469|    390|                                    return OpCode::DIVD;
  470|       |
  471|    194|                                case 'F':
  ------------------
  |  Branch (471:33): [True: 194, False: 2.49k]
  ------------------
  472|    389|                                case 'f':
  ------------------
  |  Branch (472:33): [True: 195, False: 2.49k]
  ------------------
  473|    389|                                    return OpCode::DIVF;
  474|       |
  475|    322|                                case 'I':
  ------------------
  |  Branch (475:33): [True: 322, False: 2.36k]
  ------------------
  476|    517|                                case 'i':
  ------------------
  |  Branch (476:33): [True: 195, False: 2.49k]
  ------------------
  477|    517|                                    return OpCode::DIVI;
  478|       |
  479|    194|                                case 'U':
  ------------------
  |  Branch (479:33): [True: 194, False: 2.49k]
  ------------------
  480|    388|                                case 'u':
  ------------------
  |  Branch (480:33): [True: 194, False: 2.49k]
  ------------------
  481|    388|                                    return OpCode::DIVU;
  482|  2.68k|                            }
  483|  2.68k|                        }
  484|  1.71k|                        break;
  485|       |
  486|  1.71k|                    case 'H':
  ------------------
  |  Branch (486:21): [True: 580, False: 35.9k]
  ------------------
  487|  1.17k|                    case 'h':
  ------------------
  |  Branch (487:21): [True: 591, False: 35.9k]
  ------------------
  488|  1.17k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (488:29): [True: 963, False: 208]
  |  Branch (488:29): [True: 388, False: 783]
  |  Branch (488:45): [True: 615, False: 348]
  |  Branch (488:61): [True: 388, False: 227]
  ------------------
  489|    388|                        {
  490|    388|                            return OpCode::HALT;
  491|    388|                        }
  492|    783|                        break;
  493|       |
  494|    833|                    case 'J':
  ------------------
  |  Branch (494:21): [True: 833, False: 35.7k]
  ------------------
  495|  1.22k|                    case 'j':
  ------------------
  |  Branch (495:21): [True: 390, False: 36.1k]
  ------------------
  496|  1.22k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (496:29): [True: 1.01k, False: 210]
  |  Branch (496:29): [True: 388, False: 835]
  |  Branch (496:45): [True: 819, False: 194]
  |  Branch (496:61): [True: 388, False: 431]
  ------------------
  497|    388|                        {
  498|    388|                            return OpCode::JALR;
  499|    388|                        }
  500|    835|                        break;
  501|       |
  502|    835|                    case 'M':
  ------------------
  |  Branch (502:21): [True: 763, False: 35.8k]
  ------------------
  503|  2.61k|                    case 'm':
  ------------------
  |  Branch (503:21): [True: 1.84k, False: 34.7k]
  ------------------
  504|  2.61k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (504:29): [True: 1.32k, False: 1.28k]
  |  Branch (504:29): [True: 1.12k, False: 1.48k]
  |  Branch (504:45): [True: 1.12k, False: 204]
  ------------------
  505|  1.12k|                        {
  506|  1.12k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (506:33): [True: 516, False: 608]
  ------------------
  507|    516|                            {
  508|    516|                                return OpCode::MOVD;
  509|    516|                            }
  510|    608|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (510:38): [True: 388, False: 220]
  ------------------
  511|    388|                            {
  512|    388|                                return OpCode::MOVF;
  513|    388|                            }
  514|  1.12k|                        }
  515|  1.48k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (515:34): [True: 1.25k, False: 233]
  |  Branch (515:34): [True: 549, False: 938]
  |  Branch (515:50): [True: 775, False: 479]
  |  Branch (515:66): [True: 549, False: 226]
  ------------------
  516|    549|                        {
  517|    549|                            return OpCode::MULT;
  518|    549|                        }
  519|  1.15k|                        break;
  520|       |
  521|  10.8k|                    case 'S':
  ------------------
  |  Branch (521:21): [True: 10.8k, False: 25.7k]
  ------------------
  522|  14.2k|                    case 's':
  ------------------
  |  Branch (522:21): [True: 3.41k, False: 33.1k]
  ------------------
  523|  14.2k|                        switch (c2)
  ------------------
  |  Branch (523:33): [True: 670, False: 13.5k]
  ------------------
  524|  14.2k|                        {
  525|    722|                            case 'E':
  ------------------
  |  Branch (525:29): [True: 722, False: 13.5k]
  ------------------
  526|  1.67k|                            case 'e':
  ------------------
  |  Branch (526:29): [True: 956, False: 13.2k]
  ------------------
  527|  1.67k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (527:37): [True: 1.29k, False: 385]
  ------------------
  528|  1.29k|                                {
  529|  1.29k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (529:41): [True: 388, False: 905]
  ------------------
  530|    388|                                    {
  531|    388|                                        return OpCode::SEQI;
  532|    388|                                    }
  533|    905|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (533:46): [True: 646, False: 259]
  ------------------
  534|    646|                                    {
  535|    646|                                        return OpCode::SEQU;
  536|    646|                                    }
  537|  1.29k|                                }
  538|    644|                                break;
  539|       |
  540|  2.64k|                            case 'G':
  ------------------
  |  Branch (540:29): [True: 2.64k, False: 11.6k]
  ------------------
  541|  2.89k|                            case 'g':
  ------------------
  |  Branch (541:29): [True: 250, False: 14.0k]
  ------------------
  542|  2.89k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (542:37): [True: 1.64k, False: 1.25k]
  ------------------
  543|  1.64k|                                {
  544|  1.64k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (544:41): [True: 644, False: 996]
  ------------------
  545|    644|                                    {
  546|    644|                                        return OpCode::SGEI;
  547|    644|                                    }
  548|    996|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (548:46): [True: 470, False: 526]
  ------------------
  549|    470|                                    {
  550|    470|                                        return OpCode::SGEU;
  551|    470|                                    }
  552|  1.64k|                                }
  553|  1.25k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (553:42): [True: 1.03k, False: 219]
  ------------------
  554|  1.03k|                                {
  555|  1.03k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (555:41): [True: 388, False: 650]
  ------------------
  556|    388|                                    {
  557|    388|                                        return OpCode::SGTI;
  558|    388|                                    }
  559|    650|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (559:46): [True: 389, False: 261]
  ------------------
  560|    389|                                    {
  561|    389|                                        return OpCode::SGTU;
  562|    389|                                    }
  563|  1.03k|                                }
  564|  1.00k|                                break;
  565|       |
  566|  2.44k|                            case 'L':
  ------------------
  |  Branch (566:29): [True: 2.44k, False: 11.8k]
  ------------------
  567|  4.05k|                            case 'l':
  ------------------
  |  Branch (567:29): [True: 1.60k, False: 12.6k]
  ------------------
  568|  4.05k|                                switch (c3)
  ------------------
  |  Branch (568:41): [True: 203, False: 3.84k]
  ------------------
  569|  4.05k|                                {
  570|    395|                                    case 'A':
  ------------------
  |  Branch (570:37): [True: 395, False: 3.65k]
  ------------------
  571|    589|                                    case 'a':
  ------------------
  |  Branch (571:37): [True: 194, False: 3.85k]
  ------------------
  572|    589|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (572:45): [True: 388, False: 201]
  ------------------
  573|    388|                                        {
  574|    388|                                            return OpCode::SLAI;
  575|    388|                                        }
  576|    201|                                        break;
  577|       |
  578|    389|                                    case 'E':
  ------------------
  |  Branch (578:37): [True: 389, False: 3.66k]
  ------------------
  579|  1.30k|                                    case 'e':
  ------------------
  |  Branch (579:37): [True: 912, False: 3.13k]
  ------------------
  580|  1.30k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (580:45): [True: 390, False: 911]
  ------------------
  581|    390|                                        {
  582|    390|                                            return OpCode::SLEI;
  583|    390|                                        }
  584|    911|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (584:50): [True: 518, False: 393]
  ------------------
  585|    518|                                        {
  586|    518|                                            return OpCode::SLEU;
  587|    518|                                        }
  588|    393|                                        break;
  589|       |
  590|    397|                                    case 'L':
  ------------------
  |  Branch (590:37): [True: 397, False: 3.65k]
  ------------------
  591|    594|                                    case 'l':
  ------------------
  |  Branch (591:37): [True: 197, False: 3.85k]
  ------------------
  592|    594|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (592:45): [True: 388, False: 206]
  ------------------
  593|    388|                                        {
  594|    388|                                            return OpCode::SLLI;
  595|    388|                                        }
  596|    206|                                        break;
  597|       |
  598|    410|                                    case 'T':
  ------------------
  |  Branch (598:37): [True: 410, False: 3.64k]
  ------------------
  599|  1.36k|                                    case 't':
  ------------------
  |  Branch (599:37): [True: 953, False: 3.09k]
  ------------------
  600|  1.36k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (600:45): [True: 388, False: 975]
  ------------------
  601|    388|                                        {
  602|    388|                                            return OpCode::SLTI;
  603|    388|                                        }
  604|    975|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (604:50): [True: 549, False: 426]
  ------------------
  605|    549|                                        {
  606|    549|                                            return OpCode::SLTU;
  607|    549|                                        }
  608|    426|                                        break;
  609|  4.05k|                                }
  610|       |
  611|  2.70k|                            case 'N':
  ------------------
  |  Branch (611:29): [True: 1.27k, False: 12.9k]
  ------------------
  612|  3.10k|                            case 'n':
  ------------------
  |  Branch (612:29): [True: 400, False: 13.8k]
  ------------------
  613|  3.10k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (613:37): [True: 1.72k, False: 1.38k]
  ------------------
  614|  1.72k|                                {
  615|  1.72k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (615:41): [True: 388, False: 1.33k]
  ------------------
  616|    388|                                    {
  617|    388|                                        return OpCode::SNEI;
  618|    388|                                    }
  619|  1.33k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (619:46): [True: 388, False: 946]
  ------------------
  620|    388|                                    {
  621|    388|                                        return OpCode::SNEU;
  622|    388|                                    }
  623|  1.72k|                                }
  624|  2.33k|                                break;
  625|       |
  626|  2.33k|                            case 'R':
  ------------------
  |  Branch (626:29): [True: 201, False: 14.0k]
  ------------------
  627|  1.20k|                            case 'r':
  ------------------
  |  Branch (627:29): [True: 1.00k, False: 13.2k]
  ------------------
  628|  1.20k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (628:37): [True: 617, False: 592]
  |  Branch (628:37): [True: 388, False: 821]
  |  Branch (628:53): [True: 388, False: 229]
  ------------------
  629|    388|                                {
  630|    388|                                    return OpCode::SRAI;
  631|    388|                                }
  632|    821|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (632:42): [True: 589, False: 232]
  |  Branch (632:42): [True: 389, False: 432]
  |  Branch (632:58): [True: 389, False: 200]
  ------------------
  633|    389|                                {
  634|    389|                                    return OpCode::SRLI;
  635|    389|                                }
  636|    432|                                break;
  637|       |
  638|  1.04k|                            case 'U':
  ------------------
  |  Branch (638:29): [True: 1.04k, False: 13.2k]
  ------------------
  639|  2.07k|                            case 'u':
  ------------------
  |  Branch (639:29): [True: 1.02k, False: 13.2k]
  ------------------
  640|  2.07k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (640:37): [True: 1.85k, False: 217]
  ------------------
  641|  1.85k|                                {
  642|  1.85k|                                    switch (c4)
  ------------------
  |  Branch (642:45): [True: 283, False: 1.57k]
  ------------------
  643|  1.85k|                                    {
  644|    194|                                        case 'D':
  ------------------
  |  Branch (644:41): [True: 194, False: 1.65k]
  ------------------
  645|    388|                                        case 'd':
  ------------------
  |  Branch (645:41): [True: 194, False: 1.65k]
  ------------------
  646|    388|                                            return OpCode::SUBD;
  647|       |
  648|    194|                                        case 'F':
  ------------------
  |  Branch (648:41): [True: 194, False: 1.65k]
  ------------------
  649|    388|                                        case 'f':
  ------------------
  |  Branch (649:41): [True: 194, False: 1.65k]
  ------------------
  650|    388|                                            return OpCode::SUBF;
  651|       |
  652|    194|                                        case 'I':
  ------------------
  |  Branch (652:41): [True: 194, False: 1.65k]
  ------------------
  653|    388|                                        case 'i':
  ------------------
  |  Branch (653:41): [True: 194, False: 1.65k]
  ------------------
  654|    388|                                            return OpCode::SUBI;
  655|       |
  656|    212|                                        case 'U':
  ------------------
  |  Branch (656:41): [True: 212, False: 1.64k]
  ------------------
  657|    406|                                        case 'u':
  ------------------
  |  Branch (657:41): [True: 194, False: 1.65k]
  ------------------
  658|    406|                                            return OpCode::SUBU;
  659|  1.85k|                                    }
  660|  1.85k|                                }
  661|    500|                                break;
  662|  14.2k|                        }
  663|  5.58k|                        break;
  664|       |
  665|  5.58k|                    case 'T':
  ------------------
  |  Branch (665:21): [True: 980, False: 35.5k]
  ------------------
  666|  1.17k|                    case 't':
  ------------------
  |  Branch (666:21): [True: 194, False: 36.3k]
  ------------------
  667|  1.17k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (667:29): [True: 968, False: 206]
  |  Branch (667:29): [True: 388, False: 786]
  |  Branch (667:45): [True: 772, False: 196]
  |  Branch (667:61): [True: 388, False: 384]
  ------------------
  668|    388|                        {
  669|    388|                            return OpCode::TRAP;
  670|    388|                        }
  671|    786|                        break;
  672|    863|                    case 'X':
  ------------------
  |  Branch (672:21): [True: 863, False: 35.7k]
  ------------------
  673|  1.12k|                    case 'x':
  ------------------
  |  Branch (673:21): [True: 257, False: 36.3k]
  ------------------
  674|  1.12k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (674:29): [True: 795, False: 325]
  |  Branch (674:29): [True: 388, False: 732]
  |  Branch (674:45): [True: 601, False: 194]
  |  Branch (674:61): [True: 388, False: 213]
  ------------------
  675|    388|                        {
  676|    388|                            return OpCode::XORI;
  677|    388|                        }
  678|    732|                        break;
  679|  36.5k|                }
  680|  19.5k|                break;
  681|  36.5k|            }
  682|       |
  683|       |            // 5 character OpCodes
  684|  20.3k|            case 5: {
  ------------------
  |  Branch (684:13): [True: 20.3k, False: 125k]
  ------------------
  685|  20.3k|                const char c1 = token[0u];
  686|  20.3k|                const char c2 = token[1u];
  687|  20.3k|                const char c3 = token[2u];
  688|  20.3k|                const char c4 = token[3u];
  689|  20.3k|                const char c5 = token[4u];
  690|       |
  691|  20.3k|                switch (c1)
  ------------------
  |  Branch (691:25): [True: 3.78k, False: 16.5k]
  ------------------
  692|  20.3k|                {
  693|  1.25k|                    case 'A':
  ------------------
  |  Branch (693:21): [True: 1.25k, False: 19.0k]
  ------------------
  694|  1.82k|                    case 'a':
  ------------------
  |  Branch (694:21): [True: 565, False: 19.7k]
  ------------------
  695|  1.82k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (695:29): [True: 1.58k, False: 244]
  |  Branch (695:29): [True: 388, False: 1.43k]
  |  Branch (695:45): [True: 1.10k, False: 479]
  |  Branch (695:61): [True: 892, False: 209]
  |  Branch (695:77): [True: 388, False: 504]
  ------------------
  696|    388|                        {
  697|    388|                            return OpCode::ADDUI;
  698|    388|                        }
  699|  1.43k|                        break;
  700|       |
  701|  1.43k|                    case 'D':
  ------------------
  |  Branch (701:21): [True: 414, False: 19.8k]
  ------------------
  702|  2.04k|                    case 'd':
  ------------------
  |  Branch (702:21): [True: 1.63k, False: 18.6k]
  ------------------
  703|  2.04k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (703:29): [True: 1.84k, False: 199]
  |  Branch (703:29): [True: 516, False: 1.52k]
  |  Branch (703:45): [True: 1.65k, False: 194]
  |  Branch (703:61): [True: 902, False: 749]
  |  Branch (703:77): [True: 516, False: 386]
  ------------------
  704|    516|                        {
  705|    516|                            return OpCode::DIVUI;
  706|    516|                        }
  707|  1.52k|                        break;
  708|       |
  709|  1.52k|                    case 'M':
  ------------------
  |  Branch (709:21): [True: 1.46k, False: 18.8k]
  ------------------
  710|  3.06k|                    case 'm':
  ------------------
  |  Branch (710:21): [True: 1.60k, False: 18.7k]
  ------------------
  711|  3.06k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (711:29): [True: 2.51k, False: 556]
  |  Branch (711:29): [True: 1.83k, False: 1.23k]
  |  Branch (711:45): [True: 2.04k, False: 468]
  |  Branch (711:61): [True: 1.83k, False: 208]
  ------------------
  712|  1.83k|                        {
  713|  1.83k|                            switch (c5)
  ------------------
  |  Branch (713:37): [True: 285, False: 1.55k]
  ------------------
  714|  1.83k|                            {
  715|    194|                                case 'D':
  ------------------
  |  Branch (715:33): [True: 194, False: 1.64k]
  ------------------
  716|    388|                                case 'd':
  ------------------
  |  Branch (716:33): [True: 194, False: 1.64k]
  ------------------
  717|    388|                                    return OpCode::MULTD;
  718|       |
  719|    194|                                case 'F':
  ------------------
  |  Branch (719:33): [True: 194, False: 1.64k]
  ------------------
  720|    388|                                case 'f':
  ------------------
  |  Branch (720:33): [True: 194, False: 1.64k]
  ------------------
  721|    388|                                    return OpCode::MULTF;
  722|       |
  723|    194|                                case 'I':
  ------------------
  |  Branch (723:33): [True: 194, False: 1.64k]
  ------------------
  724|    388|                                case 'i':
  ------------------
  |  Branch (724:33): [True: 194, False: 1.64k]
  ------------------
  725|    388|                                    return OpCode::MULTI;
  726|       |
  727|    194|                                case 'U':
  ------------------
  |  Branch (727:33): [True: 194, False: 1.64k]
  ------------------
  728|    388|                                case 'u':
  ------------------
  |  Branch (728:33): [True: 194, False: 1.64k]
  ------------------
  729|    388|                                    return OpCode::MULTU;
  730|  1.83k|                            }
  731|  1.83k|                        }
  732|  1.51k|                        break;
  733|       |
  734|  6.39k|                    case 'S':
  ------------------
  |  Branch (734:21): [True: 6.39k, False: 13.9k]
  ------------------
  735|  9.58k|                    case 's':
  ------------------
  |  Branch (735:21): [True: 3.19k, False: 17.1k]
  ------------------
  736|  9.58k|                        switch (c2)
  ------------------
  |  Branch (736:33): [True: 474, False: 9.11k]
  ------------------
  737|  9.58k|                        {
  738|    819|                            case 'E':
  ------------------
  |  Branch (738:29): [True: 819, False: 8.76k]
  ------------------
  739|  1.43k|                            case 'e':
  ------------------
  |  Branch (739:29): [True: 614, False: 8.97k]
  ------------------
  740|  1.43k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (740:37): [True: 1.20k, False: 231]
  |  Branch (740:37): [True: 484, False: 949]
  |  Branch (740:53): [True: 991, False: 211]
  |  Branch (740:69): [True: 484, False: 507]
  ------------------
  741|    484|                                {
  742|    484|                                    return OpCode::SEQUI;
  743|    484|                                }
  744|    949|                                break;
  745|       |
  746|  1.67k|                            case 'G':
  ------------------
  |  Branch (746:29): [True: 1.67k, False: 7.90k]
  ------------------
  747|  2.01k|                            case 'g':
  ------------------
  |  Branch (747:29): [True: 331, False: 9.25k]
  ------------------
  748|  2.01k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (748:37): [True: 1.20k, False: 810]
  |  Branch (748:37): [True: 516, False: 1.49k]
  |  Branch (748:53): [True: 710, False: 490]
  |  Branch (748:69): [True: 516, False: 194]
  ------------------
  749|    516|                                {
  750|    516|                                    return OpCode::SGEUI;
  751|    516|                                }
  752|  1.49k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (752:42): [True: 794, False: 700]
  |  Branch (752:42): [True: 388, False: 1.10k]
  |  Branch (752:58): [True: 584, False: 210]
  |  Branch (752:74): [True: 388, False: 196]
  ------------------
  753|    388|                                {
  754|    388|                                    return OpCode::SGTUI;
  755|    388|                                }
  756|  1.10k|                                break;
  757|       |
  758|  1.20k|                            case 'L':
  ------------------
  |  Branch (758:29): [True: 1.20k, False: 8.37k]
  ------------------
  759|  2.38k|                            case 'l':
  ------------------
  |  Branch (759:29): [True: 1.17k, False: 8.41k]
  ------------------
  760|  2.38k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (760:37): [True: 1.02k, False: 1.35k]
  |  Branch (760:37): [True: 388, False: 1.99k]
  |  Branch (760:53): [True: 794, False: 232]
  |  Branch (760:69): [True: 388, False: 406]
  ------------------
  761|    388|                                {
  762|    388|                                    return OpCode::SLEUI;
  763|    388|                                }
  764|  1.99k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (764:42): [True: 1.09k, False: 903]
  |  Branch (764:42): [True: 644, False: 1.34k]
  |  Branch (764:58): [True: 845, False: 245]
  |  Branch (764:74): [True: 644, False: 201]
  ------------------
  765|    644|                                {
  766|    644|                                    return OpCode::SLTUI;
  767|    644|                                }
  768|  1.34k|                                break;
  769|       |
  770|  1.34k|                            case 'N':
  ------------------
  |  Branch (770:29): [True: 752, False: 8.83k]
  ------------------
  771|  1.38k|                            case 'n':
  ------------------
  |  Branch (771:29): [True: 628, False: 8.95k]
  ------------------
  772|  1.38k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (772:37): [True: 1.02k, False: 358]
  |  Branch (772:37): [True: 388, False: 992]
  |  Branch (772:53): [True: 590, False: 432]
  |  Branch (772:69): [True: 388, False: 202]
  ------------------
  773|    388|                                {
  774|    388|                                    return OpCode::SNEUI;
  775|    388|                                }
  776|    992|                                break;
  777|       |
  778|    992|                            case 'U':
  ------------------
  |  Branch (778:29): [True: 706, False: 8.88k]
  ------------------
  779|  1.90k|                            case 'u':
  ------------------
  |  Branch (779:29): [True: 1.20k, False: 8.38k]
  ------------------
  780|  1.90k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (780:37): [True: 1.71k, False: 194]
  |  Branch (780:37): [True: 388, False: 1.52k]
  |  Branch (780:53): [True: 750, False: 965]
  |  Branch (780:69): [True: 388, False: 362]
  ------------------
  781|    388|                                {
  782|    388|                                    return OpCode::SUBUI;
  783|    388|                                }
  784|  1.52k|                                break;
  785|  9.58k|                        }
  786|       |
  787|  6.39k|                        break;
  788|  20.3k|                }
  789|       |
  790|  14.6k|                break;
  791|  20.3k|            }
  792|       |
  793|       |            // 6 character OpCodes
  794|  14.6k|            case 6: {
  ------------------
  |  Branch (794:13): [True: 9.76k, False: 135k]
  ------------------
  795|  9.76k|                const char c1 = token[0u];
  796|  9.76k|                const char c2 = token[1u];
  797|  9.76k|                const char c3 = token[2u];
  798|  9.76k|                const char c4 = token[3u];
  799|  9.76k|                const char c5 = token[4u];
  800|  9.76k|                const char c6 = token[5u];
  801|       |
  802|  9.76k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (802:21): [True: 4.61k, False: 5.15k]
  |  Branch (802:21): [True: 4.09k, False: 5.66k]
  |  Branch (802:37): [True: 4.28k, False: 322]
  |  Branch (802:53): [True: 4.09k, False: 195]
  ------------------
  803|  4.09k|                {
  804|  4.09k|                    switch (c4)
  ------------------
  |  Branch (804:29): [True: 214, False: 3.88k]
  ------------------
  805|  4.09k|                    {
  806|  1.22k|                        case 'D':
  ------------------
  |  Branch (806:25): [True: 1.22k, False: 2.86k]
  ------------------
  807|  1.42k|                        case 'd':
  ------------------
  |  Branch (807:25): [True: 195, False: 3.89k]
  ------------------
  808|  1.42k|                            if (c5 == '2')
  ------------------
  |  Branch (808:33): [True: 1.22k, False: 194]
  ------------------
  809|  1.22k|                            {
  810|  1.22k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (810:37): [True: 516, False: 710]
  ------------------
  811|    516|                                {
  812|    516|                                    return OpCode::CVTD2F;
  813|    516|                                }
  814|    710|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (814:42): [True: 516, False: 194]
  ------------------
  815|    516|                                {
  816|    516|                                    return OpCode::CVTD2I;
  817|    516|                                }
  818|  1.22k|                            }
  819|    388|                            break;
  820|       |
  821|    967|                        case 'F':
  ------------------
  |  Branch (821:25): [True: 967, False: 3.12k]
  ------------------
  822|  1.16k|                        case 'f':
  ------------------
  |  Branch (822:25): [True: 197, False: 3.89k]
  ------------------
  823|  1.16k|                            if (c5 == '2')
  ------------------
  |  Branch (823:33): [True: 970, False: 194]
  ------------------
  824|    970|                            {
  825|    970|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (825:37): [True: 388, False: 582]
  ------------------
  826|    388|                                {
  827|    388|                                    return OpCode::CVTF2D;
  828|    388|                                }
  829|    582|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (829:42): [True: 388, False: 194]
  ------------------
  830|    388|                                {
  831|    388|                                    return OpCode::CVTF2I;
  832|    388|                                }
  833|    970|                            }
  834|    388|                            break;
  835|       |
  836|    388|                        case 'I':
  ------------------
  |  Branch (836:25): [True: 197, False: 3.89k]
  ------------------
  837|  1.29k|                        case 'i':
  ------------------
  |  Branch (837:25): [True: 1.09k, False: 2.99k]
  ------------------
  838|  1.29k|                            if (c5 == '2')
  ------------------
  |  Branch (838:33): [True: 1.10k, False: 196]
  ------------------
  839|  1.10k|                            {
  840|  1.10k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (840:37): [True: 516, False: 584]
  ------------------
  841|    516|                                {
  842|    516|                                    return OpCode::CVTI2D;
  843|    516|                                }
  844|    584|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (844:42): [True: 388, False: 196]
  ------------------
  845|    388|                                {
  846|    388|                                    return OpCode::CVTI2F;
  847|    388|                                }
  848|  1.10k|                            }
  849|  4.09k|                    }
  850|  4.09k|                }
  851|  5.66k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (851:26): [True: 2.63k, False: 3.03k]
  |  Branch (851:26): [True: 516, False: 5.15k]
  |  Branch (851:42): [True: 1.71k, False: 918]
  |  Branch (851:58): [True: 1.51k, False: 205]
  |  Branch (851:74): [True: 1.31k, False: 194]
  ------------------
  852|  5.66k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (852:26): [True: 900, False: 416]
  |  Branch (852:42): [True: 516, False: 384]
  ------------------
  853|    516|                {
  854|    516|                    return OpCode::MULTUI;
  855|    516|                }
  856|  6.53k|                break;
  857|  9.76k|            }
  858|       |
  859|       |            // 7 character OpCodes
  860|  6.53k|            case 7: {
  ------------------
  |  Branch (860:13): [True: 4.93k, False: 140k]
  ------------------
  861|  4.93k|                const char c1 = token[0u];
  862|  4.93k|                const char c2 = token[1u];
  863|  4.93k|                const char c3 = token[2u];
  864|  4.93k|                const char c4 = token[3u];
  865|  4.93k|                const char c5 = token[4u];
  866|  4.93k|                const char c6 = token[5u];
  867|  4.93k|                const char c7 = token[6u];
  868|       |
  869|  4.93k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (869:21): [True: 2.55k, False: 2.38k]
  |  Branch (869:21): [True: 2.00k, False: 2.92k]
  |  Branch (869:37): [True: 2.20k, False: 348]
  |  Branch (869:53): [True: 2.00k, False: 195]
  ------------------
  870|  2.00k|                {
  871|  2.00k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (871:25): [True: 985, False: 1.02k]
  |  Branch (871:25): [True: 388, False: 1.61k]
  |  Branch (871:41): [True: 789, False: 196]
  |  Branch (871:54): [True: 595, False: 194]
  |  Branch (871:70): [True: 388, False: 207]
  ------------------
  872|    388|                    {
  873|    388|                        return OpCode::MOVI2FP;
  874|    388|                    }
  875|  1.61k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (875:25): [True: 972, False: 647]
  |  Branch (875:25): [True: 388, False: 1.23k]
  |  Branch (875:41): [True: 778, False: 194]
  |  Branch (875:57): [True: 582, False: 196]
  |  Branch (875:70): [True: 388, False: 194]
  ------------------
  876|    388|                    {
  877|    388|                        return OpCode::MOVFP2I;
  878|    388|                    }
  879|  1.61k|                }
  880|  4.15k|                break;
  881|  4.93k|            }
  882|       |
  883|  4.15k|            default: {
  ------------------
  |  Branch (883:13): [True: 2.80k, False: 142k]
  ------------------
  884|  2.80k|                break;
  885|  4.93k|            }
  886|   145k|        }
  887|       |
  888|       |        // None found
  889|  87.6k|        return OpCode::NONE;
  890|   145k|    }
_ZN3dlx3iceEcc:
   15|   229k|    {
   16|   229k|        constexpr const char diff = 'a' - 'A';
   17|   229k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (17:16): [True: 75.5k, False: 154k]
  |  Branch (17:28): [True: 67.0k, False: 86.9k]
  ------------------
   18|   229k|    }

_ZN3dlx10ParseErrorC2Ev:
   18|   112k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  186|  1.33k|    {
  187|  1.33k|        ParseError err;
  188|       |
  189|  1.33k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  190|  1.33k|        err.m_LineNumber                           = line_number;
  191|  1.33k|        err.m_Column                               = column;
  192|  1.33k|        err.unexpected_argument_type.expected_type = expected_type;
  193|  1.33k|        err.unexpected_argument_type.actual_type   = actual_type;
  194|       |
  195|  1.33k|        return err;
  196|  1.33k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  201|  1.33k|    {
  202|  1.33k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  203|  1.33k|                                                         token.GetColumn().unsafe(), expected_type,
  204|  1.33k|                                                         actual_type);
  205|  1.33k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  209|    194|    {
  210|    194|        ParseError err;
  211|       |
  212|    194|        err.m_Type              = ParseError::Type::InvalidNumber;
  213|    194|        err.m_LineNumber        = line_number;
  214|    194|        err.m_Column            = column;
  215|    194|        err.invalid_number.text = text;
  216|       |
  217|    194|        return err;
  218|    194|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  221|    194|    {
  222|    194|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  223|    194|                                                token.GetColumn().unsafe(), token.GetText());
  224|    194|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  228|      2|    {
  229|      2|        ParseError err;
  230|       |
  231|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  232|      2|        err.m_LineNumber = line_number;
  233|      2|        err.m_Column     = column;
  234|       |
  235|      2|        return err;
  236|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  239|      2|    {
  240|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  241|      2|                                                                     token.GetColumn().unsafe());
  242|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  247|  29.8k|    {
  248|  29.8k|        ParseError err;
  249|       |
  250|  29.8k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  251|  29.8k|        err.m_LineNumber                   = line_number;
  252|  29.8k|        err.m_Column                       = column;
  253|  29.8k|        err.unexpected_token.expected_type = expected_type;
  254|  29.8k|        err.unexpected_token.actual_type   = actual_type;
  255|       |
  256|  29.8k|        return err;
  257|  29.8k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  261|  29.8k|    {
  262|  29.8k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  263|  29.8k|                                                  token.GetColumn().unsafe(), expected_type,
  264|  29.8k|                                                  token.GetType());
  265|  29.8k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  270|  22.4k|    {
  271|  22.4k|        ParseError err;
  272|       |
  273|  22.4k|        err.m_Type                         = ParseError::Type::ReservedIdentifier;
  274|  22.4k|        err.m_LineNumber                   = line_number;
  275|  22.4k|        err.m_Column                       = column;
  276|  22.4k|        err.reserved_identifier.identifier = identifier;
  277|       |
  278|  22.4k|        return err;
  279|  22.4k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorERKNS_5TokenE:
  282|    194|    {
  283|    194|        return ConstructReservedIdentifierParseError(token.GetLineNumber().unsafe(),
  284|    194|                                                     token.GetColumn().unsafe(), token.GetText());
  285|    194|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  290|  18.0k|    {
  291|  18.0k|        ParseError err;
  292|       |
  293|  18.0k|        err.m_Type                              = ParseError::Type::InvalidLabelIdentifier;
  294|  18.0k|        err.m_LineNumber                        = line_number;
  295|  18.0k|        err.m_Column                            = column;
  296|  18.0k|        err.invalid_label_identifier.identifier = identifier;
  297|       |
  298|  18.0k|        return err;
  299|  18.0k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  302|  18.0k|    {
  303|  18.0k|        return ConstructInvalidLabelIdentifierParseError(
  304|  18.0k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  305|  18.0k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  312|  8.61k|    {
  313|  8.61k|        ParseError err;
  314|       |
  315|  8.61k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  316|  8.61k|        err.m_LineNumber                     = line_number;
  317|  8.61k|        err.m_Column                         = column;
  318|  8.61k|        err.label_already_defined.label_name = label_name;
  319|  8.61k|        err.label_already_defined.at_line    = at_line;
  320|  8.61k|        err.label_already_defined.at_column  = at_column;
  321|       |
  322|  8.61k|        return err;
  323|  8.61k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  327|  8.61k|    {
  328|  8.61k|        return ConstructLabelAlreadyDefinedParseError(
  329|  8.61k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  330|  8.61k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  331|  8.61k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  335|  20.4k|    {
  336|  20.4k|        ParseError err;
  337|       |
  338|  20.4k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  339|  20.4k|        err.m_LineNumber = line_number;
  340|  20.4k|        err.m_Column     = column;
  341|       |
  342|  20.4k|        return err;
  343|  20.4k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  346|  20.4k|    {
  347|  20.4k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  348|  20.4k|                                                        token.GetColumn().unsafe());
  349|  20.4k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  354|  5.28k|    {
  355|  5.28k|        ParseError err;
  356|       |
  357|  5.28k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  358|  5.28k|        err.m_LineNumber               = line_number;
  359|  5.28k|        err.m_Column                   = column;
  360|  5.28k|        err.too_few_arguments.required = required;
  361|  5.28k|        err.too_few_arguments.provided = provided;
  362|       |
  363|  5.28k|        return err;
  364|  5.28k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  368|  5.28k|    {
  369|  5.28k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  370|  5.28k|                                                  token.GetColumn().unsafe(), required, provided);
  371|  5.28k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  375|  5.80k|    {
  376|  5.80k|        ParseError err;
  377|       |
  378|  5.80k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  379|  5.80k|        err.m_LineNumber           = line_number;
  380|  5.80k|        err.m_Column               = column;
  381|  5.80k|        err.empty_label.label_name = label_name;
  382|       |
  383|  5.80k|        return err;
  384|  5.80k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  387|  5.80k|    {
  388|  5.80k|        return ConstructEmptyLabelParseError(
  389|  5.80k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  390|  5.80k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (390:17): [True: 5.46k, False: 348]
  ------------------
  391|  5.46k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  392|  5.80k|                        token.GetText());
  393|  5.80k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  397|    244|    {
  398|    244|        ParseError err;
  399|       |
  400|    244|        err.m_Type       = ParseError::Type::TooManyComma;
  401|    244|        err.m_LineNumber = line_number;
  402|    244|        err.m_Column     = column;
  403|       |
  404|    244|        return err;
  405|    244|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  408|    244|    {
  409|    244|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  410|    244|                                               token.GetColumn().unsafe());
  411|    244|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   16|   112k|    {
   17|   112k|        m_ParseErrors.emplace_back(phi::move(error));
   18|   112k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  4.17k|    {
  181|  4.17k|        ParsedProgram program;
  182|       |
  183|  4.17k|        program.m_Tokens = tokens;
  184|       |
  185|  4.17k|        phi::boolean line_has_instruction{false};
  186|  4.17k|        phi::usize   label_count{0u};
  187|       |
  188|   137k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 133k, False: 4.17k]
  ------------------
  189|   133k|        {
  190|   133k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   133k|            switch (current_token.GetType())
  195|   133k|            {
  196|       |                // Ignore comments
  197|    655|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 655, False: 132k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|    655|                    break;
  200|       |
  201|  17.7k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 17.7k, False: 115k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  17.7k|                    line_has_instruction = false;
  204|  17.7k|                    break;
  205|       |
  206|  55.1k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 55.1k, False: 77.9k]
  ------------------
  207|  55.1k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 3.20k, False: 51.9k]
  ------------------
  208|  3.20k|                    {
  209|  3.20k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  3.20k|                                current_token, Token::Type::NewLine));
  211|  3.20k|                        break;
  212|  3.20k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  51.9k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 8.18k, False: 43.7k]
  ------------------
  217|  8.18k|                    {
  218|  8.18k|                        program.AddParseError(
  219|  8.18k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  8.18k|                        break;
  221|  8.18k|                    }
  222|       |
  223|  43.7k|                    phi::string_view label_name = current_token.GetText();
  224|  43.7k|                    label_name.remove_suffix(1u);
  225|       |
  226|  43.7k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 22.2k, False: 21.5k]
  ------------------
  227|  22.2k|                    {
  228|  22.2k|                        program.AddParseError(ConstructReservedIdentifierParseError(
  229|  22.2k|                                current_token.GetLineNumber().unsafe(),
  230|  22.2k|                                current_token.GetColumn().unsafe(), label_name));
  231|  22.2k|                        break;
  232|  22.2k|                    }
  233|       |
  234|  21.5k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 6.70k, False: 14.8k]
  ------------------
  235|  6.70k|                    {
  236|  6.70k|                        program.AddParseError(
  237|  6.70k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  6.70k|                        break;
  239|  6.70k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  14.8k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 8.61k, False: 6.20k]
  ------------------
  243|  8.61k|                    {
  244|       |                        // Find first defintions of label
  245|  8.61k|                        const Token* first_label_definition =
  246|  8.61k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  8.61k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  8.61k|                                    {
  249|  8.61k|                                        phi::string_view token_label_name = t.GetText();
  250|  8.61k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  8.61k|                                        if (token_label_name == label_name)
  253|  8.61k|                                        {
  254|  8.61k|                                            return true;
  255|  8.61k|                                        }
  256|  8.61k|                                    }
  257|       |
  258|  8.61k|                                    return false;
  259|  8.61k|                                });
  260|       |
  261|  8.61k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  8.61k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  8.61k|                                current_token, *first_label_definition));
  265|  8.61k|                        break;
  266|  8.61k|                    }
  267|       |
  268|  6.20k|                    program.m_JumpData[label_name] =
  269|  6.20k|                            static_cast<phi::uint32_t>(program.m_Instructions.size());
  270|  6.20k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  6.20k|                    break;
  276|  14.8k|                }
  277|       |
  278|  36.1k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 36.1k, False: 96.9k]
  ------------------
  279|  36.1k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 20.4k, False: 15.7k]
  ------------------
  280|  20.4k|                    {
  281|  20.4k|                        program.AddParseError(
  282|  20.4k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  20.4k|                        break;
  284|  20.4k|                    }
  285|       |
  286|  15.7k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  15.7k|                    PHI_ASSERT(current_token.HasHint());
  290|  15.7k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  15.7k|                    const InstructionInfo& info = LookUpInstructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  15.7k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  15.7k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  15.7k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  15.7k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  15.7k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  15.7k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  15.7k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  26.0k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 23.6k, False: 2.44k]
  ------------------
  312|  23.6k|                    {
  313|       |                        // Get next token
  314|  23.6k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 839, False: 22.7k]
  ------------------
  315|    839|                        {
  316|    839|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    839|                                    current_token, number_of_argument_required.unsafe(),
  318|    839|                                    argument_num.unsafe()));
  319|    839|                            break;
  320|    839|                        }
  321|       |
  322|  22.7k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  22.7k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 7.06k, False: 15.7k]
  ------------------
  326|  7.06k|                        {
  327|  7.06k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 244, False: 6.81k]
  ------------------
  328|    244|                            {
  329|    244|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    244|                            }
  331|       |
  332|  7.06k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  7.06k|                            continue;
  335|  7.06k|                        }
  336|       |
  337|  15.7k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 4.44k, False: 11.2k]
  ------------------
  338|  4.44k|                        {
  339|  4.44k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  4.44k|                                    token, number_of_argument_required.unsafe(),
  341|  4.44k|                                    argument_num.unsafe()));
  342|  4.44k|                            break;
  343|  4.44k|                        }
  344|       |
  345|  11.2k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  11.2k|                                parse_instruction_argument(
  347|  11.2k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  11.2k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 7.98k, False: 3.29k]
  ------------------
  349|  7.98k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  7.98k|                            break;
  352|  7.98k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  3.29k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  3.29k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  3.29k|                        argument_num++;
  359|  3.29k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  3.29k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  15.7k|                    program.m_Instructions.emplace_back(instruction);
  367|  15.7k|                    line_has_instruction = true;
  368|  15.7k|                    break;
  369|  36.1k|                }
  370|       |
  371|  23.4k|                default:
  ------------------
  |  Branch (371:17): [True: 23.4k, False: 109k]
  ------------------
  372|  23.4k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  23.4k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 14.5k, False: 8.91k]
  ------------------
  374|  14.5k|                    {
  375|  14.5k|                        expected_token_type = Token::Type::NewLine;
  376|  14.5k|                    }
  377|       |
  378|  23.4k|                    program.AddParseError(
  379|  23.4k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  23.4k|                    break;
  381|   133k|            }
  382|   133k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  4.17k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 499, False: 3.67k]
  ------------------
  386|    499|        {
  387|  6.92k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 6.43k, False: 499]
  ------------------
  388|  6.43k|            {
  389|  6.43k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  6.43k|                const Token& token = *it;
  392|  6.43k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 5.80k, False: 621]
  ------------------
  393|  5.80k|                {
  394|  5.80k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  5.80k|                    --label_count;
  396|  5.80k|                }
  397|  6.43k|            }
  398|    499|        }
  399|       |
  400|  4.17k|        return program;
  401|  4.17k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  4.17k|    {
  405|  4.17k|        TokenStream tokens = Tokenize(source);
  406|  4.17k|        return Parse(tokens);
  407|  4.17k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  11.2k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  11.2k|        switch (token.GetType())
   37|  11.2k|        {
   38|  1.26k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 1.26k, False: 10.0k]
  ------------------
   39|  1.26k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 355, False: 907]
  ------------------
   40|  1.26k|                                          ArgumentType::AddressDisplacement))
   41|    355|                {
   42|    355|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    355|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    355|                    return {};
   46|    355|                }
   47|       |
   48|       |                // Get address displacement
   49|    907|                PHI_ASSERT(token.HasHint());
   50|       |
   51|    907|                phi::int16_t value = static_cast<phi::int16_t>(token.GetHint());
   52|       |
   53|    907|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 2, False: 905]
  ------------------
   54|      2|                {
   55|      2|                    program.AddParseError(
   56|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      2|                    return {};
   58|      2|                }
   59|       |
   60|    905|                auto         it           = tokens.current_position();
   61|    905|                const Token& first_token  = tokens.consume();
   62|    905|                const Token& second_token = tokens.consume();
   63|    905|                const Token& third_token  = tokens.consume();
   64|       |
   65|    905|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 195, False: 710]
  ------------------
   66|    195|                {
   67|    195|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    195|                            first_token, Token::Type::OpenBracket));
   69|    195|                    return {};
   70|    195|                }
   71|       |
   72|       |                // Second token is the register
   73|    710|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 194, False: 516]
  ------------------
   74|    194|                {
   75|    194|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|    194|                            second_token, Token::Type::RegisterInt));
   77|    194|                    return {};
   78|    194|                }
   79|       |
   80|    516|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 194, False: 322]
  ------------------
   81|    194|                {
   82|    194|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|    194|                            third_token, Token::Type::ClosingBracket));
   84|    194|                    return {};
   85|    194|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|    322|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|    322|                return ConstructInstructionArgumentAddressDisplacement(
   94|    322|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|    516|            }
   96|    925|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 925, False: 10.3k]
  ------------------
   97|    925|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 194, False: 731]
  ------------------
   98|    194|                {
   99|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    194|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    194|                    return {};
  102|    194|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|    731|                return ConstructInstructionArgumentRegisterInt(
  108|    731|                        static_cast<IntRegisterID>(token.GetHint()));
  109|    925|            }
  110|    389|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 389, False: 10.8k]
  ------------------
  111|    389|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 194, False: 195]
  ------------------
  112|    194|                {
  113|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    194|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    194|                    return {};
  116|    194|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|    195|                return ConstructInstructionArgumentRegisterFloat(
  122|    195|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|    389|            }
  124|    194|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 194, False: 11.0k]
  ------------------
  125|    194|                program.AddParseError(ConstructReservedIdentifierParseError(token));
  126|       |
  127|    194|                return {};
  128|    389|            }
  129|  5.38k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 5.38k, False: 5.90k]
  ------------------
  130|       |                // Parse as Label
  131|  5.38k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 395, False: 4.98k]
  ------------------
  132|    395|                {
  133|    395|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|    395|                            token, expected_argument_type, ArgumentType::Label));
  135|    395|                    return {};
  136|    395|                }
  137|       |
  138|  4.98k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 4.98k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentifierParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  4.98k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 3.13k, False: 1.85k]
  ------------------
  145|  3.13k|                {
  146|  3.13k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  3.13k|                    return {};
  148|  3.13k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  1.85k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  4.98k|            }
  154|    584|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 584, False: 10.7k]
  ------------------
  155|    584|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 194, False: 390]
  ------------------
  156|    194|                {
  157|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    194|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    194|                    return {};
  160|    194|                }
  161|       |
  162|    390|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 196, False: 194]
  ------------------
  163|    196|                {
  164|    196|                    return ConstructInstructionArgumentImmediateValue(
  165|    196|                            static_cast<phi::int16_t>(token.GetHint()));
  166|    196|                }
  167|       |
  168|    194|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    194|                return {};
  170|    390|            }
  171|       |
  172|  2.54k|            default:
  ------------------
  |  Branch (172:13): [True: 2.54k, False: 8.73k]
  ------------------
  173|  2.54k|                program.AddParseError(
  174|  2.54k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  2.54k|                return {};
  176|  11.2k|        }
  177|  11.2k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  33.6k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  33.6k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 29.5k, False: 4.09k]
  ------------------
  248|  29.5k|                                    {
  249|  29.5k|                                        phi::string_view token_label_name = t.GetText();
  250|  29.5k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  29.5k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 8.61k, False: 20.9k]
  ------------------
  253|  8.61k|                                        {
  254|  8.61k|                                            return true;
  255|  8.61k|                                        }
  256|  29.5k|                                    }
  257|       |
  258|  24.9k|                                    return false;
  259|  33.6k|                                });

_ZN3dlx9ProcessorC2Ev:
   62|      1|    {
   63|       |        // Mark R0 as ready only
   64|      1|        m_IntRegisters[0].SetReadOnly(true);
   65|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  349|    213|    {
  350|    213|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (350:13): [True: 0, False: 213]
  ------------------
  351|      0|        {
  352|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  353|      0|            return false;
  354|      0|        }
  355|       |
  356|    213|        m_CurrentProgram = &program;
  357|       |
  358|    213|        m_ProgramCounter               = 0u;
  359|    213|        m_Halted                       = false;
  360|    213|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  361|    213|        m_LastRaisedException          = Exception::None;
  362|    213|        m_CurrentStepCount             = 0u;
  363|       |
  364|    213|        return true;
  365|    213|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   10|   149k|    {
   11|   149k|        if (token.length() == 2u)
  ------------------
  |  Branch (11:13): [True: 22.6k, False: 126k]
  ------------------
   12|  22.6k|        {
   13|  22.6k|            const char first_char = token[0u];
   14|  22.6k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (14:17): [True: 1.31k, False: 21.3k]
  |  Branch (14:38): [True: 1.18k, False: 20.1k]
  ------------------
   15|  2.49k|            {
   16|  2.49k|                const char second_char = token[1u];
   17|  2.49k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (17:21): [True: 2.30k, False: 196]
  |  Branch (17:43): [True: 1.87k, False: 427]
  ------------------
   18|  1.87k|                {
   19|  1.87k|                    return static_cast<IntRegisterID>(second_char - '0');
   20|  1.87k|                }
   21|  2.49k|            }
   22|  22.6k|        }
   23|   126k|        else if (token.length() == 3u)
  ------------------
  |  Branch (23:18): [True: 35.5k, False: 91.4k]
  ------------------
   24|  35.5k|        {
   25|  35.5k|            const char first_char = token[0u];
   26|  35.5k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (26:17): [True: 1.91k, False: 33.6k]
  |  Branch (26:38): [True: 277, False: 33.3k]
  ------------------
   27|  2.19k|            {
   28|  2.19k|                const char second_char = token[1u];
   29|  2.19k|                const char third_char  = token[2u];
   30|       |
   31|  2.19k|                switch (second_char)
   32|  2.19k|                {
   33|    617|                    case '1': {
  ------------------
  |  Branch (33:21): [True: 617, False: 1.57k]
  ------------------
   34|    617|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (34:29): [True: 423, False: 194]
  |  Branch (34:50): [True: 229, False: 194]
  ------------------
   35|    229|                        {
   36|    229|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   37|    229|                        }
   38|    388|                        break;
   39|    617|                    }
   40|    700|                    case '2': {
  ------------------
  |  Branch (40:21): [True: 700, False: 1.49k]
  ------------------
   41|    700|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (41:29): [True: 506, False: 194]
  |  Branch (41:50): [True: 312, False: 194]
  ------------------
   42|    312|                        {
   43|    312|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   44|    312|                        }
   45|    388|                        break;
   46|    700|                    }
   47|    583|                    case '3': {
  ------------------
  |  Branch (47:21): [True: 583, False: 1.61k]
  ------------------
   48|    583|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (48:29): [True: 194, False: 389]
  |  Branch (48:50): [True: 194, False: 195]
  ------------------
   49|    388|                        {
   50|    388|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   51|    388|                        }
   52|    195|                        break;
   53|    583|                    }
   54|    294|                    default: {
  ------------------
  |  Branch (54:21): [True: 294, False: 1.90k]
  ------------------
   55|    294|                        break;
   56|    583|                    }
   57|  2.19k|                }
   58|  2.19k|            }
   59|  35.5k|        }
   60|       |
   61|   146k|        return IntRegisterID::None;
   62|   149k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|   146k|    {
   66|   146k|        if (token.length() == 2u)
  ------------------
  |  Branch (66:13): [True: 20.8k, False: 126k]
  ------------------
   67|  20.8k|        {
   68|  20.8k|            const char first_char = token[0u];
   69|  20.8k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (69:17): [True: 788, False: 20.0k]
  |  Branch (69:38): [True: 760, False: 19.2k]
  ------------------
   70|  1.54k|            {
   71|  1.54k|                const char second_char = token[1u];
   72|  1.54k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (72:21): [True: 1.32k, False: 228]
  |  Branch (72:43): [True: 753, False: 567]
  ------------------
   73|    753|                {
   74|    753|                    return static_cast<FloatRegisterID>(second_char - '0');
   75|    753|                }
   76|  1.54k|            }
   77|  20.8k|        }
   78|   126k|        else if (token.length() == 3u)
  ------------------
  |  Branch (78:18): [True: 34.6k, False: 91.4k]
  ------------------
   79|  34.6k|        {
   80|  34.6k|            const char first_char = token[0u];
   81|  34.6k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (81:17): [True: 1.84k, False: 32.7k]
  |  Branch (81:38): [True: 634, False: 32.1k]
  ------------------
   82|  2.47k|            {
   83|  2.47k|                const char second_char = token[1u];
   84|  2.47k|                const char third_char  = token[2u];
   85|       |
   86|  2.47k|                switch (second_char)
   87|  2.47k|                {
   88|    584|                    case '1': {
  ------------------
  |  Branch (88:21): [True: 584, False: 1.89k]
  ------------------
   89|    584|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (89:29): [True: 390, False: 194]
  |  Branch (89:50): [True: 196, False: 194]
  ------------------
   90|    196|                        {
   91|    196|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   92|    196|                        }
   93|    388|                        break;
   94|    584|                    }
   95|    584|                    case '2': {
  ------------------
  |  Branch (95:21): [True: 584, False: 1.89k]
  ------------------
   96|    584|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (96:29): [True: 390, False: 194]
  |  Branch (96:50): [True: 196, False: 194]
  ------------------
   97|    196|                        {
   98|    196|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
   99|    196|                        }
  100|    388|                        break;
  101|    584|                    }
  102|    582|                    case '3': {
  ------------------
  |  Branch (102:21): [True: 582, False: 1.89k]
  ------------------
  103|    582|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (103:29): [True: 194, False: 388]
  |  Branch (103:50): [True: 194, False: 194]
  ------------------
  104|    388|                        {
  105|    388|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  106|    388|                        }
  107|    194|                        break;
  108|    582|                    }
  109|    728|                    default: {
  ------------------
  |  Branch (109:21): [True: 728, False: 1.75k]
  ------------------
  110|    728|                        break;
  111|    582|                    }
  112|  2.47k|                }
  113|  2.47k|            }
  114|  34.6k|        }
  115|       |
  116|   145k|        return FloatRegisterID::None;
  117|   146k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  120|   128k|    {
  121|   128k|        if (token.length() == 4u)
  ------------------
  |  Branch (121:13): [True: 29.4k, False: 98.5k]
  ------------------
  122|  29.4k|        {
  123|  29.4k|            const char c1 = token[0u];
  124|  29.4k|            const char c2 = token[1u];
  125|  29.4k|            const char c3 = token[2u];
  126|  29.4k|            const char c4 = token[3u];
  127|       |
  128|  29.4k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (128:21): [True: 891, False: 28.5k]
  |  Branch (128:34): [True: 375, False: 28.2k]
  |  Branch (128:49): [True: 196, False: 1.07k]
  |  Branch (128:62): [True: 795, False: 275]
  ------------------
  129|  29.4k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (129:21): [True: 598, False: 393]
  |  Branch (129:34): [True: 196, False: 197]
  |  Branch (129:49): [True: 578, False: 216]
  |  Branch (129:62): [True: 4, False: 212]
  ------------------
  130|  29.4k|        }
  131|       |
  132|  98.5k|        return false;
  133|   128k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   26|   116k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   36|  42.2k|    {}
_ZNK3dlx5Token7GetTypeEv:
   39|   413k|    {
   40|   413k|        return m_Type;
   41|   413k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   49|   409k|    {
   50|   409k|        return m_LineNumber;
   51|   409k|    }
_ZNK3dlx5Token9GetColumnEv:
   54|   815k|    {
   55|   815k|        return m_Column;
   56|   815k|    }
_ZNK3dlx5Token9GetLengthEv:
   59|   558k|    {
   60|   558k|        return m_Text.length();
   61|   558k|    }
_ZNK3dlx5Token7GetTextEv:
   64|   181k|    {
   65|   181k|        return m_Text;
   66|   181k|    }
_ZNK3dlx5Token7HasHintEv:
   78|  17.0k|    {
   79|  17.0k|        return m_HasHint;
   80|  17.0k|    }
_ZNK3dlx5Token7GetHintEv:
   83|  18.0k|    {
   84|  18.0k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   85|  18.0k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   86|  18.0k|                   m_Type == Type::ImmediateInteger);
   87|  18.0k|        PHI_ASSERT(m_HasHint);
   88|       |
   89|  18.0k|        return m_Hint;
   90|  18.0k|    }

_ZN3dlx11TokenStream8finalizeEv:
   28|  4.17k|    {
   29|       |#if defined(PHI_DEBUG)
   30|       |        PHI_ASSERT(!m_Finalized);
   31|       |#endif
   32|       |
   33|  4.17k|        m_Iterator = 0u;
   34|       |#if defined(PHI_DEBUG)
   35|       |        m_Finalized = true;
   36|       |#endif
   37|  4.17k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   49|    907|    {
   50|    907|        return x + m_Iterator <= m_Tokens.size();
   51|    907|    }
_ZNK3dlx11TokenStream8has_moreEv:
   54|   160k|    {
   55|   160k|        return m_Iterator < m_Tokens.size();
   56|   160k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   59|   158k|    {
   60|   158k|        return m_Iterator >= m_Tokens.size();
   61|   158k|    }
_ZN3dlx11TokenStream7consumeEv:
   74|   158k|    {
   75|   158k|        PHI_ASSERT(!reached_end());
   76|       |#if defined(PHI_DEBUG)
   77|       |        PHI_ASSERT(m_Finalized);
   78|       |#endif
   79|       |
   80|   158k|        return m_Tokens.at(m_Iterator++.unsafe());
   81|   158k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  154|    905|    {
  155|    905|        return m_Iterator;
  156|    905|    }
_ZN3dlx11TokenStream12set_positionEN3phi7integerImEE:
  159|    322|    {
  160|       |#if defined(PHI_DEBUG)
  161|       |        PHI_ASSERT(m_Finalized);
  162|       |#endif
  163|       |
  164|    322|        m_Iterator = pos;
  165|    322|    }
_ZNK3dlx11TokenStream5beginEv:
  168|  4.17k|    {
  169|       |#if defined(PHI_DEBUG)
  170|       |        //PHI_ASSERT(m_Finalized);
  171|       |#endif
  172|       |
  173|  4.17k|        return m_Tokens.begin();
  174|  4.17k|    }
_ZNK3dlx11TokenStream3endEv:
  186|  4.17k|    {
  187|       |#if defined(PHI_DEBUG)
  188|       |        //PHI_ASSERT(m_Finalized);
  189|       |#endif
  190|       |
  191|  4.17k|        return m_Tokens.end();
  192|  4.17k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  204|    499|    {
  205|       |#if defined(PHI_DEBUG)
  206|       |        //PHI_ASSERT(m_Finalized);
  207|       |#endif
  208|       |
  209|    499|        return m_Tokens.rbegin();
  210|    499|    }
_ZNK3dlx11TokenStream4rendEv:
  213|  6.43k|    {
  214|       |#if defined(PHI_DEBUG)
  215|       |        //PHI_ASSERT(m_Finalized);
  216|       |#endif
  217|       |
  218|  6.43k|        return m_Tokens.rend();
  219|  6.43k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  4.17k|    {
   66|  4.17k|        TokenStream tokens;
   67|       |
   68|  4.17k|        phi::string_view current_token;
   69|       |
   70|  4.17k|        phi::u64 current_line_number{1u};
   71|  4.17k|        phi::u64 current_column{1u};
   72|  4.17k|        phi::u64 token_begin{0u};
   73|       |
   74|  4.17k|        phi::boolean parsing_comment{false};
   75|       |
   76|   458k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 454k, False: 4.17k]
  ------------------
   77|   454k|        {
   78|   454k|            const char c{source.at(i)};
   79|       |
   80|   454k|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 22.2k, False: 432k]
  ------------------
   81|  22.2k|            {
   82|  22.2k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 3.14k, False: 19.1k]
  ------------------
   83|  3.14k|                {
   84|       |                    // Skip empty lines
   85|  3.14k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  3.14k|                                        current_line_number, current_column);
   87|       |
   88|  3.14k|                    parsing_comment = false;
   89|  3.14k|                    current_line_number += 1u;
   90|  3.14k|                    current_column = 1u;
   91|  3.14k|                    continue;
   92|  3.14k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  19.1k|                tokens.emplace_back(ParseToken(
   96|  19.1k|                        source.substring_view(
   97|  19.1k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  19.1k|                                current_token.length()),
   99|  19.1k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  19.1k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  19.1k|                                    current_line_number, current_column);
  103|       |
  104|  19.1k|                current_token   = phi::string_view{};
  105|  19.1k|                parsing_comment = false;
  106|  19.1k|                current_line_number += 1u;
  107|  19.1k|                current_column = 0u;
  108|  19.1k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|   432k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 729, False: 431k]
  |  Branch (110:34): [True: 802, False: 430k]
  ------------------
  111|  1.53k|            {
  112|  1.53k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 277, False: 1.25k]
  ------------------
  113|    277|                {
  114|    277|                    token_begin = i;
  115|    277|                }
  116|  1.25k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 854, False: 400]
  ------------------
  117|    854|                {
  118|    854|                    tokens.emplace_back(ParseToken(
  119|    854|                            source.substring_view(
  120|    854|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|    854|                                    current_token.length()),
  122|    854|                            current_line_number, current_column - current_token.length()));
  123|    854|                    token_begin   = i;
  124|    854|                    current_token = phi::string_view{};
  125|    854|                }
  126|       |
  127|  1.53k|                parsing_comment = true;
  128|  1.53k|                current_token   = source.substring_view(
  129|  1.53k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  1.53k|                        current_token.length() + 1u);
  131|  1.53k|            }
  132|   430k|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 640, False: 429k]
  ------------------
  133|    640|            {
  134|       |                // simply append the character
  135|    640|                current_token = source.substring_view(
  136|    640|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|    640|                        current_token.length() + 1u);
  138|    640|            }
  139|   429k|            else
  140|   429k|            {
  141|       |                // Not parsing a comment
  142|   429k|                switch (c)
  143|   429k|                {
  144|  4.28k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 4.28k, False: 425k]
  ------------------
  145|  9.88k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 5.59k, False: 424k]
  ------------------
  146|  9.88k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 0, False: 429k]
  ------------------
  147|  9.88k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 583, False: 9.29k]
  ------------------
  148|    583|                        {
  149|    583|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|    583|                            continue;
  152|    583|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  9.29k|                        tokens.emplace_back(ParseToken(
  156|  9.29k|                                source.substring_view(
  157|  9.29k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  9.29k|                                        current_token.length()),
  159|  9.29k|                                current_line_number, current_column - current_token.length()));
  160|  9.29k|                        current_token = phi::string_view{};
  161|  9.29k|                        break;
  162|  47.2k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 47.2k, False: 382k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  47.2k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 45.7k, False: 1.47k]
  ------------------
  165|  45.7k|                        {
  166|  45.7k|                            current_token = source.substring_view(
  167|  45.7k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  45.7k|                                    current_token.length() + 1u);
  169|  45.7k|                            tokens.emplace_back(ParseToken(
  170|  45.7k|                                    source.substring_view(
  171|  45.7k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  45.7k|                                                    token_begin),
  173|  45.7k|                                            current_token.length()),
  174|  45.7k|                                    current_line_number,
  175|  45.7k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  45.7k|                            current_token = phi::string_view{};
  178|  45.7k|                        }
  179|  1.47k|                        else
  180|  1.47k|                        {
  181|       |                            // Orphan colon
  182|  1.47k|                            token_begin = i;
  183|       |
  184|  1.47k|                            tokens.emplace_back(
  185|  1.47k|                                    Token::Type::Colon,
  186|  1.47k|                                    source.substring_view(
  187|  1.47k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  1.47k|                                                    token_begin),
  189|  1.47k|                                            1u),
  190|  1.47k|                                    current_line_number, current_column);
  191|  1.47k|                        }
  192|  47.2k|                        break;
  193|  20.5k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 20.5k, False: 409k]
  ------------------
  194|  25.0k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 4.47k, False: 425k]
  ------------------
  195|  29.5k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 4.53k, False: 425k]
  ------------------
  196|  29.5k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 27.1k, False: 2.41k]
  ------------------
  197|  27.1k|                        {
  198|  27.1k|                            tokens.emplace_back(ParseToken(
  199|  27.1k|                                    source.substring_view(
  200|  27.1k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  27.1k|                                                    token_begin),
  202|  27.1k|                                            current_token.length()),
  203|  27.1k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  27.1k|                            current_token = phi::string_view{};
  206|  27.1k|                        }
  207|       |
  208|  29.5k|                        Token::Type type;
  209|  29.5k|                        switch (c)
  210|  29.5k|                        {
  211|  20.5k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 20.5k, False: 9.01k]
  ------------------
  212|  20.5k|                                type = Token::Type::Comma;
  213|  20.5k|                                break;
  214|  4.47k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 4.47k, False: 25.0k]
  ------------------
  215|  4.47k|                                type = Token::Type::OpenBracket;
  216|  4.47k|                                break;
  217|  4.53k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 4.53k, False: 25.0k]
  ------------------
  218|  4.53k|                                type = Token::Type::ClosingBracket;
  219|  4.53k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 29.5k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  29.5k|#endif
  225|  29.5k|                        }
  226|       |
  227|  29.5k|                        token_begin = i;
  228|       |
  229|  29.5k|                        tokens.emplace_back(
  230|  29.5k|                                type,
  231|  29.5k|                                source.substring_view(
  232|  29.5k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  29.5k|                                        1u),
  234|  29.5k|                                current_line_number, current_column);
  235|  29.5k|                        break;
  236|       |
  237|   343k|                    default:
  ------------------
  |  Branch (237:21): [True: 343k, False: 86.6k]
  ------------------
  238|   343k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 104k, False: 239k]
  ------------------
  239|   104k|                        {
  240|   104k|                            token_begin = i;
  241|   104k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   343k|                        current_token = source.substring_view(
  245|   343k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   343k|                                current_token.length() + 1u);
  247|   429k|                }
  248|   429k|            }
  249|       |
  250|   450k|            current_column += 1u;
  251|   450k|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  4.17k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 3.12k, False: 1.05k]
  ------------------
  255|  3.12k|        {
  256|  3.12k|            tokens.emplace_back(
  257|  3.12k|                    ParseToken(source.substring_view(
  258|  3.12k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  3.12k|                                       current_token.length()),
  260|  3.12k|                               current_line_number, current_column - current_token.length()));
  261|  3.12k|        }
  262|       |
  263|       |        // Finalize token stream
  264|  4.17k|        tokens.finalize();
  265|       |
  266|  4.17k|        return tokens;
  267|  4.17k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   105k|    {
   14|   105k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 1.11k, False: 104k]
  |  Branch (14:13): [True: 837, False: 104k]
  |  Branch (14:36): [True: 837, False: 276]
  ------------------
   15|    837|        {
   16|    837|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|    837|            if (number)
  ------------------
  |  Branch (18:17): [True: 251, False: 586]
  ------------------
   19|    251|            {
   20|    251|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|    251|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|    251|            }
   23|       |
   24|    586|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|    837|        }
   26|       |
   27|   104k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 520, False: 103k]
  |  Branch (27:13): [True: 1.13k, False: 103k]
  |  Branch (27:36): [True: 611, False: 103k]
  ------------------
   28|  1.13k|        {
   29|  1.13k|            return {Token::Type::Comment, token, line_number, column};
   30|  1.13k|        }
   31|       |
   32|   103k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 2.00k, False: 101k]
  ------------------
   33|  2.00k|        {
   34|  2.00k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  2.00k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  2.00k|        }
   37|       |
   38|   101k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 388, False: 100k]
  ------------------
   39|    388|        {
   40|    388|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|    388|        }
   42|       |
   43|   100k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 1.52k, False: 99.4k]
  ------------------
   44|  1.52k|        {
   45|  1.52k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  1.52k|                    static_cast<phi::uint32_t>(id)};
   47|  1.52k|        }
   48|       |
   49|  99.4k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 1.18k, False: 98.2k]
  ------------------
   50|  1.18k|        {
   51|  1.18k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  1.18k|                    static_cast<phi::uint32_t>(id)};
   53|  1.18k|        }
   54|       |
   55|  98.2k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 37.3k, False: 60.9k]
  ------------------
   56|  37.3k|        {
   57|  37.3k|            return {Token::Type::OpCode, token, line_number, column,
   58|  37.3k|                    static_cast<phi::uint32_t>(opcode)};
   59|  37.3k|        }
   60|       |
   61|  60.9k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  98.2k|    }

_ZN6ImVec2C2Ev:
  268|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

LLVMFuzzerTestOneInput:
    9|  4.17k|{
   10|  4.17k|    static dlxemu::Emulator emu;
   11|       |
   12|  4.17k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   13|       |
   14|  4.17k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   15|       |
   16|       |    // Parse it
   17|  4.17k|    editor.SetText(std::string(source.data(), source.length().unsafe()));
   18|  4.17k|    editor.m_FullText = editor.GetText();
   19|       |
   20|  4.17k|    emu.ParseProgram(editor.m_FullText);
   21|       |
   22|  4.17k|    editor.ColorizeInternal();
   23|       |
   24|  4.17k|    return 0;
   25|  4.17k|}


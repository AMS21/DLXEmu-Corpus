_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  194|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  199|  26.0k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  232|  5.21k|    {
  233|  5.21k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (233:13): [True: 1.38k, False: 3.82k]
  ------------------
  234|  1.38k|        {
  235|  1.38k|            return m_Line < other.m_Line;
  236|  1.38k|        }
  237|       |
  238|  3.82k|        return m_Column <= other.m_Column;
  239|  5.21k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  242|      1|    {
  243|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (243:13): [True: 0, False: 1]
  ------------------
  244|      0|        {
  245|      0|            return m_Line > other.m_Line;
  246|      0|        }
  247|       |
  248|      1|        return m_Column >= other.m_Column;
  249|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  256|   872k|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  284|      1|    {
  285|      1|        Colorize();
  286|      1|        m_Lines.emplace_back();
  287|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  290|      1|    {
  291|      1|        VerifyInternalState();
  292|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  340|  5.21k|    {
  341|  5.21k|        m_ErrorMarkers.clear();
  342|  5.21k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  405|  5.21k|    {
  406|  5.21k|        m_Breakpoints.clear();
  407|  5.21k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  485|  5.21k|    {
  486|  5.21k|        m_Lines.clear();
  487|  5.21k|        ResetState();
  488|  5.21k|        m_Lines.emplace_back();
  489|       |
  490|  5.21k|        for (const char character : text)
  ------------------
  |  Branch (490:35): [True: 955k, False: 5.21k]
  ------------------
  491|   955k|        {
  492|   955k|            if (character == '\r' ||
  ------------------
  |  Branch (492:17): [True: 343, False: 955k]
  |  Branch (492:17): [True: 40.9k, False: 914k]
  ------------------
  493|   955k|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (493:18): [True: 93.2k, False: 861k]
  |  Branch (493:48): [True: 51.5k, False: 41.7k]
  |  Branch (493:69): [True: 40.6k, False: 10.9k]
  ------------------
  494|  40.9k|            {
  495|       |                // ignore the carriage return character and control characters
  496|  40.9k|            }
  497|   914k|            else if (character == '\n')
  ------------------
  |  Branch (497:22): [True: 41.7k, False: 872k]
  ------------------
  498|  41.7k|            {
  499|  41.7k|                m_Lines.emplace_back();
  500|  41.7k|            }
  501|   872k|            else
  502|   872k|            {
  503|   872k|                m_Lines.back().emplace_back(static_cast<Char>(character), PaletteIndex::Default);
  504|   872k|            }
  505|   955k|        }
  506|       |
  507|  5.21k|        m_TextChanged = true;
  508|  5.21k|        m_ScrollToTop = true;
  509|       |
  510|  5.21k|        m_UndoBuffer.clear();
  511|  5.21k|        m_UndoIndex = 0u;
  512|       |
  513|  5.21k|        Colorize();
  514|  5.21k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  517|  5.21k|    {
  518|  5.21k|        const phi::u32 max_line = GetMaxLineNumber();
  519|       |
  520|  5.21k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  521|  5.21k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1484|      1|    {
 1485|       |        // Lines should never be empty
 1486|      1|        PHI_ASSERT(!m_Lines.empty());
 1487|       |
 1488|       |        // Verify Selection is still in a valid state
 1489|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1490|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1491|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1492|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1493|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1494|       |
 1495|       |        // Verify cursor position
 1496|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1497|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1498|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1499|       |
 1500|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1501|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1502|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1503|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1504|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1505|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1506|       |#endif
 1507|       |
 1508|       |        // Verify that all breakpoints are on existing lines
 1509|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1509:35): [True: 0, False: 1]
  ------------------
 1510|      0|        {
 1511|      0|            PHI_ASSERT(break_point != 0u);
 1512|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1513|      0|        }
 1514|       |
 1515|       |        // Verify that all error markers are on existing lines
 1516|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1516:34): [True: 0, False: 1]
  ------------------
 1517|      0|        {
 1518|      0|            const phi::u32 line_number = error_marker.first;
 1519|       |
 1520|      0|            PHI_ASSERT(line_number != 0u);
 1521|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1522|      0|        }
 1523|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1526|      1|    {
 1527|      1|        constexpr const static Palette palette = {{
 1528|      1|                0xff7f7f7f, // Default
 1529|      1|                0xffd69c56, // OpCode
 1530|      1|                0xff00ff00, // Register
 1531|      1|                0xff7070e0, // IntegerLiteral
 1532|      1|                0xff206020, // Comment
 1533|      1|                0xff101010, // Background
 1534|      1|                0xffe0e0e0, // Cursor
 1535|      1|                0x80a06020, // Selection
 1536|      1|                0x800020ff, // ErrorMarker
 1537|      1|                0x40f08000, // Breakpoint
 1538|      1|                0xff707000, // Line number
 1539|      1|                0x40000000, // Current line fill
 1540|      1|                0x40808080, // Current line fill (inactive)
 1541|      1|                0x40a0a0a0, // Current line edge
 1542|      1|        }};
 1543|       |
 1544|      1|        return palette;
 1545|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1710|  5.21k|    {
 1711|       |        // TODO: This is quite unreadable
 1712|  5.21k|        const phi::u32 to_line =
 1713|  5.21k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1713:17): [True: 5.21k, False: 0]
  ------------------
 1714|  5.21k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1715|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1716|       |
 1717|  5.21k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1718|  5.21k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1719|  5.21k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1720|  5.21k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1721|  5.21k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1826|  5.21k|    {
 1827|  5.21k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1828|  5.21k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1829|  5.21k|        PHI_ASSERT(start <= end);
 1830|       |
 1831|  5.21k|        std::string result;
 1832|       |
 1833|  5.21k|        phi::u32   lstart = start.m_Line;
 1834|  5.21k|        phi::u32   lend   = end.m_Line;
 1835|  5.21k|        phi::u32   istart = GetCharacterIndex(start);
 1836|  5.21k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1837|  5.21k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1838|  5.21k|        phi::usize size   = 0u;
 1839|       |
 1840|  52.1k|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1840:35): [True: 46.9k, False: 5.21k]
  ------------------
 1841|  46.9k|        {
 1842|  46.9k|            PHI_ASSERT(i < m_Lines.size());
 1843|  46.9k|            size += m_Lines[i.unsafe()].size();
 1844|  46.9k|        }
 1845|       |
 1846|  5.21k|        result.reserve((size + size / 8u).unsafe());
 1847|       |
 1848|   919k|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1848:16): [True: 759k, False: 160k]
  |  Branch (1848:16): [True: 914k, False: 5.21k]
  |  Branch (1848:33): [True: 155k, False: 5.21k]
  ------------------
 1849|   914k|        {
 1850|   914k|            PHI_ASSERT(lstart < m_Lines.size());
 1851|       |
 1852|   914k|            const Line& line = m_Lines[lstart.unsafe()];
 1853|   914k|            if (istart < line.size())
  ------------------
  |  Branch (1853:17): [True: 872k, False: 41.7k]
  ------------------
 1854|   872k|            {
 1855|   872k|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1856|   872k|                istart++;
 1857|   872k|            }
 1858|  41.7k|            else
 1859|  41.7k|            {
 1860|  41.7k|                istart = 0u;
 1861|  41.7k|                ++lstart;
 1862|       |
 1863|  41.7k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1863:21): [True: 41.7k, False: 0]
  ------------------
 1864|  41.7k|                {
 1865|  41.7k|                    result += '\n';
 1866|  41.7k|                }
 1867|  41.7k|            }
 1868|   914k|        }
 1869|       |
 1870|  5.21k|        return result;
 1871|  5.21k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2403|  10.4k|    {
 2404|  10.4k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2405|       |
 2406|  10.4k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2407|  10.4k|        phi::u32    index = 0u;
 2408|   577k|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2408:35): [True: 571k, False: 5.33k]
  |  Branch (2408:35): [True: 566k, False: 10.4k]
  |  Branch (2408:58): [True: 566k, False: 5.09k]
  ------------------
 2409|   566k|        {
 2410|   566k|            PHI_ASSERT(index < line.size());
 2411|   566k|            const Char character = line[index.unsafe()].m_Char;
 2412|       |
 2413|   566k|            if (character == '\t')
  ------------------
  |  Branch (2413:17): [True: 7.43k, False: 559k]
  ------------------
 2414|  7.43k|            {
 2415|  7.43k|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2416|  7.43k|            }
 2417|   559k|            else
 2418|   559k|            {
 2419|   559k|                ++column;
 2420|   559k|            }
 2421|       |
 2422|   566k|            index += UTF8CharLength(character);
 2423|   566k|        }
 2424|       |
 2425|  10.4k|        return index;
 2426|  10.4k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2473|  5.21k|    {
 2474|  5.21k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2474:13): [True: 0, False: 5.21k]
  ------------------
 2475|      0|        {
 2476|      0|            return 0u;
 2477|      0|        }
 2478|       |
 2479|  5.21k|        const Line& line = m_Lines[line_number.unsafe()];
 2480|  5.21k|        phi::u32    col  = 0u;
 2481|       |
 2482|   572k|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2482:32): [True: 566k, False: 5.21k]
  ------------------
 2483|   566k|        {
 2484|   566k|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2485|   566k|            if (character == '\t')
  ------------------
  |  Branch (2485:17): [True: 7.43k, False: 559k]
  ------------------
 2486|  7.43k|            {
 2487|  7.43k|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2488|  7.43k|            }
 2489|   559k|            else
 2490|   559k|            {
 2491|   559k|                col++;
 2492|   559k|            }
 2493|       |
 2494|   566k|            i += UTF8CharLength(character);
 2495|   566k|        }
 2496|       |
 2497|  5.21k|        return col;
 2498|  5.21k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2501|  5.21k|    {
 2502|  5.21k|        PHI_ASSERT(!m_Lines.empty());
 2503|       |
 2504|  5.21k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2505|  5.21k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3639|   306k|    {
 3640|   306k|        PaletteIndex palette_index{PaletteIndex::Default};
 3641|       |
 3642|       |        // Determine palette color
 3643|   306k|        switch (token.GetType())
 3644|   306k|        {
 3645|  2.03k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3645:13): [True: 2.03k, False: 304k]
  ------------------
 3646|  2.03k|                palette_index = PaletteIndex::Comment;
 3647|  2.03k|                break;
 3648|  2.05k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3648:13): [True: 2.05k, False: 304k]
  ------------------
 3649|  4.87k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3649:13): [True: 2.82k, False: 303k]
  ------------------
 3650|  4.87k|                palette_index = PaletteIndex::IntegerLiteral;
 3651|  4.87k|                break;
 3652|  64.4k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3652:13): [True: 64.4k, False: 241k]
  ------------------
 3653|  64.4k|                palette_index = PaletteIndex::OpCode;
 3654|  64.4k|                break;
 3655|  1.82k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3655:13): [True: 1.82k, False: 304k]
  ------------------
 3656|  4.02k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3656:13): [True: 2.19k, False: 304k]
  ------------------
 3657|  4.66k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3657:13): [True: 644, False: 305k]
  ------------------
 3658|  4.66k|                palette_index = PaletteIndex::Register;
 3659|  4.66k|                break;
 3660|  41.7k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3660:13): [True: 41.7k, False: 264k]
  ------------------
 3661|  41.7k|                return;
 3662|   188k|            default:
  ------------------
  |  Branch (3662:13): [True: 188k, False: 117k]
  ------------------
 3663|   188k|                break;
 3664|   306k|        }
 3665|       |
 3666|   264k|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3667|   264k|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3668|       |
 3669|   264k|        for (phi::u64 index{token.GetColumn() - 1u};
 3670|  1.11M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3670:14): [True: 853k, False: 264k]
  ------------------
 3671|   853k|        {
 3672|   853k|            PHI_ASSERT(index < line.size());
 3673|   853k|            line[index.unsafe()].m_ColorIndex = palette_index;
 3674|   853k|        }
 3675|   264k|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3678|  5.21k|    {
 3679|  5.21k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3680|       |
 3681|  5.21k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3681:38): [True: 306k, False: 5.21k]
  ------------------
 3682|   306k|        {
 3683|   306k|            ColorizeToken(token);
 3684|   306k|        }
 3685|  5.21k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3688|  5.21k|    {
 3689|  5.21k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3690|  5.21k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3691|  5.21k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3692|       |
 3693|       |        // Clear breakpoints and markers
 3694|  5.21k|        ClearBreakPoints();
 3695|  5.21k|        ClearErrorMarkers();
 3696|  5.21k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  132|   566k|{
  133|   566k|    return UTF8CharLength(static_cast<char>(character));
  134|   566k|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  102|  1.13M|{
  103|  1.13M|    if ((character & 0xFE) == 0xFC)
  ------------------
  |  Branch (103:9): [True: 592, False: 1.13M]
  ------------------
  104|    592|    {
  105|    592|        return 6_u8;
  106|    592|    }
  107|       |
  108|  1.13M|    if ((character & 0xFC) == 0xF8)
  ------------------
  |  Branch (108:9): [True: 1.19k, False: 1.13M]
  ------------------
  109|  1.19k|    {
  110|  1.19k|        return 5_u8;
  111|  1.19k|    }
  112|       |
  113|  1.13M|    if ((character & 0xF8) == 0xF0)
  ------------------
  |  Branch (113:9): [True: 1.20k, False: 1.13M]
  ------------------
  114|  1.20k|    {
  115|  1.20k|        return 4_u8;
  116|  1.20k|    }
  117|       |
  118|  1.13M|    if ((character & 0xF0) == 0xE0)
  ------------------
  |  Branch (118:9): [True: 1.82k, False: 1.12M]
  ------------------
  119|  1.82k|    {
  120|  1.82k|        return 3_u8;
  121|  1.82k|    }
  122|       |
  123|  1.12M|    if ((character & 0xE0) == 0xC0)
  ------------------
  |  Branch (123:9): [True: 7.55k, False: 1.12M]
  ------------------
  124|  7.55k|    {
  125|  7.55k|        return 2_u8;
  126|  7.55k|    }
  127|       |
  128|  1.12M|    return 1_u8;
  129|  1.12M|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  183|  5.21k|    {
  184|  5.21k|        return m_DLXProgram;
  185|  5.21k|    }
_ZN6dlxemu8Emulator12ParseProgramEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  188|  5.21k|    {
  189|  5.21k|        m_DLXProgram = dlx::Parser::Parse(source);
  190|       |
  191|  5.21k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (191:13): [True: 219, False: 4.99k]
  ------------------
  192|    219|        {
  193|    219|            m_Processor.LoadProgram(m_DLXProgram);
  194|    219|        }
  195|  5.21k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  208|  5.21k|    {
  209|  5.21k|        return m_CodeEditor;
  210|  5.21k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   38|      1|    {
   39|      1|        Shutdown();
   40|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  108|      1|    {
  109|      1|        if (imgui_initialized)
  ------------------
  |  Branch (109:13): [True: 0, False: 1]
  ------------------
  110|      0|        {
  111|      0|            ShutdownImGui();
  112|      0|        }
  113|       |
  114|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (114:13): [True: 0, False: 1]
  ------------------
  115|      0|        {
  116|      0|            glfwDestroyWindow(m_Window);
  117|      0|        }
  118|       |
  119|      1|        if (glfw_initialized)
  ------------------
  |  Branch (119:13): [True: 0, False: 1]
  ------------------
  120|      0|        {
  121|      0|            glfwTerminate();
  122|      0|        }
  123|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  99.9k|        {
  173|  99.9k|            PHI_ASSERT(index < 3u);
  174|       |
  175|  99.9k|            switch (index.unsafe())
  176|  99.9k|            {
  177|  44.8k|                case 0:
  ------------------
  |  Branch (177:17): [True: 44.8k, False: 55.1k]
  ------------------
  178|  44.8k|                    return m_Arg1Type;
  179|       |
  180|  27.7k|                case 1:
  ------------------
  |  Branch (180:17): [True: 27.7k, False: 72.2k]
  ------------------
  181|  27.7k|                    return m_Arg2Type;
  182|       |
  183|  27.4k|                case 2:
  ------------------
  |  Branch (183:17): [True: 27.4k, False: 72.5k]
  ------------------
  184|  27.4k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 99.9k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  99.9k|#endif
  191|  99.9k|            }
  192|  99.9k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  27.0k|        {
  199|  27.0k|            phi::u8 number_of_argument_required = static_cast<phi::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  27.0k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 26.6k, False: 339]
  ------------------
  203|  26.6k|            {
  204|  26.6k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  205|  26.6k|            }
  206|  27.0k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 14.8k, False: 12.1k]
  ------------------
  207|  14.8k|            {
  208|  14.8k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  209|  14.8k|            }
  210|  27.0k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 7.37k, False: 19.6k]
  ------------------
  211|  7.37k|            {
  212|  7.37k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  213|  7.37k|            }
  214|       |
  215|  27.0k|            return number_of_argument_required;
  216|  27.0k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  27.0k|        {
  225|  27.0k|            return m_Executor;
  226|  27.0k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  13.9k|    {
   38|  13.9k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  13.9k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  13.9k|                                         static_cast<underlying_t>(rhs));
   42|  13.9k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  13.9k|    {
   55|  13.9k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  13.9k|        return static_cast<underlying_t>(type & test) != 0;
   58|  13.9k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|   109k|    {
   31|   109k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 1.91k, False: 107k]
  ------------------
   32|  1.91k|        {
   33|  1.91k|            return true;
   34|  1.91k|        }
   35|       |
   36|   107k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 345, False: 106k]
  ------------------
   37|    345|        {
   38|    345|            return true;
   39|    345|        }
   40|       |
   41|   106k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 37.5k, False: 69.2k]
  ------------------
   42|  37.5k|        {
   43|  37.5k|            return true;
   44|  37.5k|        }
   45|       |
   46|  69.2k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 322, False: 68.8k]
  ------------------
   47|    322|        {
   48|    322|            return true;
   49|    322|        }
   50|       |
   51|  68.8k|        return false;
   52|  69.2k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  68.8k|    {
   56|  68.8k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 68.8k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  68.8k|        const char first_char = token.at(0u);
   62|       |
   63|  68.8k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 14.2k, False: 54.6k]
  ------------------
   64|  14.2k|        {
   65|  14.2k|            return phi::is_alpha(first_char);
   66|  14.2k|        }
   67|       |
   68|  54.6k|        phi::boolean just_under_scores = (first_char == '_');
   69|  54.6k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 3.37k, False: 51.2k]
  |  Branch (69:13): [True: 2.60k, False: 52.0k]
  |  Branch (69:43): [True: 2.60k, False: 767]
  ------------------
   70|  2.60k|        {
   71|  2.60k|            return false;
   72|  2.60k|        }
   73|       |
   74|   183k|        for (phi::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 142k, False: 40.5k]
  ------------------
   75|   142k|        {
   76|   142k|            const char c{token.at(index)};
   77|       |
   78|   142k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 129k, False: 12.8k]
  ------------------
   79|   129k|            {
   80|   129k|                just_under_scores = false;
   81|   129k|            }
   82|  12.8k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 1.27k, False: 11.5k]
  ------------------
   83|  1.27k|            {
   84|  1.27k|                continue;
   85|  1.27k|            }
   86|  11.5k|            else
   87|  11.5k|            {
   88|  11.5k|                return false;
   89|  11.5k|            }
   90|   142k|        }
   91|       |
   92|  40.5k|        return !just_under_scores;
   93|  52.0k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   98|   207k|    {
   99|   207k|        if (token.is_empty())
  ------------------
  |  Branch (99:13): [True: 0, False: 207k]
  ------------------
  100|      0|        {
  101|      0|            return {};
  102|      0|        }
  103|       |
  104|   207k|        if (token.length() == 1u)
  ------------------
  |  Branch (104:13): [True: 22.3k, False: 185k]
  ------------------
  105|  22.3k|        {
  106|  22.3k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (106:17): [True: 2.68k, False: 19.6k]
  ------------------
  107|  2.68k|            {
  108|  2.68k|                return static_cast<phi::int16_t>(token.at(0u) - '0');
  109|  2.68k|            }
  110|       |
  111|  19.6k|            return {};
  112|  22.3k|        }
  113|       |
  114|       |        // Disallow trailing separators
  115|   185k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (115:13): [True: 212, False: 184k]
  ------------------
  116|    212|        {
  117|    212|            return {};
  118|    212|        }
  119|       |
  120|   184k|        phi::int32_t number{0};
  121|   184k|        phi::boolean is_negative{false};
  122|   184k|        phi::boolean starts_with_zero{false};
  123|   184k|        phi::boolean parsing_binary{false};
  124|   184k|        phi::boolean parsing_octal{false};
  125|   184k|        phi::boolean parsing_hexadecimal{false};
  126|   184k|        phi::boolean parsed_something{false};
  127|   184k|        phi::boolean parsed_separator{false};
  128|       |
  129|       |        // TODO: Move x'th character checks out of the for loop
  130|       |
  131|   207k|        for (phi::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (131:37): [True: 204k, False: 2.62k]
  ------------------
  132|   204k|        {
  133|   204k|            const char c{token.at(index)};
  134|       |
  135|       |            // First character
  136|   204k|            if (index == 0u)
  ------------------
  |  Branch (136:17): [True: 184k, False: 19.5k]
  ------------------
  137|   184k|            {
  138|   184k|                if (c == '+')
  ------------------
  |  Branch (138:21): [True: 725, False: 184k]
  ------------------
  139|    725|                {
  140|    725|                    continue;
  141|    725|                }
  142|       |
  143|   184k|                if (c == '-')
  ------------------
  |  Branch (143:21): [True: 2.03k, False: 182k]
  ------------------
  144|  2.03k|                {
  145|  2.03k|                    is_negative = true;
  146|  2.03k|                    continue;
  147|  2.03k|                }
  148|       |
  149|   182k|                if (c == '0')
  ------------------
  |  Branch (149:21): [True: 2.25k, False: 179k]
  ------------------
  150|  2.25k|                {
  151|  2.25k|                    starts_with_zero = true;
  152|  2.25k|                    continue;
  153|  2.25k|                }
  154|       |
  155|   179k|                if (c == '\'')
  ------------------
  |  Branch (155:21): [True: 219, False: 179k]
  ------------------
  156|    219|                {
  157|    219|                    return {};
  158|    219|                }
  159|   179k|            }
  160|       |
  161|       |            // Second character
  162|   199k|            if (index == 1u)
  ------------------
  |  Branch (162:17): [True: 8.78k, False: 190k]
  ------------------
  163|  8.78k|            {
  164|  8.78k|                if (starts_with_zero)
  ------------------
  |  Branch (164:21): [True: 2.25k, False: 6.52k]
  ------------------
  165|  2.25k|                {
  166|       |                    // Binary
  167|  2.25k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (167:25): [True: 206, False: 2.05k]
  |  Branch (167:37): [True: 218, False: 1.83k]
  ------------------
  168|    424|                    {
  169|    424|                        parsing_binary = true;
  170|    424|                        continue;
  171|    424|                    }
  172|       |
  173|       |                    // Hexadecimal
  174|  1.83k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (174:25): [True: 418, False: 1.41k]
  |  Branch (174:37): [True: 301, False: 1.11k]
  ------------------
  175|    719|                    {
  176|    719|                        parsing_hexadecimal = true;
  177|    719|                        continue;
  178|    719|                    }
  179|       |
  180|       |                    // Octal
  181|  1.11k|                    parsing_octal = true;
  182|  1.11k|                }
  183|  8.78k|            }
  184|       |
  185|       |            // Handle separators
  186|   198k|            if (c == '\'')
  ------------------
  |  Branch (186:17): [True: 666, False: 197k]
  ------------------
  187|    666|            {
  188|    666|                if (parsed_separator)
  ------------------
  |  Branch (188:21): [True: 322, False: 344]
  ------------------
  189|    322|                {
  190|    322|                    return {};
  191|    322|                }
  192|       |
  193|    344|                parsed_separator = true;
  194|    344|                continue;
  195|    666|            }
  196|       |
  197|       |            // Check for over/underflow
  198|   197k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (198:17): [True: 4.86k, False: 192k]
  |  Branch (198:32): [True: 202, False: 4.66k]
  ------------------
  199|    202|            {
  200|       |                // Would underflow
  201|    202|                return {};
  202|    202|            }
  203|   197k|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (203:17): [True: 192k, False: 4.66k]
  |  Branch (203:17): [True: 971, False: 196k]
  |  Branch (203:33): [True: 971, False: 191k]
  ------------------
  204|    971|            {
  205|       |                // Would overflow
  206|    971|                return {};
  207|    971|            }
  208|       |
  209|   196k|            parsed_separator = false;
  210|   196k|            parsed_something = true;
  211|       |
  212|   196k|            if (parsing_binary)
  ------------------
  |  Branch (212:17): [True: 584, False: 195k]
  ------------------
  213|    584|            {
  214|    584|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (214:21): [True: 196, False: 388]
  ------------------
  215|    196|                {
  216|    196|                    return {};
  217|    196|                }
  218|       |
  219|    388|                number <<= 1;
  220|    388|                number |= (c - '0');
  221|    388|            }
  222|   195k|            else if (parsing_octal)
  ------------------
  |  Branch (222:22): [True: 1.31k, False: 194k]
  ------------------
  223|  1.31k|            {
  224|  1.31k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (224:21): [True: 922, False: 388]
  ------------------
  225|    922|                {
  226|    922|                    return {};
  227|    922|                }
  228|       |
  229|    388|                number <<= 3;
  230|    388|                number |= (c - '0');
  231|    388|            }
  232|   194k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (232:22): [True: 1.18k, False: 193k]
  ------------------
  233|  1.18k|            {
  234|  1.18k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (234:21): [True: 413, False: 775]
  ------------------
  235|    413|                {
  236|    413|                    return {};
  237|    413|                }
  238|       |
  239|    775|                number <<= 4;
  240|    775|                number |= phi::hex_digit_value(c).unsafe();
  241|    775|            }
  242|   193k|            else
  243|   193k|            {
  244|   193k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (244:21): [True: 178k, False: 14.2k]
  ------------------
  245|   178k|                {
  246|   178k|                    return {};
  247|   178k|                }
  248|       |
  249|       |                // Disallow leading zeros
  250|  14.2k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (250:21): [True: 5.38k, False: 8.89k]
  |  Branch (250:36): [True: 194, False: 5.19k]
  ------------------
  251|    194|                {
  252|    194|                    return {};
  253|    194|                }
  254|       |
  255|  14.0k|                number *= 10;
  256|  14.0k|                number += (c - '0');
  257|  14.0k|            }
  258|   196k|        }
  259|       |
  260|  2.62k|        if (parsed_something)
  ------------------
  |  Branch (260:13): [True: 2.26k, False: 355]
  ------------------
  261|  2.26k|        {
  262|       |            // Check for over/underflow
  263|  2.26k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (263:17): [True: 1.05k, False: 1.21k]
  |  Branch (263:32): [True: 459, False: 595]
  ------------------
  264|    459|            {
  265|       |                // Would underflow
  266|    459|                return {};
  267|    459|            }
  268|  1.81k|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (268:17): [True: 1.21k, False: 595]
  |  Branch (268:17): [True: 251, False: 1.55k]
  |  Branch (268:33): [True: 251, False: 964]
  ------------------
  269|    251|            {
  270|       |                // Would overflow
  271|    251|                return {};
  272|    251|            }
  273|       |
  274|  1.55k|            if (is_negative)
  ------------------
  |  Branch (274:17): [True: 595, False: 964]
  ------------------
  275|    595|            {
  276|    595|                return static_cast<phi::int16_t>(-number);
  277|    595|            }
  278|       |
  279|    964|            return static_cast<phi::int16_t>(number);
  280|  1.55k|        }
  281|       |
  282|    355|        return {};
  283|  2.62k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  14.1k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finalized);
   61|       |#endif
   62|       |
   63|  14.1k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 110k, False: 0]
  ------------------
   64|   110k|            {
   65|   110k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 14.1k, False: 96.7k]
  ------------------
   66|  14.1k|                {
   67|  14.1k|                    return &token;
   68|  14.1k|                }
   69|   110k|            }
   70|       |
   71|      0|            return nullptr;
   72|  14.1k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  45.7k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  45.7k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  45.7k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   209k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|   209k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   209k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  51.0k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  51.0k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  51.0k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   16|  27.0k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   21|  6.21k|    {
   22|  6.21k|        PHI_ASSERT(argument_number < 3u);
   23|       |
   24|  6.21k|        switch (argument_number.unsafe())
   25|  6.21k|        {
   26|  5.38k|            case 0u:
  ------------------
  |  Branch (26:13): [True: 5.38k, False: 825]
  ------------------
   27|  5.38k|                m_Arg1 = argument;
   28|  5.38k|                break;
   29|    493|            case 1u:
  ------------------
  |  Branch (29:13): [True: 493, False: 5.71k]
  ------------------
   30|    493|                m_Arg2 = argument;
   31|    493|                break;
   32|    332|            case 2u:
  ------------------
  |  Branch (32:13): [True: 332, False: 5.87k]
  ------------------
   33|    332|                m_Arg3 = argument;
   34|    332|                break;
   35|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   36|      0|            default:
  ------------------
  |  Branch (36:13): [True: 0, False: 6.21k]
  ------------------
   37|      0|                PHI_ASSERT_NOT_REACHED();
   38|  6.21k|#endif
   39|  6.21k|        }
   40|  6.21k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   21|  87.2k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  166|  1.17k|    {
  167|  1.17k|        InstructionArgument arg;
  168|  1.17k|        arg.m_Type                   = ArgumentType::IntRegister;
  169|  1.17k|        arg.register_int.register_id = id;
  170|  1.17k|        return arg;
  171|  1.17k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  174|    195|    {
  175|    195|        InstructionArgument arg;
  176|    195|        arg.m_Type                     = ArgumentType::FloatRegister;
  177|    195|        arg.register_float.register_id = id;
  178|    195|        return arg;
  179|    195|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  182|  1.34k|    {
  183|  1.34k|        InstructionArgument arg;
  184|  1.34k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  185|  1.34k|        arg.immediate_value.signed_value = value;
  186|  1.34k|        return arg;
  187|  1.34k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  191|    226|    {
  192|    226|        InstructionArgument arg;
  193|    226|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  194|    226|        arg.address_displacement.register_id  = id;
  195|    226|        arg.address_displacement.displacement = displacement;
  196|    226|        return arg;
  197|    226|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  200|  3.26k|    {
  201|  3.26k|        InstructionArgument arg;
  202|  3.26k|        arg.m_Type           = ArgumentType::Label;
  203|  3.26k|        arg.label.label_name = label_name;
  204|  3.26k|        return arg;
  205|  3.26k|    }

_ZN3dlx21LookUpInstructionInfoENS_6OpCodeE:
  449|  27.0k|    {
  450|  27.0k|        return instruction_table.at(static_cast<phi::size_t>(instruction));
  451|  27.0k|    }

_ZN3dlx11IntRegisterC2Ev:
   12|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   40|      1|    {
   41|      1|        m_IsReadOnly = read_only;
   42|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   12|      1|    {
   13|      1|        m_Values.resize(starting_size.unsafe());
   14|      1|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   21|   304k|    {
   22|   304k|        switch (token.length().unsafe())
   23|   304k|        {
   24|       |            // 1 character OpCodes
   25|  34.5k|            case 1: {
  ------------------
  |  Branch (25:13): [True: 34.5k, False: 270k]
  ------------------
   26|  34.5k|                const char c1 = token[0u];
   27|       |
   28|  34.5k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (28:21): [True: 13.8k, False: 20.7k]
  ------------------
   29|  13.8k|                {
   30|  13.8k|                    return OpCode::J;
   31|  13.8k|                }
   32|  20.7k|                break;
   33|  34.5k|            }
   34|       |
   35|       |            // 2 character OpCodes
   36|  52.9k|            case 2: {
  ------------------
  |  Branch (36:13): [True: 52.9k, False: 251k]
  ------------------
   37|  52.9k|                const char c1 = token[0u];
   38|  52.9k|                const char c2 = token[1u];
   39|       |
   40|  52.9k|                switch (c1)
  ------------------
  |  Branch (40:25): [True: 32.2k, False: 20.7k]
  ------------------
   41|  52.9k|                {
   42|  2.25k|                    case 'J':
  ------------------
  |  Branch (42:21): [True: 2.25k, False: 50.6k]
  ------------------
   43|  3.39k|                    case 'j':
  ------------------
  |  Branch (43:21): [True: 1.14k, False: 51.8k]
  ------------------
   44|  3.39k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (44:29): [True: 425, False: 2.97k]
  ------------------
   45|    425|                        {
   46|    425|                            return OpCode::JR;
   47|    425|                        }
   48|  2.97k|                        break;
   49|       |
   50|  4.04k|                    case 'L':
  ------------------
  |  Branch (50:21): [True: 4.04k, False: 48.9k]
  ------------------
   51|  6.61k|                    case 'l':
  ------------------
  |  Branch (51:21): [True: 2.57k, False: 50.3k]
  ------------------
   52|  6.61k|                        switch (c2)
  ------------------
  |  Branch (52:33): [True: 3.52k, False: 3.09k]
  ------------------
   53|  6.61k|                        {
   54|    198|                            case 'B':
  ------------------
  |  Branch (54:29): [True: 198, False: 6.42k]
  ------------------
   55|    778|                            case 'b':
  ------------------
  |  Branch (55:29): [True: 580, False: 6.03k]
  ------------------
   56|    778|                                return OpCode::LB;
   57|    199|                            case 'D':
  ------------------
  |  Branch (57:29): [True: 199, False: 6.42k]
  ------------------
   58|    530|                            case 'd':
  ------------------
  |  Branch (58:29): [True: 331, False: 6.28k]
  ------------------
   59|    530|                                return OpCode::LD;
   60|    412|                            case 'F':
  ------------------
  |  Branch (60:29): [True: 412, False: 6.20k]
  ------------------
   61|    657|                            case 'f':
  ------------------
  |  Branch (61:29): [True: 245, False: 6.37k]
  ------------------
   62|    657|                                return OpCode::LF;
   63|    290|                            case 'H':
  ------------------
  |  Branch (63:29): [True: 290, False: 6.32k]
  ------------------
   64|    488|                            case 'h':
  ------------------
  |  Branch (64:29): [True: 198, False: 6.42k]
  ------------------
   65|    488|                                return OpCode::LH;
   66|    195|                            case 'W':
  ------------------
  |  Branch (66:29): [True: 195, False: 6.42k]
  ------------------
   67|    645|                            case 'w':
  ------------------
  |  Branch (67:29): [True: 450, False: 6.16k]
  ------------------
   68|    645|                                return OpCode::LW;
   69|  6.61k|                        }
   70|  3.52k|                        break;
   71|  3.52k|                    case 'O':
  ------------------
  |  Branch (71:21): [True: 785, False: 52.1k]
  ------------------
   72|  2.10k|                    case 'o':
  ------------------
  |  Branch (72:21): [True: 1.31k, False: 51.6k]
  ------------------
   73|  2.10k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (73:29): [True: 402, False: 1.69k]
  ------------------
   74|    402|                        {
   75|    402|                            return OpCode::OR;
   76|    402|                        }
   77|  1.69k|                        break;
   78|  3.55k|                    case 'S':
  ------------------
  |  Branch (78:21): [True: 3.55k, False: 49.3k]
  ------------------
   79|  8.58k|                    case 's':
  ------------------
  |  Branch (79:21): [True: 5.03k, False: 47.9k]
  ------------------
   80|  8.58k|                        switch (c2)
  ------------------
  |  Branch (80:33): [True: 3.42k, False: 5.16k]
  ------------------
   81|  8.58k|                        {
   82|    202|                            case 'B':
  ------------------
  |  Branch (82:29): [True: 202, False: 8.38k]
  ------------------
   83|    782|                            case 'b':
  ------------------
  |  Branch (83:29): [True: 580, False: 8.00k]
  ------------------
   84|    782|                                return OpCode::SB;
   85|  1.26k|                            case 'D':
  ------------------
  |  Branch (85:29): [True: 1.26k, False: 7.32k]
  ------------------
   86|  1.45k|                            case 'd':
  ------------------
  |  Branch (86:29): [True: 194, False: 8.39k]
  ------------------
   87|  1.45k|                                return OpCode::SD;
   88|    195|                            case 'F':
  ------------------
  |  Branch (88:29): [True: 195, False: 8.38k]
  ------------------
   89|    389|                            case 'f':
  ------------------
  |  Branch (89:29): [True: 194, False: 8.39k]
  ------------------
   90|    389|                                return OpCode::SF;
   91|    258|                            case 'H':
  ------------------
  |  Branch (91:29): [True: 258, False: 8.32k]
  ------------------
   92|  1.80k|                            case 'h':
  ------------------
  |  Branch (92:29): [True: 1.55k, False: 7.03k]
  ------------------
   93|  1.80k|                                return OpCode::SH;
   94|    329|                            case 'w':
  ------------------
  |  Branch (94:29): [True: 329, False: 8.25k]
  ------------------
   95|    726|                            case 'W':
  ------------------
  |  Branch (95:29): [True: 397, False: 8.18k]
  ------------------
   96|    726|                                return OpCode::SW;
   97|  8.58k|                        }
   98|  3.42k|                        break;
   99|  52.9k|                }
  100|  43.8k|                break;
  101|  52.9k|            }
  102|       |
  103|       |            // 3 character OpCodes
  104|  65.5k|            case 3: {
  ------------------
  |  Branch (104:13): [True: 65.5k, False: 239k]
  ------------------
  105|  65.5k|                const char c1 = token[0u];
  106|  65.5k|                const char c2 = token[1u];
  107|  65.5k|                const char c3 = token[2u];
  108|       |
  109|  65.5k|                switch (c1)
  ------------------
  |  Branch (109:25): [True: 17.6k, False: 47.8k]
  ------------------
  110|  65.5k|                {
  111|  3.46k|                    case 'A':
  ------------------
  |  Branch (111:21): [True: 3.46k, False: 62.0k]
  ------------------
  112|  3.87k|                    case 'a':
  ------------------
  |  Branch (112:21): [True: 411, False: 65.1k]
  ------------------
  113|  3.87k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (113:29): [True: 944, False: 2.93k]
  |  Branch (113:29): [True: 548, False: 3.32k]
  |  Branch (113:45): [True: 548, False: 396]
  ------------------
  114|    548|                        {
  115|    548|                            return OpCode::ADD;
  116|    548|                        }
  117|  3.32k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (117:34): [True: 2.10k, False: 1.22k]
  |  Branch (117:34): [True: 727, False: 2.60k]
  |  Branch (117:50): [True: 727, False: 1.37k]
  ------------------
  118|    727|                        {
  119|    727|                            return OpCode::AND;
  120|    727|                        }
  121|  2.60k|                        break;
  122|       |
  123|  2.60k|                    case 'D':
  ------------------
  |  Branch (123:21): [True: 690, False: 64.8k]
  ------------------
  124|  2.04k|                    case 'd':
  ------------------
  |  Branch (124:21): [True: 1.35k, False: 64.1k]
  ------------------
  125|  2.04k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (125:29): [True: 1.48k, False: 553]
  |  Branch (125:29): [True: 1.03k, False: 1.01k]
  |  Branch (125:45): [True: 1.03k, False: 458]
  ------------------
  126|  1.03k|                        {
  127|  1.03k|                            return OpCode::DIV;
  128|  1.03k|                        }
  129|  1.01k|                        break;
  130|       |
  131|  1.04k|                    case 'E':
  ------------------
  |  Branch (131:21): [True: 1.04k, False: 64.4k]
  ------------------
  132|  3.36k|                    case 'e':
  ------------------
  |  Branch (132:21): [True: 2.31k, False: 63.2k]
  ------------------
  133|  3.36k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (133:29): [True: 1.53k, False: 1.82k]
  ------------------
  134|  1.53k|                        {
  135|  1.53k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (135:33): [True: 389, False: 1.14k]
  ------------------
  136|    389|                            {
  137|    389|                                return OpCode::EQD;
  138|    389|                            }
  139|  1.14k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (139:38): [True: 585, False: 562]
  ------------------
  140|    585|                            {
  141|    585|                                return OpCode::EQF;
  142|    585|                            }
  143|  1.53k|                        }
  144|  2.38k|                        break;
  145|       |
  146|  2.38k|                    case 'G':
  ------------------
  |  Branch (146:21): [True: 1.34k, False: 64.1k]
  ------------------
  147|  3.32k|                    case 'g':
  ------------------
  |  Branch (147:21): [True: 1.98k, False: 63.5k]
  ------------------
  148|  3.32k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (148:29): [True: 1.48k, False: 1.84k]
  ------------------
  149|  1.48k|                        {
  150|  1.48k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (150:33): [True: 389, False: 1.09k]
  ------------------
  151|    389|                            {
  152|    389|                                return OpCode::GED;
  153|    389|                            }
  154|  1.09k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (154:38): [True: 644, False: 451]
  ------------------
  155|    644|                            {
  156|    644|                                return OpCode::GEF;
  157|    644|                            }
  158|  1.48k|                        }
  159|  1.84k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (159:34): [True: 1.49k, False: 344]
  ------------------
  160|  1.49k|                        {
  161|  1.49k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (161:33): [True: 772, False: 725]
  ------------------
  162|    772|                            {
  163|    772|                                return OpCode::GTD;
  164|    772|                            }
  165|    725|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (165:33): [True: 516, False: 209]
  ------------------
  166|    516|                            {
  167|    516|                                return OpCode::GTF;
  168|    516|                            }
  169|    725|                        }
  170|  1.00k|                        break;
  171|       |
  172|  1.67k|                    case 'J':
  ------------------
  |  Branch (172:21): [True: 1.67k, False: 63.8k]
  ------------------
  173|  2.02k|                    case 'j':
  ------------------
  |  Branch (173:21): [True: 354, False: 65.1k]
  ------------------
  174|  2.02k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (174:29): [True: 615, False: 1.40k]
  |  Branch (174:29): [True: 395, False: 1.62k]
  |  Branch (174:45): [True: 395, False: 220]
  ------------------
  175|    395|                        {
  176|    395|                            return OpCode::JAL;
  177|    395|                        }
  178|  1.62k|                        break;
  179|       |
  180|  7.72k|                    case 'L':
  ------------------
  |  Branch (180:21): [True: 7.72k, False: 57.8k]
  ------------------
  181|  10.5k|                    case 'l':
  ------------------
  |  Branch (181:21): [True: 2.86k, False: 62.6k]
  ------------------
  182|  10.5k|                        switch (c2)
  ------------------
  |  Branch (182:33): [True: 2.47k, False: 8.11k]
  ------------------
  183|  10.5k|                        {
  184|    205|                            case 'B':
  ------------------
  |  Branch (184:29): [True: 205, False: 10.3k]
  ------------------
  185|  1.17k|                            case 'b':
  ------------------
  |  Branch (185:29): [True: 967, False: 9.61k]
  ------------------
  186|  1.17k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (186:37): [True: 900, False: 272]
  ------------------
  187|    900|                                {
  188|    900|                                    return OpCode::LBU;
  189|    900|                                }
  190|    272|                                break;
  191|       |
  192|    734|                            case 'E':
  ------------------
  |  Branch (192:29): [True: 734, False: 9.85k]
  ------------------
  193|  1.98k|                            case 'e':
  ------------------
  |  Branch (193:29): [True: 1.24k, False: 9.33k]
  ------------------
  194|  1.98k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (194:37): [True: 900, False: 1.08k]
  ------------------
  195|    900|                                {
  196|    900|                                    return OpCode::LED;
  197|    900|                                }
  198|  1.08k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (198:42): [True: 388, False: 695]
  ------------------
  199|    388|                                {
  200|    388|                                    return OpCode::LEF;
  201|    388|                                }
  202|    695|                                break;
  203|       |
  204|    836|                            case 'H':
  ------------------
  |  Branch (204:29): [True: 836, False: 9.74k]
  ------------------
  205|  1.63k|                            case 'h':
  ------------------
  |  Branch (205:29): [True: 794, False: 9.79k]
  ------------------
  206|  1.63k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (206:37): [True: 772, False: 858]
  ------------------
  207|    772|                                {
  208|    772|                                    return OpCode::LHI;
  209|    772|                                }
  210|    858|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (210:42): [True: 516, False: 342]
  ------------------
  211|    516|                                {
  212|    516|                                    return OpCode::LHU;
  213|    516|                                }
  214|    342|                                break;
  215|       |
  216|    342|                            case 'T':
  ------------------
  |  Branch (216:29): [True: 221, False: 10.3k]
  ------------------
  217|  1.96k|                            case 't':
  ------------------
  |  Branch (217:29): [True: 1.74k, False: 8.84k]
  ------------------
  218|  1.96k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (218:37): [True: 1.02k, False: 935]
  ------------------
  219|  1.02k|                                {
  220|  1.02k|                                    return OpCode::LTD;
  221|  1.02k|                                }
  222|    935|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (222:42): [True: 388, False: 547]
  ------------------
  223|    388|                                {
  224|    388|                                    return OpCode::LTF;
  225|    388|                                }
  226|    547|                                break;
  227|       |
  228|    547|                            case 'W':
  ------------------
  |  Branch (228:29): [True: 197, False: 10.3k]
  ------------------
  229|  1.36k|                            case 'w':
  ------------------
  |  Branch (229:29): [True: 1.16k, False: 9.41k]
  ------------------
  230|  1.36k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (230:37): [True: 900, False: 462]
  ------------------
  231|    900|                                {
  232|    900|                                    return OpCode::LWU;
  233|    900|                                }
  234|    462|                                break;
  235|  10.5k|                        }
  236|  4.79k|                        break;
  237|       |
  238|  4.79k|                    case 'N':
  ------------------
  |  Branch (238:21): [True: 2.50k, False: 63.0k]
  ------------------
  239|  3.25k|                    case 'n':
  ------------------
  |  Branch (239:21): [True: 750, False: 64.7k]
  ------------------
  240|  3.25k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (240:29): [True: 1.50k, False: 1.74k]
  ------------------
  241|  1.50k|                        {
  242|  1.50k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (242:33): [True: 644, False: 865]
  ------------------
  243|    644|                            {
  244|    644|                                return OpCode::NED;
  245|    644|                            }
  246|    865|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (246:38): [True: 517, False: 348]
  ------------------
  247|    517|                            {
  248|    517|                                return OpCode::NEF;
  249|    517|                            }
  250|  1.50k|                        }
  251|  1.74k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (251:34): [True: 719, False: 1.02k]
  |  Branch (251:34): [True: 388, False: 1.35k]
  |  Branch (251:50): [True: 388, False: 331]
  ------------------
  252|    388|                        {
  253|    388|                            return OpCode::NOP;
  254|    388|                        }
  255|       |
  256|  1.70k|                        break;
  257|       |
  258|  1.70k|                    case 'O':
  ------------------
  |  Branch (258:21): [True: 1.28k, False: 64.2k]
  ------------------
  259|  2.12k|                    case 'o':
  ------------------
  |  Branch (259:21): [True: 840, False: 64.6k]
  ------------------
  260|  2.12k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (260:29): [True: 1.11k, False: 1.01k]
  |  Branch (260:29): [True: 900, False: 1.22k]
  |  Branch (260:45): [True: 900, False: 212]
  ------------------
  261|    900|                        {
  262|    900|                            return OpCode::ORI;
  263|    900|                        }
  264|  1.22k|                        break;
  265|       |
  266|  11.1k|                    case 'S':
  ------------------
  |  Branch (266:21): [True: 11.1k, False: 54.3k]
  ------------------
  267|  16.1k|                    case 's':
  ------------------
  |  Branch (267:21): [True: 4.95k, False: 60.5k]
  ------------------
  268|  16.1k|                        switch (c2)
  ------------------
  |  Branch (268:33): [True: 2.15k, False: 13.9k]
  ------------------
  269|  16.1k|                        {
  270|    397|                            case 'B':
  ------------------
  |  Branch (270:29): [True: 397, False: 15.7k]
  ------------------
  271|  1.19k|                            case 'b':
  ------------------
  |  Branch (271:29): [True: 799, False: 15.3k]
  ------------------
  272|  1.19k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (272:37): [True: 388, False: 808]
  ------------------
  273|    388|                                {
  274|    388|                                    return OpCode::SBU;
  275|    388|                                }
  276|    808|                                break;
  277|       |
  278|    811|                            case 'E':
  ------------------
  |  Branch (278:29): [True: 811, False: 15.3k]
  ------------------
  279|  1.36k|                            case 'e':
  ------------------
  |  Branch (279:29): [True: 549, False: 15.5k]
  ------------------
  280|  1.36k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (280:37): [True: 535, False: 825]
  ------------------
  281|    535|                                {
  282|    535|                                    return OpCode::SEQ;
  283|    535|                                }
  284|    825|                                break;
  285|       |
  286|  1.70k|                            case 'G':
  ------------------
  |  Branch (286:29): [True: 1.70k, False: 14.4k]
  ------------------
  287|  1.99k|                            case 'g':
  ------------------
  |  Branch (287:29): [True: 290, False: 15.8k]
  ------------------
  288|  1.99k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (288:37): [True: 650, False: 1.34k]
  ------------------
  289|    650|                                {
  290|    650|                                    return OpCode::SGE;
  291|    650|                                }
  292|  1.34k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (292:42): [True: 566, False: 783]
  ------------------
  293|    566|                                {
  294|    566|                                    return OpCode::SGT;
  295|    566|                                }
  296|    783|                                break;
  297|       |
  298|    783|                            case 'H':
  ------------------
  |  Branch (298:29): [True: 232, False: 15.8k]
  ------------------
  299|    880|                            case 'h':
  ------------------
  |  Branch (299:29): [True: 648, False: 15.4k]
  ------------------
  300|    880|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (300:37): [True: 644, False: 236]
  ------------------
  301|    644|                                {
  302|    644|                                    return OpCode::SHU;
  303|    644|                                }
  304|    236|                                break;
  305|       |
  306|  2.34k|                            case 'L':
  ------------------
  |  Branch (306:29): [True: 2.34k, False: 13.7k]
  ------------------
  307|  3.53k|                            case 'l':
  ------------------
  |  Branch (307:29): [True: 1.18k, False: 14.9k]
  ------------------
  308|  3.53k|                                switch (c3)
  ------------------
  |  Branch (308:41): [True: 483, False: 3.05k]
  ------------------
  309|  3.53k|                                {
  310|    323|                                    case 'A':
  ------------------
  |  Branch (310:37): [True: 323, False: 3.21k]
  ------------------
  311|    521|                                    case 'a':
  ------------------
  |  Branch (311:37): [True: 198, False: 3.33k]
  ------------------
  312|    521|                                        return OpCode::SLA;
  313|       |
  314|    195|                                    case 'E':
  ------------------
  |  Branch (314:37): [True: 195, False: 3.34k]
  ------------------
  315|    390|                                    case 'e':
  ------------------
  |  Branch (315:37): [True: 195, False: 3.34k]
  ------------------
  316|    390|                                        return OpCode::SLE;
  317|       |
  318|    323|                                    case 'L':
  ------------------
  |  Branch (318:37): [True: 323, False: 3.21k]
  ------------------
  319|    787|                                    case 'l':
  ------------------
  |  Branch (319:37): [True: 464, False: 3.07k]
  ------------------
  320|    787|                                        return OpCode::SLL;
  321|       |
  322|    322|                                    case 'T':
  ------------------
  |  Branch (322:37): [True: 322, False: 3.21k]
  ------------------
  323|  1.35k|                                    case 't':
  ------------------
  |  Branch (323:37): [True: 1.03k, False: 2.50k]
  ------------------
  324|  1.35k|                                        return OpCode::SLT;
  325|  3.53k|                                }
  326|    483|                                break;
  327|       |
  328|    742|                            case 'N':
  ------------------
  |  Branch (328:29): [True: 742, False: 15.3k]
  ------------------
  329|  1.02k|                            case 'n':
  ------------------
  |  Branch (329:29): [True: 284, False: 15.8k]
  ------------------
  330|  1.02k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (330:37): [True: 645, False: 381]
  ------------------
  331|    645|                                {
  332|    645|                                    return OpCode::SNE;
  333|    645|                                }
  334|    381|                                break;
  335|       |
  336|    493|                            case 'R':
  ------------------
  |  Branch (336:29): [True: 493, False: 15.6k]
  ------------------
  337|  1.73k|                            case 'r':
  ------------------
  |  Branch (337:29): [True: 1.24k, False: 14.8k]
  ------------------
  338|  1.73k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (338:37): [True: 534, False: 1.20k]
  ------------------
  339|    534|                                {
  340|    534|                                    return OpCode::SRA;
  341|    534|                                }
  342|  1.20k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (342:42): [True: 985, False: 220]
  ------------------
  343|    985|                                {
  344|    985|                                    return OpCode::SRL;
  345|    985|                                }
  346|    220|                                break;
  347|       |
  348|    558|                            case 'U':
  ------------------
  |  Branch (348:29): [True: 558, False: 15.5k]
  ------------------
  349|  1.33k|                            case 'u':
  ------------------
  |  Branch (349:29): [True: 777, False: 15.3k]
  ------------------
  350|  1.33k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (350:37): [True: 589, False: 746]
  ------------------
  351|    589|                                {
  352|    589|                                    return OpCode::SUB;
  353|    589|                                }
  354|    746|                                break;
  355|       |
  356|    746|                            case 'W':
  ------------------
  |  Branch (356:29): [True: 691, False: 15.4k]
  ------------------
  357|    901|                            case 'w':
  ------------------
  |  Branch (357:29): [True: 210, False: 15.9k]
  ------------------
  358|    901|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (358:37): [True: 516, False: 385]
  ------------------
  359|    516|                                {
  360|    516|                                    return OpCode::SWU;
  361|    516|                                }
  362|    385|                                break;
  363|  16.1k|                        }
  364|       |
  365|  7.60k|                    case 'X':
  ------------------
  |  Branch (365:21): [True: 587, False: 64.9k]
  ------------------
  366|  8.16k|                    case 'x':
  ------------------
  |  Branch (366:21): [True: 561, False: 64.9k]
  ------------------
  367|  8.16k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (367:29): [True: 1.08k, False: 7.07k]
  |  Branch (367:29): [True: 598, False: 7.56k]
  |  Branch (367:45): [True: 598, False: 489]
  ------------------
  368|    598|                        {
  369|    598|                            return OpCode::XOR;
  370|    598|                        }
  371|  7.56k|                        break;
  372|  65.5k|                }
  373|  41.5k|                break;
  374|  65.5k|            }
  375|       |
  376|       |            // 4 character OpCodes
  377|  70.1k|            case 4: {
  ------------------
  |  Branch (377:13): [True: 70.1k, False: 234k]
  ------------------
  378|  70.1k|                const char c1 = token[0u];
  379|  70.1k|                const char c2 = token[1u];
  380|  70.1k|                const char c3 = token[2u];
  381|  70.1k|                const char c4 = token[3u];
  382|       |
  383|  70.1k|                switch (c1)
  ------------------
  |  Branch (383:25): [True: 10.3k, False: 59.7k]
  ------------------
  384|  70.1k|                {
  385|  3.94k|                    case 'A':
  ------------------
  |  Branch (385:21): [True: 3.94k, False: 66.1k]
  ------------------
  386|  4.76k|                    case 'a':
  ------------------
  |  Branch (386:21): [True: 821, False: 69.3k]
  ------------------
  387|  4.76k|                        switch (c2)
  ------------------
  |  Branch (387:33): [True: 296, False: 4.46k]
  ------------------
  388|  4.76k|                        {
  389|  1.70k|                            case 'D':
  ------------------
  |  Branch (389:29): [True: 1.70k, False: 3.06k]
  ------------------
  390|  3.36k|                            case 'd':
  ------------------
  |  Branch (390:29): [True: 1.66k, False: 3.10k]
  ------------------
  391|  3.36k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (391:37): [True: 2.89k, False: 461]
  ------------------
  392|  2.89k|                                {
  393|  2.89k|                                    switch (c4)
  ------------------
  |  Branch (393:45): [True: 292, False: 2.60k]
  ------------------
  394|  2.89k|                                    {
  395|    194|                                        case 'D':
  ------------------
  |  Branch (395:41): [True: 194, False: 2.70k]
  ------------------
  396|    772|                                        case 'd':
  ------------------
  |  Branch (396:41): [True: 578, False: 2.32k]
  ------------------
  397|    772|                                            return OpCode::ADDD;
  398|       |
  399|    195|                                        case 'F':
  ------------------
  |  Branch (399:41): [True: 195, False: 2.70k]
  ------------------
  400|    389|                                        case 'f':
  ------------------
  |  Branch (400:41): [True: 194, False: 2.70k]
  ------------------
  401|    389|                                            return OpCode::ADDF;
  402|       |
  403|    194|                                        case 'I':
  ------------------
  |  Branch (403:41): [True: 194, False: 2.70k]
  ------------------
  404|    388|                                        case 'i':
  ------------------
  |  Branch (404:41): [True: 194, False: 2.70k]
  ------------------
  405|    388|                                            return OpCode::ADDI;
  406|       |
  407|    336|                                        case 'U':
  ------------------
  |  Branch (407:41): [True: 336, False: 2.56k]
  ------------------
  408|  1.05k|                                        case 'u':
  ------------------
  |  Branch (408:41): [True: 722, False: 2.17k]
  ------------------
  409|  1.05k|                                            return OpCode::ADDU;
  410|  2.89k|                                    }
  411|  2.89k|                                }
  412|    753|                                break;
  413|       |
  414|    895|                            case 'N':
  ------------------
  |  Branch (414:29): [True: 895, False: 3.86k]
  ------------------
  415|  1.10k|                            case 'n':
  ------------------
  |  Branch (415:29): [True: 211, False: 4.55k]
  ------------------
  416|  1.10k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (416:37): [True: 890, False: 216]
  |  Branch (416:37): [True: 388, False: 718]
  |  Branch (416:53): [True: 388, False: 502]
  ------------------
  417|    388|                                {
  418|    388|                                    return OpCode::ANDI;
  419|    388|                                }
  420|       |
  421|    718|                                break;
  422|  4.76k|                        }
  423|  1.76k|                        break;
  424|       |
  425|  4.90k|                    case 'B':
  ------------------
  |  Branch (425:21): [True: 4.90k, False: 65.2k]
  ------------------
  426|  5.26k|                    case 'b':
  ------------------
  |  Branch (426:21): [True: 358, False: 69.7k]
  ------------------
  427|  5.26k|                        switch (c2)
  ------------------
  |  Branch (427:33): [True: 265, False: 5.00k]
  ------------------
  428|  5.26k|                        {
  429|    427|                            case 'E':
  ------------------
  |  Branch (429:29): [True: 427, False: 4.84k]
  ------------------
  430|  1.08k|                            case 'e':
  ------------------
  |  Branch (430:29): [True: 658, False: 4.60k]
  ------------------
  431|  1.08k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (431:37): [True: 860, False: 225]
  |  Branch (431:37): [True: 644, False: 441]
  |  Branch (431:53): [True: 644, False: 216]
  ------------------
  432|    644|                                {
  433|    644|                                    return OpCode::BEQZ;
  434|    644|                                }
  435|    441|                                break;
  436|       |
  437|  1.63k|                            case 'F':
  ------------------
  |  Branch (437:29): [True: 1.63k, False: 3.63k]
  ------------------
  438|  1.96k|                            case 'f':
  ------------------
  |  Branch (438:29): [True: 337, False: 4.93k]
  ------------------
  439|  1.96k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (439:37): [True: 1.61k, False: 350]
  ------------------
  440|  1.61k|                                {
  441|  1.61k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (441:41): [True: 644, False: 975]
  ------------------
  442|    644|                                    {
  443|    644|                                        return OpCode::BFPF;
  444|    644|                                    }
  445|    975|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (445:46): [True: 644, False: 331]
  ------------------
  446|    644|                                    {
  447|    644|                                        return OpCode::BFPT;
  448|    644|                                    }
  449|  1.61k|                                }
  450|    681|                                break;
  451|       |
  452|  1.16k|                            case 'N':
  ------------------
  |  Branch (452:29): [True: 1.16k, False: 4.09k]
  ------------------
  453|  1.94k|                            case 'n':
  ------------------
  |  Branch (453:29): [True: 779, False: 4.48k]
  ------------------
  454|  1.94k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (454:37): [True: 1.75k, False: 198]
  |  Branch (454:37): [True: 900, False: 1.04k]
  |  Branch (454:53): [True: 900, False: 850]
  ------------------
  455|    900|                                {
  456|    900|                                    return OpCode::BNEZ;
  457|    900|                                }
  458|  5.26k|                        }
  459|  2.43k|                        break;
  460|       |
  461|  2.43k|                    case 'D':
  ------------------
  |  Branch (461:21): [True: 1.99k, False: 68.1k]
  ------------------
  462|  5.70k|                    case 'd':
  ------------------
  |  Branch (462:21): [True: 3.70k, False: 66.4k]
  ------------------
  463|  5.70k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (463:29): [True: 5.45k, False: 250]
  |  Branch (463:29): [True: 4.11k, False: 1.58k]
  |  Branch (463:45): [True: 4.11k, False: 1.33k]
  ------------------
  464|  4.11k|                        {
  465|  4.11k|                            switch (c4)
  ------------------
  |  Branch (465:37): [True: 1.25k, False: 2.85k]
  ------------------
  466|  4.11k|                            {
  467|    194|                                case 'D':
  ------------------
  |  Branch (467:33): [True: 194, False: 3.92k]
  ------------------
  468|    646|                                case 'd':
  ------------------
  |  Branch (468:33): [True: 452, False: 3.66k]
  ------------------
  469|    646|                                    return OpCode::DIVD;
  470|       |
  471|    322|                                case 'F':
  ------------------
  |  Branch (471:33): [True: 322, False: 3.79k]
  ------------------
  472|    661|                                case 'f':
  ------------------
  |  Branch (472:33): [True: 339, False: 3.77k]
  ------------------
  473|    661|                                    return OpCode::DIVF;
  474|       |
  475|    327|                                case 'I':
  ------------------
  |  Branch (475:33): [True: 327, False: 3.78k]
  ------------------
  476|    778|                                case 'i':
  ------------------
  |  Branch (476:33): [True: 451, False: 3.66k]
  ------------------
  477|    778|                                    return OpCode::DIVI;
  478|       |
  479|    578|                                case 'U':
  ------------------
  |  Branch (479:33): [True: 578, False: 3.53k]
  ------------------
  480|    772|                                case 'u':
  ------------------
  |  Branch (480:33): [True: 194, False: 3.92k]
  ------------------
  481|    772|                                    return OpCode::DIVU;
  482|  4.11k|                            }
  483|  4.11k|                        }
  484|  2.84k|                        break;
  485|       |
  486|  2.84k|                    case 'H':
  ------------------
  |  Branch (486:21): [True: 721, False: 69.4k]
  ------------------
  487|  4.39k|                    case 'h':
  ------------------
  |  Branch (487:21): [True: 3.67k, False: 66.4k]
  ------------------
  488|  4.39k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (488:29): [True: 4.17k, False: 225]
  |  Branch (488:29): [True: 3.46k, False: 928]
  |  Branch (488:45): [True: 3.69k, False: 476]
  |  Branch (488:61): [True: 3.46k, False: 227]
  ------------------
  489|  3.46k|                        {
  490|  3.46k|                            return OpCode::HALT;
  491|  3.46k|                        }
  492|    928|                        break;
  493|       |
  494|  1.18k|                    case 'J':
  ------------------
  |  Branch (494:21): [True: 1.18k, False: 68.9k]
  ------------------
  495|  1.74k|                    case 'j':
  ------------------
  |  Branch (495:21): [True: 558, False: 69.5k]
  ------------------
  496|  1.74k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (496:29): [True: 1.41k, False: 334]
  |  Branch (496:29): [True: 388, False: 1.35k]
  |  Branch (496:45): [True: 1.07k, False: 338]
  |  Branch (496:61): [True: 388, False: 687]
  ------------------
  497|    388|                        {
  498|    388|                            return OpCode::JALR;
  499|    388|                        }
  500|  1.35k|                        break;
  501|       |
  502|  1.35k|                    case 'M':
  ------------------
  |  Branch (502:21): [True: 962, False: 69.1k]
  ------------------
  503|  3.63k|                    case 'm':
  ------------------
  |  Branch (503:21): [True: 2.67k, False: 67.4k]
  ------------------
  504|  3.63k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (504:29): [True: 1.85k, False: 1.78k]
  |  Branch (504:29): [True: 1.60k, False: 2.03k]
  |  Branch (504:45): [True: 1.60k, False: 250]
  ------------------
  505|  1.60k|                        {
  506|  1.60k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (506:33): [True: 772, False: 828]
  ------------------
  507|    772|                            {
  508|    772|                                return OpCode::MOVD;
  509|    772|                            }
  510|    828|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (510:38): [True: 517, False: 311]
  ------------------
  511|    517|                            {
  512|    517|                                return OpCode::MOVF;
  513|    517|                            }
  514|  1.60k|                        }
  515|  2.03k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (515:34): [True: 1.64k, False: 393]
  |  Branch (515:34): [True: 677, False: 1.35k]
  |  Branch (515:50): [True: 908, False: 733]
  |  Branch (515:66): [True: 677, False: 231]
  ------------------
  516|    677|                        {
  517|    677|                            return OpCode::MULT;
  518|    677|                        }
  519|  1.66k|                        break;
  520|       |
  521|  23.1k|                    case 'S':
  ------------------
  |  Branch (521:21): [True: 23.1k, False: 46.9k]
  ------------------
  522|  29.8k|                    case 's':
  ------------------
  |  Branch (522:21): [True: 6.75k, False: 63.3k]
  ------------------
  523|  29.8k|                        switch (c2)
  ------------------
  |  Branch (523:33): [True: 1.01k, False: 28.8k]
  ------------------
  524|  29.8k|                        {
  525|    989|                            case 'E':
  ------------------
  |  Branch (525:29): [True: 989, False: 28.8k]
  ------------------
  526|  2.04k|                            case 'e':
  ------------------
  |  Branch (526:29): [True: 1.05k, False: 28.8k]
  ------------------
  527|  2.04k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (527:37): [True: 1.46k, False: 577]
  ------------------
  528|  1.46k|                                {
  529|  1.46k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (529:41): [True: 388, False: 1.07k]
  ------------------
  530|    388|                                    {
  531|    388|                                        return OpCode::SEQI;
  532|    388|                                    }
  533|  1.07k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (533:46): [True: 774, False: 305]
  ------------------
  534|    774|                                    {
  535|    774|                                        return OpCode::SEQU;
  536|    774|                                    }
  537|  1.46k|                                }
  538|    882|                                break;
  539|       |
  540|  6.33k|                            case 'G':
  ------------------
  |  Branch (540:29): [True: 6.33k, False: 23.5k]
  ------------------
  541|  6.65k|                            case 'g':
  ------------------
  |  Branch (541:29): [True: 324, False: 29.5k]
  ------------------
  542|  6.65k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (542:37): [True: 3.98k, False: 2.67k]
  ------------------
  543|  3.98k|                                {
  544|  3.98k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (544:41): [True: 1.79k, False: 2.19k]
  ------------------
  545|  1.79k|                                    {
  546|  1.79k|                                        return OpCode::SGEI;
  547|  1.79k|                                    }
  548|  2.19k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (548:46): [True: 1.38k, False: 806]
  ------------------
  549|  1.38k|                                    {
  550|  1.38k|                                        return OpCode::SGEU;
  551|  1.38k|                                    }
  552|  3.98k|                                }
  553|  2.67k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (553:42): [True: 2.07k, False: 603]
  ------------------
  554|  2.07k|                                {
  555|  2.07k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (555:41): [True: 516, False: 1.55k]
  ------------------
  556|    516|                                    {
  557|    516|                                        return OpCode::SGTI;
  558|    516|                                    }
  559|  1.55k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (559:46): [True: 1.15k, False: 397]
  ------------------
  560|  1.15k|                                    {
  561|  1.15k|                                        return OpCode::SGTU;
  562|  1.15k|                                    }
  563|  2.07k|                                }
  564|  1.80k|                                break;
  565|       |
  566|  5.76k|                            case 'L':
  ------------------
  |  Branch (566:29): [True: 5.76k, False: 24.1k]
  ------------------
  567|  9.58k|                            case 'l':
  ------------------
  |  Branch (567:29): [True: 3.81k, False: 26.0k]
  ------------------
  568|  9.58k|                                switch (c3)
  ------------------
  |  Branch (568:41): [True: 218, False: 9.36k]
  ------------------
  569|  9.58k|                                {
  570|    907|                                    case 'A':
  ------------------
  |  Branch (570:37): [True: 907, False: 8.67k]
  ------------------
  571|  1.62k|                                    case 'a':
  ------------------
  |  Branch (571:37): [True: 714, False: 8.86k]
  ------------------
  572|  1.62k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (572:45): [True: 900, False: 721]
  ------------------
  573|    900|                                        {
  574|    900|                                            return OpCode::SLAI;
  575|    900|                                        }
  576|    721|                                        break;
  577|       |
  578|    721|                                    case 'E':
  ------------------
  |  Branch (578:37): [True: 643, False: 8.93k]
  ------------------
  579|  2.85k|                                    case 'e':
  ------------------
  |  Branch (579:37): [True: 2.21k, False: 7.36k]
  ------------------
  580|  2.85k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (580:45): [True: 1.03k, False: 1.82k]
  ------------------
  581|  1.03k|                                        {
  582|  1.03k|                                            return OpCode::SLEI;
  583|  1.03k|                                        }
  584|  1.82k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (584:50): [True: 1.03k, False: 795]
  ------------------
  585|  1.03k|                                        {
  586|  1.03k|                                            return OpCode::SLEU;
  587|  1.03k|                                        }
  588|    795|                                        break;
  589|       |
  590|    795|                                    case 'L':
  ------------------
  |  Branch (590:37): [True: 653, False: 8.92k]
  ------------------
  591|    991|                                    case 'l':
  ------------------
  |  Branch (591:37): [True: 338, False: 9.24k]
  ------------------
  592|    991|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (592:45): [True: 644, False: 347]
  ------------------
  593|    644|                                        {
  594|    644|                                            return OpCode::SLLI;
  595|    644|                                        }
  596|    347|                                        break;
  597|       |
  598|  1.18k|                                    case 'T':
  ------------------
  |  Branch (598:37): [True: 1.18k, False: 8.39k]
  ------------------
  599|  3.89k|                                    case 't':
  ------------------
  |  Branch (599:37): [True: 2.71k, False: 6.87k]
  ------------------
  600|  3.89k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (600:45): [True: 388, False: 3.50k]
  ------------------
  601|    388|                                        {
  602|    388|                                            return OpCode::SLTI;
  603|    388|                                        }
  604|  3.50k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (604:50): [True: 1.44k, False: 2.06k]
  ------------------
  605|  1.44k|                                        {
  606|  1.44k|                                            return OpCode::SLTU;
  607|  1.44k|                                        }
  608|  2.06k|                                        break;
  609|  9.58k|                                }
  610|       |
  611|  5.84k|                            case 'N':
  ------------------
  |  Branch (611:29): [True: 1.69k, False: 28.1k]
  ------------------
  612|  6.74k|                            case 'n':
  ------------------
  |  Branch (612:29): [True: 897, False: 28.9k]
  ------------------
  613|  6.74k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (613:37): [True: 2.93k, False: 3.80k]
  ------------------
  614|  2.93k|                                {
  615|  2.93k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (615:41): [True: 644, False: 2.29k]
  ------------------
  616|    644|                                    {
  617|    644|                                        return OpCode::SNEI;
  618|    644|                                    }
  619|  2.29k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (619:46): [True: 644, False: 1.64k]
  ------------------
  620|    644|                                    {
  621|    644|                                        return OpCode::SNEU;
  622|    644|                                    }
  623|  2.93k|                                }
  624|  5.45k|                                break;
  625|       |
  626|  5.45k|                            case 'R':
  ------------------
  |  Branch (626:29): [True: 214, False: 29.6k]
  ------------------
  627|  3.95k|                            case 'r':
  ------------------
  |  Branch (627:29): [True: 3.73k, False: 26.1k]
  ------------------
  628|  3.95k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (628:37): [True: 1.51k, False: 2.43k]
  |  Branch (628:37): [True: 1.15k, False: 2.79k]
  |  Branch (628:53): [True: 1.15k, False: 357]
  ------------------
  629|  1.15k|                                {
  630|  1.15k|                                    return OpCode::SRAI;
  631|  1.15k|                                }
  632|  2.79k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (632:42): [True: 2.41k, False: 380]
  |  Branch (632:42): [True: 2.21k, False: 580]
  |  Branch (632:58): [True: 2.21k, False: 200]
  ------------------
  633|  2.21k|                                {
  634|  2.21k|                                    return OpCode::SRLI;
  635|  2.21k|                                }
  636|    580|                                break;
  637|       |
  638|  2.12k|                            case 'U':
  ------------------
  |  Branch (638:29): [True: 2.12k, False: 27.7k]
  ------------------
  639|  4.03k|                            case 'u':
  ------------------
  |  Branch (639:29): [True: 1.91k, False: 27.9k]
  ------------------
  640|  4.03k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (640:37): [True: 3.79k, False: 241]
  ------------------
  641|  3.79k|                                {
  642|  3.79k|                                    switch (c4)
  ------------------
  |  Branch (642:45): [True: 819, False: 2.97k]
  ------------------
  643|  3.79k|                                    {
  644|    834|                                        case 'D':
  ------------------
  |  Branch (644:41): [True: 834, False: 2.96k]
  ------------------
  645|  1.15k|                                        case 'd':
  ------------------
  |  Branch (645:41): [True: 322, False: 3.47k]
  ------------------
  646|  1.15k|                                            return OpCode::SUBD;
  647|       |
  648|    194|                                        case 'F':
  ------------------
  |  Branch (648:41): [True: 194, False: 3.60k]
  ------------------
  649|    516|                                        case 'f':
  ------------------
  |  Branch (649:41): [True: 322, False: 3.47k]
  ------------------
  650|    516|                                            return OpCode::SUBF;
  651|       |
  652|    194|                                        case 'I':
  ------------------
  |  Branch (652:41): [True: 194, False: 3.60k]
  ------------------
  653|    388|                                        case 'i':
  ------------------
  |  Branch (653:41): [True: 194, False: 3.60k]
  ------------------
  654|    388|                                            return OpCode::SUBI;
  655|       |
  656|    468|                                        case 'U':
  ------------------
  |  Branch (656:41): [True: 468, False: 3.32k]
  ------------------
  657|    918|                                        case 'u':
  ------------------
  |  Branch (657:41): [True: 450, False: 3.34k]
  ------------------
  658|    918|                                            return OpCode::SUBU;
  659|  3.79k|                                    }
  660|  3.79k|                                }
  661|  1.06k|                                break;
  662|  29.8k|                        }
  663|  10.8k|                        break;
  664|       |
  665|  10.8k|                    case 'T':
  ------------------
  |  Branch (665:21): [True: 2.23k, False: 67.8k]
  ------------------
  666|  2.55k|                    case 't':
  ------------------
  |  Branch (666:21): [True: 322, False: 69.8k]
  ------------------
  667|  2.55k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (667:29): [True: 2.12k, False: 434]
  |  Branch (667:29): [True: 772, False: 1.78k]
  |  Branch (667:45): [True: 1.41k, False: 713]
  |  Branch (667:61): [True: 772, False: 640]
  ------------------
  668|    772|                        {
  669|    772|                            return OpCode::TRAP;
  670|    772|                        }
  671|  1.78k|                        break;
  672|  1.78k|                    case 'X':
  ------------------
  |  Branch (672:21): [True: 1.37k, False: 68.7k]
  ------------------
  673|  1.79k|                    case 'x':
  ------------------
  |  Branch (673:21): [True: 416, False: 69.7k]
  ------------------
  674|  1.79k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (674:29): [True: 1.17k, False: 612]
  |  Branch (674:29): [True: 644, False: 1.14k]
  |  Branch (674:45): [True: 857, False: 322]
  |  Branch (674:61): [True: 644, False: 213]
  ------------------
  675|    644|                        {
  676|    644|                            return OpCode::XORI;
  677|    644|                        }
  678|  1.14k|                        break;
  679|  70.1k|                }
  680|  35.1k|                break;
  681|  70.1k|            }
  682|       |
  683|       |            // 5 character OpCodes
  684|  40.1k|            case 5: {
  ------------------
  |  Branch (684:13): [True: 40.1k, False: 264k]
  ------------------
  685|  40.1k|                const char c1 = token[0u];
  686|  40.1k|                const char c2 = token[1u];
  687|  40.1k|                const char c3 = token[2u];
  688|  40.1k|                const char c4 = token[3u];
  689|  40.1k|                const char c5 = token[4u];
  690|       |
  691|  40.1k|                switch (c1)
  ------------------
  |  Branch (691:25): [True: 7.67k, False: 32.5k]
  ------------------
  692|  40.1k|                {
  693|  2.94k|                    case 'A':
  ------------------
  |  Branch (693:21): [True: 2.94k, False: 37.2k]
  ------------------
  694|  3.89k|                    case 'a':
  ------------------
  |  Branch (694:21): [True: 944, False: 39.2k]
  ------------------
  695|  3.89k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (695:29): [True: 2.47k, False: 1.41k]
  |  Branch (695:29): [True: 388, False: 3.50k]
  |  Branch (695:45): [True: 1.81k, False: 659]
  |  Branch (695:61): [True: 1.60k, False: 210]
  |  Branch (695:77): [True: 388, False: 1.22k]
  ------------------
  696|    388|                        {
  697|    388|                            return OpCode::ADDUI;
  698|    388|                        }
  699|  3.50k|                        break;
  700|       |
  701|  3.50k|                    case 'D':
  ------------------
  |  Branch (701:21): [True: 1.02k, False: 39.1k]
  ------------------
  702|  4.40k|                    case 'd':
  ------------------
  |  Branch (702:21): [True: 3.37k, False: 36.8k]
  ------------------
  703|  4.40k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (703:29): [True: 3.93k, False: 468]
  |  Branch (703:29): [True: 1.41k, False: 2.99k]
  |  Branch (703:45): [True: 3.48k, False: 451]
  |  Branch (703:61): [True: 2.18k, False: 1.30k]
  |  Branch (703:77): [True: 1.41k, False: 770]
  ------------------
  704|  1.41k|                        {
  705|  1.41k|                            return OpCode::DIVUI;
  706|  1.41k|                        }
  707|  2.99k|                        break;
  708|       |
  709|  2.99k|                    case 'M':
  ------------------
  |  Branch (709:21): [True: 2.31k, False: 37.8k]
  ------------------
  710|  4.76k|                    case 'm':
  ------------------
  |  Branch (710:21): [True: 2.44k, False: 37.7k]
  ------------------
  711|  4.76k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (711:29): [True: 3.76k, False: 997]
  |  Branch (711:29): [True: 2.95k, False: 1.80k]
  |  Branch (711:45): [True: 3.16k, False: 598]
  |  Branch (711:61): [True: 2.95k, False: 208]
  ------------------
  712|  2.95k|                        {
  713|  2.95k|                            switch (c5)
  ------------------
  |  Branch (713:37): [True: 350, False: 2.60k]
  ------------------
  714|  2.95k|                            {
  715|    322|                                case 'D':
  ------------------
  |  Branch (715:33): [True: 322, False: 2.63k]
  ------------------
  716|    900|                                case 'd':
  ------------------
  |  Branch (716:33): [True: 578, False: 2.38k]
  ------------------
  717|    900|                                    return OpCode::MULTD;
  718|       |
  719|    194|                                case 'F':
  ------------------
  |  Branch (719:33): [True: 194, False: 2.76k]
  ------------------
  720|    516|                                case 'f':
  ------------------
  |  Branch (720:33): [True: 322, False: 2.63k]
  ------------------
  721|    516|                                    return OpCode::MULTF;
  722|       |
  723|    450|                                case 'I':
  ------------------
  |  Branch (723:33): [True: 450, False: 2.50k]
  ------------------
  724|    676|                                case 'i':
  ------------------
  |  Branch (724:33): [True: 226, False: 2.73k]
  ------------------
  725|    676|                                    return OpCode::MULTI;
  726|       |
  727|    194|                                case 'U':
  ------------------
  |  Branch (727:33): [True: 194, False: 2.76k]
  ------------------
  728|    516|                                case 'u':
  ------------------
  |  Branch (728:33): [True: 322, False: 2.63k]
  ------------------
  729|    516|                                    return OpCode::MULTU;
  730|  2.95k|                            }
  731|  2.95k|                        }
  732|  2.15k|                        break;
  733|       |
  734|  12.8k|                    case 'S':
  ------------------
  |  Branch (734:21): [True: 12.8k, False: 27.3k]
  ------------------
  735|  19.4k|                    case 's':
  ------------------
  |  Branch (735:21): [True: 6.57k, False: 33.6k]
  ------------------
  736|  19.4k|                        switch (c2)
  ------------------
  |  Branch (736:33): [True: 1.29k, False: 18.1k]
  ------------------
  737|  19.4k|                        {
  738|  1.03k|                            case 'E':
  ------------------
  |  Branch (738:29): [True: 1.03k, False: 18.4k]
  ------------------
  739|  1.82k|                            case 'e':
  ------------------
  |  Branch (739:29): [True: 781, False: 18.6k]
  ------------------
  740|  1.82k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (740:37): [True: 1.46k, False: 357]
  |  Branch (740:37): [True: 620, False: 1.20k]
  |  Branch (740:53): [True: 1.24k, False: 216]
  |  Branch (740:69): [True: 620, False: 627]
  ------------------
  741|    620|                                {
  742|    620|                                    return OpCode::SEQUI;
  743|    620|                                }
  744|  1.20k|                                break;
  745|       |
  746|  4.31k|                            case 'G':
  ------------------
  |  Branch (746:29): [True: 4.31k, False: 15.1k]
  ------------------
  747|  4.68k|                            case 'g':
  ------------------
  |  Branch (747:29): [True: 371, False: 19.0k]
  ------------------
  748|  4.68k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (748:37): [True: 2.83k, False: 1.84k]
  |  Branch (748:37): [True: 1.66k, False: 3.01k]
  |  Branch (748:53): [True: 1.99k, False: 849]
  |  Branch (748:69): [True: 1.66k, False: 322]
  ------------------
  749|  1.66k|                                {
  750|  1.66k|                                    return OpCode::SGEUI;
  751|  1.66k|                                }
  752|  3.01k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (752:42): [True: 1.82k, False: 1.19k]
  |  Branch (752:42): [True: 772, False: 2.24k]
  |  Branch (752:58): [True: 1.48k, False: 347]
  |  Branch (752:74): [True: 772, False: 708]
  ------------------
  753|    772|                                {
  754|    772|                                    return OpCode::SGTUI;
  755|    772|                                }
  756|  2.24k|                                break;
  757|       |
  758|  2.52k|                            case 'L':
  ------------------
  |  Branch (758:29): [True: 2.52k, False: 16.9k]
  ------------------
  759|  5.59k|                            case 'l':
  ------------------
  |  Branch (759:29): [True: 3.07k, False: 16.3k]
  ------------------
  760|  5.59k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (760:37): [True: 2.63k, False: 2.95k]
  |  Branch (760:37): [True: 1.02k, False: 4.56k]
  |  Branch (760:53): [True: 1.96k, False: 677]
  |  Branch (760:69): [True: 1.02k, False: 934]
  ------------------
  761|  1.02k|                                {
  762|  1.02k|                                    return OpCode::SLEUI;
  763|  1.02k|                                }
  764|  4.56k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (764:42): [True: 2.38k, False: 2.17k]
  |  Branch (764:42): [True: 900, False: 3.66k]
  |  Branch (764:58): [True: 1.22k, False: 1.15k]
  |  Branch (764:74): [True: 900, False: 329]
  ------------------
  765|    900|                                {
  766|    900|                                    return OpCode::SLTUI;
  767|    900|                                }
  768|  3.66k|                                break;
  769|       |
  770|  3.66k|                            case 'N':
  ------------------
  |  Branch (770:29): [True: 946, False: 18.5k]
  ------------------
  771|  2.20k|                            case 'n':
  ------------------
  |  Branch (771:29): [True: 1.25k, False: 18.2k]
  ------------------
  772|  2.20k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (772:37): [True: 1.79k, False: 402]
  |  Branch (772:37): [True: 516, False: 1.68k]
  |  Branch (772:53): [True: 974, False: 825]
  |  Branch (772:69): [True: 516, False: 458]
  ------------------
  773|    516|                                {
  774|    516|                                    return OpCode::SNEUI;
  775|    516|                                }
  776|  1.68k|                                break;
  777|       |
  778|  1.68k|                            case 'U':
  ------------------
  |  Branch (778:29): [True: 1.64k, False: 17.8k]
  ------------------
  779|  3.87k|                            case 'u':
  ------------------
  |  Branch (779:29): [True: 2.22k, False: 17.2k]
  ------------------
  780|  3.87k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (780:37): [True: 3.66k, False: 213]
  |  Branch (780:37): [True: 516, False: 3.35k]
  |  Branch (780:53): [True: 1.26k, False: 2.39k]
  |  Branch (780:69): [True: 516, False: 747]
  ------------------
  781|    516|                                {
  782|    516|                                    return OpCode::SUBUI;
  783|    516|                                }
  784|  3.35k|                                break;
  785|  19.4k|                        }
  786|       |
  787|  13.4k|                        break;
  788|  40.1k|                }
  789|       |
  790|  29.7k|                break;
  791|  40.1k|            }
  792|       |
  793|       |            // 6 character OpCodes
  794|  29.7k|            case 6: {
  ------------------
  |  Branch (794:13): [True: 22.0k, False: 282k]
  ------------------
  795|  22.0k|                const char c1 = token[0u];
  796|  22.0k|                const char c2 = token[1u];
  797|  22.0k|                const char c3 = token[2u];
  798|  22.0k|                const char c4 = token[3u];
  799|  22.0k|                const char c5 = token[4u];
  800|  22.0k|                const char c6 = token[5u];
  801|       |
  802|  22.0k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (802:21): [True: 11.0k, False: 11.0k]
  |  Branch (802:21): [True: 9.17k, False: 12.8k]
  |  Branch (802:37): [True: 10.0k, False: 973]
  |  Branch (802:53): [True: 9.17k, False: 854]
  ------------------
  803|  9.17k|                {
  804|  9.17k|                    switch (c4)
  ------------------
  |  Branch (804:29): [True: 470, False: 8.70k]
  ------------------
  805|  9.17k|                    {
  806|  2.63k|                        case 'D':
  ------------------
  |  Branch (806:25): [True: 2.63k, False: 6.54k]
  ------------------
  807|  3.21k|                        case 'd':
  ------------------
  |  Branch (807:25): [True: 579, False: 8.59k]
  ------------------
  808|  3.21k|                            if (c5 == '2')
  ------------------
  |  Branch (808:33): [True: 2.63k, False: 578]
  ------------------
  809|  2.63k|                            {
  810|  2.63k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (810:37): [True: 1.66k, False: 966]
  ------------------
  811|  1.66k|                                {
  812|  1.66k|                                    return OpCode::CVTD2F;
  813|  1.66k|                                }
  814|    966|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (814:42): [True: 644, False: 322]
  ------------------
  815|    644|                                {
  816|    644|                                    return OpCode::CVTD2I;
  817|    644|                                }
  818|  2.63k|                            }
  819|    900|                            break;
  820|       |
  821|  1.47k|                        case 'F':
  ------------------
  |  Branch (821:25): [True: 1.47k, False: 7.69k]
  ------------------
  822|  1.67k|                        case 'f':
  ------------------
  |  Branch (822:25): [True: 197, False: 8.97k]
  ------------------
  823|  1.67k|                            if (c5 == '2')
  ------------------
  |  Branch (823:33): [True: 1.48k, False: 194]
  ------------------
  824|  1.48k|                            {
  825|  1.48k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (825:37): [True: 644, False: 838]
  ------------------
  826|    644|                                {
  827|    644|                                    return OpCode::CVTF2D;
  828|    644|                                }
  829|    838|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (829:42): [True: 516, False: 322]
  ------------------
  830|    516|                                {
  831|    516|                                    return OpCode::CVTF2I;
  832|    516|                                }
  833|  1.48k|                            }
  834|    516|                            break;
  835|       |
  836|    581|                        case 'I':
  ------------------
  |  Branch (836:25): [True: 581, False: 8.59k]
  ------------------
  837|  3.81k|                        case 'i':
  ------------------
  |  Branch (837:25): [True: 3.23k, False: 5.93k]
  ------------------
  838|  3.81k|                            if (c5 == '2')
  ------------------
  |  Branch (838:33): [True: 3.23k, False: 580]
  ------------------
  839|  3.23k|                            {
  840|  3.23k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (840:37): [True: 1.98k, False: 1.25k]
  ------------------
  841|  1.98k|                                {
  842|  1.98k|                                    return OpCode::CVTI2D;
  843|  1.98k|                                }
  844|  1.25k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (844:42): [True: 932, False: 324]
  ------------------
  845|    932|                                {
  846|    932|                                    return OpCode::CVTI2F;
  847|    932|                                }
  848|  3.23k|                            }
  849|  9.17k|                    }
  850|  9.17k|                }
  851|  12.8k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (851:26): [True: 5.28k, False: 7.60k]
  |  Branch (851:26): [True: 1.54k, False: 11.3k]
  |  Branch (851:42): [True: 3.29k, False: 1.99k]
  |  Branch (851:58): [True: 3.08k, False: 212]
  |  Branch (851:74): [True: 2.88k, False: 194]
  ------------------
  852|  12.8k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (852:26): [True: 2.05k, False: 835]
  |  Branch (852:42): [True: 1.54k, False: 512]
  ------------------
  853|  1.54k|                {
  854|  1.54k|                    return OpCode::MULTUI;
  855|  1.54k|                }
  856|  14.1k|                break;
  857|  22.0k|            }
  858|       |
  859|       |            // 7 character OpCodes
  860|  14.1k|            case 7: {
  ------------------
  |  Branch (860:13): [True: 11.9k, False: 292k]
  ------------------
  861|  11.9k|                const char c1 = token[0u];
  862|  11.9k|                const char c2 = token[1u];
  863|  11.9k|                const char c3 = token[2u];
  864|  11.9k|                const char c4 = token[3u];
  865|  11.9k|                const char c5 = token[4u];
  866|  11.9k|                const char c6 = token[5u];
  867|  11.9k|                const char c7 = token[6u];
  868|       |
  869|  11.9k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (869:21): [True: 6.01k, False: 5.97k]
  |  Branch (869:21): [True: 4.54k, False: 7.43k]
  |  Branch (869:37): [True: 5.00k, False: 1.01k]
  |  Branch (869:53): [True: 4.54k, False: 456]
  ------------------
  870|  4.54k|                {
  871|  4.54k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (871:25): [True: 2.42k, False: 2.11k]
  |  Branch (871:25): [True: 772, False: 3.77k]
  |  Branch (871:41): [True: 1.97k, False: 454]
  |  Branch (871:54): [True: 1.13k, False: 834]
  |  Branch (871:70): [True: 772, False: 367]
  ------------------
  872|    772|                    {
  873|    772|                        return OpCode::MOVI2FP;
  874|    772|                    }
  875|  3.77k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (875:25): [True: 2.06k, False: 1.70k]
  |  Branch (875:25): [True: 1.02k, False: 2.74k]
  |  Branch (875:41): [True: 1.61k, False: 450]
  |  Branch (875:57): [True: 1.25k, False: 364]
  |  Branch (875:70): [True: 1.02k, False: 226]
  ------------------
  876|  1.02k|                    {
  877|  1.02k|                        return OpCode::MOVFP2I;
  878|  1.02k|                    }
  879|  3.77k|                }
  880|  10.1k|                break;
  881|  11.9k|            }
  882|       |
  883|  10.1k|            default: {
  ------------------
  |  Branch (883:13): [True: 7.24k, False: 297k]
  ------------------
  884|  7.24k|                break;
  885|  11.9k|            }
  886|   304k|        }
  887|       |
  888|       |        // None found
  889|   202k|        return OpCode::NONE;
  890|   304k|    }
_ZN3dlx3iceEcc:
   15|   456k|    {
   16|   456k|        constexpr const char diff = 'a' - 'A';
   17|   456k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (17:16): [True: 145k, False: 310k]
  |  Branch (17:28): [True: 127k, False: 183k]
  ------------------
   18|   456k|    }

_ZN3dlx10ParseErrorC2Ev:
   18|   225k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  186|  1.61k|    {
  187|  1.61k|        ParseError err;
  188|       |
  189|  1.61k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  190|  1.61k|        err.m_LineNumber                           = line_number;
  191|  1.61k|        err.m_Column                               = column;
  192|  1.61k|        err.unexpected_argument_type.expected_type = expected_type;
  193|  1.61k|        err.unexpected_argument_type.actual_type   = actual_type;
  194|       |
  195|  1.61k|        return err;
  196|  1.61k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  201|  1.61k|    {
  202|  1.61k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  203|  1.61k|                                                         token.GetColumn().unsafe(), expected_type,
  204|  1.61k|                                                         actual_type);
  205|  1.61k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  209|    194|    {
  210|    194|        ParseError err;
  211|       |
  212|    194|        err.m_Type              = ParseError::Type::InvalidNumber;
  213|    194|        err.m_LineNumber        = line_number;
  214|    194|        err.m_Column            = column;
  215|    194|        err.invalid_number.text = text;
  216|       |
  217|    194|        return err;
  218|    194|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  221|    194|    {
  222|    194|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  223|    194|                                                token.GetColumn().unsafe(), token.GetText());
  224|    194|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  228|      2|    {
  229|      2|        ParseError err;
  230|       |
  231|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  232|      2|        err.m_LineNumber = line_number;
  233|      2|        err.m_Column     = column;
  234|       |
  235|      2|        return err;
  236|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  239|      2|    {
  240|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  241|      2|                                                                     token.GetColumn().unsafe());
  242|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  247|  53.6k|    {
  248|  53.6k|        ParseError err;
  249|       |
  250|  53.6k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  251|  53.6k|        err.m_LineNumber                   = line_number;
  252|  53.6k|        err.m_Column                       = column;
  253|  53.6k|        err.unexpected_token.expected_type = expected_type;
  254|  53.6k|        err.unexpected_token.actual_type   = actual_type;
  255|       |
  256|  53.6k|        return err;
  257|  53.6k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  261|  53.6k|    {
  262|  53.6k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  263|  53.6k|                                                  token.GetColumn().unsafe(), expected_type,
  264|  53.6k|                                                  token.GetType());
  265|  53.6k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  270|  40.5k|    {
  271|  40.5k|        ParseError err;
  272|       |
  273|  40.5k|        err.m_Type                         = ParseError::Type::ReservedIdentifier;
  274|  40.5k|        err.m_LineNumber                   = line_number;
  275|  40.5k|        err.m_Column                       = column;
  276|  40.5k|        err.reserved_identifier.identifier = identifier;
  277|       |
  278|  40.5k|        return err;
  279|  40.5k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorERKNS_5TokenE:
  282|    450|    {
  283|    450|        return ConstructReservedIdentifierParseError(token.GetLineNumber().unsafe(),
  284|    450|                                                     token.GetColumn().unsafe(), token.GetText());
  285|    450|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  290|  36.5k|    {
  291|  36.5k|        ParseError err;
  292|       |
  293|  36.5k|        err.m_Type                              = ParseError::Type::InvalidLabelIdentifier;
  294|  36.5k|        err.m_LineNumber                        = line_number;
  295|  36.5k|        err.m_Column                            = column;
  296|  36.5k|        err.invalid_label_identifier.identifier = identifier;
  297|       |
  298|  36.5k|        return err;
  299|  36.5k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  302|  36.5k|    {
  303|  36.5k|        return ConstructInvalidLabelIdentifierParseError(
  304|  36.5k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  305|  36.5k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  312|  14.1k|    {
  313|  14.1k|        ParseError err;
  314|       |
  315|  14.1k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  316|  14.1k|        err.m_LineNumber                     = line_number;
  317|  14.1k|        err.m_Column                         = column;
  318|  14.1k|        err.label_already_defined.label_name = label_name;
  319|  14.1k|        err.label_already_defined.at_line    = at_line;
  320|  14.1k|        err.label_already_defined.at_column  = at_column;
  321|       |
  322|  14.1k|        return err;
  323|  14.1k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  327|  14.1k|    {
  328|  14.1k|        return ConstructLabelAlreadyDefinedParseError(
  329|  14.1k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  330|  14.1k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  331|  14.1k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  335|  35.7k|    {
  336|  35.7k|        ParseError err;
  337|       |
  338|  35.7k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  339|  35.7k|        err.m_LineNumber = line_number;
  340|  35.7k|        err.m_Column     = column;
  341|       |
  342|  35.7k|        return err;
  343|  35.7k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  346|  35.7k|    {
  347|  35.7k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  348|  35.7k|                                                        token.GetColumn().unsafe());
  349|  35.7k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  354|  10.2k|    {
  355|  10.2k|        ParseError err;
  356|       |
  357|  10.2k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  358|  10.2k|        err.m_LineNumber               = line_number;
  359|  10.2k|        err.m_Column                   = column;
  360|  10.2k|        err.too_few_arguments.required = required;
  361|  10.2k|        err.too_few_arguments.provided = provided;
  362|       |
  363|  10.2k|        return err;
  364|  10.2k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  368|  10.2k|    {
  369|  10.2k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  370|  10.2k|                                                  token.GetColumn().unsafe(), required, provided);
  371|  10.2k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  375|  32.4k|    {
  376|  32.4k|        ParseError err;
  377|       |
  378|  32.4k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  379|  32.4k|        err.m_LineNumber           = line_number;
  380|  32.4k|        err.m_Column               = column;
  381|  32.4k|        err.empty_label.label_name = label_name;
  382|       |
  383|  32.4k|        return err;
  384|  32.4k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  387|  32.4k|    {
  388|  32.4k|        return ConstructEmptyLabelParseError(
  389|  32.4k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  390|  32.4k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (390:17): [True: 30.9k, False: 1.42k]
  ------------------
  391|  30.9k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  392|  32.4k|                        token.GetText());
  393|  32.4k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  397|    299|    {
  398|    299|        ParseError err;
  399|       |
  400|    299|        err.m_Type       = ParseError::Type::TooManyComma;
  401|    299|        err.m_LineNumber = line_number;
  402|    299|        err.m_Column     = column;
  403|       |
  404|    299|        return err;
  405|    299|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  408|    299|    {
  409|    299|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  410|    299|                                               token.GetColumn().unsafe());
  411|    299|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   16|   225k|    {
   17|   225k|        m_ParseErrors.emplace_back(phi::move(error));
   18|   225k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  5.21k|    {
  181|  5.21k|        ParsedProgram program;
  182|       |
  183|  5.21k|        program.m_Tokens = tokens;
  184|       |
  185|  5.21k|        phi::boolean line_has_instruction{false};
  186|  5.21k|        phi::usize   label_count{0u};
  187|       |
  188|   268k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 262k, False: 5.21k]
  ------------------
  189|   262k|        {
  190|   262k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   262k|            switch (current_token.GetType())
  195|   262k|            {
  196|       |                // Ignore comments
  197|    848|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 848, False: 262k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|    848|                    break;
  200|       |
  201|  32.3k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 32.3k, False: 230k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  32.3k|                    line_has_instruction = false;
  204|  32.3k|                    break;
  205|       |
  206|   124k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 124k, False: 138k]
  ------------------
  207|   124k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 5.30k, False: 118k]
  ------------------
  208|  5.30k|                    {
  209|  5.30k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  5.30k|                                current_token, Token::Type::NewLine));
  211|  5.30k|                        break;
  212|  5.30k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|   118k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 18.1k, False: 100k]
  ------------------
  217|  18.1k|                    {
  218|  18.1k|                        program.AddParseError(
  219|  18.1k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  18.1k|                        break;
  221|  18.1k|                    }
  222|       |
  223|   100k|                    phi::string_view label_name = current_token.GetText();
  224|   100k|                    label_name.remove_suffix(1u);
  225|       |
  226|   100k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 40.1k, False: 60.5k]
  ------------------
  227|  40.1k|                    {
  228|  40.1k|                        program.AddParseError(ConstructReservedIdentifierParseError(
  229|  40.1k|                                current_token.GetLineNumber().unsafe(),
  230|  40.1k|                                current_token.GetColumn().unsafe(), label_name));
  231|  40.1k|                        break;
  232|  40.1k|                    }
  233|       |
  234|  60.5k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 13.3k, False: 47.2k]
  ------------------
  235|  13.3k|                    {
  236|  13.3k|                        program.AddParseError(
  237|  13.3k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  13.3k|                        break;
  239|  13.3k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  47.2k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 14.1k, False: 33.0k]
  ------------------
  243|  14.1k|                    {
  244|       |                        // Find first defintions of label
  245|  14.1k|                        const Token* first_label_definition =
  246|  14.1k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  14.1k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  14.1k|                                    {
  249|  14.1k|                                        phi::string_view token_label_name = t.GetText();
  250|  14.1k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  14.1k|                                        if (token_label_name == label_name)
  253|  14.1k|                                        {
  254|  14.1k|                                            return true;
  255|  14.1k|                                        }
  256|  14.1k|                                    }
  257|       |
  258|  14.1k|                                    return false;
  259|  14.1k|                                });
  260|       |
  261|  14.1k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  14.1k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  14.1k|                                current_token, *first_label_definition));
  265|  14.1k|                        break;
  266|  14.1k|                    }
  267|       |
  268|  33.0k|                    program.m_JumpData[label_name] =
  269|  33.0k|                            static_cast<phi::uint32_t>(program.m_Instructions.size());
  270|  33.0k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  33.0k|                    break;
  276|  47.2k|                }
  277|       |
  278|  62.7k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 62.7k, False: 200k]
  ------------------
  279|  62.7k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 35.7k, False: 27.0k]
  ------------------
  280|  35.7k|                    {
  281|  35.7k|                        program.AddParseError(
  282|  35.7k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  35.7k|                        break;
  284|  35.7k|                    }
  285|       |
  286|  27.0k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  27.0k|                    PHI_ASSERT(current_token.HasHint());
  290|  27.0k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  27.0k|                    const InstructionInfo& info = LookUpInstructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  27.0k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  27.0k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  27.0k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  27.0k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  27.0k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  27.0k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  27.0k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  44.9k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 40.9k, False: 4.00k]
  ------------------
  312|  40.9k|                    {
  313|       |                        // Get next token
  314|  40.9k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 942, False: 40.0k]
  ------------------
  315|    942|                        {
  316|    942|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    942|                                    current_token, number_of_argument_required.unsafe(),
  318|    942|                                    argument_num.unsafe()));
  319|    942|                            break;
  320|    942|                        }
  321|       |
  322|  40.0k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  40.0k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 11.7k, False: 28.2k]
  ------------------
  326|  11.7k|                        {
  327|  11.7k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 299, False: 11.4k]
  ------------------
  328|    299|                            {
  329|    299|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    299|                            }
  331|       |
  332|  11.7k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  11.7k|                            continue;
  335|  11.7k|                        }
  336|       |
  337|  28.2k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 9.29k, False: 18.9k]
  ------------------
  338|  9.29k|                        {
  339|  9.29k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  9.29k|                                    token, number_of_argument_required.unsafe(),
  341|  9.29k|                                    argument_num.unsafe()));
  342|  9.29k|                            break;
  343|  9.29k|                        }
  344|       |
  345|  18.9k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  18.9k|                                parse_instruction_argument(
  347|  18.9k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  18.9k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 12.7k, False: 6.21k]
  ------------------
  349|  12.7k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  12.7k|                            break;
  352|  12.7k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  6.21k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  6.21k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  6.21k|                        argument_num++;
  359|  6.21k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  6.21k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  27.0k|                    program.m_Instructions.emplace_back(instruction);
  367|  27.0k|                    line_has_instruction = true;
  368|  27.0k|                    break;
  369|  62.7k|                }
  370|       |
  371|  42.8k|                default:
  ------------------
  |  Branch (371:17): [True: 42.8k, False: 220k]
  ------------------
  372|  42.8k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  42.8k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 25.9k, False: 16.8k]
  ------------------
  374|  25.9k|                    {
  375|  25.9k|                        expected_token_type = Token::Type::NewLine;
  376|  25.9k|                    }
  377|       |
  378|  42.8k|                    program.AddParseError(
  379|  42.8k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  42.8k|                    break;
  381|   262k|            }
  382|   262k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  5.21k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 938, False: 4.27k]
  ------------------
  386|    938|        {
  387|  36.1k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 35.2k, False: 938]
  ------------------
  388|  35.2k|            {
  389|  35.2k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  35.2k|                const Token& token = *it;
  392|  35.2k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 32.4k, False: 2.83k]
  ------------------
  393|  32.4k|                {
  394|  32.4k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  32.4k|                    --label_count;
  396|  32.4k|                }
  397|  35.2k|            }
  398|    938|        }
  399|       |
  400|  5.21k|        return program;
  401|  5.21k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  5.21k|    {
  405|  5.21k|        TokenStream tokens = Tokenize(source);
  406|  5.21k|        return Parse(tokens);
  407|  5.21k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  18.9k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  18.9k|        switch (token.GetType())
   37|  18.9k|        {
   38|  1.43k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 1.43k, False: 17.5k]
  ------------------
   39|  1.43k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 339, False: 1.09k]
  ------------------
   40|  1.43k|                                          ArgumentType::AddressDisplacement))
   41|    339|                {
   42|    339|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    339|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    339|                    return {};
   46|    339|                }
   47|       |
   48|       |                // Get address displacement
   49|  1.09k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  1.09k|                phi::int16_t value = static_cast<phi::int16_t>(token.GetHint());
   52|       |
   53|  1.09k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 2, False: 1.09k]
  ------------------
   54|      2|                {
   55|      2|                    program.AddParseError(
   56|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      2|                    return {};
   58|      2|                }
   59|       |
   60|  1.09k|                auto         it           = tokens.current_position();
   61|  1.09k|                const Token& first_token  = tokens.consume();
   62|  1.09k|                const Token& second_token = tokens.consume();
   63|  1.09k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  1.09k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 195, False: 902]
  ------------------
   66|    195|                {
   67|    195|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    195|                            first_token, Token::Type::OpenBracket));
   69|    195|                    return {};
   70|    195|                }
   71|       |
   72|       |                // Second token is the register
   73|    902|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 194, False: 708]
  ------------------
   74|    194|                {
   75|    194|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|    194|                            second_token, Token::Type::RegisterInt));
   77|    194|                    return {};
   78|    194|                }
   79|       |
   80|    708|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 482, False: 226]
  ------------------
   81|    482|                {
   82|    482|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|    482|                            third_token, Token::Type::ClosingBracket));
   84|    482|                    return {};
   85|    482|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|    226|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|    226|                return ConstructInstructionArgumentAddressDisplacement(
   94|    226|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|    708|            }
   96|  1.37k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 1.37k, False: 17.5k]
  ------------------
   97|  1.37k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 194, False: 1.17k]
  ------------------
   98|    194|                {
   99|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    194|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    194|                    return {};
  102|    194|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  1.17k|                return ConstructInstructionArgumentRegisterInt(
  108|  1.17k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  1.37k|            }
  110|    645|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 645, False: 18.3k]
  ------------------
  111|    645|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 450, False: 195]
  ------------------
  112|    450|                {
  113|    450|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    450|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    450|                    return {};
  116|    450|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|    195|                return ConstructInstructionArgumentRegisterFloat(
  122|    195|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|    645|            }
  124|    450|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 450, False: 18.5k]
  ------------------
  125|    450|                program.AddParseError(ConstructReservedIdentifierParseError(token));
  126|       |
  127|    450|                return {};
  128|    645|            }
  129|  8.77k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 8.77k, False: 10.1k]
  ------------------
  130|       |                // Parse as Label
  131|  8.77k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 438, False: 8.33k]
  ------------------
  132|    438|                {
  133|    438|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|    438|                            token, expected_argument_type, ArgumentType::Label));
  135|    438|                    return {};
  136|    438|                }
  137|       |
  138|  8.33k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 8.33k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentifierParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  8.33k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 5.07k, False: 3.26k]
  ------------------
  145|  5.07k|                {
  146|  5.07k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  5.07k|                    return {};
  148|  5.07k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  3.26k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  8.33k|            }
  154|  1.73k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 1.73k, False: 17.2k]
  ------------------
  155|  1.73k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 194, False: 1.54k]
  ------------------
  156|    194|                {
  157|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    194|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    194|                    return {};
  160|    194|                }
  161|       |
  162|  1.54k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 1.34k, False: 194]
  ------------------
  163|  1.34k|                {
  164|  1.34k|                    return ConstructInstructionArgumentImmediateValue(
  165|  1.34k|                            static_cast<phi::int16_t>(token.GetHint()));
  166|  1.34k|                }
  167|       |
  168|    194|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    194|                return {};
  170|  1.54k|            }
  171|       |
  172|  4.54k|            default:
  ------------------
  |  Branch (172:13): [True: 4.54k, False: 14.4k]
  ------------------
  173|  4.54k|                program.AddParseError(
  174|  4.54k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  4.54k|                return {};
  176|  18.9k|        }
  177|  18.9k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|   110k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   110k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 97.9k, False: 12.9k]
  ------------------
  248|  97.9k|                                    {
  249|  97.9k|                                        phi::string_view token_label_name = t.GetText();
  250|  97.9k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  97.9k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 14.1k, False: 83.7k]
  ------------------
  253|  14.1k|                                        {
  254|  14.1k|                                            return true;
  255|  14.1k|                                        }
  256|  97.9k|                                    }
  257|       |
  258|  96.7k|                                    return false;
  259|   110k|                                });

_ZN3dlx9ProcessorC2Ev:
   62|      1|    {
   63|       |        // Mark R0 as ready only
   64|      1|        m_IntRegisters[0].SetReadOnly(true);
   65|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  349|    219|    {
  350|    219|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (350:13): [True: 0, False: 219]
  ------------------
  351|      0|        {
  352|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  353|      0|            return false;
  354|      0|        }
  355|       |
  356|    219|        m_CurrentProgram = &program;
  357|       |
  358|    219|        m_ProgramCounter               = 0u;
  359|    219|        m_Halted                       = false;
  360|    219|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  361|    219|        m_LastRaisedException          = Exception::None;
  362|    219|        m_CurrentStepCount             = 0u;
  363|       |
  364|    219|        return true;
  365|    219|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   10|   310k|    {
   11|   310k|        if (token.length() == 2u)
  ------------------
  |  Branch (11:13): [True: 56.5k, False: 254k]
  ------------------
   12|  56.5k|        {
   13|  56.5k|            const char first_char = token[0u];
   14|  56.5k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (14:17): [True: 2.26k, False: 54.3k]
  |  Branch (14:38): [True: 2.20k, False: 52.1k]
  ------------------
   15|  4.47k|            {
   16|  4.47k|                const char second_char = token[1u];
   17|  4.47k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (17:21): [True: 4.24k, False: 222]
  |  Branch (17:43): [True: 2.63k, False: 1.61k]
  ------------------
   18|  2.63k|                {
   19|  2.63k|                    return static_cast<IntRegisterID>(second_char - '0');
   20|  2.63k|                }
   21|  4.47k|            }
   22|  56.5k|        }
   23|   254k|        else if (token.length() == 3u)
  ------------------
  |  Branch (23:18): [True: 68.1k, False: 186k]
  ------------------
   24|  68.1k|        {
   25|  68.1k|            const char first_char = token[0u];
   26|  68.1k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (26:17): [True: 2.94k, False: 65.2k]
  |  Branch (26:38): [True: 591, False: 64.6k]
  ------------------
   27|  3.53k|            {
   28|  3.53k|                const char second_char = token[1u];
   29|  3.53k|                const char third_char  = token[2u];
   30|       |
   31|  3.53k|                switch (second_char)
   32|  3.53k|                {
   33|    997|                    case '1': {
  ------------------
  |  Branch (33:21): [True: 997, False: 2.53k]
  ------------------
   34|    997|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (34:29): [True: 803, False: 194]
  |  Branch (34:50): [True: 481, False: 322]
  ------------------
   35|    481|                        {
   36|    481|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   37|    481|                        }
   38|    516|                        break;
   39|    997|                    }
   40|    987|                    case '2': {
  ------------------
  |  Branch (40:21): [True: 987, False: 2.54k]
  ------------------
   41|    987|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (41:29): [True: 793, False: 194]
  |  Branch (41:50): [True: 599, False: 194]
  ------------------
   42|    599|                        {
   43|    599|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   44|    599|                        }
   45|    388|                        break;
   46|    987|                    }
   47|    583|                    case '3': {
  ------------------
  |  Branch (47:21): [True: 583, False: 2.95k]
  ------------------
   48|    583|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (48:29): [True: 194, False: 389]
  |  Branch (48:50): [True: 194, False: 195]
  ------------------
   49|    388|                        {
   50|    388|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   51|    388|                        }
   52|    195|                        break;
   53|    583|                    }
   54|    968|                    default: {
  ------------------
  |  Branch (54:21): [True: 968, False: 2.56k]
  ------------------
   55|    968|                        break;
   56|    583|                    }
   57|  3.53k|                }
   58|  3.53k|            }
   59|  68.1k|        }
   60|       |
   61|   306k|        return IntRegisterID::None;
   62|   310k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|   306k|    {
   66|   306k|        if (token.length() == 2u)
  ------------------
  |  Branch (66:13): [True: 53.9k, False: 252k]
  ------------------
   67|  53.9k|        {
   68|  53.9k|            const char first_char = token[0u];
   69|  53.9k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (69:17): [True: 1.67k, False: 52.2k]
  |  Branch (69:38): [True: 1.65k, False: 50.6k]
  ------------------
   70|  3.32k|            {
   71|  3.32k|                const char second_char = token[1u];
   72|  3.32k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (72:21): [True: 3.09k, False: 232]
  |  Branch (72:43): [True: 1.00k, False: 2.09k]
  ------------------
   73|  1.00k|                {
   74|  1.00k|                    return static_cast<FloatRegisterID>(second_char - '0');
   75|  1.00k|                }
   76|  3.32k|            }
   77|  53.9k|        }
   78|   252k|        else if (token.length() == 3u)
  ------------------
  |  Branch (78:18): [True: 66.6k, False: 186k]
  ------------------
   79|  66.6k|        {
   80|  66.6k|            const char first_char = token[0u];
   81|  66.6k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (81:17): [True: 2.99k, False: 63.7k]
  |  Branch (81:38): [True: 1.86k, False: 61.8k]
  ------------------
   82|  4.85k|            {
   83|  4.85k|                const char second_char = token[1u];
   84|  4.85k|                const char third_char  = token[2u];
   85|       |
   86|  4.85k|                switch (second_char)
   87|  4.85k|                {
   88|    843|                    case '1': {
  ------------------
  |  Branch (88:21): [True: 843, False: 4.01k]
  ------------------
   89|    843|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (89:29): [True: 649, False: 194]
  |  Branch (89:50): [True: 455, False: 194]
  ------------------
   90|    455|                        {
   91|    455|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   92|    455|                        }
   93|    388|                        break;
   94|    843|                    }
   95|    589|                    case '2': {
  ------------------
  |  Branch (95:21): [True: 589, False: 4.26k]
  ------------------
   96|    589|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (96:29): [True: 395, False: 194]
  |  Branch (96:50): [True: 201, False: 194]
  ------------------
   97|    201|                        {
   98|    201|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
   99|    201|                        }
  100|    388|                        break;
  101|    589|                    }
  102|    710|                    case '3': {
  ------------------
  |  Branch (102:21): [True: 710, False: 4.14k]
  ------------------
  103|    710|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (103:29): [True: 322, False: 388]
  |  Branch (103:50): [True: 194, False: 194]
  ------------------
  104|    516|                        {
  105|    516|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  106|    516|                        }
  107|    194|                        break;
  108|    710|                    }
  109|  2.71k|                    default: {
  ------------------
  |  Branch (109:21): [True: 2.71k, False: 2.14k]
  ------------------
  110|  2.71k|                        break;
  111|    710|                    }
  112|  4.85k|                }
  113|  4.85k|            }
  114|  66.6k|        }
  115|       |
  116|   304k|        return FloatRegisterID::None;
  117|   306k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  120|   271k|    {
  121|   271k|        if (token.length() == 4u)
  ------------------
  |  Branch (121:13): [True: 56.7k, False: 214k]
  ------------------
  122|  56.7k|        {
  123|  56.7k|            const char c1 = token[0u];
  124|  56.7k|            const char c2 = token[1u];
  125|  56.7k|            const char c3 = token[2u];
  126|  56.7k|            const char c4 = token[3u];
  127|       |
  128|  56.7k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (128:21): [True: 1.39k, False: 55.3k]
  |  Branch (128:34): [True: 1.17k, False: 54.2k]
  |  Branch (128:49): [True: 196, False: 2.37k]
  |  Branch (128:62): [True: 1.59k, False: 782]
  ------------------
  129|  56.7k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (129:21): [True: 982, False: 809]
  |  Branch (129:34): [True: 612, False: 197]
  |  Branch (129:49): [True: 962, False: 632]
  |  Branch (129:62): [True: 4, False: 628]
  ------------------
  130|  56.7k|        }
  131|       |
  132|   214k|        return false;
  133|   271k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   26|   233k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   36|  72.6k|    {}
_ZNK3dlx5Token7GetTypeEv:
   39|   858k|    {
   40|   858k|        return m_Type;
   41|   858k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   49|   795k|    {
   50|   795k|        return m_LineNumber;
   51|   795k|    }
_ZNK3dlx5Token9GetColumnEv:
   54|  1.62M|    {
   55|  1.62M|        return m_Column;
   56|  1.62M|    }
_ZNK3dlx5Token9GetLengthEv:
   59|  1.11M|    {
   60|  1.11M|        return m_Text.length();
   61|  1.11M|    }
_ZNK3dlx5Token7GetTextEv:
   64|   484k|    {
   65|   484k|        return m_Text;
   66|   484k|    }
_ZNK3dlx5Token7HasHintEv:
   78|  29.6k|    {
   79|  29.6k|        return m_HasHint;
   80|  29.6k|    }
_ZNK3dlx5Token7GetHintEv:
   83|  31.0k|    {
   84|  31.0k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   85|  31.0k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   86|  31.0k|                   m_Type == Type::ImmediateInteger);
   87|  31.0k|        PHI_ASSERT(m_HasHint);
   88|       |
   89|  31.0k|        return m_Hint;
   90|  31.0k|    }

_ZN3dlx11TokenStream8finalizeEv:
   28|  5.21k|    {
   29|       |#if defined(PHI_DEBUG)
   30|       |        PHI_ASSERT(!m_Finalized);
   31|       |#endif
   32|       |
   33|  5.21k|        m_Iterator = 0u;
   34|       |#if defined(PHI_DEBUG)
   35|       |        m_Finalized = true;
   36|       |#endif
   37|  5.21k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   49|  1.09k|    {
   50|  1.09k|        return x + m_Iterator <= m_Tokens.size();
   51|  1.09k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   54|   309k|    {
   55|   309k|        return m_Iterator < m_Tokens.size();
   56|   309k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   59|   306k|    {
   60|   306k|        return m_Iterator >= m_Tokens.size();
   61|   306k|    }
_ZN3dlx11TokenStream7consumeEv:
   74|   306k|    {
   75|   306k|        PHI_ASSERT(!reached_end());
   76|       |#if defined(PHI_DEBUG)
   77|       |        PHI_ASSERT(m_Finalized);
   78|       |#endif
   79|       |
   80|   306k|        return m_Tokens.at(m_Iterator++.unsafe());
   81|   306k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  154|  1.09k|    {
  155|  1.09k|        return m_Iterator;
  156|  1.09k|    }
_ZN3dlx11TokenStream12set_positionEN3phi7integerImEE:
  159|    226|    {
  160|       |#if defined(PHI_DEBUG)
  161|       |        PHI_ASSERT(m_Finalized);
  162|       |#endif
  163|       |
  164|    226|        m_Iterator = pos;
  165|    226|    }
_ZNK3dlx11TokenStream5beginEv:
  168|  5.21k|    {
  169|       |#if defined(PHI_DEBUG)
  170|       |        //PHI_ASSERT(m_Finalized);
  171|       |#endif
  172|       |
  173|  5.21k|        return m_Tokens.begin();
  174|  5.21k|    }
_ZNK3dlx11TokenStream3endEv:
  186|  5.21k|    {
  187|       |#if defined(PHI_DEBUG)
  188|       |        //PHI_ASSERT(m_Finalized);
  189|       |#endif
  190|       |
  191|  5.21k|        return m_Tokens.end();
  192|  5.21k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  204|    938|    {
  205|       |#if defined(PHI_DEBUG)
  206|       |        //PHI_ASSERT(m_Finalized);
  207|       |#endif
  208|       |
  209|    938|        return m_Tokens.rbegin();
  210|    938|    }
_ZNK3dlx11TokenStream4rendEv:
  213|  35.2k|    {
  214|       |#if defined(PHI_DEBUG)
  215|       |        //PHI_ASSERT(m_Finalized);
  216|       |#endif
  217|       |
  218|  35.2k|        return m_Tokens.rend();
  219|  35.2k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  5.21k|    {
   66|  5.21k|        TokenStream tokens;
   67|       |
   68|  5.21k|        phi::string_view current_token;
   69|       |
   70|  5.21k|        phi::u64 current_line_number{1u};
   71|  5.21k|        phi::u64 current_column{1u};
   72|  5.21k|        phi::u64 token_begin{0u};
   73|       |
   74|  5.21k|        phi::boolean parsing_comment{false};
   75|       |
   76|   919k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 914k, False: 5.21k]
  ------------------
   77|   914k|        {
   78|   914k|            const char c{source.at(i)};
   79|       |
   80|   914k|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 41.7k, False: 872k]
  ------------------
   81|  41.7k|            {
   82|  41.7k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 6.26k, False: 35.5k]
  ------------------
   83|  6.26k|                {
   84|       |                    // Skip empty lines
   85|  6.26k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  6.26k|                                        current_line_number, current_column);
   87|       |
   88|  6.26k|                    parsing_comment = false;
   89|  6.26k|                    current_line_number += 1u;
   90|  6.26k|                    current_column = 1u;
   91|  6.26k|                    continue;
   92|  6.26k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  35.5k|                tokens.emplace_back(ParseToken(
   96|  35.5k|                        source.substring_view(
   97|  35.5k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  35.5k|                                current_token.length()),
   99|  35.5k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  35.5k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  35.5k|                                    current_line_number, current_column);
  103|       |
  104|  35.5k|                current_token   = phi::string_view{};
  105|  35.5k|                parsing_comment = false;
  106|  35.5k|                current_line_number += 1u;
  107|  35.5k|                current_column = 0u;
  108|  35.5k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|   872k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 947, False: 871k]
  |  Branch (110:34): [True: 1.48k, False: 870k]
  ------------------
  111|  2.43k|            {
  112|  2.43k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 303, False: 2.13k]
  ------------------
  113|    303|                {
  114|    303|                    token_begin = i;
  115|    303|                }
  116|  2.13k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 1.73k, False: 397]
  ------------------
  117|  1.73k|                {
  118|  1.73k|                    tokens.emplace_back(ParseToken(
  119|  1.73k|                            source.substring_view(
  120|  1.73k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  1.73k|                                    current_token.length()),
  122|  1.73k|                            current_line_number, current_column - current_token.length()));
  123|  1.73k|                    token_begin   = i;
  124|  1.73k|                    current_token = phi::string_view{};
  125|  1.73k|                }
  126|       |
  127|  2.43k|                parsing_comment = true;
  128|  2.43k|                current_token   = source.substring_view(
  129|  2.43k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  2.43k|                        current_token.length() + 1u);
  131|  2.43k|            }
  132|   870k|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 677, False: 869k]
  ------------------
  133|    677|            {
  134|       |                // simply append the character
  135|    677|                current_token = source.substring_view(
  136|    677|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|    677|                        current_token.length() + 1u);
  138|    677|            }
  139|   869k|            else
  140|   869k|            {
  141|       |                // Not parsing a comment
  142|   869k|                switch (c)
  143|   869k|                {
  144|  8.31k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 8.31k, False: 861k]
  ------------------
  145|  19.2k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 10.9k, False: 858k]
  ------------------
  146|  19.2k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 0, False: 869k]
  ------------------
  147|  19.2k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 1.12k, False: 18.0k]
  ------------------
  148|  1.12k|                        {
  149|  1.12k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|  1.12k|                            continue;
  152|  1.12k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  18.0k|                        tokens.emplace_back(ParseToken(
  156|  18.0k|                                source.substring_view(
  157|  18.0k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  18.0k|                                        current_token.length()),
  159|  18.0k|                                current_line_number, current_column - current_token.length()));
  160|  18.0k|                        current_token = phi::string_view{};
  161|  18.0k|                        break;
  162|   107k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 107k, False: 762k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|   107k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 103k, False: 3.98k]
  ------------------
  165|   103k|                        {
  166|   103k|                            current_token = source.substring_view(
  167|   103k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|   103k|                                    current_token.length() + 1u);
  169|   103k|                            tokens.emplace_back(ParseToken(
  170|   103k|                                    source.substring_view(
  171|   103k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|   103k|                                                    token_begin),
  173|   103k|                                            current_token.length()),
  174|   103k|                                    current_line_number,
  175|   103k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|   103k|                            current_token = phi::string_view{};
  178|   103k|                        }
  179|  3.98k|                        else
  180|  3.98k|                        {
  181|       |                            // Orphan colon
  182|  3.98k|                            token_begin = i;
  183|       |
  184|  3.98k|                            tokens.emplace_back(
  185|  3.98k|                                    Token::Type::Colon,
  186|  3.98k|                                    source.substring_view(
  187|  3.98k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  3.98k|                                                    token_begin),
  189|  3.98k|                                            1u),
  190|  3.98k|                                    current_line_number, current_column);
  191|  3.98k|                        }
  192|   107k|                        break;
  193|  34.7k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 34.7k, False: 834k]
  ------------------
  194|  42.8k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 8.08k, False: 861k]
  ------------------
  195|  51.0k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 8.25k, False: 861k]
  ------------------
  196|  51.0k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 46.9k, False: 4.10k]
  ------------------
  197|  46.9k|                        {
  198|  46.9k|                            tokens.emplace_back(ParseToken(
  199|  46.9k|                                    source.substring_view(
  200|  46.9k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  46.9k|                                                    token_begin),
  202|  46.9k|                                            current_token.length()),
  203|  46.9k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  46.9k|                            current_token = phi::string_view{};
  206|  46.9k|                        }
  207|       |
  208|  51.0k|                        Token::Type type;
  209|  51.0k|                        switch (c)
  210|  51.0k|                        {
  211|  34.7k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 34.7k, False: 16.3k]
  ------------------
  212|  34.7k|                                type = Token::Type::Comma;
  213|  34.7k|                                break;
  214|  8.08k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 8.08k, False: 42.9k]
  ------------------
  215|  8.08k|                                type = Token::Type::OpenBracket;
  216|  8.08k|                                break;
  217|  8.25k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 8.25k, False: 42.8k]
  ------------------
  218|  8.25k|                                type = Token::Type::ClosingBracket;
  219|  8.25k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 51.0k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  51.0k|#endif
  225|  51.0k|                        }
  226|       |
  227|  51.0k|                        token_begin = i;
  228|       |
  229|  51.0k|                        tokens.emplace_back(
  230|  51.0k|                                type,
  231|  51.0k|                                source.substring_view(
  232|  51.0k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  51.0k|                                        1u),
  234|  51.0k|                                current_line_number, current_column);
  235|  51.0k|                        break;
  236|       |
  237|   691k|                    default:
  ------------------
  |  Branch (237:21): [True: 691k, False: 177k]
  ------------------
  238|   691k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 207k, False: 484k]
  ------------------
  239|   207k|                        {
  240|   207k|                            token_begin = i;
  241|   207k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   691k|                        current_token = source.substring_view(
  245|   691k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   691k|                                current_token.length() + 1u);
  247|   869k|                }
  248|   869k|            }
  249|       |
  250|   907k|            current_column += 1u;
  251|   907k|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  5.21k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 3.76k, False: 1.44k]
  ------------------
  255|  3.76k|        {
  256|  3.76k|            tokens.emplace_back(
  257|  3.76k|                    ParseToken(source.substring_view(
  258|  3.76k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  3.76k|                                       current_token.length()),
  260|  3.76k|                               current_line_number, current_column - current_token.length()));
  261|  3.76k|        }
  262|       |
  263|       |        // Finalize token stream
  264|  5.21k|        tokens.finalize();
  265|       |
  266|  5.21k|        return tokens;
  267|  5.21k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   209k|    {
   14|   209k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 2.72k, False: 206k]
  |  Branch (14:13): [True: 2.05k, False: 207k]
  |  Branch (14:36): [True: 2.05k, False: 672]
  ------------------
   15|  2.05k|        {
   16|  2.05k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  2.05k|            if (number)
  ------------------
  |  Branch (18:17): [True: 1.41k, False: 638]
  ------------------
   19|  1.41k|            {
   20|  1.41k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  1.41k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  1.41k|            }
   23|       |
   24|    638|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  2.05k|        }
   26|       |
   27|   207k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 738, False: 206k]
  |  Branch (27:13): [True: 2.03k, False: 205k]
  |  Branch (27:36): [True: 1.30k, False: 205k]
  ------------------
   28|  2.03k|        {
   29|  2.03k|            return {Token::Type::Comment, token, line_number, column};
   30|  2.03k|        }
   31|       |
   32|   205k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 2.82k, False: 202k]
  ------------------
   33|  2.82k|        {
   34|  2.82k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  2.82k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  2.82k|        }
   37|       |
   38|   202k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 644, False: 201k]
  ------------------
   39|    644|        {
   40|    644|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|    644|        }
   42|       |
   43|   201k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 2.19k, False: 199k]
  ------------------
   44|  2.19k|        {
   45|  2.19k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  2.19k|                    static_cast<phi::uint32_t>(id)};
   47|  2.19k|        }
   48|       |
   49|   199k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 1.82k, False: 197k]
  ------------------
   50|  1.82k|        {
   51|  1.82k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  1.82k|                    static_cast<phi::uint32_t>(id)};
   53|  1.82k|        }
   54|       |
   55|   197k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 64.4k, False: 133k]
  ------------------
   56|  64.4k|        {
   57|  64.4k|            return {Token::Type::OpCode, token, line_number, column,
   58|  64.4k|                    static_cast<phi::uint32_t>(opcode)};
   59|  64.4k|        }
   60|       |
   61|   133k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|   197k|    }

_ZN6ImVec2C2Ev:
  267|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

LLVMFuzzerTestOneInput:
    9|  5.21k|{
   10|  5.21k|    static dlxemu::Emulator emu;
   11|       |
   12|  5.21k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   13|       |
   14|  5.21k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   15|       |
   16|       |    // Parse it
   17|  5.21k|    editor.SetText(std::string(source.data(), source.length().unsafe()));
   18|  5.21k|    editor.m_FullText = editor.GetText();
   19|       |
   20|  5.21k|    emu.ParseProgram(editor.m_FullText);
   21|       |
   22|  5.21k|    editor.ColorizeInternal();
   23|       |
   24|  5.21k|    return 0;
   25|  5.21k|}


_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  195|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  200|  29.4k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  238|  5.89k|    {
  239|  5.89k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (239:13): [True: 2.27k, False: 3.62k]
  ------------------
  240|  2.27k|        {
  241|  2.27k|            return m_Line < other.m_Line;
  242|  2.27k|        }
  243|       |
  244|  3.62k|        return m_Column <= other.m_Column;
  245|  5.89k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  249|      1|    {
  250|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (250:13): [True: 0, False: 1]
  ------------------
  251|      0|        {
  252|      0|            return m_Line > other.m_Line;
  253|      0|        }
  254|       |
  255|      1|        return m_Column >= other.m_Column;
  256|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  263|  1.51M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  291|      1|    {
  292|      1|        Colorize();
  293|      1|        m_Lines.push_back(Line());
  294|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  297|      1|    {
  298|      1|        VerifyInternalState();
  299|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  347|  5.89k|    {
  348|  5.89k|        m_ErrorMarkers.clear();
  349|  5.89k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  412|  5.89k|    {
  413|  5.89k|        m_Breakpoints.clear();
  414|  5.89k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  492|  5.89k|    {
  493|  5.89k|        m_Lines.clear();
  494|  5.89k|        ResetState();
  495|  5.89k|        m_Lines.emplace_back(Line());
  496|       |
  497|  5.89k|        for (const char character : text)
  ------------------
  |  Branch (497:35): [True: 2.43M, False: 5.89k]
  ------------------
  498|  2.43M|        {
  499|  2.43M|            if (character == '\r' ||
  ------------------
  |  Branch (499:17): [True: 2.45k, False: 2.43M]
  |  Branch (499:17): [True: 811k, False: 1.62M]
  ------------------
  500|  2.43M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (500:18): [True: 956k, False: 1.47M]
  |  Branch (500:48): [True: 845k, False: 111k]
  |  Branch (500:69): [True: 808k, False: 36.9k]
  ------------------
  501|   811k|            {
  502|       |                // ignore the carriage return character and control characters
  503|   811k|            }
  504|  1.62M|            else if (character == '\n')
  ------------------
  |  Branch (504:22): [True: 111k, False: 1.51M]
  ------------------
  505|   111k|            {
  506|   111k|                m_Lines.emplace_back(Line());
  507|   111k|            }
  508|  1.51M|            else
  509|  1.51M|            {
  510|  1.51M|                m_Lines.back().emplace_back(
  511|  1.51M|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  512|  1.51M|            }
  513|  2.43M|        }
  514|       |
  515|  5.89k|        m_TextChanged = true;
  516|  5.89k|        m_ScrollToTop = true;
  517|       |
  518|  5.89k|        m_UndoBuffer.clear();
  519|  5.89k|        m_UndoIndex = 0u;
  520|       |
  521|  5.89k|        Colorize();
  522|  5.89k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  525|  5.89k|    {
  526|  5.89k|        const phi::u32 max_line = GetMaxLineNumber();
  527|       |
  528|  5.89k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  529|  5.89k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1502|      1|    {
 1503|       |        // Lines should never be empty
 1504|      1|        PHI_ASSERT(!m_Lines.empty());
 1505|       |
 1506|       |        // Verify Selection is still in a valid state
 1507|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1508|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1509|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1510|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1511|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1512|       |
 1513|       |        // Verify cursor position
 1514|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1515|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1516|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1517|       |
 1518|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1519|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1520|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1521|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1522|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1523|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1524|       |#endif
 1525|       |
 1526|       |        // Verify that all breakpoints are on existing lines
 1527|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1527:35): [True: 0, False: 1]
  ------------------
 1528|      0|        {
 1529|      0|            PHI_ASSERT(break_point != 0u);
 1530|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1531|      0|        }
 1532|       |
 1533|       |        // Verify that all error markers are on existing lines
 1534|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1534:34): [True: 0, False: 1]
  ------------------
 1535|      0|        {
 1536|      0|            const phi::u32 line_number = error_marker.first;
 1537|       |
 1538|      0|            PHI_ASSERT(line_number != 0u);
 1539|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1540|      0|        }
 1541|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1544|      1|    {
 1545|      1|        constexpr const static Palette palette = {{
 1546|      1|                0xff7f7f7f, // Default
 1547|      1|                0xffd69c56, // OpCode
 1548|      1|                0xff00ff00, // Register
 1549|      1|                0xff7070e0, // IntegerLiteral
 1550|      1|                0xff206020, // Comment
 1551|      1|                0xff101010, // Background
 1552|      1|                0xffe0e0e0, // Cursor
 1553|      1|                0x80a06020, // Selection
 1554|      1|                0x800020ff, // ErrorMarker
 1555|      1|                0x40f08000, // Breakpoint
 1556|      1|                0xff707000, // Line number
 1557|      1|                0x40000000, // Current line fill
 1558|      1|                0x40808080, // Current line fill (inactive)
 1559|      1|                0x40a0a0a0, // Current line edge
 1560|      1|        }};
 1561|       |
 1562|      1|        return palette;
 1563|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1730|  5.89k|    {
 1731|       |        // TODO: This is quite unreadable
 1732|  5.89k|        const phi::u32 to_line =
 1733|  5.89k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1733:17): [True: 5.89k, False: 0]
  ------------------
 1734|  5.89k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1735|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1736|       |
 1737|  5.89k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1738|  5.89k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1739|  5.89k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1740|  5.89k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1741|  5.89k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1847|  5.89k|    {
 1848|  5.89k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1849|  5.89k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1850|  5.89k|        PHI_ASSERT(start <= end);
 1851|       |
 1852|  5.89k|        std::string result;
 1853|       |
 1854|  5.89k|        phi::u32   lstart = start.m_Line;
 1855|  5.89k|        phi::u32   lend   = end.m_Line;
 1856|  5.89k|        phi::u32   istart = GetCharacterIndex(start);
 1857|  5.89k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1858|  5.89k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1859|  5.89k|        phi::usize size   = 0u;
 1860|       |
 1861|   122k|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1861:35): [True: 116k, False: 5.89k]
  ------------------
 1862|   116k|        {
 1863|   116k|            PHI_ASSERT(i < m_Lines.size());
 1864|   116k|            size += m_Lines[i.unsafe()].size();
 1865|   116k|        }
 1866|       |
 1867|  5.89k|        result.reserve((size + size / 8u).unsafe());
 1868|       |
 1869|  1.62M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1869:16): [True: 1.21M, False: 413k]
  |  Branch (1869:16): [True: 1.62M, False: 5.89k]
  |  Branch (1869:33): [True: 407k, False: 5.89k]
  ------------------
 1870|  1.62M|        {
 1871|  1.62M|            PHI_ASSERT(lstart < m_Lines.size());
 1872|       |
 1873|  1.62M|            const Line& line = m_Lines[lstart.unsafe()];
 1874|  1.62M|            if (istart < line.size())
  ------------------
  |  Branch (1874:17): [True: 1.51M, False: 111k]
  ------------------
 1875|  1.51M|            {
 1876|  1.51M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1877|  1.51M|                istart++;
 1878|  1.51M|            }
 1879|   111k|            else
 1880|   111k|            {
 1881|   111k|                istart = 0u;
 1882|   111k|                ++lstart;
 1883|       |
 1884|   111k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1884:21): [True: 111k, False: 0]
  ------------------
 1885|   111k|                {
 1886|   111k|                    result += '\n';
 1887|   111k|                }
 1888|   111k|            }
 1889|  1.62M|        }
 1890|       |
 1891|  5.89k|        return result;
 1892|  5.89k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2428|  11.7k|    {
 2429|  11.7k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2430|       |
 2431|  11.7k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2432|  11.7k|        phi::u32    index = 0u;
 2433|   672k|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2433:35): [True: 666k, False: 6.10k]
  |  Branch (2433:35): [True: 660k, False: 11.7k]
  |  Branch (2433:58): [True: 660k, False: 5.69k]
  ------------------
 2434|   660k|        {
 2435|   660k|            PHI_ASSERT(index < line.size());
 2436|   660k|            const Char character = line[index.unsafe()].m_Char;
 2437|       |
 2438|   660k|            if (character == '\t')
  ------------------
  |  Branch (2438:17): [True: 12.9k, False: 647k]
  ------------------
 2439|  12.9k|            {
 2440|  12.9k|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2441|  12.9k|            }
 2442|   647k|            else
 2443|   647k|            {
 2444|   647k|                ++column;
 2445|   647k|            }
 2446|       |
 2447|   660k|            index += UTF8CharLength(character);
 2448|   660k|        }
 2449|       |
 2450|  11.7k|        return index;
 2451|  11.7k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2500|  5.89k|    {
 2501|  5.89k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2501:13): [True: 0, False: 5.89k]
  ------------------
 2502|      0|        {
 2503|      0|            return 0u;
 2504|      0|        }
 2505|       |
 2506|  5.89k|        const Line& line = m_Lines[line_number.unsafe()];
 2507|  5.89k|        phi::u32    col  = 0u;
 2508|       |
 2509|   666k|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2509:32): [True: 660k, False: 5.89k]
  ------------------
 2510|   660k|        {
 2511|   660k|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2512|   660k|            if (character == '\t')
  ------------------
  |  Branch (2512:17): [True: 12.9k, False: 647k]
  ------------------
 2513|  12.9k|            {
 2514|  12.9k|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2515|  12.9k|            }
 2516|   647k|            else
 2517|   647k|            {
 2518|   647k|                col++;
 2519|   647k|            }
 2520|       |
 2521|   660k|            i += UTF8CharLength(character);
 2522|   660k|        }
 2523|       |
 2524|  5.89k|        return col;
 2525|  5.89k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2528|  5.89k|    {
 2529|  5.89k|        PHI_ASSERT(!m_Lines.empty());
 2530|       |
 2531|  5.89k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2532|  5.89k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3658|   656k|    {
 3659|   656k|        PaletteIndex palette_index{PaletteIndex::Default};
 3660|       |
 3661|       |        // Determine palette color
 3662|   656k|        switch (token.GetType())
 3663|   656k|        {
 3664|  4.31k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3664:13): [True: 4.31k, False: 652k]
  ------------------
 3665|  4.31k|                palette_index = PaletteIndex::Comment;
 3666|  4.31k|                break;
 3667|  4.08k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3667:13): [True: 4.08k, False: 652k]
  ------------------
 3668|  13.2k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3668:13): [True: 9.21k, False: 647k]
  ------------------
 3669|  13.2k|                palette_index = PaletteIndex::IntegerLiteral;
 3670|  13.2k|                break;
 3671|  78.1k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3671:13): [True: 78.1k, False: 578k]
  ------------------
 3672|  78.1k|                palette_index = PaletteIndex::OpCode;
 3673|  78.1k|                break;
 3674|  2.66k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3674:13): [True: 2.66k, False: 654k]
  ------------------
 3675|  6.68k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3675:13): [True: 4.02k, False: 652k]
  ------------------
 3676|  7.43k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3676:13): [True: 757, False: 656k]
  ------------------
 3677|  7.43k|                palette_index = PaletteIndex::Register;
 3678|  7.43k|                break;
 3679|   111k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3679:13): [True: 111k, False: 545k]
  ------------------
 3680|   111k|                return;
 3681|   442k|            default:
  ------------------
  |  Branch (3681:13): [True: 442k, False: 214k]
  ------------------
 3682|   442k|                break;
 3683|   656k|        }
 3684|       |
 3685|   545k|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3686|   545k|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3687|       |
 3688|   545k|        for (phi::u64 index{token.GetColumn() - 1u};
 3689|  1.99M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3689:14): [True: 1.45M, False: 545k]
  ------------------
 3690|  1.45M|        {
 3691|  1.45M|            PHI_ASSERT(index < line.size());
 3692|  1.45M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3693|  1.45M|        }
 3694|   545k|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3697|  5.89k|    {
 3698|  5.89k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3699|       |
 3700|  5.89k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3700:38): [True: 656k, False: 5.89k]
  ------------------
 3701|   656k|        {
 3702|   656k|            ColorizeToken(token);
 3703|   656k|        }
 3704|  5.89k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3707|  5.89k|    {
 3708|  5.89k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3709|  5.89k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3710|  5.89k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3711|       |
 3712|       |        // Clear breakpoints and markers
 3713|  5.89k|        ClearBreakPoints();
 3714|  5.89k|        ClearErrorMarkers();
 3715|  5.89k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  133|   660k|{
  134|   660k|    return UTF8CharLength(static_cast<char>(characater));
  135|   660k|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  103|  1.32M|{
  104|  1.32M|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (104:9): [True: 2.26k, False: 1.31M]
  ------------------
  105|  2.26k|    {
  106|  2.26k|        return 6_u8;
  107|  2.26k|    }
  108|       |
  109|  1.31M|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (109:9): [True: 4.00k, False: 1.31M]
  ------------------
  110|  4.00k|    {
  111|  4.00k|        return 5_u8;
  112|  4.00k|    }
  113|       |
  114|  1.31M|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (114:9): [True: 3.33k, False: 1.31M]
  ------------------
  115|  3.33k|    {
  116|  3.33k|        return 4_u8;
  117|  3.33k|    }
  118|       |
  119|  1.31M|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (119:9): [True: 6.61k, False: 1.30M]
  ------------------
  120|  6.61k|    {
  121|  6.61k|        return 3_u8;
  122|  6.61k|    }
  123|       |
  124|  1.30M|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (124:9): [True: 22.9k, False: 1.28M]
  ------------------
  125|  22.9k|    {
  126|  22.9k|        return 2_u8;
  127|  22.9k|    }
  128|       |
  129|  1.28M|    return 1_u8;
  130|  1.30M|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  174|  5.89k|    {
  175|  5.89k|        return m_DLXProgram;
  176|  5.89k|    }
_ZN6dlxemu8Emulator12ParseProgramENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  179|  5.89k|    {
  180|  5.89k|        m_DLXProgram = dlx::Parser::Parse(source);
  181|       |
  182|  5.89k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (182:13): [True: 143, False: 5.75k]
  ------------------
  183|    143|        {
  184|    143|            m_Processor.LoadProgram(m_DLXProgram);
  185|    143|        }
  186|  5.89k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  199|  5.89k|    {
  200|  5.89k|        return m_CodeEditor;
  201|  5.89k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   37|      1|    {
   38|      1|        Shutdown();
   39|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  107|      1|    {
  108|      1|        if (imgui_initialized)
  ------------------
  |  Branch (108:13): [True: 0, False: 1]
  ------------------
  109|      0|        {
  110|      0|            ShutdownImGui();
  111|      0|        }
  112|       |
  113|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (113:13): [True: 0, False: 1]
  ------------------
  114|      0|        {
  115|      0|            glfwDestroyWindow(m_Window);
  116|      0|        }
  117|       |
  118|      1|        if (glfw_initialized)
  ------------------
  |  Branch (118:13): [True: 0, False: 1]
  ------------------
  119|      0|        {
  120|      0|            glfwTerminate();
  121|      0|        }
  122|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   135k|        {
  169|   135k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   135k|            switch (index.unsafe())
  172|   135k|            {
  173|  60.9k|                case 0:
  ------------------
  |  Branch (173:17): [True: 60.9k, False: 74.9k]
  ------------------
  174|  60.9k|                    return m_Arg1Type;
  175|       |
  176|  37.6k|                case 1:
  ------------------
  |  Branch (176:17): [True: 37.6k, False: 98.2k]
  ------------------
  177|  37.6k|                    return m_Arg2Type;
  178|       |
  179|  37.2k|                case 2:
  ------------------
  |  Branch (179:17): [True: 37.2k, False: 98.6k]
  ------------------
  180|  37.2k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 135k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   135k|#endif
  187|   135k|            }
  188|   135k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  36.4k|        {
  195|  36.4k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  36.4k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 36.1k, False: 274]
  ------------------
  199|  36.1k|            {
  200|  36.1k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  36.1k|            }
  202|  36.4k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 21.3k, False: 15.0k]
  ------------------
  203|  21.3k|            {
  204|  21.3k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  21.3k|            }
  206|  36.4k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 11.6k, False: 24.7k]
  ------------------
  207|  11.6k|            {
  208|  11.6k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  11.6k|            }
  210|       |
  211|  36.4k|            return number_of_argument_required;
  212|  36.4k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  36.4k|        {
  221|  36.4k|            return m_Executor;
  222|  36.4k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  21.3k|    {
   38|  21.3k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  21.3k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  21.3k|                                         static_cast<underlying_t>(rhs));
   42|  21.3k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  21.3k|    {
   55|  21.3k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  21.3k|        return static_cast<underlying_t>(type & test) != 0;
   58|  21.3k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|   138k|    {
   32|   138k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 3.16k, False: 135k]
  ------------------
   33|  3.16k|        {
   34|  3.16k|            return true;
   35|  3.16k|        }
   36|       |
   37|   135k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 1.17k, False: 134k]
  ------------------
   38|  1.17k|        {
   39|  1.17k|            return true;
   40|  1.17k|        }
   41|       |
   42|   134k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 39.3k, False: 95.0k]
  ------------------
   43|  39.3k|        {
   44|  39.3k|            return true;
   45|  39.3k|        }
   46|       |
   47|  95.0k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 386, False: 94.6k]
  ------------------
   48|    386|        {
   49|    386|            return true;
   50|    386|        }
   51|       |
   52|  94.6k|        return false;
   53|  95.0k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  94.6k|    {
   57|  94.6k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 94.6k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  94.6k|        const char first_char = token.at(0);
   63|       |
   64|  94.6k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 19.4k, False: 75.1k]
  ------------------
   65|  19.4k|        {
   66|  19.4k|            return phi::is_alpha(first_char);
   67|  19.4k|        }
   68|       |
   69|  75.1k|        phi::boolean just_under_scores = (first_char == '_');
   70|  75.1k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 14.5k, False: 60.6k]
  |  Branch (70:15): [True: 59.5k, False: 15.6k]
  |  Branch (70:44): [True: 1.12k, False: 14.5k]
  ------------------
   71|  14.5k|        {
   72|  14.5k|            return false;
   73|  14.5k|        }
   74|       |
   75|   197k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 158k, False: 38.9k]
  ------------------
   76|   158k|        {
   77|   158k|            const char c{token.at(index)};
   78|       |
   79|   158k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 135k, False: 23.0k]
  ------------------
   80|   135k|            {
   81|   135k|                just_under_scores = false;
   82|   135k|            }
   83|  23.0k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 1.32k, False: 21.7k]
  ------------------
   84|  1.32k|            {
   85|  1.32k|                continue;
   86|  1.32k|            }
   87|  21.7k|            else
   88|  21.7k|            {
   89|  21.7k|                return false;
   90|  21.7k|            }
   91|   158k|        }
   92|       |
   93|  38.9k|        return !just_under_scores;
   94|  60.6k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   357k|    {
  101|   357k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 357k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   357k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 62.1k, False: 294k]
  ------------------
  107|  62.1k|        {
  108|  62.1k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 7.35k, False: 54.7k]
  ------------------
  109|  7.35k|            {
  110|  7.35k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  7.35k|            }
  112|       |
  113|  54.7k|            return {};
  114|  62.1k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   294k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 659, False: 294k]
  ------------------
  118|    659|        {
  119|    659|            return {};
  120|    659|        }
  121|       |
  122|   294k|        std::int32_t number{0};
  123|   294k|        phi::boolean is_negative{false};
  124|   294k|        phi::boolean starts_with_zero{false};
  125|   294k|        phi::boolean parsing_binary{false};
  126|   294k|        phi::boolean parsing_octal{false};
  127|   294k|        phi::boolean parsing_hexadecimal{false};
  128|   294k|        phi::boolean parsed_something{false};
  129|   294k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   330k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 326k, False: 3.90k]
  ------------------
  134|   326k|        {
  135|   326k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   326k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 294k, False: 32.5k]
  ------------------
  139|   294k|            {
  140|   294k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 901, False: 293k]
  ------------------
  141|    901|                {
  142|    901|                    continue;
  143|    901|                }
  144|       |
  145|   293k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 4.07k, False: 289k]
  ------------------
  146|  4.07k|                {
  147|  4.07k|                    is_negative = true;
  148|  4.07k|                    continue;
  149|  4.07k|                }
  150|       |
  151|   289k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 6.79k, False: 282k]
  ------------------
  152|  6.79k|                {
  153|  6.79k|                    starts_with_zero = true;
  154|  6.79k|                    continue;
  155|  6.79k|                }
  156|       |
  157|   282k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 629, False: 281k]
  ------------------
  158|    629|                {
  159|    629|                    return {};
  160|    629|                }
  161|   282k|            }
  162|       |
  163|       |            // Second character
  164|   314k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 15.5k, False: 298k]
  ------------------
  165|  15.5k|            {
  166|  15.5k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 6.79k, False: 8.72k]
  ------------------
  167|  6.79k|                {
  168|       |                    // Binary
  169|  6.79k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 1.53k, False: 5.26k]
  |  Branch (169:37): [True: 471, False: 4.79k]
  ------------------
  170|  2.00k|                    {
  171|  2.00k|                        parsing_binary = true;
  172|  2.00k|                        continue;
  173|  2.00k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  4.79k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 1.34k, False: 3.45k]
  |  Branch (176:37): [True: 1.11k, False: 2.33k]
  ------------------
  177|  2.45k|                    {
  178|  2.45k|                        parsing_hexadecimal = true;
  179|  2.45k|                        continue;
  180|  2.45k|                    }
  181|       |
  182|       |                    // Octal
  183|  2.33k|                    parsing_octal = true;
  184|  2.33k|                }
  185|  15.5k|            }
  186|       |
  187|       |            // Handle seperators
  188|   309k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 2.65k, False: 307k]
  ------------------
  189|  2.65k|            {
  190|  2.65k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 1.16k, False: 1.49k]
  ------------------
  191|  1.16k|                {
  192|  1.16k|                    return {};
  193|  1.16k|                }
  194|       |
  195|  1.49k|                parsed_separator = true;
  196|  1.49k|                continue;
  197|  2.65k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   307k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 5.84k, False: 301k]
  |  Branch (200:32): [True: 228, False: 5.61k]
  ------------------
  201|    228|            {
  202|       |                // Would underflow
  203|    228|                return {};
  204|    228|            }
  205|   307k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 301k, False: 5.61k]
  |  Branch (205:17): [True: 719, False: 306k]
  |  Branch (205:33): [True: 719, False: 300k]
  ------------------
  206|    719|            {
  207|       |                // Would overflow
  208|    719|                return {};
  209|    719|            }
  210|       |
  211|   306k|            parsed_separator = false;
  212|   306k|            parsed_something = true;
  213|       |
  214|   306k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 2.03k, False: 304k]
  ------------------
  215|  2.03k|            {
  216|  2.03k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 1.63k, False: 401]
  ------------------
  217|  1.63k|                {
  218|  1.63k|                    return {};
  219|  1.63k|                }
  220|       |
  221|    401|                number <<= 1;
  222|    401|                number |= (c - '0');
  223|    401|            }
  224|   304k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 3.02k, False: 301k]
  ------------------
  225|  3.02k|            {
  226|  3.02k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 1.97k, False: 1.05k]
  ------------------
  227|  1.97k|                {
  228|  1.97k|                    return {};
  229|  1.97k|                }
  230|       |
  231|  1.05k|                number <<= 3;
  232|  1.05k|                number |= (c - '0');
  233|  1.05k|            }
  234|   301k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 6.44k, False: 294k]
  ------------------
  235|  6.44k|            {
  236|  6.44k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 1.16k, False: 5.27k]
  ------------------
  237|  1.16k|                {
  238|  1.16k|                    return {};
  239|  1.16k|                }
  240|       |
  241|  5.27k|                number <<= 4;
  242|  5.27k|                number |= phi::hex_digit_value(c).unsafe();
  243|  5.27k|            }
  244|   294k|            else
  245|   294k|            {
  246|   294k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 282k, False: 12.3k]
  ------------------
  247|   282k|                {
  248|   282k|                    return {};
  249|   282k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  12.3k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 5.33k, False: 7.05k]
  |  Branch (252:36): [True: 362, False: 4.97k]
  ------------------
  253|    362|                {
  254|    362|                    return {};
  255|    362|                }
  256|       |
  257|  12.0k|                number *= 10;
  258|  12.0k|                number += (c - '0');
  259|  12.0k|            }
  260|   306k|        }
  261|       |
  262|  3.90k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 3.44k, False: 458]
  ------------------
  263|  3.44k|        {
  264|       |            // Check for over/underflow
  265|  3.44k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 742, False: 2.70k]
  |  Branch (265:32): [True: 238, False: 504]
  ------------------
  266|    238|            {
  267|       |                // Would underflow
  268|    238|                return {};
  269|    238|            }
  270|  3.20k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 2.70k, False: 504]
  |  Branch (270:17): [True: 717, False: 2.49k]
  |  Branch (270:33): [True: 717, False: 1.98k]
  ------------------
  271|    717|            {
  272|       |                // Would overflow
  273|    717|                return {};
  274|    717|            }
  275|       |
  276|  2.49k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 504, False: 1.98k]
  ------------------
  277|    504|            {
  278|    504|                return static_cast<std::int16_t>(-number);
  279|    504|            }
  280|       |
  281|  1.98k|            return static_cast<std::int16_t>(number);
  282|  2.49k|        }
  283|       |
  284|    458|        return {};
  285|  3.90k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  36.3k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  36.3k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 628k, False: 0]
  ------------------
   64|   628k|            {
   65|   628k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 36.3k, False: 591k]
  ------------------
   66|  36.3k|                {
   67|  36.3k|                    return &token;
   68|  36.3k|                }
   69|   628k|            }
   70|       |
   71|      0|            return nullptr;
   72|  36.3k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   139k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   139k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   139k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   361k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   361k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   361k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|   156k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   156k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   156k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  36.4k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  7.44k|    {
   25|  7.44k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  7.44k|        switch (argument_number.unsafe())
   28|  7.44k|        {
   29|  6.38k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 6.38k, False: 1.05k]
  ------------------
   30|  6.38k|                m_Arg1 = argument;
   31|  6.38k|                break;
   32|    850|            case 1u:
  ------------------
  |  Branch (32:13): [True: 850, False: 6.59k]
  ------------------
   33|    850|                m_Arg2 = argument;
   34|    850|                break;
   35|    205|            case 2u:
  ------------------
  |  Branch (35:13): [True: 205, False: 7.23k]
  ------------------
   36|    205|                m_Arg3 = argument;
   37|    205|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 7.44k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  7.44k|#endif
   42|  7.44k|        }
   43|  7.44k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|   116k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  1.94k|    {
  171|  1.94k|        InstructionArgument arg;
  172|  1.94k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  1.94k|        arg.register_int.register_id = id;
  174|  1.94k|        return arg;
  175|  1.94k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|    206|    {
  179|    206|        InstructionArgument arg;
  180|    206|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|    206|        arg.register_float.register_id = id;
  182|    206|        return arg;
  183|    206|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|    466|    {
  187|    466|        InstructionArgument arg;
  188|    466|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|    466|        arg.immediate_value.signed_value = value;
  190|    466|        return arg;
  191|    466|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|    252|    {
  196|    252|        InstructionArgument arg;
  197|    252|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|    252|        arg.address_displacement.register_id  = id;
  199|    252|        arg.address_displacement.displacement = displacement;
  200|    252|        return arg;
  201|    252|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  4.57k|    {
  205|  4.57k|        InstructionArgument arg;
  206|  4.57k|        arg.m_Type           = ArgumentType::Label;
  207|  4.57k|        arg.label.label_name = label_name;
  208|  4.57k|        return arg;
  209|  4.57k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  36.4k|    {
  453|  36.4k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  36.4k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   470k|    {
   24|   470k|        switch (token.length())
   25|   470k|        {
   26|       |            // 1 character OpCodes
   27|  73.7k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 73.7k, False: 396k]
  ------------------
   28|  73.7k|                char c1 = token[0];
   29|  73.7k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 17.8k, False: 55.8k]
  ------------------
   30|  17.8k|                {
   31|  17.8k|                    return OpCode::J;
   32|  17.8k|                }
   33|  55.8k|                break;
   34|  73.7k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  78.5k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 78.5k, False: 392k]
  ------------------
   38|  78.5k|                char c1 = token[0];
   39|  78.5k|                char c2 = token[1];
   40|       |
   41|  78.5k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 46.8k, False: 31.7k]
  ------------------
   42|  78.5k|                {
   43|  5.30k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 5.30k, False: 73.2k]
  ------------------
   44|  6.35k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 1.05k, False: 77.5k]
  ------------------
   45|  6.35k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 1.05k, False: 5.30k]
  ------------------
   46|  1.05k|                        {
   47|  1.05k|                            return OpCode::JR;
   48|  1.05k|                        }
   49|  5.30k|                        break;
   50|       |
   51|  5.85k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 5.85k, False: 72.7k]
  ------------------
   52|  9.95k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 4.10k, False: 74.4k]
  ------------------
   53|  9.95k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 3.55k, False: 6.39k]
  ------------------
   54|  9.95k|                        {
   55|    310|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 310, False: 9.64k]
  ------------------
   56|    872|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 562, False: 9.39k]
  ------------------
   57|    872|                                return OpCode::LB;
   58|  1.26k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 1.26k, False: 8.68k]
  ------------------
   59|  1.66k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 396, False: 9.55k]
  ------------------
   60|  1.66k|                                return OpCode::LD;
   61|    367|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 367, False: 9.58k]
  ------------------
   62|    953|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 586, False: 9.36k]
  ------------------
   63|    953|                                return OpCode::LF;
   64|    700|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 700, False: 9.25k]
  ------------------
   65|  1.53k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 839, False: 9.11k]
  ------------------
   66|  1.53k|                                return OpCode::LH;
   67|    229|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 229, False: 9.72k]
  ------------------
   68|  1.36k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 1.14k, False: 8.81k]
  ------------------
   69|  1.36k|                                return OpCode::LW;
   70|  9.95k|                        }
   71|  3.55k|                        break;
   72|  3.55k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 789, False: 77.7k]
  ------------------
   73|  4.27k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 3.48k, False: 75.0k]
  ------------------
   74|  4.27k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 668, False: 3.60k]
  ------------------
   75|    668|                        {
   76|    668|                            return OpCode::OR;
   77|    668|                        }
   78|  3.60k|                        break;
   79|  5.73k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 5.73k, False: 72.8k]
  ------------------
   80|  11.1k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 5.39k, False: 73.1k]
  ------------------
   81|  11.1k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 3.22k, False: 7.89k]
  ------------------
   82|  11.1k|                        {
   83|  1.07k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 1.07k, False: 10.0k]
  ------------------
   84|  1.41k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 339, False: 10.7k]
  ------------------
   85|  1.41k|                                return OpCode::SB;
   86|  2.86k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 2.86k, False: 8.26k]
  ------------------
   87|  3.23k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 370, False: 10.7k]
  ------------------
   88|  3.23k|                                return OpCode::SD;
   89|    329|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 329, False: 10.7k]
  ------------------
   90|    544|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 215, False: 10.9k]
  ------------------
   91|    544|                                return OpCode::SF;
   92|    352|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 352, False: 10.7k]
  ------------------
   93|  1.56k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 1.21k, False: 9.90k]
  ------------------
   94|  1.56k|                                return OpCode::SH;
   95|    490|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 490, False: 10.6k]
  ------------------
   96|  1.14k|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 650, False: 10.4k]
  ------------------
   97|  1.14k|                                return OpCode::SW;
   98|  11.1k|                        }
   99|  3.22k|                        break;
  100|  78.5k|                }
  101|  62.5k|                break;
  102|  78.5k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   102k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 102k, False: 367k]
  ------------------
  106|   102k|                char c1 = token[0];
  107|   102k|                char c2 = token[1];
  108|   102k|                char c3 = token[2];
  109|       |
  110|   102k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 33.7k, False: 69.0k]
  ------------------
  111|   102k|                {
  112|  3.86k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 3.86k, False: 98.9k]
  ------------------
  113|  5.59k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 1.73k, False: 101k]
  ------------------
  114|  5.59k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 1.67k, False: 3.92k]
  |  Branch (114:29): [True: 555, False: 5.04k]
  |  Branch (114:45): [True: 555, False: 1.11k]
  ------------------
  115|    555|                        {
  116|    555|                            return OpCode::ADD;
  117|    555|                        }
  118|  5.04k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 1.48k, False: 3.55k]
  |  Branch (118:34): [True: 976, False: 4.06k]
  |  Branch (118:50): [True: 976, False: 509]
  ------------------
  119|    976|                        {
  120|    976|                            return OpCode::AND;
  121|    976|                        }
  122|  4.06k|                        break;
  123|       |
  124|  4.06k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 1.98k, False: 100k]
  ------------------
  125|  2.79k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 808, False: 102k]
  ------------------
  126|  2.79k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 2.00k, False: 794]
  |  Branch (126:29): [True: 606, False: 2.18k]
  |  Branch (126:45): [True: 606, False: 1.39k]
  ------------------
  127|    606|                        {
  128|    606|                            return OpCode::DIV;
  129|    606|                        }
  130|  2.18k|                        break;
  131|       |
  132|  2.18k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 1.15k, False: 101k]
  ------------------
  133|  5.33k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 4.17k, False: 98.6k]
  ------------------
  134|  5.33k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 4.18k, False: 1.14k]
  ------------------
  135|  4.18k|                        {
  136|  4.18k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 628, False: 3.55k]
  ------------------
  137|    628|                            {
  138|    628|                                return OpCode::EQD;
  139|    628|                            }
  140|  3.55k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 877, False: 2.68k]
  ------------------
  141|    877|                            {
  142|    877|                                return OpCode::EQF;
  143|    877|                            }
  144|  4.18k|                        }
  145|  3.82k|                        break;
  146|       |
  147|  3.82k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 1.82k, False: 100k]
  ------------------
  148|  5.66k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 3.84k, False: 98.9k]
  ------------------
  149|  5.66k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 1.96k, False: 3.69k]
  ------------------
  150|  1.96k|                        {
  151|  1.96k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 757, False: 1.21k]
  ------------------
  152|    757|                            {
  153|    757|                                return OpCode::GED;
  154|    757|                            }
  155|  1.21k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 796, False: 415]
  ------------------
  156|    796|                            {
  157|    796|                                return OpCode::GEF;
  158|    796|                            }
  159|  1.96k|                        }
  160|  3.69k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 2.63k, False: 1.06k]
  ------------------
  161|  2.63k|                        {
  162|  2.63k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 1.13k, False: 1.50k]
  ------------------
  163|  1.13k|                            {
  164|  1.13k|                                return OpCode::GTD;
  165|  1.13k|                            }
  166|  1.50k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 937, False: 564]
  ------------------
  167|    937|                            {
  168|    937|                                return OpCode::GTF;
  169|    937|                            }
  170|  1.50k|                        }
  171|  2.04k|                        break;
  172|       |
  173|  4.18k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 4.18k, False: 98.6k]
  ------------------
  174|  4.86k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 678, False: 102k]
  ------------------
  175|  4.86k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 1.79k, False: 3.06k]
  |  Branch (175:29): [True: 911, False: 3.95k]
  |  Branch (175:45): [True: 911, False: 886]
  ------------------
  176|    911|                        {
  177|    911|                            return OpCode::JAL;
  178|    911|                        }
  179|  3.95k|                        break;
  180|       |
  181|  8.96k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 8.96k, False: 93.8k]
  ------------------
  182|  12.3k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 3.36k, False: 99.4k]
  ------------------
  183|  12.3k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 1.89k, False: 10.4k]
  ------------------
  184|  12.3k|                        {
  185|    337|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 337, False: 11.9k]
  ------------------
  186|  1.16k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 827, False: 11.5k]
  ------------------
  187|  1.16k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 648, False: 516]
  ------------------
  188|    648|                                {
  189|    648|                                    return OpCode::LBU;
  190|    648|                                }
  191|    516|                                break;
  192|       |
  193|    860|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 860, False: 11.4k]
  ------------------
  194|  1.88k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 1.02k, False: 11.3k]
  ------------------
  195|  1.88k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 1.20k, False: 680]
  ------------------
  196|  1.20k|                                {
  197|  1.20k|                                    return OpCode::LED;
  198|  1.20k|                                }
  199|    680|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 426, False: 254]
  ------------------
  200|    426|                                {
  201|    426|                                    return OpCode::LEF;
  202|    426|                                }
  203|    254|                                break;
  204|       |
  205|  1.48k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 1.48k, False: 10.8k]
  ------------------
  206|  2.49k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 1.00k, False: 11.3k]
  ------------------
  207|  2.49k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 977, False: 1.51k]
  ------------------
  208|    977|                                {
  209|    977|                                    return OpCode::LHI;
  210|    977|                                }
  211|  1.51k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 738, False: 777]
  ------------------
  212|    738|                                {
  213|    738|                                    return OpCode::LHU;
  214|    738|                                }
  215|    777|                                break;
  216|       |
  217|    777|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 521, False: 11.8k]
  ------------------
  218|  3.12k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 2.60k, False: 9.72k]
  ------------------
  219|  3.12k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 1.12k, False: 2.00k]
  ------------------
  220|  1.12k|                                {
  221|  1.12k|                                    return OpCode::LTD;
  222|  1.12k|                                }
  223|  2.00k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 1.08k, False: 918]
  ------------------
  224|  1.08k|                                {
  225|  1.08k|                                    return OpCode::LTF;
  226|  1.08k|                                }
  227|    918|                                break;
  228|       |
  229|    918|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 292, False: 12.0k]
  ------------------
  230|  1.76k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 1.47k, False: 10.8k]
  ------------------
  231|  1.76k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 623, False: 1.14k]
  ------------------
  232|    623|                                {
  233|    623|                                    return OpCode::LWU;
  234|    623|                                }
  235|  1.14k|                                break;
  236|  12.3k|                        }
  237|  5.50k|                        break;
  238|       |
  239|  5.50k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 3.18k, False: 99.6k]
  ------------------
  240|  4.57k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 1.39k, False: 101k]
  ------------------
  241|  4.57k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 2.37k, False: 2.19k]
  ------------------
  242|  2.37k|                        {
  243|  2.37k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 752, False: 1.62k]
  ------------------
  244|    752|                            {
  245|    752|                                return OpCode::NED;
  246|    752|                            }
  247|  1.62k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 790, False: 834]
  ------------------
  248|    790|                            {
  249|    790|                                return OpCode::NEF;
  250|    790|                            }
  251|  2.37k|                        }
  252|  2.19k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 1.03k, False: 1.16k]
  |  Branch (252:34): [True: 669, False: 1.53k]
  |  Branch (252:50): [True: 669, False: 364]
  ------------------
  253|    669|                        {
  254|    669|                            return OpCode::NOP;
  255|    669|                        }
  256|       |
  257|  2.36k|                        break;
  258|       |
  259|  2.36k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 829, False: 101k]
  ------------------
  260|  2.85k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 2.03k, False: 100k]
  ------------------
  261|  2.85k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 1.61k, False: 1.24k]
  |  Branch (261:29): [True: 1.19k, False: 1.66k]
  |  Branch (261:45): [True: 1.19k, False: 418]
  ------------------
  262|  1.19k|                        {
  263|  1.19k|                            return OpCode::ORI;
  264|  1.19k|                        }
  265|  1.66k|                        break;
  266|       |
  267|  15.0k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 15.0k, False: 87.7k]
  ------------------
  268|  21.5k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 6.49k, False: 96.3k]
  ------------------
  269|  21.5k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 1.86k, False: 19.6k]
  ------------------
  270|  21.5k|                        {
  271|  1.37k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 1.37k, False: 20.1k]
  ------------------
  272|  2.35k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 986, False: 20.5k]
  ------------------
  273|  2.35k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 876, False: 1.48k]
  ------------------
  274|    876|                                {
  275|    876|                                    return OpCode::SBU;
  276|    876|                                }
  277|  1.48k|                                break;
  278|       |
  279|  1.48k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 924, False: 20.6k]
  ------------------
  280|  1.39k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 469, False: 21.0k]
  ------------------
  281|  1.39k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 694, False: 699]
  ------------------
  282|    694|                                {
  283|    694|                                    return OpCode::SEQ;
  284|    694|                                }
  285|    699|                                break;
  286|       |
  287|  2.11k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 2.11k, False: 19.4k]
  ------------------
  288|  2.59k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 483, False: 21.0k]
  ------------------
  289|  2.59k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 472, False: 2.12k]
  ------------------
  290|    472|                                {
  291|    472|                                    return OpCode::SGE;
  292|    472|                                }
  293|  2.12k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 1.67k, False: 456]
  ------------------
  294|  1.67k|                                {
  295|  1.67k|                                    return OpCode::SGT;
  296|  1.67k|                                }
  297|    456|                                break;
  298|       |
  299|    644|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 644, False: 20.9k]
  ------------------
  300|  1.41k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 775, False: 20.7k]
  ------------------
  301|  1.41k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 774, False: 645]
  ------------------
  302|    774|                                {
  303|    774|                                    return OpCode::SHU;
  304|    774|                                }
  305|    645|                                break;
  306|       |
  307|  2.48k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 2.48k, False: 19.0k]
  ------------------
  308|  4.55k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 2.07k, False: 19.4k]
  ------------------
  309|  4.55k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 735, False: 3.81k]
  ------------------
  310|  4.55k|                                {
  311|    378|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 378, False: 4.17k]
  ------------------
  312|    593|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 215, False: 4.33k]
  ------------------
  313|    593|                                        return OpCode::SLA;
  314|       |
  315|    331|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 331, False: 4.22k]
  ------------------
  316|  1.22k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 893, False: 3.66k]
  ------------------
  317|  1.22k|                                        return OpCode::SLE;
  318|       |
  319|    351|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 351, False: 4.20k]
  ------------------
  320|  1.29k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 945, False: 3.60k]
  ------------------
  321|  1.29k|                                        return OpCode::SLL;
  322|       |
  323|    200|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 200, False: 4.35k]
  ------------------
  324|    705|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 505, False: 4.04k]
  ------------------
  325|    705|                                        return OpCode::SLT;
  326|  4.55k|                                }
  327|    735|                                break;
  328|       |
  329|  1.46k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 1.46k, False: 20.0k]
  ------------------
  330|  2.05k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 589, False: 20.9k]
  ------------------
  331|  2.05k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 1.23k, False: 824]
  ------------------
  332|  1.23k|                                {
  333|  1.23k|                                    return OpCode::SNE;
  334|  1.23k|                                }
  335|    824|                                break;
  336|       |
  337|    824|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 279, False: 21.2k]
  ------------------
  338|  1.74k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 1.46k, False: 20.0k]
  ------------------
  339|  1.74k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 794, False: 952]
  ------------------
  340|    794|                                {
  341|    794|                                    return OpCode::SRA;
  342|    794|                                }
  343|    952|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 533, False: 419]
  ------------------
  344|    533|                                {
  345|    533|                                    return OpCode::SRL;
  346|    533|                                }
  347|    419|                                break;
  348|       |
  349|  1.07k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 1.07k, False: 20.4k]
  ------------------
  350|  1.77k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 699, False: 20.8k]
  ------------------
  351|  1.77k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 1.13k, False: 638]
  ------------------
  352|  1.13k|                                {
  353|  1.13k|                                    return OpCode::SUB;
  354|  1.13k|                                }
  355|    638|                                break;
  356|       |
  357|    912|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 912, False: 20.6k]
  ------------------
  358|  1.78k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 869, False: 20.6k]
  ------------------
  359|  1.78k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 1.09k, False: 690]
  ------------------
  360|  1.09k|                                {
  361|  1.09k|                                    return OpCode::SWU;
  362|  1.09k|                                }
  363|    690|                                break;
  364|  21.5k|                        }
  365|       |
  366|  10.3k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 1.87k, False: 100k]
  ------------------
  367|  11.9k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 1.58k, False: 101k]
  ------------------
  368|  11.9k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 2.44k, False: 9.46k]
  |  Branch (368:29): [True: 1.34k, False: 10.5k]
  |  Branch (368:45): [True: 1.34k, False: 1.09k]
  ------------------
  369|  1.34k|                        {
  370|  1.34k|                            return OpCode::XOR;
  371|  1.34k|                        }
  372|  10.5k|                        break;
  373|   102k|                }
  374|  69.9k|                break;
  375|   102k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   101k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 101k, False: 369k]
  ------------------
  379|   101k|                char c1 = token[0];
  380|   101k|                char c2 = token[1];
  381|   101k|                char c3 = token[2];
  382|   101k|                char c4 = token[3];
  383|       |
  384|   101k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 29.6k, False: 71.7k]
  ------------------
  385|   101k|                {
  386|  6.61k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 6.61k, False: 94.7k]
  ------------------
  387|  8.00k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 1.39k, False: 99.9k]
  ------------------
  388|  8.00k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 706, False: 7.29k]
  ------------------
  389|  8.00k|                        {
  390|  2.72k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 2.72k, False: 5.28k]
  ------------------
  391|  4.98k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 2.26k, False: 5.74k]
  ------------------
  392|  4.98k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 4.15k, False: 830]
  ------------------
  393|  4.15k|                                {
  394|  4.15k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 909, False: 3.24k]
  ------------------
  395|  4.15k|                                    {
  396|    226|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 226, False: 3.92k]
  ------------------
  397|    612|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 386, False: 3.76k]
  ------------------
  398|    612|                                            return OpCode::ADDD;
  399|       |
  400|    369|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 369, False: 3.78k]
  ------------------
  401|    712|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 343, False: 3.81k]
  ------------------
  402|    712|                                            return OpCode::ADDF;
  403|       |
  404|    585|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 585, False: 3.57k]
  ------------------
  405|  1.00k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 418, False: 3.73k]
  ------------------
  406|  1.00k|                                            return OpCode::ADDI;
  407|       |
  408|    597|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 597, False: 3.55k]
  ------------------
  409|    919|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 322, False: 3.83k]
  ------------------
  410|    919|                                            return OpCode::ADDU;
  411|  4.15k|                                    }
  412|  4.15k|                                }
  413|  1.73k|                                break;
  414|       |
  415|  1.92k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 1.92k, False: 6.07k]
  ------------------
  416|  2.31k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 386, False: 7.61k]
  ------------------
  417|  2.31k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 1.92k, False: 390]
  |  Branch (417:37): [True: 718, False: 1.59k]
  |  Branch (417:53): [True: 718, False: 1.20k]
  ------------------
  418|    718|                                {
  419|    718|                                    return OpCode::ANDI;
  420|    718|                                }
  421|       |
  422|  1.59k|                                break;
  423|  8.00k|                        }
  424|  4.04k|                        break;
  425|       |
  426|  6.92k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 6.92k, False: 94.4k]
  ------------------
  427|  7.44k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 523, False: 100k]
  ------------------
  428|  7.44k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 807, False: 6.64k]
  ------------------
  429|  7.44k|                        {
  430|  1.33k|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 1.33k, False: 6.11k]
  ------------------
  431|  2.13k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 805, False: 6.64k]
  ------------------
  432|  2.13k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 1.77k, False: 361]
  |  Branch (432:37): [True: 628, False: 1.50k]
  |  Branch (432:53): [True: 628, False: 1.14k]
  ------------------
  433|    628|                                {
  434|    628|                                    return OpCode::BEQZ;
  435|    628|                                }
  436|  1.50k|                                break;
  437|       |
  438|  1.97k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 1.97k, False: 5.47k]
  ------------------
  439|  2.73k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 765, False: 6.68k]
  ------------------
  440|  2.73k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 1.95k, False: 789]
  ------------------
  441|  1.95k|                                {
  442|  1.95k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 708, False: 1.24k]
  ------------------
  443|    708|                                    {
  444|    708|                                        return OpCode::BFPF;
  445|    708|                                    }
  446|  1.24k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 564, False: 678]
  ------------------
  447|    564|                                    {
  448|    564|                                        return OpCode::BFPT;
  449|    564|                                    }
  450|  1.95k|                                }
  451|  1.46k|                                break;
  452|       |
  453|  1.46k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 1.16k, False: 6.28k]
  ------------------
  454|  1.76k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 600, False: 6.84k]
  ------------------
  455|  1.76k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 1.56k, False: 196]
  |  Branch (455:37): [True: 1.37k, False: 392]
  |  Branch (455:53): [True: 1.37k, False: 196]
  ------------------
  456|  1.37k|                                {
  457|  1.37k|                                    return OpCode::BNEZ;
  458|  1.37k|                                }
  459|  7.44k|                        }
  460|  4.17k|                        break;
  461|       |
  462|  4.17k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 1.24k, False: 100k]
  ------------------
  463|  4.51k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 3.26k, False: 98.1k]
  ------------------
  464|  4.51k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 3.84k, False: 673]
  |  Branch (464:29): [True: 3.48k, False: 1.02k]
  |  Branch (464:45): [True: 3.48k, False: 353]
  ------------------
  465|  3.48k|                        {
  466|  3.48k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 710, False: 2.77k]
  ------------------
  467|  3.48k|                            {
  468|    258|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 258, False: 3.23k]
  ------------------
  469|    708|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 450, False: 3.03k]
  ------------------
  470|    708|                                    return OpCode::DIVD;
  471|       |
  472|    338|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 338, False: 3.15k]
  ------------------
  473|    708|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 370, False: 3.11k]
  ------------------
  474|    708|                                    return OpCode::DIVF;
  475|       |
  476|    370|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 370, False: 3.11k]
  ------------------
  477|    532|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 162, False: 3.32k]
  ------------------
  478|    532|                                    return OpCode::DIVI;
  479|       |
  480|    584|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 584, False: 2.90k]
  ------------------
  481|    830|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 246, False: 3.24k]
  ------------------
  482|    830|                                    return OpCode::DIVU;
  483|  3.48k|                            }
  484|  3.48k|                        }
  485|  1.73k|                        break;
  486|       |
  487|  2.21k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 2.21k, False: 99.1k]
  ------------------
  488|  3.55k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 1.33k, False: 100k]
  ------------------
  489|  3.55k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 3.20k, False: 350]
  |  Branch (489:29): [True: 828, False: 2.72k]
  |  Branch (489:45): [True: 1.08k, False: 2.11k]
  |  Branch (489:61): [True: 828, False: 257]
  ------------------
  490|    828|                        {
  491|    828|                            return OpCode::HALT;
  492|    828|                        }
  493|  2.72k|                        break;
  494|       |
  495|  2.72k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 2.60k, False: 98.7k]
  ------------------
  496|  3.48k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 881, False: 100k]
  ------------------
  497|  3.48k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 1.79k, False: 1.69k]
  |  Branch (497:29): [True: 464, False: 3.02k]
  |  Branch (497:45): [True: 1.31k, False: 478]
  |  Branch (497:61): [True: 464, False: 853]
  ------------------
  498|    464|                        {
  499|    464|                            return OpCode::JALR;
  500|    464|                        }
  501|  3.02k|                        break;
  502|       |
  503|  3.02k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 1.37k, False: 100k]
  ------------------
  504|  5.40k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 4.03k, False: 97.3k]
  ------------------
  505|  5.40k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 3.14k, False: 2.25k]
  |  Branch (505:29): [True: 2.71k, False: 2.68k]
  |  Branch (505:45): [True: 2.71k, False: 429]
  ------------------
  506|  2.71k|                        {
  507|  2.71k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 1.33k, False: 1.38k]
  ------------------
  508|  1.33k|                            {
  509|  1.33k|                                return OpCode::MOVD;
  510|  1.33k|                            }
  511|  1.38k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 878, False: 505]
  ------------------
  512|    878|                            {
  513|    878|                                return OpCode::MOVF;
  514|    878|                            }
  515|  2.71k|                        }
  516|  2.68k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 1.97k, False: 716]
  |  Branch (516:34): [True: 958, False: 1.72k]
  |  Branch (516:50): [True: 1.38k, False: 585]
  |  Branch (516:66): [True: 958, False: 427]
  ------------------
  517|    958|                        {
  518|    958|                            return OpCode::MULT;
  519|    958|                        }
  520|  2.23k|                        break;
  521|       |
  522|  24.8k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 24.8k, False: 76.5k]
  ------------------
  523|  33.5k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 8.71k, False: 92.6k]
  ------------------
  524|  33.5k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 2.34k, False: 31.2k]
  ------------------
  525|  33.5k|                        {
  526|    767|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 767, False: 32.8k]
  ------------------
  527|  2.38k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 1.61k, False: 31.9k]
  ------------------
  528|  2.38k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 1.44k, False: 935]
  ------------------
  529|  1.44k|                                {
  530|  1.44k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 512, False: 934]
  ------------------
  531|    512|                                    {
  532|    512|                                        return OpCode::SEQI;
  533|    512|                                    }
  534|    934|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 606, False: 328]
  ------------------
  535|    606|                                    {
  536|    606|                                        return OpCode::SEQU;
  537|    606|                                    }
  538|  1.44k|                                }
  539|  1.26k|                                break;
  540|       |
  541|  5.65k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 5.65k, False: 27.9k]
  ------------------
  542|  6.09k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 439, False: 33.1k]
  ------------------
  543|  6.09k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 2.46k, False: 3.62k]
  ------------------
  544|  2.46k|                                {
  545|  2.46k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 677, False: 1.78k]
  ------------------
  546|    677|                                    {
  547|    677|                                        return OpCode::SGEI;
  548|    677|                                    }
  549|  1.78k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 1.16k, False: 623]
  ------------------
  550|  1.16k|                                    {
  551|  1.16k|                                        return OpCode::SGEU;
  552|  1.16k|                                    }
  553|  2.46k|                                }
  554|  3.62k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 3.30k, False: 326]
  ------------------
  555|  3.30k|                                {
  556|  3.30k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 745, False: 2.55k]
  ------------------
  557|    745|                                    {
  558|    745|                                        return OpCode::SGTI;
  559|    745|                                    }
  560|  2.55k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 1.76k, False: 794]
  ------------------
  561|  1.76k|                                    {
  562|  1.76k|                                        return OpCode::SGTU;
  563|  1.76k|                                    }
  564|  3.30k|                                }
  565|  1.74k|                                break;
  566|       |
  567|  4.73k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 4.73k, False: 28.8k]
  ------------------
  568|  7.77k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 3.04k, False: 30.5k]
  ------------------
  569|  7.77k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 578, False: 7.19k]
  ------------------
  570|  7.77k|                                {
  571|  1.04k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 1.04k, False: 6.73k]
  ------------------
  572|  1.43k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 392, False: 7.38k]
  ------------------
  573|  1.43k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 1.02k, False: 408]
  ------------------
  574|  1.02k|                                        {
  575|  1.02k|                                            return OpCode::SLAI;
  576|  1.02k|                                        }
  577|    408|                                        break;
  578|       |
  579|    453|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 453, False: 7.32k]
  ------------------
  580|  1.84k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 1.39k, False: 6.38k]
  ------------------
  581|  1.84k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 414, False: 1.43k]
  ------------------
  582|    414|                                        {
  583|    414|                                            return OpCode::SLEI;
  584|    414|                                        }
  585|  1.43k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 615, False: 818]
  ------------------
  586|    615|                                        {
  587|    615|                                            return OpCode::SLEU;
  588|    615|                                        }
  589|    818|                                        break;
  590|       |
  591|    818|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 713, False: 7.06k]
  ------------------
  592|  1.09k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 377, False: 7.39k]
  ------------------
  593|  1.09k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 615, False: 475]
  ------------------
  594|    615|                                        {
  595|    615|                                            return OpCode::SLLI;
  596|    615|                                        }
  597|    475|                                        break;
  598|       |
  599|    959|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 959, False: 6.81k]
  ------------------
  600|  2.82k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 1.86k, False: 5.91k]
  ------------------
  601|  2.82k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 692, False: 2.13k]
  ------------------
  602|    692|                                        {
  603|    692|                                            return OpCode::SLTI;
  604|    692|                                        }
  605|  2.13k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 1.18k, False: 943]
  ------------------
  606|  1.18k|                                        {
  607|  1.18k|                                            return OpCode::SLTU;
  608|  1.18k|                                        }
  609|    943|                                        break;
  610|  7.77k|                                }
  611|       |
  612|  6.92k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 3.69k, False: 29.8k]
  ------------------
  613|  7.70k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 784, False: 32.8k]
  ------------------
  614|  7.70k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 4.87k, False: 2.82k]
  ------------------
  615|  4.87k|                                {
  616|  4.87k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 1.18k, False: 3.68k]
  ------------------
  617|  1.18k|                                    {
  618|  1.18k|                                        return OpCode::SNEI;
  619|  1.18k|                                    }
  620|  3.68k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 1.49k, False: 2.19k]
  ------------------
  621|  1.49k|                                    {
  622|  1.49k|                                        return OpCode::SNEU;
  623|  1.49k|                                    }
  624|  4.87k|                                }
  625|  5.02k|                                break;
  626|       |
  627|  5.02k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 426, False: 33.1k]
  ------------------
  628|  3.77k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 3.35k, False: 30.2k]
  ------------------
  629|  3.77k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 2.37k, False: 1.39k]
  |  Branch (629:37): [True: 1.81k, False: 1.96k]
  |  Branch (629:53): [True: 1.81k, False: 568]
  ------------------
  630|  1.81k|                                {
  631|  1.81k|                                    return OpCode::SRAI;
  632|  1.81k|                                }
  633|  1.96k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 1.22k, False: 739]
  |  Branch (633:42): [True: 925, False: 1.04k]
  |  Branch (633:58): [True: 925, False: 303]
  ------------------
  634|    925|                                {
  635|    925|                                    return OpCode::SRLI;
  636|    925|                                }
  637|  1.04k|                                break;
  638|       |
  639|  3.20k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 3.20k, False: 30.3k]
  ------------------
  640|  6.74k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 3.54k, False: 30.0k]
  ------------------
  641|  6.74k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 5.49k, False: 1.25k]
  ------------------
  642|  5.49k|                                {
  643|  5.49k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 1.36k, False: 4.12k]
  ------------------
  644|  5.49k|                                    {
  645|    447|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 447, False: 5.04k]
  ------------------
  646|    881|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 434, False: 5.05k]
  ------------------
  647|    881|                                            return OpCode::SUBD;
  648|       |
  649|    162|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 162, False: 5.32k]
  ------------------
  650|    791|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 629, False: 4.86k]
  ------------------
  651|    791|                                            return OpCode::SUBF;
  652|       |
  653|    717|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 717, False: 4.77k]
  ------------------
  654|    982|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 265, False: 5.22k]
  ------------------
  655|    982|                                            return OpCode::SUBI;
  656|       |
  657|    617|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 617, False: 4.87k]
  ------------------
  658|  1.47k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 853, False: 4.63k]
  ------------------
  659|  1.47k|                                            return OpCode::SUBU;
  660|  5.49k|                                    }
  661|  5.49k|                                }
  662|  2.62k|                                break;
  663|  33.5k|                        }
  664|  14.0k|                        break;
  665|       |
  666|  14.0k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 2.35k, False: 99.0k]
  ------------------
  667|  3.31k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 952, False: 100k]
  ------------------
  668|  3.31k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 2.15k, False: 1.15k]
  |  Branch (668:29): [True: 646, False: 2.66k]
  |  Branch (668:45): [True: 1.60k, False: 550]
  |  Branch (668:61): [True: 646, False: 960]
  ------------------
  669|    646|                        {
  670|    646|                            return OpCode::TRAP;
  671|    646|                        }
  672|  2.66k|                        break;
  673|  2.66k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 1.70k, False: 99.6k]
  ------------------
  674|  2.47k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 768, False: 100k]
  ------------------
  675|  2.47k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 1.56k, False: 909]
  |  Branch (675:29): [True: 548, False: 1.92k]
  |  Branch (675:45): [True: 923, False: 640]
  |  Branch (675:61): [True: 548, False: 375]
  ------------------
  676|    548|                        {
  677|    548|                            return OpCode::XORI;
  678|    548|                        }
  679|  1.92k|                        break;
  680|   101k|                }
  681|  66.1k|                break;
  682|   101k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  66.1k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 57.7k, False: 412k]
  ------------------
  686|  57.7k|                char c1 = token[0];
  687|  57.7k|                char c2 = token[1];
  688|  57.7k|                char c3 = token[2];
  689|  57.7k|                char c4 = token[3];
  690|  57.7k|                char c5 = token[4];
  691|       |
  692|  57.7k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 20.3k, False: 37.4k]
  ------------------
  693|  57.7k|                {
  694|  3.07k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 3.07k, False: 54.6k]
  ------------------
  695|  3.82k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 754, False: 56.9k]
  ------------------
  696|  3.82k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 2.93k, False: 894]
  |  Branch (696:29): [True: 524, False: 3.30k]
  |  Branch (696:45): [True: 2.22k, False: 712]
  |  Branch (696:61): [True: 1.63k, False: 585]
  |  Branch (696:77): [True: 524, False: 1.11k]
  ------------------
  697|    524|                        {
  698|    524|                            return OpCode::ADDUI;
  699|    524|                        }
  700|  3.30k|                        break;
  701|       |
  702|  3.30k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 621, False: 57.0k]
  ------------------
  703|  3.47k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 2.84k, False: 54.8k]
  ------------------
  704|  3.47k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 3.01k, False: 455]
  |  Branch (704:29): [True: 733, False: 2.73k]
  |  Branch (704:45): [True: 2.73k, False: 279]
  |  Branch (704:61): [True: 1.56k, False: 1.17k]
  |  Branch (704:77): [True: 733, False: 831]
  ------------------
  705|    733|                        {
  706|    733|                            return OpCode::DIVUI;
  707|    733|                        }
  708|  2.73k|                        break;
  709|       |
  710|  2.73k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 2.60k, False: 55.1k]
  ------------------
  711|  6.36k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 3.76k, False: 53.9k]
  ------------------
  712|  6.36k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 4.87k, False: 1.49k]
  |  Branch (712:29): [True: 3.54k, False: 2.82k]
  |  Branch (712:45): [True: 4.10k, False: 769]
  |  Branch (712:61): [True: 3.54k, False: 558]
  ------------------
  713|  3.54k|                        {
  714|  3.54k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 236, False: 3.31k]
  ------------------
  715|  3.54k|                            {
  716|    371|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 371, False: 3.17k]
  ------------------
  717|    597|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 226, False: 3.32k]
  ------------------
  718|    597|                                    return OpCode::MULTD;
  719|       |
  720|    258|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 258, False: 3.28k]
  ------------------
  721|    857|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 599, False: 2.94k]
  ------------------
  722|    857|                                    return OpCode::MULTF;
  723|       |
  724|    235|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 235, False: 3.31k]
  ------------------
  725|  1.13k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 899, False: 2.64k]
  ------------------
  726|  1.13k|                                    return OpCode::MULTI;
  727|       |
  728|    250|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 250, False: 3.29k]
  ------------------
  729|    723|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 473, False: 3.07k]
  ------------------
  730|    723|                                    return OpCode::MULTU;
  731|  3.54k|                            }
  732|  3.54k|                        }
  733|  3.05k|                        break;
  734|       |
  735|  14.0k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 14.0k, False: 43.6k]
  ------------------
  736|  23.7k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 9.71k, False: 48.0k]
  ------------------
  737|  23.7k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 2.61k, False: 21.1k]
  ------------------
  738|  23.7k|                        {
  739|    664|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 664, False: 23.0k]
  ------------------
  740|  2.30k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 1.64k, False: 22.1k]
  ------------------
  741|  2.30k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 1.56k, False: 736]
  |  Branch (741:37): [True: 834, False: 1.47k]
  |  Branch (741:53): [True: 1.29k, False: 273]
  |  Branch (741:69): [True: 834, False: 462]
  ------------------
  742|    834|                                {
  743|    834|                                    return OpCode::SEQUI;
  744|    834|                                }
  745|  1.47k|                                break;
  746|       |
  747|  3.47k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 3.47k, False: 20.2k]
  ------------------
  748|  4.26k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 791, False: 22.9k]
  ------------------
  749|  4.26k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 2.22k, False: 2.04k]
  |  Branch (749:37): [True: 460, False: 3.80k]
  |  Branch (749:53): [True: 1.48k, False: 745]
  |  Branch (749:69): [True: 460, False: 1.02k]
  ------------------
  750|    460|                                {
  751|    460|                                    return OpCode::SGEUI;
  752|    460|                                }
  753|  3.80k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 1.77k, False: 2.03k]
  |  Branch (753:42): [True: 460, False: 3.34k]
  |  Branch (753:58): [True: 917, False: 854]
  |  Branch (753:74): [True: 460, False: 457]
  ------------------
  754|    460|                                {
  755|    460|                                    return OpCode::SGTUI;
  756|    460|                                }
  757|  3.34k|                                break;
  758|       |
  759|  3.34k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 2.69k, False: 21.0k]
  ------------------
  760|  5.05k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 2.36k, False: 21.3k]
  ------------------
  761|  5.05k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 1.90k, False: 3.15k]
  |  Branch (761:37): [True: 1.07k, False: 3.97k]
  |  Branch (761:53): [True: 1.41k, False: 490]
  |  Branch (761:69): [True: 1.07k, False: 334]
  ------------------
  762|  1.07k|                                {
  763|  1.07k|                                    return OpCode::SLEUI;
  764|  1.07k|                                }
  765|  3.97k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 2.06k, False: 1.91k]
  |  Branch (765:42): [True: 756, False: 3.22k]
  |  Branch (765:58): [True: 1.61k, False: 452]
  |  Branch (765:74): [True: 756, False: 860]
  ------------------
  766|    756|                                {
  767|    756|                                    return OpCode::SLTUI;
  768|    756|                                }
  769|  3.22k|                                break;
  770|       |
  771|  3.22k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 1.87k, False: 21.8k]
  ------------------
  772|  3.31k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 1.44k, False: 22.2k]
  ------------------
  773|  3.31k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 2.92k, False: 395]
  |  Branch (773:37): [True: 771, False: 2.54k]
  |  Branch (773:53): [True: 2.05k, False: 869]
  |  Branch (773:69): [True: 771, False: 1.28k]
  ------------------
  774|    771|                                {
  775|    771|                                    return OpCode::SNEUI;
  776|    771|                                }
  777|  2.54k|                                break;
  778|       |
  779|  2.54k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 1.88k, False: 21.8k]
  ------------------
  780|  6.17k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 4.29k, False: 19.4k]
  ------------------
  781|  6.17k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 5.04k, False: 1.13k]
  |  Branch (781:37): [True: 1.02k, False: 5.14k]
  |  Branch (781:53): [True: 2.14k, False: 2.90k]
  |  Branch (781:69): [True: 1.02k, False: 1.11k]
  ------------------
  782|  1.02k|                                {
  783|  1.02k|                                    return OpCode::SUBUI;
  784|  1.02k|                                }
  785|  5.14k|                                break;
  786|  23.7k|                        }
  787|       |
  788|  18.3k|                        break;
  789|  57.7k|                }
  790|       |
  791|  47.7k|                break;
  792|  57.7k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  47.7k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 26.8k, False: 443k]
  ------------------
  796|  26.8k|                char c1 = token[0];
  797|  26.8k|                char c2 = token[1];
  798|  26.8k|                char c3 = token[2];
  799|  26.8k|                char c4 = token[3];
  800|  26.8k|                char c5 = token[4];
  801|  26.8k|                char c6 = token[5];
  802|       |
  803|  26.8k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 8.91k, False: 17.9k]
  |  Branch (803:21): [True: 7.04k, False: 19.8k]
  |  Branch (803:37): [True: 7.97k, False: 941]
  |  Branch (803:53): [True: 7.04k, False: 937]
  ------------------
  804|  7.04k|                {
  805|  7.04k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 509, False: 6.53k]
  ------------------
  806|  7.04k|                    {
  807|  2.17k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 2.17k, False: 4.86k]
  ------------------
  808|  2.40k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 228, False: 6.81k]
  ------------------
  809|  2.40k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 2.09k, False: 305]
  ------------------
  810|  2.09k|                            {
  811|  2.09k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 352, False: 1.74k]
  ------------------
  812|    352|                                {
  813|    352|                                    return OpCode::CVTD2F;
  814|    352|                                }
  815|  1.74k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 1.61k, False: 135]
  ------------------
  816|  1.61k|                                {
  817|  1.61k|                                    return OpCode::CVTD2I;
  818|  1.61k|                                }
  819|  2.09k|                            }
  820|    440|                            break;
  821|       |
  822|  2.51k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 2.51k, False: 4.52k]
  ------------------
  823|  2.78k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 270, False: 6.77k]
  ------------------
  824|  2.78k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 1.61k, False: 1.17k]
  ------------------
  825|  1.61k|                            {
  826|  1.61k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 404, False: 1.20k]
  ------------------
  827|    404|                                {
  828|    404|                                    return OpCode::CVTF2D;
  829|    404|                                }
  830|  1.20k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 464, False: 742]
  ------------------
  831|    464|                                {
  832|    464|                                    return OpCode::CVTF2I;
  833|    464|                                }
  834|  1.61k|                            }
  835|  1.91k|                            break;
  836|       |
  837|  1.91k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 293, False: 6.74k]
  ------------------
  838|  1.34k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 1.05k, False: 5.98k]
  ------------------
  839|  1.34k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 765, False: 581]
  ------------------
  840|    765|                            {
  841|    765|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 259, False: 506]
  ------------------
  842|    259|                                {
  843|    259|                                    return OpCode::CVTI2D;
  844|    259|                                }
  845|    506|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 348, False: 158]
  ------------------
  846|    348|                                {
  847|    348|                                    return OpCode::CVTI2F;
  848|    348|                                }
  849|    765|                            }
  850|  7.04k|                    }
  851|  7.04k|                }
  852|  19.8k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 5.08k, False: 14.7k]
  |  Branch (852:26): [True: 1.09k, False: 18.7k]
  |  Branch (852:42): [True: 3.67k, False: 1.41k]
  |  Branch (852:58): [True: 3.17k, False: 499]
  |  Branch (852:74): [True: 2.66k, False: 512]
  ------------------
  853|  19.8k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 1.81k, False: 851]
  |  Branch (853:42): [True: 1.09k, False: 714]
  ------------------
  854|  1.09k|                {
  855|  1.09k|                    return OpCode::MULTUI;
  856|  1.09k|                }
  857|  22.3k|                break;
  858|  26.8k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  22.3k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 14.4k, False: 456k]
  ------------------
  862|  14.4k|                char c1 = token[0];
  863|  14.4k|                char c2 = token[1];
  864|  14.4k|                char c3 = token[2];
  865|  14.4k|                char c4 = token[3];
  866|  14.4k|                char c5 = token[4];
  867|  14.4k|                char c6 = token[5];
  868|  14.4k|                char c7 = token[6];
  869|       |
  870|  14.4k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 5.19k, False: 9.23k]
  |  Branch (870:21): [True: 3.55k, False: 10.8k]
  |  Branch (870:37): [True: 4.41k, False: 789]
  |  Branch (870:53): [True: 3.55k, False: 855]
  ------------------
  871|  3.55k|                {
  872|  3.55k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 1.90k, False: 1.65k]
  |  Branch (872:25): [True: 820, False: 2.73k]
  |  Branch (872:41): [True: 1.40k, False: 501]
  |  Branch (872:54): [True: 1.03k, False: 370]
  |  Branch (872:70): [True: 820, False: 211]
  ------------------
  873|    820|                    {
  874|    820|                        return OpCode::MOVI2FP;
  875|    820|                    }
  876|  2.73k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 1.38k, False: 1.35k]
  |  Branch (876:30): [True: 216, False: 2.51k]
  |  Branch (876:46): [True: 920, False: 460]
  |  Branch (876:62): [True: 410, False: 510]
  |  Branch (876:75): [True: 216, False: 194]
  ------------------
  877|    216|                    {
  878|    216|                        return OpCode::MOVFP2I;
  879|    216|                    }
  880|  3.55k|                }
  881|  13.4k|                break;
  882|  14.4k|            }
  883|       |
  884|  15.1k|            default: {
  ------------------
  |  Branch (884:13): [True: 15.1k, False: 455k]
  ------------------
  885|  15.1k|                break;
  886|  14.4k|            }
  887|   470k|        }
  888|       |
  889|       |        // None found
  890|   353k|        return OpCode::NONE;
  891|   470k|    }
_ZN3dlx3iceEcc:
   17|   563k|    {
   18|   563k|        constexpr const char diff = 'a' - 'A';
   19|   563k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 150k, False: 413k]
  |  Branch (19:28): [True: 135k, False: 277k]
  ------------------
   20|   563k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   486k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  5.76k|    {
  193|  5.76k|        ParseError err;
  194|       |
  195|  5.76k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  5.76k|        err.m_LineNumber                           = line_number;
  197|  5.76k|        err.m_Column                               = column;
  198|  5.76k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  5.76k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  5.76k|        return err;
  202|  5.76k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  5.76k|    {
  207|  5.76k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  5.76k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  5.76k|                                                         actual_type);
  210|  5.76k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    516|    {
  216|    516|        ParseError err;
  217|       |
  218|    516|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    516|        err.m_LineNumber        = line_number;
  220|    516|        err.m_Column            = column;
  221|    516|        err.invalid_number.text = text;
  222|       |
  223|    516|        return err;
  224|    516|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    516|    {
  228|    516|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    516|                                                token.GetColumn().unsafe(), token.GetText());
  230|    516|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      7|    {
  235|      7|        ParseError err;
  236|       |
  237|      7|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      7|        err.m_LineNumber = line_number;
  239|      7|        err.m_Column     = column;
  240|       |
  241|      7|        return err;
  242|      7|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      7|    {
  247|      7|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      7|                                                                     token.GetColumn().unsafe());
  249|      7|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   216k|    {
  255|   216k|        ParseError err;
  256|       |
  257|   216k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   216k|        err.m_LineNumber                   = line_number;
  259|   216k|        err.m_Column                       = column;
  260|   216k|        err.unexpected_token.expected_type = expected_type;
  261|   216k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   216k|        return err;
  264|   216k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   216k|    {
  269|   216k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   216k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   216k|                                                  token.GetType());
  272|   216k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  44.2k|    {
  277|  44.2k|        ParseError err;
  278|       |
  279|  44.2k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  44.2k|        err.m_LineNumber                   = line_number;
  281|  44.2k|        err.m_Column                       = column;
  282|  44.2k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  44.2k|        return err;
  285|  44.2k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|    198|    {
  289|    198|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|    198|                                                    token.GetColumn().unsafe(), token.GetText());
  291|    198|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   113k|    {
  296|   113k|        ParseError err;
  297|       |
  298|   113k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   113k|        err.m_LineNumber                       = line_number;
  300|   113k|        err.m_Column                           = column;
  301|   113k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   113k|        return err;
  304|   113k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   113k|    {
  309|   113k|        return ConstructInvalidLabelIdentifierParseError(
  310|   113k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   113k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  36.3k|    {
  317|  36.3k|        ParseError err;
  318|       |
  319|  36.3k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  36.3k|        err.m_LineNumber                     = line_number;
  321|  36.3k|        err.m_Column                         = column;
  322|  36.3k|        err.label_already_defined.label_name = label_name;
  323|  36.3k|        err.label_already_defined.at_line    = at_line;
  324|  36.3k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  36.3k|        return err;
  327|  36.3k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  36.3k|    {
  332|  36.3k|        return ConstructLabelAlreadyDefinedParseError(
  333|  36.3k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  36.3k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  36.3k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|  40.1k|    {
  340|  40.1k|        ParseError err;
  341|       |
  342|  40.1k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|  40.1k|        err.m_LineNumber = line_number;
  344|  40.1k|        err.m_Column     = column;
  345|       |
  346|  40.1k|        return err;
  347|  40.1k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|  40.1k|    {
  352|  40.1k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|  40.1k|                                                        token.GetColumn().unsafe());
  354|  40.1k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  12.2k|    {
  360|  12.2k|        ParseError err;
  361|       |
  362|  12.2k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  12.2k|        err.m_LineNumber               = line_number;
  364|  12.2k|        err.m_Column                   = column;
  365|  12.2k|        err.too_few_arguments.required = required;
  366|  12.2k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  12.2k|        return err;
  369|  12.2k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  12.2k|    {
  374|  12.2k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  12.2k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  12.2k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  9.14k|    {
  381|  9.14k|        ParseError err;
  382|       |
  383|  9.14k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  9.14k|        err.m_LineNumber           = line_number;
  385|  9.14k|        err.m_Column               = column;
  386|  9.14k|        err.empty_label.label_name = label_name;
  387|       |
  388|  9.14k|        return err;
  389|  9.14k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  9.14k|    {
  393|  9.14k|        return ConstructEmptyLabelParseError(
  394|  9.14k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  9.14k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 7.46k, False: 1.68k]
  ------------------
  396|  7.46k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  9.14k|                        token.GetText());
  398|  9.14k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  9.08k|    {
  403|  9.08k|        ParseError err;
  404|       |
  405|  9.08k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  9.08k|        err.m_LineNumber = line_number;
  407|  9.08k|        err.m_Column     = column;
  408|       |
  409|  9.08k|        return err;
  410|  9.08k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  9.08k|    {
  414|  9.08k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  9.08k|                                               token.GetColumn().unsafe());
  416|  9.08k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   486k|    {
   19|   486k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   486k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  5.89k|    {
  182|  5.89k|        ParsedProgram program;
  183|       |
  184|  5.89k|        program.m_Tokens = tokens;
  185|       |
  186|  5.89k|        phi::boolean line_has_instruction{false};
  187|  5.89k|        phi::usize   label_count{0u};
  188|       |
  189|   593k|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 587k, False: 5.89k]
  ------------------
  190|   587k|        {
  191|   587k|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|   587k|            switch (current_token.GetType())
  196|   587k|            {
  197|       |                // Ignore comments
  198|  2.92k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 2.92k, False: 584k]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  2.92k|                    break;
  201|       |
  202|  99.3k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 99.3k, False: 487k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|  99.3k|                    line_has_instruction = false;
  205|  99.3k|                    break;
  206|       |
  207|   243k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 243k, False: 344k]
  ------------------
  208|   243k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 43.6k, False: 199k]
  ------------------
  209|  43.6k|                    {
  210|  43.6k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  43.6k|                                current_token, Token::Type::NewLine));
  212|  43.6k|                        break;
  213|  43.6k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   199k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 70.9k, False: 128k]
  ------------------
  218|  70.9k|                    {
  219|  70.9k|                        program.AddParseError(
  220|  70.9k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|  70.9k|                        break;
  222|  70.9k|                    }
  223|       |
  224|   128k|                    std::string_view label_name = current_token.GetText();
  225|   128k|                    label_name.remove_suffix(1);
  226|       |
  227|   128k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 44.0k, False: 84.4k]
  ------------------
  228|  44.0k|                    {
  229|  44.0k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  44.0k|                                current_token.GetLineNumber().unsafe(),
  231|  44.0k|                                current_token.GetColumn().unsafe(), label_name));
  232|  44.0k|                        break;
  233|  44.0k|                    }
  234|       |
  235|  84.4k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 36.8k, False: 47.5k]
  ------------------
  236|  36.8k|                    {
  237|  36.8k|                        program.AddParseError(
  238|  36.8k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  36.8k|                        break;
  240|  36.8k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  47.5k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 36.3k, False: 11.2k]
  ------------------
  244|  36.3k|                    {
  245|       |                        // Find first defintions of label
  246|  36.3k|                        const Token* first_label_definition =
  247|  36.3k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  36.3k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  36.3k|                                    {
  250|  36.3k|                                        std::string_view token_label_name = t.GetText();
  251|  36.3k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  36.3k|                                        if (token_label_name == label_name)
  254|  36.3k|                                        {
  255|  36.3k|                                            return true;
  256|  36.3k|                                        }
  257|  36.3k|                                    }
  258|       |
  259|  36.3k|                                    return false;
  260|  36.3k|                                });
  261|       |
  262|  36.3k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  36.3k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  36.3k|                                current_token, *first_label_definition));
  266|  36.3k|                        break;
  267|  36.3k|                    }
  268|       |
  269|  11.2k|                    program.m_JumpData[label_name] =
  270|  11.2k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  11.2k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  11.2k|                    break;
  277|  47.5k|                }
  278|       |
  279|  76.5k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 76.5k, False: 510k]
  ------------------
  280|  76.5k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 40.1k, False: 36.4k]
  ------------------
  281|  40.1k|                    {
  282|  40.1k|                        program.AddParseError(
  283|  40.1k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|  40.1k|                        break;
  285|  40.1k|                    }
  286|       |
  287|  36.4k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  36.4k|                    PHI_ASSERT(current_token.HasHint());
  291|  36.4k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  36.4k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  36.4k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  36.4k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  36.4k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  36.4k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  36.4k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  36.4k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  36.4k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|  68.5k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 63.4k, False: 5.06k]
  ------------------
  313|  63.4k|                    {
  314|       |                        // Get next token
  315|  63.4k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 882, False: 62.5k]
  ------------------
  316|    882|                        {
  317|    882|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    882|                                    current_token, number_of_argument_required.unsafe(),
  319|    882|                                    argument_num.unsafe()));
  320|    882|                            break;
  321|    882|                        }
  322|       |
  323|  62.5k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|  62.5k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 24.6k, False: 37.9k]
  ------------------
  327|  24.6k|                        {
  328|  24.6k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 9.08k, False: 15.5k]
  ------------------
  329|  9.08k|                            {
  330|  9.08k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  9.08k|                            }
  332|       |
  333|  24.6k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  24.6k|                            continue;
  336|  24.6k|                        }
  337|       |
  338|  37.9k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 11.3k, False: 26.5k]
  ------------------
  339|  11.3k|                        {
  340|  11.3k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  11.3k|                                    token, number_of_argument_required.unsafe(),
  342|  11.3k|                                    argument_num.unsafe()));
  343|  11.3k|                            break;
  344|  11.3k|                        }
  345|       |
  346|  26.5k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  26.5k|                                parse_instruction_argument(
  348|  26.5k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  26.5k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 19.1k, False: 7.44k]
  ------------------
  350|  19.1k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  19.1k|                            break;
  353|  19.1k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  7.44k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  7.44k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  7.44k|                        argument_num++;
  360|  7.44k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  7.44k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  36.4k|                    program.m_Instructions.emplace_back(instruction);
  368|  36.4k|                    line_has_instruction = true;
  369|  36.4k|                    break;
  370|  76.5k|                }
  371|       |
  372|   165k|                default:
  ------------------
  |  Branch (372:17): [True: 165k, False: 422k]
  ------------------
  373|   165k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   165k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 80.7k, False: 84.5k]
  ------------------
  375|  80.7k|                    {
  376|  80.7k|                        expected_token_type = Token::Type::NewLine;
  377|  80.7k|                    }
  378|       |
  379|   165k|                    program.AddParseError(
  380|   165k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   165k|                    break;
  382|   587k|            }
  383|   587k|        }
  384|       |
  385|       |        // Check for empty labels
  386|  5.89k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 1.48k, False: 4.40k]
  ------------------
  387|  1.48k|        {
  388|  13.0k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 11.5k, False: 1.48k]
  ------------------
  389|  11.5k|            {
  390|  11.5k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  11.5k|                const Token& token = *it;
  393|  11.5k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 9.14k, False: 2.41k]
  ------------------
  394|  9.14k|                {
  395|  9.14k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  9.14k|                    --label_count;
  397|  9.14k|                }
  398|  11.5k|            }
  399|  1.48k|        }
  400|       |
  401|  5.89k|        return program;
  402|  5.89k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  5.89k|    {
  406|  5.89k|        TokenStream tokens = Tokenize(source);
  407|  5.89k|        return Parse(tokens);
  408|  5.89k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  26.5k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  26.5k|        switch (token.GetType())
   38|  26.5k|        {
   39|  3.58k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 3.58k, False: 23.0k]
  ------------------
   40|  3.58k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 1.26k, False: 2.31k]
  ------------------
   41|  3.58k|                                          ArgumentType::AddressDisplacement))
   42|  1.26k|                {
   43|  1.26k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  1.26k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  1.26k|                    return {};
   47|  1.26k|                }
   48|       |
   49|       |                // Get address displacement
   50|  2.31k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  2.31k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  2.31k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 7, False: 2.30k]
  ------------------
   55|      7|                {
   56|      7|                    program.AddParseError(
   57|      7|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      7|                    return {};
   59|      7|                }
   60|       |
   61|  2.30k|                auto         it           = tokens.current_position();
   62|  2.30k|                const Token& first_token  = tokens.consume();
   63|  2.30k|                const Token& second_token = tokens.consume();
   64|  2.30k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  2.30k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 539, False: 1.77k]
  ------------------
   67|    539|                {
   68|    539|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|    539|                            first_token, Token::Type::OpenBracket));
   70|    539|                    return {};
   71|    539|                }
   72|       |
   73|       |                // Second token is the register
   74|  1.77k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 1.29k, False: 479]
  ------------------
   75|  1.29k|                {
   76|  1.29k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|  1.29k|                            second_token, Token::Type::RegisterInt));
   78|  1.29k|                    return {};
   79|  1.29k|                }
   80|       |
   81|    479|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 227, False: 252]
  ------------------
   82|    227|                {
   83|    227|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|    227|                            third_token, Token::Type::ClosingBracket));
   85|    227|                    return {};
   86|    227|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|    252|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|    252|                return ConstructInstructionArgumentAddressDisplacement(
   95|    252|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|    479|            }
   97|  2.80k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 2.80k, False: 23.7k]
  ------------------
   98|  2.80k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 864, False: 1.94k]
  ------------------
   99|    864|                {
  100|    864|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|    864|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|    864|                    return {};
  103|    864|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  1.94k|                return ConstructInstructionArgumentRegisterInt(
  109|  1.94k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  2.80k|            }
  111|    470|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 470, False: 26.1k]
  ------------------
  112|    470|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 264, False: 206]
  ------------------
  113|    264|                {
  114|    264|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|    264|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|    264|                    return {};
  117|    264|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|    206|                return ConstructInstructionArgumentRegisterFloat(
  123|    206|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|    470|            }
  125|    198|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 198, False: 26.3k]
  ------------------
  126|    198|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|    198|                return {};
  129|    470|            }
  130|  12.7k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 12.7k, False: 13.8k]
  ------------------
  131|       |                // Parse as Label
  132|  12.7k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 2.54k, False: 10.1k]
  ------------------
  133|  2.54k|                {
  134|  2.54k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  2.54k|                            token, expected_argument_type, ArgumentType::Label));
  136|  2.54k|                    return {};
  137|  2.54k|                }
  138|       |
  139|  10.1k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 10.1k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  10.1k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 5.60k, False: 4.57k]
  ------------------
  146|  5.60k|                {
  147|  5.60k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  5.60k|                    return {};
  149|  5.60k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  4.57k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  10.1k|            }
  155|  1.80k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 1.80k, False: 24.7k]
  ------------------
  156|  1.80k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 825, False: 982]
  ------------------
  157|    825|                {
  158|    825|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|    825|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|    825|                    return {};
  161|    825|                }
  162|       |
  163|    982|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 466, False: 516]
  ------------------
  164|    466|                {
  165|    466|                    return ConstructInstructionArgumentImmediateValue(
  166|    466|                            static_cast<std::int16_t>(token.GetHint()));
  167|    466|                }
  168|       |
  169|    516|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    516|                return {};
  171|    982|            }
  172|       |
  173|  4.99k|            default:
  ------------------
  |  Branch (173:13): [True: 4.99k, False: 21.5k]
  ------------------
  174|  4.99k|                program.AddParseError(
  175|  4.99k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  4.99k|                return {};
  177|  26.5k|        }
  178|  26.5k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|   628k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   628k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 430k, False: 197k]
  ------------------
  249|   430k|                                    {
  250|   430k|                                        std::string_view token_label_name = t.GetText();
  251|   430k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   430k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 36.3k, False: 394k]
  ------------------
  254|  36.3k|                                        {
  255|  36.3k|                                            return true;
  256|  36.3k|                                        }
  257|   430k|                                    }
  258|       |
  259|   591k|                                    return false;
  260|   628k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    143|    {
  354|    143|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 143]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    143|        m_CurrentProgram = &program;
  361|       |
  362|    143|        m_ProgramCounter               = 0u;
  363|    143|        m_Halted                       = false;
  364|    143|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    143|        m_LastRaisedException          = Exception::None;
  366|    143|        m_CurrentStepCount             = 0u;
  367|       |
  368|    143|        return true;
  369|    143|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   481k|    {
   14|   481k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 84.7k, False: 396k]
  ------------------
   15|  84.7k|        {
   16|  84.7k|            char first_char = token[0];
   17|  84.7k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 2.50k, False: 82.2k]
  |  Branch (17:38): [True: 3.94k, False: 78.2k]
  ------------------
   18|  6.44k|            {
   19|  6.44k|                char second_char = token[1];
   20|  6.44k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 5.86k, False: 585]
  |  Branch (20:43): [True: 4.28k, False: 1.57k]
  ------------------
   21|  4.28k|                {
   22|  4.28k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  4.28k|                }
   24|  6.44k|            }
   25|  84.7k|        }
   26|   396k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 107k, False: 289k]
  ------------------
   27|   107k|        {
   28|   107k|            char first_char = token[0];
   29|   107k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 6.04k, False: 101k]
  |  Branch (29:38): [True: 569, False: 101k]
  ------------------
   30|  6.61k|            {
   31|  6.61k|                char second_char = token[1];
   32|  6.61k|                char third_char  = token[2];
   33|       |
   34|  6.61k|                switch (second_char)
   35|  6.61k|                {
   36|  1.66k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 1.66k, False: 4.95k]
  ------------------
   37|  1.66k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 811, False: 852]
  |  Branch (37:50): [True: 588, False: 223]
  ------------------
   38|    588|                        {
   39|    588|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|    588|                        }
   41|  1.07k|                        break;
   42|  1.66k|                    }
   43|  1.80k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 1.80k, False: 4.81k]
  ------------------
   44|  1.80k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 1.08k, False: 719]
  |  Branch (44:50): [True: 725, False: 358]
  ------------------
   45|    725|                        {
   46|    725|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|    725|                        }
   48|  1.07k|                        break;
   49|  1.80k|                    }
   50|  1.85k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 1.85k, False: 4.76k]
  ------------------
   51|  1.85k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 614, False: 1.23k]
  |  Branch (51:50): [True: 980, False: 258]
  ------------------
   52|  1.59k|                        {
   53|  1.59k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  1.59k|                        }
   55|    258|                        break;
   56|  1.85k|                    }
   57|  1.30k|                    default: {
  ------------------
  |  Branch (57:21): [True: 1.30k, False: 5.31k]
  ------------------
   58|  1.30k|                        break;
   59|  1.85k|                    }
   60|  6.61k|                }
   61|  6.61k|            }
   62|   107k|        }
   63|       |
   64|   474k|        return IntRegisterID::None;
   65|   481k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   474k|    {
   69|   474k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 80.4k, False: 394k]
  ------------------
   70|  80.4k|        {
   71|  80.4k|            char first_char = token[0];
   72|  80.4k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 2.87k, False: 77.5k]
  |  Branch (72:38): [True: 2.24k, False: 75.3k]
  ------------------
   73|  5.12k|            {
   74|  5.12k|                char second_char = token[1];
   75|  5.12k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 4.20k, False: 922]
  |  Branch (75:43): [True: 1.85k, False: 2.34k]
  ------------------
   76|  1.85k|                {
   77|  1.85k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  1.85k|                }
   79|  5.12k|            }
   80|  80.4k|        }
   81|   394k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 104k, False: 289k]
  ------------------
   82|   104k|        {
   83|   104k|            char first_char = token[0];
   84|   104k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 6.75k, False: 98.0k]
  |  Branch (84:38): [True: 1.18k, False: 96.8k]
  ------------------
   85|  7.93k|            {
   86|  7.93k|                char second_char = token[1];
   87|  7.93k|                char third_char  = token[2];
   88|       |
   89|  7.93k|                switch (second_char)
   90|  7.93k|                {
   91|  1.54k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 1.54k, False: 6.38k]
  ------------------
   92|  1.54k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 1.33k, False: 215]
  |  Branch (92:50): [True: 342, False: 992]
  ------------------
   93|    342|                        {
   94|    342|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|    342|                        }
   96|  1.20k|                        break;
   97|  1.54k|                    }
   98|  2.43k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 2.43k, False: 5.50k]
  ------------------
   99|  2.43k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 1.98k, False: 446]
  |  Branch (99:50): [True: 872, False: 1.11k]
  ------------------
  100|    872|                        {
  101|    872|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|    872|                        }
  103|  1.56k|                        break;
  104|  2.43k|                    }
  105|  1.56k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 1.27k, False: 6.65k]
  ------------------
  106|  1.27k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 387, False: 892]
  |  Branch (106:50): [True: 382, False: 510]
  ------------------
  107|    769|                        {
  108|    769|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|    769|                        }
  110|    510|                        break;
  111|  1.27k|                    }
  112|  2.67k|                    default: {
  ------------------
  |  Branch (112:21): [True: 2.67k, False: 5.26k]
  ------------------
  113|  2.67k|                        break;
  114|  1.27k|                    }
  115|  7.93k|                }
  116|  7.93k|            }
  117|   104k|        }
  118|       |
  119|   470k|        return FloatRegisterID::None;
  120|   474k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   438k|    {
  124|   438k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 87.2k, False: 351k]
  ------------------
  125|  87.2k|        {
  126|  87.2k|            char c1 = token[0];
  127|  87.2k|            char c2 = token[1];
  128|  87.2k|            char c3 = token[2];
  129|  87.2k|            char c4 = token[3];
  130|       |
  131|  87.2k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 2.73k, False: 84.5k]
  |  Branch (131:34): [True: 920, False: 83.5k]
  |  Branch (131:49): [True: 963, False: 2.68k]
  |  Branch (131:62): [True: 1.51k, False: 1.17k]
  ------------------
  132|  87.2k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 1.16k, False: 1.30k]
  |  Branch (132:34): [True: 327, False: 980]
  |  Branch (132:49): [True: 1.14k, False: 354]
  |  Branch (132:62): [True: 1, False: 353]
  ------------------
  133|  87.2k|        }
  134|       |
  135|   351k|        return false;
  136|   438k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|   562k|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|  94.6k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  2.23M|    {
   41|  2.23M|        return m_Type;
   42|  2.23M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  1.65M|    {
   51|  1.65M|        return m_LineNumber;
   52|  1.65M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  3.06M|    {
   56|  3.06M|        return m_Column;
   57|  3.06M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  1.99M|    {
   61|  1.99M|        return m_Text.length();
   62|  1.99M|    }
_ZNK3dlx5Token7GetTextEv:
   65|   959k|    {
   66|   959k|        return m_Text;
   67|   959k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  39.7k|    {
   80|  39.7k|        return m_HasHint;
   81|  39.7k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  41.6k|    {
   85|  41.6k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  41.6k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  41.6k|                   m_Type == Type::ImmediateInteger);
   88|  41.6k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  41.6k|        return m_Hint;
   91|  41.6k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  5.89k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  5.89k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  5.89k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  2.31k|    {
   51|  2.31k|        auto it = m_Iterator;
   52|  9.25k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 6.94k, False: 2.30k]
  ------------------
   53|  6.94k|        {
   54|  6.94k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 7, False: 6.93k]
  ------------------
   55|      7|            {
   56|      7|                return false;
   57|      7|            }
   58|  6.94k|        }
   59|       |
   60|  2.30k|        return true;
   61|  2.31k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|   656k|    {
   65|   656k|        return m_Iterator != m_Tokens.end();
   66|   656k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|   656k|    {
   70|   656k|        return m_Iterator == m_Tokens.end();
   71|   656k|    }
_ZN3dlx11TokenStream7consumeEv:
   84|   656k|    {
   85|   656k|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|   656k|        return *m_Iterator++;
   91|   656k|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  2.30k|    {
  164|  2.30k|        return m_Iterator;
  165|  2.30k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|    252|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|    252|        m_Iterator = it;
  179|    252|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  5.89k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  5.89k|        return m_Tokens.begin();
  188|  5.89k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  5.89k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  5.89k|        return m_Tokens.end();
  206|  5.89k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  1.48k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  1.48k|        return m_Tokens.rbegin();
  224|  1.48k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  11.5k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  11.5k|        return m_Tokens.rend();
  233|  11.5k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  5.89k|    {
   63|  5.89k|        TokenStream tokens;
   64|       |
   65|  5.89k|        std::string_view current_token;
   66|       |
   67|  5.89k|        phi::u64 current_line_number{1u};
   68|  5.89k|        phi::u64 current_column{1u};
   69|  5.89k|        phi::u64 token_begin{0u};
   70|       |
   71|  5.89k|        phi::boolean parsing_comment{false};
   72|       |
   73|  1.62M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 1.62M, False: 5.89k]
  ------------------
   74|  1.62M|        {
   75|  1.62M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  1.62M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 111k, False: 1.51M]
  ------------------
   78|   111k|            {
   79|   111k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 44.2k, False: 66.8k]
  ------------------
   80|  44.2k|                {
   81|       |                    // Skip empty lines
   82|  44.2k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  44.2k|                                        current_line_number, current_column);
   84|       |
   85|  44.2k|                    parsing_comment = false;
   86|  44.2k|                    current_line_number += 1u;
   87|  44.2k|                    current_column = 1u;
   88|  44.2k|                    continue;
   89|  44.2k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|  66.8k|                tokens.emplace_back(
   93|  66.8k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|  66.8k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|  66.8k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|  66.8k|                                    current_line_number, current_column);
   98|       |
   99|  66.8k|                current_token   = std::string_view{};
  100|  66.8k|                parsing_comment = false;
  101|  66.8k|                current_line_number += 1u;
  102|  66.8k|                current_column = 0u;
  103|  66.8k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  1.51M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 2.46k, False: 1.50M]
  |  Branch (105:34): [True: 3.84k, False: 1.50M]
  ------------------
  106|  6.31k|            {
  107|  6.31k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 572, False: 5.74k]
  ------------------
  108|    572|                {
  109|    572|                    token_begin = i;
  110|    572|                }
  111|  5.74k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 3.74k, False: 1.99k]
  ------------------
  112|  3.74k|                {
  113|  3.74k|                    tokens.emplace_back(ParseToken(
  114|  3.74k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  3.74k|                            current_line_number, current_column - current_token.length()));
  116|  3.74k|                    token_begin   = i;
  117|  3.74k|                    current_token = std::string_view{};
  118|  3.74k|                }
  119|       |
  120|  6.31k|                parsing_comment = true;
  121|  6.31k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  6.31k|            }
  123|  1.50M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 13.4k, False: 1.49M]
  ------------------
  124|  13.4k|            {
  125|       |                // simply append the character
  126|  13.4k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|  13.4k|            }
  128|  1.49M|            else
  129|  1.49M|            {
  130|       |                // Not parsing a comment
  131|  1.49M|                switch (c)
  132|  1.49M|                {
  133|  21.6k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 21.6k, False: 1.47M]
  ------------------
  134|  58.5k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 36.9k, False: 1.45M]
  ------------------
  135|  58.5k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 0, False: 1.49M]
  ------------------
  136|  58.5k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 18.3k, False: 40.1k]
  ------------------
  137|  18.3k|                        {
  138|  18.3k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  18.3k|                            continue;
  141|  18.3k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|  40.1k|                        tokens.emplace_back(ParseToken(
  145|  40.1k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|  40.1k|                                current_line_number, current_column - current_token.length()));
  147|  40.1k|                        current_token = std::string_view{};
  148|  40.1k|                        break;
  149|   173k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 173k, False: 1.31M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|   173k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 145k, False: 28.0k]
  ------------------
  152|   145k|                        {
  153|   145k|                            current_token =
  154|   145k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|   145k|                            tokens.emplace_back(ParseToken(
  156|   145k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|   145k|                                    current_line_number,
  158|   145k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|   145k|                            current_token = std::string_view{};
  161|   145k|                        }
  162|  28.0k|                        else
  163|  28.0k|                        {
  164|       |                            // Orphan colon
  165|  28.0k|                            token_begin = i;
  166|       |
  167|  28.0k|                            tokens.emplace_back(Token::Type::Colon,
  168|  28.0k|                                                source.substr(token_begin.unsafe(), 1),
  169|  28.0k|                                                current_line_number, current_column);
  170|  28.0k|                        }
  171|   173k|                        break;
  172|   108k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 108k, False: 1.38M]
  ------------------
  173|   131k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 23.6k, False: 1.46M]
  ------------------
  174|   156k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 24.6k, False: 1.46M]
  ------------------
  175|   156k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 100k, False: 55.7k]
  ------------------
  176|   100k|                        {
  177|   100k|                            tokens.emplace_back(ParseToken(
  178|   100k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   100k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   100k|                            current_token = std::string_view{};
  182|   100k|                        }
  183|       |
  184|   156k|                        Token::Type type;
  185|   156k|                        switch (c)
  186|   156k|                        {
  187|   108k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 108k, False: 48.2k]
  ------------------
  188|   108k|                                type = Token::Type::Comma;
  189|   108k|                                break;
  190|  23.6k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 23.6k, False: 132k]
  ------------------
  191|  23.6k|                                type = Token::Type::OpenBracket;
  192|  23.6k|                                break;
  193|  24.6k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 24.6k, False: 131k]
  ------------------
  194|  24.6k|                                type = Token::Type::ClosingBracket;
  195|  24.6k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 156k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|   156k|#endif
  201|   156k|                        }
  202|       |
  203|   156k|                        token_begin = i;
  204|       |
  205|   156k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|   156k|                                            current_line_number, current_column);
  207|   156k|                        break;
  208|       |
  209|  1.10M|                    default:
  ------------------
  |  Branch (209:21): [True: 1.10M, False: 388k]
  ------------------
  210|  1.10M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 357k, False: 746k]
  ------------------
  211|   357k|                        {
  212|   357k|                            token_begin = i;
  213|   357k|                        }
  214|       |
  215|       |                        // simply append the character
  216|  1.10M|                        current_token =
  217|  1.10M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  1.49M|                }
  219|  1.49M|            }
  220|       |
  221|  1.56M|            current_column += 1u;
  222|  1.56M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  5.89k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 4.26k, False: 1.63k]
  ------------------
  226|  4.26k|        {
  227|  4.26k|            tokens.emplace_back(
  228|  4.26k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  4.26k|                               current_line_number, current_column - current_token.length()));
  230|  4.26k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  5.89k|        tokens.finalize();
  234|       |
  235|  5.89k|        return tokens;
  236|  5.89k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   361k|    {
   11|   361k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 4.83k, False: 356k]
  |  Branch (11:35): [True: 4.08k, False: 752]
  ------------------
   12|  4.08k|        {
   13|  4.08k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  4.08k|            if (number)
  ------------------
  |  Branch (15:17): [True: 626, False: 3.45k]
  ------------------
   16|    626|            {
   17|    626|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|    626|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|    626|            }
   20|       |
   21|  3.45k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  4.08k|        }
   23|       |
   24|   357k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 2.20k, False: 355k]
  |  Branch (24:35): [True: 2.11k, False: 352k]
  ------------------
   25|  4.31k|        {
   26|  4.31k|            return {Token::Type::Comment, token, line_number, column};
   27|  4.31k|        }
   28|       |
   29|   352k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 9.21k, False: 343k]
  ------------------
   30|  9.21k|        {
   31|  9.21k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  9.21k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  9.21k|        }
   34|       |
   35|   343k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 757, False: 342k]
  ------------------
   36|    757|        {
   37|    757|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|    757|        }
   39|       |
   40|   342k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 4.02k, False: 338k]
  ------------------
   41|  4.02k|        {
   42|  4.02k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  4.02k|                    static_cast<std::uint32_t>(id)};
   44|  4.02k|        }
   45|       |
   46|   338k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 2.66k, False: 336k]
  ------------------
   47|  2.66k|        {
   48|  2.66k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  2.66k|                    static_cast<std::uint32_t>(id)};
   50|  2.66k|        }
   51|       |
   52|   336k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 78.1k, False: 258k]
  ------------------
   53|  78.1k|        {
   54|  78.1k|            return {Token::Type::OpCode, token, line_number, column,
   55|  78.1k|                    static_cast<std::uint32_t>(opcode)};
   56|  78.1k|        }
   57|       |
   58|   258k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   336k|    }

_ZN6ImVec2C2Ev:
  263|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

LLVMFuzzerTestOneInput:
   11|  5.89k|{
   12|  5.89k|    static dlxemu::Emulator emu;
   13|       |
   14|  5.89k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   15|       |
   16|  5.89k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   17|       |
   18|       |    // Parse it
   19|  5.89k|    editor.SetText(std::string(source.data(), source.size()));
   20|  5.89k|    editor.m_FullText = editor.GetText();
   21|       |
   22|  5.89k|    emu.ParseProgram(editor.m_FullText);
   23|       |
   24|  5.89k|    editor.ColorizeInternal();
   25|       |
   26|  5.89k|    return 0;
   27|  5.89k|}


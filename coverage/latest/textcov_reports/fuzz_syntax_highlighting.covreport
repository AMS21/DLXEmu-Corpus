_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  196|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  201|   251k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  239|  50.3k|    {
  240|  50.3k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (240:13): [True: 26.1k, False: 24.2k]
  ------------------
  241|  26.1k|        {
  242|  26.1k|            return m_Line < other.m_Line;
  243|  26.1k|        }
  244|       |
  245|  24.2k|        return m_Column <= other.m_Column;
  246|  50.3k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  250|      1|    {
  251|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (251:13): [True: 0, False: 1]
  ------------------
  252|      0|        {
  253|      0|            return m_Line > other.m_Line;
  254|      0|        }
  255|       |
  256|      1|        return m_Column >= other.m_Column;
  257|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  264|  23.5M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  292|      1|    {
  293|      1|        Colorize();
  294|      1|        m_Lines.push_back(Line());
  295|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  298|      1|    {
  299|      1|        VerifyInternalState();
  300|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  348|  50.3k|    {
  349|  50.3k|        m_ErrorMarkers.clear();
  350|  50.3k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  413|  50.3k|    {
  414|  50.3k|        m_Breakpoints.clear();
  415|  50.3k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  493|  50.3k|    {
  494|  50.3k|        m_Lines.clear();
  495|  50.3k|        ResetState();
  496|  50.3k|        m_Lines.emplace_back(Line());
  497|       |
  498|  50.3k|        for (const char character : text)
  ------------------
  |  Branch (498:35): [True: 36.1M, False: 50.3k]
  ------------------
  499|  36.1M|        {
  500|  36.1M|            if (character == '\r' ||
  ------------------
  |  Branch (500:17): [True: 30.5k, False: 36.0M]
  |  Branch (500:17): [True: 11.0M, False: 25.0M]
  ------------------
  501|  36.1M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (501:18): [True: 13.0M, False: 23.0M]
  |  Branch (501:48): [True: 11.5M, False: 1.47M]
  |  Branch (501:69): [True: 11.0M, False: 477k]
  ------------------
  502|  11.0M|            {
  503|       |                // ignore the carriage return character and control characters
  504|  11.0M|            }
  505|  25.0M|            else if (character == '\n')
  ------------------
  |  Branch (505:22): [True: 1.47M, False: 23.5M]
  ------------------
  506|  1.47M|            {
  507|  1.47M|                m_Lines.emplace_back(Line());
  508|  1.47M|            }
  509|  23.5M|            else
  510|  23.5M|            {
  511|  23.5M|                m_Lines.back().emplace_back(
  512|  23.5M|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  513|  23.5M|            }
  514|  36.1M|        }
  515|       |
  516|  50.3k|        m_TextChanged = true;
  517|  50.3k|        m_ScrollToTop = true;
  518|       |
  519|  50.3k|        m_UndoBuffer.clear();
  520|  50.3k|        m_UndoIndex = 0u;
  521|       |
  522|  50.3k|        Colorize();
  523|  50.3k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  526|  50.3k|    {
  527|  50.3k|        const phi::u32 max_line = GetMaxLineNumber();
  528|       |
  529|  50.3k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  530|  50.3k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1493|      1|    {
 1494|       |        // Lines should never be empty
 1495|      1|        PHI_ASSERT(!m_Lines.empty());
 1496|       |
 1497|       |        // Verify Selection is still in a valid state
 1498|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1499|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1500|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1501|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1502|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1503|       |
 1504|       |        // Verify cursor position
 1505|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1506|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1507|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1508|       |
 1509|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1510|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1511|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1512|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1513|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1514|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1515|       |#endif
 1516|       |
 1517|       |        // Verify that all breakpoints are on existing lines
 1518|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1518:35): [True: 0, False: 1]
  ------------------
 1519|      0|        {
 1520|      0|            PHI_ASSERT(break_point != 0u);
 1521|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1522|      0|        }
 1523|       |
 1524|       |        // Verify that all error markers are on existing lines
 1525|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1525:34): [True: 0, False: 1]
  ------------------
 1526|      0|        {
 1527|      0|            const phi::u32 line_number = error_marker.first;
 1528|       |
 1529|      0|            PHI_ASSERT(line_number != 0u);
 1530|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1531|      0|        }
 1532|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1535|      1|    {
 1536|      1|        constexpr const static Palette palette = {{
 1537|      1|                0xff7f7f7f, // Default
 1538|      1|                0xffd69c56, // OpCode
 1539|      1|                0xff00ff00, // Register
 1540|      1|                0xff7070e0, // IntegerLiteral
 1541|      1|                0xff206020, // Comment
 1542|      1|                0xff101010, // Background
 1543|      1|                0xffe0e0e0, // Cursor
 1544|      1|                0x80a06020, // Selection
 1545|      1|                0x800020ff, // ErrorMarker
 1546|      1|                0x40f08000, // Breakpoint
 1547|      1|                0xff707000, // Line number
 1548|      1|                0x40000000, // Current line fill
 1549|      1|                0x40808080, // Current line fill (inactive)
 1550|      1|                0x40a0a0a0, // Current line edge
 1551|      1|        }};
 1552|       |
 1553|      1|        return palette;
 1554|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1721|  50.3k|    {
 1722|       |        // TODO: This is quite unreadable
 1723|  50.3k|        const phi::u32 to_line =
 1724|  50.3k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1724:17): [True: 50.3k, False: 0]
  ------------------
 1725|  50.3k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1726|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1727|       |
 1728|  50.3k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1729|  50.3k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1730|  50.3k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1731|  50.3k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1732|  50.3k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1838|  50.3k|    {
 1839|  50.3k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1840|  50.3k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1841|  50.3k|        PHI_ASSERT(start <= end);
 1842|       |
 1843|  50.3k|        std::string result;
 1844|       |
 1845|  50.3k|        phi::u32   lstart = start.m_Line;
 1846|  50.3k|        phi::u32   lend   = end.m_Line;
 1847|  50.3k|        phi::u32   istart = GetCharacterIndex(start);
 1848|  50.3k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1849|  50.3k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1850|  50.3k|        phi::usize size   = 0u;
 1851|       |
 1852|  1.57M|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1852:35): [True: 1.52M, False: 50.3k]
  ------------------
 1853|  1.52M|        {
 1854|  1.52M|            PHI_ASSERT(i < m_Lines.size());
 1855|  1.52M|            size += m_Lines[i.unsafe()].size();
 1856|  1.52M|        }
 1857|       |
 1858|  50.3k|        result.reserve((size + size / 8u).unsafe());
 1859|       |
 1860|  25.0M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1860:16): [True: 18.1M, False: 6.87M]
  |  Branch (1860:16): [True: 25.0M, False: 50.3k]
  |  Branch (1860:33): [True: 6.82M, False: 50.3k]
  ------------------
 1861|  25.0M|        {
 1862|  25.0M|            PHI_ASSERT(lstart < m_Lines.size());
 1863|       |
 1864|  25.0M|            const Line& line = m_Lines[lstart.unsafe()];
 1865|  25.0M|            if (istart < line.size())
  ------------------
  |  Branch (1865:17): [True: 23.5M, False: 1.47M]
  ------------------
 1866|  23.5M|            {
 1867|  23.5M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1868|  23.5M|                istart++;
 1869|  23.5M|            }
 1870|  1.47M|            else
 1871|  1.47M|            {
 1872|  1.47M|                istart = 0u;
 1873|  1.47M|                ++lstart;
 1874|       |
 1875|  1.47M|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1875:21): [True: 1.47M, False: 0]
  ------------------
 1876|  1.47M|                {
 1877|  1.47M|                    result += '\n';
 1878|  1.47M|                }
 1879|  1.47M|            }
 1880|  25.0M|        }
 1881|       |
 1882|  50.3k|        return result;
 1883|  50.3k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2421|   100k|    {
 2422|   100k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2423|       |
 2424|   100k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2425|   100k|        phi::u32    index = 0u;
 2426|  11.0M|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2426:35): [True: 10.9M, False: 52.9k]
  |  Branch (2426:35): [True: 10.9M, False: 100k]
  |  Branch (2426:58): [True: 10.9M, False: 47.6k]
  ------------------
 2427|  10.9M|        {
 2428|  10.9M|            PHI_ASSERT(index < line.size());
 2429|  10.9M|            const Char character = line[index.unsafe()].m_Char;
 2430|       |
 2431|  10.9M|            if (character == '\t')
  ------------------
  |  Branch (2431:17): [True: 237k, False: 10.6M]
  ------------------
 2432|   237k|            {
 2433|   237k|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2434|   237k|            }
 2435|  10.6M|            else
 2436|  10.6M|            {
 2437|  10.6M|                ++column;
 2438|  10.6M|            }
 2439|       |
 2440|  10.9M|            index += UTF8CharLength(character);
 2441|  10.9M|        }
 2442|       |
 2443|   100k|        return index;
 2444|   100k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2493|  50.3k|    {
 2494|  50.3k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2494:13): [True: 0, False: 50.3k]
  ------------------
 2495|      0|        {
 2496|      0|            return 0u;
 2497|      0|        }
 2498|       |
 2499|  50.3k|        const Line& line = m_Lines[line_number.unsafe()];
 2500|  50.3k|        phi::u32    col  = 0u;
 2501|       |
 2502|  10.9M|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2502:32): [True: 10.9M, False: 50.3k]
  ------------------
 2503|  10.9M|        {
 2504|  10.9M|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2505|  10.9M|            if (character == '\t')
  ------------------
  |  Branch (2505:17): [True: 237k, False: 10.6M]
  ------------------
 2506|   237k|            {
 2507|   237k|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2508|   237k|            }
 2509|  10.6M|            else
 2510|  10.6M|            {
 2511|  10.6M|                col++;
 2512|  10.6M|            }
 2513|       |
 2514|  10.9M|            i += UTF8CharLength(character);
 2515|  10.9M|        }
 2516|       |
 2517|  50.3k|        return col;
 2518|  50.3k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2521|  50.3k|    {
 2522|  50.3k|        PHI_ASSERT(!m_Lines.empty());
 2523|       |
 2524|  50.3k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2525|  50.3k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3660|  9.79M|    {
 3661|  9.79M|        PaletteIndex palette_index{PaletteIndex::Default};
 3662|       |
 3663|       |        // Determine palette color
 3664|  9.79M|        switch (token.GetType())
 3665|  9.79M|        {
 3666|  82.1k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3666:13): [True: 82.1k, False: 9.71M]
  ------------------
 3667|  82.1k|                palette_index = PaletteIndex::Comment;
 3668|  82.1k|                break;
 3669|  54.3k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3669:13): [True: 54.3k, False: 9.74M]
  ------------------
 3670|   186k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3670:13): [True: 132k, False: 9.66M]
  ------------------
 3671|   186k|                palette_index = PaletteIndex::IntegerLiteral;
 3672|   186k|                break;
 3673|  1.47M|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3673:13): [True: 1.47M, False: 8.32M]
  ------------------
 3674|  1.47M|                palette_index = PaletteIndex::OpCode;
 3675|  1.47M|                break;
 3676|  57.0k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3676:13): [True: 57.0k, False: 9.73M]
  ------------------
 3677|   148k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3677:13): [True: 91.3k, False: 9.70M]
  ------------------
 3678|   164k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3678:13): [True: 15.8k, False: 9.77M]
  ------------------
 3679|   164k|                palette_index = PaletteIndex::Register;
 3680|   164k|                break;
 3681|  1.47M|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3681:13): [True: 1.47M, False: 8.32M]
  ------------------
 3682|  1.47M|                return;
 3683|  6.41M|            default:
  ------------------
  |  Branch (3683:13): [True: 6.41M, False: 3.37M]
  ------------------
 3684|  6.41M|                break;
 3685|  9.79M|        }
 3686|       |
 3687|  8.32M|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3688|  8.32M|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3689|       |
 3690|  8.32M|        for (phi::u64 index{token.GetColumn() - 1u};
 3691|  31.0M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3691:14): [True: 22.7M, False: 8.32M]
  ------------------
 3692|  22.7M|        {
 3693|  22.7M|            PHI_ASSERT(index < line.size());
 3694|  22.7M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3695|  22.7M|        }
 3696|  8.32M|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3699|  50.3k|    {
 3700|  50.3k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3701|       |
 3702|  50.3k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3702:38): [True: 9.79M, False: 50.3k]
  ------------------
 3703|  9.79M|        {
 3704|  9.79M|            ColorizeToken(token);
 3705|  9.79M|        }
 3706|  50.3k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3709|  50.3k|    {
 3710|  50.3k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3711|  50.3k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3712|  50.3k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3713|       |
 3714|       |        // Clear breakpoints and markers
 3715|  50.3k|        ClearBreakPoints();
 3716|  50.3k|        ClearErrorMarkers();
 3717|  50.3k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  134|  10.9M|{
  135|  10.9M|    return UTF8CharLength(static_cast<char>(characater));
  136|  10.9M|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  104|  21.8M|{
  105|  21.8M|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (105:9): [True: 29.1k, False: 21.8M]
  ------------------
  106|  29.1k|    {
  107|  29.1k|        return 6_u8;
  108|  29.1k|    }
  109|       |
  110|  21.8M|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (110:9): [True: 52.5k, False: 21.7M]
  ------------------
  111|  52.5k|    {
  112|  52.5k|        return 5_u8;
  113|  52.5k|    }
  114|       |
  115|  21.7M|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (115:9): [True: 53.0k, False: 21.7M]
  ------------------
  116|  53.0k|    {
  117|  53.0k|        return 4_u8;
  118|  53.0k|    }
  119|       |
  120|  21.7M|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (120:9): [True: 95.5k, False: 21.6M]
  ------------------
  121|  95.5k|    {
  122|  95.5k|        return 3_u8;
  123|  95.5k|    }
  124|       |
  125|  21.6M|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (125:9): [True: 310k, False: 21.3M]
  ------------------
  126|   310k|    {
  127|   310k|        return 2_u8;
  128|   310k|    }
  129|       |
  130|  21.3M|    return 1_u8;
  131|  21.6M|}

_ZN6dlxemu8EmulatorC2Ev:
   42|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  173|  50.3k|    {
  174|  50.3k|        return m_DLXProgram;
  175|  50.3k|    }
_ZN6dlxemu8Emulator12ParseProgramEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  178|  50.3k|    {
  179|  50.3k|        m_DLXProgram = dlx::Parser::Parse(source);
  180|       |
  181|  50.3k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (181:13): [True: 375, False: 49.9k]
  ------------------
  182|    375|        {
  183|    375|            m_Processor.LoadProgram(m_DLXProgram);
  184|    375|        }
  185|  50.3k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  198|  50.3k|    {
  199|  50.3k|        return m_CodeEditor;
  200|  50.3k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   37|      1|    {
   38|      1|        Shutdown();
   39|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  107|      1|    {
  108|      1|        if (imgui_initialized)
  ------------------
  |  Branch (108:13): [True: 0, False: 1]
  ------------------
  109|      0|        {
  110|      0|            ShutdownImGui();
  111|      0|        }
  112|       |
  113|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (113:13): [True: 0, False: 1]
  ------------------
  114|      0|        {
  115|      0|            glfwDestroyWindow(m_Window);
  116|      0|        }
  117|       |
  118|      1|        if (glfw_initialized)
  ------------------
  |  Branch (118:13): [True: 0, False: 1]
  ------------------
  119|      0|        {
  120|      0|            glfwTerminate();
  121|      0|        }
  122|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  2.33M|        {
  169|  2.33M|            PHI_ASSERT(index < 3u);
  170|       |
  171|  2.33M|            switch (index.unsafe())
  172|  2.33M|            {
  173|  1.03M|                case 0:
  ------------------
  |  Branch (173:17): [True: 1.03M, False: 1.29M]
  ------------------
  174|  1.03M|                    return m_Arg1Type;
  175|       |
  176|   659k|                case 1:
  ------------------
  |  Branch (176:17): [True: 659k, False: 1.67M]
  ------------------
  177|   659k|                    return m_Arg2Type;
  178|       |
  179|   635k|                case 2:
  ------------------
  |  Branch (179:17): [True: 635k, False: 1.69M]
  ------------------
  180|   635k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 2.33M]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  2.33M|#endif
  187|  2.33M|            }
  188|  2.33M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   616k|        {
  195|   616k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   616k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 605k, False: 11.1k]
  ------------------
  199|   605k|            {
  200|   605k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   605k|            }
  202|   616k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 362k, False: 254k]
  ------------------
  203|   362k|            {
  204|   362k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   362k|            }
  206|   616k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 199k, False: 417k]
  ------------------
  207|   199k|            {
  208|   199k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   199k|            }
  210|       |
  211|   616k|            return number_of_argument_required;
  212|   616k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   616k|        {
  221|   616k|            return m_Executor;
  222|   616k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   376k|    {
   38|   376k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   376k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   376k|                                         static_cast<underlying_t>(rhs));
   42|   376k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   376k|    {
   55|   376k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   376k|        return static_cast<underlying_t>(type & test) != 0;
   58|   376k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  2.12M|    {
   31|  2.12M|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 46.4k, False: 2.07M]
  ------------------
   32|  46.4k|        {
   33|  46.4k|            return true;
   34|  46.4k|        }
   35|       |
   36|  2.07M|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 5.73k, False: 2.07M]
  ------------------
   37|  5.73k|        {
   38|  5.73k|            return true;
   39|  5.73k|        }
   40|       |
   41|  2.07M|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 708k, False: 1.36M]
  ------------------
   42|   708k|        {
   43|   708k|            return true;
   44|   708k|        }
   45|       |
   46|  1.36M|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 12.0k, False: 1.35M]
  ------------------
   47|  12.0k|        {
   48|  12.0k|            return true;
   49|  12.0k|        }
   50|       |
   51|  1.35M|        return false;
   52|  1.36M|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  1.35M|    {
   56|  1.35M|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 1.35M]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  1.35M|        const char first_char = token.at(0u);
   62|       |
   63|  1.35M|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 297k, False: 1.05M]
  ------------------
   64|   297k|        {
   65|   297k|            return phi::is_alpha(first_char);
   66|   297k|        }
   67|       |
   68|  1.05M|        phi::boolean just_under_scores = (first_char == '_');
   69|  1.05M|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 165k, False: 887k]
  |  Branch (69:13): [True: 151k, False: 900k]
  |  Branch (69:43): [True: 151k, False: 13.2k]
  ------------------
   70|   151k|        {
   71|   151k|            return false;
   72|   151k|        }
   73|       |
   74|  3.03M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 2.45M, False: 579k]
  ------------------
   75|  2.45M|        {
   76|  2.45M|            const char c{token.at(index)};
   77|       |
   78|  2.45M|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 2.12M, False: 337k]
  ------------------
   79|  2.12M|            {
   80|  2.12M|                just_under_scores = false;
   81|  2.12M|            }
   82|   337k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 15.9k, False: 321k]
  ------------------
   83|  15.9k|            {
   84|  15.9k|                continue;
   85|  15.9k|            }
   86|   321k|            else
   87|   321k|            {
   88|   321k|                return false;
   89|   321k|            }
   90|  2.45M|        }
   91|       |
   92|   579k|        return !just_under_scores;
   93|   900k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|  5.49M|    {
  100|  5.49M|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 5.49M]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|  5.49M|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 807k, False: 4.68M]
  ------------------
  106|   807k|        {
  107|   807k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 103k, False: 703k]
  ------------------
  108|   103k|            {
  109|   103k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|   103k|            }
  111|       |
  112|   703k|            return {};
  113|   807k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|  4.68M|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 9.15k, False: 4.68M]
  ------------------
  117|  9.15k|        {
  118|  9.15k|            return {};
  119|  9.15k|        }
  120|       |
  121|  4.68M|        std::int32_t number{0};
  122|  4.68M|        phi::boolean is_negative{false};
  123|  4.68M|        phi::boolean starts_with_zero{false};
  124|  4.68M|        phi::boolean parsing_binary{false};
  125|  4.68M|        phi::boolean parsing_octal{false};
  126|  4.68M|        phi::boolean parsing_hexadecimal{false};
  127|  4.68M|        phi::boolean parsed_something{false};
  128|  4.68M|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|  5.26M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 5.18M, False: 77.6k]
  ------------------
  133|  5.18M|        {
  134|  5.18M|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|  5.18M|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 4.68M, False: 505k]
  ------------------
  138|  4.68M|            {
  139|  4.68M|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 18.8k, False: 4.66M]
  ------------------
  140|  18.8k|                {
  141|  18.8k|                    continue;
  142|  18.8k|                }
  143|       |
  144|  4.66M|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 63.1k, False: 4.59M]
  ------------------
  145|  63.1k|                {
  146|  63.1k|                    is_negative = true;
  147|  63.1k|                    continue;
  148|  63.1k|                }
  149|       |
  150|  4.59M|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 71.2k, False: 4.52M]
  ------------------
  151|  71.2k|                {
  152|  71.2k|                    starts_with_zero = true;
  153|  71.2k|                    continue;
  154|  71.2k|                }
  155|       |
  156|  4.52M|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 8.40k, False: 4.51M]
  ------------------
  157|  8.40k|                {
  158|  8.40k|                    return {};
  159|  8.40k|                }
  160|  4.52M|            }
  161|       |
  162|       |            // Second character
  163|  5.02M|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 217k, False: 4.80M]
  ------------------
  164|   217k|            {
  165|   217k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 71.2k, False: 145k]
  ------------------
  166|  71.2k|                {
  167|       |                    // Binary
  168|  71.2k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 8.06k, False: 63.1k]
  |  Branch (168:37): [True: 8.63k, False: 54.5k]
  ------------------
  169|  16.7k|                    {
  170|  16.7k|                        parsing_binary = true;
  171|  16.7k|                        continue;
  172|  16.7k|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  54.5k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 19.6k, False: 34.9k]
  |  Branch (175:37): [True: 13.9k, False: 21.0k]
  ------------------
  176|  33.5k|                    {
  177|  33.5k|                        parsing_hexadecimal = true;
  178|  33.5k|                        continue;
  179|  33.5k|                    }
  180|       |
  181|       |                    // Octal
  182|  21.0k|                    parsing_octal = true;
  183|  21.0k|                }
  184|   217k|            }
  185|       |
  186|       |            // Handle seperators
  187|  4.97M|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 9.32k, False: 4.96M]
  ------------------
  188|  9.32k|            {
  189|  9.32k|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 2.52k, False: 6.79k]
  ------------------
  190|  2.52k|                {
  191|  2.52k|                    return {};
  192|  2.52k|                }
  193|       |
  194|  6.79k|                parsed_separator = true;
  195|  6.79k|                continue;
  196|  9.32k|            }
  197|       |
  198|       |            // Check for over/underflow
  199|  4.96M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 187k, False: 4.77M]
  |  Branch (199:32): [True: 10.8k, False: 176k]
  ------------------
  200|  10.8k|            {
  201|       |                // Would underflow
  202|  10.8k|                return {};
  203|  10.8k|            }
  204|  4.95M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 4.77M, False: 176k]
  |  Branch (204:17): [True: 8.20k, False: 4.94M]
  |  Branch (204:33): [True: 8.20k, False: 4.76M]
  ------------------
  205|  8.20k|            {
  206|       |                // Would overflow
  207|  8.20k|                return {};
  208|  8.20k|            }
  209|       |
  210|  4.94M|            parsed_separator = false;
  211|  4.94M|            parsed_something = true;
  212|       |
  213|  4.94M|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 8.69k, False: 4.93M]
  ------------------
  214|  8.69k|            {
  215|  8.69k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 7.39k, False: 1.29k]
  ------------------
  216|  7.39k|                {
  217|  7.39k|                    return {};
  218|  7.39k|                }
  219|       |
  220|  1.29k|                number <<= 1;
  221|  1.29k|                number |= (c - '0');
  222|  1.29k|            }
  223|  4.93M|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 22.7k, False: 4.91M]
  ------------------
  224|  22.7k|            {
  225|  22.7k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 18.3k, False: 4.35k]
  ------------------
  226|  18.3k|                {
  227|  18.3k|                    return {};
  228|  18.3k|                }
  229|       |
  230|  4.35k|                number <<= 3;
  231|  4.35k|                number |= (c - '0');
  232|  4.35k|            }
  233|  4.91M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 61.4k, False: 4.85M]
  ------------------
  234|  61.4k|            {
  235|  61.4k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 21.6k, False: 39.8k]
  ------------------
  236|  21.6k|                {
  237|  21.6k|                    return {};
  238|  21.6k|                }
  239|       |
  240|  39.8k|                number <<= 4;
  241|  39.8k|                number |= phi::hex_digit_value(c).unsafe();
  242|  39.8k|            }
  243|  4.85M|            else
  244|  4.85M|            {
  245|  4.85M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 4.51M, False: 334k]
  ------------------
  246|  4.51M|                {
  247|  4.51M|                    return {};
  248|  4.51M|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|   334k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 108k, False: 225k]
  |  Branch (251:36): [True: 6.82k, False: 101k]
  ------------------
  252|  6.82k|                {
  253|  6.82k|                    return {};
  254|  6.82k|                }
  255|       |
  256|   327k|                number *= 10;
  257|   327k|                number += (c - '0');
  258|   327k|            }
  259|  4.94M|        }
  260|       |
  261|  77.6k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 66.3k, False: 11.2k]
  ------------------
  262|  66.3k|        {
  263|       |            // Check for over/underflow
  264|  66.3k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 24.3k, False: 42.0k]
  |  Branch (264:32): [True: 13.0k, False: 11.3k]
  ------------------
  265|  13.0k|            {
  266|       |                // Would underflow
  267|  13.0k|                return {};
  268|  13.0k|            }
  269|  53.3k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 42.0k, False: 11.3k]
  |  Branch (269:17): [True: 14.8k, False: 38.4k]
  |  Branch (269:33): [True: 14.8k, False: 27.1k]
  ------------------
  270|  14.8k|            {
  271|       |                // Would overflow
  272|  14.8k|                return {};
  273|  14.8k|            }
  274|       |
  275|  38.4k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 11.3k, False: 27.1k]
  ------------------
  276|  11.3k|            {
  277|  11.3k|                return static_cast<std::int16_t>(-number);
  278|  11.3k|            }
  279|       |
  280|  27.1k|            return static_cast<std::int16_t>(number);
  281|  38.4k|        }
  282|       |
  283|  11.2k|        return {};
  284|  77.6k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   484k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   484k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 9.32M, False: 0]
  ------------------
   64|  9.32M|            {
   65|  9.32M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 484k, False: 8.83M]
  ------------------
   66|   484k|                {
   67|   484k|                    return &token;
   68|   484k|                }
   69|  9.32M|            }
   70|       |
   71|      0|            return nullptr;
   72|   484k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  1.96M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.96M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.96M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  5.57M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  5.57M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  5.57M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  2.25M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.25M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.25M|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   616k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|   136k|    {
   25|   136k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|   136k|        switch (argument_number.unsafe())
   28|   136k|        {
   29|   105k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 105k, False: 31.2k]
  ------------------
   30|   105k|                m_Arg1 = argument;
   31|   105k|                break;
   32|  20.1k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 20.1k, False: 116k]
  ------------------
   33|  20.1k|                m_Arg2 = argument;
   34|  20.1k|                break;
   35|  11.1k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 11.1k, False: 125k]
  ------------------
   36|  11.1k|                m_Arg3 = argument;
   37|  11.1k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 136k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|   136k|#endif
   42|   136k|        }
   43|   136k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  1.98M|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  53.6k|    {
  171|  53.6k|        InstructionArgument arg;
  172|  53.6k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  53.6k|        arg.register_int.register_id = id;
  174|  53.6k|        return arg;
  175|  53.6k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  15.3k|    {
  179|  15.3k|        InstructionArgument arg;
  180|  15.3k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  15.3k|        arg.register_float.register_id = id;
  182|  15.3k|        return arg;
  183|  15.3k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  6.86k|    {
  187|  6.86k|        InstructionArgument arg;
  188|  6.86k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  6.86k|        arg.immediate_value.signed_value = value;
  190|  6.86k|        return arg;
  191|  6.86k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|  8.09k|    {
  196|  8.09k|        InstructionArgument arg;
  197|  8.09k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|  8.09k|        arg.address_displacement.register_id  = id;
  199|  8.09k|        arg.address_displacement.displacement = displacement;
  200|  8.09k|        return arg;
  201|  8.09k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  204|  52.6k|    {
  205|  52.6k|        InstructionArgument arg;
  206|  52.6k|        arg.m_Type           = ArgumentType::Label;
  207|  52.6k|        arg.label.label_name = label_name;
  208|  52.6k|        return arg;
  209|  52.6k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   616k|    {
  453|   616k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   616k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|  7.21M|    {
   24|  7.21M|        switch (token.length().unsafe())
   25|  7.21M|        {
   26|       |            // 1 character OpCodes
   27|   992k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 992k, False: 6.22M]
  ------------------
   28|   992k|                const char c1 = token[0u];
   29|       |
   30|   992k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 267k, False: 724k]
  ------------------
   31|   267k|                {
   32|   267k|                    return OpCode::J;
   33|   267k|                }
   34|   724k|                break;
   35|   992k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|  1.10M|            case 2: {
  ------------------
  |  Branch (38:13): [True: 1.10M, False: 6.11M]
  ------------------
   39|  1.10M|                const char c1 = token[0u];
   40|  1.10M|                const char c2 = token[1u];
   41|       |
   42|  1.10M|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 627k, False: 476k]
  ------------------
   43|  1.10M|                {
   44|  63.5k|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 63.5k, False: 1.04M]
  ------------------
   45|  78.2k|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 14.7k, False: 1.08M]
  ------------------
   46|  78.2k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 15.3k, False: 62.8k]
  ------------------
   47|  15.3k|                        {
   48|  15.3k|                            return OpCode::JR;
   49|  15.3k|                        }
   50|  62.8k|                        break;
   51|       |
   52|  86.8k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 86.8k, False: 1.01M]
  ------------------
   53|   165k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 78.9k, False: 1.02M]
  ------------------
   54|   165k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 69.8k, False: 95.9k]
  ------------------
   55|   165k|                        {
   56|  4.71k|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 4.71k, False: 161k]
  ------------------
   57|  17.5k|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 12.7k, False: 153k]
  ------------------
   58|  17.5k|                                return OpCode::LB;
   59|  4.60k|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 4.60k, False: 161k]
  ------------------
   60|  13.9k|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 9.34k, False: 156k]
  ------------------
   61|  13.9k|                                return OpCode::LD;
   62|  10.6k|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 10.6k, False: 155k]
  ------------------
   63|  27.9k|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 17.2k, False: 148k]
  ------------------
   64|  27.9k|                                return OpCode::LF;
   65|  5.03k|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 5.03k, False: 160k]
  ------------------
   66|  17.0k|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 12.0k, False: 153k]
  ------------------
   67|  17.0k|                                return OpCode::LH;
   68|  5.31k|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 5.31k, False: 160k]
  ------------------
   69|  19.5k|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 14.2k, False: 151k]
  ------------------
   70|  19.5k|                                return OpCode::LW;
   71|   165k|                        }
   72|  69.8k|                        break;
   73|  69.8k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 6.90k, False: 1.09M]
  ------------------
   74|  31.4k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 24.5k, False: 1.07M]
  ------------------
   75|  31.4k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 5.83k, False: 25.6k]
  ------------------
   76|  5.83k|                        {
   77|  5.83k|                            return OpCode::OR;
   78|  5.83k|                        }
   79|  25.6k|                        break;
   80|  99.8k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 99.8k, False: 1.00M]
  ------------------
   81|   201k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 101k, False: 1.00M]
  ------------------
   82|   201k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 74.7k, False: 126k]
  ------------------
   83|   201k|                        {
   84|  7.89k|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 7.89k, False: 193k]
  ------------------
   85|  22.3k|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 14.4k, False: 186k]
  ------------------
   86|  22.3k|                                return OpCode::SB;
   87|  42.3k|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 42.3k, False: 158k]
  ------------------
   88|  52.7k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 10.3k, False: 190k]
  ------------------
   89|  52.7k|                                return OpCode::SD;
   90|  11.7k|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 11.7k, False: 189k]
  ------------------
   91|  14.0k|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 2.32k, False: 198k]
  ------------------
   92|  14.0k|                                return OpCode::SF;
   93|  8.05k|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 8.05k, False: 192k]
  ------------------
   94|  25.8k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 17.7k, False: 183k]
  ------------------
   95|  25.8k|                                return OpCode::SH;
   96|  6.99k|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 6.99k, False: 194k]
  ------------------
   97|  11.3k|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 4.38k, False: 196k]
  ------------------
   98|  11.3k|                                return OpCode::SW;
   99|   201k|                        }
  100|  74.7k|                        break;
  101|  1.10M|                }
  102|   860k|                break;
  103|  1.10M|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|  1.58M|            case 3: {
  ------------------
  |  Branch (106:13): [True: 1.58M, False: 5.62M]
  ------------------
  107|  1.58M|                const char c1 = token[0u];
  108|  1.58M|                const char c2 = token[1u];
  109|  1.58M|                const char c3 = token[2u];
  110|       |
  111|  1.58M|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 453k, False: 1.13M]
  ------------------
  112|  1.58M|                {
  113|  61.2k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 61.2k, False: 1.52M]
  ------------------
  114|  78.1k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 16.8k, False: 1.57M]
  ------------------
  115|  78.1k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 28.6k, False: 49.4k]
  |  Branch (115:29): [True: 17.2k, False: 60.8k]
  |  Branch (115:45): [True: 17.2k, False: 11.3k]
  ------------------
  116|  17.2k|                        {
  117|  17.2k|                            return OpCode::ADD;
  118|  17.2k|                        }
  119|  60.8k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 22.9k, False: 37.8k]
  |  Branch (119:34): [True: 16.3k, False: 44.4k]
  |  Branch (119:50): [True: 16.3k, False: 6.57k]
  ------------------
  120|  16.3k|                        {
  121|  16.3k|                            return OpCode::AND;
  122|  16.3k|                        }
  123|  44.4k|                        break;
  124|       |
  125|  44.4k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 14.5k, False: 1.57M]
  ------------------
  126|  35.4k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 20.8k, False: 1.56M]
  ------------------
  127|  35.4k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 23.3k, False: 12.1k]
  |  Branch (127:29): [True: 12.4k, False: 23.0k]
  |  Branch (127:45): [True: 12.4k, False: 10.8k]
  ------------------
  128|  12.4k|                        {
  129|  12.4k|                            return OpCode::DIV;
  130|  12.4k|                        }
  131|  23.0k|                        break;
  132|       |
  133|  24.7k|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 24.7k, False: 1.56M]
  ------------------
  134|  64.9k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 40.2k, False: 1.54M]
  ------------------
  135|  64.9k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 45.7k, False: 19.2k]
  ------------------
  136|  45.7k|                        {
  137|  45.7k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 17.2k, False: 28.4k]
  ------------------
  138|  17.2k|                            {
  139|  17.2k|                                return OpCode::EQD;
  140|  17.2k|                            }
  141|  28.4k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 24.7k, False: 3.65k]
  ------------------
  142|  24.7k|                            {
  143|  24.7k|                                return OpCode::EQF;
  144|  24.7k|                            }
  145|  45.7k|                        }
  146|  22.9k|                        break;
  147|       |
  148|  49.3k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 49.3k, False: 1.53M]
  ------------------
  149|   106k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 57.1k, False: 1.53M]
  ------------------
  150|   106k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 53.4k, False: 53.0k]
  ------------------
  151|  53.4k|                        {
  152|  53.4k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 27.4k, False: 26.0k]
  ------------------
  153|  27.4k|                            {
  154|  27.4k|                                return OpCode::GED;
  155|  27.4k|                            }
  156|  26.0k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 22.4k, False: 3.60k]
  ------------------
  157|  22.4k|                            {
  158|  22.4k|                                return OpCode::GEF;
  159|  22.4k|                            }
  160|  53.4k|                        }
  161|  53.0k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 39.3k, False: 13.6k]
  ------------------
  162|  39.3k|                        {
  163|  39.3k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 8.50k, False: 30.8k]
  ------------------
  164|  8.50k|                            {
  165|  8.50k|                                return OpCode::GTD;
  166|  8.50k|                            }
  167|  30.8k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 20.3k, False: 10.5k]
  ------------------
  168|  20.3k|                            {
  169|  20.3k|                                return OpCode::GTF;
  170|  20.3k|                            }
  171|  30.8k|                        }
  172|  27.8k|                        break;
  173|       |
  174|  69.4k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 69.4k, False: 1.51M]
  ------------------
  175|  87.1k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 17.6k, False: 1.57M]
  ------------------
  176|  87.1k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 42.8k, False: 44.2k]
  |  Branch (176:29): [True: 20.5k, False: 66.5k]
  |  Branch (176:45): [True: 20.5k, False: 22.3k]
  ------------------
  177|  20.5k|                        {
  178|  20.5k|                            return OpCode::JAL;
  179|  20.5k|                        }
  180|  66.5k|                        break;
  181|       |
  182|   190k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 190k, False: 1.39M]
  ------------------
  183|   252k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 62.1k, False: 1.52M]
  ------------------
  184|   252k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 27.7k, False: 224k]
  ------------------
  185|   252k|                        {
  186|  5.68k|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 5.68k, False: 247k]
  ------------------
  187|  26.7k|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 21.0k, False: 231k]
  ------------------
  188|  26.7k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 19.2k, False: 7.53k]
  ------------------
  189|  19.2k|                                {
  190|  19.2k|                                    return OpCode::LBU;
  191|  19.2k|                                }
  192|  7.53k|                                break;
  193|       |
  194|  40.9k|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 40.9k, False: 211k]
  ------------------
  195|  58.6k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 17.6k, False: 235k]
  ------------------
  196|  58.6k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 24.7k, False: 33.9k]
  ------------------
  197|  24.7k|                                {
  198|  24.7k|                                    return OpCode::LED;
  199|  24.7k|                                }
  200|  33.9k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 22.8k, False: 11.1k]
  ------------------
  201|  22.8k|                                {
  202|  22.8k|                                    return OpCode::LEF;
  203|  22.8k|                                }
  204|  11.1k|                                break;
  205|       |
  206|  26.8k|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 26.8k, False: 225k]
  ------------------
  207|  47.6k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 20.7k, False: 232k]
  ------------------
  208|  47.6k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 19.7k, False: 27.8k]
  ------------------
  209|  19.7k|                                {
  210|  19.7k|                                    return OpCode::LHI;
  211|  19.7k|                                }
  212|  27.8k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 14.1k, False: 13.7k]
  ------------------
  213|  14.1k|                                {
  214|  14.1k|                                    return OpCode::LHU;
  215|  14.1k|                                }
  216|  13.7k|                                break;
  217|       |
  218|  13.7k|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 9.41k, False: 243k]
  ------------------
  219|  70.7k|                            case 't':
  ------------------
  |  Branch (219:29): [True: 61.3k, False: 191k]
  ------------------
  220|  70.7k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 32.0k, False: 38.7k]
  ------------------
  221|  32.0k|                                {
  222|  32.0k|                                    return OpCode::LTD;
  223|  32.0k|                                }
  224|  38.7k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 23.4k, False: 15.2k]
  ------------------
  225|  23.4k|                                {
  226|  23.4k|                                    return OpCode::LTF;
  227|  23.4k|                                }
  228|  15.2k|                                break;
  229|       |
  230|  15.2k|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 4.74k, False: 248k]
  ------------------
  231|  21.1k|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 16.4k, False: 236k]
  ------------------
  232|  21.1k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 6.77k, False: 14.4k]
  ------------------
  233|  6.77k|                                {
  234|  6.77k|                                    return OpCode::LWU;
  235|  6.77k|                                }
  236|  14.4k|                                break;
  237|   252k|                        }
  238|  89.8k|                        break;
  239|       |
  240|  89.8k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 39.1k, False: 1.54M]
  ------------------
  241|  73.2k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 34.1k, False: 1.55M]
  ------------------
  242|  73.2k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 35.6k, False: 37.5k]
  ------------------
  243|  35.6k|                        {
  244|  35.6k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 12.1k, False: 23.5k]
  ------------------
  245|  12.1k|                            {
  246|  12.1k|                                return OpCode::NED;
  247|  12.1k|                            }
  248|  23.5k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 8.21k, False: 15.3k]
  ------------------
  249|  8.21k|                            {
  250|  8.21k|                                return OpCode::NEF;
  251|  8.21k|                            }
  252|  35.6k|                        }
  253|  37.5k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 26.8k, False: 10.7k]
  |  Branch (253:34): [True: 16.5k, False: 21.0k]
  |  Branch (253:50): [True: 16.5k, False: 10.2k]
  ------------------
  254|  16.5k|                        {
  255|  16.5k|                            return OpCode::NOP;
  256|  16.5k|                        }
  257|       |
  258|  36.3k|                        break;
  259|       |
  260|  36.3k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 12.6k, False: 1.57M]
  ------------------
  261|  28.3k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 15.6k, False: 1.57M]
  ------------------
  262|  28.3k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 11.3k, False: 17.0k]
  |  Branch (262:29): [True: 9.41k, False: 18.9k]
  |  Branch (262:45): [True: 9.41k, False: 1.90k]
  ------------------
  263|  9.41k|                        {
  264|  9.41k|                            return OpCode::ORI;
  265|  9.41k|                        }
  266|  18.9k|                        break;
  267|       |
  268|   247k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 247k, False: 1.34M]
  ------------------
  269|   366k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 119k, False: 1.46M]
  ------------------
  270|   366k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 39.2k, False: 327k]
  ------------------
  271|   366k|                        {
  272|  14.2k|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 14.2k, False: 352k]
  ------------------
  273|  35.2k|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 20.9k, False: 345k]
  ------------------
  274|  35.2k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 13.2k, False: 21.9k]
  ------------------
  275|  13.2k|                                {
  276|  13.2k|                                    return OpCode::SBU;
  277|  13.2k|                                }
  278|  21.9k|                                break;
  279|       |
  280|  21.9k|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 16.1k, False: 350k]
  ------------------
  281|  23.0k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 6.85k, False: 359k]
  ------------------
  282|  23.0k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 6.69k, False: 16.3k]
  ------------------
  283|  6.69k|                                {
  284|  6.69k|                                    return OpCode::SEQ;
  285|  6.69k|                                }
  286|  16.3k|                                break;
  287|       |
  288|  35.6k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 35.6k, False: 330k]
  ------------------
  289|  42.7k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 7.14k, False: 359k]
  ------------------
  290|  42.7k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 14.8k, False: 27.9k]
  ------------------
  291|  14.8k|                                {
  292|  14.8k|                                    return OpCode::SGE;
  293|  14.8k|                                }
  294|  27.9k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 18.2k, False: 9.70k]
  ------------------
  295|  18.2k|                                {
  296|  18.2k|                                    return OpCode::SGT;
  297|  18.2k|                                }
  298|  9.70k|                                break;
  299|       |
  300|  9.70k|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 5.60k, False: 360k]
  ------------------
  301|  18.7k|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 13.1k, False: 353k]
  ------------------
  302|  18.7k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 12.9k, False: 5.77k]
  ------------------
  303|  12.9k|                                {
  304|  12.9k|                                    return OpCode::SHU;
  305|  12.9k|                                }
  306|  5.77k|                                break;
  307|       |
  308|  46.3k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 46.3k, False: 320k]
  ------------------
  309|  85.1k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 38.7k, False: 327k]
  ------------------
  310|  85.1k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 16.2k, False: 68.9k]
  ------------------
  311|  85.1k|                                {
  312|  3.50k|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 3.50k, False: 81.6k]
  ------------------
  313|  8.60k|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 5.10k, False: 80.0k]
  ------------------
  314|  8.60k|                                        return OpCode::SLA;
  315|       |
  316|  14.7k|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 14.7k, False: 70.4k]
  ------------------
  317|  24.2k|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 9.55k, False: 75.6k]
  ------------------
  318|  24.2k|                                        return OpCode::SLE;
  319|       |
  320|  6.19k|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 6.19k, False: 78.9k]
  ------------------
  321|  25.0k|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 18.9k, False: 66.2k]
  ------------------
  322|  25.0k|                                        return OpCode::SLL;
  323|       |
  324|  5.15k|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 5.15k, False: 80.0k]
  ------------------
  325|  10.9k|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 5.77k, False: 79.3k]
  ------------------
  326|  10.9k|                                        return OpCode::SLT;
  327|  85.1k|                                }
  328|  16.2k|                                break;
  329|       |
  330|  16.2k|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 12.9k, False: 353k]
  ------------------
  331|  17.1k|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 4.24k, False: 362k]
  ------------------
  332|  17.1k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 12.5k, False: 4.61k]
  ------------------
  333|  12.5k|                                {
  334|  12.5k|                                    return OpCode::SNE;
  335|  12.5k|                                }
  336|  4.61k|                                break;
  337|       |
  338|  10.7k|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 10.7k, False: 355k]
  ------------------
  339|  68.8k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 58.0k, False: 308k]
  ------------------
  340|  68.8k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 21.2k, False: 47.5k]
  ------------------
  341|  21.2k|                                {
  342|  21.2k|                                    return OpCode::SRA;
  343|  21.2k|                                }
  344|  47.5k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 38.4k, False: 9.18k]
  ------------------
  345|  38.4k|                                {
  346|  38.4k|                                    return OpCode::SRL;
  347|  38.4k|                                }
  348|  9.18k|                                break;
  349|       |
  350|  11.1k|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 11.1k, False: 355k]
  ------------------
  351|  21.6k|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 10.4k, False: 356k]
  ------------------
  352|  21.6k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 12.5k, False: 9.05k]
  ------------------
  353|  12.5k|                                {
  354|  12.5k|                                    return OpCode::SUB;
  355|  12.5k|                                }
  356|  9.05k|                                break;
  357|       |
  358|  11.6k|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 11.6k, False: 354k]
  ------------------
  359|  14.7k|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 3.05k, False: 363k]
  ------------------
  360|  14.7k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 10.5k, False: 4.16k]
  ------------------
  361|  10.5k|                                {
  362|  10.5k|                                    return OpCode::SWU;
  363|  10.5k|                                }
  364|  4.16k|                                break;
  365|   366k|                        }
  366|       |
  367|   151k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 14.8k, False: 1.57M]
  ------------------
  368|   178k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 27.7k, False: 1.56M]
  ------------------
  369|   178k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 46.1k, False: 132k]
  |  Branch (369:29): [True: 24.1k, False: 154k]
  |  Branch (369:45): [True: 24.1k, False: 22.0k]
  ------------------
  370|  24.1k|                        {
  371|  24.1k|                            return OpCode::XOR;
  372|  24.1k|                        }
  373|   154k|                        break;
  374|  1.58M|                }
  375|   938k|                break;
  376|  1.58M|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  1.67M|            case 4: {
  ------------------
  |  Branch (379:13): [True: 1.67M, False: 5.54M]
  ------------------
  380|  1.67M|                const char c1 = token[0u];
  381|  1.67M|                const char c2 = token[1u];
  382|  1.67M|                const char c3 = token[2u];
  383|  1.67M|                const char c4 = token[3u];
  384|       |
  385|  1.67M|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 421k, False: 1.25M]
  ------------------
  386|  1.67M|                {
  387|   128k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 128k, False: 1.54M]
  ------------------
  388|   160k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 32.7k, False: 1.64M]
  ------------------
  389|   160k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 7.97k, False: 152k]
  ------------------
  390|   160k|                        {
  391|  54.8k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 54.8k, False: 105k]
  ------------------
  392|   110k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 55.3k, False: 105k]
  ------------------
  393|   110k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 97.4k, False: 12.7k]
  ------------------
  394|  97.4k|                                {
  395|  97.4k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 26.1k, False: 71.3k]
  ------------------
  396|  97.4k|                                    {
  397|  8.52k|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 8.52k, False: 88.9k]
  ------------------
  398|  18.8k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 10.3k, False: 87.0k]
  ------------------
  399|  18.8k|                                            return OpCode::ADDD;
  400|       |
  401|  4.44k|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 4.44k, False: 93.0k]
  ------------------
  402|  14.0k|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 9.61k, False: 87.8k]
  ------------------
  403|  14.0k|                                            return OpCode::ADDF;
  404|       |
  405|  4.90k|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 4.90k, False: 92.5k]
  ------------------
  406|  14.0k|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 9.13k, False: 88.3k]
  ------------------
  407|  14.0k|                                            return OpCode::ADDI;
  408|       |
  409|  8.17k|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 8.17k, False: 89.2k]
  ------------------
  410|  24.3k|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 16.1k, False: 81.3k]
  ------------------
  411|  24.3k|                                            return OpCode::ADDU;
  412|  97.4k|                                    }
  413|  97.4k|                                }
  414|  38.9k|                                break;
  415|       |
  416|  38.9k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 37.5k, False: 123k]
  ------------------
  417|  42.5k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 5.02k, False: 155k]
  ------------------
  418|  42.5k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 37.7k, False: 4.80k]
  |  Branch (418:37): [True: 20.7k, False: 21.8k]
  |  Branch (418:53): [True: 20.7k, False: 17.0k]
  ------------------
  419|  20.7k|                                {
  420|  20.7k|                                    return OpCode::ANDI;
  421|  20.7k|                                }
  422|       |
  423|  21.8k|                                break;
  424|   160k|                        }
  425|  68.7k|                        break;
  426|       |
  427|   115k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 115k, False: 1.55M]
  ------------------
  428|   126k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 10.9k, False: 1.66M]
  ------------------
  429|   126k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 14.3k, False: 112k]
  ------------------
  430|   126k|                        {
  431|  15.8k|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 15.8k, False: 110k]
  ------------------
  432|  35.1k|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 19.3k, False: 107k]
  ------------------
  433|  35.1k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 23.7k, False: 11.4k]
  |  Branch (433:37): [True: 17.8k, False: 17.3k]
  |  Branch (433:53): [True: 17.8k, False: 5.92k]
  ------------------
  434|  17.8k|                                {
  435|  17.8k|                                    return OpCode::BEQZ;
  436|  17.8k|                                }
  437|  17.3k|                                break;
  438|       |
  439|  38.8k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 38.8k, False: 87.6k]
  ------------------
  440|  42.9k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 4.07k, False: 122k]
  ------------------
  441|  42.9k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 38.4k, False: 4.51k]
  ------------------
  442|  38.4k|                                {
  443|  38.4k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 18.6k, False: 19.7k]
  ------------------
  444|  18.6k|                                    {
  445|  18.6k|                                        return OpCode::BFPF;
  446|  18.6k|                                    }
  447|  19.7k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 15.7k, False: 3.99k]
  ------------------
  448|  15.7k|                                    {
  449|  15.7k|                                        return OpCode::BFPT;
  450|  15.7k|                                    }
  451|  38.4k|                                }
  452|  8.50k|                                break;
  453|       |
  454|  11.1k|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 11.1k, False: 115k]
  ------------------
  455|  34.0k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 22.8k, False: 103k]
  ------------------
  456|  34.0k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 24.1k, False: 9.91k]
  |  Branch (456:37): [True: 17.1k, False: 16.9k]
  |  Branch (456:53): [True: 17.1k, False: 6.99k]
  ------------------
  457|  17.1k|                                {
  458|  17.1k|                                    return OpCode::BNEZ;
  459|  17.1k|                                }
  460|   126k|                        }
  461|  57.0k|                        break;
  462|       |
  463|  57.0k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 22.6k, False: 1.65M]
  ------------------
  464|  90.6k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 68.0k, False: 1.60M]
  ------------------
  465|  90.6k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 80.0k, False: 10.6k]
  |  Branch (465:29): [True: 72.0k, False: 18.6k]
  |  Branch (465:45): [True: 72.0k, False: 8.06k]
  ------------------
  466|  72.0k|                        {
  467|  72.0k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 12.4k, False: 59.5k]
  ------------------
  468|  72.0k|                            {
  469|  8.68k|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 8.68k, False: 63.3k]
  ------------------
  470|  14.6k|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 6.00k, False: 65.9k]
  ------------------
  471|  14.6k|                                    return OpCode::DIVD;
  472|       |
  473|  8.96k|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 8.96k, False: 63.0k]
  ------------------
  474|  14.1k|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 5.23k, False: 66.7k]
  ------------------
  475|  14.1k|                                    return OpCode::DIVF;
  476|       |
  477|  7.96k|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 7.96k, False: 64.0k]
  ------------------
  478|  17.2k|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 9.33k, False: 62.6k]
  ------------------
  479|  17.2k|                                    return OpCode::DIVI;
  480|       |
  481|  5.63k|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 5.63k, False: 66.3k]
  ------------------
  482|  13.3k|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 7.69k, False: 64.3k]
  ------------------
  483|  13.3k|                                    return OpCode::DIVU;
  484|  72.0k|                            }
  485|  72.0k|                        }
  486|  31.1k|                        break;
  487|       |
  488|  31.1k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 14.9k, False: 1.65M]
  ------------------
  489|  40.2k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 25.3k, False: 1.64M]
  ------------------
  490|  40.2k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 30.6k, False: 9.61k]
  |  Branch (490:29): [True: 19.4k, False: 20.8k]
  |  Branch (490:45): [True: 22.3k, False: 8.29k]
  |  Branch (490:61): [True: 19.4k, False: 2.96k]
  ------------------
  491|  19.4k|                        {
  492|  19.4k|                            return OpCode::HALT;
  493|  19.4k|                        }
  494|  20.8k|                        break;
  495|       |
  496|  49.7k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 49.7k, False: 1.62M]
  ------------------
  497|  72.1k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 22.4k, False: 1.65M]
  ------------------
  498|  72.1k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 49.1k, False: 22.9k]
  |  Branch (498:29): [True: 11.5k, False: 60.5k]
  |  Branch (498:45): [True: 35.1k, False: 13.9k]
  |  Branch (498:61): [True: 11.5k, False: 23.5k]
  ------------------
  499|  11.5k|                        {
  500|  11.5k|                            return OpCode::JALR;
  501|  11.5k|                        }
  502|  60.5k|                        break;
  503|       |
  504|  60.5k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 36.9k, False: 1.63M]
  ------------------
  505|  96.6k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 59.6k, False: 1.61M]
  ------------------
  506|  96.6k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 41.8k, False: 54.7k]
  |  Branch (506:29): [True: 30.5k, False: 66.0k]
  |  Branch (506:45): [True: 30.5k, False: 11.2k]
  ------------------
  507|  30.5k|                        {
  508|  30.5k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 9.06k, False: 21.4k]
  ------------------
  509|  9.06k|                            {
  510|  9.06k|                                return OpCode::MOVD;
  511|  9.06k|                            }
  512|  21.4k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 18.3k, False: 3.14k]
  ------------------
  513|  18.3k|                            {
  514|  18.3k|                                return OpCode::MOVF;
  515|  18.3k|                            }
  516|  30.5k|                        }
  517|  66.0k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 49.9k, False: 16.1k]
  |  Branch (517:34): [True: 22.9k, False: 43.1k]
  |  Branch (517:50): [True: 27.9k, False: 22.0k]
  |  Branch (517:66): [True: 22.9k, False: 5.03k]
  ------------------
  518|  22.9k|                        {
  519|  22.9k|                            return OpCode::MULT;
  520|  22.9k|                        }
  521|  46.3k|                        break;
  522|       |
  523|   424k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 424k, False: 1.25M]
  ------------------
  524|   566k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 141k, False: 1.53M]
  ------------------
  525|   566k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 27.7k, False: 538k]
  ------------------
  526|   566k|                        {
  527|  24.9k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 24.9k, False: 541k]
  ------------------
  528|  51.3k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 26.3k, False: 539k]
  ------------------
  529|  51.3k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 33.7k, False: 17.6k]
  ------------------
  530|  33.7k|                                {
  531|  33.7k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 15.1k, False: 18.5k]
  ------------------
  532|  15.1k|                                    {
  533|  15.1k|                                        return OpCode::SEQI;
  534|  15.1k|                                    }
  535|  18.5k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 14.4k, False: 4.08k]
  ------------------
  536|  14.4k|                                    {
  537|  14.4k|                                        return OpCode::SEQU;
  538|  14.4k|                                    }
  539|  33.7k|                                }
  540|  21.7k|                                break;
  541|       |
  542|  71.9k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 71.9k, False: 494k]
  ------------------
  543|  83.0k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 11.1k, False: 555k]
  ------------------
  544|  83.0k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 41.1k, False: 41.9k]
  ------------------
  545|  41.1k|                                {
  546|  41.1k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 14.2k, False: 26.8k]
  ------------------
  547|  14.2k|                                    {
  548|  14.2k|                                        return OpCode::SGEI;
  549|  14.2k|                                    }
  550|  26.8k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 14.4k, False: 12.4k]
  ------------------
  551|  14.4k|                                    {
  552|  14.4k|                                        return OpCode::SGEU;
  553|  14.4k|                                    }
  554|  41.1k|                                }
  555|  41.9k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 34.9k, False: 6.94k]
  ------------------
  556|  34.9k|                                {
  557|  34.9k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 15.0k, False: 19.9k]
  ------------------
  558|  15.0k|                                    {
  559|  15.0k|                                        return OpCode::SGTI;
  560|  15.0k|                                    }
  561|  19.9k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 11.7k, False: 8.21k]
  ------------------
  562|  11.7k|                                    {
  563|  11.7k|                                        return OpCode::SGTU;
  564|  11.7k|                                    }
  565|  34.9k|                                }
  566|  27.5k|                                break;
  567|       |
  568|  97.2k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 97.2k, False: 469k]
  ------------------
  569|   163k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 66.4k, False: 499k]
  ------------------
  570|   163k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 11.8k, False: 151k]
  ------------------
  571|   163k|                                {
  572|  23.8k|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 23.8k, False: 139k]
  ------------------
  573|  30.6k|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 6.74k, False: 156k]
  ------------------
  574|  30.6k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 23.7k, False: 6.87k]
  ------------------
  575|  23.7k|                                        {
  576|  23.7k|                                            return OpCode::SLAI;
  577|  23.7k|                                        }
  578|  6.87k|                                        break;
  579|       |
  580|  19.4k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 19.4k, False: 144k]
  ------------------
  581|  49.8k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 30.3k, False: 133k]
  ------------------
  582|  49.8k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 14.1k, False: 35.6k]
  ------------------
  583|  14.1k|                                        {
  584|  14.1k|                                            return OpCode::SLEI;
  585|  14.1k|                                        }
  586|  35.6k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 14.4k, False: 21.2k]
  ------------------
  587|  14.4k|                                        {
  588|  14.4k|                                            return OpCode::SLEU;
  589|  14.4k|                                        }
  590|  21.2k|                                        break;
  591|       |
  592|  21.2k|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 9.11k, False: 154k]
  ------------------
  593|  12.7k|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 3.59k, False: 160k]
  ------------------
  594|  12.7k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 7.94k, False: 4.76k]
  ------------------
  595|  7.94k|                                        {
  596|  7.94k|                                            return OpCode::SLLI;
  597|  7.94k|                                        }
  598|  4.76k|                                        break;
  599|       |
  600|  14.4k|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 14.4k, False: 149k]
  ------------------
  601|  58.6k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 44.2k, False: 119k]
  ------------------
  602|  58.6k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 24.9k, False: 33.7k]
  ------------------
  603|  24.9k|                                        {
  604|  24.9k|                                            return OpCode::SLTI;
  605|  24.9k|                                        }
  606|  33.7k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 14.9k, False: 18.8k]
  ------------------
  607|  14.9k|                                        {
  608|  14.9k|                                            return OpCode::SLTU;
  609|  14.9k|                                        }
  610|  18.8k|                                        break;
  611|   163k|                                }
  612|       |
  613|   106k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 42.4k, False: 523k]
  ------------------
  614|   119k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 13.5k, False: 552k]
  ------------------
  615|   119k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 72.6k, False: 46.9k]
  ------------------
  616|  72.6k|                                {
  617|  72.6k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 16.2k, False: 56.3k]
  ------------------
  618|  16.2k|                                    {
  619|  16.2k|                                        return OpCode::SNEI;
  620|  16.2k|                                    }
  621|  56.3k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 17.0k, False: 39.3k]
  ------------------
  622|  17.0k|                                    {
  623|  17.0k|                                        return OpCode::SNEU;
  624|  17.0k|                                    }
  625|  72.6k|                                }
  626|  86.3k|                                break;
  627|       |
  628|  86.3k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 26.1k, False: 540k]
  ------------------
  629|  76.6k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 50.4k, False: 515k]
  ------------------
  630|  76.6k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 28.1k, False: 48.4k]
  |  Branch (630:37): [True: 16.6k, False: 59.9k]
  |  Branch (630:53): [True: 16.6k, False: 11.5k]
  ------------------
  631|  16.6k|                                {
  632|  16.6k|                                    return OpCode::SRAI;
  633|  16.6k|                                }
  634|  59.9k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 41.3k, False: 18.5k]
  |  Branch (634:42): [True: 21.2k, False: 38.7k]
  |  Branch (634:58): [True: 21.2k, False: 20.1k]
  ------------------
  635|  21.2k|                                {
  636|  21.2k|                                    return OpCode::SRLI;
  637|  21.2k|                                }
  638|  38.7k|                                break;
  639|       |
  640|  50.7k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 50.7k, False: 515k]
  ------------------
  641|   107k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 56.9k, False: 509k]
  ------------------
  642|   107k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 99.5k, False: 8.17k]
  ------------------
  643|  99.5k|                                {
  644|  99.5k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 11.2k, False: 88.2k]
  ------------------
  645|  99.5k|                                    {
  646|  10.6k|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 10.6k, False: 88.8k]
  ------------------
  647|  17.9k|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 7.29k, False: 92.2k]
  ------------------
  648|  17.9k|                                            return OpCode::SUBD;
  649|       |
  650|  8.14k|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 8.14k, False: 91.3k]
  ------------------
  651|  21.0k|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 12.9k, False: 86.5k]
  ------------------
  652|  21.0k|                                            return OpCode::SUBF;
  653|       |
  654|  8.33k|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 8.33k, False: 91.1k]
  ------------------
  655|  23.3k|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 14.9k, False: 84.5k]
  ------------------
  656|  23.3k|                                            return OpCode::SUBI;
  657|       |
  658|  14.1k|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 14.1k, False: 85.3k]
  ------------------
  659|  25.8k|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 11.7k, False: 87.8k]
  ------------------
  660|  25.8k|                                            return OpCode::SUBU;
  661|  99.5k|                                    }
  662|  99.5k|                                }
  663|  19.4k|                                break;
  664|   566k|                        }
  665|   221k|                        break;
  666|       |
  667|   221k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 49.5k, False: 1.62M]
  ------------------
  668|  55.3k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 5.78k, False: 1.66M]
  ------------------
  669|  55.3k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 47.7k, False: 7.57k]
  |  Branch (669:29): [True: 12.6k, False: 42.6k]
  |  Branch (669:45): [True: 36.1k, False: 11.5k]
  |  Branch (669:61): [True: 12.6k, False: 23.5k]
  ------------------
  670|  12.6k|                        {
  671|  12.6k|                            return OpCode::TRAP;
  672|  12.6k|                        }
  673|  42.6k|                        break;
  674|  42.6k|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 31.5k, False: 1.64M]
  ------------------
  675|  44.2k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 12.6k, False: 1.66M]
  ------------------
  676|  44.2k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 32.0k, False: 12.2k]
  |  Branch (676:29): [True: 14.7k, False: 29.5k]
  |  Branch (676:45): [True: 20.9k, False: 11.1k]
  |  Branch (676:61): [True: 14.7k, False: 6.19k]
  ------------------
  677|  14.7k|                        {
  678|  14.7k|                            return OpCode::XORI;
  679|  14.7k|                        }
  680|  29.5k|                        break;
  681|  1.67M|                }
  682|  1.00M|                break;
  683|  1.67M|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|  1.00M|            case 5: {
  ------------------
  |  Branch (686:13): [True: 940k, False: 6.27M]
  ------------------
  687|   940k|                const char c1 = token[0u];
  688|   940k|                const char c2 = token[1u];
  689|   940k|                const char c3 = token[2u];
  690|   940k|                const char c4 = token[3u];
  691|   940k|                const char c5 = token[4u];
  692|       |
  693|   940k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 295k, False: 645k]
  ------------------
  694|   940k|                {
  695|  58.5k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 58.5k, False: 881k]
  ------------------
  696|  79.9k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 21.3k, False: 919k]
  ------------------
  697|  79.9k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 67.5k, False: 12.3k]
  |  Branch (697:29): [True: 16.6k, False: 63.2k]
  |  Branch (697:45): [True: 55.8k, False: 11.7k]
  |  Branch (697:61): [True: 44.3k, False: 11.5k]
  |  Branch (697:77): [True: 16.6k, False: 27.6k]
  ------------------
  698|  16.6k|                        {
  699|  16.6k|                            return OpCode::ADDUI;
  700|  16.6k|                        }
  701|  63.2k|                        break;
  702|       |
  703|  63.2k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 22.0k, False: 918k]
  ------------------
  704|  76.4k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 54.3k, False: 886k]
  ------------------
  705|  76.4k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 63.9k, False: 12.4k]
  |  Branch (705:29): [True: 17.6k, False: 58.7k]
  |  Branch (705:45): [True: 53.8k, False: 10.0k]
  |  Branch (705:61): [True: 30.8k, False: 23.0k]
  |  Branch (705:77): [True: 17.6k, False: 13.2k]
  ------------------
  706|  17.6k|                        {
  707|  17.6k|                            return OpCode::DIVUI;
  708|  17.6k|                        }
  709|  58.7k|                        break;
  710|       |
  711|  67.3k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 67.3k, False: 873k]
  ------------------
  712|   125k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 58.5k, False: 881k]
  ------------------
  713|   125k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 101k, False: 24.0k]
  |  Branch (713:29): [True: 82.5k, False: 43.3k]
  |  Branch (713:45): [True: 90.4k, False: 11.3k]
  |  Branch (713:61): [True: 82.5k, False: 7.92k]
  ------------------
  714|  82.5k|                        {
  715|  82.5k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 10.3k, False: 72.1k]
  ------------------
  716|  82.5k|                            {
  717|  11.9k|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 11.9k, False: 70.5k]
  ------------------
  718|  18.3k|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 6.35k, False: 76.1k]
  ------------------
  719|  18.3k|                                    return OpCode::MULTD;
  720|       |
  721|  6.63k|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 6.63k, False: 75.9k]
  ------------------
  722|  11.7k|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 5.15k, False: 77.3k]
  ------------------
  723|  11.7k|                                    return OpCode::MULTF;
  724|       |
  725|  7.33k|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 7.33k, False: 75.2k]
  ------------------
  726|  15.2k|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 7.90k, False: 74.6k]
  ------------------
  727|  15.2k|                                    return OpCode::MULTI;
  728|       |
  729|  13.4k|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 13.4k, False: 69.0k]
  ------------------
  730|  26.8k|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 13.3k, False: 69.2k]
  ------------------
  731|  26.8k|                                    return OpCode::MULTU;
  732|  82.5k|                            }
  733|  82.5k|                        }
  734|  53.7k|                        break;
  735|       |
  736|   221k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 221k, False: 718k]
  ------------------
  737|   362k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 141k, False: 799k]
  ------------------
  738|   362k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 25.2k, False: 337k]
  ------------------
  739|   362k|                        {
  740|  20.7k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 20.7k, False: 342k]
  ------------------
  741|  45.7k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 24.9k, False: 337k]
  ------------------
  742|  45.7k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 34.4k, False: 11.2k]
  |  Branch (742:37): [True: 18.7k, False: 26.9k]
  |  Branch (742:53): [True: 30.9k, False: 3.51k]
  |  Branch (742:69): [True: 18.7k, False: 12.2k]
  ------------------
  743|  18.7k|                                {
  744|  18.7k|                                    return OpCode::SEQUI;
  745|  18.7k|                                }
  746|  26.9k|                                break;
  747|       |
  748|  60.4k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 60.4k, False: 302k]
  ------------------
  749|  64.5k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 4.16k, False: 358k]
  ------------------
  750|  64.5k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 30.0k, False: 34.5k]
  |  Branch (750:37): [True: 13.4k, False: 51.0k]
  |  Branch (750:53): [True: 24.3k, False: 5.68k]
  |  Branch (750:69): [True: 13.4k, False: 10.9k]
  ------------------
  751|  13.4k|                                {
  752|  13.4k|                                    return OpCode::SGEUI;
  753|  13.4k|                                }
  754|  51.0k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 31.3k, False: 19.7k]
  |  Branch (754:42): [True: 16.8k, False: 34.2k]
  |  Branch (754:58): [True: 23.1k, False: 8.15k]
  |  Branch (754:74): [True: 16.8k, False: 6.31k]
  ------------------
  755|  16.8k|                                {
  756|  16.8k|                                    return OpCode::SGTUI;
  757|  16.8k|                                }
  758|  34.2k|                                break;
  759|       |
  760|  54.2k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 54.2k, False: 308k]
  ------------------
  761|  91.1k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 36.8k, False: 326k]
  ------------------
  762|  91.1k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 32.0k, False: 59.1k]
  |  Branch (762:37): [True: 14.8k, False: 76.2k]
  |  Branch (762:53): [True: 25.4k, False: 6.59k]
  |  Branch (762:69): [True: 14.8k, False: 10.5k]
  ------------------
  763|  14.8k|                                {
  764|  14.8k|                                    return OpCode::SLEUI;
  765|  14.8k|                                }
  766|  76.2k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 45.7k, False: 30.5k]
  |  Branch (766:42): [True: 27.0k, False: 49.2k]
  |  Branch (766:58): [True: 35.7k, False: 9.99k]
  |  Branch (766:74): [True: 27.0k, False: 8.67k]
  ------------------
  767|  27.0k|                                {
  768|  27.0k|                                    return OpCode::SLTUI;
  769|  27.0k|                                }
  770|  49.2k|                                break;
  771|       |
  772|  49.2k|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 19.5k, False: 343k]
  ------------------
  773|  41.8k|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 22.2k, False: 340k]
  ------------------
  774|  41.8k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 36.8k, False: 5.01k]
  |  Branch (774:37): [True: 16.1k, False: 25.7k]
  |  Branch (774:53): [True: 24.1k, False: 12.7k]
  |  Branch (774:69): [True: 16.1k, False: 8.02k]
  ------------------
  775|  16.1k|                                {
  776|  16.1k|                                    return OpCode::SNEUI;
  777|  16.1k|                                }
  778|  25.7k|                                break;
  779|       |
  780|  26.3k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 26.3k, False: 336k]
  ------------------
  781|  94.3k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 68.0k, False: 294k]
  ------------------
  782|  94.3k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 86.8k, False: 7.47k]
  |  Branch (782:37): [True: 14.2k, False: 80.0k]
  |  Branch (782:53): [True: 32.1k, False: 54.7k]
  |  Branch (782:69): [True: 14.2k, False: 17.8k]
  ------------------
  783|  14.2k|                                {
  784|  14.2k|                                    return OpCode::SUBUI;
  785|  14.2k|                                }
  786|  80.0k|                                break;
  787|   362k|                        }
  788|       |
  789|   241k|                        break;
  790|   940k|                }
  791|       |
  792|   712k|                break;
  793|   940k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|   712k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 478k, False: 6.73M]
  ------------------
  797|   478k|                const char c1 = token[0u];
  798|   478k|                const char c2 = token[1u];
  799|   478k|                const char c3 = token[2u];
  800|   478k|                const char c4 = token[3u];
  801|   478k|                const char c5 = token[4u];
  802|   478k|                const char c6 = token[5u];
  803|       |
  804|   478k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 192k, False: 285k]
  |  Branch (804:21): [True: 171k, False: 306k]
  |  Branch (804:37): [True: 180k, False: 12.0k]
  |  Branch (804:53): [True: 171k, False: 9.11k]
  ------------------
  805|   171k|                {
  806|   171k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 6.71k, False: 164k]
  ------------------
  807|   171k|                    {
  808|  48.0k|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 48.0k, False: 123k]
  ------------------
  809|  65.4k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 17.3k, False: 154k]
  ------------------
  810|  65.4k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 47.6k, False: 17.7k]
  ------------------
  811|  47.6k|                            {
  812|  47.6k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 16.9k, False: 30.7k]
  ------------------
  813|  16.9k|                                {
  814|  16.9k|                                    return OpCode::CVTD2F;
  815|  16.9k|                                }
  816|  30.7k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 14.8k, False: 15.8k]
  ------------------
  817|  14.8k|                                {
  818|  14.8k|                                    return OpCode::CVTD2I;
  819|  14.8k|                                }
  820|  47.6k|                            }
  821|  33.5k|                            break;
  822|       |
  823|  40.4k|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 40.4k, False: 131k]
  ------------------
  824|  55.0k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 14.5k, False: 157k]
  ------------------
  825|  55.0k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 36.9k, False: 18.1k]
  ------------------
  826|  36.9k|                            {
  827|  36.9k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 11.8k, False: 25.1k]
  ------------------
  828|  11.8k|                                {
  829|  11.8k|                                    return OpCode::CVTF2D;
  830|  11.8k|                                }
  831|  25.1k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 13.0k, False: 12.0k]
  ------------------
  832|  13.0k|                                {
  833|  13.0k|                                    return OpCode::CVTF2I;
  834|  13.0k|                                }
  835|  36.9k|                            }
  836|  30.1k|                            break;
  837|       |
  838|  30.1k|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 11.5k, False: 160k]
  ------------------
  839|  44.3k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 32.8k, False: 138k]
  ------------------
  840|  44.3k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 26.6k, False: 17.7k]
  ------------------
  841|  26.6k|                            {
  842|  26.6k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 9.21k, False: 17.4k]
  ------------------
  843|  9.21k|                                {
  844|  9.21k|                                    return OpCode::CVTI2D;
  845|  9.21k|                                }
  846|  17.4k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 8.37k, False: 9.04k]
  ------------------
  847|  8.37k|                                {
  848|  8.37k|                                    return OpCode::CVTI2F;
  849|  8.37k|                                }
  850|  26.6k|                            }
  851|   171k|                    }
  852|   171k|                }
  853|   306k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 96.8k, False: 209k]
  |  Branch (853:26): [True: 13.7k, False: 293k]
  |  Branch (853:42): [True: 71.5k, False: 25.3k]
  |  Branch (853:58): [True: 62.9k, False: 8.52k]
  |  Branch (853:74): [True: 55.0k, False: 7.96k]
  ------------------
  854|   306k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 40.6k, False: 14.3k]
  |  Branch (854:42): [True: 13.7k, False: 26.8k]
  ------------------
  855|  13.7k|                {
  856|  13.7k|                    return OpCode::MULTUI;
  857|  13.7k|                }
  858|   390k|                break;
  859|   478k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|   390k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 244k, False: 6.97M]
  ------------------
  863|   244k|                const char c1 = token[0u];
  864|   244k|                const char c2 = token[1u];
  865|   244k|                const char c3 = token[2u];
  866|   244k|                const char c4 = token[3u];
  867|   244k|                const char c5 = token[4u];
  868|   244k|                const char c6 = token[5u];
  869|   244k|                const char c7 = token[6u];
  870|       |
  871|   244k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 103k, False: 140k]
  |  Branch (871:21): [True: 85.1k, False: 159k]
  |  Branch (871:37): [True: 89.2k, False: 14.4k]
  |  Branch (871:53): [True: 85.1k, False: 4.06k]
  ------------------
  872|  85.1k|                {
  873|  85.1k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 38.2k, False: 46.8k]
  |  Branch (873:25): [True: 14.6k, False: 70.5k]
  |  Branch (873:41): [True: 26.3k, False: 11.9k]
  |  Branch (873:54): [True: 21.4k, False: 4.85k]
  |  Branch (873:70): [True: 14.6k, False: 6.81k]
  ------------------
  874|  14.6k|                    {
  875|  14.6k|                        return OpCode::MOVI2FP;
  876|  14.6k|                    }
  877|  70.5k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 45.7k, False: 24.7k]
  |  Branch (877:25): [True: 15.3k, False: 55.1k]
  |  Branch (877:41): [True: 38.7k, False: 7.06k]
  |  Branch (877:57): [True: 22.3k, False: 16.3k]
  |  Branch (877:70): [True: 15.3k, False: 7.01k]
  ------------------
  878|  15.3k|                    {
  879|  15.3k|                        return OpCode::MOVFP2I;
  880|  15.3k|                    }
  881|  70.5k|                }
  882|   214k|                break;
  883|   244k|            }
  884|       |
  885|   214k|            default: {
  ------------------
  |  Branch (885:13): [True: 194k, False: 7.02M]
  ------------------
  886|   194k|                break;
  887|   244k|            }
  888|  7.21M|        }
  889|       |
  890|       |        // None found
  891|  5.03M|        return OpCode::NONE;
  892|  7.21M|    }
_ZN3dlx3iceEcc:
   17|  9.69M|    {
   18|  9.69M|        constexpr const char diff = 'a' - 'A';
   19|  9.69M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 2.86M, False: 6.83M]
  |  Branch (19:28): [True: 2.64M, False: 4.19M]
  ------------------
   20|  9.69M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  7.31M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|   114k|    {
  195|   114k|        ParseError err;
  196|       |
  197|   114k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|   114k|        err.m_LineNumber                           = line_number;
  199|   114k|        err.m_Column                               = column;
  200|   114k|        err.unexpected_argument_type.expected_type = expected_type;
  201|   114k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|   114k|        return err;
  204|   114k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|   114k|    {
  209|   114k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|   114k|                                                         token.GetColumn().unsafe(), expected_type,
  211|   114k|                                                         actual_type);
  212|   114k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|  6.94k|    {
  218|  6.94k|        ParseError err;
  219|       |
  220|  6.94k|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|  6.94k|        err.m_LineNumber        = line_number;
  222|  6.94k|        err.m_Column            = column;
  223|  6.94k|        err.invalid_number.text = text;
  224|       |
  225|  6.94k|        return err;
  226|  6.94k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|  6.94k|    {
  230|  6.94k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|  6.94k|                                                token.GetColumn().unsafe(), token.GetText());
  232|  6.94k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|     42|    {
  237|     42|        ParseError err;
  238|       |
  239|     42|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|     42|        err.m_LineNumber = line_number;
  241|     42|        err.m_Column     = column;
  242|       |
  243|     42|        return err;
  244|     42|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|     42|    {
  249|     42|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|     42|                                                                     token.GetColumn().unsafe());
  251|     42|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  3.08M|    {
  257|  3.08M|        ParseError err;
  258|       |
  259|  3.08M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  3.08M|        err.m_LineNumber                   = line_number;
  261|  3.08M|        err.m_Column                       = column;
  262|  3.08M|        err.unexpected_token.expected_type = expected_type;
  263|  3.08M|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  3.08M|        return err;
  266|  3.08M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  3.08M|    {
  271|  3.08M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  3.08M|                                                  token.GetColumn().unsafe(), expected_type,
  273|  3.08M|                                                  token.GetType());
  274|  3.08M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|   783k|    {
  279|   783k|        ParseError err;
  280|       |
  281|   783k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|   783k|        err.m_LineNumber                   = line_number;
  283|   783k|        err.m_Column                       = column;
  284|   783k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|   783k|        return err;
  287|   783k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|  9.92k|    {
  291|  9.92k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|  9.92k|                                                    token.GetColumn().unsafe(), token.GetText());
  293|  9.92k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  1.46M|    {
  298|  1.46M|        ParseError err;
  299|       |
  300|  1.46M|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  1.46M|        err.m_LineNumber                       = line_number;
  302|  1.46M|        err.m_Column                           = column;
  303|  1.46M|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  1.46M|        return err;
  306|  1.46M|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  1.46M|    {
  311|  1.46M|        return ConstructInvalidLabelIdentifierParseError(
  312|  1.46M|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  1.46M|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|   484k|    {
  319|   484k|        ParseError err;
  320|       |
  321|   484k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|   484k|        err.m_LineNumber                     = line_number;
  323|   484k|        err.m_Column                         = column;
  324|   484k|        err.label_already_defined.label_name = label_name;
  325|   484k|        err.label_already_defined.at_line    = at_line;
  326|   484k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|   484k|        return err;
  329|   484k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|   484k|    {
  334|   484k|        return ConstructLabelAlreadyDefinedParseError(
  335|   484k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|   484k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|   484k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|   824k|    {
  342|   824k|        ParseError err;
  343|       |
  344|   824k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|   824k|        err.m_LineNumber = line_number;
  346|   824k|        err.m_Column     = column;
  347|       |
  348|   824k|        return err;
  349|   824k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|   824k|    {
  354|   824k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|   824k|                                                        token.GetColumn().unsafe());
  356|   824k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|   196k|    {
  362|   196k|        ParseError err;
  363|       |
  364|   196k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|   196k|        err.m_LineNumber               = line_number;
  366|   196k|        err.m_Column                   = column;
  367|   196k|        err.too_few_arguments.required = required;
  368|   196k|        err.too_few_arguments.provided = provided;
  369|       |
  370|   196k|        return err;
  371|   196k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|   196k|    {
  376|   196k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|   196k|                                                  token.GetColumn().unsafe(), required, provided);
  378|   196k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|   219k|    {
  383|   219k|        ParseError err;
  384|       |
  385|   219k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|   219k|        err.m_LineNumber           = line_number;
  387|   219k|        err.m_Column               = column;
  388|   219k|        err.empty_label.label_name = label_name;
  389|       |
  390|   219k|        return err;
  391|   219k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|   219k|    {
  395|   219k|        return ConstructEmptyLabelParseError(
  396|   219k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|   219k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 189k, False: 29.9k]
  ------------------
  398|   189k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|   219k|                        token.GetText());
  400|   219k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|   134k|    {
  405|   134k|        ParseError err;
  406|       |
  407|   134k|        err.m_Type       = ParseError::Type::TooManyComma;
  408|   134k|        err.m_LineNumber = line_number;
  409|   134k|        err.m_Column     = column;
  410|       |
  411|   134k|        return err;
  412|   134k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|   134k|    {
  416|   134k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|   134k|                                               token.GetColumn().unsafe());
  418|   134k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  7.31M|    {
   19|  7.31M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  7.31M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  50.3k|    {
  181|  50.3k|        ParsedProgram program;
  182|       |
  183|  50.3k|        program.m_Tokens = tokens;
  184|       |
  185|  50.3k|        phi::boolean line_has_instruction{false};
  186|  50.3k|        phi::usize   label_count{0u};
  187|       |
  188|  8.66M|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 8.61M, False: 50.3k]
  ------------------
  189|  8.61M|        {
  190|  8.61M|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|  8.61M|            switch (current_token.GetType())
  195|  8.61M|            {
  196|       |                // Ignore comments
  197|  51.3k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 51.3k, False: 8.56M]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  51.3k|                    break;
  200|       |
  201|  1.27M|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 1.27M, False: 7.33M]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  1.27M|                    line_has_instruction = false;
  204|  1.27M|                    break;
  205|       |
  206|  3.45M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 3.45M, False: 5.15M]
  ------------------
  207|  3.45M|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 581k, False: 2.87M]
  ------------------
  208|   581k|                    {
  209|   581k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|   581k|                                current_token, Token::Type::NewLine));
  211|   581k|                        break;
  212|   581k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  2.87M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 900k, False: 1.97M]
  ------------------
  217|   900k|                    {
  218|   900k|                        program.AddParseError(
  219|   900k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|   900k|                        break;
  221|   900k|                    }
  222|       |
  223|  1.97M|                    phi::string_view label_name = current_token.GetText();
  224|  1.97M|                    label_name.remove_suffix(1u);
  225|       |
  226|  1.97M|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 773k, False: 1.20M]
  ------------------
  227|   773k|                    {
  228|   773k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|   773k|                                current_token.GetLineNumber().unsafe(),
  230|   773k|                                current_token.GetColumn().unsafe(), label_name));
  231|   773k|                        break;
  232|   773k|                    }
  233|       |
  234|  1.20M|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 474k, False: 728k]
  ------------------
  235|   474k|                    {
  236|   474k|                        program.AddParseError(
  237|   474k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|   474k|                        break;
  239|   474k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|   728k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 484k, False: 244k]
  ------------------
  243|   484k|                    {
  244|       |                        // Find first defintions of label
  245|   484k|                        const Token* first_label_definition =
  246|   484k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   484k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|   484k|                                    {
  249|   484k|                                        phi::string_view token_label_name = t.GetText();
  250|   484k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   484k|                                        if (token_label_name == label_name)
  253|   484k|                                        {
  254|   484k|                                            return true;
  255|   484k|                                        }
  256|   484k|                                    }
  257|       |
  258|   484k|                                    return false;
  259|   484k|                                });
  260|       |
  261|   484k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|   484k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|   484k|                                current_token, *first_label_definition));
  265|   484k|                        break;
  266|   484k|                    }
  267|       |
  268|   244k|                    program.m_JumpData[label_name] =
  269|   244k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|   244k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|   244k|                    break;
  276|   728k|                }
  277|       |
  278|  1.44M|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 1.44M, False: 7.17M]
  ------------------
  279|  1.44M|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 824k, False: 616k]
  ------------------
  280|   824k|                    {
  281|   824k|                        program.AddParseError(
  282|   824k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|   824k|                        break;
  284|   824k|                    }
  285|       |
  286|   616k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|   616k|                    PHI_ASSERT(current_token.HasHint());
  290|   616k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|   616k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|   616k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|   616k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|   616k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|   616k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|   616k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|   616k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|   616k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  1.16M|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 1.09M, False: 75.4k]
  ------------------
  312|  1.09M|                    {
  313|       |                        // Get next token
  314|  1.09M|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 5.17k, False: 1.08M]
  ------------------
  315|  5.17k|                        {
  316|  5.17k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|  5.17k|                                    current_token, number_of_argument_required.unsafe(),
  318|  5.17k|                                    argument_num.unsafe()));
  319|  5.17k|                            break;
  320|  5.17k|                        }
  321|       |
  322|  1.08M|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  1.08M|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 415k, False: 672k]
  ------------------
  326|   415k|                        {
  327|   415k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 134k, False: 281k]
  ------------------
  328|   134k|                            {
  329|   134k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|   134k|                            }
  331|       |
  332|   415k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|   415k|                            continue;
  335|   415k|                        }
  336|       |
  337|   672k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 191k, False: 481k]
  ------------------
  338|   191k|                        {
  339|   191k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|   191k|                                    token, number_of_argument_required.unsafe(),
  341|   191k|                                    argument_num.unsafe()));
  342|   191k|                            break;
  343|   191k|                        }
  344|       |
  345|   481k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|   481k|                                parse_instruction_argument(
  347|   481k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|   481k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 344k, False: 136k]
  ------------------
  349|   344k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|   344k|                            break;
  352|   344k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|   136k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|   136k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|   136k|                        argument_num++;
  359|   136k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|   136k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|   616k|                    program.m_Instructions.emplace_back(instruction);
  367|   616k|                    line_has_instruction = true;
  368|   616k|                    break;
  369|  1.44M|                }
  370|       |
  371|  2.38M|                default:
  ------------------
  |  Branch (371:17): [True: 2.38M, False: 6.22M]
  ------------------
  372|  2.38M|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  2.38M|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 1.21M, False: 1.16M]
  ------------------
  374|  1.21M|                    {
  375|  1.21M|                        expected_token_type = Token::Type::NewLine;
  376|  1.21M|                    }
  377|       |
  378|  2.38M|                    program.AddParseError(
  379|  2.38M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  2.38M|                    break;
  381|  8.61M|            }
  382|  8.61M|        }
  383|       |
  384|       |        // Check for empty labels
  385|  50.3k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 15.1k, False: 35.1k]
  ------------------
  386|  15.1k|        {
  387|   293k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 278k, False: 15.1k]
  ------------------
  388|   278k|            {
  389|   278k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|   278k|                const Token& token = *it;
  392|   278k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 219k, False: 58.2k]
  ------------------
  393|   219k|                {
  394|   219k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|   219k|                    --label_count;
  396|   219k|                }
  397|   278k|            }
  398|  15.1k|        }
  399|       |
  400|  50.3k|        return program;
  401|  50.3k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  50.3k|    {
  405|  50.3k|        TokenStream tokens = Tokenize(source);
  406|  50.3k|        return Parse(tokens);
  407|  50.3k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|   481k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|   481k|        switch (token.GetType())
   37|   481k|        {
   38|  69.6k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 69.6k, False: 411k]
  ------------------
   39|  69.6k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 37.9k, False: 31.6k]
  ------------------
   40|  69.6k|                                          ArgumentType::AddressDisplacement))
   41|  37.9k|                {
   42|  37.9k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|  37.9k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|  37.9k|                    return {};
   46|  37.9k|                }
   47|       |
   48|       |                // Get address displacement
   49|  31.6k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  31.6k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  31.6k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 42, False: 31.5k]
  ------------------
   54|     42|                {
   55|     42|                    program.AddParseError(
   56|     42|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|     42|                    return {};
   58|     42|                }
   59|       |
   60|  31.5k|                auto         it           = tokens.current_position();
   61|  31.5k|                const Token& first_token  = tokens.consume();
   62|  31.5k|                const Token& second_token = tokens.consume();
   63|  31.5k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  31.5k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 12.4k, False: 19.1k]
  ------------------
   66|  12.4k|                {
   67|  12.4k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|  12.4k|                            first_token, Token::Type::OpenBracket));
   69|  12.4k|                    return {};
   70|  12.4k|                }
   71|       |
   72|       |                // Second token is the register
   73|  19.1k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 5.41k, False: 13.7k]
  ------------------
   74|  5.41k|                {
   75|  5.41k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|  5.41k|                            second_token, Token::Type::RegisterInt));
   77|  5.41k|                    return {};
   78|  5.41k|                }
   79|       |
   80|  13.7k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 5.61k, False: 8.09k]
  ------------------
   81|  5.61k|                {
   82|  5.61k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|  5.61k|                            third_token, Token::Type::ClosingBracket));
   84|  5.61k|                    return {};
   85|  5.61k|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|  8.09k|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|  8.09k|                return ConstructInstructionArgumentAddressDisplacement(
   94|  8.09k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|  13.7k|            }
   96|  57.4k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 57.4k, False: 423k]
  ------------------
   97|  57.4k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 3.77k, False: 53.6k]
  ------------------
   98|  3.77k|                {
   99|  3.77k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|  3.77k|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|  3.77k|                    return {};
  102|  3.77k|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  53.6k|                return ConstructInstructionArgumentRegisterInt(
  108|  53.6k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  57.4k|            }
  110|  27.8k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 27.8k, False: 453k]
  ------------------
  111|  27.8k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 12.4k, False: 15.3k]
  ------------------
  112|  12.4k|                {
  113|  12.4k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|  12.4k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|  12.4k|                    return {};
  116|  12.4k|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  15.3k|                return ConstructInstructionArgumentRegisterFloat(
  122|  15.3k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  27.8k|            }
  124|  9.92k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 9.92k, False: 471k]
  ------------------
  125|  9.92k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|  9.92k|                return {};
  128|  27.8k|            }
  129|   195k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 195k, False: 285k]
  ------------------
  130|       |                // Parse as Label
  131|   195k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 47.9k, False: 147k]
  ------------------
  132|  47.9k|                {
  133|  47.9k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  47.9k|                            token, expected_argument_type, ArgumentType::Label));
  135|  47.9k|                    return {};
  136|  47.9k|                }
  137|       |
  138|   147k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 147k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|   147k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 94.8k, False: 52.6k]
  ------------------
  145|  94.8k|                {
  146|  94.8k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  94.8k|                    return {};
  148|  94.8k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  52.6k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|   147k|            }
  154|  26.4k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 26.4k, False: 454k]
  ------------------
  155|  26.4k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 12.6k, False: 13.8k]
  ------------------
  156|  12.6k|                {
  157|  12.6k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|  12.6k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|  12.6k|                    return {};
  160|  12.6k|                }
  161|       |
  162|  13.8k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 6.86k, False: 6.94k]
  ------------------
  163|  6.86k|                {
  164|  6.86k|                    return ConstructInstructionArgumentImmediateValue(
  165|  6.86k|                            static_cast<std::int16_t>(token.GetHint()));
  166|  6.86k|                }
  167|       |
  168|  6.94k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|  6.94k|                return {};
  170|  13.8k|            }
  171|       |
  172|  94.6k|            default:
  ------------------
  |  Branch (172:13): [True: 94.6k, False: 386k]
  ------------------
  173|  94.6k|                program.AddParseError(
  174|  94.6k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  94.6k|                return {};
  176|   481k|        }
  177|   481k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  9.32M|                                tokens.find_first_token_if([&](const Token& t) {
  247|  9.32M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 6.51M, False: 2.80M]
  ------------------
  248|  6.51M|                                    {
  249|  6.51M|                                        phi::string_view token_label_name = t.GetText();
  250|  6.51M|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  6.51M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 484k, False: 6.02M]
  ------------------
  253|   484k|                                        {
  254|   484k|                                            return true;
  255|   484k|                                        }
  256|  6.51M|                                    }
  257|       |
  258|  8.83M|                                    return false;
  259|  9.32M|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    375|    {
  354|    375|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 375]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    375|        m_CurrentProgram = &program;
  361|       |
  362|    375|        m_ProgramCounter               = 0u;
  363|    375|        m_Halted                       = false;
  364|    375|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    375|        m_LastRaisedException          = Exception::None;
  366|    375|        m_CurrentStepCount             = 0u;
  367|       |
  368|    375|        return true;
  369|    375|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|  7.41M|    {
   13|  7.41M|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 1.23M, False: 6.17M]
  ------------------
   14|  1.23M|        {
   15|  1.23M|            const char first_char = token[0u];
   16|  1.23M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 52.8k, False: 1.18M]
  |  Branch (16:38): [True: 81.4k, False: 1.10M]
  ------------------
   17|   134k|            {
   18|   134k|                const char second_char = token[1u];
   19|   134k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 130k, False: 4.27k]
  |  Branch (19:43): [True: 98.9k, False: 31.0k]
  ------------------
   20|  98.9k|                {
   21|  98.9k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  98.9k|                }
   23|   134k|            }
   24|  1.23M|        }
   25|  6.17M|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 1.65M, False: 4.52M]
  ------------------
   26|  1.65M|        {
   27|  1.65M|            const char first_char = token[0u];
   28|  1.65M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 94.7k, False: 1.55M]
  |  Branch (28:38): [True: 19.0k, False: 1.54M]
  ------------------
   29|   113k|            {
   30|   113k|                const char second_char = token[1u];
   31|   113k|                const char third_char  = token[2u];
   32|       |
   33|   113k|                switch (second_char)
   34|   113k|                {
   35|  22.7k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 22.7k, False: 90.9k]
  ------------------
   36|  22.7k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 10.7k, False: 12.0k]
  |  Branch (36:50): [True: 5.73k, False: 5.02k]
  ------------------
   37|  5.73k|                        {
   38|  5.73k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|  5.73k|                        }
   40|  17.0k|                        break;
   41|  22.7k|                    }
   42|  44.9k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 44.9k, False: 68.8k]
  ------------------
   43|  44.9k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 27.4k, False: 17.4k]
  |  Branch (43:50): [True: 18.1k, False: 9.24k]
  ------------------
   44|  18.1k|                        {
   45|  18.1k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|  18.1k|                        }
   47|  26.7k|                        break;
   48|  44.9k|                    }
   49|  26.7k|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 23.2k, False: 90.4k]
  ------------------
   50|  23.2k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 4.69k, False: 18.5k]
  |  Branch (50:50): [True: 10.1k, False: 8.42k]
  ------------------
   51|  14.8k|                        {
   52|  14.8k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|  14.8k|                        }
   54|  8.42k|                        break;
   55|  23.2k|                    }
   56|  22.7k|                    default: {
  ------------------
  |  Branch (56:21): [True: 22.7k, False: 90.9k]
  ------------------
   57|  22.7k|                        break;
   58|  23.2k|                    }
   59|   113k|                }
   60|   113k|            }
   61|  1.65M|        }
   62|       |
   63|  7.27M|        return IntRegisterID::None;
   64|  7.41M|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|  7.27M|    {
   68|  7.27M|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 1.13M, False: 6.13M]
  ------------------
   69|  1.13M|        {
   70|  1.13M|            const char first_char = token[0u];
   71|  1.13M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 33.5k, False: 1.10M]
  |  Branch (71:38): [True: 26.7k, False: 1.07M]
  ------------------
   72|  60.3k|            {
   73|  60.3k|                const char second_char = token[1u];
   74|  60.3k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 53.0k, False: 7.24k]
  |  Branch (74:43): [True: 36.1k, False: 16.8k]
  ------------------
   75|  36.1k|                {
   76|  36.1k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  36.1k|                }
   78|  60.3k|            }
   79|  1.13M|        }
   80|  6.13M|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 1.61M, False: 4.52M]
  ------------------
   81|  1.61M|        {
   82|  1.61M|            const char first_char = token[0u];
   83|  1.61M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 76.2k, False: 1.53M]
  |  Branch (83:38): [True: 24.4k, False: 1.51M]
  ------------------
   84|   100k|            {
   85|   100k|                const char second_char = token[1u];
   86|   100k|                const char third_char  = token[2u];
   87|       |
   88|   100k|                switch (second_char)
   89|   100k|                {
   90|  23.4k|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 23.4k, False: 77.2k]
  ------------------
   91|  23.4k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 18.6k, False: 4.83k]
  |  Branch (91:50): [True: 5.80k, False: 12.8k]
  ------------------
   92|  5.80k|                        {
   93|  5.80k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|  5.80k|                        }
   95|  17.6k|                        break;
   96|  23.4k|                    }
   97|  23.3k|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 23.3k, False: 77.3k]
  ------------------
   98|  23.3k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 10.0k, False: 13.3k]
  |  Branch (98:50): [True: 7.29k, False: 2.74k]
  ------------------
   99|  7.29k|                        {
  100|  7.29k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|  7.29k|                        }
  102|  16.0k|                        break;
  103|  23.3k|                    }
  104|  22.4k|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 22.4k, False: 78.3k]
  ------------------
  105|  22.4k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 11.4k, False: 10.9k]
  |  Branch (105:50): [True: 2.05k, False: 8.89k]
  ------------------
  106|  13.5k|                        {
  107|  13.5k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|  13.5k|                        }
  109|  8.89k|                        break;
  110|  22.4k|                    }
  111|  31.4k|                    default: {
  ------------------
  |  Branch (111:21): [True: 31.4k, False: 69.3k]
  ------------------
  112|  31.4k|                        break;
  113|  22.4k|                    }
  114|   100k|                }
  115|   100k|            }
  116|  1.61M|        }
  117|       |
  118|  7.21M|        return FloatRegisterID::None;
  119|  7.27M|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|  6.67M|    {
  123|  6.67M|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 1.42M, False: 5.24M]
  ------------------
  124|  1.42M|        {
  125|  1.42M|            const char c1 = token[0u];
  126|  1.42M|            const char c2 = token[1u];
  127|  1.42M|            const char c3 = token[2u];
  128|  1.42M|            const char c4 = token[3u];
  129|       |
  130|  1.42M|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 48.1k, False: 1.37M]
  |  Branch (130:34): [True: 27.0k, False: 1.34M]
  |  Branch (130:49): [True: 8.90k, False: 66.2k]
  |  Branch (130:62): [True: 44.8k, False: 21.3k]
  ------------------
  131|  1.42M|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 28.2k, False: 25.4k]
  |  Branch (131:34): [True: 16.2k, False: 9.25k]
  |  Branch (131:49): [True: 27.8k, False: 16.6k]
  |  Branch (131:62): [True: 64, False: 16.6k]
  ------------------
  132|  1.42M|        }
  133|       |
  134|  5.24M|        return false;
  135|  6.67M|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|  8.03M|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  1.76M|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  33.3M|    {
   41|  33.3M|        return m_Type;
   42|  33.3M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  25.0M|    {
   51|  25.0M|        return m_LineNumber;
   52|  25.0M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  47.1M|    {
   56|  47.1M|        return m_Column;
   57|  47.1M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  31.0M|    {
   61|  31.0M|        return m_Text.length();
   62|  31.0M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  14.3M|    {
   66|  14.3M|        return m_Text;
   67|  14.3M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   662k|    {
   80|   662k|        return m_HasHint;
   81|   662k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   732k|    {
   85|   732k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   732k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   732k|                   m_Type == Type::ImmediateInteger);
   88|   732k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   732k|        return m_Hint;
   91|   732k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  50.3k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  50.3k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  50.3k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  31.6k|    {
   51|  31.6k|        auto it = m_Iterator;
   52|   126k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 94.8k, False: 31.5k]
  ------------------
   53|  94.8k|        {
   54|  94.8k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 42, False: 94.8k]
  ------------------
   55|     42|            {
   56|     42|                return false;
   57|     42|            }
   58|  94.8k|        }
   59|       |
   60|  31.5k|        return true;
   61|  31.6k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  9.75M|    {
   65|  9.75M|        return m_Iterator != m_Tokens.end();
   66|  9.75M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  9.79M|    {
   70|  9.79M|        return m_Iterator == m_Tokens.end();
   71|  9.79M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  9.79M|    {
   85|  9.79M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  9.79M|        return *m_Iterator++;
   91|  9.79M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  31.5k|    {
  164|  31.5k|        return m_Iterator;
  165|  31.5k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  8.09k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  8.09k|        m_Iterator = it;
  179|  8.09k|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  50.3k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  50.3k|        return m_Tokens.begin();
  188|  50.3k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  50.3k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  50.3k|        return m_Tokens.end();
  206|  50.3k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  15.1k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  15.1k|        return m_Tokens.rbegin();
  224|  15.1k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|   278k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|   278k|        return m_Tokens.rend();
  233|   278k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  50.3k|    {
   66|  50.3k|        TokenStream tokens;
   67|       |
   68|  50.3k|        phi::string_view current_token;
   69|       |
   70|  50.3k|        phi::u64 current_line_number{1u};
   71|  50.3k|        phi::u64 current_column{1u};
   72|  50.3k|        phi::u64 token_begin{0u};
   73|       |
   74|  50.3k|        phi::boolean parsing_comment{false};
   75|       |
   76|  25.0M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 25.0M, False: 50.3k]
  ------------------
   77|  25.0M|        {
   78|  25.0M|            const char c{source.at(i)};
   79|       |
   80|  25.0M|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 1.47M, False: 23.5M]
  ------------------
   81|  1.47M|            {
   82|  1.47M|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 447k, False: 1.02M]
  ------------------
   83|   447k|                {
   84|       |                    // Skip empty lines
   85|   447k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|   447k|                                        current_line_number, current_column);
   87|       |
   88|   447k|                    parsing_comment = false;
   89|   447k|                    current_line_number += 1u;
   90|   447k|                    current_column = 1u;
   91|   447k|                    continue;
   92|   447k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  1.02M|                tokens.emplace_back(ParseToken(
   96|  1.02M|                        source.substring_view(
   97|  1.02M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  1.02M|                                current_token.length()),
   99|  1.02M|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  1.02M|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  1.02M|                                    current_line_number, current_column);
  103|       |
  104|  1.02M|                current_token   = phi::string_view{};
  105|  1.02M|                parsing_comment = false;
  106|  1.02M|                current_line_number += 1u;
  107|  1.02M|                current_column = 0u;
  108|  1.02M|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|  23.5M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 44.6k, False: 23.5M]
  |  Branch (110:34): [True: 47.3k, False: 23.4M]
  ------------------
  111|  91.9k|            {
  112|  91.9k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 15.7k, False: 76.1k]
  ------------------
  113|  15.7k|                {
  114|  15.7k|                    token_begin = i;
  115|  15.7k|                }
  116|  76.1k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 66.3k, False: 9.87k]
  ------------------
  117|  66.3k|                {
  118|  66.3k|                    tokens.emplace_back(ParseToken(
  119|  66.3k|                            source.substring_view(
  120|  66.3k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  66.3k|                                    current_token.length()),
  122|  66.3k|                            current_line_number, current_column - current_token.length()));
  123|  66.3k|                    token_begin   = i;
  124|  66.3k|                    current_token = phi::string_view{};
  125|  66.3k|                }
  126|       |
  127|  91.9k|                parsing_comment = true;
  128|  91.9k|                current_token   = source.substring_view(
  129|  91.9k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  91.9k|                        current_token.length() + 1u);
  131|  91.9k|            }
  132|  23.4M|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 161k, False: 23.2M]
  ------------------
  133|   161k|            {
  134|       |                // simply append the character
  135|   161k|                current_token = source.substring_view(
  136|   161k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|   161k|                        current_token.length() + 1u);
  138|   161k|            }
  139|  23.2M|            else
  140|  23.2M|            {
  141|       |                // Not parsing a comment
  142|  23.2M|                switch (c)
  143|  23.2M|                {
  144|   373k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 373k, False: 22.9M]
  ------------------
  145|   850k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 476k, False: 22.8M]
  ------------------
  146|   850k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 0, False: 23.2M]
  ------------------
  147|   850k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 184k, False: 665k]
  ------------------
  148|   184k|                        {
  149|   184k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|   184k|                            continue;
  152|   184k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|   665k|                        tokens.emplace_back(ParseToken(
  156|   665k|                                source.substring_view(
  157|   665k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|   665k|                                        current_token.length()),
  159|   665k|                                current_line_number, current_column - current_token.length()));
  160|   665k|                        current_token = phi::string_view{};
  161|   665k|                        break;
  162|  2.68M|                    case ':':
  ------------------
  |  Branch (162:21): [True: 2.68M, False: 20.6M]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  2.68M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 2.19M, False: 492k]
  ------------------
  165|  2.19M|                        {
  166|  2.19M|                            current_token = source.substring_view(
  167|  2.19M|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  2.19M|                                    current_token.length() + 1u);
  169|  2.19M|                            tokens.emplace_back(ParseToken(
  170|  2.19M|                                    source.substring_view(
  171|  2.19M|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  2.19M|                                                    token_begin),
  173|  2.19M|                                            current_token.length()),
  174|  2.19M|                                    current_line_number,
  175|  2.19M|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  2.19M|                            current_token = phi::string_view{};
  178|  2.19M|                        }
  179|   492k|                        else
  180|   492k|                        {
  181|       |                            // Orphan colon
  182|   492k|                            token_begin = i;
  183|       |
  184|   492k|                            tokens.emplace_back(
  185|   492k|                                    Token::Type::Colon,
  186|   492k|                                    source.substring_view(
  187|   492k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|   492k|                                                    token_begin),
  189|   492k|                                            1u),
  190|   492k|                                    current_line_number, current_column);
  191|   492k|                        }
  192|  2.68M|                        break;
  193|  1.64M|                    case ',':
  ------------------
  |  Branch (193:21): [True: 1.64M, False: 21.6M]
  ------------------
  194|  1.92M|                    case '(':
  ------------------
  |  Branch (194:21): [True: 278k, False: 23.0M]
  ------------------
  195|  2.25M|                    case ')':
  ------------------
  |  Branch (195:21): [True: 328k, False: 22.9M]
  ------------------
  196|  2.25M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 1.59M, False: 661k]
  ------------------
  197|  1.59M|                        {
  198|  1.59M|                            tokens.emplace_back(ParseToken(
  199|  1.59M|                                    source.substring_view(
  200|  1.59M|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  1.59M|                                                    token_begin),
  202|  1.59M|                                            current_token.length()),
  203|  1.59M|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  1.59M|                            current_token = phi::string_view{};
  206|  1.59M|                        }
  207|       |
  208|  2.25M|                        Token::Type type;
  209|  2.25M|                        switch (c)
  210|  2.25M|                        {
  211|  1.64M|                            case ',':
  ------------------
  |  Branch (211:29): [True: 1.64M, False: 607k]
  ------------------
  212|  1.64M|                                type = Token::Type::Comma;
  213|  1.64M|                                break;
  214|   278k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 278k, False: 1.97M]
  ------------------
  215|   278k|                                type = Token::Type::OpenBracket;
  216|   278k|                                break;
  217|   328k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 328k, False: 1.92M]
  ------------------
  218|   328k|                                type = Token::Type::ClosingBracket;
  219|   328k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 2.25M]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  2.25M|#endif
  225|  2.25M|                        }
  226|       |
  227|  2.25M|                        token_begin = i;
  228|       |
  229|  2.25M|                        tokens.emplace_back(
  230|  2.25M|                                type,
  231|  2.25M|                                source.substring_view(
  232|  2.25M|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  2.25M|                                        1u),
  234|  2.25M|                                current_line_number, current_column);
  235|  2.25M|                        break;
  236|       |
  237|  17.5M|                    default:
  ------------------
  |  Branch (237:21): [True: 17.5M, False: 5.79M]
  ------------------
  238|  17.5M|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 5.49M, False: 12.0M]
  ------------------
  239|  5.49M|                        {
  240|  5.49M|                            token_begin = i;
  241|  5.49M|                        }
  242|       |
  243|       |                        // simply append the character
  244|  17.5M|                        current_token = source.substring_view(
  245|  17.5M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|  17.5M|                                current_token.length() + 1u);
  247|  23.2M|                }
  248|  23.2M|            }
  249|       |
  250|  24.3M|            current_column += 1u;
  251|  24.3M|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  50.3k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 36.2k, False: 14.0k]
  ------------------
  255|  36.2k|        {
  256|  36.2k|            tokens.emplace_back(
  257|  36.2k|                    ParseToken(source.substring_view(
  258|  36.2k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  36.2k|                                       current_token.length()),
  260|  36.2k|                               current_line_number, current_column - current_token.length()));
  261|  36.2k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  50.3k|        tokens.finalize();
  265|       |
  266|  50.3k|        return tokens;
  267|  50.3k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|  5.57M|    {
   14|  5.57M|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 58.4k, False: 5.52M]
  |  Branch (14:13): [True: 54.3k, False: 5.52M]
  |  Branch (14:36): [True: 54.3k, False: 4.15k]
  ------------------
   15|  54.3k|        {
   16|  54.3k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  54.3k|            if (number)
  ------------------
  |  Branch (18:17): [True: 9.78k, False: 44.5k]
  ------------------
   19|  9.78k|            {
   20|  9.78k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  9.78k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  9.78k|            }
   23|       |
   24|  44.5k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  54.3k|        }
   26|       |
   27|  5.52M|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 41.3k, False: 5.48M]
  |  Branch (27:13): [True: 82.1k, False: 5.44M]
  |  Branch (27:36): [True: 40.7k, False: 5.44M]
  ------------------
   28|  82.1k|        {
   29|  82.1k|            return {Token::Type::Comment, token, line_number, column};
   30|  82.1k|        }
   31|       |
   32|  5.44M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 132k, False: 5.30M]
  ------------------
   33|   132k|        {
   34|   132k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|   132k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|   132k|        }
   37|       |
   38|  5.30M|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 15.8k, False: 5.29M]
  ------------------
   39|  15.8k|        {
   40|  15.8k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  15.8k|        }
   42|       |
   43|  5.29M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 91.3k, False: 5.20M]
  ------------------
   44|  91.3k|        {
   45|  91.3k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  91.3k|                    static_cast<phi::uint32_t>(id)};
   47|  91.3k|        }
   48|       |
   49|  5.20M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 57.0k, False: 5.14M]
  ------------------
   50|  57.0k|        {
   51|  57.0k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  57.0k|                    static_cast<phi::uint32_t>(id)};
   53|  57.0k|        }
   54|       |
   55|  5.14M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 1.47M, False: 3.67M]
  ------------------
   56|  1.47M|        {
   57|  1.47M|            return {Token::Type::OpCode, token, line_number, column,
   58|  1.47M|                    static_cast<phi::uint32_t>(opcode)};
   59|  1.47M|        }
   60|       |
   61|  3.67M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  5.14M|    }

_ZN6ImVec2C2Ev:
  262|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

LLVMFuzzerTestOneInput:
   10|  50.3k|{
   11|  50.3k|    static dlxemu::Emulator emu;
   12|       |
   13|  50.3k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   14|       |
   15|  50.3k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   16|       |
   17|       |    // Parse it
   18|  50.3k|    editor.SetText(std::string(source.data(), source.length().unsafe()));
   19|  50.3k|    editor.m_FullText = editor.GetText();
   20|       |
   21|  50.3k|    emu.ParseProgram(editor.m_FullText);
   22|       |
   23|  50.3k|    editor.ColorizeInternal();
   24|       |
   25|  50.3k|    return 0;
   26|  50.3k|}


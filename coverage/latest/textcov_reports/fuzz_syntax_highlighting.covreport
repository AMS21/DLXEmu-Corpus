_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  196|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  201|   269k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  239|  53.8k|    {
  240|  53.8k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (240:13): [True: 27.9k, False: 25.9k]
  ------------------
  241|  27.9k|        {
  242|  27.9k|            return m_Line < other.m_Line;
  243|  27.9k|        }
  244|       |
  245|  25.9k|        return m_Column <= other.m_Column;
  246|  53.8k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  250|      1|    {
  251|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (251:13): [True: 0, False: 1]
  ------------------
  252|      0|        {
  253|      0|            return m_Line > other.m_Line;
  254|      0|        }
  255|       |
  256|      1|        return m_Column >= other.m_Column;
  257|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  264|  25.1M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  292|      1|    {
  293|      1|        Colorize();
  294|      1|        m_Lines.push_back(Line());
  295|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  298|      1|    {
  299|      1|        VerifyInternalState();
  300|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  348|  53.8k|    {
  349|  53.8k|        m_ErrorMarkers.clear();
  350|  53.8k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  413|  53.8k|    {
  414|  53.8k|        m_Breakpoints.clear();
  415|  53.8k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  493|  53.8k|    {
  494|  53.8k|        m_Lines.clear();
  495|  53.8k|        ResetState();
  496|  53.8k|        m_Lines.emplace_back(Line());
  497|       |
  498|  53.8k|        for (const char character : text)
  ------------------
  |  Branch (498:35): [True: 38.5M, False: 53.8k]
  ------------------
  499|  38.5M|        {
  500|  38.5M|            if (character == '\r' ||
  ------------------
  |  Branch (500:17): [True: 34.1k, False: 38.5M]
  |  Branch (500:17): [True: 11.8M, False: 26.7M]
  ------------------
  501|  38.5M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (501:18): [True: 13.8M, False: 24.6M]
  |  Branch (501:48): [True: 12.3M, False: 1.56M]
  |  Branch (501:69): [True: 11.8M, False: 514k]
  ------------------
  502|  11.8M|            {
  503|       |                // ignore the carriage return character and control characters
  504|  11.8M|            }
  505|  26.7M|            else if (character == '\n')
  ------------------
  |  Branch (505:22): [True: 1.56M, False: 25.1M]
  ------------------
  506|  1.56M|            {
  507|  1.56M|                m_Lines.emplace_back(Line());
  508|  1.56M|            }
  509|  25.1M|            else
  510|  25.1M|            {
  511|  25.1M|                m_Lines.back().emplace_back(
  512|  25.1M|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  513|  25.1M|            }
  514|  38.5M|        }
  515|       |
  516|  53.8k|        m_TextChanged = true;
  517|  53.8k|        m_ScrollToTop = true;
  518|       |
  519|  53.8k|        m_UndoBuffer.clear();
  520|  53.8k|        m_UndoIndex = 0u;
  521|       |
  522|  53.8k|        Colorize();
  523|  53.8k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  526|  53.8k|    {
  527|  53.8k|        const phi::u32 max_line = GetMaxLineNumber();
  528|       |
  529|  53.8k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  530|  53.8k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1493|      1|    {
 1494|       |        // Lines should never be empty
 1495|      1|        PHI_ASSERT(!m_Lines.empty());
 1496|       |
 1497|       |        // Verify Selection is still in a valid state
 1498|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1499|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1500|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1501|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1502|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1503|       |
 1504|       |        // Verify cursor position
 1505|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1506|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1507|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1508|       |
 1509|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1510|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1511|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1512|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1513|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1514|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1515|       |#endif
 1516|       |
 1517|       |        // Verify that all breakpoints are on existing lines
 1518|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1518:35): [True: 0, False: 1]
  ------------------
 1519|      0|        {
 1520|      0|            PHI_ASSERT(break_point != 0u);
 1521|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1522|      0|        }
 1523|       |
 1524|       |        // Verify that all error markers are on existing lines
 1525|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1525:34): [True: 0, False: 1]
  ------------------
 1526|      0|        {
 1527|      0|            const phi::u32 line_number = error_marker.first;
 1528|       |
 1529|      0|            PHI_ASSERT(line_number != 0u);
 1530|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1531|      0|        }
 1532|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1535|      1|    {
 1536|      1|        constexpr const static Palette palette = {{
 1537|      1|                0xff7f7f7f, // Default
 1538|      1|                0xffd69c56, // OpCode
 1539|      1|                0xff00ff00, // Register
 1540|      1|                0xff7070e0, // IntegerLiteral
 1541|      1|                0xff206020, // Comment
 1542|      1|                0xff101010, // Background
 1543|      1|                0xffe0e0e0, // Cursor
 1544|      1|                0x80a06020, // Selection
 1545|      1|                0x800020ff, // ErrorMarker
 1546|      1|                0x40f08000, // Breakpoint
 1547|      1|                0xff707000, // Line number
 1548|      1|                0x40000000, // Current line fill
 1549|      1|                0x40808080, // Current line fill (inactive)
 1550|      1|                0x40a0a0a0, // Current line edge
 1551|      1|        }};
 1552|       |
 1553|      1|        return palette;
 1554|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1721|  53.8k|    {
 1722|       |        // TODO: This is quite unreadable
 1723|  53.8k|        const phi::u32 to_line =
 1724|  53.8k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1724:17): [True: 53.8k, False: 0]
  ------------------
 1725|  53.8k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1726|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1727|       |
 1728|  53.8k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1729|  53.8k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1730|  53.8k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1731|  53.8k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1732|  53.8k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1838|  53.8k|    {
 1839|  53.8k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1840|  53.8k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1841|  53.8k|        PHI_ASSERT(start <= end);
 1842|       |
 1843|  53.8k|        std::string result;
 1844|       |
 1845|  53.8k|        phi::u32   lstart = start.m_Line;
 1846|  53.8k|        phi::u32   lend   = end.m_Line;
 1847|  53.8k|        phi::u32   istart = GetCharacterIndex(start);
 1848|  53.8k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1849|  53.8k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1850|  53.8k|        phi::usize size   = 0u;
 1851|       |
 1852|  1.67M|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1852:35): [True: 1.62M, False: 53.8k]
  ------------------
 1853|  1.62M|        {
 1854|  1.62M|            PHI_ASSERT(i < m_Lines.size());
 1855|  1.62M|            size += m_Lines[i.unsafe()].size();
 1856|  1.62M|        }
 1857|       |
 1858|  53.8k|        result.reserve((size + size / 8u).unsafe());
 1859|       |
 1860|  26.8M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1860:16): [True: 19.5M, False: 7.30M]
  |  Branch (1860:16): [True: 26.7M, False: 53.8k]
  |  Branch (1860:33): [True: 7.24M, False: 53.8k]
  ------------------
 1861|  26.7M|        {
 1862|  26.7M|            PHI_ASSERT(lstart < m_Lines.size());
 1863|       |
 1864|  26.7M|            const Line& line = m_Lines[lstart.unsafe()];
 1865|  26.7M|            if (istart < line.size())
  ------------------
  |  Branch (1865:17): [True: 25.1M, False: 1.56M]
  ------------------
 1866|  25.1M|            {
 1867|  25.1M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1868|  25.1M|                istart++;
 1869|  25.1M|            }
 1870|  1.56M|            else
 1871|  1.56M|            {
 1872|  1.56M|                istart = 0u;
 1873|  1.56M|                ++lstart;
 1874|       |
 1875|  1.56M|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1875:21): [True: 1.56M, False: 0]
  ------------------
 1876|  1.56M|                {
 1877|  1.56M|                    result += '\n';
 1878|  1.56M|                }
 1879|  1.56M|            }
 1880|  26.7M|        }
 1881|       |
 1882|  53.8k|        return result;
 1883|  53.8k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2421|   107k|    {
 2422|   107k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2423|       |
 2424|   107k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2425|   107k|        phi::u32    index = 0u;
 2426|  11.8M|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2426:35): [True: 11.8M, False: 56.7k]
  |  Branch (2426:35): [True: 11.7M, False: 107k]
  |  Branch (2426:58): [True: 11.7M, False: 51.0k]
  ------------------
 2427|  11.7M|        {
 2428|  11.7M|            PHI_ASSERT(index < line.size());
 2429|  11.7M|            const Char character = line[index.unsafe()].m_Char;
 2430|       |
 2431|  11.7M|            if (character == '\t')
  ------------------
  |  Branch (2431:17): [True: 257k, False: 11.5M]
  ------------------
 2432|   257k|            {
 2433|   257k|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2434|   257k|            }
 2435|  11.5M|            else
 2436|  11.5M|            {
 2437|  11.5M|                ++column;
 2438|  11.5M|            }
 2439|       |
 2440|  11.7M|            index += UTF8CharLength(character);
 2441|  11.7M|        }
 2442|       |
 2443|   107k|        return index;
 2444|   107k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2493|  53.8k|    {
 2494|  53.8k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2494:13): [True: 0, False: 53.8k]
  ------------------
 2495|      0|        {
 2496|      0|            return 0u;
 2497|      0|        }
 2498|       |
 2499|  53.8k|        const Line& line = m_Lines[line_number.unsafe()];
 2500|  53.8k|        phi::u32    col  = 0u;
 2501|       |
 2502|  11.8M|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2502:32): [True: 11.7M, False: 53.8k]
  ------------------
 2503|  11.7M|        {
 2504|  11.7M|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2505|  11.7M|            if (character == '\t')
  ------------------
  |  Branch (2505:17): [True: 257k, False: 11.5M]
  ------------------
 2506|   257k|            {
 2507|   257k|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2508|   257k|            }
 2509|  11.5M|            else
 2510|  11.5M|            {
 2511|  11.5M|                col++;
 2512|  11.5M|            }
 2513|       |
 2514|  11.7M|            i += UTF8CharLength(character);
 2515|  11.7M|        }
 2516|       |
 2517|  53.8k|        return col;
 2518|  53.8k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2521|  53.8k|    {
 2522|  53.8k|        PHI_ASSERT(!m_Lines.empty());
 2523|       |
 2524|  53.8k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2525|  53.8k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3660|  10.4M|    {
 3661|  10.4M|        PaletteIndex palette_index{PaletteIndex::Default};
 3662|       |
 3663|       |        // Determine palette color
 3664|  10.4M|        switch (token.GetType())
 3665|  10.4M|        {
 3666|  87.0k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3666:13): [True: 87.0k, False: 10.3M]
  ------------------
 3667|  87.0k|                palette_index = PaletteIndex::Comment;
 3668|  87.0k|                break;
 3669|  56.8k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3669:13): [True: 56.8k, False: 10.4M]
  ------------------
 3670|   194k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3670:13): [True: 137k, False: 10.3M]
  ------------------
 3671|   194k|                palette_index = PaletteIndex::IntegerLiteral;
 3672|   194k|                break;
 3673|  1.58M|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3673:13): [True: 1.58M, False: 8.87M]
  ------------------
 3674|  1.58M|                palette_index = PaletteIndex::OpCode;
 3675|  1.58M|                break;
 3676|  61.0k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3676:13): [True: 61.0k, False: 10.4M]
  ------------------
 3677|   155k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3677:13): [True: 94.7k, False: 10.3M]
  ------------------
 3678|   172k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3678:13): [True: 16.7k, False: 10.4M]
  ------------------
 3679|   172k|                palette_index = PaletteIndex::Register;
 3680|   172k|                break;
 3681|  1.56M|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3681:13): [True: 1.56M, False: 8.89M]
  ------------------
 3682|  1.56M|                return;
 3683|  6.85M|            default:
  ------------------
  |  Branch (3683:13): [True: 6.85M, False: 3.60M]
  ------------------
 3684|  6.85M|                break;
 3685|  10.4M|        }
 3686|       |
 3687|  8.89M|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3688|  8.89M|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3689|       |
 3690|  8.89M|        for (phi::u64 index{token.GetColumn() - 1u};
 3691|  33.1M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3691:14): [True: 24.2M, False: 8.89M]
  ------------------
 3692|  24.2M|        {
 3693|  24.2M|            PHI_ASSERT(index < line.size());
 3694|  24.2M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3695|  24.2M|        }
 3696|  8.89M|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3699|  53.8k|    {
 3700|  53.8k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3701|       |
 3702|  53.8k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3702:38): [True: 10.4M, False: 53.8k]
  ------------------
 3703|  10.4M|        {
 3704|  10.4M|            ColorizeToken(token);
 3705|  10.4M|        }
 3706|  53.8k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3709|  53.8k|    {
 3710|  53.8k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3711|  53.8k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3712|  53.8k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3713|       |
 3714|       |        // Clear breakpoints and markers
 3715|  53.8k|        ClearBreakPoints();
 3716|  53.8k|        ClearErrorMarkers();
 3717|  53.8k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  134|  11.7M|{
  135|  11.7M|    return UTF8CharLength(static_cast<char>(characater));
  136|  11.7M|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  104|  23.5M|{
  105|  23.5M|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (105:9): [True: 32.0k, False: 23.5M]
  ------------------
  106|  32.0k|    {
  107|  32.0k|        return 6_u8;
  108|  32.0k|    }
  109|       |
  110|  23.5M|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (110:9): [True: 55.1k, False: 23.4M]
  ------------------
  111|  55.1k|    {
  112|  55.1k|        return 5_u8;
  113|  55.1k|    }
  114|       |
  115|  23.4M|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (115:9): [True: 56.4k, False: 23.3M]
  ------------------
  116|  56.4k|    {
  117|  56.4k|        return 4_u8;
  118|  56.4k|    }
  119|       |
  120|  23.3M|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (120:9): [True: 100k, False: 23.2M]
  ------------------
  121|   100k|    {
  122|   100k|        return 3_u8;
  123|   100k|    }
  124|       |
  125|  23.2M|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (125:9): [True: 342k, False: 22.9M]
  ------------------
  126|   342k|    {
  127|   342k|        return 2_u8;
  128|   342k|    }
  129|       |
  130|  22.9M|    return 1_u8;
  131|  23.2M|}

_ZN6dlxemu8EmulatorC2Ev:
   42|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  173|  53.8k|    {
  174|  53.8k|        return m_DLXProgram;
  175|  53.8k|    }
_ZN6dlxemu8Emulator12ParseProgramEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  178|  53.8k|    {
  179|  53.8k|        m_DLXProgram = dlx::Parser::Parse(source);
  180|       |
  181|  53.8k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (181:13): [True: 401, False: 53.4k]
  ------------------
  182|    401|        {
  183|    401|            m_Processor.LoadProgram(m_DLXProgram);
  184|    401|        }
  185|  53.8k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  198|  53.8k|    {
  199|  53.8k|        return m_CodeEditor;
  200|  53.8k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   37|      1|    {
   38|      1|        Shutdown();
   39|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  107|      1|    {
  108|      1|        if (imgui_initialized)
  ------------------
  |  Branch (108:13): [True: 0, False: 1]
  ------------------
  109|      0|        {
  110|      0|            ShutdownImGui();
  111|      0|        }
  112|       |
  113|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (113:13): [True: 0, False: 1]
  ------------------
  114|      0|        {
  115|      0|            glfwDestroyWindow(m_Window);
  116|      0|        }
  117|       |
  118|      1|        if (glfw_initialized)
  ------------------
  |  Branch (118:13): [True: 0, False: 1]
  ------------------
  119|      0|        {
  120|      0|            glfwTerminate();
  121|      0|        }
  122|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  2.50M|        {
  169|  2.50M|            PHI_ASSERT(index < 3u);
  170|       |
  171|  2.50M|            switch (index.unsafe())
  172|  2.50M|            {
  173|  1.11M|                case 0:
  ------------------
  |  Branch (173:17): [True: 1.11M, False: 1.39M]
  ------------------
  174|  1.11M|                    return m_Arg1Type;
  175|       |
  176|   707k|                case 1:
  ------------------
  |  Branch (176:17): [True: 707k, False: 1.79M]
  ------------------
  177|   707k|                    return m_Arg2Type;
  178|       |
  179|   682k|                case 2:
  ------------------
  |  Branch (179:17): [True: 682k, False: 1.82M]
  ------------------
  180|   682k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 2.50M]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  2.50M|#endif
  187|  2.50M|            }
  188|  2.50M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   663k|        {
  195|   663k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   663k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 651k, False: 11.7k]
  ------------------
  199|   651k|            {
  200|   651k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   651k|            }
  202|   663k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 385k, False: 277k]
  ------------------
  203|   385k|            {
  204|   385k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   385k|            }
  206|   663k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 211k, False: 451k]
  ------------------
  207|   211k|            {
  208|   211k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   211k|            }
  210|       |
  211|   663k|            return number_of_argument_required;
  212|   663k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   663k|        {
  221|   663k|            return m_Executor;
  222|   663k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   404k|    {
   38|   404k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   404k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   404k|                                         static_cast<underlying_t>(rhs));
   42|   404k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   404k|    {
   55|   404k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   404k|        return static_cast<underlying_t>(type & test) != 0;
   58|   404k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  2.28M|    {
   31|  2.28M|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 49.4k, False: 2.23M]
  ------------------
   32|  49.4k|        {
   33|  49.4k|            return true;
   34|  49.4k|        }
   35|       |
   36|  2.23M|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 6.85k, False: 2.23M]
  ------------------
   37|  6.85k|        {
   38|  6.85k|            return true;
   39|  6.85k|        }
   40|       |
   41|  2.23M|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 767k, False: 1.46M]
  ------------------
   42|   767k|        {
   43|   767k|            return true;
   44|   767k|        }
   45|       |
   46|  1.46M|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 12.4k, False: 1.45M]
  ------------------
   47|  12.4k|        {
   48|  12.4k|            return true;
   49|  12.4k|        }
   50|       |
   51|  1.45M|        return false;
   52|  1.46M|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  1.45M|    {
   56|  1.45M|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 1.45M]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  1.45M|        const char first_char = token.at(0u);
   62|       |
   63|  1.45M|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 320k, False: 1.13M]
  ------------------
   64|   320k|        {
   65|   320k|            return phi::is_alpha(first_char);
   66|   320k|        }
   67|       |
   68|  1.13M|        phi::boolean just_under_scores = (first_char == '_');
   69|  1.13M|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 182k, False: 948k]
  |  Branch (69:13): [True: 168k, False: 962k]
  |  Branch (69:43): [True: 168k, False: 14.0k]
  ------------------
   70|   168k|        {
   71|   168k|            return false;
   72|   168k|        }
   73|       |
   74|  3.23M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 2.62M, False: 618k]
  ------------------
   75|  2.62M|        {
   76|  2.62M|            const char c{token.at(index)};
   77|       |
   78|  2.62M|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 2.26M, False: 361k]
  ------------------
   79|  2.26M|            {
   80|  2.26M|                just_under_scores = false;
   81|  2.26M|            }
   82|   361k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 16.8k, False: 344k]
  ------------------
   83|  16.8k|            {
   84|  16.8k|                continue;
   85|  16.8k|            }
   86|   344k|            else
   87|   344k|            {
   88|   344k|                return false;
   89|   344k|            }
   90|  2.62M|        }
   91|       |
   92|   618k|        return !just_under_scores;
   93|   962k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|  5.89M|    {
  100|  5.89M|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 5.89M]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|  5.89M|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 868k, False: 5.02M]
  ------------------
  106|   868k|        {
  107|   868k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 107k, False: 760k]
  ------------------
  108|   107k|            {
  109|   107k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|   107k|            }
  111|       |
  112|   760k|            return {};
  113|   868k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|  5.02M|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 10.4k, False: 5.01M]
  ------------------
  117|  10.4k|        {
  118|  10.4k|            return {};
  119|  10.4k|        }
  120|       |
  121|  5.01M|        std::int32_t number{0};
  122|  5.01M|        phi::boolean is_negative{false};
  123|  5.01M|        phi::boolean starts_with_zero{false};
  124|  5.01M|        phi::boolean parsing_binary{false};
  125|  5.01M|        phi::boolean parsing_octal{false};
  126|  5.01M|        phi::boolean parsing_hexadecimal{false};
  127|  5.01M|        phi::boolean parsed_something{false};
  128|  5.01M|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|  5.64M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 5.56M, False: 83.5k]
  ------------------
  133|  5.56M|        {
  134|  5.56M|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|  5.56M|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 5.01M, False: 548k]
  ------------------
  138|  5.01M|            {
  139|  5.01M|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 20.0k, False: 4.99M]
  ------------------
  140|  20.0k|                {
  141|  20.0k|                    continue;
  142|  20.0k|                }
  143|       |
  144|  4.99M|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 70.7k, False: 4.92M]
  ------------------
  145|  70.7k|                {
  146|  70.7k|                    is_negative = true;
  147|  70.7k|                    continue;
  148|  70.7k|                }
  149|       |
  150|  4.92M|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 76.9k, False: 4.84M]
  ------------------
  151|  76.9k|                {
  152|  76.9k|                    starts_with_zero = true;
  153|  76.9k|                    continue;
  154|  76.9k|                }
  155|       |
  156|  4.84M|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 9.18k, False: 4.83M]
  ------------------
  157|  9.18k|                {
  158|  9.18k|                    return {};
  159|  9.18k|                }
  160|  4.84M|            }
  161|       |
  162|       |            // Second character
  163|  5.38M|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 235k, False: 5.15M]
  ------------------
  164|   235k|            {
  165|   235k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 76.9k, False: 158k]
  ------------------
  166|  76.9k|                {
  167|       |                    // Binary
  168|  76.9k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 8.33k, False: 68.6k]
  |  Branch (168:37): [True: 9.15k, False: 59.4k]
  ------------------
  169|  17.4k|                    {
  170|  17.4k|                        parsing_binary = true;
  171|  17.4k|                        continue;
  172|  17.4k|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  59.4k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 22.0k, False: 37.4k]
  |  Branch (175:37): [True: 14.7k, False: 22.6k]
  ------------------
  176|  36.8k|                    {
  177|  36.8k|                        parsing_hexadecimal = true;
  178|  36.8k|                        continue;
  179|  36.8k|                    }
  180|       |
  181|       |                    // Octal
  182|  22.6k|                    parsing_octal = true;
  183|  22.6k|                }
  184|   235k|            }
  185|       |
  186|       |            // Handle seperators
  187|  5.33M|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 9.71k, False: 5.32M]
  ------------------
  188|  9.71k|            {
  189|  9.71k|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 2.70k, False: 7.00k]
  ------------------
  190|  2.70k|                {
  191|  2.70k|                    return {};
  192|  2.70k|                }
  193|       |
  194|  7.00k|                parsed_separator = true;
  195|  7.00k|                continue;
  196|  9.71k|            }
  197|       |
  198|       |            // Check for over/underflow
  199|  5.32M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 209k, False: 5.11M]
  |  Branch (199:32): [True: 11.9k, False: 198k]
  ------------------
  200|  11.9k|            {
  201|       |                // Would underflow
  202|  11.9k|                return {};
  203|  11.9k|            }
  204|  5.30M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 5.11M, False: 198k]
  |  Branch (204:17): [True: 8.47k, False: 5.30M]
  |  Branch (204:33): [True: 8.47k, False: 5.10M]
  ------------------
  205|  8.47k|            {
  206|       |                // Would overflow
  207|  8.47k|                return {};
  208|  8.47k|            }
  209|       |
  210|  5.30M|            parsed_separator = false;
  211|  5.30M|            parsed_something = true;
  212|       |
  213|  5.30M|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 8.99k, False: 5.29M]
  ------------------
  214|  8.99k|            {
  215|  8.99k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 7.56k, False: 1.42k]
  ------------------
  216|  7.56k|                {
  217|  7.56k|                    return {};
  218|  7.56k|                }
  219|       |
  220|  1.42k|                number <<= 1;
  221|  1.42k|                number |= (c - '0');
  222|  1.42k|            }
  223|  5.29M|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 24.4k, False: 5.26M]
  ------------------
  224|  24.4k|            {
  225|  24.4k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 19.9k, False: 4.46k]
  ------------------
  226|  19.9k|                {
  227|  19.9k|                    return {};
  228|  19.9k|                }
  229|       |
  230|  4.46k|                number <<= 3;
  231|  4.46k|                number |= (c - '0');
  232|  4.46k|            }
  233|  5.26M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 66.1k, False: 5.20M]
  ------------------
  234|  66.1k|            {
  235|  66.1k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 24.2k, False: 41.8k]
  ------------------
  236|  24.2k|                {
  237|  24.2k|                    return {};
  238|  24.2k|                }
  239|       |
  240|  41.8k|                number <<= 4;
  241|  41.8k|                number |= phi::hex_digit_value(c).unsafe();
  242|  41.8k|            }
  243|  5.20M|            else
  244|  5.20M|            {
  245|  5.20M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 4.83M, False: 363k]
  ------------------
  246|  4.83M|                {
  247|  4.83M|                    return {};
  248|  4.83M|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|   363k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 118k, False: 245k]
  |  Branch (251:36): [True: 8.23k, False: 109k]
  ------------------
  252|  8.23k|                {
  253|  8.23k|                    return {};
  254|  8.23k|                }
  255|       |
  256|   355k|                number *= 10;
  257|   355k|                number += (c - '0');
  258|   355k|            }
  259|  5.30M|        }
  260|       |
  261|  83.5k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 71.4k, False: 12.0k]
  ------------------
  262|  71.4k|        {
  263|       |            // Check for over/underflow
  264|  71.4k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 27.3k, False: 44.0k]
  |  Branch (264:32): [True: 15.1k, False: 12.2k]
  ------------------
  265|  15.1k|            {
  266|       |                // Would underflow
  267|  15.1k|                return {};
  268|  15.1k|            }
  269|  56.2k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 44.0k, False: 12.2k]
  |  Branch (269:17): [True: 15.7k, False: 40.5k]
  |  Branch (269:33): [True: 15.7k, False: 28.3k]
  ------------------
  270|  15.7k|            {
  271|       |                // Would overflow
  272|  15.7k|                return {};
  273|  15.7k|            }
  274|       |
  275|  40.5k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 12.2k, False: 28.3k]
  ------------------
  276|  12.2k|            {
  277|  12.2k|                return static_cast<std::int16_t>(-number);
  278|  12.2k|            }
  279|       |
  280|  28.3k|            return static_cast<std::int16_t>(number);
  281|  40.5k|        }
  282|       |
  283|  12.0k|        return {};
  284|  83.5k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   515k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   515k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 9.78M, False: 0]
  ------------------
   64|  9.78M|            {
   65|  9.78M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 515k, False: 9.27M]
  ------------------
   66|   515k|                {
   67|   515k|                    return &token;
   68|   515k|                }
   69|  9.78M|            }
   70|       |
   71|      0|            return nullptr;
   72|   515k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  2.08M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.08M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.08M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  5.97M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  5.97M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  5.97M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  2.40M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.40M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.40M|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   663k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|   144k|    {
   25|   144k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|   144k|        switch (argument_number.unsafe())
   28|   144k|        {
   29|   111k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 111k, False: 32.6k]
  ------------------
   30|   111k|                m_Arg1 = argument;
   31|   111k|                break;
   32|  20.9k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 20.9k, False: 123k]
  ------------------
   33|  20.9k|                m_Arg2 = argument;
   34|  20.9k|                break;
   35|  11.6k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 11.6k, False: 132k]
  ------------------
   36|  11.6k|                m_Arg3 = argument;
   37|  11.6k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 144k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|   144k|#endif
   42|   144k|        }
   43|   144k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  2.13M|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  55.6k|    {
  171|  55.6k|        InstructionArgument arg;
  172|  55.6k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  55.6k|        arg.register_int.register_id = id;
  174|  55.6k|        return arg;
  175|  55.6k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  16.4k|    {
  179|  16.4k|        InstructionArgument arg;
  180|  16.4k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  16.4k|        arg.register_float.register_id = id;
  182|  16.4k|        return arg;
  183|  16.4k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  7.14k|    {
  187|  7.14k|        InstructionArgument arg;
  188|  7.14k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  7.14k|        arg.immediate_value.signed_value = value;
  190|  7.14k|        return arg;
  191|  7.14k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|  8.43k|    {
  196|  8.43k|        InstructionArgument arg;
  197|  8.43k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|  8.43k|        arg.address_displacement.register_id  = id;
  199|  8.43k|        arg.address_displacement.displacement = displacement;
  200|  8.43k|        return arg;
  201|  8.43k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  204|  56.9k|    {
  205|  56.9k|        InstructionArgument arg;
  206|  56.9k|        arg.m_Type           = ArgumentType::Label;
  207|  56.9k|        arg.label.label_name = label_name;
  208|  56.9k|        return arg;
  209|  56.9k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   663k|    {
  453|   663k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   663k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|  7.75M|    {
   24|  7.75M|        switch (token.length().unsafe())
   25|  7.75M|        {
   26|       |            // 1 character OpCodes
   27|  1.07M|            case 1: {
  ------------------
  |  Branch (27:13): [True: 1.07M, False: 6.68M]
  ------------------
   28|  1.07M|                const char c1 = token[0u];
   29|       |
   30|  1.07M|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 290k, False: 781k]
  ------------------
   31|   290k|                {
   32|   290k|                    return OpCode::J;
   33|   290k|                }
   34|   781k|                break;
   35|  1.07M|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|  1.18M|            case 2: {
  ------------------
  |  Branch (38:13): [True: 1.18M, False: 6.57M]
  ------------------
   39|  1.18M|                const char c1 = token[0u];
   40|  1.18M|                const char c2 = token[1u];
   41|       |
   42|  1.18M|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 671k, False: 508k]
  ------------------
   43|  1.18M|                {
   44|  67.7k|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 67.7k, False: 1.11M]
  ------------------
   45|  83.5k|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 15.8k, False: 1.16M]
  ------------------
   46|  83.5k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 17.4k, False: 66.0k]
  ------------------
   47|  17.4k|                        {
   48|  17.4k|                            return OpCode::JR;
   49|  17.4k|                        }
   50|  66.0k|                        break;
   51|       |
   52|  91.6k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 91.6k, False: 1.08M]
  ------------------
   53|   175k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 83.6k, False: 1.09M]
  ------------------
   54|   175k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 72.8k, False: 102k]
  ------------------
   55|   175k|                        {
   56|  4.73k|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 4.73k, False: 170k]
  ------------------
   57|  18.5k|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 13.7k, False: 161k]
  ------------------
   58|  18.5k|                                return OpCode::LB;
   59|  4.60k|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 4.60k, False: 170k]
  ------------------
   60|  14.5k|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 9.95k, False: 165k]
  ------------------
   61|  14.5k|                                return OpCode::LD;
   62|  11.8k|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 11.8k, False: 163k]
  ------------------
   63|  30.2k|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 18.4k, False: 156k]
  ------------------
   64|  30.2k|                                return OpCode::LF;
   65|  5.51k|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 5.51k, False: 169k]
  ------------------
   66|  18.4k|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 12.9k, False: 162k]
  ------------------
   67|  18.4k|                                return OpCode::LH;
   68|  5.83k|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 5.83k, False: 169k]
  ------------------
   69|  20.5k|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 14.7k, False: 160k]
  ------------------
   70|  20.5k|                                return OpCode::LW;
   71|   175k|                        }
   72|  72.8k|                        break;
   73|  72.8k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 7.42k, False: 1.17M]
  ------------------
   74|  32.8k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 25.4k, False: 1.15M]
  ------------------
   75|  32.8k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 6.10k, False: 26.7k]
  ------------------
   76|  6.10k|                        {
   77|  6.10k|                            return OpCode::OR;
   78|  6.10k|                        }
   79|  26.7k|                        break;
   80|   108k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 108k, False: 1.07M]
  ------------------
   81|   217k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 108k, False: 1.07M]
  ------------------
   82|   217k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 82.5k, False: 134k]
  ------------------
   83|   217k|                        {
   84|  8.15k|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 8.15k, False: 209k]
  ------------------
   85|  23.1k|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 14.9k, False: 202k]
  ------------------
   86|  23.1k|                                return OpCode::SB;
   87|  44.7k|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 44.7k, False: 172k]
  ------------------
   88|  55.9k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 11.1k, False: 206k]
  ------------------
   89|  55.9k|                                return OpCode::SD;
   90|  13.4k|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 13.4k, False: 203k]
  ------------------
   91|  16.1k|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 2.69k, False: 214k]
  ------------------
   92|  16.1k|                                return OpCode::SF;
   93|  8.53k|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 8.53k, False: 208k]
  ------------------
   94|  27.5k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 18.9k, False: 198k]
  ------------------
   95|  27.5k|                                return OpCode::SH;
   96|  7.40k|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 7.40k, False: 209k]
  ------------------
   97|  11.9k|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 4.55k, False: 212k]
  ------------------
   98|  11.9k|                                return OpCode::SW;
   99|   217k|                        }
  100|  82.5k|                        break;
  101|  1.18M|                }
  102|   920k|                break;
  103|  1.18M|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|  1.70M|            case 3: {
  ------------------
  |  Branch (106:13): [True: 1.70M, False: 6.05M]
  ------------------
  107|  1.70M|                const char c1 = token[0u];
  108|  1.70M|                const char c2 = token[1u];
  109|  1.70M|                const char c3 = token[2u];
  110|       |
  111|  1.70M|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 495k, False: 1.21M]
  ------------------
  112|  1.70M|                {
  113|  65.2k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 65.2k, False: 1.64M]
  ------------------
  114|  83.6k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 18.4k, False: 1.68M]
  ------------------
  115|  83.6k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 30.7k, False: 52.9k]
  |  Branch (115:29): [True: 17.9k, False: 65.7k]
  |  Branch (115:45): [True: 17.9k, False: 12.7k]
  ------------------
  116|  17.9k|                        {
  117|  17.9k|                            return OpCode::ADD;
  118|  17.9k|                        }
  119|  65.7k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 24.1k, False: 41.5k]
  |  Branch (119:34): [True: 17.2k, False: 48.4k]
  |  Branch (119:50): [True: 17.2k, False: 6.89k]
  ------------------
  120|  17.2k|                        {
  121|  17.2k|                            return OpCode::AND;
  122|  17.2k|                        }
  123|  48.4k|                        break;
  124|       |
  125|  48.4k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 15.4k, False: 1.69M]
  ------------------
  126|  37.2k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 21.8k, False: 1.68M]
  ------------------
  127|  37.2k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 24.5k, False: 12.7k]
  |  Branch (127:29): [True: 12.9k, False: 24.3k]
  |  Branch (127:45): [True: 12.9k, False: 11.5k]
  ------------------
  128|  12.9k|                        {
  129|  12.9k|                            return OpCode::DIV;
  130|  12.9k|                        }
  131|  24.3k|                        break;
  132|       |
  133|  27.3k|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 27.3k, False: 1.67M]
  ------------------
  134|  69.1k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 41.8k, False: 1.66M]
  ------------------
  135|  69.1k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 48.9k, False: 20.2k]
  ------------------
  136|  48.9k|                        {
  137|  48.9k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 18.2k, False: 30.6k]
  ------------------
  138|  18.2k|                            {
  139|  18.2k|                                return OpCode::EQD;
  140|  18.2k|                            }
  141|  30.6k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 26.8k, False: 3.79k]
  ------------------
  142|  26.8k|                            {
  143|  26.8k|                                return OpCode::EQF;
  144|  26.8k|                            }
  145|  48.9k|                        }
  146|  24.0k|                        break;
  147|       |
  148|  53.2k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 53.2k, False: 1.65M]
  ------------------
  149|   121k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 68.4k, False: 1.63M]
  ------------------
  150|   121k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 57.0k, False: 64.5k]
  ------------------
  151|  57.0k|                        {
  152|  57.0k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 27.9k, False: 29.0k]
  ------------------
  153|  27.9k|                            {
  154|  27.9k|                                return OpCode::GED;
  155|  27.9k|                            }
  156|  29.0k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 25.3k, False: 3.77k]
  ------------------
  157|  25.3k|                            {
  158|  25.3k|                                return OpCode::GEF;
  159|  25.3k|                            }
  160|  57.0k|                        }
  161|  64.5k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 50.0k, False: 14.5k]
  ------------------
  162|  50.0k|                        {
  163|  50.0k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 9.53k, False: 40.4k]
  ------------------
  164|  9.53k|                            {
  165|  9.53k|                                return OpCode::GTD;
  166|  9.53k|                            }
  167|  40.4k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 27.6k, False: 12.8k]
  ------------------
  168|  27.6k|                            {
  169|  27.6k|                                return OpCode::GTF;
  170|  27.6k|                            }
  171|  40.4k|                        }
  172|  31.2k|                        break;
  173|       |
  174|  72.8k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 72.8k, False: 1.63M]
  ------------------
  175|  92.0k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 19.2k, False: 1.68M]
  ------------------
  176|  92.0k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 44.8k, False: 47.2k]
  |  Branch (176:29): [True: 21.3k, False: 70.7k]
  |  Branch (176:45): [True: 21.3k, False: 23.4k]
  ------------------
  177|  21.3k|                        {
  178|  21.3k|                            return OpCode::JAL;
  179|  21.3k|                        }
  180|  70.7k|                        break;
  181|       |
  182|   200k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 200k, False: 1.50M]
  ------------------
  183|   266k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 65.9k, False: 1.64M]
  ------------------
  184|   266k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 29.2k, False: 236k]
  ------------------
  185|   266k|                        {
  186|  5.76k|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 5.76k, False: 260k]
  ------------------
  187|  27.3k|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 21.5k, False: 244k]
  ------------------
  188|  27.3k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 19.6k, False: 7.63k]
  ------------------
  189|  19.6k|                                {
  190|  19.6k|                                    return OpCode::LBU;
  191|  19.6k|                                }
  192|  7.63k|                                break;
  193|       |
  194|  41.8k|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 41.8k, False: 224k]
  ------------------
  195|  60.3k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 18.4k, False: 247k]
  ------------------
  196|  60.3k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 25.5k, False: 34.7k]
  ------------------
  197|  25.5k|                                {
  198|  25.5k|                                    return OpCode::LED;
  199|  25.5k|                                }
  200|  34.7k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 23.0k, False: 11.6k]
  ------------------
  201|  23.0k|                                {
  202|  23.0k|                                    return OpCode::LEF;
  203|  23.0k|                                }
  204|  11.6k|                                break;
  205|       |
  206|  29.0k|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 29.0k, False: 236k]
  ------------------
  207|  52.0k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 22.9k, False: 243k]
  ------------------
  208|  52.0k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 21.9k, False: 30.1k]
  ------------------
  209|  21.9k|                                {
  210|  21.9k|                                    return OpCode::LHI;
  211|  21.9k|                                }
  212|  30.1k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 14.9k, False: 15.2k]
  ------------------
  213|  14.9k|                                {
  214|  14.9k|                                    return OpCode::LHU;
  215|  14.9k|                                }
  216|  15.2k|                                break;
  217|       |
  218|  15.2k|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 9.70k, False: 256k]
  ------------------
  219|  75.0k|                            case 't':
  ------------------
  |  Branch (219:29): [True: 65.3k, False: 200k]
  ------------------
  220|  75.0k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 33.7k, False: 41.2k]
  ------------------
  221|  33.7k|                                {
  222|  33.7k|                                    return OpCode::LTD;
  223|  33.7k|                                }
  224|  41.2k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 25.0k, False: 16.2k]
  ------------------
  225|  25.0k|                                {
  226|  25.0k|                                    return OpCode::LTF;
  227|  25.0k|                                }
  228|  16.2k|                                break;
  229|       |
  230|  16.2k|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 4.99k, False: 261k]
  ------------------
  231|  21.9k|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 16.9k, False: 249k]
  ------------------
  232|  21.9k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 7.02k, False: 14.9k]
  ------------------
  233|  7.02k|                                {
  234|  7.02k|                                    return OpCode::LWU;
  235|  7.02k|                                }
  236|  14.9k|                                break;
  237|   266k|                        }
  238|  95.0k|                        break;
  239|       |
  240|  95.0k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 41.7k, False: 1.66M]
  ------------------
  241|  76.9k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 35.1k, False: 1.67M]
  ------------------
  242|  76.9k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 37.6k, False: 39.2k]
  ------------------
  243|  37.6k|                        {
  244|  37.6k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 12.8k, False: 24.7k]
  ------------------
  245|  12.8k|                            {
  246|  12.8k|                                return OpCode::NED;
  247|  12.8k|                            }
  248|  24.7k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 9.24k, False: 15.5k]
  ------------------
  249|  9.24k|                            {
  250|  9.24k|                                return OpCode::NEF;
  251|  9.24k|                            }
  252|  37.6k|                        }
  253|  39.2k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 27.9k, False: 11.2k]
  |  Branch (253:34): [True: 17.3k, False: 21.9k]
  |  Branch (253:50): [True: 17.3k, False: 10.6k]
  ------------------
  254|  17.3k|                        {
  255|  17.3k|                            return OpCode::NOP;
  256|  17.3k|                        }
  257|       |
  258|  37.4k|                        break;
  259|       |
  260|  37.4k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 13.5k, False: 1.69M]
  ------------------
  261|  29.8k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 16.3k, False: 1.69M]
  ------------------
  262|  29.8k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 12.1k, False: 17.7k]
  |  Branch (262:29): [True: 9.95k, False: 19.8k]
  |  Branch (262:45): [True: 9.95k, False: 2.17k]
  ------------------
  263|  9.95k|                        {
  264|  9.95k|                            return OpCode::ORI;
  265|  9.95k|                        }
  266|  19.8k|                        break;
  267|       |
  268|   259k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 259k, False: 1.44M]
  ------------------
  269|   389k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 129k, False: 1.57M]
  ------------------
  270|   389k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 42.5k, False: 346k]
  ------------------
  271|   389k|                        {
  272|  15.1k|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 15.1k, False: 374k]
  ------------------
  273|  37.6k|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 22.5k, False: 366k]
  ------------------
  274|  37.6k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 14.8k, False: 22.7k]
  ------------------
  275|  14.8k|                                {
  276|  14.8k|                                    return OpCode::SBU;
  277|  14.8k|                                }
  278|  22.7k|                                break;
  279|       |
  280|  22.7k|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 17.8k, False: 371k]
  ------------------
  281|  25.0k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 7.13k, False: 382k]
  ------------------
  282|  25.0k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 6.89k, False: 18.1k]
  ------------------
  283|  6.89k|                                {
  284|  6.89k|                                    return OpCode::SEQ;
  285|  6.89k|                                }
  286|  18.1k|                                break;
  287|       |
  288|  36.8k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 36.8k, False: 352k]
  ------------------
  289|  44.4k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 7.59k, False: 381k]
  ------------------
  290|  44.4k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 15.3k, False: 29.1k]
  ------------------
  291|  15.3k|                                {
  292|  15.3k|                                    return OpCode::SGE;
  293|  15.3k|                                }
  294|  29.1k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 18.6k, False: 10.5k]
  ------------------
  295|  18.6k|                                {
  296|  18.6k|                                    return OpCode::SGT;
  297|  18.6k|                                }
  298|  10.5k|                                break;
  299|       |
  300|  10.5k|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 5.63k, False: 383k]
  ------------------
  301|  19.3k|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 13.7k, False: 375k]
  ------------------
  302|  19.3k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 13.5k, False: 5.80k]
  ------------------
  303|  13.5k|                                {
  304|  13.5k|                                    return OpCode::SHU;
  305|  13.5k|                                }
  306|  5.80k|                                break;
  307|       |
  308|  48.5k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 48.5k, False: 340k]
  ------------------
  309|  91.3k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 42.7k, False: 346k]
  ------------------
  310|  91.3k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 17.6k, False: 73.6k]
  ------------------
  311|  91.3k|                                {
  312|  3.86k|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 3.86k, False: 87.4k]
  ------------------
  313|  9.23k|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 5.37k, False: 85.9k]
  ------------------
  314|  9.23k|                                        return OpCode::SLA;
  315|       |
  316|  16.0k|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 16.0k, False: 75.2k]
  ------------------
  317|  26.4k|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 10.3k, False: 80.9k]
  ------------------
  318|  26.4k|                                        return OpCode::SLE;
  319|       |
  320|  6.51k|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 6.51k, False: 84.7k]
  ------------------
  321|  25.5k|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 19.0k, False: 72.2k]
  ------------------
  322|  25.5k|                                        return OpCode::SLL;
  323|       |
  324|  6.32k|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 6.32k, False: 84.9k]
  ------------------
  325|  12.4k|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 6.13k, False: 85.1k]
  ------------------
  326|  12.4k|                                        return OpCode::SLT;
  327|  91.3k|                                }
  328|  17.6k|                                break;
  329|       |
  330|  17.6k|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 13.9k, False: 375k]
  ------------------
  331|  18.2k|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 4.26k, False: 385k]
  ------------------
  332|  18.2k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 13.5k, False: 4.67k]
  ------------------
  333|  13.5k|                                {
  334|  13.5k|                                    return OpCode::SNE;
  335|  13.5k|                                }
  336|  4.67k|                                break;
  337|       |
  338|  11.2k|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 11.2k, False: 378k]
  ------------------
  339|  71.8k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 60.5k, False: 328k]
  ------------------
  340|  71.8k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 22.1k, False: 49.6k]
  ------------------
  341|  22.1k|                                {
  342|  22.1k|                                    return OpCode::SRA;
  343|  22.1k|                                }
  344|  49.6k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 39.9k, False: 9.68k]
  ------------------
  345|  39.9k|                                {
  346|  39.9k|                                    return OpCode::SRL;
  347|  39.9k|                                }
  348|  9.68k|                                break;
  349|       |
  350|  11.9k|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 11.9k, False: 377k]
  ------------------
  351|  23.4k|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 11.4k, False: 377k]
  ------------------
  352|  23.4k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 13.3k, False: 10.0k]
  ------------------
  353|  13.3k|                                {
  354|  13.3k|                                    return OpCode::SUB;
  355|  13.3k|                                }
  356|  10.0k|                                break;
  357|       |
  358|  12.2k|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 12.2k, False: 377k]
  ------------------
  359|  15.3k|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 3.18k, False: 386k]
  ------------------
  360|  15.3k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 11.1k, False: 4.29k]
  ------------------
  361|  11.1k|                                {
  362|  11.1k|                                    return OpCode::SWU;
  363|  11.1k|                                }
  364|  4.29k|                                break;
  365|   389k|                        }
  366|       |
  367|   162k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 16.0k, False: 1.69M]
  ------------------
  368|   190k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 28.8k, False: 1.67M]
  ------------------
  369|   190k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 49.2k, False: 141k]
  |  Branch (369:29): [True: 25.2k, False: 165k]
  |  Branch (369:45): [True: 25.2k, False: 23.9k]
  ------------------
  370|  25.2k|                        {
  371|  25.2k|                            return OpCode::XOR;
  372|  25.2k|                        }
  373|   165k|                        break;
  374|  1.70M|                }
  375|  1.01M|                break;
  376|  1.70M|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  1.80M|            case 4: {
  ------------------
  |  Branch (379:13): [True: 1.80M, False: 5.95M]
  ------------------
  380|  1.80M|                const char c1 = token[0u];
  381|  1.80M|                const char c2 = token[1u];
  382|  1.80M|                const char c3 = token[2u];
  383|  1.80M|                const char c4 = token[3u];
  384|       |
  385|  1.80M|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 460k, False: 1.34M]
  ------------------
  386|  1.80M|                {
  387|   141k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 141k, False: 1.66M]
  ------------------
  388|   176k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 34.7k, False: 1.77M]
  ------------------
  389|   176k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 8.37k, False: 167k]
  ------------------
  390|   176k|                        {
  391|  60.5k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 60.5k, False: 115k]
  ------------------
  392|   121k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 61.4k, False: 114k]
  ------------------
  393|   121k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 106k, False: 15.9k]
  ------------------
  394|   106k|                                {
  395|   106k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 27.1k, False: 78.8k]
  ------------------
  396|   106k|                                    {
  397|  9.28k|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 9.28k, False: 96.7k]
  ------------------
  398|  20.1k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 10.8k, False: 95.1k]
  ------------------
  399|  20.1k|                                            return OpCode::ADDD;
  400|       |
  401|  4.73k|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 4.73k, False: 101k]
  ------------------
  402|  14.6k|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 9.87k, False: 96.1k]
  ------------------
  403|  14.6k|                                            return OpCode::ADDF;
  404|       |
  405|  5.57k|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 5.57k, False: 100k]
  ------------------
  406|  18.2k|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 12.6k, False: 93.3k]
  ------------------
  407|  18.2k|                                            return OpCode::ADDI;
  408|       |
  409|  8.30k|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 8.30k, False: 97.7k]
  ------------------
  410|  25.8k|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 17.5k, False: 88.4k]
  ------------------
  411|  25.8k|                                            return OpCode::ADDU;
  412|   106k|                                    }
  413|   106k|                                }
  414|  43.0k|                                break;
  415|       |
  416|  43.0k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 40.5k, False: 135k]
  ------------------
  417|  45.8k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 5.36k, False: 170k]
  ------------------
  418|  45.8k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 40.7k, False: 5.14k]
  |  Branch (418:37): [True: 22.7k, False: 23.1k]
  |  Branch (418:53): [True: 22.7k, False: 17.9k]
  ------------------
  419|  22.7k|                                {
  420|  22.7k|                                    return OpCode::ANDI;
  421|  22.7k|                                }
  422|       |
  423|  23.1k|                                break;
  424|   176k|                        }
  425|  74.5k|                        break;
  426|       |
  427|   124k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 124k, False: 1.68M]
  ------------------
  428|   136k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 12.2k, False: 1.79M]
  ------------------
  429|   136k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 15.8k, False: 120k]
  ------------------
  430|   136k|                        {
  431|  16.3k|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 16.3k, False: 120k]
  ------------------
  432|  37.7k|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 21.3k, False: 115k]
  ------------------
  433|  37.7k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 25.8k, False: 11.8k]
  |  Branch (433:37): [True: 19.7k, False: 17.9k]
  |  Branch (433:53): [True: 19.7k, False: 6.10k]
  ------------------
  434|  19.7k|                                {
  435|  19.7k|                                    return OpCode::BEQZ;
  436|  19.7k|                                }
  437|  17.9k|                                break;
  438|       |
  439|  42.6k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 42.6k, False: 94.0k]
  ------------------
  440|  46.9k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 4.28k, False: 132k]
  ------------------
  441|  46.9k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 42.1k, False: 4.77k]
  ------------------
  442|  42.1k|                                {
  443|  42.1k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 20.2k, False: 21.8k]
  ------------------
  444|  20.2k|                                    {
  445|  20.2k|                                        return OpCode::BFPF;
  446|  20.2k|                                    }
  447|  21.8k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 17.7k, False: 4.16k]
  ------------------
  448|  17.7k|                                    {
  449|  17.7k|                                        return OpCode::BFPT;
  450|  17.7k|                                    }
  451|  42.1k|                                }
  452|  8.93k|                                break;
  453|       |
  454|  12.0k|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 12.0k, False: 124k]
  ------------------
  455|  36.1k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 24.1k, False: 112k]
  ------------------
  456|  36.1k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 25.8k, False: 10.3k]
  |  Branch (456:37): [True: 18.2k, False: 17.8k]
  |  Branch (456:53): [True: 18.2k, False: 7.51k]
  ------------------
  457|  18.2k|                                {
  458|  18.2k|                                    return OpCode::BNEZ;
  459|  18.2k|                                }
  460|   136k|                        }
  461|  60.6k|                        break;
  462|       |
  463|  60.6k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 24.2k, False: 1.78M]
  ------------------
  464|  99.2k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 75.0k, False: 1.73M]
  ------------------
  465|  99.2k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 88.1k, False: 11.1k]
  |  Branch (465:29): [True: 79.3k, False: 19.8k]
  |  Branch (465:45): [True: 79.3k, False: 8.78k]
  ------------------
  466|  79.3k|                        {
  467|  79.3k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 13.0k, False: 66.3k]
  ------------------
  468|  79.3k|                            {
  469|  9.49k|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 9.49k, False: 69.8k]
  ------------------
  470|  16.0k|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 6.56k, False: 72.8k]
  ------------------
  471|  16.0k|                                    return OpCode::DIVD;
  472|       |
  473|  9.05k|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 9.05k, False: 70.3k]
  ------------------
  474|  14.4k|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 5.39k, False: 73.9k]
  ------------------
  475|  14.4k|                                    return OpCode::DIVF;
  476|       |
  477|  9.06k|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 9.06k, False: 70.3k]
  ------------------
  478|  18.7k|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 9.68k, False: 69.7k]
  ------------------
  479|  18.7k|                                    return OpCode::DIVI;
  480|       |
  481|  5.91k|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 5.91k, False: 73.4k]
  ------------------
  482|  17.1k|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 11.2k, False: 68.1k]
  ------------------
  483|  17.1k|                                    return OpCode::DIVU;
  484|  79.3k|                            }
  485|  79.3k|                        }
  486|  32.8k|                        break;
  487|       |
  488|  32.8k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 15.8k, False: 1.79M]
  ------------------
  489|  42.5k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 26.6k, False: 1.77M]
  ------------------
  490|  42.5k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 32.5k, False: 9.93k]
  |  Branch (490:29): [True: 20.2k, False: 22.2k]
  |  Branch (490:45): [True: 23.5k, False: 9.07k]
  |  Branch (490:61): [True: 20.2k, False: 3.23k]
  ------------------
  491|  20.2k|                        {
  492|  20.2k|                            return OpCode::HALT;
  493|  20.2k|                        }
  494|  22.2k|                        break;
  495|       |
  496|  52.0k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 52.0k, False: 1.75M]
  ------------------
  497|  75.2k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 23.2k, False: 1.78M]
  ------------------
  498|  75.2k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 51.4k, False: 23.8k]
  |  Branch (498:29): [True: 12.5k, False: 62.7k]
  |  Branch (498:45): [True: 36.7k, False: 14.7k]
  |  Branch (498:61): [True: 12.5k, False: 24.1k]
  ------------------
  499|  12.5k|                        {
  500|  12.5k|                            return OpCode::JALR;
  501|  12.5k|                        }
  502|  62.7k|                        break;
  503|       |
  504|  62.7k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 41.0k, False: 1.76M]
  ------------------
  505|   104k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 63.5k, False: 1.74M]
  ------------------
  506|   104k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 46.1k, False: 58.4k]
  |  Branch (506:29): [True: 33.6k, False: 70.9k]
  |  Branch (506:45): [True: 33.6k, False: 12.4k]
  ------------------
  507|  33.6k|                        {
  508|  33.6k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 10.1k, False: 23.5k]
  ------------------
  509|  10.1k|                            {
  510|  10.1k|                                return OpCode::MOVD;
  511|  10.1k|                            }
  512|  23.5k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 19.8k, False: 3.63k]
  ------------------
  513|  19.8k|                            {
  514|  19.8k|                                return OpCode::MOVF;
  515|  19.8k|                            }
  516|  33.6k|                        }
  517|  70.9k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 53.4k, False: 17.4k]
  |  Branch (517:34): [True: 25.6k, False: 45.2k]
  |  Branch (517:50): [True: 30.7k, False: 22.7k]
  |  Branch (517:66): [True: 25.6k, False: 5.07k]
  ------------------
  518|  25.6k|                        {
  519|  25.6k|                            return OpCode::MULT;
  520|  25.6k|                        }
  521|  48.8k|                        break;
  522|       |
  523|   454k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 454k, False: 1.35M]
  ------------------
  524|   605k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 150k, False: 1.65M]
  ------------------
  525|   605k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 29.1k, False: 575k]
  ------------------
  526|   605k|                        {
  527|  25.8k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 25.8k, False: 579k]
  ------------------
  528|  53.2k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 27.4k, False: 577k]
  ------------------
  529|  53.2k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 34.9k, False: 18.3k]
  ------------------
  530|  34.9k|                                {
  531|  34.9k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 15.8k, False: 19.1k]
  ------------------
  532|  15.8k|                                    {
  533|  15.8k|                                        return OpCode::SEQI;
  534|  15.8k|                                    }
  535|  19.1k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 14.9k, False: 4.18k]
  ------------------
  536|  14.9k|                                    {
  537|  14.9k|                                        return OpCode::SEQU;
  538|  14.9k|                                    }
  539|  34.9k|                                }
  540|  22.5k|                                break;
  541|       |
  542|  78.7k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 78.7k, False: 526k]
  ------------------
  543|  90.0k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 11.3k, False: 593k]
  ------------------
  544|  90.0k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 44.4k, False: 45.5k]
  ------------------
  545|  44.4k|                                {
  546|  44.4k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 16.0k, False: 28.4k]
  ------------------
  547|  16.0k|                                    {
  548|  16.0k|                                        return OpCode::SGEI;
  549|  16.0k|                                    }
  550|  28.4k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 15.6k, False: 12.7k]
  ------------------
  551|  15.6k|                                    {
  552|  15.6k|                                        return OpCode::SGEU;
  553|  15.6k|                                    }
  554|  44.4k|                                }
  555|  45.5k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 38.0k, False: 7.51k]
  ------------------
  556|  38.0k|                                {
  557|  38.0k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 16.6k, False: 21.3k]
  ------------------
  558|  16.6k|                                    {
  559|  16.6k|                                        return OpCode::SGTI;
  560|  16.6k|                                    }
  561|  21.3k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 12.4k, False: 8.93k]
  ------------------
  562|  12.4k|                                    {
  563|  12.4k|                                        return OpCode::SGTU;
  564|  12.4k|                                    }
  565|  38.0k|                                }
  566|  29.1k|                                break;
  567|       |
  568|   103k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 103k, False: 501k]
  ------------------
  569|   175k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 71.7k, False: 533k]
  ------------------
  570|   175k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 12.6k, False: 162k]
  ------------------
  571|   175k|                                {
  572|  25.3k|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 25.3k, False: 149k]
  ------------------
  573|  32.3k|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 7.03k, False: 168k]
  ------------------
  574|  32.3k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 25.2k, False: 7.17k]
  ------------------
  575|  25.2k|                                        {
  576|  25.2k|                                            return OpCode::SLAI;
  577|  25.2k|                                        }
  578|  7.17k|                                        break;
  579|       |
  580|  21.3k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 21.3k, False: 153k]
  ------------------
  581|  53.7k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 32.4k, False: 142k]
  ------------------
  582|  53.7k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 15.4k, False: 38.2k]
  ------------------
  583|  15.4k|                                        {
  584|  15.4k|                                            return OpCode::SLEI;
  585|  15.4k|                                        }
  586|  38.2k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 15.3k, False: 22.9k]
  ------------------
  587|  15.3k|                                        {
  588|  15.3k|                                            return OpCode::SLEU;
  589|  15.3k|                                        }
  590|  22.9k|                                        break;
  591|       |
  592|  22.9k|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 9.59k, False: 165k]
  ------------------
  593|  13.3k|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 3.75k, False: 171k]
  ------------------
  594|  13.3k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 8.23k, False: 5.12k]
  ------------------
  595|  8.23k|                                        {
  596|  8.23k|                                            return OpCode::SLLI;
  597|  8.23k|                                        }
  598|  5.12k|                                        break;
  599|       |
  600|  15.9k|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 15.9k, False: 159k]
  ------------------
  601|  63.0k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 47.0k, False: 128k]
  ------------------
  602|  63.0k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 26.5k, False: 36.4k]
  ------------------
  603|  26.5k|                                        {
  604|  26.5k|                                            return OpCode::SLTI;
  605|  26.5k|                                        }
  606|  36.4k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 16.4k, False: 20.0k]
  ------------------
  607|  16.4k|                                        {
  608|  16.4k|                                            return OpCode::SLTU;
  609|  16.4k|                                        }
  610|  20.0k|                                        break;
  611|   175k|                                }
  612|       |
  613|   113k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 45.4k, False: 559k]
  ------------------
  614|   127k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 13.8k, False: 591k]
  ------------------
  615|   127k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 77.6k, False: 49.6k]
  ------------------
  616|  77.6k|                                {
  617|  77.6k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 17.2k, False: 60.3k]
  ------------------
  618|  17.2k|                                    {
  619|  17.2k|                                        return OpCode::SNEI;
  620|  17.2k|                                    }
  621|  60.3k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 18.6k, False: 41.7k]
  ------------------
  622|  18.6k|                                    {
  623|  18.6k|                                        return OpCode::SNEU;
  624|  18.6k|                                    }
  625|  77.6k|                                }
  626|  91.4k|                                break;
  627|       |
  628|  91.4k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 27.1k, False: 577k]
  ------------------
  629|  83.0k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 55.8k, False: 549k]
  ------------------
  630|  83.0k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 32.9k, False: 50.0k]
  |  Branch (630:37): [True: 19.7k, False: 63.2k]
  |  Branch (630:53): [True: 19.7k, False: 13.1k]
  ------------------
  631|  19.7k|                                {
  632|  19.7k|                                    return OpCode::SRAI;
  633|  19.7k|                                }
  634|  63.2k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 42.9k, False: 20.2k]
  |  Branch (634:42): [True: 21.8k, False: 41.3k]
  |  Branch (634:58): [True: 21.8k, False: 21.0k]
  ------------------
  635|  21.8k|                                {
  636|  21.8k|                                    return OpCode::SRLI;
  637|  21.8k|                                }
  638|  41.3k|                                break;
  639|       |
  640|  55.3k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 55.3k, False: 549k]
  ------------------
  641|   115k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 59.7k, False: 545k]
  ------------------
  642|   115k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 106k, False: 8.45k]
  ------------------
  643|   106k|                                {
  644|   106k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 11.7k, False: 94.9k]
  ------------------
  645|   106k|                                    {
  646|  11.4k|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 11.4k, False: 95.2k]
  ------------------
  647|  19.8k|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 8.40k, False: 98.2k]
  ------------------
  648|  19.8k|                                            return OpCode::SUBD;
  649|       |
  650|  9.31k|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 9.31k, False: 97.3k]
  ------------------
  651|  22.5k|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 13.2k, False: 93.3k]
  ------------------
  652|  22.5k|                                            return OpCode::SUBF;
  653|       |
  654|  9.71k|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 9.71k, False: 96.9k]
  ------------------
  655|  24.9k|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 15.2k, False: 91.3k]
  ------------------
  656|  24.9k|                                            return OpCode::SUBI;
  657|       |
  658|  14.6k|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 14.6k, False: 91.9k]
  ------------------
  659|  27.5k|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 12.9k, False: 93.7k]
  ------------------
  660|  27.5k|                                            return OpCode::SUBU;
  661|   106k|                                    }
  662|   106k|                                }
  663|  20.1k|                                break;
  664|   605k|                        }
  665|   233k|                        break;
  666|       |
  667|   233k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 54.0k, False: 1.75M]
  ------------------
  668|  60.0k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 6.01k, False: 1.80M]
  ------------------
  669|  60.0k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 52.0k, False: 7.97k]
  |  Branch (669:29): [True: 13.3k, False: 46.6k]
  |  Branch (669:45): [True: 38.4k, False: 13.6k]
  |  Branch (669:61): [True: 13.3k, False: 25.0k]
  ------------------
  670|  13.3k|                        {
  671|  13.3k|                            return OpCode::TRAP;
  672|  13.3k|                        }
  673|  46.6k|                        break;
  674|  46.6k|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 32.9k, False: 1.77M]
  ------------------
  675|  46.2k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 13.2k, False: 1.79M]
  ------------------
  676|  46.2k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 33.3k, False: 12.8k]
  |  Branch (676:29): [True: 14.9k, False: 31.2k]
  |  Branch (676:45): [True: 21.6k, False: 11.6k]
  |  Branch (676:61): [True: 14.9k, False: 6.72k]
  ------------------
  677|  14.9k|                        {
  678|  14.9k|                            return OpCode::XORI;
  679|  14.9k|                        }
  680|  31.2k|                        break;
  681|  1.80M|                }
  682|  1.07M|                break;
  683|  1.80M|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|  1.07M|            case 5: {
  ------------------
  |  Branch (686:13): [True: 1.01M, False: 6.74M]
  ------------------
  687|  1.01M|                const char c1 = token[0u];
  688|  1.01M|                const char c2 = token[1u];
  689|  1.01M|                const char c3 = token[2u];
  690|  1.01M|                const char c4 = token[3u];
  691|  1.01M|                const char c5 = token[4u];
  692|       |
  693|  1.01M|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 316k, False: 694k]
  ------------------
  694|  1.01M|                {
  695|  65.5k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 65.5k, False: 945k]
  ------------------
  696|  89.4k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 23.9k, False: 987k]
  ------------------
  697|  89.4k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 76.4k, False: 13.0k]
  |  Branch (697:29): [True: 18.6k, False: 70.7k]
  |  Branch (697:45): [True: 62.9k, False: 13.5k]
  |  Branch (697:61): [True: 47.7k, False: 15.1k]
  |  Branch (697:77): [True: 18.6k, False: 29.0k]
  ------------------
  698|  18.6k|                        {
  699|  18.6k|                            return OpCode::ADDUI;
  700|  18.6k|                        }
  701|  70.7k|                        break;
  702|       |
  703|  70.7k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 22.9k, False: 988k]
  ------------------
  704|  84.1k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 61.1k, False: 950k]
  ------------------
  705|  84.1k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 71.1k, False: 12.9k]
  |  Branch (705:29): [True: 19.3k, False: 64.7k]
  |  Branch (705:45): [True: 60.7k, False: 10.4k]
  |  Branch (705:61): [True: 36.3k, False: 24.3k]
  |  Branch (705:77): [True: 19.3k, False: 16.9k]
  ------------------
  706|  19.3k|                        {
  707|  19.3k|                            return OpCode::DIVUI;
  708|  19.3k|                        }
  709|  64.7k|                        break;
  710|       |
  711|  73.8k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 73.8k, False: 937k]
  ------------------
  712|   135k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 61.8k, False: 949k]
  ------------------
  713|   135k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 109k, False: 25.8k]
  |  Branch (713:29): [True: 89.8k, False: 45.7k]
  |  Branch (713:45): [True: 98.1k, False: 11.6k]
  |  Branch (713:61): [True: 89.8k, False: 8.28k]
  ------------------
  714|  89.8k|                        {
  715|  89.8k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 10.8k, False: 78.9k]
  ------------------
  716|  89.8k|                            {
  717|  12.0k|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 12.0k, False: 77.8k]
  ------------------
  718|  19.2k|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 7.22k, False: 82.6k]
  ------------------
  719|  19.2k|                                    return OpCode::MULTD;
  720|       |
  721|  7.21k|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 7.21k, False: 82.6k]
  ------------------
  722|  13.1k|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 5.95k, False: 83.9k]
  ------------------
  723|  13.1k|                                    return OpCode::MULTF;
  724|       |
  725|  8.06k|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 8.06k, False: 81.8k]
  ------------------
  726|  18.5k|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 10.4k, False: 79.3k]
  ------------------
  727|  18.5k|                                    return OpCode::MULTI;
  728|       |
  729|  14.1k|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 14.1k, False: 75.7k]
  ------------------
  730|  27.9k|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 13.8k, False: 76.0k]
  ------------------
  731|  27.9k|                                    return OpCode::MULTU;
  732|  89.8k|                            }
  733|  89.8k|                        }
  734|  56.6k|                        break;
  735|       |
  736|   236k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 236k, False: 774k]
  ------------------
  737|   385k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 148k, False: 862k]
  ------------------
  738|   385k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 26.2k, False: 359k]
  ------------------
  739|   385k|                        {
  740|  22.0k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 22.0k, False: 363k]
  ------------------
  741|  47.8k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 25.7k, False: 359k]
  ------------------
  742|  47.8k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 36.2k, False: 11.5k]
  |  Branch (742:37): [True: 20.1k, False: 27.6k]
  |  Branch (742:53): [True: 32.5k, False: 3.71k]
  |  Branch (742:69): [True: 20.1k, False: 12.3k]
  ------------------
  743|  20.1k|                                {
  744|  20.1k|                                    return OpCode::SEQUI;
  745|  20.1k|                                }
  746|  27.6k|                                break;
  747|       |
  748|  64.7k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 64.7k, False: 320k]
  ------------------
  749|  69.7k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 4.98k, False: 380k]
  ------------------
  750|  69.7k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 32.2k, False: 37.4k]
  |  Branch (750:37): [True: 13.9k, False: 55.8k]
  |  Branch (750:53): [True: 25.2k, False: 7.04k]
  |  Branch (750:69): [True: 13.9k, False: 11.3k]
  ------------------
  751|  13.9k|                                {
  752|  13.9k|                                    return OpCode::SGEUI;
  753|  13.9k|                                }
  754|  55.8k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 34.1k, False: 21.7k]
  |  Branch (754:42): [True: 18.5k, False: 37.2k]
  |  Branch (754:58): [True: 25.3k, False: 8.73k]
  |  Branch (754:74): [True: 18.5k, False: 6.80k]
  ------------------
  755|  18.5k|                                {
  756|  18.5k|                                    return OpCode::SGTUI;
  757|  18.5k|                                }
  758|  37.2k|                                break;
  759|       |
  760|  59.1k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 59.1k, False: 326k]
  ------------------
  761|  97.9k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 38.8k, False: 346k]
  ------------------
  762|  97.9k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 34.3k, False: 63.6k]
  |  Branch (762:37): [True: 16.1k, False: 81.8k]
  |  Branch (762:53): [True: 27.3k, False: 7.05k]
  |  Branch (762:69): [True: 16.1k, False: 11.1k]
  ------------------
  763|  16.1k|                                {
  764|  16.1k|                                    return OpCode::SLEUI;
  765|  16.1k|                                }
  766|  81.8k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 49.5k, False: 32.3k]
  |  Branch (766:42): [True: 28.9k, False: 52.8k]
  |  Branch (766:58): [True: 38.7k, False: 10.7k]
  |  Branch (766:74): [True: 28.9k, False: 9.76k]
  ------------------
  767|  28.9k|                                {
  768|  28.9k|                                    return OpCode::SLTUI;
  769|  28.9k|                                }
  770|  52.8k|                                break;
  771|       |
  772|  52.8k|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 21.0k, False: 364k]
  ------------------
  773|  43.7k|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 22.7k, False: 362k]
  ------------------
  774|  43.7k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 38.7k, False: 5.03k]
  |  Branch (774:37): [True: 17.0k, False: 26.7k]
  |  Branch (774:53): [True: 25.7k, False: 13.0k]
  |  Branch (774:69): [True: 17.0k, False: 8.70k]
  ------------------
  775|  17.0k|                                {
  776|  17.0k|                                    return OpCode::SNEUI;
  777|  17.0k|                                }
  778|  26.7k|                                break;
  779|       |
  780|  28.4k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 28.4k, False: 357k]
  ------------------
  781|   100k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 71.6k, False: 314k]
  ------------------
  782|   100k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 92.3k, False: 7.67k]
  |  Branch (782:37): [True: 15.2k, False: 84.7k]
  |  Branch (782:53): [True: 34.8k, False: 57.4k]
  |  Branch (782:69): [True: 15.2k, False: 19.6k]
  ------------------
  783|  15.2k|                                {
  784|  15.2k|                                    return OpCode::SUBUI;
  785|  15.2k|                                }
  786|  84.7k|                                break;
  787|   385k|                        }
  788|       |
  789|   255k|                        break;
  790|  1.01M|                }
  791|       |
  792|   764k|                break;
  793|  1.01M|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|   764k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 513k, False: 7.24M]
  ------------------
  797|   513k|                const char c1 = token[0u];
  798|   513k|                const char c2 = token[1u];
  799|   513k|                const char c3 = token[2u];
  800|   513k|                const char c4 = token[3u];
  801|   513k|                const char c5 = token[4u];
  802|   513k|                const char c6 = token[5u];
  803|       |
  804|   513k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 207k, False: 306k]
  |  Branch (804:21): [True: 184k, False: 329k]
  |  Branch (804:37): [True: 194k, False: 12.3k]
  |  Branch (804:53): [True: 184k, False: 9.93k]
  ------------------
  805|   184k|                {
  806|   184k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 7.89k, False: 176k]
  ------------------
  807|   184k|                    {
  808|  51.8k|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 51.8k, False: 132k]
  ------------------
  809|  69.9k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 18.0k, False: 166k]
  ------------------
  810|  69.9k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 51.4k, False: 18.5k]
  ------------------
  811|  51.4k|                            {
  812|  51.4k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 18.4k, False: 33.0k]
  ------------------
  813|  18.4k|                                {
  814|  18.4k|                                    return OpCode::CVTD2F;
  815|  18.4k|                                }
  816|  33.0k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 15.9k, False: 17.0k]
  ------------------
  817|  15.9k|                                {
  818|  15.9k|                                    return OpCode::CVTD2I;
  819|  15.9k|                                }
  820|  51.4k|                            }
  821|  35.5k|                            break;
  822|       |
  823|  43.5k|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 43.5k, False: 141k]
  ------------------
  824|  58.5k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 14.9k, False: 169k]
  ------------------
  825|  58.5k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 39.9k, False: 18.5k]
  ------------------
  826|  39.9k|                            {
  827|  39.9k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 13.4k, False: 26.4k]
  ------------------
  828|  13.4k|                                {
  829|  13.4k|                                    return OpCode::CVTF2D;
  830|  13.4k|                                }
  831|  26.4k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 14.0k, False: 12.3k]
  ------------------
  832|  14.0k|                                {
  833|  14.0k|                                    return OpCode::CVTF2I;
  834|  14.0k|                                }
  835|  39.9k|                            }
  836|  30.9k|                            break;
  837|       |
  838|  30.9k|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 11.9k, False: 172k]
  ------------------
  839|  48.4k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 36.4k, False: 148k]
  ------------------
  840|  48.4k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 29.4k, False: 19.0k]
  ------------------
  841|  29.4k|                            {
  842|  29.4k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 10.1k, False: 19.2k]
  ------------------
  843|  10.1k|                                {
  844|  10.1k|                                    return OpCode::CVTI2D;
  845|  10.1k|                                }
  846|  19.2k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 9.27k, False: 9.98k]
  ------------------
  847|  9.27k|                                {
  848|  9.27k|                                    return OpCode::CVTI2F;
  849|  9.27k|                                }
  850|  29.4k|                            }
  851|   184k|                    }
  852|   184k|                }
  853|   329k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 102k, False: 226k]
  |  Branch (853:26): [True: 14.7k, False: 314k]
  |  Branch (853:42): [True: 75.8k, False: 26.9k]
  |  Branch (853:58): [True: 67.0k, False: 8.78k]
  |  Branch (853:74): [True: 58.7k, False: 8.31k]
  ------------------
  854|   329k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 42.7k, False: 15.9k]
  |  Branch (854:42): [True: 14.7k, False: 28.0k]
  ------------------
  855|  14.7k|                {
  856|  14.7k|                    return OpCode::MULTUI;
  857|  14.7k|                }
  858|   417k|                break;
  859|   513k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|   417k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 261k, False: 7.49M]
  ------------------
  863|   261k|                const char c1 = token[0u];
  864|   261k|                const char c2 = token[1u];
  865|   261k|                const char c3 = token[2u];
  866|   261k|                const char c4 = token[3u];
  867|   261k|                const char c5 = token[4u];
  868|   261k|                const char c6 = token[5u];
  869|   261k|                const char c7 = token[6u];
  870|       |
  871|   261k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 111k, False: 150k]
  |  Branch (871:21): [True: 91.9k, False: 169k]
  |  Branch (871:37): [True: 96.3k, False: 15.3k]
  |  Branch (871:53): [True: 91.9k, False: 4.36k]
  ------------------
  872|  91.9k|                {
  873|  91.9k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 40.4k, False: 51.5k]
  |  Branch (873:25): [True: 15.9k, False: 76.0k]
  |  Branch (873:41): [True: 28.1k, False: 12.2k]
  |  Branch (873:54): [True: 23.1k, False: 5.03k]
  |  Branch (873:70): [True: 15.9k, False: 7.20k]
  ------------------
  874|  15.9k|                    {
  875|  15.9k|                        return OpCode::MOVI2FP;
  876|  15.9k|                    }
  877|  76.0k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 50.3k, False: 25.6k]
  |  Branch (877:25): [True: 16.9k, False: 59.0k]
  |  Branch (877:41): [True: 43.0k, False: 7.33k]
  |  Branch (877:57): [True: 25.8k, False: 17.1k]
  |  Branch (877:70): [True: 16.9k, False: 8.90k]
  ------------------
  878|  16.9k|                    {
  879|  16.9k|                        return OpCode::MOVFP2I;
  880|  16.9k|                    }
  881|  76.0k|                }
  882|   228k|                break;
  883|   261k|            }
  884|       |
  885|   228k|            default: {
  ------------------
  |  Branch (885:13): [True: 204k, False: 7.55M]
  ------------------
  886|   204k|                break;
  887|   261k|            }
  888|  7.75M|        }
  889|       |
  890|       |        // None found
  891|  5.40M|        return OpCode::NONE;
  892|  7.75M|    }
_ZN3dlx3iceEcc:
   17|  10.4M|    {
   18|  10.4M|        constexpr const char diff = 'a' - 'A';
   19|  10.4M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 3.08M, False: 7.36M]
  |  Branch (19:28): [True: 2.85M, False: 4.50M]
  ------------------
   20|  10.4M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  7.81M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|   120k|    {
  195|   120k|        ParseError err;
  196|       |
  197|   120k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|   120k|        err.m_LineNumber                           = line_number;
  199|   120k|        err.m_Column                               = column;
  200|   120k|        err.unexpected_argument_type.expected_type = expected_type;
  201|   120k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|   120k|        return err;
  204|   120k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|   120k|    {
  209|   120k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|   120k|                                                         token.GetColumn().unsafe(), expected_type,
  211|   120k|                                                         actual_type);
  212|   120k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|  7.71k|    {
  218|  7.71k|        ParseError err;
  219|       |
  220|  7.71k|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|  7.71k|        err.m_LineNumber        = line_number;
  222|  7.71k|        err.m_Column            = column;
  223|  7.71k|        err.invalid_number.text = text;
  224|       |
  225|  7.71k|        return err;
  226|  7.71k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|  7.71k|    {
  230|  7.71k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|  7.71k|                                                token.GetColumn().unsafe(), token.GetText());
  232|  7.71k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|     42|    {
  237|     42|        ParseError err;
  238|       |
  239|     42|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|     42|        err.m_LineNumber = line_number;
  241|     42|        err.m_Column     = column;
  242|       |
  243|     42|        return err;
  244|     42|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|     42|    {
  249|     42|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|     42|                                                                     token.GetColumn().unsafe());
  251|     42|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  3.26M|    {
  257|  3.26M|        ParseError err;
  258|       |
  259|  3.26M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  3.26M|        err.m_LineNumber                   = line_number;
  261|  3.26M|        err.m_Column                       = column;
  262|  3.26M|        err.unexpected_token.expected_type = expected_type;
  263|  3.26M|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  3.26M|        return err;
  266|  3.26M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  3.26M|    {
  271|  3.26M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  3.26M|                                                  token.GetColumn().unsafe(), expected_type,
  273|  3.26M|                                                  token.GetType());
  274|  3.26M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|   846k|    {
  279|   846k|        ParseError err;
  280|       |
  281|   846k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|   846k|        err.m_LineNumber                   = line_number;
  283|   846k|        err.m_Column                       = column;
  284|   846k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|   846k|        return err;
  287|   846k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|  10.7k|    {
  291|  10.7k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|  10.7k|                                                    token.GetColumn().unsafe(), token.GetText());
  293|  10.7k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  1.58M|    {
  298|  1.58M|        ParseError err;
  299|       |
  300|  1.58M|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  1.58M|        err.m_LineNumber                       = line_number;
  302|  1.58M|        err.m_Column                           = column;
  303|  1.58M|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  1.58M|        return err;
  306|  1.58M|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  1.58M|    {
  311|  1.58M|        return ConstructInvalidLabelIdentifierParseError(
  312|  1.58M|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  1.58M|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|   515k|    {
  319|   515k|        ParseError err;
  320|       |
  321|   515k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|   515k|        err.m_LineNumber                     = line_number;
  323|   515k|        err.m_Column                         = column;
  324|   515k|        err.label_already_defined.label_name = label_name;
  325|   515k|        err.label_already_defined.at_line    = at_line;
  326|   515k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|   515k|        return err;
  329|   515k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|   515k|    {
  334|   515k|        return ConstructLabelAlreadyDefinedParseError(
  335|   515k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|   515k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|   515k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|   889k|    {
  342|   889k|        ParseError err;
  343|       |
  344|   889k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|   889k|        err.m_LineNumber = line_number;
  346|   889k|        err.m_Column     = column;
  347|       |
  348|   889k|        return err;
  349|   889k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|   889k|    {
  354|   889k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|   889k|                                                        token.GetColumn().unsafe());
  356|   889k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|   210k|    {
  362|   210k|        ParseError err;
  363|       |
  364|   210k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|   210k|        err.m_LineNumber               = line_number;
  366|   210k|        err.m_Column                   = column;
  367|   210k|        err.too_few_arguments.required = required;
  368|   210k|        err.too_few_arguments.provided = provided;
  369|       |
  370|   210k|        return err;
  371|   210k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|   210k|    {
  376|   210k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|   210k|                                                  token.GetColumn().unsafe(), required, provided);
  378|   210k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|   235k|    {
  383|   235k|        ParseError err;
  384|       |
  385|   235k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|   235k|        err.m_LineNumber           = line_number;
  387|   235k|        err.m_Column               = column;
  388|   235k|        err.empty_label.label_name = label_name;
  389|       |
  390|   235k|        return err;
  391|   235k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|   235k|    {
  395|   235k|        return ConstructEmptyLabelParseError(
  396|   235k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|   235k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 203k, False: 31.8k]
  ------------------
  398|   203k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|   235k|                        token.GetText());
  400|   235k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|   146k|    {
  405|   146k|        ParseError err;
  406|       |
  407|   146k|        err.m_Type       = ParseError::Type::TooManyComma;
  408|   146k|        err.m_LineNumber = line_number;
  409|   146k|        err.m_Column     = column;
  410|       |
  411|   146k|        return err;
  412|   146k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|   146k|    {
  416|   146k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|   146k|                                               token.GetColumn().unsafe());
  418|   146k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  7.81M|    {
   19|  7.81M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  7.81M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  53.8k|    {
  181|  53.8k|        ParsedProgram program;
  182|       |
  183|  53.8k|        program.m_Tokens = tokens;
  184|       |
  185|  53.8k|        phi::boolean line_has_instruction{false};
  186|  53.8k|        phi::usize   label_count{0u};
  187|       |
  188|  9.25M|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 9.19M, False: 53.8k]
  ------------------
  189|  9.19M|        {
  190|  9.19M|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|  9.19M|            switch (current_token.GetType())
  195|  9.19M|            {
  196|       |                // Ignore comments
  197|  54.3k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 54.3k, False: 9.14M]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  54.3k|                    break;
  200|       |
  201|  1.36M|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 1.36M, False: 7.83M]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  1.36M|                    line_has_instruction = false;
  204|  1.36M|                    break;
  205|       |
  206|  3.70M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 3.70M, False: 5.49M]
  ------------------
  207|  3.70M|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 613k, False: 3.09M]
  ------------------
  208|   613k|                    {
  209|   613k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|   613k|                                current_token, Token::Type::NewLine));
  211|   613k|                        break;
  212|   613k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  3.09M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 968k, False: 2.12M]
  ------------------
  217|   968k|                    {
  218|   968k|                        program.AddParseError(
  219|   968k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|   968k|                        break;
  221|   968k|                    }
  222|       |
  223|  2.12M|                    phi::string_view label_name = current_token.GetText();
  224|  2.12M|                    label_name.remove_suffix(1u);
  225|       |
  226|  2.12M|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 836k, False: 1.28M]
  ------------------
  227|   836k|                    {
  228|   836k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|   836k|                                current_token.GetLineNumber().unsafe(),
  230|   836k|                                current_token.GetColumn().unsafe(), label_name));
  231|   836k|                        break;
  232|   836k|                    }
  233|       |
  234|  1.28M|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 510k, False: 776k]
  ------------------
  235|   510k|                    {
  236|   510k|                        program.AddParseError(
  237|   510k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|   510k|                        break;
  239|   510k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|   776k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 515k, False: 261k]
  ------------------
  243|   515k|                    {
  244|       |                        // Find first defintions of label
  245|   515k|                        const Token* first_label_definition =
  246|   515k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   515k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|   515k|                                    {
  249|   515k|                                        phi::string_view token_label_name = t.GetText();
  250|   515k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   515k|                                        if (token_label_name == label_name)
  253|   515k|                                        {
  254|   515k|                                            return true;
  255|   515k|                                        }
  256|   515k|                                    }
  257|       |
  258|   515k|                                    return false;
  259|   515k|                                });
  260|       |
  261|   515k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|   515k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|   515k|                                current_token, *first_label_definition));
  265|   515k|                        break;
  266|   515k|                    }
  267|       |
  268|   261k|                    program.m_JumpData[label_name] =
  269|   261k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|   261k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|   261k|                    break;
  276|   776k|                }
  277|       |
  278|  1.55M|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 1.55M, False: 7.64M]
  ------------------
  279|  1.55M|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 889k, False: 663k]
  ------------------
  280|   889k|                    {
  281|   889k|                        program.AddParseError(
  282|   889k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|   889k|                        break;
  284|   889k|                    }
  285|       |
  286|   663k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|   663k|                    PHI_ASSERT(current_token.HasHint());
  290|   663k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|   663k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|   663k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|   663k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|   663k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|   663k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|   663k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|   663k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|   663k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  1.25M|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 1.17M, False: 80.9k]
  ------------------
  312|  1.17M|                    {
  313|       |                        // Get next token
  314|  1.17M|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 5.53k, False: 1.17M]
  ------------------
  315|  5.53k|                        {
  316|  5.53k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|  5.53k|                                    current_token, number_of_argument_required.unsafe(),
  318|  5.53k|                                    argument_num.unsafe()));
  319|  5.53k|                            break;
  320|  5.53k|                        }
  321|       |
  322|  1.17M|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  1.17M|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 448k, False: 721k]
  ------------------
  326|   448k|                        {
  327|   448k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 146k, False: 302k]
  ------------------
  328|   146k|                            {
  329|   146k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|   146k|                            }
  331|       |
  332|   448k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|   448k|                            continue;
  335|   448k|                        }
  336|       |
  337|   721k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 205k, False: 516k]
  ------------------
  338|   205k|                        {
  339|   205k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|   205k|                                    token, number_of_argument_required.unsafe(),
  341|   205k|                                    argument_num.unsafe()));
  342|   205k|                            break;
  343|   205k|                        }
  344|       |
  345|   516k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|   516k|                                parse_instruction_argument(
  347|   516k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|   516k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 371k, False: 144k]
  ------------------
  349|   371k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|   371k|                            break;
  352|   371k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|   144k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|   144k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|   144k|                        argument_num++;
  359|   144k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|   144k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|   663k|                    program.m_Instructions.emplace_back(instruction);
  367|   663k|                    line_has_instruction = true;
  368|   663k|                    break;
  369|  1.55M|                }
  370|       |
  371|  2.52M|                default:
  ------------------
  |  Branch (371:17): [True: 2.52M, False: 6.67M]
  ------------------
  372|  2.52M|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  2.52M|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 1.28M, False: 1.23M]
  ------------------
  374|  1.28M|                    {
  375|  1.28M|                        expected_token_type = Token::Type::NewLine;
  376|  1.28M|                    }
  377|       |
  378|  2.52M|                    program.AddParseError(
  379|  2.52M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  2.52M|                    break;
  381|  9.19M|            }
  382|  9.19M|        }
  383|       |
  384|       |        // Check for empty labels
  385|  53.8k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 16.2k, False: 37.6k]
  ------------------
  386|  16.2k|        {
  387|   312k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 296k, False: 16.2k]
  ------------------
  388|   296k|            {
  389|   296k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|   296k|                const Token& token = *it;
  392|   296k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 235k, False: 61.2k]
  ------------------
  393|   235k|                {
  394|   235k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|   235k|                    --label_count;
  396|   235k|                }
  397|   296k|            }
  398|  16.2k|        }
  399|       |
  400|  53.8k|        return program;
  401|  53.8k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  53.8k|    {
  405|  53.8k|        TokenStream tokens = Tokenize(source);
  406|  53.8k|        return Parse(tokens);
  407|  53.8k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|   516k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|   516k|        switch (token.GetType())
   37|   516k|        {
   38|  72.0k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 72.0k, False: 444k]
  ------------------
   39|  72.0k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 39.0k, False: 33.0k]
  ------------------
   40|  72.0k|                                          ArgumentType::AddressDisplacement))
   41|  39.0k|                {
   42|  39.0k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|  39.0k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|  39.0k|                    return {};
   46|  39.0k|                }
   47|       |
   48|       |                // Get address displacement
   49|  33.0k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  33.0k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  33.0k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 42, False: 32.9k]
  ------------------
   54|     42|                {
   55|     42|                    program.AddParseError(
   56|     42|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|     42|                    return {};
   58|     42|                }
   59|       |
   60|  32.9k|                auto         it           = tokens.current_position();
   61|  32.9k|                const Token& first_token  = tokens.consume();
   62|  32.9k|                const Token& second_token = tokens.consume();
   63|  32.9k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  32.9k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 12.8k, False: 20.1k]
  ------------------
   66|  12.8k|                {
   67|  12.8k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|  12.8k|                            first_token, Token::Type::OpenBracket));
   69|  12.8k|                    return {};
   70|  12.8k|                }
   71|       |
   72|       |                // Second token is the register
   73|  20.1k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 5.74k, False: 14.4k]
  ------------------
   74|  5.74k|                {
   75|  5.74k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|  5.74k|                            second_token, Token::Type::RegisterInt));
   77|  5.74k|                    return {};
   78|  5.74k|                }
   79|       |
   80|  14.4k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 5.97k, False: 8.43k]
  ------------------
   81|  5.97k|                {
   82|  5.97k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|  5.97k|                            third_token, Token::Type::ClosingBracket));
   84|  5.97k|                    return {};
   85|  5.97k|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|  8.43k|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|  8.43k|                return ConstructInstructionArgumentAddressDisplacement(
   94|  8.43k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|  14.4k|            }
   96|  59.8k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 59.8k, False: 456k]
  ------------------
   97|  59.8k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 4.15k, False: 55.6k]
  ------------------
   98|  4.15k|                {
   99|  4.15k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|  4.15k|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|  4.15k|                    return {};
  102|  4.15k|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  55.6k|                return ConstructInstructionArgumentRegisterInt(
  108|  55.6k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  59.8k|            }
  110|  29.8k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 29.8k, False: 486k]
  ------------------
  111|  29.8k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 13.3k, False: 16.4k]
  ------------------
  112|  13.3k|                {
  113|  13.3k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|  13.3k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|  13.3k|                    return {};
  116|  13.3k|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  16.4k|                return ConstructInstructionArgumentRegisterFloat(
  122|  16.4k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  29.8k|            }
  124|  10.7k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 10.7k, False: 505k]
  ------------------
  125|  10.7k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|  10.7k|                return {};
  128|  29.8k|            }
  129|   215k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 215k, False: 300k]
  ------------------
  130|       |                // Parse as Label
  131|   215k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 51.1k, False: 164k]
  ------------------
  132|  51.1k|                {
  133|  51.1k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  51.1k|                            token, expected_argument_type, ArgumentType::Label));
  135|  51.1k|                    return {};
  136|  51.1k|                }
  137|       |
  138|   164k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 164k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|   164k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 107k, False: 56.9k]
  ------------------
  145|   107k|                {
  146|   107k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|   107k|                    return {};
  148|   107k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  56.9k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|   164k|            }
  154|  27.9k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 27.9k, False: 488k]
  ------------------
  155|  27.9k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 13.0k, False: 14.8k]
  ------------------
  156|  13.0k|                {
  157|  13.0k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|  13.0k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|  13.0k|                    return {};
  160|  13.0k|                }
  161|       |
  162|  14.8k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 7.14k, False: 7.71k]
  ------------------
  163|  7.14k|                {
  164|  7.14k|                    return ConstructInstructionArgumentImmediateValue(
  165|  7.14k|                            static_cast<std::int16_t>(token.GetHint()));
  166|  7.14k|                }
  167|       |
  168|  7.71k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|  7.71k|                return {};
  170|  14.8k|            }
  171|       |
  172|   100k|            default:
  ------------------
  |  Branch (172:13): [True: 100k, False: 415k]
  ------------------
  173|   100k|                program.AddParseError(
  174|   100k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|   100k|                return {};
  176|   516k|        }
  177|   516k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  9.78M|                                tokens.find_first_token_if([&](const Token& t) {
  247|  9.78M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 6.86M, False: 2.92M]
  ------------------
  248|  6.86M|                                    {
  249|  6.86M|                                        phi::string_view token_label_name = t.GetText();
  250|  6.86M|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  6.86M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 515k, False: 6.34M]
  ------------------
  253|   515k|                                        {
  254|   515k|                                            return true;
  255|   515k|                                        }
  256|  6.86M|                                    }
  257|       |
  258|  9.27M|                                    return false;
  259|  9.78M|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    401|    {
  354|    401|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 401]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    401|        m_CurrentProgram = &program;
  361|       |
  362|    401|        m_ProgramCounter               = 0u;
  363|    401|        m_Halted                       = false;
  364|    401|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    401|        m_LastRaisedException          = Exception::None;
  366|    401|        m_CurrentStepCount             = 0u;
  367|       |
  368|    401|        return true;
  369|    401|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|  7.96M|    {
   13|  7.96M|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 1.32M, False: 6.64M]
  ------------------
   14|  1.32M|        {
   15|  1.32M|            const char first_char = token[0u];
   16|  1.32M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 56.4k, False: 1.26M]
  |  Branch (16:38): [True: 84.5k, False: 1.18M]
  ------------------
   17|   140k|            {
   18|   140k|                const char second_char = token[1u];
   19|   140k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 136k, False: 4.62k]
  |  Branch (19:43): [True: 103k, False: 32.5k]
  ------------------
   20|   103k|                {
   21|   103k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|   103k|                }
   23|   140k|            }
   24|  1.32M|        }
   25|  6.64M|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 1.77M, False: 4.86M]
  ------------------
   26|  1.77M|        {
   27|  1.77M|            const char first_char = token[0u];
   28|  1.77M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 100k, False: 1.67M]
  |  Branch (28:38): [True: 19.7k, False: 1.65M]
  ------------------
   29|   120k|            {
   30|   120k|                const char second_char = token[1u];
   31|   120k|                const char third_char  = token[2u];
   32|       |
   33|   120k|                switch (second_char)
   34|   120k|                {
   35|  24.2k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 24.2k, False: 96.0k]
  ------------------
   36|  24.2k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 11.8k, False: 12.4k]
  |  Branch (36:50): [True: 6.14k, False: 5.67k]
  ------------------
   37|  6.14k|                        {
   38|  6.14k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|  6.14k|                        }
   40|  18.0k|                        break;
   41|  24.2k|                    }
   42|  47.6k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 47.6k, False: 72.6k]
  ------------------
   43|  47.6k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 28.7k, False: 18.9k]
  |  Branch (43:50): [True: 18.9k, False: 9.76k]
  ------------------
   44|  18.9k|                        {
   45|  18.9k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|  18.9k|                        }
   47|  28.6k|                        break;
   48|  47.6k|                    }
   49|  28.6k|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 24.5k, False: 95.7k]
  ------------------
   50|  24.5k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 4.85k, False: 19.6k]
  |  Branch (50:50): [True: 10.4k, False: 9.23k]
  ------------------
   51|  15.3k|                        {
   52|  15.3k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|  15.3k|                        }
   54|  9.23k|                        break;
   55|  24.5k|                    }
   56|  23.8k|                    default: {
  ------------------
  |  Branch (56:21): [True: 23.8k, False: 96.4k]
  ------------------
   57|  23.8k|                        break;
   58|  24.5k|                    }
   59|   120k|                }
   60|   120k|            }
   61|  1.77M|        }
   62|       |
   63|  7.82M|        return IntRegisterID::None;
   64|  7.96M|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|  7.82M|    {
   68|  7.82M|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 1.22M, False: 6.60M]
  ------------------
   69|  1.22M|        {
   70|  1.22M|            const char first_char = token[0u];
   71|  1.22M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 36.6k, False: 1.18M]
  |  Branch (71:38): [True: 28.3k, False: 1.15M]
  ------------------
   72|  64.9k|            {
   73|  64.9k|                const char second_char = token[1u];
   74|  64.9k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 57.5k, False: 7.39k]
  |  Branch (74:43): [True: 39.5k, False: 18.0k]
  ------------------
   75|  39.5k|                {
   76|  39.5k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  39.5k|                }
   78|  64.9k|            }
   79|  1.22M|        }
   80|  6.60M|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 1.73M, False: 4.86M]
  ------------------
   81|  1.73M|        {
   82|  1.73M|            const char first_char = token[0u];
   83|  1.73M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 91.3k, False: 1.64M]
  |  Branch (83:38): [True: 26.1k, False: 1.61M]
  ------------------
   84|   117k|            {
   85|   117k|                const char second_char = token[1u];
   86|   117k|                const char third_char  = token[2u];
   87|       |
   88|   117k|                switch (second_char)
   89|   117k|                {
   90|  25.3k|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 25.3k, False: 92.0k]
  ------------------
   91|  25.3k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 20.4k, False: 4.97k]
  |  Branch (91:50): [True: 6.09k, False: 14.3k]
  ------------------
   92|  6.09k|                        {
   93|  6.09k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|  6.09k|                        }
   95|  19.2k|                        break;
   96|  25.3k|                    }
   97|  34.8k|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 34.8k, False: 82.5k]
  ------------------
   98|  34.8k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 11.2k, False: 23.6k]
  |  Branch (98:50): [True: 8.20k, False: 3.02k]
  ------------------
   99|  8.20k|                        {
  100|  8.20k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|  8.20k|                        }
  102|  26.6k|                        break;
  103|  34.8k|                    }
  104|  26.6k|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 23.8k, False: 93.6k]
  ------------------
  105|  23.8k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 11.9k, False: 11.9k]
  |  Branch (105:50): [True: 2.18k, False: 9.76k]
  ------------------
  106|  14.0k|                        {
  107|  14.0k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|  14.0k|                        }
  109|  9.76k|                        break;
  110|  23.8k|                    }
  111|  33.3k|                    default: {
  ------------------
  |  Branch (111:21): [True: 33.3k, False: 84.1k]
  ------------------
  112|  33.3k|                        break;
  113|  23.8k|                    }
  114|   117k|                }
  115|   117k|            }
  116|  1.73M|        }
  117|       |
  118|  7.75M|        return FloatRegisterID::None;
  119|  7.82M|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|  7.16M|    {
  123|  7.16M|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 1.53M, False: 5.63M]
  ------------------
  124|  1.53M|        {
  125|  1.53M|            const char c1 = token[0u];
  126|  1.53M|            const char c2 = token[1u];
  127|  1.53M|            const char c3 = token[2u];
  128|  1.53M|            const char c4 = token[3u];
  129|       |
  130|  1.53M|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 55.7k, False: 1.47M]
  |  Branch (130:34): [True: 28.1k, False: 1.44M]
  |  Branch (130:49): [True: 9.41k, False: 74.5k]
  |  Branch (130:62): [True: 46.8k, False: 27.6k]
  ------------------
  131|  1.53M|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 29.5k, False: 26.6k]
  |  Branch (131:34): [True: 16.8k, False: 9.77k]
  |  Branch (131:49): [True: 29.1k, False: 17.3k]
  |  Branch (131:62): [True: 68, False: 17.2k]
  ------------------
  132|  1.53M|        }
  133|       |
  134|  5.63M|        return false;
  135|  7.16M|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|  8.57M|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  1.88M|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  35.4M|    {
   41|  35.4M|        return m_Type;
   42|  35.4M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  26.7M|    {
   51|  26.7M|        return m_LineNumber;
   52|  26.7M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  50.4M|    {
   56|  50.4M|        return m_Column;
   57|  50.4M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  33.1M|    {
   61|  33.1M|        return m_Text.length();
   62|  33.1M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  15.2M|    {
   66|  15.2M|        return m_Text;
   67|  15.2M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   711k|    {
   80|   711k|        return m_HasHint;
   81|   711k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   783k|    {
   85|   783k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   783k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   783k|                   m_Type == Type::ImmediateInteger);
   88|   783k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   783k|        return m_Hint;
   91|   783k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  53.8k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  53.8k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  53.8k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  33.0k|    {
   51|  33.0k|        auto it = m_Iterator;
   52|   132k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 99.0k, False: 32.9k]
  ------------------
   53|  99.0k|        {
   54|  99.0k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 42, False: 99.0k]
  ------------------
   55|     42|            {
   56|     42|                return false;
   57|     42|            }
   58|  99.0k|        }
   59|       |
   60|  32.9k|        return true;
   61|  33.0k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  10.4M|    {
   65|  10.4M|        return m_Iterator != m_Tokens.end();
   66|  10.4M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  10.4M|    {
   70|  10.4M|        return m_Iterator == m_Tokens.end();
   71|  10.4M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  10.4M|    {
   85|  10.4M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  10.4M|        return *m_Iterator++;
   91|  10.4M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  32.9k|    {
  164|  32.9k|        return m_Iterator;
  165|  32.9k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  8.43k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  8.43k|        m_Iterator = it;
  179|  8.43k|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  53.8k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  53.8k|        return m_Tokens.begin();
  188|  53.8k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  53.8k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  53.8k|        return m_Tokens.end();
  206|  53.8k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  16.2k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  16.2k|        return m_Tokens.rbegin();
  224|  16.2k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|   296k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|   296k|        return m_Tokens.rend();
  233|   296k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  53.8k|    {
   66|  53.8k|        TokenStream tokens;
   67|       |
   68|  53.8k|        phi::string_view current_token;
   69|       |
   70|  53.8k|        phi::u64 current_line_number{1u};
   71|  53.8k|        phi::u64 current_column{1u};
   72|  53.8k|        phi::u64 token_begin{0u};
   73|       |
   74|  53.8k|        phi::boolean parsing_comment{false};
   75|       |
   76|  26.8M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 26.7M, False: 53.8k]
  ------------------
   77|  26.7M|        {
   78|  26.7M|            const char c{source.at(i)};
   79|       |
   80|  26.7M|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 1.56M, False: 25.1M]
  ------------------
   81|  1.56M|            {
   82|  1.56M|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 471k, False: 1.09M]
  ------------------
   83|   471k|                {
   84|       |                    // Skip empty lines
   85|   471k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|   471k|                                        current_line_number, current_column);
   87|       |
   88|   471k|                    parsing_comment = false;
   89|   471k|                    current_line_number += 1u;
   90|   471k|                    current_column = 1u;
   91|   471k|                    continue;
   92|   471k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  1.09M|                tokens.emplace_back(ParseToken(
   96|  1.09M|                        source.substring_view(
   97|  1.09M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  1.09M|                                current_token.length()),
   99|  1.09M|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  1.09M|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  1.09M|                                    current_line_number, current_column);
  103|       |
  104|  1.09M|                current_token   = phi::string_view{};
  105|  1.09M|                parsing_comment = false;
  106|  1.09M|                current_line_number += 1u;
  107|  1.09M|                current_column = 0u;
  108|  1.09M|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|  25.1M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 46.9k, False: 25.1M]
  |  Branch (110:34): [True: 50.3k, False: 25.0M]
  ------------------
  111|  97.3k|            {
  112|  97.3k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 15.9k, False: 81.3k]
  ------------------
  113|  15.9k|                {
  114|  15.9k|                    token_begin = i;
  115|  15.9k|                }
  116|  81.3k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 71.0k, False: 10.2k]
  ------------------
  117|  71.0k|                {
  118|  71.0k|                    tokens.emplace_back(ParseToken(
  119|  71.0k|                            source.substring_view(
  120|  71.0k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  71.0k|                                    current_token.length()),
  122|  71.0k|                            current_line_number, current_column - current_token.length()));
  123|  71.0k|                    token_begin   = i;
  124|  71.0k|                    current_token = phi::string_view{};
  125|  71.0k|                }
  126|       |
  127|  97.3k|                parsing_comment = true;
  128|  97.3k|                current_token   = source.substring_view(
  129|  97.3k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  97.3k|                        current_token.length() + 1u);
  131|  97.3k|            }
  132|  25.0M|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 166k, False: 24.9M]
  ------------------
  133|   166k|            {
  134|       |                // simply append the character
  135|   166k|                current_token = source.substring_view(
  136|   166k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|   166k|                        current_token.length() + 1u);
  138|   166k|            }
  139|  24.9M|            else
  140|  24.9M|            {
  141|       |                // Not parsing a comment
  142|  24.9M|                switch (c)
  143|  24.9M|                {
  144|   393k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 393k, False: 24.5M]
  ------------------
  145|   907k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 513k, False: 24.4M]
  ------------------
  146|   907k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 0, False: 24.9M]
  ------------------
  147|   907k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 194k, False: 713k]
  ------------------
  148|   194k|                        {
  149|   194k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|   194k|                            continue;
  152|   194k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|   713k|                        tokens.emplace_back(ParseToken(
  156|   713k|                                source.substring_view(
  157|   713k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|   713k|                                        current_token.length()),
  159|   713k|                                current_line_number, current_column - current_token.length()));
  160|   713k|                        current_token = phi::string_view{};
  161|   713k|                        break;
  162|  2.86M|                    case ':':
  ------------------
  |  Branch (162:21): [True: 2.86M, False: 22.0M]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  2.86M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 2.35M, False: 514k]
  ------------------
  165|  2.35M|                        {
  166|  2.35M|                            current_token = source.substring_view(
  167|  2.35M|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  2.35M|                                    current_token.length() + 1u);
  169|  2.35M|                            tokens.emplace_back(ParseToken(
  170|  2.35M|                                    source.substring_view(
  171|  2.35M|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  2.35M|                                                    token_begin),
  173|  2.35M|                                            current_token.length()),
  174|  2.35M|                                    current_line_number,
  175|  2.35M|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  2.35M|                            current_token = phi::string_view{};
  178|  2.35M|                        }
  179|   514k|                        else
  180|   514k|                        {
  181|       |                            // Orphan colon
  182|   514k|                            token_begin = i;
  183|       |
  184|   514k|                            tokens.emplace_back(
  185|   514k|                                    Token::Type::Colon,
  186|   514k|                                    source.substring_view(
  187|   514k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|   514k|                                                    token_begin),
  189|   514k|                                            1u),
  190|   514k|                                    current_line_number, current_column);
  191|   514k|                        }
  192|  2.86M|                        break;
  193|  1.75M|                    case ',':
  ------------------
  |  Branch (193:21): [True: 1.75M, False: 23.1M]
  ------------------
  194|  2.05M|                    case '(':
  ------------------
  |  Branch (194:21): [True: 298k, False: 24.6M]
  ------------------
  195|  2.40M|                    case ')':
  ------------------
  |  Branch (195:21): [True: 351k, False: 24.5M]
  ------------------
  196|  2.40M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 1.70M, False: 697k]
  ------------------
  197|  1.70M|                        {
  198|  1.70M|                            tokens.emplace_back(ParseToken(
  199|  1.70M|                                    source.substring_view(
  200|  1.70M|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  1.70M|                                                    token_begin),
  202|  1.70M|                                            current_token.length()),
  203|  1.70M|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  1.70M|                            current_token = phi::string_view{};
  206|  1.70M|                        }
  207|       |
  208|  2.40M|                        Token::Type type;
  209|  2.40M|                        switch (c)
  210|  2.40M|                        {
  211|  1.75M|                            case ',':
  ------------------
  |  Branch (211:29): [True: 1.75M, False: 649k]
  ------------------
  212|  1.75M|                                type = Token::Type::Comma;
  213|  1.75M|                                break;
  214|   298k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 298k, False: 2.10M]
  ------------------
  215|   298k|                                type = Token::Type::OpenBracket;
  216|   298k|                                break;
  217|   351k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 351k, False: 2.05M]
  ------------------
  218|   351k|                                type = Token::Type::ClosingBracket;
  219|   351k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 2.40M]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  2.40M|#endif
  225|  2.40M|                        }
  226|       |
  227|  2.40M|                        token_begin = i;
  228|       |
  229|  2.40M|                        tokens.emplace_back(
  230|  2.40M|                                type,
  231|  2.40M|                                source.substring_view(
  232|  2.40M|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  2.40M|                                        1u),
  234|  2.40M|                                current_line_number, current_column);
  235|  2.40M|                        break;
  236|       |
  237|  18.7M|                    default:
  ------------------
  |  Branch (237:21): [True: 18.7M, False: 6.17M]
  ------------------
  238|  18.7M|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 5.89M, False: 12.8M]
  ------------------
  239|  5.89M|                        {
  240|  5.89M|                            token_begin = i;
  241|  5.89M|                        }
  242|       |
  243|       |                        // simply append the character
  244|  18.7M|                        current_token = source.substring_view(
  245|  18.7M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|  18.7M|                                current_token.length() + 1u);
  247|  24.9M|                }
  248|  24.9M|            }
  249|       |
  250|  26.0M|            current_column += 1u;
  251|  26.0M|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  53.8k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 38.8k, False: 15.0k]
  ------------------
  255|  38.8k|        {
  256|  38.8k|            tokens.emplace_back(
  257|  38.8k|                    ParseToken(source.substring_view(
  258|  38.8k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  38.8k|                                       current_token.length()),
  260|  38.8k|                               current_line_number, current_column - current_token.length()));
  261|  38.8k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  53.8k|        tokens.finalize();
  265|       |
  266|  53.8k|        return tokens;
  267|  53.8k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|  5.97M|    {
   14|  5.97M|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 61.2k, False: 5.91M]
  |  Branch (14:13): [True: 56.8k, False: 5.92M]
  |  Branch (14:36): [True: 56.8k, False: 4.41k]
  ------------------
   15|  56.8k|        {
   16|  56.8k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  56.8k|            if (number)
  ------------------
  |  Branch (18:17): [True: 10.2k, False: 46.6k]
  ------------------
   19|  10.2k|            {
   20|  10.2k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  10.2k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  10.2k|            }
   23|       |
   24|  46.6k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  56.8k|        }
   26|       |
   27|  5.92M|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 43.5k, False: 5.87M]
  |  Branch (27:13): [True: 87.0k, False: 5.83M]
  |  Branch (27:36): [True: 43.5k, False: 5.83M]
  ------------------
   28|  87.0k|        {
   29|  87.0k|            return {Token::Type::Comment, token, line_number, column};
   30|  87.0k|        }
   31|       |
   32|  5.83M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 137k, False: 5.69M]
  ------------------
   33|   137k|        {
   34|   137k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|   137k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|   137k|        }
   37|       |
   38|  5.69M|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 16.7k, False: 5.68M]
  ------------------
   39|  16.7k|        {
   40|  16.7k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  16.7k|        }
   42|       |
   43|  5.68M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 94.7k, False: 5.58M]
  ------------------
   44|  94.7k|        {
   45|  94.7k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  94.7k|                    static_cast<phi::uint32_t>(id)};
   47|  94.7k|        }
   48|       |
   49|  5.58M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 61.0k, False: 5.52M]
  ------------------
   50|  61.0k|        {
   51|  61.0k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  61.0k|                    static_cast<phi::uint32_t>(id)};
   53|  61.0k|        }
   54|       |
   55|  5.52M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 1.58M, False: 3.93M]
  ------------------
   56|  1.58M|        {
   57|  1.58M|            return {Token::Type::OpCode, token, line_number, column,
   58|  1.58M|                    static_cast<phi::uint32_t>(opcode)};
   59|  1.58M|        }
   60|       |
   61|  3.93M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  5.52M|    }

_ZN6ImVec2C2Ev:
  262|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

LLVMFuzzerTestOneInput:
   10|  53.8k|{
   11|  53.8k|    static dlxemu::Emulator emu;
   12|       |
   13|  53.8k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   14|       |
   15|  53.8k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   16|       |
   17|       |    // Parse it
   18|  53.8k|    editor.SetText(std::string(source.data(), source.length().unsafe()));
   19|  53.8k|    editor.m_FullText = editor.GetText();
   20|       |
   21|  53.8k|    emu.ParseProgram(editor.m_FullText);
   22|       |
   23|  53.8k|    editor.ColorizeInternal();
   24|       |
   25|  53.8k|    return 0;
   26|  53.8k|}


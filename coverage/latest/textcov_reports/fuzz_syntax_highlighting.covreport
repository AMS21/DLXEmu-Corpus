_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  196|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  201|   181k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  239|  36.2k|    {
  240|  36.2k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (240:13): [True: 18.9k, False: 17.3k]
  ------------------
  241|  18.9k|        {
  242|  18.9k|            return m_Line < other.m_Line;
  243|  18.9k|        }
  244|       |
  245|  17.3k|        return m_Column <= other.m_Column;
  246|  36.2k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  250|      1|    {
  251|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (251:13): [True: 0, False: 1]
  ------------------
  252|      0|        {
  253|      0|            return m_Line > other.m_Line;
  254|      0|        }
  255|       |
  256|      1|        return m_Column >= other.m_Column;
  257|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  264|  16.9M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  292|      1|    {
  293|      1|        Colorize();
  294|      1|        m_Lines.push_back(Line());
  295|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  298|      1|    {
  299|      1|        VerifyInternalState();
  300|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  348|  36.2k|    {
  349|  36.2k|        m_ErrorMarkers.clear();
  350|  36.2k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  413|  36.2k|    {
  414|  36.2k|        m_Breakpoints.clear();
  415|  36.2k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  493|  36.2k|    {
  494|  36.2k|        m_Lines.clear();
  495|  36.2k|        ResetState();
  496|  36.2k|        m_Lines.emplace_back(Line());
  497|       |
  498|  36.2k|        for (const char character : text)
  ------------------
  |  Branch (498:35): [True: 26.1M, False: 36.2k]
  ------------------
  499|  26.1M|        {
  500|  26.1M|            if (character == '\r' ||
  ------------------
  |  Branch (500:17): [True: 22.0k, False: 26.0M]
  |  Branch (500:17): [True: 8.12M, False: 17.9M]
  ------------------
  501|  26.1M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (501:18): [True: 9.50M, False: 16.5M]
  |  Branch (501:48): [True: 8.43M, False: 1.07M]
  |  Branch (501:69): [True: 8.10M, False: 331k]
  ------------------
  502|  8.12M|            {
  503|       |                // ignore the carriage return character and control characters
  504|  8.12M|            }
  505|  17.9M|            else if (character == '\n')
  ------------------
  |  Branch (505:22): [True: 1.07M, False: 16.9M]
  ------------------
  506|  1.07M|            {
  507|  1.07M|                m_Lines.emplace_back(Line());
  508|  1.07M|            }
  509|  16.9M|            else
  510|  16.9M|            {
  511|  16.9M|                m_Lines.back().emplace_back(
  512|  16.9M|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  513|  16.9M|            }
  514|  26.1M|        }
  515|       |
  516|  36.2k|        m_TextChanged = true;
  517|  36.2k|        m_ScrollToTop = true;
  518|       |
  519|  36.2k|        m_UndoBuffer.clear();
  520|  36.2k|        m_UndoIndex = 0u;
  521|       |
  522|  36.2k|        Colorize();
  523|  36.2k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  526|  36.2k|    {
  527|  36.2k|        const phi::u32 max_line = GetMaxLineNumber();
  528|       |
  529|  36.2k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  530|  36.2k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1493|      1|    {
 1494|       |        // Lines should never be empty
 1495|      1|        PHI_ASSERT(!m_Lines.empty());
 1496|       |
 1497|       |        // Verify Selection is still in a valid state
 1498|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1499|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1500|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1501|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1502|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1503|       |
 1504|       |        // Verify cursor position
 1505|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1506|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1507|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1508|       |
 1509|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1510|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1511|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1512|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1513|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1514|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1515|       |#endif
 1516|       |
 1517|       |        // Verify that all breakpoints are on existing lines
 1518|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1518:35): [True: 0, False: 1]
  ------------------
 1519|      0|        {
 1520|      0|            PHI_ASSERT(break_point != 0u);
 1521|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1522|      0|        }
 1523|       |
 1524|       |        // Verify that all error markers are on existing lines
 1525|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1525:34): [True: 0, False: 1]
  ------------------
 1526|      0|        {
 1527|      0|            const phi::u32 line_number = error_marker.first;
 1528|       |
 1529|      0|            PHI_ASSERT(line_number != 0u);
 1530|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1531|      0|        }
 1532|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1535|      1|    {
 1536|      1|        constexpr const static Palette palette = {{
 1537|      1|                0xff7f7f7f, // Default
 1538|      1|                0xffd69c56, // OpCode
 1539|      1|                0xff00ff00, // Register
 1540|      1|                0xff7070e0, // IntegerLiteral
 1541|      1|                0xff206020, // Comment
 1542|      1|                0xff101010, // Background
 1543|      1|                0xffe0e0e0, // Cursor
 1544|      1|                0x80a06020, // Selection
 1545|      1|                0x800020ff, // ErrorMarker
 1546|      1|                0x40f08000, // Breakpoint
 1547|      1|                0xff707000, // Line number
 1548|      1|                0x40000000, // Current line fill
 1549|      1|                0x40808080, // Current line fill (inactive)
 1550|      1|                0x40a0a0a0, // Current line edge
 1551|      1|        }};
 1552|       |
 1553|      1|        return palette;
 1554|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1721|  36.2k|    {
 1722|       |        // TODO: This is quite unreadable
 1723|  36.2k|        const phi::u32 to_line =
 1724|  36.2k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1724:17): [True: 36.2k, False: 0]
  ------------------
 1725|  36.2k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1726|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1727|       |
 1728|  36.2k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1729|  36.2k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1730|  36.2k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1731|  36.2k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1732|  36.2k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1838|  36.2k|    {
 1839|  36.2k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1840|  36.2k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1841|  36.2k|        PHI_ASSERT(start <= end);
 1842|       |
 1843|  36.2k|        std::string result;
 1844|       |
 1845|  36.2k|        phi::u32   lstart = start.m_Line;
 1846|  36.2k|        phi::u32   lend   = end.m_Line;
 1847|  36.2k|        phi::u32   istart = GetCharacterIndex(start);
 1848|  36.2k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1849|  36.2k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1850|  36.2k|        phi::usize size   = 0u;
 1851|       |
 1852|  1.14M|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1852:35): [True: 1.10M, False: 36.2k]
  ------------------
 1853|  1.10M|        {
 1854|  1.10M|            PHI_ASSERT(i < m_Lines.size());
 1855|  1.10M|            size += m_Lines[i.unsafe()].size();
 1856|  1.10M|        }
 1857|       |
 1858|  36.2k|        result.reserve((size + size / 8u).unsafe());
 1859|       |
 1860|  18.0M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1860:16): [True: 12.8M, False: 5.12M]
  |  Branch (1860:16): [True: 17.9M, False: 36.2k]
  |  Branch (1860:33): [True: 5.09M, False: 36.2k]
  ------------------
 1861|  17.9M|        {
 1862|  17.9M|            PHI_ASSERT(lstart < m_Lines.size());
 1863|       |
 1864|  17.9M|            const Line& line = m_Lines[lstart.unsafe()];
 1865|  17.9M|            if (istart < line.size())
  ------------------
  |  Branch (1865:17): [True: 16.9M, False: 1.07M]
  ------------------
 1866|  16.9M|            {
 1867|  16.9M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1868|  16.9M|                istart++;
 1869|  16.9M|            }
 1870|  1.07M|            else
 1871|  1.07M|            {
 1872|  1.07M|                istart = 0u;
 1873|  1.07M|                ++lstart;
 1874|       |
 1875|  1.07M|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1875:21): [True: 1.07M, False: 0]
  ------------------
 1876|  1.07M|                {
 1877|  1.07M|                    result += '\n';
 1878|  1.07M|                }
 1879|  1.07M|            }
 1880|  17.9M|        }
 1881|       |
 1882|  36.2k|        return result;
 1883|  36.2k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2421|  72.5k|    {
 2422|  72.5k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2423|       |
 2424|  72.5k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2425|  72.5k|        phi::u32    index = 0u;
 2426|  7.64M|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2426:35): [True: 7.60M, False: 38.1k]
  |  Branch (2426:35): [True: 7.57M, False: 72.5k]
  |  Branch (2426:58): [True: 7.57M, False: 34.4k]
  ------------------
 2427|  7.57M|        {
 2428|  7.57M|            PHI_ASSERT(index < line.size());
 2429|  7.57M|            const Char character = line[index.unsafe()].m_Char;
 2430|       |
 2431|  7.57M|            if (character == '\t')
  ------------------
  |  Branch (2431:17): [True: 158k, False: 7.41M]
  ------------------
 2432|   158k|            {
 2433|   158k|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2434|   158k|            }
 2435|  7.41M|            else
 2436|  7.41M|            {
 2437|  7.41M|                ++column;
 2438|  7.41M|            }
 2439|       |
 2440|  7.57M|            index += UTF8CharLength(character);
 2441|  7.57M|        }
 2442|       |
 2443|  72.5k|        return index;
 2444|  72.5k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2493|  36.2k|    {
 2494|  36.2k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2494:13): [True: 0, False: 36.2k]
  ------------------
 2495|      0|        {
 2496|      0|            return 0u;
 2497|      0|        }
 2498|       |
 2499|  36.2k|        const Line& line = m_Lines[line_number.unsafe()];
 2500|  36.2k|        phi::u32    col  = 0u;
 2501|       |
 2502|  7.60M|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2502:32): [True: 7.57M, False: 36.2k]
  ------------------
 2503|  7.57M|        {
 2504|  7.57M|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2505|  7.57M|            if (character == '\t')
  ------------------
  |  Branch (2505:17): [True: 158k, False: 7.41M]
  ------------------
 2506|   158k|            {
 2507|   158k|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2508|   158k|            }
 2509|  7.41M|            else
 2510|  7.41M|            {
 2511|  7.41M|                col++;
 2512|  7.41M|            }
 2513|       |
 2514|  7.57M|            i += UTF8CharLength(character);
 2515|  7.57M|        }
 2516|       |
 2517|  36.2k|        return col;
 2518|  36.2k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2521|  36.2k|    {
 2522|  36.2k|        PHI_ASSERT(!m_Lines.empty());
 2523|       |
 2524|  36.2k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2525|  36.2k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3660|  7.09M|    {
 3661|  7.09M|        PaletteIndex palette_index{PaletteIndex::Default};
 3662|       |
 3663|       |        // Determine palette color
 3664|  7.09M|        switch (token.GetType())
 3665|  7.09M|        {
 3666|  59.1k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3666:13): [True: 59.1k, False: 7.03M]
  ------------------
 3667|  59.1k|                palette_index = PaletteIndex::Comment;
 3668|  59.1k|                break;
 3669|  46.6k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3669:13): [True: 46.6k, False: 7.05M]
  ------------------
 3670|   140k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3670:13): [True: 94.3k, False: 7.00M]
  ------------------
 3671|   140k|                palette_index = PaletteIndex::IntegerLiteral;
 3672|   140k|                break;
 3673|  1.01M|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3673:13): [True: 1.01M, False: 6.07M]
  ------------------
 3674|  1.01M|                palette_index = PaletteIndex::OpCode;
 3675|  1.01M|                break;
 3676|  33.6k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3676:13): [True: 33.6k, False: 7.06M]
  ------------------
 3677|   108k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3677:13): [True: 75.3k, False: 7.02M]
  ------------------
 3678|   120k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3678:13): [True: 11.5k, False: 7.08M]
  ------------------
 3679|   120k|                palette_index = PaletteIndex::Register;
 3680|   120k|                break;
 3681|  1.07M|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3681:13): [True: 1.07M, False: 6.02M]
  ------------------
 3682|  1.07M|                return;
 3683|  4.68M|            default:
  ------------------
  |  Branch (3683:13): [True: 4.68M, False: 2.41M]
  ------------------
 3684|  4.68M|                break;
 3685|  7.09M|        }
 3686|       |
 3687|  6.02M|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3688|  6.02M|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3689|       |
 3690|  6.02M|        for (phi::u64 index{token.GetColumn() - 1u};
 3691|  22.3M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3691:14): [True: 16.2M, False: 6.02M]
  ------------------
 3692|  16.2M|        {
 3693|  16.2M|            PHI_ASSERT(index < line.size());
 3694|  16.2M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3695|  16.2M|        }
 3696|  6.02M|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3699|  36.2k|    {
 3700|  36.2k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3701|       |
 3702|  36.2k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3702:38): [True: 7.09M, False: 36.2k]
  ------------------
 3703|  7.09M|        {
 3704|  7.09M|            ColorizeToken(token);
 3705|  7.09M|        }
 3706|  36.2k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3709|  36.2k|    {
 3710|  36.2k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3711|  36.2k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3712|  36.2k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3713|       |
 3714|       |        // Clear breakpoints and markers
 3715|  36.2k|        ClearBreakPoints();
 3716|  36.2k|        ClearErrorMarkers();
 3717|  36.2k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  134|  7.57M|{
  135|  7.57M|    return UTF8CharLength(static_cast<char>(characater));
  136|  7.57M|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  104|  15.1M|{
  105|  15.1M|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (105:9): [True: 21.3k, False: 15.1M]
  ------------------
  106|  21.3k|    {
  107|  21.3k|        return 6_u8;
  108|  21.3k|    }
  109|       |
  110|  15.1M|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (110:9): [True: 37.5k, False: 15.0M]
  ------------------
  111|  37.5k|    {
  112|  37.5k|        return 5_u8;
  113|  37.5k|    }
  114|       |
  115|  15.0M|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (115:9): [True: 43.3k, False: 15.0M]
  ------------------
  116|  43.3k|    {
  117|  43.3k|        return 4_u8;
  118|  43.3k|    }
  119|       |
  120|  15.0M|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (120:9): [True: 75.3k, False: 14.9M]
  ------------------
  121|  75.3k|    {
  122|  75.3k|        return 3_u8;
  123|  75.3k|    }
  124|       |
  125|  14.9M|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (125:9): [True: 228k, False: 14.7M]
  ------------------
  126|   228k|    {
  127|   228k|        return 2_u8;
  128|   228k|    }
  129|       |
  130|  14.7M|    return 1_u8;
  131|  14.9M|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  174|  36.2k|    {
  175|  36.2k|        return m_DLXProgram;
  176|  36.2k|    }
_ZN6dlxemu8Emulator12ParseProgramENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  179|  36.2k|    {
  180|  36.2k|        m_DLXProgram = dlx::Parser::Parse(source);
  181|       |
  182|  36.2k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (182:13): [True: 243, False: 36.0k]
  ------------------
  183|    243|        {
  184|    243|            m_Processor.LoadProgram(m_DLXProgram);
  185|    243|        }
  186|  36.2k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  199|  36.2k|    {
  200|  36.2k|        return m_CodeEditor;
  201|  36.2k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   37|      1|    {
   38|      1|        Shutdown();
   39|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  107|      1|    {
  108|      1|        if (imgui_initialized)
  ------------------
  |  Branch (108:13): [True: 0, False: 1]
  ------------------
  109|      0|        {
  110|      0|            ShutdownImGui();
  111|      0|        }
  112|       |
  113|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (113:13): [True: 0, False: 1]
  ------------------
  114|      0|        {
  115|      0|            glfwDestroyWindow(m_Window);
  116|      0|        }
  117|       |
  118|      1|        if (glfw_initialized)
  ------------------
  |  Branch (118:13): [True: 0, False: 1]
  ------------------
  119|      0|        {
  120|      0|            glfwTerminate();
  121|      0|        }
  122|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  1.62M|        {
  169|  1.62M|            PHI_ASSERT(index < 3u);
  170|       |
  171|  1.62M|            switch (index.unsafe())
  172|  1.62M|            {
  173|   723k|                case 0:
  ------------------
  |  Branch (173:17): [True: 723k, False: 903k]
  ------------------
  174|   723k|                    return m_Arg1Type;
  175|       |
  176|   457k|                case 1:
  ------------------
  |  Branch (176:17): [True: 457k, False: 1.16M]
  ------------------
  177|   457k|                    return m_Arg2Type;
  178|       |
  179|   445k|                case 2:
  ------------------
  |  Branch (179:17): [True: 445k, False: 1.18M]
  ------------------
  180|   445k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 1.62M]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  1.62M|#endif
  187|  1.62M|            }
  188|  1.62M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   430k|        {
  195|   430k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   430k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 423k, False: 6.85k]
  ------------------
  199|   423k|            {
  200|   423k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   423k|            }
  202|   430k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 258k, False: 172k]
  ------------------
  203|   258k|            {
  204|   258k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   258k|            }
  206|   430k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 143k, False: 286k]
  ------------------
  207|   143k|            {
  208|   143k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   143k|            }
  210|       |
  211|   430k|            return number_of_argument_required;
  212|   430k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   430k|        {
  221|   430k|            return m_Executor;
  222|   430k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   264k|    {
   38|   264k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   264k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   264k|                                         static_cast<underlying_t>(rhs));
   42|   264k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   264k|    {
   55|   264k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   264k|        return static_cast<underlying_t>(type & test) != 0;
   58|   264k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  1.50M|    {
   32|  1.50M|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 33.6k, False: 1.47M]
  ------------------
   33|  33.6k|        {
   34|  33.6k|            return true;
   35|  33.6k|        }
   36|       |
   37|  1.47M|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 3.33k, False: 1.46M]
  ------------------
   38|  3.33k|        {
   39|  3.33k|            return true;
   40|  3.33k|        }
   41|       |
   42|  1.46M|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 481k, False: 985k]
  ------------------
   43|   481k|        {
   44|   481k|            return true;
   45|   481k|        }
   46|       |
   47|   985k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 7.50k, False: 978k]
  ------------------
   48|  7.50k|        {
   49|  7.50k|            return true;
   50|  7.50k|        }
   51|       |
   52|   978k|        return false;
   53|   985k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|   978k|    {
   57|   978k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 978k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|   978k|        const char first_char = token.at(0);
   63|       |
   64|   978k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 218k, False: 759k]
  ------------------
   65|   218k|        {
   66|   218k|            return phi::is_alpha(first_char);
   67|   218k|        }
   68|       |
   69|   759k|        phi::boolean just_under_scores = (first_char == '_');
   70|   759k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 108k, False: 650k]
  |  Branch (70:15): [True: 639k, False: 119k]
  |  Branch (70:44): [True: 10.7k, False: 108k]
  ------------------
   71|   108k|        {
   72|   108k|            return false;
   73|   108k|        }
   74|       |
   75|  2.13M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 1.73M, False: 402k]
  ------------------
   76|  1.73M|        {
   77|  1.73M|            const char c{token.at(index)};
   78|       |
   79|  1.73M|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 1.47M, False: 258k]
  ------------------
   80|  1.47M|            {
   81|  1.47M|                just_under_scores = false;
   82|  1.47M|            }
   83|   258k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 10.6k, False: 247k]
  ------------------
   84|  10.6k|            {
   85|  10.6k|                continue;
   86|  10.6k|            }
   87|   247k|            else
   88|   247k|            {
   89|   247k|                return false;
   90|   247k|            }
   91|  1.73M|        }
   92|       |
   93|   402k|        return !just_under_scores;
   94|   650k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|  3.92M|    {
  101|  3.92M|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 3.92M]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|  3.92M|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 581k, False: 3.33M]
  ------------------
  107|   581k|        {
  108|   581k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 76.8k, False: 504k]
  ------------------
  109|  76.8k|            {
  110|  76.8k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  76.8k|            }
  112|       |
  113|   504k|            return {};
  114|   581k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|  3.33M|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 6.65k, False: 3.33M]
  ------------------
  118|  6.65k|        {
  119|  6.65k|            return {};
  120|  6.65k|        }
  121|       |
  122|  3.33M|        std::int32_t number{0};
  123|  3.33M|        phi::boolean is_negative{false};
  124|  3.33M|        phi::boolean starts_with_zero{false};
  125|  3.33M|        phi::boolean parsing_binary{false};
  126|  3.33M|        phi::boolean parsing_octal{false};
  127|  3.33M|        phi::boolean parsing_hexadecimal{false};
  128|  3.33M|        phi::boolean parsed_something{false};
  129|  3.33M|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|  3.69M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 3.65M, False: 45.2k]
  ------------------
  134|  3.65M|        {
  135|  3.65M|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|  3.65M|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 3.33M, False: 319k]
  ------------------
  139|  3.33M|            {
  140|  3.33M|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 13.0k, False: 3.31M]
  ------------------
  141|  13.0k|                {
  142|  13.0k|                    continue;
  143|  13.0k|                }
  144|       |
  145|  3.31M|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 37.4k, False: 3.28M]
  ------------------
  146|  37.4k|                {
  147|  37.4k|                    is_negative = true;
  148|  37.4k|                    continue;
  149|  37.4k|                }
  150|       |
  151|  3.28M|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 51.8k, False: 3.22M]
  ------------------
  152|  51.8k|                {
  153|  51.8k|                    starts_with_zero = true;
  154|  51.8k|                    continue;
  155|  51.8k|                }
  156|       |
  157|  3.22M|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 6.36k, False: 3.22M]
  ------------------
  158|  6.36k|                {
  159|  6.36k|                    return {};
  160|  6.36k|                }
  161|  3.22M|            }
  162|       |
  163|       |            // Second character
  164|  3.54M|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 146k, False: 3.39M]
  ------------------
  165|   146k|            {
  166|   146k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 51.8k, False: 94.4k]
  ------------------
  167|  51.8k|                {
  168|       |                    // Binary
  169|  51.8k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 6.17k, False: 45.6k]
  |  Branch (169:37): [True: 5.14k, False: 40.5k]
  ------------------
  170|  11.3k|                    {
  171|  11.3k|                        parsing_binary = true;
  172|  11.3k|                        continue;
  173|  11.3k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  40.5k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 14.7k, False: 25.7k]
  |  Branch (176:37): [True: 8.84k, False: 16.9k]
  ------------------
  177|  23.5k|                    {
  178|  23.5k|                        parsing_hexadecimal = true;
  179|  23.5k|                        continue;
  180|  23.5k|                    }
  181|       |
  182|       |                    // Octal
  183|  16.9k|                    parsing_octal = true;
  184|  16.9k|                }
  185|   146k|            }
  186|       |
  187|       |            // Handle seperators
  188|  3.50M|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 6.89k, False: 3.50M]
  ------------------
  189|  6.89k|            {
  190|  6.89k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 1.61k, False: 5.27k]
  ------------------
  191|  1.61k|                {
  192|  1.61k|                    return {};
  193|  1.61k|                }
  194|       |
  195|  5.27k|                parsed_separator = true;
  196|  5.27k|                continue;
  197|  6.89k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|  3.50M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 100k, False: 3.40M]
  |  Branch (200:32): [True: 6.81k, False: 93.6k]
  ------------------
  201|  6.81k|            {
  202|       |                // Would underflow
  203|  6.81k|                return {};
  204|  6.81k|            }
  205|  3.49M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 3.40M, False: 93.6k]
  |  Branch (205:17): [True: 5.94k, False: 3.48M]
  |  Branch (205:33): [True: 5.94k, False: 3.39M]
  ------------------
  206|  5.94k|            {
  207|       |                // Would overflow
  208|  5.94k|                return {};
  209|  5.94k|            }
  210|       |
  211|  3.48M|            parsed_separator = false;
  212|  3.48M|            parsed_something = true;
  213|       |
  214|  3.48M|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 6.91k, False: 3.48M]
  ------------------
  215|  6.91k|            {
  216|  6.91k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 5.63k, False: 1.27k]
  ------------------
  217|  5.63k|                {
  218|  5.63k|                    return {};
  219|  5.63k|                }
  220|       |
  221|  1.27k|                number <<= 1;
  222|  1.27k|                number |= (c - '0');
  223|  1.27k|            }
  224|  3.48M|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 18.3k, False: 3.46M]
  ------------------
  225|  18.3k|            {
  226|  18.3k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 14.7k, False: 3.57k]
  ------------------
  227|  14.7k|                {
  228|  14.7k|                    return {};
  229|  14.7k|                }
  230|       |
  231|  3.57k|                number <<= 3;
  232|  3.57k|                number |= (c - '0');
  233|  3.57k|            }
  234|  3.46M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 45.0k, False: 3.41M]
  ------------------
  235|  45.0k|            {
  236|  45.0k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 15.7k, False: 29.3k]
  ------------------
  237|  15.7k|                {
  238|  15.7k|                    return {};
  239|  15.7k|                }
  240|       |
  241|  29.3k|                number <<= 4;
  242|  29.3k|                number |= phi::hex_digit_value(c).unsafe();
  243|  29.3k|            }
  244|  3.41M|            else
  245|  3.41M|            {
  246|  3.41M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 3.22M, False: 191k]
  ------------------
  247|  3.22M|                {
  248|  3.22M|                    return {};
  249|  3.22M|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|   191k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 68.2k, False: 123k]
  |  Branch (252:36): [True: 3.87k, False: 64.3k]
  ------------------
  253|  3.87k|                {
  254|  3.87k|                    return {};
  255|  3.87k|                }
  256|       |
  257|   187k|                number *= 10;
  258|   187k|                number += (c - '0');
  259|   187k|            }
  260|  3.48M|        }
  261|       |
  262|  45.2k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 38.5k, False: 6.64k]
  ------------------
  263|  38.5k|        {
  264|       |            // Check for over/underflow
  265|  38.5k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 11.5k, False: 27.0k]
  |  Branch (265:32): [True: 4.74k, False: 6.83k]
  ------------------
  266|  4.74k|            {
  267|       |                // Would underflow
  268|  4.74k|                return {};
  269|  4.74k|            }
  270|  33.8k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 27.0k, False: 6.83k]
  |  Branch (270:17): [True: 8.74k, False: 25.0k]
  |  Branch (270:33): [True: 8.74k, False: 18.2k]
  ------------------
  271|  8.74k|            {
  272|       |                // Would overflow
  273|  8.74k|                return {};
  274|  8.74k|            }
  275|       |
  276|  25.0k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 6.83k, False: 18.2k]
  ------------------
  277|  6.83k|            {
  278|  6.83k|                return static_cast<std::int16_t>(-number);
  279|  6.83k|            }
  280|       |
  281|  18.2k|            return static_cast<std::int16_t>(number);
  282|  25.0k|        }
  283|       |
  284|  6.64k|        return {};
  285|  45.2k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   349k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   349k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 6.98M, False: 0]
  ------------------
   64|  6.98M|            {
   65|  6.98M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 349k, False: 6.63M]
  ------------------
   66|   349k|                {
   67|   349k|                    return &token;
   68|   349k|                }
   69|  6.98M|            }
   70|       |
   71|      0|            return nullptr;
   72|   349k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|  1.47M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.47M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.47M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  3.97M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  3.97M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  3.97M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  1.64M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.64M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.64M|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   430k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  97.2k|    {
   25|  97.2k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  97.2k|        switch (argument_number.unsafe())
   28|  97.2k|        {
   29|  71.2k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 71.2k, False: 25.9k]
  ------------------
   30|  71.2k|                m_Arg1 = argument;
   31|  71.2k|                break;
   32|  16.3k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 16.3k, False: 80.8k]
  ------------------
   33|  16.3k|                m_Arg2 = argument;
   34|  16.3k|                break;
   35|  9.64k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 9.64k, False: 87.5k]
  ------------------
   36|  9.64k|                m_Arg3 = argument;
   37|  9.64k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 97.2k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  97.2k|#endif
   42|  97.2k|        }
   43|  97.2k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  1.38M|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  44.6k|    {
  171|  44.6k|        InstructionArgument arg;
  172|  44.6k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  44.6k|        arg.register_int.register_id = id;
  174|  44.6k|        return arg;
  175|  44.6k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  4.97k|    {
  179|  4.97k|        InstructionArgument arg;
  180|  4.97k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  4.97k|        arg.register_float.register_id = id;
  182|  4.97k|        return arg;
  183|  4.97k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  5.10k|    {
  187|  5.10k|        InstructionArgument arg;
  188|  5.10k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  5.10k|        arg.immediate_value.signed_value = value;
  190|  5.10k|        return arg;
  191|  5.10k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|  6.70k|    {
  196|  6.70k|        InstructionArgument arg;
  197|  6.70k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|  6.70k|        arg.address_displacement.register_id  = id;
  199|  6.70k|        arg.address_displacement.displacement = displacement;
  200|  6.70k|        return arg;
  201|  6.70k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  35.7k|    {
  205|  35.7k|        InstructionArgument arg;
  206|  35.7k|        arg.m_Type           = ArgumentType::Label;
  207|  35.7k|        arg.label.label_name = label_name;
  208|  35.7k|        return arg;
  209|  35.7k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   430k|    {
  453|   430k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   430k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|  5.12M|    {
   24|  5.12M|        switch (token.length())
   25|  5.12M|        {
   26|       |            // 1 character OpCodes
   27|   714k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 714k, False: 4.41M]
  ------------------
   28|   714k|                char c1 = token[0];
   29|   714k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 185k, False: 529k]
  ------------------
   30|   185k|                {
   31|   185k|                    return OpCode::J;
   32|   185k|                }
   33|   529k|                break;
   34|   714k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|   805k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 805k, False: 4.32M]
  ------------------
   38|   805k|                char c1 = token[0];
   39|   805k|                char c2 = token[1];
   40|       |
   41|   805k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 459k, False: 345k]
  ------------------
   42|   805k|                {
   43|  43.7k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 43.7k, False: 761k]
  ------------------
   44|  54.2k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 10.4k, False: 794k]
  ------------------
   45|  54.2k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 8.34k, False: 45.8k]
  ------------------
   46|  8.34k|                        {
   47|  8.34k|                            return OpCode::JR;
   48|  8.34k|                        }
   49|  45.8k|                        break;
   50|       |
   51|  63.5k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 63.5k, False: 741k]
  ------------------
   52|   118k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 54.4k, False: 750k]
  ------------------
   53|   118k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 50.9k, False: 67.0k]
  ------------------
   54|   118k|                        {
   55|  3.95k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 3.95k, False: 114k]
  ------------------
   56|  12.8k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 8.85k, False: 109k]
  ------------------
   57|  12.8k|                                return OpCode::LB;
   58|  4.30k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 4.30k, False: 113k]
  ------------------
   59|  11.4k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 7.15k, False: 110k]
  ------------------
   60|  11.4k|                                return OpCode::LD;
   61|  6.80k|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 6.80k, False: 111k]
  ------------------
   62|  15.1k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 8.37k, False: 109k]
  ------------------
   63|  15.1k|                                return OpCode::LF;
   64|  3.33k|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 3.33k, False: 114k]
  ------------------
   65|  13.3k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 10.0k, False: 107k]
  ------------------
   66|  13.3k|                                return OpCode::LH;
   67|  4.88k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 4.88k, False: 113k]
  ------------------
   68|  14.1k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 9.31k, False: 108k]
  ------------------
   69|  14.1k|                                return OpCode::LW;
   70|   118k|                        }
   71|  50.9k|                        break;
   72|  50.9k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 5.31k, False: 799k]
  ------------------
   73|  22.9k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 17.6k, False: 787k]
  ------------------
   74|  22.9k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 4.94k, False: 18.0k]
  ------------------
   75|  4.94k|                        {
   76|  4.94k|                            return OpCode::OR;
   77|  4.94k|                        }
   78|  18.0k|                        break;
   79|  76.4k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 76.4k, False: 728k]
  ------------------
   80|   150k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 74.1k, False: 730k]
  ------------------
   81|   150k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 56.3k, False: 94.2k]
  ------------------
   82|   150k|                        {
   83|  6.02k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 6.02k, False: 144k]
  ------------------
   84|  13.9k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 7.90k, False: 142k]
  ------------------
   85|  13.9k|                                return OpCode::SB;
   86|  34.8k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 34.8k, False: 115k]
  ------------------
   87|  42.9k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 8.10k, False: 142k]
  ------------------
   88|  42.9k|                                return OpCode::SD;
   89|  9.14k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 9.14k, False: 141k]
  ------------------
   90|  10.3k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 1.23k, False: 149k]
  ------------------
   91|  10.3k|                                return OpCode::SF;
   92|  4.80k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 4.80k, False: 145k]
  ------------------
   93|  18.3k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 13.5k, False: 137k]
  ------------------
   94|  18.3k|                                return OpCode::SH;
   95|  4.96k|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 4.96k, False: 145k]
  ------------------
   96|  8.66k|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 3.69k, False: 146k]
  ------------------
   97|  8.66k|                                return OpCode::SW;
   98|   150k|                        }
   99|  56.3k|                        break;
  100|   805k|                }
  101|   630k|                break;
  102|   805k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|  1.15M|            case 3: {
  ------------------
  |  Branch (105:13): [True: 1.15M, False: 3.97M]
  ------------------
  106|  1.15M|                char c1 = token[0];
  107|  1.15M|                char c2 = token[1];
  108|  1.15M|                char c3 = token[2];
  109|       |
  110|  1.15M|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 336k, False: 813k]
  ------------------
  111|  1.15M|                {
  112|  42.6k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 42.6k, False: 1.10M]
  ------------------
  113|  54.6k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 11.9k, False: 1.13M]
  ------------------
  114|  54.6k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 18.5k, False: 36.0k]
  |  Branch (114:29): [True: 10.9k, False: 43.6k]
  |  Branch (114:45): [True: 10.9k, False: 7.62k]
  ------------------
  115|  10.9k|                        {
  116|  10.9k|                            return OpCode::ADD;
  117|  10.9k|                        }
  118|  43.6k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 16.6k, False: 26.9k]
  |  Branch (118:34): [True: 12.6k, False: 31.0k]
  |  Branch (118:50): [True: 12.6k, False: 4.03k]
  ------------------
  119|  12.6k|                        {
  120|  12.6k|                            return OpCode::AND;
  121|  12.6k|                        }
  122|  31.0k|                        break;
  123|       |
  124|  31.0k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 10.3k, False: 1.14M]
  ------------------
  125|  24.4k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 14.0k, False: 1.13M]
  ------------------
  126|  24.4k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 15.0k, False: 9.36k]
  |  Branch (126:29): [True: 7.45k, False: 16.9k]
  |  Branch (126:45): [True: 7.45k, False: 7.59k]
  ------------------
  127|  7.45k|                        {
  128|  7.45k|                            return OpCode::DIV;
  129|  7.45k|                        }
  130|  16.9k|                        break;
  131|       |
  132|  17.3k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 17.3k, False: 1.13M]
  ------------------
  133|  46.3k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 29.0k, False: 1.12M]
  ------------------
  134|  46.3k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 32.3k, False: 14.0k]
  ------------------
  135|  32.3k|                        {
  136|  32.3k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 13.1k, False: 19.1k]
  ------------------
  137|  13.1k|                            {
  138|  13.1k|                                return OpCode::EQD;
  139|  13.1k|                            }
  140|  19.1k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 16.6k, False: 2.51k]
  ------------------
  141|  16.6k|                            {
  142|  16.6k|                                return OpCode::EQF;
  143|  16.6k|                            }
  144|  32.3k|                        }
  145|  16.5k|                        break;
  146|       |
  147|  43.0k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 43.0k, False: 1.10M]
  ------------------
  148|  77.6k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 34.5k, False: 1.11M]
  ------------------
  149|  77.6k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 36.5k, False: 41.1k]
  ------------------
  150|  36.5k|                        {
  151|  36.5k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 24.0k, False: 12.4k]
  ------------------
  152|  24.0k|                            {
  153|  24.0k|                                return OpCode::GED;
  154|  24.0k|                            }
  155|  12.4k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 9.61k, False: 2.80k]
  ------------------
  156|  9.61k|                            {
  157|  9.61k|                                return OpCode::GEF;
  158|  9.61k|                            }
  159|  36.5k|                        }
  160|  41.1k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 27.9k, False: 13.1k]
  ------------------
  161|  27.9k|                        {
  162|  27.9k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 5.91k, False: 22.0k]
  ------------------
  163|  5.91k|                            {
  164|  5.91k|                                return OpCode::GTD;
  165|  5.91k|                            }
  166|  22.0k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 13.2k, False: 8.82k]
  ------------------
  167|  13.2k|                            {
  168|  13.2k|                                return OpCode::GTF;
  169|  13.2k|                            }
  170|  22.0k|                        }
  171|  24.7k|                        break;
  172|       |
  173|  49.1k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 49.1k, False: 1.10M]
  ------------------
  174|  59.6k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 10.5k, False: 1.13M]
  ------------------
  175|  59.6k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 28.0k, False: 31.5k]
  |  Branch (175:29): [True: 15.6k, False: 44.0k]
  |  Branch (175:45): [True: 15.6k, False: 12.4k]
  ------------------
  176|  15.6k|                        {
  177|  15.6k|                            return OpCode::JAL;
  178|  15.6k|                        }
  179|  44.0k|                        break;
  180|       |
  181|   136k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 136k, False: 1.01M]
  ------------------
  182|   180k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 44.1k, False: 1.10M]
  ------------------
  183|   180k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 19.1k, False: 161k]
  ------------------
  184|   180k|                        {
  185|  4.70k|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 4.70k, False: 175k]
  ------------------
  186|  17.6k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 12.9k, False: 167k]
  ------------------
  187|  17.6k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 11.6k, False: 5.98k]
  ------------------
  188|  11.6k|                                {
  189|  11.6k|                                    return OpCode::LBU;
  190|  11.6k|                                }
  191|  5.98k|                                break;
  192|       |
  193|  29.4k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 29.4k, False: 150k]
  ------------------
  194|  42.8k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 13.4k, False: 166k]
  ------------------
  195|  42.8k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 14.1k, False: 28.6k]
  ------------------
  196|  14.1k|                                {
  197|  14.1k|                                    return OpCode::LED;
  198|  14.1k|                                }
  199|  28.6k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 20.6k, False: 7.98k]
  ------------------
  200|  20.6k|                                {
  201|  20.6k|                                    return OpCode::LEF;
  202|  20.6k|                                }
  203|  7.98k|                                break;
  204|       |
  205|  17.7k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 17.7k, False: 162k]
  ------------------
  206|  33.7k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 16.0k, False: 164k]
  ------------------
  207|  33.7k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 15.2k, False: 18.5k]
  ------------------
  208|  15.2k|                                {
  209|  15.2k|                                    return OpCode::LHI;
  210|  15.2k|                                }
  211|  18.5k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 9.46k, False: 9.05k]
  ------------------
  212|  9.46k|                                {
  213|  9.46k|                                    return OpCode::LHU;
  214|  9.46k|                                }
  215|  9.05k|                                break;
  216|       |
  217|  9.05k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 7.51k, False: 172k]
  ------------------
  218|  51.7k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 44.2k, False: 135k]
  ------------------
  219|  51.7k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 22.1k, False: 29.6k]
  ------------------
  220|  22.1k|                                {
  221|  22.1k|                                    return OpCode::LTD;
  222|  22.1k|                                }
  223|  29.6k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 17.5k, False: 12.0k]
  ------------------
  224|  17.5k|                                {
  225|  17.5k|                                    return OpCode::LTF;
  226|  17.5k|                                }
  227|  12.0k|                                break;
  228|       |
  229|  12.0k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 3.84k, False: 176k]
  ------------------
  230|  14.9k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 11.1k, False: 169k]
  ------------------
  231|  14.9k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 5.45k, False: 9.51k]
  ------------------
  232|  5.45k|                                {
  233|  5.45k|                                    return OpCode::LWU;
  234|  5.45k|                                }
  235|  9.51k|                                break;
  236|   180k|                        }
  237|  63.7k|                        break;
  238|       |
  239|  63.7k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 27.9k, False: 1.12M]
  ------------------
  240|  51.0k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 23.1k, False: 1.12M]
  ------------------
  241|  51.0k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 24.9k, False: 26.1k]
  ------------------
  242|  24.9k|                        {
  243|  24.9k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 8.30k, False: 16.6k]
  ------------------
  244|  8.30k|                            {
  245|  8.30k|                                return OpCode::NED;
  246|  8.30k|                            }
  247|  16.6k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 6.85k, False: 9.79k]
  ------------------
  248|  6.85k|                            {
  249|  6.85k|                                return OpCode::NEF;
  250|  6.85k|                            }
  251|  24.9k|                        }
  252|  26.1k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 17.5k, False: 8.58k]
  |  Branch (252:34): [True: 11.2k, False: 14.8k]
  |  Branch (252:50): [True: 11.2k, False: 6.31k]
  ------------------
  253|  11.2k|                        {
  254|  11.2k|                            return OpCode::NOP;
  255|  11.2k|                        }
  256|       |
  257|  24.6k|                        break;
  258|       |
  259|  24.6k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 8.67k, False: 1.14M]
  ------------------
  260|  19.2k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 10.5k, False: 1.13M]
  ------------------
  261|  19.2k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 7.57k, False: 11.6k]
  |  Branch (261:29): [True: 6.13k, False: 13.0k]
  |  Branch (261:45): [True: 6.13k, False: 1.43k]
  ------------------
  262|  6.13k|                        {
  263|  6.13k|                            return OpCode::ORI;
  264|  6.13k|                        }
  265|  13.0k|                        break;
  266|       |
  267|   192k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 192k, False: 958k]
  ------------------
  268|   271k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 79.3k, False: 1.07M]
  ------------------
  269|   271k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 30.7k, False: 240k]
  ------------------
  270|   271k|                        {
  271|  11.5k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 11.5k, False: 259k]
  ------------------
  272|  23.5k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 12.0k, False: 259k]
  ------------------
  273|  23.5k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 10.0k, False: 13.5k]
  ------------------
  274|  10.0k|                                {
  275|  10.0k|                                    return OpCode::SBU;
  276|  10.0k|                                }
  277|  13.5k|                                break;
  278|       |
  279|  13.5k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 10.5k, False: 260k]
  ------------------
  280|  15.0k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 4.54k, False: 266k]
  ------------------
  281|  15.0k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 4.64k, False: 10.4k]
  ------------------
  282|  4.64k|                                {
  283|  4.64k|                                    return OpCode::SEQ;
  284|  4.64k|                                }
  285|  10.4k|                                break;
  286|       |
  287|  26.4k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 26.4k, False: 244k]
  ------------------
  288|  32.0k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 5.53k, False: 265k]
  ------------------
  289|  32.0k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 10.1k, False: 21.8k]
  ------------------
  290|  10.1k|                                {
  291|  10.1k|                                    return OpCode::SGE;
  292|  10.1k|                                }
  293|  21.8k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 14.8k, False: 7.03k]
  ------------------
  294|  14.8k|                                {
  295|  14.8k|                                    return OpCode::SGT;
  296|  14.8k|                                }
  297|  7.03k|                                break;
  298|       |
  299|  7.03k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 4.61k, False: 266k]
  ------------------
  300|  15.4k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 10.8k, False: 260k]
  ------------------
  301|  15.4k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 10.7k, False: 4.74k]
  ------------------
  302|  10.7k|                                {
  303|  10.7k|                                    return OpCode::SHU;
  304|  10.7k|                                }
  305|  4.74k|                                break;
  306|       |
  307|  36.3k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 36.3k, False: 235k]
  ------------------
  308|  62.4k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 26.0k, False: 245k]
  ------------------
  309|  62.4k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 9.40k, False: 53.0k]
  ------------------
  310|  62.4k|                                {
  311|  2.82k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 2.82k, False: 59.6k]
  ------------------
  312|  6.69k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 3.86k, False: 58.5k]
  ------------------
  313|  6.69k|                                        return OpCode::SLA;
  314|       |
  315|  8.70k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 8.70k, False: 53.7k]
  ------------------
  316|  16.1k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 7.48k, False: 54.9k]
  ------------------
  317|  16.1k|                                        return OpCode::SLE;
  318|       |
  319|  5.26k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 5.26k, False: 57.1k]
  ------------------
  320|  23.1k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 17.8k, False: 44.5k]
  ------------------
  321|  23.1k|                                        return OpCode::SLL;
  322|       |
  323|  3.65k|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 3.65k, False: 58.7k]
  ------------------
  324|  7.01k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 3.35k, False: 59.0k]
  ------------------
  325|  7.01k|                                        return OpCode::SLT;
  326|  62.4k|                                }
  327|  9.40k|                                break;
  328|       |
  329|  9.40k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 9.33k, False: 262k]
  ------------------
  330|  12.6k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 3.32k, False: 268k]
  ------------------
  331|  12.6k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 9.11k, False: 3.55k]
  ------------------
  332|  9.11k|                                {
  333|  9.11k|                                    return OpCode::SNE;
  334|  9.11k|                                }
  335|  3.55k|                                break;
  336|       |
  337|  7.92k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 7.92k, False: 263k]
  ------------------
  338|  54.2k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 46.3k, False: 225k]
  ------------------
  339|  54.2k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 16.5k, False: 37.6k]
  ------------------
  340|  16.5k|                                {
  341|  16.5k|                                    return OpCode::SRA;
  342|  16.5k|                                }
  343|  37.6k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 31.3k, False: 6.34k]
  ------------------
  344|  31.3k|                                {
  345|  31.3k|                                    return OpCode::SRL;
  346|  31.3k|                                }
  347|  6.34k|                                break;
  348|       |
  349|  7.68k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 7.68k, False: 263k]
  ------------------
  350|  15.6k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 7.91k, False: 263k]
  ------------------
  351|  15.6k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 8.98k, False: 6.62k]
  ------------------
  352|  8.98k|                                {
  353|  8.98k|                                    return OpCode::SUB;
  354|  8.98k|                                }
  355|  6.62k|                                break;
  356|       |
  357|  6.80k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 6.80k, False: 264k]
  ------------------
  358|  9.47k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 2.67k, False: 268k]
  ------------------
  359|  9.47k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 5.91k, False: 3.56k]
  ------------------
  360|  5.91k|                                {
  361|  5.91k|                                    return OpCode::SWU;
  362|  5.91k|                                }
  363|  3.56k|                                break;
  364|   271k|                        }
  365|       |
  366|   107k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 11.2k, False: 1.13M]
  ------------------
  367|   125k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 18.0k, False: 1.13M]
  ------------------
  368|   125k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 32.3k, False: 92.9k]
  |  Branch (368:29): [True: 16.2k, False: 109k]
  |  Branch (368:45): [True: 16.2k, False: 16.0k]
  ------------------
  369|  16.2k|                        {
  370|  16.2k|                            return OpCode::XOR;
  371|  16.2k|                        }
  372|   109k|                        break;
  373|  1.15M|                }
  374|   680k|                break;
  375|  1.15M|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|  1.15M|            case 4: {
  ------------------
  |  Branch (378:13): [True: 1.15M, False: 3.96M]
  ------------------
  379|  1.15M|                char c1 = token[0];
  380|  1.15M|                char c2 = token[1];
  381|  1.15M|                char c3 = token[2];
  382|  1.15M|                char c4 = token[3];
  383|       |
  384|  1.15M|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 306k, False: 851k]
  ------------------
  385|  1.15M|                {
  386|  79.7k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 79.7k, False: 1.07M]
  ------------------
  387|  99.8k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 20.0k, False: 1.13M]
  ------------------
  388|  99.8k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 6.36k, False: 93.4k]
  ------------------
  389|  99.8k|                        {
  390|  33.2k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 33.2k, False: 66.5k]
  ------------------
  391|  63.9k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 30.6k, False: 69.1k]
  ------------------
  392|  63.9k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 57.2k, False: 6.68k]
  ------------------
  393|  57.2k|                                {
  394|  57.2k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 18.6k, False: 38.5k]
  ------------------
  395|  57.2k|                                    {
  396|  4.81k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 4.81k, False: 52.4k]
  ------------------
  397|  9.06k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 4.25k, False: 52.9k]
  ------------------
  398|  9.06k|                                            return OpCode::ADDD;
  399|       |
  400|  3.06k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 3.06k, False: 54.1k]
  ------------------
  401|  11.5k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 8.46k, False: 48.7k]
  ------------------
  402|  11.5k|                                            return OpCode::ADDF;
  403|       |
  404|  2.78k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 2.78k, False: 54.4k]
  ------------------
  405|  8.30k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 5.51k, False: 51.7k]
  ------------------
  406|  8.30k|                                            return OpCode::ADDI;
  407|       |
  408|  5.02k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 5.02k, False: 52.2k]
  ------------------
  409|  9.63k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 4.61k, False: 52.6k]
  ------------------
  410|  9.63k|                                            return OpCode::ADDU;
  411|  57.2k|                                    }
  412|  57.2k|                                }
  413|  25.3k|                                break;
  414|       |
  415|  25.3k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 25.3k, False: 74.4k]
  ------------------
  416|  29.5k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 4.15k, False: 95.6k]
  ------------------
  417|  29.5k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 25.6k, False: 3.91k]
  |  Branch (417:37): [True: 13.7k, False: 15.8k]
  |  Branch (417:53): [True: 13.7k, False: 11.8k]
  ------------------
  418|  13.7k|                                {
  419|  13.7k|                                    return OpCode::ANDI;
  420|  13.7k|                                }
  421|       |
  422|  15.8k|                                break;
  423|  99.8k|                        }
  424|  47.5k|                        break;
  425|       |
  426|  77.5k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 77.5k, False: 1.07M]
  ------------------
  427|  84.8k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 7.32k, False: 1.15M]
  ------------------
  428|  84.8k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 9.65k, False: 75.1k]
  ------------------
  429|  84.8k|                        {
  430|  12.6k|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 12.6k, False: 72.1k]
  ------------------
  431|  21.3k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 8.75k, False: 76.0k]
  ------------------
  432|  21.3k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 12.6k, False: 8.75k]
  |  Branch (432:37): [True: 7.73k, False: 13.6k]
  |  Branch (432:53): [True: 7.73k, False: 4.89k]
  ------------------
  433|  7.73k|                                {
  434|  7.73k|                                    return OpCode::BEQZ;
  435|  7.73k|                                }
  436|  13.6k|                                break;
  437|       |
  438|  25.9k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 25.9k, False: 58.9k]
  ------------------
  439|  28.6k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 2.76k, False: 82.0k]
  ------------------
  440|  28.6k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 25.6k, False: 3.00k]
  ------------------
  441|  25.6k|                                {
  442|  25.6k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 11.1k, False: 14.5k]
  ------------------
  443|  11.1k|                                    {
  444|  11.1k|                                        return OpCode::BFPF;
  445|  11.1k|                                    }
  446|  14.5k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 11.7k, False: 2.78k]
  ------------------
  447|  11.7k|                                    {
  448|  11.7k|                                        return OpCode::BFPT;
  449|  11.7k|                                    }
  450|  25.6k|                                }
  451|  5.78k|                                break;
  452|       |
  453|  8.23k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 8.23k, False: 76.5k]
  ------------------
  454|  25.1k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 16.8k, False: 67.9k]
  ------------------
  455|  25.1k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 17.2k, False: 7.87k]
  |  Branch (455:37): [True: 12.2k, False: 12.8k]
  |  Branch (455:53): [True: 12.2k, False: 4.97k]
  ------------------
  456|  12.2k|                                {
  457|  12.2k|                                    return OpCode::BNEZ;
  458|  12.2k|                                }
  459|  84.8k|                        }
  460|  41.9k|                        break;
  461|       |
  462|  41.9k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 14.9k, False: 1.14M]
  ------------------
  463|  62.6k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 47.7k, False: 1.10M]
  ------------------
  464|  62.6k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 55.8k, False: 6.82k]
  |  Branch (464:29): [True: 50.5k, False: 12.1k]
  |  Branch (464:45): [True: 50.5k, False: 5.32k]
  ------------------
  465|  50.5k|                        {
  466|  50.5k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 7.77k, False: 42.7k]
  ------------------
  467|  50.5k|                            {
  468|  4.64k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 4.64k, False: 45.8k]
  ------------------
  469|  8.92k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 4.28k, False: 46.2k]
  ------------------
  470|  8.92k|                                    return OpCode::DIVD;
  471|       |
  472|  7.27k|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 7.27k, False: 43.2k]
  ------------------
  473|  12.1k|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 4.88k, False: 45.6k]
  ------------------
  474|  12.1k|                                    return OpCode::DIVF;
  475|       |
  476|  5.75k|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 5.75k, False: 44.7k]
  ------------------
  477|  12.2k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 6.47k, False: 44.0k]
  ------------------
  478|  12.2k|                                    return OpCode::DIVI;
  479|       |
  480|  4.01k|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 4.01k, False: 46.5k]
  ------------------
  481|  9.43k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 5.41k, False: 45.1k]
  ------------------
  482|  9.43k|                                    return OpCode::DIVU;
  483|  50.5k|                            }
  484|  50.5k|                        }
  485|  19.9k|                        break;
  486|       |
  487|  19.9k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 10.9k, False: 1.14M]
  ------------------
  488|  30.4k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 19.5k, False: 1.13M]
  ------------------
  489|  30.4k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 22.2k, False: 8.23k]
  |  Branch (489:29): [True: 15.3k, False: 15.1k]
  |  Branch (489:45): [True: 17.1k, False: 5.02k]
  |  Branch (489:61): [True: 15.3k, False: 1.85k]
  ------------------
  490|  15.3k|                        {
  491|  15.3k|                            return OpCode::HALT;
  492|  15.3k|                        }
  493|  15.1k|                        break;
  494|       |
  495|  36.2k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 36.2k, False: 1.12M]
  ------------------
  496|  51.3k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 15.1k, False: 1.14M]
  ------------------
  497|  51.3k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 32.8k, False: 18.5k]
  |  Branch (497:29): [True: 8.85k, False: 42.4k]
  |  Branch (497:45): [True: 24.6k, False: 8.12k]
  |  Branch (497:61): [True: 8.85k, False: 15.8k]
  ------------------
  498|  8.85k|                        {
  499|  8.85k|                            return OpCode::JALR;
  500|  8.85k|                        }
  501|  42.4k|                        break;
  502|       |
  503|  42.4k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 23.4k, False: 1.13M]
  ------------------
  504|  66.8k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 43.4k, False: 1.11M]
  ------------------
  505|  66.8k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 26.6k, False: 40.2k]
  |  Branch (505:29): [True: 20.2k, False: 46.5k]
  |  Branch (505:45): [True: 20.2k, False: 6.31k]
  ------------------
  506|  20.2k|                        {
  507|  20.2k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 6.49k, False: 13.7k]
  ------------------
  508|  6.49k|                            {
  509|  6.49k|                                return OpCode::MOVD;
  510|  6.49k|                            }
  511|  13.7k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 11.9k, False: 1.86k]
  ------------------
  512|  11.9k|                            {
  513|  11.9k|                                return OpCode::MOVF;
  514|  11.9k|                            }
  515|  20.2k|                        }
  516|  46.5k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 36.1k, False: 10.4k]
  |  Branch (516:34): [True: 15.4k, False: 31.1k]
  |  Branch (516:50): [True: 19.9k, False: 16.1k]
  |  Branch (516:66): [True: 15.4k, False: 4.55k]
  ------------------
  517|  15.4k|                        {
  518|  15.4k|                            return OpCode::MULT;
  519|  15.4k|                        }
  520|  33.0k|                        break;
  521|       |
  522|   283k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 283k, False: 873k]
  ------------------
  523|   382k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 99.0k, False: 1.05M]
  ------------------
  524|   382k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 23.0k, False: 359k]
  ------------------
  525|   382k|                        {
  526|  15.7k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 15.7k, False: 367k]
  ------------------
  527|  34.3k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 18.6k, False: 364k]
  ------------------
  528|  34.3k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 21.7k, False: 12.6k]
  ------------------
  529|  21.7k|                                {
  530|  21.7k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 7.83k, False: 13.8k]
  ------------------
  531|  7.83k|                                    {
  532|  7.83k|                                        return OpCode::SEQI;
  533|  7.83k|                                    }
  534|  13.8k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 11.0k, False: 2.78k]
  ------------------
  535|  11.0k|                                    {
  536|  11.0k|                                        return OpCode::SEQU;
  537|  11.0k|                                    }
  538|  21.7k|                                }
  539|  15.4k|                                break;
  540|       |
  541|  43.4k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 43.4k, False: 339k]
  ------------------
  542|  50.6k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 7.25k, False: 375k]
  ------------------
  543|  50.6k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 24.7k, False: 25.8k]
  ------------------
  544|  24.7k|                                {
  545|  24.7k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 6.96k, False: 17.8k]
  ------------------
  546|  6.96k|                                    {
  547|  6.96k|                                        return OpCode::SGEI;
  548|  6.96k|                                    }
  549|  17.8k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 9.32k, False: 8.50k]
  ------------------
  550|  9.32k|                                    {
  551|  9.32k|                                        return OpCode::SGEU;
  552|  9.32k|                                    }
  553|  24.7k|                                }
  554|  25.8k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 21.0k, False: 4.82k]
  ------------------
  555|  21.0k|                                {
  556|  21.0k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 6.19k, False: 14.8k]
  ------------------
  557|  6.19k|                                    {
  558|  6.19k|                                        return OpCode::SGTI;
  559|  6.19k|                                    }
  560|  14.8k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 9.26k, False: 5.60k]
  ------------------
  561|  9.26k|                                    {
  562|  9.26k|                                        return OpCode::SGTU;
  563|  9.26k|                                    }
  564|  21.0k|                                }
  565|  18.9k|                                break;
  566|       |
  567|  61.1k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 61.1k, False: 321k]
  ------------------
  568|   106k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 44.9k, False: 337k]
  ------------------
  569|   106k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 6.55k, False: 99.4k]
  ------------------
  570|   106k|                                {
  571|  17.7k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 17.7k, False: 88.3k]
  ------------------
  572|  22.2k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 4.53k, False: 101k]
  ------------------
  573|  22.2k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 17.5k, False: 4.65k]
  ------------------
  574|  17.5k|                                        {
  575|  17.5k|                                            return OpCode::SLAI;
  576|  17.5k|                                        }
  577|  4.65k|                                        break;
  578|       |
  579|  11.8k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 11.8k, False: 94.1k]
  ------------------
  580|  30.0k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 18.1k, False: 87.8k]
  ------------------
  581|  30.0k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 9.36k, False: 20.6k]
  ------------------
  582|  9.36k|                                        {
  583|  9.36k|                                            return OpCode::SLEI;
  584|  9.36k|                                        }
  585|  20.6k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 7.68k, False: 12.9k]
  ------------------
  586|  7.68k|                                        {
  587|  7.68k|                                            return OpCode::SLEU;
  588|  7.68k|                                        }
  589|  12.9k|                                        break;
  590|       |
  591|  12.9k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 6.83k, False: 99.1k]
  ------------------
  592|  9.72k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 2.88k, False: 103k]
  ------------------
  593|  9.72k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 6.12k, False: 3.60k]
  ------------------
  594|  6.12k|                                        {
  595|  6.12k|                                            return OpCode::SLLI;
  596|  6.12k|                                        }
  597|  3.60k|                                        break;
  598|       |
  599|  9.64k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 9.64k, False: 96.3k]
  ------------------
  600|  37.4k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 27.8k, False: 78.2k]
  ------------------
  601|  37.4k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 14.5k, False: 22.8k]
  ------------------
  602|  14.5k|                                        {
  603|  14.5k|                                            return OpCode::SLTI;
  604|  14.5k|                                        }
  605|  22.8k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 9.26k, False: 13.6k]
  ------------------
  606|  9.26k|                                        {
  607|  9.26k|                                            return OpCode::SLTU;
  608|  9.26k|                                        }
  609|  13.6k|                                        break;
  610|   106k|                                }
  611|       |
  612|  69.5k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 28.1k, False: 354k]
  ------------------
  613|  79.6k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 10.0k, False: 372k]
  ------------------
  614|  79.6k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 47.3k, False: 32.3k]
  ------------------
  615|  47.3k|                                {
  616|  47.3k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 10.9k, False: 36.3k]
  ------------------
  617|  10.9k|                                    {
  618|  10.9k|                                        return OpCode::SNEI;
  619|  10.9k|                                    }
  620|  36.3k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 10.0k, False: 26.2k]
  ------------------
  621|  10.0k|                                    {
  622|  10.0k|                                        return OpCode::SNEU;
  623|  10.0k|                                    }
  624|  47.3k|                                }
  625|  58.6k|                                break;
  626|       |
  627|  58.6k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 20.5k, False: 362k]
  ------------------
  628|  51.9k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 31.4k, False: 351k]
  ------------------
  629|  51.9k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 18.1k, False: 33.8k]
  |  Branch (629:37): [True: 10.9k, False: 41.0k]
  |  Branch (629:53): [True: 10.9k, False: 7.25k]
  ------------------
  630|  10.9k|                                {
  631|  10.9k|                                    return OpCode::SRAI;
  632|  10.9k|                                }
  633|  41.0k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 27.2k, False: 13.8k]
  |  Branch (633:42): [True: 12.5k, False: 28.5k]
  |  Branch (633:58): [True: 12.5k, False: 14.7k]
  ------------------
  634|  12.5k|                                {
  635|  12.5k|                                    return OpCode::SRLI;
  636|  12.5k|                                }
  637|  28.5k|                                break;
  638|       |
  639|  34.8k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 34.8k, False: 348k]
  ------------------
  640|  78.6k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 43.7k, False: 339k]
  ------------------
  641|  78.6k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 72.2k, False: 6.38k]
  ------------------
  642|  72.2k|                                {
  643|  72.2k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 8.89k, False: 63.3k]
  ------------------
  644|  72.2k|                                    {
  645|  6.30k|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 6.30k, False: 65.9k]
  ------------------
  646|  10.3k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 4.06k, False: 68.1k]
  ------------------
  647|  10.3k|                                            return OpCode::SUBD;
  648|       |
  649|  5.35k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 5.35k, False: 66.8k]
  ------------------
  650|  16.2k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 10.9k, False: 61.3k]
  ------------------
  651|  16.2k|                                            return OpCode::SUBF;
  652|       |
  653|  5.88k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 5.88k, False: 66.3k]
  ------------------
  654|  19.2k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 13.4k, False: 58.8k]
  ------------------
  655|  19.2k|                                            return OpCode::SUBI;
  656|       |
  657|  10.1k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 10.1k, False: 62.1k]
  ------------------
  658|  17.3k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 7.26k, False: 64.9k]
  ------------------
  659|  17.3k|                                            return OpCode::SUBU;
  660|  72.2k|                                    }
  661|  72.2k|                                }
  662|  15.2k|                                break;
  663|   382k|                        }
  664|   159k|                        break;
  665|       |
  666|   159k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 36.4k, False: 1.12M]
  ------------------
  667|  41.2k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 4.82k, False: 1.15M]
  ------------------
  668|  41.2k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 35.2k, False: 6.05k]
  |  Branch (668:29): [True: 9.48k, False: 31.7k]
  |  Branch (668:45): [True: 27.3k, False: 7.90k]
  |  Branch (668:61): [True: 9.48k, False: 17.8k]
  ------------------
  669|  9.48k|                        {
  670|  9.48k|                            return OpCode::TRAP;
  671|  9.48k|                        }
  672|  31.7k|                        break;
  673|  31.7k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 21.2k, False: 1.13M]
  ------------------
  674|  30.9k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 9.69k, False: 1.14M]
  ------------------
  675|  30.9k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 23.0k, False: 7.90k]
  |  Branch (675:29): [True: 10.3k, False: 20.6k]
  |  Branch (675:45): [True: 14.8k, False: 8.18k]
  |  Branch (675:61): [True: 10.3k, False: 4.53k]
  ------------------
  676|  10.3k|                        {
  677|  10.3k|                            return OpCode::XORI;
  678|  10.3k|                        }
  679|  20.6k|                        break;
  680|  1.15M|                }
  681|   718k|                break;
  682|  1.15M|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|   718k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 661k, False: 4.46M]
  ------------------
  686|   661k|                char c1 = token[0];
  687|   661k|                char c2 = token[1];
  688|   661k|                char c3 = token[2];
  689|   661k|                char c4 = token[3];
  690|   661k|                char c5 = token[4];
  691|       |
  692|   661k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 208k, False: 452k]
  ------------------
  693|   661k|                {
  694|  34.7k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 34.7k, False: 626k]
  ------------------
  695|  45.5k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 10.8k, False: 650k]
  ------------------
  696|  45.5k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 37.4k, False: 8.14k]
  |  Branch (696:29): [True: 10.1k, False: 35.4k]
  |  Branch (696:45): [True: 29.8k, False: 7.54k]
  |  Branch (696:61): [True: 22.3k, False: 7.51k]
  |  Branch (696:77): [True: 10.1k, False: 12.2k]
  ------------------
  697|  10.1k|                        {
  698|  10.1k|                            return OpCode::ADDUI;
  699|  10.1k|                        }
  700|  35.4k|                        break;
  701|       |
  702|  35.4k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 16.5k, False: 644k]
  ------------------
  703|  57.4k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 40.9k, False: 620k]
  ------------------
  704|  57.4k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 48.1k, False: 9.32k]
  |  Branch (704:29): [True: 13.9k, False: 43.5k]
  |  Branch (704:45): [True: 40.7k, False: 7.45k]
  |  Branch (704:61): [True: 23.2k, False: 17.4k]
  |  Branch (704:77): [True: 13.9k, False: 9.31k]
  ------------------
  705|  13.9k|                        {
  706|  13.9k|                            return OpCode::DIVUI;
  707|  13.9k|                        }
  708|  43.5k|                        break;
  709|       |
  710|  45.1k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 45.1k, False: 615k]
  ------------------
  711|  89.4k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 44.2k, False: 616k]
  ------------------
  712|  89.4k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 72.6k, False: 16.7k]
  |  Branch (712:29): [True: 57.8k, False: 31.5k]
  |  Branch (712:45): [True: 63.9k, False: 8.68k]
  |  Branch (712:61): [True: 57.8k, False: 6.08k]
  ------------------
  713|  57.8k|                        {
  714|  57.8k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 7.40k, False: 50.4k]
  ------------------
  715|  57.8k|                            {
  716|  10.6k|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 10.6k, False: 47.2k]
  ------------------
  717|  15.0k|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 4.41k, False: 53.4k]
  ------------------
  718|  15.0k|                                    return OpCode::MULTD;
  719|       |
  720|  5.40k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 5.40k, False: 52.4k]
  ------------------
  721|  9.00k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 3.59k, False: 54.3k]
  ------------------
  722|  9.00k|                                    return OpCode::MULTF;
  723|       |
  724|  4.16k|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 4.16k, False: 53.7k]
  ------------------
  725|  8.83k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 4.67k, False: 53.2k]
  ------------------
  726|  8.83k|                                    return OpCode::MULTI;
  727|       |
  728|  8.44k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 8.44k, False: 49.4k]
  ------------------
  729|  17.6k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 9.15k, False: 48.7k]
  ------------------
  730|  17.6k|                                    return OpCode::MULTU;
  731|  57.8k|                            }
  732|  57.8k|                        }
  733|  38.9k|                        break;
  734|       |
  735|   155k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 155k, False: 505k]
  ------------------
  736|   259k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 104k, False: 556k]
  ------------------
  737|   259k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 20.8k, False: 238k]
  ------------------
  738|   259k|                        {
  739|  14.7k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 14.7k, False: 245k]
  ------------------
  740|  33.8k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 19.1k, False: 240k]
  ------------------
  741|  33.8k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 24.9k, False: 8.89k]
  |  Branch (741:37): [True: 11.7k, False: 22.1k]
  |  Branch (741:53): [True: 22.4k, False: 2.51k]
  |  Branch (741:69): [True: 11.7k, False: 10.7k]
  ------------------
  742|  11.7k|                                {
  743|  11.7k|                                    return OpCode::SEQUI;
  744|  11.7k|                                }
  745|  22.1k|                                break;
  746|       |
  747|  43.1k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 43.1k, False: 216k]
  ------------------
  748|  45.7k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 2.54k, False: 257k]
  ------------------
  749|  45.7k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 21.3k, False: 24.4k]
  |  Branch (749:37): [True: 10.4k, False: 35.3k]
  |  Branch (749:53): [True: 18.0k, False: 3.27k]
  |  Branch (749:69): [True: 10.4k, False: 7.62k]
  ------------------
  750|  10.4k|                                {
  751|  10.4k|                                    return OpCode::SGEUI;
  752|  10.4k|                                }
  753|  35.3k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 21.9k, False: 13.3k]
  |  Branch (753:42): [True: 11.1k, False: 24.1k]
  |  Branch (753:58): [True: 16.1k, False: 5.87k]
  |  Branch (753:74): [True: 11.1k, False: 4.98k]
  ------------------
  754|  11.1k|                                {
  755|  11.1k|                                    return OpCode::SGTUI;
  756|  11.1k|                                }
  757|  24.1k|                                break;
  758|       |
  759|  33.4k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 33.4k, False: 226k]
  ------------------
  760|  59.2k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 25.8k, False: 233k]
  ------------------
  761|  59.2k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 19.0k, False: 40.2k]
  |  Branch (761:37): [True: 9.46k, False: 49.7k]
  |  Branch (761:53): [True: 14.8k, False: 4.16k]
  |  Branch (761:69): [True: 9.46k, False: 5.40k]
  ------------------
  762|  9.46k|                                {
  763|  9.46k|                                    return OpCode::SLEUI;
  764|  9.46k|                                }
  765|  49.7k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 31.4k, False: 18.3k]
  |  Branch (765:42): [True: 18.6k, False: 31.1k]
  |  Branch (765:58): [True: 24.1k, False: 7.27k]
  |  Branch (765:74): [True: 18.6k, False: 5.53k]
  ------------------
  766|  18.6k|                                {
  767|  18.6k|                                    return OpCode::SLTUI;
  768|  18.6k|                                }
  769|  31.1k|                                break;
  770|       |
  771|  31.1k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 14.7k, False: 245k]
  ------------------
  772|  31.7k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 16.9k, False: 242k]
  ------------------
  773|  31.7k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 27.4k, False: 4.24k]
  |  Branch (773:37): [True: 12.0k, False: 19.6k]
  |  Branch (773:53): [True: 18.2k, False: 9.23k]
  |  Branch (773:69): [True: 12.0k, False: 6.18k]
  ------------------
  774|  12.0k|                                {
  775|  12.0k|                                    return OpCode::SNEUI;
  776|  12.0k|                                }
  777|  19.6k|                                break;
  778|       |
  779|  19.6k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 17.9k, False: 241k]
  ------------------
  780|  68.4k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 50.4k, False: 209k]
  ------------------
  781|  68.4k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 62.4k, False: 5.96k]
  |  Branch (781:37): [True: 8.88k, False: 59.5k]
  |  Branch (781:53): [True: 20.7k, False: 41.6k]
  |  Branch (781:69): [True: 8.88k, False: 11.8k]
  ------------------
  782|  8.88k|                                {
  783|  8.88k|                                    return OpCode::SUBUI;
  784|  8.88k|                                }
  785|  59.5k|                                break;
  786|   259k|                        }
  787|       |
  788|   177k|                        break;
  789|   661k|                }
  790|       |
  791|   504k|                break;
  792|   661k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|   504k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 325k, False: 4.80M]
  ------------------
  796|   325k|                char c1 = token[0];
  797|   325k|                char c2 = token[1];
  798|   325k|                char c3 = token[2];
  799|   325k|                char c4 = token[3];
  800|   325k|                char c5 = token[4];
  801|   325k|                char c6 = token[5];
  802|       |
  803|   325k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 123k, False: 201k]
  |  Branch (803:21): [True: 107k, False: 217k]
  |  Branch (803:37): [True: 115k, False: 8.88k]
  |  Branch (803:53): [True: 107k, False: 7.07k]
  ------------------
  804|   107k|                {
  805|   107k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 4.00k, False: 103k]
  ------------------
  806|   107k|                    {
  807|  23.4k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 23.4k, False: 84.5k]
  ------------------
  808|  36.3k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 12.8k, False: 95.0k]
  ------------------
  809|  36.3k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 23.3k, False: 12.9k]
  ------------------
  810|  23.3k|                            {
  811|  23.3k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 12.8k, False: 10.5k]
  ------------------
  812|  12.8k|                                {
  813|  12.8k|                                    return OpCode::CVTD2F;
  814|  12.8k|                                }
  815|  10.5k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 6.75k, False: 3.75k]
  ------------------
  816|  6.75k|                                {
  817|  6.75k|                                    return OpCode::CVTD2I;
  818|  6.75k|                                }
  819|  23.3k|                            }
  820|  16.6k|                            break;
  821|       |
  822|  24.9k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 24.9k, False: 83.0k]
  ------------------
  823|  37.4k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 12.5k, False: 95.3k]
  ------------------
  824|  37.4k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 21.7k, False: 15.6k]
  ------------------
  825|  21.7k|                            {
  826|  21.7k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 5.44k, False: 16.3k]
  ------------------
  827|  5.44k|                                {
  828|  5.44k|                                    return OpCode::CVTF2D;
  829|  5.44k|                                }
  830|  16.3k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 8.69k, False: 7.65k]
  ------------------
  831|  8.69k|                                {
  832|  8.69k|                                    return OpCode::CVTF2I;
  833|  8.69k|                                }
  834|  21.7k|                            }
  835|  23.3k|                            break;
  836|       |
  837|  23.3k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 9.71k, False: 98.2k]
  ------------------
  838|  30.1k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 20.4k, False: 87.5k]
  ------------------
  839|  30.1k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 15.9k, False: 14.1k]
  ------------------
  840|  15.9k|                            {
  841|  15.9k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 5.75k, False: 10.2k]
  ------------------
  842|  5.75k|                                {
  843|  5.75k|                                    return OpCode::CVTI2D;
  844|  5.75k|                                }
  845|  10.2k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 5.42k, False: 4.78k]
  ------------------
  846|  5.42k|                                {
  847|  5.42k|                                    return OpCode::CVTI2F;
  848|  5.42k|                                }
  849|  15.9k|                            }
  850|   107k|                    }
  851|   107k|                }
  852|   217k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 68.9k, False: 148k]
  |  Branch (852:26): [True: 9.03k, False: 208k]
  |  Branch (852:42): [True: 49.2k, False: 19.7k]
  |  Branch (852:58): [True: 42.7k, False: 6.51k]
  |  Branch (852:74): [True: 36.6k, False: 6.10k]
  ------------------
  853|   217k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 26.7k, False: 9.88k]
  |  Branch (853:42): [True: 9.03k, False: 17.6k]
  ------------------
  854|  9.03k|                {
  855|  9.03k|                    return OpCode::MULTUI;
  856|  9.03k|                }
  857|   271k|                break;
  858|   325k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|   271k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 172k, False: 4.95M]
  ------------------
  862|   172k|                char c1 = token[0];
  863|   172k|                char c2 = token[1];
  864|   172k|                char c3 = token[2];
  865|   172k|                char c4 = token[3];
  866|   172k|                char c5 = token[4];
  867|   172k|                char c6 = token[5];
  868|   172k|                char c7 = token[6];
  869|       |
  870|   172k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 77.1k, False: 95.2k]
  |  Branch (870:21): [True: 63.2k, False: 109k]
  |  Branch (870:37): [True: 65.9k, False: 11.2k]
  |  Branch (870:53): [True: 63.2k, False: 2.73k]
  ------------------
  871|  63.2k|                {
  872|  63.2k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 27.9k, False: 35.2k]
  |  Branch (872:25): [True: 9.84k, False: 53.3k]
  |  Branch (872:41): [True: 18.3k, False: 9.59k]
  |  Branch (872:54): [True: 14.3k, False: 4.04k]
  |  Branch (872:70): [True: 9.84k, False: 4.47k]
  ------------------
  873|  9.84k|                    {
  874|  9.84k|                        return OpCode::MOVI2FP;
  875|  9.84k|                    }
  876|  53.3k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 34.4k, False: 18.9k]
  |  Branch (876:30): [True: 10.5k, False: 42.8k]
  |  Branch (876:46): [True: 29.2k, False: 5.27k]
  |  Branch (876:62): [True: 15.4k, False: 13.7k]
  |  Branch (876:75): [True: 10.5k, False: 4.97k]
  ------------------
  877|  10.5k|                    {
  878|  10.5k|                        return OpCode::MOVFP2I;
  879|  10.5k|                    }
  880|  63.2k|                }
  881|   152k|                break;
  882|   172k|            }
  883|       |
  884|   152k|            default: {
  ------------------
  |  Branch (884:13): [True: 139k, False: 4.98M]
  ------------------
  885|   139k|                break;
  886|   172k|            }
  887|  5.12M|        }
  888|       |
  889|       |        // None found
  890|  3.62M|        return OpCode::NONE;
  891|  5.12M|    }
_ZN3dlx3iceEcc:
   17|  6.69M|    {
   18|  6.69M|        constexpr const char diff = 'a' - 'A';
   19|  6.69M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 1.92M, False: 4.76M]
  |  Branch (19:28): [True: 1.81M, False: 2.94M]
  ------------------
   20|  6.69M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  5.31M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  76.7k|    {
  193|  76.7k|        ParseError err;
  194|       |
  195|  76.7k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  76.7k|        err.m_LineNumber                           = line_number;
  197|  76.7k|        err.m_Column                               = column;
  198|  76.7k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  76.7k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  76.7k|        return err;
  202|  76.7k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  76.7k|    {
  207|  76.7k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  76.7k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  76.7k|                                                         actual_type);
  210|  76.7k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|  5.48k|    {
  216|  5.48k|        ParseError err;
  217|       |
  218|  5.48k|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|  5.48k|        err.m_LineNumber        = line_number;
  220|  5.48k|        err.m_Column            = column;
  221|  5.48k|        err.invalid_number.text = text;
  222|       |
  223|  5.48k|        return err;
  224|  5.48k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|  5.48k|    {
  228|  5.48k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|  5.48k|                                                token.GetColumn().unsafe(), token.GetText());
  230|  5.48k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|     36|    {
  235|     36|        ParseError err;
  236|       |
  237|     36|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|     36|        err.m_LineNumber = line_number;
  239|     36|        err.m_Column     = column;
  240|       |
  241|     36|        return err;
  242|     36|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|     36|    {
  247|     36|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|     36|                                                                     token.GetColumn().unsafe());
  249|     36|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|  2.30M|    {
  255|  2.30M|        ParseError err;
  256|       |
  257|  2.30M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|  2.30M|        err.m_LineNumber                   = line_number;
  259|  2.30M|        err.m_Column                       = column;
  260|  2.30M|        err.unexpected_token.expected_type = expected_type;
  261|  2.30M|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|  2.30M|        return err;
  264|  2.30M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|  2.30M|    {
  269|  2.30M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|  2.30M|                                                  token.GetColumn().unsafe(), expected_type,
  271|  2.30M|                                                  token.GetType());
  272|  2.30M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|   533k|    {
  277|   533k|        ParseError err;
  278|       |
  279|   533k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|   533k|        err.m_LineNumber                   = line_number;
  281|   533k|        err.m_Column                       = column;
  282|   533k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|   533k|        return err;
  285|   533k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  7.26k|    {
  289|  7.26k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  7.26k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  7.26k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|  1.09M|    {
  296|  1.09M|        ParseError err;
  297|       |
  298|  1.09M|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|  1.09M|        err.m_LineNumber                       = line_number;
  300|  1.09M|        err.m_Column                           = column;
  301|  1.09M|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|  1.09M|        return err;
  304|  1.09M|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|  1.09M|    {
  309|  1.09M|        return ConstructInvalidLabelIdentifierParseError(
  310|  1.09M|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|  1.09M|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|   349k|    {
  317|   349k|        ParseError err;
  318|       |
  319|   349k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|   349k|        err.m_LineNumber                     = line_number;
  321|   349k|        err.m_Column                         = column;
  322|   349k|        err.label_already_defined.label_name = label_name;
  323|   349k|        err.label_already_defined.at_line    = at_line;
  324|   349k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|   349k|        return err;
  327|   349k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|   349k|    {
  332|   349k|        return ConstructLabelAlreadyDefinedParseError(
  333|   349k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|   349k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|   349k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   564k|    {
  340|   564k|        ParseError err;
  341|       |
  342|   564k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   564k|        err.m_LineNumber = line_number;
  344|   564k|        err.m_Column     = column;
  345|       |
  346|   564k|        return err;
  347|   564k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   564k|    {
  352|   564k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   564k|                                                        token.GetColumn().unsafe());
  354|   564k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|   139k|    {
  360|   139k|        ParseError err;
  361|       |
  362|   139k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|   139k|        err.m_LineNumber               = line_number;
  364|   139k|        err.m_Column                   = column;
  365|   139k|        err.too_few_arguments.required = required;
  366|   139k|        err.too_few_arguments.provided = provided;
  367|       |
  368|   139k|        return err;
  369|   139k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|   139k|    {
  374|   139k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|   139k|                                                  token.GetColumn().unsafe(), required, provided);
  376|   139k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|   151k|    {
  381|   151k|        ParseError err;
  382|       |
  383|   151k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|   151k|        err.m_LineNumber           = line_number;
  385|   151k|        err.m_Column               = column;
  386|   151k|        err.empty_label.label_name = label_name;
  387|       |
  388|   151k|        return err;
  389|   151k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|   151k|    {
  393|   151k|        return ConstructEmptyLabelParseError(
  394|   151k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|   151k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 130k, False: 21.0k]
  ------------------
  396|   130k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|   151k|                        token.GetText());
  398|   151k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  96.4k|    {
  403|  96.4k|        ParseError err;
  404|       |
  405|  96.4k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  96.4k|        err.m_LineNumber = line_number;
  407|  96.4k|        err.m_Column     = column;
  408|       |
  409|  96.4k|        return err;
  410|  96.4k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  96.4k|    {
  414|  96.4k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  96.4k|                                               token.GetColumn().unsafe());
  416|  96.4k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  5.31M|    {
   19|  5.31M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  5.31M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  36.2k|    {
  182|  36.2k|        ParsedProgram program;
  183|       |
  184|  36.2k|        program.m_Tokens = tokens;
  185|       |
  186|  36.2k|        phi::boolean line_has_instruction{false};
  187|  36.2k|        phi::usize   label_count{0u};
  188|       |
  189|  6.29M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 6.25M, False: 36.2k]
  ------------------
  190|  6.25M|        {
  191|  6.25M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  6.25M|            switch (current_token.GetType())
  196|  6.25M|            {
  197|       |                // Ignore comments
  198|  39.8k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 39.8k, False: 6.21M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  39.8k|                    break;
  201|       |
  202|   934k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 934k, False: 5.32M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   934k|                    line_has_instruction = false;
  205|   934k|                    break;
  206|       |
  207|  2.49M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 2.49M, False: 3.76M]
  ------------------
  208|  2.49M|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 423k, False: 2.07M]
  ------------------
  209|   423k|                    {
  210|   423k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|   423k|                                current_token, Token::Type::NewLine));
  212|   423k|                        break;
  213|   423k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|  2.07M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 667k, False: 1.40M]
  ------------------
  218|   667k|                    {
  219|   667k|                        program.AddParseError(
  220|   667k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   667k|                        break;
  222|   667k|                    }
  223|       |
  224|  1.40M|                    std::string_view label_name = current_token.GetText();
  225|  1.40M|                    label_name.remove_suffix(1);
  226|       |
  227|  1.40M|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 525k, False: 877k]
  ------------------
  228|   525k|                    {
  229|   525k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|   525k|                                current_token.GetLineNumber().unsafe(),
  231|   525k|                                current_token.GetColumn().unsafe(), label_name));
  232|   525k|                        break;
  233|   525k|                    }
  234|       |
  235|   877k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 359k, False: 517k]
  ------------------
  236|   359k|                    {
  237|   359k|                        program.AddParseError(
  238|   359k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|   359k|                        break;
  240|   359k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|   517k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 349k, False: 168k]
  ------------------
  244|   349k|                    {
  245|       |                        // Find first defintions of label
  246|   349k|                        const Token* first_label_definition =
  247|   349k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   349k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|   349k|                                    {
  250|   349k|                                        std::string_view token_label_name = t.GetText();
  251|   349k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   349k|                                        if (token_label_name == label_name)
  254|   349k|                                        {
  255|   349k|                                            return true;
  256|   349k|                                        }
  257|   349k|                                    }
  258|       |
  259|   349k|                                    return false;
  260|   349k|                                });
  261|       |
  262|   349k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|   349k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|   349k|                                current_token, *first_label_definition));
  266|   349k|                        break;
  267|   349k|                    }
  268|       |
  269|   168k|                    program.m_JumpData[label_name] =
  270|   168k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|   168k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|   168k|                    break;
  277|   517k|                }
  278|       |
  279|   995k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 995k, False: 5.26M]
  ------------------
  280|   995k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 564k, False: 430k]
  ------------------
  281|   564k|                    {
  282|   564k|                        program.AddParseError(
  283|   564k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   564k|                        break;
  285|   564k|                    }
  286|       |
  287|   430k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|   430k|                    PHI_ASSERT(current_token.HasHint());
  291|   430k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|   430k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|   430k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|   430k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|   430k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|   430k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|   430k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|   430k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|   430k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   814k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 762k, False: 52.3k]
  ------------------
  313|   762k|                    {
  314|       |                        // Get next token
  315|   762k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 3.74k, False: 758k]
  ------------------
  316|  3.74k|                        {
  317|  3.74k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|  3.74k|                                    current_token, number_of_argument_required.unsafe(),
  319|  3.74k|                                    argument_num.unsafe()));
  320|  3.74k|                            break;
  321|  3.74k|                        }
  322|       |
  323|   758k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   758k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 287k, False: 471k]
  ------------------
  327|   287k|                        {
  328|   287k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 96.4k, False: 191k]
  ------------------
  329|  96.4k|                            {
  330|  96.4k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  96.4k|                            }
  332|       |
  333|   287k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|   287k|                            continue;
  336|   287k|                        }
  337|       |
  338|   471k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 135k, False: 336k]
  ------------------
  339|   135k|                        {
  340|   135k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|   135k|                                    token, number_of_argument_required.unsafe(),
  342|   135k|                                    argument_num.unsafe()));
  343|   135k|                            break;
  344|   135k|                        }
  345|       |
  346|   336k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|   336k|                                parse_instruction_argument(
  348|   336k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|   336k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 238k, False: 97.2k]
  ------------------
  350|   238k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|   238k|                            break;
  353|   238k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  97.2k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  97.2k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  97.2k|                        argument_num++;
  360|  97.2k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  97.2k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|   430k|                    program.m_Instructions.emplace_back(instruction);
  368|   430k|                    line_has_instruction = true;
  369|   430k|                    break;
  370|   995k|                }
  371|       |
  372|  1.79M|                default:
  ------------------
  |  Branch (372:17): [True: 1.79M, False: 4.46M]
  ------------------
  373|  1.79M|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|  1.79M|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 890k, False: 903k]
  ------------------
  375|   890k|                    {
  376|   890k|                        expected_token_type = Token::Type::NewLine;
  377|   890k|                    }
  378|       |
  379|  1.79M|                    program.AddParseError(
  380|  1.79M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|  1.79M|                    break;
  382|  6.25M|            }
  383|  6.25M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  36.2k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 11.0k, False: 25.2k]
  ------------------
  387|  11.0k|        {
  388|   204k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 193k, False: 11.0k]
  ------------------
  389|   193k|            {
  390|   193k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|   193k|                const Token& token = *it;
  393|   193k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 151k, False: 42.4k]
  ------------------
  394|   151k|                {
  395|   151k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|   151k|                    --label_count;
  397|   151k|                }
  398|   193k|            }
  399|  11.0k|        }
  400|       |
  401|  36.2k|        return program;
  402|  36.2k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  36.2k|    {
  406|  36.2k|        TokenStream tokens = Tokenize(source);
  407|  36.2k|        return Parse(tokens);
  408|  36.2k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|   336k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|   336k|        switch (token.GetType())
   38|   336k|        {
   39|  50.6k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 50.6k, False: 285k]
  ------------------
   40|  50.6k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 23.7k, False: 26.8k]
  ------------------
   41|  50.6k|                                          ArgumentType::AddressDisplacement))
   42|  23.7k|                {
   43|  23.7k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  23.7k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  23.7k|                    return {};
   47|  23.7k|                }
   48|       |
   49|       |                // Get address displacement
   50|  26.8k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  26.8k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  26.8k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 36, False: 26.7k]
  ------------------
   55|     36|                {
   56|     36|                    program.AddParseError(
   57|     36|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|     36|                    return {};
   59|     36|                }
   60|       |
   61|  26.7k|                auto         it           = tokens.current_position();
   62|  26.7k|                const Token& first_token  = tokens.consume();
   63|  26.7k|                const Token& second_token = tokens.consume();
   64|  26.7k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  26.7k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 11.1k, False: 15.6k]
  ------------------
   67|  11.1k|                {
   68|  11.1k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  11.1k|                            first_token, Token::Type::OpenBracket));
   70|  11.1k|                    return {};
   71|  11.1k|                }
   72|       |
   73|       |                // Second token is the register
   74|  15.6k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 4.56k, False: 11.0k]
  ------------------
   75|  4.56k|                {
   76|  4.56k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|  4.56k|                            second_token, Token::Type::RegisterInt));
   78|  4.56k|                    return {};
   79|  4.56k|                }
   80|       |
   81|  11.0k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 4.36k, False: 6.70k]
  ------------------
   82|  4.36k|                {
   83|  4.36k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|  4.36k|                            third_token, Token::Type::ClosingBracket));
   85|  4.36k|                    return {};
   86|  4.36k|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|  6.70k|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|  6.70k|                return ConstructInstructionArgumentAddressDisplacement(
   95|  6.70k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|  11.0k|            }
   97|  47.2k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 47.2k, False: 288k]
  ------------------
   98|  47.2k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 2.55k, False: 44.6k]
  ------------------
   99|  2.55k|                {
  100|  2.55k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  2.55k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  2.55k|                    return {};
  103|  2.55k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  44.6k|                return ConstructInstructionArgumentRegisterInt(
  109|  44.6k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  47.2k|            }
  111|  14.2k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 14.2k, False: 321k]
  ------------------
  112|  14.2k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 9.23k, False: 4.97k]
  ------------------
  113|  9.23k|                {
  114|  9.23k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  9.23k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  9.23k|                    return {};
  117|  9.23k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  4.97k|                return ConstructInstructionArgumentRegisterFloat(
  123|  4.97k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  14.2k|            }
  125|  7.26k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 7.26k, False: 328k]
  ------------------
  126|  7.26k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  7.26k|                return {};
  129|  14.2k|            }
  130|   130k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 130k, False: 205k]
  ------------------
  131|       |                // Parse as Label
  132|   130k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 30.0k, False: 100k]
  ------------------
  133|  30.0k|                {
  134|  30.0k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  30.0k|                            token, expected_argument_type, ArgumentType::Label));
  136|  30.0k|                    return {};
  137|  30.0k|                }
  138|       |
  139|   100k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 100k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|   100k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 64.6k, False: 35.7k]
  ------------------
  146|  64.6k|                {
  147|  64.6k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  64.6k|                    return {};
  149|  64.6k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  35.7k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|   100k|            }
  155|  21.7k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 21.7k, False: 314k]
  ------------------
  156|  21.7k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 11.1k, False: 10.5k]
  ------------------
  157|  11.1k|                {
  158|  11.1k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  11.1k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  11.1k|                    return {};
  161|  11.1k|                }
  162|       |
  163|  10.5k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 5.10k, False: 5.48k]
  ------------------
  164|  5.10k|                {
  165|  5.10k|                    return ConstructInstructionArgumentImmediateValue(
  166|  5.10k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  5.10k|                }
  168|       |
  169|  5.48k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|  5.48k|                return {};
  171|  10.5k|            }
  172|       |
  173|  64.4k|            default:
  ------------------
  |  Branch (173:13): [True: 64.4k, False: 271k]
  ------------------
  174|  64.4k|                program.AddParseError(
  175|  64.4k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  64.4k|                return {};
  177|   336k|        }
  178|   336k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  6.98M|                                tokens.find_first_token_if([&](const Token& t) {
  248|  6.98M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 4.79M, False: 2.18M]
  ------------------
  249|  4.79M|                                    {
  250|  4.79M|                                        std::string_view token_label_name = t.GetText();
  251|  4.79M|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  4.79M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 349k, False: 4.44M]
  ------------------
  254|   349k|                                        {
  255|   349k|                                            return true;
  256|   349k|                                        }
  257|  4.79M|                                    }
  258|       |
  259|  6.63M|                                    return false;
  260|  6.98M|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    243|    {
  354|    243|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 243]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    243|        m_CurrentProgram = &program;
  361|       |
  362|    243|        m_ProgramCounter               = 0u;
  363|    243|        m_Halted                       = false;
  364|    243|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    243|        m_LastRaisedException          = Exception::None;
  366|    243|        m_CurrentStepCount             = 0u;
  367|       |
  368|    243|        return true;
  369|    243|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  5.27M|    {
   14|  5.27M|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 903k, False: 4.36M]
  ------------------
   15|   903k|        {
   16|   903k|            char first_char = token[0];
   17|   903k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 40.9k, False: 862k]
  |  Branch (17:38): [True: 66.0k, False: 796k]
  ------------------
   18|   106k|            {
   19|   106k|                char second_char = token[1];
   20|   106k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 104k, False: 2.69k]
  |  Branch (20:43): [True: 79.5k, False: 24.7k]
  ------------------
   21|  79.5k|                {
   22|  79.5k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  79.5k|                }
   24|   106k|            }
   25|   903k|        }
   26|  4.36M|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 1.19M, False: 3.17M]
  ------------------
   27|  1.19M|        {
   28|  1.19M|            char first_char = token[0];
   29|  1.19M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 73.7k, False: 1.12M]
  |  Branch (29:38): [True: 16.7k, False: 1.10M]
  ------------------
   30|  90.4k|            {
   31|  90.4k|                char second_char = token[1];
   32|  90.4k|                char third_char  = token[2];
   33|       |
   34|  90.4k|                switch (second_char)
   35|  90.4k|                {
   36|  19.2k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 19.2k, False: 71.1k]
  ------------------
   37|  19.2k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 8.46k, False: 10.8k]
  |  Branch (37:50): [True: 4.41k, False: 4.04k]
  ------------------
   38|  4.41k|                        {
   39|  4.41k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  4.41k|                        }
   41|  14.8k|                        break;
   42|  19.2k|                    }
   43|  35.1k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 35.1k, False: 55.3k]
  ------------------
   44|  35.1k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 20.7k, False: 14.3k]
  |  Branch (44:50): [True: 13.9k, False: 6.82k]
  ------------------
   45|  13.9k|                        {
   46|  13.9k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  13.9k|                        }
   48|  21.2k|                        break;
   49|  35.1k|                    }
   50|  21.2k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 17.0k, False: 73.4k]
  ------------------
   51|  17.0k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 3.28k, False: 13.7k]
  |  Branch (51:50): [True: 7.83k, False: 5.89k]
  ------------------
   52|  11.1k|                        {
   53|  11.1k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  11.1k|                        }
   55|  5.89k|                        break;
   56|  17.0k|                    }
   57|  19.0k|                    default: {
  ------------------
  |  Branch (57:21): [True: 19.0k, False: 71.4k]
  ------------------
   58|  19.0k|                        break;
   59|  17.0k|                    }
   60|  90.4k|                }
   61|  90.4k|            }
   62|  1.19M|        }
   63|       |
   64|  5.16M|        return IntRegisterID::None;
   65|  5.27M|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|  5.16M|    {
   69|  5.16M|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 824k, False: 4.33M]
  ------------------
   70|   824k|        {
   71|   824k|            char first_char = token[0];
   72|   824k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 16.8k, False: 807k]
  |  Branch (72:38): [True: 20.7k, False: 786k]
  ------------------
   73|  37.6k|            {
   74|  37.6k|                char second_char = token[1];
   75|  37.6k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 31.4k, False: 6.15k]
  |  Branch (75:43): [True: 18.9k, False: 12.5k]
  ------------------
   76|  18.9k|                {
   77|  18.9k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  18.9k|                }
   79|  37.6k|            }
   80|   824k|        }
   81|  4.33M|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 1.16M, False: 3.17M]
  ------------------
   82|  1.16M|        {
   83|  1.16M|            char first_char = token[0];
   84|  1.16M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 52.6k, False: 1.11M]
  |  Branch (84:38): [True: 18.3k, False: 1.09M]
  ------------------
   85|  70.9k|            {
   86|  70.9k|                char second_char = token[1];
   87|  70.9k|                char third_char  = token[2];
   88|       |
   89|  70.9k|                switch (second_char)
   90|  70.9k|                {
   91|  16.8k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 16.8k, False: 54.0k]
  ------------------
   92|  16.8k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 13.0k, False: 3.79k]
  |  Branch (92:50): [True: 4.24k, False: 8.83k]
  ------------------
   93|  4.24k|                        {
   94|  4.24k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  4.24k|                        }
   96|  12.6k|                        break;
   97|  16.8k|                    }
   98|  15.4k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 15.4k, False: 55.5k]
  ------------------
   99|  15.4k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 7.18k, False: 8.28k]
  |  Branch (99:50): [True: 5.01k, False: 2.16k]
  ------------------
  100|  5.01k|                        {
  101|  5.01k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  5.01k|                        }
  103|  10.4k|                        break;
  104|  15.4k|                    }
  105|  16.6k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 16.6k, False: 54.2k]
  ------------------
  106|  16.6k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 6.96k, False: 9.72k]
  |  Branch (106:50): [True: 1.76k, False: 7.95k]
  ------------------
  107|  8.73k|                        {
  108|  8.73k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  8.73k|                        }
  110|  7.95k|                        break;
  111|  16.6k|                    }
  112|  21.9k|                    default: {
  ------------------
  |  Branch (112:21): [True: 21.9k, False: 49.0k]
  ------------------
  113|  21.9k|                        break;
  114|  16.6k|                    }
  115|  70.9k|                }
  116|  70.9k|            }
  117|  1.16M|        }
  118|       |
  119|  5.12M|        return FloatRegisterID::None;
  120|  5.16M|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|  4.76M|    {
  124|  4.76M|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 989k, False: 3.77M]
  ------------------
  125|   989k|        {
  126|   989k|            char c1 = token[0];
  127|   989k|            char c2 = token[1];
  128|   989k|            char c3 = token[2];
  129|   989k|            char c4 = token[3];
  130|       |
  131|   989k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 33.4k, False: 956k]
  |  Branch (131:34): [True: 19.3k, False: 936k]
  |  Branch (131:49): [True: 7.10k, False: 45.7k]
  |  Branch (131:62): [True: 32.7k, False: 12.9k]
  ------------------
  132|   989k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 19.3k, False: 20.5k]
  |  Branch (132:34): [True: 13.1k, False: 7.43k]
  |  Branch (132:49): [True: 18.9k, False: 13.4k]
  |  Branch (132:62): [True: 32, False: 13.4k]
  ------------------
  133|   989k|        }
  134|       |
  135|  3.77M|        return false;
  136|  4.76M|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  5.86M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|  1.22M|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  24.4M|    {
   41|  24.4M|        return m_Type;
   42|  24.4M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  18.1M|    {
   51|  18.1M|        return m_LineNumber;
   52|  18.1M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  33.9M|    {
   56|  33.9M|        return m_Column;
   57|  33.9M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  22.3M|    {
   61|  22.3M|        return m_Text.length();
   62|  22.3M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  10.3M|    {
   66|  10.3M|        return m_Text;
   67|  10.3M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   467k|    {
   80|   467k|        return m_HasHint;
   81|   467k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   518k|    {
   85|   518k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   518k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   518k|                   m_Type == Type::ImmediateInteger);
   88|   518k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   518k|        return m_Hint;
   91|   518k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  36.2k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  36.2k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  36.2k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  26.8k|    {
   51|  26.8k|        auto it = m_Iterator;
   52|   107k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 80.4k, False: 26.7k]
  ------------------
   53|  80.4k|        {
   54|  80.4k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 36, False: 80.4k]
  ------------------
   55|     36|            {
   56|     36|                return false;
   57|     36|            }
   58|  80.4k|        }
   59|       |
   60|  26.7k|        return true;
   61|  26.8k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  7.05M|    {
   65|  7.05M|        return m_Iterator != m_Tokens.end();
   66|  7.05M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  7.09M|    {
   70|  7.09M|        return m_Iterator == m_Tokens.end();
   71|  7.09M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  7.09M|    {
   85|  7.09M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  7.09M|        return *m_Iterator++;
   91|  7.09M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  26.7k|    {
  164|  26.7k|        return m_Iterator;
  165|  26.7k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  6.70k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  6.70k|        m_Iterator = it;
  179|  6.70k|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  36.2k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  36.2k|        return m_Tokens.begin();
  188|  36.2k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  36.2k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  36.2k|        return m_Tokens.end();
  206|  36.2k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  11.0k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  11.0k|        return m_Tokens.rbegin();
  224|  11.0k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|   193k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|   193k|        return m_Tokens.rend();
  233|   193k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  36.2k|    {
   63|  36.2k|        TokenStream tokens;
   64|       |
   65|  36.2k|        std::string_view current_token;
   66|       |
   67|  36.2k|        phi::u64 current_line_number{1u};
   68|  36.2k|        phi::u64 current_column{1u};
   69|  36.2k|        phi::u64 token_begin{0u};
   70|       |
   71|  36.2k|        phi::boolean parsing_comment{false};
   72|       |
   73|  18.0M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 17.9M, False: 36.2k]
  ------------------
   74|  17.9M|        {
   75|  17.9M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  17.9M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 1.07M, False: 16.9M]
  ------------------
   78|  1.07M|            {
   79|  1.07M|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 339k, False: 733k]
  ------------------
   80|   339k|                {
   81|       |                    // Skip empty lines
   82|   339k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|   339k|                                        current_line_number, current_column);
   84|       |
   85|   339k|                    parsing_comment = false;
   86|   339k|                    current_line_number += 1u;
   87|   339k|                    current_column = 1u;
   88|   339k|                    continue;
   89|   339k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   733k|                tokens.emplace_back(
   93|   733k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   733k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   733k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   733k|                                    current_line_number, current_column);
   98|       |
   99|   733k|                current_token   = std::string_view{};
  100|   733k|                parsing_comment = false;
  101|   733k|                current_line_number += 1u;
  102|   733k|                current_column = 0u;
  103|   733k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  16.9M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 29.2k, False: 16.8M]
  |  Branch (105:34): [True: 37.0k, False: 16.8M]
  ------------------
  106|  66.3k|            {
  107|  66.3k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 14.8k, False: 51.5k]
  ------------------
  108|  14.8k|                {
  109|  14.8k|                    token_begin = i;
  110|  14.8k|                }
  111|  51.5k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 44.3k, False: 7.22k]
  ------------------
  112|  44.3k|                {
  113|  44.3k|                    tokens.emplace_back(ParseToken(
  114|  44.3k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  44.3k|                            current_line_number, current_column - current_token.length()));
  116|  44.3k|                    token_begin   = i;
  117|  44.3k|                    current_token = std::string_view{};
  118|  44.3k|                }
  119|       |
  120|  66.3k|                parsing_comment = true;
  121|  66.3k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  66.3k|            }
  123|  16.8M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 134k, False: 16.7M]
  ------------------
  124|   134k|            {
  125|       |                // simply append the character
  126|   134k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   134k|            }
  128|  16.7M|            else
  129|  16.7M|            {
  130|       |                // Not parsing a comment
  131|  16.7M|                switch (c)
  132|  16.7M|                {
  133|   287k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 287k, False: 16.4M]
  ------------------
  134|   617k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 330k, False: 16.3M]
  ------------------
  135|   617k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 0, False: 16.7M]
  ------------------
  136|   617k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 144k, False: 473k]
  ------------------
  137|   144k|                        {
  138|   144k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|   144k|                            continue;
  141|   144k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   473k|                        tokens.emplace_back(ParseToken(
  145|   473k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   473k|                                current_line_number, current_column - current_token.length()));
  147|   473k|                        current_token = std::string_view{};
  148|   473k|                        break;
  149|  1.97M|                    case ':':
  ------------------
  |  Branch (149:21): [True: 1.97M, False: 14.7M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  1.97M|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 1.57M, False: 401k]
  ------------------
  152|  1.57M|                        {
  153|  1.57M|                            current_token =
  154|  1.57M|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  1.57M|                            tokens.emplace_back(ParseToken(
  156|  1.57M|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  1.57M|                                    current_line_number,
  158|  1.57M|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  1.57M|                            current_token = std::string_view{};
  161|  1.57M|                        }
  162|   401k|                        else
  163|   401k|                        {
  164|       |                            // Orphan colon
  165|   401k|                            token_begin = i;
  166|       |
  167|   401k|                            tokens.emplace_back(Token::Type::Colon,
  168|   401k|                                                source.substr(token_begin.unsafe(), 1),
  169|   401k|                                                current_line_number, current_column);
  170|   401k|                        }
  171|  1.97M|                        break;
  172|  1.19M|                    case ',':
  ------------------
  |  Branch (172:21): [True: 1.19M, False: 15.5M]
  ------------------
  173|  1.39M|                    case '(':
  ------------------
  |  Branch (173:21): [True: 195k, False: 16.5M]
  ------------------
  174|  1.64M|                    case ')':
  ------------------
  |  Branch (174:21): [True: 252k, False: 16.4M]
  ------------------
  175|  1.64M|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 1.13M, False: 512k]
  ------------------
  176|  1.13M|                        {
  177|  1.13M|                            tokens.emplace_back(ParseToken(
  178|  1.13M|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|  1.13M|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|  1.13M|                            current_token = std::string_view{};
  182|  1.13M|                        }
  183|       |
  184|  1.64M|                        Token::Type type;
  185|  1.64M|                        switch (c)
  186|  1.64M|                        {
  187|  1.19M|                            case ',':
  ------------------
  |  Branch (187:29): [True: 1.19M, False: 448k]
  ------------------
  188|  1.19M|                                type = Token::Type::Comma;
  189|  1.19M|                                break;
  190|   195k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 195k, False: 1.44M]
  ------------------
  191|   195k|                                type = Token::Type::OpenBracket;
  192|   195k|                                break;
  193|   252k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 252k, False: 1.39M]
  ------------------
  194|   252k|                                type = Token::Type::ClosingBracket;
  195|   252k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 1.64M]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  1.64M|#endif
  201|  1.64M|                        }
  202|       |
  203|  1.64M|                        token_begin = i;
  204|       |
  205|  1.64M|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  1.64M|                                            current_line_number, current_column);
  207|  1.64M|                        break;
  208|       |
  209|  12.4M|                    default:
  ------------------
  |  Branch (209:21): [True: 12.4M, False: 4.23M]
  ------------------
  210|  12.4M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 3.92M, False: 8.54M]
  ------------------
  211|  3.92M|                        {
  212|  3.92M|                            token_begin = i;
  213|  3.92M|                        }
  214|       |
  215|       |                        // simply append the character
  216|  12.4M|                        current_token =
  217|  12.4M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  16.7M|                }
  219|  16.7M|            }
  220|       |
  221|  17.4M|            current_column += 1u;
  222|  17.4M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  36.2k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 26.0k, False: 10.2k]
  ------------------
  226|  26.0k|        {
  227|  26.0k|            tokens.emplace_back(
  228|  26.0k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  26.0k|                               current_line_number, current_column - current_token.length()));
  230|  26.0k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  36.2k|        tokens.finalize();
  234|       |
  235|  36.2k|        return tokens;
  236|  36.2k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  3.97M|    {
   11|  3.97M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 50.1k, False: 3.92M]
  |  Branch (11:35): [True: 46.6k, False: 3.48k]
  ------------------
   12|  46.6k|        {
   13|  46.6k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  46.6k|            if (number)
  ------------------
  |  Branch (15:17): [True: 7.55k, False: 39.0k]
  ------------------
   16|  7.55k|            {
   17|  7.55k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  7.55k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  7.55k|            }
   20|       |
   21|  39.0k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  46.6k|        }
   23|       |
   24|  3.93M|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 26.8k, False: 3.90M]
  |  Branch (24:35): [True: 32.3k, False: 3.87M]
  ------------------
   25|  59.1k|        {
   26|  59.1k|            return {Token::Type::Comment, token, line_number, column};
   27|  59.1k|        }
   28|       |
   29|  3.87M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 94.3k, False: 3.77M]
  ------------------
   30|  94.3k|        {
   31|  94.3k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  94.3k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  94.3k|        }
   34|       |
   35|  3.77M|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 11.5k, False: 3.76M]
  ------------------
   36|  11.5k|        {
   37|  11.5k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  11.5k|        }
   39|       |
   40|  3.76M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 75.3k, False: 3.69M]
  ------------------
   41|  75.3k|        {
   42|  75.3k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  75.3k|                    static_cast<std::uint32_t>(id)};
   44|  75.3k|        }
   45|       |
   46|  3.69M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 33.6k, False: 3.65M]
  ------------------
   47|  33.6k|        {
   48|  33.6k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  33.6k|                    static_cast<std::uint32_t>(id)};
   50|  33.6k|        }
   51|       |
   52|  3.65M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 1.01M, False: 2.64M]
  ------------------
   53|  1.01M|        {
   54|  1.01M|            return {Token::Type::OpCode, token, line_number, column,
   55|  1.01M|                    static_cast<std::uint32_t>(opcode)};
   56|  1.01M|        }
   57|       |
   58|  2.64M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|  3.65M|    }

_ZN6ImVec2C2Ev:
  262|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

LLVMFuzzerTestOneInput:
   11|  36.2k|{
   12|  36.2k|    static dlxemu::Emulator emu;
   13|       |
   14|  36.2k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   15|       |
   16|  36.2k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   17|       |
   18|       |    // Parse it
   19|  36.2k|    editor.SetText(std::string(source.data(), source.size()));
   20|  36.2k|    editor.m_FullText = editor.GetText();
   21|       |
   22|  36.2k|    emu.ParseProgram(editor.m_FullText);
   23|       |
   24|  36.2k|    editor.ColorizeInternal();
   25|       |
   26|  36.2k|    return 0;
   27|  36.2k|}


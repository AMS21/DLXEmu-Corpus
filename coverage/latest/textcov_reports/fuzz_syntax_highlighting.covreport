_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  197|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  202|   352k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  240|  70.4k|    {
  241|  70.4k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (241:13): [True: 35.5k, False: 34.8k]
  ------------------
  242|  35.5k|        {
  243|  35.5k|            return m_Line < other.m_Line;
  244|  35.5k|        }
  245|       |
  246|  34.8k|        return m_Column <= other.m_Column;
  247|  70.4k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  251|      1|    {
  252|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (252:13): [True: 0, False: 1]
  ------------------
  253|      0|        {
  254|      0|            return m_Line > other.m_Line;
  255|      0|        }
  256|       |
  257|      1|        return m_Column >= other.m_Column;
  258|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  265|  32.7M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  293|      1|    {
  294|      1|        Colorize();
  295|      1|        m_Lines.push_back(Line());
  296|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  299|      1|    {
  300|      1|        VerifyInternalState();
  301|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  349|  70.4k|    {
  350|  70.4k|        m_ErrorMarkers.clear();
  351|  70.4k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  414|  70.4k|    {
  415|  70.4k|        m_Breakpoints.clear();
  416|  70.4k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  494|  70.4k|    {
  495|  70.4k|        m_Lines.clear();
  496|  70.4k|        ResetState();
  497|  70.4k|        m_Lines.emplace_back(Line());
  498|       |
  499|  70.4k|        for (const char character : text)
  ------------------
  |  Branch (499:35): [True: 49.4M, False: 70.4k]
  ------------------
  500|  49.4M|        {
  501|  49.4M|            if (character == '\r' ||
  ------------------
  |  Branch (501:17): [True: 43.7k, False: 49.4M]
  |  Branch (501:17): [True: 14.7M, False: 34.6M]
  ------------------
  502|  49.4M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (502:18): [True: 17.3M, False: 32.0M]
  |  Branch (502:48): [True: 15.3M, False: 1.97M]
  |  Branch (502:69): [True: 14.7M, False: 665k]
  ------------------
  503|  14.7M|            {
  504|       |                // ignore the carriage return character and control characters
  505|  14.7M|            }
  506|  34.6M|            else if (character == '\n')
  ------------------
  |  Branch (506:22): [True: 1.97M, False: 32.7M]
  ------------------
  507|  1.97M|            {
  508|  1.97M|                m_Lines.emplace_back(Line());
  509|  1.97M|            }
  510|  32.7M|            else
  511|  32.7M|            {
  512|  32.7M|                m_Lines.back().emplace_back(
  513|  32.7M|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  514|  32.7M|            }
  515|  49.4M|        }
  516|       |
  517|  70.4k|        m_TextChanged = true;
  518|  70.4k|        m_ScrollToTop = true;
  519|       |
  520|  70.4k|        m_UndoBuffer.clear();
  521|  70.4k|        m_UndoIndex = 0u;
  522|       |
  523|  70.4k|        Colorize();
  524|  70.4k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  527|  70.4k|    {
  528|  70.4k|        const phi::u32 max_line = GetMaxLineNumber();
  529|       |
  530|  70.4k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  531|  70.4k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1494|      1|    {
 1495|       |        // Lines should never be empty
 1496|      1|        PHI_ASSERT(!m_Lines.empty());
 1497|       |
 1498|       |        // Verify Selection is still in a valid state
 1499|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1500|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1501|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1502|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1503|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1504|       |
 1505|       |        // Verify cursor position
 1506|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1507|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1508|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1509|       |
 1510|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1511|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1512|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1513|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1514|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1515|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1516|       |#endif
 1517|       |
 1518|       |        // Verify that all breakpoints are on existing lines
 1519|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1519:35): [True: 0, False: 1]
  ------------------
 1520|      0|        {
 1521|      0|            PHI_ASSERT(break_point != 0u);
 1522|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1523|      0|        }
 1524|       |
 1525|       |        // Verify that all error markers are on existing lines
 1526|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1526:34): [True: 0, False: 1]
  ------------------
 1527|      0|        {
 1528|      0|            const phi::u32 line_number = error_marker.first;
 1529|       |
 1530|      0|            PHI_ASSERT(line_number != 0u);
 1531|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1532|      0|        }
 1533|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1536|      1|    {
 1537|      1|        constexpr const static Palette palette = {{
 1538|      1|                0xff7f7f7f, // Default
 1539|      1|                0xffd69c56, // OpCode
 1540|      1|                0xff00ff00, // Register
 1541|      1|                0xff7070e0, // IntegerLiteral
 1542|      1|                0xff206020, // Comment
 1543|      1|                0xff101010, // Background
 1544|      1|                0xffe0e0e0, // Cursor
 1545|      1|                0x80a06020, // Selection
 1546|      1|                0x800020ff, // ErrorMarker
 1547|      1|                0x40f08000, // Breakpoint
 1548|      1|                0xff707000, // Line number
 1549|      1|                0x40000000, // Current line fill
 1550|      1|                0x40808080, // Current line fill (inactive)
 1551|      1|                0x40a0a0a0, // Current line edge
 1552|      1|        }};
 1553|       |
 1554|      1|        return palette;
 1555|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1722|  70.4k|    {
 1723|       |        // TODO: This is quite unreadable
 1724|  70.4k|        const phi::u32 to_line =
 1725|  70.4k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1725:17): [True: 70.4k, False: 0]
  ------------------
 1726|  70.4k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1727|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1728|       |
 1729|  70.4k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1730|  70.4k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1731|  70.4k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1732|  70.4k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1733|  70.4k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1839|  70.4k|    {
 1840|  70.4k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1841|  70.4k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1842|  70.4k|        PHI_ASSERT(start <= end);
 1843|       |
 1844|  70.4k|        std::string result;
 1845|       |
 1846|  70.4k|        phi::u32   lstart = start.m_Line;
 1847|  70.4k|        phi::u32   lend   = end.m_Line;
 1848|  70.4k|        phi::u32   istart = GetCharacterIndex(start);
 1849|  70.4k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1850|  70.4k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1851|  70.4k|        phi::usize size   = 0u;
 1852|       |
 1853|  2.11M|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1853:35): [True: 2.04M, False: 70.4k]
  ------------------
 1854|  2.04M|        {
 1855|  2.04M|            PHI_ASSERT(i < m_Lines.size());
 1856|  2.04M|            size += m_Lines[i.unsafe()].size();
 1857|  2.04M|        }
 1858|       |
 1859|  70.4k|        result.reserve((size + size / 8u).unsafe());
 1860|       |
 1861|  34.7M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1861:16): [True: 25.7M, False: 9.02M]
  |  Branch (1861:16): [True: 34.6M, False: 70.4k]
  |  Branch (1861:33): [True: 8.95M, False: 70.4k]
  ------------------
 1862|  34.6M|        {
 1863|  34.6M|            PHI_ASSERT(lstart < m_Lines.size());
 1864|       |
 1865|  34.6M|            const Line& line = m_Lines[lstart.unsafe()];
 1866|  34.6M|            if (istart < line.size())
  ------------------
  |  Branch (1866:17): [True: 32.7M, False: 1.97M]
  ------------------
 1867|  32.7M|            {
 1868|  32.7M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1869|  32.7M|                istart++;
 1870|  32.7M|            }
 1871|  1.97M|            else
 1872|  1.97M|            {
 1873|  1.97M|                istart = 0u;
 1874|  1.97M|                ++lstart;
 1875|       |
 1876|  1.97M|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1876:21): [True: 1.97M, False: 0]
  ------------------
 1877|  1.97M|                {
 1878|  1.97M|                    result += '\n';
 1879|  1.97M|                }
 1880|  1.97M|            }
 1881|  34.6M|        }
 1882|       |
 1883|  70.4k|        return result;
 1884|  70.4k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2422|   140k|    {
 2423|   140k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2424|       |
 2425|   140k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2426|   140k|        phi::u32    index = 0u;
 2427|  16.0M|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2427:35): [True: 15.9M, False: 74.2k]
  |  Branch (2427:35): [True: 15.8M, False: 140k]
  |  Branch (2427:58): [True: 15.8M, False: 66.5k]
  ------------------
 2428|  15.8M|        {
 2429|  15.8M|            PHI_ASSERT(index < line.size());
 2430|  15.8M|            const Char character = line[index.unsafe()].m_Char;
 2431|       |
 2432|  15.8M|            if (character == '\t')
  ------------------
  |  Branch (2432:17): [True: 345k, False: 15.5M]
  ------------------
 2433|   345k|            {
 2434|   345k|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2435|   345k|            }
 2436|  15.5M|            else
 2437|  15.5M|            {
 2438|  15.5M|                ++column;
 2439|  15.5M|            }
 2440|       |
 2441|  15.8M|            index += UTF8CharLength(character);
 2442|  15.8M|        }
 2443|       |
 2444|   140k|        return index;
 2445|   140k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2494|  70.4k|    {
 2495|  70.4k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2495:13): [True: 0, False: 70.4k]
  ------------------
 2496|      0|        {
 2497|      0|            return 0u;
 2498|      0|        }
 2499|       |
 2500|  70.4k|        const Line& line = m_Lines[line_number.unsafe()];
 2501|  70.4k|        phi::u32    col  = 0u;
 2502|       |
 2503|  15.9M|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2503:32): [True: 15.8M, False: 70.4k]
  ------------------
 2504|  15.8M|        {
 2505|  15.8M|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2506|  15.8M|            if (character == '\t')
  ------------------
  |  Branch (2506:17): [True: 345k, False: 15.5M]
  ------------------
 2507|   345k|            {
 2508|   345k|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2509|   345k|            }
 2510|  15.5M|            else
 2511|  15.5M|            {
 2512|  15.5M|                col++;
 2513|  15.5M|            }
 2514|       |
 2515|  15.8M|            i += UTF8CharLength(character);
 2516|  15.8M|        }
 2517|       |
 2518|  70.4k|        return col;
 2519|  70.4k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2522|  70.4k|    {
 2523|  70.4k|        PHI_ASSERT(!m_Lines.empty());
 2524|       |
 2525|  70.4k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2526|  70.4k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3661|  13.3M|    {
 3662|  13.3M|        PaletteIndex palette_index{PaletteIndex::Default};
 3663|       |
 3664|       |        // Determine palette color
 3665|  13.3M|        switch (token.GetType())
 3666|  13.3M|        {
 3667|   105k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3667:13): [True: 105k, False: 13.2M]
  ------------------
 3668|   105k|                palette_index = PaletteIndex::Comment;
 3669|   105k|                break;
 3670|  66.8k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3670:13): [True: 66.8k, False: 13.2M]
  ------------------
 3671|   232k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3671:13): [True: 166k, False: 13.1M]
  ------------------
 3672|   232k|                palette_index = PaletteIndex::IntegerLiteral;
 3673|   232k|                break;
 3674|  2.09M|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3674:13): [True: 2.09M, False: 11.2M]
  ------------------
 3675|  2.09M|                palette_index = PaletteIndex::OpCode;
 3676|  2.09M|                break;
 3677|  87.5k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3677:13): [True: 87.5k, False: 13.2M]
  ------------------
 3678|   203k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3678:13): [True: 115k, False: 13.2M]
  ------------------
 3679|   226k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3679:13): [True: 23.4k, False: 13.3M]
  ------------------
 3680|   226k|                palette_index = PaletteIndex::Register;
 3681|   226k|                break;
 3682|  1.97M|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3682:13): [True: 1.97M, False: 11.3M]
  ------------------
 3683|  1.97M|                return;
 3684|  8.70M|            default:
  ------------------
  |  Branch (3684:13): [True: 8.70M, False: 4.63M]
  ------------------
 3685|  8.70M|                break;
 3686|  13.3M|        }
 3687|       |
 3688|  11.3M|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3689|  11.3M|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3690|       |
 3691|  11.3M|        for (phi::u64 index{token.GetColumn() - 1u};
 3692|  42.9M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3692:14): [True: 31.5M, False: 11.3M]
  ------------------
 3693|  31.5M|        {
 3694|  31.5M|            PHI_ASSERT(index < line.size());
 3695|  31.5M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3696|  31.5M|        }
 3697|  11.3M|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3700|  70.4k|    {
 3701|  70.4k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3702|       |
 3703|  70.4k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3703:38): [True: 13.3M, False: 70.4k]
  ------------------
 3704|  13.3M|        {
 3705|  13.3M|            ColorizeToken(token);
 3706|  13.3M|        }
 3707|  70.4k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3710|  70.4k|    {
 3711|  70.4k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3712|  70.4k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3713|  70.4k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3714|       |
 3715|       |        // Clear breakpoints and markers
 3716|  70.4k|        ClearBreakPoints();
 3717|  70.4k|        ClearErrorMarkers();
 3718|  70.4k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  135|  15.8M|{
  136|  15.8M|    return UTF8CharLength(static_cast<char>(characater));
  137|  15.8M|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  105|  31.7M|{
  106|  31.7M|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (106:9): [True: 38.8k, False: 31.7M]
  ------------------
  107|  38.8k|    {
  108|  38.8k|        return 6_u8;
  109|  38.8k|    }
  110|       |
  111|  31.7M|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (111:9): [True: 66.1k, False: 31.6M]
  ------------------
  112|  66.1k|    {
  113|  66.1k|        return 5_u8;
  114|  66.1k|    }
  115|       |
  116|  31.6M|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (116:9): [True: 68.7k, False: 31.5M]
  ------------------
  117|  68.7k|    {
  118|  68.7k|        return 4_u8;
  119|  68.7k|    }
  120|       |
  121|  31.5M|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (121:9): [True: 119k, False: 31.4M]
  ------------------
  122|   119k|    {
  123|   119k|        return 3_u8;
  124|   119k|    }
  125|       |
  126|  31.4M|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (126:9): [True: 450k, False: 31.0M]
  ------------------
  127|   450k|    {
  128|   450k|        return 2_u8;
  129|   450k|    }
  130|       |
  131|  31.0M|    return 1_u8;
  132|  31.4M|}

_ZN6dlxemu8EmulatorC2Ev:
   42|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  178|  70.4k|    {
  179|  70.4k|        return m_DLXProgram;
  180|  70.4k|    }
_ZN6dlxemu8Emulator12ParseProgramEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  183|  70.4k|    {
  184|  70.4k|        m_DLXProgram = dlx::Parser::Parse(source);
  185|       |
  186|  70.4k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (186:13): [True: 529, False: 69.8k]
  ------------------
  187|    529|        {
  188|    529|            m_Processor.LoadProgram(m_DLXProgram);
  189|    529|        }
  190|  70.4k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  203|  70.4k|    {
  204|  70.4k|        return m_CodeEditor;
  205|  70.4k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   38|      1|    {
   39|      1|        Shutdown();
   40|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  108|      1|    {
  109|      1|        if (imgui_initialized)
  ------------------
  |  Branch (109:13): [True: 0, False: 1]
  ------------------
  110|      0|        {
  111|      0|            ShutdownImGui();
  112|      0|        }
  113|       |
  114|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (114:13): [True: 0, False: 1]
  ------------------
  115|      0|        {
  116|      0|            glfwDestroyWindow(m_Window);
  117|      0|        }
  118|       |
  119|      1|        if (glfw_initialized)
  ------------------
  |  Branch (119:13): [True: 0, False: 1]
  ------------------
  120|      0|        {
  121|      0|            glfwTerminate();
  122|      0|        }
  123|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  3.23M|        {
  173|  3.23M|            PHI_ASSERT(index < 3u);
  174|       |
  175|  3.23M|            switch (index.unsafe())
  176|  3.23M|            {
  177|  1.44M|                case 0:
  ------------------
  |  Branch (177:17): [True: 1.44M, False: 1.79M]
  ------------------
  178|  1.44M|                    return m_Arg1Type;
  179|       |
  180|   914k|                case 1:
  ------------------
  |  Branch (180:17): [True: 914k, False: 2.32M]
  ------------------
  181|   914k|                    return m_Arg2Type;
  182|       |
  183|   882k|                case 2:
  ------------------
  |  Branch (183:17): [True: 882k, False: 2.35M]
  ------------------
  184|   882k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 3.23M]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  3.23M|#endif
  191|  3.23M|            }
  192|  3.23M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|   859k|        {
  199|   859k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|   859k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 845k, False: 14.0k]
  ------------------
  203|   845k|            {
  204|   845k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   845k|            }
  206|   859k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 498k, False: 361k]
  ------------------
  207|   498k|            {
  208|   498k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   498k|            }
  210|   859k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 274k, False: 585k]
  ------------------
  211|   274k|            {
  212|   274k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  213|   274k|            }
  214|       |
  215|   859k|            return number_of_argument_required;
  216|   859k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|   859k|        {
  225|   859k|            return m_Executor;
  226|   859k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   514k|    {
   38|   514k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   514k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   514k|                                         static_cast<underlying_t>(rhs));
   42|   514k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   514k|    {
   55|   514k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   514k|        return static_cast<underlying_t>(type & test) != 0;
   58|   514k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  3.06M|    {
   31|  3.06M|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 69.2k, False: 2.99M]
  ------------------
   32|  69.2k|        {
   33|  69.2k|            return true;
   34|  69.2k|        }
   35|       |
   36|  2.99M|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 9.27k, False: 2.98M]
  ------------------
   37|  9.27k|        {
   38|  9.27k|            return true;
   39|  9.27k|        }
   40|       |
   41|  2.98M|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 1.07M, False: 1.91M]
  ------------------
   42|  1.07M|        {
   43|  1.07M|            return true;
   44|  1.07M|        }
   45|       |
   46|  1.91M|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 14.8k, False: 1.89M]
  ------------------
   47|  14.8k|        {
   48|  14.8k|            return true;
   49|  14.8k|        }
   50|       |
   51|  1.89M|        return false;
   52|  1.91M|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  1.89M|    {
   56|  1.89M|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 1.89M]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  1.89M|        const char first_char = token.at(0u);
   62|       |
   63|  1.89M|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 410k, False: 1.48M]
  ------------------
   64|   410k|        {
   65|   410k|            return phi::is_alpha(first_char);
   66|   410k|        }
   67|       |
   68|  1.48M|        phi::boolean just_under_scores = (first_char == '_');
   69|  1.48M|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 246k, False: 1.23M]
  |  Branch (69:13): [True: 229k, False: 1.25M]
  |  Branch (69:43): [True: 229k, False: 16.8k]
  ------------------
   70|   229k|        {
   71|   229k|            return false;
   72|   229k|        }
   73|       |
   74|  4.29M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 3.45M, False: 837k]
  ------------------
   75|  3.45M|        {
   76|  3.45M|            const char c{token.at(index)};
   77|       |
   78|  3.45M|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 3.01M, False: 439k]
  ------------------
   79|  3.01M|            {
   80|  3.01M|                just_under_scores = false;
   81|  3.01M|            }
   82|   439k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 20.5k, False: 418k]
  ------------------
   83|  20.5k|            {
   84|  20.5k|                continue;
   85|  20.5k|            }
   86|   418k|            else
   87|   418k|            {
   88|   418k|                return false;
   89|   418k|            }
   90|  3.45M|        }
   91|       |
   92|   837k|        return !just_under_scores;
   93|  1.25M|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|  7.63M|    {
  100|  7.63M|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 7.63M]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|  7.63M|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 1.08M, False: 6.54M]
  ------------------
  106|  1.08M|        {
  107|  1.08M|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 127k, False: 960k]
  ------------------
  108|   127k|            {
  109|   127k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|   127k|            }
  111|       |
  112|   960k|            return {};
  113|  1.08M|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|  6.54M|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 13.2k, False: 6.53M]
  ------------------
  117|  13.2k|        {
  118|  13.2k|            return {};
  119|  13.2k|        }
  120|       |
  121|  6.53M|        std::int32_t number{0};
  122|  6.53M|        phi::boolean is_negative{false};
  123|  6.53M|        phi::boolean starts_with_zero{false};
  124|  6.53M|        phi::boolean parsing_binary{false};
  125|  6.53M|        phi::boolean parsing_octal{false};
  126|  6.53M|        phi::boolean parsing_hexadecimal{false};
  127|  6.53M|        phi::boolean parsed_something{false};
  128|  6.53M|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|  7.34M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 7.24M, False: 102k]
  ------------------
  133|  7.24M|        {
  134|  7.24M|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|  7.24M|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 6.53M, False: 705k]
  ------------------
  138|  6.53M|            {
  139|  6.53M|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 26.7k, False: 6.50M]
  ------------------
  140|  26.7k|                {
  141|  26.7k|                    continue;
  142|  26.7k|                }
  143|       |
  144|  6.50M|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 90.4k, False: 6.41M]
  ------------------
  145|  90.4k|                {
  146|  90.4k|                    is_negative = true;
  147|  90.4k|                    continue;
  148|  90.4k|                }
  149|       |
  150|  6.41M|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 106k, False: 6.31M]
  ------------------
  151|   106k|                {
  152|   106k|                    starts_with_zero = true;
  153|   106k|                    continue;
  154|   106k|                }
  155|       |
  156|  6.31M|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 10.8k, False: 6.30M]
  ------------------
  157|  10.8k|                {
  158|  10.8k|                    return {};
  159|  10.8k|                }
  160|  6.31M|            }
  161|       |
  162|       |            // Second character
  163|  7.00M|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 304k, False: 6.70M]
  ------------------
  164|   304k|            {
  165|   304k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 106k, False: 197k]
  ------------------
  166|   106k|                {
  167|       |                    // Binary
  168|   106k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 9.18k, False: 97.7k]
  |  Branch (168:37): [True: 10.5k, False: 87.1k]
  ------------------
  169|  19.7k|                    {
  170|  19.7k|                        parsing_binary = true;
  171|  19.7k|                        continue;
  172|  19.7k|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  87.1k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 37.1k, False: 50.0k]
  |  Branch (175:37): [True: 20.5k, False: 29.5k]
  ------------------
  176|  57.6k|                    {
  177|  57.6k|                        parsing_hexadecimal = true;
  178|  57.6k|                        continue;
  179|  57.6k|                    }
  180|       |
  181|       |                    // Octal
  182|  29.5k|                    parsing_octal = true;
  183|  29.5k|                }
  184|   304k|            }
  185|       |
  186|       |            // Handle seperators
  187|  6.92M|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 11.8k, False: 6.91M]
  ------------------
  188|  11.8k|            {
  189|  11.8k|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 3.73k, False: 8.15k]
  ------------------
  190|  3.73k|                {
  191|  3.73k|                    return {};
  192|  3.73k|                }
  193|       |
  194|  8.15k|                parsed_separator = true;
  195|  8.15k|                continue;
  196|  11.8k|            }
  197|       |
  198|       |            // Check for over/underflow
  199|  6.91M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 272k, False: 6.64M]
  |  Branch (199:32): [True: 17.5k, False: 255k]
  ------------------
  200|  17.5k|            {
  201|       |                // Would underflow
  202|  17.5k|                return {};
  203|  17.5k|            }
  204|  6.90M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 6.64M, False: 255k]
  |  Branch (204:17): [True: 9.93k, False: 6.89M]
  |  Branch (204:33): [True: 9.93k, False: 6.63M]
  ------------------
  205|  9.93k|            {
  206|       |                // Would overflow
  207|  9.93k|                return {};
  208|  9.93k|            }
  209|       |
  210|  6.89M|            parsed_separator = false;
  211|  6.89M|            parsed_something = true;
  212|       |
  213|  6.89M|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 9.71k, False: 6.88M]
  ------------------
  214|  9.71k|            {
  215|  9.71k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 8.28k, False: 1.43k]
  ------------------
  216|  8.28k|                {
  217|  8.28k|                    return {};
  218|  8.28k|                }
  219|       |
  220|  1.43k|                number <<= 1;
  221|  1.43k|                number |= (c - '0');
  222|  1.43k|            }
  223|  6.88M|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 31.5k, False: 6.84M]
  ------------------
  224|  31.5k|            {
  225|  31.5k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 25.5k, False: 6.04k]
  ------------------
  226|  25.5k|                {
  227|  25.5k|                    return {};
  228|  25.5k|                }
  229|       |
  230|  6.04k|                number <<= 3;
  231|  6.04k|                number |= (c - '0');
  232|  6.04k|            }
  233|  6.84M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 91.8k, False: 6.75M]
  ------------------
  234|  91.8k|            {
  235|  91.8k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 40.4k, False: 51.4k]
  ------------------
  236|  40.4k|                {
  237|  40.4k|                    return {};
  238|  40.4k|                }
  239|       |
  240|  51.4k|                number <<= 4;
  241|  51.4k|                number |= phi::hex_digit_value(c).unsafe();
  242|  51.4k|            }
  243|  6.75M|            else
  244|  6.75M|            {
  245|  6.75M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 6.30M, False: 452k]
  ------------------
  246|  6.30M|                {
  247|  6.30M|                    return {};
  248|  6.30M|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|   452k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 147k, False: 304k]
  |  Branch (251:36): [True: 12.4k, False: 134k]
  ------------------
  252|  12.4k|                {
  253|  12.4k|                    return {};
  254|  12.4k|                }
  255|       |
  256|   439k|                number *= 10;
  257|   439k|                number += (c - '0');
  258|   439k|            }
  259|  6.89M|        }
  260|       |
  261|   102k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 86.8k, False: 15.3k]
  ------------------
  262|  86.8k|        {
  263|       |            // Check for over/underflow
  264|  86.8k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 32.7k, False: 54.1k]
  |  Branch (264:32): [True: 17.9k, False: 14.7k]
  ------------------
  265|  17.9k|            {
  266|       |                // Would underflow
  267|  17.9k|                return {};
  268|  17.9k|            }
  269|  68.8k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 54.1k, False: 14.7k]
  |  Branch (269:17): [True: 18.6k, False: 50.2k]
  |  Branch (269:33): [True: 18.6k, False: 35.5k]
  ------------------
  270|  18.6k|            {
  271|       |                // Would overflow
  272|  18.6k|                return {};
  273|  18.6k|            }
  274|       |
  275|  50.2k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 14.7k, False: 35.5k]
  ------------------
  276|  14.7k|            {
  277|  14.7k|                return static_cast<std::int16_t>(-number);
  278|  14.7k|            }
  279|       |
  280|  35.5k|            return static_cast<std::int16_t>(number);
  281|  50.2k|        }
  282|       |
  283|  15.3k|        return {};
  284|   102k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   672k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   672k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 12.0M, False: 0]
  ------------------
   64|  12.0M|            {
   65|  12.0M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 672k, False: 11.4M]
  ------------------
   66|   672k|                {
   67|   672k|                    return &token;
   68|   672k|                }
   69|  12.0M|            }
   70|       |
   71|      0|            return nullptr;
   72|   672k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  2.59M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.59M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.59M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  7.74M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  7.74M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  7.74M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  2.99M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.99M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.99M|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   859k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|   187k|    {
   25|   187k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|   187k|        switch (argument_number.unsafe())
   28|   187k|        {
   29|   147k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 147k, False: 39.8k]
  ------------------
   30|   147k|                m_Arg1 = argument;
   31|   147k|                break;
   32|  25.3k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 25.3k, False: 162k]
  ------------------
   33|  25.3k|                m_Arg2 = argument;
   34|  25.3k|                break;
   35|  14.5k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 14.5k, False: 173k]
  ------------------
   36|  14.5k|                m_Arg3 = argument;
   37|  14.5k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 187k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|   187k|#endif
   42|   187k|        }
   43|   187k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  2.76M|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  172|  67.0k|    {
  173|  67.0k|        InstructionArgument arg;
  174|  67.0k|        arg.m_Type                   = ArgumentType::IntRegister;
  175|  67.0k|        arg.register_int.register_id = id;
  176|  67.0k|        return arg;
  177|  67.0k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  180|  20.7k|    {
  181|  20.7k|        InstructionArgument arg;
  182|  20.7k|        arg.m_Type                     = ArgumentType::FloatRegister;
  183|  20.7k|        arg.register_float.register_id = id;
  184|  20.7k|        return arg;
  185|  20.7k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  188|  8.44k|    {
  189|  8.44k|        InstructionArgument arg;
  190|  8.44k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  191|  8.44k|        arg.immediate_value.signed_value = value;
  192|  8.44k|        return arg;
  193|  8.44k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  197|  10.5k|    {
  198|  10.5k|        InstructionArgument arg;
  199|  10.5k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  200|  10.5k|        arg.address_displacement.register_id  = id;
  201|  10.5k|        arg.address_displacement.displacement = displacement;
  202|  10.5k|        return arg;
  203|  10.5k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  206|  80.9k|    {
  207|  80.9k|        InstructionArgument arg;
  208|  80.9k|        arg.m_Type           = ArgumentType::Label;
  209|  80.9k|        arg.label.label_name = label_name;
  210|  80.9k|        return arg;
  211|  80.9k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   859k|    {
  453|   859k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   859k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|  10.1M|    {
   24|  10.1M|        switch (token.length().unsafe())
   25|  10.1M|        {
   26|       |            // 1 character OpCodes
   27|  1.35M|            case 1: {
  ------------------
  |  Branch (27:13): [True: 1.35M, False: 8.80M]
  ------------------
   28|  1.35M|                const char c1 = token[0u];
   29|       |
   30|  1.35M|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 373k, False: 985k]
  ------------------
   31|   373k|                {
   32|   373k|                    return OpCode::J;
   33|   373k|                }
   34|   985k|                break;
   35|  1.35M|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|  1.49M|            case 2: {
  ------------------
  |  Branch (38:13): [True: 1.49M, False: 8.67M]
  ------------------
   39|  1.49M|                const char c1 = token[0u];
   40|  1.49M|                const char c2 = token[1u];
   41|       |
   42|  1.49M|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 856k, False: 637k]
  ------------------
   43|  1.49M|                {
   44|  86.3k|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 86.3k, False: 1.40M]
  ------------------
   45|   106k|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 19.9k, False: 1.47M]
  ------------------
   46|   106k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 24.2k, False: 82.0k]
  ------------------
   47|  24.2k|                        {
   48|  24.2k|                            return OpCode::JR;
   49|  24.2k|                        }
   50|  82.0k|                        break;
   51|       |
   52|   115k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 115k, False: 1.37M]
  ------------------
   53|   216k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 101k, False: 1.39M]
  ------------------
   54|   216k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 88.8k, False: 127k]
  ------------------
   55|   216k|                        {
   56|  5.70k|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 5.70k, False: 211k]
  ------------------
   57|  24.2k|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 18.5k, False: 198k]
  ------------------
   58|  24.2k|                                return OpCode::LB;
   59|  6.04k|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 6.04k, False: 210k]
  ------------------
   60|  18.4k|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 12.3k, False: 204k]
  ------------------
   61|  18.4k|                                return OpCode::LD;
   62|  15.5k|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 15.5k, False: 201k]
  ------------------
   63|  37.3k|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 21.7k, False: 194k]
  ------------------
   64|  37.3k|                                return OpCode::LF;
   65|  7.27k|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 7.27k, False: 209k]
  ------------------
   66|  24.4k|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 17.1k, False: 199k]
  ------------------
   67|  24.4k|                                return OpCode::LH;
   68|  6.74k|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 6.74k, False: 210k]
  ------------------
   69|  23.5k|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 16.7k, False: 199k]
  ------------------
   70|  23.5k|                                return OpCode::LW;
   71|   216k|                        }
   72|  88.8k|                        break;
   73|  88.8k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 9.84k, False: 1.48M]
  ------------------
   74|  41.3k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 31.4k, False: 1.46M]
  ------------------
   75|  41.3k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 7.84k, False: 33.4k]
  ------------------
   76|  7.84k|                        {
   77|  7.84k|                            return OpCode::OR;
   78|  7.84k|                        }
   79|  33.4k|                        break;
   80|   136k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 136k, False: 1.35M]
  ------------------
   81|   272k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 136k, False: 1.35M]
  ------------------
   82|   272k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 102k, False: 170k]
  ------------------
   83|   272k|                        {
   84|  10.6k|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 10.6k, False: 262k]
  ------------------
   85|  30.4k|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 19.8k, False: 252k]
  ------------------
   86|  30.4k|                                return OpCode::SB;
   87|  55.2k|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 55.2k, False: 217k]
  ------------------
   88|  69.5k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 14.3k, False: 258k]
  ------------------
   89|  69.5k|                                return OpCode::SD;
   90|  17.6k|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 17.6k, False: 255k]
  ------------------
   91|  21.5k|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 3.87k, False: 268k]
  ------------------
   92|  21.5k|                                return OpCode::SF;
   93|  11.7k|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 11.7k, False: 261k]
  ------------------
   94|  34.5k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 22.7k, False: 250k]
  ------------------
   95|  34.5k|                                return OpCode::SH;
   96|  8.95k|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 8.95k, False: 263k]
  ------------------
   97|  14.5k|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 5.60k, False: 267k]
  ------------------
   98|  14.5k|                                return OpCode::SW;
   99|   272k|                        }
  100|   102k|                        break;
  101|  1.49M|                }
  102|  1.16M|                break;
  103|  1.49M|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|  2.19M|            case 3: {
  ------------------
  |  Branch (106:13): [True: 2.19M, False: 7.97M]
  ------------------
  107|  2.19M|                const char c1 = token[0u];
  108|  2.19M|                const char c2 = token[1u];
  109|  2.19M|                const char c3 = token[2u];
  110|       |
  111|  2.19M|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 643k, False: 1.55M]
  ------------------
  112|  2.19M|                {
  113|  80.9k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 80.9k, False: 2.11M]
  ------------------
  114|   105k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 24.3k, False: 2.16M]
  ------------------
  115|   105k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 39.5k, False: 65.7k]
  |  Branch (115:29): [True: 24.6k, False: 80.5k]
  |  Branch (115:45): [True: 24.6k, False: 14.8k]
  ------------------
  116|  24.6k|                        {
  117|  24.6k|                            return OpCode::ADD;
  118|  24.6k|                        }
  119|  80.5k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 29.0k, False: 51.5k]
  |  Branch (119:34): [True: 21.3k, False: 59.1k]
  |  Branch (119:50): [True: 21.3k, False: 7.65k]
  ------------------
  120|  21.3k|                        {
  121|  21.3k|                            return OpCode::AND;
  122|  21.3k|                        }
  123|  59.1k|                        break;
  124|       |
  125|  59.1k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 20.2k, False: 2.17M]
  ------------------
  126|  47.4k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 27.2k, False: 2.16M]
  ------------------
  127|  47.4k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 32.2k, False: 15.1k]
  |  Branch (127:29): [True: 16.6k, False: 30.8k]
  |  Branch (127:45): [True: 16.6k, False: 15.6k]
  ------------------
  128|  16.6k|                        {
  129|  16.6k|                            return OpCode::DIV;
  130|  16.6k|                        }
  131|  30.8k|                        break;
  132|       |
  133|  38.5k|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 38.5k, False: 2.15M]
  ------------------
  134|  91.9k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 53.3k, False: 2.14M]
  ------------------
  135|  91.9k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 64.2k, False: 27.6k]
  ------------------
  136|  64.2k|                        {
  137|  64.2k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 21.7k, False: 42.5k]
  ------------------
  138|  21.7k|                            {
  139|  21.7k|                                return OpCode::EQD;
  140|  21.7k|                            }
  141|  42.5k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 37.4k, False: 5.07k]
  ------------------
  142|  37.4k|                            {
  143|  37.4k|                                return OpCode::EQF;
  144|  37.4k|                            }
  145|  64.2k|                        }
  146|  32.7k|                        break;
  147|       |
  148|  68.9k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 68.9k, False: 2.12M]
  ------------------
  149|   151k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 82.1k, False: 2.11M]
  ------------------
  150|   151k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 63.8k, False: 87.2k]
  ------------------
  151|  63.8k|                        {
  152|  63.8k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 30.3k, False: 33.4k]
  ------------------
  153|  30.3k|                            {
  154|  30.3k|                                return OpCode::GED;
  155|  30.3k|                            }
  156|  33.4k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 28.8k, False: 4.63k]
  ------------------
  157|  28.8k|                            {
  158|  28.8k|                                return OpCode::GEF;
  159|  28.8k|                            }
  160|  63.8k|                        }
  161|  87.2k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 71.1k, False: 16.1k]
  ------------------
  162|  71.1k|                        {
  163|  71.1k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 11.5k, False: 59.5k]
  ------------------
  164|  11.5k|                            {
  165|  11.5k|                                return OpCode::GTD;
  166|  11.5k|                            }
  167|  59.5k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 34.9k, False: 24.6k]
  ------------------
  168|  34.9k|                            {
  169|  34.9k|                                return OpCode::GTF;
  170|  34.9k|                            }
  171|  59.5k|                        }
  172|  45.4k|                        break;
  173|       |
  174|  91.5k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 91.5k, False: 2.10M]
  ------------------
  175|   122k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 30.8k, False: 2.16M]
  ------------------
  176|   122k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 62.3k, False: 60.0k]
  |  Branch (176:29): [True: 27.3k, False: 95.0k]
  |  Branch (176:45): [True: 27.3k, False: 35.0k]
  ------------------
  177|  27.3k|                        {
  178|  27.3k|                            return OpCode::JAL;
  179|  27.3k|                        }
  180|  95.0k|                        break;
  181|       |
  182|   250k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 250k, False: 1.94M]
  ------------------
  183|   331k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 81.2k, False: 2.11M]
  ------------------
  184|   331k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 36.8k, False: 295k]
  ------------------
  185|   331k|                        {
  186|  7.07k|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 7.07k, False: 324k]
  ------------------
  187|  31.4k|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 24.3k, False: 307k]
  ------------------
  188|  31.4k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 22.2k, False: 9.17k]
  ------------------
  189|  22.2k|                                {
  190|  22.2k|                                    return OpCode::LBU;
  191|  22.2k|                                }
  192|  9.17k|                                break;
  193|       |
  194|  48.5k|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 48.5k, False: 283k]
  ------------------
  195|  71.2k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 22.7k, False: 309k]
  ------------------
  196|  71.2k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 32.2k, False: 38.9k]
  ------------------
  197|  32.2k|                                {
  198|  32.2k|                                    return OpCode::LED;
  199|  32.2k|                                }
  200|  38.9k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 25.0k, False: 13.9k]
  ------------------
  201|  25.0k|                                {
  202|  25.0k|                                    return OpCode::LEF;
  203|  25.0k|                                }
  204|  13.9k|                                break;
  205|       |
  206|  37.7k|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 37.7k, False: 294k]
  ------------------
  207|  71.9k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 34.1k, False: 297k]
  ------------------
  208|  71.9k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 32.5k, False: 39.3k]
  ------------------
  209|  32.5k|                                {
  210|  32.5k|                                    return OpCode::LHI;
  211|  32.5k|                                }
  212|  39.3k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 18.9k, False: 20.4k]
  ------------------
  213|  18.9k|                                {
  214|  18.9k|                                    return OpCode::LHU;
  215|  18.9k|                                }
  216|  20.4k|                                break;
  217|       |
  218|  20.4k|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 18.4k, False: 313k]
  ------------------
  219|  94.8k|                            case 't':
  ------------------
  |  Branch (219:29): [True: 76.4k, False: 255k]
  ------------------
  220|  94.8k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 37.1k, False: 57.6k]
  ------------------
  221|  37.1k|                                {
  222|  37.1k|                                    return OpCode::LTD;
  223|  37.1k|                                }
  224|  57.6k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 36.9k, False: 20.7k]
  ------------------
  225|  36.9k|                                {
  226|  36.9k|                                    return OpCode::LTF;
  227|  36.9k|                                }
  228|  20.7k|                                break;
  229|       |
  230|  20.7k|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 5.93k, False: 325k]
  ------------------
  231|  25.4k|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 19.5k, False: 312k]
  ------------------
  232|  25.4k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 8.47k, False: 16.9k]
  ------------------
  233|  8.47k|                                {
  234|  8.47k|                                    return OpCode::LWU;
  235|  8.47k|                                }
  236|  16.9k|                                break;
  237|   331k|                        }
  238|   118k|                        break;
  239|       |
  240|   118k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 53.0k, False: 2.14M]
  ------------------
  241|  93.8k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 40.7k, False: 2.15M]
  ------------------
  242|  93.8k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 48.7k, False: 45.1k]
  ------------------
  243|  48.7k|                        {
  244|  48.7k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 18.4k, False: 30.2k]
  ------------------
  245|  18.4k|                            {
  246|  18.4k|                                return OpCode::NED;
  247|  18.4k|                            }
  248|  30.2k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 11.6k, False: 18.6k]
  ------------------
  249|  11.6k|                            {
  250|  11.6k|                                return OpCode::NEF;
  251|  11.6k|                            }
  252|  48.7k|                        }
  253|  45.1k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 32.1k, False: 13.0k]
  |  Branch (253:34): [True: 19.9k, False: 25.1k]
  |  Branch (253:50): [True: 19.9k, False: 12.1k]
  ------------------
  254|  19.9k|                        {
  255|  19.9k|                            return OpCode::NOP;
  256|  19.9k|                        }
  257|       |
  258|  43.8k|                        break;
  259|       |
  260|  43.8k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 19.7k, False: 2.17M]
  ------------------
  261|  41.2k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 21.5k, False: 2.17M]
  ------------------
  262|  41.2k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 18.1k, False: 23.0k]
  |  Branch (262:29): [True: 14.9k, False: 26.2k]
  |  Branch (262:45): [True: 14.9k, False: 3.21k]
  ------------------
  263|  14.9k|                        {
  264|  14.9k|                            return OpCode::ORI;
  265|  14.9k|                        }
  266|  26.2k|                        break;
  267|       |
  268|   330k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 330k, False: 1.86M]
  ------------------
  269|   504k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 173k, False: 2.02M]
  ------------------
  270|   504k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 51.1k, False: 452k]
  ------------------
  271|   504k|                        {
  272|  18.6k|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 18.6k, False: 485k]
  ------------------
  273|  51.0k|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 32.4k, False: 471k]
  ------------------
  274|  51.0k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 21.0k, False: 29.9k]
  ------------------
  275|  21.0k|                                {
  276|  21.0k|                                    return OpCode::SBU;
  277|  21.0k|                                }
  278|  29.9k|                                break;
  279|       |
  280|  29.9k|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 20.8k, False: 483k]
  ------------------
  281|  31.1k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 10.3k, False: 493k]
  ------------------
  282|  31.1k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 9.75k, False: 21.4k]
  ------------------
  283|  9.75k|                                {
  284|  9.75k|                                    return OpCode::SEQ;
  285|  9.75k|                                }
  286|  21.4k|                                break;
  287|       |
  288|  48.9k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 48.9k, False: 455k]
  ------------------
  289|  57.7k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 8.84k, False: 495k]
  ------------------
  290|  57.7k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 21.4k, False: 36.3k]
  ------------------
  291|  21.4k|                                {
  292|  21.4k|                                    return OpCode::SGE;
  293|  21.4k|                                }
  294|  36.3k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 22.5k, False: 13.7k]
  ------------------
  295|  22.5k|                                {
  296|  22.5k|                                    return OpCode::SGT;
  297|  22.5k|                                }
  298|  13.7k|                                break;
  299|       |
  300|  13.7k|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 7.43k, False: 496k]
  ------------------
  301|  23.3k|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 15.9k, False: 488k]
  ------------------
  302|  23.3k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 15.6k, False: 7.69k]
  ------------------
  303|  15.6k|                                {
  304|  15.6k|                                    return OpCode::SHU;
  305|  15.6k|                                }
  306|  7.69k|                                break;
  307|       |
  308|  60.3k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 60.3k, False: 443k]
  ------------------
  309|   115k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 54.7k, False: 449k]
  ------------------
  310|   115k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 23.5k, False: 91.5k]
  ------------------
  311|   115k|                                {
  312|  5.05k|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 5.05k, False: 110k]
  ------------------
  313|  11.2k|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 6.22k, False: 108k]
  ------------------
  314|  11.2k|                                        return OpCode::SLA;
  315|       |
  316|  22.0k|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 22.0k, False: 93.0k]
  ------------------
  317|  34.8k|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 12.7k, False: 102k]
  ------------------
  318|  34.8k|                                        return OpCode::SLE;
  319|       |
  320|  7.69k|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 7.69k, False: 107k]
  ------------------
  321|  28.2k|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 20.6k, False: 94.5k]
  ------------------
  322|  28.2k|                                        return OpCode::SLL;
  323|       |
  324|  7.31k|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 7.31k, False: 107k]
  ------------------
  325|  17.1k|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 9.81k, False: 105k]
  ------------------
  326|  17.1k|                                        return OpCode::SLT;
  327|   115k|                                }
  328|  23.5k|                                break;
  329|       |
  330|  23.5k|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 21.2k, False: 482k]
  ------------------
  331|  27.0k|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 5.72k, False: 498k]
  ------------------
  332|  27.0k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 20.6k, False: 6.39k]
  ------------------
  333|  20.6k|                                {
  334|  20.6k|                                    return OpCode::SNE;
  335|  20.6k|                                }
  336|  6.39k|                                break;
  337|       |
  338|  15.7k|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 15.7k, False: 488k]
  ------------------
  339|  90.8k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 75.1k, False: 428k]
  ------------------
  340|  90.8k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 30.5k, False: 60.2k]
  ------------------
  341|  30.5k|                                {
  342|  30.5k|                                    return OpCode::SRA;
  343|  30.5k|                                }
  344|  60.2k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 49.0k, False: 11.1k]
  ------------------
  345|  49.0k|                                {
  346|  49.0k|                                    return OpCode::SRL;
  347|  49.0k|                                }
  348|  11.1k|                                break;
  349|       |
  350|  16.5k|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 16.5k, False: 487k]
  ------------------
  351|  30.6k|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 14.1k, False: 489k]
  ------------------
  352|  30.6k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 17.8k, False: 12.8k]
  ------------------
  353|  17.8k|                                {
  354|  17.8k|                                    return OpCode::SUB;
  355|  17.8k|                                }
  356|  12.8k|                                break;
  357|       |
  358|  21.1k|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 21.1k, False: 482k]
  ------------------
  359|  25.9k|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 4.75k, False: 499k]
  ------------------
  360|  25.9k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 20.8k, False: 5.10k]
  ------------------
  361|  20.8k|                                {
  362|  20.8k|                                    return OpCode::SWU;
  363|  20.8k|                                }
  364|  5.10k|                                break;
  365|   504k|                        }
  366|       |
  367|   208k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 25.1k, False: 2.16M]
  ------------------
  368|   244k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 35.8k, False: 2.15M]
  ------------------
  369|   244k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 63.2k, False: 180k]
  |  Branch (369:29): [True: 35.8k, False: 208k]
  |  Branch (369:45): [True: 35.8k, False: 27.3k]
  ------------------
  370|  35.8k|                        {
  371|  35.8k|                            return OpCode::XOR;
  372|  35.8k|                        }
  373|   208k|                        break;
  374|  2.19M|                }
  375|  1.30M|                break;
  376|  2.19M|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  2.41M|            case 4: {
  ------------------
  |  Branch (379:13): [True: 2.41M, False: 7.75M]
  ------------------
  380|  2.41M|                const char c1 = token[0u];
  381|  2.41M|                const char c2 = token[1u];
  382|  2.41M|                const char c3 = token[2u];
  383|  2.41M|                const char c4 = token[3u];
  384|       |
  385|  2.41M|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 598k, False: 1.81M]
  ------------------
  386|  2.41M|                {
  387|   191k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 191k, False: 2.22M]
  ------------------
  388|   232k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 41.6k, False: 2.37M]
  ------------------
  389|   232k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 9.95k, False: 222k]
  ------------------
  390|   232k|                        {
  391|  83.4k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 83.4k, False: 149k]
  ------------------
  392|   162k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 78.8k, False: 153k]
  ------------------
  393|   162k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 143k, False: 18.3k]
  ------------------
  394|   143k|                                {
  395|   143k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 33.0k, False: 110k]
  ------------------
  396|   143k|                                    {
  397|  18.3k|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 18.3k, False: 125k]
  ------------------
  398|  30.6k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 12.3k, False: 131k]
  ------------------
  399|  30.6k|                                            return OpCode::ADDD;
  400|       |
  401|  5.50k|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 5.50k, False: 138k]
  ------------------
  402|  17.3k|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 11.8k, False: 132k]
  ------------------
  403|  17.3k|                                            return OpCode::ADDF;
  404|       |
  405|  7.13k|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 7.13k, False: 136k]
  ------------------
  406|  28.5k|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 21.3k, False: 122k]
  ------------------
  407|  28.5k|                                            return OpCode::ADDI;
  408|       |
  409|  12.1k|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 12.1k, False: 131k]
  ------------------
  410|  34.4k|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 22.2k, False: 121k]
  ------------------
  411|  34.4k|                                            return OpCode::ADDU;
  412|   143k|                                    }
  413|   143k|                                }
  414|  51.3k|                                break;
  415|       |
  416|  54.5k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 54.5k, False: 178k]
  ------------------
  417|  60.5k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 6.02k, False: 226k]
  ------------------
  418|  60.5k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 54.7k, False: 5.78k]
  |  Branch (418:37): [True: 32.5k, False: 27.9k]
  |  Branch (418:53): [True: 32.5k, False: 22.1k]
  ------------------
  419|  32.5k|                                {
  420|  32.5k|                                    return OpCode::ANDI;
  421|  32.5k|                                }
  422|       |
  423|  27.9k|                                break;
  424|   232k|                        }
  425|  89.2k|                        break;
  426|       |
  427|   163k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 163k, False: 2.24M]
  ------------------
  428|   185k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 21.7k, False: 2.39M]
  ------------------
  429|   185k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 26.5k, False: 159k]
  ------------------
  430|   185k|                        {
  431|  22.8k|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 22.8k, False: 162k]
  ------------------
  432|  56.5k|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 33.7k, False: 151k]
  ------------------
  433|  56.5k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 42.7k, False: 13.7k]
  |  Branch (433:37): [True: 32.8k, False: 23.6k]
  |  Branch (433:53): [True: 32.8k, False: 9.87k]
  ------------------
  434|  32.8k|                                {
  435|  32.8k|                                    return OpCode::BEQZ;
  436|  32.8k|                                }
  437|  23.6k|                                break;
  438|       |
  439|  51.1k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 51.1k, False: 134k]
  ------------------
  440|  56.8k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 5.68k, False: 179k]
  ------------------
  441|  56.8k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 50.4k, False: 6.41k]
  ------------------
  442|  50.4k|                                {
  443|  50.4k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 21.9k, False: 28.4k]
  ------------------
  444|  21.9k|                                    {
  445|  21.9k|                                        return OpCode::BFPF;
  446|  21.9k|                                    }
  447|  28.4k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 22.9k, False: 5.55k]
  ------------------
  448|  22.9k|                                    {
  449|  22.9k|                                        return OpCode::BFPT;
  450|  22.9k|                                    }
  451|  50.4k|                                }
  452|  11.9k|                                break;
  453|       |
  454|  17.0k|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 17.0k, False: 168k]
  ------------------
  455|  45.7k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 28.6k, False: 156k]
  ------------------
  456|  45.7k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 32.3k, False: 13.3k]
  |  Branch (456:37): [True: 21.2k, False: 24.4k]
  |  Branch (456:53): [True: 21.2k, False: 11.1k]
  ------------------
  457|  21.2k|                                {
  458|  21.2k|                                    return OpCode::BNEZ;
  459|  21.2k|                                }
  460|   185k|                        }
  461|  86.6k|                        break;
  462|       |
  463|  86.6k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 35.6k, False: 2.37M]
  ------------------
  464|   144k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 108k, False: 2.30M]
  ------------------
  465|   144k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 128k, False: 15.5k]
  |  Branch (465:29): [True: 114k, False: 29.9k]
  |  Branch (465:45): [True: 114k, False: 14.3k]
  ------------------
  466|   114k|                        {
  467|   114k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 16.7k, False: 97.8k]
  ------------------
  468|   114k|                            {
  469|  16.4k|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 16.4k, False: 98.1k]
  ------------------
  470|  25.2k|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 8.83k, False: 105k]
  ------------------
  471|  25.2k|                                    return OpCode::DIVD;
  472|       |
  473|  10.3k|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 10.3k, False: 104k]
  ------------------
  474|  17.2k|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 6.92k, False: 107k]
  ------------------
  475|  17.2k|                                    return OpCode::DIVF;
  476|       |
  477|  11.9k|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 11.9k, False: 102k]
  ------------------
  478|  25.7k|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 13.8k, False: 100k]
  ------------------
  479|  25.7k|                                    return OpCode::DIVI;
  480|       |
  481|  9.69k|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 9.69k, False: 104k]
  ------------------
  482|  29.5k|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 19.8k, False: 94.6k]
  ------------------
  483|  29.5k|                                    return OpCode::DIVU;
  484|   114k|                            }
  485|   114k|                        }
  486|  46.6k|                        break;
  487|       |
  488|  46.6k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 20.0k, False: 2.39M]
  ------------------
  489|  52.6k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 32.5k, False: 2.38M]
  ------------------
  490|  52.6k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 40.7k, False: 11.8k]
  |  Branch (490:29): [True: 24.0k, False: 28.5k]
  |  Branch (490:45): [True: 29.1k, False: 11.6k]
  |  Branch (490:61): [True: 24.0k, False: 5.07k]
  ------------------
  491|  24.0k|                        {
  492|  24.0k|                            return OpCode::HALT;
  493|  24.0k|                        }
  494|  28.5k|                        break;
  495|       |
  496|  66.1k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 66.1k, False: 2.34M]
  ------------------
  497|  92.9k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 26.8k, False: 2.38M]
  ------------------
  498|  92.9k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 64.9k, False: 28.0k]
  |  Branch (498:29): [True: 18.2k, False: 74.6k]
  |  Branch (498:45): [True: 47.4k, False: 17.4k]
  |  Branch (498:61): [True: 18.2k, False: 29.2k]
  ------------------
  499|  18.2k|                        {
  500|  18.2k|                            return OpCode::JALR;
  501|  18.2k|                        }
  502|  74.6k|                        break;
  503|       |
  504|  74.6k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 53.1k, False: 2.35M]
  ------------------
  505|   132k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 79.4k, False: 2.33M]
  ------------------
  506|   132k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 60.6k, False: 71.9k]
  |  Branch (506:29): [True: 46.3k, False: 86.2k]
  |  Branch (506:45): [True: 46.3k, False: 14.3k]
  ------------------
  507|  46.3k|                        {
  508|  46.3k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 12.5k, False: 33.7k]
  ------------------
  509|  12.5k|                            {
  510|  12.5k|                                return OpCode::MOVD;
  511|  12.5k|                            }
  512|  33.7k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 28.2k, False: 5.50k]
  ------------------
  513|  28.2k|                            {
  514|  28.2k|                                return OpCode::MOVF;
  515|  28.2k|                            }
  516|  46.3k|                        }
  517|  86.2k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 66.2k, False: 20.0k]
  |  Branch (517:34): [True: 34.5k, False: 51.7k]
  |  Branch (517:50): [True: 40.7k, False: 25.4k]
  |  Branch (517:66): [True: 34.5k, False: 6.17k]
  ------------------
  518|  34.5k|                        {
  519|  34.5k|                            return OpCode::MULT;
  520|  34.5k|                        }
  521|  57.2k|                        break;
  522|       |
  523|   614k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 614k, False: 1.79M]
  ------------------
  524|   826k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 212k, False: 2.20M]
  ------------------
  525|   826k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 35.8k, False: 790k]
  ------------------
  526|   826k|                        {
  527|  33.3k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 33.3k, False: 792k]
  ------------------
  528|  69.6k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 36.2k, False: 789k]
  ------------------
  529|  69.6k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 47.5k, False: 22.0k]
  ------------------
  530|  47.5k|                                {
  531|  47.5k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 20.4k, False: 27.1k]
  ------------------
  532|  20.4k|                                    {
  533|  20.4k|                                        return OpCode::SEQI;
  534|  20.4k|                                    }
  535|  27.1k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 20.4k, False: 6.67k]
  ------------------
  536|  20.4k|                                    {
  537|  20.4k|                                        return OpCode::SEQU;
  538|  20.4k|                                    }
  539|  47.5k|                                }
  540|  28.6k|                                break;
  541|       |
  542|   105k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 105k, False: 720k]
  ------------------
  543|   118k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 13.5k, False: 812k]
  ------------------
  544|   118k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 62.2k, False: 56.6k]
  ------------------
  545|  62.2k|                                {
  546|  62.2k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 22.0k, False: 40.2k]
  ------------------
  547|  22.0k|                                    {
  548|  22.0k|                                        return OpCode::SGEI;
  549|  22.0k|                                    }
  550|  40.2k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 23.0k, False: 17.1k]
  ------------------
  551|  23.0k|                                    {
  552|  23.0k|                                        return OpCode::SGEU;
  553|  23.0k|                                    }
  554|  62.2k|                                }
  555|  56.6k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 46.1k, False: 10.5k]
  ------------------
  556|  46.1k|                                {
  557|  46.1k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 20.7k, False: 25.3k]
  ------------------
  558|  20.7k|                                    {
  559|  20.7k|                                        return OpCode::SGTI;
  560|  20.7k|                                    }
  561|  25.3k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 14.9k, False: 10.4k]
  ------------------
  562|  14.9k|                                    {
  563|  14.9k|                                        return OpCode::SGTU;
  564|  14.9k|                                    }
  565|  46.1k|                                }
  566|  38.1k|                                break;
  567|       |
  568|   147k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 147k, False: 678k]
  ------------------
  569|   243k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 96.3k, False: 729k]
  ------------------
  570|   243k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 16.7k, False: 226k]
  ------------------
  571|   243k|                                {
  572|  28.5k|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 28.5k, False: 215k]
  ------------------
  573|  39.1k|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 10.5k, False: 233k]
  ------------------
  574|  39.1k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 28.4k, False: 10.6k]
  ------------------
  575|  28.4k|                                        {
  576|  28.4k|                                            return OpCode::SLAI;
  577|  28.4k|                                        }
  578|  10.6k|                                        break;
  579|       |
  580|  30.2k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 30.2k, False: 213k]
  ------------------
  581|  78.0k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 47.7k, False: 195k]
  ------------------
  582|  78.0k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 26.5k, False: 51.4k]
  ------------------
  583|  26.5k|                                        {
  584|  26.5k|                                            return OpCode::SLEI;
  585|  26.5k|                                        }
  586|  51.4k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 19.9k, False: 31.5k]
  ------------------
  587|  19.9k|                                        {
  588|  19.9k|                                            return OpCode::SLEU;
  589|  19.9k|                                        }
  590|  31.5k|                                        break;
  591|       |
  592|  31.5k|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 13.8k, False: 229k]
  ------------------
  593|  18.3k|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 4.44k, False: 239k]
  ------------------
  594|  18.3k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 11.7k, False: 6.56k]
  ------------------
  595|  11.7k|                                        {
  596|  11.7k|                                            return OpCode::SLLI;
  597|  11.7k|                                        }
  598|  6.56k|                                        break;
  599|       |
  600|  30.0k|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 30.0k, False: 213k]
  ------------------
  601|  91.3k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 61.3k, False: 182k]
  ------------------
  602|  91.3k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 33.2k, False: 58.1k]
  ------------------
  603|  33.2k|                                        {
  604|  33.2k|                                            return OpCode::SLTI;
  605|  33.2k|                                        }
  606|  58.1k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 32.6k, False: 25.4k]
  ------------------
  607|  32.6k|                                        {
  608|  32.6k|                                            return OpCode::SLTU;
  609|  32.6k|                                        }
  610|  25.4k|                                        break;
  611|   243k|                                }
  612|       |
  613|   159k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 68.7k, False: 757k]
  ------------------
  614|   178k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 19.0k, False: 807k]
  ------------------
  615|   178k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 113k, False: 65.2k]
  ------------------
  616|   113k|                                {
  617|   113k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 26.3k, False: 87.2k]
  ------------------
  618|  26.3k|                                    {
  619|  26.3k|                                        return OpCode::SNEI;
  620|  26.3k|                                    }
  621|  87.2k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 27.7k, False: 59.4k]
  ------------------
  622|  27.7k|                                    {
  623|  27.7k|                                        return OpCode::SNEU;
  624|  27.7k|                                    }
  625|   113k|                                }
  626|   124k|                                break;
  627|       |
  628|   124k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 32.9k, False: 793k]
  ------------------
  629|   104k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 71.7k, False: 754k]
  ------------------
  630|   104k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 39.6k, False: 65.0k]
  |  Branch (630:37): [True: 25.3k, False: 79.3k]
  |  Branch (630:53): [True: 25.3k, False: 14.2k]
  ------------------
  631|  25.3k|                                {
  632|  25.3k|                                    return OpCode::SRAI;
  633|  25.3k|                                }
  634|  79.3k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 57.4k, False: 21.8k]
  |  Branch (634:42): [True: 30.9k, False: 48.3k]
  |  Branch (634:58): [True: 30.9k, False: 26.5k]
  ------------------
  635|  30.9k|                                {
  636|  30.9k|                                    return OpCode::SRLI;
  637|  30.9k|                                }
  638|  48.3k|                                break;
  639|       |
  640|  76.9k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 76.9k, False: 749k]
  ------------------
  641|   165k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 88.5k, False: 737k]
  ------------------
  642|   165k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 148k, False: 17.1k]
  ------------------
  643|   148k|                                {
  644|   148k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 14.7k, False: 133k]
  ------------------
  645|   148k|                                    {
  646|  16.8k|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 16.8k, False: 131k]
  ------------------
  647|  34.1k|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 17.2k, False: 131k]
  ------------------
  648|  34.1k|                                            return OpCode::SUBD;
  649|       |
  650|  12.6k|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 12.6k, False: 135k]
  ------------------
  651|  29.9k|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 17.2k, False: 131k]
  ------------------
  652|  29.9k|                                            return OpCode::SUBF;
  653|       |
  654|  13.9k|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 13.9k, False: 134k]
  ------------------
  655|  31.2k|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 17.3k, False: 131k]
  ------------------
  656|  31.2k|                                            return OpCode::SUBI;
  657|       |
  658|  16.5k|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 16.5k, False: 131k]
  ------------------
  659|  38.3k|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 21.7k, False: 126k]
  ------------------
  660|  38.3k|                                            return OpCode::SUBU;
  661|   148k|                                    }
  662|   148k|                                }
  663|  31.8k|                                break;
  664|   826k|                        }
  665|   307k|                        break;
  666|       |
  667|   307k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 72.6k, False: 2.34M]
  ------------------
  668|  80.3k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 7.66k, False: 2.40M]
  ------------------
  669|  80.3k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 70.1k, False: 10.1k]
  |  Branch (669:29): [True: 21.4k, False: 58.8k]
  |  Branch (669:45): [True: 52.7k, False: 17.4k]
  |  Branch (669:61): [True: 21.4k, False: 31.2k]
  ------------------
  670|  21.4k|                        {
  671|  21.4k|                            return OpCode::TRAP;
  672|  21.4k|                        }
  673|  58.8k|                        break;
  674|  58.8k|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 48.6k, False: 2.36M]
  ------------------
  675|  66.6k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 17.9k, False: 2.39M]
  ------------------
  676|  66.6k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 47.9k, False: 18.6k]
  |  Branch (676:29): [True: 18.8k, False: 47.7k]
  |  Branch (676:45): [True: 33.4k, False: 14.4k]
  |  Branch (676:61): [True: 18.8k, False: 14.6k]
  ------------------
  677|  18.8k|                        {
  678|  18.8k|                            return OpCode::XORI;
  679|  18.8k|                        }
  680|  47.7k|                        break;
  681|  2.41M|                }
  682|  1.39M|                break;
  683|  2.41M|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|  1.39M|            case 5: {
  ------------------
  |  Branch (686:13): [True: 1.38M, False: 8.78M]
  ------------------
  687|  1.38M|                const char c1 = token[0u];
  688|  1.38M|                const char c2 = token[1u];
  689|  1.38M|                const char c3 = token[2u];
  690|  1.38M|                const char c4 = token[3u];
  691|  1.38M|                const char c5 = token[4u];
  692|       |
  693|  1.38M|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 404k, False: 976k]
  ------------------
  694|  1.38M|                {
  695|  96.5k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 96.5k, False: 1.28M]
  ------------------
  696|   127k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 30.9k, False: 1.35M]
  ------------------
  697|   127k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 112k, False: 15.2k]
  |  Branch (697:29): [True: 31.5k, False: 95.9k]
  |  Branch (697:45): [True: 94.0k, False: 18.2k]
  |  Branch (697:61): [True: 69.5k, False: 24.4k]
  |  Branch (697:77): [True: 31.5k, False: 38.0k]
  ------------------
  698|  31.5k|                        {
  699|  31.5k|                            return OpCode::ADDUI;
  700|  31.5k|                        }
  701|  95.9k|                        break;
  702|       |
  703|  95.9k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 32.2k, False: 1.34M]
  ------------------
  704|   124k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 91.9k, False: 1.28M]
  ------------------
  705|   124k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 105k, False: 18.6k]
  |  Branch (705:29): [True: 28.9k, False: 95.1k]
  |  Branch (705:45): [True: 90.8k, False: 14.6k]
  |  Branch (705:61): [True: 58.3k, False: 32.4k]
  |  Branch (705:77): [True: 28.9k, False: 29.4k]
  ------------------
  706|  28.9k|                        {
  707|  28.9k|                            return OpCode::DIVUI;
  708|  28.9k|                        }
  709|  95.1k|                        break;
  710|       |
  711|   106k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 106k, False: 1.27M]
  ------------------
  712|   186k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 80.4k, False: 1.30M]
  ------------------
  713|   186k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 151k, False: 35.4k]
  |  Branch (713:29): [True: 126k, False: 60.4k]
  |  Branch (713:45): [True: 136k, False: 14.7k]
  |  Branch (713:61): [True: 126k, False: 10.1k]
  ------------------
  714|   126k|                        {
  715|   126k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 14.6k, False: 111k]
  ------------------
  716|   126k|                            {
  717|  13.9k|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 13.9k, False: 112k]
  ------------------
  718|  24.0k|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 10.1k, False: 116k]
  ------------------
  719|  24.0k|                                    return OpCode::MULTD;
  720|       |
  721|  9.54k|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 9.54k, False: 116k]
  ------------------
  722|  18.5k|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 9.00k, False: 117k]
  ------------------
  723|  18.5k|                                    return OpCode::MULTF;
  724|       |
  725|  12.7k|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 12.7k, False: 113k]
  ------------------
  726|  27.0k|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 14.2k, False: 111k]
  ------------------
  727|  27.0k|                                    return OpCode::MULTI;
  728|       |
  729|  25.3k|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 25.3k, False: 100k]
  ------------------
  730|  41.8k|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 16.4k, False: 109k]
  ------------------
  731|  41.8k|                                    return OpCode::MULTU;
  732|   126k|                            }
  733|   126k|                        }
  734|  75.1k|                        break;
  735|       |
  736|   332k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 332k, False: 1.04M]
  ------------------
  737|   538k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 205k, False: 1.17M]
  ------------------
  738|   538k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 31.5k, False: 506k]
  ------------------
  739|   538k|                        {
  740|  34.3k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 34.3k, False: 503k]
  ------------------
  741|  65.5k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 31.2k, False: 506k]
  ------------------
  742|  65.5k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 51.4k, False: 14.1k]
  |  Branch (742:37): [True: 30.9k, False: 34.5k]
  |  Branch (742:53): [True: 46.7k, False: 4.65k]
  |  Branch (742:69): [True: 30.9k, False: 15.7k]
  ------------------
  743|  30.9k|                                {
  744|  30.9k|                                    return OpCode::SEQUI;
  745|  30.9k|                                }
  746|  34.5k|                                break;
  747|       |
  748|  92.2k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 92.2k, False: 445k]
  ------------------
  749|  98.2k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 6.09k, False: 531k]
  ------------------
  750|  98.2k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 41.5k, False: 56.7k]
  |  Branch (750:37): [True: 17.8k, False: 80.4k]
  |  Branch (750:53): [True: 32.0k, False: 9.42k]
  |  Branch (750:69): [True: 17.8k, False: 14.2k]
  ------------------
  751|  17.8k|                                {
  752|  17.8k|                                    return OpCode::SGEUI;
  753|  17.8k|                                }
  754|  80.4k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 52.5k, False: 27.8k]
  |  Branch (754:42): [True: 34.5k, False: 45.8k]
  |  Branch (754:58): [True: 42.4k, False: 10.0k]
  |  Branch (754:74): [True: 34.5k, False: 7.91k]
  ------------------
  755|  34.5k|                                {
  756|  34.5k|                                    return OpCode::SGTUI;
  757|  34.5k|                                }
  758|  45.8k|                                break;
  759|       |
  760|  82.2k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 82.2k, False: 455k]
  ------------------
  761|   132k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 50.2k, False: 487k]
  ------------------
  762|   132k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 46.8k, False: 85.6k]
  |  Branch (762:37): [True: 22.7k, False: 109k]
  |  Branch (762:53): [True: 37.0k, False: 9.81k]
  |  Branch (762:69): [True: 22.7k, False: 14.3k]
  ------------------
  763|  22.7k|                                {
  764|  22.7k|                                    return OpCode::SLEUI;
  765|  22.7k|                                }
  766|   109k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 66.4k, False: 43.3k]
  |  Branch (766:42): [True: 35.8k, False: 73.8k]
  |  Branch (766:58): [True: 51.7k, False: 14.6k]
  |  Branch (766:74): [True: 35.8k, False: 15.8k]
  ------------------
  767|  35.8k|                                {
  768|  35.8k|                                    return OpCode::SLTUI;
  769|  35.8k|                                }
  770|  73.8k|                                break;
  771|       |
  772|  73.8k|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 31.3k, False: 506k]
  ------------------
  773|  61.3k|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 29.9k, False: 508k]
  ------------------
  774|  61.3k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 55.0k, False: 6.24k]
  |  Branch (774:37): [True: 22.6k, False: 38.6k]
  |  Branch (774:53): [True: 34.9k, False: 20.0k]
  |  Branch (774:69): [True: 22.6k, False: 12.3k]
  ------------------
  775|  22.6k|                                {
  776|  22.6k|                                    return OpCode::SNEUI;
  777|  22.6k|                                }
  778|  38.6k|                                break;
  779|       |
  780|  42.8k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 42.8k, False: 495k]
  ------------------
  781|   148k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 105k, False: 432k]
  ------------------
  782|   148k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 132k, False: 16.3k]
  |  Branch (782:37): [True: 21.1k, False: 127k]
  |  Branch (782:53): [True: 51.6k, False: 80.8k]
  |  Branch (782:69): [True: 21.1k, False: 30.4k]
  ------------------
  783|  21.1k|                                {
  784|  21.1k|                                    return OpCode::SUBUI;
  785|  21.1k|                                }
  786|   127k|                                break;
  787|   538k|                        }
  788|       |
  789|   352k|                        break;
  790|  1.38M|                }
  791|       |
  792|  1.02M|                break;
  793|  1.38M|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|  1.02M|            case 6: {
  ------------------
  |  Branch (796:13): [True: 699k, False: 9.46M]
  ------------------
  797|   699k|                const char c1 = token[0u];
  798|   699k|                const char c2 = token[1u];
  799|   699k|                const char c3 = token[2u];
  800|   699k|                const char c4 = token[3u];
  801|   699k|                const char c5 = token[4u];
  802|   699k|                const char c6 = token[5u];
  803|       |
  804|   699k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 287k, False: 411k]
  |  Branch (804:21): [True: 258k, False: 440k]
  |  Branch (804:37): [True: 271k, False: 16.7k]
  |  Branch (804:53): [True: 258k, False: 12.2k]
  ------------------
  805|   258k|                {
  806|   258k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 11.0k, False: 247k]
  ------------------
  807|   258k|                    {
  808|  70.1k|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 70.1k, False: 188k]
  ------------------
  809|  91.5k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 21.3k, False: 237k]
  ------------------
  810|  91.5k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 69.7k, False: 21.8k]
  ------------------
  811|  69.7k|                            {
  812|  69.7k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 27.3k, False: 42.3k]
  ------------------
  813|  27.3k|                                {
  814|  27.3k|                                    return OpCode::CVTD2F;
  815|  27.3k|                                }
  816|  42.3k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 22.9k, False: 19.3k]
  ------------------
  817|  22.9k|                                {
  818|  22.9k|                                    return OpCode::CVTD2I;
  819|  22.9k|                                }
  820|  69.7k|                            }
  821|  41.2k|                            break;
  822|       |
  823|  58.9k|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 58.9k, False: 199k]
  ------------------
  824|  76.1k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 17.1k, False: 241k]
  ------------------
  825|  76.1k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 55.2k, False: 20.9k]
  ------------------
  826|  55.2k|                            {
  827|  55.2k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 19.4k, False: 35.8k]
  ------------------
  828|  19.4k|                                {
  829|  19.4k|                                    return OpCode::CVTF2D;
  830|  19.4k|                                }
  831|  35.8k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 21.1k, False: 14.6k]
  ------------------
  832|  21.1k|                                {
  833|  21.1k|                                    return OpCode::CVTF2I;
  834|  21.1k|                                }
  835|  55.2k|                            }
  836|  35.5k|                            break;
  837|       |
  838|  35.5k|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 12.6k, False: 246k]
  ------------------
  839|  80.2k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 67.5k, False: 191k]
  ------------------
  840|  80.2k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 56.9k, False: 23.2k]
  ------------------
  841|  56.9k|                            {
  842|  56.9k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 17.9k, False: 38.9k]
  ------------------
  843|  17.9k|                                {
  844|  17.9k|                                    return OpCode::CVTI2D;
  845|  17.9k|                                }
  846|  38.9k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 18.9k, False: 19.9k]
  ------------------
  847|  18.9k|                                {
  848|  18.9k|                                    return OpCode::CVTI2F;
  849|  18.9k|                                }
  850|  56.9k|                            }
  851|   258k|                    }
  852|   258k|                }
  853|   440k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 149k, False: 290k]
  |  Branch (853:26): [True: 21.1k, False: 419k]
  |  Branch (853:42): [True: 106k, False: 42.8k]
  |  Branch (853:58): [True: 95.9k, False: 10.9k]
  |  Branch (853:74): [True: 85.7k, False: 10.1k]
  ------------------
  854|   440k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 63.0k, False: 22.7k]
  |  Branch (854:42): [True: 21.1k, False: 41.8k]
  ------------------
  855|  21.1k|                {
  856|  21.1k|                    return OpCode::MULTUI;
  857|  21.1k|                }
  858|   550k|                break;
  859|   699k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|   550k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 362k, False: 9.80M]
  ------------------
  863|   362k|                const char c1 = token[0u];
  864|   362k|                const char c2 = token[1u];
  865|   362k|                const char c3 = token[2u];
  866|   362k|                const char c4 = token[3u];
  867|   362k|                const char c5 = token[4u];
  868|   362k|                const char c6 = token[5u];
  869|   362k|                const char c7 = token[6u];
  870|       |
  871|   362k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 163k, False: 198k]
  |  Branch (871:21): [True: 140k, False: 222k]
  |  Branch (871:37): [True: 145k, False: 18.4k]
  |  Branch (871:53): [True: 140k, False: 5.07k]
  ------------------
  872|   140k|                {
  873|   140k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 60.0k, False: 80.0k]
  |  Branch (873:25): [True: 23.1k, False: 116k]
  |  Branch (873:41): [True: 42.9k, False: 17.1k]
  |  Branch (873:54): [True: 34.6k, False: 8.31k]
  |  Branch (873:70): [True: 23.1k, False: 11.4k]
  ------------------
  874|  23.1k|                    {
  875|  23.1k|                        return OpCode::MOVI2FP;
  876|  23.1k|                    }
  877|   116k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 78.7k, False: 38.2k]
  |  Branch (877:25): [True: 30.2k, False: 86.7k]
  |  Branch (877:41): [True: 67.7k, False: 10.9k]
  |  Branch (877:57): [True: 47.9k, False: 19.7k]
  |  Branch (877:70): [True: 30.2k, False: 17.7k]
  ------------------
  878|  30.2k|                    {
  879|  30.2k|                        return OpCode::MOVFP2I;
  880|  30.2k|                    }
  881|   116k|                }
  882|   308k|                break;
  883|   362k|            }
  884|       |
  885|   308k|            default: {
  ------------------
  |  Branch (885:13): [True: 264k, False: 9.90M]
  ------------------
  886|   264k|                break;
  887|   362k|            }
  888|  10.1M|        }
  889|       |
  890|       |        // None found
  891|  6.99M|        return OpCode::NONE;
  892|  10.1M|    }
_ZN3dlx3iceEcc:
   17|  14.1M|    {
   18|  14.1M|        constexpr const char diff = 'a' - 'A';
   19|  14.1M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 4.27M, False: 9.89M]
  |  Branch (19:28): [True: 3.95M, False: 5.93M]
  ------------------
   20|  14.1M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  9.97M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|   147k|    {
  195|   147k|        ParseError err;
  196|       |
  197|   147k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|   147k|        err.m_LineNumber                           = line_number;
  199|   147k|        err.m_Column                               = column;
  200|   147k|        err.unexpected_argument_type.expected_type = expected_type;
  201|   147k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|   147k|        return err;
  204|   147k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|   147k|    {
  209|   147k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|   147k|                                                         token.GetColumn().unsafe(), expected_type,
  211|   147k|                                                         actual_type);
  212|   147k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|  9.55k|    {
  218|  9.55k|        ParseError err;
  219|       |
  220|  9.55k|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|  9.55k|        err.m_LineNumber        = line_number;
  222|  9.55k|        err.m_Column            = column;
  223|  9.55k|        err.invalid_number.text = text;
  224|       |
  225|  9.55k|        return err;
  226|  9.55k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|  9.55k|    {
  230|  9.55k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|  9.55k|                                                token.GetColumn().unsafe(), token.GetText());
  232|  9.55k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|     47|    {
  237|     47|        ParseError err;
  238|       |
  239|     47|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|     47|        err.m_LineNumber = line_number;
  241|     47|        err.m_Column     = column;
  242|       |
  243|     47|        return err;
  244|     47|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|     47|    {
  249|     47|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|     47|                                                                     token.GetColumn().unsafe());
  251|     47|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  4.02M|    {
  257|  4.02M|        ParseError err;
  258|       |
  259|  4.02M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  4.02M|        err.m_LineNumber                   = line_number;
  261|  4.02M|        err.m_Column                       = column;
  262|  4.02M|        err.unexpected_token.expected_type = expected_type;
  263|  4.02M|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  4.02M|        return err;
  266|  4.02M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  4.02M|    {
  271|  4.02M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  4.02M|                                                  token.GetColumn().unsafe(), expected_type,
  273|  4.02M|                                                  token.GetType());
  274|  4.02M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|  1.18M|    {
  279|  1.18M|        ParseError err;
  280|       |
  281|  1.18M|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|  1.18M|        err.m_LineNumber                   = line_number;
  283|  1.18M|        err.m_Column                       = column;
  284|  1.18M|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|  1.18M|        return err;
  287|  1.18M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|  15.4k|    {
  291|  15.4k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|  15.4k|                                                    token.GetColumn().unsafe(), token.GetText());
  293|  15.4k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  1.97M|    {
  298|  1.97M|        ParseError err;
  299|       |
  300|  1.97M|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  1.97M|        err.m_LineNumber                       = line_number;
  302|  1.97M|        err.m_Column                           = column;
  303|  1.97M|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  1.97M|        return err;
  306|  1.97M|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  1.97M|    {
  311|  1.97M|        return ConstructInvalidLabelIdentifierParseError(
  312|  1.97M|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  1.97M|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|   672k|    {
  319|   672k|        ParseError err;
  320|       |
  321|   672k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|   672k|        err.m_LineNumber                     = line_number;
  323|   672k|        err.m_Column                         = column;
  324|   672k|        err.label_already_defined.label_name = label_name;
  325|   672k|        err.label_already_defined.at_line    = at_line;
  326|   672k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|   672k|        return err;
  329|   672k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|   672k|    {
  334|   672k|        return ConstructLabelAlreadyDefinedParseError(
  335|   672k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|   672k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|   672k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|  1.19M|    {
  342|  1.19M|        ParseError err;
  343|       |
  344|  1.19M|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|  1.19M|        err.m_LineNumber = line_number;
  346|  1.19M|        err.m_Column     = column;
  347|       |
  348|  1.19M|        return err;
  349|  1.19M|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|  1.19M|    {
  354|  1.19M|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|  1.19M|                                                        token.GetColumn().unsafe());
  356|  1.19M|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|   276k|    {
  362|   276k|        ParseError err;
  363|       |
  364|   276k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|   276k|        err.m_LineNumber               = line_number;
  366|   276k|        err.m_Column                   = column;
  367|   276k|        err.too_few_arguments.required = required;
  368|   276k|        err.too_few_arguments.provided = provided;
  369|       |
  370|   276k|        return err;
  371|   276k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|   276k|    {
  376|   276k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|   276k|                                                  token.GetColumn().unsafe(), required, provided);
  378|   276k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|   321k|    {
  383|   321k|        ParseError err;
  384|       |
  385|   321k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|   321k|        err.m_LineNumber           = line_number;
  387|   321k|        err.m_Column               = column;
  388|   321k|        err.empty_label.label_name = label_name;
  389|       |
  390|   321k|        return err;
  391|   321k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|   321k|    {
  395|   321k|        return ConstructEmptyLabelParseError(
  396|   321k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|   321k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 278k, False: 43.0k]
  ------------------
  398|   278k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|   321k|                        token.GetText());
  400|   321k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|   176k|    {
  405|   176k|        ParseError err;
  406|       |
  407|   176k|        err.m_Type       = ParseError::Type::TooManyComma;
  408|   176k|        err.m_LineNumber = line_number;
  409|   176k|        err.m_Column     = column;
  410|       |
  411|   176k|        return err;
  412|   176k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|   176k|    {
  416|   176k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|   176k|                                               token.GetColumn().unsafe());
  418|   176k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  9.97M|    {
   19|  9.97M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  9.97M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  70.4k|    {
  181|  70.4k|        ParsedProgram program;
  182|       |
  183|  70.4k|        program.m_Tokens = tokens;
  184|       |
  185|  70.4k|        phi::boolean line_has_instruction{false};
  186|  70.4k|        phi::usize   label_count{0u};
  187|       |
  188|  11.7M|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 11.7M, False: 70.4k]
  ------------------
  189|  11.7M|        {
  190|  11.7M|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|  11.7M|            switch (current_token.GetType())
  195|  11.7M|            {
  196|       |                // Ignore comments
  197|  63.9k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 63.9k, False: 11.6M]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  63.9k|                    break;
  200|       |
  201|  1.70M|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 1.70M, False: 10.0M]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  1.70M|                    line_has_instruction = false;
  204|  1.70M|                    break;
  205|       |
  206|  4.77M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 4.77M, False: 6.94M]
  ------------------
  207|  4.77M|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 739k, False: 4.03M]
  ------------------
  208|   739k|                    {
  209|   739k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|   739k|                                current_token, Token::Type::NewLine));
  211|   739k|                        break;
  212|   739k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  4.03M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 1.19M, False: 2.84M]
  ------------------
  217|  1.19M|                    {
  218|  1.19M|                        program.AddParseError(
  219|  1.19M|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  1.19M|                        break;
  221|  1.19M|                    }
  222|       |
  223|  2.84M|                    phi::string_view label_name = current_token.GetText();
  224|  2.84M|                    label_name.remove_suffix(1u);
  225|       |
  226|  2.84M|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 1.17M, False: 1.67M]
  ------------------
  227|  1.17M|                    {
  228|  1.17M|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|  1.17M|                                current_token.GetLineNumber().unsafe(),
  230|  1.17M|                                current_token.GetColumn().unsafe(), label_name));
  231|  1.17M|                        break;
  232|  1.17M|                    }
  233|       |
  234|  1.67M|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 644k, False: 1.03M]
  ------------------
  235|   644k|                    {
  236|   644k|                        program.AddParseError(
  237|   644k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|   644k|                        break;
  239|   644k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  1.03M|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 672k, False: 357k]
  ------------------
  243|   672k|                    {
  244|       |                        // Find first defintions of label
  245|   672k|                        const Token* first_label_definition =
  246|   672k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   672k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|   672k|                                    {
  249|   672k|                                        phi::string_view token_label_name = t.GetText();
  250|   672k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   672k|                                        if (token_label_name == label_name)
  253|   672k|                                        {
  254|   672k|                                            return true;
  255|   672k|                                        }
  256|   672k|                                    }
  257|       |
  258|   672k|                                    return false;
  259|   672k|                                });
  260|       |
  261|   672k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|   672k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|   672k|                                current_token, *first_label_definition));
  265|   672k|                        break;
  266|   672k|                    }
  267|       |
  268|   357k|                    program.m_JumpData[label_name] =
  269|   357k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|   357k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|   357k|                    break;
  276|  1.03M|                }
  277|       |
  278|  2.05M|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 2.05M, False: 9.66M]
  ------------------
  279|  2.05M|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 1.19M, False: 859k]
  ------------------
  280|  1.19M|                    {
  281|  1.19M|                        program.AddParseError(
  282|  1.19M|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  1.19M|                        break;
  284|  1.19M|                    }
  285|       |
  286|   859k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|   859k|                    PHI_ASSERT(current_token.HasHint());
  290|   859k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|   859k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|   859k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|   859k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|   859k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|   859k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|   859k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|   859k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|   859k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  1.61M|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 1.50M, False: 110k]
  ------------------
  312|  1.50M|                    {
  313|       |                        // Get next token
  314|  1.50M|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 7.37k, False: 1.49M]
  ------------------
  315|  7.37k|                        {
  316|  7.37k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|  7.37k|                                    current_token, number_of_argument_required.unsafe(),
  318|  7.37k|                                    argument_num.unsafe()));
  319|  7.37k|                            break;
  320|  7.37k|                        }
  321|       |
  322|  1.49M|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  1.49M|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 564k, False: 929k]
  ------------------
  326|   564k|                        {
  327|   564k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 176k, False: 388k]
  ------------------
  328|   176k|                            {
  329|   176k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|   176k|                            }
  331|       |
  332|   564k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|   564k|                            continue;
  335|   564k|                        }
  336|       |
  337|   929k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 268k, False: 660k]
  ------------------
  338|   268k|                        {
  339|   268k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|   268k|                                    token, number_of_argument_required.unsafe(),
  341|   268k|                                    argument_num.unsafe()));
  342|   268k|                            break;
  343|   268k|                        }
  344|       |
  345|   660k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|   660k|                                parse_instruction_argument(
  347|   660k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|   660k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 472k, False: 187k]
  ------------------
  349|   472k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|   472k|                            break;
  352|   472k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|   187k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|   187k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|   187k|                        argument_num++;
  359|   187k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|   187k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|   859k|                    program.m_Instructions.emplace_back(instruction);
  367|   859k|                    line_has_instruction = true;
  368|   859k|                    break;
  369|  2.05M|                }
  370|       |
  371|  3.12M|                default:
  ------------------
  |  Branch (371:17): [True: 3.12M, False: 8.59M]
  ------------------
  372|  3.12M|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  3.12M|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 1.59M, False: 1.52M]
  ------------------
  374|  1.59M|                    {
  375|  1.59M|                        expected_token_type = Token::Type::NewLine;
  376|  1.59M|                    }
  377|       |
  378|  3.12M|                    program.AddParseError(
  379|  3.12M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  3.12M|                    break;
  381|  11.7M|            }
  382|  11.7M|        }
  383|       |
  384|       |        // Check for empty labels
  385|  70.4k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 21.2k, False: 49.1k]
  ------------------
  386|  21.2k|        {
  387|   423k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 401k, False: 21.2k]
  ------------------
  388|   401k|            {
  389|   401k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|   401k|                const Token& token = *it;
  392|   401k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 321k, False: 80.6k]
  ------------------
  393|   321k|                {
  394|   321k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|   321k|                    --label_count;
  396|   321k|                }
  397|   401k|            }
  398|  21.2k|        }
  399|       |
  400|  70.4k|        return program;
  401|  70.4k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  70.4k|    {
  405|  70.4k|        TokenStream tokens = Tokenize(source);
  406|  70.4k|        return Parse(tokens);
  407|  70.4k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|   660k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|   660k|        switch (token.GetType())
   37|   660k|        {
   38|  86.4k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 86.4k, False: 573k]
  ------------------
   39|  86.4k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 45.1k, False: 41.2k]
  ------------------
   40|  86.4k|                                          ArgumentType::AddressDisplacement))
   41|  45.1k|                {
   42|  45.1k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|  45.1k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|  45.1k|                    return {};
   46|  45.1k|                }
   47|       |
   48|       |                // Get address displacement
   49|  41.2k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  41.2k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  41.2k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 47, False: 41.2k]
  ------------------
   54|     47|                {
   55|     47|                    program.AddParseError(
   56|     47|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|     47|                    return {};
   58|     47|                }
   59|       |
   60|  41.2k|                auto         it           = tokens.current_position();
   61|  41.2k|                const Token& first_token  = tokens.consume();
   62|  41.2k|                const Token& second_token = tokens.consume();
   63|  41.2k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  41.2k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 15.3k, False: 25.9k]
  ------------------
   66|  15.3k|                {
   67|  15.3k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|  15.3k|                            first_token, Token::Type::OpenBracket));
   69|  15.3k|                    return {};
   70|  15.3k|                }
   71|       |
   72|       |                // Second token is the register
   73|  25.9k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 6.83k, False: 19.0k]
  ------------------
   74|  6.83k|                {
   75|  6.83k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|  6.83k|                            second_token, Token::Type::RegisterInt));
   77|  6.83k|                    return {};
   78|  6.83k|                }
   79|       |
   80|  19.0k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 8.58k, False: 10.5k]
  ------------------
   81|  8.58k|                {
   82|  8.58k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|  8.58k|                            third_token, Token::Type::ClosingBracket));
   84|  8.58k|                    return {};
   85|  8.58k|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|  10.5k|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|  10.5k|                return ConstructInstructionArgumentAddressDisplacement(
   94|  10.5k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|  19.0k|            }
   96|  72.9k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 72.9k, False: 587k]
  ------------------
   97|  72.9k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 5.86k, False: 67.0k]
  ------------------
   98|  5.86k|                {
   99|  5.86k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|  5.86k|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|  5.86k|                    return {};
  102|  5.86k|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  67.0k|                return ConstructInstructionArgumentRegisterInt(
  108|  67.0k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  72.9k|            }
  110|  37.5k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 37.5k, False: 622k]
  ------------------
  111|  37.5k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 16.7k, False: 20.7k]
  ------------------
  112|  16.7k|                {
  113|  16.7k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|  16.7k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|  16.7k|                    return {};
  116|  16.7k|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  20.7k|                return ConstructInstructionArgumentRegisterFloat(
  122|  20.7k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  37.5k|            }
  124|  15.4k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 15.4k, False: 644k]
  ------------------
  125|  15.4k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|  15.4k|                return {};
  128|  37.5k|            }
  129|   283k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 283k, False: 376k]
  ------------------
  130|       |                // Parse as Label
  131|   283k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 63.3k, False: 220k]
  ------------------
  132|  63.3k|                {
  133|  63.3k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  63.3k|                            token, expected_argument_type, ArgumentType::Label));
  135|  63.3k|                    return {};
  136|  63.3k|                }
  137|       |
  138|   220k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 220k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|   220k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 139k, False: 80.9k]
  ------------------
  145|   139k|                {
  146|   139k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|   139k|                    return {};
  148|   139k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  80.9k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|   220k|            }
  154|  34.1k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 34.1k, False: 626k]
  ------------------
  155|  34.1k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 16.1k, False: 18.0k]
  ------------------
  156|  16.1k|                {
  157|  16.1k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|  16.1k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|  16.1k|                    return {};
  160|  16.1k|                }
  161|       |
  162|  18.0k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 8.44k, False: 9.55k]
  ------------------
  163|  8.44k|                {
  164|  8.44k|                    return ConstructInstructionArgumentImmediateValue(
  165|  8.44k|                            static_cast<std::int16_t>(token.GetHint()));
  166|  8.44k|                }
  167|       |
  168|  9.55k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|  9.55k|                return {};
  170|  18.0k|            }
  171|       |
  172|   130k|            default:
  ------------------
  |  Branch (172:13): [True: 130k, False: 530k]
  ------------------
  173|   130k|                program.AddParseError(
  174|   130k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|   130k|                return {};
  176|   660k|        }
  177|   660k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  12.0M|                                tokens.find_first_token_if([&](const Token& t) {
  247|  12.0M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 8.55M, False: 3.54M]
  ------------------
  248|  8.55M|                                    {
  249|  8.55M|                                        phi::string_view token_label_name = t.GetText();
  250|  8.55M|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  8.55M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 672k, False: 7.87M]
  ------------------
  253|   672k|                                        {
  254|   672k|                                            return true;
  255|   672k|                                        }
  256|  8.55M|                                    }
  257|       |
  258|  11.4M|                                    return false;
  259|  12.0M|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    529|    {
  354|    529|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 529]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    529|        m_CurrentProgram = &program;
  361|       |
  362|    529|        m_ProgramCounter               = 0u;
  363|    529|        m_Halted                       = false;
  364|    529|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    529|        m_LastRaisedException          = Exception::None;
  366|    529|        m_CurrentStepCount             = 0u;
  367|       |
  368|    529|        return true;
  369|    529|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|  10.4M|    {
   13|  10.4M|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 1.67M, False: 8.77M]
  ------------------
   14|  1.67M|        {
   15|  1.67M|            const char first_char = token[0u];
   16|  1.67M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 74.3k, False: 1.60M]
  |  Branch (16:38): [True: 103k, False: 1.49M]
  ------------------
   17|   177k|            {
   18|   177k|                const char second_char = token[1u];
   19|   177k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 170k, False: 7.41k]
  |  Branch (19:43): [True: 130k, False: 39.6k]
  ------------------
   20|   130k|                {
   21|   130k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|   130k|                }
   23|   177k|            }
   24|  1.67M|        }
   25|  8.77M|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 2.29M, False: 6.47M]
  ------------------
   26|  2.29M|        {
   27|  2.29M|            const char first_char = token[0u];
   28|  2.29M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 128k, False: 2.16M]
  |  Branch (28:38): [True: 22.6k, False: 2.14M]
  ------------------
   29|   151k|            {
   30|   151k|                const char second_char = token[1u];
   31|   151k|                const char third_char  = token[2u];
   32|       |
   33|   151k|                switch (second_char)
   34|   151k|                {
   35|  30.1k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 30.1k, False: 121k]
  ------------------
   36|  30.1k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 16.6k, False: 13.5k]
  |  Branch (36:50): [True: 9.05k, False: 7.54k]
  ------------------
   37|  9.05k|                        {
   38|  9.05k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|  9.05k|                        }
   40|  21.1k|                        break;
   41|  30.1k|                    }
   42|  60.2k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 60.2k, False: 91.2k]
  ------------------
   43|  60.2k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 40.3k, False: 19.8k]
  |  Branch (43:50): [True: 24.9k, False: 15.4k]
  ------------------
   44|  24.9k|                        {
   45|  24.9k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|  24.9k|                        }
   47|  35.2k|                        break;
   48|  60.2k|                    }
   49|  35.2k|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 32.2k, False: 119k]
  ------------------
   50|  32.2k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 6.54k, False: 25.7k]
  |  Branch (50:50): [True: 13.5k, False: 12.1k]
  ------------------
   51|  20.1k|                        {
   52|  20.1k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|  20.1k|                        }
   54|  12.1k|                        break;
   55|  32.2k|                    }
   56|  28.8k|                    default: {
  ------------------
  |  Branch (56:21): [True: 28.8k, False: 122k]
  ------------------
   57|  28.8k|                        break;
   58|  32.2k|                    }
   59|   151k|                }
   60|   151k|            }
   61|  2.29M|        }
   62|       |
   63|  10.2M|        return IntRegisterID::None;
   64|  10.4M|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|  10.2M|    {
   68|  10.2M|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 1.54M, False: 8.71M]
  ------------------
   69|  1.54M|        {
   70|  1.54M|            const char first_char = token[0u];
   71|  1.54M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 46.9k, False: 1.49M]
  |  Branch (71:38): [True: 35.4k, False: 1.46M]
  ------------------
   72|  82.4k|            {
   73|  82.4k|                const char second_char = token[1u];
   74|  82.4k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 74.4k, False: 7.98k]
  |  Branch (74:43): [True: 50.4k, False: 23.9k]
  ------------------
   75|  50.4k|                {
   76|  50.4k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  50.4k|                }
   78|  82.4k|            }
   79|  1.54M|        }
   80|  8.71M|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 2.24M, False: 6.47M]
  ------------------
   81|  2.24M|        {
   82|  2.24M|            const char first_char = token[0u];
   83|  2.24M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 128k, False: 2.11M]
  |  Branch (83:38): [True: 39.3k, False: 2.07M]
  ------------------
   84|   168k|            {
   85|   168k|                const char second_char = token[1u];
   86|   168k|                const char third_char  = token[2u];
   87|       |
   88|   168k|                switch (second_char)
   89|   168k|                {
   90|  32.5k|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 32.5k, False: 135k]
  ------------------
   91|  32.5k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 26.2k, False: 6.30k]
  |  Branch (91:50): [True: 8.74k, False: 17.4k]
  ------------------
   92|  8.74k|                        {
   93|  8.74k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|  8.74k|                        }
   95|  23.7k|                        break;
   96|  32.5k|                    }
   97|  52.6k|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 52.6k, False: 115k]
  ------------------
   98|  52.6k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 18.4k, False: 34.1k]
  |  Branch (98:50): [True: 14.9k, False: 3.53k]
  ------------------
   99|  14.9k|                        {
  100|  14.9k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|  14.9k|                        }
  102|  37.7k|                        break;
  103|  52.6k|                    }
  104|  38.8k|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 38.8k, False: 129k]
  ------------------
  105|  38.8k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 19.5k, False: 19.2k]
  |  Branch (105:50): [True: 3.11k, False: 16.1k]
  ------------------
  106|  22.7k|                        {
  107|  22.7k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|  22.7k|                        }
  109|  16.1k|                        break;
  110|  38.8k|                    }
  111|  44.0k|                    default: {
  ------------------
  |  Branch (111:21): [True: 44.0k, False: 124k]
  ------------------
  112|  44.0k|                        break;
  113|  38.8k|                    }
  114|   168k|                }
  115|   168k|            }
  116|  2.24M|        }
  117|       |
  118|  10.1M|        return FloatRegisterID::None;
  119|  10.2M|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|  9.31M|    {
  123|  9.31M|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 2.01M, False: 7.30M]
  ------------------
  124|  2.01M|        {
  125|  2.01M|            const char c1 = token[0u];
  126|  2.01M|            const char c2 = token[1u];
  127|  2.01M|            const char c3 = token[2u];
  128|  2.01M|            const char c4 = token[3u];
  129|       |
  130|  2.01M|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 72.3k, False: 1.94M]
  |  Branch (130:34): [True: 38.0k, False: 1.90M]
  |  Branch (130:49): [True: 11.1k, False: 99.2k]
  |  Branch (130:62): [True: 62.0k, False: 37.1k]
  ------------------
  131|  2.01M|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 38.7k, False: 34.5k]
  |  Branch (131:34): [True: 22.9k, False: 11.6k]
  |  Branch (131:49): [True: 38.2k, False: 23.4k]
  |  Branch (131:62): [True: 83, False: 23.3k]
  ------------------
  132|  2.01M|        }
  133|       |
  134|  7.30M|        return false;
  135|  9.31M|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|  10.8M|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  2.47M|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  44.7M|    {
   41|  44.7M|        return m_Type;
   42|  44.7M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  34.2M|    {
   51|  34.2M|        return m_LineNumber;
   52|  34.2M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  64.9M|    {
   56|  64.9M|        return m_Column;
   57|  64.9M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  42.9M|    {
   61|  42.9M|        return m_Text.length();
   62|  42.9M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  19.5M|    {
   66|  19.5M|        return m_Text;
   67|  19.5M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   918k|    {
   80|   918k|        return m_HasHint;
   81|   918k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  1.00M|    {
   85|  1.00M|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  1.00M|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  1.00M|                   m_Type == Type::ImmediateInteger);
   88|  1.00M|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  1.00M|        return m_Hint;
   91|  1.00M|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  70.4k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  70.4k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  70.4k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  41.2k|    {
   51|  41.2k|        auto it = m_Iterator;
   52|   165k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 123k, False: 41.2k]
  ------------------
   53|   123k|        {
   54|   123k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 47, False: 123k]
  ------------------
   55|     47|            {
   56|     47|                return false;
   57|     47|            }
   58|   123k|        }
   59|       |
   60|  41.2k|        return true;
   61|  41.2k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  13.2M|    {
   65|  13.2M|        return m_Iterator != m_Tokens.end();
   66|  13.2M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  13.3M|    {
   70|  13.3M|        return m_Iterator == m_Tokens.end();
   71|  13.3M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  13.3M|    {
   85|  13.3M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  13.3M|        return *m_Iterator++;
   91|  13.3M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  41.2k|    {
  164|  41.2k|        return m_Iterator;
  165|  41.2k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  10.5k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  10.5k|        m_Iterator = it;
  179|  10.5k|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  70.4k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  70.4k|        return m_Tokens.begin();
  188|  70.4k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  70.4k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  70.4k|        return m_Tokens.end();
  206|  70.4k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  21.2k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  21.2k|        return m_Tokens.rbegin();
  224|  21.2k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|   401k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|   401k|        return m_Tokens.rend();
  233|   401k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  70.4k|    {
   66|  70.4k|        TokenStream tokens;
   67|       |
   68|  70.4k|        phi::string_view current_token;
   69|       |
   70|  70.4k|        phi::u64 current_line_number{1u};
   71|  70.4k|        phi::u64 current_column{1u};
   72|  70.4k|        phi::u64 token_begin{0u};
   73|       |
   74|  70.4k|        phi::boolean parsing_comment{false};
   75|       |
   76|  34.7M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 34.6M, False: 70.4k]
  ------------------
   77|  34.6M|        {
   78|  34.6M|            const char c{source.at(i)};
   79|       |
   80|  34.6M|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 1.97M, False: 32.7M]
  ------------------
   81|  1.97M|            {
   82|  1.97M|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 574k, False: 1.40M]
  ------------------
   83|   574k|                {
   84|       |                    // Skip empty lines
   85|   574k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|   574k|                                        current_line_number, current_column);
   87|       |
   88|   574k|                    parsing_comment = false;
   89|   574k|                    current_line_number += 1u;
   90|   574k|                    current_column = 1u;
   91|   574k|                    continue;
   92|   574k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  1.40M|                tokens.emplace_back(ParseToken(
   96|  1.40M|                        source.substring_view(
   97|  1.40M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  1.40M|                                current_token.length()),
   99|  1.40M|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  1.40M|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  1.40M|                                    current_line_number, current_column);
  103|       |
  104|  1.40M|                current_token   = phi::string_view{};
  105|  1.40M|                parsing_comment = false;
  106|  1.40M|                current_line_number += 1u;
  107|  1.40M|                current_column = 0u;
  108|  1.40M|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|  32.7M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 55.6k, False: 32.6M]
  |  Branch (110:34): [True: 60.9k, False: 32.5M]
  ------------------
  111|   116k|            {
  112|   116k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 17.4k, False: 99.0k]
  ------------------
  113|  17.4k|                {
  114|  17.4k|                    token_begin = i;
  115|  17.4k|                }
  116|  99.0k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 87.8k, False: 11.2k]
  ------------------
  117|  87.8k|                {
  118|  87.8k|                    tokens.emplace_back(ParseToken(
  119|  87.8k|                            source.substring_view(
  120|  87.8k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  87.8k|                                    current_token.length()),
  122|  87.8k|                            current_line_number, current_column - current_token.length()));
  123|  87.8k|                    token_begin   = i;
  124|  87.8k|                    current_token = phi::string_view{};
  125|  87.8k|                }
  126|       |
  127|   116k|                parsing_comment = true;
  128|   116k|                current_token   = source.substring_view(
  129|   116k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|   116k|                        current_token.length() + 1u);
  131|   116k|            }
  132|  32.5M|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 189k, False: 32.4M]
  ------------------
  133|   189k|            {
  134|       |                // simply append the character
  135|   189k|                current_token = source.substring_view(
  136|   189k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|   189k|                        current_token.length() + 1u);
  138|   189k|            }
  139|  32.4M|            else
  140|  32.4M|            {
  141|       |                // Not parsing a comment
  142|  32.4M|                switch (c)
  143|  32.4M|                {
  144|   480k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 480k, False: 31.9M]
  ------------------
  145|  1.14M|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 664k, False: 31.7M]
  ------------------
  146|  1.14M|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 0, False: 32.4M]
  ------------------
  147|  1.14M|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 233k, False: 910k]
  ------------------
  148|   233k|                        {
  149|   233k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|   233k|                            continue;
  152|   233k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|   910k|                        tokens.emplace_back(ParseToken(
  156|   910k|                                source.substring_view(
  157|   910k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|   910k|                                        current_token.length()),
  159|   910k|                                current_line_number, current_column - current_token.length()));
  160|   910k|                        current_token = phi::string_view{};
  161|   910k|                        break;
  162|  3.74M|                    case ':':
  ------------------
  |  Branch (162:21): [True: 3.74M, False: 28.6M]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  3.74M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 3.12M, False: 619k]
  ------------------
  165|  3.12M|                        {
  166|  3.12M|                            current_token = source.substring_view(
  167|  3.12M|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  3.12M|                                    current_token.length() + 1u);
  169|  3.12M|                            tokens.emplace_back(ParseToken(
  170|  3.12M|                                    source.substring_view(
  171|  3.12M|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  3.12M|                                                    token_begin),
  173|  3.12M|                                            current_token.length()),
  174|  3.12M|                                    current_line_number,
  175|  3.12M|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  3.12M|                            current_token = phi::string_view{};
  178|  3.12M|                        }
  179|   619k|                        else
  180|   619k|                        {
  181|       |                            // Orphan colon
  182|   619k|                            token_begin = i;
  183|       |
  184|   619k|                            tokens.emplace_back(
  185|   619k|                                    Token::Type::Colon,
  186|   619k|                                    source.substring_view(
  187|   619k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|   619k|                                                    token_begin),
  189|   619k|                                            1u),
  190|   619k|                                    current_line_number, current_column);
  191|   619k|                        }
  192|  3.74M|                        break;
  193|  2.18M|                    case ',':
  ------------------
  |  Branch (193:21): [True: 2.18M, False: 30.2M]
  ------------------
  194|  2.55M|                    case '(':
  ------------------
  |  Branch (194:21): [True: 376k, False: 32.0M]
  ------------------
  195|  2.99M|                    case ')':
  ------------------
  |  Branch (195:21): [True: 439k, False: 31.9M]
  ------------------
  196|  2.99M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 2.16M, False: 827k]
  ------------------
  197|  2.16M|                        {
  198|  2.16M|                            tokens.emplace_back(ParseToken(
  199|  2.16M|                                    source.substring_view(
  200|  2.16M|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  2.16M|                                                    token_begin),
  202|  2.16M|                                            current_token.length()),
  203|  2.16M|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  2.16M|                            current_token = phi::string_view{};
  206|  2.16M|                        }
  207|       |
  208|  2.99M|                        Token::Type type;
  209|  2.99M|                        switch (c)
  210|  2.99M|                        {
  211|  2.18M|                            case ',':
  ------------------
  |  Branch (211:29): [True: 2.18M, False: 816k]
  ------------------
  212|  2.18M|                                type = Token::Type::Comma;
  213|  2.18M|                                break;
  214|   376k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 376k, False: 2.62M]
  ------------------
  215|   376k|                                type = Token::Type::OpenBracket;
  216|   376k|                                break;
  217|   439k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 439k, False: 2.55M]
  ------------------
  218|   439k|                                type = Token::Type::ClosingBracket;
  219|   439k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 2.99M]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  2.99M|#endif
  225|  2.99M|                        }
  226|       |
  227|  2.99M|                        token_begin = i;
  228|       |
  229|  2.99M|                        tokens.emplace_back(
  230|  2.99M|                                type,
  231|  2.99M|                                source.substring_view(
  232|  2.99M|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  2.99M|                                        1u),
  234|  2.99M|                                current_line_number, current_column);
  235|  2.99M|                        break;
  236|       |
  237|  24.5M|                    default:
  ------------------
  |  Branch (237:21): [True: 24.5M, False: 7.88M]
  ------------------
  238|  24.5M|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 7.63M, False: 16.8M]
  ------------------
  239|  7.63M|                        {
  240|  7.63M|                            token_begin = i;
  241|  7.63M|                        }
  242|       |
  243|       |                        // simply append the character
  244|  24.5M|                        current_token = source.substring_view(
  245|  24.5M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|  24.5M|                                current_token.length() + 1u);
  247|  32.4M|                }
  248|  32.4M|            }
  249|       |
  250|  33.8M|            current_column += 1u;
  251|  33.8M|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  70.4k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 51.0k, False: 19.3k]
  ------------------
  255|  51.0k|        {
  256|  51.0k|            tokens.emplace_back(
  257|  51.0k|                    ParseToken(source.substring_view(
  258|  51.0k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  51.0k|                                       current_token.length()),
  260|  51.0k|                               current_line_number, current_column - current_token.length()));
  261|  51.0k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  70.4k|        tokens.finalize();
  265|       |
  266|  70.4k|        return tokens;
  267|  70.4k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|  7.74M|    {
   14|  7.74M|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 71.9k, False: 7.67M]
  |  Branch (14:13): [True: 66.8k, False: 7.67M]
  |  Branch (14:36): [True: 66.8k, False: 5.16k]
  ------------------
   15|  66.8k|        {
   16|  66.8k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  66.8k|            if (number)
  ------------------
  |  Branch (18:17): [True: 11.9k, False: 54.8k]
  ------------------
   19|  11.9k|            {
   20|  11.9k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  11.9k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  11.9k|            }
   23|       |
   24|  54.8k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  66.8k|        }
   26|       |
   27|  7.67M|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 51.8k, False: 7.62M]
  |  Branch (27:13): [True: 105k, False: 7.57M]
  |  Branch (27:36): [True: 53.4k, False: 7.57M]
  ------------------
   28|   105k|        {
   29|   105k|            return {Token::Type::Comment, token, line_number, column};
   30|   105k|        }
   31|       |
   32|  7.57M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 166k, False: 7.40M]
  ------------------
   33|   166k|        {
   34|   166k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|   166k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|   166k|        }
   37|       |
   38|  7.40M|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 23.4k, False: 7.38M]
  ------------------
   39|  23.4k|        {
   40|  23.4k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  23.4k|        }
   42|       |
   43|  7.38M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 115k, False: 7.26M]
  ------------------
   44|   115k|        {
   45|   115k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|   115k|                    static_cast<phi::uint32_t>(id)};
   47|   115k|        }
   48|       |
   49|  7.26M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 87.5k, False: 7.17M]
  ------------------
   50|  87.5k|        {
   51|  87.5k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  87.5k|                    static_cast<phi::uint32_t>(id)};
   53|  87.5k|        }
   54|       |
   55|  7.17M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 2.09M, False: 5.08M]
  ------------------
   56|  2.09M|        {
   57|  2.09M|            return {Token::Type::OpCode, token, line_number, column,
   58|  2.09M|                    static_cast<phi::uint32_t>(opcode)};
   59|  2.09M|        }
   60|       |
   61|  5.08M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  7.17M|    }

_ZN6ImVec2C2Ev:
  262|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

LLVMFuzzerTestOneInput:
   10|  70.4k|{
   11|  70.4k|    static dlxemu::Emulator emu;
   12|       |
   13|  70.4k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   14|       |
   15|  70.4k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   16|       |
   17|       |    // Parse it
   18|  70.4k|    editor.SetText(std::string(source.data(), source.length().unsafe()));
   19|  70.4k|    editor.m_FullText = editor.GetText();
   20|       |
   21|  70.4k|    emu.ParseProgram(editor.m_FullText);
   22|       |
   23|  70.4k|    editor.ColorizeInternal();
   24|       |
   25|  70.4k|    return 0;
   26|  70.4k|}


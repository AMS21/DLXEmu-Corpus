_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  197|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  202|   371k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  240|  74.2k|    {
  241|  74.2k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (241:13): [True: 37.3k, False: 36.9k]
  ------------------
  242|  37.3k|        {
  243|  37.3k|            return m_Line < other.m_Line;
  244|  37.3k|        }
  245|       |
  246|  36.9k|        return m_Column <= other.m_Column;
  247|  74.2k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  251|      1|    {
  252|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (252:13): [True: 0, False: 1]
  ------------------
  253|      0|        {
  254|      0|            return m_Line > other.m_Line;
  255|      0|        }
  256|       |
  257|      1|        return m_Column >= other.m_Column;
  258|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  265|  34.3M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  293|      1|    {
  294|      1|        Colorize();
  295|      1|        m_Lines.push_back(Line());
  296|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  299|      1|    {
  300|      1|        VerifyInternalState();
  301|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  349|  74.2k|    {
  350|  74.2k|        m_ErrorMarkers.clear();
  351|  74.2k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  414|  74.2k|    {
  415|  74.2k|        m_Breakpoints.clear();
  416|  74.2k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  494|  74.2k|    {
  495|  74.2k|        m_Lines.clear();
  496|  74.2k|        ResetState();
  497|  74.2k|        m_Lines.emplace_back(Line());
  498|       |
  499|  74.2k|        for (const char character : text)
  ------------------
  |  Branch (499:35): [True: 51.8M, False: 74.2k]
  ------------------
  500|  51.8M|        {
  501|  51.8M|            if (character == '\r' ||
  ------------------
  |  Branch (501:17): [True: 45.0k, False: 51.8M]
  |  Branch (501:17): [True: 15.3M, False: 36.4M]
  ------------------
  502|  51.8M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (502:18): [True: 18.1M, False: 33.6M]
  |  Branch (502:48): [True: 16.0M, False: 2.08M]
  |  Branch (502:69): [True: 15.3M, False: 693k]
  ------------------
  503|  15.3M|            {
  504|       |                // ignore the carriage return character and control characters
  505|  15.3M|            }
  506|  36.4M|            else if (character == '\n')
  ------------------
  |  Branch (506:22): [True: 2.08M, False: 34.3M]
  ------------------
  507|  2.08M|            {
  508|  2.08M|                m_Lines.emplace_back(Line());
  509|  2.08M|            }
  510|  34.3M|            else
  511|  34.3M|            {
  512|  34.3M|                m_Lines.back().emplace_back(
  513|  34.3M|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  514|  34.3M|            }
  515|  51.8M|        }
  516|       |
  517|  74.2k|        m_TextChanged = true;
  518|  74.2k|        m_ScrollToTop = true;
  519|       |
  520|  74.2k|        m_UndoBuffer.clear();
  521|  74.2k|        m_UndoIndex = 0u;
  522|       |
  523|  74.2k|        Colorize();
  524|  74.2k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  527|  74.2k|    {
  528|  74.2k|        const phi::u32 max_line = GetMaxLineNumber();
  529|       |
  530|  74.2k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  531|  74.2k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1494|      1|    {
 1495|       |        // Lines should never be empty
 1496|      1|        PHI_ASSERT(!m_Lines.empty());
 1497|       |
 1498|       |        // Verify Selection is still in a valid state
 1499|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1500|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1501|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1502|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1503|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1504|       |
 1505|       |        // Verify cursor position
 1506|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1507|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1508|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1509|       |
 1510|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1511|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1512|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1513|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1514|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1515|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1516|       |#endif
 1517|       |
 1518|       |        // Verify that all breakpoints are on existing lines
 1519|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1519:35): [True: 0, False: 1]
  ------------------
 1520|      0|        {
 1521|      0|            PHI_ASSERT(break_point != 0u);
 1522|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1523|      0|        }
 1524|       |
 1525|       |        // Verify that all error markers are on existing lines
 1526|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1526:34): [True: 0, False: 1]
  ------------------
 1527|      0|        {
 1528|      0|            const phi::u32 line_number = error_marker.first;
 1529|       |
 1530|      0|            PHI_ASSERT(line_number != 0u);
 1531|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1532|      0|        }
 1533|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1536|      1|    {
 1537|      1|        constexpr const static Palette palette = {{
 1538|      1|                0xff7f7f7f, // Default
 1539|      1|                0xffd69c56, // OpCode
 1540|      1|                0xff00ff00, // Register
 1541|      1|                0xff7070e0, // IntegerLiteral
 1542|      1|                0xff206020, // Comment
 1543|      1|                0xff101010, // Background
 1544|      1|                0xffe0e0e0, // Cursor
 1545|      1|                0x80a06020, // Selection
 1546|      1|                0x800020ff, // ErrorMarker
 1547|      1|                0x40f08000, // Breakpoint
 1548|      1|                0xff707000, // Line number
 1549|      1|                0x40000000, // Current line fill
 1550|      1|                0x40808080, // Current line fill (inactive)
 1551|      1|                0x40a0a0a0, // Current line edge
 1552|      1|        }};
 1553|       |
 1554|      1|        return palette;
 1555|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1722|  74.2k|    {
 1723|       |        // TODO: This is quite unreadable
 1724|  74.2k|        const phi::u32 to_line =
 1725|  74.2k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1725:17): [True: 74.2k, False: 0]
  ------------------
 1726|  74.2k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1727|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1728|       |
 1729|  74.2k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1730|  74.2k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1731|  74.2k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1732|  74.2k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1733|  74.2k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1839|  74.2k|    {
 1840|  74.2k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1841|  74.2k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1842|  74.2k|        PHI_ASSERT(start <= end);
 1843|       |
 1844|  74.2k|        std::string result;
 1845|       |
 1846|  74.2k|        phi::u32   lstart = start.m_Line;
 1847|  74.2k|        phi::u32   lend   = end.m_Line;
 1848|  74.2k|        phi::u32   istart = GetCharacterIndex(start);
 1849|  74.2k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1850|  74.2k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1851|  74.2k|        phi::usize size   = 0u;
 1852|       |
 1853|  2.22M|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1853:35): [True: 2.15M, False: 74.2k]
  ------------------
 1854|  2.15M|        {
 1855|  2.15M|            PHI_ASSERT(i < m_Lines.size());
 1856|  2.15M|            size += m_Lines[i.unsafe()].size();
 1857|  2.15M|        }
 1858|       |
 1859|  74.2k|        result.reserve((size + size / 8u).unsafe());
 1860|       |
 1861|  36.5M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1861:16): [True: 27.0M, False: 9.51M]
  |  Branch (1861:16): [True: 36.4M, False: 74.2k]
  |  Branch (1861:33): [True: 9.44M, False: 74.2k]
  ------------------
 1862|  36.4M|        {
 1863|  36.4M|            PHI_ASSERT(lstart < m_Lines.size());
 1864|       |
 1865|  36.4M|            const Line& line = m_Lines[lstart.unsafe()];
 1866|  36.4M|            if (istart < line.size())
  ------------------
  |  Branch (1866:17): [True: 34.3M, False: 2.08M]
  ------------------
 1867|  34.3M|            {
 1868|  34.3M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1869|  34.3M|                istart++;
 1870|  34.3M|            }
 1871|  2.08M|            else
 1872|  2.08M|            {
 1873|  2.08M|                istart = 0u;
 1874|  2.08M|                ++lstart;
 1875|       |
 1876|  2.08M|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1876:21): [True: 2.08M, False: 0]
  ------------------
 1877|  2.08M|                {
 1878|  2.08M|                    result += '\n';
 1879|  2.08M|                }
 1880|  2.08M|            }
 1881|  36.4M|        }
 1882|       |
 1883|  74.2k|        return result;
 1884|  74.2k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2422|   148k|    {
 2423|   148k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2424|       |
 2425|   148k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2426|   148k|        phi::u32    index = 0u;
 2427|  16.8M|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2427:35): [True: 16.7M, False: 78.3k]
  |  Branch (2427:35): [True: 16.7M, False: 148k]
  |  Branch (2427:58): [True: 16.7M, False: 70.2k]
  ------------------
 2428|  16.7M|        {
 2429|  16.7M|            PHI_ASSERT(index < line.size());
 2430|  16.7M|            const Char character = line[index.unsafe()].m_Char;
 2431|       |
 2432|  16.7M|            if (character == '\t')
  ------------------
  |  Branch (2432:17): [True: 359k, False: 16.3M]
  ------------------
 2433|   359k|            {
 2434|   359k|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2435|   359k|            }
 2436|  16.3M|            else
 2437|  16.3M|            {
 2438|  16.3M|                ++column;
 2439|  16.3M|            }
 2440|       |
 2441|  16.7M|            index += UTF8CharLength(character);
 2442|  16.7M|        }
 2443|       |
 2444|   148k|        return index;
 2445|   148k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2494|  74.2k|    {
 2495|  74.2k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2495:13): [True: 0, False: 74.2k]
  ------------------
 2496|      0|        {
 2497|      0|            return 0u;
 2498|      0|        }
 2499|       |
 2500|  74.2k|        const Line& line = m_Lines[line_number.unsafe()];
 2501|  74.2k|        phi::u32    col  = 0u;
 2502|       |
 2503|  16.7M|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2503:32): [True: 16.7M, False: 74.2k]
  ------------------
 2504|  16.7M|        {
 2505|  16.7M|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2506|  16.7M|            if (character == '\t')
  ------------------
  |  Branch (2506:17): [True: 359k, False: 16.3M]
  ------------------
 2507|   359k|            {
 2508|   359k|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2509|   359k|            }
 2510|  16.3M|            else
 2511|  16.3M|            {
 2512|  16.3M|                col++;
 2513|  16.3M|            }
 2514|       |
 2515|  16.7M|            i += UTF8CharLength(character);
 2516|  16.7M|        }
 2517|       |
 2518|  74.2k|        return col;
 2519|  74.2k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2522|  74.2k|    {
 2523|  74.2k|        PHI_ASSERT(!m_Lines.empty());
 2524|       |
 2525|  74.2k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2526|  74.2k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3661|  13.9M|    {
 3662|  13.9M|        PaletteIndex palette_index{PaletteIndex::Default};
 3663|       |
 3664|       |        // Determine palette color
 3665|  13.9M|        switch (token.GetType())
 3666|  13.9M|        {
 3667|   109k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3667:13): [True: 109k, False: 13.8M]
  ------------------
 3668|   109k|                palette_index = PaletteIndex::Comment;
 3669|   109k|                break;
 3670|  70.3k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3670:13): [True: 70.3k, False: 13.9M]
  ------------------
 3671|   242k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3671:13): [True: 172k, False: 13.8M]
  ------------------
 3672|   242k|                palette_index = PaletteIndex::IntegerLiteral;
 3673|   242k|                break;
 3674|  2.22M|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3674:13): [True: 2.22M, False: 11.7M]
  ------------------
 3675|  2.22M|                palette_index = PaletteIndex::OpCode;
 3676|  2.22M|                break;
 3677|  92.2k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3677:13): [True: 92.2k, False: 13.8M]
  ------------------
 3678|   212k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3678:13): [True: 119k, False: 13.8M]
  ------------------
 3679|   238k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3679:13): [True: 26.2k, False: 13.9M]
  ------------------
 3680|   238k|                palette_index = PaletteIndex::Register;
 3681|   238k|                break;
 3682|  2.08M|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3682:13): [True: 2.08M, False: 11.9M]
  ------------------
 3683|  2.08M|                return;
 3684|  9.09M|            default:
  ------------------
  |  Branch (3684:13): [True: 9.09M, False: 4.89M]
  ------------------
 3685|  9.09M|                break;
 3686|  13.9M|        }
 3687|       |
 3688|  11.9M|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3689|  11.9M|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3690|       |
 3691|  11.9M|        for (phi::u64 index{token.GetColumn() - 1u};
 3692|  45.0M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3692:14): [True: 33.1M, False: 11.9M]
  ------------------
 3693|  33.1M|        {
 3694|  33.1M|            PHI_ASSERT(index < line.size());
 3695|  33.1M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3696|  33.1M|        }
 3697|  11.9M|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3700|  74.2k|    {
 3701|  74.2k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3702|       |
 3703|  74.2k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3703:38): [True: 13.9M, False: 74.2k]
  ------------------
 3704|  13.9M|        {
 3705|  13.9M|            ColorizeToken(token);
 3706|  13.9M|        }
 3707|  74.2k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3710|  74.2k|    {
 3711|  74.2k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3712|  74.2k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3713|  74.2k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3714|       |
 3715|       |        // Clear breakpoints and markers
 3716|  74.2k|        ClearBreakPoints();
 3717|  74.2k|        ClearErrorMarkers();
 3718|  74.2k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  135|  16.7M|{
  136|  16.7M|    return UTF8CharLength(static_cast<char>(characater));
  137|  16.7M|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  105|  33.4M|{
  106|  33.4M|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (106:9): [True: 39.1k, False: 33.3M]
  ------------------
  107|  39.1k|    {
  108|  39.1k|        return 6_u8;
  109|  39.1k|    }
  110|       |
  111|  33.3M|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (111:9): [True: 67.8k, False: 33.3M]
  ------------------
  112|  67.8k|    {
  113|  67.8k|        return 5_u8;
  114|  67.8k|    }
  115|       |
  116|  33.3M|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (116:9): [True: 70.3k, False: 33.2M]
  ------------------
  117|  70.3k|    {
  118|  70.3k|        return 4_u8;
  119|  70.3k|    }
  120|       |
  121|  33.2M|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (121:9): [True: 122k, False: 33.1M]
  ------------------
  122|   122k|    {
  123|   122k|        return 3_u8;
  124|   122k|    }
  125|       |
  126|  33.1M|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (126:9): [True: 468k, False: 32.6M]
  ------------------
  127|   468k|    {
  128|   468k|        return 2_u8;
  129|   468k|    }
  130|       |
  131|  32.6M|    return 1_u8;
  132|  33.1M|}

_ZN6dlxemu8EmulatorC2Ev:
   42|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  178|  74.2k|    {
  179|  74.2k|        return m_DLXProgram;
  180|  74.2k|    }
_ZN6dlxemu8Emulator12ParseProgramEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  183|  74.2k|    {
  184|  74.2k|        m_DLXProgram = dlx::Parser::Parse(source);
  185|       |
  186|  74.2k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (186:13): [True: 546, False: 73.7k]
  ------------------
  187|    546|        {
  188|    546|            m_Processor.LoadProgram(m_DLXProgram);
  189|    546|        }
  190|  74.2k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  203|  74.2k|    {
  204|  74.2k|        return m_CodeEditor;
  205|  74.2k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   38|      1|    {
   39|      1|        Shutdown();
   40|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  108|      1|    {
  109|      1|        if (imgui_initialized)
  ------------------
  |  Branch (109:13): [True: 0, False: 1]
  ------------------
  110|      0|        {
  111|      0|            ShutdownImGui();
  112|      0|        }
  113|       |
  114|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (114:13): [True: 0, False: 1]
  ------------------
  115|      0|        {
  116|      0|            glfwDestroyWindow(m_Window);
  117|      0|        }
  118|       |
  119|      1|        if (glfw_initialized)
  ------------------
  |  Branch (119:13): [True: 0, False: 1]
  ------------------
  120|      0|        {
  121|      0|            glfwTerminate();
  122|      0|        }
  123|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  3.45M|        {
  173|  3.45M|            PHI_ASSERT(index < 3u);
  174|       |
  175|  3.45M|            switch (index.unsafe())
  176|  3.45M|            {
  177|  1.53M|                case 0:
  ------------------
  |  Branch (177:17): [True: 1.53M, False: 1.91M]
  ------------------
  178|  1.53M|                    return m_Arg1Type;
  179|       |
  180|   973k|                case 1:
  ------------------
  |  Branch (180:17): [True: 973k, False: 2.47M]
  ------------------
  181|   973k|                    return m_Arg2Type;
  182|       |
  183|   940k|                case 2:
  ------------------
  |  Branch (183:17): [True: 940k, False: 2.50M]
  ------------------
  184|   940k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 3.45M]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  3.45M|#endif
  191|  3.45M|            }
  192|  3.45M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|   916k|        {
  199|   916k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|   916k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 901k, False: 14.7k]
  ------------------
  203|   901k|            {
  204|   901k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   901k|            }
  206|   916k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 533k, False: 382k]
  ------------------
  207|   533k|            {
  208|   533k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   533k|            }
  210|   916k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 291k, False: 624k]
  ------------------
  211|   291k|            {
  212|   291k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  213|   291k|            }
  214|       |
  215|   916k|            return number_of_argument_required;
  216|   916k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|   916k|        {
  225|   916k|            return m_Executor;
  226|   916k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   543k|    {
   38|   543k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   543k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   543k|                                         static_cast<underlying_t>(rhs));
   42|   543k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   543k|    {
   55|   543k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   543k|        return static_cast<underlying_t>(type & test) != 0;
   58|   543k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  3.23M|    {
   31|  3.23M|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 72.4k, False: 3.16M]
  ------------------
   32|  72.4k|        {
   33|  72.4k|            return true;
   34|  72.4k|        }
   35|       |
   36|  3.16M|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 9.89k, False: 3.15M]
  ------------------
   37|  9.89k|        {
   38|  9.89k|            return true;
   39|  9.89k|        }
   40|       |
   41|  3.15M|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 1.14M, False: 2.00M]
  ------------------
   42|  1.14M|        {
   43|  1.14M|            return true;
   44|  1.14M|        }
   45|       |
   46|  2.00M|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 15.5k, False: 1.98M]
  ------------------
   47|  15.5k|        {
   48|  15.5k|            return true;
   49|  15.5k|        }
   50|       |
   51|  1.98M|        return false;
   52|  2.00M|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  1.98M|    {
   56|  1.98M|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 1.98M]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  1.98M|        const char first_char = token.at(0u);
   62|       |
   63|  1.98M|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 429k, False: 1.55M]
  ------------------
   64|   429k|        {
   65|   429k|            return phi::is_alpha(first_char);
   66|   429k|        }
   67|       |
   68|  1.55M|        phi::boolean just_under_scores = (first_char == '_');
   69|  1.55M|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 256k, False: 1.30M]
  |  Branch (69:13): [True: 238k, False: 1.31M]
  |  Branch (69:43): [True: 238k, False: 17.2k]
  ------------------
   70|   238k|        {
   71|   238k|            return false;
   72|   238k|        }
   73|       |
   74|  4.50M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 3.62M, False: 882k]
  ------------------
   75|  3.62M|        {
   76|  3.62M|            const char c{token.at(index)};
   77|       |
   78|  3.62M|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 3.16M, False: 457k]
  ------------------
   79|  3.16M|            {
   80|  3.16M|                just_under_scores = false;
   81|  3.16M|            }
   82|   457k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 21.1k, False: 436k]
  ------------------
   83|  21.1k|            {
   84|  21.1k|                continue;
   85|  21.1k|            }
   86|   436k|            else
   87|   436k|            {
   88|   436k|                return false;
   89|   436k|            }
   90|  3.62M|        }
   91|       |
   92|   882k|        return !just_under_scores;
   93|  1.31M|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|  8.02M|    {
  100|  8.02M|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 8.02M]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|  8.02M|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 1.14M, False: 6.88M]
  ------------------
  106|  1.14M|        {
  107|  1.14M|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 132k, False: 1.00M]
  ------------------
  108|   132k|            {
  109|   132k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|   132k|            }
  111|       |
  112|  1.00M|            return {};
  113|  1.14M|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|  6.88M|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 13.4k, False: 6.87M]
  ------------------
  117|  13.4k|        {
  118|  13.4k|            return {};
  119|  13.4k|        }
  120|       |
  121|  6.87M|        std::int32_t number{0};
  122|  6.87M|        phi::boolean is_negative{false};
  123|  6.87M|        phi::boolean starts_with_zero{false};
  124|  6.87M|        phi::boolean parsing_binary{false};
  125|  6.87M|        phi::boolean parsing_octal{false};
  126|  6.87M|        phi::boolean parsing_hexadecimal{false};
  127|  6.87M|        phi::boolean parsed_something{false};
  128|  6.87M|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|  7.71M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 7.60M, False: 105k]
  ------------------
  133|  7.60M|        {
  134|  7.60M|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|  7.60M|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 6.87M, False: 733k]
  ------------------
  138|  6.87M|            {
  139|  6.87M|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 27.9k, False: 6.84M]
  ------------------
  140|  27.9k|                {
  141|  27.9k|                    continue;
  142|  27.9k|                }
  143|       |
  144|  6.84M|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 93.0k, False: 6.75M]
  ------------------
  145|  93.0k|                {
  146|  93.0k|                    is_negative = true;
  147|  93.0k|                    continue;
  148|  93.0k|                }
  149|       |
  150|  6.75M|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 111k, False: 6.63M]
  ------------------
  151|   111k|                {
  152|   111k|                    starts_with_zero = true;
  153|   111k|                    continue;
  154|   111k|                }
  155|       |
  156|  6.63M|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 11.0k, False: 6.62M]
  ------------------
  157|  11.0k|                {
  158|  11.0k|                    return {};
  159|  11.0k|                }
  160|  6.63M|            }
  161|       |
  162|       |            // Second character
  163|  7.36M|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 315k, False: 7.04M]
  ------------------
  164|   315k|            {
  165|   315k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 111k, False: 204k]
  ------------------
  166|   111k|                {
  167|       |                    // Binary
  168|   111k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 9.58k, False: 101k]
  |  Branch (168:37): [True: 10.8k, False: 90.7k]
  ------------------
  169|  20.4k|                    {
  170|  20.4k|                        parsing_binary = true;
  171|  20.4k|                        continue;
  172|  20.4k|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  90.7k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 38.6k, False: 52.1k]
  |  Branch (175:37): [True: 21.2k, False: 30.8k]
  ------------------
  176|  59.9k|                    {
  177|  59.9k|                        parsing_hexadecimal = true;
  178|  59.9k|                        continue;
  179|  59.9k|                    }
  180|       |
  181|       |                    // Octal
  182|  30.8k|                    parsing_octal = true;
  183|  30.8k|                }
  184|   315k|            }
  185|       |
  186|       |            // Handle seperators
  187|  7.28M|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 12.1k, False: 7.26M]
  ------------------
  188|  12.1k|            {
  189|  12.1k|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 3.85k, False: 8.30k]
  ------------------
  190|  3.85k|                {
  191|  3.85k|                    return {};
  192|  3.85k|                }
  193|       |
  194|  8.30k|                parsed_separator = true;
  195|  8.30k|                continue;
  196|  12.1k|            }
  197|       |
  198|       |            // Check for over/underflow
  199|  7.26M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 283k, False: 6.98M]
  |  Branch (199:32): [True: 18.8k, False: 264k]
  ------------------
  200|  18.8k|            {
  201|       |                // Would underflow
  202|  18.8k|                return {};
  203|  18.8k|            }
  204|  7.25M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 6.98M, False: 264k]
  |  Branch (204:17): [True: 10.4k, False: 7.24M]
  |  Branch (204:33): [True: 10.4k, False: 6.97M]
  ------------------
  205|  10.4k|            {
  206|       |                // Would overflow
  207|  10.4k|                return {};
  208|  10.4k|            }
  209|       |
  210|  7.24M|            parsed_separator = false;
  211|  7.24M|            parsed_something = true;
  212|       |
  213|  7.24M|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 10.0k, False: 7.23M]
  ------------------
  214|  10.0k|            {
  215|  10.0k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 8.61k, False: 1.43k]
  ------------------
  216|  8.61k|                {
  217|  8.61k|                    return {};
  218|  8.61k|                }
  219|       |
  220|  1.43k|                number <<= 1;
  221|  1.43k|                number |= (c - '0');
  222|  1.43k|            }
  223|  7.23M|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 32.9k, False: 7.19M]
  ------------------
  224|  32.9k|            {
  225|  32.9k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 26.5k, False: 6.42k]
  ------------------
  226|  26.5k|                {
  227|  26.5k|                    return {};
  228|  26.5k|                }
  229|       |
  230|  6.42k|                number <<= 3;
  231|  6.42k|                number |= (c - '0');
  232|  6.42k|            }
  233|  7.19M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 95.5k, False: 7.10M]
  ------------------
  234|  95.5k|            {
  235|  95.5k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 41.8k, False: 53.7k]
  ------------------
  236|  41.8k|                {
  237|  41.8k|                    return {};
  238|  41.8k|                }
  239|       |
  240|  53.7k|                number <<= 4;
  241|  53.7k|                number |= phi::hex_digit_value(c).unsafe();
  242|  53.7k|            }
  243|  7.10M|            else
  244|  7.10M|            {
  245|  7.10M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 6.63M, False: 469k]
  ------------------
  246|  6.63M|                {
  247|  6.63M|                    return {};
  248|  6.63M|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|   469k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 152k, False: 316k]
  |  Branch (251:36): [True: 12.9k, False: 139k]
  ------------------
  252|  12.9k|                {
  253|  12.9k|                    return {};
  254|  12.9k|                }
  255|       |
  256|   456k|                number *= 10;
  257|   456k|                number += (c - '0');
  258|   456k|            }
  259|  7.24M|        }
  260|       |
  261|   105k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 89.6k, False: 15.8k]
  ------------------
  262|  89.6k|        {
  263|       |            // Check for over/underflow
  264|  89.6k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 33.2k, False: 56.3k]
  |  Branch (264:32): [True: 18.2k, False: 15.0k]
  ------------------
  265|  18.2k|            {
  266|       |                // Would underflow
  267|  18.2k|                return {};
  268|  18.2k|            }
  269|  71.3k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 56.3k, False: 15.0k]
  |  Branch (269:17): [True: 19.3k, False: 52.0k]
  |  Branch (269:33): [True: 19.3k, False: 37.0k]
  ------------------
  270|  19.3k|            {
  271|       |                // Would overflow
  272|  19.3k|                return {};
  273|  19.3k|            }
  274|       |
  275|  52.0k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 15.0k, False: 37.0k]
  ------------------
  276|  15.0k|            {
  277|  15.0k|                return static_cast<std::int16_t>(-number);
  278|  15.0k|            }
  279|       |
  280|  37.0k|            return static_cast<std::int16_t>(number);
  281|  52.0k|        }
  282|       |
  283|  15.8k|        return {};
  284|   105k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   702k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   702k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 12.5M, False: 0]
  ------------------
   64|  12.5M|            {
   65|  12.5M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 702k, False: 11.8M]
  ------------------
   66|   702k|                {
   67|   702k|                    return &token;
   68|   702k|                }
   69|  12.5M|            }
   70|       |
   71|      0|            return nullptr;
   72|   702k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  2.71M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.71M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.71M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  8.13M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  8.13M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  8.13M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  3.13M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  3.13M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  3.13M|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   916k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|   199k|    {
   25|   199k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|   199k|        switch (argument_number.unsafe())
   28|   199k|        {
   29|   157k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 157k, False: 41.9k]
  ------------------
   30|   157k|                m_Arg1 = argument;
   31|   157k|                break;
   32|  26.7k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 26.7k, False: 172k]
  ------------------
   33|  26.7k|                m_Arg2 = argument;
   34|  26.7k|                break;
   35|  15.2k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 15.2k, False: 184k]
  ------------------
   36|  15.2k|                m_Arg3 = argument;
   37|  15.2k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 199k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|   199k|#endif
   42|   199k|        }
   43|   199k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  2.94M|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  172|  69.9k|    {
  173|  69.9k|        InstructionArgument arg;
  174|  69.9k|        arg.m_Type                   = ArgumentType::IntRegister;
  175|  69.9k|        arg.register_int.register_id = id;
  176|  69.9k|        return arg;
  177|  69.9k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  180|  22.5k|    {
  181|  22.5k|        InstructionArgument arg;
  182|  22.5k|        arg.m_Type                     = ArgumentType::FloatRegister;
  183|  22.5k|        arg.register_float.register_id = id;
  184|  22.5k|        return arg;
  185|  22.5k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  188|  9.21k|    {
  189|  9.21k|        InstructionArgument arg;
  190|  9.21k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  191|  9.21k|        arg.immediate_value.signed_value = value;
  192|  9.21k|        return arg;
  193|  9.21k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  197|  10.6k|    {
  198|  10.6k|        InstructionArgument arg;
  199|  10.6k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  200|  10.6k|        arg.address_displacement.register_id  = id;
  201|  10.6k|        arg.address_displacement.displacement = displacement;
  202|  10.6k|        return arg;
  203|  10.6k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  206|  86.8k|    {
  207|  86.8k|        InstructionArgument arg;
  208|  86.8k|        arg.m_Type           = ArgumentType::Label;
  209|  86.8k|        arg.label.label_name = label_name;
  210|  86.8k|        return arg;
  211|  86.8k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   916k|    {
  453|   916k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   916k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|  10.6M|    {
   24|  10.6M|        switch (token.length().unsafe())
   25|  10.6M|        {
   26|       |            // 1 character OpCodes
   27|  1.42M|            case 1: {
  ------------------
  |  Branch (27:13): [True: 1.42M, False: 9.27M]
  ------------------
   28|  1.42M|                const char c1 = token[0u];
   29|       |
   30|  1.42M|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 395k, False: 1.02M]
  ------------------
   31|   395k|                {
   32|   395k|                    return OpCode::J;
   33|   395k|                }
   34|  1.02M|                break;
   35|  1.42M|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|  1.56M|            case 2: {
  ------------------
  |  Branch (38:13): [True: 1.56M, False: 9.13M]
  ------------------
   39|  1.56M|                const char c1 = token[0u];
   40|  1.56M|                const char c2 = token[1u];
   41|       |
   42|  1.56M|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 891k, False: 669k]
  ------------------
   43|  1.56M|                {
   44|  92.3k|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 92.3k, False: 1.46M]
  ------------------
   45|   113k|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 20.6k, False: 1.54M]
  ------------------
   46|   113k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 25.6k, False: 87.3k]
  ------------------
   47|  25.6k|                        {
   48|  25.6k|                            return OpCode::JR;
   49|  25.6k|                        }
   50|  87.3k|                        break;
   51|       |
   52|   119k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 119k, False: 1.44M]
  ------------------
   53|   226k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 106k, False: 1.45M]
  ------------------
   54|   226k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 92.5k, False: 134k]
  ------------------
   55|   226k|                        {
   56|  6.13k|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 6.13k, False: 220k]
  ------------------
   57|  25.3k|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 19.1k, False: 207k]
  ------------------
   58|  25.3k|                                return OpCode::LB;
   59|  6.05k|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 6.05k, False: 220k]
  ------------------
   60|  19.1k|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 13.0k, False: 213k]
  ------------------
   61|  19.1k|                                return OpCode::LD;
   62|  17.1k|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 17.1k, False: 209k]
  ------------------
   63|  39.9k|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 22.8k, False: 203k]
  ------------------
   64|  39.9k|                                return OpCode::LF;
   65|  7.93k|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 7.93k, False: 218k]
  ------------------
   66|  26.0k|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 18.0k, False: 208k]
  ------------------
   67|  26.0k|                                return OpCode::LH;
   68|  6.87k|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 6.87k, False: 219k]
  ------------------
   69|  23.6k|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 16.7k, False: 209k]
  ------------------
   70|  23.6k|                                return OpCode::LW;
   71|   226k|                        }
   72|  92.5k|                        break;
   73|  92.5k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 10.2k, False: 1.55M]
  ------------------
   74|  43.3k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 33.0k, False: 1.52M]
  ------------------
   75|  43.3k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 8.00k, False: 35.3k]
  ------------------
   76|  8.00k|                        {
   77|  8.00k|                            return OpCode::OR;
   78|  8.00k|                        }
   79|  35.3k|                        break;
   80|   142k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 142k, False: 1.41M]
  ------------------
   81|   286k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 143k, False: 1.41M]
  ------------------
   82|   286k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 106k, False: 179k]
  ------------------
   83|   286k|                        {
   84|  11.1k|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 11.1k, False: 274k]
  ------------------
   85|  31.8k|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 20.6k, False: 265k]
  ------------------
   86|  31.8k|                                return OpCode::SB;
   87|  57.0k|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 57.0k, False: 229k]
  ------------------
   88|  71.8k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 14.8k, False: 271k]
  ------------------
   89|  71.8k|                                return OpCode::SD;
   90|  19.0k|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 19.0k, False: 267k]
  ------------------
   91|  22.9k|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 3.88k, False: 282k]
  ------------------
   92|  22.9k|                                return OpCode::SF;
   93|  12.5k|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 12.5k, False: 273k]
  ------------------
   94|  37.2k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 24.7k, False: 261k]
  ------------------
   95|  37.2k|                                return OpCode::SH;
   96|  9.29k|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 9.29k, False: 276k]
  ------------------
   97|  15.3k|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 6.03k, False: 280k]
  ------------------
   98|  15.3k|                                return OpCode::SW;
   99|   286k|                        }
  100|   106k|                        break;
  101|  1.56M|                }
  102|  1.21M|                break;
  103|  1.56M|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|  2.29M|            case 3: {
  ------------------
  |  Branch (106:13): [True: 2.29M, False: 8.39M]
  ------------------
  107|  2.29M|                const char c1 = token[0u];
  108|  2.29M|                const char c2 = token[1u];
  109|  2.29M|                const char c3 = token[2u];
  110|       |
  111|  2.29M|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 668k, False: 1.62M]
  ------------------
  112|  2.29M|                {
  113|  84.0k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 84.0k, False: 2.21M]
  ------------------
  114|   109k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 25.7k, False: 2.27M]
  ------------------
  115|   109k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 41.2k, False: 68.5k]
  |  Branch (115:29): [True: 26.1k, False: 83.6k]
  |  Branch (115:45): [True: 26.1k, False: 15.1k]
  ------------------
  116|  26.1k|                        {
  117|  26.1k|                            return OpCode::ADD;
  118|  26.1k|                        }
  119|  83.6k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 30.1k, False: 53.5k]
  |  Branch (119:34): [True: 21.9k, False: 61.7k]
  |  Branch (119:50): [True: 21.9k, False: 8.21k]
  ------------------
  120|  21.9k|                        {
  121|  21.9k|                            return OpCode::AND;
  122|  21.9k|                        }
  123|  61.7k|                        break;
  124|       |
  125|  61.7k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 21.2k, False: 2.27M]
  ------------------
  126|  50.3k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 29.0k, False: 2.26M]
  ------------------
  127|  50.3k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 34.5k, False: 15.8k]
  |  Branch (127:29): [True: 17.9k, False: 32.3k]
  |  Branch (127:45): [True: 17.9k, False: 16.5k]
  ------------------
  128|  17.9k|                        {
  129|  17.9k|                            return OpCode::DIV;
  130|  17.9k|                        }
  131|  32.3k|                        break;
  132|       |
  133|  39.5k|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 39.5k, False: 2.25M]
  ------------------
  134|  95.2k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 55.7k, False: 2.24M]
  ------------------
  135|  95.2k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 65.7k, False: 29.4k]
  ------------------
  136|  65.7k|                        {
  137|  65.7k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 22.0k, False: 43.6k]
  ------------------
  138|  22.0k|                            {
  139|  22.0k|                                return OpCode::EQD;
  140|  22.0k|                            }
  141|  43.6k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 38.5k, False: 5.17k]
  ------------------
  142|  38.5k|                            {
  143|  38.5k|                                return OpCode::EQF;
  144|  38.5k|                            }
  145|  65.7k|                        }
  146|  34.6k|                        break;
  147|       |
  148|  70.0k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 70.0k, False: 2.22M]
  ------------------
  149|   156k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 86.4k, False: 2.20M]
  ------------------
  150|   156k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 66.1k, False: 90.2k]
  ------------------
  151|  66.1k|                        {
  152|  66.1k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 30.7k, False: 35.4k]
  ------------------
  153|  30.7k|                            {
  154|  30.7k|                                return OpCode::GED;
  155|  30.7k|                            }
  156|  35.4k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 30.5k, False: 4.93k]
  ------------------
  157|  30.5k|                            {
  158|  30.5k|                                return OpCode::GEF;
  159|  30.5k|                            }
  160|  66.1k|                        }
  161|  90.2k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 73.7k, False: 16.4k]
  ------------------
  162|  73.7k|                        {
  163|  73.7k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 12.2k, False: 61.5k]
  ------------------
  164|  12.2k|                            {
  165|  12.2k|                                return OpCode::GTD;
  166|  12.2k|                            }
  167|  61.5k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 36.7k, False: 24.8k]
  ------------------
  168|  36.7k|                            {
  169|  36.7k|                                return OpCode::GTF;
  170|  36.7k|                            }
  171|  61.5k|                        }
  172|  46.2k|                        break;
  173|       |
  174|  97.2k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 97.2k, False: 2.19M]
  ------------------
  175|   129k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 31.9k, False: 2.26M]
  ------------------
  176|   129k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 64.7k, False: 64.3k]
  |  Branch (176:29): [True: 28.5k, False: 100k]
  |  Branch (176:45): [True: 28.5k, False: 36.1k]
  ------------------
  177|  28.5k|                        {
  178|  28.5k|                            return OpCode::JAL;
  179|  28.5k|                        }
  180|   100k|                        break;
  181|       |
  182|   259k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 259k, False: 2.03M]
  ------------------
  183|   349k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 89.6k, False: 2.20M]
  ------------------
  184|   349k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 38.3k, False: 310k]
  ------------------
  185|   349k|                        {
  186|  7.57k|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 7.57k, False: 341k]
  ------------------
  187|  32.8k|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 25.2k, False: 324k]
  ------------------
  188|  32.8k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 23.1k, False: 9.68k]
  ------------------
  189|  23.1k|                                {
  190|  23.1k|                                    return OpCode::LBU;
  191|  23.1k|                                }
  192|  9.68k|                                break;
  193|       |
  194|  49.3k|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 49.3k, False: 299k]
  ------------------
  195|  73.1k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 23.8k, False: 325k]
  ------------------
  196|  73.1k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 33.2k, False: 39.9k]
  ------------------
  197|  33.2k|                                {
  198|  33.2k|                                    return OpCode::LED;
  199|  33.2k|                                }
  200|  39.9k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 25.2k, False: 14.7k]
  ------------------
  201|  25.2k|                                {
  202|  25.2k|                                    return OpCode::LEF;
  203|  25.2k|                                }
  204|  14.7k|                                break;
  205|       |
  206|  41.2k|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 41.2k, False: 308k]
  ------------------
  207|  76.8k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 35.6k, False: 313k]
  ------------------
  208|  76.8k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 33.8k, False: 43.0k]
  ------------------
  209|  33.8k|                                {
  210|  33.8k|                                    return OpCode::LHI;
  211|  33.8k|                                }
  212|  43.0k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 20.0k, False: 22.9k]
  ------------------
  213|  20.0k|                                {
  214|  20.0k|                                    return OpCode::LHU;
  215|  20.0k|                                }
  216|  22.9k|                                break;
  217|       |
  218|  22.9k|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 19.5k, False: 329k]
  ------------------
  219|   101k|                            case 't':
  ------------------
  |  Branch (219:29): [True: 82.4k, False: 266k]
  ------------------
  220|   101k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 38.5k, False: 63.4k]
  ------------------
  221|  38.5k|                                {
  222|  38.5k|                                    return OpCode::LTD;
  223|  38.5k|                                }
  224|  63.4k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 42.0k, False: 21.3k]
  ------------------
  225|  42.0k|                                {
  226|  42.0k|                                    return OpCode::LTF;
  227|  42.0k|                                }
  228|  21.3k|                                break;
  229|       |
  230|  21.3k|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 6.21k, False: 343k]
  ------------------
  231|  26.0k|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 19.7k, False: 329k]
  ------------------
  232|  26.0k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 9.02k, False: 16.9k]
  ------------------
  233|  9.02k|                                {
  234|  9.02k|                                    return OpCode::LWU;
  235|  9.02k|                                }
  236|  16.9k|                                break;
  237|   349k|                        }
  238|   124k|                        break;
  239|       |
  240|   124k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 56.1k, False: 2.24M]
  ------------------
  241|  99.3k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 43.2k, False: 2.25M]
  ------------------
  242|  99.3k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 52.5k, False: 46.8k]
  ------------------
  243|  52.5k|                        {
  244|  52.5k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 20.1k, False: 32.4k]
  ------------------
  245|  20.1k|                            {
  246|  20.1k|                                return OpCode::NED;
  247|  20.1k|                            }
  248|  32.4k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 12.2k, False: 20.1k]
  ------------------
  249|  12.2k|                            {
  250|  12.2k|                                return OpCode::NEF;
  251|  12.2k|                            }
  252|  52.5k|                        }
  253|  46.8k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 33.2k, False: 13.5k]
  |  Branch (253:34): [True: 20.9k, False: 25.8k]
  |  Branch (253:50): [True: 20.9k, False: 12.3k]
  ------------------
  254|  20.9k|                        {
  255|  20.9k|                            return OpCode::NOP;
  256|  20.9k|                        }
  257|       |
  258|  46.0k|                        break;
  259|       |
  260|  46.0k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 20.9k, False: 2.27M]
  ------------------
  261|  44.0k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 23.0k, False: 2.27M]
  ------------------
  262|  44.0k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 19.4k, False: 24.5k]
  |  Branch (262:29): [True: 16.1k, False: 27.8k]
  |  Branch (262:45): [True: 16.1k, False: 3.24k]
  ------------------
  263|  16.1k|                        {
  264|  16.1k|                            return OpCode::ORI;
  265|  16.1k|                        }
  266|  27.8k|                        break;
  267|       |
  268|   345k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 345k, False: 1.95M]
  ------------------
  269|   531k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 185k, False: 2.11M]
  ------------------
  270|   531k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 53.9k, False: 477k]
  ------------------
  271|   531k|                        {
  272|  19.1k|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 19.1k, False: 511k]
  ------------------
  273|  57.2k|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 38.0k, False: 493k]
  ------------------
  274|  57.2k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 26.0k, False: 31.1k]
  ------------------
  275|  26.0k|                                {
  276|  26.0k|                                    return OpCode::SBU;
  277|  26.0k|                                }
  278|  31.1k|                                break;
  279|       |
  280|  31.1k|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 22.1k, False: 508k]
  ------------------
  281|  33.1k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 10.9k, False: 520k]
  ------------------
  282|  33.1k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 10.6k, False: 22.4k]
  ------------------
  283|  10.6k|                                {
  284|  10.6k|                                    return OpCode::SEQ;
  285|  10.6k|                                }
  286|  22.4k|                                break;
  287|       |
  288|  49.9k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 49.9k, False: 481k]
  ------------------
  289|  58.8k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 8.89k, False: 522k]
  ------------------
  290|  58.8k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 21.6k, False: 37.1k]
  ------------------
  291|  21.6k|                                {
  292|  21.6k|                                    return OpCode::SGE;
  293|  21.6k|                                }
  294|  37.1k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 23.2k, False: 13.9k]
  ------------------
  295|  23.2k|                                {
  296|  23.2k|                                    return OpCode::SGT;
  297|  23.2k|                                }
  298|  13.9k|                                break;
  299|       |
  300|  13.9k|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 8.10k, False: 523k]
  ------------------
  301|  24.5k|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 16.4k, False: 514k]
  ------------------
  302|  24.5k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 16.2k, False: 8.37k]
  ------------------
  303|  16.2k|                                {
  304|  16.2k|                                    return OpCode::SHU;
  305|  16.2k|                                }
  306|  8.37k|                                break;
  307|       |
  308|  62.7k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 62.7k, False: 468k]
  ------------------
  309|   119k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 56.7k, False: 474k]
  ------------------
  310|   119k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 24.7k, False: 94.7k]
  ------------------
  311|   119k|                                {
  312|  5.57k|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 5.57k, False: 113k]
  ------------------
  313|  12.4k|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 6.86k, False: 112k]
  ------------------
  314|  12.4k|                                        return OpCode::SLA;
  315|       |
  316|  22.2k|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 22.2k, False: 97.2k]
  ------------------
  317|  35.5k|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 13.3k, False: 106k]
  ------------------
  318|  35.5k|                                        return OpCode::SLE;
  319|       |
  320|  7.98k|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 7.98k, False: 111k]
  ------------------
  321|  29.0k|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 21.0k, False: 98.3k]
  ------------------
  322|  29.0k|                                        return OpCode::SLL;
  323|       |
  324|  7.70k|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 7.70k, False: 111k]
  ------------------
  325|  17.6k|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 9.97k, False: 109k]
  ------------------
  326|  17.6k|                                        return OpCode::SLT;
  327|   119k|                                }
  328|  24.7k|                                break;
  329|       |
  330|  24.7k|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 22.0k, False: 509k]
  ------------------
  331|  27.8k|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 5.75k, False: 525k]
  ------------------
  332|  27.8k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 21.3k, False: 6.44k]
  ------------------
  333|  21.3k|                                {
  334|  21.3k|                                    return OpCode::SNE;
  335|  21.3k|                                }
  336|  6.44k|                                break;
  337|       |
  338|  16.9k|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 16.9k, False: 514k]
  ------------------
  339|  95.7k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 78.7k, False: 452k]
  ------------------
  340|  95.7k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 32.4k, False: 63.2k]
  ------------------
  341|  32.4k|                                {
  342|  32.4k|                                    return OpCode::SRA;
  343|  32.4k|                                }
  344|  63.2k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 51.5k, False: 11.7k]
  ------------------
  345|  51.5k|                                {
  346|  51.5k|                                    return OpCode::SRL;
  347|  51.5k|                                }
  348|  11.7k|                                break;
  349|       |
  350|  17.6k|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 17.6k, False: 513k]
  ------------------
  351|  32.2k|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 14.5k, False: 516k]
  ------------------
  352|  32.2k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 19.0k, False: 13.2k]
  ------------------
  353|  19.0k|                                {
  354|  19.0k|                                    return OpCode::SUB;
  355|  19.0k|                                }
  356|  13.2k|                                break;
  357|       |
  358|  22.9k|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 22.9k, False: 508k]
  ------------------
  359|  28.1k|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 5.18k, False: 525k]
  ------------------
  360|  28.1k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 22.6k, False: 5.54k]
  ------------------
  361|  22.6k|                                {
  362|  22.6k|                                    return OpCode::SWU;
  363|  22.6k|                                }
  364|  5.54k|                                break;
  365|   531k|                        }
  366|       |
  367|   217k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 25.9k, False: 2.27M]
  ------------------
  368|   254k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 36.5k, False: 2.25M]
  ------------------
  369|   254k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 64.9k, False: 189k]
  |  Branch (369:29): [True: 36.4k, False: 217k]
  |  Branch (369:45): [True: 36.4k, False: 28.5k]
  ------------------
  370|  36.4k|                        {
  371|  36.4k|                            return OpCode::XOR;
  372|  36.4k|                        }
  373|   217k|                        break;
  374|  2.29M|                }
  375|  1.36M|                break;
  376|  2.29M|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  2.53M|            case 4: {
  ------------------
  |  Branch (379:13): [True: 2.53M, False: 8.15M]
  ------------------
  380|  2.53M|                const char c1 = token[0u];
  381|  2.53M|                const char c2 = token[1u];
  382|  2.53M|                const char c3 = token[2u];
  383|  2.53M|                const char c4 = token[3u];
  384|       |
  385|  2.53M|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 625k, False: 1.91M]
  ------------------
  386|  2.53M|                {
  387|   202k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 202k, False: 2.33M]
  ------------------
  388|   245k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 43.2k, False: 2.49M]
  ------------------
  389|   245k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 10.2k, False: 235k]
  ------------------
  390|   245k|                        {
  391|  88.1k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 88.1k, False: 157k]
  ------------------
  392|   170k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 82.3k, False: 163k]
  ------------------
  393|   170k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 151k, False: 18.7k]
  ------------------
  394|   151k|                                {
  395|   151k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 34.7k, False: 116k]
  ------------------
  396|   151k|                                    {
  397|  19.3k|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 19.3k, False: 132k]
  ------------------
  398|  32.7k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 13.4k, False: 138k]
  ------------------
  399|  32.7k|                                            return OpCode::ADDD;
  400|       |
  401|  5.62k|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 5.62k, False: 146k]
  ------------------
  402|  18.3k|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 12.7k, False: 139k]
  ------------------
  403|  18.3k|                                            return OpCode::ADDF;
  404|       |
  405|  7.84k|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 7.84k, False: 143k]
  ------------------
  406|  29.9k|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 22.1k, False: 129k]
  ------------------
  407|  29.9k|                                            return OpCode::ADDI;
  408|       |
  409|  12.9k|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 12.9k, False: 138k]
  ------------------
  410|  35.9k|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 22.9k, False: 128k]
  ------------------
  411|  35.9k|                                            return OpCode::ADDU;
  412|   151k|                                    }
  413|   151k|                                }
  414|  53.4k|                                break;
  415|       |
  416|  58.7k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 58.7k, False: 187k]
  ------------------
  417|  65.1k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 6.35k, False: 239k]
  ------------------
  418|  65.1k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 59.0k, False: 6.11k]
  |  Branch (418:37): [True: 36.2k, False: 28.8k]
  |  Branch (418:53): [True: 36.2k, False: 22.7k]
  ------------------
  419|  36.2k|                                {
  420|  36.2k|                                    return OpCode::ANDI;
  421|  36.2k|                                }
  422|       |
  423|  28.8k|                                break;
  424|   245k|                        }
  425|  92.5k|                        break;
  426|       |
  427|   170k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 170k, False: 2.36M]
  ------------------
  428|   193k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 22.3k, False: 2.51M]
  ------------------
  429|   193k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 27.2k, False: 165k]
  ------------------
  430|   193k|                        {
  431|  23.3k|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 23.3k, False: 169k]
  ------------------
  432|  58.4k|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 35.0k, False: 157k]
  ------------------
  433|  58.4k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 44.3k, False: 14.0k]
  |  Branch (433:37): [True: 34.3k, False: 24.0k]
  |  Branch (433:53): [True: 34.3k, False: 9.93k]
  ------------------
  434|  34.3k|                                {
  435|  34.3k|                                    return OpCode::BEQZ;
  436|  34.3k|                                }
  437|  24.0k|                                break;
  438|       |
  439|  52.8k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 52.8k, False: 140k]
  ------------------
  440|  58.8k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 6.04k, False: 186k]
  ------------------
  441|  58.8k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 52.0k, False: 6.84k]
  ------------------
  442|  52.0k|                                {
  443|  52.0k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 22.3k, False: 29.6k]
  ------------------
  444|  22.3k|                                    {
  445|  22.3k|                                        return OpCode::BFPF;
  446|  22.3k|                                    }
  447|  29.6k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 23.3k, False: 6.36k]
  ------------------
  448|  23.3k|                                    {
  449|  23.3k|                                        return OpCode::BFPT;
  450|  23.3k|                                    }
  451|  52.0k|                                }
  452|  13.2k|                                break;
  453|       |
  454|  18.2k|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 18.2k, False: 174k]
  ------------------
  455|  48.5k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 30.2k, False: 162k]
  ------------------
  456|  48.5k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 33.9k, False: 14.5k]
  |  Branch (456:37): [True: 22.3k, False: 26.2k]
  |  Branch (456:53): [True: 22.3k, False: 11.6k]
  ------------------
  457|  22.3k|                                {
  458|  22.3k|                                    return OpCode::BNEZ;
  459|  22.3k|                                }
  460|   193k|                        }
  461|  90.6k|                        break;
  462|       |
  463|  90.6k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 38.0k, False: 2.50M]
  ------------------
  464|   156k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 118k, False: 2.42M]
  ------------------
  465|   156k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 139k, False: 16.9k]
  |  Branch (465:29): [True: 124k, False: 31.9k]
  |  Branch (465:45): [True: 124k, False: 15.0k]
  ------------------
  466|   124k|                        {
  467|   124k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 17.8k, False: 106k]
  ------------------
  468|   124k|                            {
  469|  17.4k|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 17.4k, False: 107k]
  ------------------
  470|  26.8k|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 9.40k, False: 115k]
  ------------------
  471|  26.8k|                                    return OpCode::DIVD;
  472|       |
  473|  10.8k|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 10.8k, False: 113k]
  ------------------
  474|  17.7k|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 6.92k, False: 117k]
  ------------------
  475|  17.7k|                                    return OpCode::DIVF;
  476|       |
  477|  15.2k|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 15.2k, False: 109k]
  ------------------
  478|  30.7k|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 15.4k, False: 109k]
  ------------------
  479|  30.7k|                                    return OpCode::DIVI;
  480|       |
  481|  10.6k|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 10.6k, False: 113k]
  ------------------
  482|  31.4k|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 20.7k, False: 103k]
  ------------------
  483|  31.4k|                                    return OpCode::DIVU;
  484|   124k|                            }
  485|   124k|                        }
  486|  49.8k|                        break;
  487|       |
  488|  49.8k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 21.1k, False: 2.51M]
  ------------------
  489|  55.3k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 34.2k, False: 2.50M]
  ------------------
  490|  55.3k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 42.8k, False: 12.4k]
  |  Branch (490:29): [True: 25.2k, False: 30.0k]
  |  Branch (490:45): [True: 30.6k, False: 12.1k]
  |  Branch (490:61): [True: 25.2k, False: 5.44k]
  ------------------
  491|  25.2k|                        {
  492|  25.2k|                            return OpCode::HALT;
  493|  25.2k|                        }
  494|  30.0k|                        break;
  495|       |
  496|  68.4k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 68.4k, False: 2.47M]
  ------------------
  497|  96.7k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 28.2k, False: 2.51M]
  ------------------
  498|  96.7k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 66.7k, False: 29.9k]
  |  Branch (498:29): [True: 18.6k, False: 78.0k]
  |  Branch (498:45): [True: 48.9k, False: 17.8k]
  |  Branch (498:61): [True: 18.6k, False: 30.2k]
  ------------------
  499|  18.6k|                        {
  500|  18.6k|                            return OpCode::JALR;
  501|  18.6k|                        }
  502|  78.0k|                        break;
  503|       |
  504|  78.0k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 55.5k, False: 2.48M]
  ------------------
  505|   139k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 83.5k, False: 2.45M]
  ------------------
  506|   139k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 64.5k, False: 74.4k]
  |  Branch (506:29): [True: 49.5k, False: 89.4k]
  |  Branch (506:45): [True: 49.5k, False: 15.0k]
  ------------------
  507|  49.5k|                        {
  508|  49.5k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 13.4k, False: 36.1k]
  ------------------
  509|  13.4k|                            {
  510|  13.4k|                                return OpCode::MOVD;
  511|  13.4k|                            }
  512|  36.1k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 30.2k, False: 5.93k]
  ------------------
  513|  30.2k|                            {
  514|  30.2k|                                return OpCode::MOVF;
  515|  30.2k|                            }
  516|  49.5k|                        }
  517|  89.4k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 68.5k, False: 20.8k]
  |  Branch (517:34): [True: 36.1k, False: 53.2k]
  |  Branch (517:50): [True: 42.6k, False: 25.9k]
  |  Branch (517:66): [True: 36.1k, False: 6.48k]
  ------------------
  518|  36.1k|                        {
  519|  36.1k|                            return OpCode::MULT;
  520|  36.1k|                        }
  521|  59.2k|                        break;
  522|       |
  523|   648k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 648k, False: 1.89M]
  ------------------
  524|   870k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 222k, False: 2.31M]
  ------------------
  525|   870k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 37.8k, False: 832k]
  ------------------
  526|   870k|                        {
  527|  34.8k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 34.8k, False: 835k]
  ------------------
  528|  73.6k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 38.7k, False: 831k]
  ------------------
  529|  73.6k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 51.0k, False: 22.5k]
  ------------------
  530|  51.0k|                                {
  531|  51.0k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 21.0k, False: 29.9k]
  ------------------
  532|  21.0k|                                    {
  533|  21.0k|                                        return OpCode::SEQI;
  534|  21.0k|                                    }
  535|  29.9k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 22.7k, False: 7.26k]
  ------------------
  536|  22.7k|                                    {
  537|  22.7k|                                        return OpCode::SEQU;
  538|  22.7k|                                    }
  539|  51.0k|                                }
  540|  29.8k|                                break;
  541|       |
  542|   109k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 109k, False: 761k]
  ------------------
  543|   123k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 13.8k, False: 856k]
  ------------------
  544|   123k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 64.8k, False: 58.3k]
  ------------------
  545|  64.8k|                                {
  546|  64.8k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 22.6k, False: 42.2k]
  ------------------
  547|  22.6k|                                    {
  548|  22.6k|                                        return OpCode::SGEI;
  549|  22.6k|                                    }
  550|  42.2k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 24.7k, False: 17.5k]
  ------------------
  551|  24.7k|                                    {
  552|  24.7k|                                        return OpCode::SGEU;
  553|  24.7k|                                    }
  554|  64.8k|                                }
  555|  58.3k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 47.6k, False: 10.7k]
  ------------------
  556|  47.6k|                                {
  557|  47.6k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 21.2k, False: 26.3k]
  ------------------
  558|  21.2k|                                    {
  559|  21.2k|                                        return OpCode::SGTI;
  560|  21.2k|                                    }
  561|  26.3k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 15.4k, False: 10.8k]
  ------------------
  562|  15.4k|                                    {
  563|  15.4k|                                        return OpCode::SGTU;
  564|  15.4k|                                    }
  565|  47.6k|                                }
  566|  39.1k|                                break;
  567|       |
  568|   155k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 155k, False: 715k]
  ------------------
  569|   258k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 102k, False: 767k]
  ------------------
  570|   258k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 17.5k, False: 240k]
  ------------------
  571|   258k|                                {
  572|  30.3k|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 30.3k, False: 227k]
  ------------------
  573|  41.3k|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 10.9k, False: 247k]
  ------------------
  574|  41.3k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 30.1k, False: 11.1k]
  ------------------
  575|  30.1k|                                        {
  576|  30.1k|                                            return OpCode::SLAI;
  577|  30.1k|                                        }
  578|  11.1k|                                        break;
  579|       |
  580|  31.6k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 31.6k, False: 226k]
  ------------------
  581|  83.5k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 51.8k, False: 206k]
  ------------------
  582|  83.5k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 29.6k, False: 53.8k]
  ------------------
  583|  29.6k|                                        {
  584|  29.6k|                                            return OpCode::SLEI;
  585|  29.6k|                                        }
  586|  53.8k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 21.3k, False: 32.5k]
  ------------------
  587|  21.3k|                                        {
  588|  21.3k|                                            return OpCode::SLEU;
  589|  21.3k|                                        }
  590|  32.5k|                                        break;
  591|       |
  592|  32.5k|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 14.8k, False: 243k]
  ------------------
  593|  19.8k|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 4.95k, False: 253k]
  ------------------
  594|  19.8k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 12.5k, False: 7.22k]
  ------------------
  595|  12.5k|                                        {
  596|  12.5k|                                            return OpCode::SLLI;
  597|  12.5k|                                        }
  598|  7.22k|                                        break;
  599|       |
  600|  31.5k|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 31.5k, False: 226k]
  ------------------
  601|  95.9k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 64.4k, False: 193k]
  ------------------
  602|  95.9k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 34.0k, False: 61.9k]
  ------------------
  603|  34.0k|                                        {
  604|  34.0k|                                            return OpCode::SLTI;
  605|  34.0k|                                        }
  606|  61.9k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 34.6k, False: 27.2k]
  ------------------
  607|  34.6k|                                        {
  608|  34.6k|                                            return OpCode::SLTU;
  609|  34.6k|                                        }
  610|  27.2k|                                        break;
  611|   258k|                                }
  612|       |
  613|   167k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 71.3k, False: 799k]
  ------------------
  614|   187k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 20.6k, False: 850k]
  ------------------
  615|   187k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 118k, False: 69.1k]
  ------------------
  616|   118k|                                {
  617|   118k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 27.7k, False: 90.8k]
  ------------------
  618|  27.7k|                                    {
  619|  27.7k|                                        return OpCode::SNEI;
  620|  27.7k|                                    }
  621|  90.8k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 28.7k, False: 62.1k]
  ------------------
  622|  28.7k|                                    {
  623|  28.7k|                                        return OpCode::SNEU;
  624|  28.7k|                                    }
  625|   118k|                                }
  626|   131k|                                break;
  627|       |
  628|   131k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 34.4k, False: 836k]
  ------------------
  629|   111k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 77.0k, False: 793k]
  ------------------
  630|   111k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 41.4k, False: 70.1k]
  |  Branch (630:37): [True: 26.6k, False: 84.9k]
  |  Branch (630:53): [True: 26.6k, False: 14.8k]
  ------------------
  631|  26.6k|                                {
  632|  26.6k|                                    return OpCode::SRAI;
  633|  26.6k|                                }
  634|  84.9k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 62.4k, False: 22.4k]
  |  Branch (634:42): [True: 34.3k, False: 50.5k]
  |  Branch (634:58): [True: 34.3k, False: 28.1k]
  ------------------
  635|  34.3k|                                {
  636|  34.3k|                                    return OpCode::SRLI;
  637|  34.3k|                                }
  638|  50.5k|                                break;
  639|       |
  640|  81.0k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 81.0k, False: 789k]
  ------------------
  641|   174k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 93.2k, False: 777k]
  ------------------
  642|   174k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 156k, False: 17.8k]
  ------------------
  643|   156k|                                {
  644|   156k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 15.5k, False: 140k]
  ------------------
  645|   156k|                                    {
  646|  19.4k|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 19.4k, False: 136k]
  ------------------
  647|  37.2k|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 17.8k, False: 138k]
  ------------------
  648|  37.2k|                                            return OpCode::SUBD;
  649|       |
  650|  13.2k|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 13.2k, False: 143k]
  ------------------
  651|  30.9k|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 17.7k, False: 138k]
  ------------------
  652|  30.9k|                                            return OpCode::SUBF;
  653|       |
  654|  15.1k|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 15.1k, False: 141k]
  ------------------
  655|  32.6k|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 17.5k, False: 138k]
  ------------------
  656|  32.6k|                                            return OpCode::SUBI;
  657|       |
  658|  16.6k|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 16.6k, False: 139k]
  ------------------
  659|  39.9k|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 23.3k, False: 133k]
  ------------------
  660|  39.9k|                                            return OpCode::SUBU;
  661|   156k|                                    }
  662|   156k|                                }
  663|  33.4k|                                break;
  664|   870k|                        }
  665|   322k|                        break;
  666|       |
  667|   322k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 76.2k, False: 2.46M]
  ------------------
  668|  84.0k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 7.83k, False: 2.53M]
  ------------------
  669|  84.0k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 73.6k, False: 10.3k]
  |  Branch (669:29): [True: 22.4k, False: 61.6k]
  |  Branch (669:45): [True: 54.5k, False: 19.1k]
  |  Branch (669:61): [True: 22.4k, False: 32.1k]
  ------------------
  670|  22.4k|                        {
  671|  22.4k|                            return OpCode::TRAP;
  672|  22.4k|                        }
  673|  61.6k|                        break;
  674|  61.6k|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 53.6k, False: 2.48M]
  ------------------
  675|  72.7k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 19.0k, False: 2.52M]
  ------------------
  676|  72.7k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 53.1k, False: 19.5k]
  |  Branch (676:29): [True: 22.6k, False: 50.0k]
  |  Branch (676:45): [True: 37.5k, False: 15.5k]
  |  Branch (676:61): [True: 22.6k, False: 14.9k]
  ------------------
  677|  22.6k|                        {
  678|  22.6k|                            return OpCode::XORI;
  679|  22.6k|                        }
  680|  50.0k|                        break;
  681|  2.53M|                }
  682|  1.45M|                break;
  683|  2.53M|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|  1.46M|            case 5: {
  ------------------
  |  Branch (686:13): [True: 1.46M, False: 9.23M]
  ------------------
  687|  1.46M|                const char c1 = token[0u];
  688|  1.46M|                const char c2 = token[1u];
  689|  1.46M|                const char c3 = token[2u];
  690|  1.46M|                const char c4 = token[3u];
  691|  1.46M|                const char c5 = token[4u];
  692|       |
  693|  1.46M|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 420k, False: 1.04M]
  ------------------
  694|  1.46M|                {
  695|   101k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 101k, False: 1.36M]
  ------------------
  696|   133k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 32.0k, False: 1.43M]
  ------------------
  697|   133k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 117k, False: 16.0k]
  |  Branch (697:29): [True: 33.1k, False: 100k]
  |  Branch (697:45): [True: 98.4k, False: 19.0k]
  |  Branch (697:61): [True: 73.1k, False: 25.2k]
  |  Branch (697:77): [True: 33.1k, False: 40.0k]
  ------------------
  698|  33.1k|                        {
  699|  33.1k|                            return OpCode::ADDUI;
  700|  33.1k|                        }
  701|   100k|                        break;
  702|       |
  703|   100k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 33.7k, False: 1.43M]
  ------------------
  704|   137k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 103k, False: 1.36M]
  ------------------
  705|   137k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 117k, False: 19.7k]
  |  Branch (705:29): [True: 34.8k, False: 102k]
  |  Branch (705:45): [True: 102k, False: 15.1k]
  |  Branch (705:61): [True: 66.0k, False: 36.1k]
  |  Branch (705:77): [True: 34.8k, False: 31.2k]
  ------------------
  706|  34.8k|                        {
  707|  34.8k|                            return OpCode::DIVUI;
  708|  34.8k|                        }
  709|   102k|                        break;
  710|       |
  711|   115k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 115k, False: 1.34M]
  ------------------
  712|   200k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 84.6k, False: 1.37M]
  ------------------
  713|   200k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 162k, False: 37.5k]
  |  Branch (713:29): [True: 136k, False: 63.6k]
  |  Branch (713:45): [True: 147k, False: 15.2k]
  |  Branch (713:61): [True: 136k, False: 10.7k]
  ------------------
  714|   136k|                        {
  715|   136k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 16.7k, False: 119k]
  ------------------
  716|   136k|                            {
  717|  14.0k|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 14.0k, False: 122k]
  ------------------
  718|  25.0k|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 11.0k, False: 125k]
  ------------------
  719|  25.0k|                                    return OpCode::MULTD;
  720|       |
  721|  9.80k|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 9.80k, False: 126k]
  ------------------
  722|  19.4k|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 9.64k, False: 126k]
  ------------------
  723|  19.4k|                                    return OpCode::MULTF;
  724|       |
  725|  17.1k|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 17.1k, False: 119k]
  ------------------
  726|  31.8k|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 14.7k, False: 121k]
  ------------------
  727|  31.8k|                                    return OpCode::MULTI;
  728|       |
  729|  26.7k|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 26.7k, False: 109k]
  ------------------
  730|  43.4k|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 16.6k, False: 119k]
  ------------------
  731|  43.4k|                                    return OpCode::MULTU;
  732|   136k|                            }
  733|   136k|                        }
  734|  80.3k|                        break;
  735|       |
  736|   355k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 355k, False: 1.10M]
  ------------------
  737|   572k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 217k, False: 1.24M]
  ------------------
  738|   572k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 32.8k, False: 539k]
  ------------------
  739|   572k|                        {
  740|  36.2k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 36.2k, False: 536k]
  ------------------
  741|  68.8k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 32.6k, False: 539k]
  ------------------
  742|  68.8k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 54.3k, False: 14.5k]
  |  Branch (742:37): [True: 32.5k, False: 36.2k]
  |  Branch (742:53): [True: 49.3k, False: 4.97k]
  |  Branch (742:69): [True: 32.5k, False: 16.7k]
  ------------------
  743|  32.5k|                                {
  744|  32.5k|                                    return OpCode::SEQUI;
  745|  32.5k|                                }
  746|  36.2k|                                break;
  747|       |
  748|   100k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 100k, False: 472k]
  ------------------
  749|   106k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 6.69k, False: 565k]
  ------------------
  750|   106k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 44.2k, False: 62.5k]
  |  Branch (750:37): [True: 18.8k, False: 87.9k]
  |  Branch (750:53): [True: 34.1k, False: 10.0k]
  |  Branch (750:69): [True: 18.8k, False: 15.2k]
  ------------------
  751|  18.8k|                                {
  752|  18.8k|                                    return OpCode::SGEUI;
  753|  18.8k|                                }
  754|  87.9k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 58.2k, False: 29.6k]
  |  Branch (754:42): [True: 39.5k, False: 48.4k]
  |  Branch (754:58): [True: 47.9k, False: 10.3k]
  |  Branch (754:74): [True: 39.5k, False: 8.36k]
  ------------------
  755|  39.5k|                                {
  756|  39.5k|                                    return OpCode::SGTUI;
  757|  39.5k|                                }
  758|  48.4k|                                break;
  759|       |
  760|  87.2k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 87.2k, False: 485k]
  ------------------
  761|   141k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 54.2k, False: 518k]
  ------------------
  762|   141k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 50.1k, False: 91.2k]
  |  Branch (762:37): [True: 24.1k, False: 117k]
  |  Branch (762:53): [True: 39.4k, False: 10.7k]
  |  Branch (762:69): [True: 24.1k, False: 15.2k]
  ------------------
  763|  24.1k|                                {
  764|  24.1k|                                    return OpCode::SLEUI;
  765|  24.1k|                                }
  766|   117k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 70.8k, False: 46.4k]
  |  Branch (766:42): [True: 37.9k, False: 79.3k]
  |  Branch (766:58): [True: 54.6k, False: 16.1k]
  |  Branch (766:74): [True: 37.9k, False: 16.6k]
  ------------------
  767|  37.9k|                                {
  768|  37.9k|                                    return OpCode::SLTUI;
  769|  37.9k|                                }
  770|  79.3k|                                break;
  771|       |
  772|  79.3k|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 32.9k, False: 539k]
  ------------------
  773|  64.7k|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 31.7k, False: 540k]
  ------------------
  774|  64.7k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 58.2k, False: 6.46k]
  |  Branch (774:37): [True: 23.5k, False: 41.1k]
  |  Branch (774:53): [True: 36.3k, False: 21.9k]
  |  Branch (774:69): [True: 23.5k, False: 12.7k]
  ------------------
  775|  23.5k|                                {
  776|  23.5k|                                    return OpCode::SNEUI;
  777|  23.5k|                                }
  778|  41.1k|                                break;
  779|       |
  780|  45.9k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 45.9k, False: 526k]
  ------------------
  781|   157k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 111k, False: 460k]
  ------------------
  782|   157k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 140k, False: 16.9k]
  |  Branch (782:37): [True: 22.4k, False: 135k]
  |  Branch (782:53): [True: 55.3k, False: 85.4k]
  |  Branch (782:69): [True: 22.4k, False: 32.9k]
  ------------------
  783|  22.4k|                                {
  784|  22.4k|                                    return OpCode::SUBUI;
  785|  22.4k|                                }
  786|   135k|                                break;
  787|   572k|                        }
  788|       |
  789|   373k|                        break;
  790|  1.46M|                }
  791|       |
  792|  1.07M|                break;
  793|  1.46M|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|  1.07M|            case 6: {
  ------------------
  |  Branch (796:13): [True: 748k, False: 9.94M]
  ------------------
  797|   748k|                const char c1 = token[0u];
  798|   748k|                const char c2 = token[1u];
  799|   748k|                const char c3 = token[2u];
  800|   748k|                const char c4 = token[3u];
  801|   748k|                const char c5 = token[4u];
  802|   748k|                const char c6 = token[5u];
  803|       |
  804|   748k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 313k, False: 435k]
  |  Branch (804:21): [True: 283k, False: 465k]
  |  Branch (804:37): [True: 295k, False: 17.4k]
  |  Branch (804:53): [True: 283k, False: 12.5k]
  ------------------
  805|   283k|                {
  806|   283k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 11.9k, False: 271k]
  ------------------
  807|   283k|                    {
  808|  74.9k|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 74.9k, False: 208k]
  ------------------
  809|  96.7k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 21.7k, False: 261k]
  ------------------
  810|  96.7k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 74.5k, False: 22.2k]
  ------------------
  811|  74.5k|                            {
  812|  74.5k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 29.3k, False: 45.1k]
  ------------------
  813|  29.3k|                                {
  814|  29.3k|                                    return OpCode::CVTD2F;
  815|  29.3k|                                }
  816|  45.1k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 25.1k, False: 19.9k]
  ------------------
  817|  25.1k|                                {
  818|  25.1k|                                    return OpCode::CVTD2I;
  819|  25.1k|                                }
  820|  74.5k|                            }
  821|  42.1k|                            break;
  822|       |
  823|  62.1k|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 62.1k, False: 220k]
  ------------------
  824|  79.6k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 17.4k, False: 265k]
  ------------------
  825|  79.6k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 58.3k, False: 21.2k]
  ------------------
  826|  58.3k|                            {
  827|  58.3k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 19.7k, False: 38.5k]
  ------------------
  828|  19.7k|                                {
  829|  19.7k|                                    return OpCode::CVTF2D;
  830|  19.7k|                                }
  831|  38.5k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 23.5k, False: 15.0k]
  ------------------
  832|  23.5k|                                {
  833|  23.5k|                                    return OpCode::CVTF2I;
  834|  23.5k|                                }
  835|  58.3k|                            }
  836|  36.3k|                            break;
  837|       |
  838|  36.3k|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 12.8k, False: 270k]
  ------------------
  839|  94.8k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 81.9k, False: 201k]
  ------------------
  840|  94.8k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 70.6k, False: 24.1k]
  ------------------
  841|  70.6k|                            {
  842|  70.6k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 21.1k, False: 49.5k]
  ------------------
  843|  21.1k|                                {
  844|  21.1k|                                    return OpCode::CVTI2D;
  845|  21.1k|                                }
  846|  49.5k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 27.9k, False: 21.6k]
  ------------------
  847|  27.9k|                                {
  848|  27.9k|                                    return OpCode::CVTI2F;
  849|  27.9k|                                }
  850|  70.6k|                            }
  851|   283k|                    }
  852|   283k|                }
  853|   465k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 159k, False: 305k]
  |  Branch (853:26): [True: 22.6k, False: 442k]
  |  Branch (853:42): [True: 114k, False: 45.2k]
  |  Branch (853:58): [True: 103k, False: 11.3k]
  |  Branch (853:74): [True: 92.5k, False: 10.7k]
  ------------------
  854|   465k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 66.0k, False: 26.4k]
  |  Branch (854:42): [True: 22.6k, False: 43.4k]
  ------------------
  855|  22.6k|                {
  856|  22.6k|                    return OpCode::MULTUI;
  857|  22.6k|                }
  858|   579k|                break;
  859|   748k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|   579k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 385k, False: 10.3M]
  ------------------
  863|   385k|                const char c1 = token[0u];
  864|   385k|                const char c2 = token[1u];
  865|   385k|                const char c3 = token[2u];
  866|   385k|                const char c4 = token[3u];
  867|   385k|                const char c5 = token[4u];
  868|   385k|                const char c6 = token[5u];
  869|   385k|                const char c7 = token[6u];
  870|       |
  871|   385k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 173k, False: 211k]
  |  Branch (871:21): [True: 148k, False: 236k]
  |  Branch (871:37): [True: 154k, False: 19.5k]
  |  Branch (871:53): [True: 148k, False: 5.40k]
  ------------------
  872|   148k|                {
  873|   148k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 65.5k, False: 83.2k]
  |  Branch (873:25): [True: 26.1k, False: 122k]
  |  Branch (873:41): [True: 47.8k, False: 17.6k]
  |  Branch (873:54): [True: 38.8k, False: 9.01k]
  |  Branch (873:70): [True: 26.1k, False: 12.6k]
  ------------------
  874|  26.1k|                    {
  875|  26.1k|                        return OpCode::MOVI2FP;
  876|  26.1k|                    }
  877|   122k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 81.7k, False: 40.8k]
  |  Branch (877:25): [True: 32.1k, False: 90.3k]
  |  Branch (877:41): [True: 70.5k, False: 11.2k]
  |  Branch (877:57): [True: 50.4k, False: 20.0k]
  |  Branch (877:70): [True: 32.1k, False: 18.2k]
  ------------------
  878|  32.1k|                    {
  879|  32.1k|                        return OpCode::MOVFP2I;
  880|  32.1k|                    }
  881|   122k|                }
  882|   326k|                break;
  883|   385k|            }
  884|       |
  885|   326k|            default: {
  ------------------
  |  Branch (885:13): [True: 276k, False: 10.4M]
  ------------------
  886|   276k|                break;
  887|   385k|            }
  888|  10.6M|        }
  889|       |
  890|       |        // None found
  891|  7.32M|        return OpCode::NONE;
  892|  10.6M|    }
_ZN3dlx3iceEcc:
   17|  15.0M|    {
   18|  15.0M|        constexpr const char diff = 'a' - 'A';
   19|  15.0M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 4.58M, False: 10.4M]
  |  Branch (19:28): [True: 4.20M, False: 6.25M]
  ------------------
   20|  15.0M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  10.4M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|   153k|    {
  195|   153k|        ParseError err;
  196|       |
  197|   153k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|   153k|        err.m_LineNumber                           = line_number;
  199|   153k|        err.m_Column                               = column;
  200|   153k|        err.unexpected_argument_type.expected_type = expected_type;
  201|   153k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|   153k|        return err;
  204|   153k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|   153k|    {
  209|   153k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|   153k|                                                         token.GetColumn().unsafe(), expected_type,
  211|   153k|                                                         actual_type);
  212|   153k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|  10.7k|    {
  218|  10.7k|        ParseError err;
  219|       |
  220|  10.7k|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|  10.7k|        err.m_LineNumber        = line_number;
  222|  10.7k|        err.m_Column            = column;
  223|  10.7k|        err.invalid_number.text = text;
  224|       |
  225|  10.7k|        return err;
  226|  10.7k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|  10.7k|    {
  230|  10.7k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|  10.7k|                                                token.GetColumn().unsafe(), token.GetText());
  232|  10.7k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|     53|    {
  237|     53|        ParseError err;
  238|       |
  239|     53|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|     53|        err.m_LineNumber = line_number;
  241|     53|        err.m_Column     = column;
  242|       |
  243|     53|        return err;
  244|     53|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|     53|    {
  249|     53|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|     53|                                                                     token.GetColumn().unsafe());
  251|     53|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  4.17M|    {
  257|  4.17M|        ParseError err;
  258|       |
  259|  4.17M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  4.17M|        err.m_LineNumber                   = line_number;
  261|  4.17M|        err.m_Column                       = column;
  262|  4.17M|        err.unexpected_token.expected_type = expected_type;
  263|  4.17M|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  4.17M|        return err;
  266|  4.17M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  4.17M|    {
  271|  4.17M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  4.17M|                                                  token.GetColumn().unsafe(), expected_type,
  273|  4.17M|                                                  token.GetType());
  274|  4.17M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|  1.26M|    {
  279|  1.26M|        ParseError err;
  280|       |
  281|  1.26M|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|  1.26M|        err.m_LineNumber                   = line_number;
  283|  1.26M|        err.m_Column                       = column;
  284|  1.26M|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|  1.26M|        return err;
  287|  1.26M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|  17.6k|    {
  291|  17.6k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|  17.6k|                                                    token.GetColumn().unsafe(), token.GetText());
  293|  17.6k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  2.05M|    {
  298|  2.05M|        ParseError err;
  299|       |
  300|  2.05M|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  2.05M|        err.m_LineNumber                       = line_number;
  302|  2.05M|        err.m_Column                           = column;
  303|  2.05M|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  2.05M|        return err;
  306|  2.05M|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  2.05M|    {
  311|  2.05M|        return ConstructInvalidLabelIdentifierParseError(
  312|  2.05M|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  2.05M|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|   702k|    {
  319|   702k|        ParseError err;
  320|       |
  321|   702k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|   702k|        err.m_LineNumber                     = line_number;
  323|   702k|        err.m_Column                         = column;
  324|   702k|        err.label_already_defined.label_name = label_name;
  325|   702k|        err.label_already_defined.at_line    = at_line;
  326|   702k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|   702k|        return err;
  329|   702k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|   702k|    {
  334|   702k|        return ConstructLabelAlreadyDefinedParseError(
  335|   702k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|   702k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|   702k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|  1.26M|    {
  342|  1.26M|        ParseError err;
  343|       |
  344|  1.26M|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|  1.26M|        err.m_LineNumber = line_number;
  346|  1.26M|        err.m_Column     = column;
  347|       |
  348|  1.26M|        return err;
  349|  1.26M|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|  1.26M|    {
  354|  1.26M|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|  1.26M|                                                        token.GetColumn().unsafe());
  356|  1.26M|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|   295k|    {
  362|   295k|        ParseError err;
  363|       |
  364|   295k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|   295k|        err.m_LineNumber               = line_number;
  366|   295k|        err.m_Column                   = column;
  367|   295k|        err.too_few_arguments.required = required;
  368|   295k|        err.too_few_arguments.provided = provided;
  369|       |
  370|   295k|        return err;
  371|   295k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|   295k|    {
  376|   295k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|   295k|                                                  token.GetColumn().unsafe(), required, provided);
  378|   295k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|   341k|    {
  383|   341k|        ParseError err;
  384|       |
  385|   341k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|   341k|        err.m_LineNumber           = line_number;
  387|   341k|        err.m_Column               = column;
  388|   341k|        err.empty_label.label_name = label_name;
  389|       |
  390|   341k|        return err;
  391|   341k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|   341k|    {
  395|   341k|        return ConstructEmptyLabelParseError(
  396|   341k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|   341k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 295k, False: 45.7k]
  ------------------
  398|   295k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|   341k|                        token.GetText());
  400|   341k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|   183k|    {
  405|   183k|        ParseError err;
  406|       |
  407|   183k|        err.m_Type       = ParseError::Type::TooManyComma;
  408|   183k|        err.m_LineNumber = line_number;
  409|   183k|        err.m_Column     = column;
  410|       |
  411|   183k|        return err;
  412|   183k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|   183k|    {
  416|   183k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|   183k|                                               token.GetColumn().unsafe());
  418|   183k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  10.4M|    {
   19|  10.4M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  10.4M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  74.2k|    {
  181|  74.2k|        ParsedProgram program;
  182|       |
  183|  74.2k|        program.m_Tokens = tokens;
  184|       |
  185|  74.2k|        phi::boolean line_has_instruction{false};
  186|  74.2k|        phi::usize   label_count{0u};
  187|       |
  188|  12.3M|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 12.2M, False: 74.2k]
  ------------------
  189|  12.2M|        {
  190|  12.2M|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|  12.2M|            switch (current_token.GetType())
  195|  12.2M|            {
  196|       |                // Ignore comments
  197|  65.8k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 65.8k, False: 12.2M]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  65.8k|                    break;
  200|       |
  201|  1.78M|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 1.78M, False: 10.4M]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  1.78M|                    line_has_instruction = false;
  204|  1.78M|                    break;
  205|       |
  206|  4.99M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 4.99M, False: 7.27M]
  ------------------
  207|  4.99M|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 763k, False: 4.23M]
  ------------------
  208|   763k|                    {
  209|   763k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|   763k|                                current_token, Token::Type::NewLine));
  211|   763k|                        break;
  212|   763k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  4.23M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 1.23M, False: 2.99M]
  ------------------
  217|  1.23M|                    {
  218|  1.23M|                        program.AddParseError(
  219|  1.23M|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  1.23M|                        break;
  221|  1.23M|                    }
  222|       |
  223|  2.99M|                    phi::string_view label_name = current_token.GetText();
  224|  2.99M|                    label_name.remove_suffix(1u);
  225|       |
  226|  2.99M|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 1.24M, False: 1.75M]
  ------------------
  227|  1.24M|                    {
  228|  1.24M|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|  1.24M|                                current_token.GetLineNumber().unsafe(),
  230|  1.24M|                                current_token.GetColumn().unsafe(), label_name));
  231|  1.24M|                        break;
  232|  1.24M|                    }
  233|       |
  234|  1.75M|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 669k, False: 1.08M]
  ------------------
  235|   669k|                    {
  236|   669k|                        program.AddParseError(
  237|   669k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|   669k|                        break;
  239|   669k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  1.08M|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 702k, False: 380k]
  ------------------
  243|   702k|                    {
  244|       |                        // Find first defintions of label
  245|   702k|                        const Token* first_label_definition =
  246|   702k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   702k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|   702k|                                    {
  249|   702k|                                        phi::string_view token_label_name = t.GetText();
  250|   702k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   702k|                                        if (token_label_name == label_name)
  253|   702k|                                        {
  254|   702k|                                            return true;
  255|   702k|                                        }
  256|   702k|                                    }
  257|       |
  258|   702k|                                    return false;
  259|   702k|                                });
  260|       |
  261|   702k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|   702k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|   702k|                                current_token, *first_label_definition));
  265|   702k|                        break;
  266|   702k|                    }
  267|       |
  268|   380k|                    program.m_JumpData[label_name] =
  269|   380k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|   380k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|   380k|                    break;
  276|  1.08M|                }
  277|       |
  278|  2.17M|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 2.17M, False: 10.0M]
  ------------------
  279|  2.17M|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 1.26M, False: 916k]
  ------------------
  280|  1.26M|                    {
  281|  1.26M|                        program.AddParseError(
  282|  1.26M|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  1.26M|                        break;
  284|  1.26M|                    }
  285|       |
  286|   916k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|   916k|                    PHI_ASSERT(current_token.HasHint());
  290|   916k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|   916k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|   916k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|   916k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|   916k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|   916k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|   916k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|   916k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|   916k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  1.71M|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 1.59M, False: 118k]
  ------------------
  312|  1.59M|                    {
  313|       |                        // Get next token
  314|  1.59M|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 7.84k, False: 1.58M]
  ------------------
  315|  7.84k|                        {
  316|  7.84k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|  7.84k|                                    current_token, number_of_argument_required.unsafe(),
  318|  7.84k|                                    argument_num.unsafe()));
  319|  7.84k|                            break;
  320|  7.84k|                        }
  321|       |
  322|  1.58M|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  1.58M|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 596k, False: 989k]
  ------------------
  326|   596k|                        {
  327|   596k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 183k, False: 413k]
  ------------------
  328|   183k|                            {
  329|   183k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|   183k|                            }
  331|       |
  332|   596k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|   596k|                            continue;
  335|   596k|                        }
  336|       |
  337|   989k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 287k, False: 701k]
  ------------------
  338|   287k|                        {
  339|   287k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|   287k|                                    token, number_of_argument_required.unsafe(),
  341|   287k|                                    argument_num.unsafe()));
  342|   287k|                            break;
  343|   287k|                        }
  344|       |
  345|   701k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|   701k|                                parse_instruction_argument(
  347|   701k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|   701k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 502k, False: 199k]
  ------------------
  349|   502k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|   502k|                            break;
  352|   502k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|   199k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|   199k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|   199k|                        argument_num++;
  359|   199k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|   199k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|   916k|                    program.m_Instructions.emplace_back(instruction);
  367|   916k|                    line_has_instruction = true;
  368|   916k|                    break;
  369|  2.17M|                }
  370|       |
  371|  3.24M|                default:
  ------------------
  |  Branch (371:17): [True: 3.24M, False: 9.03M]
  ------------------
  372|  3.24M|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  3.24M|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 1.66M, False: 1.57M]
  ------------------
  374|  1.66M|                    {
  375|  1.66M|                        expected_token_type = Token::Type::NewLine;
  376|  1.66M|                    }
  377|       |
  378|  3.24M|                    program.AddParseError(
  379|  3.24M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  3.24M|                    break;
  381|  12.2M|            }
  382|  12.2M|        }
  383|       |
  384|       |        // Check for empty labels
  385|  74.2k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 22.2k, False: 51.9k]
  ------------------
  386|  22.2k|        {
  387|   449k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 426k, False: 22.2k]
  ------------------
  388|   426k|            {
  389|   426k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|   426k|                const Token& token = *it;
  392|   426k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 341k, False: 85.2k]
  ------------------
  393|   341k|                {
  394|   341k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|   341k|                    --label_count;
  396|   341k|                }
  397|   426k|            }
  398|  22.2k|        }
  399|       |
  400|  74.2k|        return program;
  401|  74.2k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  74.2k|    {
  405|  74.2k|        TokenStream tokens = Tokenize(source);
  406|  74.2k|        return Parse(tokens);
  407|  74.2k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|   701k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|   701k|        switch (token.GetType())
   37|   701k|        {
   38|  90.1k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 90.1k, False: 611k]
  ------------------
   39|  90.1k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 47.3k, False: 42.8k]
  ------------------
   40|  90.1k|                                          ArgumentType::AddressDisplacement))
   41|  47.3k|                {
   42|  47.3k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|  47.3k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|  47.3k|                    return {};
   46|  47.3k|                }
   47|       |
   48|       |                // Get address displacement
   49|  42.8k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  42.8k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  42.8k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 53, False: 42.7k]
  ------------------
   54|     53|                {
   55|     53|                    program.AddParseError(
   56|     53|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|     53|                    return {};
   58|     53|                }
   59|       |
   60|  42.7k|                auto         it           = tokens.current_position();
   61|  42.7k|                const Token& first_token  = tokens.consume();
   62|  42.7k|                const Token& second_token = tokens.consume();
   63|  42.7k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  42.7k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 15.4k, False: 27.2k]
  ------------------
   66|  15.4k|                {
   67|  15.4k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|  15.4k|                            first_token, Token::Type::OpenBracket));
   69|  15.4k|                    return {};
   70|  15.4k|                }
   71|       |
   72|       |                // Second token is the register
   73|  27.2k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 7.43k, False: 19.8k]
  ------------------
   74|  7.43k|                {
   75|  7.43k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|  7.43k|                            second_token, Token::Type::RegisterInt));
   77|  7.43k|                    return {};
   78|  7.43k|                }
   79|       |
   80|  19.8k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 9.16k, False: 10.6k]
  ------------------
   81|  9.16k|                {
   82|  9.16k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|  9.16k|                            third_token, Token::Type::ClosingBracket));
   84|  9.16k|                    return {};
   85|  9.16k|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|  10.6k|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|  10.6k|                return ConstructInstructionArgumentAddressDisplacement(
   94|  10.6k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|  19.8k|            }
   96|  75.9k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 75.9k, False: 625k]
  ------------------
   97|  75.9k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 6.00k, False: 69.9k]
  ------------------
   98|  6.00k|                {
   99|  6.00k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|  6.00k|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|  6.00k|                    return {};
  102|  6.00k|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  69.9k|                return ConstructInstructionArgumentRegisterInt(
  108|  69.9k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  75.9k|            }
  110|  40.0k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 40.0k, False: 661k]
  ------------------
  111|  40.0k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 17.4k, False: 22.5k]
  ------------------
  112|  17.4k|                {
  113|  17.4k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|  17.4k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|  17.4k|                    return {};
  116|  17.4k|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  22.5k|                return ConstructInstructionArgumentRegisterFloat(
  122|  22.5k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  40.0k|            }
  124|  17.6k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 17.6k, False: 684k]
  ------------------
  125|  17.6k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|  17.6k|                return {};
  128|  40.0k|            }
  129|   299k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 299k, False: 401k]
  ------------------
  130|       |                // Parse as Label
  131|   299k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 65.9k, False: 234k]
  ------------------
  132|  65.9k|                {
  133|  65.9k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  65.9k|                            token, expected_argument_type, ArgumentType::Label));
  135|  65.9k|                    return {};
  136|  65.9k|                }
  137|       |
  138|   234k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 234k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|   234k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 147k, False: 86.8k]
  ------------------
  145|   147k|                {
  146|   147k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|   147k|                    return {};
  148|   147k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  86.8k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|   234k|            }
  154|  36.9k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 36.9k, False: 664k]
  ------------------
  155|  36.9k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 17.0k, False: 19.9k]
  ------------------
  156|  17.0k|                {
  157|  17.0k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|  17.0k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|  17.0k|                    return {};
  160|  17.0k|                }
  161|       |
  162|  19.9k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 9.21k, False: 10.7k]
  ------------------
  163|  9.21k|                {
  164|  9.21k|                    return ConstructInstructionArgumentImmediateValue(
  165|  9.21k|                            static_cast<std::int16_t>(token.GetHint()));
  166|  9.21k|                }
  167|       |
  168|  10.7k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|  10.7k|                return {};
  170|  19.9k|            }
  171|       |
  172|   141k|            default:
  ------------------
  |  Branch (172:13): [True: 141k, False: 560k]
  ------------------
  173|   141k|                program.AddParseError(
  174|   141k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|   141k|                return {};
  176|   701k|        }
  177|   701k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  12.5M|                                tokens.find_first_token_if([&](const Token& t) {
  247|  12.5M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 8.85M, False: 3.69M]
  ------------------
  248|  8.85M|                                    {
  249|  8.85M|                                        phi::string_view token_label_name = t.GetText();
  250|  8.85M|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  8.85M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 702k, False: 8.14M]
  ------------------
  253|   702k|                                        {
  254|   702k|                                            return true;
  255|   702k|                                        }
  256|  8.85M|                                    }
  257|       |
  258|  11.8M|                                    return false;
  259|  12.5M|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    546|    {
  354|    546|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 546]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    546|        m_CurrentProgram = &program;
  361|       |
  362|    546|        m_ProgramCounter               = 0u;
  363|    546|        m_Halted                       = false;
  364|    546|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    546|        m_LastRaisedException          = Exception::None;
  366|    546|        m_CurrentStepCount             = 0u;
  367|       |
  368|    546|        return true;
  369|    546|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|  10.9M|    {
   13|  10.9M|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 1.75M, False: 9.23M]
  ------------------
   14|  1.75M|        {
   15|  1.75M|            const char first_char = token[0u];
   16|  1.75M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 77.1k, False: 1.67M]
  |  Branch (16:38): [True: 107k, False: 1.56M]
  ------------------
   17|   185k|            {
   18|   185k|                const char second_char = token[1u];
   19|   185k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 176k, False: 8.35k]
  |  Branch (19:43): [True: 135k, False: 41.1k]
  ------------------
   20|   135k|                {
   21|   135k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|   135k|                }
   23|   185k|            }
   24|  1.75M|        }
   25|  9.23M|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 2.40M, False: 6.83M]
  ------------------
   26|  2.40M|        {
   27|  2.40M|            const char first_char = token[0u];
   28|  2.40M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 133k, False: 2.26M]
  |  Branch (28:38): [True: 23.5k, False: 2.24M]
  ------------------
   29|   157k|            {
   30|   157k|                const char second_char = token[1u];
   31|   157k|                const char third_char  = token[2u];
   32|       |
   33|   157k|                switch (second_char)
   34|   157k|                {
   35|  31.6k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 31.6k, False: 125k]
  ------------------
   36|  31.6k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 17.5k, False: 14.0k]
  |  Branch (36:50): [True: 9.50k, False: 8.07k]
  ------------------
   37|  9.50k|                        {
   38|  9.50k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|  9.50k|                        }
   40|  22.1k|                        break;
   41|  31.6k|                    }
   42|  61.6k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 61.6k, False: 95.7k]
  ------------------
   43|  61.6k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 41.6k, False: 19.9k]
  |  Branch (43:50): [True: 26.0k, False: 15.5k]
  ------------------
   44|  26.0k|                        {
   45|  26.0k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|  26.0k|                        }
   47|  35.5k|                        break;
   48|  61.6k|                    }
   49|  35.5k|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 33.9k, False: 123k]
  ------------------
   50|  33.9k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 6.80k, False: 27.1k]
  |  Branch (50:50): [True: 14.3k, False: 12.7k]
  ------------------
   51|  21.1k|                        {
   52|  21.1k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|  21.1k|                        }
   54|  12.7k|                        break;
   55|  33.9k|                    }
   56|  30.1k|                    default: {
  ------------------
  |  Branch (56:21): [True: 30.1k, False: 127k]
  ------------------
   57|  30.1k|                        break;
   58|  33.9k|                    }
   59|   157k|                }
   60|   157k|            }
   61|  2.40M|        }
   62|       |
   63|  10.7M|        return IntRegisterID::None;
   64|  10.9M|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|  10.7M|    {
   68|  10.7M|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 1.61M, False: 9.18M]
  ------------------
   69|  1.61M|        {
   70|  1.61M|            const char first_char = token[0u];
   71|  1.61M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 50.1k, False: 1.56M]
  |  Branch (71:38): [True: 37.0k, False: 1.52M]
  ------------------
   72|  87.2k|            {
   73|  87.2k|                const char second_char = token[1u];
   74|  87.2k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 79.2k, False: 8.01k]
  |  Branch (74:43): [True: 53.7k, False: 25.4k]
  ------------------
   75|  53.7k|                {
   76|  53.7k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  53.7k|                }
   78|  87.2k|            }
   79|  1.61M|        }
   80|  9.18M|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 2.34M, False: 6.83M]
  ------------------
   81|  2.34M|        {
   82|  2.34M|            const char first_char = token[0u];
   83|  2.34M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 133k, False: 2.21M]
  |  Branch (83:38): [True: 41.0k, False: 2.17M]
  ------------------
   84|   174k|            {
   85|   174k|                const char second_char = token[1u];
   86|   174k|                const char third_char  = token[2u];
   87|       |
   88|   174k|                switch (second_char)
   89|   174k|                {
   90|  34.0k|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 34.0k, False: 140k]
  ------------------
   91|  34.0k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 27.4k, False: 6.56k]
  |  Branch (91:50): [True: 9.03k, False: 18.4k]
  ------------------
   92|  9.03k|                        {
   93|  9.03k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|  9.03k|                        }
   95|  24.9k|                        break;
   96|  34.0k|                    }
   97|  54.1k|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 54.1k, False: 120k]
  ------------------
   98|  54.1k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 19.3k, False: 34.7k]
  |  Branch (98:50): [True: 15.7k, False: 3.62k]
  ------------------
   99|  15.7k|                        {
  100|  15.7k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|  15.7k|                        }
  102|  38.4k|                        break;
  103|  54.1k|                    }
  104|  40.2k|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 40.2k, False: 134k]
  ------------------
  105|  40.2k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 20.2k, False: 19.9k]
  |  Branch (105:50): [True: 3.37k, False: 16.6k]
  ------------------
  106|  23.6k|                        {
  107|  23.6k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|  23.6k|                        }
  109|  16.6k|                        break;
  110|  40.2k|                    }
  111|  46.1k|                    default: {
  ------------------
  |  Branch (111:21): [True: 46.1k, False: 128k]
  ------------------
  112|  46.1k|                        break;
  113|  40.2k|                    }
  114|   174k|                }
  115|   174k|            }
  116|  2.34M|        }
  117|       |
  118|  10.6M|        return FloatRegisterID::None;
  119|  10.7M|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|  9.78M|    {
  123|  9.78M|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 2.12M, False: 7.66M]
  ------------------
  124|  2.12M|        {
  125|  2.12M|            const char c1 = token[0u];
  126|  2.12M|            const char c2 = token[1u];
  127|  2.12M|            const char c3 = token[2u];
  128|  2.12M|            const char c4 = token[3u];
  129|       |
  130|  2.12M|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 76.7k, False: 2.04M]
  |  Branch (130:34): [True: 39.6k, False: 2.00M]
  |  Branch (130:49): [True: 11.5k, False: 104k]
  |  Branch (130:62): [True: 66.5k, False: 38.2k]
  ------------------
  131|  2.12M|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 42.2k, False: 35.9k]
  |  Branch (131:34): [True: 23.9k, False: 12.0k]
  |  Branch (131:49): [True: 41.7k, False: 24.4k]
  |  Branch (131:62): [True: 83, False: 24.3k]
  ------------------
  132|  2.12M|        }
  133|       |
  134|  7.66M|        return false;
  135|  9.78M|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|  11.3M|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  2.62M|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  46.7M|    {
   41|  46.7M|        return m_Type;
   42|  46.7M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  35.8M|    {
   51|  35.8M|        return m_LineNumber;
   52|  35.8M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  68.1M|    {
   56|  68.1M|        return m_Column;
   57|  68.1M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  45.0M|    {
   61|  45.0M|        return m_Text.length();
   62|  45.0M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  20.3M|    {
   66|  20.3M|        return m_Text;
   67|  20.3M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   978k|    {
   80|   978k|        return m_HasHint;
   81|   978k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  1.07M|    {
   85|  1.07M|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  1.07M|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  1.07M|                   m_Type == Type::ImmediateInteger);
   88|  1.07M|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  1.07M|        return m_Hint;
   91|  1.07M|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  74.2k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  74.2k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  74.2k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  42.8k|    {
   51|  42.8k|        auto it = m_Iterator;
   52|   171k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 128k, False: 42.7k]
  ------------------
   53|   128k|        {
   54|   128k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 53, False: 128k]
  ------------------
   55|     53|            {
   56|     53|                return false;
   57|     53|            }
   58|   128k|        }
   59|       |
   60|  42.7k|        return true;
   61|  42.8k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  13.9M|    {
   65|  13.9M|        return m_Iterator != m_Tokens.end();
   66|  13.9M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  13.9M|    {
   70|  13.9M|        return m_Iterator == m_Tokens.end();
   71|  13.9M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  13.9M|    {
   85|  13.9M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  13.9M|        return *m_Iterator++;
   91|  13.9M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  42.7k|    {
  164|  42.7k|        return m_Iterator;
  165|  42.7k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  10.6k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  10.6k|        m_Iterator = it;
  179|  10.6k|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  74.2k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  74.2k|        return m_Tokens.begin();
  188|  74.2k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  74.2k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  74.2k|        return m_Tokens.end();
  206|  74.2k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  22.2k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  22.2k|        return m_Tokens.rbegin();
  224|  22.2k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|   426k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|   426k|        return m_Tokens.rend();
  233|   426k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  74.2k|    {
   66|  74.2k|        TokenStream tokens;
   67|       |
   68|  74.2k|        phi::string_view current_token;
   69|       |
   70|  74.2k|        phi::u64 current_line_number{1u};
   71|  74.2k|        phi::u64 current_column{1u};
   72|  74.2k|        phi::u64 token_begin{0u};
   73|       |
   74|  74.2k|        phi::boolean parsing_comment{false};
   75|       |
   76|  36.5M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 36.4M, False: 74.2k]
  ------------------
   77|  36.4M|        {
   78|  36.4M|            const char c{source.at(i)};
   79|       |
   80|  36.4M|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 2.08M, False: 34.3M]
  ------------------
   81|  2.08M|            {
   82|  2.08M|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 598k, False: 1.48M]
  ------------------
   83|   598k|                {
   84|       |                    // Skip empty lines
   85|   598k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|   598k|                                        current_line_number, current_column);
   87|       |
   88|   598k|                    parsing_comment = false;
   89|   598k|                    current_line_number += 1u;
   90|   598k|                    current_column = 1u;
   91|   598k|                    continue;
   92|   598k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  1.48M|                tokens.emplace_back(ParseToken(
   96|  1.48M|                        source.substring_view(
   97|  1.48M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  1.48M|                                current_token.length()),
   99|  1.48M|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  1.48M|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  1.48M|                                    current_line_number, current_column);
  103|       |
  104|  1.48M|                current_token   = phi::string_view{};
  105|  1.48M|                parsing_comment = false;
  106|  1.48M|                current_line_number += 1u;
  107|  1.48M|                current_column = 0u;
  108|  1.48M|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|  34.3M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 57.1k, False: 34.3M]
  |  Branch (110:34): [True: 64.0k, False: 34.2M]
  ------------------
  111|   121k|            {
  112|   121k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 17.5k, False: 103k]
  ------------------
  113|  17.5k|                {
  114|  17.5k|                    token_begin = i;
  115|  17.5k|                }
  116|   103k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 92.1k, False: 11.4k]
  ------------------
  117|  92.1k|                {
  118|  92.1k|                    tokens.emplace_back(ParseToken(
  119|  92.1k|                            source.substring_view(
  120|  92.1k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  92.1k|                                    current_token.length()),
  122|  92.1k|                            current_line_number, current_column - current_token.length()));
  123|  92.1k|                    token_begin   = i;
  124|  92.1k|                    current_token = phi::string_view{};
  125|  92.1k|                }
  126|       |
  127|   121k|                parsing_comment = true;
  128|   121k|                current_token   = source.substring_view(
  129|   121k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|   121k|                        current_token.length() + 1u);
  131|   121k|            }
  132|  34.2M|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 196k, False: 34.0M]
  ------------------
  133|   196k|            {
  134|       |                // simply append the character
  135|   196k|                current_token = source.substring_view(
  136|   196k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|   196k|                        current_token.length() + 1u);
  138|   196k|            }
  139|  34.0M|            else
  140|  34.0M|            {
  141|       |                // Not parsing a comment
  142|  34.0M|                switch (c)
  143|  34.0M|                {
  144|   496k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 496k, False: 33.5M]
  ------------------
  145|  1.18M|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 692k, False: 33.3M]
  ------------------
  146|  1.18M|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 0, False: 34.0M]
  ------------------
  147|  1.18M|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 241k, False: 947k]
  ------------------
  148|   241k|                        {
  149|   241k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|   241k|                            continue;
  152|   241k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|   947k|                        tokens.emplace_back(ParseToken(
  156|   947k|                                source.substring_view(
  157|   947k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|   947k|                                        current_token.length()),
  159|   947k|                                current_line_number, current_column - current_token.length()));
  160|   947k|                        current_token = phi::string_view{};
  161|   947k|                        break;
  162|  3.91M|                    case ':':
  ------------------
  |  Branch (162:21): [True: 3.91M, False: 30.1M]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  3.91M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 3.28M, False: 638k]
  ------------------
  165|  3.28M|                        {
  166|  3.28M|                            current_token = source.substring_view(
  167|  3.28M|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  3.28M|                                    current_token.length() + 1u);
  169|  3.28M|                            tokens.emplace_back(ParseToken(
  170|  3.28M|                                    source.substring_view(
  171|  3.28M|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  3.28M|                                                    token_begin),
  173|  3.28M|                                            current_token.length()),
  174|  3.28M|                                    current_line_number,
  175|  3.28M|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  3.28M|                            current_token = phi::string_view{};
  178|  3.28M|                        }
  179|   638k|                        else
  180|   638k|                        {
  181|       |                            // Orphan colon
  182|   638k|                            token_begin = i;
  183|       |
  184|   638k|                            tokens.emplace_back(
  185|   638k|                                    Token::Type::Colon,
  186|   638k|                                    source.substring_view(
  187|   638k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|   638k|                                                    token_begin),
  189|   638k|                                            1u),
  190|   638k|                                    current_line_number, current_column);
  191|   638k|                        }
  192|  3.91M|                        break;
  193|  2.27M|                    case ',':
  ------------------
  |  Branch (193:21): [True: 2.27M, False: 31.7M]
  ------------------
  194|  2.67M|                    case '(':
  ------------------
  |  Branch (194:21): [True: 397k, False: 33.6M]
  ------------------
  195|  3.13M|                    case ')':
  ------------------
  |  Branch (195:21): [True: 462k, False: 33.6M]
  ------------------
  196|  3.13M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 2.27M, False: 854k]
  ------------------
  197|  2.27M|                        {
  198|  2.27M|                            tokens.emplace_back(ParseToken(
  199|  2.27M|                                    source.substring_view(
  200|  2.27M|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  2.27M|                                                    token_begin),
  202|  2.27M|                                            current_token.length()),
  203|  2.27M|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  2.27M|                            current_token = phi::string_view{};
  206|  2.27M|                        }
  207|       |
  208|  3.13M|                        Token::Type type;
  209|  3.13M|                        switch (c)
  210|  3.13M|                        {
  211|  2.27M|                            case ',':
  ------------------
  |  Branch (211:29): [True: 2.27M, False: 859k]
  ------------------
  212|  2.27M|                                type = Token::Type::Comma;
  213|  2.27M|                                break;
  214|   397k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 397k, False: 2.73M]
  ------------------
  215|   397k|                                type = Token::Type::OpenBracket;
  216|   397k|                                break;
  217|   462k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 462k, False: 2.67M]
  ------------------
  218|   462k|                                type = Token::Type::ClosingBracket;
  219|   462k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 3.13M]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  3.13M|#endif
  225|  3.13M|                        }
  226|       |
  227|  3.13M|                        token_begin = i;
  228|       |
  229|  3.13M|                        tokens.emplace_back(
  230|  3.13M|                                type,
  231|  3.13M|                                source.substring_view(
  232|  3.13M|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  3.13M|                                        1u),
  234|  3.13M|                                current_line_number, current_column);
  235|  3.13M|                        break;
  236|       |
  237|  25.8M|                    default:
  ------------------
  |  Branch (237:21): [True: 25.8M, False: 8.24M]
  ------------------
  238|  25.8M|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 8.02M, False: 17.7M]
  ------------------
  239|  8.02M|                        {
  240|  8.02M|                            token_begin = i;
  241|  8.02M|                        }
  242|       |
  243|       |                        // simply append the character
  244|  25.8M|                        current_token = source.substring_view(
  245|  25.8M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|  25.8M|                                current_token.length() + 1u);
  247|  34.0M|                }
  248|  34.0M|            }
  249|       |
  250|  35.6M|            current_column += 1u;
  251|  35.6M|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  74.2k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 53.8k, False: 20.4k]
  ------------------
  255|  53.8k|        {
  256|  53.8k|            tokens.emplace_back(
  257|  53.8k|                    ParseToken(source.substring_view(
  258|  53.8k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  53.8k|                                       current_token.length()),
  260|  53.8k|                               current_line_number, current_column - current_token.length()));
  261|  53.8k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  74.2k|        tokens.finalize();
  265|       |
  266|  74.2k|        return tokens;
  267|  74.2k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|  8.13M|    {
   14|  8.13M|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 75.6k, False: 8.06M]
  |  Branch (14:13): [True: 70.3k, False: 8.06M]
  |  Branch (14:36): [True: 70.3k, False: 5.25k]
  ------------------
   15|  70.3k|        {
   16|  70.3k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  70.3k|            if (number)
  ------------------
  |  Branch (18:17): [True: 12.7k, False: 57.6k]
  ------------------
   19|  12.7k|            {
   20|  12.7k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  12.7k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  12.7k|            }
   23|       |
   24|  57.6k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  70.3k|        }
   26|       |
   27|  8.06M|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 53.2k, False: 8.01M]
  |  Branch (27:13): [True: 109k, False: 7.95M]
  |  Branch (27:36): [True: 56.4k, False: 7.95M]
  ------------------
   28|   109k|        {
   29|   109k|            return {Token::Type::Comment, token, line_number, column};
   30|   109k|        }
   31|       |
   32|  7.95M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 172k, False: 7.78M]
  ------------------
   33|   172k|        {
   34|   172k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|   172k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|   172k|        }
   37|       |
   38|  7.78M|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 26.2k, False: 7.75M]
  ------------------
   39|  26.2k|        {
   40|  26.2k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  26.2k|        }
   42|       |
   43|  7.75M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 119k, False: 7.63M]
  ------------------
   44|   119k|        {
   45|   119k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|   119k|                    static_cast<phi::uint32_t>(id)};
   47|   119k|        }
   48|       |
   49|  7.63M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 92.2k, False: 7.54M]
  ------------------
   50|  92.2k|        {
   51|  92.2k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  92.2k|                    static_cast<phi::uint32_t>(id)};
   53|  92.2k|        }
   54|       |
   55|  7.54M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 2.22M, False: 5.32M]
  ------------------
   56|  2.22M|        {
   57|  2.22M|            return {Token::Type::OpCode, token, line_number, column,
   58|  2.22M|                    static_cast<phi::uint32_t>(opcode)};
   59|  2.22M|        }
   60|       |
   61|  5.32M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  7.54M|    }

_ZN6ImVec2C2Ev:
  262|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

LLVMFuzzerTestOneInput:
   10|  74.2k|{
   11|  74.2k|    static dlxemu::Emulator emu;
   12|       |
   13|  74.2k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   14|       |
   15|  74.2k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   16|       |
   17|       |    // Parse it
   18|  74.2k|    editor.SetText(std::string(source.data(), source.length().unsafe()));
   19|  74.2k|    editor.m_FullText = editor.GetText();
   20|       |
   21|  74.2k|    emu.ParseProgram(editor.m_FullText);
   22|       |
   23|  74.2k|    editor.ColorizeInternal();
   24|       |
   25|  74.2k|    return 0;
   26|  74.2k|}


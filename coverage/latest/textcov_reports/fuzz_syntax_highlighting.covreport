_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  194|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  199|  21.2k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  232|  4.24k|    {
  233|  4.24k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (233:13): [True: 1.03k, False: 3.21k]
  ------------------
  234|  1.03k|        {
  235|  1.03k|            return m_Line < other.m_Line;
  236|  1.03k|        }
  237|       |
  238|  3.21k|        return m_Column <= other.m_Column;
  239|  4.24k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  242|      1|    {
  243|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (243:13): [True: 0, False: 1]
  ------------------
  244|      0|        {
  245|      0|            return m_Line > other.m_Line;
  246|      0|        }
  247|       |
  248|      1|        return m_Column >= other.m_Column;
  249|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  256|   474k|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  284|      1|    {
  285|      1|        Colorize();
  286|      1|        m_Lines.emplace_back();
  287|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  290|      1|    {
  291|      1|        VerifyInternalState();
  292|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  340|  4.24k|    {
  341|  4.24k|        m_ErrorMarkers.clear();
  342|  4.24k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  405|  4.24k|    {
  406|  4.24k|        m_Breakpoints.clear();
  407|  4.24k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  485|  4.24k|    {
  486|  4.24k|        m_Lines.clear();
  487|  4.24k|        ResetState();
  488|  4.24k|        m_Lines.emplace_back();
  489|       |
  490|  4.24k|        for (const char character : text)
  ------------------
  |  Branch (490:35): [True: 515k, False: 4.24k]
  ------------------
  491|   515k|        {
  492|   515k|            if (character == '\r' ||
  ------------------
  |  Branch (492:17): [True: 260, False: 515k]
  |  Branch (492:17): [True: 16.6k, False: 499k]
  ------------------
  493|   515k|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (493:18): [True: 48.2k, False: 467k]
  |  Branch (493:48): [True: 23.8k, False: 24.4k]
  |  Branch (493:69): [True: 16.3k, False: 7.44k]
  ------------------
  494|  16.6k|            {
  495|       |                // ignore the carriage return character and control characters
  496|  16.6k|            }
  497|   499k|            else if (character == '\n')
  ------------------
  |  Branch (497:22): [True: 24.4k, False: 474k]
  ------------------
  498|  24.4k|            {
  499|  24.4k|                m_Lines.emplace_back();
  500|  24.4k|            }
  501|   474k|            else
  502|   474k|            {
  503|   474k|                m_Lines.back().emplace_back(static_cast<Char>(character), PaletteIndex::Default);
  504|   474k|            }
  505|   515k|        }
  506|       |
  507|  4.24k|        m_TextChanged = true;
  508|  4.24k|        m_ScrollToTop = true;
  509|       |
  510|  4.24k|        m_UndoBuffer.clear();
  511|  4.24k|        m_UndoIndex = 0u;
  512|       |
  513|  4.24k|        Colorize();
  514|  4.24k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  517|  4.24k|    {
  518|  4.24k|        const phi::u32 max_line = GetMaxLineNumber();
  519|       |
  520|  4.24k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  521|  4.24k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1484|      1|    {
 1485|       |        // Lines should never be empty
 1486|      1|        PHI_ASSERT(!m_Lines.empty());
 1487|       |
 1488|       |        // Verify Selection is still in a valid state
 1489|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1490|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1491|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1492|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1493|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1494|       |
 1495|       |        // Verify cursor position
 1496|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1497|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1498|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1499|       |
 1500|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1501|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1502|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1503|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1504|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1505|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1506|       |#endif
 1507|       |
 1508|       |        // Verify that all breakpoints are on existing lines
 1509|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1509:35): [True: 0, False: 1]
  ------------------
 1510|      0|        {
 1511|      0|            PHI_ASSERT(break_point != 0u);
 1512|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1513|      0|        }
 1514|       |
 1515|       |        // Verify that all error markers are on existing lines
 1516|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1516:34): [True: 0, False: 1]
  ------------------
 1517|      0|        {
 1518|      0|            const phi::u32 line_number = error_marker.first;
 1519|       |
 1520|      0|            PHI_ASSERT(line_number != 0u);
 1521|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1522|      0|        }
 1523|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1526|      1|    {
 1527|      1|        constexpr const static Palette palette = {{
 1528|      1|                0xff7f7f7f, // Default
 1529|      1|                0xffd69c56, // OpCode
 1530|      1|                0xff00ff00, // Register
 1531|      1|                0xff7070e0, // IntegerLiteral
 1532|      1|                0xff206020, // Comment
 1533|      1|                0xff101010, // Background
 1534|      1|                0xffe0e0e0, // Cursor
 1535|      1|                0x80a06020, // Selection
 1536|      1|                0x800020ff, // ErrorMarker
 1537|      1|                0x40f08000, // Breakpoint
 1538|      1|                0xff707000, // Line number
 1539|      1|                0x40000000, // Current line fill
 1540|      1|                0x40808080, // Current line fill (inactive)
 1541|      1|                0x40a0a0a0, // Current line edge
 1542|      1|        }};
 1543|       |
 1544|      1|        return palette;
 1545|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1710|  4.24k|    {
 1711|       |        // TODO: This is quite unreadable
 1712|  4.24k|        const phi::u32 to_line =
 1713|  4.24k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1713:17): [True: 4.24k, False: 0]
  ------------------
 1714|  4.24k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1715|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1716|       |
 1717|  4.24k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1718|  4.24k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1719|  4.24k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1720|  4.24k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1721|  4.24k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1826|  4.24k|    {
 1827|  4.24k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1828|  4.24k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1829|  4.24k|        PHI_ASSERT(start <= end);
 1830|       |
 1831|  4.24k|        std::string result;
 1832|       |
 1833|  4.24k|        phi::u32   lstart = start.m_Line;
 1834|  4.24k|        phi::u32   lend   = end.m_Line;
 1835|  4.24k|        phi::u32   istart = GetCharacterIndex(start);
 1836|  4.24k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1837|  4.24k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1838|  4.24k|        phi::usize size   = 0u;
 1839|       |
 1840|  32.9k|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1840:35): [True: 28.6k, False: 4.24k]
  ------------------
 1841|  28.6k|        {
 1842|  28.6k|            PHI_ASSERT(i < m_Lines.size());
 1843|  28.6k|            size += m_Lines[i.unsafe()].size();
 1844|  28.6k|        }
 1845|       |
 1846|  4.24k|        result.reserve((size + size / 8u).unsafe());
 1847|       |
 1848|   503k|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1848:16): [True: 421k, False: 81.6k]
  |  Branch (1848:16): [True: 499k, False: 4.24k]
  |  Branch (1848:33): [True: 77.4k, False: 4.24k]
  ------------------
 1849|   499k|        {
 1850|   499k|            PHI_ASSERT(lstart < m_Lines.size());
 1851|       |
 1852|   499k|            const Line& line = m_Lines[lstart.unsafe()];
 1853|   499k|            if (istart < line.size())
  ------------------
  |  Branch (1853:17): [True: 474k, False: 24.4k]
  ------------------
 1854|   474k|            {
 1855|   474k|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1856|   474k|                istart++;
 1857|   474k|            }
 1858|  24.4k|            else
 1859|  24.4k|            {
 1860|  24.4k|                istart = 0u;
 1861|  24.4k|                ++lstart;
 1862|       |
 1863|  24.4k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1863:21): [True: 24.4k, False: 0]
  ------------------
 1864|  24.4k|                {
 1865|  24.4k|                    result += '\n';
 1866|  24.4k|                }
 1867|  24.4k|            }
 1868|   499k|        }
 1869|       |
 1870|  4.24k|        return result;
 1871|  4.24k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2403|  8.48k|    {
 2404|  8.48k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2405|       |
 2406|  8.48k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2407|  8.48k|        phi::u32    index = 0u;
 2408|   322k|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2408:35): [True: 318k, False: 4.31k]
  |  Branch (2408:35): [True: 314k, False: 8.48k]
  |  Branch (2408:58): [True: 314k, False: 4.17k]
  ------------------
 2409|   314k|        {
 2410|   314k|            PHI_ASSERT(index < line.size());
 2411|   314k|            const Char character = line[index.unsafe()].m_Char;
 2412|       |
 2413|   314k|            if (character == '\t')
  ------------------
  |  Branch (2413:17): [True: 5.22k, False: 308k]
  ------------------
 2414|  5.22k|            {
 2415|  5.22k|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2416|  5.22k|            }
 2417|   308k|            else
 2418|   308k|            {
 2419|   308k|                ++column;
 2420|   308k|            }
 2421|       |
 2422|   314k|            index += UTF8CharLength(character);
 2423|   314k|        }
 2424|       |
 2425|  8.48k|        return index;
 2426|  8.48k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2473|  4.24k|    {
 2474|  4.24k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2474:13): [True: 0, False: 4.24k]
  ------------------
 2475|      0|        {
 2476|      0|            return 0u;
 2477|      0|        }
 2478|       |
 2479|  4.24k|        const Line& line = m_Lines[line_number.unsafe()];
 2480|  4.24k|        phi::u32    col  = 0u;
 2481|       |
 2482|   318k|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2482:32): [True: 314k, False: 4.24k]
  ------------------
 2483|   314k|        {
 2484|   314k|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2485|   314k|            if (character == '\t')
  ------------------
  |  Branch (2485:17): [True: 5.22k, False: 308k]
  ------------------
 2486|  5.22k|            {
 2487|  5.22k|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2488|  5.22k|            }
 2489|   308k|            else
 2490|   308k|            {
 2491|   308k|                col++;
 2492|   308k|            }
 2493|       |
 2494|   314k|            i += UTF8CharLength(character);
 2495|   314k|        }
 2496|       |
 2497|  4.24k|        return col;
 2498|  4.24k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2501|  4.24k|    {
 2502|  4.24k|        PHI_ASSERT(!m_Lines.empty());
 2503|       |
 2504|  4.24k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2505|  4.24k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3639|   172k|    {
 3640|   172k|        PaletteIndex palette_index{PaletteIndex::Default};
 3641|       |
 3642|       |        // Determine palette color
 3643|   172k|        switch (token.GetType())
 3644|   172k|        {
 3645|  1.10k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3645:13): [True: 1.10k, False: 171k]
  ------------------
 3646|  1.10k|                palette_index = PaletteIndex::Comment;
 3647|  1.10k|                break;
 3648|  1.08k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3648:13): [True: 1.08k, False: 171k]
  ------------------
 3649|  3.26k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3649:13): [True: 2.17k, False: 170k]
  ------------------
 3650|  3.26k|                palette_index = PaletteIndex::IntegerLiteral;
 3651|  3.26k|                break;
 3652|  39.7k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3652:13): [True: 39.7k, False: 132k]
  ------------------
 3653|  39.7k|                palette_index = PaletteIndex::OpCode;
 3654|  39.7k|                break;
 3655|  1.44k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3655:13): [True: 1.44k, False: 171k]
  ------------------
 3656|  2.97k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3656:13): [True: 1.53k, False: 171k]
  ------------------
 3657|  3.36k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3657:13): [True: 388, False: 172k]
  ------------------
 3658|  3.36k|                palette_index = PaletteIndex::Register;
 3659|  3.36k|                break;
 3660|  24.4k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3660:13): [True: 24.4k, False: 148k]
  ------------------
 3661|  24.4k|                return;
 3662|   100k|            default:
  ------------------
  |  Branch (3662:13): [True: 100k, False: 71.9k]
  ------------------
 3663|   100k|                break;
 3664|   172k|        }
 3665|       |
 3666|   148k|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3667|   148k|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3668|       |
 3669|   148k|        for (phi::u64 index{token.GetColumn() - 1u};
 3670|   610k|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3670:14): [True: 462k, False: 148k]
  ------------------
 3671|   462k|        {
 3672|   462k|            PHI_ASSERT(index < line.size());
 3673|   462k|            line[index.unsafe()].m_ColorIndex = palette_index;
 3674|   462k|        }
 3675|   148k|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3678|  4.24k|    {
 3679|  4.24k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3680|       |
 3681|  4.24k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3681:38): [True: 172k, False: 4.24k]
  ------------------
 3682|   172k|        {
 3683|   172k|            ColorizeToken(token);
 3684|   172k|        }
 3685|  4.24k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3688|  4.24k|    {
 3689|  4.24k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3690|  4.24k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3691|  4.24k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3692|       |
 3693|       |        // Clear breakpoints and markers
 3694|  4.24k|        ClearBreakPoints();
 3695|  4.24k|        ClearErrorMarkers();
 3696|  4.24k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  132|   314k|{
  133|   314k|    return UTF8CharLength(static_cast<char>(character));
  134|   314k|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  102|   628k|{
  103|   628k|    if ((character & 0xFE) == 0xFC)
  ------------------
  |  Branch (103:9): [True: 574, False: 627k]
  ------------------
  104|    574|    {
  105|    574|        return 6_u8;
  106|    574|    }
  107|       |
  108|   627k|    if ((character & 0xFC) == 0xF8)
  ------------------
  |  Branch (108:9): [True: 898, False: 626k]
  ------------------
  109|    898|    {
  110|    898|        return 5_u8;
  111|    898|    }
  112|       |
  113|   626k|    if ((character & 0xF8) == 0xF0)
  ------------------
  |  Branch (113:9): [True: 1.05k, False: 625k]
  ------------------
  114|  1.05k|    {
  115|  1.05k|        return 4_u8;
  116|  1.05k|    }
  117|       |
  118|   625k|    if ((character & 0xF0) == 0xE0)
  ------------------
  |  Branch (118:9): [True: 1.38k, False: 624k]
  ------------------
  119|  1.38k|    {
  120|  1.38k|        return 3_u8;
  121|  1.38k|    }
  122|       |
  123|   624k|    if ((character & 0xE0) == 0xC0)
  ------------------
  |  Branch (123:9): [True: 5.08k, False: 619k]
  ------------------
  124|  5.08k|    {
  125|  5.08k|        return 2_u8;
  126|  5.08k|    }
  127|       |
  128|   619k|    return 1_u8;
  129|   624k|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  183|  4.24k|    {
  184|  4.24k|        return m_DLXProgram;
  185|  4.24k|    }
_ZN6dlxemu8Emulator12ParseProgramEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  188|  4.24k|    {
  189|  4.24k|        m_DLXProgram = dlx::Parser::Parse(source);
  190|       |
  191|  4.24k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (191:13): [True: 212, False: 4.03k]
  ------------------
  192|    212|        {
  193|    212|            m_Processor.LoadProgram(m_DLXProgram);
  194|    212|        }
  195|  4.24k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  208|  4.24k|    {
  209|  4.24k|        return m_CodeEditor;
  210|  4.24k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   38|      1|    {
   39|      1|        Shutdown();
   40|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  108|      1|    {
  109|      1|        if (imgui_initialized)
  ------------------
  |  Branch (109:13): [True: 0, False: 1]
  ------------------
  110|      0|        {
  111|      0|            ShutdownImGui();
  112|      0|        }
  113|       |
  114|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (114:13): [True: 0, False: 1]
  ------------------
  115|      0|        {
  116|      0|            glfwDestroyWindow(m_Window);
  117|      0|        }
  118|       |
  119|      1|        if (glfw_initialized)
  ------------------
  |  Branch (119:13): [True: 0, False: 1]
  ------------------
  120|      0|        {
  121|      0|            glfwTerminate();
  122|      0|        }
  123|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  62.5k|        {
  173|  62.5k|            PHI_ASSERT(index < 3u);
  174|       |
  175|  62.5k|            switch (index.unsafe())
  176|  62.5k|            {
  177|  28.1k|                case 0:
  ------------------
  |  Branch (177:17): [True: 28.1k, False: 34.3k]
  ------------------
  178|  28.1k|                    return m_Arg1Type;
  179|       |
  180|  17.3k|                case 1:
  ------------------
  |  Branch (180:17): [True: 17.3k, False: 45.2k]
  ------------------
  181|  17.3k|                    return m_Arg2Type;
  182|       |
  183|  17.0k|                case 2:
  ------------------
  |  Branch (183:17): [True: 17.0k, False: 45.4k]
  ------------------
  184|  17.0k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 62.5k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  62.5k|#endif
  191|  62.5k|            }
  192|  62.5k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  16.7k|        {
  199|  16.7k|            phi::u8 number_of_argument_required = static_cast<phi::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  16.7k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 16.4k, False: 316]
  ------------------
  203|  16.4k|            {
  204|  16.4k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  205|  16.4k|            }
  206|  16.7k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 8.43k, False: 8.28k]
  ------------------
  207|  8.43k|            {
  208|  8.43k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  209|  8.43k|            }
  210|  16.7k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 4.31k, False: 12.4k]
  ------------------
  211|  4.31k|            {
  212|  4.31k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  213|  4.31k|            }
  214|       |
  215|  16.7k|            return number_of_argument_required;
  216|  16.7k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  16.7k|        {
  225|  16.7k|            return m_Executor;
  226|  16.7k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  9.53k|    {
   38|  9.53k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  9.53k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  9.53k|                                         static_cast<underlying_t>(rhs));
   42|  9.53k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  9.53k|    {
   55|  9.53k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  9.53k|        return static_cast<underlying_t>(type & test) != 0;
   58|  9.53k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  52.7k|    {
   31|  52.7k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 1.27k, False: 51.4k]
  ------------------
   32|  1.27k|        {
   33|  1.27k|            return true;
   34|  1.27k|        }
   35|       |
   36|  51.4k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 469, False: 50.9k]
  ------------------
   37|    469|        {
   38|    469|            return true;
   39|    469|        }
   40|       |
   41|  50.9k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 21.0k, False: 29.9k]
  ------------------
   42|  21.0k|        {
   43|  21.0k|            return true;
   44|  21.0k|        }
   45|       |
   46|  29.9k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 194, False: 29.7k]
  ------------------
   47|    194|        {
   48|    194|            return true;
   49|    194|        }
   50|       |
   51|  29.7k|        return false;
   52|  29.9k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  29.7k|    {
   56|  29.7k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 29.7k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  29.7k|        const char first_char = token.at(0u);
   62|       |
   63|  29.7k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 5.90k, False: 23.8k]
  ------------------
   64|  5.90k|        {
   65|  5.90k|            return phi::is_alpha(first_char);
   66|  5.90k|        }
   67|       |
   68|  23.8k|        phi::boolean just_under_scores = (first_char == '_');
   69|  23.8k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 2.46k, False: 21.3k]
  |  Branch (69:13): [True: 2.04k, False: 21.8k]
  |  Branch (69:43): [True: 2.04k, False: 420]
  ------------------
   70|  2.04k|        {
   71|  2.04k|            return false;
   72|  2.04k|        }
   73|       |
   74|  82.9k|        for (phi::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 68.1k, False: 14.8k]
  ------------------
   75|  68.1k|        {
   76|  68.1k|            const char c{token.at(index)};
   77|       |
   78|  68.1k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 60.4k, False: 7.70k]
  ------------------
   79|  60.4k|            {
   80|  60.4k|                just_under_scores = false;
   81|  60.4k|            }
   82|  7.70k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 727, False: 6.98k]
  ------------------
   83|    727|            {
   84|    727|                continue;
   85|    727|            }
   86|  6.98k|            else
   87|  6.98k|            {
   88|  6.98k|                return false;
   89|  6.98k|            }
   90|  68.1k|        }
   91|       |
   92|  14.8k|        return !just_under_scores;
   93|  21.8k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   98|   113k|    {
   99|   113k|        if (token.is_empty())
  ------------------
  |  Branch (99:13): [True: 0, False: 113k]
  ------------------
  100|      0|        {
  101|      0|            return {};
  102|      0|        }
  103|       |
  104|   113k|        if (token.length() == 1u)
  ------------------
  |  Branch (104:13): [True: 15.9k, False: 97.8k]
  ------------------
  105|  15.9k|        {
  106|  15.9k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (106:17): [True: 1.79k, False: 14.1k]
  ------------------
  107|  1.79k|            {
  108|  1.79k|                return static_cast<phi::int16_t>(token.at(0u) - '0');
  109|  1.79k|            }
  110|       |
  111|  14.1k|            return {};
  112|  15.9k|        }
  113|       |
  114|       |        // Disallow trailing separators
  115|  97.8k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (115:13): [True: 211, False: 97.6k]
  ------------------
  116|    211|        {
  117|    211|            return {};
  118|    211|        }
  119|       |
  120|  97.6k|        phi::int32_t number{0};
  121|  97.6k|        phi::boolean is_negative{false};
  122|  97.6k|        phi::boolean starts_with_zero{false};
  123|  97.6k|        phi::boolean parsing_binary{false};
  124|  97.6k|        phi::boolean parsing_octal{false};
  125|  97.6k|        phi::boolean parsing_hexadecimal{false};
  126|  97.6k|        phi::boolean parsed_something{false};
  127|  97.6k|        phi::boolean parsed_separator{false};
  128|       |
  129|       |        // TODO: Move x'th character checks out of the for loop
  130|       |
  131|   110k|        for (phi::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (131:37): [True: 109k, False: 1.43k]
  ------------------
  132|   109k|        {
  133|   109k|            const char c{token.at(index)};
  134|       |
  135|       |            // First character
  136|   109k|            if (index == 0u)
  ------------------
  |  Branch (136:17): [True: 97.6k, False: 11.5k]
  ------------------
  137|  97.6k|            {
  138|  97.6k|                if (c == '+')
  ------------------
  |  Branch (138:21): [True: 593, False: 97.0k]
  ------------------
  139|    593|                {
  140|    593|                    continue;
  141|    593|                }
  142|       |
  143|  97.0k|                if (c == '-')
  ------------------
  |  Branch (143:21): [True: 1.28k, False: 95.7k]
  ------------------
  144|  1.28k|                {
  145|  1.28k|                    is_negative = true;
  146|  1.28k|                    continue;
  147|  1.28k|                }
  148|       |
  149|  95.7k|                if (c == '0')
  ------------------
  |  Branch (149:21): [True: 1.79k, False: 93.9k]
  ------------------
  150|  1.79k|                {
  151|  1.79k|                    starts_with_zero = true;
  152|  1.79k|                    continue;
  153|  1.79k|                }
  154|       |
  155|  93.9k|                if (c == '\'')
  ------------------
  |  Branch (155:21): [True: 507, False: 93.4k]
  ------------------
  156|    507|                {
  157|    507|                    return {};
  158|    507|                }
  159|  93.9k|            }
  160|       |
  161|       |            // Second character
  162|   104k|            if (index == 1u)
  ------------------
  |  Branch (162:17): [True: 4.38k, False: 100k]
  ------------------
  163|  4.38k|            {
  164|  4.38k|                if (starts_with_zero)
  ------------------
  |  Branch (164:21): [True: 1.79k, False: 2.59k]
  ------------------
  165|  1.79k|                {
  166|       |                    // Binary
  167|  1.79k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (167:25): [True: 206, False: 1.58k]
  |  Branch (167:37): [True: 218, False: 1.36k]
  ------------------
  168|    424|                    {
  169|    424|                        parsing_binary = true;
  170|    424|                        continue;
  171|    424|                    }
  172|       |
  173|       |                    // Hexadecimal
  174|  1.36k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (174:25): [True: 514, False: 852]
  |  Branch (174:37): [True: 269, False: 583]
  ------------------
  175|    783|                    {
  176|    783|                        parsing_hexadecimal = true;
  177|    783|                        continue;
  178|    783|                    }
  179|       |
  180|       |                    // Octal
  181|    583|                    parsing_octal = true;
  182|    583|                }
  183|  4.38k|            }
  184|       |
  185|       |            // Handle separators
  186|   103k|            if (c == '\'')
  ------------------
  |  Branch (186:17): [True: 410, False: 103k]
  ------------------
  187|    410|            {
  188|    410|                if (parsed_separator)
  ------------------
  |  Branch (188:21): [True: 194, False: 216]
  ------------------
  189|    194|                {
  190|    194|                    return {};
  191|    194|                }
  192|       |
  193|    216|                parsed_separator = true;
  194|    216|                continue;
  195|    410|            }
  196|       |
  197|       |            // Check for over/underflow
  198|   103k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (198:17): [True: 3.63k, False: 99.7k]
  |  Branch (198:32): [True: 322, False: 3.30k]
  ------------------
  199|    322|            {
  200|       |                // Would underflow
  201|    322|                return {};
  202|    322|            }
  203|   103k|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (203:17): [True: 99.7k, False: 3.30k]
  |  Branch (203:17): [True: 396, False: 102k]
  |  Branch (203:33): [True: 396, False: 99.3k]
  ------------------
  204|    396|            {
  205|       |                // Would overflow
  206|    396|                return {};
  207|    396|            }
  208|       |
  209|   102k|            parsed_separator = false;
  210|   102k|            parsed_something = true;
  211|       |
  212|   102k|            if (parsing_binary)
  ------------------
  |  Branch (212:17): [True: 584, False: 102k]
  ------------------
  213|    584|            {
  214|    584|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (214:21): [True: 196, False: 388]
  ------------------
  215|    196|                {
  216|    196|                    return {};
  217|    196|                }
  218|       |
  219|    388|                number <<= 1;
  220|    388|                number |= (c - '0');
  221|    388|            }
  222|   102k|            else if (parsing_octal)
  ------------------
  |  Branch (222:22): [True: 769, False: 101k]
  ------------------
  223|    769|            {
  224|    769|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (224:21): [True: 396, False: 373]
  ------------------
  225|    396|                {
  226|    396|                    return {};
  227|    396|                }
  228|       |
  229|    373|                number <<= 3;
  230|    373|                number |= (c - '0');
  231|    373|            }
  232|   101k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (232:22): [True: 1.16k, False: 100k]
  ------------------
  233|  1.16k|            {
  234|  1.16k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (234:21): [True: 509, False: 651]
  ------------------
  235|    509|                {
  236|    509|                    return {};
  237|    509|                }
  238|       |
  239|    651|                number <<= 4;
  240|    651|                number |= phi::hex_digit_value(c).unsafe();
  241|    651|            }
  242|   100k|            else
  243|   100k|            {
  244|   100k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (244:21): [True: 93.5k, False: 6.64k]
  ------------------
  245|  93.5k|                {
  246|  93.5k|                    return {};
  247|  93.5k|                }
  248|       |
  249|       |                // Disallow leading zeros
  250|  6.64k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (250:21): [True: 1.74k, False: 4.90k]
  |  Branch (250:36): [True: 194, False: 1.55k]
  ------------------
  251|    194|                {
  252|    194|                    return {};
  253|    194|                }
  254|       |
  255|  6.45k|                number *= 10;
  256|  6.45k|                number += (c - '0');
  257|  6.45k|            }
  258|   102k|        }
  259|       |
  260|  1.43k|        if (parsed_something)
  ------------------
  |  Branch (260:13): [True: 1.07k, False: 353]
  ------------------
  261|  1.07k|        {
  262|       |            // Check for over/underflow
  263|  1.07k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (263:17): [True: 498, False: 579]
  |  Branch (263:32): [True: 203, False: 295]
  ------------------
  264|    203|            {
  265|       |                // Would underflow
  266|    203|                return {};
  267|    203|            }
  268|    874|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (268:17): [True: 579, False: 295]
  |  Branch (268:17): [True: 250, False: 624]
  |  Branch (268:33): [True: 250, False: 329]
  ------------------
  269|    250|            {
  270|       |                // Would overflow
  271|    250|                return {};
  272|    250|            }
  273|       |
  274|    624|            if (is_negative)
  ------------------
  |  Branch (274:17): [True: 295, False: 329]
  ------------------
  275|    295|            {
  276|    295|                return static_cast<phi::int16_t>(-number);
  277|    295|            }
  278|       |
  279|    329|            return static_cast<phi::int16_t>(number);
  280|    624|        }
  281|       |
  282|    353|        return {};
  283|  1.43k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  9.45k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finalized);
   61|       |#endif
   62|       |
   63|  9.45k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 42.1k, False: 0]
  ------------------
   64|  42.1k|            {
   65|  42.1k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 9.45k, False: 32.6k]
  ------------------
   66|  9.45k|                {
   67|  9.45k|                    return &token;
   68|  9.45k|                }
   69|  42.1k|            }
   70|       |
   71|      0|            return nullptr;
   72|  9.45k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  26.3k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  26.3k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  26.3k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   114k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|   114k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   114k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  31.5k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  31.5k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  31.5k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   16|  16.7k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   21|  3.42k|    {
   22|  3.42k|        PHI_ASSERT(argument_number < 3u);
   23|       |
   24|  3.42k|        switch (argument_number.unsafe())
   25|  3.42k|        {
   26|  2.82k|            case 0u:
  ------------------
  |  Branch (26:13): [True: 2.82k, False: 601]
  ------------------
   27|  2.82k|                m_Arg1 = argument;
   28|  2.82k|                break;
   29|    397|            case 1u:
  ------------------
  |  Branch (29:13): [True: 397, False: 3.02k]
  ------------------
   30|    397|                m_Arg2 = argument;
   31|    397|                break;
   32|    204|            case 2u:
  ------------------
  |  Branch (32:13): [True: 204, False: 3.21k]
  ------------------
   33|    204|                m_Arg3 = argument;
   34|    204|                break;
   35|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   36|      0|            default:
  ------------------
  |  Branch (36:13): [True: 0, False: 3.42k]
  ------------------
   37|      0|                PHI_ASSERT_NOT_REACHED();
   38|  3.42k|#endif
   39|  3.42k|        }
   40|  3.42k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   21|  53.5k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  166|    859|    {
  167|    859|        InstructionArgument arg;
  168|    859|        arg.m_Type                   = ArgumentType::IntRegister;
  169|    859|        arg.register_int.register_id = id;
  170|    859|        return arg;
  171|    859|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  174|    195|    {
  175|    195|        InstructionArgument arg;
  176|    195|        arg.m_Type                     = ArgumentType::FloatRegister;
  177|    195|        arg.register_float.register_id = id;
  178|    195|        return arg;
  179|    195|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  182|    196|    {
  183|    196|        InstructionArgument arg;
  184|    196|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  185|    196|        arg.immediate_value.signed_value = value;
  186|    196|        return arg;
  187|    196|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  191|    194|    {
  192|    194|        InstructionArgument arg;
  193|    194|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  194|    194|        arg.address_displacement.register_id  = id;
  195|    194|        arg.address_displacement.displacement = displacement;
  196|    194|        return arg;
  197|    194|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  200|  1.97k|    {
  201|  1.97k|        InstructionArgument arg;
  202|  1.97k|        arg.m_Type           = ArgumentType::Label;
  203|  1.97k|        arg.label.label_name = label_name;
  204|  1.97k|        return arg;
  205|  1.97k|    }

_ZN3dlx21LookUpInstructionInfoENS_6OpCodeE:
  449|  16.7k|    {
  450|  16.7k|        return instruction_table.at(static_cast<phi::size_t>(instruction));
  451|  16.7k|    }

_ZN3dlx11IntRegisterC2Ev:
   12|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   40|      1|    {
   41|      1|        m_IsReadOnly = read_only;
   42|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   12|      1|    {
   13|      1|        m_Values.resize(starting_size.unsafe());
   14|      1|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   21|   158k|    {
   22|   158k|        switch (token.length().unsafe())
   23|   158k|        {
   24|       |            // 1 character OpCodes
   25|  19.3k|            case 1: {
  ------------------
  |  Branch (25:13): [True: 19.3k, False: 138k]
  ------------------
   26|  19.3k|                const char c1 = token[0u];
   27|       |
   28|  19.3k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (28:21): [True: 8.72k, False: 10.6k]
  ------------------
   29|  8.72k|                {
   30|  8.72k|                    return OpCode::J;
   31|  8.72k|                }
   32|  10.6k|                break;
   33|  19.3k|            }
   34|       |
   35|       |            // 2 character OpCodes
   36|  21.8k|            case 2: {
  ------------------
  |  Branch (36:13): [True: 21.8k, False: 136k]
  ------------------
   37|  21.8k|                const char c1 = token[0u];
   38|  21.8k|                const char c2 = token[1u];
   39|       |
   40|  21.8k|                switch (c1)
  ------------------
  |  Branch (40:25): [True: 12.1k, False: 9.70k]
  ------------------
   41|  21.8k|                {
   42|    651|                    case 'J':
  ------------------
  |  Branch (42:21): [True: 651, False: 21.2k]
  ------------------
   43|    973|                    case 'j':
  ------------------
  |  Branch (43:21): [True: 322, False: 21.5k]
  ------------------
   44|    973|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (44:29): [True: 425, False: 548]
  ------------------
   45|    425|                        {
   46|    425|                            return OpCode::JR;
   47|    425|                        }
   48|    548|                        break;
   49|       |
   50|  1.76k|                    case 'L':
  ------------------
  |  Branch (50:21): [True: 1.76k, False: 20.1k]
  ------------------
   51|  3.31k|                    case 'l':
  ------------------
  |  Branch (51:21): [True: 1.55k, False: 20.3k]
  ------------------
   52|  3.31k|                        switch (c2)
  ------------------
  |  Branch (52:33): [True: 955, False: 2.36k]
  ------------------
   53|  3.31k|                        {
   54|    198|                            case 'B':
  ------------------
  |  Branch (54:29): [True: 198, False: 3.12k]
  ------------------
   55|    395|                            case 'b':
  ------------------
  |  Branch (55:29): [True: 197, False: 3.12k]
  ------------------
   56|    395|                                return OpCode::LB;
   57|    199|                            case 'D':
  ------------------
  |  Branch (57:29): [True: 199, False: 3.11k]
  ------------------
   58|    402|                            case 'd':
  ------------------
  |  Branch (58:29): [True: 203, False: 3.11k]
  ------------------
   59|    402|                                return OpCode::LD;
   60|    291|                            case 'F':
  ------------------
  |  Branch (60:29): [True: 291, False: 3.02k]
  ------------------
   61|    535|                            case 'f':
  ------------------
  |  Branch (61:29): [True: 244, False: 3.07k]
  ------------------
   62|    535|                                return OpCode::LF;
   63|    316|                            case 'H':
  ------------------
  |  Branch (63:29): [True: 316, False: 3.00k]
  ------------------
   64|    513|                            case 'h':
  ------------------
  |  Branch (64:29): [True: 197, False: 3.12k]
  ------------------
   65|    513|                                return OpCode::LH;
   66|    196|                            case 'W':
  ------------------
  |  Branch (66:29): [True: 196, False: 3.12k]
  ------------------
   67|    518|                            case 'w':
  ------------------
  |  Branch (67:29): [True: 322, False: 2.99k]
  ------------------
   68|    518|                                return OpCode::LW;
   69|  3.31k|                        }
   70|    955|                        break;
   71|    955|                    case 'O':
  ------------------
  |  Branch (71:21): [True: 356, False: 21.5k]
  ------------------
   72|  1.19k|                    case 'o':
  ------------------
  |  Branch (72:21): [True: 836, False: 21.0k]
  ------------------
   73|  1.19k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (73:29): [True: 401, False: 791]
  ------------------
   74|    401|                        {
   75|    401|                            return OpCode::OR;
   76|    401|                        }
   77|    791|                        break;
   78|  1.75k|                    case 'S':
  ------------------
  |  Branch (78:21): [True: 1.75k, False: 20.1k]
  ------------------
   79|  4.21k|                    case 's':
  ------------------
  |  Branch (79:21): [True: 2.46k, False: 19.4k]
  ------------------
   80|  4.21k|                        switch (c2)
  ------------------
  |  Branch (80:33): [True: 1.07k, False: 3.14k]
  ------------------
   81|  4.21k|                        {
   82|    204|                            case 'B':
  ------------------
  |  Branch (82:29): [True: 204, False: 4.01k]
  ------------------
   83|    400|                            case 'b':
  ------------------
  |  Branch (83:29): [True: 196, False: 4.02k]
  ------------------
   84|    400|                                return OpCode::SB;
   85|    945|                            case 'D':
  ------------------
  |  Branch (85:29): [True: 945, False: 3.27k]
  ------------------
   86|  1.13k|                            case 'd':
  ------------------
  |  Branch (86:29): [True: 194, False: 4.02k]
  ------------------
   87|  1.13k|                                return OpCode::SD;
   88|    195|                            case 'F':
  ------------------
  |  Branch (88:29): [True: 195, False: 4.02k]
  ------------------
   89|    389|                            case 'f':
  ------------------
  |  Branch (89:29): [True: 194, False: 4.02k]
  ------------------
   90|    389|                                return OpCode::SF;
   91|    246|                            case 'H':
  ------------------
  |  Branch (91:29): [True: 246, False: 3.97k]
  ------------------
   92|    769|                            case 'h':
  ------------------
  |  Branch (92:29): [True: 523, False: 3.69k]
  ------------------
   93|    769|                                return OpCode::SH;
   94|    201|                            case 'w':
  ------------------
  |  Branch (94:29): [True: 201, False: 4.01k]
  ------------------
   95|    445|                            case 'W':
  ------------------
  |  Branch (95:29): [True: 244, False: 3.97k]
  ------------------
   96|    445|                                return OpCode::SW;
   97|  4.21k|                        }
   98|  1.07k|                        break;
   99|  21.8k|                }
  100|  15.5k|                break;
  101|  21.8k|            }
  102|       |
  103|       |            // 3 character OpCodes
  104|  36.0k|            case 3: {
  ------------------
  |  Branch (104:13): [True: 36.0k, False: 122k]
  ------------------
  105|  36.0k|                const char c1 = token[0u];
  106|  36.0k|                const char c2 = token[1u];
  107|  36.0k|                const char c3 = token[2u];
  108|       |
  109|  36.0k|                switch (c1)
  ------------------
  |  Branch (109:25): [True: 8.18k, False: 27.8k]
  ------------------
  110|  36.0k|                {
  111|  1.62k|                    case 'A':
  ------------------
  |  Branch (111:21): [True: 1.62k, False: 34.3k]
  ------------------
  112|  1.87k|                    case 'a':
  ------------------
  |  Branch (112:21): [True: 247, False: 35.7k]
  ------------------
  113|  1.87k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (113:29): [True: 868, False: 1.00k]
  |  Branch (113:29): [True: 542, False: 1.33k]
  |  Branch (113:45): [True: 542, False: 326]
  ------------------
  114|    542|                        {
  115|    542|                            return OpCode::ADD;
  116|    542|                        }
  117|  1.33k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (117:34): [True: 739, False: 591]
  |  Branch (117:34): [True: 532, False: 798]
  |  Branch (117:50): [True: 532, False: 207]
  ------------------
  118|    532|                        {
  119|    532|                            return OpCode::AND;
  120|    532|                        }
  121|    798|                        break;
  122|       |
  123|    798|                    case 'D':
  ------------------
  |  Branch (123:21): [True: 393, False: 35.6k]
  ------------------
  124|  1.12k|                    case 'd':
  ------------------
  |  Branch (124:21): [True: 728, False: 35.2k]
  ------------------
  125|  1.12k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (125:29): [True: 853, False: 268]
  |  Branch (125:29): [True: 520, False: 601]
  |  Branch (125:45): [True: 520, False: 333]
  ------------------
  126|    520|                        {
  127|    520|                            return OpCode::DIV;
  128|    520|                        }
  129|    601|                        break;
  130|       |
  131|    722|                    case 'E':
  ------------------
  |  Branch (131:21): [True: 722, False: 35.2k]
  ------------------
  132|  1.92k|                    case 'e':
  ------------------
  |  Branch (132:21): [True: 1.20k, False: 34.7k]
  ------------------
  133|  1.92k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (133:29): [True: 1.38k, False: 539]
  ------------------
  134|  1.38k|                        {
  135|  1.38k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (135:33): [True: 518, False: 870]
  ------------------
  136|    518|                            {
  137|    518|                                return OpCode::EQD;
  138|    518|                            }
  139|    870|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (139:38): [True: 585, False: 285]
  ------------------
  140|    585|                            {
  141|    585|                                return OpCode::EQF;
  142|    585|                            }
  143|  1.38k|                        }
  144|    824|                        break;
  145|       |
  146|  1.04k|                    case 'G':
  ------------------
  |  Branch (146:21): [True: 1.04k, False: 34.9k]
  ------------------
  147|  2.35k|                    case 'g':
  ------------------
  |  Branch (147:21): [True: 1.31k, False: 34.6k]
  ------------------
  148|  2.35k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (148:29): [True: 1.01k, False: 1.33k]
  ------------------
  149|  1.01k|                        {
  150|  1.01k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (150:33): [True: 389, False: 626]
  ------------------
  151|    389|                            {
  152|    389|                                return OpCode::GED;
  153|    389|                            }
  154|    626|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (154:38): [True: 388, False: 238]
  ------------------
  155|    388|                            {
  156|    388|                                return OpCode::GEF;
  157|    388|                            }
  158|  1.01k|                        }
  159|  1.33k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (159:34): [True: 1.11k, False: 224]
  ------------------
  160|  1.11k|                        {
  161|  1.11k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (161:33): [True: 516, False: 597]
  ------------------
  162|    516|                            {
  163|    516|                                return OpCode::GTD;
  164|    516|                            }
  165|    597|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (165:33): [True: 388, False: 209]
  ------------------
  166|    388|                            {
  167|    388|                                return OpCode::GTF;
  168|    388|                            }
  169|    597|                        }
  170|    671|                        break;
  171|       |
  172|    743|                    case 'J':
  ------------------
  |  Branch (172:21): [True: 743, False: 35.2k]
  ------------------
  173|    994|                    case 'j':
  ------------------
  |  Branch (173:21): [True: 251, False: 35.7k]
  ------------------
  174|    994|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (174:29): [True: 609, False: 385]
  |  Branch (174:29): [True: 395, False: 599]
  |  Branch (174:45): [True: 395, False: 214]
  ------------------
  175|    395|                        {
  176|    395|                            return OpCode::JAL;
  177|    395|                        }
  178|    599|                        break;
  179|       |
  180|  3.66k|                    case 'L':
  ------------------
  |  Branch (180:21): [True: 3.66k, False: 32.3k]
  ------------------
  181|  5.37k|                    case 'l':
  ------------------
  |  Branch (181:21): [True: 1.71k, False: 34.2k]
  ------------------
  182|  5.37k|                        switch (c2)
  ------------------
  |  Branch (182:33): [True: 586, False: 4.78k]
  ------------------
  183|  5.37k|                        {
  184|    205|                            case 'B':
  ------------------
  |  Branch (184:29): [True: 205, False: 5.16k]
  ------------------
  185|    754|                            case 'b':
  ------------------
  |  Branch (185:29): [True: 549, False: 4.82k]
  ------------------
  186|    754|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (186:37): [True: 516, False: 238]
  ------------------
  187|    516|                                {
  188|    516|                                    return OpCode::LBU;
  189|    516|                                }
  190|    238|                                break;
  191|       |
  192|    604|                            case 'E':
  ------------------
  |  Branch (192:29): [True: 604, False: 4.76k]
  ------------------
  193|  1.01k|                            case 'e':
  ------------------
  |  Branch (193:29): [True: 406, False: 4.96k]
  ------------------
  194|  1.01k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (194:37): [True: 388, False: 622]
  ------------------
  195|    388|                                {
  196|    388|                                    return OpCode::LED;
  197|    388|                                }
  198|    622|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (198:42): [True: 388, False: 234]
  ------------------
  199|    388|                                {
  200|    388|                                    return OpCode::LEF;
  201|    388|                                }
  202|    234|                                break;
  203|       |
  204|    657|                            case 'H':
  ------------------
  |  Branch (204:29): [True: 657, False: 4.71k]
  ------------------
  205|  1.19k|                            case 'h':
  ------------------
  |  Branch (205:29): [True: 538, False: 4.83k]
  ------------------
  206|  1.19k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (206:37): [True: 516, False: 679]
  ------------------
  207|    516|                                {
  208|    516|                                    return OpCode::LHI;
  209|    516|                                }
  210|    679|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (210:42): [True: 388, False: 291]
  ------------------
  211|    388|                                {
  212|    388|                                    return OpCode::LHU;
  213|    388|                                }
  214|    291|                                break;
  215|       |
  216|    291|                            case 'T':
  ------------------
  |  Branch (216:29): [True: 216, False: 5.15k]
  ------------------
  217|    978|                            case 't':
  ------------------
  |  Branch (217:29): [True: 762, False: 4.61k]
  ------------------
  218|    978|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (218:37): [True: 388, False: 590]
  ------------------
  219|    388|                                {
  220|    388|                                    return OpCode::LTD;
  221|    388|                                }
  222|    590|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (222:42): [True: 388, False: 202]
  ------------------
  223|    388|                                {
  224|    388|                                    return OpCode::LTF;
  225|    388|                                }
  226|    202|                                break;
  227|       |
  228|    325|                            case 'W':
  ------------------
  |  Branch (228:29): [True: 325, False: 5.04k]
  ------------------
  229|    850|                            case 'w':
  ------------------
  |  Branch (229:29): [True: 525, False: 4.84k]
  ------------------
  230|    850|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (230:37): [True: 516, False: 334]
  ------------------
  231|    516|                                {
  232|    516|                                    return OpCode::LWU;
  233|    516|                                }
  234|    334|                                break;
  235|  5.37k|                        }
  236|  1.88k|                        break;
  237|       |
  238|  1.88k|                    case 'N':
  ------------------
  |  Branch (238:21): [True: 1.27k, False: 34.7k]
  ------------------
  239|  2.01k|                    case 'n':
  ------------------
  |  Branch (239:21): [True: 736, False: 35.2k]
  ------------------
  240|  2.01k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (240:29): [True: 1.11k, False: 892]
  ------------------
  241|  1.11k|                        {
  242|  1.11k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (242:33): [True: 388, False: 731]
  ------------------
  243|    388|                            {
  244|    388|                                return OpCode::NED;
  245|    388|                            }
  246|    731|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (246:38): [True: 390, False: 341]
  ------------------
  247|    390|                            {
  248|    390|                                return OpCode::NEF;
  249|    390|                            }
  250|  1.11k|                        }
  251|    892|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (251:34): [True: 619, False: 273]
  |  Branch (251:34): [True: 388, False: 504]
  |  Branch (251:50): [True: 388, False: 231]
  ------------------
  252|    388|                        {
  253|    388|                            return OpCode::NOP;
  254|    388|                        }
  255|       |
  256|    845|                        break;
  257|       |
  258|    845|                    case 'O':
  ------------------
  |  Branch (258:21): [True: 824, False: 35.1k]
  ------------------
  259|  1.29k|                    case 'o':
  ------------------
  |  Branch (259:21): [True: 467, False: 35.5k]
  ------------------
  260|  1.29k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (260:29): [True: 980, False: 311]
  |  Branch (260:29): [True: 772, False: 519]
  |  Branch (260:45): [True: 772, False: 208]
  ------------------
  261|    772|                        {
  262|    772|                            return OpCode::ORI;
  263|    772|                        }
  264|    519|                        break;
  265|       |
  266|  6.66k|                    case 'S':
  ------------------
  |  Branch (266:21): [True: 6.66k, False: 29.3k]
  ------------------
  267|  10.0k|                    case 's':
  ------------------
  |  Branch (267:21): [True: 3.40k, False: 32.5k]
  ------------------
  268|  10.0k|                        switch (c2)
  ------------------
  |  Branch (268:33): [True: 617, False: 9.44k]
  ------------------
  269|  10.0k|                        {
  270|    397|                            case 'B':
  ------------------
  |  Branch (270:29): [True: 397, False: 9.66k]
  ------------------
  271|    812|                            case 'b':
  ------------------
  |  Branch (271:29): [True: 415, False: 9.65k]
  ------------------
  272|    812|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (272:37): [True: 388, False: 424]
  ------------------
  273|    388|                                {
  274|    388|                                    return OpCode::SBU;
  275|    388|                                }
  276|    424|                                break;
  277|       |
  278|    424|                            case 'E':
  ------------------
  |  Branch (278:29): [True: 403, False: 9.66k]
  ------------------
  279|    787|                            case 'e':
  ------------------
  |  Branch (279:29): [True: 384, False: 9.68k]
  ------------------
  280|    787|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (280:37): [True: 407, False: 380]
  ------------------
  281|    407|                                {
  282|    407|                                    return OpCode::SEQ;
  283|    407|                                }
  284|    380|                                break;
  285|       |
  286|  1.20k|                            case 'G':
  ------------------
  |  Branch (286:29): [True: 1.20k, False: 8.86k]
  ------------------
  287|  1.45k|                            case 'g':
  ------------------
  |  Branch (287:29): [True: 252, False: 9.81k]
  ------------------
  288|  1.45k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (288:37): [True: 523, False: 932]
  ------------------
  289|    523|                                {
  290|    523|                                    return OpCode::SGE;
  291|    523|                                }
  292|    932|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (292:42): [True: 437, False: 495]
  ------------------
  293|    437|                                {
  294|    437|                                    return OpCode::SGT;
  295|    437|                                }
  296|    495|                                break;
  297|       |
  298|    495|                            case 'H':
  ------------------
  |  Branch (298:29): [True: 228, False: 9.83k]
  ------------------
  299|    617|                            case 'h':
  ------------------
  |  Branch (299:29): [True: 389, False: 9.67k]
  ------------------
  300|    617|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (300:37): [True: 388, False: 229]
  ------------------
  301|    388|                                {
  302|    388|                                    return OpCode::SHU;
  303|    388|                                }
  304|    229|                                break;
  305|       |
  306|  1.32k|                            case 'L':
  ------------------
  |  Branch (306:29): [True: 1.32k, False: 8.74k]
  ------------------
  307|  2.25k|                            case 'l':
  ------------------
  |  Branch (307:29): [True: 928, False: 9.13k]
  ------------------
  308|  2.25k|                                switch (c3)
  ------------------
  |  Branch (308:41): [True: 501, False: 1.75k]
  ------------------
  309|  2.25k|                                {
  310|    195|                                    case 'A':
  ------------------
  |  Branch (310:37): [True: 195, False: 2.05k]
  ------------------
  311|    394|                                    case 'a':
  ------------------
  |  Branch (311:37): [True: 199, False: 2.05k]
  ------------------
  312|    394|                                        return OpCode::SLA;
  313|       |
  314|    196|                                    case 'E':
  ------------------
  |  Branch (314:37): [True: 196, False: 2.05k]
  ------------------
  315|    391|                                    case 'e':
  ------------------
  |  Branch (315:37): [True: 195, False: 2.05k]
  ------------------
  316|    391|                                        return OpCode::SLE;
  317|       |
  318|    195|                                    case 'L':
  ------------------
  |  Branch (318:37): [True: 195, False: 2.05k]
  ------------------
  319|    532|                                    case 'l':
  ------------------
  |  Branch (319:37): [True: 337, False: 1.91k]
  ------------------
  320|    532|                                        return OpCode::SLL;
  321|       |
  322|    194|                                    case 'T':
  ------------------
  |  Branch (322:37): [True: 194, False: 2.05k]
  ------------------
  323|    433|                                    case 't':
  ------------------
  |  Branch (323:37): [True: 239, False: 2.01k]
  ------------------
  324|    433|                                        return OpCode::SLT;
  325|  2.25k|                                }
  326|    501|                                break;
  327|       |
  328|    549|                            case 'N':
  ------------------
  |  Branch (328:29): [True: 549, False: 9.51k]
  ------------------
  329|    878|                            case 'n':
  ------------------
  |  Branch (329:29): [True: 329, False: 9.73k]
  ------------------
  330|    878|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (330:37): [True: 517, False: 361]
  ------------------
  331|    517|                                {
  332|    517|                                    return OpCode::SNE;
  333|    517|                                }
  334|    361|                                break;
  335|       |
  336|    367|                            case 'R':
  ------------------
  |  Branch (336:29): [True: 367, False: 9.69k]
  ------------------
  337|  1.33k|                            case 'r':
  ------------------
  |  Branch (337:29): [True: 971, False: 9.09k]
  ------------------
  338|  1.33k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (338:37): [True: 405, False: 933]
  ------------------
  339|    405|                                {
  340|    405|                                    return OpCode::SRA;
  341|    405|                                }
  342|    933|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (342:42): [True: 732, False: 201]
  ------------------
  343|    732|                                {
  344|    732|                                    return OpCode::SRL;
  345|    732|                                }
  346|    201|                                break;
  347|       |
  348|    422|                            case 'U':
  ------------------
  |  Branch (348:29): [True: 422, False: 9.64k]
  ------------------
  349|    690|                            case 'u':
  ------------------
  |  Branch (349:29): [True: 268, False: 9.79k]
  ------------------
  350|    690|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (350:37): [True: 461, False: 229]
  ------------------
  351|    461|                                {
  352|    461|                                    return OpCode::SUB;
  353|    461|                                }
  354|    229|                                break;
  355|       |
  356|    410|                            case 'W':
  ------------------
  |  Branch (356:29): [True: 410, False: 9.65k]
  ------------------
  357|    620|                            case 'w':
  ------------------
  |  Branch (357:29): [True: 210, False: 9.85k]
  ------------------
  358|    620|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (358:37): [True: 388, False: 232]
  ------------------
  359|    388|                                {
  360|    388|                                    return OpCode::SWU;
  361|    388|                                }
  362|    232|                                break;
  363|  10.0k|                        }
  364|       |
  365|  4.07k|                    case 'X':
  ------------------
  |  Branch (365:21): [True: 407, False: 35.5k]
  ------------------
  366|  4.47k|                    case 'x':
  ------------------
  |  Branch (366:21): [True: 401, False: 35.5k]
  ------------------
  367|  4.47k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (367:29): [True: 770, False: 3.70k]
  |  Branch (367:29): [True: 496, False: 3.98k]
  |  Branch (367:45): [True: 496, False: 274]
  ------------------
  368|    496|                        {
  369|    496|                            return OpCode::XOR;
  370|    496|                        }
  371|  3.98k|                        break;
  372|  36.0k|                }
  373|  18.9k|                break;
  374|  36.0k|            }
  375|       |
  376|       |            // 4 character OpCodes
  377|  38.8k|            case 4: {
  ------------------
  |  Branch (377:13): [True: 38.8k, False: 119k]
  ------------------
  378|  38.8k|                const char c1 = token[0u];
  379|  38.8k|                const char c2 = token[1u];
  380|  38.8k|                const char c3 = token[2u];
  381|  38.8k|                const char c4 = token[3u];
  382|       |
  383|  38.8k|                switch (c1)
  ------------------
  |  Branch (383:25): [True: 6.17k, False: 32.6k]
  ------------------
  384|  38.8k|                {
  385|  3.06k|                    case 'A':
  ------------------
  |  Branch (385:21): [True: 3.06k, False: 35.7k]
  ------------------
  386|  3.47k|                    case 'a':
  ------------------
  |  Branch (386:21): [True: 413, False: 38.3k]
  ------------------
  387|  3.47k|                        switch (c2)
  ------------------
  |  Branch (387:33): [True: 204, False: 3.27k]
  ------------------
  388|  3.47k|                        {
  389|  1.56k|                            case 'D':
  ------------------
  |  Branch (389:29): [True: 1.56k, False: 1.91k]
  ------------------
  390|  2.31k|                            case 'd':
  ------------------
  |  Branch (390:29): [True: 750, False: 2.72k]
  ------------------
  391|  2.31k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (391:37): [True: 1.98k, False: 331]
  ------------------
  392|  1.98k|                                {
  393|  1.98k|                                    switch (c4)
  ------------------
  |  Branch (393:45): [True: 407, False: 1.57k]
  ------------------
  394|  1.98k|                                    {
  395|    194|                                        case 'D':
  ------------------
  |  Branch (395:41): [True: 194, False: 1.79k]
  ------------------
  396|    388|                                        case 'd':
  ------------------
  |  Branch (396:41): [True: 194, False: 1.79k]
  ------------------
  397|    388|                                            return OpCode::ADDD;
  398|       |
  399|    195|                                        case 'F':
  ------------------
  |  Branch (399:41): [True: 195, False: 1.79k]
  ------------------
  400|    389|                                        case 'f':
  ------------------
  |  Branch (400:41): [True: 194, False: 1.79k]
  ------------------
  401|    389|                                            return OpCode::ADDF;
  402|       |
  403|    194|                                        case 'I':
  ------------------
  |  Branch (403:41): [True: 194, False: 1.79k]
  ------------------
  404|    388|                                        case 'i':
  ------------------
  |  Branch (404:41): [True: 194, False: 1.79k]
  ------------------
  405|    388|                                            return OpCode::ADDI;
  406|       |
  407|    205|                                        case 'U':
  ------------------
  |  Branch (407:41): [True: 205, False: 1.78k]
  ------------------
  408|    414|                                        case 'u':
  ------------------
  |  Branch (408:41): [True: 209, False: 1.77k]
  ------------------
  409|    414|                                            return OpCode::ADDU;
  410|  1.98k|                                    }
  411|  1.98k|                                }
  412|    738|                                break;
  413|       |
  414|    763|                            case 'N':
  ------------------
  |  Branch (414:29): [True: 763, False: 2.71k]
  ------------------
  415|    958|                            case 'n':
  ------------------
  |  Branch (415:29): [True: 195, False: 3.28k]
  ------------------
  416|    958|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (416:37): [True: 762, False: 196]
  |  Branch (416:37): [True: 388, False: 570]
  |  Branch (416:53): [True: 388, False: 374]
  ------------------
  417|    388|                                {
  418|    388|                                    return OpCode::ANDI;
  419|    388|                                }
  420|       |
  421|    570|                                break;
  422|  3.47k|                        }
  423|  1.51k|                        break;
  424|       |
  425|  3.10k|                    case 'B':
  ------------------
  |  Branch (425:21): [True: 3.10k, False: 35.7k]
  ------------------
  426|  3.40k|                    case 'b':
  ------------------
  |  Branch (426:21): [True: 301, False: 38.5k]
  ------------------
  427|  3.40k|                        switch (c2)
  ------------------
  |  Branch (427:33): [True: 221, False: 3.18k]
  ------------------
  428|  3.40k|                        {
  429|    425|                            case 'E':
  ------------------
  |  Branch (429:29): [True: 425, False: 2.97k]
  ------------------
  430|    827|                            case 'e':
  ------------------
  |  Branch (430:29): [True: 402, False: 3.00k]
  ------------------
  431|    827|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (431:37): [True: 605, False: 222]
  |  Branch (431:37): [True: 388, False: 439]
  |  Branch (431:53): [True: 388, False: 217]
  ------------------
  432|    388|                                {
  433|    388|                                    return OpCode::BEQZ;
  434|    388|                                }
  435|    439|                                break;
  436|       |
  437|    973|                            case 'F':
  ------------------
  |  Branch (437:29): [True: 973, False: 2.43k]
  ------------------
  438|  1.17k|                            case 'f':
  ------------------
  |  Branch (438:29): [True: 203, False: 3.20k]
  ------------------
  439|  1.17k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (439:37): [True: 973, False: 203]
  ------------------
  440|    973|                                {
  441|    973|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (441:41): [True: 388, False: 585]
  ------------------
  442|    388|                                    {
  443|    388|                                        return OpCode::BFPF;
  444|    388|                                    }
  445|    585|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (445:46): [True: 388, False: 197]
  ------------------
  446|    388|                                    {
  447|    388|                                        return OpCode::BFPT;
  448|    388|                                    }
  449|    973|                                }
  450|    400|                                break;
  451|       |
  452|    785|                            case 'N':
  ------------------
  |  Branch (452:29): [True: 785, False: 2.61k]
  ------------------
  453|  1.18k|                            case 'n':
  ------------------
  |  Branch (453:29): [True: 395, False: 3.00k]
  ------------------
  454|  1.18k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (454:37): [True: 984, False: 196]
  |  Branch (454:37): [True: 388, False: 792]
  |  Branch (454:53): [True: 388, False: 596]
  ------------------
  455|    388|                                {
  456|    388|                                    return OpCode::BNEZ;
  457|    388|                                }
  458|  3.40k|                        }
  459|  1.85k|                        break;
  460|       |
  461|  1.85k|                    case 'D':
  ------------------
  |  Branch (461:21): [True: 893, False: 37.9k]
  ------------------
  462|  2.88k|                    case 'd':
  ------------------
  |  Branch (462:21): [True: 1.98k, False: 36.8k]
  ------------------
  463|  2.88k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (463:29): [True: 2.67k, False: 203]
  |  Branch (463:29): [True: 2.16k, False: 712]
  |  Branch (463:45): [True: 2.16k, False: 509]
  ------------------
  464|  2.16k|                        {
  465|  2.16k|                            switch (c4)
  ------------------
  |  Branch (465:37): [True: 613, False: 1.55k]
  ------------------
  466|  2.16k|                            {
  467|    194|                                case 'D':
  ------------------
  |  Branch (467:33): [True: 194, False: 1.97k]
  ------------------
  468|    390|                                case 'd':
  ------------------
  |  Branch (468:33): [True: 196, False: 1.97k]
  ------------------
  469|    390|                                    return OpCode::DIVD;
  470|       |
  471|    194|                                case 'F':
  ------------------
  |  Branch (471:33): [True: 194, False: 1.97k]
  ------------------
  472|    389|                                case 'f':
  ------------------
  |  Branch (472:33): [True: 195, False: 1.97k]
  ------------------
  473|    389|                                    return OpCode::DIVF;
  474|       |
  475|    194|                                case 'I':
  ------------------
  |  Branch (475:33): [True: 194, False: 1.97k]
  ------------------
  476|    389|                                case 'i':
  ------------------
  |  Branch (476:33): [True: 195, False: 1.97k]
  ------------------
  477|    389|                                    return OpCode::DIVI;
  478|       |
  479|    194|                                case 'U':
  ------------------
  |  Branch (479:33): [True: 194, False: 1.97k]
  ------------------
  480|    388|                                case 'u':
  ------------------
  |  Branch (480:33): [True: 194, False: 1.97k]
  ------------------
  481|    388|                                    return OpCode::DIVU;
  482|  2.16k|                            }
  483|  2.16k|                        }
  484|  1.32k|                        break;
  485|       |
  486|  1.32k|                    case 'H':
  ------------------
  |  Branch (486:21): [True: 575, False: 38.2k]
  ------------------
  487|  1.29k|                    case 'h':
  ------------------
  |  Branch (487:21): [True: 721, False: 38.0k]
  ------------------
  488|  1.29k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (488:29): [True: 1.09k, False: 204]
  |  Branch (488:29): [True: 516, False: 780]
  |  Branch (488:45): [True: 743, False: 349]
  |  Branch (488:61): [True: 516, False: 227]
  ------------------
  489|    516|                        {
  490|    516|                            return OpCode::HALT;
  491|    516|                        }
  492|    780|                        break;
  493|       |
  494|    849|                    case 'J':
  ------------------
  |  Branch (494:21): [True: 849, False: 37.9k]
  ------------------
  495|  1.24k|                    case 'j':
  ------------------
  |  Branch (495:21): [True: 391, False: 38.4k]
  ------------------
  496|  1.24k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (496:29): [True: 1.01k, False: 227]
  |  Branch (496:29): [True: 388, False: 852]
  |  Branch (496:45): [True: 819, False: 194]
  |  Branch (496:61): [True: 388, False: 431]
  ------------------
  497|    388|                        {
  498|    388|                            return OpCode::JALR;
  499|    388|                        }
  500|    852|                        break;
  501|       |
  502|  1.03k|                    case 'M':
  ------------------
  |  Branch (502:21): [True: 1.03k, False: 37.7k]
  ------------------
  503|  2.64k|                    case 'm':
  ------------------
  |  Branch (503:21): [True: 1.61k, False: 37.1k]
  ------------------
  504|  2.64k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (504:29): [True: 1.21k, False: 1.42k]
  |  Branch (504:29): [True: 1.00k, False: 1.63k]
  |  Branch (504:45): [True: 1.00k, False: 206]
  ------------------
  505|  1.00k|                        {
  506|  1.00k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (506:33): [True: 388, False: 620]
  ------------------
  507|    388|                            {
  508|    388|                                return OpCode::MOVD;
  509|    388|                            }
  510|    620|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (510:38): [True: 390, False: 230]
  ------------------
  511|    390|                            {
  512|    390|                                return OpCode::MOVF;
  513|    390|                            }
  514|  1.00k|                        }
  515|  1.63k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (515:34): [True: 1.38k, False: 247]
  |  Branch (515:34): [True: 803, False: 831]
  |  Branch (515:50): [True: 1.03k, False: 351]
  |  Branch (515:66): [True: 803, False: 233]
  ------------------
  516|    803|                        {
  517|    803|                            return OpCode::MULT;
  518|    803|                        }
  519|  1.06k|                        break;
  520|       |
  521|  11.5k|                    case 'S':
  ------------------
  |  Branch (521:21): [True: 11.5k, False: 27.2k]
  ------------------
  522|  15.2k|                    case 's':
  ------------------
  |  Branch (522:21): [True: 3.68k, False: 35.1k]
  ------------------
  523|  15.2k|                        switch (c2)
  ------------------
  |  Branch (523:33): [True: 692, False: 14.5k]
  ------------------
  524|  15.2k|                        {
  525|    471|                            case 'E':
  ------------------
  |  Branch (525:29): [True: 471, False: 14.7k]
  ------------------
  526|  1.55k|                            case 'e':
  ------------------
  |  Branch (526:29): [True: 1.08k, False: 14.1k]
  ------------------
  527|  1.55k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (527:37): [True: 1.16k, False: 394]
  ------------------
  528|  1.16k|                                {
  529|  1.16k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (529:41): [True: 388, False: 777]
  ------------------
  530|    388|                                    {
  531|    388|                                        return OpCode::SEQI;
  532|    388|                                    }
  533|    777|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (533:46): [True: 518, False: 259]
  ------------------
  534|    518|                                    {
  535|    518|                                        return OpCode::SEQU;
  536|    518|                                    }
  537|  1.16k|                                }
  538|    653|                                break;
  539|       |
  540|  3.26k|                            case 'G':
  ------------------
  |  Branch (540:29): [True: 3.26k, False: 11.9k]
  ------------------
  541|  3.64k|                            case 'g':
  ------------------
  |  Branch (541:29): [True: 380, False: 14.8k]
  ------------------
  542|  3.64k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (542:37): [True: 1.59k, False: 2.05k]
  ------------------
  543|  1.59k|                                {
  544|  1.59k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (544:41): [True: 388, False: 1.20k]
  ------------------
  545|    388|                                    {
  546|    388|                                        return OpCode::SGEI;
  547|    388|                                    }
  548|  1.20k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (548:46): [True: 467, False: 740]
  ------------------
  549|    467|                                    {
  550|    467|                                        return OpCode::SGEU;
  551|    467|                                    }
  552|  1.59k|                                }
  553|  2.05k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (553:42): [True: 1.68k, False: 366]
  ------------------
  554|  1.68k|                                {
  555|  1.68k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (555:41): [True: 902, False: 783]
  ------------------
  556|    902|                                    {
  557|    902|                                        return OpCode::SGTI;
  558|    902|                                    }
  559|    783|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (559:46): [True: 517, False: 266]
  ------------------
  560|    517|                                    {
  561|    517|                                        return OpCode::SGTU;
  562|    517|                                    }
  563|  1.68k|                                }
  564|  1.37k|                                break;
  565|       |
  566|  2.57k|                            case 'L':
  ------------------
  |  Branch (566:29): [True: 2.57k, False: 12.6k]
  ------------------
  567|  4.31k|                            case 'l':
  ------------------
  |  Branch (567:29): [True: 1.74k, False: 13.5k]
  ------------------
  568|  4.31k|                                switch (c3)
  ------------------
  |  Branch (568:41): [True: 328, False: 3.98k]
  ------------------
  569|  4.31k|                                {
  570|    395|                                    case 'A':
  ------------------
  |  Branch (570:37): [True: 395, False: 3.91k]
  ------------------
  571|    593|                                    case 'a':
  ------------------
  |  Branch (571:37): [True: 198, False: 4.11k]
  ------------------
  572|    593|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (572:45): [True: 388, False: 205]
  ------------------
  573|    388|                                        {
  574|    388|                                            return OpCode::SLAI;
  575|    388|                                        }
  576|    205|                                        break;
  577|       |
  578|    390|                                    case 'E':
  ------------------
  |  Branch (578:37): [True: 390, False: 3.92k]
  ------------------
  579|  1.32k|                                    case 'e':
  ------------------
  |  Branch (579:37): [True: 932, False: 3.38k]
  ------------------
  580|  1.32k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (580:45): [True: 390, False: 932]
  ------------------
  581|    390|                                        {
  582|    390|                                            return OpCode::SLEI;
  583|    390|                                        }
  584|    932|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (584:50): [True: 519, False: 413]
  ------------------
  585|    519|                                        {
  586|    519|                                            return OpCode::SLEU;
  587|    519|                                        }
  588|    413|                                        break;
  589|       |
  590|    413|                                    case 'L':
  ------------------
  |  Branch (590:37): [True: 397, False: 3.91k]
  ------------------
  591|    595|                                    case 'l':
  ------------------
  |  Branch (591:37): [True: 198, False: 4.11k]
  ------------------
  592|    595|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (592:45): [True: 388, False: 207]
  ------------------
  593|    388|                                        {
  594|    388|                                            return OpCode::SLLI;
  595|    388|                                        }
  596|    207|                                        break;
  597|       |
  598|    525|                                    case 'T':
  ------------------
  |  Branch (598:37): [True: 525, False: 3.78k]
  ------------------
  599|  1.47k|                                    case 't':
  ------------------
  |  Branch (599:37): [True: 951, False: 3.36k]
  ------------------
  600|  1.47k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (600:45): [True: 388, False: 1.08k]
  ------------------
  601|    388|                                        {
  602|    388|                                            return OpCode::SLTI;
  603|    388|                                        }
  604|  1.08k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (604:50): [True: 547, False: 541]
  ------------------
  605|    547|                                        {
  606|    547|                                            return OpCode::SLTU;
  607|    547|                                        }
  608|    541|                                        break;
  609|  4.31k|                                }
  610|       |
  611|  2.85k|                            case 'N':
  ------------------
  |  Branch (611:29): [True: 1.15k, False: 14.0k]
  ------------------
  612|  3.13k|                            case 'n':
  ------------------
  |  Branch (612:29): [True: 281, False: 14.9k]
  ------------------
  613|  3.13k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (613:37): [True: 1.61k, False: 1.51k]
  ------------------
  614|  1.61k|                                {
  615|  1.61k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (615:41): [True: 388, False: 1.23k]
  ------------------
  616|    388|                                    {
  617|    388|                                        return OpCode::SNEI;
  618|    388|                                    }
  619|  1.23k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (619:46): [True: 388, False: 842]
  ------------------
  620|    388|                                    {
  621|    388|                                        return OpCode::SNEU;
  622|    388|                                    }
  623|  1.61k|                                }
  624|  2.35k|                                break;
  625|       |
  626|  2.35k|                            case 'R':
  ------------------
  |  Branch (626:29): [True: 203, False: 15.0k]
  ------------------
  627|  1.53k|                            case 'r':
  ------------------
  |  Branch (627:29): [True: 1.33k, False: 13.9k]
  ------------------
  628|  1.53k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (628:37): [True: 617, False: 918]
  |  Branch (628:37): [True: 388, False: 1.14k]
  |  Branch (628:53): [True: 388, False: 229]
  ------------------
  629|    388|                                {
  630|    388|                                    return OpCode::SRAI;
  631|    388|                                }
  632|  1.14k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (632:42): [True: 911, False: 236]
  |  Branch (632:42): [True: 711, False: 436]
  |  Branch (632:58): [True: 711, False: 200]
  ------------------
  633|    711|                                {
  634|    711|                                    return OpCode::SRLI;
  635|    711|                                }
  636|    436|                                break;
  637|       |
  638|  1.04k|                            case 'U':
  ------------------
  |  Branch (638:29): [True: 1.04k, False: 14.2k]
  ------------------
  639|  2.06k|                            case 'u':
  ------------------
  |  Branch (639:29): [True: 1.02k, False: 14.2k]
  ------------------
  640|  2.06k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (640:37): [True: 1.85k, False: 217]
  ------------------
  641|  1.85k|                                {
  642|  1.85k|                                    switch (c4)
  ------------------
  |  Branch (642:45): [True: 282, False: 1.57k]
  ------------------
  643|  1.85k|                                    {
  644|    194|                                        case 'D':
  ------------------
  |  Branch (644:41): [True: 194, False: 1.65k]
  ------------------
  645|    388|                                        case 'd':
  ------------------
  |  Branch (645:41): [True: 194, False: 1.65k]
  ------------------
  646|    388|                                            return OpCode::SUBD;
  647|       |
  648|    194|                                        case 'F':
  ------------------
  |  Branch (648:41): [True: 194, False: 1.65k]
  ------------------
  649|    388|                                        case 'f':
  ------------------
  |  Branch (649:41): [True: 194, False: 1.65k]
  ------------------
  650|    388|                                            return OpCode::SUBF;
  651|       |
  652|    194|                                        case 'I':
  ------------------
  |  Branch (652:41): [True: 194, False: 1.65k]
  ------------------
  653|    388|                                        case 'i':
  ------------------
  |  Branch (653:41): [True: 194, False: 1.65k]
  ------------------
  654|    388|                                            return OpCode::SUBI;
  655|       |
  656|    212|                                        case 'U':
  ------------------
  |  Branch (656:41): [True: 212, False: 1.64k]
  ------------------
  657|    406|                                        case 'u':
  ------------------
  |  Branch (657:41): [True: 194, False: 1.65k]
  ------------------
  658|    406|                                            return OpCode::SUBU;
  659|  1.85k|                                    }
  660|  1.85k|                                }
  661|    499|                                break;
  662|  15.2k|                        }
  663|  6.00k|                        break;
  664|       |
  665|  6.00k|                    case 'T':
  ------------------
  |  Branch (665:21): [True: 1.10k, False: 37.7k]
  ------------------
  666|  1.44k|                    case 't':
  ------------------
  |  Branch (666:21): [True: 338, False: 38.4k]
  ------------------
  667|  1.44k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (667:29): [True: 1.11k, False: 332]
  |  Branch (667:29): [True: 516, False: 931]
  |  Branch (667:45): [True: 911, False: 204]
  |  Branch (667:61): [True: 516, False: 395]
  ------------------
  668|    516|                        {
  669|    516|                            return OpCode::TRAP;
  670|    516|                        }
  671|    931|                        break;
  672|    931|                    case 'X':
  ------------------
  |  Branch (672:21): [True: 736, False: 38.0k]
  ------------------
  673|    993|                    case 'x':
  ------------------
  |  Branch (673:21): [True: 257, False: 38.5k]
  ------------------
  674|    993|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (674:29): [True: 795, False: 198]
  |  Branch (674:29): [True: 388, False: 605]
  |  Branch (674:45): [True: 601, False: 194]
  |  Branch (674:61): [True: 388, False: 213]
  ------------------
  675|    388|                        {
  676|    388|                            return OpCode::XORI;
  677|    388|                        }
  678|    605|                        break;
  679|  38.8k|                }
  680|  21.1k|                break;
  681|  38.8k|            }
  682|       |
  683|       |            // 5 character OpCodes
  684|  21.8k|            case 5: {
  ------------------
  |  Branch (684:13): [True: 21.8k, False: 136k]
  ------------------
  685|  21.8k|                const char c1 = token[0u];
  686|  21.8k|                const char c2 = token[1u];
  687|  21.8k|                const char c3 = token[2u];
  688|  21.8k|                const char c4 = token[3u];
  689|  21.8k|                const char c5 = token[4u];
  690|       |
  691|  21.8k|                switch (c1)
  ------------------
  |  Branch (691:25): [True: 4.58k, False: 17.2k]
  ------------------
  692|  21.8k|                {
  693|  1.26k|                    case 'A':
  ------------------
  |  Branch (693:21): [True: 1.26k, False: 20.5k]
  ------------------
  694|  1.82k|                    case 'a':
  ------------------
  |  Branch (694:21): [True: 558, False: 21.2k]
  ------------------
  695|  1.82k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (695:29): [True: 1.58k, False: 245]
  |  Branch (695:29): [True: 388, False: 1.43k]
  |  Branch (695:45): [True: 1.09k, False: 484]
  |  Branch (695:61): [True: 887, False: 209]
  |  Branch (695:77): [True: 388, False: 499]
  ------------------
  696|    388|                        {
  697|    388|                            return OpCode::ADDUI;
  698|    388|                        }
  699|  1.43k|                        break;
  700|       |
  701|  1.43k|                    case 'D':
  ------------------
  |  Branch (701:21): [True: 531, False: 21.2k]
  ------------------
  702|  1.98k|                    case 'd':
  ------------------
  |  Branch (702:21): [True: 1.45k, False: 20.3k]
  ------------------
  703|  1.98k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (703:29): [True: 1.78k, False: 199]
  |  Branch (703:29): [True: 388, False: 1.59k]
  |  Branch (703:45): [True: 1.46k, False: 323]
  |  Branch (703:61): [True: 774, False: 686]
  |  Branch (703:77): [True: 388, False: 386]
  ------------------
  704|    388|                        {
  705|    388|                            return OpCode::DIVUI;
  706|    388|                        }
  707|  1.59k|                        break;
  708|       |
  709|  2.23k|                    case 'M':
  ------------------
  |  Branch (709:21): [True: 2.23k, False: 19.5k]
  ------------------
  710|  3.86k|                    case 'm':
  ------------------
  |  Branch (710:21): [True: 1.63k, False: 20.1k]
  ------------------
  711|  3.86k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (711:29): [True: 3.30k, False: 565]
  |  Branch (711:29): [True: 2.73k, False: 1.13k]
  |  Branch (711:45): [True: 2.94k, False: 362]
  |  Branch (711:61): [True: 2.73k, False: 208]
  ------------------
  712|  2.73k|                        {
  713|  2.73k|                            switch (c5)
  ------------------
  |  Branch (713:37): [True: 541, False: 2.19k]
  ------------------
  714|  2.73k|                            {
  715|    194|                                case 'D':
  ------------------
  |  Branch (715:33): [True: 194, False: 2.54k]
  ------------------
  716|    516|                                case 'd':
  ------------------
  |  Branch (716:33): [True: 322, False: 2.41k]
  ------------------
  717|    516|                                    return OpCode::MULTD;
  718|       |
  719|    194|                                case 'F':
  ------------------
  |  Branch (719:33): [True: 194, False: 2.54k]
  ------------------
  720|    516|                                case 'f':
  ------------------
  |  Branch (720:33): [True: 322, False: 2.41k]
  ------------------
  721|    516|                                    return OpCode::MULTF;
  722|       |
  723|    322|                                case 'I':
  ------------------
  |  Branch (723:33): [True: 322, False: 2.41k]
  ------------------
  724|    773|                                case 'i':
  ------------------
  |  Branch (724:33): [True: 451, False: 2.28k]
  ------------------
  725|    773|                                    return OpCode::MULTI;
  726|       |
  727|    194|                                case 'U':
  ------------------
  |  Branch (727:33): [True: 194, False: 2.54k]
  ------------------
  728|    388|                                case 'u':
  ------------------
  |  Branch (728:33): [True: 194, False: 2.54k]
  ------------------
  729|    388|                                    return OpCode::MULTU;
  730|  2.73k|                            }
  731|  2.73k|                        }
  732|  1.67k|                        break;
  733|       |
  734|  6.26k|                    case 'S':
  ------------------
  |  Branch (734:21): [True: 6.26k, False: 15.5k]
  ------------------
  735|  9.56k|                    case 's':
  ------------------
  |  Branch (735:21): [True: 3.30k, False: 18.5k]
  ------------------
  736|  9.56k|                        switch (c2)
  ------------------
  |  Branch (736:33): [True: 543, False: 9.02k]
  ------------------
  737|  9.56k|                        {
  738|    572|                            case 'E':
  ------------------
  |  Branch (738:29): [True: 572, False: 8.99k]
  ------------------
  739|  1.32k|                            case 'e':
  ------------------
  |  Branch (739:29): [True: 753, False: 8.81k]
  ------------------
  740|  1.32k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (740:37): [True: 1.07k, False: 251]
  |  Branch (740:37): [True: 620, False: 705]
  |  Branch (740:53): [True: 863, False: 211]
  |  Branch (740:69): [True: 620, False: 243]
  ------------------
  741|    620|                                {
  742|    620|                                    return OpCode::SEQUI;
  743|    620|                                }
  744|    705|                                break;
  745|       |
  746|  1.74k|                            case 'G':
  ------------------
  |  Branch (746:29): [True: 1.74k, False: 7.82k]
  ------------------
  747|  1.94k|                            case 'g':
  ------------------
  |  Branch (747:29): [True: 206, False: 9.35k]
  ------------------
  748|  1.94k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (748:37): [True: 856, False: 1.09k]
  |  Branch (748:37): [True: 388, False: 1.55k]
  |  Branch (748:53): [True: 582, False: 274]
  |  Branch (748:69): [True: 388, False: 194]
  ------------------
  749|    388|                                {
  750|    388|                                    return OpCode::SGEUI;
  751|    388|                                }
  752|  1.55k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (752:42): [True: 1.06k, False: 492]
  |  Branch (752:42): [True: 516, False: 1.04k]
  |  Branch (752:58): [True: 840, False: 227]
  |  Branch (752:74): [True: 516, False: 324]
  ------------------
  753|    516|                                {
  754|    516|                                    return OpCode::SGTUI;
  755|    516|                                }
  756|  1.04k|                                break;
  757|       |
  758|  1.34k|                            case 'L':
  ------------------
  |  Branch (758:29): [True: 1.34k, False: 8.21k]
  ------------------
  759|  2.54k|                            case 'l':
  ------------------
  |  Branch (759:29): [True: 1.19k, False: 8.36k]
  ------------------
  760|  2.54k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (760:37): [True: 1.04k, False: 1.49k]
  |  Branch (760:37): [True: 388, False: 2.15k]
  |  Branch (760:53): [True: 794, False: 254]
  |  Branch (760:69): [True: 388, False: 406]
  ------------------
  761|    388|                                {
  762|    388|                                    return OpCode::SLEUI;
  763|    388|                                }
  764|  2.15k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (764:42): [True: 1.22k, False: 933]
  |  Branch (764:42): [True: 644, False: 1.51k]
  |  Branch (764:58): [True: 845, False: 381]
  |  Branch (764:74): [True: 644, False: 201]
  ------------------
  765|    644|                                {
  766|    644|                                    return OpCode::SLTUI;
  767|    644|                                }
  768|  1.51k|                                break;
  769|       |
  770|  1.51k|                            case 'N':
  ------------------
  |  Branch (770:29): [True: 629, False: 8.93k]
  ------------------
  771|  1.16k|                            case 'n':
  ------------------
  |  Branch (771:29): [True: 532, False: 9.03k]
  ------------------
  772|  1.16k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (772:37): [True: 919, False: 242]
  |  Branch (772:37): [True: 388, False: 773]
  |  Branch (772:53): [True: 590, False: 329]
  |  Branch (772:69): [True: 388, False: 202]
  ------------------
  773|    388|                                {
  774|    388|                                    return OpCode::SNEUI;
  775|    388|                                }
  776|    773|                                break;
  777|       |
  778|    834|                            case 'U':
  ------------------
  |  Branch (778:29): [True: 834, False: 8.72k]
  ------------------
  779|  2.04k|                            case 'u':
  ------------------
  |  Branch (779:29): [True: 1.20k, False: 8.35k]
  ------------------
  780|  2.04k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (780:37): [True: 1.84k, False: 194]
  |  Branch (780:37): [True: 388, False: 1.65k]
  |  Branch (780:53): [True: 879, False: 967]
  |  Branch (780:69): [True: 388, False: 491]
  ------------------
  781|    388|                                {
  782|    388|                                    return OpCode::SUBUI;
  783|    388|                                }
  784|  1.65k|                                break;
  785|  9.56k|                        }
  786|       |
  787|  6.23k|                        break;
  788|  21.8k|                }
  789|       |
  790|  15.5k|                break;
  791|  21.8k|            }
  792|       |
  793|       |            // 6 character OpCodes
  794|  15.5k|            case 6: {
  ------------------
  |  Branch (794:13): [True: 11.3k, False: 146k]
  ------------------
  795|  11.3k|                const char c1 = token[0u];
  796|  11.3k|                const char c2 = token[1u];
  797|  11.3k|                const char c3 = token[2u];
  798|  11.3k|                const char c4 = token[3u];
  799|  11.3k|                const char c5 = token[4u];
  800|  11.3k|                const char c6 = token[5u];
  801|       |
  802|  11.3k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (802:21): [True: 6.06k, False: 5.24k]
  |  Branch (802:21): [True: 5.28k, False: 6.02k]
  |  Branch (802:37): [True: 5.48k, False: 578]
  |  Branch (802:53): [True: 5.28k, False: 202]
  ------------------
  803|  5.28k|                {
  804|  5.28k|                    switch (c4)
  ------------------
  |  Branch (804:29): [True: 470, False: 4.81k]
  ------------------
  805|  5.28k|                    {
  806|  1.22k|                        case 'D':
  ------------------
  |  Branch (806:25): [True: 1.22k, False: 4.06k]
  ------------------
  807|  1.42k|                        case 'd':
  ------------------
  |  Branch (807:25): [True: 195, False: 5.09k]
  ------------------
  808|  1.42k|                            if (c5 == '2')
  ------------------
  |  Branch (808:33): [True: 1.22k, False: 194]
  ------------------
  809|  1.22k|                            {
  810|  1.22k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (810:37): [True: 516, False: 710]
  ------------------
  811|    516|                                {
  812|    516|                                    return OpCode::CVTD2F;
  813|    516|                                }
  814|    710|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (814:42): [True: 516, False: 194]
  ------------------
  815|    516|                                {
  816|    516|                                    return OpCode::CVTD2I;
  817|    516|                                }
  818|  1.22k|                            }
  819|    388|                            break;
  820|       |
  821|    974|                        case 'F':
  ------------------
  |  Branch (821:25): [True: 974, False: 4.31k]
  ------------------
  822|  1.29k|                        case 'f':
  ------------------
  |  Branch (822:25): [True: 325, False: 4.96k]
  ------------------
  823|  1.29k|                            if (c5 == '2')
  ------------------
  |  Branch (823:33): [True: 977, False: 322]
  ------------------
  824|    977|                            {
  825|    977|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (825:37): [True: 388, False: 589]
  ------------------
  826|    388|                                {
  827|    388|                                    return OpCode::CVTF2D;
  828|    388|                                }
  829|    589|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (829:42): [True: 395, False: 194]
  ------------------
  830|    395|                                {
  831|    395|                                    return OpCode::CVTF2I;
  832|    395|                                }
  833|    977|                            }
  834|    516|                            break;
  835|       |
  836|    516|                        case 'I':
  ------------------
  |  Branch (836:25): [True: 453, False: 4.83k]
  ------------------
  837|  2.09k|                        case 'i':
  ------------------
  |  Branch (837:25): [True: 1.64k, False: 3.64k]
  ------------------
  838|  2.09k|                            if (c5 == '2')
  ------------------
  |  Branch (838:33): [True: 1.64k, False: 452]
  ------------------
  839|  1.64k|                            {
  840|  1.64k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (840:37): [True: 676, False: 968]
  ------------------
  841|    676|                                {
  842|    676|                                    return OpCode::CVTI2D;
  843|    676|                                }
  844|    968|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (844:42): [True: 772, False: 196]
  ------------------
  845|    772|                                {
  846|    772|                                    return OpCode::CVTI2F;
  847|    772|                                }
  848|  1.64k|                            }
  849|  5.28k|                    }
  850|  5.28k|                }
  851|  6.02k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (851:26): [True: 2.78k, False: 3.24k]
  |  Branch (851:26): [True: 388, False: 5.63k]
  |  Branch (851:42): [True: 1.88k, False: 898]
  |  Branch (851:58): [True: 1.67k, False: 210]
  |  Branch (851:74): [True: 1.47k, False: 194]
  ------------------
  852|  6.02k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (852:26): [True: 772, False: 706]
  |  Branch (852:42): [True: 388, False: 384]
  ------------------
  853|    388|                {
  854|    388|                    return OpCode::MULTUI;
  855|    388|                }
  856|  7.66k|                break;
  857|  11.3k|            }
  858|       |
  859|       |            // 7 character OpCodes
  860|  7.66k|            case 7: {
  ------------------
  |  Branch (860:13): [True: 5.63k, False: 152k]
  ------------------
  861|  5.63k|                const char c1 = token[0u];
  862|  5.63k|                const char c2 = token[1u];
  863|  5.63k|                const char c3 = token[2u];
  864|  5.63k|                const char c4 = token[3u];
  865|  5.63k|                const char c5 = token[4u];
  866|  5.63k|                const char c6 = token[5u];
  867|  5.63k|                const char c7 = token[6u];
  868|       |
  869|  5.63k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (869:21): [True: 2.78k, False: 2.84k]
  |  Branch (869:21): [True: 2.26k, False: 3.36k]
  |  Branch (869:37): [True: 2.46k, False: 322]
  |  Branch (869:53): [True: 2.26k, False: 196]
  ------------------
  870|  2.26k|                {
  871|  2.26k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (871:25): [True: 1.11k, False: 1.15k]
  |  Branch (871:25): [True: 516, False: 1.75k]
  |  Branch (871:41): [True: 917, False: 202]
  |  Branch (871:54): [True: 723, False: 194]
  |  Branch (871:70): [True: 516, False: 207]
  ------------------
  872|    516|                    {
  873|    516|                        return OpCode::MOVI2FP;
  874|    516|                    }
  875|  1.75k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (875:25): [True: 1.10k, False: 653]
  |  Branch (875:25): [True: 516, False: 1.23k]
  |  Branch (875:41): [True: 906, False: 194]
  |  Branch (875:57): [True: 710, False: 196]
  |  Branch (875:70): [True: 516, False: 194]
  ------------------
  876|    516|                    {
  877|    516|                        return OpCode::MOVFP2I;
  878|    516|                    }
  879|  1.75k|                }
  880|  4.59k|                break;
  881|  5.63k|            }
  882|       |
  883|  4.59k|            default: {
  ------------------
  |  Branch (883:13): [True: 3.31k, False: 154k]
  ------------------
  884|  3.31k|                break;
  885|  5.63k|            }
  886|   158k|        }
  887|       |
  888|       |        // None found
  889|  97.3k|        return OpCode::NONE;
  890|   158k|    }
_ZN3dlx3iceEcc:
   15|   249k|    {
   16|   249k|        constexpr const char diff = 'a' - 'A';
   17|   249k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (17:16): [True: 83.9k, False: 165k]
  |  Branch (17:28): [True: 70.9k, False: 94.7k]
  ------------------
   18|   249k|    }

_ZN3dlx10ParseErrorC2Ev:
   18|   122k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  186|  1.64k|    {
  187|  1.64k|        ParseError err;
  188|       |
  189|  1.64k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  190|  1.64k|        err.m_LineNumber                           = line_number;
  191|  1.64k|        err.m_Column                               = column;
  192|  1.64k|        err.unexpected_argument_type.expected_type = expected_type;
  193|  1.64k|        err.unexpected_argument_type.actual_type   = actual_type;
  194|       |
  195|  1.64k|        return err;
  196|  1.64k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  201|  1.64k|    {
  202|  1.64k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  203|  1.64k|                                                         token.GetColumn().unsafe(), expected_type,
  204|  1.64k|                                                         actual_type);
  205|  1.64k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  209|    322|    {
  210|    322|        ParseError err;
  211|       |
  212|    322|        err.m_Type              = ParseError::Type::InvalidNumber;
  213|    322|        err.m_LineNumber        = line_number;
  214|    322|        err.m_Column            = column;
  215|    322|        err.invalid_number.text = text;
  216|       |
  217|    322|        return err;
  218|    322|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  221|    322|    {
  222|    322|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  223|    322|                                                token.GetColumn().unsafe(), token.GetText());
  224|    322|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  228|      2|    {
  229|      2|        ParseError err;
  230|       |
  231|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  232|      2|        err.m_LineNumber = line_number;
  233|      2|        err.m_Column     = column;
  234|       |
  235|      2|        return err;
  236|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  239|      2|    {
  240|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  241|      2|                                                                     token.GetColumn().unsafe());
  242|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  247|  32.9k|    {
  248|  32.9k|        ParseError err;
  249|       |
  250|  32.9k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  251|  32.9k|        err.m_LineNumber                   = line_number;
  252|  32.9k|        err.m_Column                       = column;
  253|  32.9k|        err.unexpected_token.expected_type = expected_type;
  254|  32.9k|        err.unexpected_token.actual_type   = actual_type;
  255|       |
  256|  32.9k|        return err;
  257|  32.9k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  261|  32.9k|    {
  262|  32.9k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  263|  32.9k|                                                  token.GetColumn().unsafe(), expected_type,
  264|  32.9k|                                                  token.GetType());
  265|  32.9k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  270|  23.1k|    {
  271|  23.1k|        ParseError err;
  272|       |
  273|  23.1k|        err.m_Type                         = ParseError::Type::ReservedIdentifier;
  274|  23.1k|        err.m_LineNumber                   = line_number;
  275|  23.1k|        err.m_Column                       = column;
  276|  23.1k|        err.reserved_identifier.identifier = identifier;
  277|       |
  278|  23.1k|        return err;
  279|  23.1k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorERKNS_5TokenE:
  282|    194|    {
  283|    194|        return ConstructReservedIdentifierParseError(token.GetLineNumber().unsafe(),
  284|    194|                                                     token.GetColumn().unsafe(), token.GetText());
  285|    194|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  290|  20.9k|    {
  291|  20.9k|        ParseError err;
  292|       |
  293|  20.9k|        err.m_Type                              = ParseError::Type::InvalidLabelIdentifier;
  294|  20.9k|        err.m_LineNumber                        = line_number;
  295|  20.9k|        err.m_Column                            = column;
  296|  20.9k|        err.invalid_label_identifier.identifier = identifier;
  297|       |
  298|  20.9k|        return err;
  299|  20.9k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  302|  20.9k|    {
  303|  20.9k|        return ConstructInvalidLabelIdentifierParseError(
  304|  20.9k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  305|  20.9k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  312|  9.45k|    {
  313|  9.45k|        ParseError err;
  314|       |
  315|  9.45k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  316|  9.45k|        err.m_LineNumber                     = line_number;
  317|  9.45k|        err.m_Column                         = column;
  318|  9.45k|        err.label_already_defined.label_name = label_name;
  319|  9.45k|        err.label_already_defined.at_line    = at_line;
  320|  9.45k|        err.label_already_defined.at_column  = at_column;
  321|       |
  322|  9.45k|        return err;
  323|  9.45k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  327|  9.45k|    {
  328|  9.45k|        return ConstructLabelAlreadyDefinedParseError(
  329|  9.45k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  330|  9.45k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  331|  9.45k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  335|  21.8k|    {
  336|  21.8k|        ParseError err;
  337|       |
  338|  21.8k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  339|  21.8k|        err.m_LineNumber = line_number;
  340|  21.8k|        err.m_Column     = column;
  341|       |
  342|  21.8k|        return err;
  343|  21.8k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  346|  21.8k|    {
  347|  21.8k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  348|  21.8k|                                                        token.GetColumn().unsafe());
  349|  21.8k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  354|  5.19k|    {
  355|  5.19k|        ParseError err;
  356|       |
  357|  5.19k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  358|  5.19k|        err.m_LineNumber               = line_number;
  359|  5.19k|        err.m_Column                   = column;
  360|  5.19k|        err.too_few_arguments.required = required;
  361|  5.19k|        err.too_few_arguments.provided = provided;
  362|       |
  363|  5.19k|        return err;
  364|  5.19k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  368|  5.19k|    {
  369|  5.19k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  370|  5.19k|                                                  token.GetColumn().unsafe(), required, provided);
  371|  5.19k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  375|  6.65k|    {
  376|  6.65k|        ParseError err;
  377|       |
  378|  6.65k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  379|  6.65k|        err.m_LineNumber           = line_number;
  380|  6.65k|        err.m_Column               = column;
  381|  6.65k|        err.empty_label.label_name = label_name;
  382|       |
  383|  6.65k|        return err;
  384|  6.65k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  387|  6.65k|    {
  388|  6.65k|        return ConstructEmptyLabelParseError(
  389|  6.65k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  390|  6.65k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (390:17): [True: 5.98k, False: 668]
  ------------------
  391|  5.98k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  392|  6.65k|                        token.GetText());
  393|  6.65k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  397|    297|    {
  398|    297|        ParseError err;
  399|       |
  400|    297|        err.m_Type       = ParseError::Type::TooManyComma;
  401|    297|        err.m_LineNumber = line_number;
  402|    297|        err.m_Column     = column;
  403|       |
  404|    297|        return err;
  405|    297|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  408|    297|    {
  409|    297|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  410|    297|                                               token.GetColumn().unsafe());
  411|    297|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   16|   122k|    {
   17|   122k|        m_ParseErrors.emplace_back(phi::move(error));
   18|   122k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  4.24k|    {
  181|  4.24k|        ParsedProgram program;
  182|       |
  183|  4.24k|        program.m_Tokens = tokens;
  184|       |
  185|  4.24k|        phi::boolean line_has_instruction{false};
  186|  4.24k|        phi::usize   label_count{0u};
  187|       |
  188|   150k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 145k, False: 4.24k]
  ------------------
  189|   145k|        {
  190|   145k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   145k|            switch (current_token.GetType())
  195|   145k|            {
  196|       |                // Ignore comments
  197|    683|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 683, False: 145k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|    683|                    break;
  200|       |
  201|  19.9k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 19.9k, False: 125k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  19.9k|                    line_has_instruction = false;
  204|  19.9k|                    break;
  205|       |
  206|  61.0k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 61.0k, False: 84.7k]
  ------------------
  207|  61.0k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 4.10k, False: 56.9k]
  ------------------
  208|  4.10k|                    {
  209|  4.10k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  4.10k|                                current_token, Token::Type::NewLine));
  211|  4.10k|                        break;
  212|  4.10k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  56.9k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 9.76k, False: 47.2k]
  ------------------
  217|  9.76k|                    {
  218|  9.76k|                        program.AddParseError(
  219|  9.76k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  9.76k|                        break;
  221|  9.76k|                    }
  222|       |
  223|  47.2k|                    phi::string_view label_name = current_token.GetText();
  224|  47.2k|                    label_name.remove_suffix(1u);
  225|       |
  226|  47.2k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 22.9k, False: 24.2k]
  ------------------
  227|  22.9k|                    {
  228|  22.9k|                        program.AddParseError(ConstructReservedIdentifierParseError(
  229|  22.9k|                                current_token.GetLineNumber().unsafe(),
  230|  22.9k|                                current_token.GetColumn().unsafe(), label_name));
  231|  22.9k|                        break;
  232|  22.9k|                    }
  233|       |
  234|  24.2k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 7.67k, False: 16.5k]
  ------------------
  235|  7.67k|                    {
  236|  7.67k|                        program.AddParseError(
  237|  7.67k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  7.67k|                        break;
  239|  7.67k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  16.5k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 9.45k, False: 7.09k]
  ------------------
  243|  9.45k|                    {
  244|       |                        // Find first defintions of label
  245|  9.45k|                        const Token* first_label_definition =
  246|  9.45k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  9.45k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  9.45k|                                    {
  249|  9.45k|                                        phi::string_view token_label_name = t.GetText();
  250|  9.45k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  9.45k|                                        if (token_label_name == label_name)
  253|  9.45k|                                        {
  254|  9.45k|                                            return true;
  255|  9.45k|                                        }
  256|  9.45k|                                    }
  257|       |
  258|  9.45k|                                    return false;
  259|  9.45k|                                });
  260|       |
  261|  9.45k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  9.45k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  9.45k|                                current_token, *first_label_definition));
  265|  9.45k|                        break;
  266|  9.45k|                    }
  267|       |
  268|  7.09k|                    program.m_JumpData[label_name] =
  269|  7.09k|                            static_cast<phi::uint32_t>(program.m_Instructions.size());
  270|  7.09k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  7.09k|                    break;
  276|  16.5k|                }
  277|       |
  278|  38.5k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 38.5k, False: 107k]
  ------------------
  279|  38.5k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 21.8k, False: 16.7k]
  ------------------
  280|  21.8k|                    {
  281|  21.8k|                        program.AddParseError(
  282|  21.8k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  21.8k|                        break;
  284|  21.8k|                    }
  285|       |
  286|  16.7k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  16.7k|                    PHI_ASSERT(current_token.HasHint());
  290|  16.7k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  16.7k|                    const InstructionInfo& info = LookUpInstructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  16.7k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  16.7k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  16.7k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  16.7k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  16.7k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  16.7k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  16.7k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  27.9k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 25.4k, False: 2.57k]
  ------------------
  312|  25.4k|                    {
  313|       |                        // Get next token
  314|  25.4k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 845, False: 24.5k]
  ------------------
  315|    845|                        {
  316|    845|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    845|                                    current_token, number_of_argument_required.unsafe(),
  318|    845|                                    argument_num.unsafe()));
  319|    845|                            break;
  320|    845|                        }
  321|       |
  322|  24.5k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  24.5k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 7.83k, False: 16.7k]
  ------------------
  326|  7.83k|                        {
  327|  7.83k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 297, False: 7.53k]
  ------------------
  328|    297|                            {
  329|    297|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    297|                            }
  331|       |
  332|  7.83k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  7.83k|                            continue;
  335|  7.83k|                        }
  336|       |
  337|  16.7k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 4.35k, False: 12.3k]
  ------------------
  338|  4.35k|                        {
  339|  4.35k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  4.35k|                                    token, number_of_argument_required.unsafe(),
  341|  4.35k|                                    argument_num.unsafe()));
  342|  4.35k|                            break;
  343|  4.35k|                        }
  344|       |
  345|  12.3k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  12.3k|                                parse_instruction_argument(
  347|  12.3k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  12.3k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 8.95k, False: 3.42k]
  ------------------
  349|  8.95k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  8.95k|                            break;
  352|  8.95k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  3.42k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  3.42k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  3.42k|                        argument_num++;
  359|  3.42k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  3.42k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  16.7k|                    program.m_Instructions.emplace_back(instruction);
  367|  16.7k|                    line_has_instruction = true;
  368|  16.7k|                    break;
  369|  38.5k|                }
  370|       |
  371|  25.5k|                default:
  ------------------
  |  Branch (371:17): [True: 25.5k, False: 120k]
  ------------------
  372|  25.5k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  25.5k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 15.3k, False: 10.2k]
  ------------------
  374|  15.3k|                    {
  375|  15.3k|                        expected_token_type = Token::Type::NewLine;
  376|  15.3k|                    }
  377|       |
  378|  25.5k|                    program.AddParseError(
  379|  25.5k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  25.5k|                    break;
  381|   145k|            }
  382|   145k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  4.24k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 549, False: 3.69k]
  ------------------
  386|    549|        {
  387|  8.17k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 7.62k, False: 549]
  ------------------
  388|  7.62k|            {
  389|  7.62k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  7.62k|                const Token& token = *it;
  392|  7.62k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 6.65k, False: 975]
  ------------------
  393|  6.65k|                {
  394|  6.65k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  6.65k|                    --label_count;
  396|  6.65k|                }
  397|  7.62k|            }
  398|    549|        }
  399|       |
  400|  4.24k|        return program;
  401|  4.24k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  4.24k|    {
  405|  4.24k|        TokenStream tokens = Tokenize(source);
  406|  4.24k|        return Parse(tokens);
  407|  4.24k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  12.3k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  12.3k|        switch (token.GetType())
   37|  12.3k|        {
   38|  1.34k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 1.34k, False: 11.0k]
  ------------------
   39|  1.34k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 569, False: 779]
  ------------------
   40|  1.34k|                                          ArgumentType::AddressDisplacement))
   41|    569|                {
   42|    569|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    569|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    569|                    return {};
   46|    569|                }
   47|       |
   48|       |                // Get address displacement
   49|    779|                PHI_ASSERT(token.HasHint());
   50|       |
   51|    779|                phi::int16_t value = static_cast<phi::int16_t>(token.GetHint());
   52|       |
   53|    779|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 2, False: 777]
  ------------------
   54|      2|                {
   55|      2|                    program.AddParseError(
   56|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      2|                    return {};
   58|      2|                }
   59|       |
   60|    777|                auto         it           = tokens.current_position();
   61|    777|                const Token& first_token  = tokens.consume();
   62|    777|                const Token& second_token = tokens.consume();
   63|    777|                const Token& third_token  = tokens.consume();
   64|       |
   65|    777|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 195, False: 582]
  ------------------
   66|    195|                {
   67|    195|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    195|                            first_token, Token::Type::OpenBracket));
   69|    195|                    return {};
   70|    195|                }
   71|       |
   72|       |                // Second token is the register
   73|    582|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 194, False: 388]
  ------------------
   74|    194|                {
   75|    194|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|    194|                            second_token, Token::Type::RegisterInt));
   77|    194|                    return {};
   78|    194|                }
   79|       |
   80|    388|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 194, False: 194]
  ------------------
   81|    194|                {
   82|    194|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|    194|                            third_token, Token::Type::ClosingBracket));
   84|    194|                    return {};
   85|    194|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|    194|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|    194|                return ConstructInstructionArgumentAddressDisplacement(
   94|    194|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|    388|            }
   96|  1.05k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 1.05k, False: 11.3k]
  ------------------
   97|  1.05k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 194, False: 859]
  ------------------
   98|    194|                {
   99|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    194|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    194|                    return {};
  102|    194|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|    859|                return ConstructInstructionArgumentRegisterInt(
  108|    859|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  1.05k|            }
  110|    389|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 389, False: 11.9k]
  ------------------
  111|    389|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 194, False: 195]
  ------------------
  112|    194|                {
  113|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    194|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    194|                    return {};
  116|    194|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|    195|                return ConstructInstructionArgumentRegisterFloat(
  122|    195|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|    389|            }
  124|    194|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 194, False: 12.1k]
  ------------------
  125|    194|                program.AddParseError(ConstructReservedIdentifierParseError(token));
  126|       |
  127|    194|                return {};
  128|    389|            }
  129|  5.90k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 5.90k, False: 6.47k]
  ------------------
  130|       |                // Parse as Label
  131|  5.90k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 370, False: 5.53k]
  ------------------
  132|    370|                {
  133|    370|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|    370|                            token, expected_argument_type, ArgumentType::Label));
  135|    370|                    return {};
  136|    370|                }
  137|       |
  138|  5.53k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 5.53k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentifierParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  5.53k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 3.55k, False: 1.97k]
  ------------------
  145|  3.55k|                {
  146|  3.55k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  3.55k|                    return {};
  148|  3.55k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  1.97k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  5.53k|            }
  154|    840|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 840, False: 11.5k]
  ------------------
  155|    840|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 322, False: 518]
  ------------------
  156|    322|                {
  157|    322|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    322|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    322|                    return {};
  160|    322|                }
  161|       |
  162|    518|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 196, False: 322]
  ------------------
  163|    196|                {
  164|    196|                    return ConstructInstructionArgumentImmediateValue(
  165|    196|                            static_cast<phi::int16_t>(token.GetHint()));
  166|    196|                }
  167|       |
  168|    322|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    322|                return {};
  170|    518|            }
  171|       |
  172|  2.65k|            default:
  ------------------
  |  Branch (172:13): [True: 2.65k, False: 9.72k]
  ------------------
  173|  2.65k|                program.AddParseError(
  174|  2.65k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  2.65k|                return {};
  176|  12.3k|        }
  177|  12.3k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  42.1k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  42.1k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 36.6k, False: 5.49k]
  ------------------
  248|  36.6k|                                    {
  249|  36.6k|                                        phi::string_view token_label_name = t.GetText();
  250|  36.6k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  36.6k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 9.45k, False: 27.1k]
  ------------------
  253|  9.45k|                                        {
  254|  9.45k|                                            return true;
  255|  9.45k|                                        }
  256|  36.6k|                                    }
  257|       |
  258|  32.6k|                                    return false;
  259|  42.1k|                                });

_ZN3dlx9ProcessorC2Ev:
   62|      1|    {
   63|       |        // Mark R0 as ready only
   64|      1|        m_IntRegisters[0].SetReadOnly(true);
   65|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  349|    212|    {
  350|    212|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (350:13): [True: 0, False: 212]
  ------------------
  351|      0|        {
  352|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  353|      0|            return false;
  354|      0|        }
  355|       |
  356|    212|        m_CurrentProgram = &program;
  357|       |
  358|    212|        m_ProgramCounter               = 0u;
  359|    212|        m_Halted                       = false;
  360|    212|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  361|    212|        m_LastRaisedException          = Exception::None;
  362|    212|        m_CurrentStepCount             = 0u;
  363|       |
  364|    212|        return true;
  365|    212|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   10|   162k|    {
   11|   162k|        if (token.length() == 2u)
  ------------------
  |  Branch (11:13): [True: 24.6k, False: 138k]
  ------------------
   12|  24.6k|        {
   13|  24.6k|            const char first_char = token[0u];
   14|  24.6k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (14:17): [True: 1.25k, False: 23.4k]
  |  Branch (14:38): [True: 1.30k, False: 22.1k]
  ------------------
   15|  2.55k|            {
   16|  2.55k|                const char second_char = token[1u];
   17|  2.55k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (17:21): [True: 2.36k, False: 199]
  |  Branch (17:43): [True: 1.92k, False: 435]
  ------------------
   18|  1.92k|                {
   19|  1.92k|                    return static_cast<IntRegisterID>(second_char - '0');
   20|  1.92k|                }
   21|  2.55k|            }
   22|  24.6k|        }
   23|   138k|        else if (token.length() == 3u)
  ------------------
  |  Branch (23:18): [True: 37.9k, False: 100k]
  ------------------
   24|  37.9k|        {
   25|  37.9k|            const char first_char = token[0u];
   26|  37.9k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (26:17): [True: 1.86k, False: 36.0k]
  |  Branch (26:38): [True: 272, False: 35.7k]
  ------------------
   27|  2.14k|            {
   28|  2.14k|                const char second_char = token[1u];
   29|  2.14k|                const char third_char  = token[2u];
   30|       |
   31|  2.14k|                switch (second_char)
   32|  2.14k|                {
   33|    606|                    case '1': {
  ------------------
  |  Branch (33:21): [True: 606, False: 1.53k]
  ------------------
   34|    606|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (34:29): [True: 412, False: 194]
  |  Branch (34:50): [True: 218, False: 194]
  ------------------
   35|    218|                        {
   36|    218|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   37|    218|                        }
   38|    388|                        break;
   39|    606|                    }
   40|    668|                    case '2': {
  ------------------
  |  Branch (40:21): [True: 668, False: 1.47k]
  ------------------
   41|    668|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (41:29): [True: 474, False: 194]
  |  Branch (41:50): [True: 280, False: 194]
  ------------------
   42|    280|                        {
   43|    280|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   44|    280|                        }
   45|    388|                        break;
   46|    668|                    }
   47|    583|                    case '3': {
  ------------------
  |  Branch (47:21): [True: 583, False: 1.55k]
  ------------------
   48|    583|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (48:29): [True: 194, False: 389]
  |  Branch (48:50): [True: 194, False: 195]
  ------------------
   49|    388|                        {
   50|    388|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   51|    388|                        }
   52|    195|                        break;
   53|    583|                    }
   54|    283|                    default: {
  ------------------
  |  Branch (54:21): [True: 283, False: 1.85k]
  ------------------
   55|    283|                        break;
   56|    583|                    }
   57|  2.14k|                }
   58|  2.14k|            }
   59|  37.9k|        }
   60|       |
   61|   160k|        return IntRegisterID::None;
   62|   162k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|   160k|    {
   66|   160k|        if (token.length() == 2u)
  ------------------
  |  Branch (66:13): [True: 22.7k, False: 137k]
  ------------------
   67|  22.7k|        {
   68|  22.7k|            const char first_char = token[0u];
   69|  22.7k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (69:17): [True: 938, False: 21.8k]
  |  Branch (69:38): [True: 788, False: 21.0k]
  ------------------
   70|  1.72k|            {
   71|  1.72k|                const char second_char = token[1u];
   72|  1.72k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (72:21): [True: 1.49k, False: 228]
  |  Branch (72:43): [True: 872, False: 626]
  ------------------
   73|    872|                {
   74|    872|                    return static_cast<FloatRegisterID>(second_char - '0');
   75|    872|                }
   76|  1.72k|            }
   77|  22.7k|        }
   78|   137k|        else if (token.length() == 3u)
  ------------------
  |  Branch (78:18): [True: 37.0k, False: 100k]
  ------------------
   79|  37.0k|        {
   80|  37.0k|            const char first_char = token[0u];
   81|  37.0k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (81:17): [True: 2.24k, False: 34.7k]
  |  Branch (81:38): [True: 889, False: 33.9k]
  ------------------
   82|  3.13k|            {
   83|  3.13k|                const char second_char = token[1u];
   84|  3.13k|                const char third_char  = token[2u];
   85|       |
   86|  3.13k|                switch (second_char)
   87|  3.13k|                {
   88|    972|                    case '1': {
  ------------------
  |  Branch (88:21): [True: 972, False: 2.16k]
  ------------------
   89|    972|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (89:29): [True: 778, False: 194]
  |  Branch (89:50): [True: 456, False: 322]
  ------------------
   90|    456|                        {
   91|    456|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   92|    456|                        }
   93|    516|                        break;
   94|    972|                    }
   95|    585|                    case '2': {
  ------------------
  |  Branch (95:21): [True: 585, False: 2.54k]
  ------------------
   96|    585|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (96:29): [True: 391, False: 194]
  |  Branch (96:50): [True: 197, False: 194]
  ------------------
   97|    197|                        {
   98|    197|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
   99|    197|                        }
  100|    388|                        break;
  101|    585|                    }
  102|    582|                    case '3': {
  ------------------
  |  Branch (102:21): [True: 582, False: 2.55k]
  ------------------
  103|    582|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (103:29): [True: 194, False: 388]
  |  Branch (103:50): [True: 194, False: 194]
  ------------------
  104|    388|                        {
  105|    388|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  106|    388|                        }
  107|    194|                        break;
  108|    582|                    }
  109|    993|                    default: {
  ------------------
  |  Branch (109:21): [True: 993, False: 2.13k]
  ------------------
  110|    993|                        break;
  111|    582|                    }
  112|  3.13k|                }
  113|  3.13k|            }
  114|  37.0k|        }
  115|       |
  116|   158k|        return FloatRegisterID::None;
  117|   160k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  120|   140k|    {
  121|   140k|        if (token.length() == 4u)
  ------------------
  |  Branch (121:13): [True: 31.7k, False: 108k]
  ------------------
  122|  31.7k|        {
  123|  31.7k|            const char c1 = token[0u];
  124|  31.7k|            const char c2 = token[1u];
  125|  31.7k|            const char c3 = token[2u];
  126|  31.7k|            const char c4 = token[3u];
  127|       |
  128|  31.7k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (128:21): [True: 891, False: 30.8k]
  |  Branch (128:34): [True: 636, False: 30.1k]
  |  Branch (128:49): [True: 196, False: 1.33k]
  |  Branch (128:62): [True: 1.05k, False: 280]
  ------------------
  129|  31.7k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (129:21): [True: 598, False: 649]
  |  Branch (129:34): [True: 452, False: 197]
  |  Branch (129:49): [True: 578, False: 472]
  |  Branch (129:62): [True: 4, False: 468]
  ------------------
  130|  31.7k|        }
  131|       |
  132|   108k|        return false;
  133|   140k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   26|   127k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   36|  45.1k|    {}
_ZNK3dlx5Token7GetTypeEv:
   39|   456k|    {
   40|   456k|        return m_Type;
   41|   456k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   49|   445k|    {
   50|   445k|        return m_LineNumber;
   51|   445k|    }
_ZNK3dlx5Token9GetColumnEv:
   54|   891k|    {
   55|   891k|        return m_Column;
   56|   891k|    }
_ZNK3dlx5Token9GetLengthEv:
   59|   610k|    {
   60|   610k|        return m_Text.length();
   61|   610k|    }
_ZNK3dlx5Token7GetTextEv:
   64|   204k|    {
   65|   204k|        return m_Text;
   66|   204k|    }
_ZNK3dlx5Token7HasHintEv:
   78|  18.0k|    {
   79|  18.0k|        return m_HasHint;
   80|  18.0k|    }
_ZNK3dlx5Token7GetHintEv:
   83|  18.9k|    {
   84|  18.9k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   85|  18.9k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   86|  18.9k|                   m_Type == Type::ImmediateInteger);
   87|  18.9k|        PHI_ASSERT(m_HasHint);
   88|       |
   89|  18.9k|        return m_Hint;
   90|  18.9k|    }

_ZN3dlx11TokenStream8finalizeEv:
   28|  4.24k|    {
   29|       |#if defined(PHI_DEBUG)
   30|       |        PHI_ASSERT(!m_Finalized);
   31|       |#endif
   32|       |
   33|  4.24k|        m_Iterator = 0u;
   34|       |#if defined(PHI_DEBUG)
   35|       |        m_Finalized = true;
   36|       |#endif
   37|  4.24k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   49|    779|    {
   50|    779|        return x + m_Iterator <= m_Tokens.size();
   51|    779|    }
_ZNK3dlx11TokenStream8has_moreEv:
   54|   175k|    {
   55|   175k|        return m_Iterator < m_Tokens.size();
   56|   175k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   59|   172k|    {
   60|   172k|        return m_Iterator >= m_Tokens.size();
   61|   172k|    }
_ZN3dlx11TokenStream7consumeEv:
   74|   172k|    {
   75|   172k|        PHI_ASSERT(!reached_end());
   76|       |#if defined(PHI_DEBUG)
   77|       |        PHI_ASSERT(m_Finalized);
   78|       |#endif
   79|       |
   80|   172k|        return m_Tokens.at(m_Iterator++.unsafe());
   81|   172k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  154|    777|    {
  155|    777|        return m_Iterator;
  156|    777|    }
_ZN3dlx11TokenStream12set_positionEN3phi7integerImEE:
  159|    194|    {
  160|       |#if defined(PHI_DEBUG)
  161|       |        PHI_ASSERT(m_Finalized);
  162|       |#endif
  163|       |
  164|    194|        m_Iterator = pos;
  165|    194|    }
_ZNK3dlx11TokenStream5beginEv:
  168|  4.24k|    {
  169|       |#if defined(PHI_DEBUG)
  170|       |        //PHI_ASSERT(m_Finalized);
  171|       |#endif
  172|       |
  173|  4.24k|        return m_Tokens.begin();
  174|  4.24k|    }
_ZNK3dlx11TokenStream3endEv:
  186|  4.24k|    {
  187|       |#if defined(PHI_DEBUG)
  188|       |        //PHI_ASSERT(m_Finalized);
  189|       |#endif
  190|       |
  191|  4.24k|        return m_Tokens.end();
  192|  4.24k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  204|    549|    {
  205|       |#if defined(PHI_DEBUG)
  206|       |        //PHI_ASSERT(m_Finalized);
  207|       |#endif
  208|       |
  209|    549|        return m_Tokens.rbegin();
  210|    549|    }
_ZNK3dlx11TokenStream4rendEv:
  213|  7.62k|    {
  214|       |#if defined(PHI_DEBUG)
  215|       |        //PHI_ASSERT(m_Finalized);
  216|       |#endif
  217|       |
  218|  7.62k|        return m_Tokens.rend();
  219|  7.62k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  4.24k|    {
   66|  4.24k|        TokenStream tokens;
   67|       |
   68|  4.24k|        phi::string_view current_token;
   69|       |
   70|  4.24k|        phi::u64 current_line_number{1u};
   71|  4.24k|        phi::u64 current_column{1u};
   72|  4.24k|        phi::u64 token_begin{0u};
   73|       |
   74|  4.24k|        phi::boolean parsing_comment{false};
   75|       |
   76|   503k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 499k, False: 4.24k]
  ------------------
   77|   499k|        {
   78|   499k|            const char c{source.at(i)};
   79|       |
   80|   499k|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 24.4k, False: 474k]
  ------------------
   81|  24.4k|            {
   82|  24.4k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 3.40k, False: 21.0k]
  ------------------
   83|  3.40k|                {
   84|       |                    // Skip empty lines
   85|  3.40k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  3.40k|                                        current_line_number, current_column);
   87|       |
   88|  3.40k|                    parsing_comment = false;
   89|  3.40k|                    current_line_number += 1u;
   90|  3.40k|                    current_column = 1u;
   91|  3.40k|                    continue;
   92|  3.40k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  21.0k|                tokens.emplace_back(ParseToken(
   96|  21.0k|                        source.substring_view(
   97|  21.0k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  21.0k|                                current_token.length()),
   99|  21.0k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  21.0k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  21.0k|                                    current_line_number, current_column);
  103|       |
  104|  21.0k|                current_token   = phi::string_view{};
  105|  21.0k|                parsing_comment = false;
  106|  21.0k|                current_line_number += 1u;
  107|  21.0k|                current_column = 0u;
  108|  21.0k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|   474k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 709, False: 474k]
  |  Branch (110:34): [True: 801, False: 473k]
  ------------------
  111|  1.51k|            {
  112|  1.51k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 273, False: 1.23k]
  ------------------
  113|    273|                {
  114|    273|                    token_begin = i;
  115|    273|                }
  116|  1.23k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 827, False: 410]
  ------------------
  117|    827|                {
  118|    827|                    tokens.emplace_back(ParseToken(
  119|    827|                            source.substring_view(
  120|    827|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|    827|                                    current_token.length()),
  122|    827|                            current_line_number, current_column - current_token.length()));
  123|    827|                    token_begin   = i;
  124|    827|                    current_token = phi::string_view{};
  125|    827|                }
  126|       |
  127|  1.51k|                parsing_comment = true;
  128|  1.51k|                current_token   = source.substring_view(
  129|  1.51k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  1.51k|                        current_token.length() + 1u);
  131|  1.51k|            }
  132|   473k|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 692, False: 472k]
  ------------------
  133|    692|            {
  134|       |                // simply append the character
  135|    692|                current_token = source.substring_view(
  136|    692|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|    692|                        current_token.length() + 1u);
  138|    692|            }
  139|   472k|            else
  140|   472k|            {
  141|       |                // Not parsing a comment
  142|   472k|                switch (c)
  143|   472k|                {
  144|  4.87k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 4.87k, False: 467k]
  ------------------
  145|  12.3k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 7.44k, False: 465k]
  ------------------
  146|  12.3k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 0, False: 472k]
  ------------------
  147|  12.3k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 768, False: 11.5k]
  ------------------
  148|    768|                        {
  149|    768|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|    768|                            continue;
  152|    768|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  11.5k|                        tokens.emplace_back(ParseToken(
  156|  11.5k|                                source.substring_view(
  157|  11.5k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  11.5k|                                        current_token.length()),
  159|  11.5k|                                current_line_number, current_column - current_token.length()));
  160|  11.5k|                        current_token = phi::string_view{};
  161|  11.5k|                        break;
  162|  51.3k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 51.3k, False: 421k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  51.3k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 49.4k, False: 1.87k]
  ------------------
  165|  49.4k|                        {
  166|  49.4k|                            current_token = source.substring_view(
  167|  49.4k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  49.4k|                                    current_token.length() + 1u);
  169|  49.4k|                            tokens.emplace_back(ParseToken(
  170|  49.4k|                                    source.substring_view(
  171|  49.4k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  49.4k|                                                    token_begin),
  173|  49.4k|                                            current_token.length()),
  174|  49.4k|                                    current_line_number,
  175|  49.4k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  49.4k|                            current_token = phi::string_view{};
  178|  49.4k|                        }
  179|  1.87k|                        else
  180|  1.87k|                        {
  181|       |                            // Orphan colon
  182|  1.87k|                            token_begin = i;
  183|       |
  184|  1.87k|                            tokens.emplace_back(
  185|  1.87k|                                    Token::Type::Colon,
  186|  1.87k|                                    source.substring_view(
  187|  1.87k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  1.87k|                                                    token_begin),
  189|  1.87k|                                            1u),
  190|  1.87k|                                    current_line_number, current_column);
  191|  1.87k|                        }
  192|  51.3k|                        break;
  193|  22.0k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 22.0k, False: 450k]
  ------------------
  194|  26.6k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 4.63k, False: 468k]
  ------------------
  195|  31.5k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 4.88k, False: 467k]
  ------------------
  196|  31.5k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 28.8k, False: 2.72k]
  ------------------
  197|  28.8k|                        {
  198|  28.8k|                            tokens.emplace_back(ParseToken(
  199|  28.8k|                                    source.substring_view(
  200|  28.8k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  28.8k|                                                    token_begin),
  202|  28.8k|                                            current_token.length()),
  203|  28.8k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  28.8k|                            current_token = phi::string_view{};
  206|  28.8k|                        }
  207|       |
  208|  31.5k|                        Token::Type type;
  209|  31.5k|                        switch (c)
  210|  31.5k|                        {
  211|  22.0k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 22.0k, False: 9.51k]
  ------------------
  212|  22.0k|                                type = Token::Type::Comma;
  213|  22.0k|                                break;
  214|  4.63k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 4.63k, False: 26.9k]
  ------------------
  215|  4.63k|                                type = Token::Type::OpenBracket;
  216|  4.63k|                                break;
  217|  4.88k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 4.88k, False: 26.6k]
  ------------------
  218|  4.88k|                                type = Token::Type::ClosingBracket;
  219|  4.88k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 31.5k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  31.5k|#endif
  225|  31.5k|                        }
  226|       |
  227|  31.5k|                        token_begin = i;
  228|       |
  229|  31.5k|                        tokens.emplace_back(
  230|  31.5k|                                type,
  231|  31.5k|                                source.substring_view(
  232|  31.5k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  31.5k|                                        1u),
  234|  31.5k|                                current_line_number, current_column);
  235|  31.5k|                        break;
  236|       |
  237|   377k|                    default:
  ------------------
  |  Branch (237:21): [True: 377k, False: 95.2k]
  ------------------
  238|   377k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 113k, False: 263k]
  ------------------
  239|   113k|                        {
  240|   113k|                            token_begin = i;
  241|   113k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   377k|                        current_token = source.substring_view(
  245|   377k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   377k|                                current_token.length() + 1u);
  247|   472k|                }
  248|   472k|            }
  249|       |
  250|   495k|            current_column += 1u;
  251|   495k|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  4.24k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 3.16k, False: 1.07k]
  ------------------
  255|  3.16k|        {
  256|  3.16k|            tokens.emplace_back(
  257|  3.16k|                    ParseToken(source.substring_view(
  258|  3.16k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  3.16k|                                       current_token.length()),
  260|  3.16k|                               current_line_number, current_column - current_token.length()));
  261|  3.16k|        }
  262|       |
  263|       |        // Finalize token stream
  264|  4.24k|        tokens.finalize();
  265|       |
  266|  4.24k|        return tokens;
  267|  4.24k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   114k|    {
   14|   114k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 1.48k, False: 113k]
  |  Branch (14:13): [True: 1.08k, False: 113k]
  |  Branch (14:36): [True: 1.08k, False: 394]
  ------------------
   15|  1.08k|        {
   16|  1.08k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  1.08k|            if (number)
  ------------------
  |  Branch (18:17): [True: 250, False: 839]
  ------------------
   19|    250|            {
   20|    250|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|    250|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|    250|            }
   23|       |
   24|    839|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  1.08k|        }
   26|       |
   27|   113k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 500, False: 113k]
  |  Branch (27:13): [True: 1.10k, False: 112k]
  |  Branch (27:36): [True: 600, False: 112k]
  ------------------
   28|  1.10k|        {
   29|  1.10k|            return {Token::Type::Comment, token, line_number, column};
   30|  1.10k|        }
   31|       |
   32|   112k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 2.17k, False: 110k]
  ------------------
   33|  2.17k|        {
   34|  2.17k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  2.17k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  2.17k|        }
   37|       |
   38|   110k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 388, False: 110k]
  ------------------
   39|    388|        {
   40|    388|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|    388|        }
   42|       |
   43|   110k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 1.53k, False: 108k]
  ------------------
   44|  1.53k|        {
   45|  1.53k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  1.53k|                    static_cast<phi::uint32_t>(id)};
   47|  1.53k|        }
   48|       |
   49|   108k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 1.44k, False: 107k]
  ------------------
   50|  1.44k|        {
   51|  1.44k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  1.44k|                    static_cast<phi::uint32_t>(id)};
   53|  1.44k|        }
   54|       |
   55|   107k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 39.7k, False: 67.3k]
  ------------------
   56|  39.7k|        {
   57|  39.7k|            return {Token::Type::OpCode, token, line_number, column,
   58|  39.7k|                    static_cast<phi::uint32_t>(opcode)};
   59|  39.7k|        }
   60|       |
   61|  67.3k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|   107k|    }

_ZN6ImVec2C2Ev:
  267|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

LLVMFuzzerTestOneInput:
    9|  4.24k|{
   10|  4.24k|    static dlxemu::Emulator emu;
   11|       |
   12|  4.24k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   13|       |
   14|  4.24k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   15|       |
   16|       |    // Parse it
   17|  4.24k|    editor.SetText(std::string(source.data(), source.length().unsafe()));
   18|  4.24k|    editor.m_FullText = editor.GetText();
   19|       |
   20|  4.24k|    emu.ParseProgram(editor.m_FullText);
   21|       |
   22|  4.24k|    editor.ColorizeInternal();
   23|       |
   24|  4.24k|    return 0;
   25|  4.24k|}


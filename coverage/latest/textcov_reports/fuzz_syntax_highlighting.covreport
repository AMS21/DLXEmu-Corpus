_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  196|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  201|  24.2k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  239|  4.85k|    {
  240|  4.85k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (240:13): [True: 1.33k, False: 3.52k]
  ------------------
  241|  1.33k|        {
  242|  1.33k|            return m_Line < other.m_Line;
  243|  1.33k|        }
  244|       |
  245|  3.52k|        return m_Column <= other.m_Column;
  246|  4.85k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  250|      1|    {
  251|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (251:13): [True: 0, False: 1]
  ------------------
  252|      0|        {
  253|      0|            return m_Line > other.m_Line;
  254|      0|        }
  255|       |
  256|      1|        return m_Column >= other.m_Column;
  257|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  264|   839k|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  292|      1|    {
  293|      1|        Colorize();
  294|      1|        m_Lines.push_back(Line());
  295|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  298|      1|    {
  299|      1|        VerifyInternalState();
  300|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  348|  4.85k|    {
  349|  4.85k|        m_ErrorMarkers.clear();
  350|  4.85k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  413|  4.85k|    {
  414|  4.85k|        m_Breakpoints.clear();
  415|  4.85k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  493|  4.85k|    {
  494|  4.85k|        m_Lines.clear();
  495|  4.85k|        ResetState();
  496|  4.85k|        m_Lines.emplace_back(Line());
  497|       |
  498|  4.85k|        for (const char character : text)
  ------------------
  |  Branch (498:35): [True: 1.06M, False: 4.85k]
  ------------------
  499|  1.06M|        {
  500|  1.06M|            if (character == '\r' ||
  ------------------
  |  Branch (500:17): [True: 679, False: 1.06M]
  |  Branch (500:17): [True: 179k, False: 881k]
  ------------------
  501|  1.06M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (501:18): [True: 245k, False: 814k]
  |  Branch (501:48): [True: 203k, False: 41.9k]
  |  Branch (501:69): [True: 179k, False: 24.6k]
  ------------------
  502|   179k|            {
  503|       |                // ignore the carriage return character and control characters
  504|   179k|            }
  505|   881k|            else if (character == '\n')
  ------------------
  |  Branch (505:22): [True: 41.9k, False: 839k]
  ------------------
  506|  41.9k|            {
  507|  41.9k|                m_Lines.emplace_back(Line());
  508|  41.9k|            }
  509|   839k|            else
  510|   839k|            {
  511|   839k|                m_Lines.back().emplace_back(
  512|   839k|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  513|   839k|            }
  514|  1.06M|        }
  515|       |
  516|  4.85k|        m_TextChanged = true;
  517|  4.85k|        m_ScrollToTop = true;
  518|       |
  519|  4.85k|        m_UndoBuffer.clear();
  520|  4.85k|        m_UndoIndex = 0u;
  521|       |
  522|  4.85k|        Colorize();
  523|  4.85k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  526|  4.85k|    {
  527|  4.85k|        const phi::u32 max_line = GetMaxLineNumber();
  528|       |
  529|  4.85k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  530|  4.85k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1493|      1|    {
 1494|       |        // Lines should never be empty
 1495|      1|        PHI_ASSERT(!m_Lines.empty());
 1496|       |
 1497|       |        // Verify Selection is still in a valid state
 1498|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1499|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1500|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1501|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1502|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1503|       |
 1504|       |        // Verify cursor position
 1505|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1506|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1507|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1508|       |
 1509|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1510|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1511|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1512|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1513|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1514|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1515|       |#endif
 1516|       |
 1517|       |        // Verify that all breakpoints are on existing lines
 1518|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1518:35): [True: 0, False: 1]
  ------------------
 1519|      0|        {
 1520|      0|            PHI_ASSERT(break_point != 0u);
 1521|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1522|      0|        }
 1523|       |
 1524|       |        // Verify that all error markers are on existing lines
 1525|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1525:34): [True: 0, False: 1]
  ------------------
 1526|      0|        {
 1527|      0|            const phi::u32 line_number = error_marker.first;
 1528|       |
 1529|      0|            PHI_ASSERT(line_number != 0u);
 1530|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1531|      0|        }
 1532|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1535|      1|    {
 1536|      1|        constexpr const static Palette palette = {{
 1537|      1|                0xff7f7f7f, // Default
 1538|      1|                0xffd69c56, // OpCode
 1539|      1|                0xff00ff00, // Register
 1540|      1|                0xff7070e0, // IntegerLiteral
 1541|      1|                0xff206020, // Comment
 1542|      1|                0xff101010, // Background
 1543|      1|                0xffe0e0e0, // Cursor
 1544|      1|                0x80a06020, // Selection
 1545|      1|                0x800020ff, // ErrorMarker
 1546|      1|                0x40f08000, // Breakpoint
 1547|      1|                0xff707000, // Line number
 1548|      1|                0x40000000, // Current line fill
 1549|      1|                0x40808080, // Current line fill (inactive)
 1550|      1|                0x40a0a0a0, // Current line edge
 1551|      1|        }};
 1552|       |
 1553|      1|        return palette;
 1554|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1721|  4.85k|    {
 1722|       |        // TODO: This is quite unreadable
 1723|  4.85k|        const phi::u32 to_line =
 1724|  4.85k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1724:17): [True: 4.85k, False: 0]
  ------------------
 1725|  4.85k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1726|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1727|       |
 1728|  4.85k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1729|  4.85k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1730|  4.85k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1731|  4.85k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1732|  4.85k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1838|  4.85k|    {
 1839|  4.85k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1840|  4.85k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1841|  4.85k|        PHI_ASSERT(start <= end);
 1842|       |
 1843|  4.85k|        std::string result;
 1844|       |
 1845|  4.85k|        phi::u32   lstart = start.m_Line;
 1846|  4.85k|        phi::u32   lend   = end.m_Line;
 1847|  4.85k|        phi::u32   istart = GetCharacterIndex(start);
 1848|  4.85k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1849|  4.85k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1850|  4.85k|        phi::usize size   = 0u;
 1851|       |
 1852|  51.6k|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1852:35): [True: 46.8k, False: 4.85k]
  ------------------
 1853|  46.8k|        {
 1854|  46.8k|            PHI_ASSERT(i < m_Lines.size());
 1855|  46.8k|            size += m_Lines[i.unsafe()].size();
 1856|  46.8k|        }
 1857|       |
 1858|  4.85k|        result.reserve((size + size / 8u).unsafe());
 1859|       |
 1860|   886k|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1860:16): [True: 731k, False: 155k]
  |  Branch (1860:16): [True: 881k, False: 4.85k]
  |  Branch (1860:33): [True: 150k, False: 4.85k]
  ------------------
 1861|   881k|        {
 1862|   881k|            PHI_ASSERT(lstart < m_Lines.size());
 1863|       |
 1864|   881k|            const Line& line = m_Lines[lstart.unsafe()];
 1865|   881k|            if (istart < line.size())
  ------------------
  |  Branch (1865:17): [True: 839k, False: 41.9k]
  ------------------
 1866|   839k|            {
 1867|   839k|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1868|   839k|                istart++;
 1869|   839k|            }
 1870|  41.9k|            else
 1871|  41.9k|            {
 1872|  41.9k|                istart = 0u;
 1873|  41.9k|                ++lstart;
 1874|       |
 1875|  41.9k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1875:21): [True: 41.9k, False: 0]
  ------------------
 1876|  41.9k|                {
 1877|  41.9k|                    result += '\n';
 1878|  41.9k|                }
 1879|  41.9k|            }
 1880|   881k|        }
 1881|       |
 1882|  4.85k|        return result;
 1883|  4.85k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2421|  9.70k|    {
 2422|  9.70k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2423|       |
 2424|  9.70k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2425|  9.70k|        phi::u32    index = 0u;
 2426|   545k|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2426:35): [True: 541k, False: 4.98k]
  |  Branch (2426:35): [True: 536k, False: 9.70k]
  |  Branch (2426:58): [True: 536k, False: 4.72k]
  ------------------
 2427|   536k|        {
 2428|   536k|            PHI_ASSERT(index < line.size());
 2429|   536k|            const Char character = line[index.unsafe()].m_Char;
 2430|       |
 2431|   536k|            if (character == '\t')
  ------------------
  |  Branch (2431:17): [True: 18.9k, False: 517k]
  ------------------
 2432|  18.9k|            {
 2433|  18.9k|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2434|  18.9k|            }
 2435|   517k|            else
 2436|   517k|            {
 2437|   517k|                ++column;
 2438|   517k|            }
 2439|       |
 2440|   536k|            index += UTF8CharLength(character);
 2441|   536k|        }
 2442|       |
 2443|  9.70k|        return index;
 2444|  9.70k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2493|  4.85k|    {
 2494|  4.85k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2494:13): [True: 0, False: 4.85k]
  ------------------
 2495|      0|        {
 2496|      0|            return 0u;
 2497|      0|        }
 2498|       |
 2499|  4.85k|        const Line& line = m_Lines[line_number.unsafe()];
 2500|  4.85k|        phi::u32    col  = 0u;
 2501|       |
 2502|   541k|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2502:32): [True: 536k, False: 4.85k]
  ------------------
 2503|   536k|        {
 2504|   536k|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2505|   536k|            if (character == '\t')
  ------------------
  |  Branch (2505:17): [True: 18.9k, False: 517k]
  ------------------
 2506|  18.9k|            {
 2507|  18.9k|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2508|  18.9k|            }
 2509|   517k|            else
 2510|   517k|            {
 2511|   517k|                col++;
 2512|   517k|            }
 2513|       |
 2514|   536k|            i += UTF8CharLength(character);
 2515|   536k|        }
 2516|       |
 2517|  4.85k|        return col;
 2518|  4.85k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2521|  4.85k|    {
 2522|  4.85k|        PHI_ASSERT(!m_Lines.empty());
 2523|       |
 2524|  4.85k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2525|  4.85k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3660|   303k|    {
 3661|   303k|        PaletteIndex palette_index{PaletteIndex::Default};
 3662|       |
 3663|       |        // Determine palette color
 3664|   303k|        switch (token.GetType())
 3665|   303k|        {
 3666|  2.64k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3666:13): [True: 2.64k, False: 301k]
  ------------------
 3667|  2.64k|                palette_index = PaletteIndex::Comment;
 3668|  2.64k|                break;
 3669|  1.42k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3669:13): [True: 1.42k, False: 302k]
  ------------------
 3670|  4.62k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3670:13): [True: 3.20k, False: 300k]
  ------------------
 3671|  4.62k|                palette_index = PaletteIndex::IntegerLiteral;
 3672|  4.62k|                break;
 3673|  70.3k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3673:13): [True: 70.3k, False: 233k]
  ------------------
 3674|  70.3k|                palette_index = PaletteIndex::OpCode;
 3675|  70.3k|                break;
 3676|  2.31k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3676:13): [True: 2.31k, False: 301k]
  ------------------
 3677|  4.80k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3677:13): [True: 2.48k, False: 301k]
  ------------------
 3678|  5.62k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3678:13): [True: 823, False: 302k]
  ------------------
 3679|  5.62k|                palette_index = PaletteIndex::Register;
 3680|  5.62k|                break;
 3681|  41.9k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3681:13): [True: 41.9k, False: 261k]
  ------------------
 3682|  41.9k|                return;
 3683|   178k|            default:
  ------------------
  |  Branch (3683:13): [True: 178k, False: 125k]
  ------------------
 3684|   178k|                break;
 3685|   303k|        }
 3686|       |
 3687|   261k|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3688|   261k|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3689|       |
 3690|   261k|        for (phi::u64 index{token.GetColumn() - 1u};
 3691|  1.06M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3691:14): [True: 805k, False: 261k]
  ------------------
 3692|   805k|        {
 3693|   805k|            PHI_ASSERT(index < line.size());
 3694|   805k|            line[index.unsafe()].m_ColorIndex = palette_index;
 3695|   805k|        }
 3696|   261k|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3699|  4.85k|    {
 3700|  4.85k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3701|       |
 3702|  4.85k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3702:38): [True: 303k, False: 4.85k]
  ------------------
 3703|   303k|        {
 3704|   303k|            ColorizeToken(token);
 3705|   303k|        }
 3706|  4.85k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3709|  4.85k|    {
 3710|  4.85k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3711|  4.85k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3712|  4.85k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3713|       |
 3714|       |        // Clear breakpoints and markers
 3715|  4.85k|        ClearBreakPoints();
 3716|  4.85k|        ClearErrorMarkers();
 3717|  4.85k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  134|   536k|{
  135|   536k|    return UTF8CharLength(static_cast<char>(characater));
  136|   536k|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  104|  1.07M|{
  105|  1.07M|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (105:9): [True: 688, False: 1.07M]
  ------------------
  106|    688|    {
  107|    688|        return 6_u8;
  108|    688|    }
  109|       |
  110|  1.07M|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (110:9): [True: 1.29k, False: 1.07M]
  ------------------
  111|  1.29k|    {
  112|  1.29k|        return 5_u8;
  113|  1.29k|    }
  114|       |
  115|  1.07M|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (115:9): [True: 1.18k, False: 1.06M]
  ------------------
  116|  1.18k|    {
  117|  1.18k|        return 4_u8;
  118|  1.18k|    }
  119|       |
  120|  1.06M|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (120:9): [True: 1.76k, False: 1.06M]
  ------------------
  121|  1.76k|    {
  122|  1.76k|        return 3_u8;
  123|  1.76k|    }
  124|       |
  125|  1.06M|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (125:9): [True: 7.36k, False: 1.06M]
  ------------------
  126|  7.36k|    {
  127|  7.36k|        return 2_u8;
  128|  7.36k|    }
  129|       |
  130|  1.06M|    return 1_u8;
  131|  1.06M|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  183|  4.85k|    {
  184|  4.85k|        return m_DLXProgram;
  185|  4.85k|    }
_ZN6dlxemu8Emulator12ParseProgramEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  188|  4.85k|    {
  189|  4.85k|        m_DLXProgram = dlx::Parser::Parse(source);
  190|       |
  191|  4.85k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (191:13): [True: 201, False: 4.64k]
  ------------------
  192|    201|        {
  193|    201|            m_Processor.LoadProgram(m_DLXProgram);
  194|    201|        }
  195|  4.85k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  208|  4.85k|    {
  209|  4.85k|        return m_CodeEditor;
  210|  4.85k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   38|      1|    {
   39|      1|        Shutdown();
   40|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  108|      1|    {
  109|      1|        if (imgui_initialized)
  ------------------
  |  Branch (109:13): [True: 0, False: 1]
  ------------------
  110|      0|        {
  111|      0|            ShutdownImGui();
  112|      0|        }
  113|       |
  114|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (114:13): [True: 0, False: 1]
  ------------------
  115|      0|        {
  116|      0|            glfwDestroyWindow(m_Window);
  117|      0|        }
  118|       |
  119|      1|        if (glfw_initialized)
  ------------------
  |  Branch (119:13): [True: 0, False: 1]
  ------------------
  120|      0|        {
  121|      0|            glfwTerminate();
  122|      0|        }
  123|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  96.2k|        {
  173|  96.2k|            PHI_ASSERT(index < 3u);
  174|       |
  175|  96.2k|            switch (index.unsafe())
  176|  96.2k|            {
  177|  42.9k|                case 0:
  ------------------
  |  Branch (177:17): [True: 42.9k, False: 53.3k]
  ------------------
  178|  42.9k|                    return m_Arg1Type;
  179|       |
  180|  27.0k|                case 1:
  ------------------
  |  Branch (180:17): [True: 27.0k, False: 69.1k]
  ------------------
  181|  27.0k|                    return m_Arg2Type;
  182|       |
  183|  26.2k|                case 2:
  ------------------
  |  Branch (183:17): [True: 26.2k, False: 70.0k]
  ------------------
  184|  26.2k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 96.2k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  96.2k|#endif
  191|  96.2k|            }
  192|  96.2k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  25.7k|        {
  199|  25.7k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  25.7k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 24.4k, False: 1.31k]
  ------------------
  203|  24.4k|            {
  204|  24.4k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  24.4k|            }
  206|  25.7k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 14.4k, False: 11.3k]
  ------------------
  207|  14.4k|            {
  208|  14.4k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  14.4k|            }
  210|  25.7k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 7.01k, False: 18.7k]
  ------------------
  211|  7.01k|            {
  212|  7.01k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  213|  7.01k|            }
  214|       |
  215|  25.7k|            return number_of_argument_required;
  216|  25.7k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  25.7k|        {
  225|  25.7k|            return m_Executor;
  226|  25.7k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  13.6k|    {
   38|  13.6k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  13.6k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  13.6k|                                         static_cast<underlying_t>(rhs));
   42|  13.6k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  13.6k|    {
   55|  13.6k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  13.6k|        return static_cast<underlying_t>(type & test) != 0;
   58|  13.6k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  85.2k|    {
   31|  85.2k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 3.11k, False: 82.0k]
  ------------------
   32|  3.11k|        {
   33|  3.11k|            return true;
   34|  3.11k|        }
   35|       |
   36|  82.0k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 359, False: 81.7k]
  ------------------
   37|    359|        {
   38|    359|            return true;
   39|    359|        }
   40|       |
   41|  81.7k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 33.3k, False: 48.3k]
  ------------------
   42|  33.3k|        {
   43|  33.3k|            return true;
   44|  33.3k|        }
   45|       |
   46|  48.3k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 194, False: 48.1k]
  ------------------
   47|    194|        {
   48|    194|            return true;
   49|    194|        }
   50|       |
   51|  48.1k|        return false;
   52|  48.3k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  48.1k|    {
   56|  48.1k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 48.1k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  48.1k|        const char first_char = token.at(0u);
   62|       |
   63|  48.1k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 9.91k, False: 38.2k]
  ------------------
   64|  9.91k|        {
   65|  9.91k|            return phi::is_alpha(first_char);
   66|  9.91k|        }
   67|       |
   68|  38.2k|        phi::boolean just_under_scores = (first_char == '_');
   69|  38.2k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 4.52k, False: 33.7k]
  |  Branch (69:13): [True: 3.95k, False: 34.2k]
  |  Branch (69:43): [True: 3.95k, False: 569]
  ------------------
   70|  3.95k|        {
   71|  3.95k|            return false;
   72|  3.95k|        }
   73|       |
   74|   118k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 94.0k, False: 24.5k]
  ------------------
   75|  94.0k|        {
   76|  94.0k|            const char c{token.at(index)};
   77|       |
   78|  94.0k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 83.6k, False: 10.4k]
  ------------------
   79|  83.6k|            {
   80|  83.6k|                just_under_scores = false;
   81|  83.6k|            }
   82|  10.4k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 721, False: 9.69k]
  ------------------
   83|    721|            {
   84|    721|                continue;
   85|    721|            }
   86|  9.69k|            else
   87|  9.69k|            {
   88|  9.69k|                return false;
   89|  9.69k|            }
   90|  94.0k|        }
   91|       |
   92|  24.5k|        return !just_under_scores;
   93|  34.2k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|   196k|    {
  100|   196k|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 196k]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|   196k|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 24.2k, False: 171k]
  ------------------
  106|  24.2k|        {
  107|  24.2k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 2.52k, False: 21.7k]
  ------------------
  108|  2.52k|            {
  109|  2.52k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  2.52k|            }
  111|       |
  112|  21.7k|            return {};
  113|  24.2k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|   171k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 497, False: 171k]
  ------------------
  117|    497|        {
  118|    497|            return {};
  119|    497|        }
  120|       |
  121|   171k|        std::int32_t number{0};
  122|   171k|        phi::boolean is_negative{false};
  123|   171k|        phi::boolean starts_with_zero{false};
  124|   171k|        phi::boolean parsing_binary{false};
  125|   171k|        phi::boolean parsing_octal{false};
  126|   171k|        phi::boolean parsing_hexadecimal{false};
  127|   171k|        phi::boolean parsed_something{false};
  128|   171k|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|   188k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 185k, False: 2.50k]
  ------------------
  133|   185k|        {
  134|   185k|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|   185k|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 171k, False: 14.4k]
  ------------------
  138|   171k|            {
  139|   171k|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 549, False: 170k]
  ------------------
  140|    549|                {
  141|    549|                    continue;
  142|    549|                }
  143|       |
  144|   170k|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 1.60k, False: 169k]
  ------------------
  145|  1.60k|                {
  146|  1.60k|                    is_negative = true;
  147|  1.60k|                    continue;
  148|  1.60k|                }
  149|       |
  150|   169k|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 2.41k, False: 166k]
  ------------------
  151|  2.41k|                {
  152|  2.41k|                    starts_with_zero = true;
  153|  2.41k|                    continue;
  154|  2.41k|                }
  155|       |
  156|   166k|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 226, False: 166k]
  ------------------
  157|    226|                {
  158|    226|                    return {};
  159|    226|                }
  160|   166k|            }
  161|       |
  162|       |            // Second character
  163|   181k|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 6.37k, False: 174k]
  ------------------
  164|  6.37k|            {
  165|  6.37k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 2.41k, False: 3.95k]
  ------------------
  166|  2.41k|                {
  167|       |                    // Binary
  168|  2.41k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 216, False: 2.20k]
  |  Branch (168:37): [True: 350, False: 1.85k]
  ------------------
  169|    566|                    {
  170|    566|                        parsing_binary = true;
  171|    566|                        continue;
  172|    566|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  1.85k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 549, False: 1.30k]
  |  Branch (175:37): [True: 525, False: 777]
  ------------------
  176|  1.07k|                    {
  177|  1.07k|                        parsing_hexadecimal = true;
  178|  1.07k|                        continue;
  179|  1.07k|                    }
  180|       |
  181|       |                    // Octal
  182|    777|                    parsing_octal = true;
  183|    777|                }
  184|  6.37k|            }
  185|       |
  186|       |            // Handle seperators
  187|   179k|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 418, False: 179k]
  ------------------
  188|    418|            {
  189|    418|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 194, False: 224]
  ------------------
  190|    194|                {
  191|    194|                    return {};
  192|    194|                }
  193|       |
  194|    224|                parsed_separator = true;
  195|    224|                continue;
  196|    418|            }
  197|       |
  198|       |            // Check for over/underflow
  199|   179k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 4.12k, False: 174k]
  |  Branch (199:32): [True: 322, False: 3.80k]
  ------------------
  200|    322|            {
  201|       |                // Would underflow
  202|    322|                return {};
  203|    322|            }
  204|   178k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 174k, False: 3.80k]
  |  Branch (204:17): [True: 390, False: 178k]
  |  Branch (204:33): [True: 390, False: 174k]
  ------------------
  205|    390|            {
  206|       |                // Would overflow
  207|    390|                return {};
  208|    390|            }
  209|       |
  210|   178k|            parsed_separator = false;
  211|   178k|            parsed_something = true;
  212|       |
  213|   178k|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 589, False: 177k]
  ------------------
  214|    589|            {
  215|    589|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 201, False: 388]
  ------------------
  216|    201|                {
  217|    201|                    return {};
  218|    201|                }
  219|       |
  220|    388|                number <<= 1;
  221|    388|                number |= (c - '0');
  222|    388|            }
  223|   177k|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 976, False: 176k]
  ------------------
  224|    976|            {
  225|    976|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 587, False: 389]
  ------------------
  226|    587|                {
  227|    587|                    return {};
  228|    587|                }
  229|       |
  230|    389|                number <<= 3;
  231|    389|                number |= (c - '0');
  232|    389|            }
  233|   176k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 1.47k, False: 175k]
  ------------------
  234|  1.47k|            {
  235|  1.47k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 524, False: 952]
  ------------------
  236|    524|                {
  237|    524|                    return {};
  238|    524|                }
  239|       |
  240|    952|                number <<= 4;
  241|    952|                number |= phi::hex_digit_value(c).unsafe();
  242|    952|            }
  243|   175k|            else
  244|   175k|            {
  245|   175k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 166k, False: 9.16k]
  ------------------
  246|   166k|                {
  247|   166k|                    return {};
  248|   166k|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|  9.16k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 3.11k, False: 6.04k]
  |  Branch (251:36): [True: 324, False: 2.79k]
  ------------------
  252|    324|                {
  253|    324|                    return {};
  254|    324|                }
  255|       |
  256|  8.84k|                number *= 10;
  257|  8.84k|                number += (c - '0');
  258|  8.84k|            }
  259|   178k|        }
  260|       |
  261|  2.50k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 1.90k, False: 596]
  ------------------
  262|  1.90k|        {
  263|       |            // Check for over/underflow
  264|  1.90k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 636, False: 1.26k]
  |  Branch (264:32): [True: 203, False: 433]
  ------------------
  265|    203|            {
  266|       |                // Would underflow
  267|    203|                return {};
  268|    203|            }
  269|  1.70k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 1.26k, False: 433]
  |  Branch (269:17): [True: 378, False: 1.32k]
  |  Branch (269:33): [True: 378, False: 890]
  ------------------
  270|    378|            {
  271|       |                // Would overflow
  272|    378|                return {};
  273|    378|            }
  274|       |
  275|  1.32k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 433, False: 890]
  ------------------
  276|    433|            {
  277|    433|                return static_cast<std::int16_t>(-number);
  278|    433|            }
  279|       |
  280|    890|            return static_cast<std::int16_t>(number);
  281|  1.32k|        }
  282|       |
  283|    596|        return {};
  284|  2.50k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  16.7k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  16.7k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 168k, False: 0]
  ------------------
   64|   168k|            {
   65|   168k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 16.7k, False: 151k]
  ------------------
   66|  16.7k|                {
   67|  16.7k|                    return &token;
   68|  16.7k|                }
   69|   168k|            }
   70|       |
   71|      0|            return nullptr;
   72|  16.7k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  48.3k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  48.3k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  48.3k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   198k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   198k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   198k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  56.5k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  56.5k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  56.5k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  25.7k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  5.84k|    {
   25|  5.84k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  5.84k|        switch (argument_number.unsafe())
   28|  5.84k|        {
   29|  4.84k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 4.84k, False: 1.00k]
  ------------------
   30|  4.84k|                m_Arg1 = argument;
   31|  4.84k|                break;
   32|    624|            case 1u:
  ------------------
  |  Branch (32:13): [True: 624, False: 5.22k]
  ------------------
   33|    624|                m_Arg2 = argument;
   34|    624|                break;
   35|    380|            case 2u:
  ------------------
  |  Branch (35:13): [True: 380, False: 5.46k]
  ------------------
   36|    380|                m_Arg3 = argument;
   37|    380|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 5.84k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  5.84k|#endif
   42|  5.84k|        }
   43|  5.84k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  83.2k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  172|  1.32k|    {
  173|  1.32k|        InstructionArgument arg;
  174|  1.32k|        arg.m_Type                   = ArgumentType::IntRegister;
  175|  1.32k|        arg.register_int.register_id = id;
  176|  1.32k|        return arg;
  177|  1.32k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  180|    739|    {
  181|    739|        InstructionArgument arg;
  182|    739|        arg.m_Type                     = ArgumentType::FloatRegister;
  183|    739|        arg.register_float.register_id = id;
  184|    739|        return arg;
  185|    739|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  188|    581|    {
  189|    581|        InstructionArgument arg;
  190|    581|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  191|    581|        arg.immediate_value.signed_value = value;
  192|    581|        return arg;
  193|    581|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  197|    322|    {
  198|    322|        InstructionArgument arg;
  199|    322|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  200|    322|        arg.address_displacement.register_id  = id;
  201|    322|        arg.address_displacement.displacement = displacement;
  202|    322|        return arg;
  203|    322|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  206|  2.87k|    {
  207|  2.87k|        InstructionArgument arg;
  208|  2.87k|        arg.m_Type           = ArgumentType::Label;
  209|  2.87k|        arg.label.label_name = label_name;
  210|  2.87k|        return arg;
  211|  2.87k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  25.7k|    {
  453|  25.7k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  25.7k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|   267k|    {
   24|   267k|        switch (token.length().unsafe())
   25|   267k|        {
   26|       |            // 1 character OpCodes
   27|  31.5k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 31.5k, False: 235k]
  ------------------
   28|  31.5k|                const char c1 = token[0u];
   29|       |
   30|  31.5k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 11.2k, False: 20.3k]
  ------------------
   31|  11.2k|                {
   32|  11.2k|                    return OpCode::J;
   33|  11.2k|                }
   34|  20.3k|                break;
   35|  31.5k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|  36.6k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 36.6k, False: 230k]
  ------------------
   39|  36.6k|                const char c1 = token[0u];
   40|  36.6k|                const char c2 = token[1u];
   41|       |
   42|  36.6k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 19.8k, False: 16.7k]
  ------------------
   43|  36.6k|                {
   44|  1.98k|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 1.98k, False: 34.6k]
  ------------------
   45|  2.61k|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 630, False: 35.9k]
  ------------------
   46|  2.61k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 1.10k, False: 1.50k]
  ------------------
   47|  1.10k|                        {
   48|  1.10k|                            return OpCode::JR;
   49|  1.10k|                        }
   50|  1.50k|                        break;
   51|       |
   52|  3.26k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 3.26k, False: 33.3k]
  ------------------
   53|  5.39k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 2.13k, False: 34.4k]
  ------------------
   54|  5.39k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 2.01k, False: 3.38k]
  ------------------
   55|  5.39k|                        {
   56|    212|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 212, False: 5.18k]
  ------------------
   57|    698|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 486, False: 4.91k]
  ------------------
   58|    698|                                return OpCode::LB;
   59|    203|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 203, False: 5.19k]
  ------------------
   60|    431|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 228, False: 5.17k]
  ------------------
   61|    431|                                return OpCode::LD;
   62|    337|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 337, False: 5.06k]
  ------------------
   63|    891|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 554, False: 4.84k]
  ------------------
   64|    891|                                return OpCode::LF;
   65|    465|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 465, False: 4.93k]
  ------------------
   66|    978|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 513, False: 4.88k]
  ------------------
   67|    978|                                return OpCode::LH;
   68|    196|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 196, False: 5.20k]
  ------------------
   69|    391|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 195, False: 5.20k]
  ------------------
   70|    391|                                return OpCode::LW;
   71|  5.39k|                        }
   72|  2.01k|                        break;
   73|  2.01k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 421, False: 36.1k]
  ------------------
   74|  1.44k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 1.01k, False: 35.5k]
  ------------------
   75|  1.44k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 398, False: 1.04k]
  ------------------
   76|    398|                        {
   77|    398|                            return OpCode::OR;
   78|    398|                        }
   79|  1.04k|                        break;
   80|  3.55k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 3.55k, False: 33.0k]
  ------------------
   81|  7.32k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 3.76k, False: 32.8k]
  ------------------
   82|  7.32k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 2.04k, False: 5.28k]
  ------------------
   83|  7.32k|                        {
   84|    330|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 330, False: 6.99k]
  ------------------
   85|    658|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 328, False: 6.99k]
  ------------------
   86|    658|                                return OpCode::SB;
   87|  1.88k|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 1.88k, False: 5.44k]
  ------------------
   88|  2.33k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 450, False: 6.87k]
  ------------------
   89|  2.33k|                                return OpCode::SD;
   90|    456|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 456, False: 6.87k]
  ------------------
   91|    650|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 194, False: 7.13k]
  ------------------
   92|    650|                                return OpCode::SF;
   93|    229|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 229, False: 7.09k]
  ------------------
   94|  1.01k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 789, False: 6.53k]
  ------------------
   95|  1.01k|                                return OpCode::SH;
   96|    379|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 379, False: 6.94k]
  ------------------
   97|    626|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 247, False: 7.08k]
  ------------------
   98|    626|                                return OpCode::SW;
   99|  7.32k|                        }
  100|  2.04k|                        break;
  101|  36.6k|                }
  102|  26.4k|                break;
  103|  36.6k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|  52.2k|            case 3: {
  ------------------
  |  Branch (106:13): [True: 52.2k, False: 215k]
  ------------------
  107|  52.2k|                const char c1 = token[0u];
  108|  52.2k|                const char c2 = token[1u];
  109|  52.2k|                const char c3 = token[2u];
  110|       |
  111|  52.2k|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 13.5k, False: 38.6k]
  ------------------
  112|  52.2k|                {
  113|  3.08k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 3.08k, False: 49.1k]
  ------------------
  114|  3.43k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 355, False: 51.9k]
  ------------------
  115|  3.43k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 1.64k, False: 1.79k]
  |  Branch (115:29): [True: 1.04k, False: 2.38k]
  |  Branch (115:45): [True: 1.04k, False: 593]
  ------------------
  116|  1.04k|                        {
  117|  1.04k|                            return OpCode::ADD;
  118|  1.04k|                        }
  119|  2.38k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 1.13k, False: 1.25k]
  |  Branch (119:34): [True: 785, False: 1.60k]
  |  Branch (119:50): [True: 785, False: 348]
  ------------------
  120|    785|                        {
  121|    785|                            return OpCode::AND;
  122|    785|                        }
  123|  1.60k|                        break;
  124|       |
  125|  1.60k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 532, False: 51.7k]
  ------------------
  126|  1.46k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 937, False: 51.3k]
  ------------------
  127|  1.46k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 1.09k, False: 370]
  |  Branch (127:29): [True: 654, False: 815]
  |  Branch (127:45): [True: 654, False: 445]
  ------------------
  128|    654|                        {
  129|    654|                            return OpCode::DIV;
  130|    654|                        }
  131|    815|                        break;
  132|       |
  133|    815|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 806, False: 51.4k]
  ------------------
  134|  2.31k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 1.50k, False: 50.7k]
  ------------------
  135|  2.31k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 1.56k, False: 751]
  ------------------
  136|  1.56k|                        {
  137|  1.56k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 388, False: 1.17k]
  ------------------
  138|    388|                            {
  139|    388|                                return OpCode::EQD;
  140|    388|                            }
  141|  1.17k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 732, False: 444]
  ------------------
  142|    732|                            {
  143|    732|                                return OpCode::EQF;
  144|    732|                            }
  145|  1.56k|                        }
  146|  1.19k|                        break;
  147|       |
  148|  1.22k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 1.22k, False: 51.0k]
  ------------------
  149|  2.86k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 1.63k, False: 50.6k]
  ------------------
  150|  2.86k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 1.33k, False: 1.52k]
  ------------------
  151|  1.33k|                        {
  152|  1.33k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 421, False: 916]
  ------------------
  153|    421|                            {
  154|    421|                                return OpCode::GED;
  155|    421|                            }
  156|    916|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 516, False: 400]
  ------------------
  157|    516|                            {
  158|    516|                                return OpCode::GEF;
  159|    516|                            }
  160|  1.33k|                        }
  161|  1.52k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 1.30k, False: 223]
  ------------------
  162|  1.30k|                        {
  163|  1.30k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 516, False: 786]
  ------------------
  164|    516|                            {
  165|    516|                                return OpCode::GTD;
  166|    516|                            }
  167|    786|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 576, False: 210]
  ------------------
  168|    576|                            {
  169|    576|                                return OpCode::GTF;
  170|    576|                            }
  171|    786|                        }
  172|    833|                        break;
  173|       |
  174|  1.49k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 1.49k, False: 50.7k]
  ------------------
  175|  2.00k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 510, False: 51.7k]
  ------------------
  176|  2.00k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 889, False: 1.11k]
  |  Branch (176:29): [True: 397, False: 1.61k]
  |  Branch (176:45): [True: 397, False: 492]
  ------------------
  177|    397|                        {
  178|    397|                            return OpCode::JAL;
  179|    397|                        }
  180|  1.61k|                        break;
  181|       |
  182|  4.89k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 4.89k, False: 47.3k]
  ------------------
  183|  7.00k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 2.10k, False: 50.1k]
  ------------------
  184|  7.00k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 906, False: 6.09k]
  ------------------
  185|  7.00k|                        {
  186|    224|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 224, False: 6.78k]
  ------------------
  187|    646|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 422, False: 6.58k]
  ------------------
  188|    646|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 388, False: 258]
  ------------------
  189|    388|                                {
  190|    388|                                    return OpCode::LBU;
  191|    388|                                }
  192|    258|                                break;
  193|       |
  194|    622|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 622, False: 6.38k]
  ------------------
  195|  1.31k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 691, False: 6.31k]
  ------------------
  196|  1.31k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 516, False: 797]
  ------------------
  197|    516|                                {
  198|    516|                                    return OpCode::LED;
  199|    516|                                }
  200|    797|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 388, False: 409]
  ------------------
  201|    388|                                {
  202|    388|                                    return OpCode::LEF;
  203|    388|                                }
  204|    409|                                break;
  205|       |
  206|    995|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 995, False: 6.00k]
  ------------------
  207|  1.77k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 781, False: 6.22k]
  ------------------
  208|  1.77k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 650, False: 1.12k]
  ------------------
  209|    650|                                {
  210|    650|                                    return OpCode::LHI;
  211|    650|                                }
  212|  1.12k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 548, False: 578]
  ------------------
  213|    548|                                {
  214|    548|                                    return OpCode::LHU;
  215|    548|                                }
  216|    578|                                break;
  217|       |
  218|    578|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 478, False: 6.52k]
  ------------------
  219|  1.39k|                            case 't':
  ------------------
  |  Branch (219:29): [True: 916, False: 6.08k]
  ------------------
  220|  1.39k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 518, False: 876]
  ------------------
  221|    518|                                {
  222|    518|                                    return OpCode::LTD;
  223|    518|                                }
  224|    876|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 646, False: 230]
  ------------------
  225|    646|                                {
  226|    646|                                    return OpCode::LTF;
  227|    646|                                }
  228|    230|                                break;
  229|       |
  230|    325|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 325, False: 6.67k]
  ------------------
  231|    969|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 644, False: 6.36k]
  ------------------
  232|    969|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 763, False: 206]
  ------------------
  233|    763|                                {
  234|    763|                                    return OpCode::LWU;
  235|    763|                                }
  236|    206|                                break;
  237|  7.00k|                        }
  238|  2.58k|                        break;
  239|       |
  240|  2.58k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 2.00k, False: 50.2k]
  ------------------
  241|  4.19k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 2.18k, False: 50.0k]
  ------------------
  242|  4.19k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 2.15k, False: 2.03k]
  ------------------
  243|  2.15k|                        {
  244|  2.15k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 644, False: 1.51k]
  ------------------
  245|    644|                            {
  246|    644|                                return OpCode::NED;
  247|    644|                            }
  248|  1.51k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 779, False: 732]
  ------------------
  249|    779|                            {
  250|    779|                                return OpCode::NEF;
  251|    779|                            }
  252|  2.15k|                        }
  253|  2.03k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 1.61k, False: 423]
  |  Branch (253:34): [True: 1.41k, False: 625]
  |  Branch (253:50): [True: 1.41k, False: 202]
  ------------------
  254|  1.41k|                        {
  255|  1.41k|                            return OpCode::NOP;
  256|  1.41k|                        }
  257|       |
  258|  1.35k|                        break;
  259|       |
  260|  1.35k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 832, False: 51.4k]
  ------------------
  261|  1.69k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 862, False: 51.4k]
  ------------------
  262|  1.69k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 1.04k, False: 650]
  |  Branch (262:29): [True: 836, False: 858]
  |  Branch (262:45): [True: 836, False: 208]
  ------------------
  263|    836|                        {
  264|    836|                            return OpCode::ORI;
  265|    836|                        }
  266|    858|                        break;
  267|       |
  268|  8.39k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 8.39k, False: 43.8k]
  ------------------
  269|  12.3k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 3.98k, False: 48.2k]
  ------------------
  270|  12.3k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 996, False: 11.3k]
  ------------------
  271|  12.3k|                        {
  272|    698|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 698, False: 11.6k]
  ------------------
  273|  1.24k|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 545, False: 11.8k]
  ------------------
  274|  1.24k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 548, False: 695]
  ------------------
  275|    548|                                {
  276|    548|                                    return OpCode::SBU;
  277|    548|                                }
  278|    695|                                break;
  279|       |
  280|    695|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 685, False: 11.6k]
  ------------------
  281|  1.16k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 477, False: 11.9k]
  ------------------
  282|  1.16k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 551, False: 611]
  ------------------
  283|    551|                                {
  284|    551|                                    return OpCode::SEQ;
  285|    551|                                }
  286|    611|                                break;
  287|       |
  288|  1.13k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 1.13k, False: 11.2k]
  ------------------
  289|  1.51k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 383, False: 12.0k]
  ------------------
  290|  1.51k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 403, False: 1.11k]
  ------------------
  291|    403|                                {
  292|    403|                                    return OpCode::SGE;
  293|    403|                                }
  294|  1.11k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 584, False: 529]
  ------------------
  295|    584|                                {
  296|    584|                                    return OpCode::SGT;
  297|    584|                                }
  298|    529|                                break;
  299|       |
  300|    529|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 231, False: 12.1k]
  ------------------
  301|    624|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 393, False: 11.9k]
  ------------------
  302|    624|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 388, False: 236]
  ------------------
  303|    388|                                {
  304|    388|                                    return OpCode::SHU;
  305|    388|                                }
  306|    236|                                break;
  307|       |
  308|  1.74k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 1.74k, False: 10.6k]
  ------------------
  309|  2.77k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 1.03k, False: 11.3k]
  ------------------
  310|  2.77k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 614, False: 2.16k]
  ------------------
  311|  2.77k|                                {
  312|    195|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 195, False: 2.58k]
  ------------------
  313|    395|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 200, False: 2.57k]
  ------------------
  314|    395|                                        return OpCode::SLA;
  315|       |
  316|    197|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 197, False: 2.58k]
  ------------------
  317|    415|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 218, False: 2.56k]
  ------------------
  318|    415|                                        return OpCode::SLE;
  319|       |
  320|    226|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 226, False: 2.55k]
  ------------------
  321|    541|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 315, False: 2.46k]
  ------------------
  322|    541|                                        return OpCode::SLL;
  323|       |
  324|    198|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 198, False: 2.58k]
  ------------------
  325|    814|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 616, False: 2.16k]
  ------------------
  326|    814|                                        return OpCode::SLT;
  327|  2.77k|                                }
  328|    614|                                break;
  329|       |
  330|    614|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 544, False: 11.8k]
  ------------------
  331|    756|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 212, False: 12.1k]
  ------------------
  332|    756|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 477, False: 279]
  ------------------
  333|    477|                                {
  334|    477|                                    return OpCode::SNE;
  335|    477|                                }
  336|    279|                                break;
  337|       |
  338|    560|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 560, False: 11.8k]
  ------------------
  339|  1.72k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 1.16k, False: 11.2k]
  ------------------
  340|  1.72k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 408, False: 1.31k]
  ------------------
  341|    408|                                {
  342|    408|                                    return OpCode::SRA;
  343|    408|                                }
  344|  1.31k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 1.08k, False: 235]
  ------------------
  345|  1.08k|                                {
  346|  1.08k|                                    return OpCode::SRL;
  347|  1.08k|                                }
  348|    235|                                break;
  349|       |
  350|    618|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 618, False: 11.7k]
  ------------------
  351|    952|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 334, False: 12.0k]
  ------------------
  352|    952|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 644, False: 308]
  ------------------
  353|    644|                                {
  354|    644|                                    return OpCode::SUB;
  355|    644|                                }
  356|    308|                                break;
  357|       |
  358|    410|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 410, False: 11.9k]
  ------------------
  359|    628|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 218, False: 12.1k]
  ------------------
  360|    628|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 388, False: 240]
  ------------------
  361|    388|                                {
  362|    388|                                    return OpCode::SWU;
  363|    388|                                }
  364|    240|                                break;
  365|  12.3k|                        }
  366|       |
  367|  5.36k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 620, False: 51.6k]
  ------------------
  368|  6.06k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 703, False: 51.5k]
  ------------------
  369|  6.06k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 1.13k, False: 4.93k]
  |  Branch (369:29): [True: 776, False: 5.29k]
  |  Branch (369:45): [True: 776, False: 357]
  ------------------
  370|    776|                        {
  371|    776|                            return OpCode::XOR;
  372|    776|                        }
  373|  5.29k|                        break;
  374|  52.2k|                }
  375|  29.7k|                break;
  376|  52.2k|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  67.8k|            case 4: {
  ------------------
  |  Branch (379:13): [True: 67.8k, False: 199k]
  ------------------
  380|  67.8k|                const char c1 = token[0u];
  381|  67.8k|                const char c2 = token[1u];
  382|  67.8k|                const char c3 = token[2u];
  383|  67.8k|                const char c4 = token[3u];
  384|       |
  385|  67.8k|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 12.4k, False: 55.3k]
  ------------------
  386|  67.8k|                {
  387|  4.63k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 4.63k, False: 63.2k]
  ------------------
  388|  5.53k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 893, False: 66.9k]
  ------------------
  389|  5.53k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 367, False: 5.16k]
  ------------------
  390|  5.53k|                        {
  391|  2.12k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 2.12k, False: 3.40k]
  ------------------
  392|  3.42k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 1.30k, False: 4.23k]
  ------------------
  393|  3.42k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 3.20k, False: 226]
  ------------------
  394|  3.20k|                                {
  395|  3.20k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 796, False: 2.40k]
  ------------------
  396|  3.20k|                                    {
  397|    194|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 194, False: 3.00k]
  ------------------
  398|    391|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 197, False: 3.00k]
  ------------------
  399|    391|                                            return OpCode::ADDD;
  400|       |
  401|    195|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 195, False: 3.00k]
  ------------------
  402|    517|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 322, False: 2.88k]
  ------------------
  403|    517|                                            return OpCode::ADDF;
  404|       |
  405|    226|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 226, False: 2.97k]
  ------------------
  406|    516|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 290, False: 2.91k]
  ------------------
  407|    516|                                            return OpCode::ADDI;
  408|       |
  409|    469|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 469, False: 2.73k]
  ------------------
  410|    983|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 514, False: 2.68k]
  ------------------
  411|    983|                                            return OpCode::ADDU;
  412|  3.20k|                                    }
  413|  3.20k|                                }
  414|  1.02k|                                break;
  415|       |
  416|  1.53k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 1.53k, False: 3.99k]
  ------------------
  417|  1.73k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 197, False: 5.33k]
  ------------------
  418|  1.73k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 1.53k, False: 200]
  |  Branch (418:37): [True: 644, False: 1.09k]
  |  Branch (418:53): [True: 644, False: 892]
  ------------------
  419|    644|                                {
  420|    644|                                    return OpCode::ANDI;
  421|    644|                                }
  422|       |
  423|  1.09k|                                break;
  424|  5.53k|                        }
  425|  2.48k|                        break;
  426|       |
  427|  3.88k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 3.88k, False: 63.9k]
  ------------------
  428|  4.16k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 282, False: 67.5k]
  ------------------
  429|  4.16k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 283, False: 3.87k]
  ------------------
  430|  4.16k|                        {
  431|    586|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 586, False: 3.57k]
  ------------------
  432|    990|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 404, False: 3.75k]
  ------------------
  433|    990|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 635, False: 355]
  |  Branch (433:37): [True: 388, False: 602]
  |  Branch (433:53): [True: 388, False: 247]
  ------------------
  434|    388|                                {
  435|    388|                                    return OpCode::BEQZ;
  436|    388|                                }
  437|    602|                                break;
  438|       |
  439|  1.47k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 1.47k, False: 2.68k]
  ------------------
  440|  1.84k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 367, False: 3.79k]
  ------------------
  441|  1.84k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 1.45k, False: 390]
  ------------------
  442|  1.45k|                                {
  443|  1.45k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 452, False: 1.00k]
  ------------------
  444|    452|                                    {
  445|    452|                                        return OpCode::BFPF;
  446|    452|                                    }
  447|  1.00k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 777, False: 223]
  ------------------
  448|    777|                                    {
  449|    777|                                        return OpCode::BFPT;
  450|    777|                                    }
  451|  1.45k|                                }
  452|    613|                                break;
  453|       |
  454|    613|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 517, False: 3.64k]
  ------------------
  455|  1.04k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 530, False: 3.63k]
  ------------------
  456|  1.04k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 840, False: 207]
  |  Branch (456:37): [True: 516, False: 531]
  |  Branch (456:53): [True: 516, False: 324]
  ------------------
  457|    516|                                {
  458|    516|                                    return OpCode::BNEZ;
  459|    516|                                }
  460|  4.16k|                        }
  461|  2.02k|                        break;
  462|       |
  463|  2.02k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 1.94k, False: 65.9k]
  ------------------
  464|  5.96k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 4.01k, False: 63.8k]
  ------------------
  465|  5.96k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 5.50k, False: 454]
  |  Branch (465:29): [True: 4.16k, False: 1.79k]
  |  Branch (465:45): [True: 4.16k, False: 1.34k]
  ------------------
  466|  4.16k|                        {
  467|  4.16k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 741, False: 3.42k]
  ------------------
  468|  4.16k|                            {
  469|    323|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 323, False: 3.83k]
  ------------------
  470|    519|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 196, False: 3.96k]
  ------------------
  471|    519|                                    return OpCode::DIVD;
  472|       |
  473|    322|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 322, False: 3.83k]
  ------------------
  474|    645|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 323, False: 3.83k]
  ------------------
  475|    645|                                    return OpCode::DIVF;
  476|       |
  477|    359|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 359, False: 3.80k]
  ------------------
  478|  1.41k|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 1.05k, False: 3.10k]
  ------------------
  479|  1.41k|                                    return OpCode::DIVI;
  480|       |
  481|    354|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 354, False: 3.80k]
  ------------------
  482|    838|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 484, False: 3.67k]
  ------------------
  483|    838|                                    return OpCode::DIVU;
  484|  4.16k|                            }
  485|  4.16k|                        }
  486|  2.54k|                        break;
  487|       |
  488|  2.54k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 965, False: 66.9k]
  ------------------
  489|  1.97k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 1.01k, False: 66.8k]
  ------------------
  490|  1.97k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 1.65k, False: 321]
  |  Branch (490:29): [True: 676, False: 1.30k]
  |  Branch (490:45): [True: 1.03k, False: 625]
  |  Branch (490:61): [True: 676, False: 355]
  ------------------
  491|    676|                        {
  492|    676|                            return OpCode::HALT;
  493|    676|                        }
  494|  1.30k|                        break;
  495|       |
  496|  1.30k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 1.14k, False: 66.7k]
  ------------------
  497|  1.66k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 517, False: 67.3k]
  ------------------
  498|  1.66k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 1.14k, False: 516]
  |  Branch (498:29): [True: 388, False: 1.27k]
  |  Branch (498:45): [True: 818, False: 328]
  |  Branch (498:61): [True: 388, False: 430]
  ------------------
  499|    388|                        {
  500|    388|                            return OpCode::JALR;
  501|    388|                        }
  502|  1.27k|                        break;
  503|       |
  504|  1.27k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 1.09k, False: 66.7k]
  ------------------
  505|  3.55k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 2.45k, False: 65.4k]
  ------------------
  506|  3.55k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 1.88k, False: 1.66k]
  |  Branch (506:29): [True: 1.66k, False: 1.88k]
  |  Branch (506:45): [True: 1.66k, False: 222]
  ------------------
  507|  1.66k|                        {
  508|  1.66k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 516, False: 1.14k]
  ------------------
  509|    516|                            {
  510|    516|                                return OpCode::MOVD;
  511|    516|                            }
  512|  1.14k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 772, False: 377]
  ------------------
  513|    772|                            {
  514|    772|                                return OpCode::MOVF;
  515|    772|                            }
  516|  1.66k|                        }
  517|  1.88k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 1.59k, False: 295]
  |  Branch (517:34): [True: 850, False: 1.03k]
  |  Branch (517:50): [True: 1.22k, False: 371]
  |  Branch (517:66): [True: 850, False: 370]
  ------------------
  518|    850|                        {
  519|    850|                            return OpCode::MULT;
  520|    850|                        }
  521|  1.41k|                        break;
  522|       |
  523|  23.8k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 23.8k, False: 43.9k]
  ------------------
  524|  28.9k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 5.06k, False: 62.8k]
  ------------------
  525|  28.9k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 1.13k, False: 27.8k]
  ------------------
  526|  28.9k|                        {
  527|    649|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 649, False: 28.2k]
  ------------------
  528|  1.74k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 1.09k, False: 27.8k]
  ------------------
  529|  1.74k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 1.25k, False: 494]
  ------------------
  530|  1.25k|                                {
  531|  1.25k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 548, False: 703]
  ------------------
  532|    548|                                    {
  533|    548|                                        return OpCode::SEQI;
  534|    548|                                    }
  535|    703|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 393, False: 310]
  ------------------
  536|    393|                                    {
  537|    393|                                        return OpCode::SEQU;
  538|    393|                                    }
  539|  1.25k|                                }
  540|    804|                                break;
  541|       |
  542|  4.26k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 4.26k, False: 24.6k]
  ------------------
  543|  4.50k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 248, False: 28.6k]
  ------------------
  544|  4.50k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 2.56k, False: 1.94k]
  ------------------
  545|  2.56k|                                {
  546|  2.56k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 1.06k, False: 1.50k]
  ------------------
  547|  1.06k|                                    {
  548|  1.06k|                                        return OpCode::SGEI;
  549|  1.06k|                                    }
  550|  1.50k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 1.09k, False: 416]
  ------------------
  551|  1.09k|                                    {
  552|  1.09k|                                        return OpCode::SGEU;
  553|  1.09k|                                    }
  554|  2.56k|                                }
  555|  1.94k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 1.69k, False: 252]
  ------------------
  556|  1.69k|                                {
  557|  1.69k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 550, False: 1.14k]
  ------------------
  558|    550|                                    {
  559|    550|                                        return OpCode::SGTI;
  560|    550|                                    }
  561|  1.14k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 846, False: 294]
  ------------------
  562|    846|                                    {
  563|    846|                                        return OpCode::SGTU;
  564|    846|                                    }
  565|  1.69k|                                }
  566|    962|                                break;
  567|       |
  568|  3.93k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 3.93k, False: 25.0k]
  ------------------
  569|  6.20k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 2.27k, False: 26.6k]
  ------------------
  570|  6.20k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 452, False: 5.75k]
  ------------------
  571|  6.20k|                                {
  572|    555|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 555, False: 5.65k]
  ------------------
  573|    765|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 210, False: 5.99k]
  ------------------
  574|    765|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 548, False: 217]
  ------------------
  575|    548|                                        {
  576|    548|                                            return OpCode::SLAI;
  577|    548|                                        }
  578|    217|                                        break;
  579|       |
  580|    550|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 550, False: 5.65k]
  ------------------
  581|  1.79k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 1.24k, False: 4.96k]
  ------------------
  582|  1.79k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 684, False: 1.11k]
  ------------------
  583|    684|                                        {
  584|    684|                                            return OpCode::SLEI;
  585|    684|                                        }
  586|  1.11k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 724, False: 386]
  ------------------
  587|    724|                                        {
  588|    724|                                            return OpCode::SLEU;
  589|    724|                                        }
  590|    386|                                        break;
  591|       |
  592|    563|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 563, False: 5.64k]
  ------------------
  593|    757|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 194, False: 6.01k]
  ------------------
  594|    757|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 516, False: 241]
  ------------------
  595|    516|                                        {
  596|    516|                                            return OpCode::SLLI;
  597|    516|                                        }
  598|    241|                                        break;
  599|       |
  600|    800|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 800, False: 5.40k]
  ------------------
  601|  2.44k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 1.64k, False: 4.56k]
  ------------------
  602|  2.44k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 548, False: 1.89k]
  ------------------
  603|    548|                                        {
  604|    548|                                            return OpCode::SLTI;
  605|    548|                                        }
  606|  1.89k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 746, False: 1.14k]
  ------------------
  607|    746|                                        {
  608|    746|                                            return OpCode::SLTU;
  609|    746|                                        }
  610|  1.14k|                                        break;
  611|  6.20k|                                }
  612|       |
  613|  7.46k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 5.02k, False: 23.9k]
  ------------------
  614|  8.08k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 618, False: 28.3k]
  ------------------
  615|  8.08k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 5.73k, False: 2.34k]
  ------------------
  616|  5.73k|                                {
  617|  5.73k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 676, False: 5.05k]
  ------------------
  618|    676|                                    {
  619|    676|                                        return OpCode::SNEI;
  620|    676|                                    }
  621|  5.05k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 4.05k, False: 1.00k]
  ------------------
  622|  4.05k|                                    {
  623|  4.05k|                                        return OpCode::SNEU;
  624|  4.05k|                                    }
  625|  5.73k|                                }
  626|  3.35k|                                break;
  627|       |
  628|  3.35k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 344, False: 28.5k]
  ------------------
  629|  2.43k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 2.08k, False: 26.8k]
  ------------------
  630|  2.43k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 777, False: 1.65k]
  |  Branch (630:37): [True: 388, False: 2.04k]
  |  Branch (630:53): [True: 388, False: 389]
  ------------------
  631|    388|                                {
  632|    388|                                    return OpCode::SRAI;
  633|    388|                                }
  634|  2.04k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 1.64k, False: 396]
  |  Branch (634:42): [True: 1.30k, False: 740]
  |  Branch (634:58): [True: 1.30k, False: 344]
  ------------------
  635|  1.30k|                                {
  636|  1.30k|                                    return OpCode::SRLI;
  637|  1.30k|                                }
  638|    740|                                break;
  639|       |
  640|  5.93k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 5.93k, False: 23.0k]
  ------------------
  641|  7.27k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 1.34k, False: 27.5k]
  ------------------
  642|  7.27k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 7.01k, False: 252]
  ------------------
  643|  7.01k|                                {
  644|  7.01k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 687, False: 6.33k]
  ------------------
  645|  7.01k|                                    {
  646|    322|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 322, False: 6.69k]
  ------------------
  647|    516|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 194, False: 6.82k]
  ------------------
  648|    516|                                            return OpCode::SUBD;
  649|       |
  650|    354|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 354, False: 6.66k]
  ------------------
  651|    709|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 355, False: 6.66k]
  ------------------
  652|    709|                                            return OpCode::SUBF;
  653|       |
  654|  3.96k|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 3.96k, False: 3.05k]
  ------------------
  655|  4.16k|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 205, False: 6.81k]
  ------------------
  656|  4.16k|                                            return OpCode::SUBI;
  657|       |
  658|    485|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 485, False: 6.53k]
  ------------------
  659|    938|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 453, False: 6.56k]
  ------------------
  660|    938|                                            return OpCode::SUBU;
  661|  7.01k|                                    }
  662|  7.01k|                                }
  663|    939|                                break;
  664|  28.9k|                        }
  665|  7.93k|                        break;
  666|       |
  667|  7.93k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 1.69k, False: 66.1k]
  ------------------
  668|  1.91k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 217, False: 67.6k]
  ------------------
  669|  1.91k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 1.65k, False: 261]
  |  Branch (669:29): [True: 516, False: 1.39k]
  |  Branch (669:45): [True: 1.42k, False: 228]
  |  Branch (669:61): [True: 516, False: 909]
  ------------------
  670|    516|                        {
  671|    516|                            return OpCode::TRAP;
  672|    516|                        }
  673|  1.39k|                        break;
  674|  1.39k|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 1.29k, False: 66.5k]
  ------------------
  675|  1.67k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 387, False: 67.4k]
  ------------------
  676|  1.67k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 1.18k, False: 491]
  |  Branch (676:29): [True: 644, False: 1.03k]
  |  Branch (676:45): [True: 857, False: 329]
  |  Branch (676:61): [True: 644, False: 213]
  ------------------
  677|    644|                        {
  678|    644|                            return OpCode::XORI;
  679|    644|                        }
  680|  1.03k|                        break;
  681|  67.8k|                }
  682|  33.8k|                break;
  683|  67.8k|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|  41.1k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 41.1k, False: 226k]
  ------------------
  687|  41.1k|                const char c1 = token[0u];
  688|  41.1k|                const char c2 = token[1u];
  689|  41.1k|                const char c3 = token[2u];
  690|  41.1k|                const char c4 = token[3u];
  691|  41.1k|                const char c5 = token[4u];
  692|       |
  693|  41.1k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 7.90k, False: 33.2k]
  ------------------
  694|  41.1k|                {
  695|  2.62k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 2.62k, False: 38.4k]
  ------------------
  696|  3.09k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 467, False: 40.6k]
  ------------------
  697|  3.09k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 2.70k, False: 396]
  |  Branch (697:29): [True: 772, False: 2.32k]
  |  Branch (697:45): [True: 2.44k, False: 260]
  |  Branch (697:61): [True: 2.11k, False: 321]
  |  Branch (697:77): [True: 772, False: 1.34k]
  ------------------
  698|    772|                        {
  699|    772|                            return OpCode::ADDUI;
  700|    772|                        }
  701|  2.32k|                        break;
  702|       |
  703|  2.32k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 1.57k, False: 39.5k]
  ------------------
  704|  4.90k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 3.32k, False: 37.7k]
  ------------------
  705|  4.90k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 4.54k, False: 356]
  |  Branch (705:29): [True: 677, False: 4.22k]
  |  Branch (705:45): [True: 3.31k, False: 1.22k]
  |  Branch (705:61): [True: 1.51k, False: 1.80k]
  |  Branch (705:77): [True: 677, False: 835]
  ------------------
  706|    677|                        {
  707|    677|                            return OpCode::DIVUI;
  708|    677|                        }
  709|  4.22k|                        break;
  710|       |
  711|  4.22k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 2.53k, False: 38.5k]
  ------------------
  712|  4.64k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 2.11k, False: 38.9k]
  ------------------
  713|  4.64k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 3.91k, False: 731]
  |  Branch (713:29): [True: 3.25k, False: 1.39k]
  |  Branch (713:45): [True: 3.49k, False: 419]
  |  Branch (713:61): [True: 3.25k, False: 245]
  ------------------
  714|  3.25k|                        {
  715|  3.25k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 580, False: 2.67k]
  ------------------
  716|  3.25k|                            {
  717|    226|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 226, False: 3.02k]
  ------------------
  718|    580|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 354, False: 2.89k]
  ------------------
  719|    580|                                    return OpCode::MULTD;
  720|       |
  721|    255|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 255, False: 2.99k]
  ------------------
  722|    705|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 450, False: 2.80k]
  ------------------
  723|    705|                                    return OpCode::MULTF;
  724|       |
  725|    483|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 483, False: 2.76k]
  ------------------
  726|    805|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 322, False: 2.92k]
  ------------------
  727|    805|                                    return OpCode::MULTI;
  728|       |
  729|    386|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 386, False: 2.86k]
  ------------------
  730|    580|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 194, False: 3.05k]
  ------------------
  731|    580|                                    return OpCode::MULTU;
  732|  3.25k|                            }
  733|  3.25k|                        }
  734|  1.97k|                        break;
  735|       |
  736|  15.1k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 15.1k, False: 25.9k]
  ------------------
  737|  20.5k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 5.43k, False: 35.6k]
  ------------------
  738|  20.5k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 778, False: 19.7k]
  ------------------
  739|  20.5k|                        {
  740|    649|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 649, False: 19.9k]
  ------------------
  741|  2.21k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 1.56k, False: 19.0k]
  ------------------
  742|  2.21k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 1.85k, False: 359]
  |  Branch (742:37): [True: 1.34k, False: 871]
  |  Branch (742:53): [True: 1.60k, False: 248]
  |  Branch (742:69): [True: 1.34k, False: 264]
  ------------------
  743|  1.34k|                                {
  744|  1.34k|                                    return OpCode::SEQUI;
  745|  1.34k|                                }
  746|    871|                                break;
  747|       |
  748|  2.98k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 2.98k, False: 17.5k]
  ------------------
  749|  3.31k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 333, False: 20.2k]
  ------------------
  750|  3.31k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 1.58k, False: 1.73k]
  |  Branch (750:37): [True: 676, False: 2.64k]
  |  Branch (750:53): [True: 1.00k, False: 580]
  |  Branch (750:69): [True: 676, False: 327]
  ------------------
  751|    676|                                {
  752|    676|                                    return OpCode::SGEUI;
  753|    676|                                }
  754|  2.64k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 1.68k, False: 954]
  |  Branch (754:42): [True: 932, False: 1.71k]
  |  Branch (754:58): [True: 1.45k, False: 232]
  |  Branch (754:74): [True: 932, False: 525]
  ------------------
  755|    932|                                {
  756|    932|                                    return OpCode::SGTUI;
  757|    932|                                }
  758|  1.71k|                                break;
  759|       |
  760|  7.10k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 7.10k, False: 13.4k]
  ------------------
  761|  8.76k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 1.66k, False: 18.9k]
  ------------------
  762|  8.76k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 6.26k, False: 2.49k]
  |  Branch (762:37): [True: 5.60k, False: 3.15k]
  |  Branch (762:53): [True: 6.05k, False: 212]
  |  Branch (762:69): [True: 5.60k, False: 450]
  ------------------
  763|  5.60k|                                {
  764|  5.60k|                                    return OpCode::SLEUI;
  765|  5.60k|                                }
  766|  3.15k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 1.96k, False: 1.18k]
  |  Branch (766:42): [True: 836, False: 2.31k]
  |  Branch (766:58): [True: 1.16k, False: 801]
  |  Branch (766:74): [True: 836, False: 329]
  ------------------
  767|    836|                                {
  768|    836|                                    return OpCode::SLTUI;
  769|    836|                                }
  770|  2.31k|                                break;
  771|       |
  772|  2.31k|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 1.05k, False: 19.5k]
  ------------------
  773|  1.85k|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 794, False: 19.7k]
  ------------------
  774|  1.85k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 1.58k, False: 266]
  |  Branch (774:37): [True: 497, False: 1.35k]
  |  Branch (774:53): [True: 964, False: 620]
  |  Branch (774:69): [True: 497, False: 467]
  ------------------
  775|    497|                                {
  776|    497|                                    return OpCode::SNEUI;
  777|    497|                                }
  778|  1.35k|                                break;
  779|       |
  780|  1.35k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 1.28k, False: 19.2k]
  ------------------
  781|  3.64k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 2.35k, False: 18.2k]
  ------------------
  782|  3.64k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 3.43k, False: 206]
  |  Branch (782:37): [True: 1.22k, False: 2.42k]
  |  Branch (782:53): [True: 1.87k, False: 1.56k]
  |  Branch (782:69): [True: 1.22k, False: 651]
  ------------------
  783|  1.22k|                                {
  784|  1.22k|                                    return OpCode::SUBUI;
  785|  1.22k|                                }
  786|  2.42k|                                break;
  787|  20.5k|                        }
  788|       |
  789|  9.45k|                        break;
  790|  41.1k|                }
  791|       |
  792|  25.8k|                break;
  793|  41.1k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|  25.8k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 22.3k, False: 245k]
  ------------------
  797|  22.3k|                const char c1 = token[0u];
  798|  22.3k|                const char c2 = token[1u];
  799|  22.3k|                const char c3 = token[2u];
  800|  22.3k|                const char c4 = token[3u];
  801|  22.3k|                const char c5 = token[4u];
  802|  22.3k|                const char c6 = token[5u];
  803|       |
  804|  22.3k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 12.3k, False: 9.99k]
  |  Branch (804:21): [True: 11.6k, False: 10.6k]
  |  Branch (804:37): [True: 11.9k, False: 397]
  |  Branch (804:53): [True: 11.6k, False: 254]
  ------------------
  805|  11.6k|                {
  806|  11.6k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 504, False: 11.1k]
  ------------------
  807|  11.6k|                    {
  808|  2.12k|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 2.12k, False: 9.54k]
  ------------------
  809|  2.57k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 450, False: 11.2k]
  ------------------
  810|  2.57k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 2.12k, False: 451]
  ------------------
  811|  2.12k|                            {
  812|  2.12k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 1.36k, False: 758]
  ------------------
  813|  1.36k|                                {
  814|  1.36k|                                    return OpCode::CVTD2F;
  815|  1.36k|                                }
  816|    758|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 436, False: 322]
  ------------------
  817|    436|                                {
  818|    436|                                    return OpCode::CVTD2I;
  819|    436|                                }
  820|  2.12k|                            }
  821|    773|                            break;
  822|       |
  823|  4.37k|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 4.37k, False: 7.29k]
  ------------------
  824|  4.60k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 229, False: 11.4k]
  ------------------
  825|  4.60k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 4.31k, False: 292]
  ------------------
  826|  4.31k|                            {
  827|  4.31k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 1.54k, False: 2.77k]
  ------------------
  828|  1.54k|                                {
  829|  1.54k|                                    return OpCode::CVTF2D;
  830|  1.54k|                                }
  831|  2.77k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 2.25k, False: 517]
  ------------------
  832|  2.25k|                                {
  833|  2.25k|                                    return OpCode::CVTF2I;
  834|  2.25k|                                }
  835|  4.31k|                            }
  836|    809|                            break;
  837|       |
  838|    809|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 323, False: 11.3k]
  ------------------
  839|  3.98k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 3.65k, False: 8.01k]
  ------------------
  840|  3.98k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 3.65k, False: 331]
  ------------------
  841|  3.65k|                            {
  842|  3.65k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 2.02k, False: 1.62k]
  ------------------
  843|  2.02k|                                {
  844|  2.02k|                                    return OpCode::CVTI2D;
  845|  2.02k|                                }
  846|  1.62k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 964, False: 660]
  ------------------
  847|    964|                                {
  848|    964|                                    return OpCode::CVTI2F;
  849|    964|                                }
  850|  3.65k|                            }
  851|  11.6k|                    }
  852|  11.6k|                }
  853|  10.6k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 4.15k, False: 6.48k]
  |  Branch (853:26): [True: 612, False: 10.0k]
  |  Branch (853:42): [True: 2.77k, False: 1.37k]
  |  Branch (853:58): [True: 2.50k, False: 266]
  |  Branch (853:74): [True: 2.28k, False: 226]
  ------------------
  854|  10.6k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 1.18k, False: 1.09k]
  |  Branch (854:42): [True: 612, False: 576]
  ------------------
  855|    612|                {
  856|    612|                    return OpCode::MULTUI;
  857|    612|                }
  858|  13.1k|                break;
  859|  22.3k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|  13.1k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 11.9k, False: 255k]
  ------------------
  863|  11.9k|                const char c1 = token[0u];
  864|  11.9k|                const char c2 = token[1u];
  865|  11.9k|                const char c3 = token[2u];
  866|  11.9k|                const char c4 = token[3u];
  867|  11.9k|                const char c5 = token[4u];
  868|  11.9k|                const char c6 = token[5u];
  869|  11.9k|                const char c7 = token[6u];
  870|       |
  871|  11.9k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 4.27k, False: 7.67k]
  |  Branch (871:21): [True: 3.52k, False: 8.42k]
  |  Branch (871:37): [True: 3.84k, False: 423]
  |  Branch (871:53): [True: 3.52k, False: 328]
  ------------------
  872|  3.52k|                {
  873|  3.52k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 1.98k, False: 1.53k]
  |  Branch (873:25): [True: 772, False: 2.74k]
  |  Branch (873:41): [True: 1.72k, False: 268]
  |  Branch (873:54): [True: 1.36k, False: 358]
  |  Branch (873:70): [True: 772, False: 591]
  ------------------
  874|    772|                    {
  875|    772|                        return OpCode::MOVI2FP;
  876|    772|                    }
  877|  2.74k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 1.47k, False: 1.27k]
  |  Branch (877:25): [True: 612, False: 2.13k]
  |  Branch (877:41): [True: 1.27k, False: 196]
  |  Branch (877:57): [True: 937, False: 342]
  |  Branch (877:70): [True: 612, False: 325]
  ------------------
  878|    612|                    {
  879|    612|                        return OpCode::MOVFP2I;
  880|    612|                    }
  881|  2.74k|                }
  882|  10.5k|                break;
  883|  11.9k|            }
  884|       |
  885|  10.5k|            default: {
  ------------------
  |  Branch (885:13): [True: 3.89k, False: 263k]
  ------------------
  886|  3.89k|                break;
  887|  11.9k|            }
  888|   267k|        }
  889|       |
  890|       |        // None found
  891|   163k|        return OpCode::NONE;
  892|   267k|    }
_ZN3dlx3iceEcc:
   17|   431k|    {
   18|   431k|        constexpr const char diff = 'a' - 'A';
   19|   431k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 142k, False: 289k]
  |  Branch (19:28): [True: 131k, False: 158k]
  ------------------
   20|   431k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   221k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|  2.34k|    {
  195|  2.34k|        ParseError err;
  196|       |
  197|  2.34k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|  2.34k|        err.m_LineNumber                           = line_number;
  199|  2.34k|        err.m_Column                               = column;
  200|  2.34k|        err.unexpected_argument_type.expected_type = expected_type;
  201|  2.34k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|  2.34k|        return err;
  204|  2.34k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|  2.34k|    {
  209|  2.34k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|  2.34k|                                                         token.GetColumn().unsafe(), expected_type,
  211|  2.34k|                                                         actual_type);
  212|  2.34k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|    194|    {
  218|    194|        ParseError err;
  219|       |
  220|    194|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|    194|        err.m_LineNumber        = line_number;
  222|    194|        err.m_Column            = column;
  223|    194|        err.invalid_number.text = text;
  224|       |
  225|    194|        return err;
  226|    194|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|    194|    {
  230|    194|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|    194|                                                token.GetColumn().unsafe(), token.GetText());
  232|    194|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|      3|    {
  237|      3|        ParseError err;
  238|       |
  239|      3|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|      3|        err.m_LineNumber = line_number;
  241|      3|        err.m_Column     = column;
  242|       |
  243|      3|        return err;
  244|      3|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|      3|    {
  249|      3|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|      3|                                                                     token.GetColumn().unsafe());
  251|      3|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  66.7k|    {
  257|  66.7k|        ParseError err;
  258|       |
  259|  66.7k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  66.7k|        err.m_LineNumber                   = line_number;
  261|  66.7k|        err.m_Column                       = column;
  262|  66.7k|        err.unexpected_token.expected_type = expected_type;
  263|  66.7k|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  66.7k|        return err;
  266|  66.7k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  66.7k|    {
  271|  66.7k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  66.7k|                                                  token.GetColumn().unsafe(), expected_type,
  273|  66.7k|                                                  token.GetType());
  274|  66.7k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|  37.5k|    {
  279|  37.5k|        ParseError err;
  280|       |
  281|  37.5k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|  37.5k|        err.m_LineNumber                   = line_number;
  283|  37.5k|        err.m_Column                       = column;
  284|  37.5k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|  37.5k|        return err;
  287|  37.5k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|    466|    {
  291|    466|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|    466|                                                    token.GetColumn().unsafe(), token.GetText());
  293|    466|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  34.5k|    {
  298|  34.5k|        ParseError err;
  299|       |
  300|  34.5k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  34.5k|        err.m_LineNumber                       = line_number;
  302|  34.5k|        err.m_Column                           = column;
  303|  34.5k|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  34.5k|        return err;
  306|  34.5k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  34.5k|    {
  311|  34.5k|        return ConstructInvalidLabelIdentifierParseError(
  312|  34.5k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  34.5k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|  16.7k|    {
  319|  16.7k|        ParseError err;
  320|       |
  321|  16.7k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|  16.7k|        err.m_LineNumber                     = line_number;
  323|  16.7k|        err.m_Column                         = column;
  324|  16.7k|        err.label_already_defined.label_name = label_name;
  325|  16.7k|        err.label_already_defined.at_line    = at_line;
  326|  16.7k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|  16.7k|        return err;
  329|  16.7k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|  16.7k|    {
  334|  16.7k|        return ConstructLabelAlreadyDefinedParseError(
  335|  16.7k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|  16.7k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|  16.7k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|  42.9k|    {
  342|  42.9k|        ParseError err;
  343|       |
  344|  42.9k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|  42.9k|        err.m_LineNumber = line_number;
  346|  42.9k|        err.m_Column     = column;
  347|       |
  348|  42.9k|        return err;
  349|  42.9k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|  42.9k|    {
  354|  42.9k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|  42.9k|                                                        token.GetColumn().unsafe());
  356|  42.9k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|  8.00k|    {
  362|  8.00k|        ParseError err;
  363|       |
  364|  8.00k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|  8.00k|        err.m_LineNumber               = line_number;
  366|  8.00k|        err.m_Column                   = column;
  367|  8.00k|        err.too_few_arguments.required = required;
  368|  8.00k|        err.too_few_arguments.provided = provided;
  369|       |
  370|  8.00k|        return err;
  371|  8.00k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|  8.00k|    {
  376|  8.00k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|  8.00k|                                                  token.GetColumn().unsafe(), required, provided);
  378|  8.00k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|  11.0k|    {
  383|  11.0k|        ParseError err;
  384|       |
  385|  11.0k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|  11.0k|        err.m_LineNumber           = line_number;
  387|  11.0k|        err.m_Column               = column;
  388|  11.0k|        err.empty_label.label_name = label_name;
  389|       |
  390|  11.0k|        return err;
  391|  11.0k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|  11.0k|    {
  395|  11.0k|        return ConstructEmptyLabelParseError(
  396|  11.0k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|  11.0k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 9.95k, False: 1.11k]
  ------------------
  398|  9.95k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|  11.0k|                        token.GetText());
  400|  11.0k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|  1.54k|    {
  405|  1.54k|        ParseError err;
  406|       |
  407|  1.54k|        err.m_Type       = ParseError::Type::TooManyComma;
  408|  1.54k|        err.m_LineNumber = line_number;
  409|  1.54k|        err.m_Column     = column;
  410|       |
  411|  1.54k|        return err;
  412|  1.54k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|  1.54k|    {
  416|  1.54k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|  1.54k|                                               token.GetColumn().unsafe());
  418|  1.54k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   221k|    {
   19|   221k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   221k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  4.85k|    {
  181|  4.85k|        ParsedProgram program;
  182|       |
  183|  4.85k|        program.m_Tokens = tokens;
  184|       |
  185|  4.85k|        phi::boolean line_has_instruction{false};
  186|  4.85k|        phi::usize   label_count{0u};
  187|       |
  188|   266k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 261k, False: 4.85k]
  ------------------
  189|   261k|        {
  190|   261k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   261k|            switch (current_token.GetType())
  195|   261k|            {
  196|       |                // Ignore comments
  197|  1.24k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 1.24k, False: 260k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  1.24k|                    break;
  200|       |
  201|  34.6k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 34.6k, False: 227k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  34.6k|                    line_has_instruction = false;
  204|  34.6k|                    break;
  205|       |
  206|   106k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 106k, False: 155k]
  ------------------
  207|   106k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 10.5k, False: 95.8k]
  ------------------
  208|  10.5k|                    {
  209|  10.5k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  10.5k|                                current_token, Token::Type::NewLine));
  211|  10.5k|                        break;
  212|  10.5k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  95.8k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 18.0k, False: 77.8k]
  ------------------
  217|  18.0k|                    {
  218|  18.0k|                        program.AddParseError(
  219|  18.0k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  18.0k|                        break;
  221|  18.0k|                    }
  222|       |
  223|  77.8k|                    phi::string_view label_name = current_token.GetText();
  224|  77.8k|                    label_name.remove_suffix(1u);
  225|       |
  226|  77.8k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 37.0k, False: 40.8k]
  ------------------
  227|  37.0k|                    {
  228|  37.0k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|  37.0k|                                current_token.GetLineNumber().unsafe(),
  230|  37.0k|                                current_token.GetColumn().unsafe(), label_name));
  231|  37.0k|                        break;
  232|  37.0k|                    }
  233|       |
  234|  40.8k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 12.1k, False: 28.6k]
  ------------------
  235|  12.1k|                    {
  236|  12.1k|                        program.AddParseError(
  237|  12.1k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  12.1k|                        break;
  239|  12.1k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  28.6k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 16.7k, False: 11.9k]
  ------------------
  243|  16.7k|                    {
  244|       |                        // Find first defintions of label
  245|  16.7k|                        const Token* first_label_definition =
  246|  16.7k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  16.7k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  16.7k|                                    {
  249|  16.7k|                                        phi::string_view token_label_name = t.GetText();
  250|  16.7k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  16.7k|                                        if (token_label_name == label_name)
  253|  16.7k|                                        {
  254|  16.7k|                                            return true;
  255|  16.7k|                                        }
  256|  16.7k|                                    }
  257|       |
  258|  16.7k|                                    return false;
  259|  16.7k|                                });
  260|       |
  261|  16.7k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  16.7k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  16.7k|                                current_token, *first_label_definition));
  265|  16.7k|                        break;
  266|  16.7k|                    }
  267|       |
  268|  11.9k|                    program.m_JumpData[label_name] =
  269|  11.9k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|  11.9k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  11.9k|                    break;
  276|  28.6k|                }
  277|       |
  278|  68.6k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 68.6k, False: 192k]
  ------------------
  279|  68.6k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 42.9k, False: 25.7k]
  ------------------
  280|  42.9k|                    {
  281|  42.9k|                        program.AddParseError(
  282|  42.9k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  42.9k|                        break;
  284|  42.9k|                    }
  285|       |
  286|  25.7k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  25.7k|                    PHI_ASSERT(current_token.HasHint());
  290|  25.7k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  25.7k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  25.7k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  25.7k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  25.7k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  25.7k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  25.7k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  25.7k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  25.7k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  44.1k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 39.3k, False: 4.73k]
  ------------------
  312|  39.3k|                    {
  313|       |                        // Get next token
  314|  39.3k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 894, False: 38.4k]
  ------------------
  315|    894|                        {
  316|    894|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    894|                                    current_token, number_of_argument_required.unsafe(),
  318|    894|                                    argument_num.unsafe()));
  319|    894|                            break;
  320|    894|                        }
  321|       |
  322|  38.4k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  38.4k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 12.4k, False: 25.9k]
  ------------------
  326|  12.4k|                        {
  327|  12.4k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 1.54k, False: 10.9k]
  ------------------
  328|  1.54k|                            {
  329|  1.54k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|  1.54k|                            }
  331|       |
  332|  12.4k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  12.4k|                            continue;
  335|  12.4k|                        }
  336|       |
  337|  25.9k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 7.11k, False: 18.8k]
  ------------------
  338|  7.11k|                        {
  339|  7.11k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  7.11k|                                    token, number_of_argument_required.unsafe(),
  341|  7.11k|                                    argument_num.unsafe()));
  342|  7.11k|                            break;
  343|  7.11k|                        }
  344|       |
  345|  18.8k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  18.8k|                                parse_instruction_argument(
  347|  18.8k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  18.8k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 13.0k, False: 5.84k]
  ------------------
  349|  13.0k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  13.0k|                            break;
  352|  13.0k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  5.84k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  5.84k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  5.84k|                        argument_num++;
  359|  5.84k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  5.84k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  25.7k|                    program.m_Instructions.emplace_back(instruction);
  367|  25.7k|                    line_has_instruction = true;
  368|  25.7k|                    break;
  369|  68.6k|                }
  370|       |
  371|  50.6k|                default:
  ------------------
  |  Branch (371:17): [True: 50.6k, False: 210k]
  ------------------
  372|  50.6k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  50.6k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 29.5k, False: 21.1k]
  ------------------
  374|  29.5k|                    {
  375|  29.5k|                        expected_token_type = Token::Type::NewLine;
  376|  29.5k|                    }
  377|       |
  378|  50.6k|                    program.AddParseError(
  379|  50.6k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  50.6k|                    break;
  381|   261k|            }
  382|   261k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  4.85k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 863, False: 3.98k]
  ------------------
  386|    863|        {
  387|  13.9k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 13.0k, False: 863]
  ------------------
  388|  13.0k|            {
  389|  13.0k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  13.0k|                const Token& token = *it;
  392|  13.0k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 11.0k, False: 1.97k]
  ------------------
  393|  11.0k|                {
  394|  11.0k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  11.0k|                    --label_count;
  396|  11.0k|                }
  397|  13.0k|            }
  398|    863|        }
  399|       |
  400|  4.85k|        return program;
  401|  4.85k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  4.85k|    {
  405|  4.85k|        TokenStream tokens = Tokenize(source);
  406|  4.85k|        return Parse(tokens);
  407|  4.85k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  18.8k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  18.8k|        switch (token.GetType())
   37|  18.8k|        {
   38|  1.69k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 1.69k, False: 17.1k]
  ------------------
   39|  1.69k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 504, False: 1.18k]
  ------------------
   40|  1.69k|                                          ArgumentType::AddressDisplacement))
   41|    504|                {
   42|    504|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    504|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    504|                    return {};
   46|    504|                }
   47|       |
   48|       |                // Get address displacement
   49|  1.18k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  1.18k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  1.18k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 3, False: 1.18k]
  ------------------
   54|      3|                {
   55|      3|                    program.AddParseError(
   56|      3|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      3|                    return {};
   58|      3|                }
   59|       |
   60|  1.18k|                auto         it           = tokens.current_position();
   61|  1.18k|                const Token& first_token  = tokens.consume();
   62|  1.18k|                const Token& second_token = tokens.consume();
   63|  1.18k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  1.18k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 196, False: 989]
  ------------------
   66|    196|                {
   67|    196|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    196|                            first_token, Token::Type::OpenBracket));
   69|    196|                    return {};
   70|    196|                }
   71|       |
   72|       |                // Second token is the register
   73|    989|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 329, False: 660]
  ------------------
   74|    329|                {
   75|    329|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|    329|                            second_token, Token::Type::RegisterInt));
   77|    329|                    return {};
   78|    329|                }
   79|       |
   80|    660|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 338, False: 322]
  ------------------
   81|    338|                {
   82|    338|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|    338|                            third_token, Token::Type::ClosingBracket));
   84|    338|                    return {};
   85|    338|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|    322|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|    322|                return ConstructInstructionArgumentAddressDisplacement(
   94|    322|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|    660|            }
   96|  1.51k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 1.51k, False: 17.3k]
  ------------------
   97|  1.51k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 195, False: 1.32k]
  ------------------
   98|    195|                {
   99|    195|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    195|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    195|                    return {};
  102|    195|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  1.32k|                return ConstructInstructionArgumentRegisterInt(
  108|  1.32k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  1.51k|            }
  110|  1.06k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 1.06k, False: 17.8k]
  ------------------
  111|  1.06k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 329, False: 739]
  ------------------
  112|    329|                {
  113|    329|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    329|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    329|                    return {};
  116|    329|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|    739|                return ConstructInstructionArgumentRegisterFloat(
  122|    739|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  1.06k|            }
  124|    466|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 466, False: 18.4k]
  ------------------
  125|    466|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|    466|                return {};
  128|  1.06k|            }
  129|  8.44k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 8.44k, False: 10.4k]
  ------------------
  130|       |                // Parse as Label
  131|  8.44k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 1.11k, False: 7.32k]
  ------------------
  132|  1.11k|                {
  133|  1.11k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  1.11k|                            token, expected_argument_type, ArgumentType::Label));
  135|  1.11k|                    return {};
  136|  1.11k|                }
  137|       |
  138|  7.32k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 7.32k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  7.32k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 4.44k, False: 2.87k]
  ------------------
  145|  4.44k|                {
  146|  4.44k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  4.44k|                    return {};
  148|  4.44k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  2.87k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  7.32k|            }
  154|    975|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 975, False: 17.9k]
  ------------------
  155|    975|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 200, False: 775]
  ------------------
  156|    200|                {
  157|    200|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    200|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    200|                    return {};
  160|    200|                }
  161|       |
  162|    775|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 581, False: 194]
  ------------------
  163|    581|                {
  164|    581|                    return ConstructInstructionArgumentImmediateValue(
  165|    581|                            static_cast<std::int16_t>(token.GetHint()));
  166|    581|                }
  167|       |
  168|    194|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    194|                return {};
  170|    775|            }
  171|       |
  172|  4.72k|            default:
  ------------------
  |  Branch (172:13): [True: 4.72k, False: 14.1k]
  ------------------
  173|  4.72k|                program.AddParseError(
  174|  4.72k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  4.72k|                return {};
  176|  18.8k|        }
  177|  18.8k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|   168k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   168k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 122k, False: 46.1k]
  ------------------
  248|   122k|                                    {
  249|   122k|                                        phi::string_view token_label_name = t.GetText();
  250|   122k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   122k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 16.7k, False: 105k]
  ------------------
  253|  16.7k|                                        {
  254|  16.7k|                                            return true;
  255|  16.7k|                                        }
  256|   122k|                                    }
  257|       |
  258|   151k|                                    return false;
  259|   168k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    201|    {
  354|    201|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 201]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    201|        m_CurrentProgram = &program;
  361|       |
  362|    201|        m_ProgramCounter               = 0u;
  363|    201|        m_Halted                       = false;
  364|    201|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    201|        m_LastRaisedException          = Exception::None;
  366|    201|        m_CurrentStepCount             = 0u;
  367|       |
  368|    201|        return true;
  369|    201|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|   275k|    {
   13|   275k|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 40.9k, False: 234k]
  ------------------
   14|  40.9k|        {
   15|  40.9k|            const char first_char = token[0u];
   16|  40.9k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 2.13k, False: 38.8k]
  |  Branch (16:38): [True: 2.21k, False: 36.5k]
  ------------------
   17|  4.34k|            {
   18|  4.34k|                const char second_char = token[1u];
   19|  4.34k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 3.86k, False: 484]
  |  Branch (19:43): [True: 2.86k, False: 1.00k]
  ------------------
   20|  2.86k|                {
   21|  2.86k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  2.86k|                }
   23|  4.34k|            }
   24|  40.9k|        }
   25|   234k|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 56.2k, False: 178k]
  ------------------
   26|  56.2k|        {
   27|  56.2k|            const char first_char = token[0u];
   28|  56.2k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 4.06k, False: 52.1k]
  |  Branch (28:38): [True: 393, False: 51.7k]
  ------------------
   29|  4.45k|            {
   30|  4.45k|                const char second_char = token[1u];
   31|  4.45k|                const char third_char  = token[2u];
   32|       |
   33|  4.45k|                switch (second_char)
   34|  4.45k|                {
   35|    764|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 764, False: 3.69k]
  ------------------
   36|    764|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 570, False: 194]
  |  Branch (36:50): [True: 243, False: 327]
  ------------------
   37|    243|                        {
   38|    243|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|    243|                        }
   40|    521|                        break;
   41|    764|                    }
   42|  1.07k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 1.07k, False: 3.37k]
  ------------------
   43|  1.07k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 881, False: 194]
  |  Branch (43:50): [True: 683, False: 198]
  ------------------
   44|    683|                        {
   45|    683|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|    683|                        }
   47|    392|                        break;
   48|  1.07k|                    }
   49|  2.03k|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 2.03k, False: 2.41k]
  ------------------
   50|  2.03k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 322, False: 1.71k]
  |  Branch (50:50): [True: 1.48k, False: 229]
  ------------------
   51|  1.81k|                        {
   52|  1.81k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|  1.81k|                        }
   54|    229|                        break;
   55|  2.03k|                    }
   56|    576|                    default: {
  ------------------
  |  Branch (56:21): [True: 576, False: 3.87k]
  ------------------
   57|    576|                        break;
   58|  2.03k|                    }
   59|  4.45k|                }
   60|  4.45k|            }
   61|  56.2k|        }
   62|       |
   63|   270k|        return IntRegisterID::None;
   64|   275k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|   270k|    {
   68|   270k|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 38.0k, False: 232k]
  ------------------
   69|  38.0k|        {
   70|  38.0k|            const char first_char = token[0u];
   71|  38.0k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 1.57k, False: 36.4k]
  |  Branch (71:38): [True: 1.18k, False: 35.3k]
  ------------------
   72|  2.75k|            {
   73|  2.75k|                const char second_char = token[1u];
   74|  2.75k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 2.51k, False: 240]
  |  Branch (74:43): [True: 1.46k, False: 1.05k]
  ------------------
   75|  1.46k|                {
   76|  1.46k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  1.46k|                }
   78|  2.75k|            }
   79|  38.0k|        }
   80|   232k|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 53.4k, False: 178k]
  ------------------
   81|  53.4k|        {
   82|  53.4k|            const char first_char = token[0u];
   83|  53.4k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 2.81k, False: 50.6k]
  |  Branch (83:38): [True: 1.02k, False: 49.6k]
  ------------------
   84|  3.84k|            {
   85|  3.84k|                const char second_char = token[1u];
   86|  3.84k|                const char third_char  = token[2u];
   87|       |
   88|  3.84k|                switch (second_char)
   89|  3.84k|                {
   90|    756|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 756, False: 3.08k]
  ------------------
   91|    756|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 561, False: 195]
  |  Branch (91:50): [True: 239, False: 322]
  ------------------
   92|    239|                        {
   93|    239|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|    239|                        }
   95|    517|                        break;
   96|    756|                    }
   97|    956|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 956, False: 2.88k]
  ------------------
   98|    956|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 666, False: 290]
  |  Branch (98:50): [True: 457, False: 209]
  ------------------
   99|    457|                        {
  100|    457|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|    457|                        }
  102|    499|                        break;
  103|    956|                    }
  104|    714|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 714, False: 3.12k]
  ------------------
  105|    714|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 322, False: 392]
  |  Branch (105:50): [True: 194, False: 198]
  ------------------
  106|    516|                        {
  107|    516|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|    516|                        }
  109|    198|                        break;
  110|    714|                    }
  111|  1.41k|                    default: {
  ------------------
  |  Branch (111:21): [True: 1.41k, False: 2.42k]
  ------------------
  112|  1.41k|                        break;
  113|    714|                    }
  114|  3.84k|                }
  115|  3.84k|            }
  116|  53.4k|        }
  117|       |
  118|   267k|        return FloatRegisterID::None;
  119|   270k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|   239k|    {
  123|   239k|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 57.2k, False: 182k]
  ------------------
  124|  57.2k|        {
  125|  57.2k|            const char c1 = token[0u];
  126|  57.2k|            const char c2 = token[1u];
  127|  57.2k|            const char c3 = token[2u];
  128|  57.2k|            const char c4 = token[3u];
  129|       |
  130|  57.2k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 1.59k, False: 55.6k]
  |  Branch (130:34): [True: 940, False: 54.6k]
  |  Branch (130:49): [True: 343, False: 2.19k]
  |  Branch (130:62): [True: 1.65k, False: 538]
  ------------------
  131|  57.2k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 1.03k, False: 967]
  |  Branch (131:34): [True: 617, False: 350]
  |  Branch (131:49): [True: 1.01k, False: 637]
  |  Branch (131:62): [True: 5, False: 632]
  ------------------
  132|  57.2k|        }
  133|       |
  134|   182k|        return false;
  135|   239k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|   224k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  79.0k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|   900k|    {
   41|   900k|        return m_Type;
   42|   900k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   787k|    {
   51|   787k|        return m_LineNumber;
   52|   787k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  1.56M|    {
   56|  1.56M|        return m_Column;
   57|  1.56M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  1.06M|    {
   61|  1.06M|        return m_Text.length();
   62|  1.06M|    }
_ZNK3dlx5Token7GetTextEv:
   65|   397k|    {
   66|   397k|        return m_Text;
   67|   397k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  27.7k|    {
   80|  27.7k|        return m_HasHint;
   81|  27.7k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  29.9k|    {
   85|  29.9k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  29.9k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  29.9k|                   m_Type == Type::ImmediateInteger);
   88|  29.9k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  29.9k|        return m_Hint;
   91|  29.9k|    }

_ZN3dlx11TokenStream8finalizeEv:
   30|  4.85k|    {
   31|       |#if defined(PHI_DEBUG)
   32|       |        PHI_ASSERT(!m_Finialized);
   33|       |#endif
   34|       |
   35|  4.85k|        m_Iterator = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |        m_Finialized = true;
   38|       |#endif
   39|  4.85k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   51|  1.18k|    {
   52|  1.18k|        return x + m_Iterator <= m_Tokens.size();
   53|  1.18k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   56|   305k|    {
   57|   305k|        return m_Iterator < m_Tokens.size();
   58|   305k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   61|   303k|    {
   62|   303k|        return m_Iterator >= m_Tokens.size();
   63|   303k|    }
_ZN3dlx11TokenStream7consumeEv:
   76|   303k|    {
   77|   303k|        PHI_ASSERT(!reached_end());
   78|       |#if defined(PHI_DEBUG)
   79|       |        PHI_ASSERT(m_Finialized);
   80|       |#endif
   81|       |
   82|   303k|        return m_Tokens.at(m_Iterator++.unsafe());
   83|   303k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  155|  1.18k|    {
  156|  1.18k|        return m_Iterator;
  157|  1.18k|    }
_ZN3dlx11TokenStream12set_positionEN3phi7integerImEE:
  160|    322|    {
  161|       |#if defined(PHI_DEBUG)
  162|       |        PHI_ASSERT(m_Finialized);
  163|       |#endif
  164|       |
  165|    322|        m_Iterator = pos;
  166|    322|    }
_ZNK3dlx11TokenStream5beginEv:
  169|  4.85k|    {
  170|       |#if defined(PHI_DEBUG)
  171|       |        //PHI_ASSERT(m_Finialized);
  172|       |#endif
  173|       |
  174|  4.85k|        return m_Tokens.begin();
  175|  4.85k|    }
_ZNK3dlx11TokenStream3endEv:
  187|  4.85k|    {
  188|       |#if defined(PHI_DEBUG)
  189|       |        //PHI_ASSERT(m_Finialized);
  190|       |#endif
  191|       |
  192|  4.85k|        return m_Tokens.end();
  193|  4.85k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  205|    863|    {
  206|       |#if defined(PHI_DEBUG)
  207|       |        //PHI_ASSERT(m_Finialized);
  208|       |#endif
  209|       |
  210|    863|        return m_Tokens.rbegin();
  211|    863|    }
_ZNK3dlx11TokenStream4rendEv:
  214|  13.0k|    {
  215|       |#if defined(PHI_DEBUG)
  216|       |        //PHI_ASSERT(m_Finialized);
  217|       |#endif
  218|       |
  219|  13.0k|        return m_Tokens.rend();
  220|  13.0k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  4.85k|    {
   66|  4.85k|        TokenStream tokens;
   67|       |
   68|  4.85k|        phi::string_view current_token;
   69|       |
   70|  4.85k|        phi::u64 current_line_number{1u};
   71|  4.85k|        phi::u64 current_column{1u};
   72|  4.85k|        phi::u64 token_begin{0u};
   73|       |
   74|  4.85k|        phi::boolean parsing_comment{false};
   75|       |
   76|   886k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 881k, False: 4.85k]
  ------------------
   77|   881k|        {
   78|   881k|            const char c{source.at(i)};
   79|       |
   80|   881k|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 41.9k, False: 839k]
  ------------------
   81|  41.9k|            {
   82|  41.9k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 9.16k, False: 32.7k]
  ------------------
   83|  9.16k|                {
   84|       |                    // Skip empty lines
   85|  9.16k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  9.16k|                                        current_line_number, current_column);
   87|       |
   88|  9.16k|                    parsing_comment = false;
   89|  9.16k|                    current_line_number += 1u;
   90|  9.16k|                    current_column = 1u;
   91|  9.16k|                    continue;
   92|  9.16k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  32.7k|                tokens.emplace_back(ParseToken(
   96|  32.7k|                        source.substring_view(
   97|  32.7k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  32.7k|                                current_token.length()),
   99|  32.7k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  32.7k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  32.7k|                                    current_line_number, current_column);
  103|       |
  104|  32.7k|                current_token   = phi::string_view{};
  105|  32.7k|                parsing_comment = false;
  106|  32.7k|                current_line_number += 1u;
  107|  32.7k|                current_column = 0u;
  108|  32.7k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|   839k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 1.29k, False: 838k]
  |  Branch (110:34): [True: 1.80k, False: 836k]
  ------------------
  111|  3.09k|            {
  112|  3.09k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 305, False: 2.78k]
  ------------------
  113|    305|                {
  114|    305|                    token_begin = i;
  115|    305|                }
  116|  2.78k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 2.34k, False: 444]
  ------------------
  117|  2.34k|                {
  118|  2.34k|                    tokens.emplace_back(ParseToken(
  119|  2.34k|                            source.substring_view(
  120|  2.34k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  2.34k|                                    current_token.length()),
  122|  2.34k|                            current_line_number, current_column - current_token.length()));
  123|  2.34k|                    token_begin   = i;
  124|  2.34k|                    current_token = phi::string_view{};
  125|  2.34k|                }
  126|       |
  127|  3.09k|                parsing_comment = true;
  128|  3.09k|                current_token   = source.substring_view(
  129|  3.09k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  3.09k|                        current_token.length() + 1u);
  131|  3.09k|            }
  132|   836k|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 3.23k, False: 833k]
  ------------------
  133|  3.23k|            {
  134|       |                // simply append the character
  135|  3.23k|                current_token = source.substring_view(
  136|  3.23k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|  3.23k|                        current_token.length() + 1u);
  138|  3.23k|            }
  139|   833k|            else
  140|   833k|            {
  141|       |                // Not parsing a comment
  142|   833k|                switch (c)
  143|   833k|                {
  144|  8.95k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 8.95k, False: 824k]
  ------------------
  145|  33.5k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 24.6k, False: 808k]
  ------------------
  146|  33.5k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 0, False: 833k]
  ------------------
  147|  33.5k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 3.73k, False: 29.8k]
  ------------------
  148|  3.73k|                        {
  149|  3.73k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|  3.73k|                            continue;
  152|  3.73k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  29.8k|                        tokens.emplace_back(ParseToken(
  156|  29.8k|                                source.substring_view(
  157|  29.8k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  29.8k|                                        current_token.length()),
  159|  29.8k|                                current_line_number, current_column - current_token.length()));
  160|  29.8k|                        current_token = phi::string_view{};
  161|  29.8k|                        break;
  162|  87.8k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 87.8k, False: 745k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  87.8k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 81.4k, False: 6.42k]
  ------------------
  165|  81.4k|                        {
  166|  81.4k|                            current_token = source.substring_view(
  167|  81.4k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  81.4k|                                    current_token.length() + 1u);
  169|  81.4k|                            tokens.emplace_back(ParseToken(
  170|  81.4k|                                    source.substring_view(
  171|  81.4k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  81.4k|                                                    token_begin),
  173|  81.4k|                                            current_token.length()),
  174|  81.4k|                                    current_line_number,
  175|  81.4k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  81.4k|                            current_token = phi::string_view{};
  178|  81.4k|                        }
  179|  6.42k|                        else
  180|  6.42k|                        {
  181|       |                            // Orphan colon
  182|  6.42k|                            token_begin = i;
  183|       |
  184|  6.42k|                            tokens.emplace_back(
  185|  6.42k|                                    Token::Type::Colon,
  186|  6.42k|                                    source.substring_view(
  187|  6.42k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  6.42k|                                                    token_begin),
  189|  6.42k|                                            1u),
  190|  6.42k|                                    current_line_number, current_column);
  191|  6.42k|                        }
  192|  87.8k|                        break;
  193|  39.4k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 39.4k, False: 793k]
  ------------------
  194|  47.7k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 8.21k, False: 824k]
  ------------------
  195|  56.5k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 8.87k, False: 824k]
  ------------------
  196|  56.5k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 48.7k, False: 7.83k]
  ------------------
  197|  48.7k|                        {
  198|  48.7k|                            tokens.emplace_back(ParseToken(
  199|  48.7k|                                    source.substring_view(
  200|  48.7k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  48.7k|                                                    token_begin),
  202|  48.7k|                                            current_token.length()),
  203|  48.7k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  48.7k|                            current_token = phi::string_view{};
  206|  48.7k|                        }
  207|       |
  208|  56.5k|                        Token::Type type;
  209|  56.5k|                        switch (c)
  210|  56.5k|                        {
  211|  39.4k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 39.4k, False: 17.0k]
  ------------------
  212|  39.4k|                                type = Token::Type::Comma;
  213|  39.4k|                                break;
  214|  8.21k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 8.21k, False: 48.3k]
  ------------------
  215|  8.21k|                                type = Token::Type::OpenBracket;
  216|  8.21k|                                break;
  217|  8.87k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 8.87k, False: 47.7k]
  ------------------
  218|  8.87k|                                type = Token::Type::ClosingBracket;
  219|  8.87k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 56.5k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  56.5k|#endif
  225|  56.5k|                        }
  226|       |
  227|  56.5k|                        token_begin = i;
  228|       |
  229|  56.5k|                        tokens.emplace_back(
  230|  56.5k|                                type,
  231|  56.5k|                                source.substring_view(
  232|  56.5k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  56.5k|                                        1u),
  234|  56.5k|                                current_line_number, current_column);
  235|  56.5k|                        break;
  236|       |
  237|   655k|                    default:
  ------------------
  |  Branch (237:21): [True: 655k, False: 178k]
  ------------------
  238|   655k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 196k, False: 459k]
  ------------------
  239|   196k|                        {
  240|   196k|                            token_begin = i;
  241|   196k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   655k|                        current_token = source.substring_view(
  245|   655k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   655k|                                current_token.length() + 1u);
  247|   833k|                }
  248|   833k|            }
  249|       |
  250|   868k|            current_column += 1u;
  251|   868k|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  4.85k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 3.61k, False: 1.23k]
  ------------------
  255|  3.61k|        {
  256|  3.61k|            tokens.emplace_back(
  257|  3.61k|                    ParseToken(source.substring_view(
  258|  3.61k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  3.61k|                                       current_token.length()),
  260|  3.61k|                               current_line_number, current_column - current_token.length()));
  261|  3.61k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  4.85k|        tokens.finalize();
  265|       |
  266|  4.85k|        return tokens;
  267|  4.85k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   198k|    {
   14|   198k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 1.65k, False: 197k]
  |  Branch (14:13): [True: 1.42k, False: 197k]
  |  Branch (14:36): [True: 1.42k, False: 234]
  ------------------
   15|  1.42k|        {
   16|  1.42k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  1.42k|            if (number)
  ------------------
  |  Branch (18:17): [True: 641, False: 782]
  ------------------
   19|    641|            {
   20|    641|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|    641|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|    641|            }
   23|       |
   24|    782|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  1.42k|        }
   26|       |
   27|   197k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 1.07k, False: 196k]
  |  Branch (27:13): [True: 2.64k, False: 194k]
  |  Branch (27:36): [True: 1.57k, False: 194k]
  ------------------
   28|  2.64k|        {
   29|  2.64k|            return {Token::Type::Comment, token, line_number, column};
   30|  2.64k|        }
   31|       |
   32|   194k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 3.20k, False: 191k]
  ------------------
   33|  3.20k|        {
   34|  3.20k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  3.20k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  3.20k|        }
   37|       |
   38|   191k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 823, False: 190k]
  ------------------
   39|    823|        {
   40|    823|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|    823|        }
   42|       |
   43|   190k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 2.48k, False: 188k]
  ------------------
   44|  2.48k|        {
   45|  2.48k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  2.48k|                    static_cast<phi::uint32_t>(id)};
   47|  2.48k|        }
   48|       |
   49|   188k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 2.31k, False: 185k]
  ------------------
   50|  2.31k|        {
   51|  2.31k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  2.31k|                    static_cast<phi::uint32_t>(id)};
   53|  2.31k|        }
   54|       |
   55|   185k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 70.3k, False: 115k]
  ------------------
   56|  70.3k|        {
   57|  70.3k|            return {Token::Type::OpCode, token, line_number, column,
   58|  70.3k|                    static_cast<phi::uint32_t>(opcode)};
   59|  70.3k|        }
   60|       |
   61|   115k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|   185k|    }

_ZN6ImVec2C2Ev:
  262|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

LLVMFuzzerTestOneInput:
   10|  4.85k|{
   11|  4.85k|    static dlxemu::Emulator emu;
   12|       |
   13|  4.85k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   14|       |
   15|  4.85k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   16|       |
   17|       |    // Parse it
   18|  4.85k|    editor.SetText(std::string(source.data(), source.length().unsafe()));
   19|  4.85k|    editor.m_FullText = editor.GetText();
   20|       |
   21|  4.85k|    emu.ParseProgram(editor.m_FullText);
   22|       |
   23|  4.85k|    editor.ColorizeInternal();
   24|       |
   25|  4.85k|    return 0;
   26|  4.85k|}


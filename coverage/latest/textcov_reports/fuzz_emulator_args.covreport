_ZN6dlxemu6WindowC2Ev:
   13|     98|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  193|    490|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  241|     98|    {
  242|     98|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (242:13): [True: 0, False: 98]
  ------------------
  243|      0|        {
  244|      0|            return m_Line > other.m_Line;
  245|      0|        }
  246|       |
  247|     98|        return m_Column >= other.m_Column;
  248|     98|    }
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  283|     98|    {
  284|     98|        Colorize();
  285|     98|        m_Lines.emplace_back();
  286|     98|    }
_ZN6dlxemu10CodeEditorD2Ev:
  289|     98|    {
  290|     98|        VerifyInternalState();
  291|     98|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1483|     98|    {
 1484|       |        // Lines should never be empty
 1485|     98|        PHI_ASSERT(!m_Lines.empty());
 1486|       |
 1487|       |        // Verify Selection is still in a valid state
 1488|     98|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1489|     98|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1490|     98|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1491|     98|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1492|     98|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1493|       |
 1494|       |        // Verify cursor position
 1495|     98|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1496|     98|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1497|     98|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1498|       |
 1499|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1500|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1501|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1502|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1503|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1504|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1505|       |#endif
 1506|       |
 1507|       |        // Verify that all breakpoints are on existing lines
 1508|     98|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1508:35): [True: 0, False: 98]
  ------------------
 1509|      0|        {
 1510|      0|            PHI_ASSERT(break_point != 0u);
 1511|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1512|      0|        }
 1513|       |
 1514|       |        // Verify that all error markers are on existing lines
 1515|     98|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1515:34): [True: 0, False: 98]
  ------------------
 1516|      0|        {
 1517|      0|            const phi::u32 line_number = error_marker.first;
 1518|       |
 1519|      0|            PHI_ASSERT(line_number != 0u);
 1520|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1521|      0|        }
 1522|     98|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1525|     98|    {
 1526|     98|        constexpr const static Palette palette = {{
 1527|     98|                0xff7f7f7f, // Default
 1528|     98|                0xffd69c56, // OpCode
 1529|     98|                0xff00ff00, // Register
 1530|     98|                0xff7070e0, // IntegerLiteral
 1531|     98|                0xff206020, // Comment
 1532|     98|                0xff101010, // Background
 1533|     98|                0xffe0e0e0, // Cursor
 1534|     98|                0x80a06020, // Selection
 1535|     98|                0x800020ff, // ErrorMarker
 1536|     98|                0x40f08000, // Breakpoint
 1537|     98|                0xff707000, // Line number
 1538|     98|                0x40000000, // Current line fill
 1539|     98|                0x40808080, // Current line fill (inactive)
 1540|     98|                0x40a0a0a0, // Current line edge
 1541|     98|        }};
 1542|       |
 1543|     98|        return palette;
 1544|     98|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1709|     98|    {
 1710|       |        // TODO: This is quite unreadable
 1711|     98|        const phi::u32 to_line =
 1712|     98|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1712:17): [True: 98, False: 0]
  ------------------
 1713|     98|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1714|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1715|       |
 1716|     98|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1717|     98|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1718|     98|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1719|     98|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1720|     98|    }

_ZN6dlxemu8EmulatorC2Ev:
   46|     98|    {}
_ZN6dlxemu8Emulator26HandleCommandLineArgumentsEN3phi7integerIiEEPPc:
   55|     97|    {
   56|       |        // No args
   57|     97|        if (argc <= 1)
  ------------------
  |  Branch (57:13): [True: 8, False: 89]
  ------------------
   58|      8|        {
   59|      8|            return ShouldContinueInitialization::Yes;
   60|      8|        }
   61|       |
   62|  3.79k|        for (phi::i32 arg_num{1}; arg_num < argc; ++arg_num)
  ------------------
  |  Branch (62:35): [True: 3.76k, False: 36]
  ------------------
   63|  3.76k|        {
   64|  3.76k|            std::string arg_value = argv[arg_num.unsafe()];
   65|       |
   66|       |            // Convert all characters to lower case
   67|  3.76k|            phi::for_each(arg_value.begin(), arg_value.end(), phi::to_lower_case);
   68|       |            //std::transform(arg_value.begin(), arg_value.end(), arg_value.begin(), ::tolower);
   69|       |
   70|  3.76k|            PHI_ASSERT(!arg_value.empty());
   71|       |
   72|  3.76k|            if (arg_value.front() == '-')
  ------------------
  |  Branch (72:17): [True: 53, False: 3.70k]
  ------------------
   73|     53|            {
   74|       |                // Display help
   75|     53|                if (arg_value == "-h" || arg_value == "-help" || arg_value == "-?" ||
  ------------------
  |  Branch (75:21): [True: 1, False: 52]
  |  Branch (75:42): [True: 1, False: 51]
  |  Branch (75:66): [True: 1, False: 50]
  ------------------
   76|     53|                    arg_value == "--help")
  ------------------
  |  Branch (76:21): [True: 1, False: 49]
  ------------------
   77|      4|                {
   78|      4|                    DLX_INFO("Help");
  ------------------
  |  |    7|      4|#define DLX_INFO(...)     PHI_EMPTY_MACRO()
  ------------------
   79|      4|                    return ShouldContinueInitialization::No;
   80|      4|                }
   81|       |                // Display version
   82|     49|                if (arg_value == "-v" || arg_value == "--value")
  ------------------
  |  Branch (82:21): [True: 27, False: 22]
  |  Branch (82:42): [True: 15, False: 7]
  ------------------
   83|     42|                {
   84|     42|                    fmt::print("DLXEmu version {:d}.{:d}.{:d} {:s}-{:s}\n", VersionMajor,
   85|     42|                               VersionMinor, VersionPatch, GitBranch, GitShaFull);
   86|     42|                    return ShouldContinueInitialization::No;
   87|     42|                }
   88|       |
   89|       |                // Unknown option
   90|      7|                DLX_WARN("Unknown option '{:s}' ignored", arg_value);
  ------------------
  |  |    8|      7|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
   91|      7|                break;
   92|     49|            }
   93|       |
   94|  3.70k|            DLX_WARN("Ignore command line argument '{:s}'", arg_value);
  ------------------
  |  |    8|  3.70k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
   95|  3.70k|        }
   96|       |
   97|     43|        return ShouldContinueInitialization::Yes;
   98|     89|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|     98|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|     98|    {}

_ZN6dlxemu6WindowD2Ev:
   41|     98|    {
   42|     98|        Shutdown();
   43|     98|    }
_ZN6dlxemu6Window8ShutdownEv:
  113|     98|    {
  114|     98|        if (imgui_initialized)
  ------------------
  |  Branch (114:13): [True: 0, False: 98]
  ------------------
  115|      0|        {
  116|      0|            ShutdownImGui();
  117|      0|        }
  118|       |
  119|     98|        if (m_Window != nullptr)
  ------------------
  |  Branch (119:13): [True: 0, False: 98]
  ------------------
  120|      0|        {
  121|      0|            glfwDestroyWindow(m_Window);
  122|      0|        }
  123|       |
  124|     98|        if (glfw_initialized)
  ------------------
  |  Branch (124:13): [True: 0, False: 98]
  ------------------
  125|      0|        {
  126|      0|            glfwTerminate();
  127|      0|        }
  128|     98|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  98.0k|            {}

_ZN3dlx11IntRegisterC2Ev:
   12|  3.13k|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   40|     98|    {
   41|     98|        m_IsReadOnly = read_only;
   42|     98|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   12|     98|    {
   13|     98|        m_Values.resize(starting_size.unsafe());
   14|     98|    }

_ZN3dlx9ProcessorC2Ev:
   62|     98|    {
   63|       |        // Mark R0 as ready only
   64|     98|        m_IntRegisters[0].SetReadOnly(true);
   65|     98|    }

_ZN3fmt3v106detail6bufferIcE6appendIcEEvPKT_S7_:
  916|    462|  template <typename U> void append(const U* begin, const U* end) {
  917|    840|    while (begin != end) {
  ------------------
  |  Branch (917:12): [True: 378, False: 462]
  ------------------
  918|    378|      auto count = to_unsigned(end - begin);
  919|    378|      try_reserve(size_ + count);
  920|    378|      auto free_cap = capacity_ - size_;
  921|    378|      if (free_cap < count) count = free_cap;
  ------------------
  |  Branch (921:11): [True: 0, False: 378]
  ------------------
  922|    378|      if (std::is_same<T, U>::value) {
  ------------------
  |  Branch (922:11): [Folded - Ignored]
  ------------------
  923|    378|        memcpy(ptr_ + size_, begin, count * sizeof(T));
  924|    378|      } else {
  925|      0|        T* out = ptr_ + size_;
  926|      0|        for (size_t i = 0; i < count; ++i) out[i] = begin[i];
  ------------------
  |  Branch (926:28): [True: 0, False: 0]
  ------------------
  927|      0|      }
  928|    378|      size_ += count;
  929|    378|      begin += count;
  930|    378|    }
  931|    462|  }
_ZN3fmt3v106detail11to_unsignedIiEENSt3__113make_unsignedIT_E4typeES5_:
  432|    210|FMT_CONSTEXPR auto to_unsigned(Int value) -> make_unsigned_t<Int> {
  433|    210|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  402|    420|    fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (402:33): [Folded - Ignored]
  |  |  |  Branch (402:33): [True: 210, False: 0]
  |  |  ------------------
  ------------------
  434|    210|  return static_cast<make_unsigned_t<Int>>(value);
  435|    210|}
_ZN3fmt3v106detail13ignore_unusedIJbA15_cEEEvDpRKT_:
  372|  1.34k|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZN3fmt3v1014basic_appenderIcEC2ERNS0_6detail6bufferIcEE:
 1162|     42|  FMT_CONSTEXPR basic_appender(detail::buffer<T>& buf) : buffer_(&buf) {}
_ZNK3fmt3v1017basic_string_viewIcE4sizeEv:
  545|    462|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v106detail13ignore_unusedIJbA1_cEEEvDpRKT_:
  372|    210|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v106detail6bufferIcE4sizeEv:
  883|    504|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v106detail6bufferIcEC2EPFvRS3_mEPcmm:
  858|     42|      : ptr_(p), size_(sz), capacity_(cap), grow_(grow) {}
_ZN3fmt3v106detail6bufferIcE3setEPcm:
  864|     42|  FMT_CONSTEXPR void set(T* buf_data, size_t buf_capacity) noexcept {
  865|     42|    ptr_ = buf_data;
  866|     42|    capacity_ = buf_capacity;
  867|     42|  }
_ZN3fmt3v106detail6bufferIcE4dataEv:
  889|     84|  FMT_CONSTEXPR auto data() noexcept -> T* { return ptr_; }
_ZN3fmt3v1013get_containerENS0_14basic_appenderIcEE:
 1150|    924|  friend auto get_container(basic_appender app) -> detail::buffer<T>& {
 1151|    924|    return *app.buffer_;
 1152|    924|  }
_ZN3fmt3v106detail4copyIcPKcEENS0_14basic_appenderIcEET0_S7_S6_:
 1193|    336|auto copy(InputIt begin, InputIt end, appender out) -> appender {
 1194|    336|  get_container(out).append(begin, end);
 1195|    336|  return out;
 1196|    336|}
_ZNK3fmt3v1017basic_string_viewIcE5beginEv:
  547|    252|  constexpr auto begin() const noexcept -> iterator { return data_; }
_ZNK3fmt3v1017basic_string_viewIcE3endEv:
  548|    252|  constexpr auto end() const noexcept -> iterator { return data_ + size_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKc:
  531|     84|                  : detail::length(s)) {}
_ZN3fmt3v106detail10locale_refC2Ev:
 1569|    126|  constexpr locale_ref() : locale_(nullptr) {}
_ZN3fmt3v106detail5valueINS0_7contextEEC2Ev:
 1336|    210|  constexpr FMT_ALWAYS_INLINE value() : no_value() {}
_ZN3fmt3v109monostateC2Ev:
  347|    210|  constexpr monostate() {}
_ZNK3fmt3v1017basic_string_viewIcE4dataEv:
  542|    168|  constexpr auto data() const noexcept -> const Char* { return data_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKcm:
  520|    294|      : data_(s), size_(count) {}
_ZN3fmt3v106detail11to_unsignedIlEENSt3__113make_unsignedIT_E4typeES5_:
  432|  1.13k|FMT_CONSTEXPR auto to_unsigned(Int value) -> make_unsigned_t<Int> {
  433|  1.13k|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  402|  2.26k|    fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (402:33): [Folded - Ignored]
  |  |  |  Branch (402:33): [True: 1.13k, False: 0]
  |  |  ------------------
  ------------------
  434|  1.13k|  return static_cast<make_unsigned_t<Int>>(value);
  435|  1.13k|}
_ZN3fmt3v106detail6bufferIcE11try_reserveEm:
  906|    840|  FMT_CONSTEXPR void try_reserve(size_t new_capacity) {
  907|    840|    if (new_capacity > capacity_) grow_(*this, new_capacity);
  ------------------
  |  Branch (907:9): [True: 0, False: 840]
  ------------------
  908|    840|  }
_ZNK3fmt3v1017basic_format_argsINS0_7contextEE3getEi:
 1888|    210|  FMT_CONSTEXPR auto get(int id) const -> format_arg {
 1889|    210|    format_arg arg;
 1890|    210|    if (!is_packed()) {
  ------------------
  |  Branch (1890:9): [True: 0, False: 210]
  ------------------
 1891|      0|      if (id < max_size()) arg = args_[id];
  ------------------
  |  Branch (1891:11): [True: 0, False: 0]
  ------------------
 1892|      0|      return arg;
 1893|      0|    }
 1894|    210|    if (static_cast<unsigned>(id) >= detail::max_packed_args) return arg;
  ------------------
  |  Branch (1894:9): [True: 0, False: 210]
  ------------------
 1895|    210|    arg.type_ = type(id);
 1896|    210|    if (arg.type_ == detail::type::none_type) return arg;
  ------------------
  |  Branch (1896:9): [True: 0, False: 210]
  ------------------
 1897|    210|    arg.value_ = values_[id];
 1898|    210|    return arg;
 1899|    210|  }
_ZN3fmt3v1016basic_format_argINS0_7contextEEC2Ev:
 1744|    210|  constexpr basic_format_arg() : type_(detail::type::none_type) {}
_ZNK3fmt3v1017basic_format_argsINS0_7contextEE9is_packedEv:
 1847|    210|  constexpr auto is_packed() const -> bool {
 1848|    210|    return (desc_ & detail::is_unpacked_bit) == 0;
 1849|    210|  }
_ZNK3fmt3v1017basic_format_argsINS0_7contextEE4typeEi:
 1854|    210|  FMT_CONSTEXPR auto type(int index) const -> detail::type {
 1855|    210|    int shift = index * detail::packed_arg_bits;
 1856|    210|    unsigned int mask = (1 << detail::packed_arg_bits) - 1;
 1857|    210|    return static_cast<detail::type>((desc_ >> shift) & mask);
 1858|    210|  }
_ZNK3fmt3v1016basic_format_argINS0_7contextEEcvbEv:
 1746|    210|  constexpr explicit operator bool() const noexcept {
 1747|    210|    return type_ != detail::type::none_type;
 1748|    210|  }
_ZN3fmt3v106detail13ignore_unusedIJbA20_cEEEvDpRKT_:
  372|    126|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZN3fmt3v106detail4copyIcPcEENS0_14basic_appenderIcEET0_S6_S5_:
 1193|    126|auto copy(InputIt begin, InputIt end, appender out) -> appender {
 1194|    126|  get_container(out).append(begin, end);
 1195|    126|  return out;
 1196|    126|}
_ZNK3fmt3v106detail6fill_t4sizeEv:
 2093|     84|  constexpr auto size() const -> size_t { return size_; }
_ZN3fmt3v1012format_specsC2Ev:
 2155|    210|        localized(false) {}
_ZN3fmt3v1026basic_format_parse_contextIcEC2ENS0_17basic_string_viewIcEEi:
  755|     42|      : format_str_(format_str), next_arg_id_(next_arg_id) {}
_ZN3fmt3v107contextC2ENS0_14basic_appenderIcEENS0_17basic_format_argsIS1_EENS0_6detail10locale_refE:
 1945|     42|      : out_(out), args_(ctx_args), loc_(loc) {}
_ZN3fmt3v107context3outEv:
 1958|    462|  FMT_CONSTEXPR auto out() -> iterator { return out_; }
_ZN3fmt3v106detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_:
 2587|     42|                                       Handler&& handler) {
 2588|     42|  auto begin = format_str.data();
 2589|     42|  auto end = begin + format_str.size();
 2590|     42|  if (end - begin < 32) {
  ------------------
  |  Branch (2590:7): [True: 0, False: 42]
  ------------------
 2591|       |    // Use a simple loop instead of memchr for small strings.
 2592|      0|    const Char* p = begin;
 2593|      0|    while (p != end) {
  ------------------
  |  Branch (2593:12): [True: 0, False: 0]
  ------------------
 2594|      0|      auto c = *p++;
 2595|      0|      if (c == '{') {
  ------------------
  |  Branch (2595:11): [True: 0, False: 0]
  ------------------
 2596|      0|        handler.on_text(begin, p - 1);
 2597|      0|        begin = p = parse_replacement_field(p - 1, end, handler);
 2598|      0|      } else if (c == '}') {
  ------------------
  |  Branch (2598:18): [True: 0, False: 0]
  ------------------
 2599|      0|        if (p == end || *p != '}')
  ------------------
  |  Branch (2599:13): [True: 0, False: 0]
  |  Branch (2599:25): [True: 0, False: 0]
  ------------------
 2600|      0|          return handler.on_error("unmatched '}' in format string");
 2601|      0|        handler.on_text(begin, p);
 2602|      0|        begin = ++p;
 2603|      0|      }
 2604|      0|    }
 2605|      0|    handler.on_text(begin, end);
 2606|      0|    return;
 2607|      0|  }
 2608|     42|  struct writer {
 2609|     42|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2610|     42|      if (from == to) return;
 2611|     42|      for (;;) {
 2612|     42|        const Char* p = nullptr;
 2613|     42|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
 2614|     42|          return handler_.on_text(from, to);
 2615|     42|        ++p;
 2616|     42|        if (p == to || *p != '}')
 2617|     42|          return handler_.on_error("unmatched '}' in format string");
 2618|     42|        handler_.on_text(from, p);
 2619|     42|        from = p + 1;
 2620|     42|      }
 2621|     42|    }
 2622|     42|    Handler& handler_;
 2623|     42|  } write = {handler};
 2624|    252|  while (begin != end) {
  ------------------
  |  Branch (2624:10): [True: 252, False: 0]
  ------------------
 2625|       |    // Doing two passes with memchr (one for '{' and another for '}') is up to
 2626|       |    // 2.5x faster than the naive one-pass implementation on big format strings.
 2627|    252|    const Char* p = begin;
 2628|    252|    if (*begin != '{' && !find<IS_CONSTEXPR>(begin + 1, end, Char('{'), p))
  ------------------
  |  Branch (2628:9): [True: 252, False: 0]
  |  Branch (2628:26): [True: 42, False: 210]
  ------------------
 2629|     42|      return write(begin, end);
 2630|    210|    write(begin, p);
 2631|    210|    begin = parse_replacement_field(p, end, handler);
 2632|    210|  }
 2633|     42|}
_ZN3fmt3v107context10advance_toENS0_14basic_appenderIcEE:
 1961|    462|  void advance_to(iterator) {}
_ZN3fmt3v106detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_:
 2550|    210|                                           Handler&& handler) -> const Char* {
 2551|    210|  struct id_adapter {
 2552|    210|    Handler& handler;
 2553|    210|    int arg_id;
 2554|       |
 2555|    210|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
 2556|    210|    FMT_CONSTEXPR void on_index(int id) { arg_id = handler.on_arg_id(id); }
 2557|    210|    FMT_CONSTEXPR void on_name(basic_string_view<Char> id) {
 2558|    210|      arg_id = handler.on_arg_id(id);
 2559|    210|    }
 2560|    210|  };
 2561|       |
 2562|    210|  ++begin;
 2563|    210|  if (begin == end) return handler.on_error("invalid format string"), end;
  ------------------
  |  Branch (2563:7): [True: 0, False: 210]
  ------------------
 2564|    210|  if (*begin == '}') {
  ------------------
  |  Branch (2564:7): [True: 0, False: 210]
  ------------------
 2565|      0|    handler.on_replacement_field(handler.on_arg_id(), begin);
 2566|    210|  } else if (*begin == '{') {
  ------------------
  |  Branch (2566:14): [True: 0, False: 210]
  ------------------
 2567|      0|    handler.on_text(begin, begin + 1);
 2568|    210|  } else {
 2569|    210|    auto adapter = id_adapter{handler, 0};
 2570|    210|    begin = parse_arg_id(begin, end, adapter);
 2571|    210|    Char c = begin != end ? *begin : Char();
  ------------------
  |  Branch (2571:14): [True: 210, False: 0]
  ------------------
 2572|    210|    if (c == '}') {
  ------------------
  |  Branch (2572:9): [True: 0, False: 210]
  ------------------
 2573|      0|      handler.on_replacement_field(adapter.arg_id, begin);
 2574|    210|    } else if (c == ':') {
  ------------------
  |  Branch (2574:16): [True: 210, False: 0]
  ------------------
 2575|    210|      begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 2576|    210|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (2576:11): [True: 0, False: 210]
  |  Branch (2576:27): [True: 0, False: 210]
  ------------------
 2577|      0|        return handler.on_error("unknown format specifier"), end;
 2578|    210|    } else {
 2579|      0|      return handler.on_error("missing '}' in format string"), end;
 2580|      0|    }
 2581|    210|  }
 2582|    210|  return begin + 1;
 2583|    210|}
_ZNK3fmt3v107context3argEi:
 1950|    210|  FMT_CONSTEXPR auto arg(int id) const -> format_arg { return args_.get(id); }
_ZN3fmt3v107context6localeEv:
 1963|    210|  FMT_CONSTEXPR auto locale() -> detail::locale_ref { return loc_; }
_ZN3fmt3v1026basic_format_parse_contextIcE11next_arg_idEv:
  773|    210|  FMT_CONSTEXPR auto next_arg_id() -> int {
  774|    210|    if (next_arg_id_ < 0) {
  ------------------
  |  Branch (774:9): [True: 0, False: 210]
  ------------------
  775|      0|      report_error("cannot switch from manual to automatic argument indexing");
  776|      0|      return 0;
  777|      0|    }
  778|    210|    int id = next_arg_id_++;
  779|    210|    do_check_arg_id(id);
  780|    210|    return id;
  781|    210|  }
_ZN3fmt3v1026basic_format_parse_contextIcE15do_check_arg_idEi:
 1105|    210|FMT_CONSTEXPR void basic_format_parse_context<Char>::do_check_arg_id(int id) {
 1106|       |  // Argument id is only checked at compile-time during parsing because
 1107|       |  // formatting has its own validation.
 1108|    210|  if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (1108:7): [Folded - Ignored]
  ------------------
 1109|    210|      (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   37|      0|#  define FMT_GCC_VERSION 0
  ------------------
                    (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   37|      0|#  define FMT_GCC_VERSION 0
  ------------------
  |  Branch (1109:8): [Folded - Ignored]
  |  Branch (1109:28): [Folded - Ignored]
  ------------------
 1110|      0|    using context = detail::compile_parse_context<Char>;
 1111|      0|    if (id >= static_cast<context*>(this)->num_args())
  ------------------
  |  Branch (1111:9): [True: 0, False: 0]
  ------------------
 1112|      0|      report_error("argument not found");
 1113|      0|  }
 1114|    210|}
_ZN3fmt3v106detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS6_EENS1_12vformat_argsIS6_E4typeENS1_10locale_refEE14format_handlerEEPKS6_SI_SI_OT0_E10id_adapterEESI_SI_SI_SK_:
 2297|    210|                                Handler&& handler) -> const Char* {
 2298|    210|  FMT_ASSERT(begin != end, "");
  ------------------
  |  |  402|    210|    fmt::detail::ignore_unused((condition), (message))
  ------------------
 2299|    210|  Char c = *begin;
 2300|    210|  if (c != '}' && c != ':') return do_parse_arg_id(begin, end, handler);
  ------------------
  |  Branch (2300:7): [True: 210, False: 0]
  |  Branch (2300:19): [True: 0, False: 210]
  ------------------
 2301|    210|  handler.on_auto();
 2302|    210|  return begin;
 2303|    210|}
_ZZN3fmt3v106detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_EN10id_adapter7on_autoEv:
 2555|    210|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
_ZN3fmt3v1016basic_format_argINS0_7contextEE13format_customEPKcRNS0_26basic_format_parse_contextIcEERS2_:
 1804|    210|                     Context& ctx) -> bool {
 1805|    210|    if (type_ != detail::type::custom_type) return false;
  ------------------
  |  Branch (1805:9): [True: 210, False: 0]
  ------------------
 1806|      0|    parse_ctx.advance_to(parse_begin);
 1807|      0|    value_.custom.format(value_.custom.value, parse_ctx, ctx);
 1808|      0|    return true;
 1809|    210|  }
_ZN3fmt3v106detail7arg_refIcEC2Ev:
 2164|    420|  FMT_CONSTEXPR arg_ref() : kind(arg_id_kind::none), val() {}
_ZN3fmt3v106detail7arg_refIcE5valueC2Ei:
 2179|    420|    FMT_CONSTEXPR value(int idx = 0) : index(idx) {}
_ZN3fmt3v106detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeE:
 2368|    210|                                      type arg_type) -> const Char* {
 2369|    210|  auto c = '\0';
 2370|    210|  if (end - begin > 1) {
  ------------------
  |  Branch (2370:7): [True: 210, False: 0]
  ------------------
 2371|    210|    auto next = to_ascii(begin[1]);
 2372|    210|    c = parse_align(next) == align::none ? to_ascii(*begin) : '\0';
  ------------------
  |  Branch (2372:9): [True: 210, False: 0]
  ------------------
 2373|    210|  } else {
 2374|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2374:9): [True: 0, False: 0]
  ------------------
 2375|      0|    c = to_ascii(*begin);
 2376|      0|  }
 2377|       |
 2378|    210|  struct {
 2379|    210|    state current_state = state::start;
 2380|    210|    FMT_CONSTEXPR void operator()(state s, bool valid = true) {
 2381|    210|      if (current_state >= s || !valid)
 2382|    210|        report_error("invalid format specifier");
 2383|    210|      current_state = s;
 2384|    210|    }
 2385|    210|  } enter_state;
 2386|       |
 2387|    210|  using pres = presentation_type;
 2388|    210|  constexpr auto integral_set = sint_set | uint_set | bool_set | char_set;
 2389|    210|  struct {
 2390|    210|    const Char*& begin;
 2391|    210|    dynamic_format_specs<Char>& specs;
 2392|    210|    type arg_type;
 2393|       |
 2394|    210|    FMT_CONSTEXPR auto operator()(pres pres_type, int set) -> const Char* {
 2395|    210|      if (!in(arg_type, set)) {
 2396|    210|        if (arg_type == type::none_type) return begin;
 2397|    210|        report_error("invalid format specifier");
 2398|    210|      }
 2399|    210|      specs.type = pres_type;
 2400|    210|      return begin + 1;
 2401|    210|    }
 2402|    210|  } parse_presentation_type{begin, specs, arg_type};
 2403|       |
 2404|    210|  for (;;) {
 2405|    210|    switch (c) {
 2406|      0|    case '<':
  ------------------
  |  Branch (2406:5): [True: 0, False: 210]
  ------------------
 2407|      0|    case '>':
  ------------------
  |  Branch (2407:5): [True: 0, False: 210]
  ------------------
 2408|      0|    case '^':
  ------------------
  |  Branch (2408:5): [True: 0, False: 210]
  ------------------
 2409|      0|      enter_state(state::align);
 2410|      0|      specs.align = parse_align(c);
 2411|      0|      ++begin;
 2412|      0|      break;
 2413|      0|    case '+':
  ------------------
  |  Branch (2413:5): [True: 0, False: 210]
  ------------------
 2414|      0|    case '-':
  ------------------
  |  Branch (2414:5): [True: 0, False: 210]
  ------------------
 2415|      0|    case ' ':
  ------------------
  |  Branch (2415:5): [True: 0, False: 210]
  ------------------
 2416|      0|      if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2416:11): [True: 0, False: 0]
  ------------------
 2417|      0|      enter_state(state::sign, in(arg_type, sint_set | float_set));
 2418|      0|      switch (c) {
  ------------------
  |  Branch (2418:15): [True: 0, False: 0]
  ------------------
 2419|      0|      case '+':
  ------------------
  |  Branch (2419:7): [True: 0, False: 0]
  ------------------
 2420|      0|        specs.sign = sign::plus;
 2421|      0|        break;
 2422|      0|      case '-':
  ------------------
  |  Branch (2422:7): [True: 0, False: 0]
  ------------------
 2423|      0|        specs.sign = sign::minus;
 2424|      0|        break;
 2425|      0|      case ' ':
  ------------------
  |  Branch (2425:7): [True: 0, False: 0]
  ------------------
 2426|      0|        specs.sign = sign::space;
 2427|      0|        break;
 2428|      0|      }
 2429|      0|      ++begin;
 2430|      0|      break;
 2431|      0|    case '#':
  ------------------
  |  Branch (2431:5): [True: 0, False: 210]
  ------------------
 2432|      0|      if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2432:11): [True: 0, False: 0]
  ------------------
 2433|      0|      enter_state(state::hash, is_arithmetic_type(arg_type));
 2434|      0|      specs.alt = true;
 2435|      0|      ++begin;
 2436|      0|      break;
 2437|      0|    case '0':
  ------------------
  |  Branch (2437:5): [True: 0, False: 210]
  ------------------
 2438|      0|      enter_state(state::zero);
 2439|      0|      if (!is_arithmetic_type(arg_type)) {
  ------------------
  |  Branch (2439:11): [True: 0, False: 0]
  ------------------
 2440|      0|        if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2440:13): [True: 0, False: 0]
  ------------------
 2441|      0|        report_error("format specifier requires numeric argument");
 2442|      0|      }
 2443|      0|      if (specs.align == align::none) {
  ------------------
  |  Branch (2443:11): [True: 0, False: 0]
  ------------------
 2444|       |        // Ignore 0 if align is specified for compatibility with std::format.
 2445|      0|        specs.align = align::numeric;
 2446|      0|        specs.fill = '0';
 2447|      0|      }
 2448|      0|      ++begin;
 2449|      0|      break;
 2450|      0|    case '1':
  ------------------
  |  Branch (2450:5): [True: 0, False: 210]
  ------------------
 2451|      0|    case '2':
  ------------------
  |  Branch (2451:5): [True: 0, False: 210]
  ------------------
 2452|      0|    case '3':
  ------------------
  |  Branch (2452:5): [True: 0, False: 210]
  ------------------
 2453|      0|    case '4':
  ------------------
  |  Branch (2453:5): [True: 0, False: 210]
  ------------------
 2454|      0|    case '5':
  ------------------
  |  Branch (2454:5): [True: 0, False: 210]
  ------------------
 2455|      0|    case '6':
  ------------------
  |  Branch (2455:5): [True: 0, False: 210]
  ------------------
 2456|      0|    case '7':
  ------------------
  |  Branch (2456:5): [True: 0, False: 210]
  ------------------
 2457|      0|    case '8':
  ------------------
  |  Branch (2457:5): [True: 0, False: 210]
  ------------------
 2458|      0|    case '9':
  ------------------
  |  Branch (2458:5): [True: 0, False: 210]
  ------------------
 2459|      0|    case '{':
  ------------------
  |  Branch (2459:5): [True: 0, False: 210]
  ------------------
 2460|      0|      enter_state(state::width);
 2461|      0|      begin = parse_dynamic_spec(begin, end, specs.width, specs.width_ref, ctx);
 2462|      0|      break;
 2463|      0|    case '.':
  ------------------
  |  Branch (2463:5): [True: 0, False: 210]
  ------------------
 2464|      0|      if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2464:11): [True: 0, False: 0]
  ------------------
 2465|      0|      enter_state(state::precision,
 2466|      0|                  in(arg_type, float_set | string_set | cstring_set));
 2467|      0|      begin = parse_precision(begin, end, specs.precision, specs.precision_ref,
 2468|      0|                              ctx);
 2469|      0|      break;
 2470|      0|    case 'L':
  ------------------
  |  Branch (2470:5): [True: 0, False: 210]
  ------------------
 2471|      0|      if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2471:11): [True: 0, False: 0]
  ------------------
 2472|      0|      enter_state(state::locale, is_arithmetic_type(arg_type));
 2473|      0|      specs.localized = true;
 2474|      0|      ++begin;
 2475|      0|      break;
 2476|    126|    case 'd':
  ------------------
  |  Branch (2476:5): [True: 126, False: 84]
  ------------------
 2477|    126|      return parse_presentation_type(pres::dec, integral_set);
 2478|      0|    case 'X':
  ------------------
  |  Branch (2478:5): [True: 0, False: 210]
  ------------------
 2479|      0|      specs.upper = true;
 2480|      0|      FMT_FALLTHROUGH;
  ------------------
  |  |  183|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2481|      0|    case 'x':
  ------------------
  |  Branch (2481:5): [True: 0, False: 210]
  ------------------
 2482|      0|      return parse_presentation_type(pres::hex, integral_set);
 2483|      0|    case 'o':
  ------------------
  |  Branch (2483:5): [True: 0, False: 210]
  ------------------
 2484|      0|      return parse_presentation_type(pres::oct, integral_set);
 2485|      0|    case 'B':
  ------------------
  |  Branch (2485:5): [True: 0, False: 210]
  ------------------
 2486|      0|      specs.upper = true;
 2487|      0|      FMT_FALLTHROUGH;
  ------------------
  |  |  183|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2488|      0|    case 'b':
  ------------------
  |  Branch (2488:5): [True: 0, False: 210]
  ------------------
 2489|      0|      return parse_presentation_type(pres::bin, integral_set);
 2490|      0|    case 'E':
  ------------------
  |  Branch (2490:5): [True: 0, False: 210]
  ------------------
 2491|      0|      specs.upper = true;
 2492|      0|      FMT_FALLTHROUGH;
  ------------------
  |  |  183|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2493|      0|    case 'e':
  ------------------
  |  Branch (2493:5): [True: 0, False: 210]
  ------------------
 2494|      0|      return parse_presentation_type(pres::exp, float_set);
 2495|      0|    case 'F':
  ------------------
  |  Branch (2495:5): [True: 0, False: 210]
  ------------------
 2496|      0|      specs.upper = true;
 2497|      0|      FMT_FALLTHROUGH;
  ------------------
  |  |  183|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2498|      0|    case 'f':
  ------------------
  |  Branch (2498:5): [True: 0, False: 210]
  ------------------
 2499|      0|      return parse_presentation_type(pres::fixed, float_set);
 2500|      0|    case 'G':
  ------------------
  |  Branch (2500:5): [True: 0, False: 210]
  ------------------
 2501|      0|      specs.upper = true;
 2502|      0|      FMT_FALLTHROUGH;
  ------------------
  |  |  183|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2503|      0|    case 'g':
  ------------------
  |  Branch (2503:5): [True: 0, False: 210]
  ------------------
 2504|      0|      return parse_presentation_type(pres::general, float_set);
 2505|      0|    case 'A':
  ------------------
  |  Branch (2505:5): [True: 0, False: 210]
  ------------------
 2506|      0|      specs.upper = true;
 2507|      0|      FMT_FALLTHROUGH;
  ------------------
  |  |  183|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2508|      0|    case 'a':
  ------------------
  |  Branch (2508:5): [True: 0, False: 210]
  ------------------
 2509|      0|      return parse_presentation_type(pres::hexfloat, float_set);
 2510|      0|    case 'c':
  ------------------
  |  Branch (2510:5): [True: 0, False: 210]
  ------------------
 2511|      0|      if (arg_type == type::bool_type) report_error("invalid format specifier");
  ------------------
  |  Branch (2511:11): [True: 0, False: 0]
  ------------------
 2512|      0|      return parse_presentation_type(pres::chr, integral_set);
 2513|     84|    case 's':
  ------------------
  |  Branch (2513:5): [True: 84, False: 126]
  ------------------
 2514|     84|      return parse_presentation_type(pres::string,
 2515|     84|                                     bool_set | string_set | cstring_set);
 2516|      0|    case 'p':
  ------------------
  |  Branch (2516:5): [True: 0, False: 210]
  ------------------
 2517|      0|      return parse_presentation_type(pres::pointer, pointer_set | cstring_set);
 2518|      0|    case '?':
  ------------------
  |  Branch (2518:5): [True: 0, False: 210]
  ------------------
 2519|      0|      return parse_presentation_type(pres::debug,
 2520|      0|                                     char_set | string_set | cstring_set);
 2521|      0|    case '}':
  ------------------
  |  Branch (2521:5): [True: 0, False: 210]
  ------------------
 2522|      0|      return begin;
 2523|      0|    default: {
  ------------------
  |  Branch (2523:5): [True: 0, False: 210]
  ------------------
 2524|      0|      if (*begin == '}') return begin;
  ------------------
  |  Branch (2524:11): [True: 0, False: 0]
  ------------------
 2525|       |      // Parse fill and alignment.
 2526|      0|      auto fill_end = begin + code_point_length(begin);
 2527|      0|      if (end - fill_end <= 0) {
  ------------------
  |  Branch (2527:11): [True: 0, False: 0]
  ------------------
 2528|      0|        report_error("invalid format specifier");
 2529|      0|        return begin;
 2530|      0|      }
 2531|      0|      if (*begin == '{') {
  ------------------
  |  Branch (2531:11): [True: 0, False: 0]
  ------------------
 2532|      0|        report_error("invalid fill character '{'");
 2533|      0|        return begin;
 2534|      0|      }
 2535|      0|      auto align = parse_align(to_ascii(*fill_end));
 2536|      0|      enter_state(state::align, align != align::none);
 2537|      0|      specs.fill =
 2538|      0|          basic_string_view<Char>(begin, to_unsigned(fill_end - begin));
 2539|      0|      specs.align = align;
 2540|      0|      begin = fill_end + 1;
 2541|      0|    }
 2542|    210|    }
 2543|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2543:9): [True: 0, False: 0]
  ------------------
 2544|      0|    c = to_ascii(*begin);
 2545|      0|  }
 2546|    210|}
_ZN3fmt3v106detail8to_asciiIcLi0EEEcT_:
 2197|    420|constexpr auto to_ascii(Char c) -> char {
 2198|    420|  return c <= 0xff ? static_cast<char>(c) : '\0';
  ------------------
  |  Branch (2198:10): [True: 420, False: 0]
  ------------------
 2199|    420|}
_ZN3fmt3v106detail11parse_alignEc:
 2251|    210|FMT_CONSTEXPR inline auto parse_align(char c) -> align_t {
 2252|    210|  switch (c) {
  ------------------
  |  Branch (2252:11): [True: 210, False: 0]
  ------------------
 2253|      0|  case '<':
  ------------------
  |  Branch (2253:3): [True: 0, False: 210]
  ------------------
 2254|      0|    return align::left;
 2255|      0|  case '>':
  ------------------
  |  Branch (2255:3): [True: 0, False: 210]
  ------------------
 2256|      0|    return align::right;
 2257|      0|  case '^':
  ------------------
  |  Branch (2257:3): [True: 0, False: 210]
  ------------------
 2258|      0|    return align::center;
 2259|    210|  }
 2260|    210|  return align::none;
 2261|    210|}
_ZN3fmt3v106detail2inENS1_4typeEi:
  701|    210|constexpr auto in(type t, int set) -> bool {
  702|    210|  return ((set >> static_cast<int>(t)) & 1) != 0;
  703|    210|}
_ZZN3fmt3v106detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeEENUt0_clENS0_17presentation_typeEi:
 2394|    210|    FMT_CONSTEXPR auto operator()(pres pres_type, int set) -> const Char* {
 2395|    210|      if (!in(arg_type, set)) {
  ------------------
  |  Branch (2395:11): [True: 0, False: 210]
  ------------------
 2396|      0|        if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2396:13): [True: 0, False: 0]
  ------------------
 2397|      0|        report_error("invalid format specifier");
 2398|      0|      }
 2399|    210|      specs.type = pres_type;
 2400|    210|      return begin + 1;
 2401|    210|    }
_ZNK3fmt3v1016basic_format_argINS0_7contextEE4typeEv:
 1750|    210|  auto type() const -> detail::type { return type_; }
_ZN3fmt3v1016basic_format_argINS0_7contextEE5visitINS0_6detail13arg_formatterIcEEEEDTclfp_Li0EEEOT_:
 1763|    210|  FMT_CONSTEXPR auto visit(Visitor&& vis) -> decltype(vis(0)) {
 1764|    210|    switch (type_) {
  ------------------
  |  Branch (1764:13): [True: 0, False: 210]
  ------------------
 1765|      0|    case detail::type::none_type:
  ------------------
  |  Branch (1765:5): [True: 0, False: 210]
  ------------------
 1766|      0|      break;
 1767|      0|    case detail::type::int_type:
  ------------------
  |  Branch (1767:5): [True: 0, False: 210]
  ------------------
 1768|      0|      return vis(value_.int_value);
 1769|    126|    case detail::type::uint_type:
  ------------------
  |  Branch (1769:5): [True: 126, False: 84]
  ------------------
 1770|    126|      return vis(value_.uint_value);
 1771|      0|    case detail::type::long_long_type:
  ------------------
  |  Branch (1771:5): [True: 0, False: 210]
  ------------------
 1772|      0|      return vis(value_.long_long_value);
 1773|      0|    case detail::type::ulong_long_type:
  ------------------
  |  Branch (1773:5): [True: 0, False: 210]
  ------------------
 1774|      0|      return vis(value_.ulong_long_value);
 1775|      0|    case detail::type::int128_type:
  ------------------
  |  Branch (1775:5): [True: 0, False: 210]
  ------------------
 1776|      0|      return vis(detail::convert_for_visit(value_.int128_value));
 1777|      0|    case detail::type::uint128_type:
  ------------------
  |  Branch (1777:5): [True: 0, False: 210]
  ------------------
 1778|      0|      return vis(detail::convert_for_visit(value_.uint128_value));
 1779|      0|    case detail::type::bool_type:
  ------------------
  |  Branch (1779:5): [True: 0, False: 210]
  ------------------
 1780|      0|      return vis(value_.bool_value);
 1781|      0|    case detail::type::char_type:
  ------------------
  |  Branch (1781:5): [True: 0, False: 210]
  ------------------
 1782|      0|      return vis(value_.char_value);
 1783|      0|    case detail::type::float_type:
  ------------------
  |  Branch (1783:5): [True: 0, False: 210]
  ------------------
 1784|      0|      return vis(value_.float_value);
 1785|      0|    case detail::type::double_type:
  ------------------
  |  Branch (1785:5): [True: 0, False: 210]
  ------------------
 1786|      0|      return vis(value_.double_value);
 1787|      0|    case detail::type::long_double_type:
  ------------------
  |  Branch (1787:5): [True: 0, False: 210]
  ------------------
 1788|      0|      return vis(value_.long_double_value);
 1789|     84|    case detail::type::cstring_type:
  ------------------
  |  Branch (1789:5): [True: 84, False: 126]
  ------------------
 1790|     84|      return vis(value_.string.data);
 1791|      0|    case detail::type::string_type:
  ------------------
  |  Branch (1791:5): [True: 0, False: 210]
  ------------------
 1792|      0|      using sv = basic_string_view<typename Context::char_type>;
 1793|      0|      return vis(sv(value_.string.data, value_.string.size));
 1794|      0|    case detail::type::pointer_type:
  ------------------
  |  Branch (1794:5): [True: 0, False: 210]
  ------------------
 1795|      0|      return vis(value_.pointer);
 1796|      0|    case detail::type::custom_type:
  ------------------
  |  Branch (1796:5): [True: 0, False: 210]
  ------------------
 1797|      0|      return vis(typename basic_format_arg<Context>::handle(value_.custom));
 1798|    210|    }
 1799|      0|    return vis(monostate());
 1800|    210|  }
_ZN3fmt3v106detail10arg_mapperINS0_7contextEE3mapEj:
 1429|    126|  FMT_MAP_API auto map(unsigned val) -> unsigned { return val; }
_ZN3fmt3v106detail5valueINS0_7contextEEC2Ej:
 1338|    126|  constexpr FMT_ALWAYS_INLINE value(unsigned val) : uint_value(val) {}
_ZN3fmt3v106detail4findILb0EcPKcEEbT1_S5_T0_RS5_:
 2220|    504|                              const char*& out) -> bool {
 2221|    504|  out =
 2222|    504|      static_cast<const char*>(memchr(first, value, to_unsigned(last - first)));
 2223|    504|  return out != nullptr;
 2224|    504|}
_ZZN3fmt3v106detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_EN6writerclEPKcSL_:
 2609|    252|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2610|    252|      if (from == to) return;
  ------------------
  |  Branch (2610:11): [True: 0, False: 252]
  ------------------
 2611|    252|      for (;;) {
 2612|    252|        const Char* p = nullptr;
 2613|    252|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
  ------------------
  |  Branch (2613:13): [True: 252, False: 0]
  ------------------
 2614|    252|          return handler_.on_text(from, to);
 2615|      0|        ++p;
 2616|      0|        if (p == to || *p != '}')
  ------------------
  |  Branch (2616:13): [True: 0, False: 0]
  |  Branch (2616:24): [True: 0, False: 0]
  ------------------
 2617|      0|          return handler_.on_error("unmatched '}' in format string");
 2618|      0|        handler_.on_text(from, p);
 2619|      0|        from = p + 1;
 2620|      0|      }
 2621|    252|    }
_ZN3fmt3v106detail10arg_mapperINS0_7contextEE3mapEPKc:
 1462|     84|  FMT_MAP_API auto map(const char_type* val) -> const char_type* { return val; }
_ZN3fmt3v106detail5valueINS0_7contextEEC2EPKc:
 1349|     84|  FMT_CONSTEXPR FMT_ALWAYS_INLINE value(const char_type* val) {
 1350|     84|    string.data = val;
 1351|     84|    if (is_constant_evaluated()) string.size = {};
  ------------------
  |  Branch (1351:9): [Folded - Ignored]
  ------------------
 1352|     84|  }

_ZN3fmt3v106detail5printEP8_IO_FILENS0_17basic_string_viewIcEE:
 1676|     42|FMT_FUNC void print(std::FILE* f, string_view text) {
 1677|       |#if defined(_WIN32) && !defined(FMT_USE_WRITE_CONSOLE)
 1678|       |  int fd = _fileno(f);
 1679|       |  if (_isatty(fd)) {
 1680|       |    std::fflush(f);
 1681|       |    if (write_console(fd, text)) return;
 1682|       |  }
 1683|       |#endif
 1684|     42|  fwrite_fully(text.data(), text.size(), f);
 1685|     42|}
_ZN3fmt3v1015vprint_bufferedEP8_IO_FILENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_7contextEEE:
 1688|     42|FMT_FUNC void vprint_buffered(std::FILE* f, string_view fmt, format_args args) {
 1689|     42|  auto buffer = memory_buffer();
 1690|     42|  detail::vformat_to(buffer, fmt, args);
 1691|     42|  detail::print(f, {buffer.data(), buffer.size()});
 1692|     42|}
_ZN3fmt3v106vprintEP8_IO_FILENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_7contextEEE:
 1694|     42|FMT_FUNC void vprint(std::FILE* f, string_view fmt, format_args args) {
 1695|     42|  if (!detail::file_ref(f).is_buffered()) return vprint_buffered(f, fmt, args);
  ------------------
  |  Branch (1695:7): [True: 42, False: 0]
  ------------------
 1696|      0|  auto&& buffer = detail::file_print_buffer(f);
 1697|      0|  return detail::vformat_to(buffer, fmt, args);
 1698|     42|}
_ZN3fmt3v106vprintENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_7contextEEE:
 1707|     42|FMT_FUNC void vprint(string_view fmt, format_args args) {
 1708|     42|  vprint(stdout, fmt, args);
 1709|     42|}
_ZN3fmt3v106detail12fwrite_fullyEPKvmP8_IO_FILE:
   74|     42|inline void fwrite_fully(const void* ptr, size_t count, FILE* stream) {
   75|     42|  size_t written = std::fwrite(ptr, 1, count, stream);
   76|     42|  if (written < count)
  ------------------
  |  Branch (76:7): [True: 0, False: 42]
  ------------------
   77|      0|    FMT_THROW(system_error(errno, FMT_STRING("cannot write to file")));
  ------------------
  |  |  128|      0|      ::fmt::detail::assert_fail(__FILE__, __LINE__, (x).what())
  ------------------
   78|     42|}
_ZN3fmt3v106detail9file_baseI8_IO_FILEEC2EPS3_:
 1459|     42|  file_base(F* file) : file_(file) {}
_ZNK3fmt3v106detail13fallback_fileI8_IO_FILEE11is_bufferedEv:
 1579|     42|  auto is_buffered() const -> bool { return false; }

_ZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refE:
 4213|     42|                typename vformat_args<Char>::type args, locale_ref loc) {
 4214|     42|  auto out = basic_appender<Char>(buf);
 4215|     42|  if (fmt.size() == 2 && equal2(fmt.data(), "{}")) {
  ------------------
  |  Branch (4215:7): [True: 0, False: 42]
  |  Branch (4215:26): [True: 0, False: 0]
  ------------------
 4216|      0|    auto arg = args.get(0);
 4217|      0|    if (!arg) report_error("argument not found");
  ------------------
  |  Branch (4217:9): [True: 0, False: 0]
  ------------------
 4218|      0|    arg.visit(default_arg_formatter<Char>{out, args, loc});
 4219|      0|    return;
 4220|      0|  }
 4221|       |
 4222|     42|  struct format_handler {
 4223|     42|    basic_format_parse_context<Char> parse_context;
 4224|     42|    buffered_context<Char> context;
 4225|       |
 4226|     42|    format_handler(basic_appender<Char> p_out, basic_string_view<Char> str,
 4227|     42|                   basic_format_args<buffered_context<Char>> p_args,
 4228|     42|                   locale_ref p_loc)
 4229|     42|        : parse_context(str), context(p_out, p_args, p_loc) {}
 4230|       |
 4231|     42|    void on_text(const Char* begin, const Char* end) {
 4232|     42|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4233|     42|      context.advance_to(write<Char>(context.out(), text));
 4234|     42|    }
 4235|       |
 4236|     42|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4237|     42|      return parse_context.next_arg_id();
 4238|     42|    }
 4239|     42|    FMT_CONSTEXPR auto on_arg_id(int id) -> int {
 4240|     42|      parse_context.check_arg_id(id);
 4241|     42|      return id;
 4242|     42|    }
 4243|     42|    FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {
 4244|     42|      parse_context.check_arg_id(id);
 4245|     42|      int arg_id = context.arg_id(id);
 4246|     42|      if (arg_id < 0) report_error("argument not found");
 4247|     42|      return arg_id;
 4248|     42|    }
 4249|       |
 4250|     42|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4251|     42|      auto arg = get_arg(context, id);
 4252|     42|      context.advance_to(arg.visit(default_arg_formatter<Char>{
 4253|     42|          context.out(), context.args(), context.locale()}));
 4254|     42|    }
 4255|       |
 4256|     42|    auto on_format_specs(int id, const Char* begin, const Char* end)
 4257|     42|        -> const Char* {
 4258|     42|      auto arg = get_arg(context, id);
 4259|       |      // Not using a visitor for custom types gives better codegen.
 4260|     42|      if (arg.format_custom(begin, parse_context, context))
 4261|     42|        return parse_context.begin();
 4262|     42|      auto specs = detail::dynamic_format_specs<Char>();
 4263|     42|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4264|     42|      detail::handle_dynamic_spec<detail::width_checker>(
 4265|     42|          specs.width, specs.width_ref, context);
 4266|     42|      detail::handle_dynamic_spec<detail::precision_checker>(
 4267|     42|          specs.precision, specs.precision_ref, context);
 4268|     42|      if (begin == end || *begin != '}')
 4269|     42|        report_error("missing '}' in format string");
 4270|     42|      context.advance_to(arg.visit(
 4271|     42|          arg_formatter<Char>{context.out(), specs, context.locale()}));
 4272|     42|      return begin;
 4273|     42|    }
 4274|       |
 4275|     42|    FMT_NORETURN void on_error(const char* message) { report_error(message); }
 4276|     42|  };
 4277|     42|  detail::parse_format_string<false>(fmt, format_handler(out, fmt, args, loc));
 4278|     42|}
_ZN3fmt3v106detail12count_digitsEj:
 1218|    252|FMT_CONSTEXPR20 inline auto count_digits(uint32_t n) -> int {
 1219|    252|#ifdef FMT_BUILTIN_CLZ
 1220|    252|  if (!is_constant_evaluated()) {
  ------------------
  |  Branch (1220:7): [Folded - Ignored]
  ------------------
 1221|    252|    return do_count_digits(n);
 1222|    252|  }
 1223|      0|#endif
 1224|      0|  return count_digits_fallback(n);
 1225|    252|}
_ZN3fmt3v106detail15do_count_digitsEj:
 1195|    252|FMT_INLINE auto do_count_digits(uint32_t n) -> int {
 1196|       |// An optimization by Kendall Willets from https://bit.ly/3uOIQrB.
 1197|       |// This increments the upper 32 bits (log10(T) - 1) when >= T is added.
 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
 1199|    252|  static constexpr uint64_t table[] = {
 1200|    252|      FMT_INC(0),          FMT_INC(0),          FMT_INC(0),           // 8
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(0),          FMT_INC(0),          FMT_INC(0),           // 8
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(0),          FMT_INC(0),          FMT_INC(0),           // 8
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1201|    252|      FMT_INC(10),         FMT_INC(10),         FMT_INC(10),          // 64
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10),         FMT_INC(10),         FMT_INC(10),          // 64
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10),         FMT_INC(10),         FMT_INC(10),          // 64
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1202|    252|      FMT_INC(100),        FMT_INC(100),        FMT_INC(100),         // 512
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100),        FMT_INC(100),        FMT_INC(100),         // 512
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100),        FMT_INC(100),        FMT_INC(100),         // 512
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1203|    252|      FMT_INC(1000),       FMT_INC(1000),       FMT_INC(1000),        // 4096
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000),       FMT_INC(1000),       FMT_INC(1000),        // 4096
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000),       FMT_INC(1000),       FMT_INC(1000),        // 4096
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1204|    252|      FMT_INC(10000),      FMT_INC(10000),      FMT_INC(10000),       // 32k
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10000),      FMT_INC(10000),      FMT_INC(10000),       // 32k
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10000),      FMT_INC(10000),      FMT_INC(10000),       // 32k
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1205|    252|      FMT_INC(100000),     FMT_INC(100000),     FMT_INC(100000),      // 256k
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100000),     FMT_INC(100000),     FMT_INC(100000),      // 256k
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100000),     FMT_INC(100000),     FMT_INC(100000),      // 256k
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1206|    252|      FMT_INC(1000000),    FMT_INC(1000000),    FMT_INC(1000000),     // 2048k
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000000),    FMT_INC(1000000),    FMT_INC(1000000),     // 2048k
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000000),    FMT_INC(1000000),    FMT_INC(1000000),     // 2048k
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1207|    252|      FMT_INC(10000000),   FMT_INC(10000000),   FMT_INC(10000000),    // 16M
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10000000),   FMT_INC(10000000),   FMT_INC(10000000),    // 16M
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10000000),   FMT_INC(10000000),   FMT_INC(10000000),    // 16M
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1208|    252|      FMT_INC(100000000),  FMT_INC(100000000),  FMT_INC(100000000),   // 128M
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100000000),  FMT_INC(100000000),  FMT_INC(100000000),   // 128M
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100000000),  FMT_INC(100000000),  FMT_INC(100000000),   // 128M
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1209|    252|      FMT_INC(1000000000), FMT_INC(1000000000), FMT_INC(1000000000),  // 1024M
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000000000), FMT_INC(1000000000), FMT_INC(1000000000),  // 1024M
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000000000), FMT_INC(1000000000), FMT_INC(1000000000),  // 1024M
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1210|       |      FMT_INC(1000000000), FMT_INC(1000000000)                        // 4B
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000000000), FMT_INC(1000000000)                        // 4B
  ------------------
  |  | 1198|    252|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1211|    252|  };
 1212|    252|  auto inc = table[FMT_BUILTIN_CLZ(n | 1) ^ 31];
  ------------------
  |  |  166|    252|#    define FMT_BUILTIN_CLZ(n) __builtin_clz(n)
  ------------------
 1213|    252|  return static_cast<int>((n + inc) >> 32);
 1214|    252|}
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEEC2ERKS4_:
  870|     42|      : detail::buffer<T>(grow), alloc_(alloc) {
  871|     42|    this->set(store_, SIZE);
  872|     42|    if (detail::is_constant_evaluated()) detail::fill_n(store_, SIZE, T());
  ------------------
  |  Branch (872:9): [Folded - Ignored]
  ------------------
  873|     42|  }
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEED2Ev:
  874|     42|  FMT_CONSTEXPR20 ~basic_memory_buffer() { deallocate(); }
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE10deallocateEv:
  835|     42|  FMT_CONSTEXPR20 void deallocate() {
  836|     42|    T* data = this->data();
  837|     42|    if (data != store_) alloc_.deallocate(data, this->capacity());
  ------------------
  |  Branch (837:9): [True: 0, False: 42]
  ------------------
  838|     42|  }
_ZN3fmt3v106detail5writeIcNS0_14basic_appenderIcEEEET0_S5_NS0_17basic_string_viewIT_EE:
 3631|    252|    -> OutputIt {
 3632|    252|  auto it = reserve(out, value.size());
 3633|    252|  it = copy_noinline<Char>(value.begin(), value.end(), it);
 3634|    252|  return base_iterator(out, it);
 3635|    252|}
_ZN3fmt3v106detail7reserveIcEENS0_14basic_appenderIT_EES5_m:
  527|    462|inline auto reserve(basic_appender<T> it, size_t n) -> basic_appender<T> {
  528|    462|  buffer<T>& buf = get_container(it);
  529|    462|  buf.try_reserve(buf.size() + n);
  530|    462|  return it;
  531|    462|}
_ZN3fmt3v106detail13copy_noinlineIcPKcNS0_14basic_appenderIcEEEET1_T0_S8_S7_:
  587|    252|                                              OutputIt out) -> OutputIt {
  588|    252|  return copy<OutChar>(begin, end, out);
  589|    252|}
_ZN3fmt3v106detail13base_iteratorINS0_14basic_appenderIcEEEET_S5_S5_:
  564|    462|constexpr auto base_iterator(Iterator, Iterator it) -> Iterator {
  565|    462|  return it;
  566|    462|}
_ZN3fmt3v106detail14format_decimalIcjEENS1_21format_decimal_resultIPT_EES5_T0_i:
 1288|    126|    -> format_decimal_result<Char*> {
 1289|    126|  FMT_ASSERT(size >= count_digits(value), "invalid digit count");
  ------------------
  |  |  402|    126|    fmt::detail::ignore_unused((condition), (message))
  ------------------
 1290|    126|  out += size;
 1291|    126|  Char* end = out;
 1292|    126|  while (value >= 100) {
  ------------------
  |  Branch (1292:10): [True: 0, False: 126]
  ------------------
 1293|       |    // Integer division is slow so do it for a group of two digits instead
 1294|       |    // of for every digit. The idea comes from the talk by Alexandrescu
 1295|       |    // "Three Optimization Tips for C++". See speed-test for a comparison.
 1296|      0|    out -= 2;
 1297|      0|    copy2(out, digits2(static_cast<size_t>(value % 100)));
 1298|      0|    value /= 100;
 1299|      0|  }
 1300|    126|  if (value < 10) {
  ------------------
  |  Branch (1300:7): [True: 126, False: 0]
  ------------------
 1301|    126|    *--out = static_cast<Char>('0' + value);
 1302|    126|    return {out, end};
 1303|    126|  }
 1304|      0|  out -= 2;
 1305|      0|  copy2(out, digits2(static_cast<size_t>(value)));
 1306|      0|  return {out, end};
 1307|    126|}
_ZN3fmt3v106detail14format_decimalIcjNS0_14basic_appenderIcEELi0EEENS1_21format_decimal_resultIT1_EES6_T0_i:
 1312|    126|    -> format_decimal_result<Iterator> {
 1313|       |  // Buffer is large enough to hold all digits (digits10 + 1).
 1314|    126|  Char buffer[digits10<UInt>() + 1] = {};
 1315|    126|  auto end = format_decimal(buffer, value, size).end;
 1316|    126|  return {out, detail::copy_noinline<Char>(buffer, end, out)};
 1317|    126|}
_ZN3fmt3v106detail13copy_noinlineIcPcNS0_14basic_appenderIcEEEET1_T0_S7_S6_:
  587|    126|                                              OutputIt out) -> OutputIt {
  588|    126|  return copy<OutChar>(begin, end, out);
  589|    126|}
_ZN3fmt3v106detail11is_negativeIjLi0EEEbT_:
 1080|    126|constexpr auto is_negative(T) -> bool {
 1081|    126|  return false;
 1082|    126|}
_ZN3fmt3v106detail18write_int_noinlineIcNS0_14basic_appenderIcEEjEET0_S5_NS1_13write_int_argIT1_EERKNS0_12format_specsENS1_10locale_refE:
 2202|    126|                                                   locale_ref loc) -> OutputIt {
 2203|    126|  return write_int<Char>(out, arg, specs, loc);
 2204|    126|}
_ZN3fmt3v106detail9write_intIcNS0_14basic_appenderIcEEjEET0_S5_NS1_13write_int_argIT1_EERKNS0_12format_specsENS1_10locale_refE:
 2149|    126|    -> OutputIt {
 2150|    126|  static_assert(std::is_same<T, uint32_or_64_or_128_t<T>>::value, "");
 2151|    126|  auto abs_value = arg.abs_value;
 2152|    126|  auto prefix = arg.prefix;
 2153|    126|  switch (specs.type) {
 2154|      0|  default:
  ------------------
  |  Branch (2154:3): [True: 0, False: 126]
  ------------------
 2155|      0|    FMT_ASSERT(false, "");
  ------------------
  |  |  402|      0|    fmt::detail::ignore_unused((condition), (message))
  ------------------
 2156|      0|    FMT_FALLTHROUGH;
  ------------------
  |  |  183|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2157|      0|  case presentation_type::none:
  ------------------
  |  Branch (2157:3): [True: 0, False: 126]
  ------------------
 2158|    126|  case presentation_type::dec: {
  ------------------
  |  Branch (2158:3): [True: 126, False: 0]
  ------------------
 2159|    126|    int num_digits = count_digits(abs_value);
 2160|    126|    return write_int<Char>(
 2161|    126|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2162|    126|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2163|    126|        });
 2164|      0|  }
 2165|      0|  case presentation_type::hex: {
  ------------------
  |  Branch (2165:3): [True: 0, False: 126]
  ------------------
 2166|      0|    if (specs.alt)
  ------------------
  |  Branch (2166:9): [True: 0, False: 0]
  ------------------
 2167|      0|      prefix_append(prefix, unsigned(specs.upper ? 'X' : 'x') << 8 | '0');
  ------------------
  |  Branch (2167:38): [True: 0, False: 0]
  ------------------
 2168|      0|    int num_digits = count_digits<4>(abs_value);
 2169|      0|    return write_int<Char>(
 2170|      0|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2171|      0|          return format_uint<4, Char>(it, abs_value, num_digits, specs.upper);
 2172|      0|        });
 2173|      0|  }
 2174|      0|  case presentation_type::oct: {
  ------------------
  |  Branch (2174:3): [True: 0, False: 126]
  ------------------
 2175|      0|    int num_digits = count_digits<3>(abs_value);
 2176|       |    // Octal prefix '0' is counted as a digit, so only add it if precision
 2177|       |    // is not greater than the number of digits.
 2178|      0|    if (specs.alt && specs.precision <= num_digits && abs_value != 0)
  ------------------
  |  Branch (2178:9): [True: 0, False: 0]
  |  Branch (2178:22): [True: 0, False: 0]
  |  Branch (2178:55): [True: 0, False: 0]
  ------------------
 2179|      0|      prefix_append(prefix, '0');
 2180|      0|    return write_int<Char>(
 2181|      0|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2182|      0|          return format_uint<3, Char>(it, abs_value, num_digits);
 2183|      0|        });
 2184|      0|  }
 2185|      0|  case presentation_type::bin: {
  ------------------
  |  Branch (2185:3): [True: 0, False: 126]
  ------------------
 2186|      0|    if (specs.alt)
  ------------------
  |  Branch (2186:9): [True: 0, False: 0]
  ------------------
 2187|      0|      prefix_append(prefix, unsigned(specs.upper ? 'B' : 'b') << 8 | '0');
  ------------------
  |  Branch (2187:38): [True: 0, False: 0]
  ------------------
 2188|      0|    int num_digits = count_digits<1>(abs_value);
 2189|      0|    return write_int<Char>(
 2190|      0|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2191|      0|          return format_uint<1, Char>(it, abs_value, num_digits);
 2192|      0|        });
 2193|      0|  }
 2194|      0|  case presentation_type::chr:
  ------------------
  |  Branch (2194:3): [True: 0, False: 126]
  ------------------
 2195|      0|    return write_char<Char>(out, static_cast<Char>(abs_value), specs);
 2196|    126|  }
 2197|    126|}
_ZN3fmt3v106detail9write_intIcNS0_14basic_appenderIcEEZNS1_9write_intIcS4_jEET0_S6_NS1_13write_int_argIT1_EERKNS0_12format_specsENS1_10locale_refEEUlS4_E_EES6_S6_ijSC_S8_:
 1955|    126|                                        W write_digits) -> OutputIt {
 1956|       |  // Slightly faster check for specs.width == 0 && specs.precision == -1.
 1957|    126|  if ((specs.width | (specs.precision + 1)) == 0) {
  ------------------
  |  Branch (1957:7): [True: 126, False: 0]
  ------------------
 1958|    126|    auto it = reserve(out, to_unsigned(num_digits) + (prefix >> 24));
 1959|    126|    if (prefix != 0) {
  ------------------
  |  Branch (1959:9): [True: 0, False: 126]
  ------------------
 1960|      0|      for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
  ------------------
  |  Branch (1960:44): [True: 0, False: 0]
  ------------------
 1961|      0|        *it++ = static_cast<Char>(p & 0xff);
 1962|      0|    }
 1963|    126|    return base_iterator(out, write_digits(it));
 1964|    126|  }
 1965|      0|  auto data = write_int_data<Char>(num_digits, prefix, specs);
 1966|      0|  return write_padded<Char, align::right>(
 1967|      0|      out, specs, data.size, [=](reserve_iterator<OutputIt> it) {
 1968|      0|        for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
 1969|      0|          *it++ = static_cast<Char>(p & 0xff);
 1970|      0|        it = detail::fill_n(it, data.padding, static_cast<Char>('0'));
 1971|      0|        return write_digits(it);
 1972|      0|      });
 1973|    126|}
_ZZN3fmt3v106detail9write_intIcNS0_14basic_appenderIcEEjEET0_S5_NS1_13write_int_argIT1_EERKNS0_12format_specsENS1_10locale_refEENKUlS4_E_clES4_:
 2161|    126|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2162|    126|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2163|    126|        });
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler7on_textEPKcSF_:
 4231|    252|    void on_text(const Char* begin, const Char* end) {
 4232|    252|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4233|    252|      context.advance_to(write<Char>(context.out(), text));
 4234|    252|    }
_ZN3fmt3v106detail7get_argINS0_7contextEiEEDTcldtfp_3argfp0_EERT_T0_:
 3788|    210|FMT_CONSTEXPR auto get_arg(Context& ctx, ID id) -> decltype(ctx.arg(id)) {
 3789|    210|  auto arg = ctx.arg(id);
 3790|    210|  if (!arg) report_error("argument not found");
  ------------------
  |  Branch (3790:7): [True: 0, False: 210]
  ------------------
 3791|    210|  return arg;
 3792|    210|}
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler9on_arg_idEv:
 4236|    210|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4237|    210|      return parse_context.next_arg_id();
 4238|    210|    }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler15on_format_specsEiPKcSF_:
 4257|    210|        -> const Char* {
 4258|    210|      auto arg = get_arg(context, id);
 4259|       |      // Not using a visitor for custom types gives better codegen.
 4260|    210|      if (arg.format_custom(begin, parse_context, context))
  ------------------
  |  Branch (4260:11): [True: 0, False: 210]
  ------------------
 4261|      0|        return parse_context.begin();
 4262|    210|      auto specs = detail::dynamic_format_specs<Char>();
 4263|    210|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4264|    210|      detail::handle_dynamic_spec<detail::width_checker>(
 4265|    210|          specs.width, specs.width_ref, context);
 4266|    210|      detail::handle_dynamic_spec<detail::precision_checker>(
 4267|    210|          specs.precision, specs.precision_ref, context);
 4268|    210|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (4268:11): [True: 0, False: 210]
  |  Branch (4268:27): [True: 0, False: 210]
  ------------------
 4269|      0|        report_error("missing '}' in format string");
 4270|    210|      context.advance_to(arg.visit(
 4271|    210|          arg_formatter<Char>{context.out(), specs, context.locale()}));
 4272|    210|      return begin;
 4273|    210|    }
_ZN3fmt3v106detail19handle_dynamic_specINS1_13width_checkerENS0_7contextEEEvRiNS1_7arg_refINT0_9char_typeEEERS7_:
 3797|    210|                                       Context& ctx) {
 3798|    210|  switch (ref.kind) {
  ------------------
  |  Branch (3798:11): [True: 0, False: 210]
  ------------------
 3799|    210|  case arg_id_kind::none:
  ------------------
  |  Branch (3799:3): [True: 210, False: 0]
  ------------------
 3800|    210|    break;
 3801|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3801:3): [True: 0, False: 210]
  ------------------
 3802|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index));
 3803|      0|    break;
 3804|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3804:3): [True: 0, False: 210]
  ------------------
 3805|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name));
 3806|      0|    break;
 3807|    210|  }
 3808|    210|}
_ZN3fmt3v106detail19handle_dynamic_specINS1_17precision_checkerENS0_7contextEEEvRiNS1_7arg_refINT0_9char_typeEEERS7_:
 3797|    210|                                       Context& ctx) {
 3798|    210|  switch (ref.kind) {
  ------------------
  |  Branch (3798:11): [True: 0, False: 210]
  ------------------
 3799|    210|  case arg_id_kind::none:
  ------------------
  |  Branch (3799:3): [True: 210, False: 0]
  ------------------
 3800|    210|    break;
 3801|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3801:3): [True: 0, False: 210]
  ------------------
 3802|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index));
 3803|      0|    break;
 3804|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3804:3): [True: 0, False: 210]
  ------------------
 3805|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name));
 3806|      0|    break;
 3807|    210|  }
 3808|    210|}
_ZN3fmt3v106detail13arg_formatterIcEclIjEENS0_14basic_appenderIcEET_:
 3742|    126|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3743|    126|    return detail::write<Char>(out, value, specs, locale);
 3744|    126|  }
_ZN3fmt3v106detail5writeIcjLi0EEENS0_14basic_appenderIT_EES5_T0_RKNS0_12format_specsENS1_10locale_refE:
 2211|    126|    -> basic_appender<Char> {
 2212|    126|  if (specs.localized && write_loc(out, value, specs, loc)) return out;
  ------------------
  |  Branch (2212:7): [True: 0, False: 126]
  |  Branch (2212:26): [True: 0, False: 0]
  ------------------
 2213|    126|  return write_int_noinline<Char>(out, make_write_int_arg(value, specs.sign),
 2214|    126|                                  specs, loc);
 2215|    126|}
_ZN3fmt3v106detail18make_write_int_argIjEENS1_13write_int_argINSt3__111conditionalIXaalecl8num_bitsIT_EELi32EntLi0EEjNS5_IXlecl8num_bitsIS6_EELi64EEmoE4typeEE4typeEEES6_NS0_4sign4typeE:
 2111|    126|    -> write_int_arg<uint32_or_64_or_128_t<T>> {
 2112|    126|  auto prefix = 0u;
 2113|    126|  auto abs_value = static_cast<uint32_or_64_or_128_t<T>>(value);
 2114|    126|  if (is_negative(value)) {
  ------------------
  |  Branch (2114:7): [True: 0, False: 126]
  ------------------
 2115|      0|    prefix = 0x01000000 | '-';
 2116|      0|    abs_value = 0 - abs_value;
 2117|    126|  } else {
 2118|    126|    constexpr const unsigned prefixes[4] = {0, 0, 0x1000000u | '+',
 2119|    126|                                            0x1000000u | ' '};
 2120|    126|    prefix = prefixes[sign];
 2121|    126|  }
 2122|    126|  return {abs_value, prefix};
 2123|    126|}
_ZN3fmt3v106detail13arg_formatterIcEclIPKcEENS0_14basic_appenderIcEET_:
 3742|     84|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3743|     84|    return detail::write<Char>(out, value, specs, locale);
 3744|     84|  }
_ZN3fmt3v106detail5writeIcNS0_14basic_appenderIcEEEET0_S5_PKT_RKNS0_12format_specsENS1_10locale_refE:
 2302|     84|                         locale_ref) -> OutputIt {
 2303|     84|  if (specs.type == presentation_type::pointer)
  ------------------
  |  Branch (2303:7): [True: 0, False: 84]
  ------------------
 2304|      0|    return write_ptr<Char>(out, bit_cast<uintptr_t>(s), &specs);
 2305|     84|  if (!s) report_error("string pointer is null");
  ------------------
  |  Branch (2305:7): [True: 0, False: 84]
  ------------------
 2306|     84|  return write<Char>(out, basic_string_view<Char>(s), specs, {});
 2307|     84|}
_ZN3fmt3v106detail5writeIcNS0_14basic_appenderIcEEEET0_S5_NS0_17basic_string_viewINS0_13type_identityIT_E4typeEEERKNS0_12format_specsENS1_10locale_refE:
 2297|     84|                         const format_specs& specs, locale_ref) -> OutputIt {
 2298|     84|  return write<Char>(out, s, specs);
 2299|     84|}
_ZN3fmt3v106detail5writeIcNS0_14basic_appenderIcEEEET0_S5_NS0_17basic_string_viewIT_EERKNS0_12format_specsE:
 2272|     84|                         const format_specs& specs) -> OutputIt {
 2273|     84|  auto data = s.data();
 2274|     84|  auto size = s.size();
 2275|     84|  if (specs.precision >= 0 && to_unsigned(specs.precision) < size)
  ------------------
  |  Branch (2275:7): [True: 0, False: 84]
  |  Branch (2275:31): [True: 0, False: 0]
  ------------------
 2276|      0|    size = code_point_index(s, to_unsigned(specs.precision));
 2277|     84|  bool is_debug = specs.type == presentation_type::debug;
 2278|     84|  size_t width = 0;
 2279|       |
 2280|     84|  if (is_debug) size = write_escaped_string(counting_iterator{}, s).count();
  ------------------
  |  Branch (2280:7): [True: 0, False: 84]
  ------------------
 2281|       |
 2282|     84|  if (specs.width != 0) {
  ------------------
  |  Branch (2282:7): [True: 0, False: 84]
  ------------------
 2283|      0|    if (is_debug)
  ------------------
  |  Branch (2283:9): [True: 0, False: 0]
  ------------------
 2284|      0|      width = size;
 2285|      0|    else
 2286|      0|      width = compute_width(basic_string_view<Char>(data, size));
 2287|      0|  }
 2288|     84|  return write_padded<Char>(out, specs, size, width,
 2289|     84|                            [=](reserve_iterator<OutputIt> it) {
 2290|     84|                              if (is_debug) return write_escaped_string(it, s);
 2291|     84|                              return copy<Char>(data, data + size, it);
 2292|     84|                            });
 2293|     84|}
_ZN3fmt3v106detail12write_paddedIcLNS0_5align4typeE1ENS0_14basic_appenderIcEEZNS1_5writeIcS6_EET0_S8_NS0_17basic_string_viewIT_EERKNS0_12format_specsEEUlS6_E_EET1_SG_SE_mmOT2_:
 1710|     84|                                size_t size, size_t width, F&& f) -> OutputIt {
 1711|     84|  static_assert(align == align::left || align == align::right, "");
 1712|     84|  unsigned spec_width = to_unsigned(specs.width);
 1713|     84|  size_t padding = spec_width > width ? spec_width - width : 0;
  ------------------
  |  Branch (1713:20): [True: 0, False: 84]
  ------------------
 1714|       |  // Shifts are encoded as string literals because static constexpr is not
 1715|       |  // supported in constexpr functions.
 1716|     84|  auto* shifts = align == align::left ? "\x1f\x1f\x00\x01" : "\x00\x1f\x00\x01";
  ------------------
  |  Branch (1716:18): [Folded - Ignored]
  ------------------
 1717|     84|  size_t left_padding = padding >> shifts[specs.align];
 1718|     84|  size_t right_padding = padding - left_padding;
 1719|     84|  auto it = reserve(out, size + padding * specs.fill.size());
 1720|     84|  if (left_padding != 0) it = fill<Char>(it, left_padding, specs.fill);
  ------------------
  |  Branch (1720:7): [True: 0, False: 84]
  ------------------
 1721|     84|  it = f(it);
 1722|     84|  if (right_padding != 0) it = fill<Char>(it, right_padding, specs.fill);
  ------------------
  |  Branch (1722:7): [True: 0, False: 84]
  ------------------
 1723|     84|  return base_iterator(out, it);
 1724|     84|}
_ZZN3fmt3v106detail5writeIcNS0_14basic_appenderIcEEEET0_S5_NS0_17basic_string_viewIT_EERKNS0_12format_specsEENKUlS4_E_clES4_:
 2289|     84|                            [=](reserve_iterator<OutputIt> it) {
 2290|     84|                              if (is_debug) return write_escaped_string(it, s);
  ------------------
  |  Branch (2290:35): [True: 0, False: 84]
  ------------------
 2291|     84|                              return copy<Char>(data, data + size, it);
 2292|     84|                            });
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handlerC2ENS0_14basic_appenderIcEENS7_IcEENS0_17basic_format_argsINS0_7contextEEESC_:
 4229|     42|        : parse_context(str), context(p_out, p_args, p_loc) {}

_ZN6ImVec2C2Ev:
  283|     98|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

LLVMFuzzerTestOneInput:
   10|     99|{
   11|       |    // Only accept properly null terminated strings
   12|     99|    if (size < 1 || data[size - 1] != '\0')
  ------------------
  |  Branch (12:9): [True: 0, False: 99]
  |  Branch (12:21): [True: 1, False: 98]
  ------------------
   13|      1|    {
   14|      1|        return 1;
   15|      1|    }
   16|       |
   17|     98|    dlxemu::Emulator emulator;
   18|       |
   19|       |    // Build argv
   20|     98|    std::vector<char*> argv;
   21|     98|    argv.reserve(10);
   22|       |
   23|     98|    phi::size_t begin{0u};
   24|  13.5k|    for (phi::size_t index{0}; index < size; ++index)
  ------------------
  |  Branch (24:32): [True: 13.4k, False: 97]
  ------------------
   25|  13.4k|    {
   26|  13.4k|        char c = static_cast<char>(data[index]);
   27|       |
   28|  13.4k|        if (c == '\0')
  ------------------
  |  Branch (28:13): [True: 3.88k, False: 9.52k]
  ------------------
   29|  3.88k|        {
   30|       |            // Disallow empty strings
   31|  3.88k|            if (begin == index)
  ------------------
  |  Branch (31:17): [True: 1, False: 3.88k]
  ------------------
   32|      1|            {
   33|      1|                return 1;
   34|      1|            }
   35|       |
   36|       |            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-const-cast)
   37|  3.88k|            argv.push_back(const_cast<char*>(reinterpret_cast<const char*>(data + begin)));
   38|  3.88k|            begin = index + 1u;
   39|  3.88k|        }
   40|  13.4k|    }
   41|       |
   42|       |    // Can't eccept too large buffers
   43|     97|    if (argv.size() > std::numeric_limits<phi::int32_t>::max())
  ------------------
  |  Branch (43:9): [True: 0, False: 97]
  ------------------
   44|      0|    {
   45|      0|        return 1;
   46|      0|    }
   47|       |
   48|     97|    (void)emulator.HandleCommandLineArguments(static_cast<phi::int32_t>(argv.size()), argv.data());
   49|       |
   50|     97|    return 0;
   51|     97|}


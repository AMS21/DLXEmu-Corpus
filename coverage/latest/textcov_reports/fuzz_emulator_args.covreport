_ZN6dlxemu6WindowC2Ev:
   13|     50|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  195|    250|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  249|     50|    {
  250|     50|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (250:13): [True: 0, False: 50]
  ------------------
  251|      0|        {
  252|      0|            return m_Line > other.m_Line;
  253|      0|        }
  254|       |
  255|     50|        return m_Column >= other.m_Column;
  256|     50|    }
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  291|     50|    {
  292|     50|        Colorize();
  293|     50|        m_Lines.push_back(Line());
  294|     50|    }
_ZN6dlxemu10CodeEditorD2Ev:
  297|     50|    {
  298|     50|        VerifyInternalState();
  299|     50|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1501|     50|    {
 1502|       |        // Lines should never be empty
 1503|     50|        PHI_ASSERT(!m_Lines.empty());
 1504|       |
 1505|       |        // Verify Selection is still in a valid state
 1506|     50|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1507|     50|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1508|     50|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1509|     50|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1510|     50|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1511|       |
 1512|       |        // Verify cursor position
 1513|     50|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1514|     50|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1515|     50|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1516|       |
 1517|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1518|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1519|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1520|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1521|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1522|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1523|       |#endif
 1524|       |
 1525|       |        // Verify that all breakpoints are on existing lines
 1526|     50|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1526:35): [True: 0, False: 50]
  ------------------
 1527|      0|        {
 1528|      0|            PHI_ASSERT(break_point != 0u);
 1529|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1530|      0|        }
 1531|       |
 1532|       |        // Verify that all error markers are on existing lines
 1533|     50|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1533:34): [True: 0, False: 50]
  ------------------
 1534|      0|        {
 1535|      0|            const phi::u32 line_number = error_marker.first;
 1536|       |
 1537|      0|            PHI_ASSERT(line_number != 0u);
 1538|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1539|      0|        }
 1540|     50|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1543|     50|    {
 1544|     50|        constexpr const static Palette palette = {{
 1545|     50|                0xff7f7f7f, // Default
 1546|     50|                0xffd69c56, // OpCode
 1547|     50|                0xff00ff00, // Register
 1548|     50|                0xff7070e0, // IntegerLiteral
 1549|     50|                0xff206020, // Comment
 1550|     50|                0xff101010, // Background
 1551|     50|                0xffe0e0e0, // Cursor
 1552|     50|                0x80a06020, // Selection
 1553|     50|                0x800020ff, // ErrorMarker
 1554|     50|                0x40f08000, // Breakpoint
 1555|     50|                0xff707000, // Line number
 1556|     50|                0x40000000, // Current line fill
 1557|     50|                0x40808080, // Current line fill (inactive)
 1558|     50|                0x40a0a0a0, // Current line edge
 1559|     50|        }};
 1560|       |
 1561|     50|        return palette;
 1562|     50|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1729|     50|    {
 1730|       |        // TODO: This is quite unreadable
 1731|     50|        const phi::u32 to_line =
 1732|     50|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1732:17): [True: 50, False: 0]
  ------------------
 1733|     50|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1734|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1735|       |
 1736|     50|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1737|     50|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1738|     50|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1739|     50|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1740|     50|    }

_ZN6dlxemu8EmulatorC2Ev:
   43|     50|    {}
_ZN6dlxemu8Emulator26HandleCommandLineArgumentsEN3phi7integerIiEEPPc:
   49|     49|    {
   50|       |        // No args
   51|     49|        if (argc <= 1)
  ------------------
  |  Branch (51:13): [True: 8, False: 41]
  ------------------
   52|      8|        {
   53|      8|            return ShouldContinueInitilization::Yes;
   54|      8|        }
   55|       |
   56|  2.04k|        for (phi::i32 arg_num{1}; arg_num < argc; ++arg_num)
  ------------------
  |  Branch (56:35): [True: 2.01k, False: 28]
  ------------------
   57|  2.01k|        {
   58|  2.01k|            std::string arg_value = argv[arg_num.unsafe()];
   59|       |
   60|       |            // Convert all characters to lower case
   61|  2.01k|            phi::for_each(arg_value.begin(), arg_value.end(), phi::to_lower_case);
   62|       |            //std::transform(arg_value.begin(), arg_value.end(), arg_value.begin(), ::tolower);
   63|       |
   64|  2.01k|            PHI_ASSERT(!arg_value.empty());
   65|       |
   66|  2.01k|            if (arg_value.front() == '-')
  ------------------
  |  Branch (66:17): [True: 13, False: 2.00k]
  ------------------
   67|     13|            {
   68|       |                // Display help
   69|     13|                if (arg_value == "-h" || arg_value == "-help" || arg_value == "-?" ||
  ------------------
  |  Branch (69:21): [True: 1, False: 12]
  |  Branch (69:42): [True: 1, False: 11]
  |  Branch (69:66): [True: 1, False: 10]
  ------------------
   70|     13|                    arg_value == "--help")
  ------------------
  |  Branch (70:21): [True: 1, False: 9]
  ------------------
   71|      4|                {
   72|      4|                    DLX_INFO("Help");
  ------------------
  |  |    7|      4|#define DLX_INFO(...)     PHI_EMPTY_MACRO()
  ------------------
   73|      4|                    return ShouldContinueInitilization::No;
   74|      4|                }
   75|       |                // Display version
   76|      9|                if (arg_value == "-v" || arg_value == "--value")
  ------------------
  |  Branch (76:21): [True: 1, False: 8]
  |  Branch (76:42): [True: 1, False: 7]
  ------------------
   77|      2|                {
   78|      2|                    fmt::print("DLXEmu version {:d}.{:d}.{:d} {:s}-{:s}\n", VersionMajor,
   79|      2|                               VersionMinor, VersionPatch, GitBranch, GitShaFull);
   80|      2|                    return ShouldContinueInitilization::No;
   81|      2|                }
   82|       |
   83|       |                // Unknown option
   84|      7|                DLX_WARN("Unknown option '{:s}' ignored", arg_value);
  ------------------
  |  |    8|      7|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
   85|      7|                break;
   86|      9|            }
   87|       |
   88|  2.00k|            DLX_WARN("Ignore command line argument '{:s}'", arg_value);
  ------------------
  |  |    8|  2.00k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
   89|  2.00k|        }
   90|       |
   91|     35|        return ShouldContinueInitilization::Yes;
   92|     41|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|     50|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|     50|    {}

_ZN6dlxemu6WindowD2Ev:
   37|     50|    {
   38|     50|        Shutdown();
   39|     50|    }
_ZN6dlxemu6Window8ShutdownEv:
  106|     50|    {
  107|     50|        if (imgui_initialized)
  ------------------
  |  Branch (107:13): [True: 0, False: 50]
  ------------------
  108|      0|        {
  109|      0|            ShutdownImGui();
  110|      0|        }
  111|       |
  112|     50|        if (m_Window != nullptr)
  ------------------
  |  Branch (112:13): [True: 0, False: 50]
  ------------------
  113|      0|        {
  114|      0|            glfwDestroyWindow(m_Window);
  115|      0|        }
  116|       |
  117|     50|        if (glfw_initialized)
  ------------------
  |  Branch (117:13): [True: 0, False: 50]
  ------------------
  118|      0|        {
  119|      0|            glfwTerminate();
  120|      0|        }
  121|     50|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  50.0k|            {}

_ZN3dlx11IntRegisterC2Ev:
   13|  1.60k|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|     50|    {
   42|     50|        m_IsReadOnly = read_only;
   43|     50|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   14|     50|    {
   15|     50|        m_Values.resize(starting_size.unsafe());
   16|     50|    }

_ZN3dlx9ProcessorC2Ev:
   63|     50|    {
   64|       |        // Mark R0 as ready only
   65|     50|        m_IntRegisters[0].SetReadOnly(true);
   66|     50|    }

_ZN3fmt2v96detail11to_unsignedIiEENSt3__113make_unsignedIT_E4typeES5_:
  406|     10|    typename std::make_unsigned<Int>::type {
  407|     10|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  365|     20|      ::fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (365:37): [Folded - Ignored]
  |  |  |  Branch (365:37): [True: 10, False: 0]
  |  |  ------------------
  ------------------
  408|     10|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  409|     10|}
_ZN3fmt2v96detail13ignore_unusedIJbA15_cEEEvDpRKT_:
  341|     64|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt2v917basic_string_viewIcE4sizeEv:
  473|     22|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZNK3fmt2v96detail6bufferIcE4sizeEv:
  916|      2|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt2v96detail6bufferIcEC2EPcmm:
  888|      2|      : ptr_(p), size_(sz), capacity_(cap) {}
_ZN3fmt2v96detail6bufferIcE3setEPcm:
  894|      2|  FMT_CONSTEXPR void set(T* buf_data, size_t buf_capacity) noexcept {
  895|      2|    ptr_ = buf_data;
  896|      2|    capacity_ = buf_capacity;
  897|      2|  }
_ZN3fmt2v96detail6bufferIcE4dataEv:
  922|      4|  FMT_CONSTEXPR auto data() noexcept -> T* { return ptr_; }
_ZNK3fmt2v917basic_string_viewIcE5beginEv:
  475|     12|  constexpr auto begin() const noexcept -> iterator { return data_; }
_ZNK3fmt2v917basic_string_viewIcE3endEv:
  476|     12|  constexpr auto end() const noexcept -> iterator { return data_ + size_; }
_ZN3fmt2v917basic_string_viewIcEC2EPKc:
  456|      4|                  : std::char_traits<Char>::length(s)) {}
_ZN3fmt2v96detail10locale_refC2Ev:
 1730|      6|  constexpr FMT_INLINE locale_ref() : locale_(nullptr) {}
_ZN3fmt2v96detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1283|     10|  constexpr FMT_INLINE value() : no_value() {}
_ZN3fmt2v99monostateC2Ev:
  324|     10|  constexpr monostate() {}
_ZN3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2EyPKNS0_6detail5valueIS4_EE:
 1999|      2|      : desc_(desc), values_(values) {}
_ZNK3fmt2v917basic_string_viewIcE4dataEv:
  470|      8|  constexpr auto data() const noexcept -> const Char* { return data_; }
_ZN3fmt2v917basic_string_viewIcEC2EPKcm:
  441|     14|      : data_(s), size_(count) {}
_ZN3fmt2v96detail11to_unsignedIlEENSt3__113make_unsignedIT_E4typeES5_:
  406|     54|    typename std::make_unsigned<Int>::type {
  407|     54|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  365|    108|      ::fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (365:37): [Folded - Ignored]
  |  |  |  Branch (365:37): [True: 54, False: 0]
  |  |  ------------------
  ------------------
  408|     54|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  409|     54|}
_ZN3fmt2v96detail6bufferIcE11try_reserveEm:
  941|     18|  FMT_CONSTEXPR20 void try_reserve(size_t new_capacity) {
  942|     18|    if (new_capacity > capacity_) grow(new_capacity);
  ------------------
  |  Branch (942:9): [True: 0, False: 18]
  ------------------
  943|     18|  }
_ZNK3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE3getEi:
 2037|     10|  FMT_CONSTEXPR auto get(int id) const -> format_arg {
 2038|     10|    format_arg arg;
 2039|     10|    if (!is_packed()) {
  ------------------
  |  Branch (2039:9): [True: 0, False: 10]
  ------------------
 2040|      0|      if (id < max_size()) arg = args_[id];
  ------------------
  |  Branch (2040:11): [True: 0, False: 0]
  ------------------
 2041|      0|      return arg;
 2042|      0|    }
 2043|     10|    if (id >= detail::max_packed_args) return arg;
  ------------------
  |  Branch (2043:9): [True: 0, False: 10]
  ------------------
 2044|     10|    arg.type_ = type(id);
 2045|     10|    if (arg.type_ == detail::type::none_type) return arg;
  ------------------
  |  Branch (2045:9): [True: 0, False: 10]
  ------------------
 2046|     10|    arg.value_ = values_[id];
 2047|     10|    return arg;
 2048|     10|  }
_ZN3fmt2v916basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1616|     10|  constexpr basic_format_arg() : type_(detail::type::none_type) {}
_ZNK3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE9is_packedEv:
 1984|     10|  constexpr auto is_packed() const -> bool {
 1985|     10|    return (desc_ & detail::is_unpacked_bit) == 0;
 1986|     10|  }
_ZNK3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE4typeEi:
 1991|     10|  FMT_CONSTEXPR auto type(int index) const -> detail::type {
 1992|     10|    int shift = index * detail::packed_arg_bits;
 1993|     10|    unsigned int mask = (1 << detail::packed_arg_bits) - 1;
 1994|     10|    return static_cast<detail::type>((desc_ >> shift) & mask);
 1995|     10|  }
_ZNK3fmt2v916basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEcvbEv:
 1618|     10|  constexpr explicit operator bool() const noexcept {
 1619|     10|    return type_ != detail::type::none_type;
 1620|     10|  }
_ZN3fmt2v96detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EE:
  844|     22|    -> Container& {
  845|     22|  using base = std::back_insert_iterator<Container>;
  846|     22|  struct accessor : base {
  847|     22|    accessor(base b) : base(b) {}
  848|     22|    using base::container;
  849|     22|  };
  850|     22|  return *accessor(it).container;
  851|     22|}
_ZZN3fmt2v96detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EEEN8accessorC2ENS8_IS4_EE:
  847|     22|    accessor(base b) : base(b) {}
_ZN3fmt2v96detail13ignore_unusedIJbA20_cEEEvDpRKT_:
  341|      6|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZN3fmt2v96detail8copy_strIcPcEENS0_8appenderET0_S5_S4_:
 1681|      6|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1682|      6|  get_container(out).append(begin, end);
 1683|      6|  return out;
 1684|      6|}
_ZNK3fmt2v96detail6fill_tIcE4sizeEv:
 2115|      4|  constexpr auto size() const -> size_t { return size_; }
_ZN3fmt2v96detail8copy_strIcPKcEENS0_8appenderET0_S6_S5_:
 1681|     16|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1682|     16|  get_container(out).append(begin, end);
 1683|     16|  return out;
 1684|     16|}
_ZN3fmt2v918basic_format_specsIcEC2Ev:
 2166|     10|        localized(false) {}
_ZN3fmt2v926basic_format_parse_contextIcNS0_6detail13error_handlerEEC2ENS0_17basic_string_viewIcEES3_i:
  677|      2|      : ErrorHandler(eh), format_str_(format_str), next_arg_id_(next_arg_id) {}
_ZN3fmt2v920basic_format_contextINS0_8appenderEcEC2ES2_NS0_17basic_format_argsIS3_EENS0_6detail10locale_refE:
 1829|      2|      : out_(out), args_(ctx_args), loc_(loc) {}
_ZN3fmt2v920basic_format_contextINS0_8appenderEcE3outEv:
 1846|     22|  FMT_CONSTEXPR auto out() -> iterator { return out_; }
_ZN3fmt2v96detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS0_17basic_format_argsINS0_20basic_format_contextINSt3__111conditionalIXsr3std7is_sameIS5_cEE5valueENS0_8appenderENSC_20back_insert_iteratorIS6_EEE4typeES5_EEEENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_:
 2683|      2|    basic_string_view<Char> format_str, Handler&& handler) {
 2684|       |  // Workaround a name-lookup bug in MSVC's modules implementation.
 2685|      2|  using detail::find;
 2686|       |
 2687|      2|  auto begin = format_str.data();
 2688|      2|  auto end = begin + format_str.size();
 2689|      2|  if (end - begin < 32) {
  ------------------
  |  Branch (2689:7): [True: 0, False: 2]
  ------------------
 2690|       |    // Use a simple loop instead of memchr for small strings.
 2691|      0|    const Char* p = begin;
 2692|      0|    while (p != end) {
  ------------------
  |  Branch (2692:12): [True: 0, False: 0]
  ------------------
 2693|      0|      auto c = *p++;
 2694|      0|      if (c == '{') {
  ------------------
  |  Branch (2694:11): [True: 0, False: 0]
  ------------------
 2695|      0|        handler.on_text(begin, p - 1);
 2696|      0|        begin = p = parse_replacement_field(p - 1, end, handler);
 2697|      0|      } else if (c == '}') {
  ------------------
  |  Branch (2697:18): [True: 0, False: 0]
  ------------------
 2698|      0|        if (p == end || *p != '}')
  ------------------
  |  Branch (2698:13): [True: 0, False: 0]
  |  Branch (2698:25): [True: 0, False: 0]
  ------------------
 2699|      0|          return handler.on_error("unmatched '}' in format string");
 2700|      0|        handler.on_text(begin, p);
 2701|      0|        begin = ++p;
 2702|      0|      }
 2703|      0|    }
 2704|      0|    handler.on_text(begin, end);
 2705|      0|    return;
 2706|      0|  }
 2707|      2|  struct writer {
 2708|      2|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2709|      2|      if (from == to) return;
 2710|      2|      for (;;) {
 2711|      2|        const Char* p = nullptr;
 2712|      2|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
 2713|      2|          return handler_.on_text(from, to);
 2714|      2|        ++p;
 2715|      2|        if (p == to || *p != '}')
 2716|      2|          return handler_.on_error("unmatched '}' in format string");
 2717|      2|        handler_.on_text(from, p);
 2718|      2|        from = p + 1;
 2719|      2|      }
 2720|      2|    }
 2721|      2|    Handler& handler_;
 2722|      2|  } write = {handler};
 2723|     12|  while (begin != end) {
  ------------------
  |  Branch (2723:10): [True: 12, False: 0]
  ------------------
 2724|       |    // Doing two passes with memchr (one for '{' and another for '}') is up to
 2725|       |    // 2.5x faster than the naive one-pass implementation on big format strings.
 2726|     12|    const Char* p = begin;
 2727|     12|    if (*begin != '{' && !find<IS_CONSTEXPR>(begin + 1, end, Char('{'), p))
  ------------------
  |  Branch (2727:9): [True: 12, False: 0]
  |  Branch (2727:26): [True: 2, False: 10]
  ------------------
 2728|      2|      return write(begin, end);
 2729|     10|    write(begin, p);
 2730|     10|    begin = parse_replacement_field(p, end, handler);
 2731|     10|  }
 2732|      2|}
_ZN3fmt2v920basic_format_contextINS0_8appenderEcE10advance_toES2_:
 1849|     22|  void advance_to(iterator it) {
 1850|     22|    if (!detail::is_back_insert_iterator<iterator>()) out_ = it;
  ------------------
  |  Branch (1850:9): [Folded - Ignored]
  ------------------
 1851|     22|  }
_ZN3fmt2v96detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS0_17basic_format_argsINS0_20basic_format_contextINSt3__111conditionalIXsr3std7is_sameIS5_cEE5valueENS0_8appenderENSC_20back_insert_iteratorIS6_EEE4typeES5_EEEENS1_10locale_refEE14format_handlerEEPKS5_SP_SP_OT0_:
 2643|     10|                                           Handler&& handler) -> const Char* {
 2644|     10|  struct id_adapter {
 2645|     10|    Handler& handler;
 2646|     10|    int arg_id;
 2647|       |
 2648|     10|    FMT_CONSTEXPR void operator()() { arg_id = handler.on_arg_id(); }
 2649|     10|    FMT_CONSTEXPR void operator()(int id) { arg_id = handler.on_arg_id(id); }
 2650|     10|    FMT_CONSTEXPR void operator()(basic_string_view<Char> id) {
 2651|     10|      arg_id = handler.on_arg_id(id);
 2652|     10|    }
 2653|     10|    FMT_CONSTEXPR void on_error(const char* message) {
 2654|     10|      if (message) handler.on_error(message);
 2655|     10|    }
 2656|     10|  };
 2657|       |
 2658|     10|  ++begin;
 2659|     10|  if (begin == end) return handler.on_error("invalid format string"), end;
  ------------------
  |  Branch (2659:7): [True: 0, False: 10]
  ------------------
 2660|     10|  if (*begin == '}') {
  ------------------
  |  Branch (2660:7): [True: 0, False: 10]
  ------------------
 2661|      0|    handler.on_replacement_field(handler.on_arg_id(), begin);
 2662|     10|  } else if (*begin == '{') {
  ------------------
  |  Branch (2662:14): [True: 0, False: 10]
  ------------------
 2663|      0|    handler.on_text(begin, begin + 1);
 2664|     10|  } else {
 2665|     10|    auto adapter = id_adapter{handler, 0};
 2666|     10|    begin = parse_arg_id(begin, end, adapter);
 2667|     10|    Char c = begin != end ? *begin : Char();
  ------------------
  |  Branch (2667:14): [True: 10, False: 0]
  ------------------
 2668|     10|    if (c == '}') {
  ------------------
  |  Branch (2668:9): [True: 0, False: 10]
  ------------------
 2669|      0|      handler.on_replacement_field(adapter.arg_id, begin);
 2670|     10|    } else if (c == ':') {
  ------------------
  |  Branch (2670:16): [True: 10, False: 0]
  ------------------
 2671|     10|      begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 2672|     10|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (2672:11): [True: 0, False: 10]
  |  Branch (2672:27): [True: 0, False: 10]
  ------------------
 2673|      0|        return handler.on_error("unknown format specifier"), end;
 2674|     10|    } else {
 2675|      0|      return handler.on_error("missing '}' in format string"), end;
 2676|      0|    }
 2677|     10|  }
 2678|     10|  return begin + 1;
 2679|     10|}
_ZNK3fmt2v920basic_format_contextINS0_8appenderEcE3argEi:
 1831|     10|  constexpr auto arg(int id) const -> format_arg { return args_.get(id); }
_ZN3fmt2v920basic_format_contextINS0_8appenderEcE6localeEv:
 1853|     10|  FMT_CONSTEXPR auto locale() -> detail::locale_ref { return loc_; }
_ZN3fmt2v926basic_format_parse_contextIcNS0_6detail13error_handlerEE11next_arg_idEv:
  701|     10|  FMT_CONSTEXPR auto next_arg_id() -> int {
  702|     10|    if (next_arg_id_ < 0) {
  ------------------
  |  Branch (702:9): [True: 0, False: 10]
  ------------------
  703|      0|      on_error("cannot switch from manual to automatic argument indexing");
  704|      0|      return 0;
  705|      0|    }
  706|     10|    int id = next_arg_id_++;
  707|     10|    do_check_arg_id(id);
  708|     10|    return id;
  709|     10|  }
_ZN3fmt2v926basic_format_parse_contextIcNS0_6detail13error_handlerEE15do_check_arg_idEi:
  778|     10|basic_format_parse_context<Char, ErrorHandler>::do_check_arg_id(int id) {
  779|       |  // Argument id is only checked at compile-time during parsing because
  780|       |  // formatting has its own validation.
  781|     10|  if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (781:7): [Folded - Ignored]
  ------------------
  782|     10|      (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   32|      0|#  define FMT_GCC_VERSION 0
  ------------------
                    (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   32|      0|#  define FMT_GCC_VERSION 0
  ------------------
  |  Branch (782:8): [Folded - Ignored]
  |  Branch (782:28): [Folded - Ignored]
  ------------------
  783|      0|    using context = detail::compile_parse_context<Char, ErrorHandler>;
  784|      0|    if (id >= static_cast<context*>(this)->num_args())
  ------------------
  |  Branch (784:9): [True: 0, False: 0]
  ------------------
  785|      0|      on_error("argument not found");
  786|      0|  }
  787|     10|}
_ZN3fmt2v96detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS6_EENS0_17basic_format_argsINS0_20basic_format_contextINSt3__111conditionalIXsr3std7is_sameIS6_cEE5valueENS0_8appenderENSD_20back_insert_iteratorIS7_EEE4typeES6_EEEENS1_10locale_refEE14format_handlerEEPKS6_SQ_SQ_OT0_E10id_adapterEESQ_SQ_SQ_SS_:
 2443|     10|                                           IDHandler&& handler) -> const Char* {
 2444|     10|  Char c = *begin;
 2445|     10|  if (c != '}' && c != ':') return do_parse_arg_id(begin, end, handler);
  ------------------
  |  Branch (2445:7): [True: 10, False: 0]
  |  Branch (2445:19): [True: 0, False: 10]
  ------------------
 2446|     10|  handler();
 2447|     10|  return begin;
 2448|     10|}
_ZZN3fmt2v96detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS0_17basic_format_argsINS0_20basic_format_contextINSt3__111conditionalIXsr3std7is_sameIS5_cEE5valueENS0_8appenderENSC_20back_insert_iteratorIS6_EEE4typeES5_EEEENS1_10locale_refEE14format_handlerEEPKS5_SP_SP_OT0_EN10id_adapterclEv:
 2648|     10|    FMT_CONSTEXPR void operator()() { arg_id = handler.on_arg_id(); }
_ZNK3fmt2v916basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEE4typeEv:
 1622|     20|  auto type() const -> detail::type { return type_; }
_ZN3fmt2v96detail12specs_setterIcEC2ERNS0_18basic_format_specsIcEE:
 2218|     10|      : specs_(specs) {}
_ZN3fmt2v96detail13specs_checkerINS1_13specs_handlerIcEEEC2ERKS4_NS1_4typeE:
 2879|     10|      : Handler(handler), arg_type_(arg_type) {}
_ZN3fmt2v96detail18parse_format_specsIcRNS1_13specs_checkerINS1_13specs_handlerIcEEEEEEPKT_SA_SA_OT0_:
 2572|     10|    -> const Char* {
 2573|     10|  if (1 < end - begin && begin[1] == '}' && is_ascii_letter(*begin) &&
  ------------------
  |  Branch (2573:7): [True: 10, False: 0]
  |  Branch (2573:26): [True: 10, False: 0]
  |  Branch (2573:45): [True: 10, False: 0]
  ------------------
 2574|     10|      *begin != 'L') {
  ------------------
  |  Branch (2574:7): [True: 10, False: 0]
  ------------------
 2575|     10|    presentation_type type = parse_presentation_type(*begin++);
 2576|     10|    if (type == presentation_type::none)
  ------------------
  |  Branch (2576:9): [True: 0, False: 10]
  ------------------
 2577|      0|      handler.on_error("invalid type specifier");
 2578|     10|    handler.on_type(type);
 2579|     10|    return begin;
 2580|     10|  }
 2581|       |
 2582|      0|  if (begin == end) return begin;
  ------------------
  |  Branch (2582:7): [True: 0, False: 0]
  ------------------
 2583|       |
 2584|      0|  begin = parse_align(begin, end, handler);
 2585|      0|  if (begin == end) return begin;
  ------------------
  |  Branch (2585:7): [True: 0, False: 0]
  ------------------
 2586|       |
 2587|       |  // Parse sign.
 2588|      0|  switch (to_ascii(*begin)) {
 2589|      0|  case '+':
  ------------------
  |  Branch (2589:3): [True: 0, False: 0]
  ------------------
 2590|      0|    handler.on_sign(sign::plus);
 2591|      0|    ++begin;
 2592|      0|    break;
 2593|      0|  case '-':
  ------------------
  |  Branch (2593:3): [True: 0, False: 0]
  ------------------
 2594|      0|    handler.on_sign(sign::minus);
 2595|      0|    ++begin;
 2596|      0|    break;
 2597|      0|  case ' ':
  ------------------
  |  Branch (2597:3): [True: 0, False: 0]
  ------------------
 2598|      0|    handler.on_sign(sign::space);
 2599|      0|    ++begin;
 2600|      0|    break;
 2601|      0|  default:
  ------------------
  |  Branch (2601:3): [True: 0, False: 0]
  ------------------
 2602|      0|    break;
 2603|      0|  }
 2604|      0|  if (begin == end) return begin;
  ------------------
  |  Branch (2604:7): [True: 0, False: 0]
  ------------------
 2605|       |
 2606|      0|  if (*begin == '#') {
  ------------------
  |  Branch (2606:7): [True: 0, False: 0]
  ------------------
 2607|      0|    handler.on_hash();
 2608|      0|    if (++begin == end) return begin;
  ------------------
  |  Branch (2608:9): [True: 0, False: 0]
  ------------------
 2609|      0|  }
 2610|       |
 2611|       |  // Parse zero flag.
 2612|      0|  if (*begin == '0') {
  ------------------
  |  Branch (2612:7): [True: 0, False: 0]
  ------------------
 2613|      0|    handler.on_zero();
 2614|      0|    if (++begin == end) return begin;
  ------------------
  |  Branch (2614:9): [True: 0, False: 0]
  ------------------
 2615|      0|  }
 2616|       |
 2617|      0|  begin = parse_width(begin, end, handler);
 2618|      0|  if (begin == end) return begin;
  ------------------
  |  Branch (2618:7): [True: 0, False: 0]
  ------------------
 2619|       |
 2620|       |  // Parse precision.
 2621|      0|  if (*begin == '.') {
  ------------------
  |  Branch (2621:7): [True: 0, False: 0]
  ------------------
 2622|      0|    begin = parse_precision(begin, end, handler);
 2623|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2623:9): [True: 0, False: 0]
  ------------------
 2624|      0|  }
 2625|       |
 2626|      0|  if (*begin == 'L') {
  ------------------
  |  Branch (2626:7): [True: 0, False: 0]
  ------------------
 2627|      0|    handler.on_localized();
 2628|      0|    ++begin;
 2629|      0|  }
 2630|       |
 2631|       |  // Parse type.
 2632|      0|  if (begin != end && *begin != '}') {
  ------------------
  |  Branch (2632:7): [True: 0, False: 0]
  |  Branch (2632:23): [True: 0, False: 0]
  ------------------
 2633|      0|    presentation_type type = parse_presentation_type(*begin++);
 2634|      0|    if (type == presentation_type::none)
  ------------------
  |  Branch (2634:9): [True: 0, False: 0]
  ------------------
 2635|      0|      handler.on_error("invalid type specifier");
 2636|      0|    handler.on_type(type);
 2637|      0|  }
 2638|      0|  return begin;
 2639|      0|}
_ZN3fmt2v96detail15is_ascii_letterIcEEbT_:
 2293|     10|template <typename Char> constexpr bool is_ascii_letter(Char c) {
 2294|     10|  return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
  ------------------
  |  Branch (2294:11): [True: 10, False: 0]
  |  Branch (2294:23): [True: 10, False: 0]
  |  Branch (2294:37): [True: 0, False: 0]
  |  Branch (2294:49): [True: 0, False: 0]
  ------------------
 2295|     10|}
_ZN3fmt2v96detail23parse_presentation_typeIcEENS0_17presentation_typeET_:
 2523|     10|FMT_CONSTEXPR auto parse_presentation_type(Char type) -> presentation_type {
 2524|     10|  switch (to_ascii(type)) {
 2525|      6|  case 'd':
  ------------------
  |  Branch (2525:3): [True: 6, False: 4]
  ------------------
 2526|      6|    return presentation_type::dec;
 2527|      0|  case 'o':
  ------------------
  |  Branch (2527:3): [True: 0, False: 10]
  ------------------
 2528|      0|    return presentation_type::oct;
 2529|      0|  case 'x':
  ------------------
  |  Branch (2529:3): [True: 0, False: 10]
  ------------------
 2530|      0|    return presentation_type::hex_lower;
 2531|      0|  case 'X':
  ------------------
  |  Branch (2531:3): [True: 0, False: 10]
  ------------------
 2532|      0|    return presentation_type::hex_upper;
 2533|      0|  case 'b':
  ------------------
  |  Branch (2533:3): [True: 0, False: 10]
  ------------------
 2534|      0|    return presentation_type::bin_lower;
 2535|      0|  case 'B':
  ------------------
  |  Branch (2535:3): [True: 0, False: 10]
  ------------------
 2536|      0|    return presentation_type::bin_upper;
 2537|      0|  case 'a':
  ------------------
  |  Branch (2537:3): [True: 0, False: 10]
  ------------------
 2538|      0|    return presentation_type::hexfloat_lower;
 2539|      0|  case 'A':
  ------------------
  |  Branch (2539:3): [True: 0, False: 10]
  ------------------
 2540|      0|    return presentation_type::hexfloat_upper;
 2541|      0|  case 'e':
  ------------------
  |  Branch (2541:3): [True: 0, False: 10]
  ------------------
 2542|      0|    return presentation_type::exp_lower;
 2543|      0|  case 'E':
  ------------------
  |  Branch (2543:3): [True: 0, False: 10]
  ------------------
 2544|      0|    return presentation_type::exp_upper;
 2545|      0|  case 'f':
  ------------------
  |  Branch (2545:3): [True: 0, False: 10]
  ------------------
 2546|      0|    return presentation_type::fixed_lower;
 2547|      0|  case 'F':
  ------------------
  |  Branch (2547:3): [True: 0, False: 10]
  ------------------
 2548|      0|    return presentation_type::fixed_upper;
 2549|      0|  case 'g':
  ------------------
  |  Branch (2549:3): [True: 0, False: 10]
  ------------------
 2550|      0|    return presentation_type::general_lower;
 2551|      0|  case 'G':
  ------------------
  |  Branch (2551:3): [True: 0, False: 10]
  ------------------
 2552|      0|    return presentation_type::general_upper;
 2553|      0|  case 'c':
  ------------------
  |  Branch (2553:3): [True: 0, False: 10]
  ------------------
 2554|      0|    return presentation_type::chr;
 2555|      4|  case 's':
  ------------------
  |  Branch (2555:3): [True: 4, False: 6]
  ------------------
 2556|      4|    return presentation_type::string;
 2557|      0|  case 'p':
  ------------------
  |  Branch (2557:3): [True: 0, False: 10]
  ------------------
 2558|      0|    return presentation_type::pointer;
 2559|      0|  case '?':
  ------------------
  |  Branch (2559:3): [True: 0, False: 10]
  ------------------
 2560|      0|    return presentation_type::debug;
 2561|      0|  default:
  ------------------
  |  Branch (2561:3): [True: 0, False: 10]
  ------------------
 2562|      0|    return presentation_type::none;
 2563|     10|  }
 2564|     10|}
_ZN3fmt2v96detail12specs_setterIcE7on_typeENS0_17presentation_typeE:
 2239|     10|  FMT_CONSTEXPR void on_type(presentation_type type) { specs_.type = type; }
_ZN3fmt2v96detail8to_asciiIcLi0EEET_S3_:
 2299|     10|constexpr auto to_ascii(Char c) -> Char {
 2300|     10|  return c;
 2301|     10|}
_ZN3fmt2v916visit_format_argIRNS0_6detail13arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1639|     10|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1640|     10|  switch (arg.type_) {
  ------------------
  |  Branch (1640:11): [True: 0, False: 10]
  ------------------
 1641|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1641:3): [True: 0, False: 10]
  ------------------
 1642|      0|    break;
 1643|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1643:3): [True: 0, False: 10]
  ------------------
 1644|      0|    return vis(arg.value_.int_value);
 1645|      6|  case detail::type::uint_type:
  ------------------
  |  Branch (1645:3): [True: 6, False: 4]
  ------------------
 1646|      6|    return vis(arg.value_.uint_value);
 1647|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1647:3): [True: 0, False: 10]
  ------------------
 1648|      0|    return vis(arg.value_.long_long_value);
 1649|      0|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1649:3): [True: 0, False: 10]
  ------------------
 1650|      0|    return vis(arg.value_.ulong_long_value);
 1651|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1651:3): [True: 0, False: 10]
  ------------------
 1652|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1653|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1653:3): [True: 0, False: 10]
  ------------------
 1654|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1655|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1655:3): [True: 0, False: 10]
  ------------------
 1656|      0|    return vis(arg.value_.bool_value);
 1657|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1657:3): [True: 0, False: 10]
  ------------------
 1658|      0|    return vis(arg.value_.char_value);
 1659|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1659:3): [True: 0, False: 10]
  ------------------
 1660|      0|    return vis(arg.value_.float_value);
 1661|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1661:3): [True: 0, False: 10]
  ------------------
 1662|      0|    return vis(arg.value_.double_value);
 1663|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1663:3): [True: 0, False: 10]
  ------------------
 1664|      0|    return vis(arg.value_.long_double_value);
 1665|      4|  case detail::type::cstring_type:
  ------------------
  |  Branch (1665:3): [True: 4, False: 6]
  ------------------
 1666|      4|    return vis(arg.value_.string.data);
 1667|      0|  case detail::type::string_type:
  ------------------
  |  Branch (1667:3): [True: 0, False: 10]
  ------------------
 1668|      0|    using sv = basic_string_view<typename Context::char_type>;
 1669|      0|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1670|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1670:3): [True: 0, False: 10]
  ------------------
 1671|      0|    return vis(arg.value_.pointer);
 1672|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1672:3): [True: 0, False: 10]
  ------------------
 1673|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1674|     10|  }
 1675|      0|  return vis(monostate());
 1676|     10|}
_ZN3fmt2v96detail10arg_mapperINS0_20basic_format_contextINS0_8appenderEcEEE3mapEj:
 1377|      6|  FMT_CONSTEXPR FMT_INLINE auto map(unsigned val) -> unsigned { return val; }
_ZN3fmt2v96detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ej:
 1285|      6|  constexpr FMT_INLINE value(unsigned val) : uint_value(val) {}
_ZN3fmt2v96detail23check_cstring_type_specINS1_13error_handlerEEEbNS0_17presentation_typeEOT_:
 2843|      4|                                           ErrorHandler&& eh = {}) -> bool {
 2844|      4|  if (type == presentation_type::none || type == presentation_type::string ||
  ------------------
  |  Branch (2844:7): [True: 0, False: 4]
  |  Branch (2844:42): [True: 4, False: 0]
  ------------------
 2845|      4|      type == presentation_type::debug)
  ------------------
  |  Branch (2845:7): [True: 0, False: 0]
  ------------------
 2846|      4|    return true;
 2847|      0|  if (type != presentation_type::pointer) eh.on_error("invalid type specifier");
  ------------------
  |  Branch (2847:7): [True: 0, False: 0]
  ------------------
 2848|      0|  return false;
 2849|      4|}
_ZN3fmt2v96detail22check_string_type_specINS1_13error_handlerEEEvNS0_17presentation_typeEOT_:
 2853|      4|                                          ErrorHandler&& eh = {}) {
 2854|      4|  if (type != presentation_type::none && type != presentation_type::string &&
  ------------------
  |  Branch (2854:7): [True: 4, False: 0]
  |  Branch (2854:42): [True: 0, False: 4]
  ------------------
 2855|      4|      type != presentation_type::debug)
  ------------------
  |  Branch (2855:7): [True: 0, False: 0]
  ------------------
 2856|      0|    eh.on_error("invalid type specifier");
 2857|      4|}
_ZN3fmt2v96detail4findILb0EcPKcEEbT1_S5_T0_RS5_:
 2334|     24|                              const char*& out) -> bool {
 2335|     24|  out = static_cast<const char*>(
 2336|     24|      std::memchr(first, value, to_unsigned(last - first)));
 2337|     24|  return out != nullptr;
 2338|     24|}
_ZZN3fmt2v96detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS0_17basic_format_argsINS0_20basic_format_contextINSt3__111conditionalIXsr3std7is_sameIS5_cEE5valueENS0_8appenderENSC_20back_insert_iteratorIS6_EEE4typeES5_EEEENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_EN6writerclEPKcST_:
 2708|     12|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2709|     12|      if (from == to) return;
  ------------------
  |  Branch (2709:11): [True: 0, False: 12]
  ------------------
 2710|     12|      for (;;) {
 2711|     12|        const Char* p = nullptr;
 2712|     12|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
  ------------------
  |  Branch (2712:13): [True: 12, False: 0]
  ------------------
 2713|     12|          return handler_.on_text(from, to);
 2714|      0|        ++p;
 2715|      0|        if (p == to || *p != '}')
  ------------------
  |  Branch (2715:13): [True: 0, False: 0]
  |  Branch (2715:24): [True: 0, False: 0]
  ------------------
 2716|      0|          return handler_.on_error("unmatched '}' in format string");
 2717|      0|        handler_.on_text(from, p);
 2718|      0|        from = p + 1;
 2719|      0|      }
 2720|     12|    }
_ZN3fmt2v96detail10arg_mapperINS0_20basic_format_contextINS0_8appenderEcEEE3mapEPKc:
 1421|      4|  FMT_CONSTEXPR FMT_INLINE auto map(const char_type* val) -> const char_type* {
 1422|      4|    return val;
 1423|      4|  }
_ZN3fmt2v96detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2EPKc:
 1295|      4|  FMT_CONSTEXPR FMT_INLINE value(const char_type* val) {
 1296|      4|    string.data = val;
 1297|      4|    if (is_constant_evaluated()) string.size = {};
  ------------------
  |  Branch (1297:9): [Folded - Ignored]
  ------------------
 1298|      4|  }

_ZN3fmt2v96detail5printEP8_IO_FILENS0_17basic_string_viewIcEE:
 1521|      2|FMT_FUNC void print(std::FILE* f, string_view text) {
 1522|       |#ifdef _WIN32
 1523|       |  if (write_console(f, text)) return;
 1524|       |#endif
 1525|      2|  detail::fwrite_fully(text.data(), 1, text.size(), f);
 1526|      2|}
_ZN3fmt2v96vprintEP8_IO_FILENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEE:
 1529|      2|FMT_FUNC void vprint(std::FILE* f, string_view format_str, format_args args) {
 1530|      2|  memory_buffer buffer;
 1531|      2|  detail::vformat_to(buffer, format_str, args);
 1532|      2|  detail::print(f, {buffer.data(), buffer.size()});
 1533|      2|}
_ZN3fmt2v96vprintENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEE:
 1546|      2|FMT_FUNC void vprint(string_view format_str, format_args args) {
 1547|      2|  vprint(stdout, format_str, args);
 1548|      2|}
_ZN3fmt2v96detail12fwrite_fullyEPKvmmP8_IO_FILE:
   81|      2|                         FILE* stream) {
   82|      2|  size_t written = std::fwrite(ptr, size, count, stream);
   83|      2|  if (written < count)
  ------------------
  |  Branch (83:7): [True: 0, False: 2]
  ------------------
   84|      0|    FMT_THROW(system_error(errno, FMT_STRING("cannot write to file")));
  ------------------
  |  |  100|      0|      do {                             \
  |  |  101|      0|        FMT_ASSERT(false, (x).what()); \
  |  |  ------------------
  |  |  |  |  365|      0|      ::fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  102|      0|      } while (false)
  |  |  ------------------
  |  |  |  Branch (102:16): [Folded - Ignored]
  |  |  ------------------
  ------------------
   85|      2|}

_ZN3fmt2v96detail6bufferIcE6appendIcEEvPKT_S7_:
  807|     22|void buffer<T>::append(const U* begin, const U* end) {
  808|     40|  while (begin != end) {
  ------------------
  |  Branch (808:10): [True: 18, False: 22]
  ------------------
  809|     18|    auto count = to_unsigned(end - begin);
  810|     18|    try_reserve(size_ + count);
  811|     18|    auto free_cap = capacity_ - size_;
  812|     18|    if (free_cap < count) count = free_cap;
  ------------------
  |  Branch (812:9): [True: 0, False: 18]
  ------------------
  813|     18|    std::uninitialized_copy_n(begin, count, make_checked(ptr_ + size_, count));
  814|     18|    size_ += count;
  815|     18|    begin += count;
  816|     18|  }
  817|     22|}
_ZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS0_17basic_format_argsINS0_20basic_format_contextINSt3__111conditionalIXsr3std7is_sameIS4_cEE5valueENS0_8appenderENSB_20back_insert_iteratorIS5_EEE4typeES4_EEEENS1_10locale_refE:
 4180|      2|                locale_ref loc) {
 4181|       |  // workaround for msvc bug regarding name-lookup in module
 4182|       |  // link names into function scope
 4183|      2|  using detail::arg_formatter;
 4184|      2|  using detail::buffer_appender;
 4185|      2|  using detail::custom_formatter;
 4186|      2|  using detail::default_arg_formatter;
 4187|      2|  using detail::get_arg;
 4188|      2|  using detail::locale_ref;
 4189|      2|  using detail::parse_format_specs;
 4190|      2|  using detail::specs_checker;
 4191|      2|  using detail::specs_handler;
 4192|      2|  using detail::to_unsigned;
 4193|      2|  using detail::type;
 4194|      2|  using detail::write;
 4195|      2|  auto out = buffer_appender<Char>(buf);
 4196|      2|  if (fmt.size() == 2 && equal2(fmt.data(), "{}")) {
  ------------------
  |  Branch (4196:7): [True: 0, False: 2]
  |  Branch (4196:26): [True: 0, False: 0]
  ------------------
 4197|      0|    auto arg = args.get(0);
 4198|      0|    if (!arg) error_handler().on_error("argument not found");
  ------------------
  |  Branch (4198:9): [True: 0, False: 0]
  ------------------
 4199|      0|    visit_format_arg(default_arg_formatter<Char>{out, args, loc}, arg);
 4200|      0|    return;
 4201|      0|  }
 4202|       |
 4203|      2|  struct format_handler : error_handler {
 4204|      2|    basic_format_parse_context<Char> parse_context;
 4205|      2|    buffer_context<Char> context;
 4206|       |
 4207|      2|    format_handler(buffer_appender<Char> p_out, basic_string_view<Char> str,
 4208|      2|                   basic_format_args<buffer_context<Char>> p_args,
 4209|      2|                   locale_ref p_loc)
 4210|      2|        : parse_context(str), context(p_out, p_args, p_loc) {}
 4211|       |
 4212|      2|    void on_text(const Char* begin, const Char* end) {
 4213|      2|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4214|      2|      context.advance_to(write<Char>(context.out(), text));
 4215|      2|    }
 4216|       |
 4217|      2|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4218|      2|      return parse_context.next_arg_id();
 4219|      2|    }
 4220|      2|    FMT_CONSTEXPR auto on_arg_id(int id) -> int {
 4221|      2|      return parse_context.check_arg_id(id), id;
 4222|      2|    }
 4223|      2|    FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {
 4224|      2|      int arg_id = context.arg_id(id);
 4225|      2|      if (arg_id < 0) on_error("argument not found");
 4226|      2|      return arg_id;
 4227|      2|    }
 4228|       |
 4229|      2|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4230|      2|      auto arg = get_arg(context, id);
 4231|      2|      context.advance_to(visit_format_arg(
 4232|      2|          default_arg_formatter<Char>{context.out(), context.args(),
 4233|      2|                                      context.locale()},
 4234|      2|          arg));
 4235|      2|    }
 4236|       |
 4237|      2|    auto on_format_specs(int id, const Char* begin, const Char* end)
 4238|      2|        -> const Char* {
 4239|      2|      auto arg = get_arg(context, id);
 4240|      2|      if (arg.type() == type::custom_type) {
 4241|      2|        parse_context.advance_to(parse_context.begin() +
 4242|      2|                                 (begin - &*parse_context.begin()));
 4243|      2|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4244|      2|        return parse_context.begin();
 4245|      2|      }
 4246|      2|      auto specs = basic_format_specs<Char>();
 4247|      2|      specs_checker<specs_handler<Char>> handler(
 4248|      2|          specs_handler<Char>(specs, parse_context, context), arg.type());
 4249|      2|      begin = parse_format_specs(begin, end, handler);
 4250|      2|      if (begin == end || *begin != '}')
 4251|      2|        on_error("missing '}' in format string");
 4252|      2|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4253|      2|      context.advance_to(visit_format_arg(f, arg));
 4254|      2|      return begin;
 4255|      2|    }
 4256|      2|  };
 4257|      2|  detail::parse_format_string<false>(fmt, format_handler(out, fmt, args, loc));
 4258|      2|}
_ZN3fmt2v96detail12count_digitsEj:
 1214|     12|FMT_CONSTEXPR20 inline auto count_digits(uint32_t n) -> int {
 1215|     12|#ifdef FMT_BUILTIN_CLZ
 1216|     12|  if (!is_constant_evaluated()) {
  ------------------
  |  Branch (1216:7): [Folded - Ignored]
  ------------------
 1217|     12|    return do_count_digits(n);
 1218|     12|  }
 1219|      0|#endif
 1220|      0|  return count_digits_fallback(n);
 1221|     12|}
_ZN3fmt2v96detail15do_count_digitsEj:
 1191|     12|FMT_INLINE auto do_count_digits(uint32_t n) -> int {
 1192|       |// An optimization by Kendall Willets from https://bit.ly/3uOIQrB.
 1193|       |// This increments the upper 32 bits (log10(T) - 1) when >= T is added.
 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
 1195|     12|  static constexpr uint64_t table[] = {
 1196|     12|      FMT_INC(0),          FMT_INC(0),          FMT_INC(0),           // 8
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(0),          FMT_INC(0),          FMT_INC(0),           // 8
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(0),          FMT_INC(0),          FMT_INC(0),           // 8
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
 1197|     12|      FMT_INC(10),         FMT_INC(10),         FMT_INC(10),          // 64
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10),         FMT_INC(10),         FMT_INC(10),          // 64
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10),         FMT_INC(10),         FMT_INC(10),          // 64
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
 1198|     12|      FMT_INC(100),        FMT_INC(100),        FMT_INC(100),         // 512
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100),        FMT_INC(100),        FMT_INC(100),         // 512
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100),        FMT_INC(100),        FMT_INC(100),         // 512
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
 1199|     12|      FMT_INC(1000),       FMT_INC(1000),       FMT_INC(1000),        // 4096
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000),       FMT_INC(1000),       FMT_INC(1000),        // 4096
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000),       FMT_INC(1000),       FMT_INC(1000),        // 4096
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
 1200|     12|      FMT_INC(10000),      FMT_INC(10000),      FMT_INC(10000),       // 32k
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10000),      FMT_INC(10000),      FMT_INC(10000),       // 32k
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10000),      FMT_INC(10000),      FMT_INC(10000),       // 32k
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
 1201|     12|      FMT_INC(100000),     FMT_INC(100000),     FMT_INC(100000),      // 256k
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100000),     FMT_INC(100000),     FMT_INC(100000),      // 256k
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100000),     FMT_INC(100000),     FMT_INC(100000),      // 256k
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
 1202|     12|      FMT_INC(1000000),    FMT_INC(1000000),    FMT_INC(1000000),     // 2048k
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000000),    FMT_INC(1000000),    FMT_INC(1000000),     // 2048k
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000000),    FMT_INC(1000000),    FMT_INC(1000000),     // 2048k
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
 1203|     12|      FMT_INC(10000000),   FMT_INC(10000000),   FMT_INC(10000000),    // 16M
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10000000),   FMT_INC(10000000),   FMT_INC(10000000),    // 16M
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10000000),   FMT_INC(10000000),   FMT_INC(10000000),    // 16M
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
 1204|     12|      FMT_INC(100000000),  FMT_INC(100000000),  FMT_INC(100000000),   // 128M
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100000000),  FMT_INC(100000000),  FMT_INC(100000000),   // 128M
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100000000),  FMT_INC(100000000),  FMT_INC(100000000),   // 128M
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
 1205|     12|      FMT_INC(1000000000), FMT_INC(1000000000), FMT_INC(1000000000),  // 1024M
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000000000), FMT_INC(1000000000), FMT_INC(1000000000),  // 1024M
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000000000), FMT_INC(1000000000), FMT_INC(1000000000),  // 1024M
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
 1206|       |      FMT_INC(1000000000), FMT_INC(1000000000)                        // 4B
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000000000), FMT_INC(1000000000)                        // 4B
  ------------------
  |  | 1194|     12|#  define FMT_INC(T) (((sizeof(#  T) - 1ull) << 32) - T)
  ------------------
 1207|     12|  };
 1208|     12|  auto inc = table[FMT_BUILTIN_CLZ(n | 1) ^ 31];
  ------------------
  |  |  145|     12|#    define FMT_BUILTIN_CLZ(n) __builtin_clz(n)
  ------------------
 1209|     12|  return static_cast<int>((n + inc) >> 32);
 1210|     12|}
_ZN3fmt2v919basic_memory_bufferIcLm500ENSt3__19allocatorIcEEEC2ERKS4_:
  876|      2|      : alloc_(alloc) {
  877|      2|    this->set(store_, SIZE);
  878|      2|    if (detail::is_constant_evaluated()) detail::fill_n(store_, SIZE, T());
  ------------------
  |  Branch (878:9): [Folded - Ignored]
  ------------------
  879|      2|  }
_ZN3fmt2v919basic_memory_bufferIcLm500ENSt3__19allocatorIcEEED2Ev:
  880|      2|  FMT_CONSTEXPR20 ~basic_memory_buffer() { deallocate(); }
_ZN3fmt2v919basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE10deallocateEv:
  862|      2|  FMT_CONSTEXPR20 void deallocate() {
  863|      2|    T* data = this->data();
  864|      2|    if (data != store_) alloc_.deallocate(data, this->capacity());
  ------------------
  |  Branch (864:9): [True: 0, False: 2]
  ------------------
  865|      2|  }
_ZN3fmt2v96detail12make_checkedIcEEPT_S4_m:
  516|     18|template <typename T> constexpr auto make_checked(T* p, size_t) -> T* {
  517|     18|  return p;
  518|     18|}
_ZN3fmt2v96detail7reserveINS0_8appenderEEERT_S5_m:
  544|     22|constexpr auto reserve(Iterator& it, size_t) -> Iterator& {
  545|     22|  return it;
  546|     22|}
_ZN3fmt2v96detail14format_decimalIcjEENS1_21format_decimal_resultIPT_EES5_T0_i:
 1284|      6|    -> format_decimal_result<Char*> {
 1285|      6|  FMT_ASSERT(size >= count_digits(value), "invalid digit count");
  ------------------
  |  |  365|      6|      ::fmt::detail::ignore_unused((condition), (message))
  ------------------
 1286|      6|  out += size;
 1287|      6|  Char* end = out;
 1288|      6|  while (value >= 100) {
  ------------------
  |  Branch (1288:10): [True: 0, False: 6]
  ------------------
 1289|       |    // Integer division is slow so do it for a group of two digits instead
 1290|       |    // of for every digit. The idea comes from the talk by Alexandrescu
 1291|       |    // "Three Optimization Tips for C++". See speed-test for a comparison.
 1292|      0|    out -= 2;
 1293|      0|    copy2(out, digits2(static_cast<size_t>(value % 100)));
 1294|      0|    value /= 100;
 1295|      0|  }
 1296|      6|  if (value < 10) {
  ------------------
  |  Branch (1296:7): [True: 6, False: 0]
  ------------------
 1297|      6|    *--out = static_cast<Char>('0' + value);
 1298|      6|    return {out, end};
 1299|      6|  }
 1300|      0|  out -= 2;
 1301|      0|  copy2(out, digits2(static_cast<size_t>(value)));
 1302|      0|  return {out, end};
 1303|      6|}
_ZN3fmt2v96detail14format_decimalIcjNS0_8appenderELi0EEENS1_21format_decimal_resultIT1_EES5_T0_i:
 1308|      6|    -> format_decimal_result<Iterator> {
 1309|       |  // Buffer is large enough to hold all digits (digits10 + 1).
 1310|      6|  Char buffer[digits10<UInt>() + 1] = {};
 1311|      6|  auto end = format_decimal(buffer, value, size).end;
 1312|      6|  return {out, detail::copy_str_noinline<Char>(buffer, end, out)};
 1313|      6|}
_ZN3fmt2v96detail17copy_str_noinlineIcPcNS0_8appenderEEET1_T0_S6_S5_:
  601|      6|                                                  OutputIt out) -> OutputIt {
  602|      6|  return copy_str<OutChar>(begin, end, out);
  603|      6|}
_ZN3fmt2v96detail13base_iteratorINS0_8appenderEEET_S4_S4_:
  572|     22|constexpr auto base_iterator(Iterator, Iterator it) -> Iterator {
  573|     22|  return it;
  574|     22|}
_ZN3fmt2v96detail11is_negativeIjLi0EEEbT_:
 1074|      6|constexpr auto is_negative(T) -> bool {
 1075|      6|  return false;
 1076|      6|}
_ZN3fmt2v96detail18write_int_noinlineIcNS0_8appenderEjEET0_S4_NS1_13write_int_argIT1_EERKNS0_18basic_format_specsIT_EENS1_10locale_refE:
 2147|      6|    locale_ref loc) -> OutputIt {
 2148|      6|  return write_int(out, arg, specs, loc);
 2149|      6|}
_ZN3fmt2v96detail9write_intIcNS0_8appenderEjEET0_S4_NS1_13write_int_argIT1_EERKNS0_18basic_format_specsIT_EENS1_10locale_refE:
 2091|      6|                                        locale_ref) -> OutputIt {
 2092|      6|  static_assert(std::is_same<T, uint32_or_64_or_128_t<T>>::value, "");
 2093|      6|  auto abs_value = arg.abs_value;
 2094|      6|  auto prefix = arg.prefix;
 2095|      6|  switch (specs.type) {
 2096|      0|  case presentation_type::none:
  ------------------
  |  Branch (2096:3): [True: 0, False: 6]
  ------------------
 2097|      6|  case presentation_type::dec: {
  ------------------
  |  Branch (2097:3): [True: 6, False: 0]
  ------------------
 2098|      6|    auto num_digits = count_digits(abs_value);
 2099|      6|    return write_int(
 2100|      6|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2101|      6|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2102|      6|        });
 2103|      0|  }
 2104|      0|  case presentation_type::hex_lower:
  ------------------
  |  Branch (2104:3): [True: 0, False: 6]
  ------------------
 2105|      0|  case presentation_type::hex_upper: {
  ------------------
  |  Branch (2105:3): [True: 0, False: 6]
  ------------------
 2106|      0|    bool upper = specs.type == presentation_type::hex_upper;
 2107|      0|    if (specs.alt)
  ------------------
  |  Branch (2107:9): [True: 0, False: 0]
  ------------------
 2108|      0|      prefix_append(prefix, unsigned(upper ? 'X' : 'x') << 8 | '0');
  ------------------
  |  Branch (2108:38): [True: 0, False: 0]
  ------------------
 2109|      0|    int num_digits = count_digits<4>(abs_value);
 2110|      0|    return write_int(
 2111|      0|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2112|      0|          return format_uint<4, Char>(it, abs_value, num_digits, upper);
 2113|      0|        });
 2114|      0|  }
 2115|      0|  case presentation_type::bin_lower:
  ------------------
  |  Branch (2115:3): [True: 0, False: 6]
  ------------------
 2116|      0|  case presentation_type::bin_upper: {
  ------------------
  |  Branch (2116:3): [True: 0, False: 6]
  ------------------
 2117|      0|    bool upper = specs.type == presentation_type::bin_upper;
 2118|      0|    if (specs.alt)
  ------------------
  |  Branch (2118:9): [True: 0, False: 0]
  ------------------
 2119|      0|      prefix_append(prefix, unsigned(upper ? 'B' : 'b') << 8 | '0');
  ------------------
  |  Branch (2119:38): [True: 0, False: 0]
  ------------------
 2120|      0|    int num_digits = count_digits<1>(abs_value);
 2121|      0|    return write_int(out, num_digits, prefix, specs,
 2122|      0|                     [=](reserve_iterator<OutputIt> it) {
 2123|      0|                       return format_uint<1, Char>(it, abs_value, num_digits);
 2124|      0|                     });
 2125|      0|  }
 2126|      0|  case presentation_type::oct: {
  ------------------
  |  Branch (2126:3): [True: 0, False: 6]
  ------------------
 2127|      0|    int num_digits = count_digits<3>(abs_value);
 2128|       |    // Octal prefix '0' is counted as a digit, so only add it if precision
 2129|       |    // is not greater than the number of digits.
 2130|      0|    if (specs.alt && specs.precision <= num_digits && abs_value != 0)
  ------------------
  |  Branch (2130:9): [True: 0, False: 0]
  |  Branch (2130:22): [True: 0, False: 0]
  |  Branch (2130:55): [True: 0, False: 0]
  ------------------
 2131|      0|      prefix_append(prefix, '0');
 2132|      0|    return write_int(out, num_digits, prefix, specs,
 2133|      0|                     [=](reserve_iterator<OutputIt> it) {
 2134|      0|                       return format_uint<3, Char>(it, abs_value, num_digits);
 2135|      0|                     });
 2136|      0|  }
 2137|      0|  case presentation_type::chr:
  ------------------
  |  Branch (2137:3): [True: 0, False: 6]
  ------------------
 2138|      0|    return write_char(out, static_cast<Char>(abs_value), specs);
 2139|      0|  default:
  ------------------
  |  Branch (2139:3): [True: 0, False: 6]
  ------------------
 2140|      0|    throw_format_error("invalid type specifier");
 2141|      6|  }
 2142|      0|  return out;
 2143|      6|}
_ZN3fmt2v96detail9write_intINS0_8appenderEcZNS1_9write_intIcS3_jEET0_S5_NS1_13write_int_argIT1_EERKNS0_18basic_format_specsIT_EENS1_10locale_refEEUlS3_E_EESA_SA_ijRKNS9_IS5_EES7_:
 1926|      6|                                        W write_digits) -> OutputIt {
 1927|       |  // Slightly faster check for specs.width == 0 && specs.precision == -1.
 1928|      6|  if ((specs.width | (specs.precision + 1)) == 0) {
  ------------------
  |  Branch (1928:7): [True: 6, False: 0]
  ------------------
 1929|      6|    auto it = reserve(out, to_unsigned(num_digits) + (prefix >> 24));
 1930|      6|    if (prefix != 0) {
  ------------------
  |  Branch (1930:9): [True: 0, False: 6]
  ------------------
 1931|      0|      for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
  ------------------
  |  Branch (1931:44): [True: 0, False: 0]
  ------------------
 1932|      0|        *it++ = static_cast<Char>(p & 0xff);
 1933|      0|    }
 1934|      6|    return base_iterator(out, write_digits(it));
 1935|      6|  }
 1936|      0|  auto data = write_int_data<Char>(num_digits, prefix, specs);
 1937|      0|  return write_padded<align::right>(
 1938|      0|      out, specs, data.size, [=](reserve_iterator<OutputIt> it) {
 1939|      0|        for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
 1940|      0|          *it++ = static_cast<Char>(p & 0xff);
 1941|      0|        it = detail::fill_n(it, data.padding, static_cast<Char>('0'));
 1942|      0|        return write_digits(it);
 1943|      0|      });
 1944|      6|}
_ZZN3fmt2v96detail9write_intIcNS0_8appenderEjEET0_S4_NS1_13write_int_argIT1_EERKNS0_18basic_format_specsIT_EENS1_10locale_refEENKUlS3_E_clES3_:
 2100|      6|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2101|      6|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2102|      6|        });
_ZN3fmt2v96detail17copy_str_noinlineIcPKcNS0_8appenderEEET1_T0_S7_S6_:
  601|     12|                                                  OutputIt out) -> OutputIt {
  602|     12|  return copy_str<OutChar>(begin, end, out);
  603|     12|}
_ZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EE:
 3403|     12|    -> OutputIt {
 3404|     12|  auto it = reserve(out, value.size());
 3405|     12|  it = copy_str_noinline<Char>(value.begin(), value.end(), it);
 3406|     12|  return base_iterator(out, it);
 3407|     12|}
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS0_17basic_format_argsINS0_20basic_format_contextINSt3__111conditionalIXsr3std7is_sameIS4_cEE5valueENS0_8appenderENSB_20back_insert_iteratorIS5_EEE4typeES4_EEEENS1_10locale_refEEN14format_handler7on_textEPKcSN_:
 4212|     12|    void on_text(const Char* begin, const Char* end) {
 4213|     12|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4214|     12|      context.advance_to(write<Char>(context.out(), text));
 4215|     12|    }
_ZN3fmt2v96detail7get_argINS0_20basic_format_contextINS0_8appenderEcEEiEENT_10format_argERS6_T0_:
 3591|     10|    typename Context::format_arg {
 3592|     10|  auto arg = ctx.arg(id);
 3593|     10|  if (!arg) ctx.on_error("argument not found");
  ------------------
  |  Branch (3593:7): [True: 0, False: 10]
  ------------------
 3594|     10|  return arg;
 3595|     10|}
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS0_17basic_format_argsINS0_20basic_format_contextINSt3__111conditionalIXsr3std7is_sameIS4_cEE5valueENS0_8appenderENSB_20back_insert_iteratorIS5_EEE4typeES4_EEEENS1_10locale_refEEN14format_handler9on_arg_idEv:
 4217|     10|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4218|     10|      return parse_context.next_arg_id();
 4219|     10|    }
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS0_17basic_format_argsINS0_20basic_format_contextINSt3__111conditionalIXsr3std7is_sameIS4_cEE5valueENS0_8appenderENSB_20back_insert_iteratorIS5_EEE4typeES4_EEEENS1_10locale_refEEN14format_handler15on_format_specsEiPKcSN_:
 4238|     10|        -> const Char* {
 4239|     10|      auto arg = get_arg(context, id);
 4240|     10|      if (arg.type() == type::custom_type) {
  ------------------
  |  Branch (4240:11): [True: 0, False: 10]
  ------------------
 4241|      0|        parse_context.advance_to(parse_context.begin() +
 4242|      0|                                 (begin - &*parse_context.begin()));
 4243|      0|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4244|      0|        return parse_context.begin();
 4245|      0|      }
 4246|     10|      auto specs = basic_format_specs<Char>();
 4247|     10|      specs_checker<specs_handler<Char>> handler(
 4248|     10|          specs_handler<Char>(specs, parse_context, context), arg.type());
 4249|     10|      begin = parse_format_specs(begin, end, handler);
 4250|     10|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (4250:11): [True: 0, False: 10]
  |  Branch (4250:27): [True: 0, False: 10]
  ------------------
 4251|      0|        on_error("missing '}' in format string");
 4252|     10|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4253|     10|      context.advance_to(visit_format_arg(f, arg));
 4254|     10|      return begin;
 4255|     10|    }
_ZN3fmt2v96detail13specs_handlerIcEC2ERNS0_18basic_format_specsIcEERNS0_26basic_format_parse_contextIcNS1_13error_handlerEEERNS0_20basic_format_contextINS0_8appenderEcEE:
 3624|     10|      : specs_setter<Char>(specs), parse_context_(parse_ctx), context_(ctx) {}
_ZN3fmt2v96detail13arg_formatterIcEclIjEENS0_8appenderET_:
 3520|      6|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3521|      6|    return detail::write(out, value, specs, locale);
 3522|      6|  }
_ZN3fmt2v96detail5writeIcNS0_8appenderEjLi0EEET0_S4_T1_RKNS0_18basic_format_specsIT_EENS1_10locale_refE:
 2156|      6|                                    locale_ref loc) -> OutputIt {
 2157|      6|  if (specs.localized && write_loc(out, value, specs, loc)) return out;
  ------------------
  |  Branch (2157:7): [True: 0, False: 6]
  |  Branch (2157:26): [True: 0, False: 0]
  ------------------
 2158|      6|  return write_int_noinline(out, make_write_int_arg(value, specs.sign), specs,
 2159|      6|                            loc);
 2160|      6|}
_ZN3fmt2v96detail18make_write_int_argIjEENS1_13write_int_argINSt3__111conditionalIXaalecl8num_bitsIT_EELi32EntLi0EEjNS5_IXlecl8num_bitsIS6_EELi64EEmoE4typeEE4typeEEES6_NS0_4sign4typeE:
 2053|      6|    -> write_int_arg<uint32_or_64_or_128_t<T>> {
 2054|      6|  auto prefix = 0u;
 2055|      6|  auto abs_value = static_cast<uint32_or_64_or_128_t<T>>(value);
 2056|      6|  if (is_negative(value)) {
  ------------------
  |  Branch (2056:7): [True: 0, False: 6]
  ------------------
 2057|      0|    prefix = 0x01000000 | '-';
 2058|      0|    abs_value = 0 - abs_value;
 2059|      6|  } else {
 2060|      6|    constexpr const unsigned prefixes[4] = {0, 0, 0x1000000u | '+',
 2061|      6|                                            0x1000000u | ' '};
 2062|      6|    prefix = prefixes[sign];
 2063|      6|  }
 2064|      6|  return {abs_value, prefix};
 2065|      6|}
_ZN3fmt2v96detail13arg_formatterIcEclIPKcEENS0_8appenderET_:
 3520|      4|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3521|      4|    return detail::write(out, value, specs, locale);
 3522|      4|  }
_ZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_PKT_RKNS0_18basic_format_specsIS5_EENS1_10locale_refE:
 2245|      4|    -> OutputIt {
 2246|      4|  return check_cstring_type_spec(specs.type)
  ------------------
  |  Branch (2246:10): [True: 4, False: 0]
  ------------------
 2247|      4|             ? write(out, basic_string_view<Char>(s), specs, {})
 2248|      4|             : write_ptr<Char>(out, bit_cast<uintptr_t>(s), &specs);
 2249|      4|}
_ZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewINS0_13type_identityIT_E4typeEEERKNS0_18basic_format_specsIS7_EENS1_10locale_refE:
 2238|      4|    -> OutputIt {
 2239|      4|  check_string_type_spec(specs.type);
 2240|      4|  return write(out, s, specs);
 2241|      4|}
_ZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_18basic_format_specsIS6_EE:
 2215|      4|                         const basic_format_specs<Char>& specs) -> OutputIt {
 2216|      4|  auto data = s.data();
 2217|      4|  auto size = s.size();
 2218|      4|  if (specs.precision >= 0 && to_unsigned(specs.precision) < size)
  ------------------
  |  Branch (2218:7): [True: 0, False: 4]
  |  Branch (2218:31): [True: 0, False: 0]
  ------------------
 2219|      0|    size = code_point_index(s, to_unsigned(specs.precision));
 2220|      4|  bool is_debug = specs.type == presentation_type::debug;
 2221|      4|  size_t width = 0;
 2222|      4|  if (specs.width != 0) {
  ------------------
  |  Branch (2222:7): [True: 0, False: 4]
  ------------------
 2223|      0|    if (is_debug)
  ------------------
  |  Branch (2223:9): [True: 0, False: 0]
  ------------------
 2224|      0|      width = write_escaped_string(counting_iterator{}, s).count();
 2225|      0|    else
 2226|      0|      width = compute_width(basic_string_view<Char>(data, size));
 2227|      0|  }
 2228|      4|  return write_padded(out, specs, size, width,
 2229|      4|                      [=](reserve_iterator<OutputIt> it) {
 2230|      4|                        if (is_debug) return write_escaped_string(it, s);
 2231|      4|                        return copy_str<Char>(data, data + size, it);
 2232|      4|                      });
 2233|      4|}
_ZN3fmt2v96detail12write_paddedILNS0_5align4typeE1ENS0_8appenderEcZNS1_5writeIcS5_EET0_S7_NS0_17basic_string_viewIT_EERKNS0_18basic_format_specsIS9_EEEUlS5_E_EES7_S7_RKNSB_IT1_EEmmOT2_:
 1669|      4|                                size_t size, size_t width, F&& f) -> OutputIt {
 1670|      4|  static_assert(align == align::left || align == align::right, "");
 1671|      4|  unsigned spec_width = to_unsigned(specs.width);
 1672|      4|  size_t padding = spec_width > width ? spec_width - width : 0;
  ------------------
  |  Branch (1672:20): [True: 0, False: 4]
  ------------------
 1673|       |  // Shifts are encoded as string literals because static constexpr is not
 1674|       |  // supported in constexpr functions.
 1675|      4|  auto* shifts = align == align::left ? "\x1f\x1f\x00\x01" : "\x00\x1f\x00\x01";
  ------------------
  |  Branch (1675:18): [Folded - Ignored]
  ------------------
 1676|      4|  size_t left_padding = padding >> shifts[specs.align];
 1677|      4|  size_t right_padding = padding - left_padding;
 1678|      4|  auto it = reserve(out, size + padding * specs.fill.size());
 1679|      4|  if (left_padding != 0) it = fill(it, left_padding, specs.fill);
  ------------------
  |  Branch (1679:7): [True: 0, False: 4]
  ------------------
 1680|      4|  it = f(it);
 1681|      4|  if (right_padding != 0) it = fill(it, right_padding, specs.fill);
  ------------------
  |  Branch (1681:7): [True: 0, False: 4]
  ------------------
 1682|      4|  return base_iterator(out, it);
 1683|      4|}
_ZZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_18basic_format_specsIS6_EEENKUlS3_E_clES3_:
 2229|      4|                      [=](reserve_iterator<OutputIt> it) {
 2230|      4|                        if (is_debug) return write_escaped_string(it, s);
  ------------------
  |  Branch (2230:29): [True: 0, False: 4]
  ------------------
 2231|      4|                        return copy_str<Char>(data, data + size, it);
 2232|      4|                      });
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS0_17basic_format_argsINS0_20basic_format_contextINSt3__111conditionalIXsr3std7is_sameIS4_cEE5valueENS0_8appenderENSB_20back_insert_iteratorIS5_EEE4typeES4_EEEENS1_10locale_refEEN14format_handlerC2ESD_NS7_IcEENS9_INSA_ISD_cEEEESK_:
 4210|      2|        : parse_context(str), context(p_out, p_args, p_loc) {}

_ZN6ImVec2C2Ev:
  263|     50|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

LLVMFuzzerTestOneInput:
    7|     51|{
    8|       |    // Only accept properly null terminated strings
    9|     51|    if (size < 1 || data[size - 1] != '\0')
  ------------------
  |  Branch (9:9): [True: 0, False: 51]
  |  Branch (9:21): [True: 1, False: 50]
  ------------------
   10|      1|    {
   11|      1|        return 1;
   12|      1|    }
   13|       |
   14|     50|    dlxemu::Emulator emulator;
   15|       |
   16|       |    // Build argv
   17|     50|    std::vector<char*> argv;
   18|     50|    argv.reserve(10);
   19|       |
   20|     50|    std::size_t begin{0u};
   21|  8.70k|    for (std::size_t index{0}; index < size; ++index)
  ------------------
  |  Branch (21:32): [True: 8.65k, False: 49]
  ------------------
   22|  8.65k|    {
   23|  8.65k|        char c = static_cast<char>(data[index]);
   24|       |
   25|  8.65k|        if (c == '\0')
  ------------------
  |  Branch (25:13): [True: 2.06k, False: 6.59k]
  ------------------
   26|  2.06k|        {
   27|       |            // Disallow empty strings
   28|  2.06k|            if (begin == index)
  ------------------
  |  Branch (28:17): [True: 1, False: 2.06k]
  ------------------
   29|      1|            {
   30|      1|                return 1;
   31|      1|            }
   32|       |
   33|       |            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-const-cast)
   34|  2.06k|            argv.push_back(const_cast<char*>(reinterpret_cast<const char*>(data + begin)));
   35|  2.06k|            begin = index + 1u;
   36|  2.06k|        }
   37|  8.65k|    }
   38|       |
   39|       |    // Can't eccept too large buffers
   40|     49|    if (argv.size() > std::numeric_limits<std::int32_t>::max())
  ------------------
  |  Branch (40:9): [True: 0, False: 49]
  ------------------
   41|      0|    {
   42|      0|        return 1;
   43|      0|    }
   44|       |
   45|     49|    (void)emulator.HandleCommandLineArguments(static_cast<std::int32_t>(argv.size()), argv.data());
   46|       |
   47|     49|    return 0;
   48|     49|}


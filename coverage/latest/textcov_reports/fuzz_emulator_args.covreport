_ZN6dlxemu6WindowC2Ev:
   13|     54|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  193|    270|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  241|     54|    {
  242|     54|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (242:13): [True: 0, False: 54]
  ------------------
  243|      0|        {
  244|      0|            return m_Line > other.m_Line;
  245|      0|        }
  246|       |
  247|     54|        return m_Column >= other.m_Column;
  248|     54|    }
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  283|     54|    {
  284|     54|        Colorize();
  285|     54|        m_Lines.emplace_back();
  286|     54|    }
_ZN6dlxemu10CodeEditorD2Ev:
  289|     54|    {
  290|     54|        VerifyInternalState();
  291|     54|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1483|     54|    {
 1484|       |        // Lines should never be empty
 1485|     54|        PHI_ASSERT(!m_Lines.empty());
 1486|       |
 1487|       |        // Verify Selection is still in a valid state
 1488|     54|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1489|     54|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1490|     54|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1491|     54|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1492|     54|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1493|       |
 1494|       |        // Verify cursor position
 1495|     54|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1496|     54|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1497|     54|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1498|       |
 1499|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1500|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1501|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1502|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1503|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1504|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1505|       |#endif
 1506|       |
 1507|       |        // Verify that all breakpoints are on existing lines
 1508|     54|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1508:35): [True: 0, False: 54]
  ------------------
 1509|      0|        {
 1510|      0|            PHI_ASSERT(break_point != 0u);
 1511|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1512|      0|        }
 1513|       |
 1514|       |        // Verify that all error markers are on existing lines
 1515|     54|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1515:34): [True: 0, False: 54]
  ------------------
 1516|      0|        {
 1517|      0|            const phi::u32 line_number = error_marker.first;
 1518|       |
 1519|      0|            PHI_ASSERT(line_number != 0u);
 1520|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1521|      0|        }
 1522|     54|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1525|     54|    {
 1526|     54|        constexpr const static Palette palette = {{
 1527|     54|                0xff7f7f7f, // Default
 1528|     54|                0xffd69c56, // OpCode
 1529|     54|                0xff00ff00, // Register
 1530|     54|                0xff7070e0, // IntegerLiteral
 1531|     54|                0xff206020, // Comment
 1532|     54|                0xff101010, // Background
 1533|     54|                0xffe0e0e0, // Cursor
 1534|     54|                0x80a06020, // Selection
 1535|     54|                0x800020ff, // ErrorMarker
 1536|     54|                0x40f08000, // Breakpoint
 1537|     54|                0xff707000, // Line number
 1538|     54|                0x40000000, // Current line fill
 1539|     54|                0x40808080, // Current line fill (inactive)
 1540|     54|                0x40a0a0a0, // Current line edge
 1541|     54|        }};
 1542|       |
 1543|     54|        return palette;
 1544|     54|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1709|     54|    {
 1710|       |        // TODO: This is quite unreadable
 1711|     54|        const phi::u32 to_line =
 1712|     54|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1712:17): [True: 54, False: 0]
  ------------------
 1713|     54|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1714|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1715|       |
 1716|     54|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1717|     54|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1718|     54|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1719|     54|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1720|     54|    }

_ZN6dlxemu8EmulatorC2Ev:
   46|     54|    {}
_ZN6dlxemu8Emulator26HandleCommandLineArgumentsEN3phi7integerIiEEPPc:
   55|     53|    {
   56|       |        // No args
   57|     53|        if (argc <= 1)
  ------------------
  |  Branch (57:13): [True: 8, False: 45]
  ------------------
   58|      8|        {
   59|      8|            return ShouldContinueInitialization::Yes;
   60|      8|        }
   61|       |
   62|  2.37k|        for (phi::i32 arg_num{1}; arg_num < argc; ++arg_num)
  ------------------
  |  Branch (62:35): [True: 2.34k, False: 32]
  ------------------
   63|  2.34k|        {
   64|  2.34k|            std::string arg_value = argv[arg_num.unsafe()];
   65|       |
   66|       |            // Convert all characters to lower case
   67|  2.34k|            phi::for_each(arg_value.begin(), arg_value.end(), phi::to_lower_case);
   68|       |            //std::transform(arg_value.begin(), arg_value.end(), arg_value.begin(), ::tolower);
   69|       |
   70|  2.34k|            PHI_ASSERT(!arg_value.empty());
   71|       |
   72|  2.34k|            if (arg_value.front() == '-')
  ------------------
  |  Branch (72:17): [True: 13, False: 2.32k]
  ------------------
   73|     13|            {
   74|       |                // Display help
   75|     13|                if (arg_value == "-h" || arg_value == "-help" || arg_value == "-?" ||
  ------------------
  |  Branch (75:21): [True: 1, False: 12]
  |  Branch (75:42): [True: 1, False: 11]
  |  Branch (75:66): [True: 1, False: 10]
  ------------------
   76|     13|                    arg_value == "--help")
  ------------------
  |  Branch (76:21): [True: 1, False: 9]
  ------------------
   77|      4|                {
   78|      4|                    DLX_INFO("Help");
  ------------------
  |  |    7|      4|#define DLX_INFO(...)     PHI_EMPTY_MACRO()
  ------------------
   79|      4|                    return ShouldContinueInitialization::No;
   80|      4|                }
   81|       |                // Display version
   82|      9|                if (arg_value == "-v" || arg_value == "--value")
  ------------------
  |  Branch (82:21): [True: 1, False: 8]
  |  Branch (82:42): [True: 1, False: 7]
  ------------------
   83|      2|                {
   84|      2|                    fmt::print("DLXEmu version {:d}.{:d}.{:d} {:s}-{:s}\n", VersionMajor,
   85|      2|                               VersionMinor, VersionPatch, GitBranch, GitShaFull);
   86|      2|                    return ShouldContinueInitialization::No;
   87|      2|                }
   88|       |
   89|       |                // Unknown option
   90|      7|                DLX_WARN("Unknown option '{:s}' ignored", arg_value);
  ------------------
  |  |    8|      7|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
   91|      7|                break;
   92|      9|            }
   93|       |
   94|  2.32k|            DLX_WARN("Ignore command line argument '{:s}'", arg_value);
  ------------------
  |  |    8|  2.32k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
   95|  2.32k|        }
   96|       |
   97|     39|        return ShouldContinueInitialization::Yes;
   98|     45|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|     54|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|     54|    {}

_ZN6dlxemu6WindowD2Ev:
   41|     54|    {
   42|     54|        Shutdown();
   43|     54|    }
_ZN6dlxemu6Window8ShutdownEv:
  113|     54|    {
  114|     54|        if (imgui_initialized)
  ------------------
  |  Branch (114:13): [True: 0, False: 54]
  ------------------
  115|      0|        {
  116|      0|            ShutdownImGui();
  117|      0|        }
  118|       |
  119|     54|        if (m_Window != nullptr)
  ------------------
  |  Branch (119:13): [True: 0, False: 54]
  ------------------
  120|      0|        {
  121|      0|            glfwDestroyWindow(m_Window);
  122|      0|        }
  123|       |
  124|     54|        if (glfw_initialized)
  ------------------
  |  Branch (124:13): [True: 0, False: 54]
  ------------------
  125|      0|        {
  126|      0|            glfwTerminate();
  127|      0|        }
  128|     54|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  54.0k|            {}

_ZN3dlx11IntRegisterC2Ev:
   12|  1.72k|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   40|     54|    {
   41|     54|        m_IsReadOnly = read_only;
   42|     54|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   12|     54|    {
   13|     54|        m_Values.resize(starting_size.unsafe());
   14|     54|    }

_ZN3dlx9ProcessorC2Ev:
   62|     54|    {
   63|       |        // Mark R0 as ready only
   64|     54|        m_IntRegisters[0].SetReadOnly(true);
   65|     54|    }

_ZN3fmt3v116detail6bufferIcE6appendIcEEvPKT_S7_:
  917|     22|  template <typename U> void append(const U* begin, const U* end) {
  918|     40|    while (begin != end) {
  ------------------
  |  Branch (918:12): [True: 18, False: 22]
  ------------------
  919|     18|      auto count = to_unsigned(end - begin);
  920|     18|      try_reserve(size_ + count);
  921|     18|      auto free_cap = capacity_ - size_;
  922|     18|      if (free_cap < count) count = free_cap;
  ------------------
  |  Branch (922:11): [True: 0, False: 18]
  ------------------
  923|     18|      if (std::is_same<T, U>::value) {
  ------------------
  |  Branch (923:11): [Folded - Ignored]
  ------------------
  924|     18|        memcpy(ptr_ + size_, begin, count * sizeof(T));
  925|     18|      } else {
  926|      0|        T* out = ptr_ + size_;
  927|      0|        for (size_t i = 0; i < count; ++i) out[i] = begin[i];
  ------------------
  |  Branch (927:28): [True: 0, False: 0]
  ------------------
  928|      0|      }
  929|     18|      size_ += count;
  930|     18|      begin += count;
  931|     18|    }
  932|     22|  }
_ZN3fmt3v116detail11to_unsignedIiEENSt3__113make_unsignedIT_E4typeES5_:
  432|     10|FMT_CONSTEXPR auto to_unsigned(Int value) -> make_unsigned_t<Int> {
  433|     10|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  402|     20|    fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (402:33): [Folded - Ignored]
  |  |  |  Branch (402:33): [True: 10, False: 0]
  |  |  ------------------
  ------------------
  434|     10|  return static_cast<make_unsigned_t<Int>>(value);
  435|     10|}
_ZN3fmt3v116detail13ignore_unusedIJbA15_cEEEvDpRKT_:
  372|     64|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZN3fmt3v1114basic_appenderIcEC2ERNS0_6detail6bufferIcEE:
 1163|      2|  FMT_CONSTEXPR basic_appender(detail::buffer<T>& buf) : buffer_(&buf) {}
_ZNK3fmt3v1117basic_string_viewIcE4sizeEv:
  546|     22|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v116detail13ignore_unusedIJbA1_cEEEvDpRKT_:
  372|     10|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v116detail6bufferIcE4sizeEv:
  884|     24|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v116detail6bufferIcEC2EPFvRS3_mEPcmm:
  859|      2|      : ptr_(p), size_(sz), capacity_(cap), grow_(grow) {}
_ZN3fmt3v116detail6bufferIcE3setEPcm:
  865|      2|  FMT_CONSTEXPR void set(T* buf_data, size_t buf_capacity) noexcept {
  866|      2|    ptr_ = buf_data;
  867|      2|    capacity_ = buf_capacity;
  868|      2|  }
_ZN3fmt3v116detail6bufferIcE4dataEv:
  890|      4|  FMT_CONSTEXPR auto data() noexcept -> T* { return ptr_; }
_ZN3fmt3v1113get_containerENS0_14basic_appenderIcEE:
 1151|     44|  friend auto get_container(basic_appender app) -> detail::buffer<T>& {
 1152|     44|    return *app.buffer_;
 1153|     44|  }
_ZN3fmt3v116detail4copyIcPKcEENS0_14basic_appenderIcEET0_S7_S6_:
 1194|     16|auto copy(InputIt begin, InputIt end, appender out) -> appender {
 1195|     16|  get_container(out).append(begin, end);
 1196|     16|  return out;
 1197|     16|}
_ZNK3fmt3v1117basic_string_viewIcE5beginEv:
  548|     12|  constexpr auto begin() const noexcept -> iterator { return data_; }
_ZNK3fmt3v1117basic_string_viewIcE3endEv:
  549|     12|  constexpr auto end() const noexcept -> iterator { return data_ + size_; }
_ZN3fmt3v1117basic_string_viewIcEC2EPKc:
  532|      4|                  : detail::length(s)) {}
_ZN3fmt3v116detail10locale_refC2Ev:
 1570|      6|  constexpr locale_ref() : locale_(nullptr) {}
_ZN3fmt3v116detail5valueINS0_7contextEEC2Ev:
 1337|     10|  constexpr FMT_ALWAYS_INLINE value() : no_value() {}
_ZN3fmt3v119monostateC2Ev:
  347|     10|  constexpr monostate() {}
_ZNK3fmt3v1117basic_string_viewIcE4dataEv:
  543|      8|  constexpr auto data() const noexcept -> const Char* { return data_; }
_ZN3fmt3v1117basic_string_viewIcEC2EPKcm:
  521|     14|      : data_(s), size_(count) {}
_ZN3fmt3v116detail11to_unsignedIlEENSt3__113make_unsignedIT_E4typeES5_:
  432|     54|FMT_CONSTEXPR auto to_unsigned(Int value) -> make_unsigned_t<Int> {
  433|     54|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  402|    108|    fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (402:33): [Folded - Ignored]
  |  |  |  Branch (402:33): [True: 54, False: 0]
  |  |  ------------------
  ------------------
  434|     54|  return static_cast<make_unsigned_t<Int>>(value);
  435|     54|}
_ZN3fmt3v116detail6bufferIcE11try_reserveEm:
  907|     40|  FMT_CONSTEXPR void try_reserve(size_t new_capacity) {
  908|     40|    if (new_capacity > capacity_) grow_(*this, new_capacity);
  ------------------
  |  Branch (908:9): [True: 0, False: 40]
  ------------------
  909|     40|  }
_ZNK3fmt3v1117basic_format_argsINS0_7contextEE3getEi:
 1889|     10|  FMT_CONSTEXPR auto get(int id) const -> format_arg {
 1890|     10|    format_arg arg;
 1891|     10|    if (!is_packed()) {
  ------------------
  |  Branch (1891:9): [True: 0, False: 10]
  ------------------
 1892|      0|      if (id < max_size()) arg = args_[id];
  ------------------
  |  Branch (1892:11): [True: 0, False: 0]
  ------------------
 1893|      0|      return arg;
 1894|      0|    }
 1895|     10|    if (static_cast<unsigned>(id) >= detail::max_packed_args) return arg;
  ------------------
  |  Branch (1895:9): [True: 0, False: 10]
  ------------------
 1896|     10|    arg.type_ = type(id);
 1897|     10|    if (arg.type_ == detail::type::none_type) return arg;
  ------------------
  |  Branch (1897:9): [True: 0, False: 10]
  ------------------
 1898|     10|    arg.value_ = values_[id];
 1899|     10|    return arg;
 1900|     10|  }
_ZN3fmt3v1116basic_format_argINS0_7contextEEC2Ev:
 1745|     10|  constexpr basic_format_arg() : type_(detail::type::none_type) {}
_ZNK3fmt3v1117basic_format_argsINS0_7contextEE9is_packedEv:
 1848|     10|  constexpr auto is_packed() const -> bool {
 1849|     10|    return (desc_ & detail::is_unpacked_bit) == 0;
 1850|     10|  }
_ZNK3fmt3v1117basic_format_argsINS0_7contextEE4typeEi:
 1855|     10|  FMT_CONSTEXPR auto type(int index) const -> detail::type {
 1856|     10|    int shift = index * detail::packed_arg_bits;
 1857|     10|    unsigned int mask = (1 << detail::packed_arg_bits) - 1;
 1858|     10|    return static_cast<detail::type>((desc_ >> shift) & mask);
 1859|     10|  }
_ZNK3fmt3v1116basic_format_argINS0_7contextEEcvbEv:
 1747|     10|  constexpr explicit operator bool() const noexcept {
 1748|     10|    return type_ != detail::type::none_type;
 1749|     10|  }
_ZN3fmt3v116detail13ignore_unusedIJbA20_cEEEvDpRKT_:
  372|      6|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZN3fmt3v116detail4copyIcPcEENS0_14basic_appenderIcEET0_S6_S5_:
 1194|      6|auto copy(InputIt begin, InputIt end, appender out) -> appender {
 1195|      6|  get_container(out).append(begin, end);
 1196|      6|  return out;
 1197|      6|}
_ZNK3fmt3v116detail6fill_t4sizeEv:
 2094|      4|  constexpr auto size() const -> size_t { return size_; }
_ZN3fmt3v1112format_specsC2Ev:
 2156|     10|        localized(false) {}
_ZN3fmt3v1126basic_format_parse_contextIcEC2ENS0_17basic_string_viewIcEEi:
  756|      2|      : format_str_(format_str), next_arg_id_(next_arg_id) {}
_ZN3fmt3v117contextC2ENS0_14basic_appenderIcEENS0_17basic_format_argsIS1_EENS0_6detail10locale_refE:
 1946|      2|      : out_(out), args_(ctx_args), loc_(loc) {}
_ZN3fmt3v117context3outEv:
 1959|     22|  FMT_CONSTEXPR auto out() -> iterator { return out_; }
_ZN3fmt3v116detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_:
 2588|      2|                                       Handler&& handler) {
 2589|      2|  auto begin = format_str.data();
 2590|      2|  auto end = begin + format_str.size();
 2591|      2|  if (end - begin < 32) {
  ------------------
  |  Branch (2591:7): [True: 0, False: 2]
  ------------------
 2592|       |    // Use a simple loop instead of memchr for small strings.
 2593|      0|    const Char* p = begin;
 2594|      0|    while (p != end) {
  ------------------
  |  Branch (2594:12): [True: 0, False: 0]
  ------------------
 2595|      0|      auto c = *p++;
 2596|      0|      if (c == '{') {
  ------------------
  |  Branch (2596:11): [True: 0, False: 0]
  ------------------
 2597|      0|        handler.on_text(begin, p - 1);
 2598|      0|        begin = p = parse_replacement_field(p - 1, end, handler);
 2599|      0|      } else if (c == '}') {
  ------------------
  |  Branch (2599:18): [True: 0, False: 0]
  ------------------
 2600|      0|        if (p == end || *p != '}')
  ------------------
  |  Branch (2600:13): [True: 0, False: 0]
  |  Branch (2600:25): [True: 0, False: 0]
  ------------------
 2601|      0|          return handler.on_error("unmatched '}' in format string");
 2602|      0|        handler.on_text(begin, p);
 2603|      0|        begin = ++p;
 2604|      0|      }
 2605|      0|    }
 2606|      0|    handler.on_text(begin, end);
 2607|      0|    return;
 2608|      0|  }
 2609|      2|  struct writer {
 2610|      2|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2611|      2|      if (from == to) return;
 2612|      2|      for (;;) {
 2613|      2|        const Char* p = nullptr;
 2614|      2|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
 2615|      2|          return handler_.on_text(from, to);
 2616|      2|        ++p;
 2617|      2|        if (p == to || *p != '}')
 2618|      2|          return handler_.on_error("unmatched '}' in format string");
 2619|      2|        handler_.on_text(from, p);
 2620|      2|        from = p + 1;
 2621|      2|      }
 2622|      2|    }
 2623|      2|    Handler& handler_;
 2624|      2|  } write = {handler};
 2625|     12|  while (begin != end) {
  ------------------
  |  Branch (2625:10): [True: 12, False: 0]
  ------------------
 2626|       |    // Doing two passes with memchr (one for '{' and another for '}') is up to
 2627|       |    // 2.5x faster than the naive one-pass implementation on big format strings.
 2628|     12|    const Char* p = begin;
 2629|     12|    if (*begin != '{' && !find<IS_CONSTEXPR>(begin + 1, end, Char('{'), p))
  ------------------
  |  Branch (2629:9): [True: 12, False: 0]
  |  Branch (2629:26): [True: 2, False: 10]
  ------------------
 2630|      2|      return write(begin, end);
 2631|     10|    write(begin, p);
 2632|     10|    begin = parse_replacement_field(p, end, handler);
 2633|     10|  }
 2634|      2|}
_ZN3fmt3v117context10advance_toENS0_14basic_appenderIcEE:
 1962|     22|  void advance_to(iterator) {}
_ZN3fmt3v116detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_:
 2551|     10|                                           Handler&& handler) -> const Char* {
 2552|     10|  struct id_adapter {
 2553|     10|    Handler& handler;
 2554|     10|    int arg_id;
 2555|       |
 2556|     10|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
 2557|     10|    FMT_CONSTEXPR void on_index(int id) { arg_id = handler.on_arg_id(id); }
 2558|     10|    FMT_CONSTEXPR void on_name(basic_string_view<Char> id) {
 2559|     10|      arg_id = handler.on_arg_id(id);
 2560|     10|    }
 2561|     10|  };
 2562|       |
 2563|     10|  ++begin;
 2564|     10|  if (begin == end) return handler.on_error("invalid format string"), end;
  ------------------
  |  Branch (2564:7): [True: 0, False: 10]
  ------------------
 2565|     10|  if (*begin == '}') {
  ------------------
  |  Branch (2565:7): [True: 0, False: 10]
  ------------------
 2566|      0|    handler.on_replacement_field(handler.on_arg_id(), begin);
 2567|     10|  } else if (*begin == '{') {
  ------------------
  |  Branch (2567:14): [True: 0, False: 10]
  ------------------
 2568|      0|    handler.on_text(begin, begin + 1);
 2569|     10|  } else {
 2570|     10|    auto adapter = id_adapter{handler, 0};
 2571|     10|    begin = parse_arg_id(begin, end, adapter);
 2572|     10|    Char c = begin != end ? *begin : Char();
  ------------------
  |  Branch (2572:14): [True: 10, False: 0]
  ------------------
 2573|     10|    if (c == '}') {
  ------------------
  |  Branch (2573:9): [True: 0, False: 10]
  ------------------
 2574|      0|      handler.on_replacement_field(adapter.arg_id, begin);
 2575|     10|    } else if (c == ':') {
  ------------------
  |  Branch (2575:16): [True: 10, False: 0]
  ------------------
 2576|     10|      begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 2577|     10|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (2577:11): [True: 0, False: 10]
  |  Branch (2577:27): [True: 0, False: 10]
  ------------------
 2578|      0|        return handler.on_error("unknown format specifier"), end;
 2579|     10|    } else {
 2580|      0|      return handler.on_error("missing '}' in format string"), end;
 2581|      0|    }
 2582|     10|  }
 2583|     10|  return begin + 1;
 2584|     10|}
_ZNK3fmt3v117context3argEi:
 1951|     10|  FMT_CONSTEXPR auto arg(int id) const -> format_arg { return args_.get(id); }
_ZN3fmt3v117context6localeEv:
 1964|     10|  FMT_CONSTEXPR auto locale() -> detail::locale_ref { return loc_; }
_ZN3fmt3v1126basic_format_parse_contextIcE11next_arg_idEv:
  774|     10|  FMT_CONSTEXPR auto next_arg_id() -> int {
  775|     10|    if (next_arg_id_ < 0) {
  ------------------
  |  Branch (775:9): [True: 0, False: 10]
  ------------------
  776|      0|      report_error("cannot switch from manual to automatic argument indexing");
  777|      0|      return 0;
  778|      0|    }
  779|     10|    int id = next_arg_id_++;
  780|     10|    do_check_arg_id(id);
  781|     10|    return id;
  782|     10|  }
_ZN3fmt3v1126basic_format_parse_contextIcE15do_check_arg_idEi:
 1106|     10|FMT_CONSTEXPR void basic_format_parse_context<Char>::do_check_arg_id(int id) {
 1107|       |  // Argument id is only checked at compile-time during parsing because
 1108|       |  // formatting has its own validation.
 1109|     10|  if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (1109:7): [Folded - Ignored]
  ------------------
 1110|     10|      (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   37|      0|#  define FMT_GCC_VERSION 0
  ------------------
                    (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   37|      0|#  define FMT_GCC_VERSION 0
  ------------------
  |  Branch (1110:8): [Folded - Ignored]
  |  Branch (1110:28): [Folded - Ignored]
  ------------------
 1111|      0|    using context = detail::compile_parse_context<Char>;
 1112|      0|    if (id >= static_cast<context*>(this)->num_args())
  ------------------
  |  Branch (1112:9): [True: 0, False: 0]
  ------------------
 1113|      0|      report_error("argument not found");
 1114|      0|  }
 1115|     10|}
_ZN3fmt3v116detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS6_EENS1_12vformat_argsIS6_E4typeENS1_10locale_refEE14format_handlerEEPKS6_SI_SI_OT0_E10id_adapterEESI_SI_SI_SK_:
 2298|     10|                                Handler&& handler) -> const Char* {
 2299|     10|  FMT_ASSERT(begin != end, "");
  ------------------
  |  |  402|     10|    fmt::detail::ignore_unused((condition), (message))
  ------------------
 2300|     10|  Char c = *begin;
 2301|     10|  if (c != '}' && c != ':') return do_parse_arg_id(begin, end, handler);
  ------------------
  |  Branch (2301:7): [True: 10, False: 0]
  |  Branch (2301:19): [True: 0, False: 10]
  ------------------
 2302|     10|  handler.on_auto();
 2303|     10|  return begin;
 2304|     10|}
_ZZN3fmt3v116detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_EN10id_adapter7on_autoEv:
 2556|     10|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
_ZN3fmt3v1116basic_format_argINS0_7contextEE13format_customEPKcRNS0_26basic_format_parse_contextIcEERS2_:
 1805|     10|                     Context& ctx) -> bool {
 1806|     10|    if (type_ != detail::type::custom_type) return false;
  ------------------
  |  Branch (1806:9): [True: 10, False: 0]
  ------------------
 1807|      0|    parse_ctx.advance_to(parse_begin);
 1808|      0|    value_.custom.format(value_.custom.value, parse_ctx, ctx);
 1809|      0|    return true;
 1810|     10|  }
_ZN3fmt3v116detail7arg_refIcEC2Ev:
 2165|     20|  FMT_CONSTEXPR arg_ref() : kind(arg_id_kind::none), val() {}
_ZN3fmt3v116detail7arg_refIcE5valueC2Ei:
 2180|     20|    FMT_CONSTEXPR value(int idx = 0) : index(idx) {}
_ZN3fmt3v116detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeE:
 2369|     10|                                      type arg_type) -> const Char* {
 2370|     10|  auto c = '\0';
 2371|     10|  if (end - begin > 1) {
  ------------------
  |  Branch (2371:7): [True: 10, False: 0]
  ------------------
 2372|     10|    auto next = to_ascii(begin[1]);
 2373|     10|    c = parse_align(next) == align::none ? to_ascii(*begin) : '\0';
  ------------------
  |  Branch (2373:9): [True: 10, False: 0]
  ------------------
 2374|     10|  } else {
 2375|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2375:9): [True: 0, False: 0]
  ------------------
 2376|      0|    c = to_ascii(*begin);
 2377|      0|  }
 2378|       |
 2379|     10|  struct {
 2380|     10|    state current_state = state::start;
 2381|     10|    FMT_CONSTEXPR void operator()(state s, bool valid = true) {
 2382|     10|      if (current_state >= s || !valid)
 2383|     10|        report_error("invalid format specifier");
 2384|     10|      current_state = s;
 2385|     10|    }
 2386|     10|  } enter_state;
 2387|       |
 2388|     10|  using pres = presentation_type;
 2389|     10|  constexpr auto integral_set = sint_set | uint_set | bool_set | char_set;
 2390|     10|  struct {
 2391|     10|    const Char*& begin;
 2392|     10|    dynamic_format_specs<Char>& specs;
 2393|     10|    type arg_type;
 2394|       |
 2395|     10|    FMT_CONSTEXPR auto operator()(pres pres_type, int set) -> const Char* {
 2396|     10|      if (!in(arg_type, set)) {
 2397|     10|        if (arg_type == type::none_type) return begin;
 2398|     10|        report_error("invalid format specifier");
 2399|     10|      }
 2400|     10|      specs.type = pres_type;
 2401|     10|      return begin + 1;
 2402|     10|    }
 2403|     10|  } parse_presentation_type{begin, specs, arg_type};
 2404|       |
 2405|     10|  for (;;) {
 2406|     10|    switch (c) {
 2407|      0|    case '<':
  ------------------
  |  Branch (2407:5): [True: 0, False: 10]
  ------------------
 2408|      0|    case '>':
  ------------------
  |  Branch (2408:5): [True: 0, False: 10]
  ------------------
 2409|      0|    case '^':
  ------------------
  |  Branch (2409:5): [True: 0, False: 10]
  ------------------
 2410|      0|      enter_state(state::align);
 2411|      0|      specs.align = parse_align(c);
 2412|      0|      ++begin;
 2413|      0|      break;
 2414|      0|    case '+':
  ------------------
  |  Branch (2414:5): [True: 0, False: 10]
  ------------------
 2415|      0|    case '-':
  ------------------
  |  Branch (2415:5): [True: 0, False: 10]
  ------------------
 2416|      0|    case ' ':
  ------------------
  |  Branch (2416:5): [True: 0, False: 10]
  ------------------
 2417|      0|      if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2417:11): [True: 0, False: 0]
  ------------------
 2418|      0|      enter_state(state::sign, in(arg_type, sint_set | float_set));
 2419|      0|      switch (c) {
  ------------------
  |  Branch (2419:15): [True: 0, False: 0]
  ------------------
 2420|      0|      case '+':
  ------------------
  |  Branch (2420:7): [True: 0, False: 0]
  ------------------
 2421|      0|        specs.sign = sign::plus;
 2422|      0|        break;
 2423|      0|      case '-':
  ------------------
  |  Branch (2423:7): [True: 0, False: 0]
  ------------------
 2424|      0|        specs.sign = sign::minus;
 2425|      0|        break;
 2426|      0|      case ' ':
  ------------------
  |  Branch (2426:7): [True: 0, False: 0]
  ------------------
 2427|      0|        specs.sign = sign::space;
 2428|      0|        break;
 2429|      0|      }
 2430|      0|      ++begin;
 2431|      0|      break;
 2432|      0|    case '#':
  ------------------
  |  Branch (2432:5): [True: 0, False: 10]
  ------------------
 2433|      0|      if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2433:11): [True: 0, False: 0]
  ------------------
 2434|      0|      enter_state(state::hash, is_arithmetic_type(arg_type));
 2435|      0|      specs.alt = true;
 2436|      0|      ++begin;
 2437|      0|      break;
 2438|      0|    case '0':
  ------------------
  |  Branch (2438:5): [True: 0, False: 10]
  ------------------
 2439|      0|      enter_state(state::zero);
 2440|      0|      if (!is_arithmetic_type(arg_type)) {
  ------------------
  |  Branch (2440:11): [True: 0, False: 0]
  ------------------
 2441|      0|        if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2441:13): [True: 0, False: 0]
  ------------------
 2442|      0|        report_error("format specifier requires numeric argument");
 2443|      0|      }
 2444|      0|      if (specs.align == align::none) {
  ------------------
  |  Branch (2444:11): [True: 0, False: 0]
  ------------------
 2445|       |        // Ignore 0 if align is specified for compatibility with std::format.
 2446|      0|        specs.align = align::numeric;
 2447|      0|        specs.fill = '0';
 2448|      0|      }
 2449|      0|      ++begin;
 2450|      0|      break;
 2451|      0|    case '1':
  ------------------
  |  Branch (2451:5): [True: 0, False: 10]
  ------------------
 2452|      0|    case '2':
  ------------------
  |  Branch (2452:5): [True: 0, False: 10]
  ------------------
 2453|      0|    case '3':
  ------------------
  |  Branch (2453:5): [True: 0, False: 10]
  ------------------
 2454|      0|    case '4':
  ------------------
  |  Branch (2454:5): [True: 0, False: 10]
  ------------------
 2455|      0|    case '5':
  ------------------
  |  Branch (2455:5): [True: 0, False: 10]
  ------------------
 2456|      0|    case '6':
  ------------------
  |  Branch (2456:5): [True: 0, False: 10]
  ------------------
 2457|      0|    case '7':
  ------------------
  |  Branch (2457:5): [True: 0, False: 10]
  ------------------
 2458|      0|    case '8':
  ------------------
  |  Branch (2458:5): [True: 0, False: 10]
  ------------------
 2459|      0|    case '9':
  ------------------
  |  Branch (2459:5): [True: 0, False: 10]
  ------------------
 2460|      0|    case '{':
  ------------------
  |  Branch (2460:5): [True: 0, False: 10]
  ------------------
 2461|      0|      enter_state(state::width);
 2462|      0|      begin = parse_dynamic_spec(begin, end, specs.width, specs.width_ref, ctx);
 2463|      0|      break;
 2464|      0|    case '.':
  ------------------
  |  Branch (2464:5): [True: 0, False: 10]
  ------------------
 2465|      0|      if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2465:11): [True: 0, False: 0]
  ------------------
 2466|      0|      enter_state(state::precision,
 2467|      0|                  in(arg_type, float_set | string_set | cstring_set));
 2468|      0|      begin = parse_precision(begin, end, specs.precision, specs.precision_ref,
 2469|      0|                              ctx);
 2470|      0|      break;
 2471|      0|    case 'L':
  ------------------
  |  Branch (2471:5): [True: 0, False: 10]
  ------------------
 2472|      0|      if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2472:11): [True: 0, False: 0]
  ------------------
 2473|      0|      enter_state(state::locale, is_arithmetic_type(arg_type));
 2474|      0|      specs.localized = true;
 2475|      0|      ++begin;
 2476|      0|      break;
 2477|      6|    case 'd':
  ------------------
  |  Branch (2477:5): [True: 6, False: 4]
  ------------------
 2478|      6|      return parse_presentation_type(pres::dec, integral_set);
 2479|      0|    case 'X':
  ------------------
  |  Branch (2479:5): [True: 0, False: 10]
  ------------------
 2480|      0|      specs.upper = true;
 2481|      0|      FMT_FALLTHROUGH;
  ------------------
  |  |  183|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2482|      0|    case 'x':
  ------------------
  |  Branch (2482:5): [True: 0, False: 10]
  ------------------
 2483|      0|      return parse_presentation_type(pres::hex, integral_set);
 2484|      0|    case 'o':
  ------------------
  |  Branch (2484:5): [True: 0, False: 10]
  ------------------
 2485|      0|      return parse_presentation_type(pres::oct, integral_set);
 2486|      0|    case 'B':
  ------------------
  |  Branch (2486:5): [True: 0, False: 10]
  ------------------
 2487|      0|      specs.upper = true;
 2488|      0|      FMT_FALLTHROUGH;
  ------------------
  |  |  183|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2489|      0|    case 'b':
  ------------------
  |  Branch (2489:5): [True: 0, False: 10]
  ------------------
 2490|      0|      return parse_presentation_type(pres::bin, integral_set);
 2491|      0|    case 'E':
  ------------------
  |  Branch (2491:5): [True: 0, False: 10]
  ------------------
 2492|      0|      specs.upper = true;
 2493|      0|      FMT_FALLTHROUGH;
  ------------------
  |  |  183|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2494|      0|    case 'e':
  ------------------
  |  Branch (2494:5): [True: 0, False: 10]
  ------------------
 2495|      0|      return parse_presentation_type(pres::exp, float_set);
 2496|      0|    case 'F':
  ------------------
  |  Branch (2496:5): [True: 0, False: 10]
  ------------------
 2497|      0|      specs.upper = true;
 2498|      0|      FMT_FALLTHROUGH;
  ------------------
  |  |  183|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2499|      0|    case 'f':
  ------------------
  |  Branch (2499:5): [True: 0, False: 10]
  ------------------
 2500|      0|      return parse_presentation_type(pres::fixed, float_set);
 2501|      0|    case 'G':
  ------------------
  |  Branch (2501:5): [True: 0, False: 10]
  ------------------
 2502|      0|      specs.upper = true;
 2503|      0|      FMT_FALLTHROUGH;
  ------------------
  |  |  183|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2504|      0|    case 'g':
  ------------------
  |  Branch (2504:5): [True: 0, False: 10]
  ------------------
 2505|      0|      return parse_presentation_type(pres::general, float_set);
 2506|      0|    case 'A':
  ------------------
  |  Branch (2506:5): [True: 0, False: 10]
  ------------------
 2507|      0|      specs.upper = true;
 2508|      0|      FMT_FALLTHROUGH;
  ------------------
  |  |  183|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2509|      0|    case 'a':
  ------------------
  |  Branch (2509:5): [True: 0, False: 10]
  ------------------
 2510|      0|      return parse_presentation_type(pres::hexfloat, float_set);
 2511|      0|    case 'c':
  ------------------
  |  Branch (2511:5): [True: 0, False: 10]
  ------------------
 2512|      0|      if (arg_type == type::bool_type) report_error("invalid format specifier");
  ------------------
  |  Branch (2512:11): [True: 0, False: 0]
  ------------------
 2513|      0|      return parse_presentation_type(pres::chr, integral_set);
 2514|      4|    case 's':
  ------------------
  |  Branch (2514:5): [True: 4, False: 6]
  ------------------
 2515|      4|      return parse_presentation_type(pres::string,
 2516|      4|                                     bool_set | string_set | cstring_set);
 2517|      0|    case 'p':
  ------------------
  |  Branch (2517:5): [True: 0, False: 10]
  ------------------
 2518|      0|      return parse_presentation_type(pres::pointer, pointer_set | cstring_set);
 2519|      0|    case '?':
  ------------------
  |  Branch (2519:5): [True: 0, False: 10]
  ------------------
 2520|      0|      return parse_presentation_type(pres::debug,
 2521|      0|                                     char_set | string_set | cstring_set);
 2522|      0|    case '}':
  ------------------
  |  Branch (2522:5): [True: 0, False: 10]
  ------------------
 2523|      0|      return begin;
 2524|      0|    default: {
  ------------------
  |  Branch (2524:5): [True: 0, False: 10]
  ------------------
 2525|      0|      if (*begin == '}') return begin;
  ------------------
  |  Branch (2525:11): [True: 0, False: 0]
  ------------------
 2526|       |      // Parse fill and alignment.
 2527|      0|      auto fill_end = begin + code_point_length(begin);
 2528|      0|      if (end - fill_end <= 0) {
  ------------------
  |  Branch (2528:11): [True: 0, False: 0]
  ------------------
 2529|      0|        report_error("invalid format specifier");
 2530|      0|        return begin;
 2531|      0|      }
 2532|      0|      if (*begin == '{') {
  ------------------
  |  Branch (2532:11): [True: 0, False: 0]
  ------------------
 2533|      0|        report_error("invalid fill character '{'");
 2534|      0|        return begin;
 2535|      0|      }
 2536|      0|      auto align = parse_align(to_ascii(*fill_end));
 2537|      0|      enter_state(state::align, align != align::none);
 2538|      0|      specs.fill =
 2539|      0|          basic_string_view<Char>(begin, to_unsigned(fill_end - begin));
 2540|      0|      specs.align = align;
 2541|      0|      begin = fill_end + 1;
 2542|      0|    }
 2543|     10|    }
 2544|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2544:9): [True: 0, False: 0]
  ------------------
 2545|      0|    c = to_ascii(*begin);
 2546|      0|  }
 2547|     10|}
_ZN3fmt3v116detail8to_asciiIcLi0EEEcT_:
 2198|     20|constexpr auto to_ascii(Char c) -> char {
 2199|     20|  return c <= 0xff ? static_cast<char>(c) : '\0';
  ------------------
  |  Branch (2199:10): [True: 20, False: 0]
  ------------------
 2200|     20|}
_ZN3fmt3v116detail11parse_alignEc:
 2252|     10|FMT_CONSTEXPR inline auto parse_align(char c) -> align_t {
 2253|     10|  switch (c) {
  ------------------
  |  Branch (2253:11): [True: 10, False: 0]
  ------------------
 2254|      0|  case '<':
  ------------------
  |  Branch (2254:3): [True: 0, False: 10]
  ------------------
 2255|      0|    return align::left;
 2256|      0|  case '>':
  ------------------
  |  Branch (2256:3): [True: 0, False: 10]
  ------------------
 2257|      0|    return align::right;
 2258|      0|  case '^':
  ------------------
  |  Branch (2258:3): [True: 0, False: 10]
  ------------------
 2259|      0|    return align::center;
 2260|     10|  }
 2261|     10|  return align::none;
 2262|     10|}
_ZN3fmt3v116detail2inENS1_4typeEi:
  702|     10|constexpr auto in(type t, int set) -> bool {
  703|     10|  return ((set >> static_cast<int>(t)) & 1) != 0;
  704|     10|}
_ZZN3fmt3v116detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeEENUt0_clENS0_17presentation_typeEi:
 2395|     10|    FMT_CONSTEXPR auto operator()(pres pres_type, int set) -> const Char* {
 2396|     10|      if (!in(arg_type, set)) {
  ------------------
  |  Branch (2396:11): [True: 0, False: 10]
  ------------------
 2397|      0|        if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2397:13): [True: 0, False: 0]
  ------------------
 2398|      0|        report_error("invalid format specifier");
 2399|      0|      }
 2400|     10|      specs.type = pres_type;
 2401|     10|      return begin + 1;
 2402|     10|    }
_ZNK3fmt3v1116basic_format_argINS0_7contextEE4typeEv:
 1751|     10|  auto type() const -> detail::type { return type_; }
_ZNK3fmt3v1116basic_format_argINS0_7contextEE5visitINS0_6detail13arg_formatterIcEEEEDTclfp_Li0EEEOT_:
 1764|     10|  FMT_CONSTEXPR auto visit(Visitor&& vis) const -> decltype(vis(0)) {
 1765|     10|    switch (type_) {
  ------------------
  |  Branch (1765:13): [True: 0, False: 10]
  ------------------
 1766|      0|    case detail::type::none_type:
  ------------------
  |  Branch (1766:5): [True: 0, False: 10]
  ------------------
 1767|      0|      break;
 1768|      0|    case detail::type::int_type:
  ------------------
  |  Branch (1768:5): [True: 0, False: 10]
  ------------------
 1769|      0|      return vis(value_.int_value);
 1770|      6|    case detail::type::uint_type:
  ------------------
  |  Branch (1770:5): [True: 6, False: 4]
  ------------------
 1771|      6|      return vis(value_.uint_value);
 1772|      0|    case detail::type::long_long_type:
  ------------------
  |  Branch (1772:5): [True: 0, False: 10]
  ------------------
 1773|      0|      return vis(value_.long_long_value);
 1774|      0|    case detail::type::ulong_long_type:
  ------------------
  |  Branch (1774:5): [True: 0, False: 10]
  ------------------
 1775|      0|      return vis(value_.ulong_long_value);
 1776|      0|    case detail::type::int128_type:
  ------------------
  |  Branch (1776:5): [True: 0, False: 10]
  ------------------
 1777|      0|      return vis(detail::convert_for_visit(value_.int128_value));
 1778|      0|    case detail::type::uint128_type:
  ------------------
  |  Branch (1778:5): [True: 0, False: 10]
  ------------------
 1779|      0|      return vis(detail::convert_for_visit(value_.uint128_value));
 1780|      0|    case detail::type::bool_type:
  ------------------
  |  Branch (1780:5): [True: 0, False: 10]
  ------------------
 1781|      0|      return vis(value_.bool_value);
 1782|      0|    case detail::type::char_type:
  ------------------
  |  Branch (1782:5): [True: 0, False: 10]
  ------------------
 1783|      0|      return vis(value_.char_value);
 1784|      0|    case detail::type::float_type:
  ------------------
  |  Branch (1784:5): [True: 0, False: 10]
  ------------------
 1785|      0|      return vis(value_.float_value);
 1786|      0|    case detail::type::double_type:
  ------------------
  |  Branch (1786:5): [True: 0, False: 10]
  ------------------
 1787|      0|      return vis(value_.double_value);
 1788|      0|    case detail::type::long_double_type:
  ------------------
  |  Branch (1788:5): [True: 0, False: 10]
  ------------------
 1789|      0|      return vis(value_.long_double_value);
 1790|      4|    case detail::type::cstring_type:
  ------------------
  |  Branch (1790:5): [True: 4, False: 6]
  ------------------
 1791|      4|      return vis(value_.string.data);
 1792|      0|    case detail::type::string_type:
  ------------------
  |  Branch (1792:5): [True: 0, False: 10]
  ------------------
 1793|      0|      using sv = basic_string_view<typename Context::char_type>;
 1794|      0|      return vis(sv(value_.string.data, value_.string.size));
 1795|      0|    case detail::type::pointer_type:
  ------------------
  |  Branch (1795:5): [True: 0, False: 10]
  ------------------
 1796|      0|      return vis(value_.pointer);
 1797|      0|    case detail::type::custom_type:
  ------------------
  |  Branch (1797:5): [True: 0, False: 10]
  ------------------
 1798|      0|      return vis(typename basic_format_arg<Context>::handle(value_.custom));
 1799|     10|    }
 1800|      0|    return vis(monostate());
 1801|     10|  }
_ZN3fmt3v116detail10arg_mapperINS0_7contextEE3mapEj:
 1430|      6|  FMT_MAP_API auto map(unsigned val) -> unsigned { return val; }
_ZN3fmt3v116detail5valueINS0_7contextEEC2Ej:
 1339|      6|  constexpr FMT_ALWAYS_INLINE value(unsigned val) : uint_value(val) {}
_ZN3fmt3v116detail4findILb0EcPKcEEbT1_S5_T0_RS5_:
 2221|     24|                              const char*& out) -> bool {
 2222|     24|  out =
 2223|     24|      static_cast<const char*>(memchr(first, value, to_unsigned(last - first)));
 2224|     24|  return out != nullptr;
 2225|     24|}
_ZZN3fmt3v116detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_EN6writerclEPKcSL_:
 2610|     12|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2611|     12|      if (from == to) return;
  ------------------
  |  Branch (2611:11): [True: 0, False: 12]
  ------------------
 2612|     12|      for (;;) {
 2613|     12|        const Char* p = nullptr;
 2614|     12|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
  ------------------
  |  Branch (2614:13): [True: 12, False: 0]
  ------------------
 2615|     12|          return handler_.on_text(from, to);
 2616|      0|        ++p;
 2617|      0|        if (p == to || *p != '}')
  ------------------
  |  Branch (2617:13): [True: 0, False: 0]
  |  Branch (2617:24): [True: 0, False: 0]
  ------------------
 2618|      0|          return handler_.on_error("unmatched '}' in format string");
 2619|      0|        handler_.on_text(from, p);
 2620|      0|        from = p + 1;
 2621|      0|      }
 2622|     12|    }
_ZN3fmt3v116detail10arg_mapperINS0_7contextEE3mapEPKc:
 1463|      4|  FMT_MAP_API auto map(const char_type* val) -> const char_type* { return val; }
_ZN3fmt3v116detail5valueINS0_7contextEEC2EPKc:
 1350|      4|  FMT_CONSTEXPR FMT_ALWAYS_INLINE value(const char_type* val) {
 1351|      4|    string.data = val;
 1352|      4|    if (is_constant_evaluated()) string.size = {};
  ------------------
  |  Branch (1352:9): [Folded - Ignored]
  ------------------
 1353|      4|  }

_ZN3fmt3v116detail5printEP8_IO_FILENS0_17basic_string_viewIcEE:
 1676|      2|FMT_FUNC void print(std::FILE* f, string_view text) {
 1677|       |#if defined(_WIN32) && !defined(FMT_USE_WRITE_CONSOLE)
 1678|       |  int fd = _fileno(f);
 1679|       |  if (_isatty(fd)) {
 1680|       |    std::fflush(f);
 1681|       |    if (write_console(fd, text)) return;
 1682|       |  }
 1683|       |#endif
 1684|      2|  fwrite_fully(text.data(), text.size(), f);
 1685|      2|}
_ZN3fmt3v1115vprint_bufferedEP8_IO_FILENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_7contextEEE:
 1688|      2|FMT_FUNC void vprint_buffered(std::FILE* f, string_view fmt, format_args args) {
 1689|      2|  auto buffer = memory_buffer();
 1690|      2|  detail::vformat_to(buffer, fmt, args);
 1691|      2|  detail::print(f, {buffer.data(), buffer.size()});
 1692|      2|}
_ZN3fmt3v116vprintEP8_IO_FILENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_7contextEEE:
 1694|      2|FMT_FUNC void vprint(std::FILE* f, string_view fmt, format_args args) {
 1695|      2|  if (!detail::file_ref(f).is_buffered()) return vprint_buffered(f, fmt, args);
  ------------------
  |  Branch (1695:7): [True: 2, False: 0]
  ------------------
 1696|      0|  auto&& buffer = detail::file_print_buffer(f);
 1697|      0|  return detail::vformat_to(buffer, fmt, args);
 1698|      2|}
_ZN3fmt3v116vprintENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_7contextEEE:
 1707|      2|FMT_FUNC void vprint(string_view fmt, format_args args) {
 1708|      2|  vprint(stdout, fmt, args);
 1709|      2|}
_ZN3fmt3v116detail12fwrite_fullyEPKvmP8_IO_FILE:
   74|      2|inline void fwrite_fully(const void* ptr, size_t count, FILE* stream) {
   75|      2|  size_t written = std::fwrite(ptr, 1, count, stream);
   76|      2|  if (written < count)
  ------------------
  |  Branch (76:7): [True: 0, False: 2]
  ------------------
   77|      0|    FMT_THROW(system_error(errno, FMT_STRING("cannot write to file")));
  ------------------
  |  |  128|      0|      ::fmt::detail::assert_fail(__FILE__, __LINE__, (x).what())
  ------------------
   78|      2|}
_ZN3fmt3v116detail9file_baseI8_IO_FILEEC2EPS3_:
 1459|      2|  file_base(F* file) : file_(file) {}
_ZNK3fmt3v116detail13fallback_fileI8_IO_FILEE11is_bufferedEv:
 1579|      2|  auto is_buffered() const -> bool { return false; }

_ZN3fmt3v116detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refE:
 4213|      2|                typename vformat_args<Char>::type args, locale_ref loc) {
 4214|      2|  auto out = basic_appender<Char>(buf);
 4215|      2|  if (fmt.size() == 2 && equal2(fmt.data(), "{}")) {
  ------------------
  |  Branch (4215:7): [True: 0, False: 2]
  |  Branch (4215:26): [True: 0, False: 0]
  ------------------
 4216|      0|    auto arg = args.get(0);
 4217|      0|    if (!arg) report_error("argument not found");
  ------------------
  |  Branch (4217:9): [True: 0, False: 0]
  ------------------
 4218|      0|    arg.visit(default_arg_formatter<Char>{out, args, loc});
 4219|      0|    return;
 4220|      0|  }
 4221|       |
 4222|      2|  struct format_handler {
 4223|      2|    basic_format_parse_context<Char> parse_context;
 4224|      2|    buffered_context<Char> context;
 4225|       |
 4226|      2|    format_handler(basic_appender<Char> p_out, basic_string_view<Char> str,
 4227|      2|                   basic_format_args<buffered_context<Char>> p_args,
 4228|      2|                   locale_ref p_loc)
 4229|      2|        : parse_context(str), context(p_out, p_args, p_loc) {}
 4230|       |
 4231|      2|    void on_text(const Char* begin, const Char* end) {
 4232|      2|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4233|      2|      context.advance_to(write<Char>(context.out(), text));
 4234|      2|    }
 4235|       |
 4236|      2|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4237|      2|      return parse_context.next_arg_id();
 4238|      2|    }
 4239|      2|    FMT_CONSTEXPR auto on_arg_id(int id) -> int {
 4240|      2|      parse_context.check_arg_id(id);
 4241|      2|      return id;
 4242|      2|    }
 4243|      2|    FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {
 4244|      2|      parse_context.check_arg_id(id);
 4245|      2|      int arg_id = context.arg_id(id);
 4246|      2|      if (arg_id < 0) report_error("argument not found");
 4247|      2|      return arg_id;
 4248|      2|    }
 4249|       |
 4250|      2|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4251|      2|      auto arg = get_arg(context, id);
 4252|      2|      context.advance_to(arg.visit(default_arg_formatter<Char>{
 4253|      2|          context.out(), context.args(), context.locale()}));
 4254|      2|    }
 4255|       |
 4256|      2|    auto on_format_specs(int id, const Char* begin, const Char* end)
 4257|      2|        -> const Char* {
 4258|      2|      auto arg = get_arg(context, id);
 4259|       |      // Not using a visitor for custom types gives better codegen.
 4260|      2|      if (arg.format_custom(begin, parse_context, context))
 4261|      2|        return parse_context.begin();
 4262|      2|      auto specs = detail::dynamic_format_specs<Char>();
 4263|      2|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4264|      2|      detail::handle_dynamic_spec<detail::width_checker>(
 4265|      2|          specs.width, specs.width_ref, context);
 4266|      2|      detail::handle_dynamic_spec<detail::precision_checker>(
 4267|      2|          specs.precision, specs.precision_ref, context);
 4268|      2|      if (begin == end || *begin != '}')
 4269|      2|        report_error("missing '}' in format string");
 4270|      2|      context.advance_to(arg.visit(
 4271|      2|          arg_formatter<Char>{context.out(), specs, context.locale()}));
 4272|      2|      return begin;
 4273|      2|    }
 4274|       |
 4275|      2|    FMT_NORETURN void on_error(const char* message) { report_error(message); }
 4276|      2|  };
 4277|      2|  detail::parse_format_string<false>(fmt, format_handler(out, fmt, args, loc));
 4278|      2|}
_ZN3fmt3v116detail12count_digitsEj:
 1218|     12|FMT_CONSTEXPR20 inline auto count_digits(uint32_t n) -> int {
 1219|     12|#ifdef FMT_BUILTIN_CLZ
 1220|     12|  if (!is_constant_evaluated()) {
  ------------------
  |  Branch (1220:7): [Folded - Ignored]
  ------------------
 1221|     12|    return do_count_digits(n);
 1222|     12|  }
 1223|      0|#endif
 1224|      0|  return count_digits_fallback(n);
 1225|     12|}
_ZN3fmt3v116detail15do_count_digitsEj:
 1195|     12|FMT_INLINE auto do_count_digits(uint32_t n) -> int {
 1196|       |// An optimization by Kendall Willets from https://bit.ly/3uOIQrB.
 1197|       |// This increments the upper 32 bits (log10(T) - 1) when >= T is added.
 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
 1199|     12|  static constexpr uint64_t table[] = {
 1200|     12|      FMT_INC(0),          FMT_INC(0),          FMT_INC(0),           // 8
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(0),          FMT_INC(0),          FMT_INC(0),           // 8
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(0),          FMT_INC(0),          FMT_INC(0),           // 8
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1201|     12|      FMT_INC(10),         FMT_INC(10),         FMT_INC(10),          // 64
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10),         FMT_INC(10),         FMT_INC(10),          // 64
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10),         FMT_INC(10),         FMT_INC(10),          // 64
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1202|     12|      FMT_INC(100),        FMT_INC(100),        FMT_INC(100),         // 512
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100),        FMT_INC(100),        FMT_INC(100),         // 512
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100),        FMT_INC(100),        FMT_INC(100),         // 512
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1203|     12|      FMT_INC(1000),       FMT_INC(1000),       FMT_INC(1000),        // 4096
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000),       FMT_INC(1000),       FMT_INC(1000),        // 4096
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000),       FMT_INC(1000),       FMT_INC(1000),        // 4096
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1204|     12|      FMT_INC(10000),      FMT_INC(10000),      FMT_INC(10000),       // 32k
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10000),      FMT_INC(10000),      FMT_INC(10000),       // 32k
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10000),      FMT_INC(10000),      FMT_INC(10000),       // 32k
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1205|     12|      FMT_INC(100000),     FMT_INC(100000),     FMT_INC(100000),      // 256k
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100000),     FMT_INC(100000),     FMT_INC(100000),      // 256k
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100000),     FMT_INC(100000),     FMT_INC(100000),      // 256k
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1206|     12|      FMT_INC(1000000),    FMT_INC(1000000),    FMT_INC(1000000),     // 2048k
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000000),    FMT_INC(1000000),    FMT_INC(1000000),     // 2048k
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000000),    FMT_INC(1000000),    FMT_INC(1000000),     // 2048k
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1207|     12|      FMT_INC(10000000),   FMT_INC(10000000),   FMT_INC(10000000),    // 16M
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10000000),   FMT_INC(10000000),   FMT_INC(10000000),    // 16M
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10000000),   FMT_INC(10000000),   FMT_INC(10000000),    // 16M
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1208|     12|      FMT_INC(100000000),  FMT_INC(100000000),  FMT_INC(100000000),   // 128M
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100000000),  FMT_INC(100000000),  FMT_INC(100000000),   // 128M
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100000000),  FMT_INC(100000000),  FMT_INC(100000000),   // 128M
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1209|     12|      FMT_INC(1000000000), FMT_INC(1000000000), FMT_INC(1000000000),  // 1024M
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000000000), FMT_INC(1000000000), FMT_INC(1000000000),  // 1024M
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000000000), FMT_INC(1000000000), FMT_INC(1000000000),  // 1024M
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1210|       |      FMT_INC(1000000000), FMT_INC(1000000000)                        // 4B
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000000000), FMT_INC(1000000000)                        // 4B
  ------------------
  |  | 1198|     12|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1211|     12|  };
 1212|     12|  auto inc = table[FMT_BUILTIN_CLZ(n | 1) ^ 31];
  ------------------
  |  |  166|     12|#    define FMT_BUILTIN_CLZ(n) __builtin_clz(n)
  ------------------
 1213|     12|  return static_cast<int>((n + inc) >> 32);
 1214|     12|}
_ZN3fmt3v1119basic_memory_bufferIcLm500ENSt3__19allocatorIcEEEC2ERKS4_:
  870|      2|      : detail::buffer<T>(grow), alloc_(alloc) {
  871|      2|    this->set(store_, SIZE);
  872|      2|    if (detail::is_constant_evaluated()) detail::fill_n(store_, SIZE, T());
  ------------------
  |  Branch (872:9): [Folded - Ignored]
  ------------------
  873|      2|  }
_ZN3fmt3v1119basic_memory_bufferIcLm500ENSt3__19allocatorIcEEED2Ev:
  874|      2|  FMT_CONSTEXPR20 ~basic_memory_buffer() { deallocate(); }
_ZN3fmt3v1119basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE10deallocateEv:
  835|      2|  FMT_CONSTEXPR20 void deallocate() {
  836|      2|    T* data = this->data();
  837|      2|    if (data != store_) alloc_.deallocate(data, this->capacity());
  ------------------
  |  Branch (837:9): [True: 0, False: 2]
  ------------------
  838|      2|  }
_ZN3fmt3v116detail5writeIcNS0_14basic_appenderIcEEEET0_S5_NS0_17basic_string_viewIT_EE:
 3631|     12|    -> OutputIt {
 3632|     12|  auto it = reserve(out, value.size());
 3633|     12|  it = copy_noinline<Char>(value.begin(), value.end(), it);
 3634|     12|  return base_iterator(out, it);
 3635|     12|}
_ZN3fmt3v116detail7reserveIcEENS0_14basic_appenderIT_EES5_m:
  527|     22|inline auto reserve(basic_appender<T> it, size_t n) -> basic_appender<T> {
  528|     22|  buffer<T>& buf = get_container(it);
  529|     22|  buf.try_reserve(buf.size() + n);
  530|     22|  return it;
  531|     22|}
_ZN3fmt3v116detail13copy_noinlineIcPKcNS0_14basic_appenderIcEEEET1_T0_S8_S7_:
  587|     12|                                              OutputIt out) -> OutputIt {
  588|     12|  return copy<OutChar>(begin, end, out);
  589|     12|}
_ZN3fmt3v116detail13base_iteratorINS0_14basic_appenderIcEEEET_S5_S5_:
  564|     22|constexpr auto base_iterator(Iterator, Iterator it) -> Iterator {
  565|     22|  return it;
  566|     22|}
_ZN3fmt3v116detail14format_decimalIcjEENS1_21format_decimal_resultIPT_EES5_T0_i:
 1288|      6|    -> format_decimal_result<Char*> {
 1289|      6|  FMT_ASSERT(size >= count_digits(value), "invalid digit count");
  ------------------
  |  |  402|      6|    fmt::detail::ignore_unused((condition), (message))
  ------------------
 1290|      6|  out += size;
 1291|      6|  Char* end = out;
 1292|      6|  while (value >= 100) {
  ------------------
  |  Branch (1292:10): [True: 0, False: 6]
  ------------------
 1293|       |    // Integer division is slow so do it for a group of two digits instead
 1294|       |    // of for every digit. The idea comes from the talk by Alexandrescu
 1295|       |    // "Three Optimization Tips for C++". See speed-test for a comparison.
 1296|      0|    out -= 2;
 1297|      0|    copy2(out, digits2(static_cast<size_t>(value % 100)));
 1298|      0|    value /= 100;
 1299|      0|  }
 1300|      6|  if (value < 10) {
  ------------------
  |  Branch (1300:7): [True: 6, False: 0]
  ------------------
 1301|      6|    *--out = static_cast<Char>('0' + value);
 1302|      6|    return {out, end};
 1303|      6|  }
 1304|      0|  out -= 2;
 1305|      0|  copy2(out, digits2(static_cast<size_t>(value)));
 1306|      0|  return {out, end};
 1307|      6|}
_ZN3fmt3v116detail14format_decimalIcjNS0_14basic_appenderIcEELi0EEENS1_21format_decimal_resultIT1_EES6_T0_i:
 1312|      6|    -> format_decimal_result<Iterator> {
 1313|       |  // Buffer is large enough to hold all digits (digits10 + 1).
 1314|      6|  Char buffer[digits10<UInt>() + 1] = {};
 1315|      6|  auto end = format_decimal(buffer, value, size).end;
 1316|      6|  return {out, detail::copy_noinline<Char>(buffer, end, out)};
 1317|      6|}
_ZN3fmt3v116detail13copy_noinlineIcPcNS0_14basic_appenderIcEEEET1_T0_S7_S6_:
  587|      6|                                              OutputIt out) -> OutputIt {
  588|      6|  return copy<OutChar>(begin, end, out);
  589|      6|}
_ZN3fmt3v116detail11is_negativeIjLi0EEEbT_:
 1080|      6|constexpr auto is_negative(T) -> bool {
 1081|      6|  return false;
 1082|      6|}
_ZN3fmt3v116detail18write_int_noinlineIcNS0_14basic_appenderIcEEjEET0_S5_NS1_13write_int_argIT1_EERKNS0_12format_specsENS1_10locale_refE:
 2202|      6|                                                   locale_ref loc) -> OutputIt {
 2203|      6|  return write_int<Char>(out, arg, specs, loc);
 2204|      6|}
_ZN3fmt3v116detail9write_intIcNS0_14basic_appenderIcEEjEET0_S5_NS1_13write_int_argIT1_EERKNS0_12format_specsENS1_10locale_refE:
 2149|      6|    -> OutputIt {
 2150|      6|  static_assert(std::is_same<T, uint32_or_64_or_128_t<T>>::value, "");
 2151|      6|  auto abs_value = arg.abs_value;
 2152|      6|  auto prefix = arg.prefix;
 2153|      6|  switch (specs.type) {
 2154|      0|  default:
  ------------------
  |  Branch (2154:3): [True: 0, False: 6]
  ------------------
 2155|      0|    FMT_ASSERT(false, "");
  ------------------
  |  |  402|      0|    fmt::detail::ignore_unused((condition), (message))
  ------------------
 2156|      0|    FMT_FALLTHROUGH;
  ------------------
  |  |  183|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2157|      0|  case presentation_type::none:
  ------------------
  |  Branch (2157:3): [True: 0, False: 6]
  ------------------
 2158|      6|  case presentation_type::dec: {
  ------------------
  |  Branch (2158:3): [True: 6, False: 0]
  ------------------
 2159|      6|    int num_digits = count_digits(abs_value);
 2160|      6|    return write_int<Char>(
 2161|      6|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2162|      6|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2163|      6|        });
 2164|      0|  }
 2165|      0|  case presentation_type::hex: {
  ------------------
  |  Branch (2165:3): [True: 0, False: 6]
  ------------------
 2166|      0|    if (specs.alt)
  ------------------
  |  Branch (2166:9): [True: 0, False: 0]
  ------------------
 2167|      0|      prefix_append(prefix, unsigned(specs.upper ? 'X' : 'x') << 8 | '0');
  ------------------
  |  Branch (2167:38): [True: 0, False: 0]
  ------------------
 2168|      0|    int num_digits = count_digits<4>(abs_value);
 2169|      0|    return write_int<Char>(
 2170|      0|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2171|      0|          return format_uint<4, Char>(it, abs_value, num_digits, specs.upper);
 2172|      0|        });
 2173|      0|  }
 2174|      0|  case presentation_type::oct: {
  ------------------
  |  Branch (2174:3): [True: 0, False: 6]
  ------------------
 2175|      0|    int num_digits = count_digits<3>(abs_value);
 2176|       |    // Octal prefix '0' is counted as a digit, so only add it if precision
 2177|       |    // is not greater than the number of digits.
 2178|      0|    if (specs.alt && specs.precision <= num_digits && abs_value != 0)
  ------------------
  |  Branch (2178:9): [True: 0, False: 0]
  |  Branch (2178:22): [True: 0, False: 0]
  |  Branch (2178:55): [True: 0, False: 0]
  ------------------
 2179|      0|      prefix_append(prefix, '0');
 2180|      0|    return write_int<Char>(
 2181|      0|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2182|      0|          return format_uint<3, Char>(it, abs_value, num_digits);
 2183|      0|        });
 2184|      0|  }
 2185|      0|  case presentation_type::bin: {
  ------------------
  |  Branch (2185:3): [True: 0, False: 6]
  ------------------
 2186|      0|    if (specs.alt)
  ------------------
  |  Branch (2186:9): [True: 0, False: 0]
  ------------------
 2187|      0|      prefix_append(prefix, unsigned(specs.upper ? 'B' : 'b') << 8 | '0');
  ------------------
  |  Branch (2187:38): [True: 0, False: 0]
  ------------------
 2188|      0|    int num_digits = count_digits<1>(abs_value);
 2189|      0|    return write_int<Char>(
 2190|      0|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2191|      0|          return format_uint<1, Char>(it, abs_value, num_digits);
 2192|      0|        });
 2193|      0|  }
 2194|      0|  case presentation_type::chr:
  ------------------
  |  Branch (2194:3): [True: 0, False: 6]
  ------------------
 2195|      0|    return write_char<Char>(out, static_cast<Char>(abs_value), specs);
 2196|      6|  }
 2197|      6|}
_ZN3fmt3v116detail9write_intIcNS0_14basic_appenderIcEEZNS1_9write_intIcS4_jEET0_S6_NS1_13write_int_argIT1_EERKNS0_12format_specsENS1_10locale_refEEUlS4_E_EES6_S6_ijSC_S8_:
 1955|      6|                                        W write_digits) -> OutputIt {
 1956|       |  // Slightly faster check for specs.width == 0 && specs.precision == -1.
 1957|      6|  if ((specs.width | (specs.precision + 1)) == 0) {
  ------------------
  |  Branch (1957:7): [True: 6, False: 0]
  ------------------
 1958|      6|    auto it = reserve(out, to_unsigned(num_digits) + (prefix >> 24));
 1959|      6|    if (prefix != 0) {
  ------------------
  |  Branch (1959:9): [True: 0, False: 6]
  ------------------
 1960|      0|      for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
  ------------------
  |  Branch (1960:44): [True: 0, False: 0]
  ------------------
 1961|      0|        *it++ = static_cast<Char>(p & 0xff);
 1962|      0|    }
 1963|      6|    return base_iterator(out, write_digits(it));
 1964|      6|  }
 1965|      0|  auto data = write_int_data<Char>(num_digits, prefix, specs);
 1966|      0|  return write_padded<Char, align::right>(
 1967|      0|      out, specs, data.size, [=](reserve_iterator<OutputIt> it) {
 1968|      0|        for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
 1969|      0|          *it++ = static_cast<Char>(p & 0xff);
 1970|      0|        it = detail::fill_n(it, data.padding, static_cast<Char>('0'));
 1971|      0|        return write_digits(it);
 1972|      0|      });
 1973|      6|}
_ZZN3fmt3v116detail9write_intIcNS0_14basic_appenderIcEEjEET0_S5_NS1_13write_int_argIT1_EERKNS0_12format_specsENS1_10locale_refEENKUlS4_E_clES4_:
 2161|      6|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2162|      6|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2163|      6|        });
_ZZN3fmt3v116detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler7on_textEPKcSF_:
 4231|     12|    void on_text(const Char* begin, const Char* end) {
 4232|     12|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4233|     12|      context.advance_to(write<Char>(context.out(), text));
 4234|     12|    }
_ZN3fmt3v116detail7get_argINS0_7contextEiEEDTcldtfp_3argfp0_EERT_T0_:
 3788|     10|FMT_CONSTEXPR auto get_arg(Context& ctx, ID id) -> decltype(ctx.arg(id)) {
 3789|     10|  auto arg = ctx.arg(id);
 3790|     10|  if (!arg) report_error("argument not found");
  ------------------
  |  Branch (3790:7): [True: 0, False: 10]
  ------------------
 3791|     10|  return arg;
 3792|     10|}
_ZZN3fmt3v116detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler9on_arg_idEv:
 4236|     10|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4237|     10|      return parse_context.next_arg_id();
 4238|     10|    }
_ZZN3fmt3v116detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler15on_format_specsEiPKcSF_:
 4257|     10|        -> const Char* {
 4258|     10|      auto arg = get_arg(context, id);
 4259|       |      // Not using a visitor for custom types gives better codegen.
 4260|     10|      if (arg.format_custom(begin, parse_context, context))
  ------------------
  |  Branch (4260:11): [True: 0, False: 10]
  ------------------
 4261|      0|        return parse_context.begin();
 4262|     10|      auto specs = detail::dynamic_format_specs<Char>();
 4263|     10|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4264|     10|      detail::handle_dynamic_spec<detail::width_checker>(
 4265|     10|          specs.width, specs.width_ref, context);
 4266|     10|      detail::handle_dynamic_spec<detail::precision_checker>(
 4267|     10|          specs.precision, specs.precision_ref, context);
 4268|     10|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (4268:11): [True: 0, False: 10]
  |  Branch (4268:27): [True: 0, False: 10]
  ------------------
 4269|      0|        report_error("missing '}' in format string");
 4270|     10|      context.advance_to(arg.visit(
 4271|     10|          arg_formatter<Char>{context.out(), specs, context.locale()}));
 4272|     10|      return begin;
 4273|     10|    }
_ZN3fmt3v116detail19handle_dynamic_specINS1_13width_checkerENS0_7contextEEEvRiNS1_7arg_refINT0_9char_typeEEERS7_:
 3797|     10|                                       Context& ctx) {
 3798|     10|  switch (ref.kind) {
  ------------------
  |  Branch (3798:11): [True: 0, False: 10]
  ------------------
 3799|     10|  case arg_id_kind::none:
  ------------------
  |  Branch (3799:3): [True: 10, False: 0]
  ------------------
 3800|     10|    break;
 3801|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3801:3): [True: 0, False: 10]
  ------------------
 3802|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index));
 3803|      0|    break;
 3804|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3804:3): [True: 0, False: 10]
  ------------------
 3805|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name));
 3806|      0|    break;
 3807|     10|  }
 3808|     10|}
_ZN3fmt3v116detail19handle_dynamic_specINS1_17precision_checkerENS0_7contextEEEvRiNS1_7arg_refINT0_9char_typeEEERS7_:
 3797|     10|                                       Context& ctx) {
 3798|     10|  switch (ref.kind) {
  ------------------
  |  Branch (3798:11): [True: 0, False: 10]
  ------------------
 3799|     10|  case arg_id_kind::none:
  ------------------
  |  Branch (3799:3): [True: 10, False: 0]
  ------------------
 3800|     10|    break;
 3801|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3801:3): [True: 0, False: 10]
  ------------------
 3802|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index));
 3803|      0|    break;
 3804|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3804:3): [True: 0, False: 10]
  ------------------
 3805|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name));
 3806|      0|    break;
 3807|     10|  }
 3808|     10|}
_ZN3fmt3v116detail13arg_formatterIcEclIjEENS0_14basic_appenderIcEET_:
 3742|      6|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3743|      6|    return detail::write<Char>(out, value, specs, locale);
 3744|      6|  }
_ZN3fmt3v116detail5writeIcjLi0EEENS0_14basic_appenderIT_EES5_T0_RKNS0_12format_specsENS1_10locale_refE:
 2211|      6|    -> basic_appender<Char> {
 2212|      6|  if (specs.localized && write_loc(out, value, specs, loc)) return out;
  ------------------
  |  Branch (2212:7): [True: 0, False: 6]
  |  Branch (2212:26): [True: 0, False: 0]
  ------------------
 2213|      6|  return write_int_noinline<Char>(out, make_write_int_arg(value, specs.sign),
 2214|      6|                                  specs, loc);
 2215|      6|}
_ZN3fmt3v116detail18make_write_int_argIjEENS1_13write_int_argINSt3__111conditionalIXaalecl8num_bitsIT_EELi32EntLi0EEjNS5_IXlecl8num_bitsIS6_EELi64EEmoE4typeEE4typeEEES6_NS0_4sign4typeE:
 2111|      6|    -> write_int_arg<uint32_or_64_or_128_t<T>> {
 2112|      6|  auto prefix = 0u;
 2113|      6|  auto abs_value = static_cast<uint32_or_64_or_128_t<T>>(value);
 2114|      6|  if (is_negative(value)) {
  ------------------
  |  Branch (2114:7): [True: 0, False: 6]
  ------------------
 2115|      0|    prefix = 0x01000000 | '-';
 2116|      0|    abs_value = 0 - abs_value;
 2117|      6|  } else {
 2118|      6|    constexpr const unsigned prefixes[4] = {0, 0, 0x1000000u | '+',
 2119|      6|                                            0x1000000u | ' '};
 2120|      6|    prefix = prefixes[sign];
 2121|      6|  }
 2122|      6|  return {abs_value, prefix};
 2123|      6|}
_ZN3fmt3v116detail13arg_formatterIcEclIPKcEENS0_14basic_appenderIcEET_:
 3742|      4|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3743|      4|    return detail::write<Char>(out, value, specs, locale);
 3744|      4|  }
_ZN3fmt3v116detail5writeIcNS0_14basic_appenderIcEEEET0_S5_PKT_RKNS0_12format_specsENS1_10locale_refE:
 2302|      4|                         locale_ref) -> OutputIt {
 2303|      4|  if (specs.type == presentation_type::pointer)
  ------------------
  |  Branch (2303:7): [True: 0, False: 4]
  ------------------
 2304|      0|    return write_ptr<Char>(out, bit_cast<uintptr_t>(s), &specs);
 2305|      4|  if (!s) report_error("string pointer is null");
  ------------------
  |  Branch (2305:7): [True: 0, False: 4]
  ------------------
 2306|      4|  return write<Char>(out, basic_string_view<Char>(s), specs, {});
 2307|      4|}
_ZN3fmt3v116detail5writeIcNS0_14basic_appenderIcEEEET0_S5_NS0_17basic_string_viewINS0_13type_identityIT_E4typeEEERKNS0_12format_specsENS1_10locale_refE:
 2297|      4|                         const format_specs& specs, locale_ref) -> OutputIt {
 2298|      4|  return write<Char>(out, s, specs);
 2299|      4|}
_ZN3fmt3v116detail5writeIcNS0_14basic_appenderIcEEEET0_S5_NS0_17basic_string_viewIT_EERKNS0_12format_specsE:
 2272|      4|                         const format_specs& specs) -> OutputIt {
 2273|      4|  auto data = s.data();
 2274|      4|  auto size = s.size();
 2275|      4|  if (specs.precision >= 0 && to_unsigned(specs.precision) < size)
  ------------------
  |  Branch (2275:7): [True: 0, False: 4]
  |  Branch (2275:31): [True: 0, False: 0]
  ------------------
 2276|      0|    size = code_point_index(s, to_unsigned(specs.precision));
 2277|      4|  bool is_debug = specs.type == presentation_type::debug;
 2278|      4|  size_t width = 0;
 2279|       |
 2280|      4|  if (is_debug) size = write_escaped_string(counting_iterator{}, s).count();
  ------------------
  |  Branch (2280:7): [True: 0, False: 4]
  ------------------
 2281|       |
 2282|      4|  if (specs.width != 0) {
  ------------------
  |  Branch (2282:7): [True: 0, False: 4]
  ------------------
 2283|      0|    if (is_debug)
  ------------------
  |  Branch (2283:9): [True: 0, False: 0]
  ------------------
 2284|      0|      width = size;
 2285|      0|    else
 2286|      0|      width = compute_width(basic_string_view<Char>(data, size));
 2287|      0|  }
 2288|      4|  return write_padded<Char>(out, specs, size, width,
 2289|      4|                            [=](reserve_iterator<OutputIt> it) {
 2290|      4|                              if (is_debug) return write_escaped_string(it, s);
 2291|      4|                              return copy<Char>(data, data + size, it);
 2292|      4|                            });
 2293|      4|}
_ZN3fmt3v116detail12write_paddedIcLNS0_5align4typeE1ENS0_14basic_appenderIcEEZNS1_5writeIcS6_EET0_S8_NS0_17basic_string_viewIT_EERKNS0_12format_specsEEUlS6_E_EET1_SG_SE_mmOT2_:
 1710|      4|                                size_t size, size_t width, F&& f) -> OutputIt {
 1711|      4|  static_assert(align == align::left || align == align::right, "");
 1712|      4|  unsigned spec_width = to_unsigned(specs.width);
 1713|      4|  size_t padding = spec_width > width ? spec_width - width : 0;
  ------------------
  |  Branch (1713:20): [True: 0, False: 4]
  ------------------
 1714|       |  // Shifts are encoded as string literals because static constexpr is not
 1715|       |  // supported in constexpr functions.
 1716|      4|  auto* shifts = align == align::left ? "\x1f\x1f\x00\x01" : "\x00\x1f\x00\x01";
  ------------------
  |  Branch (1716:18): [Folded - Ignored]
  ------------------
 1717|      4|  size_t left_padding = padding >> shifts[specs.align];
 1718|      4|  size_t right_padding = padding - left_padding;
 1719|      4|  auto it = reserve(out, size + padding * specs.fill.size());
 1720|      4|  if (left_padding != 0) it = fill<Char>(it, left_padding, specs.fill);
  ------------------
  |  Branch (1720:7): [True: 0, False: 4]
  ------------------
 1721|      4|  it = f(it);
 1722|      4|  if (right_padding != 0) it = fill<Char>(it, right_padding, specs.fill);
  ------------------
  |  Branch (1722:7): [True: 0, False: 4]
  ------------------
 1723|      4|  return base_iterator(out, it);
 1724|      4|}
_ZZN3fmt3v116detail5writeIcNS0_14basic_appenderIcEEEET0_S5_NS0_17basic_string_viewIT_EERKNS0_12format_specsEENKUlS4_E_clES4_:
 2289|      4|                            [=](reserve_iterator<OutputIt> it) {
 2290|      4|                              if (is_debug) return write_escaped_string(it, s);
  ------------------
  |  Branch (2290:35): [True: 0, False: 4]
  ------------------
 2291|      4|                              return copy<Char>(data, data + size, it);
 2292|      4|                            });
_ZZN3fmt3v116detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handlerC2ENS0_14basic_appenderIcEENS7_IcEENS0_17basic_format_argsINS0_7contextEEESC_:
 4229|      2|        : parse_context(str), context(p_out, p_args, p_loc) {}

_ZN6ImVec2C2Ev:
  283|     54|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

LLVMFuzzerTestOneInput:
   10|     55|{
   11|       |    // Only accept properly null terminated strings
   12|     55|    if (size < 1 || data[size - 1] != '\0')
  ------------------
  |  Branch (12:9): [True: 0, False: 55]
  |  Branch (12:21): [True: 1, False: 54]
  ------------------
   13|      1|    {
   14|      1|        return 1;
   15|      1|    }
   16|       |
   17|     54|    dlxemu::Emulator emulator;
   18|       |
   19|       |    // Build argv
   20|     54|    std::vector<char*> argv;
   21|     54|    argv.reserve(10);
   22|       |
   23|     54|    phi::size_t begin{0u};
   24|  9.37k|    for (phi::size_t index{0}; index < size; ++index)
  ------------------
  |  Branch (24:32): [True: 9.32k, False: 53]
  ------------------
   25|  9.32k|    {
   26|  9.32k|        char c = static_cast<char>(data[index]);
   27|       |
   28|  9.32k|        if (c == '\0')
  ------------------
  |  Branch (28:13): [True: 2.39k, False: 6.93k]
  ------------------
   29|  2.39k|        {
   30|       |            // Disallow empty strings
   31|  2.39k|            if (begin == index)
  ------------------
  |  Branch (31:17): [True: 1, False: 2.39k]
  ------------------
   32|      1|            {
   33|      1|                return 1;
   34|      1|            }
   35|       |
   36|       |            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-const-cast)
   37|  2.39k|            argv.push_back(const_cast<char*>(reinterpret_cast<const char*>(data + begin)));
   38|  2.39k|            begin = index + 1u;
   39|  2.39k|        }
   40|  9.32k|    }
   41|       |
   42|       |    // Can't eccept too large buffers
   43|     53|    if (argv.size() > std::numeric_limits<phi::int32_t>::max())
  ------------------
  |  Branch (43:9): [True: 0, False: 53]
  ------------------
   44|      0|    {
   45|      0|        return 1;
   46|      0|    }
   47|       |
   48|     53|    (void)emulator.HandleCommandLineArguments(static_cast<phi::int32_t>(argv.size()), argv.data());
   49|       |
   50|     53|    return 0;
   51|     53|}


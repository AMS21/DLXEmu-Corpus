_ZN6dlxemu6WindowC2Ev:
   13|    144|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  193|    720|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  241|    144|    {
  242|    144|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (242:13): [True: 0, False: 144]
  ------------------
  243|      0|        {
  244|      0|            return m_Line > other.m_Line;
  245|      0|        }
  246|       |
  247|    144|        return m_Column >= other.m_Column;
  248|    144|    }
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  283|    144|    {
  284|    144|        Colorize();
  285|    144|        m_Lines.emplace_back();
  286|    144|    }
_ZN6dlxemu10CodeEditorD2Ev:
  289|    144|    {
  290|    144|        VerifyInternalState();
  291|    144|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1483|    144|    {
 1484|       |        // Lines should never be empty
 1485|    144|        PHI_ASSERT(!m_Lines.empty());
 1486|       |
 1487|       |        // Verify Selection is still in a valid state
 1488|    144|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1489|    144|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1490|    144|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1491|    144|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1492|    144|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1493|       |
 1494|       |        // Verify cursor position
 1495|    144|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1496|    144|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1497|    144|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1498|       |
 1499|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1500|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1501|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1502|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1503|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1504|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1505|       |#endif
 1506|       |
 1507|       |        // Verify that all breakpoints are on existing lines
 1508|    144|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1508:35): [True: 0, False: 144]
  ------------------
 1509|      0|        {
 1510|      0|            PHI_ASSERT(break_point != 0u);
 1511|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1512|      0|        }
 1513|       |
 1514|       |        // Verify that all error markers are on existing lines
 1515|    144|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1515:34): [True: 0, False: 144]
  ------------------
 1516|      0|        {
 1517|      0|            const phi::u32 line_number = error_marker.first;
 1518|       |
 1519|      0|            PHI_ASSERT(line_number != 0u);
 1520|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1521|      0|        }
 1522|    144|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1525|    144|    {
 1526|    144|        constexpr const static Palette palette = {{
 1527|    144|                0xff7f7f7f, // Default
 1528|    144|                0xffd69c56, // OpCode
 1529|    144|                0xff00ff00, // Register
 1530|    144|                0xff7070e0, // IntegerLiteral
 1531|    144|                0xff206020, // Comment
 1532|    144|                0xff101010, // Background
 1533|    144|                0xffe0e0e0, // Cursor
 1534|    144|                0x80a06020, // Selection
 1535|    144|                0x800020ff, // ErrorMarker
 1536|    144|                0x40f08000, // Breakpoint
 1537|    144|                0xff707000, // Line number
 1538|    144|                0x40000000, // Current line fill
 1539|    144|                0x40808080, // Current line fill (inactive)
 1540|    144|                0x40a0a0a0, // Current line edge
 1541|    144|        }};
 1542|       |
 1543|    144|        return palette;
 1544|    144|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1709|    144|    {
 1710|       |        // TODO: This is quite unreadable
 1711|    144|        const phi::u32 to_line =
 1712|    144|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1712:17): [True: 144, False: 0]
  ------------------
 1713|    144|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1714|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1715|       |
 1716|    144|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1717|    144|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1718|    144|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1719|    144|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1720|    144|    }

_ZN6dlxemu8EmulatorC2Ev:
   46|    144|    {}
_ZN6dlxemu8Emulator26HandleCommandLineArgumentsEN3phi7integerIiEEPPc:
   55|    143|    {
   56|       |        // No args
   57|    143|        if (argc <= 1)
  ------------------
  |  Branch (57:13): [True: 8, False: 135]
  ------------------
   58|      8|        {
   59|      8|            return ShouldContinueInitialization::Yes;
   60|      8|        }
   61|       |
   62|  2.22k|        for (phi::i32 arg_num{1}; arg_num < argc; ++arg_num)
  ------------------
  |  Branch (62:35): [True: 2.19k, False: 31]
  ------------------
   63|  2.19k|        {
   64|  2.19k|            std::string arg_value = argv[arg_num.unsafe()];
   65|       |
   66|       |            // Convert all characters to lower case
   67|  2.19k|            phi::for_each(arg_value.begin(), arg_value.end(), phi::to_lower_case);
   68|       |            //std::transform(arg_value.begin(), arg_value.end(), arg_value.begin(), ::tolower);
   69|       |
   70|  2.19k|            PHI_ASSERT(!arg_value.empty());
   71|       |
   72|  2.19k|            if (arg_value.front() == '-')
  ------------------
  |  Branch (72:17): [True: 104, False: 2.08k]
  ------------------
   73|    104|            {
   74|       |                // Display help
   75|    104|                if (arg_value == "-h" || arg_value == "-help" || arg_value == "-?" ||
  ------------------
  |  Branch (75:21): [True: 1, False: 103]
  |  Branch (75:42): [True: 1, False: 102]
  |  Branch (75:66): [True: 1, False: 101]
  ------------------
   76|    104|                    arg_value == "--help")
  ------------------
  |  Branch (76:21): [True: 1, False: 100]
  ------------------
   77|      4|                {
   78|      4|                    DLX_INFO("Help");
  ------------------
  |  |    7|      4|#define DLX_INFO(...)     PHI_EMPTY_MACRO()
  ------------------
   79|      4|                    return ShouldContinueInitialization::No;
   80|      4|                }
   81|       |                // Display version
   82|    100|                if (arg_value == "-v" || arg_value == "--value")
  ------------------
  |  Branch (82:21): [True: 86, False: 14]
  |  Branch (82:42): [True: 7, False: 7]
  ------------------
   83|     93|                {
   84|     93|                    fmt::print("DLXEmu version {:d}.{:d}.{:d} {:s}-{:s}\n", VersionMajor,
   85|     93|                               VersionMinor, VersionPatch, GitBranch, GitShaFull);
   86|     93|                    return ShouldContinueInitialization::No;
   87|     93|                }
   88|       |
   89|       |                // Unknown option
   90|      7|                DLX_WARN("Unknown option '{:s}' ignored", arg_value);
  ------------------
  |  |    8|      7|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
   91|      7|                break;
   92|    100|            }
   93|       |
   94|  2.08k|            DLX_WARN("Ignore command line argument '{:s}'", arg_value);
  ------------------
  |  |    8|  2.08k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
   95|  2.08k|        }
   96|       |
   97|     38|        return ShouldContinueInitialization::Yes;
   98|    135|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|    144|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|    144|    {}

_ZN6dlxemu6WindowD2Ev:
   41|    144|    {
   42|    144|        Shutdown();
   43|    144|    }
_ZN6dlxemu6Window8ShutdownEv:
  113|    144|    {
  114|    144|        if (imgui_initialized)
  ------------------
  |  Branch (114:13): [True: 0, False: 144]
  ------------------
  115|      0|        {
  116|      0|            ShutdownImGui();
  117|      0|        }
  118|       |
  119|    144|        if (m_Window != nullptr)
  ------------------
  |  Branch (119:13): [True: 0, False: 144]
  ------------------
  120|      0|        {
  121|      0|            glfwDestroyWindow(m_Window);
  122|      0|        }
  123|       |
  124|    144|        if (glfw_initialized)
  ------------------
  |  Branch (124:13): [True: 0, False: 144]
  ------------------
  125|      0|        {
  126|      0|            glfwTerminate();
  127|      0|        }
  128|    144|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|   144k|            {}

_ZN3dlx11IntRegisterC2Ev:
   12|  4.60k|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   40|    144|    {
   41|    144|        m_IsReadOnly = read_only;
   42|    144|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   12|    144|    {
   13|    144|        m_Values.resize(starting_size.unsafe());
   14|    144|    }

_ZN3dlx9ProcessorC2Ev:
   62|    144|    {
   63|       |        // Mark R0 as ready only
   64|    144|        m_IntRegisters[0].SetReadOnly(true);
   65|    144|    }

_ZN3fmt3v106detail6bufferIcE6appendIcEEvPKT_S7_:
  907|  1.02k|  template <typename U> void append(const U* begin, const U* end) {
  908|  1.86k|    while (begin != end) {
  ------------------
  |  Branch (908:12): [True: 837, False: 1.02k]
  ------------------
  909|    837|      auto count = to_unsigned(end - begin);
  910|    837|      try_reserve(size_ + count);
  911|    837|      auto free_cap = capacity_ - size_;
  912|    837|      if (free_cap < count) count = free_cap;
  ------------------
  |  Branch (912:11): [True: 0, False: 837]
  ------------------
  913|    837|      if (std::is_same<T, U>::value) {
  ------------------
  |  Branch (913:11): [Folded - Ignored]
  ------------------
  914|    837|        memcpy(ptr_ + size_, begin, count * sizeof(T));
  915|    837|      } else {
  916|      0|        T* out = ptr_ + size_;
  917|      0|        for (size_t i = 0; i < count; ++i) out[i] = begin[i];
  ------------------
  |  Branch (917:28): [True: 0, False: 0]
  ------------------
  918|      0|      }
  919|    837|      size_ += count;
  920|    837|      begin += count;
  921|    837|    }
  922|  1.02k|  }
_ZN3fmt3v106detail11to_unsignedIiEENSt3__113make_unsignedIT_E4typeES5_:
  409|    465|FMT_CONSTEXPR auto to_unsigned(Int value) -> make_unsigned_t<Int> {
  410|    465|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  378|    930|      fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (378:35): [Folded - Ignored]
  |  |  |  Branch (378:35): [True: 465, False: 0]
  |  |  ------------------
  ------------------
  411|    465|  return static_cast<make_unsigned_t<Int>>(value);
  412|    465|}
_ZN3fmt3v106detail13ignore_unusedIJbA15_cEEEvDpRKT_:
  349|  3.06k|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZN3fmt3v1014basic_appenderIcEC2ERNS0_6detail6bufferIcEE:
 1153|     93|  FMT_CONSTEXPR basic_appender(detail::buffer<T>& buf) : buffer_(&buf) {}
_ZNK3fmt3v1017basic_string_viewIcE4sizeEv:
  520|    930|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v106detail13ignore_unusedIJbA1_cEEEvDpRKT_:
  349|    465|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v106detail6bufferIcE4sizeEv:
  874|  1.11k|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v106detail6bufferIcE3setEPcm:
  855|     93|  FMT_CONSTEXPR void set(T* buf_data, size_t buf_capacity) noexcept {
  856|     93|    ptr_ = buf_data;
  857|     93|    capacity_ = buf_capacity;
  858|     93|  }
_ZN3fmt3v1013get_containerENS0_14basic_appenderIcEE:
 1141|  2.04k|  friend auto get_container(basic_appender app) -> detail::buffer<T>& {
 1142|  2.04k|    return *app.buffer_;
 1143|  2.04k|  }
_ZN3fmt3v106detail4copyIcPKcEENS0_14basic_appenderIcEET0_S7_S6_:
 1184|    744|auto copy(InputIt begin, InputIt end, appender out) -> appender {
 1185|    744|  get_container(out).append(begin, end);
 1186|    744|  return out;
 1187|    744|}
_ZNK3fmt3v1017basic_string_viewIcE5beginEv:
  522|    558|  constexpr auto begin() const noexcept -> iterator { return data_; }
_ZNK3fmt3v1017basic_string_viewIcE3endEv:
  523|    558|  constexpr auto end() const noexcept -> iterator { return data_ + size_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKc:
  504|    186|                  : detail::length(s)) {}
_ZN3fmt3v106detail10locale_refC2Ev:
 1560|    279|  constexpr locale_ref() : locale_(nullptr) {}
_ZN3fmt3v106detail5valueINS0_7contextEEC2Ev:
 1327|    465|  constexpr FMT_ALWAYS_INLINE value() : no_value() {}
_ZN3fmt3v109monostateC2Ev:
  324|    465|  constexpr monostate() {}
_ZNK3fmt3v1017basic_string_viewIcE4dataEv:
  517|    279|  constexpr auto data() const noexcept -> const Char* { return data_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKcm:
  491|    558|      : data_(s), size_(count) {}
_ZN3fmt3v106detail6bufferIcEC2EPFvRS3_mEm:
  845|     93|      : size_(sz), capacity_(sz), grow_(grow) {}
_ZN3fmt3v106detail11to_unsignedIlEENSt3__113make_unsignedIT_E4typeES5_:
  409|  2.60k|FMT_CONSTEXPR auto to_unsigned(Int value) -> make_unsigned_t<Int> {
  410|  2.60k|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  378|  5.20k|      fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (378:35): [Folded - Ignored]
  |  |  |  Branch (378:35): [True: 2.60k, False: 0]
  |  |  ------------------
  ------------------
  411|  2.60k|  return static_cast<make_unsigned_t<Int>>(value);
  412|  2.60k|}
_ZN3fmt3v106detail6bufferIcE11try_reserveEm:
  897|  1.86k|  FMT_CONSTEXPR void try_reserve(size_t new_capacity) {
  898|  1.86k|    if (new_capacity > capacity_) grow_(*this, new_capacity);
  ------------------
  |  Branch (898:9): [True: 0, False: 1.86k]
  ------------------
  899|  1.86k|  }
_ZNK3fmt3v1017basic_format_argsINS0_7contextEE3getEi:
 1896|    465|  FMT_CONSTEXPR auto get(int id) const -> format_arg {
 1897|    465|    format_arg arg;
 1898|    465|    if (!is_packed()) {
  ------------------
  |  Branch (1898:9): [True: 0, False: 465]
  ------------------
 1899|      0|      if (id < max_size()) arg = args_[id];
  ------------------
  |  Branch (1899:11): [True: 0, False: 0]
  ------------------
 1900|      0|      return arg;
 1901|      0|    }
 1902|    465|    if (id >= detail::max_packed_args) return arg;
  ------------------
  |  Branch (1902:9): [True: 0, False: 465]
  ------------------
 1903|    465|    arg.type_ = type(id);
 1904|    465|    if (arg.type_ == detail::type::none_type) return arg;
  ------------------
  |  Branch (1904:9): [True: 0, False: 465]
  ------------------
 1905|    465|    arg.value_ = values_[id];
 1906|    465|    return arg;
 1907|    465|  }
_ZN3fmt3v1016basic_format_argINS0_7contextEEC2Ev:
 1735|    465|  constexpr basic_format_arg() : type_(detail::type::none_type) {}
_ZNK3fmt3v1017basic_format_argsINS0_7contextEE9is_packedEv:
 1842|    465|  constexpr auto is_packed() const -> bool {
 1843|    465|    return (desc_ & detail::is_unpacked_bit) == 0;
 1844|    465|  }
_ZNK3fmt3v1017basic_format_argsINS0_7contextEE4typeEi:
 1849|    465|  FMT_CONSTEXPR auto type(int index) const -> detail::type {
 1850|    465|    int shift = index * detail::packed_arg_bits;
 1851|    465|    unsigned int mask = (1 << detail::packed_arg_bits) - 1;
 1852|    465|    return static_cast<detail::type>((desc_ >> shift) & mask);
 1853|    465|  }
_ZNK3fmt3v1016basic_format_argINS0_7contextEEcvbEv:
 1737|    465|  constexpr explicit operator bool() const noexcept {
 1738|    465|    return type_ != detail::type::none_type;
 1739|    465|  }
_ZN3fmt3v106detail13ignore_unusedIJbA20_cEEEvDpRKT_:
  349|    279|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZN3fmt3v106detail4copyIcPcEENS0_14basic_appenderIcEET0_S6_S5_:
 1184|    279|auto copy(InputIt begin, InputIt end, appender out) -> appender {
 1185|    279|  get_container(out).append(begin, end);
 1186|    279|  return out;
 1187|    279|}
_ZNK3fmt3v106detail6fill_t4sizeEv:
 2103|    186|  constexpr auto size() const -> size_t { return size_; }
_ZN3fmt3v1012format_specsC2Ev:
 2165|    465|        localized(false) {}
_ZN3fmt3v1026basic_format_parse_contextIcEC2ENS0_17basic_string_viewIcEEi:
  734|     93|      : format_str_(format_str), next_arg_id_(next_arg_id) {}
_ZN3fmt3v107contextC2ENS0_14basic_appenderIcEENS0_17basic_format_argsIS1_EENS0_6detail10locale_refE:
 1955|     93|      : out_(out), args_(ctx_args), loc_(loc) {}
_ZN3fmt3v107context3outEv:
 1968|  1.02k|  FMT_CONSTEXPR auto out() -> iterator { return out_; }
_ZN3fmt3v106detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_:
 2597|     93|                                       Handler&& handler) {
 2598|     93|  auto begin = format_str.data();
 2599|     93|  auto end = begin + format_str.size();
 2600|     93|  if (end - begin < 32) {
  ------------------
  |  Branch (2600:7): [True: 0, False: 93]
  ------------------
 2601|       |    // Use a simple loop instead of memchr for small strings.
 2602|      0|    const Char* p = begin;
 2603|      0|    while (p != end) {
  ------------------
  |  Branch (2603:12): [True: 0, False: 0]
  ------------------
 2604|      0|      auto c = *p++;
 2605|      0|      if (c == '{') {
  ------------------
  |  Branch (2605:11): [True: 0, False: 0]
  ------------------
 2606|      0|        handler.on_text(begin, p - 1);
 2607|      0|        begin = p = parse_replacement_field(p - 1, end, handler);
 2608|      0|      } else if (c == '}') {
  ------------------
  |  Branch (2608:18): [True: 0, False: 0]
  ------------------
 2609|      0|        if (p == end || *p != '}')
  ------------------
  |  Branch (2609:13): [True: 0, False: 0]
  |  Branch (2609:25): [True: 0, False: 0]
  ------------------
 2610|      0|          return handler.on_error("unmatched '}' in format string");
 2611|      0|        handler.on_text(begin, p);
 2612|      0|        begin = ++p;
 2613|      0|      }
 2614|      0|    }
 2615|      0|    handler.on_text(begin, end);
 2616|      0|    return;
 2617|      0|  }
 2618|     93|  struct writer {
 2619|     93|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2620|     93|      if (from == to) return;
 2621|     93|      for (;;) {
 2622|     93|        const Char* p = nullptr;
 2623|     93|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
 2624|     93|          return handler_.on_text(from, to);
 2625|     93|        ++p;
 2626|     93|        if (p == to || *p != '}')
 2627|     93|          return handler_.on_error("unmatched '}' in format string");
 2628|     93|        handler_.on_text(from, p);
 2629|     93|        from = p + 1;
 2630|     93|      }
 2631|     93|    }
 2632|     93|    Handler& handler_;
 2633|     93|  } write = {handler};
 2634|    558|  while (begin != end) {
  ------------------
  |  Branch (2634:10): [True: 558, False: 0]
  ------------------
 2635|       |    // Doing two passes with memchr (one for '{' and another for '}') is up to
 2636|       |    // 2.5x faster than the naive one-pass implementation on big format strings.
 2637|    558|    const Char* p = begin;
 2638|    558|    if (*begin != '{' && !find<IS_CONSTEXPR>(begin + 1, end, Char('{'), p))
  ------------------
  |  Branch (2638:9): [True: 558, False: 0]
  |  Branch (2638:26): [True: 93, False: 465]
  ------------------
 2639|     93|      return write(begin, end);
 2640|    465|    write(begin, p);
 2641|    465|    begin = parse_replacement_field(p, end, handler);
 2642|    465|  }
 2643|     93|}
_ZN3fmt3v107context10advance_toENS0_14basic_appenderIcEE:
 1971|  1.02k|  void advance_to(iterator) {}
_ZN3fmt3v106detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_:
 2560|    465|                                           Handler&& handler) -> const Char* {
 2561|    465|  struct id_adapter {
 2562|    465|    Handler& handler;
 2563|    465|    int arg_id;
 2564|       |
 2565|    465|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
 2566|    465|    FMT_CONSTEXPR void on_index(int id) { arg_id = handler.on_arg_id(id); }
 2567|    465|    FMT_CONSTEXPR void on_name(basic_string_view<Char> id) {
 2568|    465|      arg_id = handler.on_arg_id(id);
 2569|    465|    }
 2570|    465|  };
 2571|       |
 2572|    465|  ++begin;
 2573|    465|  if (begin == end) return handler.on_error("invalid format string"), end;
  ------------------
  |  Branch (2573:7): [True: 0, False: 465]
  ------------------
 2574|    465|  if (*begin == '}') {
  ------------------
  |  Branch (2574:7): [True: 0, False: 465]
  ------------------
 2575|      0|    handler.on_replacement_field(handler.on_arg_id(), begin);
 2576|    465|  } else if (*begin == '{') {
  ------------------
  |  Branch (2576:14): [True: 0, False: 465]
  ------------------
 2577|      0|    handler.on_text(begin, begin + 1);
 2578|    465|  } else {
 2579|    465|    auto adapter = id_adapter{handler, 0};
 2580|    465|    begin = parse_arg_id(begin, end, adapter);
 2581|    465|    Char c = begin != end ? *begin : Char();
  ------------------
  |  Branch (2581:14): [True: 465, False: 0]
  ------------------
 2582|    465|    if (c == '}') {
  ------------------
  |  Branch (2582:9): [True: 0, False: 465]
  ------------------
 2583|      0|      handler.on_replacement_field(adapter.arg_id, begin);
 2584|    465|    } else if (c == ':') {
  ------------------
  |  Branch (2584:16): [True: 465, False: 0]
  ------------------
 2585|    465|      begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 2586|    465|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (2586:11): [True: 0, False: 465]
  |  Branch (2586:27): [True: 0, False: 465]
  ------------------
 2587|      0|        return handler.on_error("unknown format specifier"), end;
 2588|    465|    } else {
 2589|      0|      return handler.on_error("missing '}' in format string"), end;
 2590|      0|    }
 2591|    465|  }
 2592|    465|  return begin + 1;
 2593|    465|}
_ZNK3fmt3v107context3argEi:
 1960|    465|  FMT_CONSTEXPR auto arg(int id) const -> format_arg { return args_.get(id); }
_ZN3fmt3v107context6localeEv:
 1973|    465|  FMT_CONSTEXPR auto locale() -> detail::locale_ref { return loc_; }
_ZN3fmt3v1026basic_format_parse_contextIcE11next_arg_idEv:
  758|    465|  FMT_CONSTEXPR auto next_arg_id() -> int {
  759|    465|    if (next_arg_id_ < 0) {
  ------------------
  |  Branch (759:9): [True: 0, False: 465]
  ------------------
  760|      0|      report_error("cannot switch from manual to automatic argument indexing");
  761|      0|      return 0;
  762|      0|    }
  763|    465|    int id = next_arg_id_++;
  764|    465|    do_check_arg_id(id);
  765|    465|    return id;
  766|    465|  }
_ZN3fmt3v1026basic_format_parse_contextIcE15do_check_arg_idEi:
 1096|    465|FMT_CONSTEXPR void basic_format_parse_context<Char>::do_check_arg_id(int id) {
 1097|       |  // Argument id is only checked at compile-time during parsing because
 1098|       |  // formatting has its own validation.
 1099|    465|  if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (1099:7): [Folded - Ignored]
  ------------------
 1100|    465|      (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   35|      0|#  define FMT_GCC_VERSION 0
  ------------------
                    (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   35|      0|#  define FMT_GCC_VERSION 0
  ------------------
  |  Branch (1100:8): [Folded - Ignored]
  |  Branch (1100:28): [Folded - Ignored]
  ------------------
 1101|      0|    using context = detail::compile_parse_context<Char>;
 1102|      0|    if (id >= static_cast<context*>(this)->num_args())
  ------------------
  |  Branch (1102:9): [True: 0, False: 0]
  ------------------
 1103|      0|      report_error("argument not found");
 1104|      0|  }
 1105|    465|}
_ZN3fmt3v106detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS6_EENS1_12vformat_argsIS6_E4typeENS1_10locale_refEE14format_handlerEEPKS6_SI_SI_OT0_E10id_adapterEESI_SI_SI_SK_:
 2307|    465|                                Handler&& handler) -> const Char* {
 2308|    465|  FMT_ASSERT(begin != end, "");
  ------------------
  |  |  378|    465|      fmt::detail::ignore_unused((condition), (message))
  ------------------
 2309|    465|  Char c = *begin;
 2310|    465|  if (c != '}' && c != ':') return do_parse_arg_id(begin, end, handler);
  ------------------
  |  Branch (2310:7): [True: 465, False: 0]
  |  Branch (2310:19): [True: 0, False: 465]
  ------------------
 2311|    465|  handler.on_auto();
 2312|    465|  return begin;
 2313|    465|}
_ZZN3fmt3v106detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_EN10id_adapter7on_autoEv:
 2565|    465|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
_ZN3fmt3v1016basic_format_argINS0_7contextEE13format_customEPKcRNS0_26basic_format_parse_contextIcEERS2_:
 1797|    465|                     Context& ctx) -> bool {
 1798|    465|    if (type_ != detail::type::custom_type) return false;
  ------------------
  |  Branch (1798:9): [True: 465, False: 0]
  ------------------
 1799|      0|    parse_ctx.advance_to(parse_begin);
 1800|      0|    value_.custom.format(value_.custom.value, parse_ctx, ctx);
 1801|      0|    return true;
 1802|    465|  }
_ZN3fmt3v106detail7arg_refIcEC2Ev:
 2174|    930|  FMT_CONSTEXPR arg_ref() : kind(arg_id_kind::none), val() {}
_ZN3fmt3v106detail7arg_refIcE5valueC2Ei:
 2189|    930|    FMT_CONSTEXPR value(int idx = 0) : index(idx) {}
_ZN3fmt3v106detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeE:
 2378|    465|                                      type arg_type) -> const Char* {
 2379|    465|  auto c = '\0';
 2380|    465|  if (end - begin > 1) {
  ------------------
  |  Branch (2380:7): [True: 465, False: 0]
  ------------------
 2381|    465|    auto next = to_ascii(begin[1]);
 2382|    465|    c = parse_align(next) == align::none ? to_ascii(*begin) : '\0';
  ------------------
  |  Branch (2382:9): [True: 465, False: 0]
  ------------------
 2383|    465|  } else {
 2384|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2384:9): [True: 0, False: 0]
  ------------------
 2385|      0|    c = to_ascii(*begin);
 2386|      0|  }
 2387|       |
 2388|    465|  struct {
 2389|    465|    state current_state = state::start;
 2390|    465|    FMT_CONSTEXPR void operator()(state s, bool valid = true) {
 2391|    465|      if (current_state >= s || !valid)
 2392|    465|        report_error("invalid format specifier");
 2393|    465|      current_state = s;
 2394|    465|    }
 2395|    465|  } enter_state;
 2396|       |
 2397|    465|  using pres = presentation_type;
 2398|    465|  constexpr auto integral_set = sint_set | uint_set | bool_set | char_set;
 2399|    465|  struct {
 2400|    465|    const Char*& begin;
 2401|    465|    dynamic_format_specs<Char>& specs;
 2402|    465|    type arg_type;
 2403|       |
 2404|    465|    FMT_CONSTEXPR auto operator()(pres pres_type, int set) -> const Char* {
 2405|    465|      if (!in(arg_type, set)) {
 2406|    465|        if (arg_type == type::none_type) return begin;
 2407|    465|        report_error("invalid format specifier");
 2408|    465|      }
 2409|    465|      specs.type = pres_type;
 2410|    465|      return begin + 1;
 2411|    465|    }
 2412|    465|  } parse_presentation_type{begin, specs, arg_type};
 2413|       |
 2414|    465|  for (;;) {
 2415|    465|    switch (c) {
 2416|      0|    case '<':
  ------------------
  |  Branch (2416:5): [True: 0, False: 465]
  ------------------
 2417|      0|    case '>':
  ------------------
  |  Branch (2417:5): [True: 0, False: 465]
  ------------------
 2418|      0|    case '^':
  ------------------
  |  Branch (2418:5): [True: 0, False: 465]
  ------------------
 2419|      0|      enter_state(state::align);
 2420|      0|      specs.align = parse_align(c);
 2421|      0|      ++begin;
 2422|      0|      break;
 2423|      0|    case '+':
  ------------------
  |  Branch (2423:5): [True: 0, False: 465]
  ------------------
 2424|      0|    case '-':
  ------------------
  |  Branch (2424:5): [True: 0, False: 465]
  ------------------
 2425|      0|    case ' ':
  ------------------
  |  Branch (2425:5): [True: 0, False: 465]
  ------------------
 2426|      0|      if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2426:11): [True: 0, False: 0]
  ------------------
 2427|      0|      enter_state(state::sign, in(arg_type, sint_set | float_set));
 2428|      0|      switch (c) {
  ------------------
  |  Branch (2428:15): [True: 0, False: 0]
  ------------------
 2429|      0|      case '+':
  ------------------
  |  Branch (2429:7): [True: 0, False: 0]
  ------------------
 2430|      0|        specs.sign = sign::plus;
 2431|      0|        break;
 2432|      0|      case '-':
  ------------------
  |  Branch (2432:7): [True: 0, False: 0]
  ------------------
 2433|      0|        specs.sign = sign::minus;
 2434|      0|        break;
 2435|      0|      case ' ':
  ------------------
  |  Branch (2435:7): [True: 0, False: 0]
  ------------------
 2436|      0|        specs.sign = sign::space;
 2437|      0|        break;
 2438|      0|      }
 2439|      0|      ++begin;
 2440|      0|      break;
 2441|      0|    case '#':
  ------------------
  |  Branch (2441:5): [True: 0, False: 465]
  ------------------
 2442|      0|      if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2442:11): [True: 0, False: 0]
  ------------------
 2443|      0|      enter_state(state::hash, is_arithmetic_type(arg_type));
 2444|      0|      specs.alt = true;
 2445|      0|      ++begin;
 2446|      0|      break;
 2447|      0|    case '0':
  ------------------
  |  Branch (2447:5): [True: 0, False: 465]
  ------------------
 2448|      0|      enter_state(state::zero);
 2449|      0|      if (!is_arithmetic_type(arg_type)) {
  ------------------
  |  Branch (2449:11): [True: 0, False: 0]
  ------------------
 2450|      0|        if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2450:13): [True: 0, False: 0]
  ------------------
 2451|      0|        report_error("format specifier requires numeric argument");
 2452|      0|      }
 2453|      0|      if (specs.align == align::none) {
  ------------------
  |  Branch (2453:11): [True: 0, False: 0]
  ------------------
 2454|       |        // Ignore 0 if align is specified for compatibility with std::format.
 2455|      0|        specs.align = align::numeric;
 2456|      0|        specs.fill = '0';
 2457|      0|      }
 2458|      0|      ++begin;
 2459|      0|      break;
 2460|      0|    case '1':
  ------------------
  |  Branch (2460:5): [True: 0, False: 465]
  ------------------
 2461|      0|    case '2':
  ------------------
  |  Branch (2461:5): [True: 0, False: 465]
  ------------------
 2462|      0|    case '3':
  ------------------
  |  Branch (2462:5): [True: 0, False: 465]
  ------------------
 2463|      0|    case '4':
  ------------------
  |  Branch (2463:5): [True: 0, False: 465]
  ------------------
 2464|      0|    case '5':
  ------------------
  |  Branch (2464:5): [True: 0, False: 465]
  ------------------
 2465|      0|    case '6':
  ------------------
  |  Branch (2465:5): [True: 0, False: 465]
  ------------------
 2466|      0|    case '7':
  ------------------
  |  Branch (2466:5): [True: 0, False: 465]
  ------------------
 2467|      0|    case '8':
  ------------------
  |  Branch (2467:5): [True: 0, False: 465]
  ------------------
 2468|      0|    case '9':
  ------------------
  |  Branch (2468:5): [True: 0, False: 465]
  ------------------
 2469|      0|    case '{':
  ------------------
  |  Branch (2469:5): [True: 0, False: 465]
  ------------------
 2470|      0|      enter_state(state::width);
 2471|      0|      begin = parse_dynamic_spec(begin, end, specs.width, specs.width_ref, ctx);
 2472|      0|      break;
 2473|      0|    case '.':
  ------------------
  |  Branch (2473:5): [True: 0, False: 465]
  ------------------
 2474|      0|      if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2474:11): [True: 0, False: 0]
  ------------------
 2475|      0|      enter_state(state::precision,
 2476|      0|                  in(arg_type, float_set | string_set | cstring_set));
 2477|      0|      begin = parse_precision(begin, end, specs.precision, specs.precision_ref,
 2478|      0|                              ctx);
 2479|      0|      break;
 2480|      0|    case 'L':
  ------------------
  |  Branch (2480:5): [True: 0, False: 465]
  ------------------
 2481|      0|      if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2481:11): [True: 0, False: 0]
  ------------------
 2482|      0|      enter_state(state::locale, is_arithmetic_type(arg_type));
 2483|      0|      specs.localized = true;
 2484|      0|      ++begin;
 2485|      0|      break;
 2486|    279|    case 'd':
  ------------------
  |  Branch (2486:5): [True: 279, False: 186]
  ------------------
 2487|    279|      return parse_presentation_type(pres::dec, integral_set);
 2488|      0|    case 'X':
  ------------------
  |  Branch (2488:5): [True: 0, False: 465]
  ------------------
 2489|      0|      specs.upper = true;
 2490|      0|      FMT_FALLTHROUGH;
  ------------------
  |  |  171|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2491|      0|    case 'x':
  ------------------
  |  Branch (2491:5): [True: 0, False: 465]
  ------------------
 2492|      0|      return parse_presentation_type(pres::hex, integral_set);
 2493|      0|    case 'o':
  ------------------
  |  Branch (2493:5): [True: 0, False: 465]
  ------------------
 2494|      0|      return parse_presentation_type(pres::oct, integral_set);
 2495|      0|    case 'B':
  ------------------
  |  Branch (2495:5): [True: 0, False: 465]
  ------------------
 2496|      0|      specs.upper = true;
 2497|      0|      FMT_FALLTHROUGH;
  ------------------
  |  |  171|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2498|      0|    case 'b':
  ------------------
  |  Branch (2498:5): [True: 0, False: 465]
  ------------------
 2499|      0|      return parse_presentation_type(pres::bin, integral_set);
 2500|      0|    case 'E':
  ------------------
  |  Branch (2500:5): [True: 0, False: 465]
  ------------------
 2501|      0|      specs.upper = true;
 2502|      0|      FMT_FALLTHROUGH;
  ------------------
  |  |  171|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2503|      0|    case 'e':
  ------------------
  |  Branch (2503:5): [True: 0, False: 465]
  ------------------
 2504|      0|      return parse_presentation_type(pres::exp, float_set);
 2505|      0|    case 'F':
  ------------------
  |  Branch (2505:5): [True: 0, False: 465]
  ------------------
 2506|      0|      specs.upper = true;
 2507|      0|      FMT_FALLTHROUGH;
  ------------------
  |  |  171|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2508|      0|    case 'f':
  ------------------
  |  Branch (2508:5): [True: 0, False: 465]
  ------------------
 2509|      0|      return parse_presentation_type(pres::fixed, float_set);
 2510|      0|    case 'G':
  ------------------
  |  Branch (2510:5): [True: 0, False: 465]
  ------------------
 2511|      0|      specs.upper = true;
 2512|      0|      FMT_FALLTHROUGH;
  ------------------
  |  |  171|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2513|      0|    case 'g':
  ------------------
  |  Branch (2513:5): [True: 0, False: 465]
  ------------------
 2514|      0|      return parse_presentation_type(pres::general, float_set);
 2515|      0|    case 'A':
  ------------------
  |  Branch (2515:5): [True: 0, False: 465]
  ------------------
 2516|      0|      specs.upper = true;
 2517|      0|      FMT_FALLTHROUGH;
  ------------------
  |  |  171|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2518|      0|    case 'a':
  ------------------
  |  Branch (2518:5): [True: 0, False: 465]
  ------------------
 2519|      0|      return parse_presentation_type(pres::hexfloat, float_set);
 2520|      0|    case 'c':
  ------------------
  |  Branch (2520:5): [True: 0, False: 465]
  ------------------
 2521|      0|      if (arg_type == type::bool_type) report_error("invalid format specifier");
  ------------------
  |  Branch (2521:11): [True: 0, False: 0]
  ------------------
 2522|      0|      return parse_presentation_type(pres::chr, integral_set);
 2523|    186|    case 's':
  ------------------
  |  Branch (2523:5): [True: 186, False: 279]
  ------------------
 2524|    186|      return parse_presentation_type(pres::string,
 2525|    186|                                     bool_set | string_set | cstring_set);
 2526|      0|    case 'p':
  ------------------
  |  Branch (2526:5): [True: 0, False: 465]
  ------------------
 2527|      0|      return parse_presentation_type(pres::pointer, pointer_set | cstring_set);
 2528|      0|    case '?':
  ------------------
  |  Branch (2528:5): [True: 0, False: 465]
  ------------------
 2529|      0|      return parse_presentation_type(pres::debug,
 2530|      0|                                     char_set | string_set | cstring_set);
 2531|      0|    case '}':
  ------------------
  |  Branch (2531:5): [True: 0, False: 465]
  ------------------
 2532|      0|      return begin;
 2533|      0|    default: {
  ------------------
  |  Branch (2533:5): [True: 0, False: 465]
  ------------------
 2534|      0|      if (*begin == '}') return begin;
  ------------------
  |  Branch (2534:11): [True: 0, False: 0]
  ------------------
 2535|       |      // Parse fill and alignment.
 2536|      0|      auto fill_end = begin + code_point_length(begin);
 2537|      0|      if (end - fill_end <= 0) {
  ------------------
  |  Branch (2537:11): [True: 0, False: 0]
  ------------------
 2538|      0|        report_error("invalid format specifier");
 2539|      0|        return begin;
 2540|      0|      }
 2541|      0|      if (*begin == '{') {
  ------------------
  |  Branch (2541:11): [True: 0, False: 0]
  ------------------
 2542|      0|        report_error("invalid fill character '{'");
 2543|      0|        return begin;
 2544|      0|      }
 2545|      0|      auto align = parse_align(to_ascii(*fill_end));
 2546|      0|      enter_state(state::align, align != align::none);
 2547|      0|      specs.fill =
 2548|      0|          basic_string_view<Char>(begin, to_unsigned(fill_end - begin));
 2549|      0|      specs.align = align;
 2550|      0|      begin = fill_end + 1;
 2551|      0|    }
 2552|    465|    }
 2553|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2553:9): [True: 0, False: 0]
  ------------------
 2554|      0|    c = to_ascii(*begin);
 2555|      0|  }
 2556|    465|}
_ZN3fmt3v106detail8to_asciiIcLi0EEEcT_:
 2207|    930|constexpr auto to_ascii(Char c) -> char {
 2208|    930|  return c <= 0xff ? static_cast<char>(c) : '\0';
  ------------------
  |  Branch (2208:10): [True: 930, False: 0]
  ------------------
 2209|    930|}
_ZN3fmt3v106detail11parse_alignEc:
 2261|    465|FMT_CONSTEXPR inline auto parse_align(char c) -> align_t {
 2262|    465|  switch (c) {
  ------------------
  |  Branch (2262:11): [True: 465, False: 0]
  ------------------
 2263|      0|  case '<':
  ------------------
  |  Branch (2263:3): [True: 0, False: 465]
  ------------------
 2264|      0|    return align::left;
 2265|      0|  case '>':
  ------------------
  |  Branch (2265:3): [True: 0, False: 465]
  ------------------
 2266|      0|    return align::right;
 2267|      0|  case '^':
  ------------------
  |  Branch (2267:3): [True: 0, False: 465]
  ------------------
 2268|      0|    return align::center;
 2269|    465|  }
 2270|    465|  return align::none;
 2271|    465|}
_ZN3fmt3v106detail2inENS1_4typeEi:
  676|    465|constexpr auto in(type t, int set) -> bool {
  677|    465|  return ((set >> static_cast<int>(t)) & 1) != 0;
  678|    465|}
_ZZN3fmt3v106detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeEENUt0_clENS0_17presentation_typeEi:
 2404|    465|    FMT_CONSTEXPR auto operator()(pres pres_type, int set) -> const Char* {
 2405|    465|      if (!in(arg_type, set)) {
  ------------------
  |  Branch (2405:11): [True: 0, False: 465]
  ------------------
 2406|      0|        if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2406:13): [True: 0, False: 0]
  ------------------
 2407|      0|        report_error("invalid format specifier");
 2408|      0|      }
 2409|    465|      specs.type = pres_type;
 2410|    465|      return begin + 1;
 2411|    465|    }
_ZNK3fmt3v1016basic_format_argINS0_7contextEE4typeEv:
 1741|    465|  auto type() const -> detail::type { return type_; }
_ZN3fmt3v1016basic_format_argINS0_7contextEE5visitINS0_6detail13arg_formatterIcEEEEDTclfp_Li0EEEOT_:
 1756|    465|  FMT_CONSTEXPR auto visit(Visitor&& vis) -> decltype(vis(0)) {
 1757|    465|    switch (type_) {
  ------------------
  |  Branch (1757:13): [True: 0, False: 465]
  ------------------
 1758|      0|    case detail::type::none_type:
  ------------------
  |  Branch (1758:5): [True: 0, False: 465]
  ------------------
 1759|      0|      break;
 1760|      0|    case detail::type::int_type:
  ------------------
  |  Branch (1760:5): [True: 0, False: 465]
  ------------------
 1761|      0|      return vis(value_.int_value);
 1762|    279|    case detail::type::uint_type:
  ------------------
  |  Branch (1762:5): [True: 279, False: 186]
  ------------------
 1763|    279|      return vis(value_.uint_value);
 1764|      0|    case detail::type::long_long_type:
  ------------------
  |  Branch (1764:5): [True: 0, False: 465]
  ------------------
 1765|      0|      return vis(value_.long_long_value);
 1766|      0|    case detail::type::ulong_long_type:
  ------------------
  |  Branch (1766:5): [True: 0, False: 465]
  ------------------
 1767|      0|      return vis(value_.ulong_long_value);
 1768|      0|    case detail::type::int128_type:
  ------------------
  |  Branch (1768:5): [True: 0, False: 465]
  ------------------
 1769|      0|      return vis(detail::convert_for_visit(value_.int128_value));
 1770|      0|    case detail::type::uint128_type:
  ------------------
  |  Branch (1770:5): [True: 0, False: 465]
  ------------------
 1771|      0|      return vis(detail::convert_for_visit(value_.uint128_value));
 1772|      0|    case detail::type::bool_type:
  ------------------
  |  Branch (1772:5): [True: 0, False: 465]
  ------------------
 1773|      0|      return vis(value_.bool_value);
 1774|      0|    case detail::type::char_type:
  ------------------
  |  Branch (1774:5): [True: 0, False: 465]
  ------------------
 1775|      0|      return vis(value_.char_value);
 1776|      0|    case detail::type::float_type:
  ------------------
  |  Branch (1776:5): [True: 0, False: 465]
  ------------------
 1777|      0|      return vis(value_.float_value);
 1778|      0|    case detail::type::double_type:
  ------------------
  |  Branch (1778:5): [True: 0, False: 465]
  ------------------
 1779|      0|      return vis(value_.double_value);
 1780|      0|    case detail::type::long_double_type:
  ------------------
  |  Branch (1780:5): [True: 0, False: 465]
  ------------------
 1781|      0|      return vis(value_.long_double_value);
 1782|    186|    case detail::type::cstring_type:
  ------------------
  |  Branch (1782:5): [True: 186, False: 279]
  ------------------
 1783|    186|      return vis(value_.string.data);
 1784|      0|    case detail::type::string_type:
  ------------------
  |  Branch (1784:5): [True: 0, False: 465]
  ------------------
 1785|      0|      using sv = basic_string_view<typename Context::char_type>;
 1786|      0|      return vis(sv(value_.string.data, value_.string.size));
 1787|      0|    case detail::type::pointer_type:
  ------------------
  |  Branch (1787:5): [True: 0, False: 465]
  ------------------
 1788|      0|      return vis(value_.pointer);
 1789|      0|    case detail::type::custom_type:
  ------------------
  |  Branch (1789:5): [True: 0, False: 465]
  ------------------
 1790|      0|      return vis(typename basic_format_arg<Context>::handle(value_.custom));
 1791|    465|    }
 1792|      0|    return vis(monostate());
 1793|    465|  }
_ZN3fmt3v106detail10arg_mapperINS0_7contextEE3mapEj:
 1420|    279|  FMT_MAP_API auto map(unsigned val) -> unsigned { return val; }
_ZN3fmt3v106detail5valueINS0_7contextEEC2Ej:
 1329|    279|  constexpr FMT_ALWAYS_INLINE value(unsigned val) : uint_value(val) {}
_ZN3fmt3v106detail4findILb0EcPKcEEbT1_S5_T0_RS5_:
 2230|  1.11k|                              const char*& out) -> bool {
 2231|  1.11k|  out =
 2232|  1.11k|      static_cast<const char*>(memchr(first, value, to_unsigned(last - first)));
 2233|  1.11k|  return out != nullptr;
 2234|  1.11k|}
_ZZN3fmt3v106detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_EN6writerclEPKcSL_:
 2619|    558|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2620|    558|      if (from == to) return;
  ------------------
  |  Branch (2620:11): [True: 0, False: 558]
  ------------------
 2621|    558|      for (;;) {
 2622|    558|        const Char* p = nullptr;
 2623|    558|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
  ------------------
  |  Branch (2623:13): [True: 558, False: 0]
  ------------------
 2624|    558|          return handler_.on_text(from, to);
 2625|      0|        ++p;
 2626|      0|        if (p == to || *p != '}')
  ------------------
  |  Branch (2626:13): [True: 0, False: 0]
  |  Branch (2626:24): [True: 0, False: 0]
  ------------------
 2627|      0|          return handler_.on_error("unmatched '}' in format string");
 2628|      0|        handler_.on_text(from, p);
 2629|      0|        from = p + 1;
 2630|      0|      }
 2631|    558|    }
_ZN3fmt3v106detail10arg_mapperINS0_7contextEE3mapEPKc:
 1453|    186|  FMT_MAP_API auto map(const char_type* val) -> const char_type* { return val; }
_ZN3fmt3v106detail5valueINS0_7contextEEC2EPKc:
 1340|    186|  FMT_CONSTEXPR FMT_ALWAYS_INLINE value(const char_type* val) {
 1341|    186|    string.data = val;
 1342|    186|    if (is_constant_evaluated()) string.size = {};
  ------------------
  |  Branch (1342:9): [Folded - Ignored]
  ------------------
 1343|    186|  }

_ZN3fmt3v1013vprint_lockedEP8_IO_FILENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_7contextEEE:
 1687|     93|FMT_FUNC void vprint_locked(std::FILE* f, string_view fmt, format_args args) {
 1688|     93|  if (!detail::file_ref(f).is_buffered()) return vprint(f, fmt, args);
  ------------------
  |  Branch (1688:7): [True: 0, False: 93]
  ------------------
 1689|     93|  auto&& buffer = detail::file_print_buffer(f);
 1690|     93|  return detail::vformat_to(buffer, fmt, args);
 1691|     93|}
_ZN3fmt3v106detail9file_baseI8_IO_FILEEC2EPS3_:
 1459|    186|  file_base(F* file) : file_(file) {}
_ZN3fmt3v106detail17file_print_bufferC2EP8_IO_FILE:
 1630|     93|  explicit file_print_buffer(FILE* f) : buffer(grow, size_t()), file_(f) {
 1631|     93|    flockfile(f);
 1632|     93|    file_.init_buffer();
 1633|     93|    auto buf = file_.get_write_buffer();
 1634|     93|    set(buf.data, buf.size);
 1635|     93|  }
_ZN3fmt3v106detail10glibc_fileI8_IO_FILEE20advance_write_bufferEm:
 1513|     93|  void advance_write_buffer(size_t size) { this->file_->_IO_write_ptr += size; }
_ZN3fmt3v106detail10glibc_fileI8_IO_FILEE11init_bufferEv:
 1494|     93|  void init_buffer() {
 1495|     93|    if (this->file_->_IO_write_ptr) return;
  ------------------
  |  Branch (1495:9): [True: 92, False: 1]
  ------------------
 1496|       |    // Force buffer initialization by placing and removing a char in a buffer.
 1497|      1|    putc_unlocked(0, this->file_);
 1498|      1|    --this->file_->_IO_write_ptr;
 1499|      1|  }
_ZNK3fmt3v106detail10glibc_fileI8_IO_FILEE16get_write_bufferEv:
 1508|     93|  auto get_write_buffer() const -> span<char> {
 1509|     93|    auto ptr = this->file_->_IO_write_ptr;
 1510|     93|    return {ptr, to_unsigned(this->file_->_IO_buf_end - ptr)};
 1511|     93|  }
_ZN3fmt3v106detail17file_print_bufferD2Ev:
 1636|     93|  ~file_print_buffer() {
 1637|     93|    file_.advance_write_buffer(size());
 1638|     93|    bool flush = file_.needs_flush();
 1639|     93|    funlockfile(file_);
 1640|     93|    if (flush) fflush(file_);
  ------------------
  |  Branch (1640:9): [True: 0, False: 93]
  ------------------
 1641|     93|  }
_ZNK3fmt3v106detail10glibc_fileI8_IO_FILEE11needs_flushEv:
 1515|     93|  bool needs_flush() const {
 1516|     93|    if ((this->file_->_flags & line_buffered) == 0) return false;
  ------------------
  |  Branch (1516:9): [True: 93, False: 0]
  ------------------
 1517|      0|    char* end = this->file_->_IO_write_end;
 1518|      0|    return memchr(end, '\n', to_unsigned(this->file_->_IO_write_ptr - end));
 1519|     93|  }
_ZNK3fmt3v106detail9file_baseI8_IO_FILEEcvPS3_Ev:
 1460|     93|  operator F*() const { return file_; }
_ZNK3fmt3v106detail10glibc_fileI8_IO_FILEE11is_bufferedEv:
 1490|     93|  auto is_buffered() const -> bool {
 1491|     93|    return (this->file_->_flags & unbuffered) == 0;
 1492|     93|  }

_ZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refE:
 4248|     93|                typename vformat_args<Char>::type args, locale_ref loc) {
 4249|     93|  auto out = basic_appender<Char>(buf);
 4250|     93|  if (fmt.size() == 2 && equal2(fmt.data(), "{}")) {
  ------------------
  |  Branch (4250:7): [True: 0, False: 93]
  |  Branch (4250:26): [True: 0, False: 0]
  ------------------
 4251|      0|    auto arg = args.get(0);
 4252|      0|    if (!arg) report_error("argument not found");
  ------------------
  |  Branch (4252:9): [True: 0, False: 0]
  ------------------
 4253|      0|    arg.visit(default_arg_formatter<Char>{out, args, loc});
 4254|      0|    return;
 4255|      0|  }
 4256|       |
 4257|     93|  struct format_handler {
 4258|     93|    basic_format_parse_context<Char> parse_context;
 4259|     93|    buffered_context<Char> context;
 4260|       |
 4261|     93|    format_handler(basic_appender<Char> p_out, basic_string_view<Char> str,
 4262|     93|                   basic_format_args<buffered_context<Char>> p_args,
 4263|     93|                   locale_ref p_loc)
 4264|     93|        : parse_context(str), context(p_out, p_args, p_loc) {}
 4265|       |
 4266|     93|    void on_text(const Char* begin, const Char* end) {
 4267|     93|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4268|     93|      context.advance_to(write<Char>(context.out(), text));
 4269|     93|    }
 4270|       |
 4271|     93|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4272|     93|      return parse_context.next_arg_id();
 4273|     93|    }
 4274|     93|    FMT_CONSTEXPR auto on_arg_id(int id) -> int {
 4275|     93|      parse_context.check_arg_id(id);
 4276|     93|      return id;
 4277|     93|    }
 4278|     93|    FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {
 4279|     93|      parse_context.check_arg_id(id);
 4280|     93|      int arg_id = context.arg_id(id);
 4281|     93|      if (arg_id < 0) report_error("argument not found");
 4282|     93|      return arg_id;
 4283|     93|    }
 4284|       |
 4285|     93|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4286|     93|      auto arg = get_arg(context, id);
 4287|     93|      context.advance_to(arg.visit(default_arg_formatter<Char>{
 4288|     93|          context.out(), context.args(), context.locale()}));
 4289|     93|    }
 4290|       |
 4291|     93|    auto on_format_specs(int id, const Char* begin, const Char* end)
 4292|     93|        -> const Char* {
 4293|     93|      auto arg = get_arg(context, id);
 4294|       |      // Not using a visitor for custom types gives better codegen.
 4295|     93|      if (arg.format_custom(begin, parse_context, context))
 4296|     93|        return parse_context.begin();
 4297|     93|      auto specs = detail::dynamic_format_specs<Char>();
 4298|     93|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4299|     93|      detail::handle_dynamic_spec<detail::width_checker>(
 4300|     93|          specs.width, specs.width_ref, context);
 4301|     93|      detail::handle_dynamic_spec<detail::precision_checker>(
 4302|     93|          specs.precision, specs.precision_ref, context);
 4303|     93|      if (begin == end || *begin != '}')
 4304|     93|        report_error("missing '}' in format string");
 4305|     93|      context.advance_to(arg.visit(
 4306|     93|          arg_formatter<Char>{context.out(), specs, context.locale()}));
 4307|     93|      return begin;
 4308|     93|    }
 4309|       |
 4310|     93|    FMT_NORETURN void on_error(const char* message) { report_error(message); }
 4311|     93|  };
 4312|     93|  detail::parse_format_string<false>(fmt, format_handler(out, fmt, args, loc));
 4313|     93|}
_ZN3fmt3v106detail12count_digitsEj:
 1239|    558|FMT_CONSTEXPR20 inline auto count_digits(uint32_t n) -> int {
 1240|    558|#ifdef FMT_BUILTIN_CLZ
 1241|    558|  if (!is_constant_evaluated()) {
  ------------------
  |  Branch (1241:7): [Folded - Ignored]
  ------------------
 1242|    558|    return do_count_digits(n);
 1243|    558|  }
 1244|      0|#endif
 1245|      0|  return count_digits_fallback(n);
 1246|    558|}
_ZN3fmt3v106detail15do_count_digitsEj:
 1216|    558|FMT_INLINE auto do_count_digits(uint32_t n) -> int {
 1217|       |// An optimization by Kendall Willets from https://bit.ly/3uOIQrB.
 1218|       |// This increments the upper 32 bits (log10(T) - 1) when >= T is added.
 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
 1220|    558|  static constexpr uint64_t table[] = {
 1221|    558|      FMT_INC(0),          FMT_INC(0),          FMT_INC(0),           // 8
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(0),          FMT_INC(0),          FMT_INC(0),           // 8
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(0),          FMT_INC(0),          FMT_INC(0),           // 8
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1222|    558|      FMT_INC(10),         FMT_INC(10),         FMT_INC(10),          // 64
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10),         FMT_INC(10),         FMT_INC(10),          // 64
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10),         FMT_INC(10),         FMT_INC(10),          // 64
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1223|    558|      FMT_INC(100),        FMT_INC(100),        FMT_INC(100),         // 512
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100),        FMT_INC(100),        FMT_INC(100),         // 512
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100),        FMT_INC(100),        FMT_INC(100),         // 512
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1224|    558|      FMT_INC(1000),       FMT_INC(1000),       FMT_INC(1000),        // 4096
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000),       FMT_INC(1000),       FMT_INC(1000),        // 4096
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000),       FMT_INC(1000),       FMT_INC(1000),        // 4096
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1225|    558|      FMT_INC(10000),      FMT_INC(10000),      FMT_INC(10000),       // 32k
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10000),      FMT_INC(10000),      FMT_INC(10000),       // 32k
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10000),      FMT_INC(10000),      FMT_INC(10000),       // 32k
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1226|    558|      FMT_INC(100000),     FMT_INC(100000),     FMT_INC(100000),      // 256k
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100000),     FMT_INC(100000),     FMT_INC(100000),      // 256k
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100000),     FMT_INC(100000),     FMT_INC(100000),      // 256k
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1227|    558|      FMT_INC(1000000),    FMT_INC(1000000),    FMT_INC(1000000),     // 2048k
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000000),    FMT_INC(1000000),    FMT_INC(1000000),     // 2048k
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000000),    FMT_INC(1000000),    FMT_INC(1000000),     // 2048k
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1228|    558|      FMT_INC(10000000),   FMT_INC(10000000),   FMT_INC(10000000),    // 16M
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10000000),   FMT_INC(10000000),   FMT_INC(10000000),    // 16M
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(10000000),   FMT_INC(10000000),   FMT_INC(10000000),    // 16M
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1229|    558|      FMT_INC(100000000),  FMT_INC(100000000),  FMT_INC(100000000),   // 128M
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100000000),  FMT_INC(100000000),  FMT_INC(100000000),   // 128M
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(100000000),  FMT_INC(100000000),  FMT_INC(100000000),   // 128M
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1230|    558|      FMT_INC(1000000000), FMT_INC(1000000000), FMT_INC(1000000000),  // 1024M
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000000000), FMT_INC(1000000000), FMT_INC(1000000000),  // 1024M
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000000000), FMT_INC(1000000000), FMT_INC(1000000000),  // 1024M
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1231|       |      FMT_INC(1000000000), FMT_INC(1000000000)                        // 4B
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
                    FMT_INC(1000000000), FMT_INC(1000000000)                        // 4B
  ------------------
  |  | 1219|    558|#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)
  ------------------
 1232|    558|  };
 1233|    558|  auto inc = table[FMT_BUILTIN_CLZ(n | 1) ^ 31];
  ------------------
  |  |  169|    558|#    define FMT_BUILTIN_CLZ(n) __builtin_clz(n)
  ------------------
 1234|    558|  return static_cast<int>((n + inc) >> 32);
 1235|    558|}
_ZN3fmt3v106detail5writeIcNS0_14basic_appenderIcEEEET0_S5_NS0_17basic_string_viewIT_EE:
 3654|    558|    -> OutputIt {
 3655|    558|  auto it = reserve(out, value.size());
 3656|    558|  it = copy_noinline<Char>(value.begin(), value.end(), it);
 3657|    558|  return base_iterator(out, it);
 3658|    558|}
_ZN3fmt3v106detail7reserveIcEENS0_14basic_appenderIT_EES5_m:
  530|  1.02k|inline auto reserve(basic_appender<T> it, size_t n) -> basic_appender<T> {
  531|  1.02k|  buffer<T>& buf = get_container(it);
  532|  1.02k|  buf.try_reserve(buf.size() + n);
  533|  1.02k|  return it;
  534|  1.02k|}
_ZN3fmt3v106detail13copy_noinlineIcPKcNS0_14basic_appenderIcEEEET1_T0_S8_S7_:
  590|    558|                                              OutputIt out) -> OutputIt {
  591|    558|  return copy<OutChar>(begin, end, out);
  592|    558|}
_ZN3fmt3v106detail13base_iteratorINS0_14basic_appenderIcEEEET_S5_S5_:
  567|  1.02k|constexpr auto base_iterator(Iterator, Iterator it) -> Iterator {
  568|  1.02k|  return it;
  569|  1.02k|}
_ZN3fmt3v106detail14format_decimalIcjEENS1_21format_decimal_resultIPT_EES5_T0_i:
 1309|    279|    -> format_decimal_result<Char*> {
 1310|    279|  FMT_ASSERT(size >= count_digits(value), "invalid digit count");
  ------------------
  |  |  378|    279|      fmt::detail::ignore_unused((condition), (message))
  ------------------
 1311|    279|  out += size;
 1312|    279|  Char* end = out;
 1313|    279|  while (value >= 100) {
  ------------------
  |  Branch (1313:10): [True: 0, False: 279]
  ------------------
 1314|       |    // Integer division is slow so do it for a group of two digits instead
 1315|       |    // of for every digit. The idea comes from the talk by Alexandrescu
 1316|       |    // "Three Optimization Tips for C++". See speed-test for a comparison.
 1317|      0|    out -= 2;
 1318|      0|    copy2(out, digits2(static_cast<size_t>(value % 100)));
 1319|      0|    value /= 100;
 1320|      0|  }
 1321|    279|  if (value < 10) {
  ------------------
  |  Branch (1321:7): [True: 279, False: 0]
  ------------------
 1322|    279|    *--out = static_cast<Char>('0' + value);
 1323|    279|    return {out, end};
 1324|    279|  }
 1325|      0|  out -= 2;
 1326|      0|  copy2(out, digits2(static_cast<size_t>(value)));
 1327|      0|  return {out, end};
 1328|    279|}
_ZN3fmt3v106detail14format_decimalIcjNS0_14basic_appenderIcEELi0EEENS1_21format_decimal_resultIT1_EES6_T0_i:
 1333|    279|    -> format_decimal_result<Iterator> {
 1334|       |  // Buffer is large enough to hold all digits (digits10 + 1).
 1335|    279|  Char buffer[digits10<UInt>() + 1] = {};
 1336|    279|  auto end = format_decimal(buffer, value, size).end;
 1337|    279|  return {out, detail::copy_noinline<Char>(buffer, end, out)};
 1338|    279|}
_ZN3fmt3v106detail13copy_noinlineIcPcNS0_14basic_appenderIcEEEET1_T0_S7_S6_:
  590|    279|                                              OutputIt out) -> OutputIt {
  591|    279|  return copy<OutChar>(begin, end, out);
  592|    279|}
_ZN3fmt3v106detail11is_negativeIjLi0EEEbT_:
 1099|    279|constexpr auto is_negative(T) -> bool {
 1100|    279|  return false;
 1101|    279|}
_ZN3fmt3v106detail18write_int_noinlineIcNS0_14basic_appenderIcEEjEET0_S5_NS1_13write_int_argIT1_EERKNS0_12format_specsENS1_10locale_refE:
 2225|    279|                                                   locale_ref loc) -> OutputIt {
 2226|    279|  return write_int<Char>(out, arg, specs, loc);
 2227|    279|}
_ZN3fmt3v106detail9write_intIcNS0_14basic_appenderIcEEjEET0_S5_NS1_13write_int_argIT1_EERKNS0_12format_specsENS1_10locale_refE:
 2172|    279|    -> OutputIt {
 2173|    279|  static_assert(std::is_same<T, uint32_or_64_or_128_t<T>>::value, "");
 2174|    279|  auto abs_value = arg.abs_value;
 2175|    279|  auto prefix = arg.prefix;
 2176|    279|  switch (specs.type) {
 2177|      0|  default:
  ------------------
  |  Branch (2177:3): [True: 0, False: 279]
  ------------------
 2178|      0|    FMT_ASSERT(false, "");
  ------------------
  |  |  378|      0|      fmt::detail::ignore_unused((condition), (message))
  ------------------
 2179|      0|    FMT_FALLTHROUGH;
  ------------------
  |  |  171|      0|#  define FMT_FALLTHROUGH [[fallthrough]]
  ------------------
 2180|      0|  case presentation_type::none:
  ------------------
  |  Branch (2180:3): [True: 0, False: 279]
  ------------------
 2181|    279|  case presentation_type::dec: {
  ------------------
  |  Branch (2181:3): [True: 279, False: 0]
  ------------------
 2182|    279|    int num_digits = count_digits(abs_value);
 2183|    279|    return write_int<Char>(
 2184|    279|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2185|    279|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2186|    279|        });
 2187|      0|  }
 2188|      0|  case presentation_type::hex: {
  ------------------
  |  Branch (2188:3): [True: 0, False: 279]
  ------------------
 2189|      0|    if (specs.alt)
  ------------------
  |  Branch (2189:9): [True: 0, False: 0]
  ------------------
 2190|      0|      prefix_append(prefix, unsigned(specs.upper ? 'X' : 'x') << 8 | '0');
  ------------------
  |  Branch (2190:38): [True: 0, False: 0]
  ------------------
 2191|      0|    int num_digits = count_digits<4>(abs_value);
 2192|      0|    return write_int<Char>(
 2193|      0|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2194|      0|          return format_uint<4, Char>(it, abs_value, num_digits, specs.upper);
 2195|      0|        });
 2196|      0|  }
 2197|      0|  case presentation_type::oct: {
  ------------------
  |  Branch (2197:3): [True: 0, False: 279]
  ------------------
 2198|      0|    int num_digits = count_digits<3>(abs_value);
 2199|       |    // Octal prefix '0' is counted as a digit, so only add it if precision
 2200|       |    // is not greater than the number of digits.
 2201|      0|    if (specs.alt && specs.precision <= num_digits && abs_value != 0)
  ------------------
  |  Branch (2201:9): [True: 0, False: 0]
  |  Branch (2201:22): [True: 0, False: 0]
  |  Branch (2201:55): [True: 0, False: 0]
  ------------------
 2202|      0|      prefix_append(prefix, '0');
 2203|      0|    return write_int<Char>(
 2204|      0|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2205|      0|          return format_uint<3, Char>(it, abs_value, num_digits);
 2206|      0|        });
 2207|      0|  }
 2208|      0|  case presentation_type::bin: {
  ------------------
  |  Branch (2208:3): [True: 0, False: 279]
  ------------------
 2209|      0|    if (specs.alt)
  ------------------
  |  Branch (2209:9): [True: 0, False: 0]
  ------------------
 2210|      0|      prefix_append(prefix, unsigned(specs.upper ? 'B' : 'b') << 8 | '0');
  ------------------
  |  Branch (2210:38): [True: 0, False: 0]
  ------------------
 2211|      0|    int num_digits = count_digits<1>(abs_value);
 2212|      0|    return write_int<Char>(
 2213|      0|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2214|      0|          return format_uint<1, Char>(it, abs_value, num_digits);
 2215|      0|        });
 2216|      0|  }
 2217|      0|  case presentation_type::chr:
  ------------------
  |  Branch (2217:3): [True: 0, False: 279]
  ------------------
 2218|      0|    return write_char<Char>(out, static_cast<Char>(abs_value), specs);
 2219|    279|  }
 2220|    279|}
_ZN3fmt3v106detail9write_intIcNS0_14basic_appenderIcEEZNS1_9write_intIcS4_jEET0_S6_NS1_13write_int_argIT1_EERKNS0_12format_specsENS1_10locale_refEEUlS4_E_EES6_S6_ijSC_S8_:
 1978|    279|                                        W write_digits) -> OutputIt {
 1979|       |  // Slightly faster check for specs.width == 0 && specs.precision == -1.
 1980|    279|  if ((specs.width | (specs.precision + 1)) == 0) {
  ------------------
  |  Branch (1980:7): [True: 279, False: 0]
  ------------------
 1981|    279|    auto it = reserve(out, to_unsigned(num_digits) + (prefix >> 24));
 1982|    279|    if (prefix != 0) {
  ------------------
  |  Branch (1982:9): [True: 0, False: 279]
  ------------------
 1983|      0|      for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
  ------------------
  |  Branch (1983:44): [True: 0, False: 0]
  ------------------
 1984|      0|        *it++ = static_cast<Char>(p & 0xff);
 1985|      0|    }
 1986|    279|    return base_iterator(out, write_digits(it));
 1987|    279|  }
 1988|      0|  auto data = write_int_data<Char>(num_digits, prefix, specs);
 1989|      0|  return write_padded<Char, align::right>(
 1990|      0|      out, specs, data.size, [=](reserve_iterator<OutputIt> it) {
 1991|      0|        for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
 1992|      0|          *it++ = static_cast<Char>(p & 0xff);
 1993|      0|        it = detail::fill_n(it, data.padding, static_cast<Char>('0'));
 1994|      0|        return write_digits(it);
 1995|      0|      });
 1996|    279|}
_ZZN3fmt3v106detail9write_intIcNS0_14basic_appenderIcEEjEET0_S5_NS1_13write_int_argIT1_EERKNS0_12format_specsENS1_10locale_refEENKUlS4_E_clES4_:
 2184|    279|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2185|    279|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2186|    279|        });
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler7on_textEPKcSF_:
 4266|    558|    void on_text(const Char* begin, const Char* end) {
 4267|    558|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4268|    558|      context.advance_to(write<Char>(context.out(), text));
 4269|    558|    }
_ZN3fmt3v106detail7get_argINS0_7contextEiEEDTcldtfp_3argfp0_EERT_T0_:
 3811|    465|FMT_CONSTEXPR auto get_arg(Context& ctx, ID id) -> decltype(ctx.arg(id)) {
 3812|    465|  auto arg = ctx.arg(id);
 3813|    465|  if (!arg) report_error("argument not found");
  ------------------
  |  Branch (3813:7): [True: 0, False: 465]
  ------------------
 3814|    465|  return arg;
 3815|    465|}
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler9on_arg_idEv:
 4271|    465|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4272|    465|      return parse_context.next_arg_id();
 4273|    465|    }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler15on_format_specsEiPKcSF_:
 4292|    465|        -> const Char* {
 4293|    465|      auto arg = get_arg(context, id);
 4294|       |      // Not using a visitor for custom types gives better codegen.
 4295|    465|      if (arg.format_custom(begin, parse_context, context))
  ------------------
  |  Branch (4295:11): [True: 0, False: 465]
  ------------------
 4296|      0|        return parse_context.begin();
 4297|    465|      auto specs = detail::dynamic_format_specs<Char>();
 4298|    465|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4299|    465|      detail::handle_dynamic_spec<detail::width_checker>(
 4300|    465|          specs.width, specs.width_ref, context);
 4301|    465|      detail::handle_dynamic_spec<detail::precision_checker>(
 4302|    465|          specs.precision, specs.precision_ref, context);
 4303|    465|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (4303:11): [True: 0, False: 465]
  |  Branch (4303:27): [True: 0, False: 465]
  ------------------
 4304|      0|        report_error("missing '}' in format string");
 4305|    465|      context.advance_to(arg.visit(
 4306|    465|          arg_formatter<Char>{context.out(), specs, context.locale()}));
 4307|    465|      return begin;
 4308|    465|    }
_ZN3fmt3v106detail19handle_dynamic_specINS1_13width_checkerENS0_7contextEEEvRiNS1_7arg_refINT0_9char_typeEEERS7_:
 3820|    465|                                       Context& ctx) {
 3821|    465|  switch (ref.kind) {
  ------------------
  |  Branch (3821:11): [True: 0, False: 465]
  ------------------
 3822|    465|  case arg_id_kind::none:
  ------------------
  |  Branch (3822:3): [True: 465, False: 0]
  ------------------
 3823|    465|    break;
 3824|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3824:3): [True: 0, False: 465]
  ------------------
 3825|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index));
 3826|      0|    break;
 3827|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3827:3): [True: 0, False: 465]
  ------------------
 3828|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name));
 3829|      0|    break;
 3830|    465|  }
 3831|    465|}
_ZN3fmt3v106detail19handle_dynamic_specINS1_17precision_checkerENS0_7contextEEEvRiNS1_7arg_refINT0_9char_typeEEERS7_:
 3820|    465|                                       Context& ctx) {
 3821|    465|  switch (ref.kind) {
  ------------------
  |  Branch (3821:11): [True: 0, False: 465]
  ------------------
 3822|    465|  case arg_id_kind::none:
  ------------------
  |  Branch (3822:3): [True: 465, False: 0]
  ------------------
 3823|    465|    break;
 3824|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3824:3): [True: 0, False: 465]
  ------------------
 3825|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index));
 3826|      0|    break;
 3827|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3827:3): [True: 0, False: 465]
  ------------------
 3828|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name));
 3829|      0|    break;
 3830|    465|  }
 3831|    465|}
_ZN3fmt3v106detail13arg_formatterIcEclIjEENS0_14basic_appenderIcEET_:
 3765|    279|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3766|    279|    return detail::write<Char>(out, value, specs, locale);
 3767|    279|  }
_ZN3fmt3v106detail5writeIcjLi0EEENS0_14basic_appenderIT_EES5_T0_RKNS0_12format_specsENS1_10locale_refE:
 2234|    279|    -> basic_appender<Char> {
 2235|    279|  if (specs.localized && write_loc(out, value, specs, loc)) return out;
  ------------------
  |  Branch (2235:7): [True: 0, False: 279]
  |  Branch (2235:26): [True: 0, False: 0]
  ------------------
 2236|    279|  return write_int_noinline<Char>(out, make_write_int_arg(value, specs.sign),
 2237|    279|                                  specs, loc);
 2238|    279|}
_ZN3fmt3v106detail18make_write_int_argIjEENS1_13write_int_argINSt3__111conditionalIXaalecl8num_bitsIT_EELi32EntLi0EEjNS5_IXlecl8num_bitsIS6_EELi64EEmoE4typeEE4typeEEES6_NS0_4sign4typeE:
 2134|    279|    -> write_int_arg<uint32_or_64_or_128_t<T>> {
 2135|    279|  auto prefix = 0u;
 2136|    279|  auto abs_value = static_cast<uint32_or_64_or_128_t<T>>(value);
 2137|    279|  if (is_negative(value)) {
  ------------------
  |  Branch (2137:7): [True: 0, False: 279]
  ------------------
 2138|      0|    prefix = 0x01000000 | '-';
 2139|      0|    abs_value = 0 - abs_value;
 2140|    279|  } else {
 2141|    279|    constexpr const unsigned prefixes[4] = {0, 0, 0x1000000u | '+',
 2142|    279|                                            0x1000000u | ' '};
 2143|    279|    prefix = prefixes[sign];
 2144|    279|  }
 2145|    279|  return {abs_value, prefix};
 2146|    279|}
_ZN3fmt3v106detail13arg_formatterIcEclIPKcEENS0_14basic_appenderIcEET_:
 3765|    186|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3766|    186|    return detail::write<Char>(out, value, specs, locale);
 3767|    186|  }
_ZN3fmt3v106detail5writeIcNS0_14basic_appenderIcEEEET0_S5_PKT_RKNS0_12format_specsENS1_10locale_refE:
 2325|    186|                         locale_ref) -> OutputIt {
 2326|    186|  if (specs.type == presentation_type::pointer)
  ------------------
  |  Branch (2326:7): [True: 0, False: 186]
  ------------------
 2327|      0|    return write_ptr<Char>(out, bit_cast<uintptr_t>(s), &specs);
 2328|    186|  if (!s) report_error("string pointer is null");
  ------------------
  |  Branch (2328:7): [True: 0, False: 186]
  ------------------
 2329|    186|  return write<Char>(out, basic_string_view<Char>(s), specs, {});
 2330|    186|}
_ZN3fmt3v106detail5writeIcNS0_14basic_appenderIcEEEET0_S5_NS0_17basic_string_viewINS0_13type_identityIT_E4typeEEERKNS0_12format_specsENS1_10locale_refE:
 2320|    186|                         const format_specs& specs, locale_ref) -> OutputIt {
 2321|    186|  return write<Char>(out, s, specs);
 2322|    186|}
_ZN3fmt3v106detail5writeIcNS0_14basic_appenderIcEEEET0_S5_NS0_17basic_string_viewIT_EERKNS0_12format_specsE:
 2295|    186|                         const format_specs& specs) -> OutputIt {
 2296|    186|  auto data = s.data();
 2297|    186|  auto size = s.size();
 2298|    186|  if (specs.precision >= 0 && to_unsigned(specs.precision) < size)
  ------------------
  |  Branch (2298:7): [True: 0, False: 186]
  |  Branch (2298:31): [True: 0, False: 0]
  ------------------
 2299|      0|    size = code_point_index(s, to_unsigned(specs.precision));
 2300|    186|  bool is_debug = specs.type == presentation_type::debug;
 2301|    186|  size_t width = 0;
 2302|       |
 2303|    186|  if (is_debug) size = write_escaped_string(counting_iterator{}, s).count();
  ------------------
  |  Branch (2303:7): [True: 0, False: 186]
  ------------------
 2304|       |
 2305|    186|  if (specs.width != 0) {
  ------------------
  |  Branch (2305:7): [True: 0, False: 186]
  ------------------
 2306|      0|    if (is_debug)
  ------------------
  |  Branch (2306:9): [True: 0, False: 0]
  ------------------
 2307|      0|      width = size;
 2308|      0|    else
 2309|      0|      width = compute_width(basic_string_view<Char>(data, size));
 2310|      0|  }
 2311|    186|  return write_padded<Char>(out, specs, size, width,
 2312|    186|                            [=](reserve_iterator<OutputIt> it) {
 2313|    186|                              if (is_debug) return write_escaped_string(it, s);
 2314|    186|                              return copy<Char>(data, data + size, it);
 2315|    186|                            });
 2316|    186|}
_ZN3fmt3v106detail12write_paddedIcLNS0_5align4typeE1ENS0_14basic_appenderIcEEZNS1_5writeIcS6_EET0_S8_NS0_17basic_string_viewIT_EERKNS0_12format_specsEEUlS6_E_EET1_SG_SE_mmOT2_:
 1731|    186|                                size_t size, size_t width, F&& f) -> OutputIt {
 1732|    186|  static_assert(align == align::left || align == align::right, "");
 1733|    186|  unsigned spec_width = to_unsigned(specs.width);
 1734|    186|  size_t padding = spec_width > width ? spec_width - width : 0;
  ------------------
  |  Branch (1734:20): [True: 0, False: 186]
  ------------------
 1735|       |  // Shifts are encoded as string literals because static constexpr is not
 1736|       |  // supported in constexpr functions.
 1737|    186|  auto* shifts = align == align::left ? "\x1f\x1f\x00\x01" : "\x00\x1f\x00\x01";
  ------------------
  |  Branch (1737:18): [Folded - Ignored]
  ------------------
 1738|    186|  size_t left_padding = padding >> shifts[specs.align];
 1739|    186|  size_t right_padding = padding - left_padding;
 1740|    186|  auto it = reserve(out, size + padding * specs.fill.size());
 1741|    186|  if (left_padding != 0) it = fill<Char>(it, left_padding, specs.fill);
  ------------------
  |  Branch (1741:7): [True: 0, False: 186]
  ------------------
 1742|    186|  it = f(it);
 1743|    186|  if (right_padding != 0) it = fill<Char>(it, right_padding, specs.fill);
  ------------------
  |  Branch (1743:7): [True: 0, False: 186]
  ------------------
 1744|    186|  return base_iterator(out, it);
 1745|    186|}
_ZZN3fmt3v106detail5writeIcNS0_14basic_appenderIcEEEET0_S5_NS0_17basic_string_viewIT_EERKNS0_12format_specsEENKUlS4_E_clES4_:
 2312|    186|                            [=](reserve_iterator<OutputIt> it) {
 2313|    186|                              if (is_debug) return write_escaped_string(it, s);
  ------------------
  |  Branch (2313:35): [True: 0, False: 186]
  ------------------
 2314|    186|                              return copy<Char>(data, data + size, it);
 2315|    186|                            });
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handlerC2ENS0_14basic_appenderIcEENS7_IcEENS0_17basic_format_argsINS0_7contextEEESC_:
 4264|     93|        : parse_context(str), context(p_out, p_args, p_loc) {}

_ZN6ImVec2C2Ev:
  278|    144|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

LLVMFuzzerTestOneInput:
   10|    145|{
   11|       |    // Only accept properly null terminated strings
   12|    145|    if (size < 1 || data[size - 1] != '\0')
  ------------------
  |  Branch (12:9): [True: 0, False: 145]
  |  Branch (12:21): [True: 1, False: 144]
  ------------------
   13|      1|    {
   14|      1|        return 1;
   15|      1|    }
   16|       |
   17|    144|    dlxemu::Emulator emulator;
   18|       |
   19|       |    // Build argv
   20|    144|    std::vector<char*> argv;
   21|    144|    argv.reserve(10);
   22|       |
   23|    144|    phi::size_t begin{0u};
   24|  12.8k|    for (phi::size_t index{0}; index < size; ++index)
  ------------------
  |  Branch (24:32): [True: 12.6k, False: 143]
  ------------------
   25|  12.6k|    {
   26|  12.6k|        char c = static_cast<char>(data[index]);
   27|       |
   28|  12.6k|        if (c == '\0')
  ------------------
  |  Branch (28:13): [True: 2.47k, False: 10.2k]
  ------------------
   29|  2.47k|        {
   30|       |            // Disallow empty strings
   31|  2.47k|            if (begin == index)
  ------------------
  |  Branch (31:17): [True: 1, False: 2.47k]
  ------------------
   32|      1|            {
   33|      1|                return 1;
   34|      1|            }
   35|       |
   36|       |            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-const-cast)
   37|  2.47k|            argv.push_back(const_cast<char*>(reinterpret_cast<const char*>(data + begin)));
   38|  2.47k|            begin = index + 1u;
   39|  2.47k|        }
   40|  12.6k|    }
   41|       |
   42|       |    // Can't eccept too large buffers
   43|    143|    if (argv.size() > std::numeric_limits<phi::int32_t>::max())
  ------------------
  |  Branch (43:9): [True: 0, False: 143]
  ------------------
   44|      0|    {
   45|      0|        return 1;
   46|      0|    }
   47|       |
   48|    143|    (void)emulator.HandleCommandLineArguments(static_cast<phi::int32_t>(argv.size()), argv.data());
   49|       |
   50|    143|    return 0;
   51|    143|}


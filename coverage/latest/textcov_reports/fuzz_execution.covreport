_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  1.04M|        {
  169|  1.04M|            PHI_ASSERT(index < 3u);
  170|       |
  171|  1.04M|            switch (index.unsafe())
  172|  1.04M|            {
  173|   464k|                case 0:
  ------------------
  |  Branch (173:17): [True: 464k, False: 576k]
  ------------------
  174|   464k|                    return m_Arg1Type;
  175|       |
  176|   297k|                case 1:
  ------------------
  |  Branch (176:17): [True: 297k, False: 744k]
  ------------------
  177|   297k|                    return m_Arg2Type;
  178|       |
  179|   279k|                case 2:
  ------------------
  |  Branch (179:17): [True: 279k, False: 762k]
  ------------------
  180|   279k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 1.04M]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  1.04M|#endif
  187|  1.04M|            }
  188|  1.04M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   275k|        {
  195|   275k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   275k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 272k, False: 2.91k]
  ------------------
  199|   272k|            {
  200|   272k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   272k|            }
  202|   275k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 156k, False: 119k]
  ------------------
  203|   156k|            {
  204|   156k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   156k|            }
  206|   275k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 53.5k, False: 222k]
  ------------------
  207|  53.5k|            {
  208|  53.5k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  53.5k|            }
  210|       |
  211|   275k|            return number_of_argument_required;
  212|   275k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  1.68M|        {
  216|  1.68M|            return m_RegisterAccessType;
  217|  1.68M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   275k|        {
  221|   275k|            return m_Executor;
  222|   275k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  5.21M|    {
   38|  5.21M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  5.21M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  5.21M|                                         static_cast<underlying_t>(rhs));
   42|  5.21M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  5.21M|    {
   55|  5.21M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  5.21M|        return static_cast<underlying_t>(type & test) != 0;
   58|  5.21M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|   935k|    {
   32|   935k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 8.25k, False: 926k]
  ------------------
   33|  8.25k|        {
   34|  8.25k|            return true;
   35|  8.25k|        }
   36|       |
   37|   926k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 11.0k, False: 915k]
  ------------------
   38|  11.0k|        {
   39|  11.0k|            return true;
   40|  11.0k|        }
   41|       |
   42|   915k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 236k, False: 679k]
  ------------------
   43|   236k|        {
   44|   236k|            return true;
   45|   236k|        }
   46|       |
   47|   679k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 3.13k, False: 676k]
  ------------------
   48|  3.13k|        {
   49|  3.13k|            return true;
   50|  3.13k|        }
   51|       |
   52|   676k|        return false;
   53|   679k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|   676k|    {
   57|   676k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 676k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|   676k|        const char first_char = token.at(0);
   63|       |
   64|   676k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 144k, False: 532k]
  ------------------
   65|   144k|        {
   66|   144k|            return phi::is_alpha(first_char);
   67|   144k|        }
   68|       |
   69|   532k|        phi::boolean just_under_scores = (first_char == '_');
   70|   532k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 166k, False: 365k]
  |  Branch (70:15): [True: 355k, False: 176k]
  |  Branch (70:44): [True: 9.74k, False: 166k]
  ------------------
   71|   166k|        {
   72|   166k|            return false;
   73|   166k|        }
   74|       |
   75|  1.00M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 842k, False: 157k]
  ------------------
   76|   842k|        {
   77|   842k|            const char c{token.at(index)};
   78|       |
   79|   842k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 632k, False: 210k]
  ------------------
   80|   632k|            {
   81|   632k|                just_under_scores = false;
   82|   632k|            }
   83|   210k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 2.47k, False: 208k]
  ------------------
   84|  2.47k|            {
   85|  2.47k|                continue;
   86|  2.47k|            }
   87|   208k|            else
   88|   208k|            {
   89|   208k|                return false;
   90|   208k|            }
   91|   842k|        }
   92|       |
   93|   157k|        return !just_under_scores;
   94|   365k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|  3.35M|    {
  101|  3.35M|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 3.35M]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|  3.35M|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 527k, False: 2.82M]
  ------------------
  107|   527k|        {
  108|   527k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 39.2k, False: 488k]
  ------------------
  109|  39.2k|            {
  110|  39.2k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  39.2k|            }
  112|       |
  113|   488k|            return {};
  114|   527k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|  2.82M|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 9.62k, False: 2.81M]
  ------------------
  118|  9.62k|        {
  119|  9.62k|            return {};
  120|  9.62k|        }
  121|       |
  122|  2.81M|        std::int32_t number{0};
  123|  2.81M|        phi::boolean is_negative{false};
  124|  2.81M|        phi::boolean starts_with_zero{false};
  125|  2.81M|        phi::boolean parsing_binary{false};
  126|  2.81M|        phi::boolean parsing_octal{false};
  127|  2.81M|        phi::boolean parsing_hexadecimal{false};
  128|  2.81M|        phi::boolean parsed_something{false};
  129|  2.81M|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|  3.16M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 3.13M, False: 31.5k]
  ------------------
  134|  3.13M|        {
  135|  3.13M|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|  3.13M|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 2.81M, False: 314k]
  ------------------
  139|  2.81M|            {
  140|  2.81M|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 11.4k, False: 2.80M]
  ------------------
  141|  11.4k|                {
  142|  11.4k|                    continue;
  143|  11.4k|                }
  144|       |
  145|  2.80M|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 52.9k, False: 2.75M]
  ------------------
  146|  52.9k|                {
  147|  52.9k|                    is_negative = true;
  148|  52.9k|                    continue;
  149|  52.9k|                }
  150|       |
  151|  2.75M|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 56.4k, False: 2.69M]
  ------------------
  152|  56.4k|                {
  153|  56.4k|                    starts_with_zero = true;
  154|  56.4k|                    continue;
  155|  56.4k|                }
  156|       |
  157|  2.69M|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 6.51k, False: 2.68M]
  ------------------
  158|  6.51k|                {
  159|  6.51k|                    return {};
  160|  6.51k|                }
  161|  2.69M|            }
  162|       |
  163|       |            // Second character
  164|  3.00M|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 171k, False: 2.83M]
  ------------------
  165|   171k|            {
  166|   171k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 56.4k, False: 115k]
  ------------------
  167|  56.4k|                {
  168|       |                    // Binary
  169|  56.4k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 7.61k, False: 48.8k]
  |  Branch (169:37): [True: 3.63k, False: 45.1k]
  ------------------
  170|  11.2k|                    {
  171|  11.2k|                        parsing_binary = true;
  172|  11.2k|                        continue;
  173|  11.2k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  45.1k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 9.23k, False: 35.9k]
  |  Branch (176:37): [True: 4.29k, False: 31.6k]
  ------------------
  177|  13.5k|                    {
  178|  13.5k|                        parsing_hexadecimal = true;
  179|  13.5k|                        continue;
  180|  13.5k|                    }
  181|       |
  182|       |                    // Octal
  183|  31.6k|                    parsing_octal = true;
  184|  31.6k|                }
  185|   171k|            }
  186|       |
  187|       |            // Handle seperators
  188|  2.97M|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 7.81k, False: 2.97M]
  ------------------
  189|  7.81k|            {
  190|  7.81k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 3.00k, False: 4.81k]
  ------------------
  191|  3.00k|                {
  192|  3.00k|                    return {};
  193|  3.00k|                }
  194|       |
  195|  4.81k|                parsed_separator = true;
  196|  4.81k|                continue;
  197|  7.81k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|  2.97M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 89.9k, False: 2.88M]
  |  Branch (200:32): [True: 2.23k, False: 87.7k]
  ------------------
  201|  2.23k|            {
  202|       |                // Would underflow
  203|  2.23k|                return {};
  204|  2.23k|            }
  205|  2.96M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 2.88M, False: 87.7k]
  |  Branch (205:17): [True: 3.88k, False: 2.96M]
  |  Branch (205:33): [True: 3.88k, False: 2.87M]
  ------------------
  206|  3.88k|            {
  207|       |                // Would overflow
  208|  3.88k|                return {};
  209|  3.88k|            }
  210|       |
  211|  2.96M|            parsed_separator = false;
  212|  2.96M|            parsed_something = true;
  213|       |
  214|  2.96M|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 13.1k, False: 2.95M]
  ------------------
  215|  13.1k|            {
  216|  13.1k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 6.70k, False: 6.47k]
  ------------------
  217|  6.70k|                {
  218|  6.70k|                    return {};
  219|  6.70k|                }
  220|       |
  221|  6.47k|                number <<= 1;
  222|  6.47k|                number |= (c - '0');
  223|  6.47k|            }
  224|  2.95M|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 35.9k, False: 2.91M]
  ------------------
  225|  35.9k|            {
  226|  35.9k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 24.6k, False: 11.3k]
  ------------------
  227|  24.6k|                {
  228|  24.6k|                    return {};
  229|  24.6k|                }
  230|       |
  231|  11.3k|                number <<= 3;
  232|  11.3k|                number |= (c - '0');
  233|  11.3k|            }
  234|  2.91M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 32.5k, False: 2.88M]
  ------------------
  235|  32.5k|            {
  236|  32.5k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 12.1k, False: 20.3k]
  ------------------
  237|  12.1k|                {
  238|  12.1k|                    return {};
  239|  12.1k|                }
  240|       |
  241|  20.3k|                number <<= 4;
  242|  20.3k|                number |= phi::hex_digit_value(c).unsafe();
  243|  20.3k|            }
  244|  2.88M|            else
  245|  2.88M|            {
  246|  2.88M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 2.71M, False: 165k]
  ------------------
  247|  2.71M|                {
  248|  2.71M|                    return {};
  249|  2.71M|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|   165k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 78.1k, False: 87.4k]
  |  Branch (252:36): [True: 8.03k, False: 70.0k]
  ------------------
  253|  8.03k|                {
  254|  8.03k|                    return {};
  255|  8.03k|                }
  256|       |
  257|   157k|                number *= 10;
  258|   157k|                number += (c - '0');
  259|   157k|            }
  260|  2.96M|        }
  261|       |
  262|  31.5k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 27.6k, False: 3.91k]
  ------------------
  263|  27.6k|        {
  264|       |            // Check for over/underflow
  265|  27.6k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 13.5k, False: 14.1k]
  |  Branch (265:32): [True: 5.15k, False: 8.38k]
  ------------------
  266|  5.15k|            {
  267|       |                // Would underflow
  268|  5.15k|                return {};
  269|  5.15k|            }
  270|  22.4k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 14.1k, False: 8.38k]
  |  Branch (270:17): [True: 5.56k, False: 16.9k]
  |  Branch (270:33): [True: 5.56k, False: 8.54k]
  ------------------
  271|  5.56k|            {
  272|       |                // Would overflow
  273|  5.56k|                return {};
  274|  5.56k|            }
  275|       |
  276|  16.9k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 8.38k, False: 8.54k]
  ------------------
  277|  8.38k|            {
  278|  8.38k|                return static_cast<std::int16_t>(-number);
  279|  8.38k|            }
  280|       |
  281|  8.54k|            return static_cast<std::int16_t>(number);
  282|  16.9k|        }
  283|       |
  284|  3.91k|        return {};
  285|  31.5k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   163k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   163k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 4.09M, False: 0]
  ------------------
   64|  4.09M|            {
   65|  4.09M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 163k, False: 3.92M]
  ------------------
   66|   163k|                {
   67|   163k|                    return &token;
   68|   163k|                }
   69|  4.09M|            }
   70|       |
   71|      0|            return nullptr;
   72|   163k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   981k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   981k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   981k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  3.37M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  3.37M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  3.37M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  1.97M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.97M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.97M|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|   721k|    {
   11|   721k|        m_Value = val;
   12|   721k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  1.26M|    {
   16|  1.26M|        return m_Value;
   17|  1.26M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   18|   275k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   23|  67.7k|    {
   24|  67.7k|        PHI_ASSERT(argument_number < 3u);
   25|       |
   26|  67.7k|        switch (argument_number.unsafe())
   27|  67.7k|        {
   28|  53.1k|            case 0u:
  ------------------
  |  Branch (28:13): [True: 53.1k, False: 14.6k]
  ------------------
   29|  53.1k|                m_Arg1 = argument;
   30|  53.1k|                break;
   31|  11.3k|            case 1u:
  ------------------
  |  Branch (31:13): [True: 11.3k, False: 56.4k]
  ------------------
   32|  11.3k|                m_Arg2 = argument;
   33|  11.3k|                break;
   34|  3.36k|            case 2u:
  ------------------
  |  Branch (34:13): [True: 3.36k, False: 64.4k]
  ------------------
   35|  3.36k|                m_Arg3 = argument;
   36|  3.36k|                break;
   37|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   38|      0|            default:
  ------------------
  |  Branch (38:13): [True: 0, False: 67.7k]
  ------------------
   39|      0|                PHI_ASSERT_NOT_REACHED();
   40|  67.7k|#endif
   41|  67.7k|        }
   42|  67.7k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   82|  1.68M|    {
   83|  1.68M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   84|  1.68M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   87|  1.68M|    {
   88|  1.68M|        return m_Info;
   89|  1.68M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   23|   895k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   26|  10.0M|    {
   27|  10.0M|        return m_Type;
   28|  10.0M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|   497k|    {
   78|   497k|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|   497k|        return register_int;
   81|   497k|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   85|   884k|    {
   86|   884k|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   87|       |
   88|   884k|        return register_float;
   89|   884k|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   93|      9|    {
   94|      9|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   95|       |
   96|      9|        return immediate_value;
   97|      9|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  109|   636k|    {
  110|   636k|        PHI_ASSERT(m_Type == ArgumentType::Label);
  111|       |
  112|   636k|        return label;
  113|   636k|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  173|  15.9k|    {
  174|  15.9k|        InstructionArgument arg;
  175|  15.9k|        arg.m_Type                   = ArgumentType::IntRegister;
  176|  15.9k|        arg.register_int.register_id = id;
  177|  15.9k|        return arg;
  178|  15.9k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  182|  17.1k|    {
  183|  17.1k|        InstructionArgument arg;
  184|  17.1k|        arg.m_Type                     = ArgumentType::FloatRegister;
  185|  17.1k|        arg.register_float.register_id = id;
  186|  17.1k|        return arg;
  187|  17.1k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  191|  2.95k|    {
  192|  2.95k|        InstructionArgument arg;
  193|  2.95k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  194|  2.95k|        arg.immediate_value.signed_value = value;
  195|  2.95k|        return arg;
  196|  2.95k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  200|  3.75k|    {
  201|  3.75k|        InstructionArgument arg;
  202|  3.75k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  203|  3.75k|        arg.address_displacement.register_id  = id;
  204|  3.75k|        arg.address_displacement.displacement = displacement;
  205|  3.75k|        return arg;
  206|  3.75k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  210|  27.9k|    {
  211|  27.9k|        InstructionArgument arg;
  212|  27.9k|        arg.m_Type           = ArgumentType::Label;
  213|  27.9k|        arg.label.label_name = label_name;
  214|  27.9k|        return arg;
  215|  27.9k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  356|      1|        {
  357|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  358|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  359|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  360|       |
  361|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  362|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  363|       |
  364|      1|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  365|      1|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  381|      1|        {
  382|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  383|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  384|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  385|       |
  386|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  387|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  388|       |
  389|      1|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  390|      1|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  436|      1|        {
  437|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  438|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  439|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  440|       |
  441|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  442|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  443|       |
  444|      1|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  445|      1|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  461|      1|        {
  462|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  463|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  464|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  465|       |
  466|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  467|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  468|       |
  469|      1|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  470|      1|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  516|     23|        {
  517|     23|            const auto& dest_reg = arg1.AsRegisterInt();
  518|     23|            const auto& lhs_reg  = arg2.AsRegisterInt();
  519|     23|            const auto& rhs_reg  = arg3.AsRegisterInt();
  520|       |
  521|     23|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  522|     23|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  523|       |
  524|     23|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  525|     23|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  541|      1|        {
  542|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  543|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  544|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  545|       |
  546|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  547|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  548|       |
  549|      1|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  550|      1|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  596|      1|        {
  597|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  598|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  599|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  600|       |
  601|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  602|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  603|       |
  604|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  605|      1|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  621|      1|        {
  622|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  623|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  624|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  625|       |
  626|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  627|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  628|       |
  629|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  630|      1|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  646|      1|        {
  647|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  648|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  649|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  650|       |
  651|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  652|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  653|       |
  654|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (654:17): [True: 1, False: 0]
  ------------------
  655|      1|            {
  656|      1|                processor.Raise(Exception::DivideByZero);
  657|      1|                return;
  658|      1|            }
  659|       |
  660|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  661|       |
  662|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  663|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  667|      1|        {
  668|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  669|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  670|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  671|       |
  672|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  673|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  674|       |
  675|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (675:17): [True: 1, False: 0]
  ------------------
  676|      1|            {
  677|      1|                processor.Raise(Exception::DivideByZero);
  678|      1|                return;
  679|      1|            }
  680|       |
  681|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  682|       |
  683|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  684|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  688|      1|        {
  689|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  690|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  691|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  692|       |
  693|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  694|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  695|       |
  696|      1|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  697|      1|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  714|      1|        {
  715|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  716|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  717|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  718|       |
  719|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  720|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  721|       |
  722|      1|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  723|      1|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  740|      1|        {
  741|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  742|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  743|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  744|       |
  745|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  746|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  747|       |
  748|      1|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  749|      1|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  766|      1|        {
  767|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  768|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  769|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  770|       |
  771|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  772|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  773|       |
  774|      1|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  775|      1|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  792|      1|        {
  793|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  794|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  795|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  796|       |
  797|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  798|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  799|      1|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  800|       |
  801|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  802|      1|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  819|      1|        {
  820|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  821|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  822|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  823|       |
  824|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  825|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  826|      1|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  827|       |
  828|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  829|      1|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  846|      1|        {
  847|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  848|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  849|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  850|       |
  851|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  852|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  853|      1|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  854|       |
  855|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  856|      1|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  873|      1|        {
  874|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  875|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  876|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  877|       |
  878|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  879|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  880|       |
  881|      1|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (881:41): [True: 0, False: 1]
  ------------------
  882|       |
  883|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  884|      1|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  902|      1|        {
  903|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  904|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  905|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  906|       |
  907|      1|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  908|      1|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  909|       |
  910|      1|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (910:41): [True: 0, False: 1]
  ------------------
  911|       |
  912|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  913|      1|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  931|  27.2k|        {
  932|  27.2k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  933|  27.2k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  934|       |
  935|  27.2k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  936|  27.2k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  937|       |
  938|  27.2k|            const phi::boolean new_value = (lhs_value < rhs_value);
  939|       |
  940|  27.2k|            processor.SetFPSRValue(new_value);
  941|  27.2k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  945|  5.05k|        {
  946|  5.05k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  947|  5.05k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  948|       |
  949|  5.05k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  950|  5.05k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  951|       |
  952|  5.05k|            const phi::boolean new_value = (lhs_value < rhs_value);
  953|       |
  954|  5.05k|            processor.SetFPSRValue(new_value);
  955|  5.05k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  959|      1|        {
  960|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  961|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  962|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  963|       |
  964|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  965|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  966|       |
  967|      1|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (967:41): [True: 0, False: 1]
  ------------------
  968|       |
  969|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  970|      1|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  988|      1|        {
  989|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  990|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  991|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  992|       |
  993|      1|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  994|      1|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  995|       |
  996|      1|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (996:41): [True: 0, False: 1]
  ------------------
  997|       |
  998|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  999|      1|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1017|  44.8k|        {
 1018|  44.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1019|  44.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1020|       |
 1021|  44.8k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1022|  44.8k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1023|       |
 1024|  44.8k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1025|       |
 1026|  44.8k|            processor.SetFPSRValue(new_value);
 1027|  44.8k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1031|  15.0k|        {
 1032|  15.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1033|  15.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1034|       |
 1035|  15.0k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1036|  15.0k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1037|       |
 1038|  15.0k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1039|       |
 1040|  15.0k|            processor.SetFPSRValue(new_value);
 1041|  15.0k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1045|      1|        {
 1046|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1047|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1048|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1049|       |
 1050|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1051|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1052|       |
 1053|      1|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1053:41): [True: 1, False: 0]
  ------------------
 1054|       |
 1055|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1056|      1|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1074|      1|        {
 1075|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1076|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1077|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1078|       |
 1079|      1|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1080|      1|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1081|       |
 1082|      1|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1082:41): [True: 1, False: 0]
  ------------------
 1083|       |
 1084|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1085|      1|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1103|  15.2k|        {
 1104|  15.2k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1105|  15.2k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1106|       |
 1107|  15.2k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1108|  15.2k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1109|       |
 1110|  15.2k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1111|       |
 1112|  15.2k|            processor.SetFPSRValue(new_value);
 1113|  15.2k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1117|  77.2k|        {
 1118|  77.2k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1119|  77.2k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1120|       |
 1121|  77.2k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1122|  77.2k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1123|       |
 1124|  77.2k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1125|       |
 1126|  77.2k|            processor.SetFPSRValue(new_value);
 1127|  77.2k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1131|      1|        {
 1132|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1133|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1134|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1135|       |
 1136|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1137|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1138|       |
 1139|      1|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1139:41): [True: 1, False: 0]
  ------------------
 1140|       |
 1141|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1142|      1|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1160|      1|        {
 1161|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1162|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1163|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1164|       |
 1165|      1|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1166|      1|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1167|       |
 1168|      1|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1168:41): [True: 1, False: 0]
  ------------------
 1169|       |
 1170|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1171|      1|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1189|  33.3k|        {
 1190|  33.3k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1191|  33.3k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1192|       |
 1193|  33.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1194|  33.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1195|       |
 1196|  33.3k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1197|       |
 1198|  33.3k|            processor.SetFPSRValue(new_value);
 1199|  33.3k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1203|  30.0k|        {
 1204|  30.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1205|  30.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1206|       |
 1207|  30.0k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1208|  30.0k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1209|       |
 1210|  30.0k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1211|       |
 1212|  30.0k|            processor.SetFPSRValue(new_value);
 1213|  30.0k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1217|      1|        {
 1218|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1219|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1220|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1221|       |
 1222|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1223|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1224|       |
 1225|      1|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1225:41): [True: 1, False: 0]
  ------------------
 1226|       |
 1227|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1228|      1|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1246|      1|        {
 1247|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1248|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1249|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1250|       |
 1251|      1|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1252|      1|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1253|       |
 1254|      1|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1254:41): [True: 1, False: 0]
  ------------------
 1255|       |
 1256|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1257|      1|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1275|  50.8k|        {
 1276|  50.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1277|  50.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1278|       |
 1279|  50.8k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1280|  50.8k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1281|       |
 1282|  50.8k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1283|       |
 1284|  50.8k|            processor.SetFPSRValue(new_value);
 1285|  50.8k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1289|  15.0k|        {
 1290|  15.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1291|  15.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1292|       |
 1293|  15.0k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1294|  15.0k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1295|       |
 1296|  15.0k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1297|       |
 1298|  15.0k|            processor.SetFPSRValue(new_value);
 1299|  15.0k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1303|      1|        {
 1304|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1305|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1306|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1307|       |
 1308|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1309|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1310|       |
 1311|      1|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1311:41): [True: 0, False: 1]
  ------------------
 1312|       |
 1313|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1314|      1|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1332|      1|        {
 1333|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1334|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1335|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1336|       |
 1337|      1|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1338|      1|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1339|       |
 1340|      1|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1340:41): [True: 0, False: 1]
  ------------------
 1341|       |
 1342|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1343|      1|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1361|  46.8k|        {
 1362|  46.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1363|  46.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1364|       |
 1365|  46.8k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1366|  46.8k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1367|       |
 1368|  46.8k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1369|       |
 1370|  46.8k|            processor.SetFPSRValue(new_value);
 1371|  46.8k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1375|  52.0k|        {
 1376|  52.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1377|  52.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1378|       |
 1379|  52.0k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1380|  52.0k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1381|       |
 1382|  52.0k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1383|       |
 1384|  52.0k|            processor.SetFPSRValue(new_value);
 1385|  52.0k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1389|   219k|        {
 1390|   219k|            const auto& test_reg   = arg1.AsRegisterInt();
 1391|   219k|            const auto& jump_label = arg2.AsLabel();
 1392|       |
 1393|   219k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1394|       |
 1395|   219k|            if (test_value == 0)
  ------------------
  |  Branch (1395:17): [True: 219k, False: 0]
  ------------------
 1396|   219k|            {
 1397|   219k|                JumpToLabel(processor, jump_label.label_name);
 1398|   219k|            }
 1399|   219k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1403|      1|        {
 1404|      1|            const auto& test_reg   = arg1.AsRegisterInt();
 1405|      1|            const auto& jump_label = arg2.AsLabel();
 1406|       |
 1407|      1|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1408|       |
 1409|      1|            if (test_value != 0)
  ------------------
  |  Branch (1409:17): [True: 0, False: 1]
  ------------------
 1410|      0|            {
 1411|      0|                JumpToLabel(processor, jump_label.label_name);
 1412|      0|            }
 1413|      1|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1417|  7.87k|        {
 1418|  7.87k|            const auto& jump_label = arg1.AsLabel();
 1419|       |
 1420|  7.87k|            phi::boolean test_value = processor.GetFPSRValue();
 1421|       |
 1422|  7.87k|            if (test_value)
  ------------------
  |  Branch (1422:17): [True: 0, False: 7.87k]
  ------------------
 1423|      0|            {
 1424|      0|                JumpToLabel(processor, jump_label.label_name);
 1425|      0|            }
 1426|  7.87k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1430|  59.9k|        {
 1431|  59.9k|            const auto& jump_label = arg1.AsLabel();
 1432|       |
 1433|  59.9k|            phi::boolean test_value = processor.GetFPSRValue();
 1434|       |
 1435|  59.9k|            if (!test_value)
  ------------------
  |  Branch (1435:17): [True: 59.9k, False: 1]
  ------------------
 1436|  59.9k|            {
 1437|  59.9k|                JumpToLabel(processor, jump_label.label_name);
 1438|  59.9k|            }
 1439|  59.9k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1443|   182k|        {
 1444|   182k|            const auto& jump_label = arg1.AsLabel();
 1445|       |
 1446|   182k|            JumpToLabel(processor, jump_label.label_name);
 1447|   182k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1451|   249k|        {
 1452|   249k|            const auto& jump_register = arg1.AsRegisterInt();
 1453|       |
 1454|   249k|            JumpToRegister(processor, jump_register.register_id);
 1455|   249k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1459|   166k|        {
 1460|   166k|            const auto& jump_label = arg1.AsLabel();
 1461|       |
 1462|   166k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1463|   166k|                                                  processor.GetNextProgramCounter());
 1464|       |
 1465|   166k|            JumpToLabel(processor, jump_label.label_name);
 1466|   166k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1470|  28.0k|        {
 1471|  28.0k|            const auto& jump_register = arg1.AsRegisterInt();
 1472|       |
 1473|  28.0k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1474|  28.0k|                                                  processor.GetNextProgramCounter());
 1475|       |
 1476|  28.0k|            JumpToRegister(processor, jump_register.register_id);
 1477|  28.0k|        }
_ZN3dlx4impl2SFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1890|      5|        {
 1891|      5|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1892|       |
 1893|      5|            if (!optional_address.has_value())
  ------------------
  |  Branch (1893:17): [True: 1, False: 4]
  ------------------
 1894|      1|            {
 1895|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1896|      1|                return;
 1897|      1|            }
 1898|       |
 1899|      4|            phi::i32 address = optional_address.value();
 1900|       |
 1901|      4|            const auto& src_reg = arg2.AsRegisterFloat();
 1902|       |
 1903|      4|            phi::f32 value = processor.FloatRegisterGetFloatValue(src_reg.register_id);
 1904|       |
 1905|      4|            phi::boolean success = processor.GetMemory().StoreFloat(
 1906|      4|                    static_cast<std::size_t>(address.unsafe()), value);
 1907|       |
 1908|      4|            if (!success)
  ------------------
  |  Branch (1908:17): [True: 3, False: 1]
  ------------------
 1909|      3|            {
 1910|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1911|      3|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1912|      3|            }
 1913|      4|        }
_ZN3dlx4impl2SDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1917|      4|        {
 1918|      4|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1919|       |
 1920|      4|            if (!optional_address.has_value())
  ------------------
  |  Branch (1920:17): [True: 1, False: 3]
  ------------------
 1921|      1|            {
 1922|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1923|      1|                return;
 1924|      1|            }
 1925|       |
 1926|      3|            phi::i32 address = optional_address.value();
 1927|       |
 1928|      3|            const auto& src_reg = arg2.AsRegisterFloat();
 1929|       |
 1930|      3|            phi::f64 value = processor.FloatRegisterGetDoubleValue(src_reg.register_id);
 1931|       |
 1932|      3|            phi::boolean success = processor.GetMemory().StoreDouble(
 1933|      3|                    static_cast<std::size_t>(address.unsafe()), value);
 1934|       |
 1935|      3|            if (!success)
  ------------------
  |  Branch (1935:17): [True: 2, False: 1]
  ------------------
 1936|      2|            {
 1937|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1938|      2|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1939|      2|            }
 1940|      3|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1944|     25|        {
 1945|     25|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1946|     25|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1947|       |
 1948|     25|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1949|       |
 1950|     25|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1951|     25|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1955|     19|        {
 1956|     19|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1957|     19|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1958|       |
 1959|     19|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1960|       |
 1961|     19|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1962|     19|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1993|      1|        {
 1994|      1|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1995|      1|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1996|       |
 1997|      1|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1998|       |
 1999|      1|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 2000|      1|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2004|  8.33k|        {
 2005|  8.33k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2006|  8.33k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2007|       |
 2008|  8.33k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2009|  8.33k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2010|  8.33k|            const float        converted_value_float =
 2011|  8.33k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2012|       |
 2013|  8.33k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2014|  8.33k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2018|  5.00k|        {
 2019|  5.00k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2020|  5.00k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2021|       |
 2022|  5.00k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2023|  5.00k|            const float  converted_value = static_cast<float>(src_value);
 2024|       |
 2025|  5.00k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2026|  5.00k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2030|  11.1k|        {
 2031|  11.1k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2032|  11.1k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2033|       |
 2034|  11.1k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2035|  11.1k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2036|  11.1k|            const float        converted_value_float =
 2037|  11.1k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2038|       |
 2039|  11.1k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2040|  11.1k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2044|  5.00k|        {
 2045|  5.00k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2046|  5.00k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2047|       |
 2048|  5.00k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2049|  5.00k|            const std::int32_t converted_value_int =
 2050|  5.00k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2051|  5.00k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2052|       |
 2053|  5.00k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2054|  5.00k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2058|      3|        {
 2059|      3|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2060|      3|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2061|       |
 2062|      3|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2063|      3|            const std::int32_t converted_value_int =
 2064|      3|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2065|      3|            const double converted_value_double = static_cast<double>(converted_value_int);
 2066|       |
 2067|      3|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2068|      3|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2078|      2|        {
 2079|      2|            processor.Raise(Exception::Halt);
 2080|      2|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2084|   325k|        {
 2085|       |            /* Do nothing */
 2086|   325k|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  174|      1|    {
  175|      1|        phi::i64 res = phi::i64(lhs) + rhs;
  176|       |
  177|      1|        SafeWriteInteger(processor, dest_reg, res);
  178|      1|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  129|     25|    {
  130|     25|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  131|     25|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  132|       |
  133|       |        // Check for underflow
  134|     25|        if (value < min)
  ------------------
  |  Branch (134:13): [True: 0, False: 25]
  ------------------
  135|      0|        {
  136|      0|            processor.Raise(Exception::Underflow);
  137|       |
  138|      0|            value = max + (value % (min - 1));
  139|      0|        }
  140|       |        // Check for overflow
  141|     25|        else if (value > max)
  ------------------
  |  Branch (141:18): [True: 0, False: 25]
  ------------------
  142|      0|        {
  143|      0|            processor.Raise(Exception::Overflow);
  144|       |
  145|      0|            value = min + (value % (max + 1));
  146|      0|        }
  147|       |
  148|     25|        PHI_ASSERT(value >= min);
  149|     25|        PHI_ASSERT(value <= max);
  150|       |
  151|     25|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  152|     25|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  182|      1|    {
  183|      1|        phi::u64 res = phi::u64(lhs) + rhs;
  184|       |
  185|      1|        SafeWriteInteger(processor, dest_reg, res);
  186|      1|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  156|      3|    {
  157|      3|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  158|       |
  159|       |        // Check for overflow
  160|      3|        if (value > max)
  ------------------
  |  Branch (160:13): [True: 0, False: 3]
  ------------------
  161|      0|        {
  162|      0|            processor.Raise(Exception::Overflow);
  163|       |
  164|      0|            value %= max + 1u;
  165|      0|        }
  166|       |
  167|      3|        PHI_ASSERT(value <= max);
  168|       |
  169|      3|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  170|      3|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  190|      1|    {
  191|      1|        phi::i64 res = phi::i64(lhs) - rhs;
  192|       |
  193|      1|        SafeWriteInteger(processor, dest_reg, res);
  194|      1|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  198|      1|    {
  199|      1|        constexpr phi::u32 max = phi::u32::limits_type::max();
  200|       |
  201|      1|        if (lhs < rhs)
  ------------------
  |  Branch (201:13): [True: 0, False: 1]
  ------------------
  202|      0|        {
  203|      0|            processor.Raise(Exception::Underflow);
  204|       |
  205|      0|            phi::u64 res = max - rhs + lhs + 1u;
  206|      0|            SafeWriteInteger(processor, dest_reg, res);
  207|      0|            return;
  208|      0|        }
  209|       |
  210|      1|        phi::u64 res = phi::u64(lhs) - rhs;
  211|       |
  212|      1|        SafeWriteInteger(processor, dest_reg, res);
  213|      1|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  217|     23|    {
  218|     23|        phi::i64 res = phi::i64(lhs) * rhs;
  219|       |
  220|     23|        SafeWriteInteger(processor, dest_reg, res);
  221|     23|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  225|      1|    {
  226|      1|        phi::u64 res = phi::u64(lhs) * rhs;
  227|       |
  228|      1|        SafeWriteInteger(processor, dest_reg, res);
  229|      1|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  233|      1|    {
  234|      1|        if (rhs == 0)
  ------------------
  |  Branch (234:13): [True: 1, False: 0]
  ------------------
  235|      1|        {
  236|      1|            processor.Raise(Exception::DivideByZero);
  237|      1|            return;
  238|      1|        }
  239|       |
  240|      0|        phi::i64 res = phi::i64(lhs) / rhs;
  241|       |
  242|      0|        SafeWriteInteger(processor, dest_reg, res);
  243|      0|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  247|      1|    {
  248|      1|        if (rhs == 0u)
  ------------------
  |  Branch (248:13): [True: 1, False: 0]
  ------------------
  249|      1|        {
  250|      1|            processor.Raise(Exception::DivideByZero);
  251|      1|            return;
  252|      1|        }
  253|       |
  254|      0|        phi::u64 res = phi::u64(lhs) / rhs;
  255|       |
  256|      0|        SafeWriteInteger(processor, dest_reg, res);
  257|      0|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  330|      2|    {
  331|      2|        if (shift > 31)
  ------------------
  |  Branch (331:13): [True: 0, False: 2]
  ------------------
  332|      0|        {
  333|      0|            processor.Raise(Exception::BadShift);
  334|       |
  335|       |            // Just set register to 0
  336|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  337|      0|            return;
  338|      0|        }
  339|       |
  340|       |        // Negative shifts are undefined behavior
  341|      2|        if (shift < 0)
  ------------------
  |  Branch (341:13): [True: 0, False: 2]
  ------------------
  342|      0|        {
  343|      0|            processor.Raise(Exception::BadShift);
  344|      0|            return;
  345|      0|        }
  346|       |
  347|      2|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  348|       |
  349|      2|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  350|      2|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  261|      1|    {
  262|       |        // Prevent undefined behavior by shifting by more than 31
  263|      1|        if (shift > 31)
  ------------------
  |  Branch (263:13): [True: 0, False: 1]
  ------------------
  264|      0|        {
  265|      0|            processor.Raise(Exception::BadShift);
  266|       |
  267|       |            // Just set register to 0
  268|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  269|      0|            return;
  270|      0|        }
  271|       |
  272|       |        // Do nothing when shifting by zero to prevent undefined behavior
  273|      1|        if (shift == 0)
  ------------------
  |  Branch (273:13): [True: 1, False: 0]
  ------------------
  274|      1|        {
  275|      1|            processor.IntRegisterSetSignedValue(dest_reg, base);
  276|      1|            return;
  277|      1|        }
  278|       |
  279|       |        // Negative shifts are undefiend behavior
  280|      0|        if (shift < 0)
  ------------------
  |  Branch (280:13): [True: 0, False: 0]
  ------------------
  281|      0|        {
  282|      0|            processor.Raise(Exception::BadShift);
  283|      0|            return;
  284|      0|        }
  285|       |
  286|      0|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  287|       |
  288|      0|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  289|       |
  290|      0|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  291|      0|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  295|      1|    {
  296|       |        // Prevent undefined behavior by shifting by more than 31
  297|      1|        if (shift > 31)
  ------------------
  |  Branch (297:13): [True: 0, False: 1]
  ------------------
  298|      0|        {
  299|      0|            processor.Raise(Exception::BadShift);
  300|       |
  301|       |            // Is negative ie. sign bit is set
  302|      0|            if (base < 0)
  ------------------
  |  Branch (302:17): [True: 0, False: 0]
  ------------------
  303|      0|            {
  304|       |                // Set every byte to 1
  305|      0|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  306|      0|            }
  307|      0|            else
  308|      0|            {
  309|       |                // Set every byte to 0
  310|      0|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  311|      0|            }
  312|      0|            return;
  313|      0|        }
  314|       |
  315|       |        // Negative shifts are undefined behavior
  316|      1|        if (shift < 0)
  ------------------
  |  Branch (316:13): [True: 0, False: 1]
  ------------------
  317|      0|        {
  318|      0|            processor.Raise(Exception::BadShift);
  319|      0|            return;
  320|      0|        }
  321|       |
  322|      1|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  323|       |
  324|      1|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  325|      1|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|   628k|    {
   39|       |        // Lookup the label
   40|   628k|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|   628k|        PHI_ASSERT(program != nullptr);
   42|   628k|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|   628k|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 109, False: 628k]
  ------------------
   45|    109|        {
   46|    109|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|    109|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|    109|            processor.Raise(Exception::UnknownLabel);
   48|    109|            return;
   49|    109|        }
   50|       |
   51|   628k|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|   628k|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|   628k|        processor.SetNextProgramCounter(jump_point);
   56|   628k|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|   277k|    {
   60|   277k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|   277k|        phi::u32 max_address =
   63|   277k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|   277k|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 1, False: 277k]
  ------------------
   65|      1|        {
   66|      1|            processor.Raise(Exception::AddressOutOfBounds);
   67|      1|            return;
   68|      1|        }
   69|       |
   70|   277k|        processor.SetNextProgramCounter(address.unsafe());
   71|   277k|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
  100|      9|    {
  101|      9|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (101:13): [True: 9, False: 0]
  ------------------
  102|      9|        {
  103|      9|            const auto& imm_value = argument.AsImmediateValue();
  104|       |
  105|      9|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (105:17): [True: 2, False: 7]
  ------------------
  106|      2|            {
  107|      2|                return {};
  108|      2|            }
  109|       |
  110|      7|            return imm_value.signed_value;
  111|      9|        }
  112|       |
  113|      0|        if (argument.GetType() == ArgumentType::AddressDisplacement)
  ------------------
  |  Branch (113:13): [True: 0, False: 0]
  ------------------
  114|      0|        {
  115|      0|            const auto& adr_displacement = argument.AsAddressDisplacement();
  116|      0|            return CalculateDisplacementAddress(processor, adr_displacement);
  117|      0|        }
  118|       |
  119|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  120|      0|        PHI_ASSERT_NOT_REACHED();
  121|      0|#endif
  122|      0|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  1.68M|    {
   12|  1.68M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  1.68M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  1.68M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  1.68M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  1.68M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  1.68M|                   "Unexpected argument type for arg1");
   22|  1.68M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  1.68M|                   "Unexpected argument type for arg2");
   24|  1.68M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  1.68M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  1.68M|        m_Executor(processor, arg1, arg2, arg3);
   29|  1.68M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   275k|    {
  453|   275k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   275k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|   691k|    {
   17|   691k|        m_ValueSigned = val;
   18|   691k|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|   194k|    {
   22|   194k|        m_ValueUnsigned = val;
   23|   194k|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|   219k|    {
   27|   219k|        return m_ValueSigned;
   28|   219k|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|   277k|    {
   32|   277k|        return m_ValueUnsigned;
   33|   277k|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|   194k|    {
   37|   194k|        return m_IsReadOnly;
   38|   194k|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   14|      1|    {
   15|      1|        m_Values.resize(starting_size.unsafe());
   16|      1|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  215|      4|    {
  216|      4|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (216:13): [True: 3, False: 1]
  ------------------
  217|      3|        {
  218|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  219|      3|            return false;
  220|      3|        }
  221|       |
  222|      1|        std::size_t index = (address - m_StartingAddress).unsafe();
  223|      1|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  224|       |
  225|      1|        return true;
  226|      4|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  229|      3|    {
  230|      3|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (230:13): [True: 2, False: 1]
  ------------------
  231|      2|        {
  232|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  233|      2|            return false;
  234|      2|        }
  235|       |
  236|      1|        std::size_t index = (address - m_StartingAddress).unsafe();
  237|      1|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  238|       |
  239|      1|        return true;
  240|      3|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  243|      7|    {
  244|      7|        return address >= m_StartingAddress &&
  ------------------
  |  Branch (244:16): [True: 4, False: 3]
  ------------------
  245|      7|               (address + size) <= (m_StartingAddress + m_Values.size());
  ------------------
  |  Branch (245:16): [True: 2, False: 2]
  ------------------
  246|      7|    }
_ZN3dlx11MemoryBlock5ClearEv:
  255|  21.6k|    {
  256|  21.6k|        for (auto& val : m_Values)
  ------------------
  |  Branch (256:24): [True: 21.6M, False: 21.6k]
  ------------------
  257|  21.6M|        {
  258|  21.6M|            val.signed_value = 0;
  259|  21.6M|        }
  260|  21.6k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|  4.10M|    {
   24|  4.10M|        switch (token.length())
   25|  4.10M|        {
   26|       |            // 1 character OpCodes
   27|   632k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 632k, False: 3.47M]
  ------------------
   28|   632k|                char c1 = token[0];
   29|   632k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 139k, False: 493k]
  ------------------
   30|   139k|                {
   31|   139k|                    return OpCode::J;
   32|   139k|                }
   33|   493k|                break;
   34|   632k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|   664k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 664k, False: 3.43M]
  ------------------
   38|   664k|                char c1 = token[0];
   39|   664k|                char c2 = token[1];
   40|       |
   41|   664k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 455k, False: 209k]
  ------------------
   42|   664k|                {
   43|  20.2k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 20.2k, False: 644k]
  ------------------
   44|  38.3k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 18.0k, False: 646k]
  ------------------
   45|  38.3k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 8.15k, False: 30.1k]
  ------------------
   46|  8.15k|                        {
   47|  8.15k|                            return OpCode::JR;
   48|  8.15k|                        }
   49|  30.1k|                        break;
   50|       |
   51|  32.5k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 32.5k, False: 632k]
  ------------------
   52|  58.1k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 25.5k, False: 639k]
  ------------------
   53|  58.1k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 20.0k, False: 38.0k]
  ------------------
   54|  58.1k|                        {
   55|  4.01k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 4.01k, False: 54.0k]
  ------------------
   56|  6.34k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 2.33k, False: 55.7k]
  ------------------
   57|  6.34k|                                return OpCode::LB;
   58|  4.79k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 4.79k, False: 53.3k]
  ------------------
   59|  5.54k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 747, False: 57.3k]
  ------------------
   60|  5.54k|                                return OpCode::LD;
   61|  7.09k|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 7.09k, False: 51.0k]
  ------------------
   62|  9.21k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 2.11k, False: 55.9k]
  ------------------
   63|  9.21k|                                return OpCode::LF;
   64|  2.39k|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 2.39k, False: 55.7k]
  ------------------
   65|  5.30k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 2.90k, False: 55.2k]
  ------------------
   66|  5.30k|                                return OpCode::LH;
   67|  9.78k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 9.78k, False: 48.3k]
  ------------------
   68|  11.6k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 1.88k, False: 56.2k]
  ------------------
   69|  11.6k|                                return OpCode::LW;
   70|  58.1k|                        }
   71|  20.0k|                        break;
   72|  20.0k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 4.43k, False: 660k]
  ------------------
   73|  28.8k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 24.3k, False: 640k]
  ------------------
   74|  28.8k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 11.2k, False: 17.5k]
  ------------------
   75|  11.2k|                        {
   76|  11.2k|                            return OpCode::OR;
   77|  11.2k|                        }
   78|  17.5k|                        break;
   79|  58.6k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 58.6k, False: 606k]
  ------------------
   80|  84.1k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 25.5k, False: 639k]
  ------------------
   81|  84.1k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 28.1k, False: 56.0k]
  ------------------
   82|  84.1k|                        {
   83|  4.53k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 4.53k, False: 79.6k]
  ------------------
   84|  10.6k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 6.09k, False: 78.1k]
  ------------------
   85|  10.6k|                                return OpCode::SB;
   86|  3.55k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 3.55k, False: 80.6k]
  ------------------
   87|  9.20k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 5.64k, False: 78.5k]
  ------------------
   88|  9.20k|                                return OpCode::SD;
   89|  3.20k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 3.20k, False: 80.9k]
  ------------------
   90|  20.8k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 17.5k, False: 66.6k]
  ------------------
   91|  20.8k|                                return OpCode::SF;
   92|  8.10k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 8.10k, False: 76.0k]
  ------------------
   93|  10.4k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 2.36k, False: 81.8k]
  ------------------
   94|  10.4k|                                return OpCode::SH;
   95|  2.06k|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 2.06k, False: 82.1k]
  ------------------
   96|  4.93k|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 2.87k, False: 81.3k]
  ------------------
   97|  4.93k|                                return OpCode::SW;
   98|  84.1k|                        }
   99|  28.1k|                        break;
  100|   664k|                }
  101|   551k|                break;
  102|   664k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   919k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 919k, False: 3.18M]
  ------------------
  106|   919k|                char c1 = token[0];
  107|   919k|                char c2 = token[1];
  108|   919k|                char c3 = token[2];
  109|       |
  110|   919k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 373k, False: 545k]
  ------------------
  111|   919k|                {
  112|  8.54k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 8.54k, False: 910k]
  ------------------
  113|  30.4k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 21.9k, False: 897k]
  ------------------
  114|  30.4k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 13.3k, False: 17.0k]
  |  Branch (114:29): [True: 6.03k, False: 24.4k]
  |  Branch (114:45): [True: 6.03k, False: 7.34k]
  ------------------
  115|  6.03k|                        {
  116|  6.03k|                            return OpCode::ADD;
  117|  6.03k|                        }
  118|  24.4k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 11.4k, False: 13.0k]
  |  Branch (118:34): [True: 7.99k, False: 16.4k]
  |  Branch (118:50): [True: 7.99k, False: 3.42k]
  ------------------
  119|  7.99k|                        {
  120|  7.99k|                            return OpCode::AND;
  121|  7.99k|                        }
  122|  16.4k|                        break;
  123|       |
  124|  16.4k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 11.8k, False: 907k]
  ------------------
  125|  25.7k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 13.8k, False: 905k]
  ------------------
  126|  25.7k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 14.7k, False: 10.9k]
  |  Branch (126:29): [True: 6.72k, False: 18.9k]
  |  Branch (126:45): [True: 6.72k, False: 8.02k]
  ------------------
  127|  6.72k|                        {
  128|  6.72k|                            return OpCode::DIV;
  129|  6.72k|                        }
  130|  18.9k|                        break;
  131|       |
  132|  18.9k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 3.87k, False: 915k]
  ------------------
  133|  20.9k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 17.0k, False: 902k]
  ------------------
  134|  20.9k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 16.3k, False: 4.60k]
  ------------------
  135|  16.3k|                        {
  136|  16.3k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 6.28k, False: 10.0k]
  ------------------
  137|  6.28k|                            {
  138|  6.28k|                                return OpCode::EQD;
  139|  6.28k|                            }
  140|  10.0k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 7.36k, False: 2.66k]
  ------------------
  141|  7.36k|                            {
  142|  7.36k|                                return OpCode::EQF;
  143|  7.36k|                            }
  144|  16.3k|                        }
  145|  7.26k|                        break;
  146|       |
  147|  13.3k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 13.3k, False: 906k]
  ------------------
  148|  38.5k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 25.1k, False: 894k]
  ------------------
  149|  38.5k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 19.8k, False: 18.6k]
  ------------------
  150|  19.8k|                        {
  151|  19.8k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 9.31k, False: 10.5k]
  ------------------
  152|  9.31k|                            {
  153|  9.31k|                                return OpCode::GED;
  154|  9.31k|                            }
  155|  10.5k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 8.63k, False: 1.93k]
  ------------------
  156|  8.63k|                            {
  157|  8.63k|                                return OpCode::GEF;
  158|  8.63k|                            }
  159|  19.8k|                        }
  160|  18.6k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 14.0k, False: 4.63k]
  ------------------
  161|  14.0k|                        {
  162|  14.0k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 4.78k, False: 9.23k]
  ------------------
  163|  4.78k|                            {
  164|  4.78k|                                return OpCode::GTD;
  165|  4.78k|                            }
  166|  9.23k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 5.91k, False: 3.32k]
  ------------------
  167|  5.91k|                            {
  168|  5.91k|                                return OpCode::GTF;
  169|  5.91k|                            }
  170|  9.23k|                        }
  171|  9.89k|                        break;
  172|       |
  173|  19.3k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 19.3k, False: 900k]
  ------------------
  174|  27.6k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 8.30k, False: 911k]
  ------------------
  175|  27.6k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 13.4k, False: 14.2k]
  |  Branch (175:29): [True: 4.37k, False: 23.2k]
  |  Branch (175:45): [True: 4.37k, False: 9.05k]
  ------------------
  176|  4.37k|                        {
  177|  4.37k|                            return OpCode::JAL;
  178|  4.37k|                        }
  179|  23.2k|                        break;
  180|       |
  181|  76.0k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 76.0k, False: 843k]
  ------------------
  182|   124k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 48.2k, False: 871k]
  ------------------
  183|   124k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 18.9k, False: 105k]
  ------------------
  184|   124k|                        {
  185|  11.0k|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 11.0k, False: 113k]
  ------------------
  186|  17.5k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 6.45k, False: 117k]
  ------------------
  187|  17.5k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 6.97k, False: 10.5k]
  ------------------
  188|  6.97k|                                {
  189|  6.97k|                                    return OpCode::LBU;
  190|  6.97k|                                }
  191|  10.5k|                                break;
  192|       |
  193|  10.5k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 5.18k, False: 119k]
  ------------------
  194|  14.8k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 9.70k, False: 114k]
  ------------------
  195|  14.8k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 5.10k, False: 9.79k]
  ------------------
  196|  5.10k|                                {
  197|  5.10k|                                    return OpCode::LED;
  198|  5.10k|                                }
  199|  9.79k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 6.52k, False: 3.27k]
  ------------------
  200|  6.52k|                                {
  201|  6.52k|                                    return OpCode::LEF;
  202|  6.52k|                                }
  203|  3.27k|                                break;
  204|       |
  205|  7.08k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 7.08k, False: 117k]
  ------------------
  206|  24.4k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 17.3k, False: 106k]
  ------------------
  207|  24.4k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 9.21k, False: 15.2k]
  ------------------
  208|  9.21k|                                {
  209|  9.21k|                                    return OpCode::LHI;
  210|  9.21k|                                }
  211|  15.2k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 9.54k, False: 5.72k]
  ------------------
  212|  9.54k|                                {
  213|  9.54k|                                    return OpCode::LHU;
  214|  9.54k|                                }
  215|  5.72k|                                break;
  216|       |
  217|  18.8k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 18.8k, False: 105k]
  ------------------
  218|  28.4k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 9.62k, False: 114k]
  ------------------
  219|  28.4k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 18.1k, False: 10.3k]
  ------------------
  220|  18.1k|                                {
  221|  18.1k|                                    return OpCode::LTD;
  222|  18.1k|                                }
  223|  10.3k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 5.83k, False: 4.49k]
  ------------------
  224|  5.83k|                                {
  225|  5.83k|                                    return OpCode::LTF;
  226|  5.83k|                                }
  227|  4.49k|                                break;
  228|       |
  229|  7.97k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 7.97k, False: 116k]
  ------------------
  230|  20.0k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 12.0k, False: 112k]
  ------------------
  231|  20.0k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 10.1k, False: 9.93k]
  ------------------
  232|  10.1k|                                {
  233|  10.1k|                                    return OpCode::LWU;
  234|  10.1k|                                }
  235|  9.93k|                                break;
  236|   124k|                        }
  237|  52.9k|                        break;
  238|       |
  239|  52.9k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 30.9k, False: 888k]
  ------------------
  240|  39.6k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 8.67k, False: 910k]
  ------------------
  241|  39.6k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 24.8k, False: 14.7k]
  ------------------
  242|  24.8k|                        {
  243|  24.8k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 11.8k, False: 12.9k]
  ------------------
  244|  11.8k|                            {
  245|  11.8k|                                return OpCode::NED;
  246|  11.8k|                            }
  247|  12.9k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 5.54k, False: 7.41k]
  ------------------
  248|  5.54k|                            {
  249|  5.54k|                                return OpCode::NEF;
  250|  5.54k|                            }
  251|  24.8k|                        }
  252|  14.7k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 8.41k, False: 6.36k]
  |  Branch (252:34): [True: 4.80k, False: 9.97k]
  |  Branch (252:50): [True: 4.80k, False: 3.61k]
  ------------------
  253|  4.80k|                        {
  254|  4.80k|                            return OpCode::NOP;
  255|  4.80k|                        }
  256|       |
  257|  17.3k|                        break;
  258|       |
  259|  17.3k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 8.06k, False: 911k]
  ------------------
  260|  32.0k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 24.0k, False: 895k]
  ------------------
  261|  32.0k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 19.8k, False: 12.2k]
  |  Branch (261:29): [True: 6.05k, False: 26.0k]
  |  Branch (261:45): [True: 6.05k, False: 13.8k]
  ------------------
  262|  6.05k|                        {
  263|  6.05k|                            return OpCode::ORI;
  264|  6.05k|                        }
  265|  26.0k|                        break;
  266|       |
  267|  75.3k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 75.3k, False: 844k]
  ------------------
  268|   189k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 114k, False: 804k]
  ------------------
  269|   189k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 12.8k, False: 177k]
  ------------------
  270|   189k|                        {
  271|  7.29k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 7.29k, False: 182k]
  ------------------
  272|  18.5k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 11.2k, False: 178k]
  ------------------
  273|  18.5k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 8.83k, False: 9.68k]
  ------------------
  274|  8.83k|                                {
  275|  8.83k|                                    return OpCode::SBU;
  276|  8.83k|                                }
  277|  9.68k|                                break;
  278|       |
  279|  12.4k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 12.4k, False: 177k]
  ------------------
  280|  16.7k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 4.32k, False: 185k]
  ------------------
  281|  16.7k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 8.49k, False: 8.30k]
  ------------------
  282|  8.49k|                                {
  283|  8.49k|                                    return OpCode::SEQ;
  284|  8.49k|                                }
  285|  8.30k|                                break;
  286|       |
  287|  8.30k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 4.29k, False: 185k]
  ------------------
  288|  18.7k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 14.4k, False: 175k]
  ------------------
  289|  18.7k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 7.86k, False: 10.8k]
  ------------------
  290|  7.86k|                                {
  291|  7.86k|                                    return OpCode::SGE;
  292|  7.86k|                                }
  293|  10.8k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 6.55k, False: 4.30k]
  ------------------
  294|  6.55k|                                {
  295|  6.55k|                                    return OpCode::SGT;
  296|  6.55k|                                }
  297|  4.30k|                                break;
  298|       |
  299|  13.5k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 13.5k, False: 176k]
  ------------------
  300|  17.5k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 3.97k, False: 185k]
  ------------------
  301|  17.5k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 6.80k, False: 10.7k]
  ------------------
  302|  6.80k|                                {
  303|  6.80k|                                    return OpCode::SHU;
  304|  6.80k|                                }
  305|  10.7k|                                break;
  306|       |
  307|  26.2k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 26.2k, False: 163k]
  ------------------
  308|  36.2k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 9.99k, False: 179k]
  ------------------
  309|  36.2k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 5.45k, False: 30.7k]
  ------------------
  310|  36.2k|                                {
  311|  3.85k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 3.85k, False: 32.3k]
  ------------------
  312|  8.48k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 4.62k, False: 31.6k]
  ------------------
  313|  8.48k|                                        return OpCode::SLA;
  314|       |
  315|  3.66k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 3.66k, False: 32.5k]
  ------------------
  316|  7.31k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 3.64k, False: 32.5k]
  ------------------
  317|  7.31k|                                        return OpCode::SLE;
  318|       |
  319|  2.25k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 2.25k, False: 33.9k]
  ------------------
  320|  6.42k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 4.17k, False: 32.0k]
  ------------------
  321|  6.42k|                                        return OpCode::SLL;
  322|       |
  323|  5.33k|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 5.33k, False: 30.9k]
  ------------------
  324|  8.56k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 3.22k, False: 33.0k]
  ------------------
  325|  8.56k|                                        return OpCode::SLT;
  326|  36.2k|                                }
  327|  5.45k|                                break;
  328|       |
  329|  7.46k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 7.46k, False: 182k]
  ------------------
  330|  11.8k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 4.41k, False: 185k]
  ------------------
  331|  11.8k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 5.83k, False: 6.04k]
  ------------------
  332|  5.83k|                                {
  333|  5.83k|                                    return OpCode::SNE;
  334|  5.83k|                                }
  335|  6.04k|                                break;
  336|       |
  337|  18.0k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 18.0k, False: 171k]
  ------------------
  338|  27.3k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 9.29k, False: 180k]
  ------------------
  339|  27.3k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 15.1k, False: 12.2k]
  ------------------
  340|  15.1k|                                {
  341|  15.1k|                                    return OpCode::SRA;
  342|  15.1k|                                }
  343|  12.2k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 3.18k, False: 9.09k]
  ------------------
  344|  3.18k|                                {
  345|  3.18k|                                    return OpCode::SRL;
  346|  3.18k|                                }
  347|  9.09k|                                break;
  348|       |
  349|  9.09k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 5.80k, False: 184k]
  ------------------
  350|  15.4k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 9.66k, False: 180k]
  ------------------
  351|  15.4k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 6.68k, False: 8.77k]
  ------------------
  352|  6.68k|                                {
  353|  6.68k|                                    return OpCode::SUB;
  354|  6.68k|                                }
  355|  8.77k|                                break;
  356|       |
  357|  8.77k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 4.22k, False: 185k]
  ------------------
  358|  14.5k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 10.3k, False: 179k]
  ------------------
  359|  14.5k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 10.1k, False: 4.39k]
  ------------------
  360|  10.1k|                                {
  361|  10.1k|                                    return OpCode::SWU;
  362|  10.1k|                                }
  363|  4.39k|                                break;
  364|   189k|                        }
  365|       |
  366|  82.0k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 2.39k, False: 917k]
  ------------------
  367|  95.8k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 13.8k, False: 905k]
  ------------------
  368|  95.8k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 13.5k, False: 82.2k]
  |  Branch (368:29): [True: 8.04k, False: 87.7k]
  |  Branch (368:45): [True: 8.04k, False: 5.50k]
  ------------------
  369|  8.04k|                        {
  370|  8.04k|                            return OpCode::XOR;
  371|  8.04k|                        }
  372|  87.7k|                        break;
  373|   919k|                }
  374|   633k|                break;
  375|   919k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   820k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 820k, False: 3.28M]
  ------------------
  379|   820k|                char c1 = token[0];
  380|   820k|                char c2 = token[1];
  381|   820k|                char c3 = token[2];
  382|   820k|                char c4 = token[3];
  383|       |
  384|   820k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 278k, False: 541k]
  ------------------
  385|   820k|                {
  386|  6.76k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 6.76k, False: 813k]
  ------------------
  387|  55.3k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 48.6k, False: 771k]
  ------------------
  388|  55.3k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 8.25k, False: 47.1k]
  ------------------
  389|  55.3k|                        {
  390|  23.5k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 23.5k, False: 31.8k]
  ------------------
  391|  30.1k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 6.61k, False: 48.7k]
  ------------------
  392|  30.1k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 23.8k, False: 6.30k]
  ------------------
  393|  23.8k|                                {
  394|  23.8k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 3.53k, False: 20.2k]
  ------------------
  395|  23.8k|                                    {
  396|  2.91k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 2.91k, False: 20.9k]
  ------------------
  397|  5.99k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 3.08k, False: 20.7k]
  ------------------
  398|  5.99k|                                            return OpCode::ADDD;
  399|       |
  400|  2.58k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 2.58k, False: 21.2k]
  ------------------
  401|  4.02k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 1.44k, False: 22.3k]
  ------------------
  402|  4.02k|                                            return OpCode::ADDF;
  403|       |
  404|  3.32k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 3.32k, False: 20.5k]
  ------------------
  405|  4.66k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 1.34k, False: 22.4k]
  ------------------
  406|  4.66k|                                            return OpCode::ADDI;
  407|       |
  408|  3.11k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 3.11k, False: 20.7k]
  ------------------
  409|  5.59k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 2.48k, False: 21.3k]
  ------------------
  410|  5.59k|                                            return OpCode::ADDU;
  411|  23.8k|                                    }
  412|  23.8k|                                }
  413|  9.83k|                                break;
  414|       |
  415|  14.9k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 14.9k, False: 40.4k]
  ------------------
  416|  17.0k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 2.06k, False: 53.3k]
  ------------------
  417|  17.0k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 14.7k, False: 2.21k]
  |  Branch (417:37): [True: 8.74k, False: 8.25k]
  |  Branch (417:53): [True: 8.74k, False: 6.04k]
  ------------------
  418|  8.74k|                                {
  419|  8.74k|                                    return OpCode::ANDI;
  420|  8.74k|                                }
  421|       |
  422|  8.25k|                                break;
  423|  55.3k|                        }
  424|  26.3k|                        break;
  425|       |
  426|  26.3k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 20.2k, False: 800k]
  ------------------
  427|  52.1k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 31.9k, False: 788k]
  ------------------
  428|  52.1k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 6.72k, False: 45.4k]
  ------------------
  429|  52.1k|                        {
  430|  10.6k|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 10.6k, False: 41.5k]
  ------------------
  431|  12.2k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 1.66k, False: 50.4k]
  ------------------
  432|  12.2k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 10.1k, False: 2.16k]
  |  Branch (432:37): [True: 7.29k, False: 4.99k]
  |  Branch (432:53): [True: 7.29k, False: 2.83k]
  ------------------
  433|  7.29k|                                {
  434|  7.29k|                                    return OpCode::BEQZ;
  435|  7.29k|                                }
  436|  4.99k|                                break;
  437|       |
  438|  6.12k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 6.12k, False: 46.0k]
  ------------------
  439|  17.7k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 11.6k, False: 40.4k]
  ------------------
  440|  17.7k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 13.5k, False: 4.25k]
  ------------------
  441|  13.5k|                                {
  442|  13.5k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 3.34k, False: 10.1k]
  ------------------
  443|  3.34k|                                    {
  444|  3.34k|                                        return OpCode::BFPF;
  445|  3.34k|                                    }
  446|  10.1k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 6.30k, False: 3.89k]
  ------------------
  447|  6.30k|                                    {
  448|  6.30k|                                        return OpCode::BFPT;
  449|  6.30k|                                    }
  450|  13.5k|                                }
  451|  8.14k|                                break;
  452|       |
  453|  12.9k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 12.9k, False: 39.1k]
  ------------------
  454|  15.3k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 2.36k, False: 49.7k]
  ------------------
  455|  15.3k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 10.0k, False: 5.32k]
  |  Branch (455:37): [True: 8.04k, False: 7.29k]
  |  Branch (455:53): [True: 8.04k, False: 1.97k]
  ------------------
  456|  8.04k|                                {
  457|  8.04k|                                    return OpCode::BNEZ;
  458|  8.04k|                                }
  459|  52.1k|                        }
  460|  27.1k|                        break;
  461|       |
  462|  27.1k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 23.7k, False: 796k]
  ------------------
  463|  47.5k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 23.7k, False: 796k]
  ------------------
  464|  47.5k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 38.6k, False: 8.88k]
  |  Branch (464:29): [True: 33.9k, False: 13.6k]
  |  Branch (464:45): [True: 33.9k, False: 4.73k]
  ------------------
  465|  33.9k|                        {
  466|  33.9k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 8.64k, False: 25.2k]
  ------------------
  467|  33.9k|                            {
  468|  2.59k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 2.59k, False: 31.3k]
  ------------------
  469|  6.70k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 4.11k, False: 29.7k]
  ------------------
  470|  6.70k|                                    return OpCode::DIVD;
  471|       |
  472|  3.74k|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 3.74k, False: 30.1k]
  ------------------
  473|  6.04k|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 2.30k, False: 31.6k]
  ------------------
  474|  6.04k|                                    return OpCode::DIVF;
  475|       |
  476|  1.15k|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 1.15k, False: 32.7k]
  ------------------
  477|  4.14k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 2.99k, False: 30.9k]
  ------------------
  478|  4.14k|                                    return OpCode::DIVI;
  479|       |
  480|  3.97k|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 3.97k, False: 29.9k]
  ------------------
  481|  8.35k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 4.37k, False: 29.5k]
  ------------------
  482|  8.35k|                                    return OpCode::DIVU;
  483|  33.9k|                            }
  484|  33.9k|                        }
  485|  22.2k|                        break;
  486|       |
  487|  22.2k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 13.2k, False: 807k]
  ------------------
  488|  21.1k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 7.95k, False: 812k]
  ------------------
  489|  21.1k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 12.4k, False: 8.69k]
  |  Branch (489:29): [True: 7.27k, False: 13.9k]
  |  Branch (489:45): [True: 10.5k, False: 1.91k]
  |  Branch (489:61): [True: 7.27k, False: 3.31k]
  ------------------
  490|  7.27k|                        {
  491|  7.27k|                            return OpCode::HALT;
  492|  7.27k|                        }
  493|  13.9k|                        break;
  494|       |
  495|  15.8k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 15.8k, False: 804k]
  ------------------
  496|  23.3k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 7.52k, False: 812k]
  ------------------
  497|  23.3k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 12.0k, False: 11.3k]
  |  Branch (497:29): [True: 3.77k, False: 19.5k]
  |  Branch (497:45): [True: 7.29k, False: 4.75k]
  |  Branch (497:61): [True: 3.77k, False: 3.52k]
  ------------------
  498|  3.77k|                        {
  499|  3.77k|                            return OpCode::JALR;
  500|  3.77k|                        }
  501|  19.5k|                        break;
  502|       |
  503|  23.4k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 23.4k, False: 796k]
  ------------------
  504|  41.9k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 18.4k, False: 801k]
  ------------------
  505|  41.9k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 21.1k, False: 20.8k]
  |  Branch (505:29): [True: 16.5k, False: 25.3k]
  |  Branch (505:45): [True: 16.5k, False: 4.55k]
  ------------------
  506|  16.5k|                        {
  507|  16.5k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 4.63k, False: 11.9k]
  ------------------
  508|  4.63k|                            {
  509|  4.63k|                                return OpCode::MOVD;
  510|  4.63k|                            }
  511|  11.9k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 6.13k, False: 5.82k]
  ------------------
  512|  6.13k|                            {
  513|  6.13k|                                return OpCode::MOVF;
  514|  6.13k|                            }
  515|  16.5k|                        }
  516|  25.3k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 18.1k, False: 7.23k]
  |  Branch (516:34): [True: 5.32k, False: 20.0k]
  |  Branch (516:50): [True: 12.9k, False: 5.23k]
  |  Branch (516:66): [True: 5.32k, False: 7.58k]
  ------------------
  517|  5.32k|                        {
  518|  5.32k|                            return OpCode::MULT;
  519|  5.32k|                        }
  520|  25.8k|                        break;
  521|       |
  522|   118k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 118k, False: 701k]
  ------------------
  523|   241k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 123k, False: 697k]
  ------------------
  524|   241k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 19.8k, False: 222k]
  ------------------
  525|   241k|                        {
  526|  10.8k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 10.8k, False: 231k]
  ------------------
  527|  22.8k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 12.0k, False: 229k]
  ------------------
  528|  22.8k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 18.7k, False: 4.14k]
  ------------------
  529|  18.7k|                                {
  530|  18.7k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 4.55k, False: 14.1k]
  ------------------
  531|  4.55k|                                    {
  532|  4.55k|                                        return OpCode::SEQI;
  533|  4.55k|                                    }
  534|  14.1k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 6.38k, False: 7.79k]
  ------------------
  535|  6.38k|                                    {
  536|  6.38k|                                        return OpCode::SEQU;
  537|  6.38k|                                    }
  538|  18.7k|                                }
  539|  11.9k|                                break;
  540|       |
  541|  11.9k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 8.36k, False: 233k]
  ------------------
  542|  36.8k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 28.4k, False: 213k]
  ------------------
  543|  36.8k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 14.4k, False: 22.3k]
  ------------------
  544|  14.4k|                                {
  545|  14.4k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 7.77k, False: 6.71k]
  ------------------
  546|  7.77k|                                    {
  547|  7.77k|                                        return OpCode::SGEI;
  548|  7.77k|                                    }
  549|  6.71k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 5.42k, False: 1.29k]
  ------------------
  550|  5.42k|                                    {
  551|  5.42k|                                        return OpCode::SGEU;
  552|  5.42k|                                    }
  553|  14.4k|                                }
  554|  22.3k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 18.1k, False: 4.12k]
  ------------------
  555|  18.1k|                                {
  556|  18.1k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 5.87k, False: 12.3k]
  ------------------
  557|  5.87k|                                    {
  558|  5.87k|                                        return OpCode::SGTI;
  559|  5.87k|                                    }
  560|  12.3k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 8.00k, False: 4.30k]
  ------------------
  561|  8.00k|                                    {
  562|  8.00k|                                        return OpCode::SGTU;
  563|  8.00k|                                    }
  564|  18.1k|                                }
  565|  9.72k|                                break;
  566|       |
  567|  64.6k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 64.6k, False: 177k]
  ------------------
  568|  74.0k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 9.44k, False: 232k]
  ------------------
  569|  74.0k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 5.32k, False: 68.7k]
  ------------------
  570|  74.0k|                                {
  571|  9.75k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 9.75k, False: 64.2k]
  ------------------
  572|  11.1k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 1.37k, False: 72.6k]
  ------------------
  573|  11.1k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 9.59k, False: 1.53k]
  ------------------
  574|  9.59k|                                        {
  575|  9.59k|                                            return OpCode::SLAI;
  576|  9.59k|                                        }
  577|  1.53k|                                        break;
  578|       |
  579|  15.9k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 15.9k, False: 58.0k]
  ------------------
  580|  19.1k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 3.21k, False: 70.8k]
  ------------------
  581|  19.1k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 10.7k, False: 8.37k]
  ------------------
  582|  10.7k|                                        {
  583|  10.7k|                                            return OpCode::SLEI;
  584|  10.7k|                                        }
  585|  8.37k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 5.05k, False: 3.32k]
  ------------------
  586|  5.05k|                                        {
  587|  5.05k|                                            return OpCode::SLEU;
  588|  5.05k|                                        }
  589|  3.32k|                                        break;
  590|       |
  591|  6.61k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 6.61k, False: 67.4k]
  ------------------
  592|  12.2k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 5.66k, False: 68.3k]
  ------------------
  593|  12.2k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 6.53k, False: 5.75k]
  ------------------
  594|  6.53k|                                        {
  595|  6.53k|                                            return OpCode::SLLI;
  596|  6.53k|                                        }
  597|  5.75k|                                        break;
  598|       |
  599|  10.9k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 10.9k, False: 63.1k]
  ------------------
  600|  26.1k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 15.2k, False: 58.8k]
  ------------------
  601|  26.1k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 9.11k, False: 17.0k]
  ------------------
  602|  9.11k|                                        {
  603|  9.11k|                                            return OpCode::SLTI;
  604|  9.11k|                                        }
  605|  17.0k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 8.03k, False: 8.98k]
  ------------------
  606|  8.03k|                                        {
  607|  8.03k|                                            return OpCode::SLTU;
  608|  8.03k|                                        }
  609|  8.98k|                                        break;
  610|  74.0k|                                }
  611|       |
  612|  39.8k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 14.9k, False: 226k]
  ------------------
  613|  43.0k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 3.20k, False: 238k]
  ------------------
  614|  43.0k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 17.6k, False: 25.3k]
  ------------------
  615|  17.6k|                                {
  616|  17.6k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 6.45k, False: 11.2k]
  ------------------
  617|  6.45k|                                    {
  618|  6.45k|                                        return OpCode::SNEI;
  619|  6.45k|                                    }
  620|  11.2k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 4.90k, False: 6.33k]
  ------------------
  621|  4.90k|                                    {
  622|  4.90k|                                        return OpCode::SNEU;
  623|  4.90k|                                    }
  624|  17.6k|                                }
  625|  31.7k|                                break;
  626|       |
  627|  31.7k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 7.73k, False: 234k]
  ------------------
  628|  24.5k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 16.7k, False: 225k]
  ------------------
  629|  24.5k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 15.4k, False: 9.11k]
  |  Branch (629:37): [True: 10.2k, False: 14.2k]
  |  Branch (629:53): [True: 10.2k, False: 5.16k]
  ------------------
  630|  10.2k|                                {
  631|  10.2k|                                    return OpCode::SRAI;
  632|  10.2k|                                }
  633|  14.2k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 7.53k, False: 6.73k]
  |  Branch (633:42): [True: 5.86k, False: 8.40k]
  |  Branch (633:58): [True: 5.86k, False: 1.67k]
  ------------------
  634|  5.86k|                                {
  635|  5.86k|                                    return OpCode::SRLI;
  636|  5.86k|                                }
  637|  8.40k|                                break;
  638|       |
  639|  24.3k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 24.3k, False: 217k]
  ------------------
  640|  45.5k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 21.2k, False: 220k]
  ------------------
  641|  45.5k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 43.6k, False: 1.91k]
  ------------------
  642|  43.6k|                                {
  643|  43.6k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 5.29k, False: 38.3k]
  ------------------
  644|  43.6k|                                    {
  645|  4.20k|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 4.20k, False: 39.4k]
  ------------------
  646|  10.5k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 6.36k, False: 37.3k]
  ------------------
  647|  10.5k|                                            return OpCode::SUBD;
  648|       |
  649|  7.50k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 7.50k, False: 36.1k]
  ------------------
  650|  10.8k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 3.30k, False: 40.3k]
  ------------------
  651|  10.8k|                                            return OpCode::SUBF;
  652|       |
  653|  6.48k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 6.48k, False: 37.1k]
  ------------------
  654|  9.84k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 3.35k, False: 40.3k]
  ------------------
  655|  9.84k|                                            return OpCode::SUBI;
  656|       |
  657|  3.65k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 3.65k, False: 40.0k]
  ------------------
  658|  7.15k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 3.50k, False: 40.1k]
  ------------------
  659|  7.15k|                                            return OpCode::SUBU;
  660|  43.6k|                                    }
  661|  43.6k|                                }
  662|  7.20k|                                break;
  663|   241k|                        }
  664|  88.8k|                        break;
  665|       |
  666|  88.8k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 28.3k, False: 791k]
  ------------------
  667|  35.8k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 7.53k, False: 812k]
  ------------------
  668|  35.8k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 26.0k, False: 9.85k]
  |  Branch (668:29): [True: 5.94k, False: 29.9k]
  |  Branch (668:45): [True: 11.8k, False: 14.1k]
  |  Branch (668:61): [True: 5.94k, False: 5.93k]
  ------------------
  669|  5.94k|                        {
  670|  5.94k|                            return OpCode::TRAP;
  671|  5.94k|                        }
  672|  29.9k|                        break;
  673|  29.9k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 3.60k, False: 816k]
  ------------------
  674|  22.5k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 18.9k, False: 801k]
  ------------------
  675|  22.5k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 20.2k, False: 2.29k]
  |  Branch (675:29): [True: 5.62k, False: 16.9k]
  |  Branch (675:45): [True: 12.6k, False: 7.61k]
  |  Branch (675:61): [True: 5.62k, False: 7.06k]
  ------------------
  676|  5.62k|                        {
  677|  5.62k|                            return OpCode::XORI;
  678|  5.62k|                        }
  679|  16.9k|                        break;
  680|   820k|                }
  681|   549k|                break;
  682|   820k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|   549k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 438k, False: 3.66M]
  ------------------
  686|   438k|                char c1 = token[0];
  687|   438k|                char c2 = token[1];
  688|   438k|                char c3 = token[2];
  689|   438k|                char c4 = token[3];
  690|   438k|                char c5 = token[4];
  691|       |
  692|   438k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 176k, False: 262k]
  ------------------
  693|   438k|                {
  694|  5.67k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 5.67k, False: 432k]
  ------------------
  695|  29.1k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 23.4k, False: 415k]
  ------------------
  696|  29.1k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 19.6k, False: 9.53k]
  |  Branch (696:29): [True: 4.96k, False: 24.1k]
  |  Branch (696:45): [True: 13.9k, False: 5.68k]
  |  Branch (696:61): [True: 7.41k, False: 6.52k]
  |  Branch (696:77): [True: 4.96k, False: 2.44k]
  ------------------
  697|  4.96k|                        {
  698|  4.96k|                            return OpCode::ADDUI;
  699|  4.96k|                        }
  700|  24.1k|                        break;
  701|       |
  702|  24.1k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 23.7k, False: 414k]
  ------------------
  703|  35.6k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 11.8k, False: 426k]
  ------------------
  704|  35.6k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 29.3k, False: 6.25k]
  |  Branch (704:29): [True: 4.77k, False: 30.8k]
  |  Branch (704:45): [True: 26.5k, False: 2.86k]
  |  Branch (704:61): [True: 12.9k, False: 13.5k]
  |  Branch (704:77): [True: 4.77k, False: 8.18k]
  ------------------
  705|  4.77k|                        {
  706|  4.77k|                            return OpCode::DIVUI;
  707|  4.77k|                        }
  708|  30.8k|                        break;
  709|       |
  710|  30.8k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 14.3k, False: 424k]
  ------------------
  711|  57.0k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 42.7k, False: 395k]
  ------------------
  712|  57.0k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 49.6k, False: 7.44k]
  |  Branch (712:29): [True: 36.2k, False: 20.8k]
  |  Branch (712:45): [True: 43.7k, False: 5.86k]
  |  Branch (712:61): [True: 36.2k, False: 7.57k]
  ------------------
  713|  36.2k|                        {
  714|  36.2k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 6.99k, False: 29.2k]
  ------------------
  715|  36.2k|                            {
  716|  2.30k|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 2.30k, False: 33.9k]
  ------------------
  717|  3.75k|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 1.44k, False: 34.7k]
  ------------------
  718|  3.75k|                                    return OpCode::MULTD;
  719|       |
  720|  4.96k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 4.96k, False: 31.2k]
  ------------------
  721|  9.58k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 4.62k, False: 31.5k]
  ------------------
  722|  9.58k|                                    return OpCode::MULTF;
  723|       |
  724|  2.00k|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 2.00k, False: 34.2k]
  ------------------
  725|  6.07k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 4.07k, False: 32.1k]
  ------------------
  726|  6.07k|                                    return OpCode::MULTI;
  727|       |
  728|  3.05k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 3.05k, False: 33.1k]
  ------------------
  729|  9.79k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 6.74k, False: 29.4k]
  ------------------
  730|  9.79k|                                    return OpCode::MULTU;
  731|  36.2k|                            }
  732|  36.2k|                        }
  733|  27.8k|                        break;
  734|       |
  735|  47.9k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 47.9k, False: 390k]
  ------------------
  736|   140k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 92.2k, False: 346k]
  ------------------
  737|   140k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 15.9k, False: 124k]
  ------------------
  738|   140k|                        {
  739|  15.4k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 15.4k, False: 124k]
  ------------------
  740|  23.5k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 8.09k, False: 132k]
  ------------------
  741|  23.5k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 19.3k, False: 4.22k]
  |  Branch (741:37): [True: 6.60k, False: 16.9k]
  |  Branch (741:53): [True: 12.8k, False: 6.42k]
  |  Branch (741:69): [True: 6.60k, False: 6.28k]
  ------------------
  742|  6.60k|                                {
  743|  6.60k|                                    return OpCode::SEQUI;
  744|  6.60k|                                }
  745|  16.9k|                                break;
  746|       |
  747|  16.9k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 8.96k, False: 131k]
  ------------------
  748|  22.5k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 13.5k, False: 126k]
  ------------------
  749|  22.5k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 8.83k, False: 13.7k]
  |  Branch (749:37): [True: 4.71k, False: 17.8k]
  |  Branch (749:53): [True: 6.52k, False: 2.30k]
  |  Branch (749:69): [True: 4.71k, False: 1.80k]
  ------------------
  750|  4.71k|                                {
  751|  4.71k|                                    return OpCode::SGEUI;
  752|  4.71k|                                }
  753|  17.8k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 12.7k, False: 5.04k]
  |  Branch (753:42): [True: 6.22k, False: 11.5k]
  |  Branch (753:58): [True: 8.16k, False: 4.60k]
  |  Branch (753:74): [True: 6.22k, False: 1.94k]
  ------------------
  754|  6.22k|                                {
  755|  6.22k|                                    return OpCode::SGTUI;
  756|  6.22k|                                }
  757|  11.5k|                                break;
  758|       |
  759|  31.0k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 31.0k, False: 109k]
  ------------------
  760|  46.6k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 15.5k, False: 124k]
  ------------------
  761|  46.6k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 18.4k, False: 28.1k]
  |  Branch (761:37): [True: 4.85k, False: 41.8k]
  |  Branch (761:53): [True: 8.25k, False: 10.2k]
  |  Branch (761:69): [True: 4.85k, False: 3.39k]
  ------------------
  762|  4.85k|                                {
  763|  4.85k|                                    return OpCode::SLEUI;
  764|  4.85k|                                }
  765|  41.8k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 20.9k, False: 20.8k]
  |  Branch (765:42): [True: 8.07k, False: 33.7k]
  |  Branch (765:58): [True: 16.0k, False: 4.95k]
  |  Branch (765:74): [True: 8.07k, False: 7.95k]
  ------------------
  766|  8.07k|                                {
  767|  8.07k|                                    return OpCode::SLTUI;
  768|  8.07k|                                }
  769|  33.7k|                                break;
  770|       |
  771|  33.7k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 11.7k, False: 128k]
  ------------------
  772|  17.8k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 6.09k, False: 134k]
  ------------------
  773|  17.8k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 13.4k, False: 4.35k]
  |  Branch (773:37): [True: 4.93k, False: 12.9k]
  |  Branch (773:53): [True: 10.2k, False: 3.27k]
  |  Branch (773:69): [True: 4.93k, False: 5.28k]
  ------------------
  774|  4.93k|                                {
  775|  4.93k|                                    return OpCode::SNEUI;
  776|  4.93k|                                }
  777|  12.9k|                                break;
  778|       |
  779|  12.9k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 7.50k, False: 132k]
  ------------------
  780|  13.6k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 6.10k, False: 134k]
  ------------------
  781|  13.6k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 11.0k, False: 2.54k]
  |  Branch (781:37): [True: 4.89k, False: 8.70k]
  |  Branch (781:53): [True: 7.22k, False: 3.82k]
  |  Branch (781:69): [True: 4.89k, False: 2.33k]
  ------------------
  782|  4.89k|                                {
  783|  4.89k|                                    return OpCode::SUBUI;
  784|  4.89k|                                }
  785|  8.70k|                                break;
  786|   140k|                        }
  787|       |
  788|  99.8k|                        break;
  789|   438k|                }
  790|       |
  791|   359k|                break;
  792|   438k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|   359k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 252k, False: 3.85M]
  ------------------
  796|   252k|                char c1 = token[0];
  797|   252k|                char c2 = token[1];
  798|   252k|                char c3 = token[2];
  799|   252k|                char c4 = token[3];
  800|   252k|                char c5 = token[4];
  801|   252k|                char c6 = token[5];
  802|       |
  803|   252k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 59.8k, False: 192k]
  |  Branch (803:21): [True: 48.1k, False: 204k]
  |  Branch (803:37): [True: 53.4k, False: 6.46k]
  |  Branch (803:53): [True: 48.1k, False: 5.32k]
  ------------------
  804|  48.1k|                {
  805|  48.1k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 3.07k, False: 45.0k]
  ------------------
  806|  48.1k|                    {
  807|  8.59k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 8.59k, False: 39.5k]
  ------------------
  808|  16.9k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 8.35k, False: 39.7k]
  ------------------
  809|  16.9k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 13.8k, False: 3.07k]
  ------------------
  810|  13.8k|                            {
  811|  13.8k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 5.53k, False: 8.33k]
  ------------------
  812|  5.53k|                                {
  813|  5.53k|                                    return OpCode::CVTD2F;
  814|  5.53k|                                }
  815|  8.33k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 4.50k, False: 3.83k]
  ------------------
  816|  4.50k|                                {
  817|  4.50k|                                    return OpCode::CVTD2I;
  818|  4.50k|                                }
  819|  13.8k|                            }
  820|  6.90k|                            break;
  821|       |
  822|  12.7k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 12.7k, False: 35.3k]
  ------------------
  823|  15.2k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 2.49k, False: 45.6k]
  ------------------
  824|  15.2k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 13.2k, False: 2.01k]
  ------------------
  825|  13.2k|                            {
  826|  13.2k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 4.16k, False: 9.07k]
  ------------------
  827|  4.16k|                                {
  828|  4.16k|                                    return OpCode::CVTF2D;
  829|  4.16k|                                }
  830|  9.07k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 6.01k, False: 3.05k]
  ------------------
  831|  6.01k|                                {
  832|  6.01k|                                    return OpCode::CVTF2I;
  833|  6.01k|                                }
  834|  13.2k|                            }
  835|  5.07k|                            break;
  836|       |
  837|  9.56k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 9.56k, False: 38.5k]
  ------------------
  838|  12.8k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 3.27k, False: 44.8k]
  ------------------
  839|  12.8k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 9.47k, False: 3.36k]
  ------------------
  840|  9.47k|                            {
  841|  9.47k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 4.77k, False: 4.70k]
  ------------------
  842|  4.77k|                                {
  843|  4.77k|                                    return OpCode::CVTI2D;
  844|  4.77k|                                }
  845|  4.70k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 3.43k, False: 1.27k]
  ------------------
  846|  3.43k|                                {
  847|  3.43k|                                    return OpCode::CVTI2F;
  848|  3.43k|                                }
  849|  9.47k|                            }
  850|  48.1k|                    }
  851|  48.1k|                }
  852|   204k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 47.1k, False: 157k]
  |  Branch (852:26): [True: 6.37k, False: 198k]
  |  Branch (852:42): [True: 40.5k, False: 6.61k]
  |  Branch (852:58): [True: 35.3k, False: 5.19k]
  |  Branch (852:74): [True: 26.8k, False: 8.51k]
  ------------------
  853|   204k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 9.86k, False: 16.9k]
  |  Branch (853:42): [True: 6.37k, False: 3.48k]
  ------------------
  854|  6.37k|                {
  855|  6.37k|                    return OpCode::MULTUI;
  856|  6.37k|                }
  857|   217k|                break;
  858|   252k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|   217k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 145k, False: 3.95M]
  ------------------
  862|   145k|                char c1 = token[0];
  863|   145k|                char c2 = token[1];
  864|   145k|                char c3 = token[2];
  865|   145k|                char c4 = token[3];
  866|   145k|                char c5 = token[4];
  867|   145k|                char c6 = token[5];
  868|   145k|                char c7 = token[6];
  869|       |
  870|   145k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 45.9k, False: 99.3k]
  |  Branch (870:21): [True: 25.5k, False: 119k]
  |  Branch (870:37): [True: 31.1k, False: 14.8k]
  |  Branch (870:53): [True: 25.5k, False: 5.63k]
  ------------------
  871|  25.5k|                {
  872|  25.5k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 11.4k, False: 14.0k]
  |  Branch (872:25): [True: 3.79k, False: 21.7k]
  |  Branch (872:41): [True: 8.73k, False: 2.75k]
  |  Branch (872:54): [True: 5.79k, False: 2.93k]
  |  Branch (872:70): [True: 3.79k, False: 2.00k]
  ------------------
  873|  3.79k|                    {
  874|  3.79k|                        return OpCode::MOVI2FP;
  875|  3.79k|                    }
  876|  21.7k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 10.8k, False: 10.8k]
  |  Branch (876:30): [True: 2.62k, False: 19.1k]
  |  Branch (876:46): [True: 9.15k, False: 1.72k]
  |  Branch (876:62): [True: 6.20k, False: 2.94k]
  |  Branch (876:75): [True: 2.62k, False: 3.57k]
  ------------------
  877|  2.62k|                    {
  878|  2.62k|                        return OpCode::MOVFP2I;
  879|  2.62k|                    }
  880|  25.5k|                }
  881|   138k|                break;
  882|   145k|            }
  883|       |
  884|   229k|            default: {
  ------------------
  |  Branch (884:13): [True: 229k, False: 3.87M]
  ------------------
  885|   229k|                break;
  886|   145k|            }
  887|  4.10M|        }
  888|       |
  889|       |        // None found
  890|  3.17M|        return OpCode::NONE;
  891|  4.10M|    }
_ZN3dlx3iceEcc:
   17|  4.40M|    {
   18|  4.40M|        constexpr const char diff = 'a' - 'A';
   19|  4.40M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 1.15M, False: 3.25M]
  |  Branch (19:28): [True: 1.04M, False: 2.20M]
  ------------------
   20|  4.40M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  5.12M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  46.2k|    {
  193|  46.2k|        ParseError err;
  194|       |
  195|  46.2k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  46.2k|        err.m_LineNumber                           = line_number;
  197|  46.2k|        err.m_Column                               = column;
  198|  46.2k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  46.2k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  46.2k|        return err;
  202|  46.2k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  46.2k|    {
  207|  46.2k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  46.2k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  46.2k|                                                         actual_type);
  210|  46.2k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|  3.09k|    {
  216|  3.09k|        ParseError err;
  217|       |
  218|  3.09k|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|  3.09k|        err.m_LineNumber        = line_number;
  220|  3.09k|        err.m_Column            = column;
  221|  3.09k|        err.invalid_number.text = text;
  222|       |
  223|  3.09k|        return err;
  224|  3.09k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|  3.09k|    {
  228|  3.09k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|  3.09k|                                                token.GetColumn().unsafe(), token.GetText());
  230|  3.09k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      5|    {
  235|      5|        ParseError err;
  236|       |
  237|      5|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      5|        err.m_LineNumber = line_number;
  239|      5|        err.m_Column     = column;
  240|       |
  241|      5|        return err;
  242|      5|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      5|    {
  247|      5|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      5|                                                                     token.GetColumn().unsafe());
  249|      5|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|  2.84M|    {
  255|  2.84M|        ParseError err;
  256|       |
  257|  2.84M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|  2.84M|        err.m_LineNumber                   = line_number;
  259|  2.84M|        err.m_Column                       = column;
  260|  2.84M|        err.unexpected_token.expected_type = expected_type;
  261|  2.84M|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|  2.84M|        return err;
  264|  2.84M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|  2.84M|    {
  269|  2.84M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|  2.84M|                                                  token.GetColumn().unsafe(), expected_type,
  271|  2.84M|                                                  token.GetType());
  272|  2.84M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|   260k|    {
  277|   260k|        ParseError err;
  278|       |
  279|   260k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|   260k|        err.m_LineNumber                   = line_number;
  281|   260k|        err.m_Column                       = column;
  282|   260k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|   260k|        return err;
  285|   260k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  1.57k|    {
  289|  1.57k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  1.57k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  1.57k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|  1.25M|    {
  296|  1.25M|        ParseError err;
  297|       |
  298|  1.25M|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|  1.25M|        err.m_LineNumber                       = line_number;
  300|  1.25M|        err.m_Column                           = column;
  301|  1.25M|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|  1.25M|        return err;
  304|  1.25M|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|  1.25M|    {
  309|  1.25M|        return ConstructInvalidLabelIdentifierParseError(
  310|  1.25M|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|  1.25M|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|   163k|    {
  317|   163k|        ParseError err;
  318|       |
  319|   163k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|   163k|        err.m_LineNumber                     = line_number;
  321|   163k|        err.m_Column                         = column;
  322|   163k|        err.label_already_defined.label_name = label_name;
  323|   163k|        err.label_already_defined.at_line    = at_line;
  324|   163k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|   163k|        return err;
  327|   163k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|   163k|    {
  332|   163k|        return ConstructLabelAlreadyDefinedParseError(
  333|   163k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|   163k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|   163k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   403k|    {
  340|   403k|        ParseError err;
  341|       |
  342|   403k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   403k|        err.m_LineNumber = line_number;
  344|   403k|        err.m_Column     = column;
  345|       |
  346|   403k|        return err;
  347|   403k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   403k|    {
  352|   403k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   403k|                                                        token.GetColumn().unsafe());
  354|   403k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  87.6k|    {
  360|  87.6k|        ParseError err;
  361|       |
  362|  87.6k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  87.6k|        err.m_LineNumber               = line_number;
  364|  87.6k|        err.m_Column                   = column;
  365|  87.6k|        err.too_few_arguments.required = required;
  366|  87.6k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  87.6k|        return err;
  369|  87.6k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  87.6k|    {
  374|  87.6k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  87.6k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  87.6k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  35.5k|    {
  381|  35.5k|        ParseError err;
  382|       |
  383|  35.5k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  35.5k|        err.m_LineNumber           = line_number;
  385|  35.5k|        err.m_Column               = column;
  386|  35.5k|        err.empty_label.label_name = label_name;
  387|       |
  388|  35.5k|        return err;
  389|  35.5k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  35.5k|    {
  393|  35.5k|        return ConstructEmptyLabelParseError(
  394|  35.5k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  35.5k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 26.8k, False: 8.69k]
  ------------------
  396|  26.8k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  35.5k|                        token.GetText());
  398|  35.5k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  16.5k|    {
  403|  16.5k|        ParseError err;
  404|       |
  405|  16.5k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  16.5k|        err.m_LineNumber = line_number;
  407|  16.5k|        err.m_Column     = column;
  408|       |
  409|  16.5k|        return err;
  410|  16.5k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  16.5k|    {
  414|  16.5k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  16.5k|                                               token.GetColumn().unsafe());
  416|  16.5k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  5.12M|    {
   19|  5.12M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  5.12M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  21.6k|    {
  182|  21.6k|        ParsedProgram program;
  183|       |
  184|  21.6k|        program.m_Tokens = tokens;
  185|       |
  186|  21.6k|        phi::boolean line_has_instruction{false};
  187|  21.6k|        phi::usize   label_count{0u};
  188|       |
  189|  5.83M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 5.81M, False: 21.6k]
  ------------------
  190|  5.81M|        {
  191|  5.81M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  5.81M|            switch (current_token.GetType())
  196|  5.81M|            {
  197|       |                // Ignore comments
  198|  17.4k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 17.4k, False: 5.79M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  17.4k|                    break;
  201|       |
  202|   640k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 640k, False: 5.17M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   640k|                    line_has_instruction = false;
  205|   640k|                    break;
  206|       |
  207|  2.37M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 2.37M, False: 3.43M]
  ------------------
  208|  2.37M|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 702k, False: 1.67M]
  ------------------
  209|   702k|                    {
  210|   702k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|   702k|                                current_token, Token::Type::NewLine));
  212|   702k|                        break;
  213|   702k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|  1.67M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 816k, False: 858k]
  ------------------
  218|   816k|                    {
  219|   816k|                        program.AddParseError(
  220|   816k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   816k|                        break;
  222|   816k|                    }
  223|       |
  224|   858k|                    std::string_view label_name = current_token.GetText();
  225|   858k|                    label_name.remove_suffix(1);
  226|       |
  227|   858k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 258k, False: 599k]
  ------------------
  228|   258k|                    {
  229|   258k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|   258k|                                current_token.GetLineNumber().unsafe(),
  231|   258k|                                current_token.GetColumn().unsafe(), label_name));
  232|   258k|                        break;
  233|   258k|                    }
  234|       |
  235|   599k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 393k, False: 205k]
  ------------------
  236|   393k|                    {
  237|   393k|                        program.AddParseError(
  238|   393k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|   393k|                        break;
  240|   393k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|   205k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 163k, False: 42.5k]
  ------------------
  244|   163k|                    {
  245|       |                        // Find first defintions of label
  246|   163k|                        const Token* first_label_definition =
  247|   163k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   163k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|   163k|                                    {
  250|   163k|                                        std::string_view token_label_name = t.GetText();
  251|   163k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   163k|                                        if (token_label_name == label_name)
  254|   163k|                                        {
  255|   163k|                                            return true;
  256|   163k|                                        }
  257|   163k|                                    }
  258|       |
  259|   163k|                                    return false;
  260|   163k|                                });
  261|       |
  262|   163k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|   163k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|   163k|                                current_token, *first_label_definition));
  266|   163k|                        break;
  267|   163k|                    }
  268|       |
  269|  42.5k|                    program.m_JumpData[label_name] =
  270|  42.5k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  42.5k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  42.5k|                    break;
  277|   205k|                }
  278|       |
  279|   679k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 679k, False: 5.13M]
  ------------------
  280|   679k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 403k, False: 275k]
  ------------------
  281|   403k|                    {
  282|   403k|                        program.AddParseError(
  283|   403k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   403k|                        break;
  285|   403k|                    }
  286|       |
  287|   275k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|   275k|                    PHI_ASSERT(current_token.HasHint());
  291|   275k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|   275k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|   275k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|   275k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|   275k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|   275k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|   275k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|   275k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|   275k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   532k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 490k, False: 42.0k]
  ------------------
  313|   490k|                    {
  314|       |                        // Get next token
  315|   490k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 1.12k, False: 489k]
  ------------------
  316|  1.12k|                        {
  317|  1.12k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|  1.12k|                                    current_token, number_of_argument_required.unsafe(),
  319|  1.12k|                                    argument_num.unsafe()));
  320|  1.12k|                            break;
  321|  1.12k|                        }
  322|       |
  323|   489k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   489k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 189k, False: 300k]
  ------------------
  327|   189k|                        {
  328|   189k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 16.5k, False: 172k]
  ------------------
  329|  16.5k|                            {
  330|  16.5k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  16.5k|                            }
  332|       |
  333|   189k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|   189k|                            continue;
  336|   189k|                        }
  337|       |
  338|   300k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 86.5k, False: 213k]
  ------------------
  339|  86.5k|                        {
  340|  86.5k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  86.5k|                                    token, number_of_argument_required.unsafe(),
  342|  86.5k|                                    argument_num.unsafe()));
  343|  86.5k|                            break;
  344|  86.5k|                        }
  345|       |
  346|   213k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|   213k|                                parse_instruction_argument(
  348|   213k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|   213k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 146k, False: 67.7k]
  ------------------
  350|   146k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|   146k|                            break;
  353|   146k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  67.7k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  67.7k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  67.7k|                        argument_num++;
  360|  67.7k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  67.7k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|   275k|                    program.m_Instructions.emplace_back(instruction);
  368|   275k|                    line_has_instruction = true;
  369|   275k|                    break;
  370|   679k|                }
  371|       |
  372|  2.09M|                default:
  ------------------
  |  Branch (372:17): [True: 2.09M, False: 3.71M]
  ------------------
  373|  2.09M|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|  2.09M|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 1.09M, False: 1.00M]
  ------------------
  375|  1.09M|                    {
  376|  1.09M|                        expected_token_type = Token::Type::NewLine;
  377|  1.09M|                    }
  378|       |
  379|  2.09M|                    program.AddParseError(
  380|  2.09M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|  2.09M|                    break;
  382|  5.81M|            }
  383|  5.81M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  21.6k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 5.20k, False: 16.4k]
  ------------------
  387|  5.20k|        {
  388|  55.4k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 50.2k, False: 5.20k]
  ------------------
  389|  50.2k|            {
  390|  50.2k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  50.2k|                const Token& token = *it;
  393|  50.2k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 35.5k, False: 14.6k]
  ------------------
  394|  35.5k|                {
  395|  35.5k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  35.5k|                    --label_count;
  397|  35.5k|                }
  398|  50.2k|            }
  399|  5.20k|        }
  400|       |
  401|  21.6k|        return program;
  402|  21.6k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  21.6k|    {
  406|  21.6k|        TokenStream tokens = Tokenize(source);
  407|  21.6k|        return Parse(tokens);
  408|  21.6k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|   213k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|   213k|        switch (token.GetType())
   38|   213k|        {
   39|  14.2k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 14.2k, False: 199k]
  ------------------
   40|  14.2k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 3.14k, False: 11.0k]
  ------------------
   41|  14.2k|                                          ArgumentType::AddressDisplacement))
   42|  3.14k|                {
   43|  3.14k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  3.14k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  3.14k|                    return {};
   47|  3.14k|                }
   48|       |
   49|       |                // Get address displacement
   50|  11.0k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  11.0k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  11.0k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 5, False: 11.0k]
  ------------------
   55|      5|                {
   56|      5|                    program.AddParseError(
   57|      5|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      5|                    return {};
   59|      5|                }
   60|       |
   61|  11.0k|                auto         it           = tokens.current_position();
   62|  11.0k|                const Token& first_token  = tokens.consume();
   63|  11.0k|                const Token& second_token = tokens.consume();
   64|  11.0k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  11.0k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 2.36k, False: 8.68k]
  ------------------
   67|  2.36k|                {
   68|  2.36k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  2.36k|                            first_token, Token::Type::OpenBracket));
   70|  2.36k|                    return {};
   71|  2.36k|                }
   72|       |
   73|       |                // Second token is the register
   74|  8.68k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 2.54k, False: 6.14k]
  ------------------
   75|  2.54k|                {
   76|  2.54k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|  2.54k|                            second_token, Token::Type::RegisterInt));
   78|  2.54k|                    return {};
   79|  2.54k|                }
   80|       |
   81|  6.14k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 2.38k, False: 3.75k]
  ------------------
   82|  2.38k|                {
   83|  2.38k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|  2.38k|                            third_token, Token::Type::ClosingBracket));
   85|  2.38k|                    return {};
   86|  2.38k|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|  3.75k|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|  3.75k|                return ConstructInstructionArgumentAddressDisplacement(
   95|  3.75k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|  6.14k|            }
   97|  18.2k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 18.2k, False: 195k]
  ------------------
   98|  18.2k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 2.33k, False: 15.9k]
  ------------------
   99|  2.33k|                {
  100|  2.33k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  2.33k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  2.33k|                    return {};
  103|  2.33k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  15.9k|                return ConstructInstructionArgumentRegisterInt(
  109|  15.9k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  18.2k|            }
  111|  20.1k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 20.1k, False: 193k]
  ------------------
  112|  20.1k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 2.95k, False: 17.1k]
  ------------------
  113|  2.95k|                {
  114|  2.95k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  2.95k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  2.95k|                    return {};
  117|  2.95k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  17.1k|                return ConstructInstructionArgumentRegisterFloat(
  123|  17.1k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  20.1k|            }
  125|  1.57k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 1.57k, False: 212k]
  ------------------
  126|  1.57k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  1.57k|                return {};
  129|  20.1k|            }
  130|   111k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 111k, False: 102k]
  ------------------
  131|       |                // Parse as Label
  132|   111k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 34.7k, False: 76.4k]
  ------------------
  133|  34.7k|                {
  134|  34.7k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  34.7k|                            token, expected_argument_type, ArgumentType::Label));
  136|  34.7k|                    return {};
  137|  34.7k|                }
  138|       |
  139|  76.4k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 76.4k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  76.4k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 48.4k, False: 27.9k]
  ------------------
  146|  48.4k|                {
  147|  48.4k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  48.4k|                    return {};
  149|  48.4k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  27.9k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  76.4k|            }
  155|  9.05k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 9.05k, False: 204k]
  ------------------
  156|  9.05k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 3.00k, False: 6.04k]
  ------------------
  157|  3.00k|                {
  158|  3.00k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  3.00k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  3.00k|                    return {};
  161|  3.00k|                }
  162|       |
  163|  6.04k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 2.95k, False: 3.09k]
  ------------------
  164|  2.95k|                {
  165|  2.95k|                    return ConstructInstructionArgumentImmediateValue(
  166|  2.95k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  2.95k|                }
  168|       |
  169|  3.09k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|  3.09k|                return {};
  171|  6.04k|            }
  172|       |
  173|  39.5k|            default:
  ------------------
  |  Branch (173:13): [True: 39.5k, False: 174k]
  ------------------
  174|  39.5k|                program.AddParseError(
  175|  39.5k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  39.5k|                return {};
  177|   213k|        }
  178|   213k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  4.09M|                                tokens.find_first_token_if([&](const Token& t) {
  248|  4.09M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 2.58M, False: 1.50M]
  ------------------
  249|  2.58M|                                    {
  250|  2.58M|                                        std::string_view token_label_name = t.GetText();
  251|  2.58M|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  2.58M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 163k, False: 2.42M]
  ------------------
  254|   163k|                                        {
  255|   163k|                                            return true;
  256|   163k|                                        }
  257|  2.58M|                                    }
  258|       |
  259|  3.92M|                                    return false;
  260|  4.09M|                                });

_ZN3dlx9ProcessorC2Ev:
   63|      1|    {
   64|       |        // Mark R0 as ready only
   65|      1|        m_IntRegisters[0].SetReadOnly(true);
   66|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   69|   194k|    {
   70|   194k|        PHI_ASSERT(id != IntRegisterID::None);
   71|   194k|        phi::size_t id_value = phi::to_underlying(id);
   72|       |
   73|   194k|        PHI_ASSERT(id_value < m_IntRegisters.size());
   74|       |
   75|   194k|        return m_IntRegisters[id_value];
   76|   194k|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   80|   496k|    {
   81|   496k|        PHI_ASSERT(id != IntRegisterID::None);
   82|   496k|        phi::size_t id_value = phi::to_underlying(id);
   83|       |
   84|   496k|        PHI_ASSERT(id_value < m_IntRegisters.size());
   85|       |
   86|   496k|        return m_IntRegisters[id_value];
   87|   496k|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   90|   219k|    {
   91|   219k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   92|   219k|                                             RegisterAccessType::Signed),
   93|   219k|                   "Mismatch for instruction access type");
   94|       |
   95|   219k|        const phi::size_t id_value = phi::to_underlying(id);
   96|       |
   97|   219k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   98|   219k|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
   99|   219k|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (99:13): [True: 4, False: 219k]
  ------------------
  100|   219k|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (100:13): [True: 0, False: 4]
  ------------------
  101|      0|        {
  102|      0|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  103|      0|        }
  104|       |
  105|   219k|        return GetIntRegister(id).GetSignedValue();
  106|   219k|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  109|   277k|    {
  110|   277k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  111|   277k|                                             RegisterAccessType::Unsigned),
  112|   277k|                   "Mismatch for instruction access type");
  113|       |
  114|   277k|        const phi::size_t id_value = phi::to_underlying(id);
  115|       |
  116|   277k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  117|   277k|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  118|   277k|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (118:13): [True: 210k, False: 66.6k]
  ------------------
  119|   277k|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (119:13): [True: 210k, False: 1]
  ------------------
  120|   210k|        {
  121|   210k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   210k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  122|   210k|        }
  123|       |
  124|   277k|        return GetIntRegister(id).GetUnsignedValue();
  125|   277k|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  128|     38|    {
  129|     38|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  130|     38|                                             RegisterAccessType::Signed),
  131|     38|                   "Mismatch for instruction access type");
  132|       |
  133|     38|        IntRegister& reg = GetIntRegister(id);
  134|       |
  135|     38|        if (reg.IsReadOnly())
  ------------------
  |  Branch (135:13): [True: 23, False: 15]
  ------------------
  136|     23|        {
  137|     23|            return;
  138|     23|        }
  139|       |
  140|     15|        reg.SetSignedValue(value);
  141|       |
  142|     15|        const phi::size_t id_value = phi::to_underlying(id);
  143|       |
  144|     15|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  145|     15|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  146|     15|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  149|   194k|    {
  150|   194k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  151|   194k|                                             RegisterAccessType::Unsigned),
  152|   194k|                   "Mismatch for instruction access type");
  153|       |
  154|   194k|        IntRegister& reg = GetIntRegister(id);
  155|       |
  156|   194k|        if (reg.IsReadOnly())
  ------------------
  |  Branch (156:13): [True: 9, False: 194k]
  ------------------
  157|      9|        {
  158|      9|            return;
  159|      9|        }
  160|       |
  161|   194k|        reg.SetUnsignedValue(value);
  162|       |
  163|   194k|        const phi::size_t id_value = phi::to_underlying(id);
  164|       |
  165|   194k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  166|   194k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  167|   194k|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  170|   839k|    {
  171|   839k|        PHI_ASSERT(id != FloatRegisterID::None);
  172|   839k|        const phi::size_t id_value = phi::to_underlying(id);
  173|       |
  174|   839k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  175|       |
  176|   839k|        return m_FloatRegisters[id_value];
  177|   839k|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  181|   450k|    {
  182|   450k|        PHI_ASSERT(id != FloatRegisterID::None);
  183|   450k|        const phi::size_t id_value = phi::to_underlying(id);
  184|       |
  185|   450k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  186|       |
  187|   450k|        return m_FloatRegisters[id_value];
  188|   450k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  191|   450k|    {
  192|   450k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  193|   450k|                                             RegisterAccessType::Float),
  194|   450k|                   "Mismatch for instruction access type");
  195|       |
  196|   450k|        const phi::size_t id_value = phi::to_underlying(id);
  197|       |
  198|   450k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  199|   450k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  200|   450k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (200:13): [True: 435k, False: 15.0k]
  ------------------
  201|   450k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (201:13): [True: 285k, False: 149k]
  ------------------
  202|   285k|        {
  203|       |            /*
  204|       |            DLX_WARN("Mismatch for register value type");
  205|       |            */
  206|   285k|        }
  207|       |
  208|   450k|        const FloatRegister& reg = GetFloatRegister(id);
  209|       |
  210|   450k|        return reg.GetValue();
  211|   450k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  214|   404k|    {
  215|   404k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  216|   404k|                                             RegisterAccessType::Double),
  217|   404k|                   "Mismatch for instruction access type");
  218|       |
  219|   404k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (219:13): [True: 36, False: 404k]
  ------------------
  220|     36|        {
  221|     36|            Raise(Exception::MisalignedRegisterAccess);
  222|     36|            return {0.0};
  223|     36|        }
  224|       |
  225|   404k|        const phi::size_t id_value = phi::to_underlying(id);
  226|       |
  227|   404k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  228|   404k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  229|   404k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (229:13): [True: 392k, False: 12.5k]
  ------------------
  230|   404k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (230:13): [True: 112k, False: 279k]
  ------------------
  231|   112k|        {
  232|   112k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   112k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  233|   112k|        }
  234|       |
  235|   404k|        const FloatRegisterValueType register_value_type_high =
  236|   404k|                m_FloatRegistersValueTypes[id_value + 1u];
  237|   404k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (237:13): [True: 392k, False: 12.5k]
  ------------------
  238|   404k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (238:13): [True: 0, False: 392k]
  ------------------
  239|      0|        {
  240|      0|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  241|      0|        }
  242|       |
  243|   404k|        const FloatRegister& first_reg = GetFloatRegister(id);
  244|   404k|        const FloatRegister& second_reg =
  245|   404k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  246|       |
  247|   404k|        const float first_value  = first_reg.GetValue().unsafe();
  248|   404k|        const float second_value = second_reg.GetValue().unsafe();
  249|       |
  250|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  251|   404k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  252|       |
  253|   404k|        const std::uint32_t first_value_bits =
  254|   404k|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  255|   404k|        const std::uint32_t second_value_bits =
  256|   404k|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  257|       |
  258|   404k|        std::uint64_t final_value_bits =
  259|   404k|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  260|       |
  261|   404k|        return *reinterpret_cast<double*>(&final_value_bits);
  262|       |
  263|   404k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  264|   404k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  267|  29.5k|    {
  268|  29.5k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  269|  29.5k|                                             RegisterAccessType::Float),
  270|  29.5k|                   "Mismatch for instruction access type");
  271|       |
  272|  29.5k|        FloatRegister& reg = GetFloatRegister(id);
  273|       |
  274|  29.5k|        reg.SetValue(value);
  275|       |
  276|  29.5k|        const phi::size_t id_value = phi::to_underlying(id);
  277|       |
  278|  29.5k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  279|  29.5k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  280|  29.5k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  283|     23|    {
  284|     23|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  285|     23|                                             RegisterAccessType::Double),
  286|     23|                   "Mismatch for instruction access type");
  287|       |
  288|     23|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (288:13): [True: 1, False: 22]
  ------------------
  289|      1|        {
  290|      1|            Raise(Exception::MisalignedRegisterAccess);
  291|      1|            return;
  292|      1|        }
  293|       |
  294|     22|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  295|     22|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  296|       |
  297|     22|        double              value_raw  = value.unsafe();
  298|     22|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  299|       |
  300|     22|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  301|     22|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  302|       |
  303|     22|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  304|     22|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  305|       |
  306|     22|        FloatRegister& first_reg = GetFloatRegister(id);
  307|     22|        FloatRegister& second_reg =
  308|     22|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  309|       |
  310|     22|        first_reg.SetValue(first_value);
  311|     22|        second_reg.SetValue(second_value);
  312|       |
  313|     22|        const phi::size_t id_value = phi::to_underlying(id);
  314|       |
  315|     22|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  316|     22|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  317|     22|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  318|     22|    }
_ZN3dlx9Processor7GetFPSREv:
  321|   412k|    {
  322|   412k|        return m_FPSR;
  323|   412k|    }
_ZNK3dlx9Processor7GetFPSREv:
  326|  67.8k|    {
  327|  67.8k|        return m_FPSR;
  328|  67.8k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  331|  67.8k|    {
  332|  67.8k|        const StatusRegister& status_reg = GetFPSR();
  333|       |
  334|  67.8k|        return status_reg.Get();
  335|  67.8k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  338|   412k|    {
  339|   412k|        StatusRegister& status_reg = GetFPSR();
  340|       |
  341|   412k|        status_reg.SetStatus(value);
  342|   412k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  345|  1.68M|    {
  346|  1.68M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  347|       |
  348|  1.68M|        inst.Execute(*this);
  349|  1.68M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  352|  21.6k|    {
  353|  21.6k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (353:13): [True: 21.0k, False: 520]
  ------------------
  354|  21.0k|        {
  355|  21.0k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  21.0k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  356|  21.0k|            return false;
  357|  21.0k|        }
  358|       |
  359|    520|        m_CurrentProgram = &program;
  360|       |
  361|    520|        m_ProgramCounter               = 0u;
  362|    520|        m_Halted                       = false;
  363|    520|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  364|    520|        m_LastRaisedException          = Exception::None;
  365|    520|        m_CurrentStepCount             = 0u;
  366|       |
  367|    520|        return true;
  368|  21.6k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  372|   905k|    {
  373|   905k|        return m_CurrentProgram;
  374|   905k|    }
_ZN3dlx9Processor11ExecuteStepEv:
  377|  1.68M|    {
  378|       |        // No nothing when no program is loaded
  379|  1.68M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (379:13): [True: 0, False: 1.68M]
  ------------------
  380|      0|        {
  381|      0|            return;
  382|      0|        }
  383|       |
  384|       |        // Halt if there are no instruction to execute
  385|  1.68M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (385:13): [True: 69, False: 1.68M]
  ------------------
  386|     69|        {
  387|     69|            m_Halted                       = true;
  388|     69|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  389|     69|        }
  390|       |
  391|       |        // Do nothing when processor is halted
  392|  1.68M|        if (m_Halted)
  ------------------
  |  Branch (392:13): [True: 69, False: 1.68M]
  ------------------
  393|     69|        {
  394|     69|            return;
  395|     69|        }
  396|       |
  397|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  398|  1.68M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  399|       |
  400|       |        // Get current instruction pointed to by the program counter
  401|  1.68M|        const auto& current_instruction =
  402|  1.68M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  403|       |
  404|       |        // Execute current instruction
  405|  1.68M|        ExecuteInstruction(current_instruction);
  406|       |
  407|       |        // Stop executing if the last instruction halted the processor
  408|  1.68M|        if (m_Halted)
  ------------------
  |  Branch (408:13): [True: 156, False: 1.68M]
  ------------------
  409|    156|        {
  410|    156|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  411|    156|            return;
  412|    156|        }
  413|       |
  414|  1.68M|        m_ProgramCounter = m_NextProgramCounter;
  415|       |
  416|  1.68M|        ++m_CurrentStepCount;
  417|       |
  418|  1.68M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (418:13): [True: 295, False: 1.68M]
  |  Branch (418:14): [True: 1.68M, False: 0]
  |  Branch (418:42): [True: 168, False: 1.68M]
  ------------------
  419|  1.68M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (419:13): [True: 127, False: 1.68M]
  ------------------
  420|    295|        {
  421|    295|            m_Halted                       = true;
  422|    295|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  423|    295|        }
  424|  1.68M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  427|    520|    {
  428|       |        // Do nothing when no program is loaded
  429|    520|        if (!m_CurrentProgram)
  ------------------
  |  Branch (429:13): [True: 0, False: 520]
  ------------------
  430|      0|        {
  431|      0|            return;
  432|      0|        }
  433|       |
  434|    520|        m_ProgramCounter               = 0u;
  435|    520|        m_Halted                       = false;
  436|    520|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  437|    520|        m_LastRaisedException          = Exception::None;
  438|    520|        m_CurrentStepCount             = 0u;
  439|       |
  440|  1.68M|        while (!m_Halted)
  ------------------
  |  Branch (440:16): [True: 1.68M, False: 520]
  ------------------
  441|  1.68M|        {
  442|  1.68M|            ExecuteStep();
  443|  1.68M|        }
  444|       |
  445|    520|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  446|    520|                   "RegisterAccessType was not reset correctly");
  447|    520|    }
_ZN3dlx9Processor14ClearRegistersEv:
  463|  21.6k|    {
  464|  21.6k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (464:24): [True: 691k, False: 21.6k]
  ------------------
  465|   691k|        {
  466|   691k|            reg.SetSignedValue(0);
  467|   691k|        }
  468|       |
  469|  21.6k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (469:24): [True: 691k, False: 21.6k]
  ------------------
  470|   691k|        {
  471|   691k|            reg.SetValue(0.0f);
  472|   691k|        }
  473|       |
  474|  21.6k|        m_FPSR.SetStatus(false);
  475|  21.6k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  478|  21.6k|    {
  479|  21.6k|        m_MemoryBlock.Clear();
  480|  21.6k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  487|    160|    {
  488|    160|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  489|       |
  490|    160|        m_LastRaisedException = exception;
  491|       |
  492|    160|        switch (exception)
  493|    160|        {
  494|      4|            case Exception::DivideByZero:
  ------------------
  |  Branch (494:13): [True: 4, False: 156]
  ------------------
  495|      4|                m_Halted = true;
  496|      4|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  497|      4|                return;
  498|      0|            case Exception::Overflow:
  ------------------
  |  Branch (498:13): [True: 0, False: 160]
  ------------------
  499|      0|                DLX_WARN("Overflow");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  500|      0|                return;
  501|      0|            case Exception::Underflow:
  ------------------
  |  Branch (501:13): [True: 0, False: 160]
  ------------------
  502|      0|                DLX_WARN("Underflow");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  503|      0|                return;
  504|      0|            case Exception::Trap:
  ------------------
  |  Branch (504:13): [True: 0, False: 160]
  ------------------
  505|      0|                m_Halted = true;
  506|      0|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  507|      0|                return;
  508|      2|            case Exception::Halt:
  ------------------
  |  Branch (508:13): [True: 2, False: 158]
  ------------------
  509|      2|                m_Halted = true;
  510|      2|                return;
  511|    109|            case Exception::UnknownLabel:
  ------------------
  |  Branch (511:13): [True: 109, False: 51]
  ------------------
  512|    109|                m_Halted = true;
  513|    109|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|    109|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  514|    109|                return;
  515|      0|            case Exception::BadShift:
  ------------------
  |  Branch (515:13): [True: 0, False: 160]
  ------------------
  516|      0|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  517|      0|                return;
  518|      8|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (518:13): [True: 8, False: 152]
  ------------------
  519|      8|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|      8|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  520|      8|                m_Halted = true;
  521|      8|                return;
  522|     37|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (522:13): [True: 37, False: 123]
  ------------------
  523|     37|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     37|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  524|     37|                m_Halted = true;
  525|     37|                return;
  526|       |
  527|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  528|      0|            default:
  ------------------
  |  Branch (528:13): [True: 0, False: 160]
  ------------------
  529|      0|                PHI_ASSERT_NOT_REACHED();
  530|    160|#endif
  531|    160|        }
  532|       |
  533|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  534|      0|        PHI_ASSERT_NOT_REACHED();
  535|      0|#endif
  536|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  557|      7|    {
  558|      7|        return m_MemoryBlock;
  559|      7|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  572|   194k|    {
  573|   194k|        return m_NextProgramCounter;
  574|   194k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  577|   905k|    {
  578|   905k|        m_NextProgramCounter = new_npc;
  579|   905k|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   35|  1.57M|    {
   36|  1.57M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   37|  1.57M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   38|       |
   39|  1.57M|        switch (expected_access)
   40|  1.57M|        {
   41|   219k|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (41:13): [True: 219k, False: 1.35M]
  ------------------
   42|   219k|                return true;
   43|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (43:13): [True: 0, False: 1.57M]
  ------------------
   44|      0|                return false;
   45|  32.4k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (45:13): [True: 32.4k, False: 1.54M]
  ------------------
   46|  32.4k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (46:24): [True: 16.2k, False: 16.2k]
  |  Branch (46:63): [True: 16.2k, False: 0]
  ------------------
   47|      0|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (47:13): [True: 0, False: 1.57M]
  ------------------
   48|      0|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (48:24): [True: 0, False: 0]
  ------------------
   49|      0|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (49:24): [True: 0, False: 0]
  ------------------
   50|      4|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (50:13): [True: 4, False: 1.57M]
  ------------------
   51|      4|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (51:24): [True: 4, False: 0]
  |  Branch (51:63): [True: 0, False: 0]
  ------------------
   52|      3|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (52:13): [True: 3, False: 1.57M]
  ------------------
   53|      3|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (53:24): [True: 3, False: 0]
  |  Branch (53:64): [True: 0, False: 0]
  ------------------
   54|  1.32M|            default:
  ------------------
  |  Branch (54:13): [True: 1.32M, False: 252k]
  ------------------
   55|  1.32M|                return expected_access == access;
   56|  1.57M|        }
   57|  1.57M|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  4.20M|    {
   14|  4.20M|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 732k, False: 3.47M]
  ------------------
   15|   732k|        {
   16|   732k|            char first_char = token[0];
   17|   732k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 14.0k, False: 718k]
  |  Branch (17:38): [True: 52.0k, False: 666k]
  ------------------
   18|  66.1k|            {
   19|  66.1k|                char second_char = token[1];
   20|  66.1k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 58.2k, False: 7.83k]
  |  Branch (20:43): [True: 28.6k, False: 29.6k]
  ------------------
   21|  28.6k|                {
   22|  28.6k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  28.6k|                }
   24|  66.1k|            }
   25|   732k|        }
   26|  3.47M|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 958k, False: 2.51M]
  ------------------
   27|   958k|        {
   28|   958k|            char first_char = token[0];
   29|   958k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 13.6k, False: 945k]
  |  Branch (29:38): [True: 57.1k, False: 887k]
  ------------------
   30|  70.7k|            {
   31|  70.7k|                char second_char = token[1];
   32|  70.7k|                char third_char  = token[2];
   33|       |
   34|  70.7k|                switch (second_char)
   35|  70.7k|                {
   36|  18.8k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 18.8k, False: 51.8k]
  ------------------
   37|  18.8k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 13.9k, False: 4.90k]
  |  Branch (37:50): [True: 8.51k, False: 5.48k]
  ------------------
   38|  8.51k|                        {
   39|  8.51k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  8.51k|                        }
   41|  10.3k|                        break;
   42|  18.8k|                    }
   43|  13.7k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 13.7k, False: 56.9k]
  ------------------
   44|  13.7k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 9.20k, False: 4.54k]
  |  Branch (44:50): [True: 5.60k, False: 3.59k]
  ------------------
   45|  5.60k|                        {
   46|  5.60k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  5.60k|                        }
   48|  8.14k|                        break;
   49|  13.7k|                    }
   50|  11.8k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 11.8k, False: 58.8k]
  ------------------
   51|  11.8k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 4.41k, False: 7.44k]
  |  Branch (51:50): [True: 5.53k, False: 1.90k]
  ------------------
   52|  9.94k|                        {
   53|  9.94k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  9.94k|                        }
   55|  1.90k|                        break;
   56|  11.8k|                    }
   57|  26.2k|                    default: {
  ------------------
  |  Branch (57:21): [True: 26.2k, False: 44.4k]
  ------------------
   58|  26.2k|                        break;
   59|  11.8k|                    }
   60|  70.7k|                }
   61|  70.7k|            }
   62|   958k|        }
   63|       |
   64|  4.15M|        return IntRegisterID::None;
   65|  4.20M|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|  4.15M|    {
   69|  4.15M|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 703k, False: 3.45M]
  ------------------
   70|   703k|        {
   71|   703k|            char first_char = token[0];
   72|   703k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 30.6k, False: 672k]
  |  Branch (72:38): [True: 38.7k, False: 634k]
  ------------------
   73|  69.4k|            {
   74|  69.4k|                char second_char = token[1];
   75|  69.4k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 54.9k, False: 14.4k]
  |  Branch (75:43): [True: 38.8k, False: 16.0k]
  ------------------
   76|  38.8k|                {
   77|  38.8k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  38.8k|                }
   79|  69.4k|            }
   80|   703k|        }
   81|  3.45M|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 934k, False: 2.51M]
  ------------------
   82|   934k|        {
   83|   934k|            char first_char = token[0];
   84|   934k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 29.0k, False: 905k]
  |  Branch (84:38): [True: 37.0k, False: 868k]
  ------------------
   85|  66.0k|            {
   86|  66.0k|                char second_char = token[1];
   87|  66.0k|                char third_char  = token[2];
   88|       |
   89|  66.0k|                switch (second_char)
   90|  66.0k|                {
   91|  11.8k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 11.8k, False: 54.2k]
  ------------------
   92|  11.8k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 9.60k, False: 2.20k]
  |  Branch (92:50): [True: 4.07k, False: 5.53k]
  ------------------
   93|  4.07k|                        {
   94|  4.07k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  4.07k|                        }
   96|  7.74k|                        break;
   97|  11.8k|                    }
   98|  18.3k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 18.3k, False: 47.7k]
  ------------------
   99|  18.3k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 17.6k, False: 675]
  |  Branch (99:50): [True: 7.45k, False: 10.2k]
  ------------------
  100|  7.45k|                        {
  101|  7.45k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  7.45k|                        }
  103|  10.8k|                        break;
  104|  18.3k|                    }
  105|  11.0k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 11.0k, False: 55.0k]
  ------------------
  106|  11.0k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 1.38k, False: 9.62k]
  |  Branch (106:50): [True: 2.25k, False: 7.36k]
  ------------------
  107|  3.64k|                        {
  108|  3.64k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  3.64k|                        }
  110|  7.36k|                        break;
  111|  11.0k|                    }
  112|  24.9k|                    default: {
  ------------------
  |  Branch (112:21): [True: 24.9k, False: 41.1k]
  ------------------
  113|  24.9k|                        break;
  114|  11.0k|                    }
  115|  66.0k|                }
  116|  66.0k|            }
  117|   934k|        }
  118|       |
  119|  4.10M|        return FloatRegisterID::None;
  120|  4.15M|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|  3.96M|    {
  124|  3.96M|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 748k, False: 3.21M]
  ------------------
  125|   748k|        {
  126|   748k|            char c1 = token[0];
  127|   748k|            char c2 = token[1];
  128|   748k|            char c3 = token[2];
  129|   748k|            char c4 = token[3];
  130|       |
  131|   748k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 20.8k, False: 728k]
  |  Branch (131:34): [True: 18.8k, False: 709k]
  |  Branch (131:49): [True: 3.30k, False: 36.3k]
  |  Branch (131:62): [True: 14.5k, False: 21.8k]
  ------------------
  132|   748k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 9.93k, False: 7.92k]
  |  Branch (132:34): [True: 4.23k, False: 3.69k]
  |  Branch (132:49): [True: 4.19k, False: 9.97k]
  |  Branch (132:62): [True: 9.65k, False: 312]
  ------------------
  133|   748k|        }
  134|       |
  135|  3.21M|        return false;
  136|  3.96M|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   434k|    {
   12|   434k|        m_Value = value;
   13|   434k|    }
_ZNK3dlx14StatusRegister3GetEv:
   16|  67.8k|    {
   17|  67.8k|        return m_Value;
   18|  67.8k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  5.49M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   836k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  13.8M|    {
   41|  13.8M|        return m_Type;
   42|  13.8M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  5.56M|    {
   51|  5.56M|        return m_LineNumber;
   52|  5.56M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  5.28M|    {
   56|  5.28M|        return m_Column;
   57|  5.28M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  6.82M|    {
   66|  6.82M|        return m_Text;
   67|  6.82M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   292k|    {
   80|   292k|        return m_HasHint;
   81|   292k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   326k|    {
   85|   326k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   326k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   326k|                   m_Type == Type::ImmediateInteger);
   88|   326k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   326k|        return m_Hint;
   91|   326k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  21.6k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  21.6k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  21.6k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  11.0k|    {
   51|  11.0k|        auto it = m_Iterator;
   52|  44.1k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 33.1k, False: 11.0k]
  ------------------
   53|  33.1k|        {
   54|  33.1k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 5, False: 33.1k]
  ------------------
   55|      5|            {
   56|      5|                return false;
   57|      5|            }
   58|  33.1k|        }
   59|       |
   60|  11.0k|        return true;
   61|  11.0k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  6.32M|    {
   65|  6.32M|        return m_Iterator != m_Tokens.end();
   66|  6.32M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  6.33M|    {
   70|  6.33M|        return m_Iterator == m_Tokens.end();
   71|  6.33M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  6.33M|    {
   85|  6.33M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  6.33M|        return *m_Iterator++;
   91|  6.33M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  11.0k|    {
  164|  11.0k|        return m_Iterator;
  165|  11.0k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  3.75k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  3.75k|        m_Iterator = it;
  179|  3.75k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  5.20k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  5.20k|        return m_Tokens.rbegin();
  224|  5.20k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  50.2k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  50.2k|        return m_Tokens.rend();
  233|  50.2k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  21.6k|    {
   63|  21.6k|        TokenStream tokens;
   64|       |
   65|  21.6k|        std::string_view current_token;
   66|       |
   67|  21.6k|        phi::u64 current_line_number{1u};
   68|  21.6k|        phi::u64 current_column{1u};
   69|  21.6k|        phi::u64 token_begin{0u};
   70|       |
   71|  21.6k|        phi::boolean parsing_comment{false};
   72|       |
   73|  16.0M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 16.0M, False: 21.6k]
  ------------------
   74|  16.0M|        {
   75|  16.0M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  16.0M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 728k, False: 15.2M]
  ------------------
   78|   728k|            {
   79|   728k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 154k, False: 573k]
  ------------------
   80|   154k|                {
   81|       |                    // Skip empty lines
   82|   154k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|   154k|                                        current_line_number, current_column);
   84|       |
   85|   154k|                    parsing_comment = false;
   86|   154k|                    current_line_number += 1u;
   87|   154k|                    current_column = 1u;
   88|   154k|                    continue;
   89|   154k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   573k|                tokens.emplace_back(
   93|   573k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   573k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   573k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   573k|                                    current_line_number, current_column);
   98|       |
   99|   573k|                current_token   = std::string_view{};
  100|   573k|                parsing_comment = false;
  101|   573k|                current_line_number += 1u;
  102|   573k|                current_column = 0u;
  103|   573k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  15.2M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 12.3k, False: 15.2M]
  |  Branch (105:34): [True: 15.1k, False: 15.2M]
  ------------------
  106|  27.5k|            {
  107|  27.5k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 8.24k, False: 19.2k]
  ------------------
  108|  8.24k|                {
  109|  8.24k|                    token_begin = i;
  110|  8.24k|                }
  111|  19.2k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 16.4k, False: 2.85k]
  ------------------
  112|  16.4k|                {
  113|  16.4k|                    tokens.emplace_back(ParseToken(
  114|  16.4k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  16.4k|                            current_line_number, current_column - current_token.length()));
  116|  16.4k|                    token_begin   = i;
  117|  16.4k|                    current_token = std::string_view{};
  118|  16.4k|                }
  119|       |
  120|  27.5k|                parsing_comment = true;
  121|  27.5k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  27.5k|            }
  123|  15.2M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 86.4k, False: 15.1M]
  ------------------
  124|  86.4k|            {
  125|       |                // simply append the character
  126|  86.4k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|  86.4k|            }
  128|  15.1M|            else
  129|  15.1M|            {
  130|       |                // Not parsing a comment
  131|  15.1M|                switch (c)
  132|  15.1M|                {
  133|   140k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 140k, False: 15.0M]
  ------------------
  134|   283k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 143k, False: 15.0M]
  ------------------
  135|   493k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 210k, False: 14.9M]
  ------------------
  136|   493k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 163k, False: 330k]
  ------------------
  137|   163k|                        {
  138|   163k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|   163k|                            continue;
  141|   163k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   330k|                        tokens.emplace_back(ParseToken(
  145|   330k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   330k|                                current_line_number, current_column - current_token.length()));
  147|   330k|                        current_token = std::string_view{};
  148|   330k|                        break;
  149|  1.25M|                    case ':':
  ------------------
  |  Branch (149:21): [True: 1.25M, False: 13.9M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  1.25M|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 999k, False: 253k]
  ------------------
  152|   999k|                        {
  153|   999k|                            current_token =
  154|   999k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|   999k|                            tokens.emplace_back(ParseToken(
  156|   999k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|   999k|                                    current_line_number,
  158|   999k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|   999k|                            current_token = std::string_view{};
  161|   999k|                        }
  162|   253k|                        else
  163|   253k|                        {
  164|       |                            // Orphan colon
  165|   253k|                            token_begin = i;
  166|       |
  167|   253k|                            tokens.emplace_back(Token::Type::Colon,
  168|   253k|                                                source.substr(token_begin.unsafe(), 1),
  169|   253k|                                                current_line_number, current_column);
  170|   253k|                        }
  171|  1.25M|                        break;
  172|  1.17M|                    case ',':
  ------------------
  |  Branch (172:21): [True: 1.17M, False: 13.9M]
  ------------------
  173|  1.39M|                    case '(':
  ------------------
  |  Branch (173:21): [True: 214k, False: 14.9M]
  ------------------
  174|  1.97M|                    case ')':
  ------------------
  |  Branch (174:21): [True: 583k, False: 14.5M]
  ------------------
  175|  1.97M|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 1.44M, False: 531k]
  ------------------
  176|  1.44M|                        {
  177|  1.44M|                            tokens.emplace_back(ParseToken(
  178|  1.44M|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|  1.44M|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|  1.44M|                            current_token = std::string_view{};
  182|  1.44M|                        }
  183|       |
  184|  1.97M|                        Token::Type type;
  185|  1.97M|                        switch (c)
  186|  1.97M|                        {
  187|  1.17M|                            case ',':
  ------------------
  |  Branch (187:29): [True: 1.17M, False: 798k]
  ------------------
  188|  1.17M|                                type = Token::Type::Comma;
  189|  1.17M|                                break;
  190|   214k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 214k, False: 1.76M]
  ------------------
  191|   214k|                                type = Token::Type::OpenBracket;
  192|   214k|                                break;
  193|   583k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 583k, False: 1.39M]
  ------------------
  194|   583k|                                type = Token::Type::ClosingBracket;
  195|   583k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 1.97M]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  1.97M|#endif
  201|  1.97M|                        }
  202|       |
  203|  1.97M|                        token_begin = i;
  204|       |
  205|  1.97M|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  1.97M|                                            current_line_number, current_column);
  207|  1.97M|                        break;
  208|       |
  209|  11.4M|                    default:
  ------------------
  |  Branch (209:21): [True: 11.4M, False: 3.72M]
  ------------------
  210|  11.4M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 3.35M, False: 8.08M]
  ------------------
  211|  3.35M|                        {
  212|  3.35M|                            token_begin = i;
  213|  3.35M|                        }
  214|       |
  215|       |                        // simply append the character
  216|  11.4M|                        current_token =
  217|  11.4M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  15.1M|                }
  219|  15.1M|            }
  220|       |
  221|  15.6M|            current_column += 1u;
  222|  15.6M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  21.6k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 15.4k, False: 6.17k]
  ------------------
  226|  15.4k|        {
  227|  15.4k|            tokens.emplace_back(
  228|  15.4k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  15.4k|                               current_line_number, current_column - current_token.length()));
  230|  15.4k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  21.6k|        tokens.finalize();
  234|       |
  235|  21.6k|        return tokens;
  236|  21.6k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  3.37M|    {
   11|  3.37M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 26.3k, False: 3.35M]
  |  Branch (11:35): [True: 18.3k, False: 7.93k]
  ------------------
   12|  18.3k|        {
   13|  18.3k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  18.3k|            if (number)
  ------------------
  |  Branch (15:17): [True: 5.72k, False: 12.6k]
  ------------------
   16|  5.72k|            {
   17|  5.72k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  5.72k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  5.72k|            }
   20|       |
   21|  12.6k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  18.3k|        }
   23|       |
   24|  3.36M|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 10.4k, False: 3.34M]
  |  Branch (24:35): [True: 14.2k, False: 3.33M]
  ------------------
   25|  24.6k|        {
   26|  24.6k|            return {Token::Type::Comment, token, line_number, column};
   27|  24.6k|        }
   28|       |
   29|  3.33M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 50.4k, False: 3.28M]
  ------------------
   30|  50.4k|        {
   31|  50.4k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  50.4k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  50.4k|        }
   34|       |
   35|  3.28M|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 10.7k, False: 3.27M]
  ------------------
   36|  10.7k|        {
   37|  10.7k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  10.7k|        }
   39|       |
   40|  3.27M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 44.4k, False: 3.22M]
  ------------------
   41|  44.4k|        {
   42|  44.4k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  44.4k|                    static_cast<std::uint32_t>(id)};
   44|  44.4k|        }
   45|       |
   46|  3.22M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 42.9k, False: 3.18M]
  ------------------
   47|  42.9k|        {
   48|  42.9k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  42.9k|                    static_cast<std::uint32_t>(id)};
   50|  42.9k|        }
   51|       |
   52|  3.18M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 693k, False: 2.49M]
  ------------------
   53|   693k|        {
   54|   693k|            return {Token::Type::OpCode, token, line_number, column,
   55|   693k|                    static_cast<std::uint32_t>(opcode)};
   56|   693k|        }
   57|       |
   58|  2.49M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|  3.18M|    }

LLVMFuzzerTestOneInput:
   12|  21.6k|{
   13|  21.6k|    static dlx::Processor processor;
   14|       |
   15|  21.6k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   16|       |
   17|       |    // Parse it
   18|  21.6k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  21.6k|    processor.ClearRegisters();
   22|  21.6k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  21.6k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 520, False: 21.0k]
  ------------------
   26|    520|    {
   27|    520|        processor.ExecuteCurrentProgram();
   28|    520|    }
   29|       |
   30|  21.6k|    return 0;
   31|  21.6k|}


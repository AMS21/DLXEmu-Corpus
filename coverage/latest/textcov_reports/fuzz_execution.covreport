_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  76.8k|        {
  169|  76.8k|            PHI_ASSERT(index < 3u);
  170|       |
  171|  76.8k|            switch (index.unsafe())
  172|  76.8k|            {
  173|  33.6k|                case 0:
  ------------------
  |  Branch (173:17): [True: 33.6k, False: 43.2k]
  ------------------
  174|  33.6k|                    return m_Arg1Type;
  175|       |
  176|  22.4k|                case 1:
  ------------------
  |  Branch (176:17): [True: 22.4k, False: 54.4k]
  ------------------
  177|  22.4k|                    return m_Arg2Type;
  178|       |
  179|  20.8k|                case 2:
  ------------------
  |  Branch (179:17): [True: 20.8k, False: 56.0k]
  ------------------
  180|  20.8k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 76.8k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  76.8k|#endif
  187|  76.8k|            }
  188|  76.8k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  20.1k|        {
  195|  20.1k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  20.1k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 18.1k, False: 2.02k]
  ------------------
  199|  18.1k|            {
  200|  18.1k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  18.1k|            }
  202|  20.1k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 10.5k, False: 9.65k]
  ------------------
  203|  10.5k|            {
  204|  10.5k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  10.5k|            }
  206|  20.1k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 3.77k, False: 16.3k]
  ------------------
  207|  3.77k|            {
  208|  3.77k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  3.77k|            }
  210|       |
  211|  20.1k|            return number_of_argument_required;
  212|  20.1k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  3.42M|        {
  216|  3.42M|            return m_RegisterAccessType;
  217|  3.42M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  20.1k|        {
  221|  20.1k|            return m_Executor;
  222|  20.1k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  10.2M|    {
   38|  10.2M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  10.2M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  10.2M|                                         static_cast<underlying_t>(rhs));
   42|  10.2M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  10.2M|    {
   55|  10.2M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  10.2M|        return static_cast<underlying_t>(type & test) != 0;
   58|  10.2M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  44.2k|    {
   32|  44.2k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 429, False: 43.8k]
  ------------------
   33|    429|        {
   34|    429|            return true;
   35|    429|        }
   36|       |
   37|  43.8k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 602, False: 43.2k]
  ------------------
   38|    602|        {
   39|    602|            return true;
   40|    602|        }
   41|       |
   42|  43.2k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 13.2k, False: 29.9k]
  ------------------
   43|  13.2k|        {
   44|  13.2k|            return true;
   45|  13.2k|        }
   46|       |
   47|  29.9k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 270, False: 29.6k]
  ------------------
   48|    270|        {
   49|    270|            return true;
   50|    270|        }
   51|       |
   52|  29.6k|        return false;
   53|  29.9k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  29.6k|    {
   57|  29.6k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 29.6k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  29.6k|        const char first_char = token.at(0);
   63|       |
   64|  29.6k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 7.16k, False: 22.4k]
  ------------------
   65|  7.16k|        {
   66|  7.16k|            return phi::is_alpha(first_char);
   67|  7.16k|        }
   68|       |
   69|  22.4k|        phi::boolean just_under_scores = (first_char == '_');
   70|  22.4k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 4.61k, False: 17.8k]
  |  Branch (70:15): [True: 17.4k, False: 5.09k]
  |  Branch (70:44): [True: 479, False: 4.61k]
  ------------------
   71|  4.61k|        {
   72|  4.61k|            return false;
   73|  4.61k|        }
   74|       |
   75|  55.3k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 47.0k, False: 8.29k]
  ------------------
   76|  47.0k|        {
   77|  47.0k|            const char c{token.at(index)};
   78|       |
   79|  47.0k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 36.9k, False: 10.0k]
  ------------------
   80|  36.9k|            {
   81|  36.9k|                just_under_scores = false;
   82|  36.9k|            }
   83|  10.0k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 489, False: 9.59k]
  ------------------
   84|    489|            {
   85|    489|                continue;
   86|    489|            }
   87|  9.59k|            else
   88|  9.59k|            {
   89|  9.59k|                return false;
   90|  9.59k|            }
   91|  47.0k|        }
   92|       |
   93|  8.29k|        return !just_under_scores;
   94|  17.8k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   157k|    {
  101|   157k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 157k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   157k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 25.1k, False: 132k]
  ------------------
  107|  25.1k|        {
  108|  25.1k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 2.34k, False: 22.8k]
  ------------------
  109|  2.34k|            {
  110|  2.34k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  2.34k|            }
  112|       |
  113|  22.8k|            return {};
  114|  25.1k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   132k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 392, False: 131k]
  ------------------
  118|    392|        {
  119|    392|            return {};
  120|    392|        }
  121|       |
  122|   131k|        std::int32_t number{0};
  123|   131k|        phi::boolean is_negative{false};
  124|   131k|        phi::boolean starts_with_zero{false};
  125|   131k|        phi::boolean parsing_binary{false};
  126|   131k|        phi::boolean parsing_octal{false};
  127|   131k|        phi::boolean parsing_hexadecimal{false};
  128|   131k|        phi::boolean parsed_something{false};
  129|   131k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   147k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 145k, False: 1.81k]
  ------------------
  134|   145k|        {
  135|   145k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   145k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 131k, False: 13.6k]
  ------------------
  139|   131k|            {
  140|   131k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 335, False: 131k]
  ------------------
  141|    335|                {
  142|    335|                    continue;
  143|    335|                }
  144|       |
  145|   131k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 1.90k, False: 129k]
  ------------------
  146|  1.90k|                {
  147|  1.90k|                    is_negative = true;
  148|  1.90k|                    continue;
  149|  1.90k|                }
  150|       |
  151|   129k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 2.56k, False: 126k]
  ------------------
  152|  2.56k|                {
  153|  2.56k|                    starts_with_zero = true;
  154|  2.56k|                    continue;
  155|  2.56k|                }
  156|       |
  157|   126k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 409, False: 126k]
  ------------------
  158|    409|                {
  159|    409|                    return {};
  160|    409|                }
  161|   126k|            }
  162|       |
  163|       |            // Second character
  164|   140k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 6.66k, False: 133k]
  ------------------
  165|  6.66k|            {
  166|  6.66k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 2.56k, False: 4.10k]
  ------------------
  167|  2.56k|                {
  168|       |                    // Binary
  169|  2.56k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 353, False: 2.21k]
  |  Branch (169:37): [True: 204, False: 2.00k]
  ------------------
  170|    557|                    {
  171|    557|                        parsing_binary = true;
  172|    557|                        continue;
  173|    557|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  2.00k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 286, False: 1.72k]
  |  Branch (176:37): [True: 362, False: 1.35k]
  ------------------
  177|    648|                    {
  178|    648|                        parsing_hexadecimal = true;
  179|    648|                        continue;
  180|    648|                    }
  181|       |
  182|       |                    // Octal
  183|  1.35k|                    parsing_octal = true;
  184|  1.35k|                }
  185|  6.66k|            }
  186|       |
  187|       |            // Handle seperators
  188|   139k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 497, False: 138k]
  ------------------
  189|    497|            {
  190|    497|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 194, False: 303]
  ------------------
  191|    194|                {
  192|    194|                    return {};
  193|    194|                }
  194|       |
  195|    303|                parsed_separator = true;
  196|    303|                continue;
  197|    497|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   138k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 3.83k, False: 134k]
  |  Branch (200:32): [True: 199, False: 3.63k]
  ------------------
  201|    199|            {
  202|       |                // Would underflow
  203|    199|                return {};
  204|    199|            }
  205|   138k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 134k, False: 3.63k]
  |  Branch (205:17): [True: 221, False: 138k]
  |  Branch (205:33): [True: 221, False: 134k]
  ------------------
  206|    221|            {
  207|       |                // Would overflow
  208|    221|                return {};
  209|    221|            }
  210|       |
  211|   138k|            parsed_separator = false;
  212|   138k|            parsed_something = true;
  213|       |
  214|   138k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 810, False: 137k]
  ------------------
  215|    810|            {
  216|    810|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 273, False: 537]
  ------------------
  217|    273|                {
  218|    273|                    return {};
  219|    273|                }
  220|       |
  221|    537|                number <<= 1;
  222|    537|                number |= (c - '0');
  223|    537|            }
  224|   137k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 1.52k, False: 135k]
  ------------------
  225|  1.52k|            {
  226|  1.52k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 825, False: 698]
  ------------------
  227|    825|                {
  228|    825|                    return {};
  229|    825|                }
  230|       |
  231|    698|                number <<= 3;
  232|    698|                number |= (c - '0');
  233|    698|            }
  234|   135k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 1.34k, False: 134k]
  ------------------
  235|  1.34k|            {
  236|  1.34k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 547, False: 801]
  ------------------
  237|    547|                {
  238|    547|                    return {};
  239|    547|                }
  240|       |
  241|    801|                number <<= 4;
  242|    801|                number |= phi::hex_digit_value(c).unsafe();
  243|    801|            }
  244|   134k|            else
  245|   134k|            {
  246|   134k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 127k, False: 7.34k]
  ------------------
  247|   127k|                {
  248|   127k|                    return {};
  249|   127k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  7.34k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 2.98k, False: 4.36k]
  |  Branch (252:36): [True: 227, False: 2.76k]
  ------------------
  253|    227|                {
  254|    227|                    return {};
  255|    227|                }
  256|       |
  257|  7.12k|                number *= 10;
  258|  7.12k|                number += (c - '0');
  259|  7.12k|            }
  260|   138k|        }
  261|       |
  262|  1.81k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 1.56k, False: 253]
  ------------------
  263|  1.56k|        {
  264|       |            // Check for over/underflow
  265|  1.56k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 646, False: 919]
  |  Branch (265:32): [True: 197, False: 449]
  ------------------
  266|    197|            {
  267|       |                // Would underflow
  268|    197|                return {};
  269|    197|            }
  270|  1.36k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 919, False: 449]
  |  Branch (270:17): [True: 221, False: 1.14k]
  |  Branch (270:33): [True: 221, False: 698]
  ------------------
  271|    221|            {
  272|       |                // Would overflow
  273|    221|                return {};
  274|    221|            }
  275|       |
  276|  1.14k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 449, False: 698]
  ------------------
  277|    449|            {
  278|    449|                return static_cast<std::int16_t>(-number);
  279|    449|            }
  280|       |
  281|    698|            return static_cast<std::int16_t>(number);
  282|  1.14k|        }
  283|       |
  284|    253|        return {};
  285|  1.81k|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   382k|        {
   12|   382k|            m_Value = value;
   13|   382k|        }
_ZNK3dlx14StatusRegister3GetEv:
   16|   100k|        {
   17|   100k|            return m_Value;
   18|   100k|        }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  7.28k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  7.28k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 103k, False: 0]
  ------------------
   64|   103k|            {
   65|   103k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 7.28k, False: 96.6k]
  ------------------
   66|  7.28k|                {
   67|  7.28k|                    return &token;
   68|  7.28k|                }
   69|   103k|            }
   70|       |
   71|      0|            return nullptr;
   72|  7.28k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|  44.1k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  44.1k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  44.1k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   158k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   158k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   158k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  83.8k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  83.8k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  83.8k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|   417k|    {
   11|   417k|        m_Value = val;
   12|   417k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  1.44M|    {
   16|  1.44M|        return m_Value;
   17|  1.44M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  20.1k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  7.02k|    {
   25|  7.02k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  7.02k|        switch (argument_number.unsafe())
   28|  7.02k|        {
   29|  4.79k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 4.79k, False: 2.22k]
  ------------------
   30|  4.79k|                m_Arg1 = argument;
   31|  4.79k|                break;
   32|  1.54k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 1.54k, False: 5.47k]
  ------------------
   33|  1.54k|                m_Arg2 = argument;
   34|  1.54k|                break;
   35|    678|            case 2u:
  ------------------
  |  Branch (35:13): [True: 678, False: 6.34k]
  ------------------
   36|    678|                m_Arg3 = argument;
   37|    678|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 7.02k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  7.02k|#endif
   42|  7.02k|        }
   43|  7.02k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   83|  3.42M|    {
   84|  3.42M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   85|  3.42M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   88|  3.42M|    {
   89|  3.42M|        return m_Info;
   90|  3.42M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  67.5k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   27|  20.6M|    {
   28|  20.6M|        return m_Type;
   29|  20.6M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  2.55M|    {
   78|  2.55M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  2.55M|        return register_int;
   81|  2.55M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   84|  1.23M|    {
   85|  1.23M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   86|       |
   87|  1.23M|        return register_float;
   88|  1.23M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   92|   149k|    {
   93|   149k|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   94|       |
   95|   149k|        return immediate_value;
   96|   149k|    }
_ZNK3dlx19InstructionArgument21AsAddressDisplacementEv:
  100|      4|    {
  101|      4|        PHI_ASSERT(m_Type == ArgumentType::AddressDisplacement);
  102|       |
  103|      4|        return address_displacement;
  104|      4|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  107|   374k|    {
  108|   374k|        PHI_ASSERT(m_Type == ArgumentType::Label);
  109|       |
  110|   374k|        return label;
  111|   374k|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  2.58k|    {
  171|  2.58k|        InstructionArgument arg;
  172|  2.58k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  2.58k|        arg.register_int.register_id = id;
  174|  2.58k|        return arg;
  175|  2.58k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  1.60k|    {
  179|  1.60k|        InstructionArgument arg;
  180|  1.60k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  1.60k|        arg.register_float.register_id = id;
  182|  1.60k|        return arg;
  183|  1.60k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|    330|    {
  187|    330|        InstructionArgument arg;
  188|    330|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|    330|        arg.immediate_value.signed_value = value;
  190|    330|        return arg;
  191|    330|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|    267|    {
  196|    267|        InstructionArgument arg;
  197|    267|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|    267|        arg.address_displacement.register_id  = id;
  199|    267|        arg.address_displacement.displacement = displacement;
  200|    267|        return arg;
  201|    267|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  2.23k|    {
  205|  2.23k|        InstructionArgument arg;
  206|  2.23k|        arg.m_Type           = ArgumentType::Label;
  207|  2.23k|        arg.label.label_name = label_name;
  208|  2.23k|        return arg;
  209|  2.23k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  351|  27.7k|        {
  352|  27.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  353|  27.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  354|  27.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  355|       |
  356|  27.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  357|  27.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  358|       |
  359|  27.7k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  360|  27.7k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  376|  14.1k|        {
  377|  14.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  378|  14.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  379|  14.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  380|       |
  381|  14.1k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  382|  14.1k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  383|       |
  384|  14.1k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  385|  14.1k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  401|  22.5k|        {
  402|  22.5k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  403|  22.5k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  404|  22.5k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  405|       |
  406|  22.5k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  407|  22.5k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  408|       |
  409|  22.5k|            const phi::f32 new_value = lhs_value + rhs_value;
  410|       |
  411|  22.5k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  412|  22.5k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  416|  8.33k|        {
  417|  8.33k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  418|  8.33k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  419|  8.33k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  420|       |
  421|  8.33k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  422|  8.33k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  423|       |
  424|  8.33k|            const phi::f64 new_value = lhs_value + rhs_value;
  425|       |
  426|  8.33k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  427|  8.33k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  431|  30.8k|        {
  432|  30.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  433|  30.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  434|  30.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  435|       |
  436|  30.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  437|  30.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  438|       |
  439|  30.8k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  440|  30.8k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  456|  30.4k|        {
  457|  30.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  458|  30.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  459|  30.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  460|       |
  461|  30.4k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  462|  30.4k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  463|       |
  464|  30.4k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  465|  30.4k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  481|  11.0k|        {
  482|  11.0k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  483|  11.0k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  484|  11.0k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  485|       |
  486|  11.0k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  487|  11.0k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  488|       |
  489|  11.0k|            const phi::f32 new_value = lhs_value - rhs_value;
  490|       |
  491|  11.0k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  492|  11.0k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  496|  8.24k|        {
  497|  8.24k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  498|  8.24k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  499|  8.24k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  500|       |
  501|  8.24k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  502|  8.24k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  503|       |
  504|  8.24k|            const phi::f64 new_value = lhs_value - rhs_value;
  505|       |
  506|  8.24k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  507|  8.24k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  511|  14.5k|        {
  512|  14.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  513|  14.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  514|  14.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  515|       |
  516|  14.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  517|  14.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  518|       |
  519|  14.5k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  520|  14.5k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  536|  19.1k|        {
  537|  19.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  538|  19.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  539|  19.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  540|       |
  541|  19.1k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  542|  19.1k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  543|       |
  544|  19.1k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  545|  19.1k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  591|      1|        {
  592|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  593|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  594|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  595|       |
  596|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  597|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  598|       |
  599|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  600|      1|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  616|      1|        {
  617|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  618|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  619|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  620|       |
  621|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  622|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  623|       |
  624|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  625|      1|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  641|      1|        {
  642|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  643|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  644|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  645|       |
  646|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  647|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  648|       |
  649|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (649:17): [True: 1, False: 0]
  ------------------
  650|      1|            {
  651|      1|                processor.Raise(Exception::DivideByZero);
  652|      1|                return;
  653|      1|            }
  654|       |
  655|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  656|       |
  657|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  658|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  662|      1|        {
  663|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  664|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  665|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  666|       |
  667|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  668|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  669|       |
  670|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (670:17): [True: 1, False: 0]
  ------------------
  671|      1|            {
  672|      1|                processor.Raise(Exception::DivideByZero);
  673|      1|                return;
  674|      1|            }
  675|       |
  676|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  677|       |
  678|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  679|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  683|  17.5k|        {
  684|  17.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  685|  17.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  686|  17.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  687|       |
  688|  17.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  689|  17.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  690|       |
  691|  17.5k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  692|  17.5k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  709|  11.6k|        {
  710|  11.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  711|  11.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  712|  11.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  713|       |
  714|  11.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  715|  11.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  716|       |
  717|  11.6k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  718|  11.6k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  735|  29.9k|        {
  736|  29.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  737|  29.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  738|  29.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  739|       |
  740|  29.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  741|  29.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  742|       |
  743|  29.9k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  744|  29.9k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  761|  20.7k|        {
  762|  20.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  763|  20.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  764|  20.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  765|       |
  766|  20.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  767|  20.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  768|       |
  769|  20.7k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  770|  20.7k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  787|  17.9k|        {
  788|  17.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  789|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  790|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  791|       |
  792|  17.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  793|  17.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  794|  17.9k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  795|       |
  796|  17.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  797|  17.9k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  814|  20.5k|        {
  815|  20.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  816|  20.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  817|  20.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  818|       |
  819|  20.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  820|  20.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  821|  20.5k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  822|       |
  823|  20.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  824|  20.5k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  841|  32.2k|        {
  842|  32.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  843|  32.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  844|  32.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  845|       |
  846|  32.2k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  847|  32.2k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  848|  32.2k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  849|       |
  850|  32.2k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  851|  32.2k|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  868|  14.0k|        {
  869|  14.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  870|  14.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  871|  14.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  872|       |
  873|  14.0k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  874|  14.0k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  875|       |
  876|  14.0k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (876:41): [True: 0, False: 14.0k]
  ------------------
  877|       |
  878|  14.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  879|  14.0k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  897|  20.2k|        {
  898|  20.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  899|  20.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  900|  20.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  901|       |
  902|  20.2k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  903|  20.2k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  904|       |
  905|  20.2k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (905:41): [True: 0, False: 20.2k]
  ------------------
  906|       |
  907|  20.2k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  908|  20.2k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  926|  69.1k|        {
  927|  69.1k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  928|  69.1k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  929|       |
  930|  69.1k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  931|  69.1k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  932|       |
  933|  69.1k|            const phi::boolean new_value = (lhs_value < rhs_value);
  934|       |
  935|  69.1k|            processor.SetFPSRValue(new_value);
  936|  69.1k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  940|  8.87k|        {
  941|  8.87k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  942|  8.87k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  943|       |
  944|  8.87k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  945|  8.87k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  946|       |
  947|  8.87k|            const phi::boolean new_value = (lhs_value < rhs_value);
  948|       |
  949|  8.87k|            processor.SetFPSRValue(new_value);
  950|  8.87k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  954|  10.8k|        {
  955|  10.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  956|  10.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  957|  10.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  958|       |
  959|  10.8k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  960|  10.8k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  961|       |
  962|  10.8k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (962:41): [True: 0, False: 10.8k]
  ------------------
  963|       |
  964|  10.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  965|  10.8k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  983|  12.5k|        {
  984|  12.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  985|  12.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  986|  12.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  987|       |
  988|  12.5k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  989|  12.5k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  990|       |
  991|  12.5k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (991:41): [True: 0, False: 12.5k]
  ------------------
  992|       |
  993|  12.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  994|  12.5k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1012|  69.7k|        {
 1013|  69.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1014|  69.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1015|       |
 1016|  69.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1017|  69.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1018|       |
 1019|  69.7k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1020|       |
 1021|  69.7k|            processor.SetFPSRValue(new_value);
 1022|  69.7k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1026|  22.5k|        {
 1027|  22.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1028|  22.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1029|       |
 1030|  22.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1031|  22.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1032|       |
 1033|  22.5k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1034|       |
 1035|  22.5k|            processor.SetFPSRValue(new_value);
 1036|  22.5k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1040|  51.0k|        {
 1041|  51.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1042|  51.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1043|  51.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1044|       |
 1045|  51.0k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1046|  51.0k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1047|       |
 1048|  51.0k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1048:41): [True: 46.2k, False: 4.79k]
  ------------------
 1049|       |
 1050|  51.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1051|  51.0k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1069|  20.2k|        {
 1070|  20.2k|            const auto& dest_reg = arg1.AsRegisterInt();
 1071|  20.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1072|  20.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1073|       |
 1074|  20.2k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1075|  20.2k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1076|       |
 1077|  20.2k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1077:41): [True: 20.2k, False: 0]
  ------------------
 1078|       |
 1079|  20.2k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1080|  20.2k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1098|  20.9k|        {
 1099|  20.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1100|  20.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1101|       |
 1102|  20.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1103|  20.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1104|       |
 1105|  20.9k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1106|       |
 1107|  20.9k|            processor.SetFPSRValue(new_value);
 1108|  20.9k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1112|  40.7k|        {
 1113|  40.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1114|  40.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1115|       |
 1116|  40.7k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1117|  40.7k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1118|       |
 1119|  40.7k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1120|       |
 1121|  40.7k|            processor.SetFPSRValue(new_value);
 1122|  40.7k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1126|  17.4k|        {
 1127|  17.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1128|  17.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1129|  17.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1130|       |
 1131|  17.4k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1132|  17.4k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1133|       |
 1134|  17.4k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1134:41): [True: 15.4k, False: 2.00k]
  ------------------
 1135|       |
 1136|  17.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1137|  17.4k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1155|  11.0k|        {
 1156|  11.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1157|  11.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1158|  11.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1159|       |
 1160|  11.0k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1161|  11.0k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1162|       |
 1163|  11.0k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1163:41): [True: 11.0k, False: 0]
  ------------------
 1164|       |
 1165|  11.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1166|  11.0k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1184|  22.7k|        {
 1185|  22.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1186|  22.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1187|       |
 1188|  22.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1189|  22.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1190|       |
 1191|  22.7k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1192|       |
 1193|  22.7k|            processor.SetFPSRValue(new_value);
 1194|  22.7k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1198|  25.8k|        {
 1199|  25.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1200|  25.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1201|       |
 1202|  25.8k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1203|  25.8k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1204|       |
 1205|  25.8k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1206|       |
 1207|  25.8k|            processor.SetFPSRValue(new_value);
 1208|  25.8k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1212|  19.1k|        {
 1213|  19.1k|            const auto& dest_reg = arg1.AsRegisterInt();
 1214|  19.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1215|  19.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1216|       |
 1217|  19.1k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1218|  19.1k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1219|       |
 1220|  19.1k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1220:41): [True: 19.1k, False: 0]
  ------------------
 1221|       |
 1222|  19.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1223|  19.1k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1241|  21.9k|        {
 1242|  21.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1243|  21.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1244|  21.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1245|       |
 1246|  21.9k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1247|  21.9k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1248|       |
 1249|  21.9k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1249:41): [True: 21.9k, False: 0]
  ------------------
 1250|       |
 1251|  21.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1252|  21.9k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1270|  22.5k|        {
 1271|  22.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1272|  22.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1273|       |
 1274|  22.5k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1275|  22.5k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1276|       |
 1277|  22.5k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1278|       |
 1279|  22.5k|            processor.SetFPSRValue(new_value);
 1280|  22.5k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1284|  25.8k|        {
 1285|  25.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1286|  25.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1287|       |
 1288|  25.8k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1289|  25.8k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1290|       |
 1291|  25.8k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1292|       |
 1293|  25.8k|            processor.SetFPSRValue(new_value);
 1294|  25.8k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1298|  24.4k|        {
 1299|  24.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1300|  24.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1301|  24.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1302|       |
 1303|  24.4k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1304|  24.4k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1305|       |
 1306|  24.4k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1306:41): [True: 0, False: 24.4k]
  ------------------
 1307|       |
 1308|  24.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1309|  24.4k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1327|  20.7k|        {
 1328|  20.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1329|  20.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1330|  20.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1331|       |
 1332|  20.7k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1333|  20.7k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1334|       |
 1335|  20.7k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1335:41): [True: 0, False: 20.7k]
  ------------------
 1336|       |
 1337|  20.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1338|  20.7k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1356|  26.7k|        {
 1357|  26.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1358|  26.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1359|       |
 1360|  26.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1361|  26.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1362|       |
 1363|  26.7k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1364|       |
 1365|  26.7k|            processor.SetFPSRValue(new_value);
 1366|  26.7k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1370|  22.5k|        {
 1371|  22.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1372|  22.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1373|       |
 1374|  22.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1375|  22.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1376|       |
 1377|  22.5k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1378|       |
 1379|  22.5k|            processor.SetFPSRValue(new_value);
 1380|  22.5k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1384|  64.9k|        {
 1385|  64.9k|            const auto& test_reg   = arg1.AsRegisterInt();
 1386|  64.9k|            const auto& jump_label = arg2.AsLabel();
 1387|       |
 1388|  64.9k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1389|       |
 1390|  64.9k|            if (test_value == 0)
  ------------------
  |  Branch (1390:17): [True: 64.9k, False: 0]
  ------------------
 1391|  64.9k|            {
 1392|  64.9k|                JumpToLabel(processor, jump_label.label_name);
 1393|  64.9k|            }
 1394|  64.9k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1398|  17.9k|        {
 1399|  17.9k|            const auto& test_reg   = arg1.AsRegisterInt();
 1400|  17.9k|            const auto& jump_label = arg2.AsLabel();
 1401|       |
 1402|  17.9k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1403|       |
 1404|  17.9k|            if (test_value != 0)
  ------------------
  |  Branch (1404:17): [True: 0, False: 17.9k]
  ------------------
 1405|      0|            {
 1406|      0|                JumpToLabel(processor, jump_label.label_name);
 1407|      0|            }
 1408|  17.9k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1412|  9.69k|        {
 1413|  9.69k|            const auto& jump_label = arg1.AsLabel();
 1414|       |
 1415|  9.69k|            phi::boolean test_value = processor.GetFPSRValue();
 1416|       |
 1417|  9.69k|            if (test_value)
  ------------------
  |  Branch (1417:17): [True: 1, False: 9.69k]
  ------------------
 1418|      1|            {
 1419|      1|                JumpToLabel(processor, jump_label.label_name);
 1420|      1|            }
 1421|  9.69k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1425|  90.9k|        {
 1426|  90.9k|            const auto& jump_label = arg1.AsLabel();
 1427|       |
 1428|  90.9k|            phi::boolean test_value = processor.GetFPSRValue();
 1429|       |
 1430|  90.9k|            if (!test_value)
  ------------------
  |  Branch (1430:17): [True: 68.0k, False: 22.8k]
  ------------------
 1431|  68.0k|            {
 1432|  68.0k|                JumpToLabel(processor, jump_label.label_name);
 1433|  68.0k|            }
 1434|  90.9k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1438|   129k|        {
 1439|   129k|            const auto& jump_label = arg1.AsLabel();
 1440|       |
 1441|   129k|            JumpToLabel(processor, jump_label.label_name);
 1442|   129k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1446|   742k|        {
 1447|   742k|            const auto& jump_register = arg1.AsRegisterInt();
 1448|       |
 1449|   742k|            JumpToRegister(processor, jump_register.register_id);
 1450|   742k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1454|  61.0k|        {
 1455|  61.0k|            const auto& jump_label = arg1.AsLabel();
 1456|       |
 1457|  61.0k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1458|  61.0k|                                                  processor.GetNextProgramCounter());
 1459|       |
 1460|  61.0k|            JumpToLabel(processor, jump_label.label_name);
 1461|  61.0k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1465|  28.0k|        {
 1466|  28.0k|            const auto& jump_register = arg1.AsRegisterInt();
 1467|       |
 1468|  28.0k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1469|  28.0k|                                                  processor.GetNextProgramCounter());
 1470|       |
 1471|  28.0k|            JumpToRegister(processor, jump_register.register_id);
 1472|  28.0k|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1663|      1|        {
 1664|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1665|       |
 1666|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1667|       |
 1668|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1668:17): [True: 0, False: 1]
  ------------------
 1669|      0|            {
 1670|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1671|      0|                return;
 1672|      0|            }
 1673|       |
 1674|      1|            phi::i32 address = optional_address.value();
 1675|       |
 1676|      1|            auto optional_value =
 1677|      1|                    processor.GetMemory().LoadFloat(static_cast<std::size_t>(address.unsafe()));
 1678|       |
 1679|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1679:17): [True: 1, False: 0]
  ------------------
 1680|      1|            {
 1681|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1682|      1|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1683|      1|                return;
 1684|      1|            }
 1685|       |
 1686|      0|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1687|      0|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1691|      1|        {
 1692|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1693|       |
 1694|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1695|       |
 1696|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1696:17): [True: 0, False: 1]
  ------------------
 1697|      0|            {
 1698|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1699|      0|                return;
 1700|      0|            }
 1701|       |
 1702|      1|            phi::i32 address = optional_address.value();
 1703|       |
 1704|      1|            auto optional_value =
 1705|      1|                    processor.GetMemory().LoadDouble(static_cast<std::size_t>(address.unsafe()));
 1706|       |
 1707|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1707:17): [True: 1, False: 0]
  ------------------
 1708|      1|            {
 1709|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1710|      1|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1711|      1|                return;
 1712|      1|            }
 1713|       |
 1714|      0|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1715|      0|        }
_ZN3dlx4impl2SBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1719|  22.5k|        {
 1720|  22.5k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1721|       |
 1722|  22.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1722:17): [True: 1, False: 22.5k]
  ------------------
 1723|      1|            {
 1724|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1725|      1|                return;
 1726|      1|            }
 1727|       |
 1728|  22.5k|            phi::i32 address = optional_address.value();
 1729|       |
 1730|  22.5k|            const auto& src_reg = arg2.AsRegisterInt();
 1731|       |
 1732|  22.5k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1733|       |
 1734|  22.5k|            phi::boolean success =
 1735|  22.5k|                    processor.GetMemory().StoreByte(static_cast<std::size_t>(address.unsafe()),
 1736|  22.5k|                                                    static_cast<std::int8_t>(value.unsafe()));
 1737|       |
 1738|  22.5k|            if (!success)
  ------------------
  |  Branch (1738:17): [True: 5, False: 22.5k]
  ------------------
 1739|      5|            {
 1740|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1741|      5|                DLX_ERROR("Failed to store byte at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1742|      5|            }
 1743|  22.5k|        }
_ZN3dlx4impl3SBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1747|  15.0k|        {
 1748|  15.0k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1749|       |
 1750|  15.0k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1750:17): [True: 1, False: 15.0k]
  ------------------
 1751|      1|            {
 1752|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1753|      1|                return;
 1754|      1|            }
 1755|       |
 1756|  15.0k|            phi::i32 address = optional_address.value();
 1757|       |
 1758|  15.0k|            const auto& src_reg = arg2.AsRegisterInt();
 1759|       |
 1760|  15.0k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1761|       |
 1762|  15.0k|            phi::boolean success = processor.GetMemory().StoreUnsignedByte(
 1763|  15.0k|                    static_cast<std::size_t>(address.unsafe()),
 1764|  15.0k|                    static_cast<std::uint8_t>(value.unsafe()));
 1765|       |
 1766|  15.0k|            if (!success)
  ------------------
  |  Branch (1766:17): [True: 4, False: 15.0k]
  ------------------
 1767|      4|            {
 1768|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1769|      4|                DLX_ERROR("Failed to store unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1770|      4|            }
 1771|  15.0k|        }
_ZN3dlx4impl2SHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1775|  14.6k|        {
 1776|  14.6k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1777|       |
 1778|  14.6k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1778:17): [True: 1, False: 14.6k]
  ------------------
 1779|      1|            {
 1780|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1781|      1|                return;
 1782|      1|            }
 1783|       |
 1784|  14.6k|            phi::i32 address = optional_address.value();
 1785|       |
 1786|  14.6k|            const auto& src_reg = arg2.AsRegisterInt();
 1787|       |
 1788|  14.6k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1789|       |
 1790|  14.6k|            phi::boolean success =
 1791|  14.6k|                    processor.GetMemory().StoreHalfWord(static_cast<std::size_t>(address.unsafe()),
 1792|  14.6k|                                                        static_cast<std::int16_t>(value.unsafe()));
 1793|       |
 1794|  14.6k|            if (!success)
  ------------------
  |  Branch (1794:17): [True: 3, False: 14.6k]
  ------------------
 1795|      3|            {
 1796|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1797|      3|                DLX_ERROR("Failed to store half word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1798|      3|            }
 1799|  14.6k|        }
_ZN3dlx4impl3SHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1803|  22.5k|        {
 1804|  22.5k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1805|       |
 1806|  22.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1806:17): [True: 1, False: 22.5k]
  ------------------
 1807|      1|            {
 1808|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1809|      1|                return;
 1810|      1|            }
 1811|       |
 1812|  22.5k|            phi::i32 address = optional_address.value();
 1813|       |
 1814|  22.5k|            const auto& src_reg = arg2.AsRegisterInt();
 1815|       |
 1816|  22.5k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1817|       |
 1818|  22.5k|            phi::boolean success = processor.GetMemory().StoreUnsignedHalfWord(
 1819|  22.5k|                    static_cast<std::size_t>(address.unsafe()),
 1820|  22.5k|                    static_cast<std::uint16_t>(value.unsafe()));
 1821|       |
 1822|  22.5k|            if (!success)
  ------------------
  |  Branch (1822:17): [True: 3, False: 22.5k]
  ------------------
 1823|      3|            {
 1824|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1825|      3|                DLX_ERROR("Failed to store unsigned half word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1826|      3|            }
 1827|  22.5k|        }
_ZN3dlx4impl2SWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1831|  19.4k|        {
 1832|  19.4k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1833|       |
 1834|  19.4k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1834:17): [True: 1, False: 19.4k]
  ------------------
 1835|      1|            {
 1836|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1837|      1|                return;
 1838|      1|            }
 1839|       |
 1840|  19.4k|            phi::i32 address = optional_address.value();
 1841|       |
 1842|  19.4k|            const auto& src_reg = arg2.AsRegisterInt();
 1843|       |
 1844|  19.4k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1845|       |
 1846|  19.4k|            phi::boolean success = processor.GetMemory().StoreWord(
 1847|  19.4k|                    static_cast<std::size_t>(address.unsafe()), value);
 1848|       |
 1849|  19.4k|            if (!success)
  ------------------
  |  Branch (1849:17): [True: 2, False: 19.4k]
  ------------------
 1850|      2|            {
 1851|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1852|      2|                DLX_ERROR("Failed to store word at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1853|      2|            }
 1854|  19.4k|        }
_ZN3dlx4impl3SWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1858|  15.0k|        {
 1859|  15.0k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1860|       |
 1861|  15.0k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1861:17): [True: 1, False: 15.0k]
  ------------------
 1862|      1|            {
 1863|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1864|      1|                return;
 1865|      1|            }
 1866|       |
 1867|  15.0k|            phi::i32 address = optional_address.value();
 1868|       |
 1869|  15.0k|            const auto& src_reg = arg2.AsRegisterInt();
 1870|       |
 1871|  15.0k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1872|       |
 1873|  15.0k|            phi::boolean success = processor.GetMemory().StoreUnsignedWord(
 1874|  15.0k|                    static_cast<std::size_t>(address.unsafe()), value);
 1875|       |
 1876|  15.0k|            if (!success)
  ------------------
  |  Branch (1876:17): [True: 2, False: 15.0k]
  ------------------
 1877|      2|            {
 1878|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1879|      2|                DLX_ERROR("Failed to store unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1880|      2|            }
 1881|  15.0k|        }
_ZN3dlx4impl2SFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1885|  17.9k|        {
 1886|  17.9k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1887|       |
 1888|  17.9k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1888:17): [True: 1, False: 17.9k]
  ------------------
 1889|      1|            {
 1890|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1891|      1|                return;
 1892|      1|            }
 1893|       |
 1894|  17.9k|            phi::i32 address = optional_address.value();
 1895|       |
 1896|  17.9k|            const auto& src_reg = arg2.AsRegisterFloat();
 1897|       |
 1898|  17.9k|            phi::f32 value = processor.FloatRegisterGetFloatValue(src_reg.register_id);
 1899|       |
 1900|  17.9k|            phi::boolean success = processor.GetMemory().StoreFloat(
 1901|  17.9k|                    static_cast<std::size_t>(address.unsafe()), value);
 1902|       |
 1903|  17.9k|            if (!success)
  ------------------
  |  Branch (1903:17): [True: 4, False: 17.9k]
  ------------------
 1904|      4|            {
 1905|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1906|      4|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1907|      4|            }
 1908|  17.9k|        }
_ZN3dlx4impl2SDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1912|  22.5k|        {
 1913|  22.5k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1914|       |
 1915|  22.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1915:17): [True: 2, False: 22.5k]
  ------------------
 1916|      2|            {
 1917|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1918|      2|                return;
 1919|      2|            }
 1920|       |
 1921|  22.5k|            phi::i32 address = optional_address.value();
 1922|       |
 1923|  22.5k|            const auto& src_reg = arg2.AsRegisterFloat();
 1924|       |
 1925|  22.5k|            phi::f64 value = processor.FloatRegisterGetDoubleValue(src_reg.register_id);
 1926|       |
 1927|  22.5k|            phi::boolean success = processor.GetMemory().StoreDouble(
 1928|  22.5k|                    static_cast<std::size_t>(address.unsafe()), value);
 1929|       |
 1930|  22.5k|            if (!success)
  ------------------
  |  Branch (1930:17): [True: 4, False: 22.5k]
  ------------------
 1931|      4|            {
 1932|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1933|      4|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1934|      4|            }
 1935|  22.5k|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1939|  5.85k|        {
 1940|  5.85k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1941|  5.85k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1942|       |
 1943|  5.85k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1944|       |
 1945|  5.85k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1946|  5.85k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1950|  15.4k|        {
 1951|  15.4k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1952|  15.4k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1953|       |
 1954|  15.4k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1955|       |
 1956|  15.4k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1957|  15.4k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1988|  16.7k|        {
 1989|  16.7k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1990|  16.7k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1991|       |
 1992|  16.7k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1993|       |
 1994|  16.7k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 1995|  16.7k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1999|  12.8k|        {
 2000|  12.8k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2001|  12.8k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2002|       |
 2003|  12.8k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2004|  12.8k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2005|  12.8k|            const float        converted_value_float =
 2006|  12.8k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2007|       |
 2008|  12.8k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2009|  12.8k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2013|  25.0k|        {
 2014|  25.0k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2015|  25.0k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2016|       |
 2017|  25.0k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2018|  25.0k|            const float  converted_value = static_cast<float>(src_value);
 2019|       |
 2020|  25.0k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2021|  25.0k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2025|  15.1k|        {
 2026|  15.1k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2027|  15.1k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2028|       |
 2029|  15.1k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2030|  15.1k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2031|  15.1k|            const float        converted_value_float =
 2032|  15.1k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2033|       |
 2034|  15.1k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2035|  15.1k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2039|  32.5k|        {
 2040|  32.5k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2041|  32.5k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2042|       |
 2043|  32.5k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2044|  32.5k|            const std::int32_t converted_value_int =
 2045|  32.5k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2046|  32.5k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2047|       |
 2048|  32.5k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2049|  32.5k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2053|  22.5k|        {
 2054|  22.5k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2055|  22.5k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2056|       |
 2057|  22.5k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2058|  22.5k|            const std::int32_t converted_value_int =
 2059|  22.5k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2060|  22.5k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2061|       |
 2062|  22.5k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2063|  22.5k|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2073|      2|        {
 2074|      2|            processor.Raise(Exception::Halt);
 2075|      2|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2079|  1.02M|        {
 2080|       |            /* Do nothing */
 2081|  1.02M|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  169|  27.7k|    {
  170|  27.7k|        phi::i64 res = phi::i64(lhs) + rhs;
  171|       |
  172|  27.7k|        SafeWriteInteger(processor, dest_reg, res);
  173|  27.7k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  124|  73.1k|    {
  125|  73.1k|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  126|  73.1k|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  127|       |
  128|       |        // Check for underflow
  129|  73.1k|        if (value < min)
  ------------------
  |  Branch (129:13): [True: 0, False: 73.1k]
  ------------------
  130|      0|        {
  131|      0|            processor.Raise(Exception::Underflow);
  132|       |
  133|      0|            value = max + (value % (min - 1));
  134|      0|        }
  135|       |        // Check for overflow
  136|  73.1k|        else if (value > max)
  ------------------
  |  Branch (136:18): [True: 0, False: 73.1k]
  ------------------
  137|      0|        {
  138|      0|            processor.Raise(Exception::Overflow);
  139|       |
  140|      0|            value = min + (value % (max + 1));
  141|      0|        }
  142|       |
  143|  73.1k|        PHI_ASSERT(value >= min);
  144|  73.1k|        PHI_ASSERT(value <= max);
  145|       |
  146|  73.1k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  147|  73.1k|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  177|  14.1k|    {
  178|  14.1k|        phi::u64 res = phi::u64(lhs) + rhs;
  179|       |
  180|  14.1k|        SafeWriteInteger(processor, dest_reg, res);
  181|  14.1k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  151|  63.7k|    {
  152|  63.7k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  153|       |
  154|       |        // Check for overflow
  155|  63.7k|        if (value > max)
  ------------------
  |  Branch (155:13): [True: 0, False: 63.7k]
  ------------------
  156|      0|        {
  157|      0|            processor.Raise(Exception::Overflow);
  158|       |
  159|      0|            value %= max + 1u;
  160|      0|        }
  161|       |
  162|  63.7k|        PHI_ASSERT(value <= max);
  163|       |
  164|  63.7k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  165|  63.7k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  185|  30.8k|    {
  186|  30.8k|        phi::i64 res = phi::i64(lhs) - rhs;
  187|       |
  188|  30.8k|        SafeWriteInteger(processor, dest_reg, res);
  189|  30.8k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  193|  30.4k|    {
  194|  30.4k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  195|       |
  196|  30.4k|        if (lhs < rhs)
  ------------------
  |  Branch (196:13): [True: 5.62k, False: 24.8k]
  ------------------
  197|  5.62k|        {
  198|  5.62k|            processor.Raise(Exception::Underflow);
  199|       |
  200|  5.62k|            phi::u64 res = max - rhs + lhs + 1u;
  201|  5.62k|            SafeWriteInteger(processor, dest_reg, res);
  202|  5.62k|            return;
  203|  5.62k|        }
  204|       |
  205|  24.8k|        phi::u64 res = phi::u64(lhs) - rhs;
  206|       |
  207|  24.8k|        SafeWriteInteger(processor, dest_reg, res);
  208|  24.8k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  212|  14.5k|    {
  213|  14.5k|        phi::i64 res = phi::i64(lhs) * rhs;
  214|       |
  215|  14.5k|        SafeWriteInteger(processor, dest_reg, res);
  216|  14.5k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  220|  19.1k|    {
  221|  19.1k|        phi::u64 res = phi::u64(lhs) * rhs;
  222|       |
  223|  19.1k|        SafeWriteInteger(processor, dest_reg, res);
  224|  19.1k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  228|      1|    {
  229|      1|        if (rhs == 0)
  ------------------
  |  Branch (229:13): [True: 1, False: 0]
  ------------------
  230|      1|        {
  231|      1|            processor.Raise(Exception::DivideByZero);
  232|      1|            return;
  233|      1|        }
  234|       |
  235|      0|        phi::i64 res = phi::i64(lhs) / rhs;
  236|       |
  237|      0|        SafeWriteInteger(processor, dest_reg, res);
  238|      0|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  242|      1|    {
  243|      1|        if (rhs == 0u)
  ------------------
  |  Branch (243:13): [True: 1, False: 0]
  ------------------
  244|      1|        {
  245|      1|            processor.Raise(Exception::DivideByZero);
  246|      1|            return;
  247|      1|        }
  248|       |
  249|      0|        phi::u64 res = phi::u64(lhs) / rhs;
  250|       |
  251|      0|        SafeWriteInteger(processor, dest_reg, res);
  252|      0|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  325|  47.5k|    {
  326|  47.5k|        if (shift > 31)
  ------------------
  |  Branch (326:13): [True: 0, False: 47.5k]
  ------------------
  327|      0|        {
  328|      0|            processor.Raise(Exception::BadShift);
  329|       |
  330|       |            // Just set register to 0
  331|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  332|      0|            return;
  333|      0|        }
  334|       |
  335|       |        // Negative shifts are undefined behavior
  336|  47.5k|        if (shift < 0)
  ------------------
  |  Branch (336:13): [True: 0, False: 47.5k]
  ------------------
  337|      0|        {
  338|      0|            processor.Raise(Exception::BadShift);
  339|      0|            return;
  340|      0|        }
  341|       |
  342|  47.5k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  343|       |
  344|  47.5k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  345|  47.5k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  256|  11.6k|    {
  257|       |        // Prevent undefined behavior by shifting by more than 31
  258|  11.6k|        if (shift > 31)
  ------------------
  |  Branch (258:13): [True: 0, False: 11.6k]
  ------------------
  259|      0|        {
  260|      0|            processor.Raise(Exception::BadShift);
  261|       |
  262|       |            // Just set register to 0
  263|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  264|      0|            return;
  265|      0|        }
  266|       |
  267|       |        // Do nothing when shifting by zero to prevent undefined behavior
  268|  11.6k|        if (shift == 0)
  ------------------
  |  Branch (268:13): [True: 11.6k, False: 0]
  ------------------
  269|  11.6k|        {
  270|  11.6k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  271|  11.6k|            return;
  272|  11.6k|        }
  273|       |
  274|       |        // Negative shifts are undefiend behavior
  275|      0|        if (shift < 0)
  ------------------
  |  Branch (275:13): [True: 0, False: 0]
  ------------------
  276|      0|        {
  277|      0|            processor.Raise(Exception::BadShift);
  278|      0|            return;
  279|      0|        }
  280|       |
  281|      0|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  282|       |
  283|      0|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  284|       |
  285|      0|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  286|      0|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  290|  20.7k|    {
  291|       |        // Prevent undefined behavior by shifting by more than 31
  292|  20.7k|        if (shift > 31)
  ------------------
  |  Branch (292:13): [True: 0, False: 20.7k]
  ------------------
  293|      0|        {
  294|      0|            processor.Raise(Exception::BadShift);
  295|       |
  296|       |            // Is negative ie. sign bit is set
  297|      0|            if (base < 0)
  ------------------
  |  Branch (297:17): [True: 0, False: 0]
  ------------------
  298|      0|            {
  299|       |                // Set every byte to 1
  300|      0|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  301|      0|            }
  302|      0|            else
  303|      0|            {
  304|       |                // Set every byte to 0
  305|      0|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  306|      0|            }
  307|      0|            return;
  308|      0|        }
  309|       |
  310|       |        // Negative shifts are undefined behavior
  311|  20.7k|        if (shift < 0)
  ------------------
  |  Branch (311:13): [True: 0, False: 20.7k]
  ------------------
  312|      0|        {
  313|      0|            processor.Raise(Exception::BadShift);
  314|      0|            return;
  315|      0|        }
  316|       |
  317|  20.7k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  318|       |
  319|  20.7k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  320|  20.7k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|   323k|    {
   39|       |        // Lookup the label
   40|   323k|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|   323k|        PHI_ASSERT(program != nullptr);
   42|   323k|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|   323k|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 110, False: 323k]
  ------------------
   45|    110|        {
   46|    110|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|    110|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|    110|            processor.Raise(Exception::UnknownLabel);
   48|    110|            return;
   49|    110|        }
   50|       |
   51|   323k|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|   323k|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|   323k|        processor.SetNextProgramCounter(jump_point);
   56|   323k|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|   770k|    {
   60|   770k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|   770k|        phi::u32 max_address =
   63|   770k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|   770k|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 3, False: 770k]
  ------------------
   65|      3|        {
   66|      3|            processor.Raise(Exception::AddressOutOfBounds);
   67|      3|            return;
   68|      3|        }
   69|       |
   70|   770k|        processor.SetNextProgramCounter(address.unsafe());
   71|   770k|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
  100|   149k|    {
  101|   149k|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (101:13): [True: 149k, False: 4]
  ------------------
  102|   149k|        {
  103|   149k|            const auto& imm_value = argument.AsImmediateValue();
  104|       |
  105|   149k|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (105:17): [True: 8, False: 149k]
  ------------------
  106|      8|            {
  107|      8|                return {};
  108|      8|            }
  109|       |
  110|   149k|            return imm_value.signed_value;
  111|   149k|        }
  112|       |
  113|      4|        PHI_ASSERT(argument.GetType() == ArgumentType::AddressDisplacement);
  114|       |
  115|      4|        const auto& adr_displacement = argument.AsAddressDisplacement();
  116|      4|        return CalculateDisplacementAddress(processor, adr_displacement);
  117|   149k|    }
InstructionImplementation.cpp:_ZN3dlxL28CalculateDisplacementAddressERNS_9ProcessorERKNS_19InstructionArgument19AddressDisplacementE:
   78|      4|    {
   79|      4|        phi::i32 register_value = processor.IntRegisterGetSignedValue(adr_displacement.register_id);
   80|       |
   81|      4|        phi::i32 address = adr_displacement.displacement + register_value;
   82|       |
   83|      4|        if (address < 0)
  ------------------
  |  Branch (83:13): [True: 1, False: 3]
  ------------------
   84|      1|        {
   85|      1|            processor.Raise(Exception::AddressOutOfBounds);
   86|      1|            return {};
   87|      1|        }
   88|       |
   89|      3|        return address;
   90|      4|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  3.42M|    {
   12|  3.42M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  3.42M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  3.42M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  3.42M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  3.42M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  3.42M|                   "Unexpected argument type for arg1");
   22|  3.42M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  3.42M|                   "Unexpected argument type for arg2");
   24|  3.42M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  3.42M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  3.42M|        m_Executor(processor, arg1, arg2, arg3);
   29|  3.42M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  20.1k|    {
  453|  20.1k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  20.1k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|   276k|    {
   17|   276k|        m_ValueSigned = val;
   18|   276k|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|   103k|    {
   22|   103k|        m_ValueUnsigned = val;
   23|   103k|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|   861k|    {
   27|   861k|        return m_ValueSigned;
   28|   861k|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  1.16M|    {
   32|  1.16M|        return m_ValueUnsigned;
   33|  1.16M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|   620k|    {
   37|   620k|        return m_IsReadOnly;
   38|   620k|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   15|      1|    {
   16|      1|        m_Values.resize(starting_size.unsafe());
   17|      1|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  112|      1|    {
  113|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (113:13): [True: 1, False: 0]
  ------------------
  114|      1|        {
  115|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  116|      1|            return {};
  117|      1|        }
  118|       |
  119|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
  120|      0|        return *reinterpret_cast<const float*>(&m_Values[index].signed_value);
  121|      1|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  124|      1|    {
  125|      1|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (125:13): [True: 1, False: 0]
  ------------------
  126|      1|        {
  127|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  128|      1|            return {};
  129|      1|        }
  130|       |
  131|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
  132|      0|        return *reinterpret_cast<const double*>(&m_Values[(index)].signed_value);
  133|      1|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  136|  22.5k|    {
  137|  22.5k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (137:13): [True: 5, False: 22.5k]
  ------------------
  138|      5|        {
  139|      5|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  140|      5|            return false;
  141|      5|        }
  142|       |
  143|  22.5k|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  144|  22.5k|        return true;
  145|  22.5k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedByteEN3phi7integerImEENS2_IhEE:
  148|  15.0k|    {
  149|  15.0k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (149:13): [True: 4, False: 15.0k]
  ------------------
  150|      4|        {
  151|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  152|      4|            return false;
  153|      4|        }
  154|       |
  155|  15.0k|        m_Values[(address - m_StartingAddress).unsafe()].unsigned_value = value.unsafe();
  156|  15.0k|        return true;
  157|  15.0k|    }
_ZN3dlx11MemoryBlock13StoreHalfWordEN3phi7integerImEENS2_IsEE:
  160|  14.6k|    {
  161|  14.6k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (161:13): [True: 3, False: 14.6k]
  ------------------
  162|      3|        {
  163|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  164|      3|            return false;
  165|      3|        }
  166|       |
  167|  14.6k|        std::size_t index = (address - m_StartingAddress).unsafe();
  168|  14.6k|        *reinterpret_cast<std::int16_t*>(&m_Values[index].signed_value) = value.unsafe();
  169|       |
  170|  14.6k|        return true;
  171|  14.6k|    }
_ZN3dlx11MemoryBlock21StoreUnsignedHalfWordEN3phi7integerImEENS2_ItEE:
  174|  22.5k|    {
  175|  22.5k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (175:13): [True: 3, False: 22.5k]
  ------------------
  176|      3|        {
  177|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  178|      3|            return false;
  179|      3|        }
  180|       |
  181|  22.5k|        std::size_t index = (address - m_StartingAddress).unsafe();
  182|  22.5k|        *reinterpret_cast<std::uint16_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  183|       |
  184|  22.5k|        return true;
  185|  22.5k|    }
_ZN3dlx11MemoryBlock9StoreWordEN3phi7integerImEENS2_IiEE:
  188|  19.4k|    {
  189|  19.4k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (189:13): [True: 2, False: 19.4k]
  ------------------
  190|      2|        {
  191|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  192|      2|            return false;
  193|      2|        }
  194|       |
  195|  19.4k|        std::size_t index = (address - m_StartingAddress).unsafe();
  196|  19.4k|        *reinterpret_cast<std::int32_t*>(&m_Values[index].signed_value) = value.unsafe();
  197|       |
  198|  19.4k|        return true;
  199|  19.4k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedWordEN3phi7integerImEENS2_IjEE:
  202|  15.0k|    {
  203|  15.0k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (203:13): [True: 2, False: 15.0k]
  ------------------
  204|      2|        {
  205|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  206|      2|            return false;
  207|      2|        }
  208|       |
  209|  15.0k|        std::size_t index = (address - m_StartingAddress).unsafe();
  210|  15.0k|        *reinterpret_cast<std::uint32_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  211|       |
  212|  15.0k|        return true;
  213|  15.0k|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  216|  17.9k|    {
  217|  17.9k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (217:13): [True: 4, False: 17.9k]
  ------------------
  218|      4|        {
  219|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  220|      4|            return false;
  221|      4|        }
  222|       |
  223|  17.9k|        std::size_t index = (address - m_StartingAddress).unsafe();
  224|  17.9k|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  225|       |
  226|  17.9k|        return true;
  227|  17.9k|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  230|  22.5k|    {
  231|  22.5k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (231:13): [True: 4, False: 22.5k]
  ------------------
  232|      4|        {
  233|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  234|      4|            return false;
  235|      4|        }
  236|       |
  237|  22.5k|        std::size_t index = (address - m_StartingAddress).unsafe();
  238|  22.5k|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  239|       |
  240|  22.5k|        return true;
  241|  22.5k|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  245|   149k|    {
  246|   149k|        return address >= m_StartingAddress &&
  ------------------
  |  Branch (246:16): [True: 149k, False: 21]
  ------------------
  247|   149k|               (address + size) <= (m_StartingAddress + m_Values.size());
  ------------------
  |  Branch (247:16): [True: 149k, False: 8]
  ------------------
  248|   149k|    }
_ZN3dlx11MemoryBlock5ClearEv:
  257|  4.68k|    {
  258|  4.68k|        for (auto& val : m_Values)
  ------------------
  |  Branch (258:24): [True: 4.68M, False: 4.68k]
  ------------------
  259|  4.68M|        {
  260|  4.68M|            val.signed_value = 0;
  261|  4.68M|        }
  262|  4.68k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   189k|    {
   24|   189k|        switch (token.length())
   25|   189k|        {
   26|       |            // 1 character OpCodes
   27|  29.8k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 29.8k, False: 159k]
  ------------------
   28|  29.8k|                char c1 = token[0];
   29|  29.8k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 7.51k, False: 22.2k]
  ------------------
   30|  7.51k|                {
   31|  7.51k|                    return OpCode::J;
   32|  7.51k|                }
   33|  22.2k|                break;
   34|  29.8k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  30.9k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 30.9k, False: 158k]
  ------------------
   38|  30.9k|                char c1 = token[0];
   39|  30.9k|                char c2 = token[1];
   40|       |
   41|  30.9k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 19.1k, False: 11.8k]
  ------------------
   42|  30.9k|                {
   43|  1.27k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 1.27k, False: 29.7k]
  ------------------
   44|  1.87k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 604, False: 30.3k]
  ------------------
   45|  1.87k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 782, False: 1.09k]
  ------------------
   46|    782|                        {
   47|    782|                            return OpCode::JR;
   48|    782|                        }
   49|  1.09k|                        break;
   50|       |
   51|  1.90k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 1.90k, False: 29.0k]
  ------------------
   52|  3.32k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 1.42k, False: 29.5k]
  ------------------
   53|  3.32k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 846, False: 2.48k]
  ------------------
   54|  3.32k|                        {
   55|    199|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 199, False: 3.12k]
  ------------------
   56|    418|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 219, False: 3.10k]
  ------------------
   57|    418|                                return OpCode::LB;
   58|    206|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 206, False: 3.12k]
  ------------------
   59|    405|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 199, False: 3.12k]
  ------------------
   60|    405|                                return OpCode::LD;
   61|    219|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 219, False: 3.10k]
  ------------------
   62|    430|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 211, False: 3.11k]
  ------------------
   63|    430|                                return OpCode::LF;
   64|    250|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 250, False: 3.07k]
  ------------------
   65|    469|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 219, False: 3.10k]
  ------------------
   66|    469|                                return OpCode::LH;
   67|    553|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 553, False: 2.77k]
  ------------------
   68|    760|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 207, False: 3.12k]
  ------------------
   69|    760|                                return OpCode::LW;
   70|  3.32k|                        }
   71|    846|                        break;
   72|    846|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 442, False: 30.5k]
  ------------------
   73|  1.42k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 985, False: 30.0k]
  ------------------
   74|  1.42k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 596, False: 831]
  ------------------
   75|    596|                        {
   76|    596|                            return OpCode::OR;
   77|    596|                        }
   78|    831|                        break;
   79|  3.75k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 3.75k, False: 27.2k]
  ------------------
   80|  5.19k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 1.44k, False: 29.5k]
  ------------------
   81|  5.19k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 1.47k, False: 3.72k]
  ------------------
   82|  5.19k|                        {
   83|    403|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 403, False: 4.79k]
  ------------------
   84|    882|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 479, False: 4.71k]
  ------------------
   85|    882|                                return OpCode::SB;
   86|    195|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 195, False: 5.00k]
  ------------------
   87|    620|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 425, False: 4.77k]
  ------------------
   88|    620|                                return OpCode::SD;
   89|    221|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 221, False: 4.97k]
  ------------------
   90|  1.31k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 1.09k, False: 4.10k]
  ------------------
   91|  1.31k|                                return OpCode::SF;
   92|    212|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 212, False: 4.98k]
  ------------------
   93|    444|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 232, False: 4.96k]
  ------------------
   94|    444|                                return OpCode::SH;
   95|    210|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 210, False: 4.98k]
  ------------------
   96|    466|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 256, False: 4.94k]
  ------------------
   97|    466|                                return OpCode::SW;
   98|  5.19k|                        }
   99|  1.47k|                        break;
  100|  30.9k|                }
  101|  23.4k|                break;
  102|  30.9k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|  45.0k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 45.0k, False: 144k]
  ------------------
  106|  45.0k|                char c1 = token[0];
  107|  45.0k|                char c2 = token[1];
  108|  45.0k|                char c3 = token[2];
  109|       |
  110|  45.0k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 14.0k, False: 31.0k]
  ------------------
  111|  45.0k|                {
  112|    451|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 451, False: 44.5k]
  ------------------
  113|  1.60k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 1.15k, False: 43.8k]
  ------------------
  114|  1.60k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 792, False: 815]
  |  Branch (114:29): [True: 458, False: 1.14k]
  |  Branch (114:45): [True: 458, False: 334]
  ------------------
  115|    458|                        {
  116|    458|                            return OpCode::ADD;
  117|    458|                        }
  118|  1.14k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 639, False: 510]
  |  Branch (118:34): [True: 415, False: 734]
  |  Branch (118:50): [True: 415, False: 224]
  ------------------
  119|    415|                        {
  120|    415|                            return OpCode::AND;
  121|    415|                        }
  122|    734|                        break;
  123|       |
  124|    734|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 588, False: 44.4k]
  ------------------
  125|  1.28k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 701, False: 44.3k]
  ------------------
  126|  1.28k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 857, False: 432]
  |  Branch (126:29): [True: 446, False: 843]
  |  Branch (126:45): [True: 446, False: 411]
  ------------------
  127|    446|                        {
  128|    446|                            return OpCode::DIV;
  129|    446|                        }
  130|    843|                        break;
  131|       |
  132|    843|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 278, False: 44.7k]
  ------------------
  133|  1.38k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 1.10k, False: 43.9k]
  ------------------
  134|  1.38k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 1.07k, False: 308]
  ------------------
  135|  1.07k|                        {
  136|  1.07k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 404, False: 673]
  ------------------
  137|    404|                            {
  138|    404|                                return OpCode::EQD;
  139|    404|                            }
  140|    673|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 414, False: 259]
  ------------------
  141|    414|                            {
  142|    414|                                return OpCode::EQF;
  143|    414|                            }
  144|  1.07k|                        }
  145|    567|                        break;
  146|       |
  147|  1.10k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 1.10k, False: 43.9k]
  ------------------
  148|  2.39k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 1.28k, False: 43.7k]
  ------------------
  149|  2.39k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 1.02k, False: 1.36k]
  ------------------
  150|  1.02k|                        {
  151|  1.02k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 402, False: 625]
  ------------------
  152|    402|                            {
  153|    402|                                return OpCode::GED;
  154|    402|                            }
  155|    625|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 402, False: 223]
  ------------------
  156|    402|                            {
  157|    402|                                return OpCode::GEF;
  158|    402|                            }
  159|  1.02k|                        }
  160|  1.36k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 1.08k, False: 282]
  ------------------
  161|  1.08k|                        {
  162|  1.08k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 402, False: 682]
  ------------------
  163|    402|                            {
  164|    402|                                return OpCode::GTD;
  165|    402|                            }
  166|    682|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 439, False: 243]
  ------------------
  167|    439|                            {
  168|    439|                                return OpCode::GTF;
  169|    439|                            }
  170|    682|                        }
  171|    748|                        break;
  172|       |
  173|  1.02k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 1.02k, False: 43.9k]
  ------------------
  174|  1.30k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 276, False: 44.7k]
  ------------------
  175|  1.30k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 776, False: 526]
  |  Branch (175:29): [True: 437, False: 865]
  |  Branch (175:45): [True: 437, False: 339]
  ------------------
  176|    437|                        {
  177|    437|                            return OpCode::JAL;
  178|    437|                        }
  179|    865|                        break;
  180|       |
  181|  4.24k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 4.24k, False: 40.7k]
  ------------------
  182|  6.37k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 2.12k, False: 42.8k]
  ------------------
  183|  6.37k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 706, False: 5.66k]
  ------------------
  184|  6.37k|                        {
  185|    599|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 599, False: 5.77k]
  ------------------
  186|    842|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 243, False: 6.12k]
  ------------------
  187|    842|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 406, False: 436]
  ------------------
  188|    406|                                {
  189|    406|                                    return OpCode::LBU;
  190|    406|                                }
  191|    436|                                break;
  192|       |
  193|    436|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 408, False: 5.96k]
  ------------------
  194|  1.06k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 658, False: 5.71k]
  ------------------
  195|  1.06k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 418, False: 648]
  ------------------
  196|    418|                                {
  197|    418|                                    return OpCode::LED;
  198|    418|                                }
  199|    648|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 404, False: 244]
  ------------------
  200|    404|                                {
  201|    404|                                    return OpCode::LEF;
  202|    404|                                }
  203|    244|                                break;
  204|       |
  205|    447|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 447, False: 5.92k]
  ------------------
  206|  1.25k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 810, False: 5.56k]
  ------------------
  207|  1.25k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 394, False: 863]
  ------------------
  208|    394|                                {
  209|    394|                                    return OpCode::LHI;
  210|    394|                                }
  211|    863|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 389, False: 474]
  ------------------
  212|    389|                                {
  213|    389|                                    return OpCode::LHU;
  214|    389|                                }
  215|    474|                                break;
  216|       |
  217|  1.10k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 1.10k, False: 5.26k]
  ------------------
  218|  1.71k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 610, False: 5.76k]
  ------------------
  219|  1.71k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 1.01k, False: 706]
  ------------------
  220|  1.01k|                                {
  221|  1.01k|                                    return OpCode::LTD;
  222|  1.01k|                                }
  223|    706|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 459, False: 247]
  ------------------
  224|    459|                                {
  225|    459|                                    return OpCode::LTF;
  226|    459|                                }
  227|    247|                                break;
  228|       |
  229|    400|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 400, False: 5.97k]
  ------------------
  230|    784|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 384, False: 5.98k]
  ------------------
  231|    784|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 460, False: 324]
  ------------------
  232|    460|                                {
  233|    460|                                    return OpCode::LWU;
  234|    460|                                }
  235|    324|                                break;
  236|  6.37k|                        }
  237|  2.43k|                        break;
  238|       |
  239|  3.26k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 3.26k, False: 41.7k]
  ------------------
  240|  3.91k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 647, False: 44.3k]
  ------------------
  241|  3.91k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 1.18k, False: 2.72k]
  ------------------
  242|  1.18k|                        {
  243|  1.18k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 480, False: 708]
  ------------------
  244|    480|                            {
  245|    480|                                return OpCode::NED;
  246|    480|                            }
  247|    708|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 408, False: 300]
  ------------------
  248|    408|                            {
  249|    408|                                return OpCode::NEF;
  250|    408|                            }
  251|  1.18k|                        }
  252|  2.72k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 2.40k, False: 324]
  |  Branch (252:34): [True: 2.20k, False: 523]
  |  Branch (252:50): [True: 2.20k, False: 199]
  ------------------
  253|  2.20k|                        {
  254|  2.20k|                            return OpCode::NOP;
  255|  2.20k|                        }
  256|       |
  257|    823|                        break;
  258|       |
  259|    823|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 580, False: 44.4k]
  ------------------
  260|  1.66k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 1.08k, False: 43.9k]
  ------------------
  261|  1.66k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 1.09k, False: 576]
  |  Branch (261:29): [True: 419, False: 1.24k]
  |  Branch (261:45): [True: 419, False: 673]
  ------------------
  262|    419|                        {
  263|    419|                            return OpCode::ORI;
  264|    419|                        }
  265|  1.24k|                        break;
  266|       |
  267|  3.94k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 3.94k, False: 41.0k]
  ------------------
  268|  9.91k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 5.97k, False: 39.0k]
  ------------------
  269|  9.91k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 557, False: 9.36k]
  ------------------
  270|  9.91k|                        {
  271|    459|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 459, False: 9.45k]
  ------------------
  272|  1.05k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 591, False: 9.32k]
  ------------------
  273|  1.05k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 585, False: 465]
  ------------------
  274|    585|                                {
  275|    585|                                    return OpCode::SBU;
  276|    585|                                }
  277|    465|                                break;
  278|       |
  279|    509|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 509, False: 9.40k]
  ------------------
  280|    719|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 210, False: 9.70k]
  ------------------
  281|    719|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 431, False: 288]
  ------------------
  282|    431|                                {
  283|    431|                                    return OpCode::SEQ;
  284|    431|                                }
  285|    288|                                break;
  286|       |
  287|    288|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 232, False: 9.68k]
  ------------------
  288|  1.06k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 834, False: 9.08k]
  ------------------
  289|  1.06k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 413, False: 653]
  ------------------
  290|    413|                                {
  291|    413|                                    return OpCode::SGE;
  292|    413|                                }
  293|    653|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 409, False: 244]
  ------------------
  294|    409|                                {
  295|    409|                                    return OpCode::SGT;
  296|    409|                                }
  297|    244|                                break;
  298|       |
  299|    409|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 409, False: 9.50k]
  ------------------
  300|    883|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 474, False: 9.44k]
  ------------------
  301|    883|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 635, False: 248]
  ------------------
  302|    635|                                {
  303|    635|                                    return OpCode::SHU;
  304|    635|                                }
  305|    248|                                break;
  306|       |
  307|  1.45k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 1.45k, False: 8.46k]
  ------------------
  308|  2.07k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 622, False: 9.29k]
  ------------------
  309|  2.07k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 272, False: 1.80k]
  ------------------
  310|  2.07k|                                {
  311|    199|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 199, False: 1.88k]
  ------------------
  312|    435|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 236, False: 1.84k]
  ------------------
  313|    435|                                        return OpCode::SLA;
  314|       |
  315|    197|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 197, False: 1.88k]
  ------------------
  316|    507|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 310, False: 1.76k]
  ------------------
  317|    507|                                        return OpCode::SLE;
  318|       |
  319|    206|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 206, False: 1.87k]
  ------------------
  320|    443|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 237, False: 1.84k]
  ------------------
  321|    443|                                        return OpCode::SLL;
  322|       |
  323|    207|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 207, False: 1.87k]
  ------------------
  324|    422|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 215, False: 1.86k]
  ------------------
  325|    422|                                        return OpCode::SLT;
  326|  2.07k|                                }
  327|    272|                                break;
  328|       |
  329|    606|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 606, False: 9.31k]
  ------------------
  330|    827|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 221, False: 9.69k]
  ------------------
  331|    827|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 423, False: 404]
  ------------------
  332|    423|                                {
  333|    423|                                    return OpCode::SNE;
  334|    423|                                }
  335|    404|                                break;
  336|       |
  337|    722|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 722, False: 9.19k]
  ------------------
  338|  1.23k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 516, False: 9.40k]
  ------------------
  339|  1.23k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 504, False: 734]
  ------------------
  340|    504|                                {
  341|    504|                                    return OpCode::SRA;
  342|    504|                                }
  343|    734|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 407, False: 327]
  ------------------
  344|    407|                                {
  345|    407|                                    return OpCode::SRL;
  346|    407|                                }
  347|    327|                                break;
  348|       |
  349|    468|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 468, False: 9.44k]
  ------------------
  350|    864|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 396, False: 9.52k]
  ------------------
  351|    864|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 560, False: 304]
  ------------------
  352|    560|                                {
  353|    560|                                    return OpCode::SUB;
  354|    560|                                }
  355|    304|                                break;
  356|       |
  357|    304|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 206, False: 9.71k]
  ------------------
  358|    634|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 428, False: 9.48k]
  ------------------
  359|    634|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 430, False: 204]
  ------------------
  360|    430|                                {
  361|    430|                                    return OpCode::SWU;
  362|    430|                                }
  363|    204|                                break;
  364|  9.91k|                        }
  365|       |
  366|  3.56k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 253, False: 44.7k]
  ------------------
  367|  4.47k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 905, False: 44.1k]
  ------------------
  368|  4.47k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 924, False: 3.54k]
  |  Branch (368:29): [True: 545, False: 3.92k]
  |  Branch (368:45): [True: 545, False: 379]
  ------------------
  369|    545|                        {
  370|    545|                            return OpCode::XOR;
  371|    545|                        }
  372|  3.92k|                        break;
  373|  45.0k|                }
  374|  26.1k|                break;
  375|  45.0k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|  42.0k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 42.0k, False: 147k]
  ------------------
  379|  42.0k|                char c1 = token[0];
  380|  42.0k|                char c2 = token[1];
  381|  42.0k|                char c3 = token[2];
  382|  42.0k|                char c4 = token[3];
  383|       |
  384|  42.0k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 10.3k, False: 31.6k]
  ------------------
  385|  42.0k|                {
  386|    416|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 416, False: 41.5k]
  ------------------
  387|  3.69k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 3.28k, False: 38.7k]
  ------------------
  388|  3.69k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 440, False: 3.25k]
  ------------------
  389|  3.69k|                        {
  390|  1.93k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 1.93k, False: 1.76k]
  ------------------
  391|  2.32k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 390, False: 3.30k]
  ------------------
  392|  2.32k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 2.02k, False: 301]
  ------------------
  393|  2.02k|                                {
  394|  2.02k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 254, False: 1.76k]
  ------------------
  395|  2.02k|                                    {
  396|    196|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 196, False: 1.82k]
  ------------------
  397|    479|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 283, False: 1.73k]
  ------------------
  398|    479|                                            return OpCode::ADDD;
  399|       |
  400|    200|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 200, False: 1.82k]
  ------------------
  401|    494|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 294, False: 1.72k]
  ------------------
  402|    494|                                            return OpCode::ADDF;
  403|       |
  404|    194|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 194, False: 1.82k]
  ------------------
  405|    388|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 194, False: 1.82k]
  ------------------
  406|    388|                                            return OpCode::ADDI;
  407|       |
  408|    202|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 202, False: 1.82k]
  ------------------
  409|    407|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 205, False: 1.81k]
  ------------------
  410|    407|                                            return OpCode::ADDU;
  411|  2.02k|                                    }
  412|  2.02k|                                }
  413|    555|                                break;
  414|       |
  415|    736|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 736, False: 2.96k]
  ------------------
  416|    935|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 199, False: 3.49k]
  ------------------
  417|    935|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 714, False: 221]
  |  Branch (417:37): [True: 513, False: 422]
  |  Branch (417:53): [True: 513, False: 201]
  ------------------
  418|    513|                                {
  419|    513|                                    return OpCode::ANDI;
  420|    513|                                }
  421|       |
  422|    422|                                break;
  423|  3.69k|                        }
  424|  1.41k|                        break;
  425|       |
  426|  1.41k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 1.32k, False: 40.6k]
  ------------------
  427|  3.37k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 2.05k, False: 39.9k]
  ------------------
  428|  3.37k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 254, False: 3.12k]
  ------------------
  429|  3.37k|                        {
  430|    623|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 623, False: 2.75k]
  ------------------
  431|    819|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 196, False: 3.17k]
  ------------------
  432|    819|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 591, False: 228]
  |  Branch (432:37): [True: 397, False: 422]
  |  Branch (432:53): [True: 397, False: 194]
  ------------------
  433|    397|                                {
  434|    397|                                    return OpCode::BEQZ;
  435|    397|                                }
  436|    422|                                break;
  437|       |
  438|    463|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 463, False: 2.91k]
  ------------------
  439|  1.29k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 833, False: 2.54k]
  ------------------
  440|  1.29k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 1.04k, False: 256]
  ------------------
  441|  1.04k|                                {
  442|  1.04k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 433, False: 607]
  ------------------
  443|    433|                                    {
  444|    433|                                        return OpCode::BFPF;
  445|    433|                                    }
  446|    607|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 404, False: 203]
  ------------------
  447|    404|                                    {
  448|    404|                                        return OpCode::BFPT;
  449|    404|                                    }
  450|  1.04k|                                }
  451|    459|                                break;
  452|       |
  453|    784|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 784, False: 2.59k]
  ------------------
  454|  1.00k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 222, False: 3.15k]
  ------------------
  455|  1.00k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 623, False: 383]
  |  Branch (455:37): [True: 401, False: 605]
  |  Branch (455:53): [True: 401, False: 222]
  ------------------
  456|    401|                                {
  457|    401|                                    return OpCode::BNEZ;
  458|    401|                                }
  459|  3.37k|                        }
  460|  1.74k|                        break;
  461|       |
  462|  1.74k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 1.08k, False: 40.9k]
  ------------------
  463|  2.66k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 1.58k, False: 40.4k]
  ------------------
  464|  2.66k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 2.30k, False: 361]
  |  Branch (464:29): [True: 2.09k, False: 576]
  |  Branch (464:45): [True: 2.09k, False: 215]
  ------------------
  465|  2.09k|                        {
  466|  2.09k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 538, False: 1.55k]
  ------------------
  467|  2.09k|                            {
  468|    195|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 195, False: 1.89k]
  ------------------
  469|    389|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 194, False: 1.89k]
  ------------------
  470|    389|                                    return OpCode::DIVD;
  471|       |
  472|    194|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 194, False: 1.89k]
  ------------------
  473|    389|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 195, False: 1.89k]
  ------------------
  474|    389|                                    return OpCode::DIVF;
  475|       |
  476|    194|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 194, False: 1.89k]
  ------------------
  477|    388|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 194, False: 1.89k]
  ------------------
  478|    388|                                    return OpCode::DIVI;
  479|       |
  480|    195|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 195, False: 1.89k]
  ------------------
  481|    389|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 194, False: 1.89k]
  ------------------
  482|    389|                                    return OpCode::DIVU;
  483|  2.09k|                            }
  484|  2.09k|                        }
  485|  1.11k|                        break;
  486|       |
  487|  1.11k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 788, False: 41.2k]
  ------------------
  488|  1.13k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 344, False: 41.6k]
  ------------------
  489|  1.13k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 837, False: 295]
  |  Branch (489:29): [True: 388, False: 744]
  |  Branch (489:45): [True: 641, False: 196]
  |  Branch (489:61): [True: 388, False: 253]
  ------------------
  490|    388|                        {
  491|    388|                            return OpCode::HALT;
  492|    388|                        }
  493|    744|                        break;
  494|       |
  495|  1.13k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 1.13k, False: 40.8k]
  ------------------
  496|  1.41k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 281, False: 41.7k]
  ------------------
  497|  1.41k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 999, False: 415]
  |  Branch (497:29): [True: 397, False: 1.01k]
  |  Branch (497:45): [True: 791, False: 208]
  |  Branch (497:61): [True: 397, False: 394]
  ------------------
  498|    397|                        {
  499|    397|                            return OpCode::JALR;
  500|    397|                        }
  501|  1.01k|                        break;
  502|       |
  503|  1.67k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 1.67k, False: 40.3k]
  ------------------
  504|  2.72k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 1.04k, False: 40.9k]
  ------------------
  505|  2.72k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 1.32k, False: 1.39k]
  |  Branch (505:29): [True: 1.07k, False: 1.65k]
  |  Branch (505:45): [True: 1.07k, False: 256]
  ------------------
  506|  1.07k|                        {
  507|  1.07k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 409, False: 661]
  ------------------
  508|    409|                            {
  509|    409|                                return OpCode::MOVD;
  510|    409|                            }
  511|    661|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 403, False: 258]
  ------------------
  512|    403|                            {
  513|    403|                                return OpCode::MOVF;
  514|    403|                            }
  515|  1.07k|                        }
  516|  1.65k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 1.18k, False: 466]
  |  Branch (516:34): [True: 454, False: 1.19k]
  |  Branch (516:50): [True: 950, False: 234]
  |  Branch (516:66): [True: 454, False: 496]
  ------------------
  517|    454|                        {
  518|    454|                            return OpCode::MULT;
  519|    454|                        }
  520|  1.45k|                        break;
  521|       |
  522|  6.21k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 6.21k, False: 35.7k]
  ------------------
  523|  13.0k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 6.88k, False: 35.1k]
  ------------------
  524|  13.0k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 764, False: 12.3k]
  ------------------
  525|  13.0k|                        {
  526|    752|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 752, False: 12.3k]
  ------------------
  527|  1.31k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 566, False: 12.5k]
  ------------------
  528|  1.31k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 1.08k, False: 235]
  ------------------
  529|  1.08k|                                {
  530|  1.08k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 388, False: 695]
  ------------------
  531|    388|                                    {
  532|    388|                                        return OpCode::SEQI;
  533|    388|                                    }
  534|    695|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 404, False: 291]
  ------------------
  535|    404|                                    {
  536|    404|                                        return OpCode::SEQU;
  537|    404|                                    }
  538|  1.08k|                                }
  539|    526|                                break;
  540|       |
  541|    526|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 442, False: 12.6k]
  ------------------
  542|  2.26k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 1.82k, False: 11.2k]
  ------------------
  543|  2.26k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 993, False: 1.26k]
  ------------------
  544|    993|                                {
  545|    993|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 389, False: 604]
  ------------------
  546|    389|                                    {
  547|    389|                                        return OpCode::SGEI;
  548|    389|                                    }
  549|    604|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 401, False: 203]
  ------------------
  550|    401|                                    {
  551|    401|                                        return OpCode::SGEU;
  552|    401|                                    }
  553|    993|                                }
  554|  1.26k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 1.05k, False: 217]
  ------------------
  555|  1.05k|                                {
  556|  1.05k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 419, False: 633]
  ------------------
  557|    419|                                    {
  558|    419|                                        return OpCode::SGTI;
  559|    419|                                    }
  560|    633|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 396, False: 237]
  ------------------
  561|    396|                                    {
  562|    396|                                        return OpCode::SGTU;
  563|    396|                                    }
  564|  1.05k|                                }
  565|    657|                                break;
  566|       |
  567|  3.19k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 3.19k, False: 9.90k]
  ------------------
  568|  3.97k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 784, False: 12.3k]
  ------------------
  569|  3.97k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 229, False: 3.74k]
  ------------------
  570|  3.97k|                                {
  571|    419|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 419, False: 3.55k]
  ------------------
  572|    623|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 204, False: 3.77k]
  ------------------
  573|    623|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 388, False: 235]
  ------------------
  574|    388|                                        {
  575|    388|                                            return OpCode::SLAI;
  576|    388|                                        }
  577|    235|                                        break;
  578|       |
  579|    772|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 772, False: 3.20k]
  ------------------
  580|  1.00k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 230, False: 3.74k]
  ------------------
  581|  1.00k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 391, False: 611]
  ------------------
  582|    391|                                        {
  583|    391|                                            return OpCode::SLEI;
  584|    391|                                        }
  585|    611|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 407, False: 204]
  ------------------
  586|    407|                                        {
  587|    407|                                            return OpCode::SLEU;
  588|    407|                                        }
  589|    204|                                        break;
  590|       |
  591|    434|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 434, False: 3.54k]
  ------------------
  592|    782|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 348, False: 3.62k]
  ------------------
  593|    782|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 412, False: 370]
  ------------------
  594|    412|                                        {
  595|    412|                                            return OpCode::SLLI;
  596|    412|                                        }
  597|    370|                                        break;
  598|       |
  599|    524|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 524, False: 3.45k]
  ------------------
  600|  1.34k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 817, False: 3.16k]
  ------------------
  601|  1.34k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 507, False: 834]
  ------------------
  602|    507|                                        {
  603|    507|                                            return OpCode::SLTI;
  604|    507|                                        }
  605|    834|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 413, False: 421]
  ------------------
  606|    413|                                        {
  607|    413|                                            return OpCode::SLTU;
  608|    413|                                        }
  609|    421|                                        break;
  610|  3.97k|                                }
  611|       |
  612|  2.64k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 1.18k, False: 11.9k]
  ------------------
  613|  2.85k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 215, False: 12.8k]
  ------------------
  614|  2.85k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 1.38k, False: 1.46k]
  ------------------
  615|  1.38k|                                {
  616|  1.38k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 388, False: 1.00k]
  ------------------
  617|    388|                                    {
  618|    388|                                        return OpCode::SNEI;
  619|    388|                                    }
  620|  1.00k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 412, False: 588]
  ------------------
  621|    412|                                    {
  622|    412|                                        return OpCode::SNEU;
  623|    412|                                    }
  624|  1.38k|                                }
  625|  2.05k|                                break;
  626|       |
  627|  2.05k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 579, False: 12.5k]
  ------------------
  628|  1.28k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 710, False: 12.3k]
  ------------------
  629|  1.28k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 614, False: 675]
  |  Branch (629:37): [True: 388, False: 901]
  |  Branch (629:53): [True: 388, False: 226]
  ------------------
  630|    388|                                {
  631|    388|                                    return OpCode::SRAI;
  632|    388|                                }
  633|    901|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 601, False: 300]
  |  Branch (633:42): [True: 393, False: 508]
  |  Branch (633:58): [True: 393, False: 208]
  ------------------
  634|    393|                                {
  635|    393|                                    return OpCode::SRLI;
  636|    393|                                }
  637|    508|                                break;
  638|       |
  639|  1.20k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 1.20k, False: 11.8k]
  ------------------
  640|  2.09k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 891, False: 12.2k]
  ------------------
  641|  2.09k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 1.84k, False: 243]
  ------------------
  642|  1.84k|                                {
  643|  1.84k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 259, False: 1.58k]
  ------------------
  644|  1.84k|                                    {
  645|    194|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 194, False: 1.65k]
  ------------------
  646|    394|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 200, False: 1.64k]
  ------------------
  647|    394|                                            return OpCode::SUBD;
  648|       |
  649|    194|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 194, False: 1.65k]
  ------------------
  650|    399|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 205, False: 1.64k]
  ------------------
  651|    399|                                            return OpCode::SUBF;
  652|       |
  653|    194|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 194, False: 1.65k]
  ------------------
  654|    389|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 195, False: 1.65k]
  ------------------
  655|    389|                                            return OpCode::SUBI;
  656|       |
  657|    211|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 211, False: 1.63k]
  ------------------
  658|    407|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 196, False: 1.65k]
  ------------------
  659|    407|                                            return OpCode::SUBU;
  660|  1.84k|                                    }
  661|  1.84k|                                }
  662|    502|                                break;
  663|  13.0k|                        }
  664|  5.01k|                        break;
  665|       |
  666|  5.01k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 1.82k, False: 40.1k]
  ------------------
  667|  2.08k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 258, False: 41.7k]
  ------------------
  668|  2.08k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 1.60k, False: 480]
  |  Branch (668:29): [True: 412, False: 1.66k]
  |  Branch (668:45): [True: 939, False: 662]
  |  Branch (668:61): [True: 412, False: 527]
  ------------------
  669|    412|                        {
  670|    412|                            return OpCode::TRAP;
  671|    412|                        }
  672|  1.66k|                        break;
  673|  1.66k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 210, False: 41.7k]
  ------------------
  674|  1.43k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 1.22k, False: 40.7k]
  ------------------
  675|  1.43k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 1.16k, False: 273]
  |  Branch (675:29): [True: 388, False: 1.04k]
  |  Branch (675:45): [True: 804, False: 356]
  |  Branch (675:61): [True: 388, False: 416]
  ------------------
  676|    388|                        {
  677|    388|                            return OpCode::XORI;
  678|    388|                        }
  679|  1.04k|                        break;
  680|  42.0k|                }
  681|  25.5k|                break;
  682|  42.0k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  25.5k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 21.0k, False: 168k]
  ------------------
  686|  21.0k|                char c1 = token[0];
  687|  21.0k|                char c2 = token[1];
  688|  21.0k|                char c3 = token[2];
  689|  21.0k|                char c4 = token[3];
  690|  21.0k|                char c5 = token[4];
  691|       |
  692|  21.0k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 5.81k, False: 15.2k]
  ------------------
  693|  21.0k|                {
  694|    224|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 224, False: 20.8k]
  ------------------
  695|  1.94k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 1.71k, False: 19.3k]
  ------------------
  696|  1.94k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 1.52k, False: 423]
  |  Branch (696:29): [True: 388, False: 1.55k]
  |  Branch (696:45): [True: 1.22k, False: 292]
  |  Branch (696:61): [True: 596, False: 632]
  |  Branch (696:77): [True: 388, False: 208]
  ------------------
  697|    388|                        {
  698|    388|                            return OpCode::ADDUI;
  699|    388|                        }
  700|  1.55k|                        break;
  701|       |
  702|  1.55k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 1.17k, False: 19.8k]
  ------------------
  703|  1.97k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 805, False: 20.2k]
  ------------------
  704|  1.97k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 1.70k, False: 274]
  |  Branch (704:29): [True: 388, False: 1.58k]
  |  Branch (704:45): [True: 1.49k, False: 205]
  |  Branch (704:61): [True: 772, False: 726]
  |  Branch (704:77): [True: 388, False: 384]
  ------------------
  705|    388|                        {
  706|    388|                            return OpCode::DIVUI;
  707|    388|                        }
  708|  1.58k|                        break;
  709|       |
  710|  1.58k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 947, False: 20.1k]
  ------------------
  711|  3.41k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 2.46k, False: 18.5k]
  ------------------
  712|  3.41k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 3.00k, False: 412]
  |  Branch (712:29): [True: 2.32k, False: 1.08k]
  |  Branch (712:45): [True: 2.69k, False: 305]
  |  Branch (712:61): [True: 2.32k, False: 368]
  ------------------
  713|  2.32k|                        {
  714|  2.32k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 484, False: 1.84k]
  ------------------
  715|  2.32k|                            {
  716|    194|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 194, False: 2.13k]
  ------------------
  717|    388|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 194, False: 2.13k]
  ------------------
  718|    388|                                    return OpCode::MULTD;
  719|       |
  720|    195|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 195, False: 2.13k]
  ------------------
  721|    389|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 194, False: 2.13k]
  ------------------
  722|    389|                                    return OpCode::MULTF;
  723|       |
  724|    194|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 194, False: 2.13k]
  ------------------
  725|    389|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 195, False: 2.13k]
  ------------------
  726|    389|                                    return OpCode::MULTI;
  727|       |
  728|    260|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 260, False: 2.06k]
  ------------------
  729|    678|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 418, False: 1.91k]
  ------------------
  730|    678|                                    return OpCode::MULTU;
  731|  2.32k|                            }
  732|  2.32k|                        }
  733|  1.56k|                        break;
  734|       |
  735|  2.58k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 2.58k, False: 18.4k]
  ------------------
  736|  7.90k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 5.32k, False: 15.7k]
  ------------------
  737|  7.90k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 513, False: 7.39k]
  ------------------
  738|  7.90k|                        {
  739|    816|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 816, False: 7.09k]
  ------------------
  740|  1.21k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 402, False: 7.50k]
  ------------------
  741|  1.21k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 986, False: 232]
  |  Branch (741:37): [True: 389, False: 829]
  |  Branch (741:53): [True: 780, False: 206]
  |  Branch (741:69): [True: 389, False: 391]
  ------------------
  742|    389|                                {
  743|    389|                                    return OpCode::SEQUI;
  744|    389|                                }
  745|    829|                                break;
  746|       |
  747|    829|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 612, False: 7.29k]
  ------------------
  748|  1.63k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 1.02k, False: 6.88k]
  ------------------
  749|  1.63k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 790, False: 848]
  |  Branch (749:37): [True: 389, False: 1.24k]
  |  Branch (749:53): [True: 592, False: 198]
  |  Branch (749:69): [True: 389, False: 203]
  ------------------
  750|    389|                                {
  751|    389|                                    return OpCode::SGEUI;
  752|    389|                                }
  753|  1.24k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 817, False: 432]
  |  Branch (753:42): [True: 388, False: 861]
  |  Branch (753:58): [True: 582, False: 235]
  |  Branch (753:74): [True: 388, False: 194]
  ------------------
  754|    388|                                {
  755|    388|                                    return OpCode::SGTUI;
  756|    388|                                }
  757|    861|                                break;
  758|       |
  759|  1.43k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 1.43k, False: 6.47k]
  ------------------
  760|  2.18k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 755, False: 7.15k]
  ------------------
  761|  2.18k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 848, False: 1.34k]
  |  Branch (761:37): [True: 388, False: 1.80k]
  |  Branch (761:53): [True: 585, False: 263]
  |  Branch (761:69): [True: 388, False: 197]
  ------------------
  762|    388|                                {
  763|    388|                                    return OpCode::SLEUI;
  764|    388|                                }
  765|  1.80k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 1.07k, False: 729]
  |  Branch (765:42): [True: 389, False: 1.41k]
  |  Branch (765:58): [True: 749, False: 322]
  |  Branch (765:74): [True: 389, False: 360]
  ------------------
  766|    389|                                {
  767|    389|                                    return OpCode::SLTUI;
  768|    389|                                }
  769|  1.41k|                                break;
  770|       |
  771|  1.41k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 892, False: 7.01k]
  ------------------
  772|  1.27k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 384, False: 7.52k]
  ------------------
  773|  1.27k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 1.04k, False: 236]
  |  Branch (773:37): [True: 388, False: 888]
  |  Branch (773:53): [True: 830, False: 210]
  |  Branch (773:69): [True: 388, False: 442]
  ------------------
  774|    388|                                {
  775|    388|                                    return OpCode::SNEUI;
  776|    388|                                }
  777|    888|                                break;
  778|       |
  779|    888|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 699, False: 7.20k]
  ------------------
  780|  1.07k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 376, False: 7.53k]
  ------------------
  781|  1.07k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 864, False: 211]
  |  Branch (781:37): [True: 391, False: 684]
  |  Branch (781:53): [True: 650, False: 214]
  |  Branch (781:69): [True: 391, False: 259]
  ------------------
  782|    391|                                {
  783|    391|                                    return OpCode::SUBUI;
  784|    391|                                }
  785|    684|                                break;
  786|  7.90k|                        }
  787|       |
  788|  5.18k|                        break;
  789|  21.0k|                }
  790|       |
  791|  15.7k|                break;
  792|  21.0k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  15.7k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 10.5k, False: 178k]
  ------------------
  796|  10.5k|                char c1 = token[0];
  797|  10.5k|                char c2 = token[1];
  798|  10.5k|                char c3 = token[2];
  799|  10.5k|                char c4 = token[3];
  800|  10.5k|                char c5 = token[4];
  801|  10.5k|                char c6 = token[5];
  802|       |
  803|  10.5k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 4.33k, False: 6.20k]
  |  Branch (803:21): [True: 3.81k, False: 6.72k]
  |  Branch (803:37): [True: 4.10k, False: 234]
  |  Branch (803:53): [True: 3.81k, False: 286]
  ------------------
  804|  3.81k|                {
  805|  3.81k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 203, False: 3.61k]
  ------------------
  806|  3.81k|                    {
  807|    621|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 621, False: 3.19k]
  ------------------
  808|  1.20k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 584, False: 3.23k]
  ------------------
  809|  1.20k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 1.00k, False: 203]
  ------------------
  810|  1.00k|                            {
  811|  1.00k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 402, False: 600]
  ------------------
  812|    402|                                {
  813|    402|                                    return OpCode::CVTD2F;
  814|    402|                                }
  815|    600|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 404, False: 196]
  ------------------
  816|    404|                                {
  817|    404|                                    return OpCode::CVTD2I;
  818|    404|                                }
  819|  1.00k|                            }
  820|    399|                            break;
  821|       |
  822|    948|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 948, False: 2.86k]
  ------------------
  823|  1.20k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 258, False: 3.55k]
  ------------------
  824|  1.20k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 1.00k, False: 205]
  ------------------
  825|  1.00k|                            {
  826|  1.00k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 405, False: 596]
  ------------------
  827|    405|                                {
  828|    405|                                    return OpCode::CVTF2D;
  829|    405|                                }
  830|    596|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 402, False: 194]
  ------------------
  831|    402|                                {
  832|    402|                                    return OpCode::CVTF2I;
  833|    402|                                }
  834|  1.00k|                            }
  835|    399|                            break;
  836|       |
  837|  1.00k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 1.00k, False: 2.81k]
  ------------------
  838|  1.20k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 197, False: 3.61k]
  ------------------
  839|  1.20k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 999, False: 202]
  ------------------
  840|    999|                            {
  841|    999|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 401, False: 598]
  ------------------
  842|    401|                                {
  843|    401|                                    return OpCode::CVTI2D;
  844|    401|                                }
  845|    598|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 404, False: 194]
  ------------------
  846|    404|                                {
  847|    404|                                    return OpCode::CVTI2F;
  848|    404|                                }
  849|    999|                            }
  850|  3.81k|                    }
  851|  3.81k|                }
  852|  6.72k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 2.41k, False: 4.30k]
  |  Branch (852:26): [True: 507, False: 6.21k]
  |  Branch (852:42): [True: 2.05k, False: 367]
  |  Branch (852:58): [True: 1.83k, False: 216]
  |  Branch (852:74): [True: 1.50k, False: 330]
  ------------------
  853|  6.72k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 730, False: 774]
  |  Branch (853:42): [True: 507, False: 223]
  ------------------
  854|    507|                {
  855|    507|                    return OpCode::MULTUI;
  856|    507|                }
  857|  7.61k|                break;
  858|  10.5k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  7.61k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 5.46k, False: 183k]
  ------------------
  862|  5.46k|                char c1 = token[0];
  863|  5.46k|                char c2 = token[1];
  864|  5.46k|                char c3 = token[2];
  865|  5.46k|                char c4 = token[3];
  866|  5.46k|                char c5 = token[4];
  867|  5.46k|                char c6 = token[5];
  868|  5.46k|                char c7 = token[6];
  869|       |
  870|  5.46k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 3.28k, False: 2.18k]
  |  Branch (870:21): [True: 2.38k, False: 3.08k]
  |  Branch (870:37): [True: 2.58k, False: 702]
  |  Branch (870:53): [True: 2.38k, False: 195]
  ------------------
  871|  2.38k|                {
  872|  2.38k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 1.11k, False: 1.27k]
  |  Branch (872:25): [True: 389, False: 1.99k]
  |  Branch (872:41): [True: 782, False: 328]
  |  Branch (872:54): [True: 588, False: 194]
  |  Branch (872:70): [True: 389, False: 199]
  ------------------
  873|    389|                    {
  874|    389|                        return OpCode::MOVI2FP;
  875|    389|                    }
  876|  1.99k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 1.02k, False: 971]
  |  Branch (876:30): [True: 388, False: 1.61k]
  |  Branch (876:46): [True: 781, False: 246]
  |  Branch (876:62): [True: 582, False: 199]
  |  Branch (876:75): [True: 388, False: 194]
  ------------------
  877|    388|                    {
  878|    388|                        return OpCode::MOVFP2I;
  879|    388|                    }
  880|  2.38k|                }
  881|  4.69k|                break;
  882|  5.46k|            }
  883|       |
  884|  4.69k|            default: {
  ------------------
  |  Branch (884:13): [True: 4.25k, False: 184k]
  ------------------
  885|  4.25k|                break;
  886|  5.46k|            }
  887|   189k|        }
  888|       |
  889|       |        // None found
  890|   129k|        return OpCode::NONE;
  891|   189k|    }
_ZN3dlx3iceEcc:
   17|   251k|    {
   18|   251k|        constexpr const char diff = 'a' - 'A';
   19|   251k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 79.3k, False: 172k]
  |  Branch (19:28): [True: 65.4k, False: 106k]
  ------------------
   20|   251k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   211k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  2.19k|    {
  193|  2.19k|        ParseError err;
  194|       |
  195|  2.19k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  2.19k|        err.m_LineNumber                           = line_number;
  197|  2.19k|        err.m_Column                               = column;
  198|  2.19k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  2.19k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  2.19k|        return err;
  202|  2.19k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  2.19k|    {
  207|  2.19k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  2.19k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  2.19k|                                                         actual_type);
  210|  2.19k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    194|    {
  216|    194|        ParseError err;
  217|       |
  218|    194|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    194|        err.m_LineNumber        = line_number;
  220|    194|        err.m_Column            = column;
  221|    194|        err.invalid_number.text = text;
  222|       |
  223|    194|        return err;
  224|    194|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    194|    {
  228|    194|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    194|                                                token.GetColumn().unsafe(), token.GetText());
  230|    194|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      4|    {
  235|      4|        ParseError err;
  236|       |
  237|      4|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      4|        err.m_LineNumber = line_number;
  239|      4|        err.m_Column     = column;
  240|       |
  241|      4|        return err;
  242|      4|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      4|    {
  247|      4|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      4|                                                                     token.GetColumn().unsafe());
  249|      4|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   107k|    {
  255|   107k|        ParseError err;
  256|       |
  257|   107k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   107k|        err.m_LineNumber                   = line_number;
  259|   107k|        err.m_Column                       = column;
  260|   107k|        err.unexpected_token.expected_type = expected_type;
  261|   107k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   107k|        return err;
  264|   107k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   107k|    {
  269|   107k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   107k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   107k|                                                  token.GetType());
  272|   107k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  14.8k|    {
  277|  14.8k|        ParseError err;
  278|       |
  279|  14.8k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  14.8k|        err.m_LineNumber                   = line_number;
  281|  14.8k|        err.m_Column                       = column;
  282|  14.8k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  14.8k|        return err;
  285|  14.8k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|    208|    {
  289|    208|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|    208|                                                    token.GetColumn().unsafe(), token.GetText());
  291|    208|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|  47.1k|    {
  296|  47.1k|        ParseError err;
  297|       |
  298|  47.1k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|  47.1k|        err.m_LineNumber                       = line_number;
  300|  47.1k|        err.m_Column                           = column;
  301|  47.1k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|  47.1k|        return err;
  304|  47.1k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|  47.1k|    {
  309|  47.1k|        return ConstructInvalidLabelIdentifierParseError(
  310|  47.1k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|  47.1k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  7.28k|    {
  317|  7.28k|        ParseError err;
  318|       |
  319|  7.28k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  7.28k|        err.m_LineNumber                     = line_number;
  321|  7.28k|        err.m_Column                         = column;
  322|  7.28k|        err.label_already_defined.label_name = label_name;
  323|  7.28k|        err.label_already_defined.at_line    = at_line;
  324|  7.28k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  7.28k|        return err;
  327|  7.28k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  7.28k|    {
  332|  7.28k|        return ConstructLabelAlreadyDefinedParseError(
  333|  7.28k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  7.28k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  7.28k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|  24.5k|    {
  340|  24.5k|        ParseError err;
  341|       |
  342|  24.5k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|  24.5k|        err.m_LineNumber = line_number;
  344|  24.5k|        err.m_Column     = column;
  345|       |
  346|  24.5k|        return err;
  347|  24.5k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|  24.5k|    {
  352|  24.5k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|  24.5k|                                                        token.GetColumn().unsafe());
  354|  24.5k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  4.76k|    {
  360|  4.76k|        ParseError err;
  361|       |
  362|  4.76k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  4.76k|        err.m_LineNumber               = line_number;
  364|  4.76k|        err.m_Column                   = column;
  365|  4.76k|        err.too_few_arguments.required = required;
  366|  4.76k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  4.76k|        return err;
  369|  4.76k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  4.76k|    {
  374|  4.76k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  4.76k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  4.76k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  2.37k|    {
  381|  2.37k|        ParseError err;
  382|       |
  383|  2.37k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  2.37k|        err.m_LineNumber           = line_number;
  385|  2.37k|        err.m_Column               = column;
  386|  2.37k|        err.empty_label.label_name = label_name;
  387|       |
  388|  2.37k|        return err;
  389|  2.37k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  2.37k|    {
  393|  2.37k|        return ConstructEmptyLabelParseError(
  394|  2.37k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  2.37k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 1.96k, False: 415]
  ------------------
  396|  1.96k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  2.37k|                        token.GetText());
  398|  2.37k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  1.00k|    {
  403|  1.00k|        ParseError err;
  404|       |
  405|  1.00k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  1.00k|        err.m_LineNumber = line_number;
  407|  1.00k|        err.m_Column     = column;
  408|       |
  409|  1.00k|        return err;
  410|  1.00k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  1.00k|    {
  414|  1.00k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  1.00k|                                               token.GetColumn().unsafe());
  416|  1.00k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   211k|    {
   19|   211k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   211k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  4.68k|    {
  182|  4.68k|        ParsedProgram program;
  183|       |
  184|  4.68k|        program.m_Tokens = tokens;
  185|       |
  186|  4.68k|        phi::boolean line_has_instruction{false};
  187|  4.68k|        phi::usize   label_count{0u};
  188|       |
  189|   254k|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 250k, False: 4.68k]
  ------------------
  190|   250k|        {
  191|   250k|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|   250k|            switch (current_token.GetType())
  196|   250k|            {
  197|       |                // Ignore comments
  198|    901|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 901, False: 249k]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|    901|                    break;
  201|       |
  202|  32.1k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 32.1k, False: 217k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|  32.1k|                    line_has_instruction = false;
  205|  32.1k|                    break;
  206|       |
  207|  92.7k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 92.7k, False: 157k]
  ------------------
  208|  92.7k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 23.9k, False: 68.8k]
  ------------------
  209|  23.9k|                    {
  210|  23.9k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  23.9k|                                current_token, Token::Type::NewLine));
  212|  23.9k|                        break;
  213|  23.9k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|  68.8k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 29.8k, False: 39.0k]
  ------------------
  218|  29.8k|                    {
  219|  29.8k|                        program.AddParseError(
  220|  29.8k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|  29.8k|                        break;
  222|  29.8k|                    }
  223|       |
  224|  39.0k|                    std::string_view label_name = current_token.GetText();
  225|  39.0k|                    label_name.remove_suffix(1);
  226|       |
  227|  39.0k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 14.5k, False: 24.4k]
  ------------------
  228|  14.5k|                    {
  229|  14.5k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  14.5k|                                current_token.GetLineNumber().unsafe(),
  231|  14.5k|                                current_token.GetColumn().unsafe(), label_name));
  232|  14.5k|                        break;
  233|  14.5k|                    }
  234|       |
  235|  24.4k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 14.3k, False: 10.0k]
  ------------------
  236|  14.3k|                    {
  237|  14.3k|                        program.AddParseError(
  238|  14.3k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  14.3k|                        break;
  240|  14.3k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  10.0k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 7.28k, False: 2.79k]
  ------------------
  244|  7.28k|                    {
  245|       |                        // Find first defintions of label
  246|  7.28k|                        const Token* first_label_definition =
  247|  7.28k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  7.28k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  7.28k|                                    {
  250|  7.28k|                                        std::string_view token_label_name = t.GetText();
  251|  7.28k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  7.28k|                                        if (token_label_name == label_name)
  254|  7.28k|                                        {
  255|  7.28k|                                            return true;
  256|  7.28k|                                        }
  257|  7.28k|                                    }
  258|       |
  259|  7.28k|                                    return false;
  260|  7.28k|                                });
  261|       |
  262|  7.28k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  7.28k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  7.28k|                                current_token, *first_label_definition));
  266|  7.28k|                        break;
  267|  7.28k|                    }
  268|       |
  269|  2.79k|                    program.m_JumpData[label_name] =
  270|  2.79k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  2.79k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  2.79k|                    break;
  277|  10.0k|                }
  278|       |
  279|  44.7k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 44.7k, False: 205k]
  ------------------
  280|  44.7k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 24.5k, False: 20.1k]
  ------------------
  281|  24.5k|                    {
  282|  24.5k|                        program.AddParseError(
  283|  24.5k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|  24.5k|                        break;
  285|  24.5k|                    }
  286|       |
  287|  20.1k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  20.1k|                    PHI_ASSERT(current_token.HasHint());
  291|  20.1k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  20.1k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  20.1k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  20.1k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  20.1k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  20.1k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  20.1k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  20.1k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  20.1k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|  40.4k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 34.3k, False: 6.09k]
  ------------------
  313|  34.3k|                    {
  314|       |                        // Get next token
  315|  34.3k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 549, False: 33.8k]
  ------------------
  316|    549|                        {
  317|    549|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    549|                                    current_token, number_of_argument_required.unsafe(),
  319|    549|                                    argument_num.unsafe()));
  320|    549|                            break;
  321|    549|                        }
  322|       |
  323|  33.8k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|  33.8k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 13.2k, False: 20.5k]
  ------------------
  327|  13.2k|                        {
  328|  13.2k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 1.00k, False: 12.2k]
  ------------------
  329|  1.00k|                            {
  330|  1.00k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  1.00k|                            }
  332|       |
  333|  13.2k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  13.2k|                            continue;
  336|  13.2k|                        }
  337|       |
  338|  20.5k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 4.21k, False: 16.3k]
  ------------------
  339|  4.21k|                        {
  340|  4.21k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  4.21k|                                    token, number_of_argument_required.unsafe(),
  342|  4.21k|                                    argument_num.unsafe()));
  343|  4.21k|                            break;
  344|  4.21k|                        }
  345|       |
  346|  16.3k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  16.3k|                                parse_instruction_argument(
  348|  16.3k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  16.3k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 9.32k, False: 7.02k]
  ------------------
  350|  9.32k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  9.32k|                            break;
  353|  9.32k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  7.02k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  7.02k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  7.02k|                        argument_num++;
  360|  7.02k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  7.02k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  20.1k|                    program.m_Instructions.emplace_back(instruction);
  368|  20.1k|                    line_has_instruction = true;
  369|  20.1k|                    break;
  370|  44.7k|                }
  371|       |
  372|  79.3k|                default:
  ------------------
  |  Branch (372:17): [True: 79.3k, False: 170k]
  ------------------
  373|  79.3k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|  79.3k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 45.1k, False: 34.2k]
  ------------------
  375|  45.1k|                    {
  376|  45.1k|                        expected_token_type = Token::Type::NewLine;
  377|  45.1k|                    }
  378|       |
  379|  79.3k|                    program.AddParseError(
  380|  79.3k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|  79.3k|                    break;
  382|   250k|            }
  383|   250k|        }
  384|       |
  385|       |        // Check for empty labels
  386|  4.68k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 534, False: 4.14k]
  ------------------
  387|    534|        {
  388|  3.53k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 3.00k, False: 534]
  ------------------
  389|  3.00k|            {
  390|  3.00k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  3.00k|                const Token& token = *it;
  393|  3.00k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 2.37k, False: 628]
  ------------------
  394|  2.37k|                {
  395|  2.37k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  2.37k|                    --label_count;
  397|  2.37k|                }
  398|  3.00k|            }
  399|    534|        }
  400|       |
  401|  4.68k|        return program;
  402|  4.68k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  4.68k|    {
  406|  4.68k|        TokenStream tokens = Tokenize(source);
  407|  4.68k|        return Parse(tokens);
  408|  4.68k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  16.3k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  16.3k|        switch (token.GetType())
   38|  16.3k|        {
   39|  1.19k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 1.19k, False: 15.1k]
  ------------------
   40|  1.19k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 208, False: 982]
  ------------------
   41|  1.19k|                                          ArgumentType::AddressDisplacement))
   42|    208|                {
   43|    208|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|    208|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|    208|                    return {};
   47|    208|                }
   48|       |
   49|       |                // Get address displacement
   50|    982|                PHI_ASSERT(token.HasHint());
   51|       |
   52|    982|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|    982|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 4, False: 978]
  ------------------
   55|      4|                {
   56|      4|                    program.AddParseError(
   57|      4|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      4|                    return {};
   59|      4|                }
   60|       |
   61|    978|                auto         it           = tokens.current_position();
   62|    978|                const Token& first_token  = tokens.consume();
   63|    978|                const Token& second_token = tokens.consume();
   64|    978|                const Token& third_token  = tokens.consume();
   65|       |
   66|    978|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 200, False: 778]
  ------------------
   67|    200|                {
   68|    200|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|    200|                            first_token, Token::Type::OpenBracket));
   70|    200|                    return {};
   71|    200|                }
   72|       |
   73|       |                // Second token is the register
   74|    778|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 278, False: 500]
  ------------------
   75|    278|                {
   76|    278|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|    278|                            second_token, Token::Type::RegisterInt));
   78|    278|                    return {};
   79|    278|                }
   80|       |
   81|    500|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 233, False: 267]
  ------------------
   82|    233|                {
   83|    233|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|    233|                            third_token, Token::Type::ClosingBracket));
   85|    233|                    return {};
   86|    233|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|    267|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|    267|                return ConstructInstructionArgumentAddressDisplacement(
   95|    267|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|    500|            }
   97|  2.78k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 2.78k, False: 13.5k]
  ------------------
   98|  2.78k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 199, False: 2.58k]
  ------------------
   99|    199|                {
  100|    199|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|    199|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|    199|                    return {};
  103|    199|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  2.58k|                return ConstructInstructionArgumentRegisterInt(
  109|  2.58k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  2.78k|            }
  111|  1.80k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 1.80k, False: 14.5k]
  ------------------
  112|  1.80k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 201, False: 1.60k]
  ------------------
  113|    201|                {
  114|    201|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|    201|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|    201|                    return {};
  117|    201|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  1.60k|                return ConstructInstructionArgumentRegisterFloat(
  123|  1.60k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  1.80k|            }
  125|    208|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 208, False: 16.1k]
  ------------------
  126|    208|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|    208|                return {};
  129|  1.80k|            }
  130|  6.60k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 6.60k, False: 9.74k]
  ------------------
  131|       |                // Parse as Label
  132|  6.60k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 1.39k, False: 5.21k]
  ------------------
  133|  1.39k|                {
  134|  1.39k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  1.39k|                            token, expected_argument_type, ArgumentType::Label));
  136|  1.39k|                    return {};
  137|  1.39k|                }
  138|       |
  139|  5.21k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 5.21k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  5.21k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 2.97k, False: 2.23k]
  ------------------
  146|  2.97k|                {
  147|  2.97k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  2.97k|                    return {};
  149|  2.97k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  2.23k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  5.21k|            }
  155|    720|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 720, False: 15.6k]
  ------------------
  156|    720|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 196, False: 524]
  ------------------
  157|    196|                {
  158|    196|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|    196|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|    196|                    return {};
  161|    196|                }
  162|       |
  163|    524|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 330, False: 194]
  ------------------
  164|    330|                {
  165|    330|                    return ConstructInstructionArgumentImmediateValue(
  166|    330|                            static_cast<std::int16_t>(token.GetHint()));
  167|    330|                }
  168|       |
  169|    194|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    194|                return {};
  171|    524|            }
  172|       |
  173|  3.03k|            default:
  ------------------
  |  Branch (173:13): [True: 3.03k, False: 13.3k]
  ------------------
  174|  3.03k|                program.AddParseError(
  175|  3.03k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  3.03k|                return {};
  177|  16.3k|        }
  178|  16.3k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|   103k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   103k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 72.1k, False: 31.8k]
  ------------------
  249|  72.1k|                                    {
  250|  72.1k|                                        std::string_view token_label_name = t.GetText();
  251|  72.1k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  72.1k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 7.28k, False: 64.8k]
  ------------------
  254|  7.28k|                                        {
  255|  7.28k|                                            return true;
  256|  7.28k|                                        }
  257|  72.1k|                                    }
  258|       |
  259|  96.6k|                                    return false;
  260|   103k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   70|   620k|    {
   71|   620k|        PHI_ASSERT(id != IntRegisterID::None);
   72|   620k|        phi::size_t id_value = phi::to_underlying(id);
   73|       |
   74|   620k|        PHI_ASSERT(id_value < m_IntRegisters.size());
   75|       |
   76|   620k|        return m_IntRegisters[id_value];
   77|   620k|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   81|  2.02M|    {
   82|  2.02M|        PHI_ASSERT(id != IntRegisterID::None);
   83|  2.02M|        phi::size_t id_value = phi::to_underlying(id);
   84|       |
   85|  2.02M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   86|       |
   87|  2.02M|        return m_IntRegisters[id_value];
   88|  2.02M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   91|   861k|    {
   92|   861k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   93|   861k|                                             RegisterAccessType::Signed),
   94|   861k|                   "Mismatch for instruction access type");
   95|       |
   96|   861k|        const phi::size_t id_value = phi::to_underlying(id);
   97|       |
   98|   861k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   99|   861k|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  100|   861k|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (100:13): [True: 170k, False: 690k]
  ------------------
  101|   861k|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (101:13): [True: 9.81k, False: 160k]
  ------------------
  102|  9.81k|        {
  103|  9.81k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  9.81k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  104|  9.81k|        }
  105|       |
  106|   861k|        return GetIntRegister(id).GetSignedValue();
  107|   861k|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  110|  1.16M|    {
  111|  1.16M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  112|  1.16M|                                             RegisterAccessType::Unsigned),
  113|  1.16M|                   "Mismatch for instruction access type");
  114|       |
  115|  1.16M|        const phi::size_t id_value = phi::to_underlying(id);
  116|       |
  117|  1.16M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  118|  1.16M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  119|  1.16M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (119:13): [True: 818k, False: 346k]
  ------------------
  120|  1.16M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (120:13): [True: 787k, False: 30.3k]
  ------------------
  121|   787k|        {
  122|   787k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   787k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  123|   787k|        }
  124|       |
  125|  1.16M|        return GetIntRegister(id).GetUnsignedValue();
  126|  1.16M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  129|   360k|    {
  130|   360k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  131|   360k|                                             RegisterAccessType::Signed),
  132|   360k|                   "Mismatch for instruction access type");
  133|       |
  134|   360k|        IntRegister& reg = GetIntRegister(id);
  135|       |
  136|   360k|        if (reg.IsReadOnly())
  ------------------
  |  Branch (136:13): [True: 234k, False: 126k]
  ------------------
  137|   234k|        {
  138|   234k|            return;
  139|   234k|        }
  140|       |
  141|   126k|        reg.SetSignedValue(value);
  142|       |
  143|   126k|        const phi::size_t id_value = phi::to_underlying(id);
  144|       |
  145|   126k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  146|   126k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  147|   126k|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  150|   259k|    {
  151|   259k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  152|   259k|                                             RegisterAccessType::Unsigned),
  153|   259k|                   "Mismatch for instruction access type");
  154|       |
  155|   259k|        IntRegister& reg = GetIntRegister(id);
  156|       |
  157|   259k|        if (reg.IsReadOnly())
  ------------------
  |  Branch (157:13): [True: 156k, False: 103k]
  ------------------
  158|   156k|        {
  159|   156k|            return;
  160|   156k|        }
  161|       |
  162|   103k|        reg.SetUnsignedValue(value);
  163|       |
  164|   103k|        const phi::size_t id_value = phi::to_underlying(id);
  165|       |
  166|   103k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  167|   103k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  168|   103k|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  171|  1.07M|    {
  172|  1.07M|        PHI_ASSERT(id != FloatRegisterID::None);
  173|  1.07M|        const phi::size_t id_value = phi::to_underlying(id);
  174|       |
  175|  1.07M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  176|       |
  177|  1.07M|        return m_FloatRegisters[id_value];
  178|  1.07M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  182|   639k|    {
  183|   639k|        PHI_ASSERT(id != FloatRegisterID::None);
  184|   639k|        const phi::size_t id_value = phi::to_underlying(id);
  185|       |
  186|   639k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  187|       |
  188|   639k|        return m_FloatRegisters[id_value];
  189|   639k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  192|   639k|    {
  193|   639k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  194|   639k|                                             RegisterAccessType::Float),
  195|   639k|                   "Mismatch for instruction access type");
  196|       |
  197|   639k|        const phi::size_t id_value = phi::to_underlying(id);
  198|       |
  199|   639k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  200|   639k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  201|   639k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (201:13): [True: 544k, False: 94.5k]
  ------------------
  202|   639k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (202:13): [True: 274k, False: 269k]
  ------------------
  203|   274k|        {
  204|       |            /*
  205|       |            DLX_WARN("Mismatch for register value type");
  206|       |            */
  207|   274k|        }
  208|       |
  209|   639k|        const FloatRegister& reg = GetFloatRegister(id);
  210|       |
  211|   639k|        return reg.GetValue();
  212|   639k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  215|   403k|    {
  216|   403k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  217|   403k|                                             RegisterAccessType::Double),
  218|   403k|                   "Mismatch for instruction access type");
  219|       |
  220|   403k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (220:13): [True: 22, False: 403k]
  ------------------
  221|     22|        {
  222|     22|            Raise(Exception::MisalignedRegisterAccess);
  223|     22|            return {0.0};
  224|     22|        }
  225|       |
  226|   403k|        const phi::size_t id_value = phi::to_underlying(id);
  227|       |
  228|   403k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  229|   403k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  230|   403k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (230:13): [True: 330k, False: 73.5k]
  ------------------
  231|   403k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (231:13): [True: 266k, False: 64.3k]
  ------------------
  232|   266k|        {
  233|   266k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   266k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  234|   266k|        }
  235|       |
  236|   403k|        const FloatRegisterValueType register_value_type_high =
  237|   403k|                m_FloatRegistersValueTypes[id_value + 1u];
  238|   403k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (238:13): [True: 330k, False: 73.5k]
  ------------------
  239|   403k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (239:13): [True: 8.00k, False: 322k]
  ------------------
  240|  8.00k|        {
  241|  8.00k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  8.00k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  242|  8.00k|        }
  243|       |
  244|   403k|        const FloatRegister& first_reg = GetFloatRegister(id);
  245|   403k|        const FloatRegister& second_reg =
  246|   403k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  247|       |
  248|   403k|        const float first_value  = first_reg.GetValue().unsafe();
  249|   403k|        const float second_value = second_reg.GetValue().unsafe();
  250|       |
  251|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  252|   403k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  253|       |
  254|   403k|        const std::uint32_t first_value_bits =
  255|   403k|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  256|   403k|        const std::uint32_t second_value_bits =
  257|   403k|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  258|       |
  259|   403k|        std::uint64_t final_value_bits =
  260|   403k|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  261|       |
  262|   403k|        return *reinterpret_cast<double*>(&final_value_bits);
  263|       |
  264|   403k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  265|   403k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  268|   124k|    {
  269|   124k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  270|   124k|                                             RegisterAccessType::Float),
  271|   124k|                   "Mismatch for instruction access type");
  272|       |
  273|   124k|        FloatRegister& reg = GetFloatRegister(id);
  274|       |
  275|   124k|        reg.SetValue(value);
  276|       |
  277|   124k|        const phi::size_t id_value = phi::to_underlying(id);
  278|       |
  279|   124k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  280|   124k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  281|   124k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  284|  71.2k|    {
  285|  71.2k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  286|  71.2k|                                             RegisterAccessType::Double),
  287|  71.2k|                   "Mismatch for instruction access type");
  288|       |
  289|  71.2k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (289:13): [True: 2, False: 71.2k]
  ------------------
  290|      2|        {
  291|      2|            Raise(Exception::MisalignedRegisterAccess);
  292|      2|            return;
  293|      2|        }
  294|       |
  295|  71.2k|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  296|  71.2k|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  297|       |
  298|  71.2k|        double              value_raw  = value.unsafe();
  299|  71.2k|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  300|       |
  301|  71.2k|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  302|  71.2k|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  303|       |
  304|  71.2k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  305|  71.2k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  306|       |
  307|  71.2k|        FloatRegister& first_reg = GetFloatRegister(id);
  308|  71.2k|        FloatRegister& second_reg =
  309|  71.2k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  310|       |
  311|  71.2k|        first_reg.SetValue(first_value);
  312|  71.2k|        second_reg.SetValue(second_value);
  313|       |
  314|  71.2k|        const phi::size_t id_value = phi::to_underlying(id);
  315|       |
  316|  71.2k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  317|  71.2k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  318|  71.2k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  319|  71.2k|    }
_ZN3dlx9Processor7GetFPSREv:
  322|   378k|    {
  323|   378k|        return m_FPSR;
  324|   378k|    }
_ZNK3dlx9Processor7GetFPSREv:
  327|   100k|    {
  328|   100k|        return m_FPSR;
  329|   100k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  332|   100k|    {
  333|   100k|        const StatusRegister& status_reg = GetFPSR();
  334|       |
  335|   100k|        return status_reg.Get();
  336|   100k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  339|   378k|    {
  340|   378k|        StatusRegister& status_reg = GetFPSR();
  341|       |
  342|   378k|        status_reg.SetStatus(value);
  343|   378k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  346|  3.42M|    {
  347|  3.42M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  348|       |
  349|  3.42M|        inst.Execute(*this);
  350|  3.42M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|  4.68k|    {
  354|  4.68k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 3.94k, False: 735]
  ------------------
  355|  3.94k|        {
  356|  3.94k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  3.94k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|  3.94k|            return false;
  358|  3.94k|        }
  359|       |
  360|    735|        m_CurrentProgram = &program;
  361|       |
  362|    735|        m_ProgramCounter               = 0u;
  363|    735|        m_Halted                       = false;
  364|    735|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    735|        m_LastRaisedException          = Exception::None;
  366|    735|        m_CurrentStepCount             = 0u;
  367|       |
  368|    735|        return true;
  369|  4.68k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  373|  1.09M|    {
  374|  1.09M|        return m_CurrentProgram;
  375|  1.09M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  378|  3.42M|    {
  379|       |        // No nothing when no program is loaded
  380|  3.42M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (380:13): [True: 0, False: 3.42M]
  ------------------
  381|      0|        {
  382|      0|            return;
  383|      0|        }
  384|       |
  385|       |        // Halt if there are no instruction to execute
  386|  3.42M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (386:13): [True: 65, False: 3.42M]
  ------------------
  387|     65|        {
  388|     65|            m_Halted                       = true;
  389|     65|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  390|     65|        }
  391|       |
  392|       |        // Do nothing when processor is halted
  393|  3.42M|        if (m_Halted)
  ------------------
  |  Branch (393:13): [True: 65, False: 3.42M]
  ------------------
  394|     65|        {
  395|     65|            return;
  396|     65|        }
  397|       |
  398|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  399|  3.42M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  400|       |
  401|       |        // Get current instruction pointed to by the program counter
  402|  3.42M|        const auto& current_instruction =
  403|  3.42M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  404|       |
  405|       |        // Execute current instruction
  406|  3.42M|        ExecuteInstruction(current_instruction);
  407|       |
  408|       |        // Stop executing if the last instruction halted the processor
  409|  3.42M|        if (m_Halted)
  ------------------
  |  Branch (409:13): [True: 176, False: 3.42M]
  ------------------
  410|    176|        {
  411|    176|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  412|    176|            return;
  413|    176|        }
  414|       |
  415|  3.42M|        m_ProgramCounter = m_NextProgramCounter;
  416|       |
  417|  3.42M|        ++m_CurrentStepCount;
  418|       |
  419|  3.42M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (419:13): [True: 494, False: 3.42M]
  |  Branch (419:14): [True: 3.42M, False: 0]
  |  Branch (419:42): [True: 342, False: 3.42M]
  ------------------
  420|  3.42M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (420:13): [True: 152, False: 3.42M]
  ------------------
  421|    494|        {
  422|    494|            m_Halted                       = true;
  423|    494|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  424|    494|        }
  425|  3.42M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  428|    735|    {
  429|       |        // Do nothing when no program is loaded
  430|    735|        if (!m_CurrentProgram)
  ------------------
  |  Branch (430:13): [True: 0, False: 735]
  ------------------
  431|      0|        {
  432|      0|            return;
  433|      0|        }
  434|       |
  435|    735|        m_ProgramCounter               = 0u;
  436|    735|        m_Halted                       = false;
  437|    735|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  438|    735|        m_LastRaisedException          = Exception::None;
  439|    735|        m_CurrentStepCount             = 0u;
  440|       |
  441|  3.42M|        while (!m_Halted)
  ------------------
  |  Branch (441:16): [True: 3.42M, False: 735]
  ------------------
  442|  3.42M|        {
  443|  3.42M|            ExecuteStep();
  444|  3.42M|        }
  445|       |
  446|    735|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  447|    735|                   "RegisterAccessType was not reset correctly");
  448|    735|    }
_ZN3dlx9Processor14ClearRegistersEv:
  464|  4.68k|    {
  465|  4.68k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (465:24): [True: 149k, False: 4.68k]
  ------------------
  466|   149k|        {
  467|   149k|            reg.SetSignedValue(0);
  468|   149k|        }
  469|       |
  470|  4.68k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (470:24): [True: 149k, False: 4.68k]
  ------------------
  471|   149k|        {
  472|   149k|            reg.SetValue(0.0f);
  473|   149k|        }
  474|       |
  475|  4.68k|        m_FPSR.SetStatus(false);
  476|  4.68k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  479|  4.68k|    {
  480|  4.68k|        m_MemoryBlock.Clear();
  481|  4.68k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  488|  5.80k|    {
  489|  5.80k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  490|       |
  491|  5.80k|        m_LastRaisedException = exception;
  492|       |
  493|  5.80k|        switch (exception)
  494|  5.80k|        {
  495|      4|            case Exception::DivideByZero:
  ------------------
  |  Branch (495:13): [True: 4, False: 5.80k]
  ------------------
  496|      4|                m_Halted = true;
  497|      4|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  498|      4|                return;
  499|      0|            case Exception::Overflow:
  ------------------
  |  Branch (499:13): [True: 0, False: 5.80k]
  ------------------
  500|      0|                DLX_WARN("Overflow");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  501|      0|                return;
  502|  5.62k|            case Exception::Underflow:
  ------------------
  |  Branch (502:13): [True: 5.62k, False: 182]
  ------------------
  503|  5.62k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|  5.62k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  504|  5.62k|                return;
  505|      0|            case Exception::Trap:
  ------------------
  |  Branch (505:13): [True: 0, False: 5.80k]
  ------------------
  506|      0|                m_Halted = true;
  507|      0|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  508|      0|                return;
  509|      2|            case Exception::Halt:
  ------------------
  |  Branch (509:13): [True: 2, False: 5.80k]
  ------------------
  510|      2|                m_Halted = true;
  511|      2|                return;
  512|    110|            case Exception::UnknownLabel:
  ------------------
  |  Branch (512:13): [True: 110, False: 5.69k]
  ------------------
  513|    110|                m_Halted = true;
  514|    110|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|    110|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  515|    110|                return;
  516|      0|            case Exception::BadShift:
  ------------------
  |  Branch (516:13): [True: 0, False: 5.80k]
  ------------------
  517|      0|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  518|      0|                return;
  519|     42|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (519:13): [True: 42, False: 5.76k]
  ------------------
  520|     42|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|     42|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  521|     42|                m_Halted = true;
  522|     42|                return;
  523|     24|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (523:13): [True: 24, False: 5.78k]
  ------------------
  524|     24|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     24|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  525|     24|                m_Halted = true;
  526|     24|                return;
  527|       |
  528|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  529|      0|            default:
  ------------------
  |  Branch (529:13): [True: 0, False: 5.80k]
  ------------------
  530|      0|                PHI_ASSERT_NOT_REACHED();
  531|  5.80k|#endif
  532|  5.80k|        }
  533|       |
  534|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  535|      0|        PHI_ASSERT_NOT_REACHED();
  536|      0|#endif
  537|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  558|   149k|    {
  559|   149k|        return m_MemoryBlock;
  560|   149k|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  573|  89.1k|    {
  574|  89.1k|        return m_NextProgramCounter;
  575|  89.1k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  578|  1.09M|    {
  579|  1.09M|        m_NextProgramCounter = new_npc;
  580|  1.09M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   36|  3.88M|    {
   37|  3.88M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   38|  3.88M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   39|       |
   40|  3.88M|        switch (expected_access)
   41|  3.88M|        {
   42|   534k|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (42:13): [True: 534k, False: 3.35M]
  ------------------
   43|   534k|                return true;
   44|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (44:13): [True: 0, False: 3.88M]
  ------------------
   45|      0|                return false;
   46|   158k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (46:13): [True: 158k, False: 3.72M]
  ------------------
   47|   158k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (47:24): [True: 79.3k, False: 79.3k]
  |  Branch (47:63): [True: 79.3k, False: 0]
  ------------------
   48|  52.5k|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (48:13): [True: 52.5k, False: 3.83M]
  ------------------
   49|  52.5k|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (49:24): [True: 0, False: 52.5k]
  ------------------
   50|  52.5k|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (50:24): [True: 52.5k, False: 0]
  ------------------
   51|  17.9k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (51:13): [True: 17.9k, False: 3.86M]
  ------------------
   52|  17.9k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (52:24): [True: 17.9k, False: 1]
  |  Branch (52:63): [True: 1, False: 0]
  ------------------
   53|  22.5k|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (53:13): [True: 22.5k, False: 3.86M]
  ------------------
   54|  22.5k|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (54:24): [True: 22.5k, False: 3]
  |  Branch (54:64): [True: 3, False: 0]
  ------------------
   55|  3.09M|            default:
  ------------------
  |  Branch (55:13): [True: 3.09M, False: 786k]
  ------------------
   56|  3.09M|                return expected_access == access;
   57|  3.88M|        }
   58|  3.88M|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   196k|    {
   14|   196k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 36.9k, False: 159k]
  ------------------
   15|  36.9k|        {
   16|  36.9k|            char first_char = token[0];
   17|  36.9k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 1.03k, False: 35.8k]
  |  Branch (17:38): [True: 4.03k, False: 31.8k]
  ------------------
   18|  5.06k|            {
   19|  5.06k|                char second_char = token[1];
   20|  5.06k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 4.69k, False: 378]
  |  Branch (20:43): [True: 3.52k, False: 1.16k]
  ------------------
   21|  3.52k|                {
   22|  3.52k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  3.52k|                }
   24|  5.06k|            }
   25|  36.9k|        }
   26|   159k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 46.8k, False: 113k]
  ------------------
   27|  46.8k|        {
   28|  46.8k|            char first_char = token[0];
   29|  46.8k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 611, False: 46.2k]
  |  Branch (29:38): [True: 2.30k, False: 43.9k]
  ------------------
   30|  2.91k|            {
   31|  2.91k|                char second_char = token[1];
   32|  2.91k|                char third_char  = token[2];
   33|       |
   34|  2.91k|                switch (second_char)
   35|  2.91k|                {
   36|    853|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 853, False: 2.06k]
  ------------------
   37|    853|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 655, False: 198]
  |  Branch (37:50): [True: 429, False: 226]
  ------------------
   38|    429|                        {
   39|    429|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|    429|                        }
   41|    424|                        break;
   42|    853|                    }
   43|    624|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 624, False: 2.29k]
  ------------------
   44|    624|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 412, False: 212]
  |  Branch (44:50): [True: 208, False: 204]
  ------------------
   45|    208|                        {
   46|    208|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|    208|                        }
   48|    416|                        break;
   49|    624|                    }
   50|    624|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 624, False: 2.29k]
  ------------------
   51|    624|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 196, False: 428]
  |  Branch (51:50): [True: 224, False: 204]
  ------------------
   52|    420|                        {
   53|    420|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|    420|                        }
   55|    204|                        break;
   56|    624|                    }
   57|    818|                    default: {
  ------------------
  |  Branch (57:21): [True: 818, False: 2.10k]
  ------------------
   58|    818|                        break;
   59|    624|                    }
   60|  2.91k|                }
   61|  2.91k|            }
   62|  46.8k|        }
   63|       |
   64|   192k|        return IntRegisterID::None;
   65|   196k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   192k|    {
   69|   192k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 33.4k, False: 158k]
  ------------------
   70|  33.4k|        {
   71|  33.4k|            char first_char = token[0];
   72|  33.4k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 1.33k, False: 32.0k]
  |  Branch (72:38): [True: 2.61k, False: 29.4k]
  ------------------
   73|  3.94k|            {
   74|  3.94k|                char second_char = token[1];
   75|  3.94k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 3.31k, False: 634]
  |  Branch (75:43): [True: 2.41k, False: 899]
  ------------------
   76|  2.41k|                {
   77|  2.41k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  2.41k|                }
   79|  3.94k|            }
   80|  33.4k|        }
   81|   158k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 45.8k, False: 113k]
  ------------------
   82|  45.8k|        {
   83|  45.8k|            char first_char = token[0];
   84|  45.8k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 1.52k, False: 44.2k]
  |  Branch (84:38): [True: 1.52k, False: 42.7k]
  ------------------
   85|  3.05k|            {
   86|  3.05k|                char second_char = token[1];
   87|  3.05k|                char third_char  = token[2];
   88|       |
   89|  3.05k|                switch (second_char)
   90|  3.05k|                {
   91|    598|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 598, False: 2.45k]
  ------------------
   92|    598|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 394, False: 204]
  |  Branch (92:50): [True: 196, False: 198]
  ------------------
   93|    196|                        {
   94|    196|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|    196|                        }
   96|    402|                        break;
   97|    598|                    }
   98|    799|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 799, False: 2.25k]
  ------------------
   99|    799|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 598, False: 201]
  |  Branch (99:50): [True: 217, False: 381]
  ------------------
  100|    217|                        {
  101|    217|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|    217|                        }
  103|    582|                        break;
  104|    799|                    }
  105|    634|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 634, False: 2.42k]
  ------------------
  106|    634|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 196, False: 438]
  |  Branch (106:50): [True: 194, False: 244]
  ------------------
  107|    390|                        {
  108|    390|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|    390|                        }
  110|    244|                        break;
  111|    634|                    }
  112|  1.02k|                    default: {
  ------------------
  |  Branch (112:21): [True: 1.02k, False: 2.03k]
  ------------------
  113|  1.02k|                        break;
  114|    634|                    }
  115|  3.05k|                }
  116|  3.05k|            }
  117|  45.8k|        }
  118|       |
  119|   189k|        return FloatRegisterID::None;
  120|   192k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   183k|    {
  124|   183k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 38.1k, False: 145k]
  ------------------
  125|  38.1k|        {
  126|  38.1k|            char c1 = token[0];
  127|  38.1k|            char c2 = token[1];
  128|  38.1k|            char c3 = token[2];
  129|  38.1k|            char c4 = token[3];
  130|       |
  131|  38.1k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 979, False: 37.1k]
  |  Branch (131:34): [True: 1.23k, False: 35.9k]
  |  Branch (131:49): [True: 209, False: 2.00k]
  |  Branch (131:62): [True: 1.01k, False: 991]
  ------------------
  132|  38.1k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 777, False: 450]
  |  Branch (132:34): [True: 196, False: 254]
  |  Branch (132:49): [True: 320, False: 653]
  |  Branch (132:62): [True: 608, False: 45]
  ------------------
  133|  38.1k|        }
  134|       |
  135|   145k|        return false;
  136|   183k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|   230k|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|  56.3k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|   537k|    {
   41|   537k|        return m_Type;
   42|   537k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   238k|    {
   51|   238k|        return m_LineNumber;
   52|   238k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   218k|    {
   56|   218k|        return m_Column;
   57|   218k|    }
_ZNK3dlx5Token7GetTextEv:
   65|   254k|    {
   66|   254k|        return m_Text;
   67|   254k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  21.6k|    {
   80|  21.6k|        return m_HasHint;
   81|  21.6k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  25.9k|    {
   85|  25.9k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  25.9k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  25.9k|                   m_Type == Type::ImmediateInteger);
   88|  25.9k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  25.9k|        return m_Hint;
   91|  25.9k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  4.68k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  4.68k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  4.68k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|    982|    {
   51|    982|        auto it = m_Iterator;
   52|  3.92k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 2.94k, False: 978]
  ------------------
   53|  2.94k|        {
   54|  2.94k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 4, False: 2.93k]
  ------------------
   55|      4|            {
   56|      4|                return false;
   57|      4|            }
   58|  2.94k|        }
   59|       |
   60|    978|        return true;
   61|    982|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|   289k|    {
   65|   289k|        return m_Iterator != m_Tokens.end();
   66|   289k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|   286k|    {
   70|   286k|        return m_Iterator == m_Tokens.end();
   71|   286k|    }
_ZN3dlx11TokenStream7consumeEv:
   84|   286k|    {
   85|   286k|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|   286k|        return *m_Iterator++;
   91|   286k|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|    978|    {
  164|    978|        return m_Iterator;
  165|    978|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|    267|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|    267|        m_Iterator = it;
  179|    267|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    534|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    534|        return m_Tokens.rbegin();
  224|    534|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  3.00k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  3.00k|        return m_Tokens.rend();
  233|  3.00k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  4.68k|    {
   63|  4.68k|        TokenStream tokens;
   64|       |
   65|  4.68k|        std::string_view current_token;
   66|       |
   67|  4.68k|        phi::u64 current_line_number{1u};
   68|  4.68k|        phi::u64 current_column{1u};
   69|  4.68k|        phi::u64 token_begin{0u};
   70|       |
   71|  4.68k|        phi::boolean parsing_comment{false};
   72|       |
   73|   696k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 692k, False: 4.68k]
  ------------------
   74|   692k|        {
   75|   692k|            const char c{source.at(i.unsafe())};
   76|       |
   77|   692k|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 36.4k, False: 655k]
  ------------------
   78|  36.4k|            {
   79|  36.4k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 6.73k, False: 29.7k]
  ------------------
   80|  6.73k|                {
   81|       |                    // Skip empty lines
   82|  6.73k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  6.73k|                                        current_line_number, current_column);
   84|       |
   85|  6.73k|                    parsing_comment = false;
   86|  6.73k|                    current_line_number += 1u;
   87|  6.73k|                    current_column = 1u;
   88|  6.73k|                    continue;
   89|  6.73k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|  29.7k|                tokens.emplace_back(
   93|  29.7k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|  29.7k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|  29.7k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|  29.7k|                                    current_line_number, current_column);
   98|       |
   99|  29.7k|                current_token   = std::string_view{};
  100|  29.7k|                parsing_comment = false;
  101|  29.7k|                current_line_number += 1u;
  102|  29.7k|                current_column = 0u;
  103|  29.7k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|   655k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 915, False: 654k]
  |  Branch (105:34): [True: 1.06k, False: 653k]
  ------------------
  106|  1.98k|            {
  107|  1.98k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 490, False: 1.49k]
  ------------------
  108|    490|                {
  109|    490|                    token_begin = i;
  110|    490|                }
  111|  1.49k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 967, False: 523]
  ------------------
  112|    967|                {
  113|    967|                    tokens.emplace_back(ParseToken(
  114|    967|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|    967|                            current_line_number, current_column - current_token.length()));
  116|    967|                    token_begin   = i;
  117|    967|                    current_token = std::string_view{};
  118|    967|                }
  119|       |
  120|  1.98k|                parsing_comment = true;
  121|  1.98k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  1.98k|            }
  123|   653k|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 3.86k, False: 649k]
  ------------------
  124|  3.86k|            {
  125|       |                // simply append the character
  126|  3.86k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|  3.86k|            }
  128|   649k|            else
  129|   649k|            {
  130|       |                // Not parsing a comment
  131|   649k|                switch (c)
  132|   649k|                {
  133|  7.26k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 7.26k, False: 642k]
  ------------------
  134|  11.9k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 4.66k, False: 645k]
  ------------------
  135|  18.8k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 6.93k, False: 642k]
  ------------------
  136|  18.8k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 4.26k, False: 14.6k]
  ------------------
  137|  4.26k|                        {
  138|  4.26k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  4.26k|                            continue;
  141|  4.26k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|  14.6k|                        tokens.emplace_back(ParseToken(
  145|  14.6k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|  14.6k|                                current_line_number, current_column - current_token.length()));
  147|  14.6k|                        current_token = std::string_view{};
  148|  14.6k|                        break;
  149|  50.9k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 50.9k, False: 598k]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  50.9k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 43.3k, False: 7.62k]
  ------------------
  152|  43.3k|                        {
  153|  43.3k|                            current_token =
  154|  43.3k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  43.3k|                            tokens.emplace_back(ParseToken(
  156|  43.3k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  43.3k|                                    current_line_number,
  158|  43.3k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  43.3k|                            current_token = std::string_view{};
  161|  43.3k|                        }
  162|  7.62k|                        else
  163|  7.62k|                        {
  164|       |                            // Orphan colon
  165|  7.62k|                            token_begin = i;
  166|       |
  167|  7.62k|                            tokens.emplace_back(Token::Type::Colon,
  168|  7.62k|                                                source.substr(token_begin.unsafe(), 1),
  169|  7.62k|                                                current_line_number, current_column);
  170|  7.62k|                        }
  171|  50.9k|                        break;
  172|  54.6k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 54.6k, False: 595k]
  ------------------
  173|  63.0k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 8.42k, False: 641k]
  ------------------
  174|  83.8k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 20.8k, False: 628k]
  ------------------
  175|  83.8k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 66.4k, False: 17.4k]
  ------------------
  176|  66.4k|                        {
  177|  66.4k|                            tokens.emplace_back(ParseToken(
  178|  66.4k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|  66.4k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|  66.4k|                            current_token = std::string_view{};
  182|  66.4k|                        }
  183|       |
  184|  83.8k|                        Token::Type type;
  185|  83.8k|                        switch (c)
  186|  83.8k|                        {
  187|  54.6k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 54.6k, False: 29.2k]
  ------------------
  188|  54.6k|                                type = Token::Type::Comma;
  189|  54.6k|                                break;
  190|  8.42k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 8.42k, False: 75.4k]
  ------------------
  191|  8.42k|                                type = Token::Type::OpenBracket;
  192|  8.42k|                                break;
  193|  20.8k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 20.8k, False: 63.0k]
  ------------------
  194|  20.8k|                                type = Token::Type::ClosingBracket;
  195|  20.8k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 83.8k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  83.8k|#endif
  201|  83.8k|                        }
  202|       |
  203|  83.8k|                        token_begin = i;
  204|       |
  205|  83.8k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  83.8k|                                            current_line_number, current_column);
  207|  83.8k|                        break;
  208|       |
  209|   496k|                    default:
  ------------------
  |  Branch (209:21): [True: 496k, False: 153k]
  ------------------
  210|   496k|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 157k, False: 338k]
  ------------------
  211|   157k|                        {
  212|   157k|                            token_begin = i;
  213|   157k|                        }
  214|       |
  215|       |                        // simply append the character
  216|   496k|                        current_token =
  217|   496k|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|   649k|                }
  219|   649k|            }
  220|       |
  221|   681k|            current_column += 1u;
  222|   681k|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  4.68k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 3.75k, False: 930]
  ------------------
  226|  3.75k|        {
  227|  3.75k|            tokens.emplace_back(
  228|  3.75k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  3.75k|                               current_line_number, current_column - current_token.length()));
  230|  3.75k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  4.68k|        tokens.finalize();
  234|       |
  235|  4.68k|        return tokens;
  236|  4.68k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   158k|    {
   11|   158k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 1.44k, False: 157k]
  |  Branch (11:35): [True: 1.07k, False: 370]
  ------------------
   12|  1.07k|        {
   13|  1.07k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  1.07k|            if (number)
  ------------------
  |  Branch (15:17): [True: 536, False: 541]
  ------------------
   16|    536|            {
   17|    536|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|    536|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|    536|            }
   20|       |
   21|    541|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  1.07k|        }
   23|       |
   24|   157k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 633, False: 157k]
  |  Branch (24:35): [True: 824, False: 156k]
  ------------------
   25|  1.45k|        {
   26|  1.45k|            return {Token::Type::Comment, token, line_number, column};
   27|  1.45k|        }
   28|       |
   29|   156k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 2.96k, False: 153k]
  ------------------
   30|  2.96k|        {
   31|  2.96k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  2.96k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  2.96k|        }
   34|       |
   35|   153k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 658, False: 152k]
  ------------------
   36|    658|        {
   37|    658|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|    658|        }
   39|       |
   40|   152k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 4.15k, False: 148k]
  ------------------
   41|  4.15k|        {
   42|  4.15k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  4.15k|                    static_cast<std::uint32_t>(id)};
   44|  4.15k|        }
   45|       |
   46|   148k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 2.61k, False: 145k]
  ------------------
   47|  2.61k|        {
   48|  2.61k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  2.61k|                    static_cast<std::uint32_t>(id)};
   50|  2.61k|        }
   51|       |
   52|   145k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 46.0k, False: 99.8k]
  ------------------
   53|  46.0k|        {
   54|  46.0k|            return {Token::Type::OpCode, token, line_number, column,
   55|  46.0k|                    static_cast<std::uint32_t>(opcode)};
   56|  46.0k|        }
   57|       |
   58|  99.8k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   145k|    }

LLVMFuzzerTestOneInput:
   12|  4.68k|{
   13|  4.68k|    static dlx::Processor processor;
   14|       |
   15|  4.68k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   16|       |
   17|       |    // Parse it
   18|  4.68k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  4.68k|    processor.ClearRegisters();
   22|  4.68k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  4.68k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 735, False: 3.94k]
  ------------------
   26|    735|    {
   27|    735|        processor.ExecuteCurrentProgram();
   28|    735|    }
   29|       |
   30|  4.68k|    return 0;
   31|  4.68k|}


_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   892k|        {
  169|   892k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   892k|            switch (index.unsafe())
  172|   892k|            {
  173|   391k|                case 0:
  ------------------
  |  Branch (173:17): [True: 391k, False: 500k]
  ------------------
  174|   391k|                    return m_Arg1Type;
  175|       |
  176|   258k|                case 1:
  ------------------
  |  Branch (176:17): [True: 258k, False: 634k]
  ------------------
  177|   258k|                    return m_Arg2Type;
  178|       |
  179|   242k|                case 2:
  ------------------
  |  Branch (179:17): [True: 242k, False: 650k]
  ------------------
  180|   242k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 892k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   892k|#endif
  187|   892k|            }
  188|   892k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   237k|        {
  195|   237k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   237k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 231k, False: 5.82k]
  ------------------
  199|   231k|            {
  200|   231k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   231k|            }
  202|   237k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 136k, False: 101k]
  ------------------
  203|   136k|            {
  204|   136k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   136k|            }
  206|   237k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 45.6k, False: 191k]
  ------------------
  207|  45.6k|            {
  208|  45.6k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  45.6k|            }
  210|       |
  211|   237k|            return number_of_argument_required;
  212|   237k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  5.56M|        {
  216|  5.56M|            return m_RegisterAccessType;
  217|  5.56M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   237k|        {
  221|   237k|            return m_Executor;
  222|   237k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  16.8M|    {
   38|  16.8M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  16.8M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  16.8M|                                         static_cast<underlying_t>(rhs));
   42|  16.8M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  16.8M|    {
   55|  16.8M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  16.8M|        return static_cast<underlying_t>(type & test) != 0;
   58|  16.8M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|   760k|    {
   32|   760k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 5.96k, False: 754k]
  ------------------
   33|  5.96k|        {
   34|  5.96k|            return true;
   35|  5.96k|        }
   36|       |
   37|   754k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 8.74k, False: 745k]
  ------------------
   38|  8.74k|        {
   39|  8.74k|            return true;
   40|  8.74k|        }
   41|       |
   42|   745k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 191k, False: 554k]
  ------------------
   43|   191k|        {
   44|   191k|            return true;
   45|   191k|        }
   46|       |
   47|   554k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 3.45k, False: 550k]
  ------------------
   48|  3.45k|        {
   49|  3.45k|            return true;
   50|  3.45k|        }
   51|       |
   52|   550k|        return false;
   53|   554k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|   550k|    {
   57|   550k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 550k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|   550k|        const char first_char = token.at(0);
   63|       |
   64|   550k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 123k, False: 427k]
  ------------------
   65|   123k|        {
   66|   123k|            return phi::is_alpha(first_char);
   67|   123k|        }
   68|       |
   69|   427k|        phi::boolean just_under_scores = (first_char == '_');
   70|   427k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 143k, False: 283k]
  |  Branch (70:15): [True: 276k, False: 151k]
  |  Branch (70:44): [True: 7.71k, False: 143k]
  ------------------
   71|   143k|        {
   72|   143k|            return false;
   73|   143k|        }
   74|       |
   75|   790k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 668k, False: 121k]
  ------------------
   76|   668k|        {
   77|   668k|            const char c{token.at(index)};
   78|       |
   79|   668k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 505k, False: 163k]
  ------------------
   80|   505k|            {
   81|   505k|                just_under_scores = false;
   82|   505k|            }
   83|   163k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 1.34k, False: 162k]
  ------------------
   84|  1.34k|            {
   85|  1.34k|                continue;
   86|  1.34k|            }
   87|   162k|            else
   88|   162k|            {
   89|   162k|                return false;
   90|   162k|            }
   91|   668k|        }
   92|       |
   93|   121k|        return !just_under_scores;
   94|   283k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|  2.78M|    {
  101|  2.78M|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 2.78M]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|  2.78M|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 448k, False: 2.33M]
  ------------------
  107|   448k|        {
  108|   448k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 36.5k, False: 412k]
  ------------------
  109|  36.5k|            {
  110|  36.5k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  36.5k|            }
  112|       |
  113|   412k|            return {};
  114|   448k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|  2.33M|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 8.07k, False: 2.32M]
  ------------------
  118|  8.07k|        {
  119|  8.07k|            return {};
  120|  8.07k|        }
  121|       |
  122|  2.32M|        std::int32_t number{0};
  123|  2.32M|        phi::boolean is_negative{false};
  124|  2.32M|        phi::boolean starts_with_zero{false};
  125|  2.32M|        phi::boolean parsing_binary{false};
  126|  2.32M|        phi::boolean parsing_octal{false};
  127|  2.32M|        phi::boolean parsing_hexadecimal{false};
  128|  2.32M|        phi::boolean parsed_something{false};
  129|  2.32M|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|  2.67M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 2.64M, False: 26.2k]
  ------------------
  134|  2.64M|        {
  135|  2.64M|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|  2.64M|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 2.32M, False: 321k]
  ------------------
  139|  2.32M|            {
  140|  2.32M|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 9.39k, False: 2.31M]
  ------------------
  141|  9.39k|                {
  142|  9.39k|                    continue;
  143|  9.39k|                }
  144|       |
  145|  2.31M|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 41.6k, False: 2.27M]
  ------------------
  146|  41.6k|                {
  147|  41.6k|                    is_negative = true;
  148|  41.6k|                    continue;
  149|  41.6k|                }
  150|       |
  151|  2.27M|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 73.4k, False: 2.20M]
  ------------------
  152|  73.4k|                {
  153|  73.4k|                    starts_with_zero = true;
  154|  73.4k|                    continue;
  155|  73.4k|                }
  156|       |
  157|  2.20M|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 6.33k, False: 2.19M]
  ------------------
  158|  6.33k|                {
  159|  6.33k|                    return {};
  160|  6.33k|                }
  161|  2.20M|            }
  162|       |
  163|       |            // Second character
  164|  2.51M|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 165k, False: 2.35M]
  ------------------
  165|   165k|            {
  166|   165k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 73.4k, False: 91.8k]
  ------------------
  167|  73.4k|                {
  168|       |                    // Binary
  169|  73.4k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 4.99k, False: 68.4k]
  |  Branch (169:37): [True: 2.25k, False: 66.2k]
  ------------------
  170|  7.24k|                    {
  171|  7.24k|                        parsing_binary = true;
  172|  7.24k|                        continue;
  173|  7.24k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  66.2k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 16.4k, False: 49.7k]
  |  Branch (176:37): [True: 17.9k, False: 31.8k]
  ------------------
  177|  34.3k|                    {
  178|  34.3k|                        parsing_hexadecimal = true;
  179|  34.3k|                        continue;
  180|  34.3k|                    }
  181|       |
  182|       |                    // Octal
  183|  31.8k|                    parsing_octal = true;
  184|  31.8k|                }
  185|   165k|            }
  186|       |
  187|       |            // Handle seperators
  188|  2.47M|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 5.28k, False: 2.47M]
  ------------------
  189|  5.28k|            {
  190|  5.28k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 2.07k, False: 3.20k]
  ------------------
  191|  2.07k|                {
  192|  2.07k|                    return {};
  193|  2.07k|                }
  194|       |
  195|  3.20k|                parsed_separator = true;
  196|  3.20k|                continue;
  197|  5.28k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|  2.47M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 78.9k, False: 2.39M]
  |  Branch (200:32): [True: 2.88k, False: 76.0k]
  ------------------
  201|  2.88k|            {
  202|       |                // Would underflow
  203|  2.88k|                return {};
  204|  2.88k|            }
  205|  2.46M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 2.39M, False: 76.0k]
  |  Branch (205:17): [True: 3.53k, False: 2.46M]
  |  Branch (205:33): [True: 3.53k, False: 2.38M]
  ------------------
  206|  3.53k|            {
  207|       |                // Would overflow
  208|  3.53k|                return {};
  209|  3.53k|            }
  210|       |
  211|  2.46M|            parsed_separator = false;
  212|  2.46M|            parsed_something = true;
  213|       |
  214|  2.46M|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 6.67k, False: 2.45M]
  ------------------
  215|  6.67k|            {
  216|  6.67k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 3.60k, False: 3.07k]
  ------------------
  217|  3.60k|                {
  218|  3.60k|                    return {};
  219|  3.60k|                }
  220|       |
  221|  3.07k|                number <<= 1;
  222|  3.07k|                number |= (c - '0');
  223|  3.07k|            }
  224|  2.45M|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 35.9k, False: 2.42M]
  ------------------
  225|  35.9k|            {
  226|  35.9k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 25.5k, False: 10.4k]
  ------------------
  227|  25.5k|                {
  228|  25.5k|                    return {};
  229|  25.5k|                }
  230|       |
  231|  10.4k|                number <<= 3;
  232|  10.4k|                number |= (c - '0');
  233|  10.4k|            }
  234|  2.42M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 71.9k, False: 2.34M]
  ------------------
  235|  71.9k|            {
  236|  71.9k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 31.0k, False: 40.8k]
  ------------------
  237|  31.0k|                {
  238|  31.0k|                    return {};
  239|  31.0k|                }
  240|       |
  241|  40.8k|                number <<= 4;
  242|  40.8k|                number |= phi::hex_digit_value(c).unsafe();
  243|  40.8k|            }
  244|  2.34M|            else
  245|  2.34M|            {
  246|  2.34M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 2.22M, False: 128k]
  ------------------
  247|  2.22M|                {
  248|  2.22M|                    return {};
  249|  2.22M|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|   128k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 62.0k, False: 66.0k]
  |  Branch (252:36): [True: 3.87k, False: 58.1k]
  ------------------
  253|  3.87k|                {
  254|  3.87k|                    return {};
  255|  3.87k|                }
  256|       |
  257|   124k|                number *= 10;
  258|   124k|                number += (c - '0');
  259|   124k|            }
  260|  2.46M|        }
  261|       |
  262|  26.2k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 21.9k, False: 4.33k]
  ------------------
  263|  21.9k|        {
  264|       |            // Check for over/underflow
  265|  21.9k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 11.6k, False: 10.3k]
  |  Branch (265:32): [True: 4.48k, False: 7.15k]
  ------------------
  266|  4.48k|            {
  267|       |                // Would underflow
  268|  4.48k|                return {};
  269|  4.48k|            }
  270|  17.4k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 10.3k, False: 7.15k]
  |  Branch (270:17): [True: 3.34k, False: 14.1k]
  |  Branch (270:33): [True: 3.34k, False: 6.96k]
  ------------------
  271|  3.34k|            {
  272|       |                // Would overflow
  273|  3.34k|                return {};
  274|  3.34k|            }
  275|       |
  276|  14.1k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 7.15k, False: 6.96k]
  ------------------
  277|  7.15k|            {
  278|  7.15k|                return static_cast<std::int16_t>(-number);
  279|  7.15k|            }
  280|       |
  281|  6.96k|            return static_cast<std::int16_t>(number);
  282|  14.1k|        }
  283|       |
  284|  4.33k|        return {};
  285|  26.2k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   128k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   128k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 2.91M, False: 0]
  ------------------
   64|  2.91M|            {
   65|  2.91M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 128k, False: 2.79M]
  ------------------
   66|   128k|                {
   67|   128k|                    return &token;
   68|   128k|                }
   69|  2.91M|            }
   70|       |
   71|      0|            return nullptr;
   72|   128k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   829k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   829k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   829k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  2.80M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.80M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.80M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  1.59M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.59M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.59M|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|   853k|    {
   11|   853k|        m_Value = val;
   12|   853k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  1.62M|    {
   16|  1.62M|        return m_Value;
   17|  1.62M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   18|   237k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   23|  62.4k|    {
   24|  62.4k|        PHI_ASSERT(argument_number < 3u);
   25|       |
   26|  62.4k|        switch (argument_number.unsafe())
   27|  62.4k|        {
   28|  46.6k|            case 0u:
  ------------------
  |  Branch (28:13): [True: 46.6k, False: 15.7k]
  ------------------
   29|  46.6k|                m_Arg1 = argument;
   30|  46.6k|                break;
   31|  10.7k|            case 1u:
  ------------------
  |  Branch (31:13): [True: 10.7k, False: 51.7k]
  ------------------
   32|  10.7k|                m_Arg2 = argument;
   33|  10.7k|                break;
   34|  5.06k|            case 2u:
  ------------------
  |  Branch (34:13): [True: 5.06k, False: 57.4k]
  ------------------
   35|  5.06k|                m_Arg3 = argument;
   36|  5.06k|                break;
   37|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   38|      0|            default:
  ------------------
  |  Branch (38:13): [True: 0, False: 62.4k]
  ------------------
   39|      0|                PHI_ASSERT_NOT_REACHED();
   40|  62.4k|#endif
   41|  62.4k|        }
   42|  62.4k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   82|  5.56M|    {
   83|  5.56M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   84|  5.56M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   87|  5.56M|    {
   88|  5.56M|        return m_Info;
   89|  5.56M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   23|   774k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   26|  33.4M|    {
   27|  33.4M|        return m_Type;
   28|  33.4M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  4.79M|    {
   78|  4.79M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  4.79M|        return register_int;
   81|  4.79M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   85|  1.44M|    {
   86|  1.44M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   87|       |
   88|  1.44M|        return register_float;
   89|  1.44M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   93|  37.3k|    {
   94|  37.3k|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   95|       |
   96|  37.3k|        return immediate_value;
   97|  37.3k|    }
_ZNK3dlx19InstructionArgument21AsAddressDisplacementEv:
  101|      1|    {
  102|      1|        PHI_ASSERT(m_Type == ArgumentType::AddressDisplacement);
  103|       |
  104|      1|        return address_displacement;
  105|      1|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  109|   913k|    {
  110|   913k|        PHI_ASSERT(m_Type == ArgumentType::Label);
  111|       |
  112|   913k|        return label;
  113|   913k|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  173|  21.6k|    {
  174|  21.6k|        InstructionArgument arg;
  175|  21.6k|        arg.m_Type                   = ArgumentType::IntRegister;
  176|  21.6k|        arg.register_int.register_id = id;
  177|  21.6k|        return arg;
  178|  21.6k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  182|  12.9k|    {
  183|  12.9k|        InstructionArgument arg;
  184|  12.9k|        arg.m_Type                     = ArgumentType::FloatRegister;
  185|  12.9k|        arg.register_float.register_id = id;
  186|  12.9k|        return arg;
  187|  12.9k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  191|  2.66k|    {
  192|  2.66k|        InstructionArgument arg;
  193|  2.66k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  194|  2.66k|        arg.immediate_value.signed_value = value;
  195|  2.66k|        return arg;
  196|  2.66k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  200|  3.60k|    {
  201|  3.60k|        InstructionArgument arg;
  202|  3.60k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  203|  3.60k|        arg.address_displacement.register_id  = id;
  204|  3.60k|        arg.address_displacement.displacement = displacement;
  205|  3.60k|        return arg;
  206|  3.60k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  210|  21.6k|    {
  211|  21.6k|        InstructionArgument arg;
  212|  21.6k|        arg.m_Type           = ArgumentType::Label;
  213|  21.6k|        arg.label.label_name = label_name;
  214|  21.6k|        return arg;
  215|  21.6k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  351|  10.2k|        {
  352|  10.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  353|  10.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  354|  10.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  355|       |
  356|  10.2k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  357|  10.2k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  358|       |
  359|  10.2k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  360|  10.2k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  376|      1|        {
  377|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  378|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  379|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  380|       |
  381|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  382|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  383|       |
  384|      1|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  385|      1|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  401|  8.33k|        {
  402|  8.33k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  403|  8.33k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  404|  8.33k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  405|       |
  406|  8.33k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  407|  8.33k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  408|       |
  409|  8.33k|            const phi::f32 new_value = lhs_value + rhs_value;
  410|       |
  411|  8.33k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  412|  8.33k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  416|  8.33k|        {
  417|  8.33k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  418|  8.33k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  419|  8.33k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  420|       |
  421|  8.33k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  422|  8.33k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  423|       |
  424|  8.33k|            const phi::f64 new_value = lhs_value + rhs_value;
  425|       |
  426|  8.33k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  427|  8.33k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  431|  47.5k|        {
  432|  47.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  433|  47.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  434|  47.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  435|       |
  436|  47.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  437|  47.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  438|       |
  439|  47.5k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  440|  47.5k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  456|  50.0k|        {
  457|  50.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  458|  50.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  459|  50.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  460|       |
  461|  50.0k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  462|  50.0k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  463|       |
  464|  50.0k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  465|  50.0k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  511|  4.01k|        {
  512|  4.01k|            const auto& dest_reg = arg1.AsRegisterInt();
  513|  4.01k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  514|  4.01k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  515|       |
  516|  4.01k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  517|  4.01k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  518|       |
  519|  4.01k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  520|  4.01k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  536|      1|        {
  537|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  538|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  539|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  540|       |
  541|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  542|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  543|       |
  544|      1|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  545|      1|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  591|      1|        {
  592|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  593|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  594|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  595|       |
  596|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  597|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  598|       |
  599|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  600|      1|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  616|      1|        {
  617|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  618|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  619|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  620|       |
  621|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  622|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  623|       |
  624|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  625|      1|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  641|      1|        {
  642|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  643|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  644|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  645|       |
  646|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  647|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  648|       |
  649|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (649:17): [True: 1, False: 0]
  ------------------
  650|      1|            {
  651|      1|                processor.Raise(Exception::DivideByZero);
  652|      1|                return;
  653|      1|            }
  654|       |
  655|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  656|       |
  657|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  658|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  662|      1|        {
  663|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  664|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  665|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  666|       |
  667|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  668|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  669|       |
  670|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (670:17): [True: 1, False: 0]
  ------------------
  671|      1|            {
  672|      1|                processor.Raise(Exception::DivideByZero);
  673|      1|                return;
  674|      1|            }
  675|       |
  676|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  677|       |
  678|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  679|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  683|  37.8k|        {
  684|  37.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  685|  37.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  686|  37.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  687|       |
  688|  37.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  689|  37.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  690|       |
  691|  37.8k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  692|  37.8k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  709|  19.7k|        {
  710|  19.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  711|  19.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  712|  19.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  713|       |
  714|  19.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  715|  19.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  716|       |
  717|  19.7k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  718|  19.7k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  735|  41.5k|        {
  736|  41.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  737|  41.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  738|  41.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  739|       |
  740|  41.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  741|  41.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  742|       |
  743|  41.5k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  744|  41.5k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  761|  39.8k|        {
  762|  39.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  763|  39.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  764|  39.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  765|       |
  766|  39.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  767|  39.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  768|       |
  769|  39.8k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  770|  39.8k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  787|  9.44k|        {
  788|  9.44k|            const auto& dest_reg = arg1.AsRegisterInt();
  789|  9.44k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  790|  9.44k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  791|       |
  792|  9.44k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  793|  9.44k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  794|  9.44k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  795|       |
  796|  9.44k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  797|  9.44k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  814|  28.8k|        {
  815|  28.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  816|  28.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  817|  28.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  818|       |
  819|  28.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  820|  28.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  821|  28.8k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  822|       |
  823|  28.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  824|  28.8k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  841|   487k|        {
  842|   487k|            const auto& dest_reg = arg1.AsRegisterInt();
  843|   487k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  844|   487k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  845|       |
  846|   487k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  847|   487k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  848|   487k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  849|       |
  850|   487k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  851|   487k|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  868|  12.2k|        {
  869|  12.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  870|  12.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  871|  12.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  872|       |
  873|  12.2k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  874|  12.2k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  875|       |
  876|  12.2k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (876:41): [True: 0, False: 12.2k]
  ------------------
  877|       |
  878|  12.2k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  879|  12.2k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  897|  10.9k|        {
  898|  10.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  899|  10.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  900|  10.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  901|       |
  902|  10.9k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  903|  10.9k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  904|       |
  905|  10.9k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (905:41): [True: 0, False: 10.9k]
  ------------------
  906|       |
  907|  10.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  908|  10.9k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  926|   115k|        {
  927|   115k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  928|   115k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  929|       |
  930|   115k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  931|   115k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  932|       |
  933|   115k|            const phi::boolean new_value = (lhs_value < rhs_value);
  934|       |
  935|   115k|            processor.SetFPSRValue(new_value);
  936|   115k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  940|  6.71k|        {
  941|  6.71k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  942|  6.71k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  943|       |
  944|  6.71k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  945|  6.71k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  946|       |
  947|  6.71k|            const phi::boolean new_value = (lhs_value < rhs_value);
  948|       |
  949|  6.71k|            processor.SetFPSRValue(new_value);
  950|  6.71k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  954|  26.6k|        {
  955|  26.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  956|  26.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  957|  26.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  958|       |
  959|  26.6k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  960|  26.6k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  961|       |
  962|  26.6k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (962:41): [True: 0, False: 26.6k]
  ------------------
  963|       |
  964|  26.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  965|  26.6k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  983|  8.33k|        {
  984|  8.33k|            const auto& dest_reg = arg1.AsRegisterInt();
  985|  8.33k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  986|  8.33k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  987|       |
  988|  8.33k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  989|  8.33k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  990|       |
  991|  8.33k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (991:41): [True: 0, False: 8.33k]
  ------------------
  992|       |
  993|  8.33k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  994|  8.33k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1012|  85.9k|        {
 1013|  85.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1014|  85.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1015|       |
 1016|  85.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1017|  85.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1018|       |
 1019|  85.9k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1020|       |
 1021|  85.9k|            processor.SetFPSRValue(new_value);
 1022|  85.9k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1026|  22.5k|        {
 1027|  22.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1028|  22.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1029|       |
 1030|  22.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1031|  22.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1032|       |
 1033|  22.5k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1034|       |
 1035|  22.5k|            processor.SetFPSRValue(new_value);
 1036|  22.5k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1040|  45.7k|        {
 1041|  45.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1042|  45.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1043|  45.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1044|       |
 1045|  45.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1046|  45.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1047|       |
 1048|  45.7k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1048:41): [True: 45.7k, False: 0]
  ------------------
 1049|       |
 1050|  45.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1051|  45.7k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1069|  24.8k|        {
 1070|  24.8k|            const auto& dest_reg = arg1.AsRegisterInt();
 1071|  24.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1072|  24.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1073|       |
 1074|  24.8k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1075|  24.8k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1076|       |
 1077|  24.8k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1077:41): [True: 24.8k, False: 0]
  ------------------
 1078|       |
 1079|  24.8k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1080|  24.8k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1098|  29.4k|        {
 1099|  29.4k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1100|  29.4k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1101|       |
 1102|  29.4k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1103|  29.4k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1104|       |
 1105|  29.4k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1106|       |
 1107|  29.4k|            processor.SetFPSRValue(new_value);
 1108|  29.4k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1112|  46.4k|        {
 1113|  46.4k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1114|  46.4k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1115|       |
 1116|  46.4k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1117|  46.4k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1118|       |
 1119|  46.4k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1120|       |
 1121|  46.4k|            processor.SetFPSRValue(new_value);
 1122|  46.4k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1126|  25.0k|        {
 1127|  25.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1128|  25.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1129|  25.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1130|       |
 1131|  25.0k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1132|  25.0k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1133|       |
 1134|  25.0k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1134:41): [True: 23.0k, False: 2.00k]
  ------------------
 1135|       |
 1136|  25.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1137|  25.0k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1155|  24.5k|        {
 1156|  24.5k|            const auto& dest_reg = arg1.AsRegisterInt();
 1157|  24.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1158|  24.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1159|       |
 1160|  24.5k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1161|  24.5k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1162|       |
 1163|  24.5k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1163:41): [True: 24.5k, False: 0]
  ------------------
 1164|       |
 1165|  24.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1166|  24.5k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1184|  23.0k|        {
 1185|  23.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1186|  23.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1187|       |
 1188|  23.0k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1189|  23.0k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1190|       |
 1191|  23.0k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1192|       |
 1193|  23.0k|            processor.SetFPSRValue(new_value);
 1194|  23.0k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1198|  22.5k|        {
 1199|  22.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1200|  22.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1201|       |
 1202|  22.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1203|  22.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1204|       |
 1205|  22.5k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1206|       |
 1207|  22.5k|            processor.SetFPSRValue(new_value);
 1208|  22.5k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1212|  85.0k|        {
 1213|  85.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1214|  85.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1215|  85.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1216|       |
 1217|  85.0k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1218|  85.0k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1219|       |
 1220|  85.0k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1220:41): [True: 85.0k, False: 0]
  ------------------
 1221|       |
 1222|  85.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1223|  85.0k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1241|      1|        {
 1242|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1243|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1244|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1245|       |
 1246|      1|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1247|      1|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1248|       |
 1249|      1|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1249:41): [True: 1, False: 0]
  ------------------
 1250|       |
 1251|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1252|      1|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1270|  59.2k|        {
 1271|  59.2k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1272|  59.2k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1273|       |
 1274|  59.2k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1275|  59.2k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1276|       |
 1277|  59.2k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1278|       |
 1279|  59.2k|            processor.SetFPSRValue(new_value);
 1280|  59.2k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1284|  25.8k|        {
 1285|  25.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1286|  25.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1287|       |
 1288|  25.8k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1289|  25.8k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1290|       |
 1291|  25.8k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1292|       |
 1293|  25.8k|            processor.SetFPSRValue(new_value);
 1294|  25.8k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1298|  39.2k|        {
 1299|  39.2k|            const auto& dest_reg = arg1.AsRegisterInt();
 1300|  39.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1301|  39.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1302|       |
 1303|  39.2k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1304|  39.2k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1305|       |
 1306|  39.2k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1306:41): [True: 0, False: 39.2k]
  ------------------
 1307|       |
 1308|  39.2k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1309|  39.2k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1327|  76.0k|        {
 1328|  76.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1329|  76.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1330|  76.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1331|       |
 1332|  76.0k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1333|  76.0k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1334|       |
 1335|  76.0k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1335:41): [True: 0, False: 76.0k]
  ------------------
 1336|       |
 1337|  76.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1338|  76.0k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1356|  30.7k|        {
 1357|  30.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1358|  30.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1359|       |
 1360|  30.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1361|  30.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1362|       |
 1363|  30.7k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1364|       |
 1365|  30.7k|            processor.SetFPSRValue(new_value);
 1366|  30.7k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1370|  30.0k|        {
 1371|  30.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1372|  30.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1373|       |
 1374|  30.0k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1375|  30.0k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1376|       |
 1377|  30.0k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1378|       |
 1379|  30.0k|            processor.SetFPSRValue(new_value);
 1380|  30.0k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1384|   209k|        {
 1385|   209k|            const auto& test_reg   = arg1.AsRegisterInt();
 1386|   209k|            const auto& jump_label = arg2.AsLabel();
 1387|       |
 1388|   209k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1389|       |
 1390|   209k|            if (test_value == 0)
  ------------------
  |  Branch (1390:17): [True: 209k, False: 0]
  ------------------
 1391|   209k|            {
 1392|   209k|                JumpToLabel(processor, jump_label.label_name);
 1393|   209k|            }
 1394|   209k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1398|  14.6k|        {
 1399|  14.6k|            const auto& test_reg   = arg1.AsRegisterInt();
 1400|  14.6k|            const auto& jump_label = arg2.AsLabel();
 1401|       |
 1402|  14.6k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1403|       |
 1404|  14.6k|            if (test_value != 0)
  ------------------
  |  Branch (1404:17): [True: 0, False: 14.6k]
  ------------------
 1405|      0|            {
 1406|      0|                JumpToLabel(processor, jump_label.label_name);
 1407|      0|            }
 1408|  14.6k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1412|  9.70k|        {
 1413|  9.70k|            const auto& jump_label = arg1.AsLabel();
 1414|       |
 1415|  9.70k|            phi::boolean test_value = processor.GetFPSRValue();
 1416|       |
 1417|  9.70k|            if (test_value)
  ------------------
  |  Branch (1417:17): [True: 1, False: 9.70k]
  ------------------
 1418|      1|            {
 1419|      1|                JumpToLabel(processor, jump_label.label_name);
 1420|      1|            }
 1421|  9.70k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1425|   389k|        {
 1426|   389k|            const auto& jump_label = arg1.AsLabel();
 1427|       |
 1428|   389k|            phi::boolean test_value = processor.GetFPSRValue();
 1429|       |
 1430|   389k|            if (!test_value)
  ------------------
  |  Branch (1430:17): [True: 365k, False: 23.7k]
  ------------------
 1431|   365k|            {
 1432|   365k|                JumpToLabel(processor, jump_label.label_name);
 1433|   365k|            }
 1434|   389k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1438|   166k|        {
 1439|   166k|            const auto& jump_label = arg1.AsLabel();
 1440|       |
 1441|   166k|            JumpToLabel(processor, jump_label.label_name);
 1442|   166k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1446|  1.02M|        {
 1447|  1.02M|            const auto& jump_register = arg1.AsRegisterInt();
 1448|       |
 1449|  1.02M|            JumpToRegister(processor, jump_register.register_id);
 1450|  1.02M|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1454|   124k|        {
 1455|   124k|            const auto& jump_label = arg1.AsLabel();
 1456|       |
 1457|   124k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1458|   124k|                                                  processor.GetNextProgramCounter());
 1459|       |
 1460|   124k|            JumpToLabel(processor, jump_label.label_name);
 1461|   124k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1465|  84.5k|        {
 1466|  84.5k|            const auto& jump_register = arg1.AsRegisterInt();
 1467|       |
 1468|  84.5k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1469|  84.5k|                                                  processor.GetNextProgramCounter());
 1470|       |
 1471|  84.5k|            JumpToRegister(processor, jump_register.register_id);
 1472|  84.5k|        }
_ZN3dlx4impl2SBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1719|      4|        {
 1720|      4|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1721|       |
 1722|      4|            if (!optional_address.has_value())
  ------------------
  |  Branch (1722:17): [True: 1, False: 3]
  ------------------
 1723|      1|            {
 1724|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1725|      1|                return;
 1726|      1|            }
 1727|       |
 1728|      3|            phi::i32 address = optional_address.value();
 1729|       |
 1730|      3|            const auto& src_reg = arg2.AsRegisterInt();
 1731|       |
 1732|      3|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1733|       |
 1734|      3|            phi::boolean success =
 1735|      3|                    processor.GetMemory().StoreByte(static_cast<std::size_t>(address.unsafe()),
 1736|      3|                                                    static_cast<std::int8_t>(value.unsafe()));
 1737|       |
 1738|      3|            if (!success)
  ------------------
  |  Branch (1738:17): [True: 2, False: 1]
  ------------------
 1739|      2|            {
 1740|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1741|      2|                DLX_ERROR("Failed to store byte at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1742|      2|            }
 1743|      3|        }
_ZN3dlx4impl2SFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1885|  37.2k|        {
 1886|  37.2k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1887|       |
 1888|  37.2k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1888:17): [True: 1, False: 37.2k]
  ------------------
 1889|      1|            {
 1890|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1891|      1|                return;
 1892|      1|            }
 1893|       |
 1894|  37.2k|            phi::i32 address = optional_address.value();
 1895|       |
 1896|  37.2k|            const auto& src_reg = arg2.AsRegisterFloat();
 1897|       |
 1898|  37.2k|            phi::f32 value = processor.FloatRegisterGetFloatValue(src_reg.register_id);
 1899|       |
 1900|  37.2k|            phi::boolean success = processor.GetMemory().StoreFloat(
 1901|  37.2k|                    static_cast<std::size_t>(address.unsafe()), value);
 1902|       |
 1903|  37.2k|            if (!success)
  ------------------
  |  Branch (1903:17): [True: 4, False: 37.2k]
  ------------------
 1904|      4|            {
 1905|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1906|      4|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1907|      4|            }
 1908|  37.2k|        }
_ZN3dlx4impl2SDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1912|      4|        {
 1913|      4|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1914|       |
 1915|      4|            if (!optional_address.has_value())
  ------------------
  |  Branch (1915:17): [True: 1, False: 3]
  ------------------
 1916|      1|            {
 1917|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1918|      1|                return;
 1919|      1|            }
 1920|       |
 1921|      3|            phi::i32 address = optional_address.value();
 1922|       |
 1923|      3|            const auto& src_reg = arg2.AsRegisterFloat();
 1924|       |
 1925|      3|            phi::f64 value = processor.FloatRegisterGetDoubleValue(src_reg.register_id);
 1926|       |
 1927|      3|            phi::boolean success = processor.GetMemory().StoreDouble(
 1928|      3|                    static_cast<std::size_t>(address.unsafe()), value);
 1929|       |
 1930|      3|            if (!success)
  ------------------
  |  Branch (1930:17): [True: 2, False: 1]
  ------------------
 1931|      2|            {
 1932|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1933|      2|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1934|      2|            }
 1935|      3|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1939|  17.8k|        {
 1940|  17.8k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1941|  17.8k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1942|       |
 1943|  17.8k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1944|       |
 1945|  17.8k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1946|  17.8k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1950|  6.67k|        {
 1951|  6.67k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1952|  6.67k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1953|       |
 1954|  6.67k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1955|       |
 1956|  6.67k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1957|  6.67k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1988|  35.1k|        {
 1989|  35.1k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1990|  35.1k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1991|       |
 1992|  35.1k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1993|       |
 1994|  35.1k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 1995|  35.1k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1999|  24.2k|        {
 2000|  24.2k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2001|  24.2k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2002|       |
 2003|  24.2k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2004|  24.2k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2005|  24.2k|            const float        converted_value_float =
 2006|  24.2k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2007|       |
 2008|  24.2k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2009|  24.2k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2013|  27.5k|        {
 2014|  27.5k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2015|  27.5k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2016|       |
 2017|  27.5k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2018|  27.5k|            const float  converted_value = static_cast<float>(src_value);
 2019|       |
 2020|  27.5k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2021|  27.5k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2025|  17.4k|        {
 2026|  17.4k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2027|  17.4k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2028|       |
 2029|  17.4k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2030|  17.4k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2031|  17.4k|            const float        converted_value_float =
 2032|  17.4k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2033|       |
 2034|  17.4k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2035|  17.4k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2039|  32.5k|        {
 2040|  32.5k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2041|  32.5k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2042|       |
 2043|  32.5k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2044|  32.5k|            const std::int32_t converted_value_int =
 2045|  32.5k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2046|  32.5k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2047|       |
 2048|  32.5k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2049|  32.5k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2053|  22.5k|        {
 2054|  22.5k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2055|  22.5k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2056|       |
 2057|  22.5k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2058|  22.5k|            const std::int32_t converted_value_int =
 2059|  22.5k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2060|  22.5k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2061|       |
 2062|  22.5k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2063|  22.5k|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2073|      2|        {
 2074|      2|            processor.Raise(Exception::Halt);
 2075|      2|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2079|  1.64M|        {
 2080|       |            /* Do nothing */
 2081|  1.64M|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  169|  10.2k|    {
  170|  10.2k|        phi::i64 res = phi::i64(lhs) + rhs;
  171|       |
  172|  10.2k|        SafeWriteInteger(processor, dest_reg, res);
  173|  10.2k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  124|  61.7k|    {
  125|  61.7k|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  126|  61.7k|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  127|       |
  128|       |        // Check for underflow
  129|  61.7k|        if (value < min)
  ------------------
  |  Branch (129:13): [True: 0, False: 61.7k]
  ------------------
  130|      0|        {
  131|      0|            processor.Raise(Exception::Underflow);
  132|       |
  133|      0|            value = max + (value % (min - 1));
  134|      0|        }
  135|       |        // Check for overflow
  136|  61.7k|        else if (value > max)
  ------------------
  |  Branch (136:18): [True: 0, False: 61.7k]
  ------------------
  137|      0|        {
  138|      0|            processor.Raise(Exception::Overflow);
  139|       |
  140|      0|            value = min + (value % (max + 1));
  141|      0|        }
  142|       |
  143|  61.7k|        PHI_ASSERT(value >= min);
  144|  61.7k|        PHI_ASSERT(value <= max);
  145|       |
  146|  61.7k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  147|  61.7k|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  177|      1|    {
  178|      1|        phi::u64 res = phi::u64(lhs) + rhs;
  179|       |
  180|      1|        SafeWriteInteger(processor, dest_reg, res);
  181|      1|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  151|  50.0k|    {
  152|  50.0k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  153|       |
  154|       |        // Check for overflow
  155|  50.0k|        if (value > max)
  ------------------
  |  Branch (155:13): [True: 0, False: 50.0k]
  ------------------
  156|      0|        {
  157|      0|            processor.Raise(Exception::Overflow);
  158|       |
  159|      0|            value %= max + 1u;
  160|      0|        }
  161|       |
  162|  50.0k|        PHI_ASSERT(value <= max);
  163|       |
  164|  50.0k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  165|  50.0k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  185|  47.5k|    {
  186|  47.5k|        phi::i64 res = phi::i64(lhs) - rhs;
  187|       |
  188|  47.5k|        SafeWriteInteger(processor, dest_reg, res);
  189|  47.5k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  193|  50.0k|    {
  194|  50.0k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  195|       |
  196|  50.0k|        if (lhs < rhs)
  ------------------
  |  Branch (196:13): [True: 0, False: 50.0k]
  ------------------
  197|      0|        {
  198|      0|            processor.Raise(Exception::Underflow);
  199|       |
  200|      0|            phi::u64 res = max - rhs + lhs + 1u;
  201|      0|            SafeWriteInteger(processor, dest_reg, res);
  202|      0|            return;
  203|      0|        }
  204|       |
  205|  50.0k|        phi::u64 res = phi::u64(lhs) - rhs;
  206|       |
  207|  50.0k|        SafeWriteInteger(processor, dest_reg, res);
  208|  50.0k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  212|  4.01k|    {
  213|  4.01k|        phi::i64 res = phi::i64(lhs) * rhs;
  214|       |
  215|  4.01k|        SafeWriteInteger(processor, dest_reg, res);
  216|  4.01k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  220|      1|    {
  221|      1|        phi::u64 res = phi::u64(lhs) * rhs;
  222|       |
  223|      1|        SafeWriteInteger(processor, dest_reg, res);
  224|      1|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  228|      1|    {
  229|      1|        if (rhs == 0)
  ------------------
  |  Branch (229:13): [True: 1, False: 0]
  ------------------
  230|      1|        {
  231|      1|            processor.Raise(Exception::DivideByZero);
  232|      1|            return;
  233|      1|        }
  234|       |
  235|      0|        phi::i64 res = phi::i64(lhs) / rhs;
  236|       |
  237|      0|        SafeWriteInteger(processor, dest_reg, res);
  238|      0|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  242|      1|    {
  243|      1|        if (rhs == 0u)
  ------------------
  |  Branch (243:13): [True: 1, False: 0]
  ------------------
  244|      1|        {
  245|      1|            processor.Raise(Exception::DivideByZero);
  246|      1|            return;
  247|      1|        }
  248|       |
  249|      0|        phi::u64 res = phi::u64(lhs) / rhs;
  250|       |
  251|      0|        SafeWriteInteger(processor, dest_reg, res);
  252|      0|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  325|  79.3k|    {
  326|  79.3k|        if (shift > 31)
  ------------------
  |  Branch (326:13): [True: 0, False: 79.3k]
  ------------------
  327|      0|        {
  328|      0|            processor.Raise(Exception::BadShift);
  329|       |
  330|       |            // Just set register to 0
  331|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  332|      0|            return;
  333|      0|        }
  334|       |
  335|       |        // Negative shifts are undefined behavior
  336|  79.3k|        if (shift < 0)
  ------------------
  |  Branch (336:13): [True: 0, False: 79.3k]
  ------------------
  337|      0|        {
  338|      0|            processor.Raise(Exception::BadShift);
  339|      0|            return;
  340|      0|        }
  341|       |
  342|  79.3k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  343|       |
  344|  79.3k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  345|  79.3k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  256|  19.7k|    {
  257|       |        // Prevent undefined behavior by shifting by more than 31
  258|  19.7k|        if (shift > 31)
  ------------------
  |  Branch (258:13): [True: 0, False: 19.7k]
  ------------------
  259|      0|        {
  260|      0|            processor.Raise(Exception::BadShift);
  261|       |
  262|       |            // Just set register to 0
  263|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  264|      0|            return;
  265|      0|        }
  266|       |
  267|       |        // Do nothing when shifting by zero to prevent undefined behavior
  268|  19.7k|        if (shift == 0)
  ------------------
  |  Branch (268:13): [True: 19.7k, False: 0]
  ------------------
  269|  19.7k|        {
  270|  19.7k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  271|  19.7k|            return;
  272|  19.7k|        }
  273|       |
  274|       |        // Negative shifts are undefiend behavior
  275|      0|        if (shift < 0)
  ------------------
  |  Branch (275:13): [True: 0, False: 0]
  ------------------
  276|      0|        {
  277|      0|            processor.Raise(Exception::BadShift);
  278|      0|            return;
  279|      0|        }
  280|       |
  281|      0|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  282|       |
  283|      0|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  284|       |
  285|      0|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  286|      0|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  290|  39.8k|    {
  291|       |        // Prevent undefined behavior by shifting by more than 31
  292|  39.8k|        if (shift > 31)
  ------------------
  |  Branch (292:13): [True: 0, False: 39.8k]
  ------------------
  293|      0|        {
  294|      0|            processor.Raise(Exception::BadShift);
  295|       |
  296|       |            // Is negative ie. sign bit is set
  297|      0|            if (base < 0)
  ------------------
  |  Branch (297:17): [True: 0, False: 0]
  ------------------
  298|      0|            {
  299|       |                // Set every byte to 1
  300|      0|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  301|      0|            }
  302|      0|            else
  303|      0|            {
  304|       |                // Set every byte to 0
  305|      0|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  306|      0|            }
  307|      0|            return;
  308|      0|        }
  309|       |
  310|       |        // Negative shifts are undefined behavior
  311|  39.8k|        if (shift < 0)
  ------------------
  |  Branch (311:13): [True: 0, False: 39.8k]
  ------------------
  312|      0|        {
  313|      0|            processor.Raise(Exception::BadShift);
  314|      0|            return;
  315|      0|        }
  316|       |
  317|  39.8k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  318|       |
  319|  39.8k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  320|  39.8k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|   865k|    {
   39|       |        // Lookup the label
   40|   865k|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|   865k|        PHI_ASSERT(program != nullptr);
   42|   865k|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|   865k|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 115, False: 865k]
  ------------------
   45|    115|        {
   46|    115|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|    115|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|    115|            processor.Raise(Exception::UnknownLabel);
   48|    115|            return;
   49|    115|        }
   50|       |
   51|   865k|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|   865k|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|   865k|        processor.SetNextProgramCounter(jump_point);
   56|   865k|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|  1.11M|    {
   60|  1.11M|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|  1.11M|        phi::u32 max_address =
   63|  1.11M|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|  1.11M|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 1, False: 1.11M]
  ------------------
   65|      1|        {
   66|      1|            processor.Raise(Exception::AddressOutOfBounds);
   67|      1|            return;
   68|      1|        }
   69|       |
   70|  1.11M|        processor.SetNextProgramCounter(address.unsafe());
   71|  1.11M|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
  100|  37.3k|    {
  101|  37.3k|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (101:13): [True: 37.3k, False: 1]
  ------------------
  102|  37.3k|        {
  103|  37.3k|            const auto& imm_value = argument.AsImmediateValue();
  104|       |
  105|  37.3k|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (105:17): [True: 3, False: 37.3k]
  ------------------
  106|      3|            {
  107|      3|                return {};
  108|      3|            }
  109|       |
  110|  37.3k|            return imm_value.signed_value;
  111|  37.3k|        }
  112|       |
  113|      1|        PHI_ASSERT(argument.GetType() == ArgumentType::AddressDisplacement);
  114|       |
  115|      1|        const auto& adr_displacement = argument.AsAddressDisplacement();
  116|      1|        return CalculateDisplacementAddress(processor, adr_displacement);
  117|  37.3k|    }
InstructionImplementation.cpp:_ZN3dlxL28CalculateDisplacementAddressERNS_9ProcessorERKNS_19InstructionArgument19AddressDisplacementE:
   78|      1|    {
   79|      1|        phi::i32 register_value = processor.IntRegisterGetSignedValue(adr_displacement.register_id);
   80|       |
   81|      1|        phi::i32 address = adr_displacement.displacement + register_value;
   82|       |
   83|      1|        if (address < 0)
  ------------------
  |  Branch (83:13): [True: 0, False: 1]
  ------------------
   84|      0|        {
   85|      0|            processor.Raise(Exception::AddressOutOfBounds);
   86|      0|            return {};
   87|      0|        }
   88|       |
   89|      1|        return address;
   90|      1|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  5.56M|    {
   12|  5.56M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  5.56M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  5.56M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  5.56M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  5.56M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  5.56M|                   "Unexpected argument type for arg1");
   22|  5.56M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  5.56M|                   "Unexpected argument type for arg2");
   24|  5.56M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  5.56M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  5.56M|        m_Executor(processor, arg1, arg2, arg3);
   29|  5.56M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   237k|    {
  453|   237k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   237k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|  1.18M|    {
   17|  1.18M|        m_ValueSigned = val;
   18|  1.18M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|   208k|    {
   22|   208k|        m_ValueUnsigned = val;
   23|   208k|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|  2.14M|    {
   27|  2.14M|        return m_ValueSigned;
   28|  2.14M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  1.50M|    {
   32|  1.50M|        return m_ValueUnsigned;
   33|  1.50M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  1.36M|    {
   37|  1.36M|        return m_IsReadOnly;
   38|  1.36M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   14|      1|    {
   15|      1|        m_Values.resize(starting_size.unsafe());
   16|      1|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  135|      3|    {
  136|      3|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (136:13): [True: 2, False: 1]
  ------------------
  137|      2|        {
  138|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  139|      2|            return false;
  140|      2|        }
  141|       |
  142|      1|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  143|      1|        return true;
  144|      3|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  215|  37.2k|    {
  216|  37.2k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (216:13): [True: 4, False: 37.2k]
  ------------------
  217|      4|        {
  218|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  219|      4|            return false;
  220|      4|        }
  221|       |
  222|  37.2k|        std::size_t index = (address - m_StartingAddress).unsafe();
  223|  37.2k|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  224|       |
  225|  37.2k|        return true;
  226|  37.2k|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  229|      3|    {
  230|      3|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (230:13): [True: 2, False: 1]
  ------------------
  231|      2|        {
  232|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  233|      2|            return false;
  234|      2|        }
  235|       |
  236|      1|        std::size_t index = (address - m_StartingAddress).unsafe();
  237|      1|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  238|       |
  239|      1|        return true;
  240|      3|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  243|  37.3k|    {
  244|  37.3k|        return address >= m_StartingAddress &&
  ------------------
  |  Branch (244:16): [True: 37.2k, False: 5]
  ------------------
  245|  37.3k|               (address + size) <= (m_StartingAddress + m_Values.size());
  ------------------
  |  Branch (245:16): [True: 37.2k, False: 3]
  ------------------
  246|  37.3k|    }
_ZN3dlx11MemoryBlock5ClearEv:
  255|  18.1k|    {
  256|  18.1k|        for (auto& val : m_Values)
  ------------------
  |  Branch (256:24): [True: 18.1M, False: 18.1k]
  ------------------
  257|  18.1M|        {
  258|  18.1M|            val.signed_value = 0;
  259|  18.1M|        }
  260|  18.1k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|  3.38M|    {
   24|  3.38M|        switch (token.length())
   25|  3.38M|        {
   26|       |            // 1 character OpCodes
   27|   537k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 537k, False: 2.84M]
  ------------------
   28|   537k|                char c1 = token[0];
   29|   537k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 99.9k, False: 437k]
  ------------------
   30|  99.9k|                {
   31|  99.9k|                    return OpCode::J;
   32|  99.9k|                }
   33|   437k|                break;
   34|   537k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|   543k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 543k, False: 2.84M]
  ------------------
   38|   543k|                char c1 = token[0];
   39|   543k|                char c2 = token[1];
   40|       |
   41|   543k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 374k, False: 169k]
  ------------------
   42|   543k|                {
   43|  18.7k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 18.7k, False: 524k]
  ------------------
   44|  31.0k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 12.2k, False: 530k]
  ------------------
   45|  31.0k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 8.32k, False: 22.6k]
  ------------------
   46|  8.32k|                        {
   47|  8.32k|                            return OpCode::JR;
   48|  8.32k|                        }
   49|  22.6k|                        break;
   50|       |
   51|  25.5k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 25.5k, False: 517k]
  ------------------
   52|  48.0k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 22.5k, False: 520k]
  ------------------
   53|  48.0k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 15.0k, False: 33.0k]
  ------------------
   54|  48.0k|                        {
   55|  4.79k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 4.79k, False: 43.2k]
  ------------------
   56|  6.27k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 1.48k, False: 46.6k]
  ------------------
   57|  6.27k|                                return OpCode::LB;
   58|  1.40k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 1.40k, False: 46.6k]
  ------------------
   59|  2.79k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 1.39k, False: 46.6k]
  ------------------
   60|  2.79k|                                return OpCode::LD;
   61|  3.38k|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 3.38k, False: 44.7k]
  ------------------
   62|  4.24k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 866, False: 47.2k]
  ------------------
   63|  4.24k|                                return OpCode::LF;
   64|  2.22k|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 2.22k, False: 45.8k]
  ------------------
   65|  5.67k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 3.45k, False: 44.6k]
  ------------------
   66|  5.67k|                                return OpCode::LH;
   67|  11.5k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 11.5k, False: 36.5k]
  ------------------
   68|  14.0k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 2.49k, False: 45.5k]
  ------------------
   69|  14.0k|                                return OpCode::LW;
   70|  48.0k|                        }
   71|  15.0k|                        break;
   72|  15.0k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 4.30k, False: 538k]
  ------------------
   73|  23.8k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 19.5k, False: 523k]
  ------------------
   74|  23.8k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 8.29k, False: 15.5k]
  ------------------
   75|  8.29k|                        {
   76|  8.29k|                            return OpCode::OR;
   77|  8.29k|                        }
   78|  15.5k|                        break;
   79|  44.6k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 44.6k, False: 498k]
  ------------------
   80|  66.1k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 21.4k, False: 521k]
  ------------------
   81|  66.1k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 21.3k, False: 44.7k]
  ------------------
   82|  66.1k|                        {
   83|  6.75k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 6.75k, False: 59.3k]
  ------------------
   84|  12.3k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 5.61k, False: 60.4k]
  ------------------
   85|  12.3k|                                return OpCode::SB;
   86|  1.50k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 1.50k, False: 64.6k]
  ------------------
   87|  6.14k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 4.63k, False: 61.4k]
  ------------------
   88|  6.14k|                                return OpCode::SD;
   89|  2.71k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 2.71k, False: 63.3k]
  ------------------
   90|  16.2k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 13.5k, False: 52.5k]
  ------------------
   91|  16.2k|                                return OpCode::SF;
   92|  2.65k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 2.65k, False: 63.4k]
  ------------------
   93|  5.55k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 2.90k, False: 63.2k]
  ------------------
   94|  5.55k|                                return OpCode::SH;
   95|  2.76k|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 2.76k, False: 63.3k]
  ------------------
   96|  4.40k|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 1.64k, False: 64.4k]
  ------------------
   97|  4.40k|                                return OpCode::SW;
   98|  66.1k|                        }
   99|  21.3k|                        break;
  100|   543k|                }
  101|   448k|                break;
  102|   543k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   744k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 744k, False: 2.64M]
  ------------------
  106|   744k|                char c1 = token[0];
  107|   744k|                char c2 = token[1];
  108|   744k|                char c3 = token[2];
  109|       |
  110|   744k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 299k, False: 444k]
  ------------------
  111|   744k|                {
  112|  8.20k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 8.20k, False: 736k]
  ------------------
  113|  28.2k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 20.0k, False: 724k]
  ------------------
  114|  28.2k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 13.6k, False: 14.6k]
  |  Branch (114:29): [True: 8.83k, False: 19.4k]
  |  Branch (114:45): [True: 8.83k, False: 4.77k]
  ------------------
  115|  8.83k|                        {
  116|  8.83k|                            return OpCode::ADD;
  117|  8.83k|                        }
  118|  19.4k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 9.66k, False: 9.78k]
  |  Branch (118:34): [True: 5.46k, False: 13.9k]
  |  Branch (118:50): [True: 5.46k, False: 4.20k]
  ------------------
  119|  5.46k|                        {
  120|  5.46k|                            return OpCode::AND;
  121|  5.46k|                        }
  122|  13.9k|                        break;
  123|       |
  124|  13.9k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 12.3k, False: 731k]
  ------------------
  125|  20.0k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 7.66k, False: 736k]
  ------------------
  126|  20.0k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 10.3k, False: 9.62k]
  |  Branch (126:29): [True: 2.80k, False: 17.2k]
  |  Branch (126:45): [True: 2.80k, False: 7.59k]
  ------------------
  127|  2.80k|                        {
  128|  2.80k|                            return OpCode::DIV;
  129|  2.80k|                        }
  130|  17.2k|                        break;
  131|       |
  132|  17.2k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 3.29k, False: 740k]
  ------------------
  133|  14.3k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 11.0k, False: 733k]
  ------------------
  134|  14.3k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 10.8k, False: 3.47k]
  ------------------
  135|  10.8k|                        {
  136|  10.8k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 4.98k, False: 5.86k]
  ------------------
  137|  4.98k|                            {
  138|  4.98k|                                return OpCode::EQD;
  139|  4.98k|                            }
  140|  5.86k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 3.51k, False: 2.35k]
  ------------------
  141|  3.51k|                            {
  142|  3.51k|                                return OpCode::EQF;
  143|  3.51k|                            }
  144|  10.8k|                        }
  145|  5.82k|                        break;
  146|       |
  147|  9.98k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 9.98k, False: 734k]
  ------------------
  148|  27.8k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 17.8k, False: 726k]
  ------------------
  149|  27.8k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 14.4k, False: 13.4k]
  ------------------
  150|  14.4k|                        {
  151|  14.4k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 5.76k, False: 8.65k]
  ------------------
  152|  5.76k|                            {
  153|  5.76k|                                return OpCode::GED;
  154|  5.76k|                            }
  155|  8.65k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 6.95k, False: 1.69k]
  ------------------
  156|  6.95k|                            {
  157|  6.95k|                                return OpCode::GEF;
  158|  6.95k|                            }
  159|  14.4k|                        }
  160|  13.4k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 10.2k, False: 3.17k]
  ------------------
  161|  10.2k|                        {
  162|  10.2k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 4.59k, False: 5.69k]
  ------------------
  163|  4.59k|                            {
  164|  4.59k|                                return OpCode::GTD;
  165|  4.59k|                            }
  166|  5.69k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 4.02k, False: 1.67k]
  ------------------
  167|  4.02k|                            {
  168|  4.02k|                                return OpCode::GTF;
  169|  4.02k|                            }
  170|  5.69k|                        }
  171|  6.54k|                        break;
  172|       |
  173|  17.2k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 17.2k, False: 727k]
  ------------------
  174|  21.7k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 4.55k, False: 739k]
  ------------------
  175|  21.7k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 11.7k, False: 10.0k]
  |  Branch (175:29): [True: 6.88k, False: 14.8k]
  |  Branch (175:45): [True: 6.88k, False: 4.82k]
  ------------------
  176|  6.88k|                        {
  177|  6.88k|                            return OpCode::JAL;
  178|  6.88k|                        }
  179|  14.8k|                        break;
  180|       |
  181|  66.4k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 66.4k, False: 677k]
  ------------------
  182|   108k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 42.2k, False: 702k]
  ------------------
  183|   108k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 12.4k, False: 96.2k]
  ------------------
  184|   108k|                        {
  185|  9.64k|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 9.64k, False: 99.0k]
  ------------------
  186|  13.8k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 4.23k, False: 104k]
  ------------------
  187|  13.8k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 4.99k, False: 8.89k]
  ------------------
  188|  4.99k|                                {
  189|  4.99k|                                    return OpCode::LBU;
  190|  4.99k|                                }
  191|  8.89k|                                break;
  192|       |
  193|  8.89k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 8.63k, False: 100k]
  ------------------
  194|  17.9k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 9.28k, False: 99.3k]
  ------------------
  195|  17.9k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 5.15k, False: 12.7k]
  ------------------
  196|  5.15k|                                {
  197|  5.15k|                                    return OpCode::LED;
  198|  5.15k|                                }
  199|  12.7k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 7.56k, False: 5.20k]
  ------------------
  200|  7.56k|                                {
  201|  7.56k|                                    return OpCode::LEF;
  202|  7.56k|                                }
  203|  5.20k|                                break;
  204|       |
  205|  9.52k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 9.52k, False: 99.1k]
  ------------------
  206|  23.5k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 14.0k, False: 94.6k]
  ------------------
  207|  23.5k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 9.77k, False: 13.8k]
  ------------------
  208|  9.77k|                                {
  209|  9.77k|                                    return OpCode::LHI;
  210|  9.77k|                                }
  211|  13.8k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 7.72k, False: 6.09k]
  ------------------
  212|  7.72k|                                {
  213|  7.72k|                                    return OpCode::LHU;
  214|  7.72k|                                }
  215|  6.09k|                                break;
  216|       |
  217|  15.8k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 15.8k, False: 92.8k]
  ------------------
  218|  23.2k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 7.38k, False: 101k]
  ------------------
  219|  23.2k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 13.8k, False: 9.37k]
  ------------------
  220|  13.8k|                                {
  221|  13.8k|                                    return OpCode::LTD;
  222|  13.8k|                                }
  223|  9.37k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 5.85k, False: 3.51k]
  ------------------
  224|  5.85k|                                {
  225|  5.85k|                                    return OpCode::LTF;
  226|  5.85k|                                }
  227|  3.51k|                                break;
  228|       |
  229|  7.78k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 7.78k, False: 100k]
  ------------------
  230|  17.6k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 9.85k, False: 98.8k]
  ------------------
  231|  17.6k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 9.51k, False: 8.12k]
  ------------------
  232|  9.51k|                                {
  233|  9.51k|                                    return OpCode::LWU;
  234|  9.51k|                                }
  235|  8.12k|                                break;
  236|   108k|                        }
  237|  44.2k|                        break;
  238|       |
  239|  44.2k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 24.0k, False: 720k]
  ------------------
  240|  29.2k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 5.22k, False: 739k]
  ------------------
  241|  29.2k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 16.1k, False: 13.1k]
  ------------------
  242|  16.1k|                        {
  243|  16.1k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 7.04k, False: 9.12k]
  ------------------
  244|  7.04k|                            {
  245|  7.04k|                                return OpCode::NED;
  246|  7.04k|                            }
  247|  9.12k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 5.01k, False: 4.10k]
  ------------------
  248|  5.01k|                            {
  249|  5.01k|                                return OpCode::NEF;
  250|  5.01k|                            }
  251|  16.1k|                        }
  252|  13.1k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 9.10k, False: 4.01k]
  |  Branch (252:34): [True: 6.51k, False: 6.60k]
  |  Branch (252:50): [True: 6.51k, False: 2.58k]
  ------------------
  253|  6.51k|                        {
  254|  6.51k|                            return OpCode::NOP;
  255|  6.51k|                        }
  256|       |
  257|  10.7k|                        break;
  258|       |
  259|  10.7k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 7.24k, False: 737k]
  ------------------
  260|  24.0k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 16.7k, False: 727k]
  ------------------
  261|  24.0k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 13.2k, False: 10.7k]
  |  Branch (261:29): [True: 3.98k, False: 20.0k]
  |  Branch (261:45): [True: 3.98k, False: 9.28k]
  ------------------
  262|  3.98k|                        {
  263|  3.98k|                            return OpCode::ORI;
  264|  3.98k|                        }
  265|  20.0k|                        break;
  266|       |
  267|  57.9k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 57.9k, False: 686k]
  ------------------
  268|   156k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 98.6k, False: 645k]
  ------------------
  269|   156k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 11.5k, False: 145k]
  ------------------
  270|   156k|                        {
  271|  12.1k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 12.1k, False: 144k]
  ------------------
  272|  23.0k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 10.8k, False: 145k]
  ------------------
  273|  23.0k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 14.4k, False: 8.59k]
  ------------------
  274|  14.4k|                                {
  275|  14.4k|                                    return OpCode::SBU;
  276|  14.4k|                                }
  277|  8.59k|                                break;
  278|       |
  279|  8.88k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 8.88k, False: 147k]
  ------------------
  280|  12.0k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 3.16k, False: 153k]
  ------------------
  281|  12.0k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 7.21k, False: 4.83k]
  ------------------
  282|  7.21k|                                {
  283|  7.21k|                                    return OpCode::SEQ;
  284|  7.21k|                                }
  285|  4.83k|                                break;
  286|       |
  287|  4.83k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 3.54k, False: 153k]
  ------------------
  288|  14.5k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 10.9k, False: 145k]
  ------------------
  289|  14.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 4.42k, False: 10.0k]
  ------------------
  290|  4.42k|                                {
  291|  4.42k|                                    return OpCode::SGE;
  292|  4.42k|                                }
  293|  10.0k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 6.70k, False: 3.38k]
  ------------------
  294|  6.70k|                                {
  295|  6.70k|                                    return OpCode::SGT;
  296|  6.70k|                                }
  297|  3.38k|                                break;
  298|       |
  299|  5.94k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 5.94k, False: 150k]
  ------------------
  300|  8.07k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 2.13k, False: 154k]
  ------------------
  301|  8.07k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 4.23k, False: 3.84k]
  ------------------
  302|  4.23k|                                {
  303|  4.23k|                                    return OpCode::SHU;
  304|  4.23k|                                }
  305|  3.84k|                                break;
  306|       |
  307|  19.3k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 19.3k, False: 137k]
  ------------------
  308|  28.1k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 8.82k, False: 147k]
  ------------------
  309|  28.1k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 3.50k, False: 24.6k]
  ------------------
  310|  28.1k|                                {
  311|  1.76k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 1.76k, False: 26.3k]
  ------------------
  312|  5.56k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 3.80k, False: 24.3k]
  ------------------
  313|  5.56k|                                        return OpCode::SLA;
  314|       |
  315|  3.69k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 3.69k, False: 24.4k]
  ------------------
  316|  6.01k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 2.32k, False: 25.8k]
  ------------------
  317|  6.01k|                                        return OpCode::SLE;
  318|       |
  319|  1.54k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 1.54k, False: 26.5k]
  ------------------
  320|  4.44k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 2.90k, False: 25.2k]
  ------------------
  321|  4.44k|                                        return OpCode::SLL;
  322|       |
  323|  5.29k|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 5.29k, False: 22.8k]
  ------------------
  324|  8.60k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 3.30k, False: 24.8k]
  ------------------
  325|  8.60k|                                        return OpCode::SLT;
  326|  28.1k|                                }
  327|  3.50k|                                break;
  328|       |
  329|  8.54k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 8.54k, False: 148k]
  ------------------
  330|  10.7k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 2.24k, False: 154k]
  ------------------
  331|  10.7k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 6.64k, False: 4.15k]
  ------------------
  332|  6.64k|                                {
  333|  6.64k|                                    return OpCode::SNE;
  334|  6.64k|                                }
  335|  4.15k|                                break;
  336|       |
  337|  13.0k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 13.0k, False: 143k]
  ------------------
  338|  22.6k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 9.58k, False: 147k]
  ------------------
  339|  22.6k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 10.1k, False: 12.4k]
  ------------------
  340|  10.1k|                                {
  341|  10.1k|                                    return OpCode::SRA;
  342|  10.1k|                                }
  343|  12.4k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 6.58k, False: 5.88k]
  ------------------
  344|  6.58k|                                {
  345|  6.58k|                                    return OpCode::SRL;
  346|  6.58k|                                }
  347|  5.88k|                                break;
  348|       |
  349|  6.45k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 6.45k, False: 150k]
  ------------------
  350|  14.7k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 8.28k, False: 148k]
  ------------------
  351|  14.7k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 6.57k, False: 8.16k]
  ------------------
  352|  6.57k|                                {
  353|  6.57k|                                    return OpCode::SUB;
  354|  6.57k|                                }
  355|  8.16k|                                break;
  356|       |
  357|  8.16k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 1.50k, False: 155k]
  ------------------
  358|  11.1k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 9.64k, False: 147k]
  ------------------
  359|  11.1k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 9.62k, False: 1.52k]
  ------------------
  360|  9.62k|                                {
  361|  9.62k|                                    return OpCode::SWU;
  362|  9.62k|                                }
  363|  1.52k|                                break;
  364|   156k|                        }
  365|       |
  366|  58.7k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 3.33k, False: 740k]
  ------------------
  367|  69.3k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 10.5k, False: 733k]
  ------------------
  368|  69.3k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 10.8k, False: 58.5k]
  |  Branch (368:29): [True: 7.36k, False: 62.0k]
  |  Branch (368:45): [True: 7.36k, False: 3.46k]
  ------------------
  369|  7.36k|                        {
  370|  7.36k|                            return OpCode::XOR;
  371|  7.36k|                        }
  372|  62.0k|                        break;
  373|   744k|                }
  374|   494k|                break;
  375|   744k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   706k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 706k, False: 2.68M]
  ------------------
  379|   706k|                char c1 = token[0];
  380|   706k|                char c2 = token[1];
  381|   706k|                char c3 = token[2];
  382|   706k|                char c4 = token[3];
  383|       |
  384|   706k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 226k, False: 479k]
  ------------------
  385|   706k|                {
  386|  6.27k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 6.27k, False: 699k]
  ------------------
  387|  51.6k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 45.3k, False: 660k]
  ------------------
  388|  51.6k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 7.42k, False: 44.1k]
  ------------------
  389|  51.6k|                        {
  390|  25.5k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 25.5k, False: 26.0k]
  ------------------
  391|  31.7k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 6.16k, False: 45.4k]
  ------------------
  392|  31.7k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 27.1k, False: 4.61k]
  ------------------
  393|  27.1k|                                {
  394|  27.1k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 3.59k, False: 23.5k]
  ------------------
  395|  27.1k|                                    {
  396|  2.60k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 2.60k, False: 24.4k]
  ------------------
  397|  5.19k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 2.58k, False: 24.5k]
  ------------------
  398|  5.19k|                                            return OpCode::ADDD;
  399|       |
  400|  2.16k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 2.16k, False: 24.9k]
  ------------------
  401|  4.29k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 2.13k, False: 24.9k]
  ------------------
  402|  4.29k|                                            return OpCode::ADDF;
  403|       |
  404|  3.55k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 3.55k, False: 23.5k]
  ------------------
  405|  5.80k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 2.24k, False: 24.8k]
  ------------------
  406|  5.80k|                                            return OpCode::ADDI;
  407|       |
  408|  3.58k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 3.58k, False: 23.5k]
  ------------------
  409|  8.21k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 4.63k, False: 22.4k]
  ------------------
  410|  8.21k|                                            return OpCode::ADDU;
  411|  27.1k|                                    }
  412|  27.1k|                                }
  413|  8.21k|                                break;
  414|       |
  415|  10.4k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 10.4k, False: 41.1k]
  ------------------
  416|  12.4k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 2.02k, False: 49.5k]
  ------------------
  417|  12.4k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 10.3k, False: 2.11k]
  |  Branch (417:37): [True: 6.12k, False: 6.34k]
  |  Branch (417:53): [True: 6.12k, False: 4.23k]
  ------------------
  418|  6.12k|                                {
  419|  6.12k|                                    return OpCode::ANDI;
  420|  6.12k|                                }
  421|       |
  422|  6.34k|                                break;
  423|  51.6k|                        }
  424|  21.9k|                        break;
  425|       |
  426|  21.9k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 16.3k, False: 689k]
  ------------------
  427|  53.7k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 37.3k, False: 668k]
  ------------------
  428|  53.7k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 7.04k, False: 46.6k]
  ------------------
  429|  53.7k|                        {
  430|  7.73k|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 7.73k, False: 45.9k]
  ------------------
  431|  9.37k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 1.63k, False: 52.0k]
  ------------------
  432|  9.37k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 7.45k, False: 1.92k]
  |  Branch (432:37): [True: 5.60k, False: 3.76k]
  |  Branch (432:53): [True: 5.60k, False: 1.84k]
  ------------------
  433|  5.60k|                                {
  434|  5.60k|                                    return OpCode::BEQZ;
  435|  5.60k|                                }
  436|  3.76k|                                break;
  437|       |
  438|  6.03k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 6.03k, False: 47.6k]
  ------------------
  439|  26.3k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 20.3k, False: 33.3k]
  ------------------
  440|  26.3k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 21.3k, False: 5.07k]
  ------------------
  441|  21.3k|                                {
  442|  21.3k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 9.89k, False: 11.4k]
  ------------------
  443|  9.89k|                                    {
  444|  9.89k|                                        return OpCode::BFPF;
  445|  9.89k|                                    }
  446|  11.4k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 6.50k, False: 4.92k]
  ------------------
  447|  6.50k|                                    {
  448|  6.50k|                                        return OpCode::BFPT;
  449|  6.50k|                                    }
  450|  21.3k|                                }
  451|  9.99k|                                break;
  452|       |
  453|  9.99k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 8.88k, False: 44.8k]
  ------------------
  454|  10.8k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 2.01k, False: 51.6k]
  ------------------
  455|  10.8k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 6.71k, False: 4.17k]
  |  Branch (455:37): [True: 4.16k, False: 6.72k]
  |  Branch (455:53): [True: 4.16k, False: 2.55k]
  ------------------
  456|  4.16k|                                {
  457|  4.16k|                                    return OpCode::BNEZ;
  458|  4.16k|                                }
  459|  53.7k|                        }
  460|  27.5k|                        break;
  461|       |
  462|  27.5k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 21.8k, False: 684k]
  ------------------
  463|  38.0k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 16.1k, False: 690k]
  ------------------
  464|  38.0k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 29.2k, False: 8.78k]
  |  Branch (464:29): [True: 26.2k, False: 11.7k]
  |  Branch (464:45): [True: 26.2k, False: 2.93k]
  ------------------
  465|  26.2k|                        {
  466|  26.2k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 4.74k, False: 21.5k]
  ------------------
  467|  26.2k|                            {
  468|  2.02k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 2.02k, False: 24.2k]
  ------------------
  469|  5.24k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 3.22k, False: 23.0k]
  ------------------
  470|  5.24k|                                    return OpCode::DIVD;
  471|       |
  472|  3.03k|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 3.03k, False: 23.2k]
  ------------------
  473|  4.61k|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 1.58k, False: 24.7k]
  ------------------
  474|  4.61k|                                    return OpCode::DIVF;
  475|       |
  476|    706|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 706, False: 25.5k]
  ------------------
  477|  3.64k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 2.94k, False: 23.3k]
  ------------------
  478|  3.64k|                                    return OpCode::DIVI;
  479|       |
  480|  4.08k|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 4.08k, False: 22.2k]
  ------------------
  481|  8.04k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 3.95k, False: 22.3k]
  ------------------
  482|  8.04k|                                    return OpCode::DIVU;
  483|  26.2k|                            }
  484|  26.2k|                        }
  485|  16.4k|                        break;
  486|       |
  487|  16.4k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 10.9k, False: 695k]
  ------------------
  488|  24.7k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 13.8k, False: 692k]
  ------------------
  489|  24.7k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 16.7k, False: 8.03k]
  |  Branch (489:29): [True: 11.4k, False: 13.3k]
  |  Branch (489:45): [True: 14.0k, False: 2.70k]
  |  Branch (489:61): [True: 11.4k, False: 2.60k]
  ------------------
  490|  11.4k|                        {
  491|  11.4k|                            return OpCode::HALT;
  492|  11.4k|                        }
  493|  13.3k|                        break;
  494|       |
  495|  13.4k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 13.4k, False: 692k]
  ------------------
  496|  18.0k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 4.51k, False: 701k]
  ------------------
  497|  18.0k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 9.75k, False: 8.25k]
  |  Branch (497:29): [True: 5.10k, False: 12.9k]
  |  Branch (497:45): [True: 7.37k, False: 2.37k]
  |  Branch (497:61): [True: 5.10k, False: 2.27k]
  ------------------
  498|  5.10k|                        {
  499|  5.10k|                            return OpCode::JALR;
  500|  5.10k|                        }
  501|  12.9k|                        break;
  502|       |
  503|  29.0k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 29.0k, False: 677k]
  ------------------
  504|  42.8k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 13.7k, False: 692k]
  ------------------
  505|  42.8k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 25.4k, False: 17.4k]
  |  Branch (505:29): [True: 21.2k, False: 21.5k]
  |  Branch (505:45): [True: 21.2k, False: 4.15k]
  ------------------
  506|  21.2k|                        {
  507|  21.2k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 7.72k, False: 13.5k]
  ------------------
  508|  7.72k|                            {
  509|  7.72k|                                return OpCode::MOVD;
  510|  7.72k|                            }
  511|  13.5k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 8.13k, False: 5.40k]
  ------------------
  512|  8.13k|                            {
  513|  8.13k|                                return OpCode::MOVF;
  514|  8.13k|                            }
  515|  21.2k|                        }
  516|  21.5k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 15.0k, False: 6.48k]
  |  Branch (516:34): [True: 4.61k, False: 16.9k]
  |  Branch (516:50): [True: 11.0k, False: 4.07k]
  |  Branch (516:66): [True: 4.61k, False: 6.40k]
  ------------------
  517|  4.61k|                        {
  518|  4.61k|                            return OpCode::MULT;
  519|  4.61k|                        }
  520|  22.3k|                        break;
  521|       |
  522|  95.9k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 95.9k, False: 610k]
  ------------------
  523|   200k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 104k, False: 601k]
  ------------------
  524|   200k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 17.4k, False: 182k]
  ------------------
  525|   200k|                        {
  526|  10.9k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 10.9k, False: 189k]
  ------------------
  527|  18.5k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 7.57k, False: 192k]
  ------------------
  528|  18.5k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 14.8k, False: 3.70k]
  ------------------
  529|  14.8k|                                {
  530|  14.8k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 5.27k, False: 9.56k]
  ------------------
  531|  5.27k|                                    {
  532|  5.27k|                                        return OpCode::SEQI;
  533|  5.27k|                                    }
  534|  9.56k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 5.41k, False: 4.15k]
  ------------------
  535|  5.41k|                                    {
  536|  5.41k|                                        return OpCode::SEQU;
  537|  5.41k|                                    }
  538|  14.8k|                                }
  539|  7.85k|                                break;
  540|       |
  541|  7.85k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 7.39k, False: 192k]
  ------------------
  542|  27.0k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 19.6k, False: 180k]
  ------------------
  543|  27.0k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 11.3k, False: 15.7k]
  ------------------
  544|  11.3k|                                {
  545|  11.3k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 6.86k, False: 4.44k]
  ------------------
  546|  6.86k|                                    {
  547|  6.86k|                                        return OpCode::SGEI;
  548|  6.86k|                                    }
  549|  4.44k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 3.13k, False: 1.30k]
  ------------------
  550|  3.13k|                                    {
  551|  3.13k|                                        return OpCode::SGEU;
  552|  3.13k|                                    }
  553|  11.3k|                                }
  554|  15.7k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 11.4k, False: 4.23k]
  ------------------
  555|  11.4k|                                {
  556|  11.4k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 4.32k, False: 7.17k]
  ------------------
  557|  4.32k|                                    {
  558|  4.32k|                                        return OpCode::SGTI;
  559|  4.32k|                                    }
  560|  7.17k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 4.53k, False: 2.63k]
  ------------------
  561|  4.53k|                                    {
  562|  4.53k|                                        return OpCode::SGTU;
  563|  4.53k|                                    }
  564|  11.4k|                                }
  565|  8.18k|                                break;
  566|       |
  567|  57.4k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 57.4k, False: 142k]
  ------------------
  568|  65.2k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 7.83k, False: 192k]
  ------------------
  569|  65.2k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 4.37k, False: 60.9k]
  ------------------
  570|  65.2k|                                {
  571|  5.97k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 5.97k, False: 59.2k]
  ------------------
  572|  7.34k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 1.36k, False: 63.9k]
  ------------------
  573|  7.34k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 5.91k, False: 1.43k]
  ------------------
  574|  5.91k|                                        {
  575|  5.91k|                                            return OpCode::SLAI;
  576|  5.91k|                                        }
  577|  1.43k|                                        break;
  578|       |
  579|  16.4k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 16.4k, False: 48.8k]
  ------------------
  580|  18.7k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 2.30k, False: 62.9k]
  ------------------
  581|  18.7k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 12.2k, False: 6.44k]
  ------------------
  582|  12.2k|                                        {
  583|  12.2k|                                            return OpCode::SLEI;
  584|  12.2k|                                        }
  585|  6.44k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 4.02k, False: 2.41k]
  ------------------
  586|  4.02k|                                        {
  587|  4.02k|                                            return OpCode::SLEU;
  588|  4.02k|                                        }
  589|  2.41k|                                        break;
  590|       |
  591|  5.59k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 5.59k, False: 59.6k]
  ------------------
  592|  9.74k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 4.15k, False: 61.1k]
  ------------------
  593|  9.74k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 5.50k, False: 4.24k]
  ------------------
  594|  5.50k|                                        {
  595|  5.50k|                                            return OpCode::SLLI;
  596|  5.50k|                                        }
  597|  4.24k|                                        break;
  598|       |
  599|  10.5k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 10.5k, False: 54.7k]
  ------------------
  600|  25.0k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 14.5k, False: 50.7k]
  ------------------
  601|  25.0k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 9.24k, False: 15.8k]
  ------------------
  602|  9.24k|                                        {
  603|  9.24k|                                            return OpCode::SLTI;
  604|  9.24k|                                        }
  605|  15.8k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 6.84k, False: 9.01k]
  ------------------
  606|  6.84k|                                        {
  607|  6.84k|                                            return OpCode::SLTU;
  608|  6.84k|                                        }
  609|  9.01k|                                        break;
  610|  65.2k|                                }
  611|       |
  612|  35.7k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 14.3k, False: 185k]
  ------------------
  613|  39.2k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 3.49k, False: 196k]
  ------------------
  614|  39.2k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 15.8k, False: 23.3k]
  ------------------
  615|  15.8k|                                {
  616|  15.8k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 5.27k, False: 10.6k]
  ------------------
  617|  5.27k|                                    {
  618|  5.27k|                                        return OpCode::SNEI;
  619|  5.27k|                                    }
  620|  10.6k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 4.40k, False: 6.21k]
  ------------------
  621|  4.40k|                                    {
  622|  4.40k|                                        return OpCode::SNEU;
  623|  4.40k|                                    }
  624|  15.8k|                                }
  625|  29.6k|                                break;
  626|       |
  627|  29.6k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 6.85k, False: 193k]
  ------------------
  628|  20.5k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 13.6k, False: 186k]
  ------------------
  629|  20.5k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 9.21k, False: 11.3k]
  |  Branch (629:37): [True: 6.32k, False: 14.2k]
  |  Branch (629:53): [True: 6.32k, False: 2.88k]
  ------------------
  630|  6.32k|                                {
  631|  6.32k|                                    return OpCode::SRAI;
  632|  6.32k|                                }
  633|  14.2k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 9.92k, False: 4.28k]
  |  Branch (633:42): [True: 5.64k, False: 8.56k]
  |  Branch (633:58): [True: 5.64k, False: 4.27k]
  ------------------
  634|  5.64k|                                {
  635|  5.64k|                                    return OpCode::SRLI;
  636|  5.64k|                                }
  637|  8.56k|                                break;
  638|       |
  639|  23.0k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 23.0k, False: 177k]
  ------------------
  640|  33.5k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 10.4k, False: 189k]
  ------------------
  641|  33.5k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 31.2k, False: 2.23k]
  ------------------
  642|  31.2k|                                {
  643|  31.2k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 3.77k, False: 27.5k]
  ------------------
  644|  31.2k|                                    {
  645|  3.81k|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 3.81k, False: 27.4k]
  ------------------
  646|  5.66k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 1.84k, False: 29.4k]
  ------------------
  647|  5.66k|                                            return OpCode::SUBD;
  648|       |
  649|  2.21k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 2.21k, False: 29.0k]
  ------------------
  650|  4.74k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 2.53k, False: 28.7k]
  ------------------
  651|  4.74k|                                            return OpCode::SUBF;
  652|       |
  653|  3.62k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 3.62k, False: 27.6k]
  ------------------
  654|  6.23k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 2.61k, False: 28.6k]
  ------------------
  655|  6.23k|                                            return OpCode::SUBI;
  656|       |
  657|  8.42k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 8.42k, False: 22.8k]
  ------------------
  658|  10.8k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 2.45k, False: 28.8k]
  ------------------
  659|  10.8k|                                            return OpCode::SUBU;
  660|  31.2k|                                    }
  661|  31.2k|                                }
  662|  6.01k|                                break;
  663|   200k|                        }
  664|  77.6k|                        break;
  665|       |
  666|  77.6k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 23.0k, False: 683k]
  ------------------
  667|  28.6k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 5.62k, False: 700k]
  ------------------
  668|  28.6k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 20.9k, False: 7.77k]
  |  Branch (668:29): [True: 6.43k, False: 22.2k]
  |  Branch (668:45): [True: 10.9k, False: 9.92k]
  |  Branch (668:61): [True: 6.43k, False: 4.56k]
  ------------------
  669|  6.43k|                        {
  670|  6.43k|                            return OpCode::TRAP;
  671|  6.43k|                        }
  672|  22.2k|                        break;
  673|  22.2k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 7.73k, False: 698k]
  ------------------
  674|  22.1k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 14.3k, False: 691k]
  ------------------
  675|  22.1k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 18.6k, False: 3.49k]
  |  Branch (675:29): [True: 4.70k, False: 17.4k]
  |  Branch (675:45): [True: 10.1k, False: 8.44k]
  |  Branch (675:61): [True: 4.70k, False: 5.47k]
  ------------------
  676|  4.70k|                        {
  677|  4.70k|                            return OpCode::XORI;
  678|  4.70k|                        }
  679|  17.4k|                        break;
  680|   706k|                }
  681|   458k|                break;
  682|   706k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|   458k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 363k, False: 3.02M]
  ------------------
  686|   363k|                char c1 = token[0];
  687|   363k|                char c2 = token[1];
  688|   363k|                char c3 = token[2];
  689|   363k|                char c4 = token[3];
  690|   363k|                char c5 = token[4];
  691|       |
  692|   363k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 151k, False: 212k]
  ------------------
  693|   363k|                {
  694|  5.37k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 5.37k, False: 358k]
  ------------------
  695|  27.4k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 22.0k, False: 341k]
  ------------------
  696|  27.4k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 18.8k, False: 8.57k]
  |  Branch (696:29): [True: 5.52k, False: 21.9k]
  |  Branch (696:45): [True: 15.7k, False: 3.11k]
  |  Branch (696:61): [True: 8.41k, False: 7.33k]
  |  Branch (696:77): [True: 5.52k, False: 2.89k]
  ------------------
  697|  5.52k|                        {
  698|  5.52k|                            return OpCode::ADDUI;
  699|  5.52k|                        }
  700|  21.9k|                        break;
  701|       |
  702|  21.9k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 19.4k, False: 344k]
  ------------------
  703|  31.9k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 12.5k, False: 350k]
  ------------------
  704|  31.9k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 27.3k, False: 4.64k]
  |  Branch (704:29): [True: 7.10k, False: 24.8k]
  |  Branch (704:45): [True: 25.6k, False: 1.66k]
  |  Branch (704:61): [True: 14.9k, False: 10.7k]
  |  Branch (704:77): [True: 7.10k, False: 7.82k]
  ------------------
  705|  7.10k|                        {
  706|  7.10k|                            return OpCode::DIVUI;
  707|  7.10k|                        }
  708|  24.8k|                        break;
  709|       |
  710|  24.8k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 15.5k, False: 347k]
  ------------------
  711|  51.4k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 35.8k, False: 327k]
  ------------------
  712|  51.4k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 44.8k, False: 6.55k]
  |  Branch (712:29): [True: 35.9k, False: 15.5k]
  |  Branch (712:45): [True: 39.7k, False: 5.10k]
  |  Branch (712:61): [True: 35.9k, False: 3.84k]
  ------------------
  713|  35.9k|                        {
  714|  35.9k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 7.48k, False: 28.4k]
  ------------------
  715|  35.9k|                            {
  716|  2.66k|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 2.66k, False: 33.2k]
  ------------------
  717|  4.56k|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 1.90k, False: 34.0k]
  ------------------
  718|  4.56k|                                    return OpCode::MULTD;
  719|       |
  720|  1.57k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 1.57k, False: 34.3k]
  ------------------
  721|  6.64k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 5.07k, False: 30.8k]
  ------------------
  722|  6.64k|                                    return OpCode::MULTF;
  723|       |
  724|  4.05k|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 4.05k, False: 31.8k]
  ------------------
  725|  6.23k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 2.17k, False: 33.7k]
  ------------------
  726|  6.23k|                                    return OpCode::MULTI;
  727|       |
  728|  3.43k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 3.43k, False: 32.4k]
  ------------------
  729|  10.9k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 7.54k, False: 28.3k]
  ------------------
  730|  10.9k|                                    return OpCode::MULTU;
  731|  35.9k|                            }
  732|  35.9k|                        }
  733|  22.9k|                        break;
  734|       |
  735|  31.2k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 31.2k, False: 332k]
  ------------------
  736|   101k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 70.1k, False: 293k]
  ------------------
  737|   101k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 9.92k, False: 91.4k]
  ------------------
  738|   101k|                        {
  739|  11.1k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 11.1k, False: 90.1k]
  ------------------
  740|  16.5k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 5.42k, False: 95.9k]
  ------------------
  741|  16.5k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 13.2k, False: 3.33k]
  |  Branch (741:37): [True: 4.12k, False: 12.4k]
  |  Branch (741:53): [True: 9.50k, False: 3.73k]
  |  Branch (741:69): [True: 4.12k, False: 5.38k]
  ------------------
  742|  4.12k|                                {
  743|  4.12k|                                    return OpCode::SEQUI;
  744|  4.12k|                                }
  745|  12.4k|                                break;
  746|       |
  747|  12.4k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 4.93k, False: 96.4k]
  ------------------
  748|  14.6k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 9.71k, False: 91.6k]
  ------------------
  749|  14.6k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 7.12k, False: 7.52k]
  |  Branch (749:37): [True: 3.17k, False: 11.4k]
  |  Branch (749:53): [True: 4.54k, False: 2.58k]
  |  Branch (749:69): [True: 3.17k, False: 1.36k]
  ------------------
  750|  3.17k|                                {
  751|  3.17k|                                    return OpCode::SGEUI;
  752|  3.17k|                                }
  753|  11.4k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 6.96k, False: 4.51k]
  |  Branch (753:42): [True: 3.01k, False: 8.46k]
  |  Branch (753:58): [True: 4.40k, False: 2.55k]
  |  Branch (753:74): [True: 3.01k, False: 1.39k]
  ------------------
  754|  3.01k|                                {
  755|  3.01k|                                    return OpCode::SGTUI;
  756|  3.01k|                                }
  757|  8.46k|                                break;
  758|       |
  759|  23.7k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 23.7k, False: 77.5k]
  ------------------
  760|  32.3k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 8.55k, False: 92.7k]
  ------------------
  761|  32.3k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 11.7k, False: 20.6k]
  |  Branch (761:37): [True: 3.39k, False: 28.9k]
  |  Branch (761:53): [True: 7.50k, False: 4.23k]
  |  Branch (761:69): [True: 3.39k, False: 4.10k]
  ------------------
  762|  3.39k|                                {
  763|  3.39k|                                    return OpCode::SLEUI;
  764|  3.39k|                                }
  765|  28.9k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 15.5k, False: 13.3k]
  |  Branch (765:42): [True: 5.01k, False: 23.9k]
  |  Branch (765:58): [True: 10.3k, False: 5.27k]
  |  Branch (765:74): [True: 5.01k, False: 5.28k]
  ------------------
  766|  5.01k|                                {
  767|  5.01k|                                    return OpCode::SLTUI;
  768|  5.01k|                                }
  769|  23.9k|                                break;
  770|       |
  771|  23.9k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 11.0k, False: 90.2k]
  ------------------
  772|  16.2k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 5.18k, False: 96.1k]
  ------------------
  773|  16.2k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 12.6k, False: 3.61k]
  |  Branch (773:37): [True: 3.29k, False: 12.9k]
  |  Branch (773:53): [True: 8.05k, False: 4.61k]
  |  Branch (773:69): [True: 3.29k, False: 4.75k]
  ------------------
  774|  3.29k|                                {
  775|  3.29k|                                    return OpCode::SNEUI;
  776|  3.29k|                                }
  777|  12.9k|                                break;
  778|       |
  779|  12.9k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 6.19k, False: 95.1k]
  ------------------
  780|  11.5k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 5.36k, False: 95.9k]
  ------------------
  781|  11.5k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 9.51k, False: 2.04k]
  |  Branch (781:37): [True: 5.01k, False: 6.54k]
  |  Branch (781:53): [True: 6.02k, False: 3.49k]
  |  Branch (781:69): [True: 5.01k, False: 1.00k]
  ------------------
  782|  5.01k|                                {
  783|  5.01k|                                    return OpCode::SUBUI;
  784|  5.01k|                                }
  785|  6.54k|                                break;
  786|   101k|                        }
  787|       |
  788|  74.3k|                        break;
  789|   363k|                }
  790|       |
  791|   295k|                break;
  792|   363k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|   295k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 208k, False: 3.17M]
  ------------------
  796|   208k|                char c1 = token[0];
  797|   208k|                char c2 = token[1];
  798|   208k|                char c3 = token[2];
  799|   208k|                char c4 = token[3];
  800|   208k|                char c5 = token[4];
  801|   208k|                char c6 = token[5];
  802|       |
  803|   208k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 59.1k, False: 149k]
  |  Branch (803:21): [True: 52.3k, False: 156k]
  |  Branch (803:37): [True: 55.3k, False: 3.88k]
  |  Branch (803:53): [True: 52.3k, False: 2.97k]
  ------------------
  804|  52.3k|                {
  805|  52.3k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 2.90k, False: 49.4k]
  ------------------
  806|  52.3k|                    {
  807|  7.27k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 7.27k, False: 45.0k]
  ------------------
  808|  14.2k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 7.02k, False: 45.3k]
  ------------------
  809|  14.2k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 11.2k, False: 3.05k]
  ------------------
  810|  11.2k|                            {
  811|  11.2k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 3.82k, False: 7.42k]
  ------------------
  812|  3.82k|                                {
  813|  3.82k|                                    return OpCode::CVTD2F;
  814|  3.82k|                                }
  815|  7.42k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 5.30k, False: 2.11k]
  ------------------
  816|  5.30k|                                {
  817|  5.30k|                                    return OpCode::CVTD2I;
  818|  5.30k|                                }
  819|  11.2k|                            }
  820|  5.16k|                            break;
  821|       |
  822|  14.5k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 14.5k, False: 37.8k]
  ------------------
  823|  17.8k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 3.35k, False: 48.9k]
  ------------------
  824|  17.8k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 15.4k, False: 2.42k]
  ------------------
  825|  15.4k|                            {
  826|  15.4k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 4.95k, False: 10.4k]
  ------------------
  827|  4.95k|                                {
  828|  4.95k|                                    return OpCode::CVTF2D;
  829|  4.95k|                                }
  830|  10.4k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 8.70k, False: 1.78k]
  ------------------
  831|  8.70k|                                {
  832|  8.70k|                                    return OpCode::CVTF2I;
  833|  8.70k|                                }
  834|  15.4k|                            }
  835|  4.21k|                            break;
  836|       |
  837|  12.5k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 12.5k, False: 39.8k]
  ------------------
  838|  17.2k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 4.74k, False: 47.5k]
  ------------------
  839|  17.2k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 12.3k, False: 4.87k]
  ------------------
  840|  12.3k|                            {
  841|  12.3k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 5.93k, False: 6.45k]
  ------------------
  842|  5.93k|                                {
  843|  5.93k|                                    return OpCode::CVTI2D;
  844|  5.93k|                                }
  845|  6.45k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 4.29k, False: 2.15k]
  ------------------
  846|  4.29k|                                {
  847|  4.29k|                                    return OpCode::CVTI2F;
  848|  4.29k|                                }
  849|  12.3k|                            }
  850|  52.3k|                    }
  851|  52.3k|                }
  852|   156k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 34.6k, False: 121k]
  |  Branch (852:26): [True: 3.51k, False: 152k]
  |  Branch (852:42): [True: 28.3k, False: 6.26k]
  |  Branch (852:58): [True: 24.1k, False: 4.27k]
  |  Branch (852:74): [True: 20.2k, False: 3.84k]
  ------------------
  853|   156k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 5.60k, False: 14.6k]
  |  Branch (853:42): [True: 3.51k, False: 2.09k]
  ------------------
  854|  3.51k|                {
  855|  3.51k|                    return OpCode::MULTUI;
  856|  3.51k|                }
  857|   172k|                break;
  858|   208k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|   172k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 119k, False: 3.26M]
  ------------------
  862|   119k|                char c1 = token[0];
  863|   119k|                char c2 = token[1];
  864|   119k|                char c3 = token[2];
  865|   119k|                char c4 = token[3];
  866|   119k|                char c5 = token[4];
  867|   119k|                char c6 = token[5];
  868|   119k|                char c7 = token[6];
  869|       |
  870|   119k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 42.6k, False: 76.4k]
  |  Branch (870:21): [True: 28.9k, False: 90.1k]
  |  Branch (870:37): [True: 32.7k, False: 9.91k]
  |  Branch (870:53): [True: 28.9k, False: 3.80k]
  ------------------
  871|  28.9k|                {
  872|  28.9k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 8.69k, False: 20.2k]
  |  Branch (872:25): [True: 3.20k, False: 25.7k]
  |  Branch (872:41): [True: 7.10k, False: 1.58k]
  |  Branch (872:54): [True: 3.77k, False: 3.32k]
  |  Branch (872:70): [True: 3.20k, False: 572]
  ------------------
  873|  3.20k|                    {
  874|  3.20k|                        return OpCode::MOVI2FP;
  875|  3.20k|                    }
  876|  25.7k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 16.7k, False: 9.01k]
  |  Branch (876:30): [True: 4.30k, False: 21.4k]
  |  Branch (876:46): [True: 13.5k, False: 3.16k]
  |  Branch (876:62): [True: 10.8k, False: 2.71k]
  |  Branch (876:75): [True: 4.30k, False: 6.53k]
  ------------------
  877|  4.30k|                    {
  878|  4.30k|                        return OpCode::MOVFP2I;
  879|  4.30k|                    }
  880|  28.9k|                }
  881|   111k|                break;
  882|   119k|            }
  883|       |
  884|   164k|            default: {
  ------------------
  |  Branch (884:13): [True: 164k, False: 3.22M]
  ------------------
  885|   164k|                break;
  886|   119k|            }
  887|  3.38M|        }
  888|       |
  889|       |        // None found
  890|  2.58M|        return OpCode::NONE;
  891|  3.38M|    }
_ZN3dlx3iceEcc:
   17|  3.73M|    {
   18|  3.73M|        constexpr const char diff = 'a' - 'A';
   19|  3.73M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 1.05M, False: 2.68M]
  |  Branch (19:28): [True: 877k, False: 1.80M]
  ------------------
   20|  3.73M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  4.21M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  35.5k|    {
  193|  35.5k|        ParseError err;
  194|       |
  195|  35.5k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  35.5k|        err.m_LineNumber                           = line_number;
  197|  35.5k|        err.m_Column                               = column;
  198|  35.5k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  35.5k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  35.5k|        return err;
  202|  35.5k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  35.5k|    {
  207|  35.5k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  35.5k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  35.5k|                                                         actual_type);
  210|  35.5k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|  2.05k|    {
  216|  2.05k|        ParseError err;
  217|       |
  218|  2.05k|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|  2.05k|        err.m_LineNumber        = line_number;
  220|  2.05k|        err.m_Column            = column;
  221|  2.05k|        err.invalid_number.text = text;
  222|       |
  223|  2.05k|        return err;
  224|  2.05k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|  2.05k|    {
  228|  2.05k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|  2.05k|                                                token.GetColumn().unsafe(), token.GetText());
  230|  2.05k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      4|    {
  235|      4|        ParseError err;
  236|       |
  237|      4|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      4|        err.m_LineNumber = line_number;
  239|      4|        err.m_Column     = column;
  240|       |
  241|      4|        return err;
  242|      4|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      4|    {
  247|      4|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      4|                                                                     token.GetColumn().unsafe());
  249|      4|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|  2.33M|    {
  255|  2.33M|        ParseError err;
  256|       |
  257|  2.33M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|  2.33M|        err.m_LineNumber                   = line_number;
  259|  2.33M|        err.m_Column                       = column;
  260|  2.33M|        err.unexpected_token.expected_type = expected_type;
  261|  2.33M|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|  2.33M|        return err;
  264|  2.33M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|  2.33M|    {
  269|  2.33M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|  2.33M|                                                  token.GetColumn().unsafe(), expected_type,
  271|  2.33M|                                                  token.GetType());
  272|  2.33M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|   212k|    {
  277|   212k|        ParseError err;
  278|       |
  279|   212k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|   212k|        err.m_LineNumber                   = line_number;
  281|   212k|        err.m_Column                       = column;
  282|   212k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|   212k|        return err;
  285|   212k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  2.42k|    {
  289|  2.42k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  2.42k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  2.42k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|  1.01M|    {
  296|  1.01M|        ParseError err;
  297|       |
  298|  1.01M|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|  1.01M|        err.m_LineNumber                       = line_number;
  300|  1.01M|        err.m_Column                           = column;
  301|  1.01M|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|  1.01M|        return err;
  304|  1.01M|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|  1.01M|    {
  309|  1.01M|        return ConstructInvalidLabelIdentifierParseError(
  310|  1.01M|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|  1.01M|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|   128k|    {
  317|   128k|        ParseError err;
  318|       |
  319|   128k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|   128k|        err.m_LineNumber                     = line_number;
  321|   128k|        err.m_Column                         = column;
  322|   128k|        err.label_already_defined.label_name = label_name;
  323|   128k|        err.label_already_defined.at_line    = at_line;
  324|   128k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|   128k|        return err;
  327|   128k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|   128k|    {
  332|   128k|        return ConstructLabelAlreadyDefinedParseError(
  333|   128k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|   128k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|   128k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   362k|    {
  340|   362k|        ParseError err;
  341|       |
  342|   362k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   362k|        err.m_LineNumber = line_number;
  344|   362k|        err.m_Column     = column;
  345|       |
  346|   362k|        return err;
  347|   362k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   362k|    {
  352|   362k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   362k|                                                        token.GetColumn().unsafe());
  354|   362k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  80.7k|    {
  360|  80.7k|        ParseError err;
  361|       |
  362|  80.7k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  80.7k|        err.m_LineNumber               = line_number;
  364|  80.7k|        err.m_Column                   = column;
  365|  80.7k|        err.too_few_arguments.required = required;
  366|  80.7k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  80.7k|        return err;
  369|  80.7k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  80.7k|    {
  374|  80.7k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  80.7k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  80.7k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  25.8k|    {
  381|  25.8k|        ParseError err;
  382|       |
  383|  25.8k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  25.8k|        err.m_LineNumber           = line_number;
  385|  25.8k|        err.m_Column               = column;
  386|  25.8k|        err.empty_label.label_name = label_name;
  387|       |
  388|  25.8k|        return err;
  389|  25.8k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  25.8k|    {
  393|  25.8k|        return ConstructEmptyLabelParseError(
  394|  25.8k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  25.8k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 19.4k, False: 6.43k]
  ------------------
  396|  19.4k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  25.8k|                        token.GetText());
  398|  25.8k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  13.5k|    {
  403|  13.5k|        ParseError err;
  404|       |
  405|  13.5k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  13.5k|        err.m_LineNumber = line_number;
  407|  13.5k|        err.m_Column     = column;
  408|       |
  409|  13.5k|        return err;
  410|  13.5k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  13.5k|    {
  414|  13.5k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  13.5k|                                               token.GetColumn().unsafe());
  416|  13.5k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  4.21M|    {
   19|  4.21M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  4.21M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  18.1k|    {
  182|  18.1k|        ParsedProgram program;
  183|       |
  184|  18.1k|        program.m_Tokens = tokens;
  185|       |
  186|  18.1k|        phi::boolean line_has_instruction{false};
  187|  18.1k|        phi::usize   label_count{0u};
  188|       |
  189|  4.79M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 4.78M, False: 18.1k]
  ------------------
  190|  4.78M|        {
  191|  4.78M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  4.78M|            switch (current_token.GetType())
  196|  4.78M|            {
  197|       |                // Ignore comments
  198|  15.4k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 15.4k, False: 4.76M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  15.4k|                    break;
  201|       |
  202|   521k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 521k, False: 4.25M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   521k|                    line_has_instruction = false;
  205|   521k|                    break;
  206|       |
  207|  1.93M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 1.93M, False: 2.84M]
  ------------------
  208|  1.93M|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 583k, False: 1.35M]
  ------------------
  209|   583k|                    {
  210|   583k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|   583k|                                current_token, Token::Type::NewLine));
  212|   583k|                        break;
  213|   583k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|  1.35M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 650k, False: 701k]
  ------------------
  218|   650k|                    {
  219|   650k|                        program.AddParseError(
  220|   650k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   650k|                        break;
  222|   650k|                    }
  223|       |
  224|   701k|                    std::string_view label_name = current_token.GetText();
  225|   701k|                    label_name.remove_suffix(1);
  226|       |
  227|   701k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 209k, False: 492k]
  ------------------
  228|   209k|                    {
  229|   209k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|   209k|                                current_token.GetLineNumber().unsafe(),
  231|   209k|                                current_token.GetColumn().unsafe(), label_name));
  232|   209k|                        break;
  233|   209k|                    }
  234|       |
  235|   492k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 331k, False: 160k]
  ------------------
  236|   331k|                    {
  237|   331k|                        program.AddParseError(
  238|   331k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|   331k|                        break;
  240|   331k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|   160k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 128k, False: 32.1k]
  ------------------
  244|   128k|                    {
  245|       |                        // Find first defintions of label
  246|   128k|                        const Token* first_label_definition =
  247|   128k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   128k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|   128k|                                    {
  250|   128k|                                        std::string_view token_label_name = t.GetText();
  251|   128k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   128k|                                        if (token_label_name == label_name)
  254|   128k|                                        {
  255|   128k|                                            return true;
  256|   128k|                                        }
  257|   128k|                                    }
  258|       |
  259|   128k|                                    return false;
  260|   128k|                                });
  261|       |
  262|   128k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|   128k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|   128k|                                current_token, *first_label_definition));
  266|   128k|                        break;
  267|   128k|                    }
  268|       |
  269|  32.1k|                    program.m_JumpData[label_name] =
  270|  32.1k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  32.1k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  32.1k|                    break;
  277|   160k|                }
  278|       |
  279|   599k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 599k, False: 4.18M]
  ------------------
  280|   599k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 362k, False: 237k]
  ------------------
  281|   362k|                    {
  282|   362k|                        program.AddParseError(
  283|   362k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   362k|                        break;
  285|   362k|                    }
  286|       |
  287|   237k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|   237k|                    PHI_ASSERT(current_token.HasHint());
  291|   237k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|   237k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|   237k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|   237k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|   237k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|   237k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|   237k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|   237k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|   237k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   454k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 416k, False: 38.4k]
  ------------------
  313|   416k|                    {
  314|       |                        // Get next token
  315|   416k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 1.08k, False: 415k]
  ------------------
  316|  1.08k|                        {
  317|  1.08k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|  1.08k|                                    current_token, number_of_argument_required.unsafe(),
  319|  1.08k|                                    argument_num.unsafe()));
  320|  1.08k|                            break;
  321|  1.08k|                        }
  322|       |
  323|   415k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   415k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 155k, False: 260k]
  ------------------
  327|   155k|                        {
  328|   155k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 13.5k, False: 141k]
  ------------------
  329|  13.5k|                            {
  330|  13.5k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  13.5k|                            }
  332|       |
  333|   155k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|   155k|                            continue;
  336|   155k|                        }
  337|       |
  338|   260k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 79.6k, False: 180k]
  ------------------
  339|  79.6k|                        {
  340|  79.6k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  79.6k|                                    token, number_of_argument_required.unsafe(),
  342|  79.6k|                                    argument_num.unsafe()));
  343|  79.6k|                            break;
  344|  79.6k|                        }
  345|       |
  346|   180k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|   180k|                                parse_instruction_argument(
  348|   180k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|   180k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 118k, False: 62.4k]
  ------------------
  350|   118k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|   118k|                            break;
  353|   118k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  62.4k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  62.4k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  62.4k|                        argument_num++;
  360|  62.4k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  62.4k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|   237k|                    program.m_Instructions.emplace_back(instruction);
  368|   237k|                    line_has_instruction = true;
  369|   237k|                    break;
  370|   599k|                }
  371|       |
  372|  1.70M|                default:
  ------------------
  |  Branch (372:17): [True: 1.70M, False: 3.07M]
  ------------------
  373|  1.70M|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|  1.70M|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 910k, False: 798k]
  ------------------
  375|   910k|                    {
  376|   910k|                        expected_token_type = Token::Type::NewLine;
  377|   910k|                    }
  378|       |
  379|  1.70M|                    program.AddParseError(
  380|  1.70M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|  1.70M|                    break;
  382|  4.78M|            }
  383|  4.78M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  18.1k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 4.18k, False: 13.9k]
  ------------------
  387|  4.18k|        {
  388|  40.9k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 36.7k, False: 4.18k]
  ------------------
  389|  36.7k|            {
  390|  36.7k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  36.7k|                const Token& token = *it;
  393|  36.7k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 25.8k, False: 10.9k]
  ------------------
  394|  25.8k|                {
  395|  25.8k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  25.8k|                    --label_count;
  397|  25.8k|                }
  398|  36.7k|            }
  399|  4.18k|        }
  400|       |
  401|  18.1k|        return program;
  402|  18.1k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  18.1k|    {
  406|  18.1k|        TokenStream tokens = Tokenize(source);
  407|  18.1k|        return Parse(tokens);
  408|  18.1k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|   180k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|   180k|        switch (token.GetType())
   38|   180k|        {
   39|  14.2k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 14.2k, False: 166k]
  ------------------
   40|  14.2k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 2.64k, False: 11.6k]
  ------------------
   41|  14.2k|                                          ArgumentType::AddressDisplacement))
   42|  2.64k|                {
   43|  2.64k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  2.64k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  2.64k|                    return {};
   47|  2.64k|                }
   48|       |
   49|       |                // Get address displacement
   50|  11.6k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  11.6k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  11.6k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 4, False: 11.6k]
  ------------------
   55|      4|                {
   56|      4|                    program.AddParseError(
   57|      4|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      4|                    return {};
   59|      4|                }
   60|       |
   61|  11.6k|                auto         it           = tokens.current_position();
   62|  11.6k|                const Token& first_token  = tokens.consume();
   63|  11.6k|                const Token& second_token = tokens.consume();
   64|  11.6k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  11.6k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 2.04k, False: 9.55k]
  ------------------
   67|  2.04k|                {
   68|  2.04k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  2.04k|                            first_token, Token::Type::OpenBracket));
   70|  2.04k|                    return {};
   71|  2.04k|                }
   72|       |
   73|       |                // Second token is the register
   74|  9.55k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 3.42k, False: 6.13k]
  ------------------
   75|  3.42k|                {
   76|  3.42k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|  3.42k|                            second_token, Token::Type::RegisterInt));
   78|  3.42k|                    return {};
   79|  3.42k|                }
   80|       |
   81|  6.13k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 2.52k, False: 3.60k]
  ------------------
   82|  2.52k|                {
   83|  2.52k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|  2.52k|                            third_token, Token::Type::ClosingBracket));
   85|  2.52k|                    return {};
   86|  2.52k|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|  3.60k|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|  3.60k|                return ConstructInstructionArgumentAddressDisplacement(
   95|  3.60k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|  6.13k|            }
   97|  23.2k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 23.2k, False: 157k]
  ------------------
   98|  23.2k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 1.59k, False: 21.6k]
  ------------------
   99|  1.59k|                {
  100|  1.59k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  1.59k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  1.59k|                    return {};
  103|  1.59k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  21.6k|                return ConstructInstructionArgumentRegisterInt(
  109|  21.6k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  23.2k|            }
  111|  14.4k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 14.4k, False: 166k]
  ------------------
  112|  14.4k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 1.56k, False: 12.9k]
  ------------------
  113|  1.56k|                {
  114|  1.56k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  1.56k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  1.56k|                    return {};
  117|  1.56k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  12.9k|                return ConstructInstructionArgumentRegisterFloat(
  123|  12.9k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  14.4k|            }
  125|  2.42k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 2.42k, False: 178k]
  ------------------
  126|  2.42k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  2.42k|                return {};
  129|  14.4k|            }
  130|  87.9k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 87.9k, False: 92.7k]
  ------------------
  131|       |                // Parse as Label
  132|  87.9k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 29.3k, False: 58.5k]
  ------------------
  133|  29.3k|                {
  134|  29.3k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  29.3k|                            token, expected_argument_type, ArgumentType::Label));
  136|  29.3k|                    return {};
  137|  29.3k|                }
  138|       |
  139|  58.5k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 58.5k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  58.5k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 36.9k, False: 21.6k]
  ------------------
  146|  36.9k|                {
  147|  36.9k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  36.9k|                    return {};
  149|  36.9k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  21.6k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  58.5k|            }
  155|  5.15k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 5.15k, False: 175k]
  ------------------
  156|  5.15k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 436, False: 4.71k]
  ------------------
  157|    436|                {
  158|    436|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|    436|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|    436|                    return {};
  161|    436|                }
  162|       |
  163|  4.71k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 2.66k, False: 2.05k]
  ------------------
  164|  2.66k|                {
  165|  2.66k|                    return ConstructInstructionArgumentImmediateValue(
  166|  2.66k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  2.66k|                }
  168|       |
  169|  2.05k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|  2.05k|                return {};
  171|  4.71k|            }
  172|       |
  173|  33.1k|            default:
  ------------------
  |  Branch (173:13): [True: 33.1k, False: 147k]
  ------------------
  174|  33.1k|                program.AddParseError(
  175|  33.1k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  33.1k|                return {};
  177|   180k|        }
  178|   180k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  2.91M|                                tokens.find_first_token_if([&](const Token& t) {
  248|  2.91M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 1.90M, False: 1.01M]
  ------------------
  249|  1.90M|                                    {
  250|  1.90M|                                        std::string_view token_label_name = t.GetText();
  251|  1.90M|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  1.90M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 128k, False: 1.77M]
  ------------------
  254|   128k|                                        {
  255|   128k|                                            return true;
  256|   128k|                                        }
  257|  1.90M|                                    }
  258|       |
  259|  2.79M|                                    return false;
  260|  2.91M|                                });

_ZN3dlx9ProcessorC2Ev:
   63|      1|    {
   64|       |        // Mark R0 as ready only
   65|      1|        m_IntRegisters[0].SetReadOnly(true);
   66|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   69|  1.36M|    {
   70|  1.36M|        PHI_ASSERT(id != IntRegisterID::None);
   71|  1.36M|        phi::size_t id_value = phi::to_underlying(id);
   72|       |
   73|  1.36M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   74|       |
   75|  1.36M|        return m_IntRegisters[id_value];
   76|  1.36M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   80|  3.64M|    {
   81|  3.64M|        PHI_ASSERT(id != IntRegisterID::None);
   82|  3.64M|        phi::size_t id_value = phi::to_underlying(id);
   83|       |
   84|  3.64M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   85|       |
   86|  3.64M|        return m_IntRegisters[id_value];
   87|  3.64M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   90|  2.14M|    {
   91|  2.14M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   92|  2.14M|                                             RegisterAccessType::Signed),
   93|  2.14M|                   "Mismatch for instruction access type");
   94|       |
   95|  2.14M|        const phi::size_t id_value = phi::to_underlying(id);
   96|       |
   97|  2.14M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   98|  2.14M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
   99|  2.14M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (99:13): [True: 50.7k, False: 2.09M]
  ------------------
  100|  2.14M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (100:13): [True: 0, False: 50.7k]
  ------------------
  101|      0|        {
  102|      0|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  103|      0|        }
  104|       |
  105|  2.14M|        return GetIntRegister(id).GetSignedValue();
  106|  2.14M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  109|  1.50M|    {
  110|  1.50M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  111|  1.50M|                                             RegisterAccessType::Unsigned),
  112|  1.50M|                   "Mismatch for instruction access type");
  113|       |
  114|  1.50M|        const phi::size_t id_value = phi::to_underlying(id);
  115|       |
  116|  1.50M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  117|  1.50M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  118|  1.50M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (118:13): [True: 1.04M, False: 457k]
  ------------------
  119|  1.50M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (119:13): [True: 1.03M, False: 3.33k]
  ------------------
  120|  1.03M|        {
  121|  1.03M|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  1.03M|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  122|  1.03M|        }
  123|       |
  124|  1.50M|        return GetIntRegister(id).GetUnsignedValue();
  125|  1.50M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  128|   960k|    {
  129|   960k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  130|   960k|                                             RegisterAccessType::Signed),
  131|   960k|                   "Mismatch for instruction access type");
  132|       |
  133|   960k|        IntRegister& reg = GetIntRegister(id);
  134|       |
  135|   960k|        if (reg.IsReadOnly())
  ------------------
  |  Branch (135:13): [True: 352k, False: 607k]
  ------------------
  136|   352k|        {
  137|   352k|            return;
  138|   352k|        }
  139|       |
  140|   607k|        reg.SetSignedValue(value);
  141|       |
  142|   607k|        const phi::size_t id_value = phi::to_underlying(id);
  143|       |
  144|   607k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  145|   607k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  146|   607k|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  149|   403k|    {
  150|   403k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  151|   403k|                                             RegisterAccessType::Unsigned),
  152|   403k|                   "Mismatch for instruction access type");
  153|       |
  154|   403k|        IntRegister& reg = GetIntRegister(id);
  155|       |
  156|   403k|        if (reg.IsReadOnly())
  ------------------
  |  Branch (156:13): [True: 194k, False: 208k]
  ------------------
  157|   194k|        {
  158|   194k|            return;
  159|   194k|        }
  160|       |
  161|   208k|        reg.SetUnsignedValue(value);
  162|       |
  163|   208k|        const phi::size_t id_value = phi::to_underlying(id);
  164|       |
  165|   208k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  166|   208k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  167|   208k|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  170|  1.02M|    {
  171|  1.02M|        PHI_ASSERT(id != FloatRegisterID::None);
  172|  1.02M|        const phi::size_t id_value = phi::to_underlying(id);
  173|       |
  174|  1.02M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  175|       |
  176|  1.02M|        return m_FloatRegisters[id_value];
  177|  1.02M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  181|   873k|    {
  182|   873k|        PHI_ASSERT(id != FloatRegisterID::None);
  183|   873k|        const phi::size_t id_value = phi::to_underlying(id);
  184|       |
  185|   873k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  186|       |
  187|   873k|        return m_FloatRegisters[id_value];
  188|   873k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  191|   873k|    {
  192|   873k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  193|   873k|                                             RegisterAccessType::Float),
  194|   873k|                   "Mismatch for instruction access type");
  195|       |
  196|   873k|        const phi::size_t id_value = phi::to_underlying(id);
  197|       |
  198|   873k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  199|   873k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  200|   873k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (200:13): [True: 750k, False: 122k]
  ------------------
  201|   873k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (201:13): [True: 443k, False: 307k]
  ------------------
  202|   443k|        {
  203|       |            /*
  204|       |            DLX_WARN("Mismatch for register value type");
  205|       |            */
  206|   443k|        }
  207|       |
  208|   873k|        const FloatRegister& reg = GetFloatRegister(id);
  209|       |
  210|   873k|        return reg.GetValue();
  211|   873k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  214|   376k|    {
  215|   376k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  216|   376k|                                             RegisterAccessType::Double),
  217|   376k|                   "Mismatch for instruction access type");
  218|       |
  219|   376k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (219:13): [True: 22, False: 376k]
  ------------------
  220|     22|        {
  221|     22|            Raise(Exception::MisalignedRegisterAccess);
  222|     22|            return {0.0};
  223|     22|        }
  224|       |
  225|   376k|        const phi::size_t id_value = phi::to_underlying(id);
  226|       |
  227|   376k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  228|   376k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  229|   376k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (229:13): [True: 317k, False: 58.5k]
  ------------------
  230|   376k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (230:13): [True: 241k, False: 76.4k]
  ------------------
  231|   241k|        {
  232|   241k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   241k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  233|   241k|        }
  234|       |
  235|   376k|        const FloatRegisterValueType register_value_type_high =
  236|   376k|                m_FloatRegistersValueTypes[id_value + 1u];
  237|   376k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (237:13): [True: 317k, False: 58.5k]
  ------------------
  238|   376k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (238:13): [True: 0, False: 317k]
  ------------------
  239|      0|        {
  240|      0|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  241|      0|        }
  242|       |
  243|   376k|        const FloatRegister& first_reg = GetFloatRegister(id);
  244|   376k|        const FloatRegister& second_reg =
  245|   376k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  246|       |
  247|   376k|        const float first_value  = first_reg.GetValue().unsafe();
  248|   376k|        const float second_value = second_reg.GetValue().unsafe();
  249|       |
  250|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  251|   376k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  252|       |
  253|   376k|        const std::uint32_t first_value_bits =
  254|   376k|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  255|   376k|        const std::uint32_t second_value_bits =
  256|   376k|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  257|       |
  258|   376k|        std::uint64_t final_value_bits =
  259|   376k|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  260|       |
  261|   376k|        return *reinterpret_cast<double*>(&final_value_bits);
  262|       |
  263|   376k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  264|   376k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  267|   127k|    {
  268|   127k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  269|   127k|                                             RegisterAccessType::Float),
  270|   127k|                   "Mismatch for instruction access type");
  271|       |
  272|   127k|        FloatRegister& reg = GetFloatRegister(id);
  273|       |
  274|   127k|        reg.SetValue(value);
  275|       |
  276|   127k|        const phi::size_t id_value = phi::to_underlying(id);
  277|       |
  278|   127k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  279|   127k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  280|   127k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  283|  72.6k|    {
  284|  72.6k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  285|  72.6k|                                             RegisterAccessType::Double),
  286|  72.6k|                   "Mismatch for instruction access type");
  287|       |
  288|  72.6k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (288:13): [True: 2, False: 72.6k]
  ------------------
  289|      2|        {
  290|      2|            Raise(Exception::MisalignedRegisterAccess);
  291|      2|            return;
  292|      2|        }
  293|       |
  294|  72.6k|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  295|  72.6k|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  296|       |
  297|  72.6k|        double              value_raw  = value.unsafe();
  298|  72.6k|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  299|       |
  300|  72.6k|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  301|  72.6k|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  302|       |
  303|  72.6k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  304|  72.6k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  305|       |
  306|  72.6k|        FloatRegister& first_reg = GetFloatRegister(id);
  307|  72.6k|        FloatRegister& second_reg =
  308|  72.6k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  309|       |
  310|  72.6k|        first_reg.SetValue(first_value);
  311|  72.6k|        second_reg.SetValue(second_value);
  312|       |
  313|  72.6k|        const phi::size_t id_value = phi::to_underlying(id);
  314|       |
  315|  72.6k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  316|  72.6k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  317|  72.6k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  318|  72.6k|    }
_ZN3dlx9Processor7GetFPSREv:
  321|   497k|    {
  322|   497k|        return m_FPSR;
  323|   497k|    }
_ZNK3dlx9Processor7GetFPSREv:
  326|   399k|    {
  327|   399k|        return m_FPSR;
  328|   399k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  331|   399k|    {
  332|   399k|        const StatusRegister& status_reg = GetFPSR();
  333|       |
  334|   399k|        return status_reg.Get();
  335|   399k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  338|   497k|    {
  339|   497k|        StatusRegister& status_reg = GetFPSR();
  340|       |
  341|   497k|        status_reg.SetStatus(value);
  342|   497k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  345|  5.56M|    {
  346|  5.56M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  347|       |
  348|  5.56M|        inst.Execute(*this);
  349|  5.56M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  352|  18.1k|    {
  353|  18.1k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (353:13): [True: 17.0k, False: 1.03k]
  ------------------
  354|  17.0k|        {
  355|  17.0k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  17.0k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  356|  17.0k|            return false;
  357|  17.0k|        }
  358|       |
  359|  1.03k|        m_CurrentProgram = &program;
  360|       |
  361|  1.03k|        m_ProgramCounter               = 0u;
  362|  1.03k|        m_Halted                       = false;
  363|  1.03k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  364|  1.03k|        m_LastRaisedException          = Exception::None;
  365|  1.03k|        m_CurrentStepCount             = 0u;
  366|       |
  367|  1.03k|        return true;
  368|  18.1k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  372|  1.97M|    {
  373|  1.97M|        return m_CurrentProgram;
  374|  1.97M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  377|  5.56M|    {
  378|       |        // No nothing when no program is loaded
  379|  5.56M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (379:13): [True: 0, False: 5.56M]
  ------------------
  380|      0|        {
  381|      0|            return;
  382|      0|        }
  383|       |
  384|       |        // Halt if there are no instruction to execute
  385|  5.56M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (385:13): [True: 71, False: 5.56M]
  ------------------
  386|     71|        {
  387|     71|            m_Halted                       = true;
  388|     71|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  389|     71|        }
  390|       |
  391|       |        // Do nothing when processor is halted
  392|  5.56M|        if (m_Halted)
  ------------------
  |  Branch (392:13): [True: 71, False: 5.56M]
  ------------------
  393|     71|        {
  394|     71|            return;
  395|     71|        }
  396|       |
  397|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  398|  5.56M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  399|       |
  400|       |        // Get current instruction pointed to by the program counter
  401|  5.56M|        const auto& current_instruction =
  402|  5.56M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  403|       |
  404|       |        // Execute current instruction
  405|  5.56M|        ExecuteInstruction(current_instruction);
  406|       |
  407|       |        // Stop executing if the last instruction halted the processor
  408|  5.56M|        if (m_Halted)
  ------------------
  |  Branch (408:13): [True: 153, False: 5.56M]
  ------------------
  409|    153|        {
  410|    153|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  411|    153|            return;
  412|    153|        }
  413|       |
  414|  5.56M|        m_ProgramCounter = m_NextProgramCounter;
  415|       |
  416|  5.56M|        ++m_CurrentStepCount;
  417|       |
  418|  5.56M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (418:13): [True: 808, False: 5.56M]
  |  Branch (418:14): [True: 5.56M, False: 0]
  |  Branch (418:42): [True: 556, False: 5.56M]
  ------------------
  419|  5.56M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (419:13): [True: 252, False: 5.56M]
  ------------------
  420|    808|        {
  421|    808|            m_Halted                       = true;
  422|    808|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  423|    808|        }
  424|  5.56M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  427|  1.03k|    {
  428|       |        // Do nothing when no program is loaded
  429|  1.03k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (429:13): [True: 0, False: 1.03k]
  ------------------
  430|      0|        {
  431|      0|            return;
  432|      0|        }
  433|       |
  434|  1.03k|        m_ProgramCounter               = 0u;
  435|  1.03k|        m_Halted                       = false;
  436|  1.03k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  437|  1.03k|        m_LastRaisedException          = Exception::None;
  438|  1.03k|        m_CurrentStepCount             = 0u;
  439|       |
  440|  5.56M|        while (!m_Halted)
  ------------------
  |  Branch (440:16): [True: 5.56M, False: 1.03k]
  ------------------
  441|  5.56M|        {
  442|  5.56M|            ExecuteStep();
  443|  5.56M|        }
  444|       |
  445|  1.03k|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  446|  1.03k|                   "RegisterAccessType was not reset correctly");
  447|  1.03k|    }
_ZN3dlx9Processor14ClearRegistersEv:
  463|  18.1k|    {
  464|  18.1k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (464:24): [True: 579k, False: 18.1k]
  ------------------
  465|   579k|        {
  466|   579k|            reg.SetSignedValue(0);
  467|   579k|        }
  468|       |
  469|  18.1k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (469:24): [True: 579k, False: 18.1k]
  ------------------
  470|   579k|        {
  471|   579k|            reg.SetValue(0.0f);
  472|   579k|        }
  473|       |
  474|  18.1k|        m_FPSR.SetStatus(false);
  475|  18.1k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  478|  18.1k|    {
  479|  18.1k|        m_MemoryBlock.Clear();
  480|  18.1k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  487|    157|    {
  488|    157|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  489|       |
  490|    157|        m_LastRaisedException = exception;
  491|       |
  492|    157|        switch (exception)
  493|    157|        {
  494|      4|            case Exception::DivideByZero:
  ------------------
  |  Branch (494:13): [True: 4, False: 153]
  ------------------
  495|      4|                m_Halted = true;
  496|      4|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  497|      4|                return;
  498|      0|            case Exception::Overflow:
  ------------------
  |  Branch (498:13): [True: 0, False: 157]
  ------------------
  499|      0|                DLX_WARN("Overflow");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  500|      0|                return;
  501|      0|            case Exception::Underflow:
  ------------------
  |  Branch (501:13): [True: 0, False: 157]
  ------------------
  502|      0|                DLX_WARN("Underflow");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  503|      0|                return;
  504|      0|            case Exception::Trap:
  ------------------
  |  Branch (504:13): [True: 0, False: 157]
  ------------------
  505|      0|                m_Halted = true;
  506|      0|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  507|      0|                return;
  508|      2|            case Exception::Halt:
  ------------------
  |  Branch (508:13): [True: 2, False: 155]
  ------------------
  509|      2|                m_Halted = true;
  510|      2|                return;
  511|    115|            case Exception::UnknownLabel:
  ------------------
  |  Branch (511:13): [True: 115, False: 42]
  ------------------
  512|    115|                m_Halted = true;
  513|    115|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|    115|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  514|    115|                return;
  515|      0|            case Exception::BadShift:
  ------------------
  |  Branch (515:13): [True: 0, False: 157]
  ------------------
  516|      0|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  517|      0|                return;
  518|     12|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (518:13): [True: 12, False: 145]
  ------------------
  519|     12|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|     12|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  520|     12|                m_Halted = true;
  521|     12|                return;
  522|     24|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (522:13): [True: 24, False: 133]
  ------------------
  523|     24|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     24|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  524|     24|                m_Halted = true;
  525|     24|                return;
  526|       |
  527|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  528|      0|            default:
  ------------------
  |  Branch (528:13): [True: 0, False: 157]
  ------------------
  529|      0|                PHI_ASSERT_NOT_REACHED();
  530|    157|#endif
  531|    157|        }
  532|       |
  533|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  534|      0|        PHI_ASSERT_NOT_REACHED();
  535|      0|#endif
  536|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  557|  37.3k|    {
  558|  37.3k|        return m_MemoryBlock;
  559|  37.3k|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  572|   208k|    {
  573|   208k|        return m_NextProgramCounter;
  574|   208k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  577|  1.97M|    {
  578|  1.97M|        m_NextProgramCounter = new_npc;
  579|  1.97M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   35|  6.45M|    {
   36|  6.45M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   37|  6.45M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   38|       |
   39|  6.45M|        switch (expected_access)
   40|  6.45M|        {
   41|  2.21M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (41:13): [True: 2.21M, False: 4.24M]
  ------------------
   42|  2.21M|                return true;
   43|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (43:13): [True: 0, False: 6.45M]
  ------------------
   44|      0|                return false;
   45|   205k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (45:13): [True: 205k, False: 6.25M]
  ------------------
   46|   205k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (46:24): [True: 102k, False: 102k]
  |  Branch (46:63): [True: 102k, False: 0]
  ------------------
   47|      0|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (47:13): [True: 0, False: 6.45M]
  ------------------
   48|      0|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (48:24): [True: 0, False: 0]
  ------------------
   49|      0|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (49:24): [True: 0, False: 0]
  ------------------
   50|  37.2k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (50:13): [True: 37.2k, False: 6.42M]
  ------------------
   51|  37.2k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (51:24): [True: 37.2k, False: 1]
  |  Branch (51:63): [True: 1, False: 0]
  ------------------
   52|      3|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (52:13): [True: 3, False: 6.45M]
  ------------------
   53|      3|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (53:24): [True: 3, False: 0]
  |  Branch (53:64): [True: 0, False: 0]
  ------------------
   54|  3.99M|            default:
  ------------------
  |  Branch (54:13): [True: 3.99M, False: 2.45M]
  ------------------
   55|  3.99M|                return expected_access == access;
   56|  6.45M|        }
   57|  6.45M|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  3.47M|    {
   14|  3.47M|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 599k, False: 2.87M]
  ------------------
   15|   599k|        {
   16|   599k|            char first_char = token[0];
   17|   599k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 12.3k, False: 587k]
  |  Branch (17:38): [True: 46.6k, False: 540k]
  ------------------
   18|  58.9k|            {
   19|  58.9k|                char second_char = token[1];
   20|  58.9k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 53.2k, False: 5.68k]
  |  Branch (20:43): [True: 31.6k, False: 21.6k]
  ------------------
   21|  31.6k|                {
   22|  31.6k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  31.6k|                }
   24|  58.9k|            }
   25|   599k|        }
   26|  2.87M|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 773k, False: 2.09M]
  ------------------
   27|   773k|        {
   28|   773k|            char first_char = token[0];
   29|   773k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 11.8k, False: 761k]
  |  Branch (29:38): [True: 42.2k, False: 719k]
  ------------------
   30|  54.1k|            {
   31|  54.1k|                char second_char = token[1];
   32|  54.1k|                char third_char  = token[2];
   33|       |
   34|  54.1k|                switch (second_char)
   35|  54.1k|                {
   36|  15.7k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 15.7k, False: 38.3k]
  ------------------
   37|  15.7k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 12.4k, False: 3.23k]
  |  Branch (37:50): [True: 8.37k, False: 4.11k]
  ------------------
   38|  8.37k|                        {
   39|  8.37k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  8.37k|                        }
   41|  7.35k|                        break;
   42|  15.7k|                    }
   43|  10.3k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 10.3k, False: 43.8k]
  ------------------
   44|  10.3k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 6.25k, False: 4.06k]
  |  Branch (44:50): [True: 3.70k, False: 2.55k]
  ------------------
   45|  3.70k|                        {
   46|  3.70k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  3.70k|                        }
   48|  6.61k|                        break;
   49|  10.3k|                    }
   50|  8.63k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 8.63k, False: 45.4k]
  ------------------
   51|  8.63k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 3.22k, False: 5.41k]
  |  Branch (51:50): [True: 4.56k, False: 851]
  ------------------
   52|  7.78k|                        {
   53|  7.78k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  7.78k|                        }
   55|    851|                        break;
   56|  8.63k|                    }
   57|  19.4k|                    default: {
  ------------------
  |  Branch (57:21): [True: 19.4k, False: 34.6k]
  ------------------
   58|  19.4k|                        break;
   59|  8.63k|                    }
   60|  54.1k|                }
   61|  54.1k|            }
   62|   773k|        }
   63|       |
   64|  3.42M|        return IntRegisterID::None;
   65|  3.47M|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|  3.42M|    {
   69|  3.42M|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 568k, False: 2.85M]
  ------------------
   70|   568k|        {
   71|   568k|            char first_char = token[0];
   72|   568k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 27.3k, False: 540k]
  |  Branch (72:38): [True: 25.2k, False: 515k]
  ------------------
   73|  52.5k|            {
   74|  52.5k|                char second_char = token[1];
   75|  52.5k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 38.9k, False: 13.6k]
  |  Branch (75:43): [True: 25.0k, False: 13.9k]
  ------------------
   76|  25.0k|                {
   77|  25.0k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  25.0k|                }
   79|  52.5k|            }
   80|   568k|        }
   81|  2.85M|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 753k, False: 2.09M]
  ------------------
   82|   753k|        {
   83|   753k|            char first_char = token[0];
   84|   753k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 23.8k, False: 730k]
  |  Branch (84:38): [True: 25.0k, False: 705k]
  ------------------
   85|  48.9k|            {
   86|  48.9k|                char second_char = token[1];
   87|  48.9k|                char third_char  = token[2];
   88|       |
   89|  48.9k|                switch (second_char)
   90|  48.9k|                {
   91|  10.0k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 10.0k, False: 38.8k]
  ------------------
   92|  10.0k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 5.87k, False: 4.18k]
  |  Branch (92:50): [True: 2.23k, False: 3.63k]
  ------------------
   93|  2.23k|                        {
   94|  2.23k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  2.23k|                        }
   96|  7.82k|                        break;
   97|  10.0k|                    }
   98|  10.8k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 10.8k, False: 38.0k]
  ------------------
   99|  10.8k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 10.1k, False: 666]
  |  Branch (99:50): [True: 3.16k, False: 7.01k]
  ------------------
  100|  3.16k|                        {
  101|  3.16k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  3.16k|                        }
  103|  7.67k|                        break;
  104|  10.8k|                    }
  105|  7.99k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 7.99k, False: 40.9k]
  ------------------
  106|  7.99k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 2.04k, False: 5.95k]
  |  Branch (106:50): [True: 2.24k, False: 3.70k]
  ------------------
  107|  4.28k|                        {
  108|  4.28k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  4.28k|                        }
  110|  3.70k|                        break;
  111|  7.99k|                    }
  112|  20.0k|                    default: {
  ------------------
  |  Branch (112:21): [True: 20.0k, False: 28.8k]
  ------------------
  113|  20.0k|                        break;
  114|  7.99k|                    }
  115|  48.9k|                }
  116|  48.9k|            }
  117|   753k|        }
  118|       |
  119|  3.38M|        return FloatRegisterID::None;
  120|  3.42M|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|  3.27M|    {
  124|  3.27M|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 642k, False: 2.63M]
  ------------------
  125|   642k|        {
  126|   642k|            char c1 = token[0];
  127|   642k|            char c2 = token[1];
  128|   642k|            char c3 = token[2];
  129|   642k|            char c4 = token[3];
  130|       |
  131|   642k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 14.0k, False: 628k]
  |  Branch (131:34): [True: 18.4k, False: 610k]
  |  Branch (131:49): [True: 2.52k, False: 29.9k]
  |  Branch (131:62): [True: 14.1k, False: 15.8k]
  ------------------
  132|   642k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 10.6k, False: 5.97k]
  |  Branch (132:34): [True: 3.07k, False: 2.90k]
  |  Branch (132:49): [True: 4.32k, False: 9.40k]
  |  Branch (132:62): [True: 9.10k, False: 300]
  ------------------
  133|   642k|        }
  134|       |
  135|  2.63M|        return false;
  136|  3.27M|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   515k|    {
   12|   515k|        m_Value = value;
   13|   515k|    }
_ZNK3dlx14StatusRegister3GetEv:
   16|   399k|    {
   17|   399k|        return m_Value;
   18|   399k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  4.49M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   734k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  10.9M|    {
   41|  10.9M|        return m_Type;
   42|  10.9M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  4.57M|    {
   51|  4.57M|        return m_LineNumber;
   52|  4.57M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  4.34M|    {
   56|  4.34M|        return m_Column;
   57|  4.34M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  5.31M|    {
   66|  5.31M|        return m_Text;
   67|  5.31M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   253k|    {
   80|   253k|        return m_HasHint;
   81|   253k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   289k|    {
   85|   289k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   289k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   289k|                   m_Type == Type::ImmediateInteger);
   88|   289k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   289k|        return m_Hint;
   91|   289k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  18.1k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  18.1k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  18.1k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  11.6k|    {
   51|  11.6k|        auto it = m_Iterator;
   52|  46.4k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 34.8k, False: 11.6k]
  ------------------
   53|  34.8k|        {
   54|  34.8k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 4, False: 34.8k]
  ------------------
   55|      4|            {
   56|      4|                return false;
   57|      4|            }
   58|  34.8k|        }
   59|       |
   60|  11.6k|        return true;
   61|  11.6k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  5.21M|    {
   65|  5.21M|        return m_Iterator != m_Tokens.end();
   66|  5.21M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  5.23M|    {
   70|  5.23M|        return m_Iterator == m_Tokens.end();
   71|  5.23M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  5.23M|    {
   85|  5.23M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  5.23M|        return *m_Iterator++;
   91|  5.23M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  11.6k|    {
  164|  11.6k|        return m_Iterator;
  165|  11.6k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  3.60k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  3.60k|        m_Iterator = it;
  179|  3.60k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  4.18k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  4.18k|        return m_Tokens.rbegin();
  224|  4.18k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  36.7k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  36.7k|        return m_Tokens.rend();
  233|  36.7k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  18.1k|    {
   63|  18.1k|        TokenStream tokens;
   64|       |
   65|  18.1k|        std::string_view current_token;
   66|       |
   67|  18.1k|        phi::u64 current_line_number{1u};
   68|  18.1k|        phi::u64 current_column{1u};
   69|  18.1k|        phi::u64 token_begin{0u};
   70|       |
   71|  18.1k|        phi::boolean parsing_comment{false};
   72|       |
   73|  13.0M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 13.0M, False: 18.1k]
  ------------------
   74|  13.0M|        {
   75|  13.0M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  13.0M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 602k, False: 12.4M]
  ------------------
   78|   602k|            {
   79|   602k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 121k, False: 481k]
  ------------------
   80|   121k|                {
   81|       |                    // Skip empty lines
   82|   121k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|   121k|                                        current_line_number, current_column);
   84|       |
   85|   121k|                    parsing_comment = false;
   86|   121k|                    current_line_number += 1u;
   87|   121k|                    current_column = 1u;
   88|   121k|                    continue;
   89|   121k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   481k|                tokens.emplace_back(
   93|   481k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   481k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   481k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   481k|                                    current_line_number, current_column);
   98|       |
   99|   481k|                current_token   = std::string_view{};
  100|   481k|                parsing_comment = false;
  101|   481k|                current_line_number += 1u;
  102|   481k|                current_column = 0u;
  103|   481k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  12.4M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 13.1k, False: 12.4M]
  |  Branch (105:34): [True: 11.0k, False: 12.4M]
  ------------------
  106|  24.1k|            {
  107|  24.1k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 8.93k, False: 15.2k]
  ------------------
  108|  8.93k|                {
  109|  8.93k|                    token_begin = i;
  110|  8.93k|                }
  111|  15.2k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 11.1k, False: 4.09k]
  ------------------
  112|  11.1k|                {
  113|  11.1k|                    tokens.emplace_back(ParseToken(
  114|  11.1k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  11.1k|                            current_line_number, current_column - current_token.length()));
  116|  11.1k|                    token_begin   = i;
  117|  11.1k|                    current_token = std::string_view{};
  118|  11.1k|                }
  119|       |
  120|  24.1k|                parsing_comment = true;
  121|  24.1k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  24.1k|            }
  123|  12.4M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 51.5k, False: 12.3M]
  ------------------
  124|  51.5k|            {
  125|       |                // simply append the character
  126|  51.5k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|  51.5k|            }
  128|  12.3M|            else
  129|  12.3M|            {
  130|       |                // Not parsing a comment
  131|  12.3M|                switch (c)
  132|  12.3M|                {
  133|   116k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 116k, False: 12.2M]
  ------------------
  134|   232k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 116k, False: 12.2M]
  ------------------
  135|   420k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 187k, False: 12.1M]
  ------------------
  136|   420k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 130k, False: 289k]
  ------------------
  137|   130k|                        {
  138|   130k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|   130k|                            continue;
  141|   130k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   289k|                        tokens.emplace_back(ParseToken(
  145|   289k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   289k|                                current_line_number, current_column - current_token.length()));
  147|   289k|                        current_token = std::string_view{};
  148|   289k|                        break;
  149|  1.03M|                    case ':':
  ------------------
  |  Branch (149:21): [True: 1.03M, False: 11.3M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  1.03M|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 804k, False: 226k]
  ------------------
  152|   804k|                        {
  153|   804k|                            current_token =
  154|   804k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|   804k|                            tokens.emplace_back(ParseToken(
  156|   804k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|   804k|                                    current_line_number,
  158|   804k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|   804k|                            current_token = std::string_view{};
  161|   804k|                        }
  162|   226k|                        else
  163|   226k|                        {
  164|       |                            // Orphan colon
  165|   226k|                            token_begin = i;
  166|       |
  167|   226k|                            tokens.emplace_back(Token::Type::Colon,
  168|   226k|                                                source.substr(token_begin.unsafe(), 1),
  169|   226k|                                                current_line_number, current_column);
  170|   226k|                        }
  171|  1.03M|                        break;
  172|   953k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 953k, False: 11.4M]
  ------------------
  173|  1.11M|                    case '(':
  ------------------
  |  Branch (173:21): [True: 166k, False: 12.2M]
  ------------------
  174|  1.59M|                    case ')':
  ------------------
  |  Branch (174:21): [True: 479k, False: 11.8M]
  ------------------
  175|  1.59M|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 1.20M, False: 395k]
  ------------------
  176|  1.20M|                        {
  177|  1.20M|                            tokens.emplace_back(ParseToken(
  178|  1.20M|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|  1.20M|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|  1.20M|                            current_token = std::string_view{};
  182|  1.20M|                        }
  183|       |
  184|  1.59M|                        Token::Type type;
  185|  1.59M|                        switch (c)
  186|  1.59M|                        {
  187|   953k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 953k, False: 646k]
  ------------------
  188|   953k|                                type = Token::Type::Comma;
  189|   953k|                                break;
  190|   166k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 166k, False: 1.43M]
  ------------------
  191|   166k|                                type = Token::Type::OpenBracket;
  192|   166k|                                break;
  193|   479k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 479k, False: 1.11M]
  ------------------
  194|   479k|                                type = Token::Type::ClosingBracket;
  195|   479k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 1.59M]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  1.59M|#endif
  201|  1.59M|                        }
  202|       |
  203|  1.59M|                        token_begin = i;
  204|       |
  205|  1.59M|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  1.59M|                                            current_line_number, current_column);
  207|  1.59M|                        break;
  208|       |
  209|  9.32M|                    default:
  ------------------
  |  Branch (209:21): [True: 9.32M, False: 3.05M]
  ------------------
  210|  9.32M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 2.78M, False: 6.53M]
  ------------------
  211|  2.78M|                        {
  212|  2.78M|                            token_begin = i;
  213|  2.78M|                        }
  214|       |
  215|       |                        // simply append the character
  216|  9.32M|                        current_token =
  217|  9.32M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  12.3M|                }
  219|  12.3M|            }
  220|       |
  221|  12.7M|            current_column += 1u;
  222|  12.7M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  18.1k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 13.1k, False: 4.99k]
  ------------------
  226|  13.1k|        {
  227|  13.1k|            tokens.emplace_back(
  228|  13.1k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  13.1k|                               current_line_number, current_column - current_token.length()));
  230|  13.1k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  18.1k|        tokens.finalize();
  234|       |
  235|  18.1k|        return tokens;
  236|  18.1k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  2.80M|    {
   11|  2.80M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 23.7k, False: 2.77M]
  |  Branch (11:35): [True: 14.8k, False: 8.82k]
  ------------------
   12|  14.8k|        {
   13|  14.8k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  14.8k|            if (number)
  ------------------
  |  Branch (15:17): [True: 5.65k, False: 9.23k]
  ------------------
   16|  5.65k|            {
   17|  5.65k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  5.65k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  5.65k|            }
   20|       |
   21|  9.23k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  14.8k|        }
   23|       |
   24|  2.78M|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 11.0k, False: 2.77M]
  |  Branch (24:35): [True: 9.02k, False: 2.76M]
  ------------------
   25|  20.0k|        {
   26|  20.0k|            return {Token::Type::Comment, token, line_number, column};
   27|  20.0k|        }
   28|       |
   29|  2.76M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 44.9k, False: 2.72M]
  ------------------
   30|  44.9k|        {
   31|  44.9k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  44.9k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  44.9k|        }
   34|       |
   35|  2.72M|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 9.98k, False: 2.71M]
  ------------------
   36|  9.98k|        {
   37|  9.98k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  9.98k|        }
   39|       |
   40|  2.71M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 45.5k, False: 2.66M]
  ------------------
   41|  45.5k|        {
   42|  45.5k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  45.5k|                    static_cast<std::uint32_t>(id)};
   44|  45.5k|        }
   45|       |
   46|  2.66M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 25.9k, False: 2.64M]
  ------------------
   47|  25.9k|        {
   48|  25.9k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  25.9k|                    static_cast<std::uint32_t>(id)};
   50|  25.9k|        }
   51|       |
   52|  2.64M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 612k, False: 2.02M]
  ------------------
   53|   612k|        {
   54|   612k|            return {Token::Type::OpCode, token, line_number, column,
   55|   612k|                    static_cast<std::uint32_t>(opcode)};
   56|   612k|        }
   57|       |
   58|  2.02M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|  2.64M|    }

LLVMFuzzerTestOneInput:
   12|  18.1k|{
   13|  18.1k|    static dlx::Processor processor;
   14|       |
   15|  18.1k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   16|       |
   17|       |    // Parse it
   18|  18.1k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  18.1k|    processor.ClearRegisters();
   22|  18.1k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  18.1k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 1.03k, False: 17.0k]
  ------------------
   26|  1.03k|    {
   27|  1.03k|        processor.ExecuteCurrentProgram();
   28|  1.03k|    }
   29|       |
   30|  18.1k|    return 0;
   31|  18.1k|}


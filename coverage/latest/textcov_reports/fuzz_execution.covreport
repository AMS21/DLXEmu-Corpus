_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   199k|        {
  169|   199k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   199k|            switch (index.unsafe())
  172|   199k|            {
  173|  87.6k|                case 0:
  ------------------
  |  Branch (173:17): [True: 87.6k, False: 111k]
  ------------------
  174|  87.6k|                    return m_Arg1Type;
  175|       |
  176|  57.4k|                case 1:
  ------------------
  |  Branch (176:17): [True: 57.4k, False: 142k]
  ------------------
  177|  57.4k|                    return m_Arg2Type;
  178|       |
  179|  54.5k|                case 2:
  ------------------
  |  Branch (179:17): [True: 54.5k, False: 145k]
  ------------------
  180|  54.5k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 199k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   199k|#endif
  187|   199k|            }
  188|   199k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  51.9k|        {
  195|  51.9k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  51.9k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 48.2k, False: 3.76k]
  ------------------
  199|  48.2k|            {
  200|  48.2k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  48.2k|            }
  202|  51.9k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 28.7k, False: 23.1k]
  ------------------
  203|  28.7k|            {
  204|  28.7k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  28.7k|            }
  206|  51.9k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 10.2k, False: 41.6k]
  ------------------
  207|  10.2k|            {
  208|  10.2k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  10.2k|            }
  210|       |
  211|  51.9k|            return number_of_argument_required;
  212|  51.9k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  7.10M|        {
  216|  7.10M|            return m_RegisterAccessType;
  217|  7.10M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  51.9k|        {
  221|  51.9k|            return m_Executor;
  222|  51.9k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  21.3M|    {
   38|  21.3M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  21.3M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  21.3M|                                         static_cast<underlying_t>(rhs));
   42|  21.3M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  21.3M|    {
   55|  21.3M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  21.3M|        return static_cast<underlying_t>(type & test) != 0;
   58|  21.3M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|   100k|    {
   32|   100k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 758, False: 99.9k]
  ------------------
   33|    758|        {
   34|    758|            return true;
   35|    758|        }
   36|       |
   37|  99.9k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 1.86k, False: 98.0k]
  ------------------
   38|  1.86k|        {
   39|  1.86k|            return true;
   40|  1.86k|        }
   41|       |
   42|  98.0k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 31.8k, False: 66.2k]
  ------------------
   43|  31.8k|        {
   44|  31.8k|            return true;
   45|  31.8k|        }
   46|       |
   47|  66.2k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 1.25k, False: 64.9k]
  ------------------
   48|  1.25k|        {
   49|  1.25k|            return true;
   50|  1.25k|        }
   51|       |
   52|  64.9k|        return false;
   53|  66.2k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  64.9k|    {
   57|  64.9k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 64.9k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  64.9k|        const char first_char = token.at(0);
   63|       |
   64|  64.9k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 15.6k, False: 49.3k]
  ------------------
   65|  15.6k|        {
   66|  15.6k|            return phi::is_alpha(first_char);
   67|  15.6k|        }
   68|       |
   69|  49.3k|        phi::boolean just_under_scores = (first_char == '_');
   70|  49.3k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 6.84k, False: 42.4k]
  |  Branch (70:15): [True: 39.6k, False: 9.65k]
  |  Branch (70:44): [True: 2.80k, False: 6.84k]
  ------------------
   71|  6.84k|        {
   72|  6.84k|            return false;
   73|  6.84k|        }
   74|       |
   75|   122k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 100k, False: 21.9k]
  ------------------
   76|   100k|        {
   77|   100k|            const char c{token.at(index)};
   78|       |
   79|   100k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 79.6k, False: 21.0k]
  ------------------
   80|  79.6k|            {
   81|  79.6k|                just_under_scores = false;
   82|  79.6k|            }
   83|  21.0k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 560, False: 20.5k]
  ------------------
   84|    560|            {
   85|    560|                continue;
   86|    560|            }
   87|  20.5k|            else
   88|  20.5k|            {
   89|  20.5k|                return false;
   90|  20.5k|            }
   91|   100k|        }
   92|       |
   93|  21.9k|        return !just_under_scores;
   94|  42.4k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   379k|    {
  101|   379k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 379k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   379k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 64.3k, False: 314k]
  ------------------
  107|  64.3k|        {
  108|  64.3k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 6.09k, False: 58.2k]
  ------------------
  109|  6.09k|            {
  110|  6.09k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  6.09k|            }
  112|       |
  113|  58.2k|            return {};
  114|  64.3k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   314k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 655, False: 314k]
  ------------------
  118|    655|        {
  119|    655|            return {};
  120|    655|        }
  121|       |
  122|   314k|        std::int32_t number{0};
  123|   314k|        phi::boolean is_negative{false};
  124|   314k|        phi::boolean starts_with_zero{false};
  125|   314k|        phi::boolean parsing_binary{false};
  126|   314k|        phi::boolean parsing_octal{false};
  127|   314k|        phi::boolean parsing_hexadecimal{false};
  128|   314k|        phi::boolean parsed_something{false};
  129|   314k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   343k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 340k, False: 3.86k]
  ------------------
  134|   340k|        {
  135|   340k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   340k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 314k, False: 26.1k]
  ------------------
  139|   314k|            {
  140|   314k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 815, False: 313k]
  ------------------
  141|    815|                {
  142|    815|                    continue;
  143|    815|                }
  144|       |
  145|   313k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 2.98k, False: 310k]
  ------------------
  146|  2.98k|                {
  147|  2.98k|                    is_negative = true;
  148|  2.98k|                    continue;
  149|  2.98k|                }
  150|       |
  151|   310k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 4.95k, False: 305k]
  ------------------
  152|  4.95k|                {
  153|  4.95k|                    starts_with_zero = true;
  154|  4.95k|                    continue;
  155|  4.95k|                }
  156|       |
  157|   305k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 767, False: 304k]
  ------------------
  158|    767|                {
  159|    767|                    return {};
  160|    767|                }
  161|   305k|            }
  162|       |
  163|       |            // Second character
  164|   330k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 12.2k, False: 318k]
  ------------------
  165|  12.2k|            {
  166|  12.2k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 4.95k, False: 7.30k]
  ------------------
  167|  4.95k|                {
  168|       |                    // Binary
  169|  4.95k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 226, False: 4.72k]
  |  Branch (169:37): [True: 339, False: 4.38k]
  ------------------
  170|    565|                    {
  171|    565|                        parsing_binary = true;
  172|    565|                        continue;
  173|    565|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  4.38k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 270, False: 4.11k]
  |  Branch (176:37): [True: 722, False: 3.39k]
  ------------------
  177|    992|                    {
  178|    992|                        parsing_hexadecimal = true;
  179|    992|                        continue;
  180|    992|                    }
  181|       |
  182|       |                    // Octal
  183|  3.39k|                    parsing_octal = true;
  184|  3.39k|                }
  185|  12.2k|            }
  186|       |
  187|       |            // Handle seperators
  188|   329k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 1.45k, False: 327k]
  ------------------
  189|  1.45k|            {
  190|  1.45k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 578, False: 879]
  ------------------
  191|    578|                {
  192|    578|                    return {};
  193|    578|                }
  194|       |
  195|    879|                parsed_separator = true;
  196|    879|                continue;
  197|  1.45k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   327k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 6.95k, False: 320k]
  |  Branch (200:32): [True: 354, False: 6.59k]
  ------------------
  201|    354|            {
  202|       |                // Would underflow
  203|    354|                return {};
  204|    354|            }
  205|   327k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 320k, False: 6.59k]
  |  Branch (205:17): [True: 665, False: 326k]
  |  Branch (205:33): [True: 665, False: 319k]
  ------------------
  206|    665|            {
  207|       |                // Would overflow
  208|    665|                return {};
  209|    665|            }
  210|       |
  211|   326k|            parsed_separator = false;
  212|   326k|            parsed_something = true;
  213|       |
  214|   326k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 757, False: 325k]
  ------------------
  215|    757|            {
  216|    757|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 339, False: 418]
  ------------------
  217|    339|                {
  218|    339|                    return {};
  219|    339|                }
  220|       |
  221|    418|                number <<= 1;
  222|    418|                number |= (c - '0');
  223|    418|            }
  224|   325k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 3.73k, False: 322k]
  ------------------
  225|  3.73k|            {
  226|  3.73k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 1.72k, False: 2.00k]
  ------------------
  227|  1.72k|                {
  228|  1.72k|                    return {};
  229|  1.72k|                }
  230|       |
  231|  2.00k|                number <<= 3;
  232|  2.00k|                number |= (c - '0');
  233|  2.00k|            }
  234|   322k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 2.28k, False: 319k]
  ------------------
  235|  2.28k|            {
  236|  2.28k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 770, False: 1.51k]
  ------------------
  237|    770|                {
  238|    770|                    return {};
  239|    770|                }
  240|       |
  241|  1.51k|                number <<= 4;
  242|  1.51k|                number |= phi::hex_digit_value(c).unsafe();
  243|  1.51k|            }
  244|   319k|            else
  245|   319k|            {
  246|   319k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 304k, False: 15.2k]
  ------------------
  247|   304k|                {
  248|   304k|                    return {};
  249|   304k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  15.2k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 5.77k, False: 9.43k]
  |  Branch (252:36): [True: 373, False: 5.40k]
  ------------------
  253|    373|                {
  254|    373|                    return {};
  255|    373|                }
  256|       |
  257|  14.8k|                number *= 10;
  258|  14.8k|                number += (c - '0');
  259|  14.8k|            }
  260|   326k|        }
  261|       |
  262|  3.86k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 3.57k, False: 286]
  ------------------
  263|  3.57k|        {
  264|       |            // Check for over/underflow
  265|  3.57k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 1.46k, False: 2.11k]
  |  Branch (265:32): [True: 498, False: 964]
  ------------------
  266|    498|            {
  267|       |                // Would underflow
  268|    498|                return {};
  269|    498|            }
  270|  3.08k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 2.11k, False: 964]
  |  Branch (270:17): [True: 388, False: 2.69k]
  |  Branch (270:33): [True: 388, False: 1.72k]
  ------------------
  271|    388|            {
  272|       |                // Would overflow
  273|    388|                return {};
  274|    388|            }
  275|       |
  276|  2.69k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 964, False: 1.72k]
  ------------------
  277|    964|            {
  278|    964|                return static_cast<std::int16_t>(-number);
  279|    964|            }
  280|       |
  281|  1.72k|            return static_cast<std::int16_t>(number);
  282|  2.69k|        }
  283|       |
  284|    286|        return {};
  285|  3.86k|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   411k|        {
   12|   411k|            m_Value = value;
   13|   411k|        }
_ZNK3dlx14StatusRegister3GetEv:
   16|   153k|        {
   17|   153k|            return m_Value;
   18|   153k|        }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  18.7k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  18.7k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 247k, False: 0]
  ------------------
   64|   247k|            {
   65|   247k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 18.7k, False: 228k]
  ------------------
   66|  18.7k|                {
   67|  18.7k|                    return &token;
   68|  18.7k|                }
   69|   247k|            }
   70|       |
   71|      0|            return nullptr;
   72|  18.7k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   111k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   111k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   111k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   382k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   382k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   382k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|   199k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   199k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   199k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|   663k|    {
   11|   663k|        m_Value = val;
   12|   663k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  1.70M|    {
   16|  1.70M|        return m_Value;
   17|  1.70M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  51.9k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  18.7k|    {
   25|  18.7k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  18.7k|        switch (argument_number.unsafe())
   28|  18.7k|        {
   29|  12.2k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 12.2k, False: 6.49k]
  ------------------
   30|  12.2k|                m_Arg1 = argument;
   31|  12.2k|                break;
   32|  3.95k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 3.95k, False: 14.7k]
  ------------------
   33|  3.95k|                m_Arg2 = argument;
   34|  3.95k|                break;
   35|  2.53k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 2.53k, False: 16.2k]
  ------------------
   36|  2.53k|                m_Arg3 = argument;
   37|  2.53k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 18.7k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  18.7k|#endif
   42|  18.7k|        }
   43|  18.7k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   83|  7.10M|    {
   84|  7.10M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   85|  7.10M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   88|  7.10M|    {
   89|  7.10M|        return m_Info;
   90|  7.10M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|   174k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   27|  42.9M|    {
   28|  42.9M|        return m_Type;
   29|  42.9M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  7.92M|    {
   78|  7.92M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  7.92M|        return register_int;
   81|  7.92M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   84|  1.53M|    {
   85|  1.53M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   86|       |
   87|  1.53M|        return register_float;
   88|  1.53M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   92|  1.15M|    {
   93|  1.15M|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   94|       |
   95|  1.15M|        return immediate_value;
   96|  1.15M|    }
_ZNK3dlx19InstructionArgument21AsAddressDisplacementEv:
  100|      4|    {
  101|      4|        PHI_ASSERT(m_Type == ArgumentType::AddressDisplacement);
  102|       |
  103|      4|        return address_displacement;
  104|      4|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  107|   430k|    {
  108|   430k|        PHI_ASSERT(m_Type == ArgumentType::Label);
  109|       |
  110|   430k|        return label;
  111|   430k|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  8.02k|    {
  171|  8.02k|        InstructionArgument arg;
  172|  8.02k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  8.02k|        arg.register_int.register_id = id;
  174|  8.02k|        return arg;
  175|  8.02k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  2.41k|    {
  179|  2.41k|        InstructionArgument arg;
  180|  2.41k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  2.41k|        arg.register_float.register_id = id;
  182|  2.41k|        return arg;
  183|  2.41k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  1.76k|    {
  187|  1.76k|        InstructionArgument arg;
  188|  1.76k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  1.76k|        arg.immediate_value.signed_value = value;
  190|  1.76k|        return arg;
  191|  1.76k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|    471|    {
  196|    471|        InstructionArgument arg;
  197|    471|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|    471|        arg.address_displacement.register_id  = id;
  199|    471|        arg.address_displacement.displacement = displacement;
  200|    471|        return arg;
  201|    471|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  6.07k|    {
  205|  6.07k|        InstructionArgument arg;
  206|  6.07k|        arg.m_Type           = ArgumentType::Label;
  207|  6.07k|        arg.label.label_name = label_name;
  208|  6.07k|        return arg;
  209|  6.07k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  351|  32.1k|        {
  352|  32.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  353|  32.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  354|  32.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  355|       |
  356|  32.1k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  357|  32.1k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  358|       |
  359|  32.1k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  360|  32.1k|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  364|  46.9k|        {
  365|  46.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  366|  46.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  367|  46.9k|            const auto& imm_value = arg3.AsImmediateValue();
  368|       |
  369|  46.9k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  370|       |
  371|  46.9k|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  372|  46.9k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  376|  15.4k|        {
  377|  15.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  378|  15.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  379|  15.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  380|       |
  381|  15.4k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  382|  15.4k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  383|       |
  384|  15.4k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  385|  15.4k|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  389|  21.0k|        {
  390|  21.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  391|  21.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  392|  21.0k|            const auto& imm_value = arg3.AsImmediateValue();
  393|       |
  394|  21.0k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  395|       |
  396|  21.0k|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  397|  21.0k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  401|  24.3k|        {
  402|  24.3k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  403|  24.3k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  404|  24.3k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  405|       |
  406|  24.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  407|  24.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  408|       |
  409|  24.3k|            const phi::f32 new_value = lhs_value + rhs_value;
  410|       |
  411|  24.3k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  412|  24.3k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  416|  16.1k|        {
  417|  16.1k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  418|  16.1k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  419|  16.1k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  420|       |
  421|  16.1k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  422|  16.1k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  423|       |
  424|  16.1k|            const phi::f64 new_value = lhs_value + rhs_value;
  425|       |
  426|  16.1k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  427|  16.1k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  431|   346k|        {
  432|   346k|            const auto& dest_reg = arg1.AsRegisterInt();
  433|   346k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  434|   346k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  435|       |
  436|   346k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  437|   346k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  438|       |
  439|   346k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  440|   346k|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  444|  24.9k|        {
  445|  24.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  446|  24.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  447|  24.9k|            const auto& imm_value = arg3.AsImmediateValue();
  448|       |
  449|  24.9k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  450|       |
  451|  24.9k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  452|  24.9k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  456|  71.4k|        {
  457|  71.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  458|  71.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  459|  71.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  460|       |
  461|  71.4k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  462|  71.4k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  463|       |
  464|  71.4k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  465|  71.4k|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  469|  41.8k|        {
  470|  41.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  471|  41.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  472|  41.8k|            const auto& imm_value = arg3.AsImmediateValue();
  473|       |
  474|  41.8k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  475|       |
  476|  41.8k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  477|  41.8k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  481|  11.3k|        {
  482|  11.3k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  483|  11.3k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  484|  11.3k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  485|       |
  486|  11.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  487|  11.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  488|       |
  489|  11.3k|            const phi::f32 new_value = lhs_value - rhs_value;
  490|       |
  491|  11.3k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  492|  11.3k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  496|  13.4k|        {
  497|  13.4k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  498|  13.4k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  499|  13.4k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  500|       |
  501|  13.4k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  502|  13.4k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  503|       |
  504|  13.4k|            const phi::f64 new_value = lhs_value - rhs_value;
  505|       |
  506|  13.4k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  507|  13.4k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  511|  14.8k|        {
  512|  14.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  513|  14.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  514|  14.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  515|       |
  516|  14.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  517|  14.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  518|       |
  519|  14.8k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  520|  14.8k|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  524|  35.0k|        {
  525|  35.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  526|  35.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  527|  35.0k|            const auto& imm_value = arg3.AsImmediateValue();
  528|       |
  529|  35.0k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  530|       |
  531|  35.0k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  532|  35.0k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  536|  19.1k|        {
  537|  19.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  538|  19.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  539|  19.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  540|       |
  541|  19.1k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  542|  19.1k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  543|       |
  544|  19.1k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  545|  19.1k|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  549|  16.1k|        {
  550|  16.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  551|  16.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  552|  16.1k|            const auto& imm_value = arg3.AsImmediateValue();
  553|       |
  554|  16.1k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  555|       |
  556|  16.1k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  557|  16.1k|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  561|  8.76k|        {
  562|  8.76k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  563|  8.76k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  564|  8.76k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  565|       |
  566|  8.76k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  567|  8.76k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  568|       |
  569|  8.76k|            const phi::f32 new_value = lhs_value * rhs_value;
  570|       |
  571|  8.76k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  572|  8.76k|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  576|  19.9k|        {
  577|  19.9k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  578|  19.9k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  579|  19.9k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  580|       |
  581|  19.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  582|  19.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  583|       |
  584|  19.9k|            const phi::f64 new_value = lhs_value * rhs_value;
  585|       |
  586|  19.9k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  587|  19.9k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  591|      1|        {
  592|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  593|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  594|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  595|       |
  596|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  597|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  598|       |
  599|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  600|      1|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  604|  30.0k|        {
  605|  30.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  606|  30.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  607|  30.0k|            const auto& imm_value = arg3.AsImmediateValue();
  608|       |
  609|  30.0k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  610|       |
  611|  30.0k|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  612|  30.0k|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  616|      1|        {
  617|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  618|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  619|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  620|       |
  621|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  622|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  623|       |
  624|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  625|      1|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  629|  22.5k|        {
  630|  22.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  631|  22.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  632|  22.5k|            const auto& imm_value = arg3.AsImmediateValue();
  633|       |
  634|  22.5k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  635|       |
  636|  22.5k|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  637|  22.5k|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  641|      1|        {
  642|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  643|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  644|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  645|       |
  646|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  647|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  648|       |
  649|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (649:17): [True: 1, False: 0]
  ------------------
  650|      1|            {
  651|      1|                processor.Raise(Exception::DivideByZero);
  652|      1|                return;
  653|      1|            }
  654|       |
  655|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  656|       |
  657|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  658|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  662|      1|        {
  663|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  664|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  665|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  666|       |
  667|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  668|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  669|       |
  670|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (670:17): [True: 1, False: 0]
  ------------------
  671|      1|            {
  672|      1|                processor.Raise(Exception::DivideByZero);
  673|      1|                return;
  674|      1|            }
  675|       |
  676|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  677|       |
  678|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  679|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  683|  42.7k|        {
  684|  42.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  685|  42.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  686|  42.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  687|       |
  688|  42.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  689|  42.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  690|       |
  691|  42.7k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  692|  42.7k|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  696|  42.3k|        {
  697|  42.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  698|  42.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  699|  42.3k|            const auto& imm_value = arg3.AsImmediateValue();
  700|       |
  701|  42.3k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  702|  42.3k|            phi::i32 shift_value = imm_value.signed_value;
  703|       |
  704|  42.3k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  705|  42.3k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  709|  43.6k|        {
  710|  43.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  711|  43.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  712|  43.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  713|       |
  714|  43.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  715|  43.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  716|       |
  717|  43.6k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  718|  43.6k|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  722|  62.4k|        {
  723|  62.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  724|  62.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  725|  62.4k|            const auto& imm_value = arg3.AsImmediateValue();
  726|       |
  727|  62.4k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  728|  62.4k|            phi::i32 shift_value = imm_value.signed_value;
  729|       |
  730|  62.4k|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  731|  62.4k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  735|  88.1k|        {
  736|  88.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  737|  88.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  738|  88.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  739|       |
  740|  88.1k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  741|  88.1k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  742|       |
  743|  88.1k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  744|  88.1k|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  748|  69.2k|        {
  749|  69.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  750|  69.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  751|  69.2k|            const auto& imm_value = arg3.AsImmediateValue();
  752|       |
  753|  69.2k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  754|  69.2k|            phi::i32 shift_value = imm_value.signed_value;
  755|       |
  756|  69.2k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  757|  69.2k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  761|  66.2k|        {
  762|  66.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  763|  66.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  764|  66.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  765|       |
  766|  66.2k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  767|  66.2k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  768|       |
  769|  66.2k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  770|  66.2k|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  774|  57.2k|        {
  775|  57.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  776|  57.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  777|  57.2k|            const auto& imm_value = arg3.AsImmediateValue();
  778|       |
  779|  57.2k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  780|  57.2k|            phi::i32 shift_value = imm_value.signed_value;
  781|       |
  782|  57.2k|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  783|  57.2k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  787|  17.9k|        {
  788|  17.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  789|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  790|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  791|       |
  792|  17.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  793|  17.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  794|  17.9k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  795|       |
  796|  17.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  797|  17.9k|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  801|  19.1k|        {
  802|  19.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  803|  19.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  804|  19.1k|            const auto& imm_value = arg3.AsImmediateValue();
  805|       |
  806|  19.1k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  807|  19.1k|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  808|       |
  809|  19.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  810|  19.1k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  814|   104k|        {
  815|   104k|            const auto& dest_reg = arg1.AsRegisterInt();
  816|   104k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  817|   104k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  818|       |
  819|   104k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  820|   104k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  821|   104k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  822|       |
  823|   104k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  824|   104k|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  828|  11.7k|        {
  829|  11.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  830|  11.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  831|  11.7k|            const auto& imm_value = arg3.AsImmediateValue();
  832|       |
  833|  11.7k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  834|  11.7k|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  835|       |
  836|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  837|  11.7k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  841|  52.6k|        {
  842|  52.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  843|  52.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  844|  52.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  845|       |
  846|  52.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  847|  52.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  848|  52.6k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  849|       |
  850|  52.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  851|  52.6k|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  855|  13.4k|        {
  856|  13.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  857|  13.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  858|  13.4k|            const auto& imm_value = arg3.AsImmediateValue();
  859|       |
  860|  13.4k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  861|  13.4k|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  862|       |
  863|  13.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  864|  13.4k|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  868|  14.0k|        {
  869|  14.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  870|  14.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  871|  14.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  872|       |
  873|  14.0k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  874|  14.0k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  875|       |
  876|  14.0k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (876:41): [True: 0, False: 14.0k]
  ------------------
  877|       |
  878|  14.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  879|  14.0k|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  883|  43.0k|        {
  884|  43.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  885|  43.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  886|  43.0k|            const auto& imm_value = arg3.AsImmediateValue();
  887|       |
  888|  43.0k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  889|       |
  890|  43.0k|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (890:41): [True: 35.4k, False: 7.57k]
  ------------------
  891|       |
  892|  43.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  893|  43.0k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  897|  21.9k|        {
  898|  21.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  899|  21.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  900|  21.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  901|       |
  902|  21.9k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  903|  21.9k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  904|       |
  905|  21.9k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (905:41): [True: 0, False: 21.9k]
  ------------------
  906|       |
  907|  21.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  908|  21.9k|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  912|  22.5k|        {
  913|  22.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  914|  22.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  915|  22.5k|            const auto& imm_value = arg3.AsImmediateValue();
  916|       |
  917|  22.5k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  918|       |
  919|  22.5k|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (919:41): [True: 22.5k, False: 0]
  ------------------
  920|       |
  921|  22.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  922|  22.5k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  926|  67.4k|        {
  927|  67.4k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  928|  67.4k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  929|       |
  930|  67.4k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  931|  67.4k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  932|       |
  933|  67.4k|            const phi::boolean new_value = (lhs_value < rhs_value);
  934|       |
  935|  67.4k|            processor.SetFPSRValue(new_value);
  936|  67.4k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  940|  8.87k|        {
  941|  8.87k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  942|  8.87k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  943|       |
  944|  8.87k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  945|  8.87k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  946|       |
  947|  8.87k|            const phi::boolean new_value = (lhs_value < rhs_value);
  948|       |
  949|  8.87k|            processor.SetFPSRValue(new_value);
  950|  8.87k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  954|  22.8k|        {
  955|  22.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  956|  22.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  957|  22.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  958|       |
  959|  22.8k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  960|  22.8k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  961|       |
  962|  22.8k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (962:41): [True: 1.81k, False: 21.0k]
  ------------------
  963|       |
  964|  22.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  965|  22.8k|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  969|  26.5k|        {
  970|  26.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  971|  26.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  972|  26.5k|            const auto& imm_value = arg3.AsImmediateValue();
  973|       |
  974|  26.5k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  975|       |
  976|  26.5k|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (976:41): [True: 0, False: 26.5k]
  ------------------
  977|       |
  978|  26.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  979|  26.5k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  983|  26.3k|        {
  984|  26.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  985|  26.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  986|  26.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  987|       |
  988|  26.3k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  989|  26.3k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  990|       |
  991|  26.3k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (991:41): [True: 3.99k, False: 22.3k]
  ------------------
  992|       |
  993|  26.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  994|  26.3k|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  998|  31.0k|        {
  999|  31.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1000|  31.0k|            const auto& src_reg   = arg2.AsRegisterInt();
 1001|  31.0k|            const auto& imm_value = arg3.AsImmediateValue();
 1002|       |
 1003|  31.0k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1004|       |
 1005|  31.0k|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1005:41): [True: 0, False: 31.0k]
  ------------------
 1006|       |
 1007|  31.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1008|  31.0k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1012|  85.6k|        {
 1013|  85.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1014|  85.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1015|       |
 1016|  85.6k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1017|  85.6k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1018|       |
 1019|  85.6k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1020|       |
 1021|  85.6k|            processor.SetFPSRValue(new_value);
 1022|  85.6k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1026|  24.3k|        {
 1027|  24.3k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1028|  24.3k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1029|       |
 1030|  24.3k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1031|  24.3k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1032|       |
 1033|  24.3k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1034|       |
 1035|  24.3k|            processor.SetFPSRValue(new_value);
 1036|  24.3k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1040|   300k|        {
 1041|   300k|            const auto& dest_reg = arg1.AsRegisterInt();
 1042|   300k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1043|   300k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1044|       |
 1045|   300k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1046|   300k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1047|       |
 1048|   300k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1048:41): [True: 214k, False: 85.4k]
  ------------------
 1049|       |
 1050|   300k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1051|   300k|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1055|  27.6k|        {
 1056|  27.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1057|  27.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1058|  27.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1059|       |
 1060|  27.6k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1061|       |
 1062|  27.6k|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1062:41): [True: 27.6k, False: 0]
  ------------------
 1063|       |
 1064|  27.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1065|  27.6k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1069|  23.5k|        {
 1070|  23.5k|            const auto& dest_reg = arg1.AsRegisterInt();
 1071|  23.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1072|  23.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1073|       |
 1074|  23.5k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1075|  23.5k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1076|       |
 1077|  23.5k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1077:41): [True: 23.5k, False: 0]
  ------------------
 1078|       |
 1079|  23.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1080|  23.5k|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1084|  19.6k|        {
 1085|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1086|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1087|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1088|       |
 1089|  19.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1090|       |
 1091|  19.6k|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1091:41): [True: 19.6k, False: 0]
  ------------------
 1092|       |
 1093|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1094|  19.6k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1098|  20.9k|        {
 1099|  20.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1100|  20.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1101|       |
 1102|  20.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1103|  20.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1104|       |
 1105|  20.9k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1106|       |
 1107|  20.9k|            processor.SetFPSRValue(new_value);
 1108|  20.9k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1112|  44.3k|        {
 1113|  44.3k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1114|  44.3k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1115|       |
 1116|  44.3k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1117|  44.3k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1118|       |
 1119|  44.3k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1120|       |
 1121|  44.3k|            processor.SetFPSRValue(new_value);
 1122|  44.3k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1126|  17.4k|        {
 1127|  17.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1128|  17.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1129|  17.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1130|       |
 1131|  17.4k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1132|  17.4k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1133|       |
 1134|  17.4k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1134:41): [True: 15.4k, False: 2.00k]
  ------------------
 1135|       |
 1136|  17.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1137|  17.4k|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1141|  24.3k|        {
 1142|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1143|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1144|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1145|       |
 1146|  24.3k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1147|       |
 1148|  24.3k|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1148:41): [True: 5.83k, False: 18.4k]
  ------------------
 1149|       |
 1150|  24.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1151|  24.3k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1155|  11.5k|        {
 1156|  11.5k|            const auto& dest_reg = arg1.AsRegisterInt();
 1157|  11.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1158|  11.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1159|       |
 1160|  11.5k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1161|  11.5k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1162|       |
 1163|  11.5k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1163:41): [True: 11.5k, False: 0]
  ------------------
 1164|       |
 1165|  11.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1166|  11.5k|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1170|  19.6k|        {
 1171|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1172|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1173|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1174|       |
 1175|  19.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1176|       |
 1177|  19.6k|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1177:41): [True: 3.33k, False: 16.3k]
  ------------------
 1178|       |
 1179|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1180|  19.6k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1184|  22.7k|        {
 1185|  22.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1186|  22.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1187|       |
 1188|  22.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1189|  22.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1190|       |
 1191|  22.7k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1192|       |
 1193|  22.7k|            processor.SetFPSRValue(new_value);
 1194|  22.7k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1198|  27.6k|        {
 1199|  27.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1200|  27.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1201|       |
 1202|  27.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1203|  27.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1204|       |
 1205|  27.6k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1206|       |
 1207|  27.6k|            processor.SetFPSRValue(new_value);
 1208|  27.6k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1212|  20.9k|        {
 1213|  20.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1214|  20.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1215|  20.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1216|       |
 1217|  20.9k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1218|  20.9k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1219|       |
 1220|  20.9k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1220:41): [True: 20.0k, False: 909]
  ------------------
 1221|       |
 1222|  20.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1223|  20.9k|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1227|  31.8k|        {
 1228|  31.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1229|  31.8k|            const auto& src_reg   = arg2.AsRegisterInt();
 1230|  31.8k|            const auto& imm_value = arg3.AsImmediateValue();
 1231|       |
 1232|  31.8k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1233|       |
 1234|  31.8k|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1234:41): [True: 1, False: 31.8k]
  ------------------
 1235|       |
 1236|  31.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1237|  31.8k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1241|  20.4k|        {
 1242|  20.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1243|  20.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1244|  20.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1245|       |
 1246|  20.4k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1247|  20.4k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1248|       |
 1249|  20.4k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1249:41): [True: 20.4k, False: 0]
  ------------------
 1250|       |
 1251|  20.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1252|  20.4k|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1256|  30.0k|        {
 1257|  30.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1258|  30.0k|            const auto& src_reg   = arg2.AsRegisterInt();
 1259|  30.0k|            const auto& imm_value = arg3.AsImmediateValue();
 1260|       |
 1261|  30.0k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1262|       |
 1263|  30.0k|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1263:41): [True: 2, False: 30.0k]
  ------------------
 1264|       |
 1265|  30.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1266|  30.0k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1270|  22.5k|        {
 1271|  22.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1272|  22.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1273|       |
 1274|  22.5k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1275|  22.5k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1276|       |
 1277|  22.5k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1278|       |
 1279|  22.5k|            processor.SetFPSRValue(new_value);
 1280|  22.5k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1284|  27.6k|        {
 1285|  27.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1286|  27.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1287|       |
 1288|  27.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1289|  27.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1290|       |
 1291|  27.6k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1292|       |
 1293|  27.6k|            processor.SetFPSRValue(new_value);
 1294|  27.6k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1298|  25.4k|        {
 1299|  25.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1300|  25.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1301|  25.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1302|       |
 1303|  25.4k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1304|  25.4k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1305|       |
 1306|  25.4k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1306:41): [True: 0, False: 25.4k]
  ------------------
 1307|       |
 1308|  25.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1309|  25.4k|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1313|  26.1k|        {
 1314|  26.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1315|  26.1k|            const auto& src_reg   = arg2.AsRegisterInt();
 1316|  26.1k|            const auto& imm_value = arg3.AsImmediateValue();
 1317|       |
 1318|  26.1k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1319|       |
 1320|  26.1k|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1320:41): [True: 22.4k, False: 3.66k]
  ------------------
 1321|       |
 1322|  26.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1323|  26.1k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1327|  17.9k|        {
 1328|  17.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1329|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1330|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1331|       |
 1332|  17.9k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1333|  17.9k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1334|       |
 1335|  17.9k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1335:41): [True: 0, False: 17.9k]
  ------------------
 1336|       |
 1337|  17.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1338|  17.9k|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1342|  19.6k|        {
 1343|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1344|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1345|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1346|       |
 1347|  19.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1348|       |
 1349|  19.6k|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1349:41): [True: 19.6k, False: 0]
  ------------------
 1350|       |
 1351|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1352|  19.6k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1356|  30.0k|        {
 1357|  30.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1358|  30.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1359|       |
 1360|  30.0k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1361|  30.0k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1362|       |
 1363|  30.0k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1364|       |
 1365|  30.0k|            processor.SetFPSRValue(new_value);
 1366|  30.0k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1370|  22.7k|        {
 1371|  22.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1372|  22.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1373|       |
 1374|  22.7k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1375|  22.7k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1376|       |
 1377|  22.7k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1378|       |
 1379|  22.7k|            processor.SetFPSRValue(new_value);
 1380|  22.7k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1384|  72.8k|        {
 1385|  72.8k|            const auto& test_reg   = arg1.AsRegisterInt();
 1386|  72.8k|            const auto& jump_label = arg2.AsLabel();
 1387|       |
 1388|  72.8k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1389|       |
 1390|  72.8k|            if (test_value == 0)
  ------------------
  |  Branch (1390:17): [True: 64.9k, False: 7.95k]
  ------------------
 1391|  64.9k|            {
 1392|  64.9k|                JumpToLabel(processor, jump_label.label_name);
 1393|  64.9k|            }
 1394|  72.8k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1398|  17.9k|        {
 1399|  17.9k|            const auto& test_reg   = arg1.AsRegisterInt();
 1400|  17.9k|            const auto& jump_label = arg2.AsLabel();
 1401|       |
 1402|  17.9k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1403|       |
 1404|  17.9k|            if (test_value != 0)
  ------------------
  |  Branch (1404:17): [True: 1, False: 17.9k]
  ------------------
 1405|      1|            {
 1406|      1|                JumpToLabel(processor, jump_label.label_name);
 1407|      1|            }
 1408|  17.9k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1412|  51.6k|        {
 1413|  51.6k|            const auto& jump_label = arg1.AsLabel();
 1414|       |
 1415|  51.6k|            phi::boolean test_value = processor.GetFPSRValue();
 1416|       |
 1417|  51.6k|            if (test_value)
  ------------------
  |  Branch (1417:17): [True: 1, False: 51.6k]
  ------------------
 1418|      1|            {
 1419|      1|                JumpToLabel(processor, jump_label.label_name);
 1420|      1|            }
 1421|  51.6k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1425|   102k|        {
 1426|   102k|            const auto& jump_label = arg1.AsLabel();
 1427|       |
 1428|   102k|            phi::boolean test_value = processor.GetFPSRValue();
 1429|       |
 1430|   102k|            if (!test_value)
  ------------------
  |  Branch (1430:17): [True: 64.8k, False: 37.3k]
  ------------------
 1431|  64.8k|            {
 1432|  64.8k|                JumpToLabel(processor, jump_label.label_name);
 1433|  64.8k|            }
 1434|   102k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1438|   129k|        {
 1439|   129k|            const auto& jump_label = arg1.AsLabel();
 1440|       |
 1441|   129k|            JumpToLabel(processor, jump_label.label_name);
 1442|   129k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1446|  1.58M|        {
 1447|  1.58M|            const auto& jump_register = arg1.AsRegisterInt();
 1448|       |
 1449|  1.58M|            JumpToRegister(processor, jump_register.register_id);
 1450|  1.58M|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1454|  56.0k|        {
 1455|  56.0k|            const auto& jump_label = arg1.AsLabel();
 1456|       |
 1457|  56.0k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1458|  56.0k|                                                  processor.GetNextProgramCounter());
 1459|       |
 1460|  56.0k|            JumpToLabel(processor, jump_label.label_name);
 1461|  56.0k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1465|  27.3k|        {
 1466|  27.3k|            const auto& jump_register = arg1.AsRegisterInt();
 1467|       |
 1468|  27.3k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1469|  27.3k|                                                  processor.GetNextProgramCounter());
 1470|       |
 1471|  27.3k|            JumpToRegister(processor, jump_register.register_id);
 1472|  27.3k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1476|  9.29k|        {
 1477|  9.29k|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1478|  9.29k|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1479|       |
 1480|  9.29k|            imm_value = static_cast<std::int32_t>((imm_value << 16) & 0xFFFF0000);
 1481|       |
 1482|  9.29k|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1483|  9.29k|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1487|  15.0k|        {
 1488|  15.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1489|       |
 1490|  15.0k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1491|       |
 1492|  15.0k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1492:17): [True: 1, False: 15.0k]
  ------------------
 1493|      1|            {
 1494|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1495|      1|                return;
 1496|      1|            }
 1497|       |
 1498|  15.0k|            phi::i32 address = optional_address.value();
 1499|       |
 1500|  15.0k|            auto optional_value =
 1501|  15.0k|                    processor.GetMemory().LoadByte(static_cast<std::size_t>(address.unsafe()));
 1502|       |
 1503|  15.0k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1503:17): [True: 2, False: 15.0k]
  ------------------
 1504|      2|            {
 1505|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1506|      2|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1507|      2|                return;
 1508|      2|            }
 1509|       |
 1510|  15.0k|            phi::i32 value = optional_value.value();
 1511|       |
 1512|  15.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1513|  15.0k|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1517|  15.9k|        {
 1518|  15.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1519|       |
 1520|  15.9k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1521|       |
 1522|  15.9k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1522:17): [True: 1, False: 15.9k]
  ------------------
 1523|      1|            {
 1524|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1525|      1|                return;
 1526|      1|            }
 1527|       |
 1528|  15.9k|            phi::i32 address = optional_address.value();
 1529|       |
 1530|  15.9k|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1531|  15.9k|                    static_cast<std::size_t>(address.unsafe()));
 1532|       |
 1533|  15.9k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1533:17): [True: 2, False: 15.9k]
  ------------------
 1534|      2|            {
 1535|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1536|      2|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1537|      2|                return;
 1538|      2|            }
 1539|       |
 1540|  15.9k|            phi::u32 value = optional_value.value();
 1541|       |
 1542|  15.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1543|  15.9k|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1547|  27.9k|        {
 1548|  27.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1549|       |
 1550|  27.9k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1551|       |
 1552|  27.9k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1552:17): [True: 1, False: 27.9k]
  ------------------
 1553|      1|            {
 1554|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1555|      1|                return;
 1556|      1|            }
 1557|       |
 1558|  27.9k|            phi::i32 address = optional_address.value();
 1559|       |
 1560|  27.9k|            auto optional_value =
 1561|  27.9k|                    processor.GetMemory().LoadHalfWord(static_cast<std::size_t>(address.unsafe()));
 1562|       |
 1563|  27.9k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1563:17): [True: 4, False: 27.9k]
  ------------------
 1564|      4|            {
 1565|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1566|      4|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1567|      4|                return;
 1568|      4|            }
 1569|       |
 1570|  27.9k|            phi::i32 value = optional_value.value();
 1571|       |
 1572|  27.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1573|  27.9k|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1577|  10.3k|        {
 1578|  10.3k|            const auto& dest_reg = arg1.AsRegisterInt();
 1579|       |
 1580|  10.3k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1581|       |
 1582|  10.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1582:17): [True: 1, False: 10.3k]
  ------------------
 1583|      1|            {
 1584|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1585|      1|                return;
 1586|      1|            }
 1587|       |
 1588|  10.3k|            phi::i32 address = optional_address.value();
 1589|       |
 1590|  10.3k|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1591|  10.3k|                    static_cast<std::size_t>(address.unsafe()));
 1592|       |
 1593|  10.3k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1593:17): [True: 9, False: 10.3k]
  ------------------
 1594|      9|            {
 1595|      9|                processor.Raise(Exception::AddressOutOfBounds);
 1596|      9|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      9|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1597|      9|                return;
 1598|      9|            }
 1599|       |
 1600|  10.3k|            phi::u32 value = optional_value.value();
 1601|       |
 1602|  10.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1603|  10.3k|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1607|  8.34k|        {
 1608|  8.34k|            const auto& dest_reg = arg1.AsRegisterInt();
 1609|       |
 1610|  8.34k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1611|       |
 1612|  8.34k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1612:17): [True: 1, False: 8.33k]
  ------------------
 1613|      1|            {
 1614|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1615|      1|                return;
 1616|      1|            }
 1617|       |
 1618|  8.33k|            phi::i32 address = optional_address.value();
 1619|       |
 1620|  8.33k|            auto optional_value =
 1621|  8.33k|                    processor.GetMemory().LoadWord(static_cast<std::size_t>(address.unsafe()));
 1622|       |
 1623|  8.33k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1623:17): [True: 3, False: 8.33k]
  ------------------
 1624|      3|            {
 1625|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1626|      3|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1627|      3|                return;
 1628|      3|            }
 1629|       |
 1630|  8.33k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1631|  8.33k|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1635|  10.7k|        {
 1636|  10.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1637|       |
 1638|  10.7k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1639|       |
 1640|  10.7k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1640:17): [True: 1, False: 10.7k]
  ------------------
 1641|      1|            {
 1642|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1643|      1|                return;
 1644|      1|            }
 1645|       |
 1646|  10.7k|            phi::i32 address = optional_address.value();
 1647|       |
 1648|  10.7k|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1649|  10.7k|                    static_cast<std::size_t>(address.unsafe()));
 1650|       |
 1651|  10.7k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1651:17): [True: 3, False: 10.7k]
  ------------------
 1652|      3|            {
 1653|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1654|      3|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1655|      3|                return;
 1656|      3|            }
 1657|       |
 1658|  10.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1659|  10.7k|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1663|  13.2k|        {
 1664|  13.2k|            const auto& dest_reg = arg1.AsRegisterFloat();
 1665|       |
 1666|  13.2k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1667|       |
 1668|  13.2k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1668:17): [True: 1, False: 13.2k]
  ------------------
 1669|      1|            {
 1670|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1671|      1|                return;
 1672|      1|            }
 1673|       |
 1674|  13.2k|            phi::i32 address = optional_address.value();
 1675|       |
 1676|  13.2k|            auto optional_value =
 1677|  13.2k|                    processor.GetMemory().LoadFloat(static_cast<std::size_t>(address.unsafe()));
 1678|       |
 1679|  13.2k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1679:17): [True: 5, False: 13.2k]
  ------------------
 1680|      5|            {
 1681|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1682|      5|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1683|      5|                return;
 1684|      5|            }
 1685|       |
 1686|  13.2k|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1687|  13.2k|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1691|  29.7k|        {
 1692|  29.7k|            const auto& dest_reg = arg1.AsRegisterFloat();
 1693|       |
 1694|  29.7k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1695|       |
 1696|  29.7k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1696:17): [True: 1, False: 29.7k]
  ------------------
 1697|      1|            {
 1698|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1699|      1|                return;
 1700|      1|            }
 1701|       |
 1702|  29.7k|            phi::i32 address = optional_address.value();
 1703|       |
 1704|  29.7k|            auto optional_value =
 1705|  29.7k|                    processor.GetMemory().LoadDouble(static_cast<std::size_t>(address.unsafe()));
 1706|       |
 1707|  29.7k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1707:17): [True: 5, False: 29.7k]
  ------------------
 1708|      5|            {
 1709|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1710|      5|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1711|      5|                return;
 1712|      5|            }
 1713|       |
 1714|  29.7k|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1715|  29.7k|        }
_ZN3dlx4impl2SBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1719|  22.5k|        {
 1720|  22.5k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1721|       |
 1722|  22.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1722:17): [True: 1, False: 22.5k]
  ------------------
 1723|      1|            {
 1724|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1725|      1|                return;
 1726|      1|            }
 1727|       |
 1728|  22.5k|            phi::i32 address = optional_address.value();
 1729|       |
 1730|  22.5k|            const auto& src_reg = arg2.AsRegisterInt();
 1731|       |
 1732|  22.5k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1733|       |
 1734|  22.5k|            phi::boolean success =
 1735|  22.5k|                    processor.GetMemory().StoreByte(static_cast<std::size_t>(address.unsafe()),
 1736|  22.5k|                                                    static_cast<std::int8_t>(value.unsafe()));
 1737|       |
 1738|  22.5k|            if (!success)
  ------------------
  |  Branch (1738:17): [True: 5, False: 22.5k]
  ------------------
 1739|      5|            {
 1740|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1741|      5|                DLX_ERROR("Failed to store byte at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1742|      5|            }
 1743|  22.5k|        }
_ZN3dlx4impl3SBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1747|  22.5k|        {
 1748|  22.5k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1749|       |
 1750|  22.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1750:17): [True: 1, False: 22.5k]
  ------------------
 1751|      1|            {
 1752|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1753|      1|                return;
 1754|      1|            }
 1755|       |
 1756|  22.5k|            phi::i32 address = optional_address.value();
 1757|       |
 1758|  22.5k|            const auto& src_reg = arg2.AsRegisterInt();
 1759|       |
 1760|  22.5k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1761|       |
 1762|  22.5k|            phi::boolean success = processor.GetMemory().StoreUnsignedByte(
 1763|  22.5k|                    static_cast<std::size_t>(address.unsafe()),
 1764|  22.5k|                    static_cast<std::uint8_t>(value.unsafe()));
 1765|       |
 1766|  22.5k|            if (!success)
  ------------------
  |  Branch (1766:17): [True: 4, False: 22.5k]
  ------------------
 1767|      4|            {
 1768|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1769|      4|                DLX_ERROR("Failed to store unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1770|      4|            }
 1771|  22.5k|        }
_ZN3dlx4impl2SHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1775|  25.3k|        {
 1776|  25.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1777|       |
 1778|  25.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1778:17): [True: 1, False: 25.3k]
  ------------------
 1779|      1|            {
 1780|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1781|      1|                return;
 1782|      1|            }
 1783|       |
 1784|  25.3k|            phi::i32 address = optional_address.value();
 1785|       |
 1786|  25.3k|            const auto& src_reg = arg2.AsRegisterInt();
 1787|       |
 1788|  25.3k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1789|       |
 1790|  25.3k|            phi::boolean success =
 1791|  25.3k|                    processor.GetMemory().StoreHalfWord(static_cast<std::size_t>(address.unsafe()),
 1792|  25.3k|                                                        static_cast<std::int16_t>(value.unsafe()));
 1793|       |
 1794|  25.3k|            if (!success)
  ------------------
  |  Branch (1794:17): [True: 3, False: 25.3k]
  ------------------
 1795|      3|            {
 1796|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1797|      3|                DLX_ERROR("Failed to store half word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1798|      3|            }
 1799|  25.3k|        }
_ZN3dlx4impl3SHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1803|  24.3k|        {
 1804|  24.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1805|       |
 1806|  24.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1806:17): [True: 1, False: 24.3k]
  ------------------
 1807|      1|            {
 1808|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1809|      1|                return;
 1810|      1|            }
 1811|       |
 1812|  24.3k|            phi::i32 address = optional_address.value();
 1813|       |
 1814|  24.3k|            const auto& src_reg = arg2.AsRegisterInt();
 1815|       |
 1816|  24.3k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1817|       |
 1818|  24.3k|            phi::boolean success = processor.GetMemory().StoreUnsignedHalfWord(
 1819|  24.3k|                    static_cast<std::size_t>(address.unsafe()),
 1820|  24.3k|                    static_cast<std::uint16_t>(value.unsafe()));
 1821|       |
 1822|  24.3k|            if (!success)
  ------------------
  |  Branch (1822:17): [True: 3, False: 24.3k]
  ------------------
 1823|      3|            {
 1824|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1825|      3|                DLX_ERROR("Failed to store unsigned half word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1826|      3|            }
 1827|  24.3k|        }
_ZN3dlx4impl2SWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1831|  21.2k|        {
 1832|  21.2k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1833|       |
 1834|  21.2k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1834:17): [True: 1, False: 21.2k]
  ------------------
 1835|      1|            {
 1836|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1837|      1|                return;
 1838|      1|            }
 1839|       |
 1840|  21.2k|            phi::i32 address = optional_address.value();
 1841|       |
 1842|  21.2k|            const auto& src_reg = arg2.AsRegisterInt();
 1843|       |
 1844|  21.2k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1845|       |
 1846|  21.2k|            phi::boolean success = processor.GetMemory().StoreWord(
 1847|  21.2k|                    static_cast<std::size_t>(address.unsafe()), value);
 1848|       |
 1849|  21.2k|            if (!success)
  ------------------
  |  Branch (1849:17): [True: 2, False: 21.2k]
  ------------------
 1850|      2|            {
 1851|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1852|      2|                DLX_ERROR("Failed to store word at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1853|      2|            }
 1854|  21.2k|        }
_ZN3dlx4impl3SWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1858|  17.9k|        {
 1859|  17.9k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1860|       |
 1861|  17.9k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1861:17): [True: 1, False: 17.9k]
  ------------------
 1862|      1|            {
 1863|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1864|      1|                return;
 1865|      1|            }
 1866|       |
 1867|  17.9k|            phi::i32 address = optional_address.value();
 1868|       |
 1869|  17.9k|            const auto& src_reg = arg2.AsRegisterInt();
 1870|       |
 1871|  17.9k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1872|       |
 1873|  17.9k|            phi::boolean success = processor.GetMemory().StoreUnsignedWord(
 1874|  17.9k|                    static_cast<std::size_t>(address.unsafe()), value);
 1875|       |
 1876|  17.9k|            if (!success)
  ------------------
  |  Branch (1876:17): [True: 3, False: 17.9k]
  ------------------
 1877|      3|            {
 1878|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1879|      3|                DLX_ERROR("Failed to store unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1880|      3|            }
 1881|  17.9k|        }
_ZN3dlx4impl2SFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1885|  18.3k|        {
 1886|  18.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1887|       |
 1888|  18.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1888:17): [True: 1, False: 18.3k]
  ------------------
 1889|      1|            {
 1890|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1891|      1|                return;
 1892|      1|            }
 1893|       |
 1894|  18.3k|            phi::i32 address = optional_address.value();
 1895|       |
 1896|  18.3k|            const auto& src_reg = arg2.AsRegisterFloat();
 1897|       |
 1898|  18.3k|            phi::f32 value = processor.FloatRegisterGetFloatValue(src_reg.register_id);
 1899|       |
 1900|  18.3k|            phi::boolean success = processor.GetMemory().StoreFloat(
 1901|  18.3k|                    static_cast<std::size_t>(address.unsafe()), value);
 1902|       |
 1903|  18.3k|            if (!success)
  ------------------
  |  Branch (1903:17): [True: 4, False: 18.3k]
  ------------------
 1904|      4|            {
 1905|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1906|      4|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1907|      4|            }
 1908|  18.3k|        }
_ZN3dlx4impl2SDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1912|  22.5k|        {
 1913|  22.5k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1914|       |
 1915|  22.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1915:17): [True: 2, False: 22.5k]
  ------------------
 1916|      2|            {
 1917|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1918|      2|                return;
 1919|      2|            }
 1920|       |
 1921|  22.5k|            phi::i32 address = optional_address.value();
 1922|       |
 1923|  22.5k|            const auto& src_reg = arg2.AsRegisterFloat();
 1924|       |
 1925|  22.5k|            phi::f64 value = processor.FloatRegisterGetDoubleValue(src_reg.register_id);
 1926|       |
 1927|  22.5k|            phi::boolean success = processor.GetMemory().StoreDouble(
 1928|  22.5k|                    static_cast<std::size_t>(address.unsafe()), value);
 1929|       |
 1930|  22.5k|            if (!success)
  ------------------
  |  Branch (1930:17): [True: 4, False: 22.5k]
  ------------------
 1931|      4|            {
 1932|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1933|      4|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1934|      4|            }
 1935|  22.5k|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1939|  33.7k|        {
 1940|  33.7k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1941|  33.7k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1942|       |
 1943|  33.7k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1944|       |
 1945|  33.7k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1946|  33.7k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1950|  13.7k|        {
 1951|  13.7k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1952|  13.7k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1953|       |
 1954|  13.7k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1955|       |
 1956|  13.7k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1957|  13.7k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1988|  16.6k|        {
 1989|  16.6k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1990|  16.6k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1991|       |
 1992|  16.6k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1993|       |
 1994|  16.6k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 1995|  16.6k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1999|  12.8k|        {
 2000|  12.8k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2001|  12.8k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2002|       |
 2003|  12.8k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2004|  12.8k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2005|  12.8k|            const float        converted_value_float =
 2006|  12.8k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2007|       |
 2008|  12.8k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2009|  12.8k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2013|  26.8k|        {
 2014|  26.8k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2015|  26.8k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2016|       |
 2017|  26.8k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2018|  26.8k|            const float  converted_value = static_cast<float>(src_value);
 2019|       |
 2020|  26.8k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2021|  26.8k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2025|  15.1k|        {
 2026|  15.1k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2027|  15.1k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2028|       |
 2029|  15.1k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2030|  15.1k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2031|  15.1k|            const float        converted_value_float =
 2032|  15.1k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2033|       |
 2034|  15.1k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2035|  15.1k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2039|  32.5k|        {
 2040|  32.5k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2041|  32.5k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2042|       |
 2043|  32.5k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2044|  32.5k|            const std::int32_t converted_value_int =
 2045|  32.5k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2046|  32.5k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2047|       |
 2048|  32.5k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2049|  32.5k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2053|  26.1k|        {
 2054|  26.1k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2055|  26.1k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2056|       |
 2057|  26.1k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2058|  26.1k|            const std::int32_t converted_value_int =
 2059|  26.1k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2060|  26.1k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2061|       |
 2062|  26.1k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2063|  26.1k|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2067|      1|        {
 2068|      1|            processor.Raise(Exception::Trap);
 2069|      1|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2073|      2|        {
 2074|      2|            processor.Raise(Exception::Halt);
 2075|      2|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2079|  1.79M|        {
 2080|       |            /* Do nothing */
 2081|  1.79M|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  169|  79.1k|    {
  170|  79.1k|        phi::i64 res = phi::i64(lhs) + rhs;
  171|       |
  172|  79.1k|        SafeWriteInteger(processor, dest_reg, res);
  173|  79.1k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  124|   530k|    {
  125|   530k|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  126|   530k|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  127|       |
  128|       |        // Check for underflow
  129|   530k|        if (value < min)
  ------------------
  |  Branch (129:13): [True: 21.7k, False: 508k]
  ------------------
  130|  21.7k|        {
  131|  21.7k|            processor.Raise(Exception::Underflow);
  132|       |
  133|  21.7k|            value = max + (value % (min - 1));
  134|  21.7k|        }
  135|       |        // Check for overflow
  136|   508k|        else if (value > max)
  ------------------
  |  Branch (136:18): [True: 53.3k, False: 455k]
  ------------------
  137|  53.3k|        {
  138|  53.3k|            processor.Raise(Exception::Overflow);
  139|       |
  140|  53.3k|            value = min + (value % (max + 1));
  141|  53.3k|        }
  142|       |
  143|   530k|        PHI_ASSERT(value >= min);
  144|   530k|        PHI_ASSERT(value <= max);
  145|       |
  146|   530k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  147|   530k|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  177|  36.5k|    {
  178|  36.5k|        phi::u64 res = phi::u64(lhs) + rhs;
  179|       |
  180|  36.5k|        SafeWriteInteger(processor, dest_reg, res);
  181|  36.5k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  151|   207k|    {
  152|   207k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  153|       |
  154|       |        // Check for overflow
  155|   207k|        if (value > max)
  ------------------
  |  Branch (155:13): [True: 0, False: 207k]
  ------------------
  156|      0|        {
  157|      0|            processor.Raise(Exception::Overflow);
  158|       |
  159|      0|            value %= max + 1u;
  160|      0|        }
  161|       |
  162|   207k|        PHI_ASSERT(value <= max);
  163|       |
  164|   207k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  165|   207k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  185|   371k|    {
  186|   371k|        phi::i64 res = phi::i64(lhs) - rhs;
  187|       |
  188|   371k|        SafeWriteInteger(processor, dest_reg, res);
  189|   371k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  193|   113k|    {
  194|   113k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  195|       |
  196|   113k|        if (lhs < rhs)
  ------------------
  |  Branch (196:13): [True: 44.4k, False: 68.8k]
  ------------------
  197|  44.4k|        {
  198|  44.4k|            processor.Raise(Exception::Underflow);
  199|       |
  200|  44.4k|            phi::u64 res = max - rhs + lhs + 1u;
  201|  44.4k|            SafeWriteInteger(processor, dest_reg, res);
  202|  44.4k|            return;
  203|  44.4k|        }
  204|       |
  205|  68.8k|        phi::u64 res = phi::u64(lhs) - rhs;
  206|       |
  207|  68.8k|        SafeWriteInteger(processor, dest_reg, res);
  208|  68.8k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  212|  49.8k|    {
  213|  49.8k|        phi::i64 res = phi::i64(lhs) * rhs;
  214|       |
  215|  49.8k|        SafeWriteInteger(processor, dest_reg, res);
  216|  49.8k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  220|  35.2k|    {
  221|  35.2k|        phi::u64 res = phi::u64(lhs) * rhs;
  222|       |
  223|  35.2k|        SafeWriteInteger(processor, dest_reg, res);
  224|  35.2k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  228|  30.0k|    {
  229|  30.0k|        if (rhs == 0)
  ------------------
  |  Branch (229:13): [True: 2, False: 30.0k]
  ------------------
  230|      2|        {
  231|      2|            processor.Raise(Exception::DivideByZero);
  232|      2|            return;
  233|      2|        }
  234|       |
  235|  30.0k|        phi::i64 res = phi::i64(lhs) / rhs;
  236|       |
  237|  30.0k|        SafeWriteInteger(processor, dest_reg, res);
  238|  30.0k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  242|  22.5k|    {
  243|  22.5k|        if (rhs == 0u)
  ------------------
  |  Branch (243:13): [True: 2, False: 22.5k]
  ------------------
  244|      2|        {
  245|      2|            processor.Raise(Exception::DivideByZero);
  246|      2|            return;
  247|      2|        }
  248|       |
  249|  22.5k|        phi::u64 res = phi::u64(lhs) / rhs;
  250|       |
  251|  22.5k|        SafeWriteInteger(processor, dest_reg, res);
  252|  22.5k|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  325|   242k|    {
  326|   242k|        if (shift > 31)
  ------------------
  |  Branch (326:13): [True: 49.3k, False: 193k]
  ------------------
  327|  49.3k|        {
  328|  49.3k|            processor.Raise(Exception::BadShift);
  329|       |
  330|       |            // Just set register to 0
  331|  49.3k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  332|  49.3k|            return;
  333|  49.3k|        }
  334|       |
  335|       |        // Negative shifts are undefined behavior
  336|   193k|        if (shift < 0)
  ------------------
  |  Branch (336:13): [True: 41.7k, False: 151k]
  ------------------
  337|  41.7k|        {
  338|  41.7k|            processor.Raise(Exception::BadShift);
  339|  41.7k|            return;
  340|  41.7k|        }
  341|       |
  342|   151k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  343|       |
  344|   151k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  345|   151k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  256|   106k|    {
  257|       |        // Prevent undefined behavior by shifting by more than 31
  258|   106k|        if (shift > 31)
  ------------------
  |  Branch (258:13): [True: 31.7k, False: 74.3k]
  ------------------
  259|  31.7k|        {
  260|  31.7k|            processor.Raise(Exception::BadShift);
  261|       |
  262|       |            // Just set register to 0
  263|  31.7k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  264|  31.7k|            return;
  265|  31.7k|        }
  266|       |
  267|       |        // Do nothing when shifting by zero to prevent undefined behavior
  268|  74.3k|        if (shift == 0)
  ------------------
  |  Branch (268:13): [True: 27.4k, False: 46.8k]
  ------------------
  269|  27.4k|        {
  270|  27.4k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  271|  27.4k|            return;
  272|  27.4k|        }
  273|       |
  274|       |        // Negative shifts are undefiend behavior
  275|  46.8k|        if (shift < 0)
  ------------------
  |  Branch (275:13): [True: 22.5k, False: 24.3k]
  ------------------
  276|  22.5k|        {
  277|  22.5k|            processor.Raise(Exception::BadShift);
  278|  22.5k|            return;
  279|  22.5k|        }
  280|       |
  281|  24.3k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  282|       |
  283|  24.3k|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  284|       |
  285|  24.3k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  286|  24.3k|    }
InstructionImplementation.cpp:_ZN3dlxL16clear_top_n_bitsEii:
   29|  24.3k|    {
   30|  24.3k|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behavior");
   31|       |
   32|  24.3k|        return value & ~(-1 << (32 - n));
   33|  24.3k|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  290|   123k|    {
  291|       |        // Prevent undefined behavior by shifting by more than 31
  292|   123k|        if (shift > 31)
  ------------------
  |  Branch (292:13): [True: 41.9k, False: 81.5k]
  ------------------
  293|  41.9k|        {
  294|  41.9k|            processor.Raise(Exception::BadShift);
  295|       |
  296|       |            // Is negative ie. sign bit is set
  297|  41.9k|            if (base < 0)
  ------------------
  |  Branch (297:17): [True: 7.79k, False: 34.1k]
  ------------------
  298|  7.79k|            {
  299|       |                // Set every byte to 1
  300|  7.79k|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  301|  7.79k|            }
  302|  34.1k|            else
  303|  34.1k|            {
  304|       |                // Set every byte to 0
  305|  34.1k|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  306|  34.1k|            }
  307|  41.9k|            return;
  308|  41.9k|        }
  309|       |
  310|       |        // Negative shifts are undefined behavior
  311|  81.5k|        if (shift < 0)
  ------------------
  |  Branch (311:13): [True: 39.1k, False: 42.3k]
  ------------------
  312|  39.1k|        {
  313|  39.1k|            processor.Raise(Exception::BadShift);
  314|  39.1k|            return;
  315|  39.1k|        }
  316|       |
  317|  42.3k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  318|       |
  319|  42.3k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  320|  42.3k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|   315k|    {
   39|       |        // Lookup the label
   40|   315k|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|   315k|        PHI_ASSERT(program != nullptr);
   42|   315k|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|   315k|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 122, False: 315k]
  ------------------
   45|    122|        {
   46|    122|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|    122|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|    122|            processor.Raise(Exception::UnknownLabel);
   48|    122|            return;
   49|    122|        }
   50|       |
   51|   315k|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|   315k|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|   315k|        processor.SetNextProgramCounter(jump_point);
   56|   315k|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|  1.61M|    {
   60|  1.61M|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|  1.61M|        phi::u32 max_address =
   63|  1.61M|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|  1.61M|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 44, False: 1.61M]
  ------------------
   65|     44|        {
   66|     44|            processor.Raise(Exception::AddressOutOfBounds);
   67|     44|            return;
   68|     44|        }
   69|       |
   70|  1.61M|        processor.SetNextProgramCounter(address.unsafe());
   71|  1.61M|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
  100|   306k|    {
  101|   306k|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (101:13): [True: 306k, False: 4]
  ------------------
  102|   306k|        {
  103|   306k|            const auto& imm_value = argument.AsImmediateValue();
  104|       |
  105|   306k|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (105:17): [True: 16, False: 306k]
  ------------------
  106|     16|            {
  107|     16|                return {};
  108|     16|            }
  109|       |
  110|   306k|            return imm_value.signed_value;
  111|   306k|        }
  112|       |
  113|      4|        PHI_ASSERT(argument.GetType() == ArgumentType::AddressDisplacement);
  114|       |
  115|      4|        const auto& adr_displacement = argument.AsAddressDisplacement();
  116|      4|        return CalculateDisplacementAddress(processor, adr_displacement);
  117|   306k|    }
InstructionImplementation.cpp:_ZN3dlxL28CalculateDisplacementAddressERNS_9ProcessorERKNS_19InstructionArgument19AddressDisplacementE:
   78|      4|    {
   79|      4|        phi::i32 register_value = processor.IntRegisterGetSignedValue(adr_displacement.register_id);
   80|       |
   81|      4|        phi::i32 address = adr_displacement.displacement + register_value;
   82|       |
   83|      4|        if (address < 0)
  ------------------
  |  Branch (83:13): [True: 1, False: 3]
  ------------------
   84|      1|        {
   85|      1|            processor.Raise(Exception::AddressOutOfBounds);
   86|      1|            return {};
   87|      1|        }
   88|       |
   89|      3|        return address;
   90|      4|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  7.10M|    {
   12|  7.10M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  7.10M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  7.10M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  7.10M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  7.10M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  7.10M|                   "Unexpected argument type for arg1");
   22|  7.10M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  7.10M|                   "Unexpected argument type for arg2");
   24|  7.10M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  7.10M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  7.10M|        m_Executor(processor, arg1, arg2, arg3);
   29|  7.10M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  51.9k|    {
  453|  51.9k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  51.9k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|  1.40M|    {
   17|  1.40M|        m_ValueSigned = val;
   18|  1.40M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|   212k|    {
   22|   212k|        m_ValueUnsigned = val;
   23|   212k|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|  3.17M|    {
   27|  3.17M|        return m_ValueSigned;
   28|  3.17M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  2.38M|    {
   32|  2.38M|        return m_ValueUnsigned;
   33|  2.38M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  2.35M|    {
   37|  2.35M|        return m_IsReadOnly;
   38|  2.35M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   21|  15.0k|    {
   22|  15.0k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (22:13): [True: 2, False: 15.0k]
  ------------------
   23|      2|        {
   24|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   25|      2|            return {};
   26|      2|        }
   27|       |
   28|  15.0k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   29|       |
   30|  15.0k|        return m_Values[raw_address].signed_value;
   31|  15.0k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   34|  15.9k|    {
   35|  15.9k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (35:13): [True: 2, False: 15.9k]
  ------------------
   36|      2|        {
   37|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   38|      2|            return {};
   39|      2|        }
   40|       |
   41|  15.9k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   42|  15.9k|        return m_Values[raw_address].unsigned_value;
   43|  15.9k|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   46|  27.9k|    {
   47|  27.9k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (47:13): [True: 3, False: 27.9k]
  ------------------
   48|      3|        {
   49|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   50|      3|            return {};
   51|      3|        }
   52|       |
   53|  27.9k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   54|       |
   55|  27.9k|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (55:13): [True: 1, False: 27.9k]
  ------------------
   56|      1|        {
   57|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   58|      1|            return {};
   59|      1|        }
   60|       |
   61|  27.9k|        return *reinterpret_cast<const std::int16_t*>(&m_Values[raw_address].signed_value);
   62|  27.9k|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   65|  10.3k|    {
   66|  10.3k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (66:13): [True: 8, False: 10.3k]
  ------------------
   67|      8|        {
   68|      8|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      8|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|      8|            return {};
   70|      8|        }
   71|       |
   72|  10.3k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   73|       |
   74|  10.3k|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (74:13): [True: 1, False: 10.3k]
  ------------------
   75|      1|        {
   76|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   77|      1|            return {};
   78|      1|        }
   79|       |
   80|  10.3k|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[raw_address].unsigned_value);
   81|  10.3k|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   84|  8.33k|    {
   85|  8.33k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (85:13): [True: 2, False: 8.33k]
  ------------------
   86|      2|        {
   87|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   88|      2|            return {};
   89|      2|        }
   90|       |
   91|  8.33k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   92|       |
   93|  8.33k|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (93:13): [True: 1, False: 8.33k]
  ------------------
   94|      1|        {
   95|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   96|      1|            return {};
   97|      1|        }
   98|       |
   99|  8.33k|        return *reinterpret_cast<const std::int32_t*>(&m_Values[raw_address].signed_value);
  100|  8.33k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
  103|  10.7k|    {
  104|  10.7k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (104:13): [True: 2, False: 10.7k]
  ------------------
  105|      2|        {
  106|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  107|      2|            return {};
  108|      2|        }
  109|       |
  110|  10.7k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  111|       |
  112|  10.7k|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (112:13): [True: 1, False: 10.7k]
  ------------------
  113|      1|        {
  114|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|      1|            return {};
  116|      1|        }
  117|       |
  118|  10.7k|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[raw_address].unsigned_value);
  119|  10.7k|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  122|  13.2k|    {
  123|  13.2k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (123:13): [True: 4, False: 13.2k]
  ------------------
  124|      4|        {
  125|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  126|      4|            return {};
  127|      4|        }
  128|       |
  129|  13.2k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  130|       |
  131|  13.2k|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (131:13): [True: 1, False: 13.2k]
  ------------------
  132|      1|        {
  133|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  134|      1|            return {};
  135|      1|        }
  136|       |
  137|  13.2k|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  138|  13.2k|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  141|  29.7k|    {
  142|  29.7k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (142:13): [True: 4, False: 29.7k]
  ------------------
  143|      4|        {
  144|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  145|      4|            return {};
  146|      4|        }
  147|       |
  148|  29.7k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  149|       |
  150|  29.7k|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (150:13): [True: 1, False: 29.7k]
  ------------------
  151|      1|        {
  152|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  153|      1|            return {};
  154|      1|        }
  155|       |
  156|  29.7k|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  157|  29.7k|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  160|  22.5k|    {
  161|  22.5k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (161:13): [True: 5, False: 22.5k]
  ------------------
  162|      5|        {
  163|      5|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  164|      5|            return false;
  165|      5|        }
  166|       |
  167|  22.5k|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  168|  22.5k|        return true;
  169|  22.5k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedByteEN3phi7integerImEENS2_IhEE:
  172|  22.5k|    {
  173|  22.5k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (173:13): [True: 4, False: 22.5k]
  ------------------
  174|      4|        {
  175|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  176|      4|            return false;
  177|      4|        }
  178|       |
  179|  22.5k|        m_Values[(address - m_StartingAddress).unsafe()].unsigned_value = value.unsafe();
  180|  22.5k|        return true;
  181|  22.5k|    }
_ZN3dlx11MemoryBlock13StoreHalfWordEN3phi7integerImEENS2_IsEE:
  184|  25.3k|    {
  185|  25.3k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (185:13): [True: 3, False: 25.3k]
  ------------------
  186|      3|        {
  187|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  188|      3|            return false;
  189|      3|        }
  190|       |
  191|  25.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  192|  25.3k|        *reinterpret_cast<std::int16_t*>(&m_Values[index].signed_value) = value.unsafe();
  193|       |
  194|  25.3k|        return true;
  195|  25.3k|    }
_ZN3dlx11MemoryBlock21StoreUnsignedHalfWordEN3phi7integerImEENS2_ItEE:
  198|  24.3k|    {
  199|  24.3k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (199:13): [True: 3, False: 24.3k]
  ------------------
  200|      3|        {
  201|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  202|      3|            return false;
  203|      3|        }
  204|       |
  205|  24.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  206|  24.3k|        *reinterpret_cast<std::uint16_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  207|       |
  208|  24.3k|        return true;
  209|  24.3k|    }
_ZN3dlx11MemoryBlock9StoreWordEN3phi7integerImEENS2_IiEE:
  212|  21.2k|    {
  213|  21.2k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (213:13): [True: 2, False: 21.2k]
  ------------------
  214|      2|        {
  215|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  216|      2|            return false;
  217|      2|        }
  218|       |
  219|  21.2k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  220|  21.2k|        *reinterpret_cast<std::int32_t*>(&m_Values[index].signed_value) = value.unsafe();
  221|       |
  222|  21.2k|        return true;
  223|  21.2k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedWordEN3phi7integerImEENS2_IjEE:
  226|  17.9k|    {
  227|  17.9k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (227:13): [True: 3, False: 17.9k]
  ------------------
  228|      3|        {
  229|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  230|      3|            return false;
  231|      3|        }
  232|       |
  233|  17.9k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  234|  17.9k|        *reinterpret_cast<std::uint32_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  235|       |
  236|  17.9k|        return true;
  237|  17.9k|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  240|  18.3k|    {
  241|  18.3k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (241:13): [True: 4, False: 18.3k]
  ------------------
  242|      4|        {
  243|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  244|      4|            return false;
  245|      4|        }
  246|       |
  247|  18.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  248|  18.3k|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  249|       |
  250|  18.3k|        return true;
  251|  18.3k|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  254|  22.5k|    {
  255|  22.5k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (255:13): [True: 4, False: 22.5k]
  ------------------
  256|      4|        {
  257|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  258|      4|            return false;
  259|      4|        }
  260|       |
  261|  22.5k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  262|  22.5k|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  263|       |
  264|  22.5k|        return true;
  265|  22.5k|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  268|   306k|    {
  269|       |        // Cannot access anything before the starting address
  270|   306k|        if (address < m_StartingAddress)
  ------------------
  |  Branch (270:13): [True: 39, False: 306k]
  ------------------
  271|     39|        {
  272|     39|            return false;
  273|     39|        }
  274|       |
  275|       |        // Check if addres + size will overflow
  276|   306k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (276:13): [True: 0, False: 306k]
  ------------------
  277|   306k|                                             address.unsafe(), size.unsafe()))
  278|      0|        {
  279|      0|            return false;
  280|      0|        }
  281|       |
  282|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  283|   306k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (283:13): [True: 0, False: 306k]
  ------------------
  284|   306k|                                             m_StartingAddress.unsafe(), m_Values.size()))
  285|      0|        {
  286|      0|            return false;
  287|      0|        }
  288|       |
  289|       |        // Check if address is out of bounds
  290|   306k|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (290:13): [True: 16, False: 306k]
  ------------------
  291|     16|        {
  292|     16|            return false;
  293|     16|        }
  294|       |
  295|       |        // Otherwise this is a valid address
  296|   306k|        return true;
  297|   306k|    }
_ZN3dlx11MemoryBlock25IsAddressAlignedCorrectlyEN3phi7integerImEES3_:
  301|   100k|    {
  302|   100k|        return size != 0u && (address % size) == 0u;
  ------------------
  |  Branch (302:16): [True: 100k, False: 0]
  |  Branch (302:30): [True: 100k, False: 6]
  ------------------
  303|   100k|    }
_ZN3dlx11MemoryBlock5ClearEv:
  306|  6.66k|    {
  307|  6.66k|        for (auto& val : m_Values)
  ------------------
  |  Branch (307:24): [True: 6.66M, False: 6.66k]
  ------------------
  308|  6.66M|        {
  309|  6.66M|            val.signed_value = 0;
  310|  6.66M|        }
  311|  6.66k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   445k|    {
   24|   445k|        switch (token.length())
   25|   445k|        {
   26|       |            // 1 character OpCodes
   27|  71.0k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 71.0k, False: 374k]
  ------------------
   28|  71.0k|                char c1 = token[0];
   29|  71.0k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 19.5k, False: 51.5k]
  ------------------
   30|  19.5k|                {
   31|  19.5k|                    return OpCode::J;
   32|  19.5k|                }
   33|  51.5k|                break;
   34|  71.0k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  72.0k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 72.0k, False: 373k]
  ------------------
   38|  72.0k|                char c1 = token[0];
   39|  72.0k|                char c2 = token[1];
   40|       |
   41|  72.0k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 41.8k, False: 30.1k]
  ------------------
   42|  72.0k|                {
   43|  3.08k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 3.08k, False: 68.9k]
  ------------------
   44|  4.11k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 1.03k, False: 70.9k]
  ------------------
   45|  4.11k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 1.71k, False: 2.39k]
  ------------------
   46|  1.71k|                        {
   47|  1.71k|                            return OpCode::JR;
   48|  1.71k|                        }
   49|  2.39k|                        break;
   50|       |
   51|  4.30k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 4.30k, False: 67.6k]
  ------------------
   52|  7.41k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 3.11k, False: 68.8k]
  ------------------
   53|  7.41k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 1.96k, False: 5.45k]
  ------------------
   54|  7.41k|                        {
   55|  1.03k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 1.03k, False: 6.38k]
  ------------------
   56|  1.23k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 208, False: 7.21k]
  ------------------
   57|  1.23k|                                return OpCode::LB;
   58|    259|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 259, False: 7.16k]
  ------------------
   59|    857|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 598, False: 6.82k]
  ------------------
   60|    857|                                return OpCode::LD;
   61|    473|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 473, False: 6.94k]
  ------------------
   62|    687|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 214, False: 7.20k]
  ------------------
   63|    687|                                return OpCode::LF;
   64|    232|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 232, False: 7.18k]
  ------------------
   65|    451|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 219, False: 7.20k]
  ------------------
   66|    451|                                return OpCode::LH;
   67|  1.04k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 1.04k, False: 6.37k]
  ------------------
   68|  2.22k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 1.17k, False: 6.24k]
  ------------------
   69|  2.22k|                                return OpCode::LW;
   70|  7.41k|                        }
   71|  1.96k|                        break;
   72|  1.96k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 1.20k, False: 70.8k]
  ------------------
   73|  3.83k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 2.63k, False: 69.3k]
  ------------------
   74|  3.83k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 1.91k, False: 1.91k]
  ------------------
   75|  1.91k|                        {
   76|  1.91k|                            return OpCode::OR;
   77|  1.91k|                        }
   78|  1.91k|                        break;
   79|  11.7k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 11.7k, False: 60.2k]
  ------------------
   80|  14.7k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 3.08k, False: 68.9k]
  ------------------
   81|  14.7k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 3.85k, False: 10.9k]
  ------------------
   82|  14.7k|                        {
   83|    497|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 497, False: 14.2k]
  ------------------
   84|  2.31k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 1.82k, False: 12.9k]
  ------------------
   85|  2.31k|                                return OpCode::SB;
   86|    453|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 453, False: 14.3k]
  ------------------
   87|  1.62k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 1.16k, False: 13.6k]
  ------------------
   88|  1.62k|                                return OpCode::SD;
   89|    536|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 536, False: 14.2k]
  ------------------
   90|  5.08k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 4.54k, False: 10.2k]
  ------------------
   91|  5.08k|                                return OpCode::SF;
   92|    465|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 465, False: 14.3k]
  ------------------
   93|  1.23k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 767, False: 14.0k]
  ------------------
   94|  1.23k|                                return OpCode::SH;
   95|    343|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 343, False: 14.4k]
  ------------------
   96|    686|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 343, False: 14.4k]
  ------------------
   97|    686|                                return OpCode::SW;
   98|  14.7k|                        }
   99|  3.85k|                        break;
  100|  72.0k|                }
  101|  51.9k|                break;
  102|  72.0k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   113k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 113k, False: 331k]
  ------------------
  106|   113k|                char c1 = token[0];
  107|   113k|                char c2 = token[1];
  108|   113k|                char c3 = token[2];
  109|       |
  110|   113k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 29.3k, False: 83.8k]
  ------------------
  111|   113k|                {
  112|  1.52k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 1.52k, False: 111k]
  ------------------
  113|  4.88k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 3.36k, False: 109k]
  ------------------
  114|  4.88k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 2.59k, False: 2.29k]
  |  Branch (114:29): [True: 2.00k, False: 2.88k]
  |  Branch (114:45): [True: 2.00k, False: 596]
  ------------------
  115|  2.00k|                        {
  116|  2.00k|                            return OpCode::ADD;
  117|  2.00k|                        }
  118|  2.88k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 2.04k, False: 843]
  |  Branch (118:34): [True: 1.31k, False: 1.57k]
  |  Branch (118:50): [True: 1.31k, False: 729]
  ------------------
  119|  1.31k|                        {
  120|  1.31k|                            return OpCode::AND;
  121|  1.31k|                        }
  122|  1.57k|                        break;
  123|       |
  124|  1.57k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 1.51k, False: 111k]
  ------------------
  125|  3.27k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 1.76k, False: 111k]
  ------------------
  126|  3.27k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 2.65k, False: 625]
  |  Branch (126:29): [True: 861, False: 2.41k]
  |  Branch (126:45): [True: 861, False: 1.79k]
  ------------------
  127|    861|                        {
  128|    861|                            return OpCode::DIV;
  129|    861|                        }
  130|  2.41k|                        break;
  131|       |
  132|  2.41k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 570, False: 112k]
  ------------------
  133|  3.23k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 2.66k, False: 110k]
  ------------------
  134|  3.23k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 2.40k, False: 836]
  ------------------
  135|  2.40k|                        {
  136|  2.40k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 1.20k, False: 1.19k]
  ------------------
  137|  1.20k|                            {
  138|  1.20k|                                return OpCode::EQD;
  139|  1.20k|                            }
  140|  1.19k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 661, False: 534]
  ------------------
  141|    661|                            {
  142|    661|                                return OpCode::EQF;
  143|    661|                            }
  144|  2.40k|                        }
  145|  1.37k|                        break;
  146|       |
  147|  2.14k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 2.14k, False: 111k]
  ------------------
  148|  6.36k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 4.21k, False: 109k]
  ------------------
  149|  6.36k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 3.79k, False: 2.57k]
  ------------------
  150|  3.79k|                        {
  151|  3.79k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 790, False: 3.00k]
  ------------------
  152|    790|                            {
  153|    790|                                return OpCode::GED;
  154|    790|                            }
  155|  3.00k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 1.81k, False: 1.18k]
  ------------------
  156|  1.81k|                            {
  157|  1.81k|                                return OpCode::GEF;
  158|  1.81k|                            }
  159|  3.79k|                        }
  160|  2.57k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 1.90k, False: 669]
  ------------------
  161|  1.90k|                        {
  162|  1.90k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 915, False: 989]
  ------------------
  163|    915|                            {
  164|    915|                                return OpCode::GTD;
  165|    915|                            }
  166|    989|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 715, False: 274]
  ------------------
  167|    715|                            {
  168|    715|                                return OpCode::GTF;
  169|    715|                            }
  170|    989|                        }
  171|  2.13k|                        break;
  172|       |
  173|  2.13k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 2.01k, False: 111k]
  ------------------
  174|  2.93k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 923, False: 112k]
  ------------------
  175|  2.93k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 1.54k, False: 1.39k]
  |  Branch (175:29): [True: 862, False: 2.07k]
  |  Branch (175:45): [True: 862, False: 682]
  ------------------
  176|    862|                        {
  177|    862|                            return OpCode::JAL;
  178|    862|                        }
  179|  2.07k|                        break;
  180|       |
  181|  11.1k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 11.1k, False: 102k]
  ------------------
  182|  16.9k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 5.83k, False: 107k]
  ------------------
  183|  16.9k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 1.12k, False: 15.8k]
  ------------------
  184|  16.9k|                        {
  185|  1.91k|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 1.91k, False: 15.0k]
  ------------------
  186|  2.36k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 452, False: 16.5k]
  ------------------
  187|  2.36k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 956, False: 1.40k]
  ------------------
  188|    956|                                {
  189|    956|                                    return OpCode::LBU;
  190|    956|                                }
  191|  1.40k|                                break;
  192|       |
  193|  1.69k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 1.69k, False: 15.2k]
  ------------------
  194|  3.37k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 1.67k, False: 15.2k]
  ------------------
  195|  3.37k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 1.29k, False: 2.08k]
  ------------------
  196|  1.29k|                                {
  197|  1.29k|                                    return OpCode::LED;
  198|  1.29k|                                }
  199|  2.08k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 1.43k, False: 653]
  ------------------
  200|  1.43k|                                {
  201|  1.43k|                                    return OpCode::LEF;
  202|  1.43k|                                }
  203|    653|                                break;
  204|       |
  205|    653|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 581, False: 16.3k]
  ------------------
  206|  1.73k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 1.15k, False: 15.7k]
  ------------------
  207|  1.73k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 569, False: 1.16k]
  ------------------
  208|    569|                                {
  209|    569|                                    return OpCode::LHI;
  210|    569|                                }
  211|  1.16k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 742, False: 424]
  ------------------
  212|    742|                                {
  213|    742|                                    return OpCode::LHU;
  214|    742|                                }
  215|    424|                                break;
  216|       |
  217|  3.73k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 3.73k, False: 13.2k]
  ------------------
  218|  5.60k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 1.86k, False: 15.0k]
  ------------------
  219|  5.60k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 2.38k, False: 3.21k]
  ------------------
  220|  2.38k|                                {
  221|  2.38k|                                    return OpCode::LTD;
  222|  2.38k|                                }
  223|  3.21k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 2.66k, False: 557]
  ------------------
  224|  2.66k|                                {
  225|  2.66k|                                    return OpCode::LTF;
  226|  2.66k|                                }
  227|    557|                                break;
  228|       |
  229|    782|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 782, False: 16.1k]
  ------------------
  230|  2.74k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 1.96k, False: 14.9k]
  ------------------
  231|  2.74k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 2.03k, False: 714]
  ------------------
  232|  2.03k|                                {
  233|  2.03k|                                    return OpCode::LWU;
  234|  2.03k|                                }
  235|    714|                                break;
  236|  16.9k|                        }
  237|  4.88k|                        break;
  238|       |
  239|  8.48k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 8.48k, False: 104k]
  ------------------
  240|  10.0k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 1.53k, False: 111k]
  ------------------
  241|  10.0k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 4.61k, False: 5.41k]
  ------------------
  242|  4.61k|                        {
  243|  4.61k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 1.64k, False: 2.96k]
  ------------------
  244|  1.64k|                            {
  245|  1.64k|                                return OpCode::NED;
  246|  1.64k|                            }
  247|  2.96k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 825, False: 2.13k]
  ------------------
  248|    825|                            {
  249|    825|                                return OpCode::NEF;
  250|    825|                            }
  251|  4.61k|                        }
  252|  5.41k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 4.78k, False: 631]
  |  Branch (252:34): [True: 4.19k, False: 1.22k]
  |  Branch (252:50): [True: 4.19k, False: 592]
  ------------------
  253|  4.19k|                        {
  254|  4.19k|                            return OpCode::NOP;
  255|  4.19k|                        }
  256|       |
  257|  3.36k|                        break;
  258|       |
  259|  3.36k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 1.35k, False: 111k]
  ------------------
  260|  4.08k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 2.73k, False: 110k]
  ------------------
  261|  4.08k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 2.81k, False: 1.27k]
  |  Branch (261:29): [True: 915, False: 3.16k]
  |  Branch (261:45): [True: 915, False: 1.89k]
  ------------------
  262|    915|                        {
  263|    915|                            return OpCode::ORI;
  264|    915|                        }
  265|  3.16k|                        break;
  266|       |
  267|  14.9k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 14.9k, False: 98.3k]
  ------------------
  268|  29.3k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 14.3k, False: 98.8k]
  ------------------
  269|  29.3k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 1.95k, False: 27.3k]
  ------------------
  270|  29.3k|                        {
  271|    942|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 942, False: 28.3k]
  ------------------
  272|  2.88k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 1.93k, False: 27.3k]
  ------------------
  273|  2.88k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 1.04k, False: 1.84k]
  ------------------
  274|  1.04k|                                {
  275|  1.04k|                                    return OpCode::SBU;
  276|  1.04k|                                }
  277|  1.84k|                                break;
  278|       |
  279|  1.84k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 710, False: 28.5k]
  ------------------
  280|  1.43k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 722, False: 28.5k]
  ------------------
  281|  1.43k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 673, False: 759]
  ------------------
  282|    673|                                {
  283|    673|                                    return OpCode::SEQ;
  284|    673|                                }
  285|    759|                                break;
  286|       |
  287|    759|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 254, False: 29.0k]
  ------------------
  288|  2.32k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 2.07k, False: 27.2k]
  ------------------
  289|  2.32k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 847, False: 1.48k]
  ------------------
  290|    847|                                {
  291|    847|                                    return OpCode::SGE;
  292|    847|                                }
  293|  1.48k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 1.22k, False: 253]
  ------------------
  294|  1.22k|                                {
  295|  1.22k|                                    return OpCode::SGT;
  296|  1.22k|                                }
  297|    253|                                break;
  298|       |
  299|    777|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 777, False: 28.5k]
  ------------------
  300|  1.97k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 1.19k, False: 28.1k]
  ------------------
  301|  1.97k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 1.48k, False: 490]
  ------------------
  302|  1.48k|                                {
  303|  1.48k|                                    return OpCode::SHU;
  304|  1.48k|                                }
  305|    490|                                break;
  306|       |
  307|  4.82k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 4.82k, False: 24.4k]
  ------------------
  308|  6.77k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 1.95k, False: 27.3k]
  ------------------
  309|  6.77k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 1.04k, False: 5.72k]
  ------------------
  310|  6.77k|                                {
  311|  1.10k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 1.10k, False: 5.67k]
  ------------------
  312|  1.82k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 724, False: 6.05k]
  ------------------
  313|  1.82k|                                        return OpCode::SLA;
  314|       |
  315|    235|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 235, False: 6.54k]
  ------------------
  316|  1.43k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 1.20k, False: 5.57k]
  ------------------
  317|  1.43k|                                        return OpCode::SLE;
  318|       |
  319|    612|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 612, False: 6.16k]
  ------------------
  320|  1.15k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 540, False: 6.23k]
  ------------------
  321|  1.15k|                                        return OpCode::SLL;
  322|       |
  323|    460|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 460, False: 6.31k]
  ------------------
  324|  1.31k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 856, False: 5.92k]
  ------------------
  325|  1.31k|                                        return OpCode::SLT;
  326|  6.77k|                                }
  327|  1.04k|                                break;
  328|       |
  329|  1.04k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 1.02k, False: 28.2k]
  ------------------
  330|  5.72k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 4.70k, False: 24.6k]
  ------------------
  331|  5.72k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 807, False: 4.91k]
  ------------------
  332|    807|                                {
  333|    807|                                    return OpCode::SNE;
  334|    807|                                }
  335|  4.91k|                                break;
  336|       |
  337|  4.91k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 1.81k, False: 27.4k]
  ------------------
  338|  2.98k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 1.16k, False: 28.1k]
  ------------------
  339|  2.98k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 1.57k, False: 1.40k]
  ------------------
  340|  1.57k|                                {
  341|  1.57k|                                    return OpCode::SRA;
  342|  1.57k|                                }
  343|  1.40k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 940, False: 467]
  ------------------
  344|    940|                                {
  345|    940|                                    return OpCode::SRL;
  346|    940|                                }
  347|    467|                                break;
  348|       |
  349|  1.68k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 1.68k, False: 27.6k]
  ------------------
  350|  1.98k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 308, False: 28.9k]
  ------------------
  351|  1.98k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 1.12k, False: 862]
  ------------------
  352|  1.12k|                                {
  353|  1.12k|                                    return OpCode::SUB;
  354|  1.12k|                                }
  355|    862|                                break;
  356|       |
  357|    862|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 216, False: 29.0k]
  ------------------
  358|  1.26k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 1.04k, False: 28.2k]
  ------------------
  359|  1.26k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 1.06k, False: 199]
  ------------------
  360|  1.06k|                                {
  361|  1.06k|                                    return OpCode::SWU;
  362|  1.06k|                                }
  363|    199|                                break;
  364|  29.3k|                        }
  365|       |
  366|  13.4k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 688, False: 112k]
  ------------------
  367|  15.5k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 2.12k, False: 111k]
  ------------------
  368|  15.5k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 2.17k, False: 13.4k]
  |  Branch (368:29): [True: 983, False: 14.6k]
  |  Branch (368:45): [True: 983, False: 1.19k]
  ------------------
  369|    983|                        {
  370|    983|                            return OpCode::XOR;
  371|    983|                        }
  372|  14.6k|                        break;
  373|   113k|                }
  374|  64.9k|                break;
  375|   113k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   100k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 100k, False: 344k]
  ------------------
  379|   100k|                char c1 = token[0];
  380|   100k|                char c2 = token[1];
  381|   100k|                char c3 = token[2];
  382|   100k|                char c4 = token[3];
  383|       |
  384|   100k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 22.9k, False: 77.7k]
  ------------------
  385|   100k|                {
  386|    880|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 880, False: 99.7k]
  ------------------
  387|  9.79k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 8.91k, False: 91.7k]
  ------------------
  388|  9.79k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 836, False: 8.95k]
  ------------------
  389|  9.79k|                        {
  390|  5.70k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 5.70k, False: 4.08k]
  ------------------
  391|  6.91k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 1.20k, False: 8.58k]
  ------------------
  392|  6.91k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 6.21k, False: 697]
  ------------------
  393|  6.21k|                                {
  394|  6.21k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 916, False: 5.29k]
  ------------------
  395|  6.21k|                                    {
  396|    196|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 196, False: 6.01k]
  ------------------
  397|  1.19k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 996, False: 5.21k]
  ------------------
  398|  1.19k|                                            return OpCode::ADDD;
  399|       |
  400|    708|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 708, False: 5.50k]
  ------------------
  401|  1.01k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 311, False: 5.90k]
  ------------------
  402|  1.01k|                                            return OpCode::ADDF;
  403|       |
  404|  1.13k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 1.13k, False: 5.07k]
  ------------------
  405|  2.39k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 1.25k, False: 4.95k]
  ------------------
  406|  2.39k|                                            return OpCode::ADDI;
  407|       |
  408|    263|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 263, False: 5.95k]
  ------------------
  409|    692|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 429, False: 5.78k]
  ------------------
  410|    692|                                            return OpCode::ADDU;
  411|  6.21k|                                    }
  412|  6.21k|                                }
  413|  1.61k|                                break;
  414|       |
  415|  1.61k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 1.43k, False: 8.35k]
  ------------------
  416|  2.04k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 612, False: 9.18k]
  ------------------
  417|  2.04k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 1.40k, False: 645]
  |  Branch (417:37): [True: 948, False: 1.09k]
  |  Branch (417:53): [True: 948, False: 453]
  ------------------
  418|    948|                                {
  419|    948|                                    return OpCode::ANDI;
  420|    948|                                }
  421|       |
  422|  1.09k|                                break;
  423|  9.79k|                        }
  424|  3.54k|                        break;
  425|       |
  426|  3.54k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 3.00k, False: 97.6k]
  ------------------
  427|  7.64k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 4.64k, False: 96.0k]
  ------------------
  428|  7.64k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 322, False: 7.32k]
  ------------------
  429|  7.64k|                        {
  430|  1.08k|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 1.08k, False: 6.56k]
  ------------------
  431|  1.28k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 202, False: 7.44k]
  ------------------
  432|  1.28k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 1.04k, False: 242]
  |  Branch (432:37): [True: 725, False: 564]
  |  Branch (432:53): [True: 725, False: 322]
  ------------------
  433|    725|                                {
  434|    725|                                    return OpCode::BEQZ;
  435|    725|                                }
  436|    564|                                break;
  437|       |
  438|  1.63k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 1.63k, False: 6.01k]
  ------------------
  439|  3.05k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 1.42k, False: 6.22k]
  ------------------
  440|  3.05k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 2.16k, False: 890]
  ------------------
  441|  2.16k|                                {
  442|  2.16k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 1.02k, False: 1.14k]
  ------------------
  443|  1.02k|                                    {
  444|  1.02k|                                        return OpCode::BFPF;
  445|  1.02k|                                    }
  446|  1.14k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 940, False: 205]
  ------------------
  447|    940|                                    {
  448|    940|                                        return OpCode::BFPT;
  449|    940|                                    }
  450|  2.16k|                                }
  451|  1.09k|                                break;
  452|       |
  453|  2.08k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 2.08k, False: 5.56k]
  ------------------
  454|  2.97k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 893, False: 6.75k]
  ------------------
  455|  2.97k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 1.66k, False: 1.31k]
  |  Branch (455:37): [True: 1.04k, False: 1.93k]
  |  Branch (455:53): [True: 1.04k, False: 622]
  ------------------
  456|  1.04k|                                {
  457|  1.04k|                                    return OpCode::BNEZ;
  458|  1.04k|                                }
  459|  7.64k|                        }
  460|  3.91k|                        break;
  461|       |
  462|  3.91k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 2.01k, False: 98.6k]
  ------------------
  463|  6.26k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 4.25k, False: 96.4k]
  ------------------
  464|  6.26k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 5.80k, False: 463]
  |  Branch (464:29): [True: 5.06k, False: 1.19k]
  |  Branch (464:45): [True: 5.06k, False: 736]
  ------------------
  465|  5.06k|                        {
  466|  5.06k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 964, False: 4.10k]
  ------------------
  467|  5.06k|                            {
  468|    707|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 707, False: 4.36k]
  ------------------
  469|  1.41k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 706, False: 4.36k]
  ------------------
  470|  1.41k|                                    return OpCode::DIVD;
  471|       |
  472|    482|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 482, False: 4.58k]
  ------------------
  473|    805|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 323, False: 4.74k]
  ------------------
  474|    805|                                    return OpCode::DIVF;
  475|       |
  476|    453|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 453, False: 4.61k]
  ------------------
  477|    921|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 468, False: 4.60k]
  ------------------
  478|    921|                                    return OpCode::DIVI;
  479|       |
  480|    388|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 388, False: 4.68k]
  ------------------
  481|    966|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 578, False: 4.49k]
  ------------------
  482|    966|                                    return OpCode::DIVU;
  483|  5.06k|                            }
  484|  5.06k|                        }
  485|  2.16k|                        break;
  486|       |
  487|  2.16k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 1.61k, False: 99.0k]
  ------------------
  488|  2.04k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 430, False: 100k]
  ------------------
  489|  2.04k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 1.79k, False: 249]
  |  Branch (489:29): [True: 804, False: 1.24k]
  |  Branch (489:45): [True: 1.18k, False: 612]
  |  Branch (489:61): [True: 804, False: 379]
  ------------------
  490|    804|                        {
  491|    804|                            return OpCode::HALT;
  492|    804|                        }
  493|  1.24k|                        break;
  494|       |
  495|  2.13k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 2.13k, False: 98.5k]
  ------------------
  496|  2.95k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 822, False: 99.8k]
  ------------------
  497|  2.95k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 1.94k, False: 1.01k]
  |  Branch (497:29): [True: 698, False: 2.26k]
  |  Branch (497:45): [True: 1.21k, False: 722]
  |  Branch (497:61): [True: 698, False: 520]
  ------------------
  498|    698|                        {
  499|    698|                            return OpCode::JALR;
  500|    698|                        }
  501|  2.26k|                        break;
  502|       |
  503|  3.93k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 3.93k, False: 96.7k]
  ------------------
  504|  5.93k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 1.99k, False: 98.6k]
  ------------------
  505|  5.93k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 2.56k, False: 3.37k]
  |  Branch (505:29): [True: 1.84k, False: 4.08k]
  |  Branch (505:45): [True: 1.84k, False: 716]
  ------------------
  506|  1.84k|                        {
  507|  1.84k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 632, False: 1.21k]
  ------------------
  508|    632|                            {
  509|    632|                                return OpCode::MOVD;
  510|    632|                            }
  511|  1.21k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 712, False: 503]
  ------------------
  512|    712|                            {
  513|    712|                                return OpCode::MOVF;
  514|    712|                            }
  515|  1.84k|                        }
  516|  4.08k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 2.35k, False: 1.73k]
  |  Branch (516:34): [True: 766, False: 3.32k]
  |  Branch (516:50): [True: 2.03k, False: 326]
  |  Branch (516:66): [True: 766, False: 1.26k]
  ------------------
  517|    766|                        {
  518|    766|                            return OpCode::MULT;
  519|    766|                        }
  520|  3.82k|                        break;
  521|       |
  522|  15.8k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 15.8k, False: 84.7k]
  ------------------
  523|  35.6k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 19.7k, False: 80.9k]
  ------------------
  524|  35.6k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 1.84k, False: 33.8k]
  ------------------
  525|  35.6k|                        {
  526|  2.49k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 2.49k, False: 33.1k]
  ------------------
  527|  3.96k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 1.46k, False: 34.1k]
  ------------------
  528|  3.96k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 3.58k, False: 378]
  ------------------
  529|  3.58k|                                {
  530|  3.58k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 1.79k, False: 1.79k]
  ------------------
  531|  1.79k|                                    {
  532|  1.79k|                                        return OpCode::SEQI;
  533|  1.79k|                                    }
  534|  1.79k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 1.10k, False: 691]
  ------------------
  535|  1.10k|                                    {
  536|  1.10k|                                        return OpCode::SEQU;
  537|  1.10k|                                    }
  538|  3.58k|                                }
  539|  1.06k|                                break;
  540|       |
  541|  2.33k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 2.33k, False: 33.3k]
  ------------------
  542|  6.83k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 4.50k, False: 31.1k]
  ------------------
  543|  6.83k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 3.77k, False: 3.05k]
  ------------------
  544|  3.77k|                                {
  545|  3.77k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 2.23k, False: 1.54k]
  ------------------
  546|  2.23k|                                    {
  547|  2.23k|                                        return OpCode::SGEI;
  548|  2.23k|                                    }
  549|  1.54k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 1.14k, False: 405]
  ------------------
  550|  1.14k|                                    {
  551|  1.14k|                                        return OpCode::SGEU;
  552|  1.14k|                                    }
  553|  3.77k|                                }
  554|  3.05k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 2.41k, False: 640]
  ------------------
  555|  2.41k|                                {
  556|  2.41k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 1.07k, False: 1.34k]
  ------------------
  557|  1.07k|                                    {
  558|  1.07k|                                        return OpCode::SGTI;
  559|  1.07k|                                    }
  560|  1.34k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 426, False: 919]
  ------------------
  561|    426|                                    {
  562|    426|                                        return OpCode::SGTU;
  563|    426|                                    }
  564|  2.41k|                                }
  565|  1.96k|                                break;
  566|       |
  567|  8.16k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 8.16k, False: 27.4k]
  ------------------
  568|  11.1k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 3.00k, False: 32.6k]
  ------------------
  569|  11.1k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 1.21k, False: 9.95k]
  ------------------
  570|  11.1k|                                {
  571|  1.10k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 1.10k, False: 10.0k]
  ------------------
  572|  1.43k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 332, False: 10.8k]
  ------------------
  573|  1.43k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 1.07k, False: 361]
  ------------------
  574|  1.07k|                                        {
  575|  1.07k|                                            return OpCode::SLAI;
  576|  1.07k|                                        }
  577|    361|                                        break;
  578|       |
  579|  1.80k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 1.80k, False: 9.36k]
  ------------------
  580|  2.93k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 1.13k, False: 10.0k]
  ------------------
  581|  2.93k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 630, False: 2.30k]
  ------------------
  582|    630|                                        {
  583|    630|                                            return OpCode::SLEI;
  584|    630|                                        }
  585|  2.30k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 1.20k, False: 1.10k]
  ------------------
  586|  1.20k|                                        {
  587|  1.20k|                                            return OpCode::SLEU;
  588|  1.20k|                                        }
  589|  1.10k|                                        break;
  590|       |
  591|  1.12k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 1.12k, False: 10.0k]
  ------------------
  592|  1.86k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 741, False: 10.4k]
  ------------------
  593|  1.86k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 1.10k, False: 761]
  ------------------
  594|  1.10k|                                        {
  595|  1.10k|                                            return OpCode::SLLI;
  596|  1.10k|                                        }
  597|    761|                                        break;
  598|       |
  599|  1.21k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 1.21k, False: 9.96k]
  ------------------
  600|  3.71k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 2.50k, False: 8.66k]
  ------------------
  601|  3.71k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 1.46k, False: 2.25k]
  ------------------
  602|  1.46k|                                        {
  603|  1.46k|                                            return OpCode::SLTI;
  604|  1.46k|                                        }
  605|  2.25k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 929, False: 1.32k]
  ------------------
  606|    929|                                        {
  607|    929|                                            return OpCode::SLTU;
  608|    929|                                        }
  609|  1.32k|                                        break;
  610|  11.1k|                                }
  611|       |
  612|  7.65k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 2.88k, False: 32.7k]
  ------------------
  613|  8.26k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 606, False: 35.0k]
  ------------------
  614|  8.26k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 4.01k, False: 4.24k]
  ------------------
  615|  4.01k|                                {
  616|  4.01k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 1.12k, False: 2.89k]
  ------------------
  617|  1.12k|                                    {
  618|  1.12k|                                        return OpCode::SNEI;
  619|  1.12k|                                    }
  620|  2.89k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 701, False: 2.19k]
  ------------------
  621|    701|                                    {
  622|    701|                                        return OpCode::SNEU;
  623|    701|                                    }
  624|  4.01k|                                }
  625|  6.43k|                                break;
  626|       |
  627|  6.43k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 1.60k, False: 34.0k]
  ------------------
  628|  3.56k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 1.95k, False: 33.6k]
  ------------------
  629|  3.56k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 2.41k, False: 1.14k]
  |  Branch (629:37): [True: 1.47k, False: 2.09k]
  |  Branch (629:53): [True: 1.47k, False: 942]
  ------------------
  630|  1.47k|                                {
  631|  1.47k|                                    return OpCode::SRAI;
  632|  1.47k|                                }
  633|  2.09k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 1.03k, False: 1.05k]
  |  Branch (633:42): [True: 825, False: 1.26k]
  |  Branch (633:58): [True: 825, False: 207]
  ------------------
  634|    825|                                {
  635|    825|                                    return OpCode::SRLI;
  636|    825|                                }
  637|  1.26k|                                break;
  638|       |
  639|  2.50k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 2.50k, False: 33.1k]
  ------------------
  640|  4.76k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 2.26k, False: 33.3k]
  ------------------
  641|  4.76k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 4.46k, False: 299]
  ------------------
  642|  4.46k|                                {
  643|  4.46k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 242, False: 4.22k]
  ------------------
  644|  4.46k|                                    {
  645|    610|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 610, False: 3.85k]
  ------------------
  646|  1.61k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 1.00k, False: 3.45k]
  ------------------
  647|  1.61k|                                            return OpCode::SUBD;
  648|       |
  649|    324|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 324, False: 4.14k]
  ------------------
  650|  1.07k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 750, False: 3.71k]
  ------------------
  651|  1.07k|                                            return OpCode::SUBF;
  652|       |
  653|    754|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 754, False: 3.71k]
  ------------------
  654|  1.06k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 310, False: 4.15k]
  ------------------
  655|  1.06k|                                            return OpCode::SUBI;
  656|       |
  657|    273|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 273, False: 4.19k]
  ------------------
  658|    469|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 196, False: 4.27k]
  ------------------
  659|    469|                                            return OpCode::SUBU;
  660|  4.46k|                                    }
  661|  4.46k|                                }
  662|    541|                                break;
  663|  35.6k|                        }
  664|  13.1k|                        break;
  665|       |
  666|  13.1k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 2.89k, False: 97.7k]
  ------------------
  667|  4.37k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 1.48k, False: 99.1k]
  ------------------
  668|  4.37k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 3.48k, False: 895]
  |  Branch (668:29): [True: 689, False: 3.68k]
  |  Branch (668:45): [True: 1.35k, False: 2.13k]
  |  Branch (668:61): [True: 689, False: 661]
  ------------------
  669|    689|                        {
  670|    689|                            return OpCode::TRAP;
  671|    689|                        }
  672|  3.68k|                        break;
  673|  3.68k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 339, False: 100k]
  ------------------
  674|  3.05k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 2.71k, False: 97.9k]
  ------------------
  675|  3.05k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 2.44k, False: 604]
  |  Branch (675:29): [True: 816, False: 2.23k]
  |  Branch (675:45): [True: 1.50k, False: 949]
  |  Branch (675:61): [True: 816, False: 684]
  ------------------
  676|    816|                        {
  677|    816|                            return OpCode::XORI;
  678|    816|                        }
  679|  2.23k|                        break;
  680|   100k|                }
  681|  58.9k|                break;
  682|   100k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  58.9k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 46.6k, False: 398k]
  ------------------
  686|  46.6k|                char c1 = token[0];
  687|  46.6k|                char c2 = token[1];
  688|  46.6k|                char c3 = token[2];
  689|  46.6k|                char c4 = token[3];
  690|  46.6k|                char c5 = token[4];
  691|       |
  692|  46.6k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 11.5k, False: 35.1k]
  ------------------
  693|  46.6k|                {
  694|    253|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 253, False: 46.4k]
  ------------------
  695|  4.37k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 4.11k, False: 42.5k]
  ------------------
  696|  4.37k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 3.96k, False: 403]
  |  Branch (696:29): [True: 1.46k, False: 2.90k]
  |  Branch (696:45): [True: 3.34k, False: 618]
  |  Branch (696:61): [True: 1.93k, False: 1.41k]
  |  Branch (696:77): [True: 1.46k, False: 465]
  ------------------
  697|  1.46k|                        {
  698|  1.46k|                            return OpCode::ADDUI;
  699|  1.46k|                        }
  700|  2.90k|                        break;
  701|       |
  702|  2.90k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 2.36k, False: 44.3k]
  ------------------
  703|  4.76k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 2.39k, False: 44.2k]
  ------------------
  704|  4.76k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 4.29k, False: 469]
  |  Branch (704:29): [True: 1.30k, False: 3.46k]
  |  Branch (704:45): [True: 3.91k, False: 377]
  |  Branch (704:61): [True: 2.26k, False: 1.65k]
  |  Branch (704:77): [True: 1.30k, False: 960]
  ------------------
  705|  1.30k|                        {
  706|  1.30k|                            return OpCode::DIVUI;
  707|  1.30k|                        }
  708|  3.46k|                        break;
  709|       |
  710|  3.46k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 1.47k, False: 45.2k]
  ------------------
  711|  6.82k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 5.34k, False: 41.3k]
  ------------------
  712|  6.82k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 5.75k, False: 1.06k]
  |  Branch (712:29): [True: 4.77k, False: 2.05k]
  |  Branch (712:45): [True: 5.11k, False: 641]
  |  Branch (712:61): [True: 4.77k, False: 343]
  ------------------
  713|  4.77k|                        {
  714|  4.77k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 495, False: 4.27k]
  ------------------
  715|  4.77k|                            {
  716|    528|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 528, False: 4.24k]
  ------------------
  717|  1.10k|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 578, False: 4.19k]
  ------------------
  718|  1.10k|                                    return OpCode::MULTD;
  719|       |
  720|    205|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 205, False: 4.56k]
  ------------------
  721|    527|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 322, False: 4.44k]
  ------------------
  722|    527|                                    return OpCode::MULTF;
  723|       |
  724|    357|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 357, False: 4.41k]
  ------------------
  725|  1.11k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 753, False: 4.01k]
  ------------------
  726|  1.11k|                                    return OpCode::MULTI;
  727|       |
  728|    513|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 513, False: 4.25k]
  ------------------
  729|  1.53k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 1.01k, False: 3.75k]
  ------------------
  730|  1.53k|                                    return OpCode::MULTU;
  731|  4.77k|                            }
  732|  4.77k|                        }
  733|  2.54k|                        break;
  734|       |
  735|  7.13k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 7.13k, False: 39.5k]
  ------------------
  736|  19.2k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 12.0k, False: 34.5k]
  ------------------
  737|  19.2k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 1.25k, False: 17.9k]
  ------------------
  738|  19.2k|                        {
  739|  1.71k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 1.71k, False: 17.5k]
  ------------------
  740|  2.67k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 965, False: 18.2k]
  ------------------
  741|  2.67k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 2.41k, False: 261]
  |  Branch (741:37): [True: 1.04k, False: 1.62k]
  |  Branch (741:53): [True: 2.14k, False: 275]
  |  Branch (741:69): [True: 1.04k, False: 1.09k]
  ------------------
  742|  1.04k|                                {
  743|  1.04k|                                    return OpCode::SEQUI;
  744|  1.04k|                                }
  745|  1.62k|                                break;
  746|       |
  747|  2.42k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 2.42k, False: 16.8k]
  ------------------
  748|  4.58k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 2.15k, False: 17.0k]
  ------------------
  749|  4.58k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 1.54k, False: 3.03k]
  |  Branch (749:37): [True: 568, False: 4.01k]
  |  Branch (749:53): [True: 803, False: 741]
  |  Branch (749:69): [True: 568, False: 235]
  ------------------
  750|    568|                                {
  751|    568|                                    return OpCode::SGEUI;
  752|    568|                                }
  753|  4.01k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 2.96k, False: 1.04k]
  |  Branch (753:42): [True: 1.60k, False: 2.40k]
  |  Branch (753:58): [True: 2.32k, False: 643]
  |  Branch (753:74): [True: 1.60k, False: 716]
  ------------------
  754|  1.60k|                                {
  755|  1.60k|                                    return OpCode::SGTUI;
  756|  1.60k|                                }
  757|  2.40k|                                break;
  758|       |
  759|  2.49k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 2.49k, False: 16.7k]
  ------------------
  760|  4.50k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 2.01k, False: 17.2k]
  ------------------
  761|  4.50k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 1.82k, False: 2.67k]
  |  Branch (761:37): [True: 1.10k, False: 3.40k]
  |  Branch (761:53): [True: 1.33k, False: 495]
  |  Branch (761:69): [True: 1.10k, False: 231]
  ------------------
  762|  1.10k|                                {
  763|  1.10k|                                    return OpCode::SLEUI;
  764|  1.10k|                                }
  765|  3.40k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 2.30k, False: 1.09k]
  |  Branch (765:42): [True: 849, False: 2.55k]
  |  Branch (765:58): [True: 1.46k, False: 843]
  |  Branch (765:74): [True: 849, False: 617]
  ------------------
  766|    849|                                {
  767|    849|                                    return OpCode::SLTUI;
  768|    849|                                }
  769|  2.55k|                                break;
  770|       |
  771|  2.55k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 2.15k, False: 17.0k]
  ------------------
  772|  4.05k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 1.90k, False: 17.3k]
  ------------------
  773|  4.05k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 2.94k, False: 1.11k]
  |  Branch (773:37): [True: 1.32k, False: 2.73k]
  |  Branch (773:53): [True: 2.05k, False: 888]
  |  Branch (773:69): [True: 1.32k, False: 729]
  ------------------
  774|  1.32k|                                {
  775|  1.32k|                                    return OpCode::SNEUI;
  776|  1.32k|                                }
  777|  2.73k|                                break;
  778|       |
  779|  2.73k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 1.23k, False: 18.0k]
  ------------------
  780|  2.15k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 923, False: 18.3k]
  ------------------
  781|  2.15k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 1.80k, False: 348]
  |  Branch (781:37): [True: 928, False: 1.22k]
  |  Branch (781:53): [True: 1.18k, False: 619]
  |  Branch (781:69): [True: 928, False: 259]
  ------------------
  782|    928|                                {
  783|    928|                                    return OpCode::SUBUI;
  784|    928|                                }
  785|  1.22k|                                break;
  786|  19.2k|                        }
  787|       |
  788|  11.8k|                        break;
  789|  46.6k|                }
  790|       |
  791|  32.2k|                break;
  792|  46.6k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  32.2k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 25.2k, False: 419k]
  ------------------
  796|  25.2k|                char c1 = token[0];
  797|  25.2k|                char c2 = token[1];
  798|  25.2k|                char c3 = token[2];
  799|  25.2k|                char c4 = token[3];
  800|  25.2k|                char c5 = token[4];
  801|  25.2k|                char c6 = token[5];
  802|       |
  803|  25.2k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 14.0k, False: 11.2k]
  |  Branch (803:21): [True: 12.9k, False: 12.3k]
  |  Branch (803:37): [True: 13.4k, False: 598]
  |  Branch (803:53): [True: 12.9k, False: 499]
  ------------------
  804|  12.9k|                {
  805|  12.9k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 623, False: 12.3k]
  ------------------
  806|  12.9k|                    {
  807|  1.57k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 1.57k, False: 11.3k]
  ------------------
  808|  3.28k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 1.70k, False: 11.2k]
  ------------------
  809|  3.28k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 2.75k, False: 532]
  ------------------
  810|  2.75k|                            {
  811|  2.75k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 932, False: 1.81k]
  ------------------
  812|    932|                                {
  813|    932|                                    return OpCode::CVTD2F;
  814|    932|                                }
  815|  1.81k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 1.01k, False: 805]
  ------------------
  816|  1.01k|                                {
  817|  1.01k|                                    return OpCode::CVTD2I;
  818|  1.01k|                                }
  819|  2.75k|                            }
  820|  1.33k|                            break;
  821|       |
  822|  5.67k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 5.67k, False: 7.29k]
  ------------------
  823|  6.06k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 393, False: 12.5k]
  ------------------
  824|  6.06k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 5.42k, False: 646]
  ------------------
  825|  5.42k|                            {
  826|  5.42k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 532, False: 4.89k]
  ------------------
  827|    532|                                {
  828|    532|                                    return OpCode::CVTF2D;
  829|    532|                                }
  830|  4.89k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 3.63k, False: 1.25k]
  ------------------
  831|  3.63k|                                {
  832|  3.63k|                                    return OpCode::CVTF2I;
  833|  3.63k|                                }
  834|  5.42k|                            }
  835|  1.90k|                            break;
  836|       |
  837|  2.49k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 2.49k, False: 10.4k]
  ------------------
  838|  2.99k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 496, False: 12.4k]
  ------------------
  839|  2.99k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 2.53k, False: 452]
  ------------------
  840|  2.53k|                            {
  841|  2.53k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 1.04k, False: 1.49k]
  ------------------
  842|  1.04k|                                {
  843|  1.04k|                                    return OpCode::CVTI2D;
  844|  1.04k|                                }
  845|  1.49k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 1.04k, False: 450]
  ------------------
  846|  1.04k|                                {
  847|  1.04k|                                    return OpCode::CVTI2F;
  848|  1.04k|                                }
  849|  2.53k|                            }
  850|  12.9k|                    }
  851|  12.9k|                }
  852|  12.3k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 4.47k, False: 7.84k]
  |  Branch (852:26): [True: 1.03k, False: 11.2k]
  |  Branch (852:42): [True: 3.33k, False: 1.14k]
  |  Branch (852:58): [True: 2.74k, False: 596]
  |  Branch (852:74): [True: 2.34k, False: 395]
  ------------------
  853|  12.3k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 1.45k, False: 892]
  |  Branch (853:42): [True: 1.03k, False: 421]
  ------------------
  854|  1.03k|                {
  855|  1.03k|                    return OpCode::MULTUI;
  856|  1.03k|                }
  857|  16.0k|                break;
  858|  25.2k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  16.0k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 10.9k, False: 434k]
  ------------------
  862|  10.9k|                char c1 = token[0];
  863|  10.9k|                char c2 = token[1];
  864|  10.9k|                char c3 = token[2];
  865|  10.9k|                char c4 = token[3];
  866|  10.9k|                char c5 = token[4];
  867|  10.9k|                char c6 = token[5];
  868|  10.9k|                char c7 = token[6];
  869|       |
  870|  10.9k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 7.62k, False: 3.29k]
  |  Branch (870:21): [True: 5.97k, False: 4.94k]
  |  Branch (870:37): [True: 6.42k, False: 1.19k]
  |  Branch (870:53): [True: 5.97k, False: 450]
  ------------------
  871|  5.97k|                {
  872|  5.97k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 2.40k, False: 3.57k]
  |  Branch (872:25): [True: 884, False: 5.09k]
  |  Branch (872:41): [True: 1.94k, False: 451]
  |  Branch (872:54): [True: 1.21k, False: 738]
  |  Branch (872:70): [True: 884, False: 327]
  ------------------
  873|    884|                    {
  874|    884|                        return OpCode::MOVI2FP;
  875|    884|                    }
  876|  5.09k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 2.69k, False: 2.40k]
  |  Branch (876:30): [True: 1.43k, False: 3.66k]
  |  Branch (876:46): [True: 1.98k, False: 704]
  |  Branch (876:62): [True: 1.78k, False: 202]
  |  Branch (876:75): [True: 1.43k, False: 354]
  ------------------
  877|  1.43k|                    {
  878|  1.43k|                        return OpCode::MOVFP2I;
  879|  1.43k|                    }
  880|  5.97k|                }
  881|  8.60k|                break;
  882|  10.9k|            }
  883|       |
  884|  8.60k|            default: {
  ------------------
  |  Branch (884:13): [True: 5.18k, False: 439k]
  ------------------
  885|  5.18k|                break;
  886|  10.9k|            }
  887|   445k|        }
  888|       |
  889|       |        // None found
  890|   289k|        return OpCode::NONE;
  891|   445k|    }
_ZN3dlx3iceEcc:
   17|   621k|    {
   18|   621k|        constexpr const char diff = 'a' - 'A';
   19|   621k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 199k, False: 421k]
  |  Branch (19:28): [True: 161k, False: 260k]
  ------------------
   20|   621k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   498k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  5.29k|    {
  193|  5.29k|        ParseError err;
  194|       |
  195|  5.29k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  5.29k|        err.m_LineNumber                           = line_number;
  197|  5.29k|        err.m_Column                               = column;
  198|  5.29k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  5.29k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  5.29k|        return err;
  202|  5.29k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  5.29k|    {
  207|  5.29k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  5.29k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  5.29k|                                                         actual_type);
  210|  5.29k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|  2.72k|    {
  216|  2.72k|        ParseError err;
  217|       |
  218|  2.72k|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|  2.72k|        err.m_LineNumber        = line_number;
  220|  2.72k|        err.m_Column            = column;
  221|  2.72k|        err.invalid_number.text = text;
  222|       |
  223|  2.72k|        return err;
  224|  2.72k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|  2.72k|    {
  228|  2.72k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|  2.72k|                                                token.GetColumn().unsafe(), token.GetText());
  230|  2.72k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      8|    {
  235|      8|        ParseError err;
  236|       |
  237|      8|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      8|        err.m_LineNumber = line_number;
  239|      8|        err.m_Column     = column;
  240|       |
  241|      8|        return err;
  242|      8|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      8|    {
  247|      8|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      8|                                                                     token.GetColumn().unsafe());
  249|      8|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   246k|    {
  255|   246k|        ParseError err;
  256|       |
  257|   246k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   246k|        err.m_LineNumber                   = line_number;
  259|   246k|        err.m_Column                       = column;
  260|   246k|        err.unexpected_token.expected_type = expected_type;
  261|   246k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   246k|        return err;
  264|   246k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   246k|    {
  269|   246k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   246k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   246k|                                                  token.GetType());
  272|   246k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  36.3k|    {
  277|  36.3k|        ParseError err;
  278|       |
  279|  36.3k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  36.3k|        err.m_LineNumber                   = line_number;
  281|  36.3k|        err.m_Column                       = column;
  282|  36.3k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  36.3k|        return err;
  285|  36.3k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|    632|    {
  289|    632|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|    632|                                                    token.GetColumn().unsafe(), token.GetText());
  291|    632|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   100k|    {
  296|   100k|        ParseError err;
  297|       |
  298|   100k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   100k|        err.m_LineNumber                       = line_number;
  300|   100k|        err.m_Column                           = column;
  301|   100k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   100k|        return err;
  304|   100k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   100k|    {
  309|   100k|        return ConstructInvalidLabelIdentifierParseError(
  310|   100k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   100k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  18.7k|    {
  317|  18.7k|        ParseError err;
  318|       |
  319|  18.7k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  18.7k|        err.m_LineNumber                     = line_number;
  321|  18.7k|        err.m_Column                         = column;
  322|  18.7k|        err.label_already_defined.label_name = label_name;
  323|  18.7k|        err.label_already_defined.at_line    = at_line;
  324|  18.7k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  18.7k|        return err;
  327|  18.7k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  18.7k|    {
  332|  18.7k|        return ConstructLabelAlreadyDefinedParseError(
  333|  18.7k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  18.7k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  18.7k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|  69.0k|    {
  340|  69.0k|        ParseError err;
  341|       |
  342|  69.0k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|  69.0k|        err.m_LineNumber = line_number;
  344|  69.0k|        err.m_Column     = column;
  345|       |
  346|  69.0k|        return err;
  347|  69.0k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|  69.0k|    {
  352|  69.0k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|  69.0k|                                                        token.GetColumn().unsafe());
  354|  69.0k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  12.5k|    {
  360|  12.5k|        ParseError err;
  361|       |
  362|  12.5k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  12.5k|        err.m_LineNumber               = line_number;
  364|  12.5k|        err.m_Column                   = column;
  365|  12.5k|        err.too_few_arguments.required = required;
  366|  12.5k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  12.5k|        return err;
  369|  12.5k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  12.5k|    {
  374|  12.5k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  12.5k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  12.5k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  5.74k|    {
  381|  5.74k|        ParseError err;
  382|       |
  383|  5.74k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  5.74k|        err.m_LineNumber           = line_number;
  385|  5.74k|        err.m_Column               = column;
  386|  5.74k|        err.empty_label.label_name = label_name;
  387|       |
  388|  5.74k|        return err;
  389|  5.74k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  5.74k|    {
  393|  5.74k|        return ConstructEmptyLabelParseError(
  394|  5.74k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  5.74k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 4.88k, False: 859]
  ------------------
  396|  4.88k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  5.74k|                        token.GetText());
  398|  5.74k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  1.44k|    {
  403|  1.44k|        ParseError err;
  404|       |
  405|  1.44k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  1.44k|        err.m_LineNumber = line_number;
  407|  1.44k|        err.m_Column     = column;
  408|       |
  409|  1.44k|        return err;
  410|  1.44k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  1.44k|    {
  414|  1.44k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  1.44k|                                               token.GetColumn().unsafe());
  416|  1.44k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   498k|    {
   19|   498k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   498k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  6.66k|    {
  182|  6.66k|        ParsedProgram program;
  183|       |
  184|  6.66k|        program.m_Tokens = tokens;
  185|       |
  186|  6.66k|        phi::boolean line_has_instruction{false};
  187|  6.66k|        phi::usize   label_count{0u};
  188|       |
  189|   604k|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 598k, False: 6.66k]
  ------------------
  190|   598k|        {
  191|   598k|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|   598k|            switch (current_token.GetType())
  196|   598k|            {
  197|       |                // Ignore comments
  198|  1.98k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 1.98k, False: 596k]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  1.98k|                    break;
  201|       |
  202|  83.6k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 83.6k, False: 514k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|  83.6k|                    line_has_instruction = false;
  205|  83.6k|                    break;
  206|       |
  207|   206k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 206k, False: 391k]
  ------------------
  208|   206k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 52.5k, False: 153k]
  ------------------
  209|  52.5k|                    {
  210|  52.5k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  52.5k|                                current_token, Token::Type::NewLine));
  212|  52.5k|                        break;
  213|  52.5k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   153k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 66.3k, False: 87.2k]
  ------------------
  218|  66.3k|                    {
  219|  66.3k|                        program.AddParseError(
  220|  66.3k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|  66.3k|                        break;
  222|  66.3k|                    }
  223|       |
  224|  87.2k|                    std::string_view label_name = current_token.GetText();
  225|  87.2k|                    label_name.remove_suffix(1);
  226|       |
  227|  87.2k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 35.6k, False: 51.5k]
  ------------------
  228|  35.6k|                    {
  229|  35.6k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  35.6k|                                current_token.GetLineNumber().unsafe(),
  231|  35.6k|                                current_token.GetColumn().unsafe(), label_name));
  232|  35.6k|                        break;
  233|  35.6k|                    }
  234|       |
  235|  51.5k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 26.4k, False: 25.1k]
  ------------------
  236|  26.4k|                    {
  237|  26.4k|                        program.AddParseError(
  238|  26.4k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  26.4k|                        break;
  240|  26.4k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  25.1k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 18.7k, False: 6.40k]
  ------------------
  244|  18.7k|                    {
  245|       |                        // Find first defintions of label
  246|  18.7k|                        const Token* first_label_definition =
  247|  18.7k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  18.7k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  18.7k|                                    {
  250|  18.7k|                                        std::string_view token_label_name = t.GetText();
  251|  18.7k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  18.7k|                                        if (token_label_name == label_name)
  254|  18.7k|                                        {
  255|  18.7k|                                            return true;
  256|  18.7k|                                        }
  257|  18.7k|                                    }
  258|       |
  259|  18.7k|                                    return false;
  260|  18.7k|                                });
  261|       |
  262|  18.7k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  18.7k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  18.7k|                                current_token, *first_label_definition));
  266|  18.7k|                        break;
  267|  18.7k|                    }
  268|       |
  269|  6.40k|                    program.m_JumpData[label_name] =
  270|  6.40k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  6.40k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  6.40k|                    break;
  277|  25.1k|                }
  278|       |
  279|   120k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 120k, False: 477k]
  ------------------
  280|   120k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 69.0k, False: 51.9k]
  ------------------
  281|  69.0k|                    {
  282|  69.0k|                        program.AddParseError(
  283|  69.0k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|  69.0k|                        break;
  285|  69.0k|                    }
  286|       |
  287|  51.9k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  51.9k|                    PHI_ASSERT(current_token.HasHint());
  291|  51.9k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  51.9k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  51.9k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  51.9k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  51.9k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  51.9k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  51.9k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  51.9k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  51.9k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   103k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 89.4k, False: 14.4k]
  ------------------
  313|  89.4k|                    {
  314|       |                        // Get next token
  315|  89.4k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 620, False: 88.8k]
  ------------------
  316|    620|                        {
  317|    620|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    620|                                    current_token, number_of_argument_required.unsafe(),
  319|    620|                                    argument_num.unsafe()));
  320|    620|                            break;
  321|    620|                        }
  322|       |
  323|  88.8k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|  88.8k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 33.2k, False: 55.6k]
  ------------------
  327|  33.2k|                        {
  328|  33.2k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 1.44k, False: 31.7k]
  ------------------
  329|  1.44k|                            {
  330|  1.44k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  1.44k|                            }
  332|       |
  333|  33.2k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  33.2k|                            continue;
  336|  33.2k|                        }
  337|       |
  338|  55.6k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 11.9k, False: 43.7k]
  ------------------
  339|  11.9k|                        {
  340|  11.9k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  11.9k|                                    token, number_of_argument_required.unsafe(),
  342|  11.9k|                                    argument_num.unsafe()));
  343|  11.9k|                            break;
  344|  11.9k|                        }
  345|       |
  346|  43.7k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  43.7k|                                parse_instruction_argument(
  348|  43.7k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  43.7k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 24.9k, False: 18.7k]
  ------------------
  350|  24.9k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  24.9k|                            break;
  353|  24.9k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  18.7k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  18.7k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  18.7k|                        argument_num++;
  360|  18.7k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  18.7k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  51.9k|                    program.m_Instructions.emplace_back(instruction);
  368|  51.9k|                    line_has_instruction = true;
  369|  51.9k|                    break;
  370|   120k|                }
  371|       |
  372|   185k|                default:
  ------------------
  |  Branch (372:17): [True: 185k, False: 412k]
  ------------------
  373|   185k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   185k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 114k, False: 70.3k]
  ------------------
  375|   114k|                    {
  376|   114k|                        expected_token_type = Token::Type::NewLine;
  377|   114k|                    }
  378|       |
  379|   185k|                    program.AddParseError(
  380|   185k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   185k|                    break;
  382|   598k|            }
  383|   598k|        }
  384|       |
  385|       |        // Check for empty labels
  386|  6.66k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 841, False: 5.82k]
  ------------------
  387|    841|        {
  388|  8.02k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 7.18k, False: 841]
  ------------------
  389|  7.18k|            {
  390|  7.18k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  7.18k|                const Token& token = *it;
  393|  7.18k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 5.74k, False: 1.44k]
  ------------------
  394|  5.74k|                {
  395|  5.74k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  5.74k|                    --label_count;
  397|  5.74k|                }
  398|  7.18k|            }
  399|    841|        }
  400|       |
  401|  6.66k|        return program;
  402|  6.66k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  6.66k|    {
  406|  6.66k|        TokenStream tokens = Tokenize(source);
  407|  6.66k|        return Parse(tokens);
  408|  6.66k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  43.7k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  43.7k|        switch (token.GetType())
   38|  43.7k|        {
   39|  2.69k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 2.69k, False: 41.0k]
  ------------------
   40|  2.69k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 537, False: 2.15k]
  ------------------
   41|  2.69k|                                          ArgumentType::AddressDisplacement))
   42|    537|                {
   43|    537|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|    537|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|    537|                    return {};
   47|    537|                }
   48|       |
   49|       |                // Get address displacement
   50|  2.15k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  2.15k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  2.15k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 8, False: 2.14k]
  ------------------
   55|      8|                {
   56|      8|                    program.AddParseError(
   57|      8|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      8|                    return {};
   59|      8|                }
   60|       |
   61|  2.14k|                auto         it           = tokens.current_position();
   62|  2.14k|                const Token& first_token  = tokens.consume();
   63|  2.14k|                const Token& second_token = tokens.consume();
   64|  2.14k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  2.14k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 694, False: 1.45k]
  ------------------
   67|    694|                {
   68|    694|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|    694|                            first_token, Token::Type::OpenBracket));
   70|    694|                    return {};
   71|    694|                }
   72|       |
   73|       |                // Second token is the register
   74|  1.45k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 486, False: 968]
  ------------------
   75|    486|                {
   76|    486|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|    486|                            second_token, Token::Type::RegisterInt));
   78|    486|                    return {};
   79|    486|                }
   80|       |
   81|    968|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 497, False: 471]
  ------------------
   82|    497|                {
   83|    497|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|    497|                            third_token, Token::Type::ClosingBracket));
   85|    497|                    return {};
   86|    497|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|    471|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|    471|                return ConstructInstructionArgumentAddressDisplacement(
   95|    471|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|    968|            }
   97|  8.36k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 8.36k, False: 35.3k]
  ------------------
   98|  8.36k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 343, False: 8.02k]
  ------------------
   99|    343|                {
  100|    343|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|    343|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|    343|                    return {};
  103|    343|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  8.02k|                return ConstructInstructionArgumentRegisterInt(
  109|  8.02k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  8.36k|            }
  111|  3.68k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 3.68k, False: 40.0k]
  ------------------
  112|  3.68k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 1.27k, False: 2.41k]
  ------------------
  113|  1.27k|                {
  114|  1.27k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  1.27k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  1.27k|                    return {};
  117|  1.27k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  2.41k|                return ConstructInstructionArgumentRegisterFloat(
  123|  2.41k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  3.68k|            }
  125|    632|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 632, False: 43.0k]
  ------------------
  126|    632|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|    632|                return {};
  129|  3.68k|            }
  130|  16.1k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 16.1k, False: 27.5k]
  ------------------
  131|       |                // Parse as Label
  132|  16.1k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 2.69k, False: 13.4k]
  ------------------
  133|  2.69k|                {
  134|  2.69k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  2.69k|                            token, expected_argument_type, ArgumentType::Label));
  136|  2.69k|                    return {};
  137|  2.69k|                }
  138|       |
  139|  13.4k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 13.4k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  13.4k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 7.36k, False: 6.07k]
  ------------------
  146|  7.36k|                {
  147|  7.36k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  7.36k|                    return {};
  149|  7.36k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  6.07k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  13.4k|            }
  155|  4.93k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 4.93k, False: 38.7k]
  ------------------
  156|  4.93k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 450, False: 4.48k]
  ------------------
  157|    450|                {
  158|    450|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|    450|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|    450|                    return {};
  161|    450|                }
  162|       |
  163|  4.48k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 1.76k, False: 2.72k]
  ------------------
  164|  1.76k|                {
  165|  1.76k|                    return ConstructInstructionArgumentImmediateValue(
  166|  1.76k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  1.76k|                }
  168|       |
  169|  2.72k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|  2.72k|                return {};
  171|  4.48k|            }
  172|       |
  173|  7.26k|            default:
  ------------------
  |  Branch (173:13): [True: 7.26k, False: 36.4k]
  ------------------
  174|  7.26k|                program.AddParseError(
  175|  7.26k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  7.26k|                return {};
  177|  43.7k|        }
  178|  43.7k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|   247k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   247k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 181k, False: 66.7k]
  ------------------
  249|   181k|                                    {
  250|   181k|                                        std::string_view token_label_name = t.GetText();
  251|   181k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   181k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 18.7k, False: 162k]
  ------------------
  254|  18.7k|                                        {
  255|  18.7k|                                            return true;
  256|  18.7k|                                        }
  257|   181k|                                    }
  258|       |
  259|   228k|                                    return false;
  260|   247k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   70|  2.35M|    {
   71|  2.35M|        PHI_ASSERT(id != IntRegisterID::None);
   72|  2.35M|        phi::size_t id_value = phi::to_underlying(id);
   73|       |
   74|  2.35M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   75|       |
   76|  2.35M|        return m_IntRegisters[id_value];
   77|  2.35M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   81|  5.55M|    {
   82|  5.55M|        PHI_ASSERT(id != IntRegisterID::None);
   83|  5.55M|        phi::size_t id_value = phi::to_underlying(id);
   84|       |
   85|  5.55M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   86|       |
   87|  5.55M|        return m_IntRegisters[id_value];
   88|  5.55M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   91|  3.17M|    {
   92|  3.17M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   93|  3.17M|                                             RegisterAccessType::Signed),
   94|  3.17M|                   "Mismatch for instruction access type");
   95|       |
   96|  3.17M|        const phi::size_t id_value = phi::to_underlying(id);
   97|       |
   98|  3.17M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   99|  3.17M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  100|  3.17M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (100:13): [True: 1.43M, False: 1.73M]
  ------------------
  101|  3.17M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (101:13): [True: 77.4k, False: 1.36M]
  ------------------
  102|  77.4k|        {
  103|  77.4k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  77.4k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  104|  77.4k|        }
  105|       |
  106|  3.17M|        return GetIntRegister(id).GetSignedValue();
  107|  3.17M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  110|  2.38M|    {
  111|  2.38M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  112|  2.38M|                                             RegisterAccessType::Unsigned),
  113|  2.38M|                   "Mismatch for instruction access type");
  114|       |
  115|  2.38M|        const phi::size_t id_value = phi::to_underlying(id);
  116|       |
  117|  2.38M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  118|  2.38M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  119|  2.38M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (119:13): [True: 1.73M, False: 649k]
  ------------------
  120|  2.38M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (120:13): [True: 1.50M, False: 224k]
  ------------------
  121|  1.50M|        {
  122|  1.50M|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  1.50M|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  123|  1.50M|        }
  124|       |
  125|  2.38M|        return GetIntRegister(id).GetUnsignedValue();
  126|  2.38M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  129|  1.75M|    {
  130|  1.75M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  131|  1.75M|                                             RegisterAccessType::Signed),
  132|  1.75M|                   "Mismatch for instruction access type");
  133|       |
  134|  1.75M|        IntRegister& reg = GetIntRegister(id);
  135|       |
  136|  1.75M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (136:13): [True: 570k, False: 1.18M]
  ------------------
  137|   570k|        {
  138|   570k|            return;
  139|   570k|        }
  140|       |
  141|  1.18M|        reg.SetSignedValue(value);
  142|       |
  143|  1.18M|        const phi::size_t id_value = phi::to_underlying(id);
  144|       |
  145|  1.18M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  146|  1.18M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  147|  1.18M|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  150|   592k|    {
  151|   592k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  152|   592k|                                             RegisterAccessType::Unsigned),
  153|   592k|                   "Mismatch for instruction access type");
  154|       |
  155|   592k|        IntRegister& reg = GetIntRegister(id);
  156|       |
  157|   592k|        if (reg.IsReadOnly())
  ------------------
  |  Branch (157:13): [True: 380k, False: 212k]
  ------------------
  158|   380k|        {
  159|   380k|            return;
  160|   380k|        }
  161|       |
  162|   212k|        reg.SetUnsignedValue(value);
  163|       |
  164|   212k|        const phi::size_t id_value = phi::to_underlying(id);
  165|       |
  166|   212k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  167|   212k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  168|   212k|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  171|  1.42M|    {
  172|  1.42M|        PHI_ASSERT(id != FloatRegisterID::None);
  173|  1.42M|        const phi::size_t id_value = phi::to_underlying(id);
  174|       |
  175|  1.42M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  176|       |
  177|  1.42M|        return m_FloatRegisters[id_value];
  178|  1.42M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  182|   727k|    {
  183|   727k|        PHI_ASSERT(id != FloatRegisterID::None);
  184|   727k|        const phi::size_t id_value = phi::to_underlying(id);
  185|       |
  186|   727k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  187|       |
  188|   727k|        return m_FloatRegisters[id_value];
  189|   727k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  192|   727k|    {
  193|   727k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  194|   727k|                                             RegisterAccessType::Float),
  195|   727k|                   "Mismatch for instruction access type");
  196|       |
  197|   727k|        const phi::size_t id_value = phi::to_underlying(id);
  198|       |
  199|   727k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  200|   727k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  201|   727k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (201:13): [True: 585k, False: 142k]
  ------------------
  202|   727k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (202:13): [True: 252k, False: 333k]
  ------------------
  203|   252k|        {
  204|       |            /*
  205|       |            DLX_WARN("Mismatch for register value type");
  206|       |            */
  207|   252k|        }
  208|       |
  209|   727k|        const FloatRegister& reg = GetFloatRegister(id);
  210|       |
  211|   727k|        return reg.GetValue();
  212|   727k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  215|   488k|    {
  216|   488k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  217|   488k|                                             RegisterAccessType::Double),
  218|   488k|                   "Mismatch for instruction access type");
  219|       |
  220|   488k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (220:13): [True: 22, False: 488k]
  ------------------
  221|     22|        {
  222|     22|            Raise(Exception::MisalignedRegisterAccess);
  223|     22|            return {0.0};
  224|     22|        }
  225|       |
  226|   488k|        const phi::size_t id_value = phi::to_underlying(id);
  227|       |
  228|   488k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  229|   488k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  230|   488k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (230:13): [True: 373k, False: 115k]
  ------------------
  231|   488k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (231:13): [True: 222k, False: 150k]
  ------------------
  232|   222k|        {
  233|   222k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   222k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  234|   222k|        }
  235|       |
  236|   488k|        const FloatRegisterValueType register_value_type_high =
  237|   488k|                m_FloatRegistersValueTypes[id_value + 1u];
  238|   488k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (238:13): [True: 373k, False: 115k]
  ------------------
  239|   488k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (239:13): [True: 91.3k, False: 282k]
  ------------------
  240|  91.3k|        {
  241|  91.3k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  91.3k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  242|  91.3k|        }
  243|       |
  244|   488k|        const FloatRegister& first_reg = GetFloatRegister(id);
  245|   488k|        const FloatRegister& second_reg =
  246|   488k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  247|       |
  248|   488k|        const float first_value  = first_reg.GetValue().unsafe();
  249|   488k|        const float second_value = second_reg.GetValue().unsafe();
  250|       |
  251|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  252|   488k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  253|       |
  254|   488k|        const std::uint32_t first_value_bits =
  255|   488k|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  256|   488k|        const std::uint32_t second_value_bits =
  257|   488k|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  258|       |
  259|   488k|        std::uint64_t final_value_bits =
  260|   488k|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  261|       |
  262|   488k|        return *reinterpret_cast<double*>(&final_value_bits);
  263|       |
  264|   488k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  265|   488k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  268|   178k|    {
  269|   178k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  270|   178k|                                             RegisterAccessType::Float),
  271|   178k|                   "Mismatch for instruction access type");
  272|       |
  273|   178k|        FloatRegister& reg = GetFloatRegister(id);
  274|       |
  275|   178k|        reg.SetValue(value);
  276|       |
  277|   178k|        const phi::size_t id_value = phi::to_underlying(id);
  278|       |
  279|   178k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  280|   178k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  281|   178k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  284|   135k|    {
  285|   135k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  286|   135k|                                             RegisterAccessType::Double),
  287|   135k|                   "Mismatch for instruction access type");
  288|       |
  289|   135k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (289:13): [True: 7, False: 135k]
  ------------------
  290|      7|        {
  291|      7|            Raise(Exception::MisalignedRegisterAccess);
  292|      7|            return;
  293|      7|        }
  294|       |
  295|   135k|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  296|   135k|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  297|       |
  298|   135k|        double              value_raw  = value.unsafe();
  299|   135k|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  300|       |
  301|   135k|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  302|   135k|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  303|       |
  304|   135k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  305|   135k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  306|       |
  307|   135k|        FloatRegister& first_reg = GetFloatRegister(id);
  308|   135k|        FloatRegister& second_reg =
  309|   135k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  310|       |
  311|   135k|        first_reg.SetValue(first_value);
  312|   135k|        second_reg.SetValue(second_value);
  313|       |
  314|   135k|        const phi::size_t id_value = phi::to_underlying(id);
  315|       |
  316|   135k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  317|   135k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  318|   135k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  319|   135k|    }
_ZN3dlx9Processor7GetFPSREv:
  322|   405k|    {
  323|   405k|        return m_FPSR;
  324|   405k|    }
_ZNK3dlx9Processor7GetFPSREv:
  327|   153k|    {
  328|   153k|        return m_FPSR;
  329|   153k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  332|   153k|    {
  333|   153k|        const StatusRegister& status_reg = GetFPSR();
  334|       |
  335|   153k|        return status_reg.Get();
  336|   153k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  339|   405k|    {
  340|   405k|        StatusRegister& status_reg = GetFPSR();
  341|       |
  342|   405k|        status_reg.SetStatus(value);
  343|   405k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  346|  7.10M|    {
  347|  7.10M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  348|       |
  349|  7.10M|        inst.Execute(*this);
  350|  7.10M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|  6.66k|    {
  354|  6.66k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 5.29k, False: 1.37k]
  ------------------
  355|  5.29k|        {
  356|  5.29k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  5.29k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|  5.29k|            return false;
  358|  5.29k|        }
  359|       |
  360|  1.37k|        m_CurrentProgram = &program;
  361|       |
  362|  1.37k|        m_ProgramCounter               = 0u;
  363|  1.37k|        m_Halted                       = false;
  364|  1.37k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|  1.37k|        m_LastRaisedException          = Exception::None;
  366|  1.37k|        m_CurrentStepCount             = 0u;
  367|       |
  368|  1.37k|        return true;
  369|  6.66k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  373|  1.93M|    {
  374|  1.93M|        return m_CurrentProgram;
  375|  1.93M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  378|  7.10M|    {
  379|       |        // No nothing when no program is loaded
  380|  7.10M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (380:13): [True: 0, False: 7.10M]
  ------------------
  381|      0|        {
  382|      0|            return;
  383|      0|        }
  384|       |
  385|       |        // Halt if there are no instruction to execute
  386|  7.10M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (386:13): [True: 70, False: 7.10M]
  ------------------
  387|     70|        {
  388|     70|            m_Halted                       = true;
  389|     70|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  390|     70|        }
  391|       |
  392|       |        // Do nothing when processor is halted
  393|  7.10M|        if (m_Halted)
  ------------------
  |  Branch (393:13): [True: 70, False: 7.10M]
  ------------------
  394|     70|        {
  395|     70|            return;
  396|     70|        }
  397|       |
  398|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  399|  7.10M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  400|       |
  401|       |        // Get current instruction pointed to by the program counter
  402|  7.10M|        const auto& current_instruction =
  403|  7.10M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  404|       |
  405|       |        // Execute current instruction
  406|  7.10M|        ExecuteInstruction(current_instruction);
  407|       |
  408|       |        // Stop executing if the last instruction halted the processor
  409|  7.10M|        if (m_Halted)
  ------------------
  |  Branch (409:13): [True: 277, False: 7.10M]
  ------------------
  410|    277|        {
  411|    277|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  412|    277|            return;
  413|    277|        }
  414|       |
  415|  7.10M|        m_ProgramCounter = m_NextProgramCounter;
  416|       |
  417|  7.10M|        ++m_CurrentStepCount;
  418|       |
  419|  7.10M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (419:13): [True: 1.02k, False: 7.10M]
  |  Branch (419:14): [True: 7.10M, False: 0]
  |  Branch (419:42): [True: 710, False: 7.10M]
  ------------------
  420|  7.10M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (420:13): [True: 315, False: 7.10M]
  ------------------
  421|  1.02k|        {
  422|  1.02k|            m_Halted                       = true;
  423|  1.02k|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  424|  1.02k|        }
  425|  7.10M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  428|  1.37k|    {
  429|       |        // Do nothing when no program is loaded
  430|  1.37k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (430:13): [True: 0, False: 1.37k]
  ------------------
  431|      0|        {
  432|      0|            return;
  433|      0|        }
  434|       |
  435|  1.37k|        m_ProgramCounter               = 0u;
  436|  1.37k|        m_Halted                       = false;
  437|  1.37k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  438|  1.37k|        m_LastRaisedException          = Exception::None;
  439|  1.37k|        m_CurrentStepCount             = 0u;
  440|       |
  441|  7.10M|        while (!m_Halted)
  ------------------
  |  Branch (441:16): [True: 7.10M, False: 1.37k]
  ------------------
  442|  7.10M|        {
  443|  7.10M|            ExecuteStep();
  444|  7.10M|        }
  445|       |
  446|  1.37k|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  447|  1.37k|                   "RegisterAccessType was not reset correctly");
  448|  1.37k|    }
_ZN3dlx9Processor14ClearRegistersEv:
  464|  6.66k|    {
  465|  6.66k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (465:24): [True: 213k, False: 6.66k]
  ------------------
  466|   213k|        {
  467|   213k|            reg.SetSignedValue(0);
  468|   213k|        }
  469|       |
  470|  6.66k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (470:24): [True: 213k, False: 6.66k]
  ------------------
  471|   213k|        {
  472|   213k|            reg.SetValue(0.0f);
  473|   213k|        }
  474|       |
  475|  6.66k|        m_FPSR.SetStatus(false);
  476|  6.66k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  479|  6.66k|    {
  480|  6.66k|        m_MemoryBlock.Clear();
  481|  6.66k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  488|   346k|    {
  489|   346k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  490|       |
  491|   346k|        m_LastRaisedException = exception;
  492|       |
  493|   346k|        switch (exception)
  494|   346k|        {
  495|      6|            case Exception::DivideByZero:
  ------------------
  |  Branch (495:13): [True: 6, False: 346k]
  ------------------
  496|      6|                m_Halted = true;
  497|      6|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      6|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  498|      6|                return;
  499|  53.3k|            case Exception::Overflow:
  ------------------
  |  Branch (499:13): [True: 53.3k, False: 292k]
  ------------------
  500|  53.3k|                DLX_WARN("Overflow");
  ------------------
  |  |    8|  53.3k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  501|  53.3k|                return;
  502|  66.2k|            case Exception::Underflow:
  ------------------
  |  Branch (502:13): [True: 66.2k, False: 280k]
  ------------------
  503|  66.2k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|  66.2k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  504|  66.2k|                return;
  505|      1|            case Exception::Trap:
  ------------------
  |  Branch (505:13): [True: 1, False: 346k]
  ------------------
  506|      1|                m_Halted = true;
  507|      1|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  508|      1|                return;
  509|      2|            case Exception::Halt:
  ------------------
  |  Branch (509:13): [True: 2, False: 346k]
  ------------------
  510|      2|                m_Halted = true;
  511|      2|                return;
  512|    122|            case Exception::UnknownLabel:
  ------------------
  |  Branch (512:13): [True: 122, False: 346k]
  ------------------
  513|    122|                m_Halted = true;
  514|    122|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|    122|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  515|    122|                return;
  516|   226k|            case Exception::BadShift:
  ------------------
  |  Branch (516:13): [True: 226k, False: 119k]
  ------------------
  517|   226k|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|   226k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  518|   226k|                return;
  519|    123|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (519:13): [True: 123, False: 346k]
  ------------------
  520|    123|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|    123|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  521|    123|                m_Halted = true;
  522|    123|                return;
  523|     29|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (523:13): [True: 29, False: 346k]
  ------------------
  524|     29|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     29|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  525|     29|                m_Halted = true;
  526|     29|                return;
  527|       |
  528|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  529|      0|            default:
  ------------------
  |  Branch (529:13): [True: 0, False: 346k]
  ------------------
  530|      0|                PHI_ASSERT_NOT_REACHED();
  531|   346k|#endif
  532|   346k|        }
  533|       |
  534|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  535|      0|        PHI_ASSERT_NOT_REACHED();
  536|      0|#endif
  537|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  558|   306k|    {
  559|   306k|        return m_MemoryBlock;
  560|   306k|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  573|  83.3k|    {
  574|  83.3k|        return m_NextProgramCounter;
  575|  83.3k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  578|  1.93M|    {
  579|  1.93M|        m_NextProgramCounter = new_npc;
  580|  1.93M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   36|  9.43M|    {
   37|  9.43M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   38|  9.43M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   39|       |
   40|  9.43M|        switch (expected_access)
   41|  9.43M|        {
   42|  1.78M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (42:13): [True: 1.78M, False: 7.65M]
  ------------------
   43|  1.78M|                return true;
   44|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (44:13): [True: 0, False: 9.43M]
  ------------------
   45|      0|                return false;
   46|   169k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (46:13): [True: 169k, False: 9.26M]
  ------------------
   47|   169k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (47:24): [True: 84.7k, False: 84.7k]
  |  Branch (47:63): [True: 84.7k, False: 0]
  ------------------
   48|   101k|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (48:13): [True: 101k, False: 9.33M]
  ------------------
   49|   101k|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (49:24): [True: 0, False: 101k]
  ------------------
   50|   101k|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (50:24): [True: 101k, False: 0]
  ------------------
   51|  31.6k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (51:13): [True: 31.6k, False: 9.40M]
  ------------------
   52|  31.6k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (52:24): [True: 31.6k, False: 1]
  |  Branch (52:63): [True: 1, False: 0]
  ------------------
   53|  52.2k|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (53:13): [True: 52.2k, False: 9.38M]
  ------------------
   54|  52.2k|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (54:24): [True: 52.2k, False: 3]
  |  Branch (54:64): [True: 3, False: 0]
  ------------------
   55|  7.29M|            default:
  ------------------
  |  Branch (55:13): [True: 7.29M, False: 2.13M]
  ------------------
   56|  7.29M|                return expected_access == access;
   57|  9.43M|        }
   58|  9.43M|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   465k|    {
   14|   465k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 86.6k, False: 378k]
  ------------------
   15|  86.6k|        {
   16|  86.6k|            char first_char = token[0];
   17|  86.6k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 1.88k, False: 84.7k]
  |  Branch (17:38): [True: 11.0k, False: 73.6k]
  ------------------
   18|  12.9k|            {
   19|  12.9k|                char second_char = token[1];
   20|  12.9k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 12.4k, False: 496]
  |  Branch (20:43): [True: 9.89k, False: 2.56k]
  ------------------
   21|  9.89k|                {
   22|  9.89k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  9.89k|                }
   24|  12.9k|            }
   25|  86.6k|        }
   26|   378k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 119k, False: 259k]
  ------------------
   27|   119k|        {
   28|   119k|            char first_char = token[0];
   29|   119k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 1.27k, False: 117k]
  |  Branch (29:38): [True: 4.87k, False: 113k]
  ------------------
   30|  6.14k|            {
   31|  6.14k|                char second_char = token[1];
   32|  6.14k|                char third_char  = token[2];
   33|       |
   34|  6.14k|                switch (second_char)
   35|  6.14k|                {
   36|  1.44k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 1.44k, False: 4.70k]
  ------------------
   37|  1.44k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 1.23k, False: 219]
  |  Branch (37:50): [True: 855, False: 375]
  ------------------
   38|    855|                        {
   39|    855|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|    855|                        }
   41|    594|                        break;
   42|  1.44k|                    }
   43|  1.84k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 1.84k, False: 4.30k]
  ------------------
   44|  1.84k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 1.00k, False: 837]
  |  Branch (44:50): [True: 497, False: 507]
  ------------------
   45|    497|                        {
   46|    497|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|    497|                        }
   48|  1.34k|                        break;
   49|  1.84k|                    }
   50|  1.34k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 1.02k, False: 5.12k]
  ------------------
   51|  1.02k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 210, False: 819]
  |  Branch (51:50): [True: 488, False: 331]
  ------------------
   52|    698|                        {
   53|    698|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|    698|                        }
   55|    331|                        break;
   56|  1.02k|                    }
   57|  1.83k|                    default: {
  ------------------
  |  Branch (57:21): [True: 1.83k, False: 4.31k]
  ------------------
   58|  1.83k|                        break;
   59|  1.02k|                    }
   60|  6.14k|                }
   61|  6.14k|            }
   62|   119k|        }
   63|       |
   64|   453k|        return IntRegisterID::None;
   65|   465k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   453k|    {
   69|   453k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 76.7k, False: 376k]
  ------------------
   70|  76.7k|        {
   71|  76.7k|            char first_char = token[0];
   72|  76.7k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 3.15k, False: 73.5k]
  |  Branch (72:38): [True: 5.26k, False: 68.3k]
  ------------------
   73|  8.41k|            {
   74|  8.41k|                char second_char = token[1];
   75|  8.41k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 6.92k, False: 1.49k]
  |  Branch (75:43): [True: 4.72k, False: 2.20k]
  ------------------
   76|  4.72k|                {
   77|  4.72k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  4.72k|                }
   79|  8.41k|            }
   80|  76.7k|        }
   81|   376k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 117k, False: 259k]
  ------------------
   82|   117k|        {
   83|   117k|            char first_char = token[0];
   84|   117k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 3.72k, False: 113k]
  |  Branch (84:38): [True: 5.35k, False: 108k]
  ------------------
   85|  9.07k|            {
   86|  9.07k|                char second_char = token[1];
   87|  9.07k|                char third_char  = token[2];
   88|       |
   89|  9.07k|                switch (second_char)
   90|  9.07k|                {
   91|  2.53k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 2.53k, False: 6.54k]
  ------------------
   92|  2.53k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 1.43k, False: 1.10k]
  |  Branch (92:50): [True: 967, False: 465]
  ------------------
   93|    967|                        {
   94|    967|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|    967|                        }
   96|  1.56k|                        break;
   97|  2.53k|                    }
   98|  1.56k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 992, False: 8.08k]
  ------------------
   99|    992|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 792, False: 200]
  |  Branch (99:50): [True: 225, False: 567]
  ------------------
  100|    225|                        {
  101|    225|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|    225|                        }
  103|    767|                        break;
  104|    992|                    }
  105|  3.27k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 3.27k, False: 5.80k]
  ------------------
  106|  3.27k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 482, False: 2.79k]
  |  Branch (106:50): [True: 2.16k, False: 630]
  ------------------
  107|  2.64k|                        {
  108|  2.64k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  2.64k|                        }
  110|    630|                        break;
  111|  3.27k|                    }
  112|  2.27k|                    default: {
  ------------------
  |  Branch (112:21): [True: 2.27k, False: 6.80k]
  ------------------
  113|  2.27k|                        break;
  114|  3.27k|                    }
  115|  9.07k|                }
  116|  9.07k|            }
  117|   117k|        }
  118|       |
  119|   445k|        return FloatRegisterID::None;
  120|   453k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   432k|    {
  124|   432k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 92.2k, False: 340k]
  ------------------
  125|  92.2k|        {
  126|  92.2k|            char c1 = token[0];
  127|  92.2k|            char c2 = token[1];
  128|  92.2k|            char c3 = token[2];
  129|  92.2k|            char c4 = token[3];
  130|       |
  131|  92.2k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 2.09k, False: 90.1k]
  |  Branch (131:34): [True: 3.87k, False: 86.2k]
  |  Branch (131:49): [True: 268, False: 5.70k]
  |  Branch (131:62): [True: 3.01k, False: 2.68k]
  ------------------
  132|  92.2k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 2.70k, False: 578]
  |  Branch (132:34): [True: 323, False: 255]
  |  Branch (132:49): [True: 758, False: 2.27k]
  |  Branch (132:62): [True: 2.21k, False: 62]
  ------------------
  133|  92.2k|        }
  134|       |
  135|   340k|        return false;
  136|   432k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|   542k|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   150k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  1.29M|    {
   41|  1.29M|        return m_Type;
   42|  1.29M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   569k|    {
   51|   569k|        return m_LineNumber;
   52|   569k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   517k|    {
   56|   517k|        return m_Column;
   57|   517k|    }
_ZNK3dlx5Token7GetTextEv:
   65|   593k|    {
   66|   593k|        return m_Text;
   67|   593k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  58.6k|    {
   80|  58.6k|        return m_HasHint;
   81|  58.6k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  66.7k|    {
   85|  66.7k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  66.7k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  66.7k|                   m_Type == Type::ImmediateInteger);
   88|  66.7k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  66.7k|        return m_Hint;
   91|  66.7k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  6.66k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  6.66k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  6.66k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  2.15k|    {
   51|  2.15k|        auto it = m_Iterator;
   52|  8.61k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 6.46k, False: 2.14k]
  ------------------
   53|  6.46k|        {
   54|  6.46k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 8, False: 6.45k]
  ------------------
   55|      8|            {
   56|      8|                return false;
   57|      8|            }
   58|  6.46k|        }
   59|       |
   60|  2.14k|        return true;
   61|  2.15k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|   694k|    {
   65|   694k|        return m_Iterator != m_Tokens.end();
   66|   694k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|   693k|    {
   70|   693k|        return m_Iterator == m_Tokens.end();
   71|   693k|    }
_ZN3dlx11TokenStream7consumeEv:
   84|   693k|    {
   85|   693k|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|   693k|        return *m_Iterator++;
   91|   693k|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  2.14k|    {
  164|  2.14k|        return m_Iterator;
  165|  2.14k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|    471|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|    471|        m_Iterator = it;
  179|    471|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    841|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    841|        return m_Tokens.rbegin();
  224|    841|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  7.18k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  7.18k|        return m_Tokens.rend();
  233|  7.18k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  6.66k|    {
   63|  6.66k|        TokenStream tokens;
   64|       |
   65|  6.66k|        std::string_view current_token;
   66|       |
   67|  6.66k|        phi::u64 current_line_number{1u};
   68|  6.66k|        phi::u64 current_column{1u};
   69|  6.66k|        phi::u64 token_begin{0u};
   70|       |
   71|  6.66k|        phi::boolean parsing_comment{false};
   72|       |
   73|  1.61M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 1.60M, False: 6.66k]
  ------------------
   74|  1.60M|        {
   75|  1.60M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  1.60M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 95.7k, False: 1.51M]
  ------------------
   78|  95.7k|            {
   79|  95.7k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 13.8k, False: 81.8k]
  ------------------
   80|  13.8k|                {
   81|       |                    // Skip empty lines
   82|  13.8k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  13.8k|                                        current_line_number, current_column);
   84|       |
   85|  13.8k|                    parsing_comment = false;
   86|  13.8k|                    current_line_number += 1u;
   87|  13.8k|                    current_column = 1u;
   88|  13.8k|                    continue;
   89|  13.8k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|  81.8k|                tokens.emplace_back(
   93|  81.8k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|  81.8k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|  81.8k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|  81.8k|                                    current_line_number, current_column);
   98|       |
   99|  81.8k|                current_token   = std::string_view{};
  100|  81.8k|                parsing_comment = false;
  101|  81.8k|                current_line_number += 1u;
  102|  81.8k|                current_column = 0u;
  103|  81.8k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  1.51M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 1.96k, False: 1.50M]
  |  Branch (105:34): [True: 2.23k, False: 1.50M]
  ------------------
  106|  4.20k|            {
  107|  4.20k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 1.32k, False: 2.88k]
  ------------------
  108|  1.32k|                {
  109|  1.32k|                    token_begin = i;
  110|  1.32k|                }
  111|  2.88k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 2.34k, False: 542]
  ------------------
  112|  2.34k|                {
  113|  2.34k|                    tokens.emplace_back(ParseToken(
  114|  2.34k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  2.34k|                            current_line_number, current_column - current_token.length()));
  116|  2.34k|                    token_begin   = i;
  117|  2.34k|                    current_token = std::string_view{};
  118|  2.34k|                }
  119|       |
  120|  4.20k|                parsing_comment = true;
  121|  4.20k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  4.20k|            }
  123|  1.50M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 3.15k, False: 1.50M]
  ------------------
  124|  3.15k|            {
  125|       |                // simply append the character
  126|  3.15k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|  3.15k|            }
  128|  1.50M|            else
  129|  1.50M|            {
  130|       |                // Not parsing a comment
  131|  1.50M|                switch (c)
  132|  1.50M|                {
  133|  19.5k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 19.5k, False: 1.48M]
  ------------------
  134|  29.4k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 9.88k, False: 1.49M]
  ------------------
  135|  42.3k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 12.9k, False: 1.49M]
  ------------------
  136|  42.3k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 8.03k, False: 34.3k]
  ------------------
  137|  8.03k|                        {
  138|  8.03k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  8.03k|                            continue;
  141|  8.03k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|  34.3k|                        tokens.emplace_back(ParseToken(
  145|  34.3k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|  34.3k|                                current_line_number, current_column - current_token.length()));
  147|  34.3k|                        current_token = std::string_view{};
  148|  34.3k|                        break;
  149|   111k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 111k, False: 1.39M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|   111k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 95.6k, False: 15.7k]
  ------------------
  152|  95.6k|                        {
  153|  95.6k|                            current_token =
  154|  95.6k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  95.6k|                            tokens.emplace_back(ParseToken(
  156|  95.6k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  95.6k|                                    current_line_number,
  158|  95.6k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  95.6k|                            current_token = std::string_view{};
  161|  95.6k|                        }
  162|  15.7k|                        else
  163|  15.7k|                        {
  164|       |                            // Orphan colon
  165|  15.7k|                            token_begin = i;
  166|       |
  167|  15.7k|                            tokens.emplace_back(Token::Type::Colon,
  168|  15.7k|                                                source.substr(token_begin.unsafe(), 1),
  169|  15.7k|                                                current_line_number, current_column);
  170|  15.7k|                        }
  171|   111k|                        break;
  172|   134k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 134k, False: 1.36M]
  ------------------
  173|   151k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 17.3k, False: 1.48M]
  ------------------
  174|   199k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 47.4k, False: 1.45M]
  ------------------
  175|   199k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 163k, False: 36.0k]
  ------------------
  176|   163k|                        {
  177|   163k|                            tokens.emplace_back(ParseToken(
  178|   163k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   163k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   163k|                            current_token = std::string_view{};
  182|   163k|                        }
  183|       |
  184|   199k|                        Token::Type type;
  185|   199k|                        switch (c)
  186|   199k|                        {
  187|   134k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 134k, False: 64.7k]
  ------------------
  188|   134k|                                type = Token::Type::Comma;
  189|   134k|                                break;
  190|  17.3k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 17.3k, False: 181k]
  ------------------
  191|  17.3k|                                type = Token::Type::OpenBracket;
  192|  17.3k|                                break;
  193|  47.4k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 47.4k, False: 151k]
  ------------------
  194|  47.4k|                                type = Token::Type::ClosingBracket;
  195|  47.4k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 199k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|   199k|#endif
  201|   199k|                        }
  202|       |
  203|   199k|                        token_begin = i;
  204|       |
  205|   199k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|   199k|                                            current_line_number, current_column);
  207|   199k|                        break;
  208|       |
  209|  1.15M|                    default:
  ------------------
  |  Branch (209:21): [True: 1.15M, False: 353k]
  ------------------
  210|  1.15M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 379k, False: 771k]
  ------------------
  211|   379k|                        {
  212|   379k|                            token_begin = i;
  213|   379k|                        }
  214|       |
  215|       |                        // simply append the character
  216|  1.15M|                        current_token =
  217|  1.15M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  1.50M|                }
  219|  1.50M|            }
  220|       |
  221|  1.58M|            current_column += 1u;
  222|  1.58M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  6.66k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 5.31k, False: 1.35k]
  ------------------
  226|  5.31k|        {
  227|  5.31k|            tokens.emplace_back(
  228|  5.31k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  5.31k|                               current_line_number, current_column - current_token.length()));
  230|  5.31k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  6.66k|        tokens.finalize();
  234|       |
  235|  6.66k|        return tokens;
  236|  6.66k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   382k|    {
   11|   382k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 6.21k, False: 376k]
  |  Branch (11:35): [True: 5.61k, False: 598]
  ------------------
   12|  5.61k|        {
   13|  5.61k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  5.61k|            if (number)
  ------------------
  |  Branch (15:17): [True: 1.97k, False: 3.64k]
  ------------------
   16|  1.97k|            {
   17|  1.97k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  1.97k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  1.97k|            }
   20|       |
   21|  3.64k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  5.61k|        }
   23|       |
   24|   377k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 1.68k, False: 375k]
  |  Branch (24:35): [True: 1.98k, False: 373k]
  ------------------
   25|  3.66k|        {
   26|  3.66k|            return {Token::Type::Comment, token, line_number, column};
   27|  3.66k|        }
   28|       |
   29|   373k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 6.82k, False: 366k]
  ------------------
   30|  6.82k|        {
   31|  6.82k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  6.82k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  6.82k|        }
   34|       |
   35|   366k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 1.71k, False: 364k]
  ------------------
   36|  1.71k|        {
   37|  1.71k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  1.71k|        }
   39|       |
   40|   364k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 11.1k, False: 353k]
  ------------------
   41|  11.1k|        {
   42|  11.1k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  11.1k|                    static_cast<std::uint32_t>(id)};
   44|  11.1k|        }
   45|       |
   46|   353k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 6.69k, False: 347k]
  ------------------
   47|  6.69k|        {
   48|  6.69k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  6.69k|                    static_cast<std::uint32_t>(id)};
   50|  6.69k|        }
   51|       |
   52|   347k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 123k, False: 223k]
  ------------------
   53|   123k|        {
   54|   123k|            return {Token::Type::OpCode, token, line_number, column,
   55|   123k|                    static_cast<std::uint32_t>(opcode)};
   56|   123k|        }
   57|       |
   58|   223k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   347k|    }

LLVMFuzzerTestOneInput:
   12|  6.66k|{
   13|  6.66k|    static dlx::Processor processor;
   14|       |
   15|  6.66k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   16|       |
   17|       |    // Parse it
   18|  6.66k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  6.66k|    processor.ClearRegisters();
   22|  6.66k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  6.66k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 1.37k, False: 5.29k]
  ------------------
   26|  1.37k|    {
   27|  1.37k|        processor.ExecuteCurrentProgram();
   28|  1.37k|    }
   29|       |
   30|  6.66k|    return 0;
   31|  6.66k|}


_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  1.92M|        {
  169|  1.92M|            PHI_ASSERT(index < 3u);
  170|       |
  171|  1.92M|            switch (index.unsafe())
  172|  1.92M|            {
  173|   863k|                case 0:
  ------------------
  |  Branch (173:17): [True: 863k, False: 1.06M]
  ------------------
  174|   863k|                    return m_Arg1Type;
  175|       |
  176|   552k|                case 1:
  ------------------
  |  Branch (176:17): [True: 552k, False: 1.37M]
  ------------------
  177|   552k|                    return m_Arg2Type;
  178|       |
  179|   512k|                case 2:
  ------------------
  |  Branch (179:17): [True: 512k, False: 1.41M]
  ------------------
  180|   512k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 1.92M]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  1.92M|#endif
  187|  1.92M|            }
  188|  1.92M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   498k|        {
  195|   498k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   498k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 488k, False: 9.96k]
  ------------------
  199|   488k|            {
  200|   488k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   488k|            }
  202|   498k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 272k, False: 225k]
  ------------------
  203|   272k|            {
  204|   272k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   272k|            }
  206|   498k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 74.9k, False: 423k]
  ------------------
  207|  74.9k|            {
  208|  74.9k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  74.9k|            }
  210|       |
  211|   498k|            return number_of_argument_required;
  212|   498k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  13.2M|        {
  216|  13.2M|            return m_RegisterAccessType;
  217|  13.2M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   498k|        {
  221|   498k|            return m_Executor;
  222|   498k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  40.2M|    {
   38|  40.2M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  40.2M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  40.2M|                                         static_cast<underlying_t>(rhs));
   42|  40.2M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  40.2M|    {
   55|  40.2M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  40.2M|        return static_cast<underlying_t>(type & test) != 0;
   58|  40.2M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  1.25M|    {
   31|  1.25M|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 20.4k, False: 1.23M]
  ------------------
   32|  20.4k|        {
   33|  20.4k|            return true;
   34|  20.4k|        }
   35|       |
   36|  1.23M|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 19.7k, False: 1.21M]
  ------------------
   37|  19.7k|        {
   38|  19.7k|            return true;
   39|  19.7k|        }
   40|       |
   41|  1.21M|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 398k, False: 812k]
  ------------------
   42|   398k|        {
   43|   398k|            return true;
   44|   398k|        }
   45|       |
   46|   812k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 8.53k, False: 803k]
  ------------------
   47|  8.53k|        {
   48|  8.53k|            return true;
   49|  8.53k|        }
   50|       |
   51|   803k|        return false;
   52|   812k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|   803k|    {
   56|   803k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 803k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|   803k|        const char first_char = token.at(0u);
   62|       |
   63|   803k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 195k, False: 607k]
  ------------------
   64|   195k|        {
   65|   195k|            return phi::is_alpha(first_char);
   66|   195k|        }
   67|       |
   68|   607k|        phi::boolean just_under_scores = (first_char == '_');
   69|   607k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 119k, False: 488k]
  |  Branch (69:13): [True: 98.3k, False: 509k]
  |  Branch (69:43): [True: 98.3k, False: 21.2k]
  ------------------
   70|  98.3k|        {
   71|  98.3k|            return false;
   72|  98.3k|        }
   73|       |
   74|  1.76M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 1.44M, False: 323k]
  ------------------
   75|  1.44M|        {
   76|  1.44M|            const char c{token.at(index)};
   77|       |
   78|  1.44M|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 1.25M, False: 189k]
  ------------------
   79|  1.25M|            {
   80|  1.25M|                just_under_scores = false;
   81|  1.25M|            }
   82|   189k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 3.38k, False: 185k]
  ------------------
   83|  3.38k|            {
   84|  3.38k|                continue;
   85|  3.38k|            }
   86|   185k|            else
   87|   185k|            {
   88|   185k|                return false;
   89|   185k|            }
   90|  1.44M|        }
   91|       |
   92|   323k|        return !just_under_scores;
   93|   509k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|  3.89M|    {
  100|  3.89M|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 3.89M]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|  3.89M|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 667k, False: 3.22M]
  ------------------
  106|   667k|        {
  107|   667k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 83.0k, False: 584k]
  ------------------
  108|  83.0k|            {
  109|  83.0k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  83.0k|            }
  111|       |
  112|   584k|            return {};
  113|   667k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|  3.22M|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 7.00k, False: 3.21M]
  ------------------
  117|  7.00k|        {
  118|  7.00k|            return {};
  119|  7.00k|        }
  120|       |
  121|  3.21M|        std::int32_t number{0};
  122|  3.21M|        phi::boolean is_negative{false};
  123|  3.21M|        phi::boolean starts_with_zero{false};
  124|  3.21M|        phi::boolean parsing_binary{false};
  125|  3.21M|        phi::boolean parsing_octal{false};
  126|  3.21M|        phi::boolean parsing_hexadecimal{false};
  127|  3.21M|        phi::boolean parsed_something{false};
  128|  3.21M|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|  3.55M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 3.51M, False: 41.4k]
  ------------------
  133|  3.51M|        {
  134|  3.51M|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|  3.51M|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 3.21M, False: 296k]
  ------------------
  138|  3.21M|            {
  139|  3.21M|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 11.7k, False: 3.20M]
  ------------------
  140|  11.7k|                {
  141|  11.7k|                    continue;
  142|  11.7k|                }
  143|       |
  144|  3.20M|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 29.7k, False: 3.17M]
  ------------------
  145|  29.7k|                {
  146|  29.7k|                    is_negative = true;
  147|  29.7k|                    continue;
  148|  29.7k|                }
  149|       |
  150|  3.17M|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 59.0k, False: 3.11M]
  ------------------
  151|  59.0k|                {
  152|  59.0k|                    starts_with_zero = true;
  153|  59.0k|                    continue;
  154|  59.0k|                }
  155|       |
  156|  3.11M|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 17.3k, False: 3.09M]
  ------------------
  157|  17.3k|                {
  158|  17.3k|                    return {};
  159|  17.3k|                }
  160|  3.11M|            }
  161|       |
  162|       |            // Second character
  163|  3.39M|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 135k, False: 3.26M]
  ------------------
  164|   135k|            {
  165|   135k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 59.0k, False: 76.3k]
  ------------------
  166|  59.0k|                {
  167|       |                    // Binary
  168|  59.0k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 4.21k, False: 54.8k]
  |  Branch (168:37): [True: 6.71k, False: 48.1k]
  ------------------
  169|  10.9k|                    {
  170|  10.9k|                        parsing_binary = true;
  171|  10.9k|                        continue;
  172|  10.9k|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  48.1k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 2.60k, False: 45.5k]
  |  Branch (175:37): [True: 7.64k, False: 37.8k]
  ------------------
  176|  10.2k|                    {
  177|  10.2k|                        parsing_hexadecimal = true;
  178|  10.2k|                        continue;
  179|  10.2k|                    }
  180|       |
  181|       |                    // Octal
  182|  37.8k|                    parsing_octal = true;
  183|  37.8k|                }
  184|   135k|            }
  185|       |
  186|       |            // Handle seperators
  187|  3.37M|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 22.0k, False: 3.35M]
  ------------------
  188|  22.0k|            {
  189|  22.0k|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 9.14k, False: 12.8k]
  ------------------
  190|  9.14k|                {
  191|  9.14k|                    return {};
  192|  9.14k|                }
  193|       |
  194|  12.8k|                parsed_separator = true;
  195|  12.8k|                continue;
  196|  22.0k|            }
  197|       |
  198|       |            // Check for over/underflow
  199|  3.35M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 90.9k, False: 3.26M]
  |  Branch (199:32): [True: 9.89k, False: 81.0k]
  ------------------
  200|  9.89k|            {
  201|       |                // Would underflow
  202|  9.89k|                return {};
  203|  9.89k|            }
  204|  3.34M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 3.26M, False: 81.0k]
  |  Branch (204:17): [True: 6.41k, False: 3.33M]
  |  Branch (204:33): [True: 6.41k, False: 3.25M]
  ------------------
  205|  6.41k|            {
  206|       |                // Would overflow
  207|  6.41k|                return {};
  208|  6.41k|            }
  209|       |
  210|  3.33M|            parsed_separator = false;
  211|  3.33M|            parsed_something = true;
  212|       |
  213|  3.33M|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 7.44k, False: 3.32M]
  ------------------
  214|  7.44k|            {
  215|  7.44k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 6.70k, False: 734]
  ------------------
  216|  6.70k|                {
  217|  6.70k|                    return {};
  218|  6.70k|                }
  219|       |
  220|    734|                number <<= 1;
  221|    734|                number |= (c - '0');
  222|    734|            }
  223|  3.32M|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 36.1k, False: 3.29M]
  ------------------
  224|  36.1k|            {
  225|  36.1k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 12.0k, False: 24.0k]
  ------------------
  226|  12.0k|                {
  227|  12.0k|                    return {};
  228|  12.0k|                }
  229|       |
  230|  24.0k|                number <<= 3;
  231|  24.0k|                number |= (c - '0');
  232|  24.0k|            }
  233|  3.29M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 19.7k, False: 3.27M]
  ------------------
  234|  19.7k|            {
  235|  19.7k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 7.20k, False: 12.5k]
  ------------------
  236|  7.20k|                {
  237|  7.20k|                    return {};
  238|  7.20k|                }
  239|       |
  240|  12.5k|                number <<= 4;
  241|  12.5k|                number |= phi::hex_digit_value(c).unsafe();
  242|  12.5k|            }
  243|  3.27M|            else
  244|  3.27M|            {
  245|  3.27M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 3.10M, False: 171k]
  ------------------
  246|  3.10M|                {
  247|  3.10M|                    return {};
  248|  3.10M|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|   171k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 58.9k, False: 112k]
  |  Branch (251:36): [True: 5.07k, False: 53.9k]
  ------------------
  252|  5.07k|                {
  253|  5.07k|                    return {};
  254|  5.07k|                }
  255|       |
  256|   166k|                number *= 10;
  257|   166k|                number += (c - '0');
  258|   166k|            }
  259|  3.33M|        }
  260|       |
  261|  41.4k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 36.1k, False: 5.27k]
  ------------------
  262|  36.1k|        {
  263|       |            // Check for over/underflow
  264|  36.1k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 8.85k, False: 27.2k]
  |  Branch (264:32): [True: 2.56k, False: 6.29k]
  ------------------
  265|  2.56k|            {
  266|       |                // Would underflow
  267|  2.56k|                return {};
  268|  2.56k|            }
  269|  33.5k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 27.2k, False: 6.29k]
  |  Branch (269:17): [True: 6.17k, False: 27.4k]
  |  Branch (269:33): [True: 6.17k, False: 21.1k]
  ------------------
  270|  6.17k|            {
  271|       |                // Would overflow
  272|  6.17k|                return {};
  273|  6.17k|            }
  274|       |
  275|  27.4k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 6.29k, False: 21.1k]
  ------------------
  276|  6.29k|            {
  277|  6.29k|                return static_cast<std::int16_t>(-number);
  278|  6.29k|            }
  279|       |
  280|  21.1k|            return static_cast<std::int16_t>(number);
  281|  27.4k|        }
  282|       |
  283|  5.27k|        return {};
  284|  41.4k|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   716k|        {
   12|   716k|            m_Value = value;
   13|   716k|        }
_ZNK3dlx14StatusRegister3GetEv:
   16|   291k|        {
   17|   291k|            return m_Value;
   18|   291k|        }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   196k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   196k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 3.28M, False: 0]
  ------------------
   64|  3.28M|            {
   65|  3.28M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 196k, False: 3.09M]
  ------------------
   66|   196k|                {
   67|   196k|                    return &token;
   68|   196k|                }
   69|  3.28M|            }
   70|       |
   71|      0|            return nullptr;
   72|   196k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  1.07M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.07M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.07M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  3.92M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  3.92M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  3.92M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  2.09M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.09M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.09M|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|  1.48M|    {
   11|  1.48M|        m_Value = val;
   12|  1.48M|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  2.48M|    {
   16|  2.48M|        return m_Value;
   17|  2.48M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   498k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|   151k|    {
   25|   151k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|   151k|        switch (argument_number.unsafe())
   28|   151k|        {
   29|   110k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 110k, False: 41.4k]
  ------------------
   30|   110k|                m_Arg1 = argument;
   31|   110k|                break;
   32|  27.3k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 27.3k, False: 124k]
  ------------------
   33|  27.3k|                m_Arg2 = argument;
   34|  27.3k|                break;
   35|  14.0k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 14.0k, False: 137k]
  ------------------
   36|  14.0k|                m_Arg3 = argument;
   37|  14.0k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 151k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|   151k|#endif
   42|   151k|        }
   43|   151k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   83|  13.2M|    {
   84|  13.2M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   85|  13.2M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   88|  13.2M|    {
   89|  13.2M|        return m_Info;
   90|  13.2M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  1.64M|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   27|  80.2M|    {
   28|  80.2M|        return m_Type;
   29|  80.2M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  17.7M|    {
   78|  17.7M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  17.7M|        return register_int;
   81|  17.7M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   84|  2.31M|    {
   85|  2.31M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   86|       |
   87|  2.31M|        return register_float;
   88|  2.31M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   92|  2.15M|    {
   93|  2.15M|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   94|       |
   95|  2.15M|        return immediate_value;
   96|  2.15M|    }
_ZNK3dlx19InstructionArgument21AsAddressDisplacementEv:
  100|     14|    {
  101|     14|        PHI_ASSERT(m_Type == ArgumentType::AddressDisplacement);
  102|       |
  103|     14|        return address_displacement;
  104|     14|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  107|   707k|    {
  108|   707k|        PHI_ASSERT(m_Type == ArgumentType::Label);
  109|       |
  110|   707k|        return label;
  111|   707k|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  43.5k|    {
  171|  43.5k|        InstructionArgument arg;
  172|  43.5k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  43.5k|        arg.register_int.register_id = id;
  174|  43.5k|        return arg;
  175|  43.5k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  27.6k|    {
  179|  27.6k|        InstructionArgument arg;
  180|  27.6k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  27.6k|        arg.register_float.register_id = id;
  182|  27.6k|        return arg;
  183|  27.6k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  11.5k|    {
  187|  11.5k|        InstructionArgument arg;
  188|  11.5k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  11.5k|        arg.immediate_value.signed_value = value;
  190|  11.5k|        return arg;
  191|  11.5k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|  14.7k|    {
  196|  14.7k|        InstructionArgument arg;
  197|  14.7k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|  14.7k|        arg.address_displacement.register_id  = id;
  199|  14.7k|        arg.address_displacement.displacement = displacement;
  200|  14.7k|        return arg;
  201|  14.7k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  204|  54.1k|    {
  205|  54.1k|        InstructionArgument arg;
  206|  54.1k|        arg.m_Type           = ArgumentType::Label;
  207|  54.1k|        arg.label.label_name = label_name;
  208|  54.1k|        return arg;
  209|  54.1k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  350|   128k|        {
  351|   128k|            const auto& dest_reg = arg1.AsRegisterInt();
  352|   128k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  353|   128k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  354|       |
  355|   128k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  356|   128k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  357|       |
  358|   128k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  359|   128k|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  363|  82.9k|        {
  364|  82.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  365|  82.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  366|  82.9k|            const auto& imm_value = arg3.AsImmediateValue();
  367|       |
  368|  82.9k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  369|       |
  370|  82.9k|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  371|  82.9k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  375|   100k|        {
  376|   100k|            const auto& dest_reg = arg1.AsRegisterInt();
  377|   100k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  378|   100k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  379|       |
  380|   100k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  381|   100k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  382|       |
  383|   100k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  384|   100k|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  388|  79.7k|        {
  389|  79.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  390|  79.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  391|  79.7k|            const auto& imm_value = arg3.AsImmediateValue();
  392|       |
  393|  79.7k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  394|       |
  395|  79.7k|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  396|  79.7k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  400|  24.3k|        {
  401|  24.3k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  402|  24.3k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  403|  24.3k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  404|       |
  405|  24.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  406|  24.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  407|       |
  408|  24.3k|            const phi::f32 new_value = lhs_value + rhs_value;
  409|       |
  410|  24.3k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  411|  24.3k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  415|  17.9k|        {
  416|  17.9k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  417|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  418|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  419|       |
  420|  17.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  421|  17.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  422|       |
  423|  17.9k|            const phi::f64 new_value = lhs_value + rhs_value;
  424|       |
  425|  17.9k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  426|  17.9k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  430|  1.31M|        {
  431|  1.31M|            const auto& dest_reg = arg1.AsRegisterInt();
  432|  1.31M|            const auto& lhs_reg  = arg2.AsRegisterInt();
  433|  1.31M|            const auto& rhs_reg  = arg3.AsRegisterInt();
  434|       |
  435|  1.31M|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  436|  1.31M|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  437|       |
  438|  1.31M|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  439|  1.31M|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  443|   253k|        {
  444|   253k|            const auto& dest_reg  = arg1.AsRegisterInt();
  445|   253k|            const auto& src_reg   = arg2.AsRegisterInt();
  446|   253k|            const auto& imm_value = arg3.AsImmediateValue();
  447|       |
  448|   253k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  449|       |
  450|   253k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  451|   253k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  455|  80.6k|        {
  456|  80.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  457|  80.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  458|  80.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  459|       |
  460|  80.6k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  461|  80.6k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  462|       |
  463|  80.6k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  464|  80.6k|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  468|   104k|        {
  469|   104k|            const auto& dest_reg  = arg1.AsRegisterInt();
  470|   104k|            const auto& src_reg   = arg2.AsRegisterInt();
  471|   104k|            const auto& imm_value = arg3.AsImmediateValue();
  472|       |
  473|   104k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  474|       |
  475|   104k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  476|   104k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  480|  21.9k|        {
  481|  21.9k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  482|  21.9k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  483|  21.9k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  484|       |
  485|  21.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  486|  21.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  487|       |
  488|  21.9k|            const phi::f32 new_value = lhs_value - rhs_value;
  489|       |
  490|  21.9k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  491|  21.9k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  495|  24.5k|        {
  496|  24.5k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  497|  24.5k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  498|  24.5k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  499|       |
  500|  24.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  501|  24.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  502|       |
  503|  24.5k|            const phi::f64 new_value = lhs_value - rhs_value;
  504|       |
  505|  24.5k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  506|  24.5k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  510|  84.5k|        {
  511|  84.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  512|  84.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  513|  84.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  514|       |
  515|  84.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  516|  84.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  517|       |
  518|  84.5k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  519|  84.5k|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  523|   223k|        {
  524|   223k|            const auto& dest_reg  = arg1.AsRegisterInt();
  525|   223k|            const auto& src_reg   = arg2.AsRegisterInt();
  526|   223k|            const auto& imm_value = arg3.AsImmediateValue();
  527|       |
  528|   223k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  529|       |
  530|   223k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  531|   223k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  535|  20.9k|        {
  536|  20.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  537|  20.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  538|  20.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  539|       |
  540|  20.9k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  541|  20.9k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  542|       |
  543|  20.9k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  544|  20.9k|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  548|  57.9k|        {
  549|  57.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  550|  57.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  551|  57.9k|            const auto& imm_value = arg3.AsImmediateValue();
  552|       |
  553|  57.9k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  554|       |
  555|  57.9k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  556|  57.9k|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  560|  47.6k|        {
  561|  47.6k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  562|  47.6k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  563|  47.6k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  564|       |
  565|  47.6k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  566|  47.6k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  567|       |
  568|  47.6k|            const phi::f32 new_value = lhs_value * rhs_value;
  569|       |
  570|  47.6k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  571|  47.6k|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  575|  21.9k|        {
  576|  21.9k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  577|  21.9k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  578|  21.9k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  579|       |
  580|  21.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  581|  21.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  582|       |
  583|  21.9k|            const phi::f64 new_value = lhs_value * rhs_value;
  584|       |
  585|  21.9k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  586|  21.9k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  590|  42.1k|        {
  591|  42.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  592|  42.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  593|  42.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  594|       |
  595|  42.1k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  596|  42.1k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  597|       |
  598|  42.1k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  599|  42.1k|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  603|  28.5k|        {
  604|  28.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  605|  28.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  606|  28.5k|            const auto& imm_value = arg3.AsImmediateValue();
  607|       |
  608|  28.5k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  609|       |
  610|  28.5k|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  611|  28.5k|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  615|  12.6k|        {
  616|  12.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  617|  12.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  618|  12.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  619|       |
  620|  12.6k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  621|  12.6k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  622|       |
  623|  12.6k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  624|  12.6k|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  628|  26.1k|        {
  629|  26.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  630|  26.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  631|  26.1k|            const auto& imm_value = arg3.AsImmediateValue();
  632|       |
  633|  26.1k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  634|       |
  635|  26.1k|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  636|  26.1k|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  640|      1|        {
  641|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  642|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  643|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  644|       |
  645|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  646|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  647|       |
  648|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (648:17): [True: 1, False: 0]
  ------------------
  649|      1|            {
  650|      1|                processor.Raise(Exception::DivideByZero);
  651|      1|                return;
  652|      1|            }
  653|       |
  654|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  655|       |
  656|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  657|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  661|      1|        {
  662|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  663|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  664|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  665|       |
  666|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  667|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  668|       |
  669|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (669:17): [True: 1, False: 0]
  ------------------
  670|      1|            {
  671|      1|                processor.Raise(Exception::DivideByZero);
  672|      1|                return;
  673|      1|            }
  674|       |
  675|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  676|       |
  677|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  678|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  682|  54.6k|        {
  683|  54.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  684|  54.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  685|  54.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  686|       |
  687|  54.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  688|  54.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  689|       |
  690|  54.6k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  691|  54.6k|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  695|  62.2k|        {
  696|  62.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  697|  62.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  698|  62.2k|            const auto& imm_value = arg3.AsImmediateValue();
  699|       |
  700|  62.2k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  701|  62.2k|            phi::i32 shift_value = imm_value.signed_value;
  702|       |
  703|  62.2k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  704|  62.2k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  708|  81.9k|        {
  709|  81.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  710|  81.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  711|  81.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  712|       |
  713|  81.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  714|  81.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  715|       |
  716|  81.9k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  717|  81.9k|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  721|   158k|        {
  722|   158k|            const auto& dest_reg  = arg1.AsRegisterInt();
  723|   158k|            const auto& src_reg   = arg2.AsRegisterInt();
  724|   158k|            const auto& imm_value = arg3.AsImmediateValue();
  725|       |
  726|   158k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  727|   158k|            phi::i32 shift_value = imm_value.signed_value;
  728|       |
  729|   158k|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  730|   158k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  734|   127k|        {
  735|   127k|            const auto& dest_reg = arg1.AsRegisterInt();
  736|   127k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  737|   127k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  738|       |
  739|   127k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  740|   127k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  741|       |
  742|   127k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  743|   127k|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  747|  89.1k|        {
  748|  89.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  749|  89.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  750|  89.1k|            const auto& imm_value = arg3.AsImmediateValue();
  751|       |
  752|  89.1k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  753|  89.1k|            phi::i32 shift_value = imm_value.signed_value;
  754|       |
  755|  89.1k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  756|  89.1k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  760|   114k|        {
  761|   114k|            const auto& dest_reg = arg1.AsRegisterInt();
  762|   114k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  763|   114k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  764|       |
  765|   114k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  766|   114k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  767|       |
  768|   114k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  769|   114k|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  773|  65.3k|        {
  774|  65.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  775|  65.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  776|  65.3k|            const auto& imm_value = arg3.AsImmediateValue();
  777|       |
  778|  65.3k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  779|  65.3k|            phi::i32 shift_value = imm_value.signed_value;
  780|       |
  781|  65.3k|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  782|  65.3k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  786|  20.1k|        {
  787|  20.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  788|  20.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  789|  20.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  790|       |
  791|  20.1k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  792|  20.1k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  793|  20.1k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  794|       |
  795|  20.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  796|  20.1k|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  800|  31.9k|        {
  801|  31.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  802|  31.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  803|  31.9k|            const auto& imm_value = arg3.AsImmediateValue();
  804|       |
  805|  31.9k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  806|  31.9k|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  807|       |
  808|  31.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  809|  31.9k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  813|   260k|        {
  814|   260k|            const auto& dest_reg = arg1.AsRegisterInt();
  815|   260k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  816|   260k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  817|       |
  818|   260k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  819|   260k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  820|   260k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  821|       |
  822|   260k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  823|   260k|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  827|  19.3k|        {
  828|  19.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  829|  19.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  830|  19.3k|            const auto& imm_value = arg3.AsImmediateValue();
  831|       |
  832|  19.3k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  833|  19.3k|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  834|       |
  835|  19.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  836|  19.3k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  840|   105k|        {
  841|   105k|            const auto& dest_reg = arg1.AsRegisterInt();
  842|   105k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  843|   105k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  844|       |
  845|   105k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  846|   105k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  847|   105k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  848|       |
  849|   105k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  850|   105k|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  854|  18.2k|        {
  855|  18.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  856|  18.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  857|  18.2k|            const auto& imm_value = arg3.AsImmediateValue();
  858|       |
  859|  18.2k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  860|  18.2k|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  861|       |
  862|  18.2k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  863|  18.2k|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  867|  14.1k|        {
  868|  14.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  869|  14.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  870|  14.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  871|       |
  872|  14.1k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  873|  14.1k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  874|       |
  875|  14.1k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (875:41): [True: 0, False: 14.1k]
  ------------------
  876|       |
  877|  14.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  878|  14.1k|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  882|  40.3k|        {
  883|  40.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  884|  40.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  885|  40.3k|            const auto& imm_value = arg3.AsImmediateValue();
  886|       |
  887|  40.3k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  888|       |
  889|  40.3k|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (889:41): [True: 32.7k, False: 7.57k]
  ------------------
  890|       |
  891|  40.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  892|  40.3k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  896|  21.9k|        {
  897|  21.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  898|  21.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  899|  21.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  900|       |
  901|  21.9k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  902|  21.9k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  903|       |
  904|  21.9k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (904:41): [True: 0, False: 21.9k]
  ------------------
  905|       |
  906|  21.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  907|  21.9k|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  911|  24.3k|        {
  912|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  913|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  914|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
  915|       |
  916|  24.3k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  917|       |
  918|  24.3k|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (918:41): [True: 24.3k, False: 0]
  ------------------
  919|       |
  920|  24.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  921|  24.3k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  925|  80.7k|        {
  926|  80.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  927|  80.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  928|       |
  929|  80.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  930|  80.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  931|       |
  932|  80.7k|            const phi::boolean new_value = (lhs_value < rhs_value);
  933|       |
  934|  80.7k|            processor.SetFPSRValue(new_value);
  935|  80.7k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  939|  14.6k|        {
  940|  14.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  941|  14.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  942|       |
  943|  14.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  944|  14.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  945|       |
  946|  14.6k|            const phi::boolean new_value = (lhs_value < rhs_value);
  947|       |
  948|  14.6k|            processor.SetFPSRValue(new_value);
  949|  14.6k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  953|  37.0k|        {
  954|  37.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  955|  37.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  956|  37.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  957|       |
  958|  37.0k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  959|  37.0k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  960|       |
  961|  37.0k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (961:41): [True: 5.68k, False: 31.3k]
  ------------------
  962|       |
  963|  37.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  964|  37.0k|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  968|  36.1k|        {
  969|  36.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  970|  36.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  971|  36.1k|            const auto& imm_value = arg3.AsImmediateValue();
  972|       |
  973|  36.1k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  974|       |
  975|  36.1k|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (975:41): [True: 0, False: 36.1k]
  ------------------
  976|       |
  977|  36.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  978|  36.1k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  982|  30.3k|        {
  983|  30.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  984|  30.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  985|  30.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  986|       |
  987|  30.3k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  988|  30.3k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  989|       |
  990|  30.3k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (990:41): [True: 4.23k, False: 26.1k]
  ------------------
  991|       |
  992|  30.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  993|  30.3k|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  997|  45.4k|        {
  998|  45.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  999|  45.4k|            const auto& src_reg   = arg2.AsRegisterInt();
 1000|  45.4k|            const auto& imm_value = arg3.AsImmediateValue();
 1001|       |
 1002|  45.4k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1003|       |
 1004|  45.4k|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1004:41): [True: 0, False: 45.4k]
  ------------------
 1005|       |
 1006|  45.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1007|  45.4k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1011|  88.6k|        {
 1012|  88.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1013|  88.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1014|       |
 1015|  88.6k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1016|  88.6k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1017|       |
 1018|  88.6k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1019|       |
 1020|  88.6k|            processor.SetFPSRValue(new_value);
 1021|  88.6k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1025|  26.1k|        {
 1026|  26.1k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1027|  26.1k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1028|       |
 1029|  26.1k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1030|  26.1k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1031|       |
 1032|  26.1k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1033|       |
 1034|  26.1k|            processor.SetFPSRValue(new_value);
 1035|  26.1k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1039|   894k|        {
 1040|   894k|            const auto& dest_reg = arg1.AsRegisterInt();
 1041|   894k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1042|   894k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1043|       |
 1044|   894k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1045|   894k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1046|       |
 1047|   894k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1047:41): [True: 728k, False: 166k]
  ------------------
 1048|       |
 1049|   894k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1050|   894k|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1054|  27.6k|        {
 1055|  27.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1056|  27.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1057|  27.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1058|       |
 1059|  27.6k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1060|       |
 1061|  27.6k|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1061:41): [True: 27.6k, False: 0]
  ------------------
 1062|       |
 1063|  27.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1064|  27.6k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1068|  29.1k|        {
 1069|  29.1k|            const auto& dest_reg = arg1.AsRegisterInt();
 1070|  29.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1071|  29.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1072|       |
 1073|  29.1k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1074|  29.1k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1075|       |
 1076|  29.1k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1076:41): [True: 29.1k, False: 0]
  ------------------
 1077|       |
 1078|  29.1k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1079|  29.1k|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1083|  19.6k|        {
 1084|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1085|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1086|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1087|       |
 1088|  19.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1089|       |
 1090|  19.6k|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1090:41): [True: 19.6k, False: 0]
  ------------------
 1091|       |
 1092|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1093|  19.6k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1097|   267k|        {
 1098|   267k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1099|   267k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1100|       |
 1101|   267k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1102|   267k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1103|       |
 1104|   267k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1105|       |
 1106|   267k|            processor.SetFPSRValue(new_value);
 1107|   267k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1111|  53.4k|        {
 1112|  53.4k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1113|  53.4k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1114|       |
 1115|  53.4k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1116|  53.4k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1117|       |
 1118|  53.4k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1119|       |
 1120|  53.4k|            processor.SetFPSRValue(new_value);
 1121|  53.4k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1125|  17.4k|        {
 1126|  17.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1127|  17.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1128|  17.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1129|       |
 1130|  17.4k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1131|  17.4k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1132|       |
 1133|  17.4k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1133:41): [True: 15.4k, False: 2.00k]
  ------------------
 1134|       |
 1135|  17.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1136|  17.4k|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1140|  24.3k|        {
 1141|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1142|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1143|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1144|       |
 1145|  24.3k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1146|       |
 1147|  24.3k|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1147:41): [True: 5.83k, False: 18.4k]
  ------------------
 1148|       |
 1149|  24.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1150|  24.3k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1154|  12.0k|        {
 1155|  12.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1156|  12.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1157|  12.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1158|       |
 1159|  12.0k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1160|  12.0k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1161|       |
 1162|  12.0k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1162:41): [True: 12.0k, False: 0]
  ------------------
 1163|       |
 1164|  12.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1165|  12.0k|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1169|  19.6k|        {
 1170|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1171|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1172|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1173|       |
 1174|  19.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1175|       |
 1176|  19.6k|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1176:41): [True: 3.33k, False: 16.3k]
  ------------------
 1177|       |
 1178|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1179|  19.6k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1183|  22.7k|        {
 1184|  22.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1185|  22.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1186|       |
 1187|  22.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1188|  22.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1189|       |
 1190|  22.7k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1191|       |
 1192|  22.7k|            processor.SetFPSRValue(new_value);
 1193|  22.7k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1197|  27.6k|        {
 1198|  27.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1199|  27.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1200|       |
 1201|  27.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1202|  27.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1203|       |
 1204|  27.6k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1205|       |
 1206|  27.6k|            processor.SetFPSRValue(new_value);
 1207|  27.6k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1211|  26.9k|        {
 1212|  26.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1213|  26.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1214|  26.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1215|       |
 1216|  26.9k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1217|  26.9k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1218|       |
 1219|  26.9k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1219:41): [True: 24.0k, False: 2.90k]
  ------------------
 1220|       |
 1221|  26.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1222|  26.9k|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1226|  27.9k|        {
 1227|  27.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1228|  27.9k|            const auto& src_reg   = arg2.AsRegisterInt();
 1229|  27.9k|            const auto& imm_value = arg3.AsImmediateValue();
 1230|       |
 1231|  27.9k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1232|       |
 1233|  27.9k|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1233:41): [True: 1, False: 27.9k]
  ------------------
 1234|       |
 1235|  27.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1236|  27.9k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1240|  25.1k|        {
 1241|  25.1k|            const auto& dest_reg = arg1.AsRegisterInt();
 1242|  25.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1243|  25.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1244|       |
 1245|  25.1k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1246|  25.1k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1247|       |
 1248|  25.1k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1248:41): [True: 25.1k, False: 0]
  ------------------
 1249|       |
 1250|  25.1k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1251|  25.1k|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1255|  26.7k|        {
 1256|  26.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1257|  26.7k|            const auto& src_reg   = arg2.AsRegisterInt();
 1258|  26.7k|            const auto& imm_value = arg3.AsImmediateValue();
 1259|       |
 1260|  26.7k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1261|       |
 1262|  26.7k|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1262:41): [True: 1, False: 26.7k]
  ------------------
 1263|       |
 1264|  26.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1265|  26.7k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1269|  24.2k|        {
 1270|  24.2k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1271|  24.2k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1272|       |
 1273|  24.2k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1274|  24.2k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1275|       |
 1276|  24.2k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1277|       |
 1278|  24.2k|            processor.SetFPSRValue(new_value);
 1279|  24.2k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1283|  27.6k|        {
 1284|  27.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1285|  27.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1286|       |
 1287|  27.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1288|  27.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1289|       |
 1290|  27.6k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1291|       |
 1292|  27.6k|            processor.SetFPSRValue(new_value);
 1293|  27.6k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1297|  36.2k|        {
 1298|  36.2k|            const auto& dest_reg = arg1.AsRegisterInt();
 1299|  36.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1300|  36.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1301|       |
 1302|  36.2k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1303|  36.2k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1304|       |
 1305|  36.2k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1305:41): [True: 0, False: 36.2k]
  ------------------
 1306|       |
 1307|  36.2k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1308|  36.2k|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1312|  26.1k|        {
 1313|  26.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1314|  26.1k|            const auto& src_reg   = arg2.AsRegisterInt();
 1315|  26.1k|            const auto& imm_value = arg3.AsImmediateValue();
 1316|       |
 1317|  26.1k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1318|       |
 1319|  26.1k|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1319:41): [True: 22.4k, False: 3.66k]
  ------------------
 1320|       |
 1321|  26.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1322|  26.1k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1326|  19.7k|        {
 1327|  19.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1328|  19.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1329|  19.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1330|       |
 1331|  19.7k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1332|  19.7k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1333|       |
 1334|  19.7k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1334:41): [True: 0, False: 19.7k]
  ------------------
 1335|       |
 1336|  19.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1337|  19.7k|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1341|  19.6k|        {
 1342|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1343|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1344|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1345|       |
 1346|  19.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1347|       |
 1348|  19.6k|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1348:41): [True: 19.6k, False: 0]
  ------------------
 1349|       |
 1350|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1351|  19.6k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1355|  29.8k|        {
 1356|  29.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1357|  29.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1358|       |
 1359|  29.8k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1360|  29.8k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1361|       |
 1362|  29.8k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1363|       |
 1364|  29.8k|            processor.SetFPSRValue(new_value);
 1365|  29.8k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1369|  24.5k|        {
 1370|  24.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1371|  24.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1372|       |
 1373|  24.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1374|  24.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1375|       |
 1376|  24.5k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1377|       |
 1378|  24.5k|            processor.SetFPSRValue(new_value);
 1379|  24.5k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1383|  81.4k|        {
 1384|  81.4k|            const auto& test_reg   = arg1.AsRegisterInt();
 1385|  81.4k|            const auto& jump_label = arg2.AsLabel();
 1386|       |
 1387|  81.4k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1388|       |
 1389|  81.4k|            if (test_value == 0)
  ------------------
  |  Branch (1389:17): [True: 64.9k, False: 16.5k]
  ------------------
 1390|  64.9k|            {
 1391|  64.9k|                JumpToLabel(processor, jump_label.label_name);
 1392|  64.9k|            }
 1393|  81.4k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1397|   127k|        {
 1398|   127k|            const auto& test_reg   = arg1.AsRegisterInt();
 1399|   127k|            const auto& jump_label = arg2.AsLabel();
 1400|       |
 1401|   127k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1402|       |
 1403|   127k|            if (test_value != 0)
  ------------------
  |  Branch (1403:17): [True: 106k, False: 20.7k]
  ------------------
 1404|   106k|            {
 1405|   106k|                JumpToLabel(processor, jump_label.label_name);
 1406|   106k|            }
 1407|   127k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1411|   170k|        {
 1412|   170k|            const auto& jump_label = arg1.AsLabel();
 1413|       |
 1414|   170k|            phi::boolean test_value = processor.GetFPSRValue();
 1415|       |
 1416|   170k|            if (test_value)
  ------------------
  |  Branch (1416:17): [True: 136k, False: 34.8k]
  ------------------
 1417|   136k|            {
 1418|   136k|                JumpToLabel(processor, jump_label.label_name);
 1419|   136k|            }
 1420|   170k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1424|   120k|        {
 1425|   120k|            const auto& jump_label = arg1.AsLabel();
 1426|       |
 1427|   120k|            phi::boolean test_value = processor.GetFPSRValue();
 1428|       |
 1429|   120k|            if (!test_value)
  ------------------
  |  Branch (1429:17): [True: 66.5k, False: 54.1k]
  ------------------
 1430|  66.5k|            {
 1431|  66.5k|                JumpToLabel(processor, jump_label.label_name);
 1432|  66.5k|            }
 1433|   120k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1437|   151k|        {
 1438|   151k|            const auto& jump_label = arg1.AsLabel();
 1439|       |
 1440|   151k|            JumpToLabel(processor, jump_label.label_name);
 1441|   151k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1445|  2.66M|        {
 1446|  2.66M|            const auto& jump_register = arg1.AsRegisterInt();
 1447|       |
 1448|  2.66M|            JumpToRegister(processor, jump_register.register_id);
 1449|  2.66M|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1453|  56.0k|        {
 1454|  56.0k|            const auto& jump_label = arg1.AsLabel();
 1455|       |
 1456|  56.0k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1457|  56.0k|                                                  processor.GetNextProgramCounter());
 1458|       |
 1459|  56.0k|            JumpToLabel(processor, jump_label.label_name);
 1460|  56.0k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1464|  27.3k|        {
 1465|  27.3k|            const auto& jump_register = arg1.AsRegisterInt();
 1466|       |
 1467|  27.3k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1468|  27.3k|                                                  processor.GetNextProgramCounter());
 1469|       |
 1470|  27.3k|            JumpToRegister(processor, jump_register.register_id);
 1471|  27.3k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1475|  12.6k|        {
 1476|  12.6k|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1477|  12.6k|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1478|       |
 1479|  12.6k|            imm_value = static_cast<std::int32_t>((imm_value << 16) & 0xFFFF0000);
 1480|       |
 1481|  12.6k|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1482|  12.6k|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1486|  68.1k|        {
 1487|  68.1k|            const auto& dest_reg = arg1.AsRegisterInt();
 1488|       |
 1489|  68.1k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1490|       |
 1491|  68.1k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1491:17): [True: 1, False: 68.1k]
  ------------------
 1492|      1|            {
 1493|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1494|      1|                return;
 1495|      1|            }
 1496|       |
 1497|  68.1k|            phi::i32 address = optional_address.value();
 1498|       |
 1499|  68.1k|            auto optional_value =
 1500|  68.1k|                    processor.GetMemory().LoadByte(static_cast<std::size_t>(address.unsafe()));
 1501|       |
 1502|  68.1k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1502:17): [True: 2, False: 68.1k]
  ------------------
 1503|      2|            {
 1504|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1505|      2|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1506|      2|                return;
 1507|      2|            }
 1508|       |
 1509|  68.1k|            phi::i32 value = optional_value.value();
 1510|       |
 1511|  68.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1512|  68.1k|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1516|  93.6k|        {
 1517|  93.6k|            const auto& dest_reg = arg1.AsRegisterInt();
 1518|       |
 1519|  93.6k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1520|       |
 1521|  93.6k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1521:17): [True: 1, False: 93.6k]
  ------------------
 1522|      1|            {
 1523|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1524|      1|                return;
 1525|      1|            }
 1526|       |
 1527|  93.6k|            phi::i32 address = optional_address.value();
 1528|       |
 1529|  93.6k|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1530|  93.6k|                    static_cast<std::size_t>(address.unsafe()));
 1531|       |
 1532|  93.6k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1532:17): [True: 2, False: 93.6k]
  ------------------
 1533|      2|            {
 1534|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1535|      2|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1536|      2|                return;
 1537|      2|            }
 1538|       |
 1539|  93.6k|            phi::u32 value = optional_value.value();
 1540|       |
 1541|  93.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1542|  93.6k|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1546|  24.3k|        {
 1547|  24.3k|            const auto& dest_reg = arg1.AsRegisterInt();
 1548|       |
 1549|  24.3k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1550|       |
 1551|  24.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1551:17): [True: 1, False: 24.3k]
  ------------------
 1552|      1|            {
 1553|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1554|      1|                return;
 1555|      1|            }
 1556|       |
 1557|  24.3k|            phi::i32 address = optional_address.value();
 1558|       |
 1559|  24.3k|            auto optional_value =
 1560|  24.3k|                    processor.GetMemory().LoadHalfWord(static_cast<std::size_t>(address.unsafe()));
 1561|       |
 1562|  24.3k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1562:17): [True: 4, False: 24.3k]
  ------------------
 1563|      4|            {
 1564|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1565|      4|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1566|      4|                return;
 1567|      4|            }
 1568|       |
 1569|  24.3k|            phi::i32 value = optional_value.value();
 1570|       |
 1571|  24.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1572|  24.3k|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1576|  46.9k|        {
 1577|  46.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1578|       |
 1579|  46.9k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1580|       |
 1581|  46.9k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1581:17): [True: 1, False: 46.9k]
  ------------------
 1582|      1|            {
 1583|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1584|      1|                return;
 1585|      1|            }
 1586|       |
 1587|  46.9k|            phi::i32 address = optional_address.value();
 1588|       |
 1589|  46.9k|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1590|  46.9k|                    static_cast<std::size_t>(address.unsafe()));
 1591|       |
 1592|  46.9k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1592:17): [True: 15, False: 46.9k]
  ------------------
 1593|     15|            {
 1594|     15|                processor.Raise(Exception::AddressOutOfBounds);
 1595|     15|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|     15|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1596|     15|                return;
 1597|     15|            }
 1598|       |
 1599|  46.9k|            phi::u32 value = optional_value.value();
 1600|       |
 1601|  46.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1602|  46.9k|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1606|  18.2k|        {
 1607|  18.2k|            const auto& dest_reg = arg1.AsRegisterInt();
 1608|       |
 1609|  18.2k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1610|       |
 1611|  18.2k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1611:17): [True: 1, False: 18.2k]
  ------------------
 1612|      1|            {
 1613|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1614|      1|                return;
 1615|      1|            }
 1616|       |
 1617|  18.2k|            phi::i32 address = optional_address.value();
 1618|       |
 1619|  18.2k|            auto optional_value =
 1620|  18.2k|                    processor.GetMemory().LoadWord(static_cast<std::size_t>(address.unsafe()));
 1621|       |
 1622|  18.2k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1622:17): [True: 3, False: 18.2k]
  ------------------
 1623|      3|            {
 1624|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1625|      3|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1626|      3|                return;
 1627|      3|            }
 1628|       |
 1629|  18.2k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1630|  18.2k|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1634|  15.4k|        {
 1635|  15.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1636|       |
 1637|  15.4k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1638|       |
 1639|  15.4k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1639:17): [True: 1, False: 15.4k]
  ------------------
 1640|      1|            {
 1641|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1642|      1|                return;
 1643|      1|            }
 1644|       |
 1645|  15.4k|            phi::i32 address = optional_address.value();
 1646|       |
 1647|  15.4k|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1648|  15.4k|                    static_cast<std::size_t>(address.unsafe()));
 1649|       |
 1650|  15.4k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1650:17): [True: 3, False: 15.4k]
  ------------------
 1651|      3|            {
 1652|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1653|      3|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1654|      3|                return;
 1655|      3|            }
 1656|       |
 1657|  15.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1658|  15.4k|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1662|  16.5k|        {
 1663|  16.5k|            const auto& dest_reg = arg1.AsRegisterFloat();
 1664|       |
 1665|  16.5k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1666|       |
 1667|  16.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1667:17): [True: 1, False: 16.5k]
  ------------------
 1668|      1|            {
 1669|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1670|      1|                return;
 1671|      1|            }
 1672|       |
 1673|  16.5k|            phi::i32 address = optional_address.value();
 1674|       |
 1675|  16.5k|            auto optional_value =
 1676|  16.5k|                    processor.GetMemory().LoadFloat(static_cast<std::size_t>(address.unsafe()));
 1677|       |
 1678|  16.5k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1678:17): [True: 5, False: 16.5k]
  ------------------
 1679|      5|            {
 1680|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1681|      5|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1682|      5|                return;
 1683|      5|            }
 1684|       |
 1685|  16.5k|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1686|  16.5k|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1690|  38.5k|        {
 1691|  38.5k|            const auto& dest_reg = arg1.AsRegisterFloat();
 1692|       |
 1693|  38.5k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1694|       |
 1695|  38.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1695:17): [True: 1, False: 38.5k]
  ------------------
 1696|      1|            {
 1697|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1698|      1|                return;
 1699|      1|            }
 1700|       |
 1701|  38.5k|            phi::i32 address = optional_address.value();
 1702|       |
 1703|  38.5k|            auto optional_value =
 1704|  38.5k|                    processor.GetMemory().LoadDouble(static_cast<std::size_t>(address.unsafe()));
 1705|       |
 1706|  38.5k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1706:17): [True: 5, False: 38.5k]
  ------------------
 1707|      5|            {
 1708|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1709|      5|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1710|      5|                return;
 1711|      5|            }
 1712|       |
 1713|  38.5k|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1714|  38.5k|        }
_ZN3dlx4impl2SBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1718|  24.6k|        {
 1719|  24.6k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1720|       |
 1721|  24.6k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1721:17): [True: 1, False: 24.6k]
  ------------------
 1722|      1|            {
 1723|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1724|      1|                return;
 1725|      1|            }
 1726|       |
 1727|  24.6k|            phi::i32 address = optional_address.value();
 1728|       |
 1729|  24.6k|            const auto& src_reg = arg2.AsRegisterInt();
 1730|       |
 1731|  24.6k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1732|       |
 1733|  24.6k|            phi::boolean success =
 1734|  24.6k|                    processor.GetMemory().StoreByte(static_cast<std::size_t>(address.unsafe()),
 1735|  24.6k|                                                    static_cast<std::int8_t>(value.unsafe()));
 1736|       |
 1737|  24.6k|            if (!success)
  ------------------
  |  Branch (1737:17): [True: 5, False: 24.6k]
  ------------------
 1738|      5|            {
 1739|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1740|      5|                DLX_ERROR("Failed to store byte at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1741|      5|            }
 1742|  24.6k|        }
_ZN3dlx4impl3SBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1746|  26.1k|        {
 1747|  26.1k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1748|       |
 1749|  26.1k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1749:17): [True: 1, False: 26.1k]
  ------------------
 1750|      1|            {
 1751|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1752|      1|                return;
 1753|      1|            }
 1754|       |
 1755|  26.1k|            phi::i32 address = optional_address.value();
 1756|       |
 1757|  26.1k|            const auto& src_reg = arg2.AsRegisterInt();
 1758|       |
 1759|  26.1k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1760|       |
 1761|  26.1k|            phi::boolean success = processor.GetMemory().StoreUnsignedByte(
 1762|  26.1k|                    static_cast<std::size_t>(address.unsafe()),
 1763|  26.1k|                    static_cast<std::uint8_t>(value.unsafe()));
 1764|       |
 1765|  26.1k|            if (!success)
  ------------------
  |  Branch (1765:17): [True: 4, False: 26.1k]
  ------------------
 1766|      4|            {
 1767|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1768|      4|                DLX_ERROR("Failed to store unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1769|      4|            }
 1770|  26.1k|        }
_ZN3dlx4impl2SHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1774|  25.3k|        {
 1775|  25.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1776|       |
 1777|  25.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1777:17): [True: 1, False: 25.3k]
  ------------------
 1778|      1|            {
 1779|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1780|      1|                return;
 1781|      1|            }
 1782|       |
 1783|  25.3k|            phi::i32 address = optional_address.value();
 1784|       |
 1785|  25.3k|            const auto& src_reg = arg2.AsRegisterInt();
 1786|       |
 1787|  25.3k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1788|       |
 1789|  25.3k|            phi::boolean success =
 1790|  25.3k|                    processor.GetMemory().StoreHalfWord(static_cast<std::size_t>(address.unsafe()),
 1791|  25.3k|                                                        static_cast<std::int16_t>(value.unsafe()));
 1792|       |
 1793|  25.3k|            if (!success)
  ------------------
  |  Branch (1793:17): [True: 3, False: 25.3k]
  ------------------
 1794|      3|            {
 1795|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1796|      3|                DLX_ERROR("Failed to store half word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1797|      3|            }
 1798|  25.3k|        }
_ZN3dlx4impl3SHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1802|  24.3k|        {
 1803|  24.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1804|       |
 1805|  24.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1805:17): [True: 1, False: 24.3k]
  ------------------
 1806|      1|            {
 1807|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1808|      1|                return;
 1809|      1|            }
 1810|       |
 1811|  24.3k|            phi::i32 address = optional_address.value();
 1812|       |
 1813|  24.3k|            const auto& src_reg = arg2.AsRegisterInt();
 1814|       |
 1815|  24.3k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1816|       |
 1817|  24.3k|            phi::boolean success = processor.GetMemory().StoreUnsignedHalfWord(
 1818|  24.3k|                    static_cast<std::size_t>(address.unsafe()),
 1819|  24.3k|                    static_cast<std::uint16_t>(value.unsafe()));
 1820|       |
 1821|  24.3k|            if (!success)
  ------------------
  |  Branch (1821:17): [True: 3, False: 24.3k]
  ------------------
 1822|      3|            {
 1823|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1824|      3|                DLX_ERROR("Failed to store unsigned half word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1825|      3|            }
 1826|  24.3k|        }
_ZN3dlx4impl2SWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1830|  21.2k|        {
 1831|  21.2k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1832|       |
 1833|  21.2k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1833:17): [True: 1, False: 21.2k]
  ------------------
 1834|      1|            {
 1835|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1836|      1|                return;
 1837|      1|            }
 1838|       |
 1839|  21.2k|            phi::i32 address = optional_address.value();
 1840|       |
 1841|  21.2k|            const auto& src_reg = arg2.AsRegisterInt();
 1842|       |
 1843|  21.2k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1844|       |
 1845|  21.2k|            phi::boolean success = processor.GetMemory().StoreWord(
 1846|  21.2k|                    static_cast<std::size_t>(address.unsafe()), value);
 1847|       |
 1848|  21.2k|            if (!success)
  ------------------
  |  Branch (1848:17): [True: 2, False: 21.2k]
  ------------------
 1849|      2|            {
 1850|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1851|      2|                DLX_ERROR("Failed to store word at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1852|      2|            }
 1853|  21.2k|        }
_ZN3dlx4impl3SWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1857|  17.9k|        {
 1858|  17.9k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1859|       |
 1860|  17.9k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1860:17): [True: 1, False: 17.9k]
  ------------------
 1861|      1|            {
 1862|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1863|      1|                return;
 1864|      1|            }
 1865|       |
 1866|  17.9k|            phi::i32 address = optional_address.value();
 1867|       |
 1868|  17.9k|            const auto& src_reg = arg2.AsRegisterInt();
 1869|       |
 1870|  17.9k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1871|       |
 1872|  17.9k|            phi::boolean success = processor.GetMemory().StoreUnsignedWord(
 1873|  17.9k|                    static_cast<std::size_t>(address.unsafe()), value);
 1874|       |
 1875|  17.9k|            if (!success)
  ------------------
  |  Branch (1875:17): [True: 3, False: 17.9k]
  ------------------
 1876|      3|            {
 1877|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1878|      3|                DLX_ERROR("Failed to store unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1879|      3|            }
 1880|  17.9k|        }
_ZN3dlx4impl2SFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1884|  18.3k|        {
 1885|  18.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1886|       |
 1887|  18.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1887:17): [True: 1, False: 18.3k]
  ------------------
 1888|      1|            {
 1889|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1890|      1|                return;
 1891|      1|            }
 1892|       |
 1893|  18.3k|            phi::i32 address = optional_address.value();
 1894|       |
 1895|  18.3k|            const auto& src_reg = arg2.AsRegisterFloat();
 1896|       |
 1897|  18.3k|            phi::f32 value = processor.FloatRegisterGetFloatValue(src_reg.register_id);
 1898|       |
 1899|  18.3k|            phi::boolean success = processor.GetMemory().StoreFloat(
 1900|  18.3k|                    static_cast<std::size_t>(address.unsafe()), value);
 1901|       |
 1902|  18.3k|            if (!success)
  ------------------
  |  Branch (1902:17): [True: 4, False: 18.3k]
  ------------------
 1903|      4|            {
 1904|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1905|      4|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1906|      4|            }
 1907|  18.3k|        }
_ZN3dlx4impl2SDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1911|  22.5k|        {
 1912|  22.5k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1913|       |
 1914|  22.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1914:17): [True: 2, False: 22.5k]
  ------------------
 1915|      2|            {
 1916|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1917|      2|                return;
 1918|      2|            }
 1919|       |
 1920|  22.5k|            phi::i32 address = optional_address.value();
 1921|       |
 1922|  22.5k|            const auto& src_reg = arg2.AsRegisterFloat();
 1923|       |
 1924|  22.5k|            phi::f64 value = processor.FloatRegisterGetDoubleValue(src_reg.register_id);
 1925|       |
 1926|  22.5k|            phi::boolean success = processor.GetMemory().StoreDouble(
 1927|  22.5k|                    static_cast<std::size_t>(address.unsafe()), value);
 1928|       |
 1929|  22.5k|            if (!success)
  ------------------
  |  Branch (1929:17): [True: 4, False: 22.5k]
  ------------------
 1930|      4|            {
 1931|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1932|      4|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1933|      4|            }
 1934|  22.5k|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1938|  19.0k|        {
 1939|  19.0k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1940|  19.0k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1941|       |
 1942|  19.0k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1943|       |
 1944|  19.0k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1945|  19.0k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1949|  28.7k|        {
 1950|  28.7k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1951|  28.7k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1952|       |
 1953|  28.7k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1954|       |
 1955|  28.7k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1956|  28.7k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1987|  17.6k|        {
 1988|  17.6k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1989|  17.6k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1990|       |
 1991|  17.6k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1992|       |
 1993|  17.6k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 1994|  17.6k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1998|  12.2k|        {
 1999|  12.2k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2000|  12.2k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2001|       |
 2002|  12.2k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2003|  12.2k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2004|  12.2k|            const float        converted_value_float =
 2005|  12.2k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2006|       |
 2007|  12.2k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2008|  12.2k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2012|  24.3k|        {
 2013|  24.3k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2014|  24.3k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2015|       |
 2016|  24.3k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2017|  24.3k|            const float  converted_value = static_cast<float>(src_value);
 2018|       |
 2019|  24.3k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2020|  24.3k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2024|  15.1k|        {
 2025|  15.1k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2026|  15.1k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2027|       |
 2028|  15.1k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2029|  15.1k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2030|  15.1k|            const float        converted_value_float =
 2031|  15.1k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2032|       |
 2033|  15.1k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2034|  15.1k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2038|  37.9k|        {
 2039|  37.9k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2040|  37.9k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2041|       |
 2042|  37.9k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2043|  37.9k|            const std::int32_t converted_value_int =
 2044|  37.9k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2045|  37.9k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2046|       |
 2047|  37.9k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2048|  37.9k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2052|  27.9k|        {
 2053|  27.9k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2054|  27.9k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2055|       |
 2056|  27.9k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2057|  27.9k|            const std::int32_t converted_value_int =
 2058|  27.9k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2059|  27.9k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2060|       |
 2061|  27.9k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2062|  27.9k|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2066|      1|        {
 2067|      1|            processor.Raise(Exception::Trap);
 2068|      1|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2072|      2|        {
 2073|      2|            processor.Raise(Exception::Halt);
 2074|      2|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2078|  2.99M|        {
 2079|       |            /* Do nothing */
 2080|  2.99M|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  168|   210k|    {
  169|   210k|        phi::i64 res = phi::i64(lhs) + rhs;
  170|       |
  171|   210k|        SafeWriteInteger(processor, dest_reg, res);
  172|   210k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  123|  2.15M|    {
  124|  2.15M|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  125|  2.15M|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  126|       |
  127|       |        // Check for underflow
  128|  2.15M|        if (value < min)
  ------------------
  |  Branch (128:13): [True: 152k, False: 2.00M]
  ------------------
  129|   152k|        {
  130|   152k|            processor.Raise(Exception::Underflow);
  131|       |
  132|   152k|            value = max + (value % (min - 1));
  133|   152k|        }
  134|       |        // Check for overflow
  135|  2.00M|        else if (value > max)
  ------------------
  |  Branch (135:18): [True: 275k, False: 1.72M]
  ------------------
  136|   275k|        {
  137|   275k|            processor.Raise(Exception::Overflow);
  138|       |
  139|   275k|            value = min + (value % (max + 1));
  140|   275k|        }
  141|       |
  142|  2.15M|        PHI_ASSERT(value >= min);
  143|  2.15M|        PHI_ASSERT(value <= max);
  144|       |
  145|  2.15M|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  146|  2.15M|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  176|   180k|    {
  177|   180k|        phi::u64 res = phi::u64(lhs) + rhs;
  178|       |
  179|   180k|        SafeWriteInteger(processor, dest_reg, res);
  180|   180k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  150|   483k|    {
  151|   483k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  152|       |
  153|       |        // Check for overflow
  154|   483k|        if (value > max)
  ------------------
  |  Branch (154:13): [True: 51.7k, False: 431k]
  ------------------
  155|  51.7k|        {
  156|  51.7k|            processor.Raise(Exception::Overflow);
  157|       |
  158|  51.7k|            value %= max + 1u;
  159|  51.7k|        }
  160|       |
  161|   483k|        PHI_ASSERT(value <= max);
  162|       |
  163|   483k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  164|   483k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  184|  1.56M|    {
  185|  1.56M|        phi::i64 res = phi::i64(lhs) - rhs;
  186|       |
  187|  1.56M|        SafeWriteInteger(processor, dest_reg, res);
  188|  1.56M|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  192|   185k|    {
  193|   185k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  194|       |
  195|   185k|        if (lhs < rhs)
  ------------------
  |  Branch (195:13): [True: 47.7k, False: 137k]
  ------------------
  196|  47.7k|        {
  197|  47.7k|            processor.Raise(Exception::Underflow);
  198|       |
  199|  47.7k|            phi::u64 res = max - rhs + lhs + 1u;
  200|  47.7k|            SafeWriteInteger(processor, dest_reg, res);
  201|  47.7k|            return;
  202|  47.7k|        }
  203|       |
  204|   137k|        phi::u64 res = phi::u64(lhs) - rhs;
  205|       |
  206|   137k|        SafeWriteInteger(processor, dest_reg, res);
  207|   137k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  211|   307k|    {
  212|   307k|        phi::i64 res = phi::i64(lhs) * rhs;
  213|       |
  214|   307k|        SafeWriteInteger(processor, dest_reg, res);
  215|   307k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  219|  78.9k|    {
  220|  78.9k|        phi::u64 res = phi::u64(lhs) * rhs;
  221|       |
  222|  78.9k|        SafeWriteInteger(processor, dest_reg, res);
  223|  78.9k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  227|  70.6k|    {
  228|  70.6k|        if (rhs == 0)
  ------------------
  |  Branch (228:13): [True: 8, False: 70.6k]
  ------------------
  229|      8|        {
  230|      8|            processor.Raise(Exception::DivideByZero);
  231|      8|            return;
  232|      8|        }
  233|       |
  234|  70.6k|        phi::i64 res = phi::i64(lhs) / rhs;
  235|       |
  236|  70.6k|        SafeWriteInteger(processor, dest_reg, res);
  237|  70.6k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  241|  38.7k|    {
  242|  38.7k|        if (rhs == 0u)
  ------------------
  |  Branch (242:13): [True: 3, False: 38.7k]
  ------------------
  243|      3|        {
  244|      3|            processor.Raise(Exception::DivideByZero);
  245|      3|            return;
  246|      3|        }
  247|       |
  248|  38.7k|        phi::u64 res = phi::u64(lhs) / rhs;
  249|       |
  250|  38.7k|        SafeWriteInteger(processor, dest_reg, res);
  251|  38.7k|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  324|   333k|    {
  325|   333k|        if (shift > 31)
  ------------------
  |  Branch (325:13): [True: 84.2k, False: 249k]
  ------------------
  326|  84.2k|        {
  327|  84.2k|            processor.Raise(Exception::BadShift);
  328|       |
  329|       |            // Just set register to 0
  330|  84.2k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  331|  84.2k|            return;
  332|  84.2k|        }
  333|       |
  334|       |        // Negative shifts are undefined behavior
  335|   249k|        if (shift < 0)
  ------------------
  |  Branch (335:13): [True: 79.4k, False: 169k]
  ------------------
  336|  79.4k|        {
  337|  79.4k|            processor.Raise(Exception::BadShift);
  338|  79.4k|            return;
  339|  79.4k|        }
  340|       |
  341|   169k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  342|       |
  343|   169k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  344|   169k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  255|   240k|    {
  256|       |        // Prevent undefined behavior by shifting by more than 31
  257|   240k|        if (shift > 31)
  ------------------
  |  Branch (257:13): [True: 81.4k, False: 159k]
  ------------------
  258|  81.4k|        {
  259|  81.4k|            processor.Raise(Exception::BadShift);
  260|       |
  261|       |            // Just set register to 0
  262|  81.4k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  263|  81.4k|            return;
  264|  81.4k|        }
  265|       |
  266|       |        // Do nothing when shifting by zero to prevent undefined behavior
  267|   159k|        if (shift == 0)
  ------------------
  |  Branch (267:13): [True: 64.8k, False: 94.3k]
  ------------------
  268|  64.8k|        {
  269|  64.8k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  270|  64.8k|            return;
  271|  64.8k|        }
  272|       |
  273|       |        // Negative shifts are undefiend behavior
  274|  94.3k|        if (shift < 0)
  ------------------
  |  Branch (274:13): [True: 30.5k, False: 63.7k]
  ------------------
  275|  30.5k|        {
  276|  30.5k|            processor.Raise(Exception::BadShift);
  277|  30.5k|            return;
  278|  30.5k|        }
  279|       |
  280|  63.7k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  281|       |
  282|  63.7k|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  283|       |
  284|  63.7k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  285|  63.7k|    }
InstructionImplementation.cpp:_ZN3dlxL16clear_top_n_bitsEii:
   28|  63.7k|    {
   29|  63.7k|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behavior");
   30|       |
   31|  63.7k|        return value & ~(-1 << (32 - n));
   32|  63.7k|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  289|   180k|    {
  290|       |        // Prevent undefined behavior by shifting by more than 31
  291|   180k|        if (shift > 31)
  ------------------
  |  Branch (291:13): [True: 43.8k, False: 136k]
  ------------------
  292|  43.8k|        {
  293|  43.8k|            processor.Raise(Exception::BadShift);
  294|       |
  295|       |            // Is negative ie. sign bit is set
  296|  43.8k|            if (base < 0)
  ------------------
  |  Branch (296:17): [True: 9.50k, False: 34.3k]
  ------------------
  297|  9.50k|            {
  298|       |                // Set every byte to 1
  299|  9.50k|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  300|  9.50k|            }
  301|  34.3k|            else
  302|  34.3k|            {
  303|       |                // Set every byte to 0
  304|  34.3k|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  305|  34.3k|            }
  306|  43.8k|            return;
  307|  43.8k|        }
  308|       |
  309|       |        // Negative shifts are undefined behavior
  310|   136k|        if (shift < 0)
  ------------------
  |  Branch (310:13): [True: 55.4k, False: 80.7k]
  ------------------
  311|  55.4k|        {
  312|  55.4k|            processor.Raise(Exception::BadShift);
  313|  55.4k|            return;
  314|  55.4k|        }
  315|       |
  316|  80.7k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  317|       |
  318|  80.7k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  319|  80.7k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   37|   581k|    {
   38|       |        // Lookup the label
   39|   581k|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   40|   581k|        PHI_ASSERT(program != nullptr);
   41|   581k|        PHI_ASSERT(!label_name.is_empty(), "Can't jump to empty label");
   42|       |
   43|   581k|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (43:13): [True: 134, False: 581k]
  ------------------
   44|    134|        {
   45|    134|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|    134|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   46|    134|            processor.Raise(Exception::UnknownLabel);
   47|    134|            return;
   48|    134|        }
   49|       |
   50|   581k|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   51|   581k|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   52|       |
   53|       |        // Set program counter
   54|   581k|        processor.SetNextProgramCounter(jump_point);
   55|   581k|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   58|  2.68M|    {
   59|  2.68M|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   60|       |
   61|  2.68M|        phi::u32 max_address =
   62|  2.68M|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   63|  2.68M|        if (address >= max_address)
  ------------------
  |  Branch (63:13): [True: 68, False: 2.68M]
  ------------------
   64|     68|        {
   65|     68|            processor.Raise(Exception::AddressOutOfBounds);
   66|     68|            return;
   67|     68|        }
   68|       |
   69|  2.68M|        processor.SetNextProgramCounter(address.unsafe());
   70|  2.68M|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
   99|   502k|    {
  100|   502k|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (100:13): [True: 502k, False: 14]
  ------------------
  101|   502k|        {
  102|   502k|            const auto& imm_value = argument.AsImmediateValue();
  103|       |
  104|   502k|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (104:17): [True: 16, False: 502k]
  ------------------
  105|     16|            {
  106|     16|                return {};
  107|     16|            }
  108|       |
  109|   502k|            return imm_value.signed_value;
  110|   502k|        }
  111|       |
  112|     14|        PHI_ASSERT(argument.GetType() == ArgumentType::AddressDisplacement);
  113|       |
  114|     14|        const auto& adr_displacement = argument.AsAddressDisplacement();
  115|     14|        return CalculateDisplacementAddress(processor, adr_displacement);
  116|   502k|    }
InstructionImplementation.cpp:_ZN3dlxL28CalculateDisplacementAddressERNS_9ProcessorERKNS_19InstructionArgument19AddressDisplacementE:
   77|     14|    {
   78|     14|        phi::i32 register_value = processor.IntRegisterGetSignedValue(adr_displacement.register_id);
   79|       |
   80|     14|        phi::i32 address = adr_displacement.displacement + register_value;
   81|       |
   82|     14|        if (address < 0)
  ------------------
  |  Branch (82:13): [True: 1, False: 13]
  ------------------
   83|      1|        {
   84|      1|            processor.Raise(Exception::AddressOutOfBounds);
   85|      1|            return {};
   86|      1|        }
   87|       |
   88|     13|        return address;
   89|     14|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  13.2M|    {
   12|  13.2M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  13.2M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  13.2M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  13.2M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  13.2M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  13.2M|                   "Unexpected argument type for arg1");
   22|  13.2M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  13.2M|                   "Unexpected argument type for arg2");
   24|  13.2M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  13.2M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  13.2M|        m_Executor(processor, arg1, arg2, arg3);
   29|  13.2M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   498k|    {
  453|   498k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   498k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|  4.67M|    {
   17|  4.67M|        m_ValueSigned = val;
   18|  4.67M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|   465k|    {
   22|   465k|        m_ValueUnsigned = val;
   23|   465k|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|  8.20M|    {
   27|  8.20M|        return m_ValueSigned;
   28|  8.20M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  3.88M|    {
   32|  3.88M|        return m_ValueUnsigned;
   33|  3.88M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  5.54M|    {
   37|  5.54M|        return m_IsReadOnly;
   38|  5.54M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   21|  68.1k|    {
   22|  68.1k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (22:13): [True: 2, False: 68.1k]
  ------------------
   23|      2|        {
   24|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   25|      2|            return {};
   26|      2|        }
   27|       |
   28|  68.1k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   29|       |
   30|  68.1k|        return m_Values[raw_address].signed_value;
   31|  68.1k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   34|  93.6k|    {
   35|  93.6k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (35:13): [True: 2, False: 93.6k]
  ------------------
   36|      2|        {
   37|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   38|      2|            return {};
   39|      2|        }
   40|       |
   41|  93.6k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   42|  93.6k|        return m_Values[raw_address].unsigned_value;
   43|  93.6k|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   46|  24.3k|    {
   47|  24.3k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (47:13): [True: 3, False: 24.3k]
  ------------------
   48|      3|        {
   49|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   50|      3|            return {};
   51|      3|        }
   52|       |
   53|  24.3k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   54|       |
   55|  24.3k|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (55:13): [True: 1, False: 24.3k]
  ------------------
   56|      1|        {
   57|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   58|      1|            return {};
   59|      1|        }
   60|       |
   61|  24.3k|        return *reinterpret_cast<const std::int16_t*>(&m_Values[raw_address].signed_value);
   62|  24.3k|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   65|  46.9k|    {
   66|  46.9k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (66:13): [True: 14, False: 46.9k]
  ------------------
   67|     14|        {
   68|     14|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|     14|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|     14|            return {};
   70|     14|        }
   71|       |
   72|  46.9k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   73|       |
   74|  46.9k|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (74:13): [True: 1, False: 46.9k]
  ------------------
   75|      1|        {
   76|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   77|      1|            return {};
   78|      1|        }
   79|       |
   80|  46.9k|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[raw_address].unsigned_value);
   81|  46.9k|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   84|  18.2k|    {
   85|  18.2k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (85:13): [True: 2, False: 18.2k]
  ------------------
   86|      2|        {
   87|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   88|      2|            return {};
   89|      2|        }
   90|       |
   91|  18.2k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   92|       |
   93|  18.2k|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (93:13): [True: 1, False: 18.2k]
  ------------------
   94|      1|        {
   95|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   96|      1|            return {};
   97|      1|        }
   98|       |
   99|  18.2k|        return *reinterpret_cast<const std::int32_t*>(&m_Values[raw_address].signed_value);
  100|  18.2k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
  103|  15.4k|    {
  104|  15.4k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (104:13): [True: 2, False: 15.4k]
  ------------------
  105|      2|        {
  106|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  107|      2|            return {};
  108|      2|        }
  109|       |
  110|  15.4k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  111|       |
  112|  15.4k|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (112:13): [True: 1, False: 15.4k]
  ------------------
  113|      1|        {
  114|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|      1|            return {};
  116|      1|        }
  117|       |
  118|  15.4k|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[raw_address].unsigned_value);
  119|  15.4k|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  122|  16.5k|    {
  123|  16.5k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (123:13): [True: 4, False: 16.5k]
  ------------------
  124|      4|        {
  125|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  126|      4|            return {};
  127|      4|        }
  128|       |
  129|  16.5k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  130|       |
  131|  16.5k|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (131:13): [True: 1, False: 16.5k]
  ------------------
  132|      1|        {
  133|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  134|      1|            return {};
  135|      1|        }
  136|       |
  137|  16.5k|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  138|  16.5k|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  141|  38.5k|    {
  142|  38.5k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (142:13): [True: 4, False: 38.5k]
  ------------------
  143|      4|        {
  144|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  145|      4|            return {};
  146|      4|        }
  147|       |
  148|  38.5k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  149|       |
  150|  38.5k|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (150:13): [True: 1, False: 38.5k]
  ------------------
  151|      1|        {
  152|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  153|      1|            return {};
  154|      1|        }
  155|       |
  156|  38.5k|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  157|  38.5k|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  160|  24.6k|    {
  161|  24.6k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (161:13): [True: 5, False: 24.6k]
  ------------------
  162|      5|        {
  163|      5|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  164|      5|            return false;
  165|      5|        }
  166|       |
  167|  24.6k|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  168|  24.6k|        return true;
  169|  24.6k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedByteEN3phi7integerImEENS2_IhEE:
  172|  26.1k|    {
  173|  26.1k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (173:13): [True: 4, False: 26.1k]
  ------------------
  174|      4|        {
  175|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  176|      4|            return false;
  177|      4|        }
  178|       |
  179|  26.1k|        m_Values[(address - m_StartingAddress).unsafe()].unsigned_value = value.unsafe();
  180|  26.1k|        return true;
  181|  26.1k|    }
_ZN3dlx11MemoryBlock13StoreHalfWordEN3phi7integerImEENS2_IsEE:
  184|  25.3k|    {
  185|  25.3k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (185:13): [True: 3, False: 25.3k]
  ------------------
  186|      3|        {
  187|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  188|      3|            return false;
  189|      3|        }
  190|       |
  191|  25.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  192|  25.3k|        *reinterpret_cast<std::int16_t*>(&m_Values[index].signed_value) = value.unsafe();
  193|       |
  194|  25.3k|        return true;
  195|  25.3k|    }
_ZN3dlx11MemoryBlock21StoreUnsignedHalfWordEN3phi7integerImEENS2_ItEE:
  198|  24.3k|    {
  199|  24.3k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (199:13): [True: 3, False: 24.3k]
  ------------------
  200|      3|        {
  201|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  202|      3|            return false;
  203|      3|        }
  204|       |
  205|  24.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  206|  24.3k|        *reinterpret_cast<std::uint16_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  207|       |
  208|  24.3k|        return true;
  209|  24.3k|    }
_ZN3dlx11MemoryBlock9StoreWordEN3phi7integerImEENS2_IiEE:
  212|  21.2k|    {
  213|  21.2k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (213:13): [True: 2, False: 21.2k]
  ------------------
  214|      2|        {
  215|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  216|      2|            return false;
  217|      2|        }
  218|       |
  219|  21.2k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  220|  21.2k|        *reinterpret_cast<std::int32_t*>(&m_Values[index].signed_value) = value.unsafe();
  221|       |
  222|  21.2k|        return true;
  223|  21.2k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedWordEN3phi7integerImEENS2_IjEE:
  226|  17.9k|    {
  227|  17.9k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (227:13): [True: 3, False: 17.9k]
  ------------------
  228|      3|        {
  229|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  230|      3|            return false;
  231|      3|        }
  232|       |
  233|  17.9k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  234|  17.9k|        *reinterpret_cast<std::uint32_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  235|       |
  236|  17.9k|        return true;
  237|  17.9k|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  240|  18.3k|    {
  241|  18.3k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (241:13): [True: 4, False: 18.3k]
  ------------------
  242|      4|        {
  243|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  244|      4|            return false;
  245|      4|        }
  246|       |
  247|  18.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  248|  18.3k|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  249|       |
  250|  18.3k|        return true;
  251|  18.3k|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  254|  22.5k|    {
  255|  22.5k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (255:13): [True: 4, False: 22.5k]
  ------------------
  256|      4|        {
  257|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  258|      4|            return false;
  259|      4|        }
  260|       |
  261|  22.5k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  262|  22.5k|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  263|       |
  264|  22.5k|        return true;
  265|  22.5k|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  268|   502k|    {
  269|       |        // Cannot access anything before the starting address
  270|   502k|        if (address < m_StartingAddress)
  ------------------
  |  Branch (270:13): [True: 45, False: 502k]
  ------------------
  271|     45|        {
  272|     45|            return false;
  273|     45|        }
  274|       |
  275|       |        // Check if addres + size will overflow
  276|   502k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (276:13): [True: 0, False: 502k]
  ------------------
  277|   502k|                                             address.unsafe(), size.unsafe()))
  278|      0|        {
  279|      0|            return false;
  280|      0|        }
  281|       |
  282|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  283|   502k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (283:13): [True: 0, False: 502k]
  ------------------
  284|   502k|                                             m_StartingAddress.unsafe(), m_Values.size()))
  285|      0|        {
  286|      0|            return false;
  287|      0|        }
  288|       |
  289|       |        // Check if address is out of bounds
  290|   502k|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (290:13): [True: 16, False: 502k]
  ------------------
  291|     16|        {
  292|     16|            return false;
  293|     16|        }
  294|       |
  295|       |        // Otherwise this is a valid address
  296|   502k|        return true;
  297|   502k|    }
_ZN3dlx11MemoryBlock25IsAddressAlignedCorrectlyEN3phi7integerImEES3_:
  301|   160k|    {
  302|   160k|        return size != 0u && (address % size) == 0u;
  ------------------
  |  Branch (302:16): [True: 160k, False: 0]
  |  Branch (302:30): [True: 160k, False: 6]
  ------------------
  303|   160k|    }
_ZN3dlx11MemoryBlock5ClearEv:
  306|  28.5k|    {
  307|  28.5k|        for (auto& val : m_Values)
  ------------------
  |  Branch (307:24): [True: 28.5M, False: 28.5k]
  ------------------
  308|  28.5M|        {
  309|  28.5M|            val.signed_value = 0;
  310|  28.5M|        }
  311|  28.5k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|  4.82M|    {
   24|  4.82M|        switch (token.length().unsafe())
   25|  4.82M|        {
   26|       |            // 1 character OpCodes
   27|   774k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 774k, False: 4.05M]
  ------------------
   28|   774k|                const char c1 = token[0u];
   29|       |
   30|   774k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 214k, False: 559k]
  ------------------
   31|   214k|                {
   32|   214k|                    return OpCode::J;
   33|   214k|                }
   34|   559k|                break;
   35|   774k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|   776k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 776k, False: 4.05M]
  ------------------
   39|   776k|                const char c1 = token[0u];
   40|   776k|                const char c2 = token[1u];
   41|       |
   42|   776k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 492k, False: 283k]
  ------------------
   43|   776k|                {
   44|  11.4k|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 11.4k, False: 765k]
  ------------------
   45|  21.7k|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 10.3k, False: 766k]
  ------------------
   46|  21.7k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 5.64k, False: 16.1k]
  ------------------
   47|  5.64k|                        {
   48|  5.64k|                            return OpCode::JR;
   49|  5.64k|                        }
   50|  16.1k|                        break;
   51|       |
   52|  44.7k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 44.7k, False: 731k]
  ------------------
   53|  65.8k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 21.1k, False: 755k]
  ------------------
   54|  65.8k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 25.2k, False: 40.6k]
  ------------------
   55|  65.8k|                        {
   56|  8.51k|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 8.51k, False: 57.3k]
  ------------------
   57|  8.99k|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 486, False: 65.3k]
  ------------------
   58|  8.99k|                                return OpCode::LB;
   59|  3.73k|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 3.73k, False: 62.1k]
  ------------------
   60|  4.67k|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 948, False: 64.9k]
  ------------------
   61|  4.67k|                                return OpCode::LD;
   62|  10.0k|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 10.0k, False: 55.8k]
  ------------------
   63|  13.5k|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 3.49k, False: 62.3k]
  ------------------
   64|  13.5k|                                return OpCode::LF;
   65|  1.64k|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 1.64k, False: 64.2k]
  ------------------
   66|  3.36k|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 1.72k, False: 64.1k]
  ------------------
   67|  3.36k|                                return OpCode::LH;
   68|  7.02k|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 7.02k, False: 58.8k]
  ------------------
   69|  10.0k|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 3.02k, False: 62.8k]
  ------------------
   70|  10.0k|                                return OpCode::LW;
   71|  65.8k|                        }
   72|  25.2k|                        break;
   73|  25.2k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 13.4k, False: 763k]
  ------------------
   74|  33.7k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 20.2k, False: 756k]
  ------------------
   75|  33.7k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 14.2k, False: 19.5k]
  ------------------
   76|  14.2k|                        {
   77|  14.2k|                            return OpCode::OR;
   78|  14.2k|                        }
   79|  19.5k|                        break;
   80|   123k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 123k, False: 652k]
  ------------------
   81|   162k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 38.7k, False: 737k]
  ------------------
   82|   162k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 42.2k, False: 120k]
  ------------------
   83|   162k|                        {
   84|  10.8k|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 10.8k, False: 151k]
  ------------------
   85|  49.3k|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 38.5k, False: 123k]
  ------------------
   86|  49.3k|                                return OpCode::SB;
   87|  5.42k|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 5.42k, False: 157k]
  ------------------
   88|  17.8k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 12.3k, False: 150k]
  ------------------
   89|  17.8k|                                return OpCode::SD;
   90|  6.67k|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 6.67k, False: 155k]
  ------------------
   91|  34.2k|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 27.5k, False: 134k]
  ------------------
   92|  34.2k|                                return OpCode::SF;
   93|  3.87k|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 3.87k, False: 158k]
  ------------------
   94|  12.1k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 8.24k, False: 154k]
  ------------------
   95|  12.1k|                                return OpCode::SH;
   96|  1.44k|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 1.44k, False: 160k]
  ------------------
   97|  6.67k|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 5.22k, False: 157k]
  ------------------
   98|  6.67k|                                return OpCode::SW;
   99|   162k|                        }
  100|  42.2k|                        break;
  101|   776k|                }
  102|   595k|                break;
  103|   776k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|  1.12M|            case 3: {
  ------------------
  |  Branch (106:13): [True: 1.12M, False: 3.70M]
  ------------------
  107|  1.12M|                const char c1 = token[0u];
  108|  1.12M|                const char c2 = token[1u];
  109|  1.12M|                const char c3 = token[2u];
  110|       |
  111|  1.12M|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 337k, False: 789k]
  ------------------
  112|  1.12M|                {
  113|  12.0k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 12.0k, False: 1.11M]
  ------------------
  114|  41.3k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 29.2k, False: 1.09M]
  ------------------
  115|  41.3k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 16.9k, False: 24.3k]
  |  Branch (115:29): [True: 11.9k, False: 29.3k]
  |  Branch (115:45): [True: 11.9k, False: 4.95k]
  ------------------
  116|  11.9k|                        {
  117|  11.9k|                            return OpCode::ADD;
  118|  11.9k|                        }
  119|  29.3k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 21.6k, False: 7.70k]
  |  Branch (119:34): [True: 13.7k, False: 15.5k]
  |  Branch (119:50): [True: 13.7k, False: 7.87k]
  ------------------
  120|  13.7k|                        {
  121|  13.7k|                            return OpCode::AND;
  122|  13.7k|                        }
  123|  15.5k|                        break;
  124|       |
  125|  15.5k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 11.8k, False: 1.11M]
  ------------------
  126|  38.8k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 27.0k, False: 1.09M]
  ------------------
  127|  38.8k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 23.5k, False: 15.3k]
  |  Branch (127:29): [True: 10.6k, False: 28.1k]
  |  Branch (127:45): [True: 10.6k, False: 12.8k]
  ------------------
  128|  10.6k|                        {
  129|  10.6k|                            return OpCode::DIV;
  130|  10.6k|                        }
  131|  28.1k|                        break;
  132|       |
  133|  28.1k|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 6.42k, False: 1.12M]
  ------------------
  134|  41.3k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 34.9k, False: 1.09M]
  ------------------
  135|  41.3k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 33.8k, False: 7.49k]
  ------------------
  136|  33.8k|                        {
  137|  33.8k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 20.0k, False: 13.7k]
  ------------------
  138|  20.0k|                            {
  139|  20.0k|                                return OpCode::EQD;
  140|  20.0k|                            }
  141|  13.7k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 8.79k, False: 4.99k]
  ------------------
  142|  8.79k|                            {
  143|  8.79k|                                return OpCode::EQF;
  144|  8.79k|                            }
  145|  33.8k|                        }
  146|  12.4k|                        break;
  147|       |
  148|  41.7k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 41.7k, False: 1.08M]
  ------------------
  149|  83.0k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 41.3k, False: 1.08M]
  ------------------
  150|  83.0k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 27.8k, False: 55.1k]
  ------------------
  151|  27.8k|                        {
  152|  27.8k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 18.5k, False: 9.30k]
  ------------------
  153|  18.5k|                            {
  154|  18.5k|                                return OpCode::GED;
  155|  18.5k|                            }
  156|  9.30k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 6.29k, False: 3.00k]
  ------------------
  157|  6.29k|                            {
  158|  6.29k|                                return OpCode::GEF;
  159|  6.29k|                            }
  160|  27.8k|                        }
  161|  55.1k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 48.3k, False: 6.79k]
  ------------------
  162|  48.3k|                        {
  163|  48.3k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 19.2k, False: 29.1k]
  ------------------
  164|  19.2k|                            {
  165|  19.2k|                                return OpCode::GTD;
  166|  19.2k|                            }
  167|  29.1k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 24.9k, False: 4.18k]
  ------------------
  168|  24.9k|                            {
  169|  24.9k|                                return OpCode::GTF;
  170|  24.9k|                            }
  171|  29.1k|                        }
  172|  13.9k|                        break;
  173|       |
  174|  16.7k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 16.7k, False: 1.10M]
  ------------------
  175|  26.5k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 9.77k, False: 1.11M]
  ------------------
  176|  26.5k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 12.9k, False: 13.6k]
  |  Branch (176:29): [True: 5.80k, False: 20.7k]
  |  Branch (176:45): [True: 5.80k, False: 7.12k]
  ------------------
  177|  5.80k|                        {
  178|  5.80k|                            return OpCode::JAL;
  179|  5.80k|                        }
  180|  20.7k|                        break;
  181|       |
  182|   109k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 109k, False: 1.01M]
  ------------------
  183|   163k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 54.0k, False: 1.07M]
  ------------------
  184|   163k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 20.0k, False: 143k]
  ------------------
  185|   163k|                        {
  186|  21.3k|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 21.3k, False: 142k]
  ------------------
  187|  23.8k|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 2.41k, False: 161k]
  ------------------
  188|  23.8k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 12.9k, False: 10.8k]
  ------------------
  189|  12.9k|                                {
  190|  12.9k|                                    return OpCode::LBU;
  191|  12.9k|                                }
  192|  10.8k|                                break;
  193|       |
  194|  10.8k|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 5.17k, False: 158k]
  ------------------
  195|  21.6k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 16.4k, False: 147k]
  ------------------
  196|  21.6k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 12.0k, False: 9.63k]
  ------------------
  197|  12.0k|                                {
  198|  12.0k|                                    return OpCode::LED;
  199|  12.0k|                                }
  200|  9.63k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 5.93k, False: 3.70k]
  ------------------
  201|  5.93k|                                {
  202|  5.93k|                                    return OpCode::LEF;
  203|  5.93k|                                }
  204|  3.70k|                                break;
  205|       |
  206|  5.46k|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 5.46k, False: 158k]
  ------------------
  207|  26.0k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 20.6k, False: 143k]
  ------------------
  208|  26.0k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 7.13k, False: 18.9k]
  ------------------
  209|  7.13k|                                {
  210|  7.13k|                                    return OpCode::LHI;
  211|  7.13k|                                }
  212|  18.9k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 15.6k, False: 3.30k]
  ------------------
  213|  15.6k|                                {
  214|  15.6k|                                    return OpCode::LHU;
  215|  15.6k|                                }
  216|  3.30k|                                break;
  217|       |
  218|  35.4k|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 35.4k, False: 128k]
  ------------------
  219|  49.2k|                            case 't':
  ------------------
  |  Branch (219:29): [True: 13.7k, False: 150k]
  ------------------
  220|  49.2k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 34.1k, False: 15.0k]
  ------------------
  221|  34.1k|                                {
  222|  34.1k|                                    return OpCode::LTD;
  223|  34.1k|                                }
  224|  15.0k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 9.07k, False: 6.01k]
  ------------------
  225|  9.07k|                                {
  226|  9.07k|                                    return OpCode::LTF;
  227|  9.07k|                                }
  228|  6.01k|                                break;
  229|       |
  230|  6.01k|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 5.69k, False: 158k]
  ------------------
  231|  22.9k|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 17.2k, False: 146k]
  ------------------
  232|  22.9k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 18.8k, False: 4.09k]
  ------------------
  233|  18.8k|                                {
  234|  18.8k|                                    return OpCode::LWU;
  235|  18.8k|                                }
  236|  4.09k|                                break;
  237|   163k|                        }
  238|  48.0k|                        break;
  239|       |
  240|  48.0k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 42.6k, False: 1.08M]
  ------------------
  241|  60.8k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 18.2k, False: 1.10M]
  ------------------
  242|  60.8k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 31.1k, False: 29.7k]
  ------------------
  243|  31.1k|                        {
  244|  31.1k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 14.5k, False: 16.5k]
  ------------------
  245|  14.5k|                            {
  246|  14.5k|                                return OpCode::NED;
  247|  14.5k|                            }
  248|  16.5k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 5.56k, False: 11.0k]
  ------------------
  249|  5.56k|                            {
  250|  5.56k|                                return OpCode::NEF;
  251|  5.56k|                            }
  252|  31.1k|                        }
  253|  29.7k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 26.0k, False: 3.74k]
  |  Branch (253:34): [True: 15.9k, False: 13.7k]
  |  Branch (253:50): [True: 15.9k, False: 10.0k]
  ------------------
  254|  15.9k|                        {
  255|  15.9k|                            return OpCode::NOP;
  256|  15.9k|                        }
  257|       |
  258|  24.7k|                        break;
  259|       |
  260|  24.7k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 24.0k, False: 1.10M]
  ------------------
  261|  45.1k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 21.0k, False: 1.10M]
  ------------------
  262|  45.1k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 30.1k, False: 14.9k]
  |  Branch (262:29): [True: 15.5k, False: 29.6k]
  |  Branch (262:45): [True: 15.5k, False: 14.6k]
  ------------------
  263|  15.5k|                        {
  264|  15.5k|                            return OpCode::ORI;
  265|  15.5k|                        }
  266|  29.6k|                        break;
  267|       |
  268|   102k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 102k, False: 1.02M]
  ------------------
  269|   258k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 156k, False: 970k]
  ------------------
  270|   258k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 16.1k, False: 242k]
  ------------------
  271|   258k|                        {
  272|  10.0k|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 10.0k, False: 248k]
  ------------------
  273|  37.2k|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 27.1k, False: 231k]
  ------------------
  274|  37.2k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 17.5k, False: 19.6k]
  ------------------
  275|  17.5k|                                {
  276|  17.5k|                                    return OpCode::SBU;
  277|  17.5k|                                }
  278|  19.6k|                                break;
  279|       |
  280|  19.6k|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 6.24k, False: 252k]
  ------------------
  281|  10.3k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 4.05k, False: 254k]
  ------------------
  282|  10.3k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 4.49k, False: 5.80k]
  ------------------
  283|  4.49k|                                {
  284|  4.49k|                                    return OpCode::SEQ;
  285|  4.49k|                                }
  286|  5.80k|                                break;
  287|       |
  288|  8.80k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 8.80k, False: 249k]
  ------------------
  289|  25.2k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 16.4k, False: 242k]
  ------------------
  290|  25.2k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 9.66k, False: 15.6k]
  ------------------
  291|  9.66k|                                {
  292|  9.66k|                                    return OpCode::SGE;
  293|  9.66k|                                }
  294|  15.6k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 5.93k, False: 9.67k]
  ------------------
  295|  5.93k|                                {
  296|  5.93k|                                    return OpCode::SGT;
  297|  5.93k|                                }
  298|  9.67k|                                break;
  299|       |
  300|  9.67k|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 7.59k, False: 251k]
  ------------------
  301|  22.9k|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 15.3k, False: 243k]
  ------------------
  302|  22.9k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 18.9k, False: 3.97k]
  ------------------
  303|  18.9k|                                {
  304|  18.9k|                                    return OpCode::SHU;
  305|  18.9k|                                }
  306|  3.97k|                                break;
  307|       |
  308|  38.0k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 38.0k, False: 220k]
  ------------------
  309|  54.7k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 16.7k, False: 241k]
  ------------------
  310|  54.7k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 11.7k, False: 43.0k]
  ------------------
  311|  54.7k|                                {
  312|  3.67k|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 3.67k, False: 51.0k]
  ------------------
  313|  11.9k|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 8.28k, False: 46.4k]
  ------------------
  314|  11.9k|                                        return OpCode::SLA;
  315|       |
  316|  2.40k|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 2.40k, False: 52.3k]
  ------------------
  317|  10.3k|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 7.99k, False: 46.7k]
  ------------------
  318|  10.3k|                                        return OpCode::SLE;
  319|       |
  320|  7.29k|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 7.29k, False: 47.4k]
  ------------------
  321|  15.0k|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 7.76k, False: 46.9k]
  ------------------
  322|  15.0k|                                        return OpCode::SLL;
  323|       |
  324|  3.42k|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 3.42k, False: 51.2k]
  ------------------
  325|  5.58k|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 2.15k, False: 52.5k]
  ------------------
  326|  5.58k|                                        return OpCode::SLT;
  327|  54.7k|                                }
  328|  11.7k|                                break;
  329|       |
  330|  16.8k|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 16.8k, False: 241k]
  ------------------
  331|  19.1k|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 2.26k, False: 256k]
  ------------------
  332|  19.1k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 11.3k, False: 7.84k]
  ------------------
  333|  11.3k|                                {
  334|  11.3k|                                    return OpCode::SNE;
  335|  11.3k|                                }
  336|  7.84k|                                break;
  337|       |
  338|  24.9k|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 24.9k, False: 233k]
  ------------------
  339|  32.0k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 7.05k, False: 251k]
  ------------------
  340|  32.0k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 23.5k, False: 8.51k]
  ------------------
  341|  23.5k|                                {
  342|  23.5k|                                    return OpCode::SRA;
  343|  23.5k|                                }
  344|  8.51k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 4.32k, False: 4.19k]
  ------------------
  345|  4.32k|                                {
  346|  4.32k|                                    return OpCode::SRL;
  347|  4.32k|                                }
  348|  4.19k|                                break;
  349|       |
  350|  20.3k|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 20.3k, False: 238k]
  ------------------
  351|  24.8k|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 4.57k, False: 254k]
  ------------------
  352|  24.8k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 19.3k, False: 5.52k]
  ------------------
  353|  19.3k|                                {
  354|  19.3k|                                    return OpCode::SUB;
  355|  19.3k|                                }
  356|  5.52k|                                break;
  357|       |
  358|  6.92k|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 6.92k, False: 251k]
  ------------------
  359|  15.9k|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 9.04k, False: 249k]
  ------------------
  360|  15.9k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 9.03k, False: 6.93k]
  ------------------
  361|  9.03k|                                {
  362|  9.03k|                                    return OpCode::SWU;
  363|  9.03k|                                }
  364|  6.93k|                                break;
  365|   258k|                        }
  366|       |
  367|  93.9k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 2.44k, False: 1.12M]
  ------------------
  368|   120k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 26.9k, False: 1.09M]
  ------------------
  369|   120k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 24.7k, False: 96.0k]
  |  Branch (369:29): [True: 13.7k, False: 107k]
  |  Branch (369:45): [True: 13.7k, False: 10.9k]
  ------------------
  370|  13.7k|                        {
  371|  13.7k|                            return OpCode::XOR;
  372|  13.7k|                        }
  373|   107k|                        break;
  374|  1.12M|                }
  375|   638k|                break;
  376|  1.12M|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  1.13M|            case 4: {
  ------------------
  |  Branch (379:13): [True: 1.13M, False: 3.69M]
  ------------------
  380|  1.13M|                const char c1 = token[0u];
  381|  1.13M|                const char c2 = token[1u];
  382|  1.13M|                const char c3 = token[2u];
  383|  1.13M|                const char c4 = token[3u];
  384|       |
  385|  1.13M|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 258k, False: 873k]
  ------------------
  386|  1.13M|                {
  387|  9.02k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 9.02k, False: 1.12M]
  ------------------
  388|  84.9k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 75.8k, False: 1.05M]
  ------------------
  389|  84.9k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 8.79k, False: 76.1k]
  ------------------
  390|  84.9k|                        {
  391|  45.8k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 45.8k, False: 39.0k]
  ------------------
  392|  48.7k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 2.91k, False: 81.9k]
  ------------------
  393|  48.7k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 38.8k, False: 9.92k]
  ------------------
  394|  38.8k|                                {
  395|  38.8k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 2.07k, False: 36.7k]
  ------------------
  396|  38.8k|                                    {
  397|  6.12k|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 6.12k, False: 32.7k]
  ------------------
  398|  16.2k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 10.1k, False: 28.6k]
  ------------------
  399|  16.2k|                                            return OpCode::ADDD;
  400|       |
  401|  2.07k|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 2.07k, False: 36.7k]
  ------------------
  402|  7.87k|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 5.80k, False: 33.0k]
  ------------------
  403|  7.87k|                                            return OpCode::ADDF;
  404|       |
  405|  3.25k|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 3.25k, False: 35.5k]
  ------------------
  406|  6.88k|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 3.63k, False: 35.1k]
  ------------------
  407|  6.88k|                                            return OpCode::ADDI;
  408|       |
  409|  1.48k|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 1.48k, False: 37.3k]
  ------------------
  410|  5.72k|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 4.23k, False: 34.5k]
  ------------------
  411|  5.72k|                                            return OpCode::ADDU;
  412|  38.8k|                                    }
  413|  38.8k|                                }
  414|  12.0k|                                break;
  415|       |
  416|  21.2k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 21.2k, False: 63.6k]
  ------------------
  417|  27.3k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 6.15k, False: 78.7k]
  ------------------
  418|  27.3k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 21.0k, False: 6.30k]
  |  Branch (418:37): [True: 14.4k, False: 12.9k]
  |  Branch (418:53): [True: 14.4k, False: 6.62k]
  ------------------
  419|  14.4k|                                {
  420|  14.4k|                                    return OpCode::ANDI;
  421|  14.4k|                                }
  422|       |
  423|  12.9k|                                break;
  424|  84.9k|                        }
  425|  33.7k|                        break;
  426|       |
  427|  35.5k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 35.5k, False: 1.09M]
  ------------------
  428|  96.7k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 61.2k, False: 1.07M]
  ------------------
  429|  96.7k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 2.69k, False: 94.0k]
  ------------------
  430|  96.7k|                        {
  431|  20.5k|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 20.5k, False: 76.2k]
  ------------------
  432|  24.7k|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 4.23k, False: 92.5k]
  ------------------
  433|  24.7k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 19.7k, False: 4.99k]
  |  Branch (433:37): [True: 9.76k, False: 15.0k]
  |  Branch (433:53): [True: 9.76k, False: 10.0k]
  ------------------
  434|  9.76k|                                {
  435|  9.76k|                                    return OpCode::BEQZ;
  436|  9.76k|                                }
  437|  15.0k|                                break;
  438|       |
  439|  15.3k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 15.3k, False: 81.4k]
  ------------------
  440|  31.8k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 16.5k, False: 80.2k]
  ------------------
  441|  31.8k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 20.3k, False: 11.5k]
  ------------------
  442|  20.3k|                                {
  443|  20.3k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 8.58k, False: 11.7k]
  ------------------
  444|  8.58k|                                    {
  445|  8.58k|                                        return OpCode::BFPF;
  446|  8.58k|                                    }
  447|  11.7k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 6.77k, False: 5.01k]
  ------------------
  448|  6.77k|                                    {
  449|  6.77k|                                        return OpCode::BFPT;
  450|  6.77k|                                    }
  451|  20.3k|                                }
  452|  16.5k|                                break;
  453|       |
  454|  29.3k|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 29.3k, False: 67.4k]
  ------------------
  455|  37.4k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 8.08k, False: 88.6k]
  ------------------
  456|  37.4k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 26.8k, False: 10.6k]
  |  Branch (456:37): [True: 18.5k, False: 18.8k]
  |  Branch (456:53): [True: 18.5k, False: 8.25k]
  ------------------
  457|  18.5k|                                {
  458|  18.5k|                                    return OpCode::BNEZ;
  459|  18.5k|                                }
  460|  96.7k|                        }
  461|  53.0k|                        break;
  462|       |
  463|  53.0k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 32.1k, False: 1.09M]
  ------------------
  464|  93.8k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 61.7k, False: 1.07M]
  ------------------
  465|  93.8k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 78.9k, False: 14.8k]
  |  Branch (465:29): [True: 71.1k, False: 22.7k]
  |  Branch (465:45): [True: 71.1k, False: 7.82k]
  ------------------
  466|  71.1k|                        {
  467|  71.1k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 12.4k, False: 58.6k]
  ------------------
  468|  71.1k|                            {
  469|  6.69k|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 6.69k, False: 64.4k]
  ------------------
  470|  19.7k|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 13.0k, False: 58.0k]
  ------------------
  471|  19.7k|                                    return OpCode::DIVD;
  472|       |
  473|  7.71k|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 7.71k, False: 63.4k]
  ------------------
  474|  12.7k|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 5.03k, False: 66.1k]
  ------------------
  475|  12.7k|                                    return OpCode::DIVF;
  476|       |
  477|  4.32k|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 4.32k, False: 66.8k]
  ------------------
  478|  11.5k|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 7.17k, False: 63.9k]
  ------------------
  479|  11.5k|                                    return OpCode::DIVI;
  480|       |
  481|  10.6k|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 10.6k, False: 60.4k]
  ------------------
  482|  14.6k|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 3.91k, False: 67.2k]
  ------------------
  483|  14.6k|                                    return OpCode::DIVU;
  484|  71.1k|                            }
  485|  71.1k|                        }
  486|  35.2k|                        break;
  487|       |
  488|  35.2k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 28.1k, False: 1.10M]
  ------------------
  489|  34.3k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 6.18k, False: 1.12M]
  ------------------
  490|  34.3k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 30.5k, False: 3.79k]
  |  Branch (490:29): [True: 18.2k, False: 16.0k]
  |  Branch (490:45): [True: 25.9k, False: 4.65k]
  |  Branch (490:61): [True: 18.2k, False: 7.63k]
  ------------------
  491|  18.2k|                        {
  492|  18.2k|                            return OpCode::HALT;
  493|  18.2k|                        }
  494|  16.0k|                        break;
  495|       |
  496|  21.1k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 21.1k, False: 1.11M]
  ------------------
  497|  30.9k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 9.76k, False: 1.12M]
  ------------------
  498|  30.9k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 21.7k, False: 9.18k]
  |  Branch (498:29): [True: 8.52k, False: 22.4k]
  |  Branch (498:45): [True: 12.6k, False: 9.11k]
  |  Branch (498:61): [True: 8.52k, False: 4.10k]
  ------------------
  499|  8.52k|                        {
  500|  8.52k|                            return OpCode::JALR;
  501|  8.52k|                        }
  502|  22.4k|                        break;
  503|       |
  504|  39.1k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 39.1k, False: 1.09M]
  ------------------
  505|  61.3k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 22.2k, False: 1.10M]
  ------------------
  506|  61.3k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 26.3k, False: 35.0k]
  |  Branch (506:29): [True: 19.3k, False: 41.9k]
  |  Branch (506:45): [True: 19.3k, False: 6.90k]
  ------------------
  507|  19.3k|                        {
  508|  19.3k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 5.24k, False: 14.1k]
  ------------------
  509|  5.24k|                            {
  510|  5.24k|                                return OpCode::MOVD;
  511|  5.24k|                            }
  512|  14.1k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 11.9k, False: 2.20k]
  ------------------
  513|  11.9k|                            {
  514|  11.9k|                                return OpCode::MOVF;
  515|  11.9k|                            }
  516|  19.3k|                        }
  517|  41.9k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 28.8k, False: 13.0k]
  |  Branch (517:34): [True: 11.7k, False: 30.1k]
  |  Branch (517:50): [True: 24.8k, False: 4.02k]
  |  Branch (517:66): [True: 11.7k, False: 13.0k]
  ------------------
  518|  11.7k|                        {
  519|  11.7k|                            return OpCode::MULT;
  520|  11.7k|                        }
  521|  32.3k|                        break;
  522|       |
  523|   171k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 171k, False: 960k]
  ------------------
  524|   393k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 222k, False: 909k]
  ------------------
  525|   393k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 18.9k, False: 375k]
  ------------------
  526|   393k|                        {
  527|  33.6k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 33.6k, False: 360k]
  ------------------
  528|  53.7k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 20.0k, False: 373k]
  ------------------
  529|  53.7k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 47.0k, False: 6.72k]
  ------------------
  530|  47.0k|                                {
  531|  47.0k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 20.3k, False: 26.6k]
  ------------------
  532|  20.3k|                                    {
  533|  20.3k|                                        return OpCode::SEQI;
  534|  20.3k|                                    }
  535|  26.6k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 18.6k, False: 7.99k]
  ------------------
  536|  18.6k|                                    {
  537|  18.6k|                                        return OpCode::SEQU;
  538|  18.6k|                                    }
  539|  47.0k|                                }
  540|  14.7k|                                break;
  541|       |
  542|  16.5k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 16.5k, False: 377k]
  ------------------
  543|  59.5k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 42.9k, False: 351k]
  ------------------
  544|  59.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 28.9k, False: 30.6k]
  ------------------
  545|  28.9k|                                {
  546|  28.9k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 16.3k, False: 12.6k]
  ------------------
  547|  16.3k|                                    {
  548|  16.3k|                                        return OpCode::SGEI;
  549|  16.3k|                                    }
  550|  12.6k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 9.42k, False: 3.24k]
  ------------------
  551|  9.42k|                                    {
  552|  9.42k|                                        return OpCode::SGEU;
  553|  9.42k|                                    }
  554|  28.9k|                                }
  555|  30.6k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 21.2k, False: 9.35k]
  ------------------
  556|  21.2k|                                {
  557|  21.2k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 10.9k, False: 10.2k]
  ------------------
  558|  10.9k|                                    {
  559|  10.9k|                                        return OpCode::SGTI;
  560|  10.9k|                                    }
  561|  10.2k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 6.99k, False: 3.29k]
  ------------------
  562|  6.99k|                                    {
  563|  6.99k|                                        return OpCode::SGTU;
  564|  6.99k|                                    }
  565|  21.2k|                                }
  566|  15.8k|                                break;
  567|       |
  568|  88.9k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 88.9k, False: 305k]
  ------------------
  569|   115k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 26.6k, False: 367k]
  ------------------
  570|   115k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 11.5k, False: 104k]
  ------------------
  571|   115k|                                {
  572|  10.6k|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 10.6k, False: 104k]
  ------------------
  573|  13.8k|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 3.20k, False: 112k]
  ------------------
  574|  13.8k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 10.6k, False: 3.27k]
  ------------------
  575|  10.6k|                                        {
  576|  10.6k|                                            return OpCode::SLAI;
  577|  10.6k|                                        }
  578|  3.27k|                                        break;
  579|       |
  580|  23.7k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 23.7k, False: 91.8k]
  ------------------
  581|  28.3k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 4.65k, False: 110k]
  ------------------
  582|  28.3k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 10.0k, False: 18.3k]
  ------------------
  583|  10.0k|                                        {
  584|  10.0k|                                            return OpCode::SLEI;
  585|  10.0k|                                        }
  586|  18.3k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 13.7k, False: 4.61k]
  ------------------
  587|  13.7k|                                        {
  588|  13.7k|                                            return OpCode::SLEU;
  589|  13.7k|                                        }
  590|  4.61k|                                        break;
  591|       |
  592|  13.7k|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 13.7k, False: 101k]
  ------------------
  593|  26.5k|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 12.7k, False: 102k]
  ------------------
  594|  26.5k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 13.7k, False: 12.7k]
  ------------------
  595|  13.7k|                                        {
  596|  13.7k|                                            return OpCode::SLLI;
  597|  13.7k|                                        }
  598|  12.7k|                                        break;
  599|       |
  600|  12.7k|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 10.5k, False: 105k]
  ------------------
  601|  35.2k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 24.6k, False: 90.9k]
  ------------------
  602|  35.2k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 10.8k, False: 24.3k]
  ------------------
  603|  10.8k|                                        {
  604|  10.8k|                                            return OpCode::SLTI;
  605|  10.8k|                                        }
  606|  24.3k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 18.7k, False: 5.59k]
  ------------------
  607|  18.7k|                                        {
  608|  18.7k|                                            return OpCode::SLTU;
  609|  18.7k|                                        }
  610|  5.59k|                                        break;
  611|   115k|                                }
  612|       |
  613|  65.8k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 27.9k, False: 366k]
  ------------------
  614|  77.5k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 11.7k, False: 382k]
  ------------------
  615|  77.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 31.9k, False: 45.5k]
  ------------------
  616|  31.9k|                                {
  617|  31.9k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 5.89k, False: 26.1k]
  ------------------
  618|  5.89k|                                    {
  619|  5.89k|                                        return OpCode::SNEI;
  620|  5.89k|                                    }
  621|  26.1k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 11.1k, False: 14.9k]
  ------------------
  622|  11.1k|                                    {
  623|  11.1k|                                        return OpCode::SNEU;
  624|  11.1k|                                    }
  625|  31.9k|                                }
  626|  60.5k|                                break;
  627|       |
  628|  60.5k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 13.9k, False: 380k]
  ------------------
  629|  38.1k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 24.2k, False: 369k]
  ------------------
  630|  38.1k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 26.3k, False: 11.8k]
  |  Branch (630:37): [True: 18.0k, False: 20.0k]
  |  Branch (630:53): [True: 18.0k, False: 8.25k]
  ------------------
  631|  18.0k|                                {
  632|  18.0k|                                    return OpCode::SRAI;
  633|  18.0k|                                }
  634|  20.0k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 10.2k, False: 9.78k]
  |  Branch (634:42): [True: 9.02k, False: 11.0k]
  |  Branch (634:58): [True: 9.02k, False: 1.25k]
  ------------------
  635|  9.02k|                                {
  636|  9.02k|                                    return OpCode::SRLI;
  637|  9.02k|                                }
  638|  11.0k|                                break;
  639|       |
  640|  44.3k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 44.3k, False: 349k]
  ------------------
  641|  68.2k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 23.9k, False: 370k]
  ------------------
  642|  68.2k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 66.0k, False: 2.23k]
  ------------------
  643|  66.0k|                                {
  644|  66.0k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 4.60k, False: 61.4k]
  ------------------
  645|  66.0k|                                    {
  646|  8.84k|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 8.84k, False: 57.1k]
  ------------------
  647|  15.7k|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 6.88k, False: 59.1k]
  ------------------
  648|  15.7k|                                            return OpCode::SUBD;
  649|       |
  650|  2.98k|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 2.98k, False: 63.0k]
  ------------------
  651|  14.6k|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 11.6k, False: 54.4k]
  ------------------
  652|  14.6k|                                            return OpCode::SUBF;
  653|       |
  654|  9.70k|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 9.70k, False: 56.3k]
  ------------------
  655|  23.6k|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 13.9k, False: 52.0k]
  ------------------
  656|  23.6k|                                            return OpCode::SUBI;
  657|       |
  658|  4.93k|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 4.93k, False: 61.0k]
  ------------------
  659|  7.43k|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 2.50k, False: 63.5k]
  ------------------
  660|  7.43k|                                            return OpCode::SUBU;
  661|  66.0k|                                    }
  662|  66.0k|                                }
  663|  6.84k|                                break;
  664|   393k|                        }
  665|   127k|                        break;
  666|       |
  667|   127k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 32.7k, False: 1.09M]
  ------------------
  668|  41.1k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 8.40k, False: 1.12M]
  ------------------
  669|  41.1k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 32.6k, False: 8.42k]
  |  Branch (669:29): [True: 12.2k, False: 28.8k]
  |  Branch (669:45): [True: 18.4k, False: 14.1k]
  |  Branch (669:61): [True: 12.2k, False: 6.21k]
  ------------------
  670|  12.2k|                        {
  671|  12.2k|                            return OpCode::TRAP;
  672|  12.2k|                        }
  673|  28.8k|                        break;
  674|  28.8k|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 3.29k, False: 1.12M]
  ------------------
  675|  35.8k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 32.5k, False: 1.09M]
  ------------------
  676|  35.8k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 31.3k, False: 4.54k]
  |  Branch (676:29): [True: 6.73k, False: 29.1k]
  |  Branch (676:45): [True: 19.8k, False: 11.5k]
  |  Branch (676:61): [True: 6.73k, False: 13.0k]
  ------------------
  677|  6.73k|                        {
  678|  6.73k|                            return OpCode::XORI;
  679|  6.73k|                        }
  680|  29.1k|                        break;
  681|  1.13M|                }
  682|   637k|                break;
  683|  1.13M|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|   637k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 497k, False: 4.33M]
  ------------------
  687|   497k|                const char c1 = token[0u];
  688|   497k|                const char c2 = token[1u];
  689|   497k|                const char c3 = token[2u];
  690|   497k|                const char c4 = token[3u];
  691|   497k|                const char c5 = token[4u];
  692|       |
  693|   497k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 111k, False: 385k]
  ------------------
  694|   497k|                {
  695|  2.47k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 2.47k, False: 494k]
  ------------------
  696|  29.3k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 26.8k, False: 470k]
  ------------------
  697|  29.3k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 24.9k, False: 4.42k]
  |  Branch (697:29): [True: 5.88k, False: 23.4k]
  |  Branch (697:45): [True: 21.0k, False: 3.88k]
  |  Branch (697:61): [True: 11.9k, False: 9.05k]
  |  Branch (697:77): [True: 5.88k, False: 6.08k]
  ------------------
  698|  5.88k|                        {
  699|  5.88k|                            return OpCode::ADDUI;
  700|  5.88k|                        }
  701|  23.4k|                        break;
  702|       |
  703|  35.5k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 35.5k, False: 461k]
  ------------------
  704|  65.3k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 29.7k, False: 467k]
  ------------------
  705|  65.3k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 53.4k, False: 11.8k]
  |  Branch (705:29): [True: 15.5k, False: 49.7k]
  |  Branch (705:45): [True: 50.1k, False: 3.26k]
  |  Branch (705:61): [True: 28.4k, False: 21.7k]
  |  Branch (705:77): [True: 15.5k, False: 12.8k]
  ------------------
  706|  15.5k|                        {
  707|  15.5k|                            return OpCode::DIVUI;
  708|  15.5k|                        }
  709|  49.7k|                        break;
  710|       |
  711|  49.7k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 13.7k, False: 483k]
  ------------------
  712|  76.7k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 63.0k, False: 433k]
  ------------------
  713|  76.7k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 68.4k, False: 8.34k]
  |  Branch (713:29): [True: 54.6k, False: 22.1k]
  |  Branch (713:45): [True: 62.1k, False: 6.34k]
  |  Branch (713:61): [True: 54.6k, False: 7.48k]
  ------------------
  714|  54.6k|                        {
  715|  54.6k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 5.72k, False: 48.8k]
  ------------------
  716|  54.6k|                            {
  717|  5.26k|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 5.26k, False: 49.3k]
  ------------------
  718|  10.1k|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 4.91k, False: 49.7k]
  ------------------
  719|  10.1k|                                    return OpCode::MULTD;
  720|       |
  721|  4.03k|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 4.03k, False: 50.5k]
  ------------------
  722|  8.42k|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 4.39k, False: 50.2k]
  ------------------
  723|  8.42k|                                    return OpCode::MULTF;
  724|       |
  725|  3.58k|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 3.58k, False: 51.0k]
  ------------------
  726|  10.0k|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 6.48k, False: 48.1k]
  ------------------
  727|  10.0k|                                    return OpCode::MULTI;
  728|       |
  729|  7.47k|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 7.47k, False: 47.1k]
  ------------------
  730|  20.2k|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 12.7k, False: 41.8k]
  ------------------
  731|  20.2k|                                    return OpCode::MULTU;
  732|  54.6k|                            }
  733|  54.6k|                        }
  734|  27.9k|                        break;
  735|       |
  736|  67.5k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 67.5k, False: 429k]
  ------------------
  737|   213k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 146k, False: 350k]
  ------------------
  738|   213k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 9.55k, False: 204k]
  ------------------
  739|   213k|                        {
  740|  37.6k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 37.6k, False: 175k]
  ------------------
  741|  51.4k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 13.7k, False: 199k]
  ------------------
  742|  51.4k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 45.0k, False: 6.35k]
  |  Branch (742:37): [True: 23.4k, False: 27.9k]
  |  Branch (742:53): [True: 41.9k, False: 3.08k]
  |  Branch (742:69): [True: 23.4k, False: 18.5k]
  ------------------
  743|  23.4k|                                {
  744|  23.4k|                                    return OpCode::SEQUI;
  745|  23.4k|                                }
  746|  27.9k|                                break;
  747|       |
  748|  27.9k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 14.2k, False: 199k]
  ------------------
  749|  41.1k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 26.8k, False: 186k]
  ------------------
  750|  41.1k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 17.7k, False: 23.3k]
  |  Branch (750:37): [True: 7.07k, False: 34.0k]
  |  Branch (750:53): [True: 10.6k, False: 7.06k]
  |  Branch (750:69): [True: 7.07k, False: 3.60k]
  ------------------
  751|  7.07k|                                {
  752|  7.07k|                                    return OpCode::SGEUI;
  753|  7.07k|                                }
  754|  34.0k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 23.1k, False: 10.9k]
  |  Branch (754:42): [True: 9.80k, False: 24.2k]
  |  Branch (754:58): [True: 13.9k, False: 9.11k]
  |  Branch (754:74): [True: 9.80k, False: 4.19k]
  ------------------
  755|  9.80k|                                {
  756|  9.80k|                                    return OpCode::SGTUI;
  757|  9.80k|                                }
  758|  24.2k|                                break;
  759|       |
  760|  33.1k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 33.1k, False: 180k]
  ------------------
  761|  55.2k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 22.1k, False: 191k]
  ------------------
  762|  55.2k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 23.5k, False: 31.7k]
  |  Branch (762:37): [True: 12.9k, False: 42.3k]
  |  Branch (762:53): [True: 15.0k, False: 8.51k]
  |  Branch (762:69): [True: 12.9k, False: 2.06k]
  ------------------
  763|  12.9k|                                {
  764|  12.9k|                                    return OpCode::SLEUI;
  765|  12.9k|                                }
  766|  42.3k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 27.5k, False: 14.7k]
  |  Branch (766:42): [True: 11.7k, False: 30.5k]
  |  Branch (766:58): [True: 23.2k, False: 4.26k]
  |  Branch (766:74): [True: 11.7k, False: 11.5k]
  ------------------
  767|  11.7k|                                {
  768|  11.7k|                                    return OpCode::SLTUI;
  769|  11.7k|                                }
  770|  30.5k|                                break;
  771|       |
  772|  30.5k|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 18.8k, False: 194k]
  ------------------
  773|  28.0k|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 9.23k, False: 204k]
  ------------------
  774|  28.0k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 23.0k, False: 5.00k]
  |  Branch (774:37): [True: 10.1k, False: 17.9k]
  |  Branch (774:53): [True: 21.5k, False: 1.50k]
  |  Branch (774:69): [True: 10.1k, False: 11.4k]
  ------------------
  775|  10.1k|                                {
  776|  10.1k|                                    return OpCode::SNEUI;
  777|  10.1k|                                }
  778|  17.9k|                                break;
  779|       |
  780|  17.9k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 15.2k, False: 198k]
  ------------------
  781|  28.1k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 12.8k, False: 200k]
  ------------------
  782|  28.1k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 24.0k, False: 4.14k]
  |  Branch (782:37): [True: 12.0k, False: 16.1k]
  |  Branch (782:53): [True: 14.9k, False: 9.05k]
  |  Branch (782:69): [True: 12.0k, False: 2.94k]
  ------------------
  783|  12.0k|                                {
  784|  12.0k|                                    return OpCode::SUBUI;
  785|  12.0k|                                }
  786|  16.1k|                                break;
  787|   213k|                        }
  788|       |
  789|   126k|                        break;
  790|   497k|                }
  791|       |
  792|   339k|                break;
  793|   497k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|   339k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 273k, False: 4.55M]
  ------------------
  797|   273k|                const char c1 = token[0u];
  798|   273k|                const char c2 = token[1u];
  799|   273k|                const char c3 = token[2u];
  800|   273k|                const char c4 = token[3u];
  801|   273k|                const char c5 = token[4u];
  802|   273k|                const char c6 = token[5u];
  803|       |
  804|   273k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 150k, False: 122k]
  |  Branch (804:21): [True: 135k, False: 137k]
  |  Branch (804:37): [True: 139k, False: 11.0k]
  |  Branch (804:53): [True: 135k, False: 4.16k]
  ------------------
  805|   135k|                {
  806|   135k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 5.53k, False: 129k]
  ------------------
  807|   135k|                    {
  808|  16.0k|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 16.0k, False: 119k]
  ------------------
  809|  39.7k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 23.7k, False: 111k]
  ------------------
  810|  39.7k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 31.5k, False: 8.18k]
  ------------------
  811|  31.5k|                            {
  812|  31.5k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 9.23k, False: 22.3k]
  ------------------
  813|  9.23k|                                {
  814|  9.23k|                                    return OpCode::CVTD2F;
  815|  9.23k|                                }
  816|  22.3k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 16.8k, False: 5.45k]
  ------------------
  817|  16.8k|                                {
  818|  16.8k|                                    return OpCode::CVTD2I;
  819|  16.8k|                                }
  820|  31.5k|                            }
  821|  13.6k|                            break;
  822|       |
  823|  43.4k|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 43.4k, False: 92.0k]
  ------------------
  824|  48.1k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 4.63k, False: 130k]
  ------------------
  825|  48.1k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 39.8k, False: 8.26k]
  ------------------
  826|  39.8k|                            {
  827|  39.8k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 8.06k, False: 31.7k]
  ------------------
  828|  8.06k|                                {
  829|  8.06k|                                    return OpCode::CVTF2D;
  830|  8.06k|                                }
  831|  31.7k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 20.1k, False: 11.6k]
  ------------------
  832|  20.1k|                                {
  833|  20.1k|                                    return OpCode::CVTF2I;
  834|  20.1k|                                }
  835|  39.8k|                            }
  836|  19.8k|                            break;
  837|       |
  838|  35.5k|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 35.5k, False: 100k]
  ------------------
  839|  42.0k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 6.58k, False: 128k]
  ------------------
  840|  42.0k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 35.9k, False: 6.13k]
  ------------------
  841|  35.9k|                            {
  842|  35.9k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 13.2k, False: 22.6k]
  ------------------
  843|  13.2k|                                {
  844|  13.2k|                                    return OpCode::CVTI2D;
  845|  13.2k|                                }
  846|  22.6k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 15.7k, False: 6.94k]
  ------------------
  847|  15.7k|                                {
  848|  15.7k|                                    return OpCode::CVTI2F;
  849|  15.7k|                                }
  850|  35.9k|                            }
  851|   135k|                    }
  852|   135k|                }
  853|   137k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 59.3k, False: 78.2k]
  |  Branch (853:26): [True: 14.7k, False: 122k]
  |  Branch (853:42): [True: 43.4k, False: 15.9k]
  |  Branch (853:58): [True: 39.3k, False: 4.08k]
  |  Branch (853:74): [True: 31.6k, False: 7.69k]
  ------------------
  854|   137k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 20.6k, False: 10.9k]
  |  Branch (854:42): [True: 14.7k, False: 5.94k]
  ------------------
  855|  14.7k|                {
  856|  14.7k|                    return OpCode::MULTUI;
  857|  14.7k|                }
  858|   174k|                break;
  859|   273k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|   174k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 134k, False: 4.69M]
  ------------------
  863|   134k|                const char c1 = token[0u];
  864|   134k|                const char c2 = token[1u];
  865|   134k|                const char c3 = token[2u];
  866|   134k|                const char c4 = token[3u];
  867|   134k|                const char c5 = token[4u];
  868|   134k|                const char c6 = token[5u];
  869|   134k|                const char c7 = token[6u];
  870|       |
  871|   134k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 94.8k, False: 39.6k]
  |  Branch (871:21): [True: 77.0k, False: 57.3k]
  |  Branch (871:37): [True: 84.3k, False: 10.5k]
  |  Branch (871:53): [True: 77.0k, False: 7.25k]
  ------------------
  872|  77.0k|                {
  873|  77.0k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 32.7k, False: 44.3k]
  |  Branch (873:25): [True: 13.1k, False: 63.8k]
  |  Branch (873:41): [True: 28.3k, False: 4.43k]
  |  Branch (873:54): [True: 17.9k, False: 10.3k]
  |  Branch (873:70): [True: 13.1k, False: 4.81k]
  ------------------
  874|  13.1k|                    {
  875|  13.1k|                        return OpCode::MOVI2FP;
  876|  13.1k|                    }
  877|  63.8k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 32.9k, False: 30.9k]
  |  Branch (877:25): [True: 15.7k, False: 48.1k]
  |  Branch (877:41): [True: 24.9k, False: 7.94k]
  |  Branch (877:57): [True: 18.3k, False: 6.59k]
  |  Branch (877:70): [True: 15.7k, False: 2.61k]
  ------------------
  878|  15.7k|                    {
  879|  15.7k|                        return OpCode::MOVFP2I;
  880|  15.7k|                    }
  881|  63.8k|                }
  882|   105k|                break;
  883|   134k|            }
  884|       |
  885|   114k|            default: {
  ------------------
  |  Branch (885:13): [True: 114k, False: 4.71M]
  ------------------
  886|   114k|                break;
  887|   134k|            }
  888|  4.82M|        }
  889|       |
  890|       |        // None found
  891|  3.16M|        return OpCode::NONE;
  892|  4.82M|    }
_ZN3dlx3iceEcc:
   17|  6.62M|    {
   18|  6.62M|        constexpr const char diff = 'a' - 'A';
   19|  6.62M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 2.20M, False: 4.42M]
  |  Branch (19:28): [True: 1.83M, False: 2.59M]
  ------------------
   20|  6.62M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  5.19M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|  58.0k|    {
  195|  58.0k|        ParseError err;
  196|       |
  197|  58.0k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|  58.0k|        err.m_LineNumber                           = line_number;
  199|  58.0k|        err.m_Column                               = column;
  200|  58.0k|        err.unexpected_argument_type.expected_type = expected_type;
  201|  58.0k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|  58.0k|        return err;
  204|  58.0k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|  58.0k|    {
  209|  58.0k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|  58.0k|                                                         token.GetColumn().unsafe(), expected_type,
  211|  58.0k|                                                         actual_type);
  212|  58.0k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|  3.91k|    {
  218|  3.91k|        ParseError err;
  219|       |
  220|  3.91k|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|  3.91k|        err.m_LineNumber        = line_number;
  222|  3.91k|        err.m_Column            = column;
  223|  3.91k|        err.invalid_number.text = text;
  224|       |
  225|  3.91k|        return err;
  226|  3.91k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|  3.91k|    {
  230|  3.91k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|  3.91k|                                                token.GetColumn().unsafe(), token.GetText());
  232|  3.91k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|     69|    {
  237|     69|        ParseError err;
  238|       |
  239|     69|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|     69|        err.m_LineNumber = line_number;
  241|     69|        err.m_Column     = column;
  242|       |
  243|     69|        return err;
  244|     69|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|     69|    {
  249|     69|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|     69|                                                                     token.GetColumn().unsafe());
  251|     69|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  2.46M|    {
  257|  2.46M|        ParseError err;
  258|       |
  259|  2.46M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  2.46M|        err.m_LineNumber                   = line_number;
  261|  2.46M|        err.m_Column                       = column;
  262|  2.46M|        err.unexpected_token.expected_type = expected_type;
  263|  2.46M|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  2.46M|        return err;
  266|  2.46M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  2.46M|    {
  271|  2.46M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  2.46M|                                                  token.GetColumn().unsafe(), expected_type,
  273|  2.46M|                                                  token.GetType());
  274|  2.46M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|   451k|    {
  279|   451k|        ParseError err;
  280|       |
  281|   451k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|   451k|        err.m_LineNumber                   = line_number;
  283|   451k|        err.m_Column                       = column;
  284|   451k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|   451k|        return err;
  287|   451k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|  4.33k|    {
  291|  4.33k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|  4.33k|                                                    token.GetColumn().unsafe(), token.GetText());
  293|  4.33k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|   944k|    {
  298|   944k|        ParseError err;
  299|       |
  300|   944k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|   944k|        err.m_LineNumber                       = line_number;
  302|   944k|        err.m_Column                           = column;
  303|   944k|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|   944k|        return err;
  306|   944k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|   944k|    {
  311|   944k|        return ConstructInvalidLabelIdentifierParseError(
  312|   944k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|   944k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|   196k|    {
  319|   196k|        ParseError err;
  320|       |
  321|   196k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|   196k|        err.m_LineNumber                     = line_number;
  323|   196k|        err.m_Column                         = column;
  324|   196k|        err.label_already_defined.label_name = label_name;
  325|   196k|        err.label_already_defined.at_line    = at_line;
  326|   196k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|   196k|        return err;
  329|   196k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|   196k|    {
  334|   196k|        return ConstructLabelAlreadyDefinedParseError(
  335|   196k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|   196k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|   196k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|   741k|    {
  342|   741k|        ParseError err;
  343|       |
  344|   741k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|   741k|        err.m_LineNumber = line_number;
  346|   741k|        err.m_Column     = column;
  347|       |
  348|   741k|        return err;
  349|   741k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|   741k|    {
  354|   741k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|   741k|                                                        token.GetColumn().unsafe());
  356|   741k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|   125k|    {
  362|   125k|        ParseError err;
  363|       |
  364|   125k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|   125k|        err.m_LineNumber               = line_number;
  366|   125k|        err.m_Column                   = column;
  367|   125k|        err.too_few_arguments.required = required;
  368|   125k|        err.too_few_arguments.provided = provided;
  369|       |
  370|   125k|        return err;
  371|   125k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|   125k|    {
  376|   125k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|   125k|                                                  token.GetColumn().unsafe(), required, provided);
  378|   125k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|   170k|    {
  383|   170k|        ParseError err;
  384|       |
  385|   170k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|   170k|        err.m_LineNumber           = line_number;
  387|   170k|        err.m_Column               = column;
  388|   170k|        err.empty_label.label_name = label_name;
  389|       |
  390|   170k|        return err;
  391|   170k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|   170k|    {
  395|   170k|        return ConstructEmptyLabelParseError(
  396|   170k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|   170k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 147k, False: 22.9k]
  ------------------
  398|   147k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|   170k|                        token.GetText());
  400|   170k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|  32.4k|    {
  405|  32.4k|        ParseError err;
  406|       |
  407|  32.4k|        err.m_Type       = ParseError::Type::TooManyComma;
  408|  32.4k|        err.m_LineNumber = line_number;
  409|  32.4k|        err.m_Column     = column;
  410|       |
  411|  32.4k|        return err;
  412|  32.4k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|  32.4k|    {
  416|  32.4k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|  32.4k|                                               token.GetColumn().unsafe());
  418|  32.4k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  5.19M|    {
   19|  5.19M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  5.19M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  28.5k|    {
  181|  28.5k|        ParsedProgram program;
  182|       |
  183|  28.5k|        program.m_Tokens = tokens;
  184|       |
  185|  28.5k|        phi::boolean line_has_instruction{false};
  186|  28.5k|        phi::usize   label_count{0u};
  187|       |
  188|  6.06M|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 6.03M, False: 28.5k]
  ------------------
  189|  6.03M|        {
  190|  6.03M|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|  6.03M|            switch (current_token.GetType())
  195|  6.03M|            {
  196|       |                // Ignore comments
  197|  11.4k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 11.4k, False: 6.02M]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  11.4k|                    break;
  200|       |
  201|   762k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 762k, False: 5.27M]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|   762k|                    line_has_instruction = false;
  204|   762k|                    break;
  205|       |
  206|  2.13M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 2.13M, False: 3.90M]
  ------------------
  207|  2.13M|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 475k, False: 1.65M]
  ------------------
  208|   475k|                    {
  209|   475k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|   475k|                                current_token, Token::Type::NewLine));
  211|   475k|                        break;
  212|   475k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  1.65M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 569k, False: 1.08M]
  ------------------
  217|   569k|                    {
  218|   569k|                        program.AddParseError(
  219|   569k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|   569k|                        break;
  221|   569k|                    }
  222|       |
  223|  1.08M|                    phi::string_view label_name = current_token.GetText();
  224|  1.08M|                    label_name.remove_suffix(1u);
  225|       |
  226|  1.08M|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 447k, False: 640k]
  ------------------
  227|   447k|                    {
  228|   447k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|   447k|                                current_token.GetLineNumber().unsafe(),
  230|   447k|                                current_token.GetColumn().unsafe(), label_name));
  231|   447k|                        break;
  232|   447k|                    }
  233|       |
  234|   640k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 266k, False: 374k]
  ------------------
  235|   266k|                    {
  236|   266k|                        program.AddParseError(
  237|   266k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|   266k|                        break;
  239|   266k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|   374k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 196k, False: 178k]
  ------------------
  243|   196k|                    {
  244|       |                        // Find first defintions of label
  245|   196k|                        const Token* first_label_definition =
  246|   196k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   196k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|   196k|                                    {
  249|   196k|                                        phi::string_view token_label_name = t.GetText();
  250|   196k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   196k|                                        if (token_label_name == label_name)
  253|   196k|                                        {
  254|   196k|                                            return true;
  255|   196k|                                        }
  256|   196k|                                    }
  257|       |
  258|   196k|                                    return false;
  259|   196k|                                });
  260|       |
  261|   196k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|   196k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|   196k|                                current_token, *first_label_definition));
  265|   196k|                        break;
  266|   196k|                    }
  267|       |
  268|   178k|                    program.m_JumpData[label_name] =
  269|   178k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|   178k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|   178k|                    break;
  276|   374k|                }
  277|       |
  278|  1.23M|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 1.23M, False: 4.79M]
  ------------------
  279|  1.23M|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 741k, False: 498k]
  ------------------
  280|   741k|                    {
  281|   741k|                        program.AddParseError(
  282|   741k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|   741k|                        break;
  284|   741k|                    }
  285|       |
  286|   498k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|   498k|                    PHI_ASSERT(current_token.HasHint());
  290|   498k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|   498k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|   498k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|   498k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|   498k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|   498k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|   498k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|   498k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|   498k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  1.00M|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 915k, False: 92.6k]
  ------------------
  312|   915k|                    {
  313|       |                        // Get next token
  314|   915k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 1.76k, False: 913k]
  ------------------
  315|  1.76k|                        {
  316|  1.76k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|  1.76k|                                    current_token, number_of_argument_required.unsafe(),
  318|  1.76k|                                    argument_num.unsafe()));
  319|  1.76k|                            break;
  320|  1.76k|                        }
  321|       |
  322|   913k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|   913k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 357k, False: 556k]
  ------------------
  326|   357k|                        {
  327|   357k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 32.4k, False: 325k]
  ------------------
  328|  32.4k|                            {
  329|  32.4k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|  32.4k|                            }
  331|       |
  332|   357k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|   357k|                            continue;
  335|   357k|                        }
  336|       |
  337|   556k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 123k, False: 432k]
  ------------------
  338|   123k|                        {
  339|   123k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|   123k|                                    token, number_of_argument_required.unsafe(),
  341|   123k|                                    argument_num.unsafe()));
  342|   123k|                            break;
  343|   123k|                        }
  344|       |
  345|   432k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|   432k|                                parse_instruction_argument(
  347|   432k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|   432k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 280k, False: 151k]
  ------------------
  349|   280k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|   280k|                            break;
  352|   280k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|   151k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|   151k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|   151k|                        argument_num++;
  359|   151k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|   151k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|   498k|                    program.m_Instructions.emplace_back(instruction);
  367|   498k|                    line_has_instruction = true;
  368|   498k|                    break;
  369|  1.23M|                }
  370|       |
  371|  1.88M|                default:
  ------------------
  |  Branch (371:17): [True: 1.88M, False: 4.14M]
  ------------------
  372|  1.88M|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  1.88M|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 1.16M, False: 725k]
  ------------------
  374|  1.16M|                    {
  375|  1.16M|                        expected_token_type = Token::Type::NewLine;
  376|  1.16M|                    }
  377|       |
  378|  1.88M|                    program.AddParseError(
  379|  1.88M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  1.88M|                    break;
  381|  6.03M|            }
  382|  6.03M|        }
  383|       |
  384|       |        // Check for empty labels
  385|  28.5k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 6.98k, False: 21.5k]
  ------------------
  386|  6.98k|        {
  387|   223k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 216k, False: 6.98k]
  ------------------
  388|   216k|            {
  389|   216k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|   216k|                const Token& token = *it;
  392|   216k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 170k, False: 46.5k]
  ------------------
  393|   170k|                {
  394|   170k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|   170k|                    --label_count;
  396|   170k|                }
  397|   216k|            }
  398|  6.98k|        }
  399|       |
  400|  28.5k|        return program;
  401|  28.5k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  28.5k|    {
  405|  28.5k|        TokenStream tokens = Tokenize(source);
  406|  28.5k|        return Parse(tokens);
  407|  28.5k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|   432k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|   432k|        switch (token.GetType())
   37|   432k|        {
   38|  51.9k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 51.9k, False: 380k]
  ------------------
   39|  51.9k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 3.83k, False: 48.1k]
  ------------------
   40|  51.9k|                                          ArgumentType::AddressDisplacement))
   41|  3.83k|                {
   42|  3.83k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|  3.83k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|  3.83k|                    return {};
   46|  3.83k|                }
   47|       |
   48|       |                // Get address displacement
   49|  48.1k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  48.1k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  48.1k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 69, False: 48.0k]
  ------------------
   54|     69|                {
   55|     69|                    program.AddParseError(
   56|     69|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|     69|                    return {};
   58|     69|                }
   59|       |
   60|  48.0k|                auto         it           = tokens.current_position();
   61|  48.0k|                const Token& first_token  = tokens.consume();
   62|  48.0k|                const Token& second_token = tokens.consume();
   63|  48.0k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  48.0k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 21.8k, False: 26.2k]
  ------------------
   66|  21.8k|                {
   67|  21.8k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|  21.8k|                            first_token, Token::Type::OpenBracket));
   69|  21.8k|                    return {};
   70|  21.8k|                }
   71|       |
   72|       |                // Second token is the register
   73|  26.2k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 6.96k, False: 19.2k]
  ------------------
   74|  6.96k|                {
   75|  6.96k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|  6.96k|                            second_token, Token::Type::RegisterInt));
   77|  6.96k|                    return {};
   78|  6.96k|                }
   79|       |
   80|  19.2k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 4.46k, False: 14.7k]
  ------------------
   81|  4.46k|                {
   82|  4.46k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|  4.46k|                            third_token, Token::Type::ClosingBracket));
   84|  4.46k|                    return {};
   85|  4.46k|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|  14.7k|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|  14.7k|                return ConstructInstructionArgumentAddressDisplacement(
   94|  14.7k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|  19.2k|            }
   96|  50.2k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 50.2k, False: 382k]
  ------------------
   97|  50.2k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 6.61k, False: 43.5k]
  ------------------
   98|  6.61k|                {
   99|  6.61k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|  6.61k|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|  6.61k|                    return {};
  102|  6.61k|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  43.5k|                return ConstructInstructionArgumentRegisterInt(
  108|  43.5k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  50.2k|            }
  110|  39.6k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 39.6k, False: 393k]
  ------------------
  111|  39.6k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 11.9k, False: 27.6k]
  ------------------
  112|  11.9k|                {
  113|  11.9k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|  11.9k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|  11.9k|                    return {};
  116|  11.9k|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  27.6k|                return ConstructInstructionArgumentRegisterFloat(
  122|  27.6k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  39.6k|            }
  124|  4.33k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 4.33k, False: 428k]
  ------------------
  125|  4.33k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|  4.33k|                return {};
  128|  39.6k|            }
  129|   195k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 195k, False: 237k]
  ------------------
  130|       |                // Parse as Label
  131|   195k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 32.6k, False: 162k]
  ------------------
  132|  32.6k|                {
  133|  32.6k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  32.6k|                            token, expected_argument_type, ArgumentType::Label));
  135|  32.6k|                    return {};
  136|  32.6k|                }
  137|       |
  138|   162k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 162k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|   162k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 108k, False: 54.1k]
  ------------------
  145|   108k|                {
  146|   108k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|   108k|                    return {};
  148|   108k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  54.1k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|   162k|            }
  154|  18.4k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 18.4k, False: 414k]
  ------------------
  155|  18.4k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 2.96k, False: 15.4k]
  ------------------
  156|  2.96k|                {
  157|  2.96k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|  2.96k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|  2.96k|                    return {};
  160|  2.96k|                }
  161|       |
  162|  15.4k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 11.5k, False: 3.91k]
  ------------------
  163|  11.5k|                {
  164|  11.5k|                    return ConstructInstructionArgumentImmediateValue(
  165|  11.5k|                            static_cast<std::int16_t>(token.GetHint()));
  166|  11.5k|                }
  167|       |
  168|  3.91k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|  3.91k|                return {};
  170|  15.4k|            }
  171|       |
  172|  72.7k|            default:
  ------------------
  |  Branch (172:13): [True: 72.7k, False: 359k]
  ------------------
  173|  72.7k|                program.AddParseError(
  174|  72.7k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  72.7k|                return {};
  176|   432k|        }
  177|   432k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  3.28M|                                tokens.find_first_token_if([&](const Token& t) {
  247|  3.28M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 2.59M, False: 696k]
  ------------------
  248|  2.59M|                                    {
  249|  2.59M|                                        phi::string_view token_label_name = t.GetText();
  250|  2.59M|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  2.59M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 196k, False: 2.39M]
  ------------------
  253|   196k|                                        {
  254|   196k|                                            return true;
  255|   196k|                                        }
  256|  2.59M|                                    }
  257|       |
  258|  3.09M|                                    return false;
  259|  3.28M|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   70|  5.54M|    {
   71|  5.54M|        PHI_ASSERT(id != IntRegisterID::None);
   72|  5.54M|        phi::size_t id_value = phi::to_underlying(id);
   73|       |
   74|  5.54M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   75|       |
   76|  5.54M|        return m_IntRegisters[id_value];
   77|  5.54M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   81|  12.0M|    {
   82|  12.0M|        PHI_ASSERT(id != IntRegisterID::None);
   83|  12.0M|        phi::size_t id_value = phi::to_underlying(id);
   84|       |
   85|  12.0M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   86|       |
   87|  12.0M|        return m_IntRegisters[id_value];
   88|  12.0M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   91|  8.20M|    {
   92|  8.20M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   93|  8.20M|                                             RegisterAccessType::Signed),
   94|  8.20M|                   "Mismatch for instruction access type");
   95|       |
   96|  8.20M|        const phi::size_t id_value = phi::to_underlying(id);
   97|       |
   98|  8.20M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   99|  8.20M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  100|  8.20M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (100:13): [True: 5.00M, False: 3.20M]
  ------------------
  101|  8.20M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (101:13): [True: 328k, False: 4.67M]
  ------------------
  102|   328k|        {
  103|   328k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   328k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  104|   328k|        }
  105|       |
  106|  8.20M|        return GetIntRegister(id).GetSignedValue();
  107|  8.20M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  110|  3.88M|    {
  111|  3.88M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  112|  3.88M|                                             RegisterAccessType::Unsigned),
  113|  3.88M|                   "Mismatch for instruction access type");
  114|       |
  115|  3.88M|        const phi::size_t id_value = phi::to_underlying(id);
  116|       |
  117|  3.88M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  118|  3.88M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  119|  3.88M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (119:13): [True: 3.07M, False: 811k]
  ------------------
  120|  3.88M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (120:13): [True: 2.68M, False: 388k]
  ------------------
  121|  2.68M|        {
  122|  2.68M|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  2.68M|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  123|  2.68M|        }
  124|       |
  125|  3.88M|        return GetIntRegister(id).GetUnsignedValue();
  126|  3.88M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  129|  4.52M|    {
  130|  4.52M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  131|  4.52M|                                             RegisterAccessType::Signed),
  132|  4.52M|                   "Mismatch for instruction access type");
  133|       |
  134|  4.52M|        IntRegister& reg = GetIntRegister(id);
  135|       |
  136|  4.52M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (136:13): [True: 767k, False: 3.76M]
  ------------------
  137|   767k|        {
  138|   767k|            return;
  139|   767k|        }
  140|       |
  141|  3.76M|        reg.SetSignedValue(value);
  142|       |
  143|  3.76M|        const phi::size_t id_value = phi::to_underlying(id);
  144|       |
  145|  3.76M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  146|  3.76M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  147|  3.76M|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  150|  1.01M|    {
  151|  1.01M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  152|  1.01M|                                             RegisterAccessType::Unsigned),
  153|  1.01M|                   "Mismatch for instruction access type");
  154|       |
  155|  1.01M|        IntRegister& reg = GetIntRegister(id);
  156|       |
  157|  1.01M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (157:13): [True: 550k, False: 465k]
  ------------------
  158|   550k|        {
  159|   550k|            return;
  160|   550k|        }
  161|       |
  162|   465k|        reg.SetUnsignedValue(value);
  163|       |
  164|   465k|        const phi::size_t id_value = phi::to_underlying(id);
  165|       |
  166|   465k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  167|   465k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  168|   465k|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  171|  1.70M|    {
  172|  1.70M|        PHI_ASSERT(id != FloatRegisterID::None);
  173|  1.70M|        const phi::size_t id_value = phi::to_underlying(id);
  174|       |
  175|  1.70M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  176|       |
  177|  1.70M|        return m_FloatRegisters[id_value];
  178|  1.70M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  182|  1.34M|    {
  183|  1.34M|        PHI_ASSERT(id != FloatRegisterID::None);
  184|  1.34M|        const phi::size_t id_value = phi::to_underlying(id);
  185|       |
  186|  1.34M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  187|       |
  188|  1.34M|        return m_FloatRegisters[id_value];
  189|  1.34M|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  192|  1.34M|    {
  193|  1.34M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  194|  1.34M|                                             RegisterAccessType::Float),
  195|  1.34M|                   "Mismatch for instruction access type");
  196|       |
  197|  1.34M|        const phi::size_t id_value = phi::to_underlying(id);
  198|       |
  199|  1.34M|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  200|  1.34M|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  201|  1.34M|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (201:13): [True: 924k, False: 423k]
  ------------------
  202|  1.34M|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (202:13): [True: 616k, False: 308k]
  ------------------
  203|   616k|        {
  204|       |            /*
  205|       |            DLX_WARN("Mismatch for register value type");
  206|       |            */
  207|   616k|        }
  208|       |
  209|  1.34M|        const FloatRegister& reg = GetFloatRegister(id);
  210|       |
  211|  1.34M|        return reg.GetValue();
  212|  1.34M|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  215|   567k|    {
  216|   567k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  217|   567k|                                             RegisterAccessType::Double),
  218|   567k|                   "Mismatch for instruction access type");
  219|       |
  220|   567k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (220:13): [True: 22, False: 567k]
  ------------------
  221|     22|        {
  222|     22|            Raise(Exception::MisalignedRegisterAccess);
  223|     22|            return {0.0};
  224|     22|        }
  225|       |
  226|   567k|        const phi::size_t id_value = phi::to_underlying(id);
  227|       |
  228|   567k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  229|   567k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  230|   567k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (230:13): [True: 414k, False: 153k]
  ------------------
  231|   567k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (231:13): [True: 233k, False: 181k]
  ------------------
  232|   233k|        {
  233|   233k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   233k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  234|   233k|        }
  235|       |
  236|   567k|        const FloatRegisterValueType register_value_type_high =
  237|   567k|                m_FloatRegistersValueTypes[id_value + 1u];
  238|   567k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (238:13): [True: 414k, False: 153k]
  ------------------
  239|   567k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (239:13): [True: 46.3k, False: 367k]
  ------------------
  240|  46.3k|        {
  241|  46.3k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  46.3k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  242|  46.3k|        }
  243|       |
  244|   567k|        const FloatRegister& first_reg = GetFloatRegister(id);
  245|   567k|        const FloatRegister& second_reg =
  246|   567k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  247|       |
  248|   567k|        const float first_value  = first_reg.GetValue().unsafe();
  249|   567k|        const float second_value = second_reg.GetValue().unsafe();
  250|       |
  251|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  252|   567k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  253|       |
  254|   567k|        const std::uint32_t first_value_bits =
  255|   567k|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  256|   567k|        const std::uint32_t second_value_bits =
  257|   567k|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  258|       |
  259|   567k|        std::uint64_t final_value_bits =
  260|   567k|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  261|       |
  262|   567k|        return *reinterpret_cast<double*>(&final_value_bits);
  263|       |
  264|   567k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  265|   567k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  268|   219k|    {
  269|   219k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  270|   219k|                                             RegisterAccessType::Float),
  271|   219k|                   "Mismatch for instruction access type");
  272|       |
  273|   219k|        FloatRegister& reg = GetFloatRegister(id);
  274|       |
  275|   219k|        reg.SetValue(value);
  276|       |
  277|   219k|        const phi::size_t id_value = phi::to_underlying(id);
  278|       |
  279|   219k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  280|   219k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  281|   219k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  284|   177k|    {
  285|   177k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  286|   177k|                                             RegisterAccessType::Double),
  287|   177k|                   "Mismatch for instruction access type");
  288|       |
  289|   177k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (289:13): [True: 7, False: 177k]
  ------------------
  290|      7|        {
  291|      7|            Raise(Exception::MisalignedRegisterAccess);
  292|      7|            return;
  293|      7|        }
  294|       |
  295|   177k|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  296|   177k|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  297|       |
  298|   177k|        double              value_raw  = value.unsafe();
  299|   177k|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  300|       |
  301|   177k|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  302|   177k|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  303|       |
  304|   177k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  305|   177k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  306|       |
  307|   177k|        FloatRegister& first_reg = GetFloatRegister(id);
  308|   177k|        FloatRegister& second_reg =
  309|   177k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  310|       |
  311|   177k|        first_reg.SetValue(first_value);
  312|   177k|        second_reg.SetValue(second_value);
  313|       |
  314|   177k|        const phi::size_t id_value = phi::to_underlying(id);
  315|       |
  316|   177k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  317|   177k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  318|   177k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  319|   177k|    }
_ZN3dlx9Processor7GetFPSREv:
  322|   687k|    {
  323|   687k|        return m_FPSR;
  324|   687k|    }
_ZNK3dlx9Processor7GetFPSREv:
  327|   291k|    {
  328|   291k|        return m_FPSR;
  329|   291k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  332|   291k|    {
  333|   291k|        const StatusRegister& status_reg = GetFPSR();
  334|       |
  335|   291k|        return status_reg.Get();
  336|   291k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  339|   687k|    {
  340|   687k|        StatusRegister& status_reg = GetFPSR();
  341|       |
  342|   687k|        status_reg.SetStatus(value);
  343|   687k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  346|  13.2M|    {
  347|  13.2M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  348|       |
  349|  13.2M|        inst.Execute(*this);
  350|  13.2M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|  28.5k|    {
  354|  28.5k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 26.1k, False: 2.36k]
  ------------------
  355|  26.1k|        {
  356|  26.1k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  26.1k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|  26.1k|            return false;
  358|  26.1k|        }
  359|       |
  360|  2.36k|        m_CurrentProgram = &program;
  361|       |
  362|  2.36k|        m_ProgramCounter               = 0u;
  363|  2.36k|        m_Halted                       = false;
  364|  2.36k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|  2.36k|        m_LastRaisedException          = Exception::None;
  366|  2.36k|        m_CurrentStepCount             = 0u;
  367|       |
  368|  2.36k|        return true;
  369|  28.5k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  373|  3.26M|    {
  374|  3.26M|        return m_CurrentProgram;
  375|  3.26M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  378|  13.2M|    {
  379|       |        // No nothing when no program is loaded
  380|  13.2M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (380:13): [True: 0, False: 13.2M]
  ------------------
  381|      0|        {
  382|      0|            return;
  383|      0|        }
  384|       |
  385|       |        // Halt if there are no instruction to execute
  386|  13.2M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (386:13): [True: 117, False: 13.2M]
  ------------------
  387|    117|        {
  388|    117|            m_Halted                       = true;
  389|    117|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  390|    117|        }
  391|       |
  392|       |        // Do nothing when processor is halted
  393|  13.2M|        if (m_Halted)
  ------------------
  |  Branch (393:13): [True: 117, False: 13.2M]
  ------------------
  394|    117|        {
  395|    117|            return;
  396|    117|        }
  397|       |
  398|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  399|  13.2M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  400|       |
  401|       |        // Get current instruction pointed to by the program counter
  402|  13.2M|        const auto& current_instruction =
  403|  13.2M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  404|       |
  405|       |        // Execute current instruction
  406|  13.2M|        ExecuteInstruction(current_instruction);
  407|       |
  408|       |        // Stop executing if the last instruction halted the processor
  409|  13.2M|        if (m_Halted)
  ------------------
  |  Branch (409:13): [True: 326, False: 13.2M]
  ------------------
  410|    326|        {
  411|    326|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  412|    326|            return;
  413|    326|        }
  414|       |
  415|  13.2M|        m_ProgramCounter = m_NextProgramCounter;
  416|       |
  417|  13.2M|        ++m_CurrentStepCount;
  418|       |
  419|  13.2M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (419:13): [True: 1.92k, False: 13.2M]
  |  Branch (419:14): [True: 13.2M, False: 0]
  |  Branch (419:42): [True: 1.32k, False: 13.2M]
  ------------------
  420|  13.2M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (420:13): [True: 593, False: 13.2M]
  ------------------
  421|  1.92k|        {
  422|  1.92k|            m_Halted                       = true;
  423|  1.92k|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  424|  1.92k|        }
  425|  13.2M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  428|  2.36k|    {
  429|       |        // Do nothing when no program is loaded
  430|  2.36k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (430:13): [True: 0, False: 2.36k]
  ------------------
  431|      0|        {
  432|      0|            return;
  433|      0|        }
  434|       |
  435|  2.36k|        m_ProgramCounter               = 0u;
  436|  2.36k|        m_Halted                       = false;
  437|  2.36k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  438|  2.36k|        m_LastRaisedException          = Exception::None;
  439|  2.36k|        m_CurrentStepCount             = 0u;
  440|       |
  441|  13.2M|        while (!m_Halted)
  ------------------
  |  Branch (441:16): [True: 13.2M, False: 2.36k]
  ------------------
  442|  13.2M|        {
  443|  13.2M|            ExecuteStep();
  444|  13.2M|        }
  445|       |
  446|  2.36k|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  447|  2.36k|                   "RegisterAccessType was not reset correctly");
  448|  2.36k|    }
_ZN3dlx9Processor14ClearRegistersEv:
  464|  28.5k|    {
  465|  28.5k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (465:24): [True: 914k, False: 28.5k]
  ------------------
  466|   914k|        {
  467|   914k|            reg.SetSignedValue(0);
  468|   914k|        }
  469|       |
  470|  28.5k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (470:24): [True: 914k, False: 28.5k]
  ------------------
  471|   914k|        {
  472|   914k|            reg.SetValue(0.0f);
  473|   914k|        }
  474|       |
  475|  28.5k|        m_FPSR.SetStatus(false);
  476|  28.5k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  479|  28.5k|    {
  480|  28.5k|        m_MemoryBlock.Clear();
  481|  28.5k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  488|   902k|    {
  489|   902k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  490|       |
  491|   902k|        m_LastRaisedException = exception;
  492|       |
  493|   902k|        switch (exception)
  494|   902k|        {
  495|     13|            case Exception::DivideByZero:
  ------------------
  |  Branch (495:13): [True: 13, False: 902k]
  ------------------
  496|     13|                m_Halted = true;
  497|     13|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|     13|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  498|     13|                return;
  499|   327k|            case Exception::Overflow:
  ------------------
  |  Branch (499:13): [True: 327k, False: 575k]
  ------------------
  500|   327k|                DLX_WARN("Overflow");
  ------------------
  |  |    8|   327k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  501|   327k|                return;
  502|   200k|            case Exception::Underflow:
  ------------------
  |  Branch (502:13): [True: 200k, False: 702k]
  ------------------
  503|   200k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|   200k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  504|   200k|                return;
  505|      1|            case Exception::Trap:
  ------------------
  |  Branch (505:13): [True: 1, False: 902k]
  ------------------
  506|      1|                m_Halted = true;
  507|      1|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  508|      1|                return;
  509|      2|            case Exception::Halt:
  ------------------
  |  Branch (509:13): [True: 2, False: 902k]
  ------------------
  510|      2|                m_Halted = true;
  511|      2|                return;
  512|    134|            case Exception::UnknownLabel:
  ------------------
  |  Branch (512:13): [True: 134, False: 902k]
  ------------------
  513|    134|                m_Halted = true;
  514|    134|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|    134|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  515|    134|                return;
  516|   375k|            case Exception::BadShift:
  ------------------
  |  Branch (516:13): [True: 375k, False: 527k]
  ------------------
  517|   375k|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|   375k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  518|   375k|                return;
  519|    153|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (519:13): [True: 153, False: 902k]
  ------------------
  520|    153|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|    153|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  521|    153|                m_Halted = true;
  522|    153|                return;
  523|     29|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (523:13): [True: 29, False: 902k]
  ------------------
  524|     29|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     29|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  525|     29|                m_Halted = true;
  526|     29|                return;
  527|       |
  528|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  529|      0|            default:
  ------------------
  |  Branch (529:13): [True: 0, False: 902k]
  ------------------
  530|      0|                PHI_ASSERT_NOT_REACHED();
  531|   902k|#endif
  532|   902k|        }
  533|       |
  534|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  535|      0|        PHI_ASSERT_NOT_REACHED();
  536|      0|#endif
  537|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  558|   502k|    {
  559|   502k|        return m_MemoryBlock;
  560|   502k|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  573|  83.3k|    {
  574|  83.3k|        return m_NextProgramCounter;
  575|  83.3k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  578|  3.26M|    {
  579|  3.26M|        m_NextProgramCounter = new_npc;
  580|  3.26M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   36|  19.9M|    {
   37|  19.9M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   38|  19.9M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   39|       |
   40|  19.9M|        switch (expected_access)
   41|  19.9M|        {
   42|  3.22M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (42:13): [True: 3.22M, False: 16.7M]
  ------------------
   43|  3.22M|                return true;
   44|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (44:13): [True: 0, False: 19.9M]
  ------------------
   45|      0|                return false;
   46|   170k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (46:13): [True: 170k, False: 19.7M]
  ------------------
   47|   170k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (47:24): [True: 85.0k, False: 85.0k]
  |  Branch (47:63): [True: 85.0k, False: 0]
  ------------------
   48|   224k|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (48:13): [True: 224k, False: 19.7M]
  ------------------
   49|   224k|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (49:24): [True: 10, False: 224k]
  ------------------
   50|   224k|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (50:24): [True: 224k, False: 0]
  ------------------
   51|  34.9k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (51:13): [True: 34.9k, False: 19.9M]
  ------------------
   52|  34.9k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (52:24): [True: 34.9k, False: 1]
  |  Branch (52:63): [True: 1, False: 0]
  ------------------
   53|  61.0k|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (53:13): [True: 61.0k, False: 19.8M]
  ------------------
   54|  61.0k|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (54:24): [True: 61.0k, False: 3]
  |  Branch (54:64): [True: 3, False: 0]
  ------------------
   55|  16.2M|            default:
  ------------------
  |  Branch (55:13): [True: 16.2M, False: 3.71M]
  ------------------
   56|  16.2M|                return expected_access == access;
   57|  19.9M|        }
   58|  19.9M|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|  5.00M|    {
   13|  5.00M|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 918k, False: 4.08M]
  ------------------
   14|   918k|        {
   15|   918k|            const char first_char = token[0u];
   16|   918k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 26.2k, False: 892k]
  |  Branch (16:38): [True: 87.5k, False: 804k]
  ------------------
   17|   113k|            {
   18|   113k|                const char second_char = token[1u];
   19|   113k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 111k, False: 2.52k]
  |  Branch (19:43): [True: 87.5k, False: 23.6k]
  ------------------
   20|  87.5k|                {
   21|  87.5k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  87.5k|                }
   23|   113k|            }
   24|   918k|        }
   25|  4.08M|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 1.16M, False: 2.92M]
  ------------------
   26|  1.16M|        {
   27|  1.16M|            const char first_char = token[0u];
   28|  1.16M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 7.72k, False: 1.15M]
  |  Branch (28:38): [True: 61.1k, False: 1.09M]
  ------------------
   29|  68.8k|            {
   30|  68.8k|                const char second_char = token[1u];
   31|  68.8k|                const char third_char  = token[2u];
   32|       |
   33|  68.8k|                switch (second_char)
   34|  68.8k|                {
   35|  17.7k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 17.7k, False: 51.1k]
  ------------------
   36|  17.7k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 14.7k, False: 3.01k]
  |  Branch (36:50): [True: 5.19k, False: 9.50k]
  ------------------
   37|  5.19k|                        {
   38|  5.19k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|  5.19k|                        }
   40|  12.5k|                        break;
   41|  17.7k|                    }
   42|  24.1k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 24.1k, False: 44.7k]
  ------------------
   43|  24.1k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 16.2k, False: 7.92k]
  |  Branch (43:50): [True: 1.35k, False: 14.8k]
  ------------------
   44|  1.35k|                        {
   45|  1.35k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|  1.35k|                        }
   47|  22.8k|                        break;
   48|  24.1k|                    }
   49|  22.8k|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 7.17k, False: 61.7k]
  ------------------
   50|  7.17k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 2.02k, False: 5.15k]
  |  Branch (50:50): [True: 2.54k, False: 2.61k]
  ------------------
   51|  4.56k|                        {
   52|  4.56k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|  4.56k|                        }
   54|  2.61k|                        break;
   55|  7.17k|                    }
   56|  19.8k|                    default: {
  ------------------
  |  Branch (56:21): [True: 19.8k, False: 49.0k]
  ------------------
   57|  19.8k|                        break;
   58|  7.17k|                    }
   59|  68.8k|                }
   60|  68.8k|            }
   61|  1.16M|        }
   62|       |
   63|  4.90M|        return IntRegisterID::None;
   64|  5.00M|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|  4.90M|    {
   68|  4.90M|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 830k, False: 4.07M]
  ------------------
   69|   830k|        {
   70|   830k|            const char first_char = token[0u];
   71|   830k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 31.9k, False: 799k]
  |  Branch (71:38): [True: 57.6k, False: 741k]
  ------------------
   72|  89.5k|            {
   73|  89.5k|                const char second_char = token[1u];
   74|  89.5k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 73.2k, False: 16.2k]
  |  Branch (74:43): [True: 54.4k, False: 18.8k]
  ------------------
   75|  54.4k|                {
   76|  54.4k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  54.4k|                }
   78|  89.5k|            }
   79|   830k|        }
   80|  4.07M|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 1.14M, False: 2.92M]
  ------------------
   81|  1.14M|        {
   82|  1.14M|            const char first_char = token[0u];
   83|  1.14M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 42.6k, False: 1.10M]
  |  Branch (83:38): [True: 24.1k, False: 1.08M]
  ------------------
   84|  66.7k|            {
   85|  66.7k|                const char second_char = token[1u];
   86|  66.7k|                const char third_char  = token[2u];
   87|       |
   88|  66.7k|                switch (second_char)
   89|  66.7k|                {
   90|  15.5k|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 15.5k, False: 51.1k]
  ------------------
   91|  15.5k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 13.3k, False: 2.17k]
  |  Branch (91:50): [True: 8.37k, False: 5.00k]
  ------------------
   92|  8.37k|                        {
   93|  8.37k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|  8.37k|                        }
   95|  7.17k|                        break;
   96|  15.5k|                    }
   97|  8.36k|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 8.36k, False: 58.3k]
  ------------------
   98|  8.36k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 7.68k, False: 680]
  |  Branch (98:50): [True: 2.03k, False: 5.64k]
  ------------------
   99|  2.03k|                        {
  100|  2.03k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|  2.03k|                        }
  102|  6.32k|                        break;
  103|  8.36k|                    }
  104|  16.2k|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 16.2k, False: 50.4k]
  ------------------
  105|  16.2k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 6.73k, False: 9.49k]
  |  Branch (105:50): [True: 5.70k, False: 3.78k]
  ------------------
  106|  12.4k|                        {
  107|  12.4k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|  12.4k|                        }
  109|  3.78k|                        break;
  110|  16.2k|                    }
  111|  26.5k|                    default: {
  ------------------
  |  Branch (111:21): [True: 26.5k, False: 40.1k]
  ------------------
  112|  26.5k|                        break;
  113|  16.2k|                    }
  114|  66.7k|                }
  115|  66.7k|            }
  116|  1.14M|        }
  117|       |
  118|  4.82M|        return FloatRegisterID::None;
  119|  4.90M|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|  4.58M|    {
  123|  4.58M|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 1.00M, False: 3.57M]
  ------------------
  124|  1.00M|        {
  125|  1.00M|            const char c1 = token[0u];
  126|  1.00M|            const char c2 = token[1u];
  127|  1.00M|            const char c3 = token[2u];
  128|  1.00M|            const char c4 = token[3u];
  129|       |
  130|  1.00M|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 25.8k, False: 981k]
  |  Branch (130:34): [True: 32.1k, False: 949k]
  |  Branch (130:49): [True: 6.26k, False: 51.6k]
  |  Branch (130:62): [True: 27.5k, False: 24.1k]
  ------------------
  131|  1.00M|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 25.0k, False: 8.75k]
  |  Branch (131:34): [True: 3.63k, False: 5.11k]
  |  Branch (131:49): [True: 11.5k, False: 17.1k]
  |  Branch (131:62): [True: 16.7k, False: 443]
  ------------------
  132|  1.00M|        }
  133|       |
  134|  3.57M|        return false;
  135|  4.58M|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|  5.58M|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  1.51M|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  14.0M|    {
   41|  14.0M|        return m_Type;
   42|  14.0M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  5.88M|    {
   51|  5.88M|        return m_LineNumber;
   52|  5.88M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  5.38M|    {
   56|  5.38M|        return m_Column;
   57|  5.38M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  7.35M|    {
   66|  7.35M|        return m_Text;
   67|  7.35M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   562k|    {
   80|   562k|        return m_HasHint;
   81|   562k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   644k|    {
   85|   644k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   644k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   644k|                   m_Type == Type::ImmediateInteger);
   88|   644k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   644k|        return m_Hint;
   91|   644k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  28.5k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  28.5k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  28.5k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  48.1k|    {
   51|  48.1k|        auto it = m_Iterator;
   52|   192k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 144k, False: 48.0k]
  ------------------
   53|   144k|        {
   54|   144k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 69, False: 144k]
  ------------------
   55|     69|            {
   56|     69|                return false;
   57|     69|            }
   58|   144k|        }
   59|       |
   60|  48.0k|        return true;
   61|  48.1k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  6.97M|    {
   65|  6.97M|        return m_Iterator != m_Tokens.end();
   66|  6.97M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  7.09M|    {
   70|  7.09M|        return m_Iterator == m_Tokens.end();
   71|  7.09M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  7.09M|    {
   85|  7.09M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  7.09M|        return *m_Iterator++;
   91|  7.09M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  48.0k|    {
  164|  48.0k|        return m_Iterator;
  165|  48.0k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  14.7k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  14.7k|        m_Iterator = it;
  179|  14.7k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  6.98k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  6.98k|        return m_Tokens.rbegin();
  224|  6.98k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|   216k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|   216k|        return m_Tokens.rend();
  233|   216k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  28.5k|    {
   66|  28.5k|        TokenStream tokens;
   67|       |
   68|  28.5k|        phi::string_view current_token;
   69|       |
   70|  28.5k|        phi::u64 current_line_number{1u};
   71|  28.5k|        phi::u64 current_column{1u};
   72|  28.5k|        phi::u64 token_begin{0u};
   73|       |
   74|  28.5k|        phi::boolean parsing_comment{false};
   75|       |
   76|  16.8M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 16.8M, False: 28.5k]
  ------------------
   77|  16.8M|        {
   78|  16.8M|            const char c{source.at(i)};
   79|       |
   80|  16.8M|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 888k, False: 15.9M]
  ------------------
   81|   888k|            {
   82|   888k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 158k, False: 729k]
  ------------------
   83|   158k|                {
   84|       |                    // Skip empty lines
   85|   158k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|   158k|                                        current_line_number, current_column);
   87|       |
   88|   158k|                    parsing_comment = false;
   89|   158k|                    current_line_number += 1u;
   90|   158k|                    current_column = 1u;
   91|   158k|                    continue;
   92|   158k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|   729k|                tokens.emplace_back(ParseToken(
   96|   729k|                        source.substring_view(
   97|   729k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|   729k|                                current_token.length()),
   99|   729k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|   729k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|   729k|                                    current_line_number, current_column);
  103|       |
  104|   729k|                current_token   = phi::string_view{};
  105|   729k|                parsing_comment = false;
  106|   729k|                current_line_number += 1u;
  107|   729k|                current_column = 0u;
  108|   729k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|  15.9M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 9.66k, False: 15.9M]
  |  Branch (110:34): [True: 25.3k, False: 15.9M]
  ------------------
  111|  35.0k|            {
  112|  35.0k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 6.62k, False: 28.4k]
  ------------------
  113|  6.62k|                {
  114|  6.62k|                    token_begin = i;
  115|  6.62k|                }
  116|  28.4k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 26.2k, False: 2.21k]
  ------------------
  117|  26.2k|                {
  118|  26.2k|                    tokens.emplace_back(ParseToken(
  119|  26.2k|                            source.substring_view(
  120|  26.2k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  26.2k|                                    current_token.length()),
  122|  26.2k|                            current_line_number, current_column - current_token.length()));
  123|  26.2k|                    token_begin   = i;
  124|  26.2k|                    current_token = phi::string_view{};
  125|  26.2k|                }
  126|       |
  127|  35.0k|                parsing_comment = true;
  128|  35.0k|                current_token   = source.substring_view(
  129|  35.0k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  35.0k|                        current_token.length() + 1u);
  131|  35.0k|            }
  132|  15.9M|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 49.2k, False: 15.8M]
  ------------------
  133|  49.2k|            {
  134|       |                // simply append the character
  135|  49.2k|                current_token = source.substring_view(
  136|  49.2k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|  49.2k|                        current_token.length() + 1u);
  138|  49.2k|            }
  139|  15.8M|            else
  140|  15.8M|            {
  141|       |                // Not parsing a comment
  142|  15.8M|                switch (c)
  143|  15.8M|                {
  144|   162k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 162k, False: 15.7M]
  ------------------
  145|   263k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 100k, False: 15.7M]
  ------------------
  146|   386k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 122k, False: 15.7M]
  ------------------
  147|   386k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 78.5k, False: 307k]
  ------------------
  148|  78.5k|                        {
  149|  78.5k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|  78.5k|                            continue;
  152|  78.5k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|   307k|                        tokens.emplace_back(ParseToken(
  156|   307k|                                source.substring_view(
  157|   307k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|   307k|                                        current_token.length()),
  159|   307k|                                current_line_number, current_column - current_token.length()));
  160|   307k|                        current_token = phi::string_view{};
  161|   307k|                        break;
  162|  1.35M|                    case ':':
  ------------------
  |  Branch (162:21): [True: 1.35M, False: 14.5M]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  1.35M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 1.16M, False: 184k]
  ------------------
  165|  1.16M|                        {
  166|  1.16M|                            current_token = source.substring_view(
  167|  1.16M|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  1.16M|                                    current_token.length() + 1u);
  169|  1.16M|                            tokens.emplace_back(ParseToken(
  170|  1.16M|                                    source.substring_view(
  171|  1.16M|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  1.16M|                                                    token_begin),
  173|  1.16M|                                            current_token.length()),
  174|  1.16M|                                    current_line_number,
  175|  1.16M|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  1.16M|                            current_token = phi::string_view{};
  178|  1.16M|                        }
  179|   184k|                        else
  180|   184k|                        {
  181|       |                            // Orphan colon
  182|   184k|                            token_begin = i;
  183|       |
  184|   184k|                            tokens.emplace_back(
  185|   184k|                                    Token::Type::Colon,
  186|   184k|                                    source.substring_view(
  187|   184k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|   184k|                                                    token_begin),
  189|   184k|                                            1u),
  190|   184k|                                    current_line_number, current_column);
  191|   184k|                        }
  192|  1.35M|                        break;
  193|  1.44M|                    case ',':
  ------------------
  |  Branch (193:21): [True: 1.44M, False: 14.4M]
  ------------------
  194|  1.61M|                    case '(':
  ------------------
  |  Branch (194:21): [True: 164k, False: 15.7M]
  ------------------
  195|  2.09M|                    case ')':
  ------------------
  |  Branch (195:21): [True: 483k, False: 15.4M]
  ------------------
  196|  2.09M|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 1.67M, False: 423k]
  ------------------
  197|  1.67M|                        {
  198|  1.67M|                            tokens.emplace_back(ParseToken(
  199|  1.67M|                                    source.substring_view(
  200|  1.67M|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  1.67M|                                                    token_begin),
  202|  1.67M|                                            current_token.length()),
  203|  1.67M|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  1.67M|                            current_token = phi::string_view{};
  206|  1.67M|                        }
  207|       |
  208|  2.09M|                        Token::Type type;
  209|  2.09M|                        switch (c)
  210|  2.09M|                        {
  211|  1.44M|                            case ',':
  ------------------
  |  Branch (211:29): [True: 1.44M, False: 647k]
  ------------------
  212|  1.44M|                                type = Token::Type::Comma;
  213|  1.44M|                                break;
  214|   164k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 164k, False: 1.93M]
  ------------------
  215|   164k|                                type = Token::Type::OpenBracket;
  216|   164k|                                break;
  217|   483k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 483k, False: 1.61M]
  ------------------
  218|   483k|                                type = Token::Type::ClosingBracket;
  219|   483k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 2.09M]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  2.09M|#endif
  225|  2.09M|                        }
  226|       |
  227|  2.09M|                        token_begin = i;
  228|       |
  229|  2.09M|                        tokens.emplace_back(
  230|  2.09M|                                type,
  231|  2.09M|                                source.substring_view(
  232|  2.09M|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  2.09M|                                        1u),
  234|  2.09M|                                current_line_number, current_column);
  235|  2.09M|                        break;
  236|       |
  237|  12.0M|                    default:
  ------------------
  |  Branch (237:21): [True: 12.0M, False: 3.83M]
  ------------------
  238|  12.0M|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 3.89M, False: 8.16M]
  ------------------
  239|  3.89M|                        {
  240|  3.89M|                            token_begin = i;
  241|  3.89M|                        }
  242|       |
  243|       |                        // simply append the character
  244|  12.0M|                        current_token = source.substring_view(
  245|  12.0M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|  12.0M|                                current_token.length() + 1u);
  247|  15.8M|                }
  248|  15.8M|            }
  249|       |
  250|  16.6M|            current_column += 1u;
  251|  16.6M|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  28.5k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 20.6k, False: 7.96k]
  ------------------
  255|  20.6k|        {
  256|  20.6k|            tokens.emplace_back(
  257|  20.6k|                    ParseToken(source.substring_view(
  258|  20.6k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  20.6k|                                       current_token.length()),
  260|  20.6k|                               current_line_number, current_column - current_token.length()));
  261|  20.6k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  28.5k|        tokens.finalize();
  265|       |
  266|  28.5k|        return tokens;
  267|  28.5k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|  3.92M|    {
   14|  3.92M|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 31.6k, False: 3.89M]
  |  Branch (14:13): [True: 27.5k, False: 3.89M]
  |  Branch (14:36): [True: 27.5k, False: 4.14k]
  ------------------
   15|  27.5k|        {
   16|  27.5k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  27.5k|            if (number)
  ------------------
  |  Branch (18:17): [True: 19.7k, False: 7.82k]
  ------------------
   19|  19.7k|            {
   20|  19.7k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  19.7k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  19.7k|            }
   23|       |
   24|  7.82k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  27.5k|        }
   26|       |
   27|  3.89M|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 8.95k, False: 3.88M]
  |  Branch (27:13): [True: 32.8k, False: 3.86M]
  |  Branch (27:36): [True: 23.8k, False: 3.86M]
  ------------------
   28|  32.8k|        {
   29|  32.8k|            return {Token::Type::Comment, token, line_number, column};
   30|  32.8k|        }
   31|       |
   32|  3.86M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 90.7k, False: 3.77M]
  ------------------
   33|  90.7k|        {
   34|  90.7k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  90.7k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  90.7k|        }
   37|       |
   38|  3.77M|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 19.7k, False: 3.75M]
  ------------------
   39|  19.7k|        {
   40|  19.7k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  19.7k|        }
   42|       |
   43|  3.75M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 78.2k, False: 3.67M]
  ------------------
   44|  78.2k|        {
   45|  78.2k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  78.2k|                    static_cast<phi::uint32_t>(id)};
   47|  78.2k|        }
   48|       |
   49|  3.67M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 57.5k, False: 3.61M]
  ------------------
   50|  57.5k|        {
   51|  57.5k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  57.5k|                    static_cast<phi::uint32_t>(id)};
   53|  57.5k|        }
   54|       |
   55|  3.61M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 1.26M, False: 2.35M]
  ------------------
   56|  1.26M|        {
   57|  1.26M|            return {Token::Type::OpCode, token, line_number, column,
   58|  1.26M|                    static_cast<phi::uint32_t>(opcode)};
   59|  1.26M|        }
   60|       |
   61|  2.35M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  3.61M|    }

LLVMFuzzerTestOneInput:
   11|  28.5k|{
   12|  28.5k|    static dlx::Processor processor;
   13|       |
   14|  28.5k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   15|       |
   16|       |    // Parse it
   17|  28.5k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   18|       |
   19|       |    // Clear registers and memory
   20|  28.5k|    processor.ClearRegisters();
   21|  28.5k|    processor.ClearMemory();
   22|       |
   23|       |    // Execute
   24|  28.5k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (24:9): [True: 2.36k, False: 26.1k]
  ------------------
   25|  2.36k|    {
   26|  2.36k|        processor.ExecuteCurrentProgram();
   27|  2.36k|    }
   28|       |
   29|  28.5k|    return 0;
   30|  28.5k|}


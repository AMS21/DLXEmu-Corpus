_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  2.12M|        {
  169|  2.12M|            PHI_ASSERT(index < 3u);
  170|       |
  171|  2.12M|            switch (index.unsafe())
  172|  2.12M|            {
  173|   964k|                case 0:
  ------------------
  |  Branch (173:17): [True: 964k, False: 1.15M]
  ------------------
  174|   964k|                    return m_Arg1Type;
  175|       |
  176|   586k|                case 1:
  ------------------
  |  Branch (176:17): [True: 586k, False: 1.53M]
  ------------------
  177|   586k|                    return m_Arg2Type;
  178|       |
  179|   570k|                case 2:
  ------------------
  |  Branch (179:17): [True: 570k, False: 1.55M]
  ------------------
  180|   570k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 2.12M]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  2.12M|#endif
  187|  2.12M|            }
  188|  2.12M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   569k|        {
  195|   569k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   569k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 564k, False: 4.66k]
  ------------------
  199|   564k|            {
  200|   564k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   564k|            }
  202|   569k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 300k, False: 269k]
  ------------------
  203|   300k|            {
  204|   300k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   300k|            }
  206|   569k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 120k, False: 449k]
  ------------------
  207|   120k|            {
  208|   120k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   120k|            }
  210|       |
  211|   569k|            return number_of_argument_required;
  212|   569k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  50.9k|        {
  216|  50.9k|            return m_RegisterAccessType;
  217|  50.9k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   569k|        {
  221|   569k|            return m_Executor;
  222|   569k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   454k|    {
   38|   454k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   454k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   454k|                                         static_cast<underlying_t>(rhs));
   42|   454k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   454k|    {
   55|   454k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   454k|        return static_cast<underlying_t>(type & test) != 0;
   58|   454k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  2.27M|    {
   32|  2.27M|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 14.0k, False: 2.26M]
  ------------------
   33|  14.0k|        {
   34|  14.0k|            return true;
   35|  14.0k|        }
   36|       |
   37|  2.26M|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 23.6k, False: 2.23M]
  ------------------
   38|  23.6k|        {
   39|  23.6k|            return true;
   40|  23.6k|        }
   41|       |
   42|  2.23M|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 354k, False: 1.88M]
  ------------------
   43|   354k|        {
   44|   354k|            return true;
   45|   354k|        }
   46|       |
   47|  1.88M|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 6.71k, False: 1.87M]
  ------------------
   48|  6.71k|        {
   49|  6.71k|            return true;
   50|  6.71k|        }
   51|       |
   52|  1.87M|        return false;
   53|  1.88M|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  1.87M|    {
   57|  1.87M|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 1.87M]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  1.87M|        const char first_char = token.at(0);
   63|       |
   64|  1.87M|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 385k, False: 1.49M]
  ------------------
   65|   385k|        {
   66|   385k|            return phi::is_alpha(first_char);
   67|   385k|        }
   68|       |
   69|  1.49M|        phi::boolean just_under_scores = (first_char == '_');
   70|  1.49M|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 495k, False: 997k]
  |  Branch (70:15): [True: 983k, False: 509k]
  |  Branch (70:44): [True: 14.0k, False: 495k]
  ------------------
   71|   495k|        {
   72|   495k|            return false;
   73|   495k|        }
   74|       |
   75|  3.08M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 2.65M, False: 425k]
  ------------------
   76|  2.65M|        {
   77|  2.65M|            const char c{token.at(index)};
   78|       |
   79|  2.65M|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 2.06M, False: 592k]
  ------------------
   80|  2.06M|            {
   81|  2.06M|                just_under_scores = false;
   82|  2.06M|            }
   83|   592k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 20.3k, False: 572k]
  ------------------
   84|  20.3k|            {
   85|  20.3k|                continue;
   86|  20.3k|            }
   87|   572k|            else
   88|   572k|            {
   89|   572k|                return false;
   90|   572k|            }
   91|  2.65M|        }
   92|       |
   93|   425k|        return !just_under_scores;
   94|   997k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|  8.70M|    {
  101|  8.70M|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 8.70M]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|  8.70M|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 1.41M, False: 7.29M]
  ------------------
  107|  1.41M|        {
  108|  1.41M|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 92.2k, False: 1.32M]
  ------------------
  109|  92.2k|            {
  110|  92.2k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  92.2k|            }
  112|       |
  113|  1.32M|            return {};
  114|  1.41M|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|  7.29M|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 15.6k, False: 7.27M]
  ------------------
  118|  15.6k|        {
  119|  15.6k|            return {};
  120|  15.6k|        }
  121|       |
  122|  7.27M|        std::int32_t number{0};
  123|  7.27M|        phi::boolean is_negative{false};
  124|  7.27M|        phi::boolean starts_with_zero{false};
  125|  7.27M|        phi::boolean parsing_binary{false};
  126|  7.27M|        phi::boolean parsing_octal{false};
  127|  7.27M|        phi::boolean parsing_hexadecimal{false};
  128|  7.27M|        phi::boolean parsed_something{false};
  129|  7.27M|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|  8.10M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 8.04M, False: 65.3k]
  ------------------
  134|  8.04M|        {
  135|  8.04M|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|  8.04M|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 7.27M, False: 761k]
  ------------------
  139|  7.27M|            {
  140|  7.27M|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 12.9k, False: 7.26M]
  ------------------
  141|  12.9k|                {
  142|  12.9k|                    continue;
  143|  12.9k|                }
  144|       |
  145|  7.26M|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 152k, False: 7.11M]
  ------------------
  146|   152k|                {
  147|   152k|                    is_negative = true;
  148|   152k|                    continue;
  149|   152k|                }
  150|       |
  151|  7.11M|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 134k, False: 6.97M]
  ------------------
  152|   134k|                {
  153|   134k|                    starts_with_zero = true;
  154|   134k|                    continue;
  155|   134k|                }
  156|       |
  157|  6.97M|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 16.8k, False: 6.96M]
  ------------------
  158|  16.8k|                {
  159|  16.8k|                    return {};
  160|  16.8k|                }
  161|  6.97M|            }
  162|       |
  163|       |            // Second character
  164|  7.72M|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 454k, False: 7.26M]
  ------------------
  165|   454k|            {
  166|   454k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 134k, False: 320k]
  ------------------
  167|   134k|                {
  168|       |                    // Binary
  169|   134k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 17.0k, False: 117k]
  |  Branch (169:37): [True: 4.85k, False: 112k]
  ------------------
  170|  21.8k|                    {
  171|  21.8k|                        parsing_binary = true;
  172|  21.8k|                        continue;
  173|  21.8k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|   112k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 16.0k, False: 96.3k]
  |  Branch (176:37): [True: 15.1k, False: 81.2k]
  ------------------
  177|  31.1k|                    {
  178|  31.1k|                        parsing_hexadecimal = true;
  179|  31.1k|                        continue;
  180|  31.1k|                    }
  181|       |
  182|       |                    // Octal
  183|  81.2k|                    parsing_octal = true;
  184|  81.2k|                }
  185|   454k|            }
  186|       |
  187|       |            // Handle seperators
  188|  7.67M|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 14.4k, False: 7.65M]
  ------------------
  189|  14.4k|            {
  190|  14.4k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 4.64k, False: 9.78k]
  ------------------
  191|  4.64k|                {
  192|  4.64k|                    return {};
  193|  4.64k|                }
  194|       |
  195|  9.78k|                parsed_separator = true;
  196|  9.78k|                continue;
  197|  14.4k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|  7.65M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 204k, False: 7.45M]
  |  Branch (200:32): [True: 4.38k, False: 199k]
  ------------------
  201|  4.38k|            {
  202|       |                // Would underflow
  203|  4.38k|                return {};
  204|  4.38k|            }
  205|  7.65M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 7.45M, False: 199k]
  |  Branch (205:17): [True: 8.69k, False: 7.64M]
  |  Branch (205:33): [True: 8.69k, False: 7.44M]
  ------------------
  206|  8.69k|            {
  207|       |                // Would overflow
  208|  8.69k|                return {};
  209|  8.69k|            }
  210|       |
  211|  7.64M|            parsed_separator = false;
  212|  7.64M|            parsed_something = true;
  213|       |
  214|  7.64M|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 42.0k, False: 7.60M]
  ------------------
  215|  42.0k|            {
  216|  42.0k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 14.6k, False: 27.4k]
  ------------------
  217|  14.6k|                {
  218|  14.6k|                    return {};
  219|  14.6k|                }
  220|       |
  221|  27.4k|                number <<= 1;
  222|  27.4k|                number |= (c - '0');
  223|  27.4k|            }
  224|  7.60M|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 117k, False: 7.48M]
  ------------------
  225|   117k|            {
  226|   117k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 61.0k, False: 56.7k]
  ------------------
  227|  61.0k|                {
  228|  61.0k|                    return {};
  229|  61.0k|                }
  230|       |
  231|  56.7k|                number <<= 3;
  232|  56.7k|                number |= (c - '0');
  233|  56.7k|            }
  234|  7.48M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 70.4k, False: 7.41M]
  ------------------
  235|  70.4k|            {
  236|  70.4k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 30.4k, False: 39.9k]
  ------------------
  237|  30.4k|                {
  238|  30.4k|                    return {};
  239|  30.4k|                }
  240|       |
  241|  39.9k|                number <<= 4;
  242|  39.9k|                number |= phi::hex_digit_value(c).unsafe();
  243|  39.9k|            }
  244|  7.41M|            else
  245|  7.41M|            {
  246|  7.41M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 7.06M, False: 347k]
  ------------------
  247|  7.06M|                {
  248|  7.06M|                    return {};
  249|  7.06M|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|   347k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 207k, False: 140k]
  |  Branch (252:36): [True: 7.90k, False: 199k]
  ------------------
  253|  7.90k|                {
  254|  7.90k|                    return {};
  255|  7.90k|                }
  256|       |
  257|   339k|                number *= 10;
  258|   339k|                number += (c - '0');
  259|   339k|            }
  260|  7.64M|        }
  261|       |
  262|  65.3k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 58.2k, False: 7.11k]
  ------------------
  263|  58.2k|        {
  264|       |            // Check for over/underflow
  265|  58.2k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 29.8k, False: 28.4k]
  |  Branch (265:32): [True: 3.42k, False: 26.4k]
  ------------------
  266|  3.42k|            {
  267|       |                // Would underflow
  268|  3.42k|                return {};
  269|  3.42k|            }
  270|  54.8k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 28.4k, False: 26.4k]
  |  Branch (270:17): [True: 4.64k, False: 50.2k]
  |  Branch (270:33): [True: 4.64k, False: 23.7k]
  ------------------
  271|  4.64k|            {
  272|       |                // Would overflow
  273|  4.64k|                return {};
  274|  4.64k|            }
  275|       |
  276|  50.2k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 26.4k, False: 23.7k]
  ------------------
  277|  26.4k|            {
  278|  26.4k|                return static_cast<std::int16_t>(-number);
  279|  26.4k|            }
  280|       |
  281|  23.7k|            return static_cast<std::int16_t>(number);
  282|  50.2k|        }
  283|       |
  284|  7.11k|        return {};
  285|  65.3k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   413k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   413k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 12.7M, False: 0]
  ------------------
   64|  12.7M|            {
   65|  12.7M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 413k, False: 12.3M]
  ------------------
   66|   413k|                {
   67|   413k|                    return &token;
   68|   413k|                }
   69|  12.7M|            }
   70|       |
   71|      0|            return nullptr;
   72|   413k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|  3.20M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  3.20M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  3.20M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  8.79M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  8.79M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  8.79M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  5.71M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  5.71M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  5.71M|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|  2.89M|    {
   11|  2.89M|        m_Value = val;
   12|  2.89M|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|    160|    {
   16|    160|        return m_Value;
   17|    160|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   18|   569k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   23|  81.1k|    {
   24|  81.1k|        PHI_ASSERT(argument_number < 3u);
   25|       |
   26|  81.1k|        switch (argument_number.unsafe())
   27|  81.1k|        {
   28|  74.6k|            case 0u:
  ------------------
  |  Branch (28:13): [True: 74.6k, False: 6.50k]
  ------------------
   29|  74.6k|                m_Arg1 = argument;
   30|  74.6k|                break;
   31|  5.10k|            case 1u:
  ------------------
  |  Branch (31:13): [True: 5.10k, False: 76.0k]
  ------------------
   32|  5.10k|                m_Arg2 = argument;
   33|  5.10k|                break;
   34|  1.40k|            case 2u:
  ------------------
  |  Branch (34:13): [True: 1.40k, False: 79.7k]
  ------------------
   35|  1.40k|                m_Arg3 = argument;
   36|  1.40k|                break;
   37|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   38|      0|            default:
  ------------------
  |  Branch (38:13): [True: 0, False: 81.1k]
  ------------------
   39|      0|                PHI_ASSERT_NOT_REACHED();
   40|  81.1k|#endif
   41|  81.1k|        }
   42|  81.1k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   82|  50.9k|    {
   83|  50.9k|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   84|  50.9k|    }
_ZNK3dlx11Instruction7GetInfoEv:
   87|  50.9k|    {
   88|  50.9k|        return m_Info;
   89|  50.9k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   23|  1.78M|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   26|   305k|    {
   27|   305k|        return m_Type;
   28|   305k|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  10.0k|    {
   78|  10.0k|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  10.0k|        return register_int;
   81|  10.0k|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   85|    112|    {
   86|    112|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   87|       |
   88|    112|        return register_float;
   89|    112|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  109|  40.1k|    {
  110|  40.1k|        PHI_ASSERT(m_Type == ArgumentType::Label);
  111|       |
  112|  40.1k|        return label;
  113|  40.1k|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  173|  24.4k|    {
  174|  24.4k|        InstructionArgument arg;
  175|  24.4k|        arg.m_Type                   = ArgumentType::IntRegister;
  176|  24.4k|        arg.register_int.register_id = id;
  177|  24.4k|        return arg;
  178|  24.4k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  182|  7.26k|    {
  183|  7.26k|        InstructionArgument arg;
  184|  7.26k|        arg.m_Type                     = ArgumentType::FloatRegister;
  185|  7.26k|        arg.register_float.register_id = id;
  186|  7.26k|        return arg;
  187|  7.26k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  191|  2.50k|    {
  192|  2.50k|        InstructionArgument arg;
  193|  2.50k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  194|  2.50k|        arg.immediate_value.signed_value = value;
  195|  2.50k|        return arg;
  196|  2.50k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  200|  2.12k|    {
  201|  2.12k|        InstructionArgument arg;
  202|  2.12k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  203|  2.12k|        arg.address_displacement.register_id  = id;
  204|  2.12k|        arg.address_displacement.displacement = displacement;
  205|  2.12k|        return arg;
  206|  2.12k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  210|  44.7k|    {
  211|  44.7k|        InstructionArgument arg;
  212|  44.7k|        arg.m_Type           = ArgumentType::Label;
  213|  44.7k|        arg.label.label_name = label_name;
  214|  44.7k|        return arg;
  215|  44.7k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  356|      1|        {
  357|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  358|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  359|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  360|       |
  361|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  362|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  363|       |
  364|      1|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  365|      1|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  516|      2|        {
  517|      2|            const auto& dest_reg = arg1.AsRegisterInt();
  518|      2|            const auto& lhs_reg  = arg2.AsRegisterInt();
  519|      2|            const auto& rhs_reg  = arg3.AsRegisterInt();
  520|       |
  521|      2|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  522|      2|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  523|       |
  524|      2|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  525|      2|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  541|      3|        {
  542|      3|            const auto& dest_reg = arg1.AsRegisterInt();
  543|      3|            const auto& lhs_reg  = arg2.AsRegisterInt();
  544|      3|            const auto& rhs_reg  = arg3.AsRegisterInt();
  545|       |
  546|      3|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  547|      3|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  548|       |
  549|      3|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  550|      3|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  931|     13|        {
  932|     13|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  933|     13|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  934|       |
  935|     13|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  936|     13|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  937|       |
  938|     13|            const phi::boolean new_value = (lhs_value < rhs_value);
  939|       |
  940|     13|            processor.SetFPSRValue(new_value);
  941|     13|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  945|     33|        {
  946|     33|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  947|     33|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  948|       |
  949|     33|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  950|     33|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  951|       |
  952|     33|            const phi::boolean new_value = (lhs_value < rhs_value);
  953|       |
  954|     33|            processor.SetFPSRValue(new_value);
  955|     33|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1017|      1|        {
 1018|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1019|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1020|       |
 1021|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1022|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1023|       |
 1024|      1|            const phi::boolean new_value = (lhs_value > rhs_value);
 1025|       |
 1026|      1|            processor.SetFPSRValue(new_value);
 1027|      1|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1031|      1|        {
 1032|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1033|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1034|       |
 1035|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1036|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1037|       |
 1038|      1|            const phi::boolean new_value = (lhs_value > rhs_value);
 1039|       |
 1040|      1|            processor.SetFPSRValue(new_value);
 1041|      1|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1103|      1|        {
 1104|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1105|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1106|       |
 1107|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1108|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1109|       |
 1110|      1|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1111|       |
 1112|      1|            processor.SetFPSRValue(new_value);
 1113|      1|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1117|      1|        {
 1118|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1119|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1120|       |
 1121|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1122|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1123|       |
 1124|      1|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1125|       |
 1126|      1|            processor.SetFPSRValue(new_value);
 1127|      1|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1189|      1|        {
 1190|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1191|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1192|       |
 1193|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1194|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1195|       |
 1196|      1|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1197|       |
 1198|      1|            processor.SetFPSRValue(new_value);
 1199|      1|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1203|      1|        {
 1204|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1205|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1206|       |
 1207|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1208|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1209|       |
 1210|      1|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1211|       |
 1212|      1|            processor.SetFPSRValue(new_value);
 1213|      1|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1275|      1|        {
 1276|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1277|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1278|       |
 1279|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1280|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1281|       |
 1282|      1|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1283|       |
 1284|      1|            processor.SetFPSRValue(new_value);
 1285|      1|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1289|      1|        {
 1290|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1291|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1292|       |
 1293|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1294|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1295|       |
 1296|      1|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1297|       |
 1298|      1|            processor.SetFPSRValue(new_value);
 1299|      1|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1361|      1|        {
 1362|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1363|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1364|       |
 1365|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1366|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1367|       |
 1368|      1|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1369|       |
 1370|      1|            processor.SetFPSRValue(new_value);
 1371|      1|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1375|      1|        {
 1376|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1377|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1378|       |
 1379|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1380|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1381|       |
 1382|      1|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1383|       |
 1384|      1|            processor.SetFPSRValue(new_value);
 1385|      1|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1417|      2|        {
 1418|      2|            const auto& jump_label = arg1.AsLabel();
 1419|       |
 1420|      2|            phi::boolean test_value = processor.GetFPSRValue();
 1421|       |
 1422|      2|            if (test_value)
  ------------------
  |  Branch (1422:17): [True: 0, False: 2]
  ------------------
 1423|      0|            {
 1424|      0|                JumpToLabel(processor, jump_label.label_name);
 1425|      0|            }
 1426|      2|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1430|      2|        {
 1431|      2|            const auto& jump_label = arg1.AsLabel();
 1432|       |
 1433|      2|            phi::boolean test_value = processor.GetFPSRValue();
 1434|       |
 1435|      2|            if (!test_value)
  ------------------
  |  Branch (1435:17): [True: 2, False: 0]
  ------------------
 1436|      2|            {
 1437|      2|                JumpToLabel(processor, jump_label.label_name);
 1438|      2|            }
 1439|      2|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1443|  40.1k|        {
 1444|  40.1k|            const auto& jump_label = arg1.AsLabel();
 1445|       |
 1446|  40.1k|            JumpToLabel(processor, jump_label.label_name);
 1447|  40.1k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1451|  10.0k|        {
 1452|  10.0k|            const auto& jump_register = arg1.AsRegisterInt();
 1453|       |
 1454|  10.0k|            JumpToRegister(processor, jump_register.register_id);
 1455|  10.0k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1459|      2|        {
 1460|      2|            const auto& jump_label = arg1.AsLabel();
 1461|       |
 1462|      2|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1463|      2|                                                  processor.GetNextProgramCounter());
 1464|       |
 1465|      2|            JumpToLabel(processor, jump_label.label_name);
 1466|      2|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2078|      3|        {
 2079|      3|            processor.Raise(Exception::Halt);
 2080|      3|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2084|    768|        {
 2085|       |            /* Do nothing */
 2086|    768|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  174|      1|    {
  175|      1|        phi::i64 res = phi::i64(lhs) + rhs;
  176|       |
  177|      1|        SafeWriteInteger(processor, dest_reg, res);
  178|      1|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  129|      3|    {
  130|      3|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  131|      3|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  132|       |
  133|       |        // Check for underflow
  134|      3|        if (value < min)
  ------------------
  |  Branch (134:13): [True: 0, False: 3]
  ------------------
  135|      0|        {
  136|      0|            processor.Raise(Exception::Underflow);
  137|       |
  138|      0|            value = max + (value % (min - 1));
  139|      0|        }
  140|       |        // Check for overflow
  141|      3|        else if (value > max)
  ------------------
  |  Branch (141:18): [True: 0, False: 3]
  ------------------
  142|      0|        {
  143|      0|            processor.Raise(Exception::Overflow);
  144|       |
  145|      0|            value = min + (value % (max + 1));
  146|      0|        }
  147|       |
  148|      3|        PHI_ASSERT(value >= min);
  149|      3|        PHI_ASSERT(value <= max);
  150|       |
  151|      3|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  152|      3|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  156|      3|    {
  157|      3|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  158|       |
  159|       |        // Check for overflow
  160|      3|        if (value > max)
  ------------------
  |  Branch (160:13): [True: 0, False: 3]
  ------------------
  161|      0|        {
  162|      0|            processor.Raise(Exception::Overflow);
  163|       |
  164|      0|            value %= max + 1u;
  165|      0|        }
  166|       |
  167|      3|        PHI_ASSERT(value <= max);
  168|       |
  169|      3|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  170|      3|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  217|      2|    {
  218|      2|        phi::i64 res = phi::i64(lhs) * rhs;
  219|       |
  220|      2|        SafeWriteInteger(processor, dest_reg, res);
  221|      2|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  225|      3|    {
  226|      3|        phi::u64 res = phi::u64(lhs) * rhs;
  227|       |
  228|      3|        SafeWriteInteger(processor, dest_reg, res);
  229|      3|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|  40.1k|    {
   39|       |        // Lookup the label
   40|  40.1k|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|  40.1k|        PHI_ASSERT(program != nullptr);
   42|  40.1k|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|  40.1k|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 139, False: 40.0k]
  ------------------
   45|    139|        {
   46|    139|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|    139|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|    139|            processor.Raise(Exception::UnknownLabel);
   48|    139|            return;
   49|    139|        }
   50|       |
   51|  40.0k|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|  40.0k|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|  40.0k|        processor.SetNextProgramCounter(jump_point);
   56|  40.0k|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|  10.0k|    {
   60|  10.0k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|  10.0k|        phi::u32 max_address =
   63|  10.0k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|  10.0k|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 0, False: 10.0k]
  ------------------
   65|      0|        {
   66|      0|            processor.Raise(Exception::AddressOutOfBounds);
   67|      0|            return;
   68|      0|        }
   69|       |
   70|  10.0k|        processor.SetNextProgramCounter(address.unsafe());
   71|  10.0k|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  50.9k|    {
   12|  50.9k|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  50.9k|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  50.9k|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  50.9k|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  50.9k|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  50.9k|                   "Unexpected argument type for arg1");
   22|  50.9k|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  50.9k|                   "Unexpected argument type for arg2");
   24|  50.9k|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  50.9k|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  50.9k|        m_Executor(processor, arg1, arg2, arg3);
   29|  50.9k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   569k|    {
  453|   569k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   569k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|  2.89M|    {
   17|  2.89M|        m_ValueSigned = val;
   18|  2.89M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|      3|    {
   22|      3|        m_ValueUnsigned = val;
   23|      3|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|      6|    {
   27|      6|        return m_ValueSigned;
   28|      6|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  10.0k|    {
   32|  10.0k|        return m_ValueUnsigned;
   33|  10.0k|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|      8|    {
   37|      8|        return m_IsReadOnly;
   38|      8|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   14|      1|    {
   15|      1|        m_Values.resize(starting_size.unsafe());
   16|      1|    }
_ZN3dlx11MemoryBlock5ClearEv:
  255|  90.3k|    {
  256|  90.3k|        for (auto& val : m_Values)
  ------------------
  |  Branch (256:24): [True: 90.3M, False: 90.3k]
  ------------------
  257|  90.3M|        {
  258|  90.3M|            val.signed_value = 0;
  259|  90.3M|        }
  260|  90.3k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|  10.6M|    {
   24|  10.6M|        switch (token.length())
   25|  10.6M|        {
   26|       |            // 1 character OpCodes
   27|  1.71M|            case 1: {
  ------------------
  |  Branch (27:13): [True: 1.71M, False: 8.93M]
  ------------------
   28|  1.71M|                char c1 = token[0];
   29|  1.71M|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 325k, False: 1.38M]
  ------------------
   30|   325k|                {
   31|   325k|                    return OpCode::J;
   32|   325k|                }
   33|  1.38M|                break;
   34|  1.71M|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  1.72M|            case 2: {
  ------------------
  |  Branch (37:13): [True: 1.72M, False: 8.91M]
  ------------------
   38|  1.72M|                char c1 = token[0];
   39|  1.72M|                char c2 = token[1];
   40|       |
   41|  1.72M|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 1.25M, False: 477k]
  ------------------
   42|  1.72M|                {
   43|  60.0k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 60.0k, False: 1.66M]
  ------------------
   44|  98.1k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 38.1k, False: 1.69M]
  ------------------
   45|  98.1k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 19.0k, False: 79.1k]
  ------------------
   46|  19.0k|                        {
   47|  19.0k|                            return OpCode::JR;
   48|  19.0k|                        }
   49|  79.1k|                        break;
   50|       |
   51|  79.1k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 77.3k, False: 1.65M]
  ------------------
   52|   139k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 61.6k, False: 1.66M]
  ------------------
   53|   139k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 63.2k, False: 75.7k]
  ------------------
   54|   139k|                        {
   55|  4.98k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 4.98k, False: 134k]
  ------------------
   56|  9.80k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 4.82k, False: 134k]
  ------------------
   57|  9.80k|                                return OpCode::LB;
   58|  4.55k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 4.55k, False: 134k]
  ------------------
   59|  6.31k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 1.76k, False: 137k]
  ------------------
   60|  6.31k|                                return OpCode::LD;
   61|  4.37k|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 4.37k, False: 134k]
  ------------------
   62|  9.71k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 5.34k, False: 133k]
  ------------------
   63|  9.71k|                                return OpCode::LF;
   64|  16.2k|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 16.2k, False: 122k]
  ------------------
   65|  21.3k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 5.11k, False: 133k]
  ------------------
   66|  21.3k|                                return OpCode::LH;
   67|  22.4k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 22.4k, False: 116k]
  ------------------
   68|  28.5k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 6.12k, False: 132k]
  ------------------
   69|  28.5k|                                return OpCode::LW;
   70|   139k|                        }
   71|  63.2k|                        break;
   72|  63.2k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 17.4k, False: 1.71M]
  ------------------
   73|  76.7k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 59.3k, False: 1.66M]
  ------------------
   74|  76.7k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 27.7k, False: 48.9k]
  ------------------
   75|  27.7k|                        {
   76|  27.7k|                            return OpCode::OR;
   77|  27.7k|                        }
   78|  48.9k|                        break;
   79|   112k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 112k, False: 1.61M]
  ------------------
   80|   163k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 51.3k, False: 1.67M]
  ------------------
   81|   163k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 58.9k, False: 104k]
  ------------------
   82|   163k|                        {
   83|  10.1k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 10.1k, False: 153k]
  ------------------
   84|  19.3k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 9.18k, False: 154k]
  ------------------
   85|  19.3k|                                return OpCode::SB;
   86|  5.15k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 5.15k, False: 158k]
  ------------------
   87|  15.7k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 10.5k, False: 153k]
  ------------------
   88|  15.7k|                                return OpCode::SD;
   89|  5.30k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 5.30k, False: 158k]
  ------------------
   90|  44.2k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 38.9k, False: 124k]
  ------------------
   91|  44.2k|                                return OpCode::SF;
   92|  11.7k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 11.7k, False: 152k]
  ------------------
   93|  17.3k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 5.63k, False: 158k]
  ------------------
   94|  17.3k|                                return OpCode::SH;
   95|  5.49k|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 5.49k, False: 158k]
  ------------------
   96|  8.17k|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 2.68k, False: 161k]
  ------------------
   97|  8.17k|                                return OpCode::SW;
   98|   163k|                        }
   99|  58.9k|                        break;
  100|  1.72M|                }
  101|  1.50M|                break;
  102|  1.72M|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|  1.87M|            case 3: {
  ------------------
  |  Branch (105:13): [True: 1.87M, False: 8.77M]
  ------------------
  106|  1.87M|                char c1 = token[0];
  107|  1.87M|                char c2 = token[1];
  108|  1.87M|                char c3 = token[2];
  109|       |
  110|  1.87M|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 882k, False: 993k]
  ------------------
  111|  1.87M|                {
  112|  16.0k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 16.0k, False: 1.85M]
  ------------------
  113|  58.9k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 42.8k, False: 1.83M]
  ------------------
  114|  58.9k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 19.1k, False: 39.7k]
  |  Branch (114:29): [True: 9.59k, False: 49.3k]
  |  Branch (114:45): [True: 9.59k, False: 9.54k]
  ------------------
  115|  9.59k|                        {
  116|  9.59k|                            return OpCode::ADD;
  117|  9.59k|                        }
  118|  49.3k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 23.2k, False: 26.0k]
  |  Branch (118:34): [True: 15.3k, False: 33.9k]
  |  Branch (118:50): [True: 15.3k, False: 7.86k]
  ------------------
  119|  15.3k|                        {
  120|  15.3k|                            return OpCode::AND;
  121|  15.3k|                        }
  122|  33.9k|                        break;
  123|       |
  124|  33.9k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 17.8k, False: 1.85M]
  ------------------
  125|  44.1k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 26.3k, False: 1.84M]
  ------------------
  126|  44.1k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 23.9k, False: 20.2k]
  |  Branch (126:29): [True: 9.33k, False: 34.8k]
  |  Branch (126:45): [True: 9.33k, False: 14.6k]
  ------------------
  127|  9.33k|                        {
  128|  9.33k|                            return OpCode::DIV;
  129|  9.33k|                        }
  130|  34.8k|                        break;
  131|       |
  132|  34.8k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 9.61k, False: 1.86M]
  ------------------
  133|  52.1k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 42.5k, False: 1.83M]
  ------------------
  134|  52.1k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 40.5k, False: 11.6k]
  ------------------
  135|  40.5k|                        {
  136|  40.5k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 19.4k, False: 21.0k]
  ------------------
  137|  19.4k|                            {
  138|  19.4k|                                return OpCode::EQD;
  139|  19.4k|                            }
  140|  21.0k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 12.9k, False: 8.17k]
  ------------------
  141|  12.9k|                            {
  142|  12.9k|                                return OpCode::EQF;
  143|  12.9k|                            }
  144|  40.5k|                        }
  145|  19.8k|                        break;
  146|       |
  147|  24.7k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 24.7k, False: 1.85M]
  ------------------
  148|  53.1k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 28.4k, False: 1.84M]
  ------------------
  149|  53.1k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 24.8k, False: 28.3k]
  ------------------
  150|  24.8k|                        {
  151|  24.8k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 9.76k, False: 15.0k]
  ------------------
  152|  9.76k|                            {
  153|  9.76k|                                return OpCode::GED;
  154|  9.76k|                            }
  155|  15.0k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 9.85k, False: 5.19k]
  ------------------
  156|  9.85k|                            {
  157|  9.85k|                                return OpCode::GEF;
  158|  9.85k|                            }
  159|  24.8k|                        }
  160|  28.3k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 22.3k, False: 6.02k]
  ------------------
  161|  22.3k|                        {
  162|  22.3k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 8.72k, False: 13.5k]
  ------------------
  163|  8.72k|                            {
  164|  8.72k|                                return OpCode::GTD;
  165|  8.72k|                            }
  166|  13.5k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 7.19k, False: 6.40k]
  ------------------
  167|  7.19k|                            {
  168|  7.19k|                                return OpCode::GTF;
  169|  7.19k|                            }
  170|  13.5k|                        }
  171|  17.6k|                        break;
  172|       |
  173|  52.2k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 52.2k, False: 1.82M]
  ------------------
  174|  64.2k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 11.9k, False: 1.86M]
  ------------------
  175|  64.2k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 33.6k, False: 30.6k]
  |  Branch (175:29): [True: 8.17k, False: 56.1k]
  |  Branch (175:45): [True: 8.17k, False: 25.4k]
  ------------------
  176|  8.17k|                        {
  177|  8.17k|                            return OpCode::JAL;
  178|  8.17k|                        }
  179|  56.1k|                        break;
  180|       |
  181|   135k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 135k, False: 1.74M]
  ------------------
  182|   226k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 91.8k, False: 1.78M]
  ------------------
  183|   226k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 56.3k, False: 170k]
  ------------------
  184|   226k|                        {
  185|  19.0k|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 19.0k, False: 207k]
  ------------------
  186|  45.5k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 26.4k, False: 200k]
  ------------------
  187|  45.5k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 13.7k, False: 31.7k]
  ------------------
  188|  13.7k|                                {
  189|  13.7k|                                    return OpCode::LBU;
  190|  13.7k|                                }
  191|  31.7k|                                break;
  192|       |
  193|  31.7k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 9.82k, False: 217k]
  ------------------
  194|  24.9k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 15.1k, False: 211k]
  ------------------
  195|  24.9k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 7.49k, False: 17.4k]
  ------------------
  196|  7.49k|                                {
  197|  7.49k|                                    return OpCode::LED;
  198|  7.49k|                                }
  199|  17.4k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 9.00k, False: 8.44k]
  ------------------
  200|  9.00k|                                {
  201|  9.00k|                                    return OpCode::LEF;
  202|  9.00k|                                }
  203|  8.44k|                                break;
  204|       |
  205|  27.0k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 27.0k, False: 199k]
  ------------------
  206|  57.6k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 30.5k, False: 196k]
  ------------------
  207|  57.6k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 15.3k, False: 42.2k]
  ------------------
  208|  15.3k|                                {
  209|  15.3k|                                    return OpCode::LHI;
  210|  15.3k|                                }
  211|  42.2k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 16.2k, False: 25.9k]
  ------------------
  212|  16.2k|                                {
  213|  16.2k|                                    return OpCode::LHU;
  214|  16.2k|                                }
  215|  25.9k|                                break;
  216|       |
  217|  25.9k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 12.5k, False: 214k]
  ------------------
  218|  24.6k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 12.1k, False: 214k]
  ------------------
  219|  24.6k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 14.5k, False: 10.1k]
  ------------------
  220|  14.5k|                                {
  221|  14.5k|                                    return OpCode::LTD;
  222|  14.5k|                                }
  223|  10.1k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 6.36k, False: 3.82k]
  ------------------
  224|  6.36k|                                {
  225|  6.36k|                                    return OpCode::LTF;
  226|  6.36k|                                }
  227|  3.82k|                                break;
  228|       |
  229|  7.14k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 7.14k, False: 219k]
  ------------------
  230|  17.7k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 10.6k, False: 216k]
  ------------------
  231|  17.7k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 7.94k, False: 9.83k]
  ------------------
  232|  7.94k|                                {
  233|  7.94k|                                    return OpCode::LWU;
  234|  7.94k|                                }
  235|  9.83k|                                break;
  236|   226k|                        }
  237|   136k|                        break;
  238|       |
  239|   136k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 43.1k, False: 1.83M]
  ------------------
  240|  63.6k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 20.4k, False: 1.85M]
  ------------------
  241|  63.6k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 30.7k, False: 32.9k]
  ------------------
  242|  30.7k|                        {
  243|  30.7k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 11.7k, False: 18.9k]
  ------------------
  244|  11.7k|                            {
  245|  11.7k|                                return OpCode::NED;
  246|  11.7k|                            }
  247|  18.9k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 8.62k, False: 10.3k]
  ------------------
  248|  8.62k|                            {
  249|  8.62k|                                return OpCode::NEF;
  250|  8.62k|                            }
  251|  30.7k|                        }
  252|  32.9k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 19.7k, False: 13.1k]
  |  Branch (252:34): [True: 12.3k, False: 20.5k]
  |  Branch (252:50): [True: 12.3k, False: 7.40k]
  ------------------
  253|  12.3k|                        {
  254|  12.3k|                            return OpCode::NOP;
  255|  12.3k|                        }
  256|       |
  257|  30.8k|                        break;
  258|       |
  259|  30.8k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 14.4k, False: 1.86M]
  ------------------
  260|  63.8k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 49.4k, False: 1.82M]
  ------------------
  261|  63.8k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 44.0k, False: 19.8k]
  |  Branch (261:29): [True: 8.26k, False: 55.5k]
  |  Branch (261:45): [True: 8.26k, False: 35.7k]
  ------------------
  262|  8.26k|                        {
  263|  8.26k|                            return OpCode::ORI;
  264|  8.26k|                        }
  265|  55.5k|                        break;
  266|       |
  267|   134k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 134k, False: 1.74M]
  ------------------
  268|   314k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 180k, False: 1.69M]
  ------------------
  269|   314k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 42.6k, False: 271k]
  ------------------
  270|   314k|                        {
  271|  20.3k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 20.3k, False: 294k]
  ------------------
  272|  37.4k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 17.0k, False: 297k]
  ------------------
  273|  37.4k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 25.7k, False: 11.6k]
  ------------------
  274|  25.7k|                                {
  275|  25.7k|                                    return OpCode::SBU;
  276|  25.7k|                                }
  277|  11.6k|                                break;
  278|       |
  279|  24.6k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 24.6k, False: 289k]
  ------------------
  280|  31.8k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 7.18k, False: 307k]
  ------------------
  281|  31.8k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 13.3k, False: 18.4k]
  ------------------
  282|  13.3k|                                {
  283|  13.3k|                                    return OpCode::SEQ;
  284|  13.3k|                                }
  285|  18.4k|                                break;
  286|       |
  287|  18.4k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 11.4k, False: 302k]
  ------------------
  288|  27.2k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 15.7k, False: 298k]
  ------------------
  289|  27.2k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 7.54k, False: 19.7k]
  ------------------
  290|  7.54k|                                {
  291|  7.54k|                                    return OpCode::SGE;
  292|  7.54k|                                }
  293|  19.7k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 9.27k, False: 10.4k]
  ------------------
  294|  9.27k|                                {
  295|  9.27k|                                    return OpCode::SGT;
  296|  9.27k|                                }
  297|  10.4k|                                break;
  298|       |
  299|  20.3k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 20.3k, False: 294k]
  ------------------
  300|  28.4k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 8.16k, False: 306k]
  ------------------
  301|  28.4k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 10.1k, False: 18.3k]
  ------------------
  302|  10.1k|                                {
  303|  10.1k|                                    return OpCode::SHU;
  304|  10.1k|                                }
  305|  18.3k|                                break;
  306|       |
  307|  36.2k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 36.2k, False: 278k]
  ------------------
  308|  52.0k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 15.7k, False: 298k]
  ------------------
  309|  52.0k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 13.4k, False: 38.5k]
  ------------------
  310|  52.0k|                                {
  311|  3.50k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 3.50k, False: 48.5k]
  ------------------
  312|  6.53k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 3.03k, False: 48.9k]
  ------------------
  313|  6.53k|                                        return OpCode::SLA;
  314|       |
  315|  5.93k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 5.93k, False: 46.0k]
  ------------------
  316|  10.5k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 4.64k, False: 47.3k]
  ------------------
  317|  10.5k|                                        return OpCode::SLE;
  318|       |
  319|  4.80k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 4.80k, False: 47.2k]
  ------------------
  320|  10.2k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 5.49k, False: 46.5k]
  ------------------
  321|  10.2k|                                        return OpCode::SLL;
  322|       |
  323|  3.61k|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 3.61k, False: 48.3k]
  ------------------
  324|  11.0k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 7.48k, False: 44.5k]
  ------------------
  325|  11.0k|                                        return OpCode::SLT;
  326|  52.0k|                                }
  327|  13.4k|                                break;
  328|       |
  329|  14.2k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 14.2k, False: 300k]
  ------------------
  330|  19.1k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 4.97k, False: 309k]
  ------------------
  331|  19.1k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 10.0k, False: 9.18k]
  ------------------
  332|  10.0k|                                {
  333|  10.0k|                                    return OpCode::SNE;
  334|  10.0k|                                }
  335|  9.18k|                                break;
  336|       |
  337|  17.5k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 17.5k, False: 296k]
  ------------------
  338|  29.2k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 11.7k, False: 302k]
  ------------------
  339|  29.2k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 12.1k, False: 17.1k]
  ------------------
  340|  12.1k|                                {
  341|  12.1k|                                    return OpCode::SRA;
  342|  12.1k|                                }
  343|  17.1k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 7.79k, False: 9.35k]
  ------------------
  344|  7.79k|                                {
  345|  7.79k|                                    return OpCode::SRL;
  346|  7.79k|                                }
  347|  9.35k|                                break;
  348|       |
  349|  17.2k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 17.2k, False: 297k]
  ------------------
  350|  26.3k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 9.06k, False: 305k]
  ------------------
  351|  26.3k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 11.0k, False: 15.2k]
  ------------------
  352|  11.0k|                                {
  353|  11.0k|                                    return OpCode::SUB;
  354|  11.0k|                                }
  355|  15.2k|                                break;
  356|       |
  357|  15.2k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 6.95k, False: 307k]
  ------------------
  358|  20.0k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 13.0k, False: 301k]
  ------------------
  359|  20.0k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 14.9k, False: 5.08k]
  ------------------
  360|  14.9k|                                {
  361|  14.9k|                                    return OpCode::SWU;
  362|  14.9k|                                }
  363|  5.08k|                                break;
  364|   314k|                        }
  365|       |
  366|   159k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 5.46k, False: 1.87M]
  ------------------
  367|   205k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 46.1k, False: 1.82M]
  ------------------
  368|   205k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 34.7k, False: 170k]
  |  Branch (368:29): [True: 14.8k, False: 190k]
  |  Branch (368:45): [True: 14.8k, False: 19.8k]
  ------------------
  369|  14.8k|                        {
  370|  14.8k|                            return OpCode::XOR;
  371|  14.8k|                        }
  372|   190k|                        break;
  373|  1.87M|                }
  374|  1.45M|                break;
  375|  1.87M|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|  1.74M|            case 4: {
  ------------------
  |  Branch (378:13): [True: 1.74M, False: 8.90M]
  ------------------
  379|  1.74M|                char c1 = token[0];
  380|  1.74M|                char c2 = token[1];
  381|  1.74M|                char c3 = token[2];
  382|  1.74M|                char c4 = token[3];
  383|       |
  384|  1.74M|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 724k, False: 1.02M]
  ------------------
  385|  1.74M|                {
  386|  14.5k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 14.5k, False: 1.73M]
  ------------------
  387|   113k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 99.0k, False: 1.64M]
  ------------------
  388|   113k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 18.5k, False: 95.0k]
  ------------------
  389|   113k|                        {
  390|  47.3k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 47.3k, False: 66.3k]
  ------------------
  391|  61.5k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 14.2k, False: 99.4k]
  ------------------
  392|  61.5k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 53.1k, False: 8.36k]
  ------------------
  393|  53.1k|                                {
  394|  53.1k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 8.07k, False: 45.1k]
  ------------------
  395|  53.1k|                                    {
  396|  4.10k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 4.10k, False: 49.0k]
  ------------------
  397|  11.2k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 7.15k, False: 46.0k]
  ------------------
  398|  11.2k|                                            return OpCode::ADDD;
  399|       |
  400|  3.79k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 3.79k, False: 49.3k]
  ------------------
  401|  15.8k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 12.0k, False: 41.1k]
  ------------------
  402|  15.8k|                                            return OpCode::ADDF;
  403|       |
  404|  6.58k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 6.58k, False: 46.5k]
  ------------------
  405|  9.89k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 3.30k, False: 49.8k]
  ------------------
  406|  9.89k|                                            return OpCode::ADDI;
  407|       |
  408|  4.07k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 4.07k, False: 49.1k]
  ------------------
  409|  8.15k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 4.08k, False: 49.0k]
  ------------------
  410|  8.15k|                                            return OpCode::ADDU;
  411|  53.1k|                                    }
  412|  53.1k|                                }
  413|  16.4k|                                break;
  414|       |
  415|  28.9k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 28.9k, False: 84.7k]
  ------------------
  416|  33.5k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 4.61k, False: 109k]
  ------------------
  417|  33.5k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 28.0k, False: 5.42k]
  |  Branch (417:37): [True: 22.4k, False: 11.0k]
  |  Branch (417:53): [True: 22.4k, False: 5.65k]
  ------------------
  418|  22.4k|                                {
  419|  22.4k|                                    return OpCode::ANDI;
  420|  22.4k|                                }
  421|       |
  422|  11.0k|                                break;
  423|   113k|                        }
  424|  46.1k|                        break;
  425|       |
  426|  46.1k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 36.3k, False: 1.71M]
  ------------------
  427|  86.5k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 50.2k, False: 1.69M]
  ------------------
  428|  86.5k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 9.64k, False: 76.8k]
  ------------------
  429|  86.5k|                        {
  430|  13.4k|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 13.4k, False: 73.0k]
  ------------------
  431|  18.1k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 4.62k, False: 81.9k]
  ------------------
  432|  18.1k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 13.0k, False: 5.02k]
  |  Branch (432:37): [True: 9.18k, False: 8.91k]
  |  Branch (432:53): [True: 9.18k, False: 3.89k]
  ------------------
  433|  9.18k|                                {
  434|  9.18k|                                    return OpCode::BEQZ;
  435|  9.18k|                                }
  436|  8.91k|                                break;
  437|       |
  438|  10.7k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 10.7k, False: 75.8k]
  ------------------
  439|  33.9k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 23.2k, False: 63.2k]
  ------------------
  440|  33.9k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 21.5k, False: 12.4k]
  ------------------
  441|  21.5k|                                {
  442|  21.5k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 9.67k, False: 11.8k]
  ------------------
  443|  9.67k|                                    {
  444|  9.67k|                                        return OpCode::BFPF;
  445|  9.67k|                                    }
  446|  11.8k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 7.49k, False: 4.38k]
  ------------------
  447|  7.49k|                                    {
  448|  7.49k|                                        return OpCode::BFPT;
  449|  7.49k|                                    }
  450|  21.5k|                                }
  451|  16.7k|                                break;
  452|       |
  453|  20.2k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 20.2k, False: 66.3k]
  ------------------
  454|  24.8k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 4.61k, False: 81.9k]
  ------------------
  455|  24.8k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 13.7k, False: 11.0k]
  |  Branch (455:37): [True: 7.75k, False: 17.0k]
  |  Branch (455:53): [True: 7.75k, False: 6.02k]
  ------------------
  456|  7.75k|                                {
  457|  7.75k|                                    return OpCode::BNEZ;
  458|  7.75k|                                }
  459|  86.5k|                        }
  460|  52.4k|                        break;
  461|       |
  462|  52.4k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 34.7k, False: 1.71M]
  ------------------
  463|  89.5k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 54.7k, False: 1.69M]
  ------------------
  464|  89.5k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 78.3k, False: 11.1k]
  |  Branch (464:29): [True: 68.2k, False: 21.2k]
  |  Branch (464:45): [True: 68.2k, False: 10.1k]
  ------------------
  465|  68.2k|                        {
  466|  68.2k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 28.9k, False: 39.2k]
  ------------------
  467|  68.2k|                            {
  468|  3.41k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 3.41k, False: 64.8k]
  ------------------
  469|  8.17k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 4.75k, False: 63.4k]
  ------------------
  470|  8.17k|                                    return OpCode::DIVD;
  471|       |
  472|  5.07k|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 5.07k, False: 63.1k]
  ------------------
  473|  8.23k|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 3.16k, False: 65.0k]
  ------------------
  474|  8.23k|                                    return OpCode::DIVF;
  475|       |
  476|  3.93k|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 3.93k, False: 64.3k]
  ------------------
  477|  7.01k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 3.08k, False: 65.1k]
  ------------------
  478|  7.01k|                                    return OpCode::DIVI;
  479|       |
  480|  10.8k|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 10.8k, False: 57.4k]
  ------------------
  481|  15.8k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 5.00k, False: 63.2k]
  ------------------
  482|  15.8k|                                    return OpCode::DIVU;
  483|  68.2k|                            }
  484|  68.2k|                        }
  485|  50.2k|                        break;
  486|       |
  487|  50.2k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 26.3k, False: 1.72M]
  ------------------
  488|  52.8k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 26.5k, False: 1.72M]
  ------------------
  489|  52.8k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 18.4k, False: 34.4k]
  |  Branch (489:29): [True: 7.86k, False: 44.9k]
  |  Branch (489:45): [True: 14.7k, False: 3.60k]
  |  Branch (489:61): [True: 7.86k, False: 6.93k]
  ------------------
  490|  7.86k|                        {
  491|  7.86k|                            return OpCode::HALT;
  492|  7.86k|                        }
  493|  44.9k|                        break;
  494|       |
  495|  44.9k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 35.5k, False: 1.71M]
  ------------------
  496|  49.8k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 14.3k, False: 1.73M]
  ------------------
  497|  49.8k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 20.9k, False: 28.9k]
  |  Branch (497:29): [True: 7.66k, False: 42.2k]
  |  Branch (497:45): [True: 16.8k, False: 4.08k]
  |  Branch (497:61): [True: 7.66k, False: 9.19k]
  ------------------
  498|  7.66k|                        {
  499|  7.66k|                            return OpCode::JALR;
  500|  7.66k|                        }
  501|  42.2k|                        break;
  502|       |
  503|  58.5k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 58.5k, False: 1.68M]
  ------------------
  504|  83.9k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 25.4k, False: 1.72M]
  ------------------
  505|  83.9k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 32.0k, False: 51.8k]
  |  Branch (505:29): [True: 25.3k, False: 58.6k]
  |  Branch (505:45): [True: 25.3k, False: 6.77k]
  ------------------
  506|  25.3k|                        {
  507|  25.3k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 7.79k, False: 17.5k]
  ------------------
  508|  7.79k|                            {
  509|  7.79k|                                return OpCode::MOVD;
  510|  7.79k|                            }
  511|  17.5k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 9.70k, False: 7.82k]
  ------------------
  512|  9.70k|                            {
  513|  9.70k|                                return OpCode::MOVF;
  514|  9.70k|                            }
  515|  25.3k|                        }
  516|  58.6k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 35.6k, False: 22.9k]
  |  Branch (516:34): [True: 7.85k, False: 50.7k]
  |  Branch (516:50): [True: 22.1k, False: 13.5k]
  |  Branch (516:66): [True: 7.85k, False: 14.2k]
  ------------------
  517|  7.85k|                        {
  518|  7.85k|                            return OpCode::MULT;
  519|  7.85k|                        }
  520|  58.6k|                        break;
  521|       |
  522|   238k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 238k, False: 1.50M]
  ------------------
  523|   425k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 187k, False: 1.55M]
  ------------------
  524|   425k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 73.2k, False: 352k]
  ------------------
  525|   425k|                        {
  526|  14.2k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 14.2k, False: 411k]
  ------------------
  527|  32.6k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 18.3k, False: 407k]
  ------------------
  528|  32.6k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 23.6k, False: 8.96k]
  ------------------
  529|  23.6k|                                {
  530|  23.6k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 7.37k, False: 16.2k]
  ------------------
  531|  7.37k|                                    {
  532|  7.37k|                                        return OpCode::SEQI;
  533|  7.37k|                                    }
  534|  16.2k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 11.7k, False: 4.51k]
  ------------------
  535|  11.7k|                                    {
  536|  11.7k|                                        return OpCode::SEQU;
  537|  11.7k|                                    }
  538|  23.6k|                                }
  539|  13.4k|                                break;
  540|       |
  541|  13.4k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 11.7k, False: 414k]
  ------------------
  542|  54.8k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 43.0k, False: 382k]
  ------------------
  543|  54.8k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 18.8k, False: 36.0k]
  ------------------
  544|  18.8k|                                {
  545|  18.8k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 6.28k, False: 12.5k]
  ------------------
  546|  6.28k|                                    {
  547|  6.28k|                                        return OpCode::SGEI;
  548|  6.28k|                                    }
  549|  12.5k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 8.28k, False: 4.25k]
  ------------------
  550|  8.28k|                                    {
  551|  8.28k|                                        return OpCode::SGEU;
  552|  8.28k|                                    }
  553|  18.8k|                                }
  554|  36.0k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 28.2k, False: 7.74k]
  ------------------
  555|  28.2k|                                {
  556|  28.2k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 10.1k, False: 18.1k]
  ------------------
  557|  10.1k|                                    {
  558|  10.1k|                                        return OpCode::SGTI;
  559|  10.1k|                                    }
  560|  18.1k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 7.81k, False: 10.3k]
  ------------------
  561|  7.81k|                                    {
  562|  7.81k|                                        return OpCode::SGTU;
  563|  7.81k|                                    }
  564|  28.2k|                                }
  565|  22.3k|                                break;
  566|       |
  567|  93.0k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 93.0k, False: 332k]
  ------------------
  568|   125k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 32.5k, False: 393k]
  ------------------
  569|   125k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 22.7k, False: 102k]
  ------------------
  570|   125k|                                {
  571|  12.1k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 12.1k, False: 113k]
  ------------------
  572|  21.4k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 9.21k, False: 116k]
  ------------------
  573|  21.4k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 12.4k, False: 8.95k]
  ------------------
  574|  12.4k|                                        {
  575|  12.4k|                                            return OpCode::SLAI;
  576|  12.4k|                                        }
  577|  8.95k|                                        break;
  578|       |
  579|  19.6k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 19.6k, False: 105k]
  ------------------
  580|  28.8k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 9.19k, False: 116k]
  ------------------
  581|  28.8k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 9.95k, False: 18.9k]
  ------------------
  582|  9.95k|                                        {
  583|  9.95k|                                            return OpCode::SLEI;
  584|  9.95k|                                        }
  585|  18.9k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 8.70k, False: 10.2k]
  ------------------
  586|  8.70k|                                        {
  587|  8.70k|                                            return OpCode::SLEU;
  588|  8.70k|                                        }
  589|  10.2k|                                        break;
  590|       |
  591|  14.3k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 14.3k, False: 111k]
  ------------------
  592|  20.1k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 5.77k, False: 119k]
  ------------------
  593|  20.1k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 9.71k, False: 10.4k]
  ------------------
  594|  9.71k|                                        {
  595|  9.71k|                                            return OpCode::SLLI;
  596|  9.71k|                                        }
  597|  10.4k|                                        break;
  598|       |
  599|  15.7k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 15.7k, False: 109k]
  ------------------
  600|  32.4k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 16.7k, False: 108k]
  ------------------
  601|  32.4k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 10.0k, False: 22.4k]
  ------------------
  602|  10.0k|                                        {
  603|  10.0k|                                            return OpCode::SLTI;
  604|  10.0k|                                        }
  605|  22.4k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 8.48k, False: 13.9k]
  ------------------
  606|  8.48k|                                        {
  607|  8.48k|                                            return OpCode::SLTU;
  608|  8.48k|                                        }
  609|  13.9k|                                        break;
  610|   125k|                                }
  611|       |
  612|  89.4k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 23.1k, False: 402k]
  ------------------
  613|  93.8k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 4.32k, False: 421k]
  ------------------
  614|  93.8k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 31.1k, False: 62.6k]
  ------------------
  615|  31.1k|                                {
  616|  31.1k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 7.99k, False: 23.2k]
  ------------------
  617|  7.99k|                                    {
  618|  7.99k|                                        return OpCode::SNEI;
  619|  7.99k|                                    }
  620|  23.2k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 10.6k, False: 12.5k]
  ------------------
  621|  10.6k|                                    {
  622|  10.6k|                                        return OpCode::SNEU;
  623|  10.6k|                                    }
  624|  31.1k|                                }
  625|  75.1k|                                break;
  626|       |
  627|  75.1k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 25.5k, False: 400k]
  ------------------
  628|  49.5k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 23.9k, False: 401k]
  ------------------
  629|  49.5k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 16.4k, False: 33.0k]
  |  Branch (629:37): [True: 7.45k, False: 42.0k]
  |  Branch (629:53): [True: 7.45k, False: 9.02k]
  ------------------
  630|  7.45k|                                {
  631|  7.45k|                                    return OpCode::SRAI;
  632|  7.45k|                                }
  633|  42.0k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 26.3k, False: 15.7k]
  |  Branch (633:42): [True: 19.2k, False: 22.8k]
  |  Branch (633:58): [True: 19.2k, False: 7.06k]
  ------------------
  634|  19.2k|                                {
  635|  19.2k|                                    return OpCode::SRLI;
  636|  19.2k|                                }
  637|  22.8k|                                break;
  638|       |
  639|  43.3k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 43.3k, False: 382k]
  ------------------
  640|  62.4k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 19.0k, False: 406k]
  ------------------
  641|  62.4k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 56.5k, False: 5.89k]
  ------------------
  642|  56.5k|                                {
  643|  56.5k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 14.3k, False: 42.1k]
  ------------------
  644|  56.5k|                                    {
  645|  6.17k|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 6.17k, False: 50.3k]
  ------------------
  646|  9.90k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 3.73k, False: 52.8k]
  ------------------
  647|  9.90k|                                            return OpCode::SUBD;
  648|       |
  649|  4.42k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 4.42k, False: 52.1k]
  ------------------
  650|  8.70k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 4.27k, False: 52.2k]
  ------------------
  651|  8.70k|                                            return OpCode::SUBF;
  652|       |
  653|  8.28k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 8.28k, False: 48.2k]
  ------------------
  654|  16.1k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 7.84k, False: 48.7k]
  ------------------
  655|  16.1k|                                            return OpCode::SUBI;
  656|       |
  657|  4.66k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 4.66k, False: 51.8k]
  ------------------
  658|  7.46k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 2.79k, False: 53.7k]
  ------------------
  659|  7.46k|                                            return OpCode::SUBU;
  660|  56.5k|                                    }
  661|  56.5k|                                }
  662|  20.2k|                                break;
  663|   425k|                        }
  664|   227k|                        break;
  665|       |
  666|   227k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 51.3k, False: 1.69M]
  ------------------
  667|  61.9k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 10.6k, False: 1.73M]
  ------------------
  668|  61.9k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 39.1k, False: 22.8k]
  |  Branch (668:29): [True: 14.3k, False: 47.6k]
  |  Branch (668:45): [True: 23.6k, False: 15.4k]
  |  Branch (668:61): [True: 14.3k, False: 9.31k]
  ------------------
  669|  14.3k|                        {
  670|  14.3k|                            return OpCode::TRAP;
  671|  14.3k|                        }
  672|  47.6k|                        break;
  673|  47.6k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 10.8k, False: 1.73M]
  ------------------
  674|  58.0k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 47.1k, False: 1.69M]
  ------------------
  675|  58.0k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 42.9k, False: 15.1k]
  |  Branch (675:29): [True: 8.33k, False: 49.7k]
  |  Branch (675:45): [True: 21.9k, False: 20.9k]
  |  Branch (675:61): [True: 8.33k, False: 13.6k]
  ------------------
  676|  8.33k|                        {
  677|  8.33k|                            return OpCode::XORI;
  678|  8.33k|                        }
  679|  49.7k|                        break;
  680|  1.74M|                }
  681|  1.34M|                break;
  682|  1.74M|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  1.34M|            case 5: {
  ------------------
  |  Branch (685:13): [True: 1.03M, False: 9.61M]
  ------------------
  686|  1.03M|                char c1 = token[0];
  687|  1.03M|                char c2 = token[1];
  688|  1.03M|                char c3 = token[2];
  689|  1.03M|                char c4 = token[3];
  690|  1.03M|                char c5 = token[4];
  691|       |
  692|  1.03M|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 518k, False: 512k]
  ------------------
  693|  1.03M|                {
  694|  6.90k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 6.90k, False: 1.02M]
  ------------------
  695|  72.2k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 65.3k, False: 964k]
  ------------------
  696|  72.2k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 49.9k, False: 22.2k]
  |  Branch (696:29): [True: 5.85k, False: 66.3k]
  |  Branch (696:45): [True: 39.4k, False: 10.5k]
  |  Branch (696:61): [True: 9.64k, False: 29.8k]
  |  Branch (696:77): [True: 5.85k, False: 3.78k]
  ------------------
  697|  5.85k|                        {
  698|  5.85k|                            return OpCode::ADDUI;
  699|  5.85k|                        }
  700|  66.3k|                        break;
  701|       |
  702|  66.3k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 43.6k, False: 986k]
  ------------------
  703|  94.3k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 50.7k, False: 979k]
  ------------------
  704|  94.3k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 86.9k, False: 7.46k]
  |  Branch (704:29): [True: 9.36k, False: 85.0k]
  |  Branch (704:45): [True: 77.9k, False: 8.96k]
  |  Branch (704:61): [True: 31.3k, False: 46.5k]
  |  Branch (704:77): [True: 9.36k, False: 22.0k]
  ------------------
  705|  9.36k|                        {
  706|  9.36k|                            return OpCode::DIVUI;
  707|  9.36k|                        }
  708|  85.0k|                        break;
  709|       |
  710|  85.0k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 41.2k, False: 989k]
  ------------------
  711|  98.2k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 57.0k, False: 973k]
  ------------------
  712|  98.2k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 71.9k, False: 26.3k]
  |  Branch (712:29): [True: 42.1k, False: 56.1k]
  |  Branch (712:45): [True: 63.8k, False: 8.03k]
  |  Branch (712:61): [True: 42.1k, False: 21.7k]
  ------------------
  713|  42.1k|                        {
  714|  42.1k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 7.79k, False: 34.3k]
  ------------------
  715|  42.1k|                            {
  716|  2.87k|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 2.87k, False: 39.3k]
  ------------------
  717|  6.05k|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 3.18k, False: 38.9k]
  ------------------
  718|  6.05k|                                    return OpCode::MULTD;
  719|       |
  720|  7.52k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 7.52k, False: 34.6k]
  ------------------
  721|  11.4k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 3.92k, False: 38.2k]
  ------------------
  722|  11.4k|                                    return OpCode::MULTF;
  723|       |
  724|  3.71k|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 3.71k, False: 38.4k]
  ------------------
  725|  7.38k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 3.66k, False: 38.5k]
  ------------------
  726|  7.38k|                                    return OpCode::MULTI;
  727|       |
  728|  3.35k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 3.35k, False: 38.8k]
  ------------------
  729|  9.49k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 6.14k, False: 36.0k]
  ------------------
  730|  9.49k|                                    return OpCode::MULTU;
  731|  42.1k|                            }
  732|  42.1k|                        }
  733|  63.9k|                        break;
  734|       |
  735|  86.1k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 86.1k, False: 944k]
  ------------------
  736|   247k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 161k, False: 869k]
  ------------------
  737|   247k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 37.4k, False: 209k]
  ------------------
  738|   247k|                        {
  739|  23.8k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 23.8k, False: 223k]
  ------------------
  740|  42.5k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 18.7k, False: 228k]
  ------------------
  741|  42.5k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 29.5k, False: 13.0k]
  |  Branch (741:37): [True: 7.92k, False: 34.6k]
  |  Branch (741:53): [True: 18.6k, False: 10.8k]
  |  Branch (741:69): [True: 7.92k, False: 10.7k]
  ------------------
  742|  7.92k|                                {
  743|  7.92k|                                    return OpCode::SEQUI;
  744|  7.92k|                                }
  745|  34.6k|                                break;
  746|       |
  747|  34.6k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 11.5k, False: 235k]
  ------------------
  748|  47.1k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 35.5k, False: 211k]
  ------------------
  749|  47.1k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 19.7k, False: 27.4k]
  |  Branch (749:37): [True: 6.49k, False: 40.6k]
  |  Branch (749:53): [True: 16.2k, False: 3.53k]
  |  Branch (749:69): [True: 6.49k, False: 9.70k]
  ------------------
  750|  6.49k|                                {
  751|  6.49k|                                    return OpCode::SGEUI;
  752|  6.49k|                                }
  753|  40.6k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 22.7k, False: 17.9k]
  |  Branch (753:42): [True: 7.39k, False: 33.2k]
  |  Branch (753:58): [True: 9.62k, False: 13.1k]
  |  Branch (753:74): [True: 7.39k, False: 2.23k]
  ------------------
  754|  7.39k|                                {
  755|  7.39k|                                    return OpCode::SGTUI;
  756|  7.39k|                                }
  757|  33.2k|                                break;
  758|       |
  759|  37.2k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 37.2k, False: 210k]
  ------------------
  760|  57.8k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 20.5k, False: 226k]
  ------------------
  761|  57.8k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 19.8k, False: 38.0k]
  |  Branch (761:37): [True: 8.14k, False: 49.7k]
  |  Branch (761:53): [True: 11.8k, False: 8.00k]
  |  Branch (761:69): [True: 8.14k, False: 3.70k]
  ------------------
  762|  8.14k|                                {
  763|  8.14k|                                    return OpCode::SLEUI;
  764|  8.14k|                                }
  765|  49.7k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 20.0k, False: 29.6k]
  |  Branch (765:42): [True: 7.19k, False: 42.5k]
  |  Branch (765:58): [True: 12.9k, False: 7.14k]
  |  Branch (765:74): [True: 7.19k, False: 5.72k]
  ------------------
  766|  7.19k|                                {
  767|  7.19k|                                    return OpCode::SLTUI;
  768|  7.19k|                                }
  769|  42.5k|                                break;
  770|       |
  771|  42.5k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 21.5k, False: 225k]
  ------------------
  772|  34.6k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 13.1k, False: 234k]
  ------------------
  773|  34.6k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 24.5k, False: 10.0k]
  |  Branch (773:37): [True: 7.80k, False: 26.8k]
  |  Branch (773:53): [True: 20.3k, False: 4.25k]
  |  Branch (773:69): [True: 7.80k, False: 12.5k]
  ------------------
  774|  7.80k|                                {
  775|  7.80k|                                    return OpCode::SNEUI;
  776|  7.80k|                                }
  777|  26.8k|                                break;
  778|       |
  779|  26.8k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 18.9k, False: 228k]
  ------------------
  780|  27.6k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 8.69k, False: 238k]
  ------------------
  781|  27.6k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 23.2k, False: 4.37k]
  |  Branch (781:37): [True: 9.50k, False: 18.1k]
  |  Branch (781:53): [True: 18.5k, False: 4.68k]
  |  Branch (781:69): [True: 9.50k, False: 9.08k]
  ------------------
  782|  9.50k|                                {
  783|  9.50k|                                    return OpCode::SUBUI;
  784|  9.50k|                                }
  785|  18.1k|                                break;
  786|   247k|                        }
  787|       |
  788|   192k|                        break;
  789|  1.03M|                }
  790|       |
  791|   926k|                break;
  792|  1.03M|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|   926k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 634k, False: 10.0M]
  ------------------
  796|   634k|                char c1 = token[0];
  797|   634k|                char c2 = token[1];
  798|   634k|                char c3 = token[2];
  799|   634k|                char c4 = token[3];
  800|   634k|                char c5 = token[4];
  801|   634k|                char c6 = token[5];
  802|       |
  803|   634k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 91.2k, False: 543k]
  |  Branch (803:21): [True: 76.2k, False: 558k]
  |  Branch (803:37): [True: 83.6k, False: 7.60k]
  |  Branch (803:53): [True: 76.2k, False: 7.43k]
  ------------------
  804|  76.2k|                {
  805|  76.2k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 4.97k, False: 71.2k]
  ------------------
  806|  76.2k|                    {
  807|  10.2k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 10.2k, False: 66.0k]
  ------------------
  808|  19.8k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 9.61k, False: 66.6k]
  ------------------
  809|  19.8k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 17.2k, False: 2.64k]
  ------------------
  810|  17.2k|                            {
  811|  17.2k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 7.20k, False: 9.99k]
  ------------------
  812|  7.20k|                                {
  813|  7.20k|                                    return OpCode::CVTD2F;
  814|  7.20k|                                }
  815|  9.99k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 6.14k, False: 3.85k]
  ------------------
  816|  6.14k|                                {
  817|  6.14k|                                    return OpCode::CVTD2I;
  818|  6.14k|                                }
  819|  17.2k|                            }
  820|  6.49k|                            break;
  821|       |
  822|  20.7k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 20.7k, False: 55.4k]
  ------------------
  823|  25.6k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 4.89k, False: 71.3k]
  ------------------
  824|  25.6k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 21.8k, False: 3.84k]
  ------------------
  825|  21.8k|                            {
  826|  21.8k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 7.59k, False: 14.2k]
  ------------------
  827|  7.59k|                                {
  828|  7.59k|                                    return OpCode::CVTF2D;
  829|  7.59k|                                }
  830|  14.2k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 8.25k, False: 5.99k]
  ------------------
  831|  8.25k|                                {
  832|  8.25k|                                    return OpCode::CVTF2I;
  833|  8.25k|                                }
  834|  21.8k|                            }
  835|  9.84k|                            break;
  836|       |
  837|  22.3k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 22.3k, False: 53.9k]
  ------------------
  838|  25.7k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 3.39k, False: 72.8k]
  ------------------
  839|  25.7k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 19.6k, False: 6.11k]
  ------------------
  840|  19.6k|                            {
  841|  19.6k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 8.32k, False: 11.2k]
  ------------------
  842|  8.32k|                                {
  843|  8.32k|                                    return OpCode::CVTI2D;
  844|  8.32k|                                }
  845|  11.2k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 8.24k, False: 3.05k]
  ------------------
  846|  8.24k|                                {
  847|  8.24k|                                    return OpCode::CVTI2F;
  848|  8.24k|                                }
  849|  19.6k|                            }
  850|  76.2k|                    }
  851|  76.2k|                }
  852|   558k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 91.7k, False: 466k]
  |  Branch (852:26): [True: 4.63k, False: 553k]
  |  Branch (852:42): [True: 73.9k, False: 17.8k]
  |  Branch (852:58): [True: 65.2k, False: 8.64k]
  |  Branch (852:74): [True: 45.6k, False: 19.6k]
  ------------------
  853|   558k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 11.4k, False: 34.1k]
  |  Branch (853:42): [True: 4.63k, False: 6.85k]
  ------------------
  854|  4.63k|                {
  855|  4.63k|                    return OpCode::MULTUI;
  856|  4.63k|                }
  857|   584k|                break;
  858|   634k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|   584k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 414k, False: 10.2M]
  ------------------
  862|   414k|                char c1 = token[0];
  863|   414k|                char c2 = token[1];
  864|   414k|                char c3 = token[2];
  865|   414k|                char c4 = token[3];
  866|   414k|                char c5 = token[4];
  867|   414k|                char c6 = token[5];
  868|   414k|                char c7 = token[6];
  869|       |
  870|   414k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 88.2k, False: 326k]
  |  Branch (870:21): [True: 41.1k, False: 373k]
  |  Branch (870:37): [True: 47.4k, False: 40.7k]
  |  Branch (870:53): [True: 41.1k, False: 6.29k]
  ------------------
  871|  41.1k|                {
  872|  41.1k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 13.3k, False: 27.7k]
  |  Branch (872:25): [True: 2.66k, False: 38.4k]
  |  Branch (872:41): [True: 8.41k, False: 4.93k]
  |  Branch (872:54): [True: 6.51k, False: 1.90k]
  |  Branch (872:70): [True: 2.66k, False: 3.85k]
  ------------------
  873|  2.66k|                    {
  874|  2.66k|                        return OpCode::MOVI2FP;
  875|  2.66k|                    }
  876|  38.4k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 21.2k, False: 17.2k]
  |  Branch (876:30): [True: 5.03k, False: 33.4k]
  |  Branch (876:46): [True: 14.1k, False: 7.12k]
  |  Branch (876:62): [True: 8.37k, False: 5.74k]
  |  Branch (876:75): [True: 5.03k, False: 3.33k]
  ------------------
  877|  5.03k|                    {
  878|  5.03k|                        return OpCode::MOVFP2I;
  879|  5.03k|                    }
  880|  41.1k|                }
  881|   406k|                break;
  882|   414k|            }
  883|       |
  884|  1.50M|            default: {
  ------------------
  |  Branch (884:13): [True: 1.50M, False: 9.14M]
  ------------------
  885|  1.50M|                break;
  886|   414k|            }
  887|  10.6M|        }
  888|       |
  889|       |        // None found
  890|  9.11M|        return OpCode::NONE;
  891|  10.6M|    }
_ZN3dlx3iceEcc:
   17|  9.03M|    {
   18|  9.03M|        constexpr const char diff = 'a' - 'A';
   19|  9.03M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 1.98M, False: 7.04M]
  |  Branch (19:28): [True: 1.79M, False: 5.25M]
  ------------------
   20|  9.03M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  14.6M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|   106k|    {
  193|   106k|        ParseError err;
  194|       |
  195|   106k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|   106k|        err.m_LineNumber                           = line_number;
  197|   106k|        err.m_Column                               = column;
  198|   106k|        err.unexpected_argument_type.expected_type = expected_type;
  199|   106k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|   106k|        return err;
  202|   106k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|   106k|    {
  207|   106k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|   106k|                                                         token.GetColumn().unsafe(), expected_type,
  209|   106k|                                                         actual_type);
  210|   106k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|  3.55k|    {
  216|  3.55k|        ParseError err;
  217|       |
  218|  3.55k|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|  3.55k|        err.m_LineNumber        = line_number;
  220|  3.55k|        err.m_Column            = column;
  221|  3.55k|        err.invalid_number.text = text;
  222|       |
  223|  3.55k|        return err;
  224|  3.55k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|  3.55k|    {
  228|  3.55k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|  3.55k|                                                token.GetColumn().unsafe(), token.GetText());
  230|  3.55k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|     20|    {
  235|     20|        ParseError err;
  236|       |
  237|     20|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|     20|        err.m_LineNumber = line_number;
  239|     20|        err.m_Column     = column;
  240|       |
  241|     20|        return err;
  242|     20|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|     20|    {
  247|     20|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|     20|                                                                     token.GetColumn().unsafe());
  249|     20|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|  8.88M|    {
  255|  8.88M|        ParseError err;
  256|       |
  257|  8.88M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|  8.88M|        err.m_LineNumber                   = line_number;
  259|  8.88M|        err.m_Column                       = column;
  260|  8.88M|        err.unexpected_token.expected_type = expected_type;
  261|  8.88M|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|  8.88M|        return err;
  264|  8.88M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|  8.88M|    {
  269|  8.88M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|  8.88M|                                                  token.GetColumn().unsafe(), expected_type,
  271|  8.88M|                                                  token.GetType());
  272|  8.88M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|   404k|    {
  277|   404k|        ParseError err;
  278|       |
  279|   404k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|   404k|        err.m_LineNumber                   = line_number;
  281|   404k|        err.m_Column                       = column;
  282|   404k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|   404k|        return err;
  285|   404k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  5.80k|    {
  289|  5.80k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  5.80k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  5.80k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|  3.95M|    {
  296|  3.95M|        ParseError err;
  297|       |
  298|  3.95M|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|  3.95M|        err.m_LineNumber                       = line_number;
  300|  3.95M|        err.m_Column                           = column;
  301|  3.95M|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|  3.95M|        return err;
  304|  3.95M|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|  3.95M|    {
  309|  3.95M|        return ConstructInvalidLabelIdentifierParseError(
  310|  3.95M|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|  3.95M|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|   413k|    {
  317|   413k|        ParseError err;
  318|       |
  319|   413k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|   413k|        err.m_LineNumber                     = line_number;
  321|   413k|        err.m_Column                         = column;
  322|   413k|        err.label_already_defined.label_name = label_name;
  323|   413k|        err.label_already_defined.at_line    = at_line;
  324|   413k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|   413k|        return err;
  327|   413k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|   413k|    {
  332|   413k|        return ConstructLabelAlreadyDefinedParseError(
  333|   413k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|   413k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|   413k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   585k|    {
  340|   585k|        ParseError err;
  341|       |
  342|   585k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   585k|        err.m_LineNumber = line_number;
  344|   585k|        err.m_Column     = column;
  345|       |
  346|   585k|        return err;
  347|   585k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   585k|    {
  352|   585k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   585k|                                                        token.GetColumn().unsafe());
  354|   585k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|   182k|    {
  360|   182k|        ParseError err;
  361|       |
  362|   182k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|   182k|        err.m_LineNumber               = line_number;
  364|   182k|        err.m_Column                   = column;
  365|   182k|        err.too_few_arguments.required = required;
  366|   182k|        err.too_few_arguments.provided = provided;
  367|       |
  368|   182k|        return err;
  369|   182k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|   182k|    {
  374|   182k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|   182k|                                                  token.GetColumn().unsafe(), required, provided);
  376|   182k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|   106k|    {
  381|   106k|        ParseError err;
  382|       |
  383|   106k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|   106k|        err.m_LineNumber           = line_number;
  385|   106k|        err.m_Column               = column;
  386|   106k|        err.empty_label.label_name = label_name;
  387|       |
  388|   106k|        return err;
  389|   106k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|   106k|    {
  393|   106k|        return ConstructEmptyLabelParseError(
  394|   106k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|   106k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 67.5k, False: 38.7k]
  ------------------
  396|  67.5k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|   106k|                        token.GetText());
  398|   106k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  49.8k|    {
  403|  49.8k|        ParseError err;
  404|       |
  405|  49.8k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  49.8k|        err.m_LineNumber = line_number;
  407|  49.8k|        err.m_Column     = column;
  408|       |
  409|  49.8k|        return err;
  410|  49.8k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  49.8k|    {
  414|  49.8k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  49.8k|                                               token.GetColumn().unsafe());
  416|  49.8k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  14.6M|    {
   19|  14.6M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  14.6M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  90.3k|    {
  182|  90.3k|        ParsedProgram program;
  183|       |
  184|  90.3k|        program.m_Tokens = tokens;
  185|       |
  186|  90.3k|        phi::boolean line_has_instruction{false};
  187|  90.3k|        phi::usize   label_count{0u};
  188|       |
  189|  16.8M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 16.7M, False: 90.3k]
  ------------------
  190|  16.7M|        {
  191|  16.7M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  16.7M|            switch (current_token.GetType())
  196|  16.7M|            {
  197|       |                // Ignore comments
  198|  64.4k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 64.4k, False: 16.6M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  64.4k|                    break;
  201|       |
  202|  1.89M|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 1.89M, False: 14.8M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|  1.89M|                    line_has_instruction = false;
  205|  1.89M|                    break;
  206|       |
  207|  6.98M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 6.98M, False: 9.72M]
  ------------------
  208|  6.98M|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 2.16M, False: 4.82M]
  ------------------
  209|  2.16M|                    {
  210|  2.16M|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  2.16M|                                current_token, Token::Type::NewLine));
  212|  2.16M|                        break;
  213|  2.16M|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|  4.82M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 2.69M, False: 2.13M]
  ------------------
  218|  2.69M|                    {
  219|  2.69M|                        program.AddParseError(
  220|  2.69M|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|  2.69M|                        break;
  222|  2.69M|                    }
  223|       |
  224|  2.13M|                    std::string_view label_name = current_token.GetText();
  225|  2.13M|                    label_name.remove_suffix(1);
  226|       |
  227|  2.13M|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 399k, False: 1.73M]
  ------------------
  228|   399k|                    {
  229|   399k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|   399k|                                current_token.GetLineNumber().unsafe(),
  231|   399k|                                current_token.GetColumn().unsafe(), label_name));
  232|   399k|                        break;
  233|   399k|                    }
  234|       |
  235|  1.73M|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 1.17M, False: 564k]
  ------------------
  236|  1.17M|                    {
  237|  1.17M|                        program.AddParseError(
  238|  1.17M|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  1.17M|                        break;
  240|  1.17M|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|   564k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 413k, False: 150k]
  ------------------
  244|   413k|                    {
  245|       |                        // Find first defintions of label
  246|   413k|                        const Token* first_label_definition =
  247|   413k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   413k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|   413k|                                    {
  250|   413k|                                        std::string_view token_label_name = t.GetText();
  251|   413k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   413k|                                        if (token_label_name == label_name)
  254|   413k|                                        {
  255|   413k|                                            return true;
  256|   413k|                                        }
  257|   413k|                                    }
  258|       |
  259|   413k|                                    return false;
  260|   413k|                                });
  261|       |
  262|   413k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|   413k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|   413k|                                current_token, *first_label_definition));
  266|   413k|                        break;
  267|   413k|                    }
  268|       |
  269|   150k|                    program.m_JumpData[label_name] =
  270|   150k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|   150k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|   150k|                    break;
  277|   564k|                }
  278|       |
  279|  1.15M|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 1.15M, False: 15.5M]
  ------------------
  280|  1.15M|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 585k, False: 569k]
  ------------------
  281|   585k|                    {
  282|   585k|                        program.AddParseError(
  283|   585k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   585k|                        break;
  285|   585k|                    }
  286|       |
  287|   569k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|   569k|                    PHI_ASSERT(current_token.HasHint());
  291|   569k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|   569k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|   569k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|   569k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|   569k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|   569k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|   569k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|   569k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|   569k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|  1.01M|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 961k, False: 54.3k]
  ------------------
  313|   961k|                    {
  314|       |                        // Get next token
  315|   961k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 2.50k, False: 958k]
  ------------------
  316|  2.50k|                        {
  317|  2.50k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|  2.50k|                                    current_token, number_of_argument_required.unsafe(),
  319|  2.50k|                                    argument_num.unsafe()));
  320|  2.50k|                            break;
  321|  2.50k|                        }
  322|       |
  323|   958k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   958k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 365k, False: 593k]
  ------------------
  327|   365k|                        {
  328|   365k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 49.8k, False: 315k]
  ------------------
  329|  49.8k|                            {
  330|  49.8k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  49.8k|                            }
  332|       |
  333|   365k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|   365k|                            continue;
  336|   365k|                        }
  337|       |
  338|   593k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 180k, False: 413k]
  ------------------
  339|   180k|                        {
  340|   180k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|   180k|                                    token, number_of_argument_required.unsafe(),
  342|   180k|                                    argument_num.unsafe()));
  343|   180k|                            break;
  344|   180k|                        }
  345|       |
  346|   413k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|   413k|                                parse_instruction_argument(
  348|   413k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|   413k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 332k, False: 81.1k]
  ------------------
  350|   332k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|   332k|                            break;
  353|   332k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  81.1k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  81.1k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  81.1k|                        argument_num++;
  360|  81.1k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  81.1k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|   569k|                    program.m_Instructions.emplace_back(instruction);
  368|   569k|                    line_has_instruction = true;
  369|   569k|                    break;
  370|  1.15M|                }
  371|       |
  372|  6.60M|                default:
  ------------------
  |  Branch (372:17): [True: 6.60M, False: 10.1M]
  ------------------
  373|  6.60M|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|  6.60M|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 2.94M, False: 3.65M]
  ------------------
  375|  2.94M|                    {
  376|  2.94M|                        expected_token_type = Token::Type::NewLine;
  377|  2.94M|                    }
  378|       |
  379|  6.60M|                    program.AddParseError(
  380|  6.60M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|  6.60M|                    break;
  382|  16.7M|            }
  383|  16.7M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  90.3k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 22.4k, False: 67.8k]
  ------------------
  387|  22.4k|        {
  388|   189k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 166k, False: 22.4k]
  ------------------
  389|   166k|            {
  390|   166k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|   166k|                const Token& token = *it;
  393|   166k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 106k, False: 60.5k]
  ------------------
  394|   106k|                {
  395|   106k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|   106k|                    --label_count;
  397|   106k|                }
  398|   166k|            }
  399|  22.4k|        }
  400|       |
  401|  90.3k|        return program;
  402|  90.3k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  90.3k|    {
  406|  90.3k|        TokenStream tokens = Tokenize(source);
  407|  90.3k|        return Parse(tokens);
  408|  90.3k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|   413k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|   413k|        switch (token.GetType())
   38|   413k|        {
   39|  19.3k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 19.3k, False: 394k]
  ------------------
   40|  19.3k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 4.86k, False: 14.4k]
  ------------------
   41|  19.3k|                                          ArgumentType::AddressDisplacement))
   42|  4.86k|                {
   43|  4.86k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  4.86k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  4.86k|                    return {};
   47|  4.86k|                }
   48|       |
   49|       |                // Get address displacement
   50|  14.4k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  14.4k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  14.4k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 20, False: 14.4k]
  ------------------
   55|     20|                {
   56|     20|                    program.AddParseError(
   57|     20|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|     20|                    return {};
   59|     20|                }
   60|       |
   61|  14.4k|                auto         it           = tokens.current_position();
   62|  14.4k|                const Token& first_token  = tokens.consume();
   63|  14.4k|                const Token& second_token = tokens.consume();
   64|  14.4k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  14.4k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 3.91k, False: 10.5k]
  ------------------
   67|  3.91k|                {
   68|  3.91k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  3.91k|                            first_token, Token::Type::OpenBracket));
   70|  3.91k|                    return {};
   71|  3.91k|                }
   72|       |
   73|       |                // Second token is the register
   74|  10.5k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 3.31k, False: 7.19k]
  ------------------
   75|  3.31k|                {
   76|  3.31k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|  3.31k|                            second_token, Token::Type::RegisterInt));
   78|  3.31k|                    return {};
   79|  3.31k|                }
   80|       |
   81|  7.19k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 5.07k, False: 2.12k]
  ------------------
   82|  5.07k|                {
   83|  5.07k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|  5.07k|                            third_token, Token::Type::ClosingBracket));
   85|  5.07k|                    return {};
   86|  5.07k|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|  2.12k|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|  2.12k|                return ConstructInstructionArgumentAddressDisplacement(
   95|  2.12k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|  7.19k|            }
   97|  29.6k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 29.6k, False: 383k]
  ------------------
   98|  29.6k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 5.22k, False: 24.4k]
  ------------------
   99|  5.22k|                {
  100|  5.22k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  5.22k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  5.22k|                    return {};
  103|  5.22k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  24.4k|                return ConstructInstructionArgumentRegisterInt(
  109|  24.4k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  29.6k|            }
  111|  11.6k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 11.6k, False: 401k]
  ------------------
  112|  11.6k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 4.34k, False: 7.26k]
  ------------------
  113|  4.34k|                {
  114|  4.34k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  4.34k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  4.34k|                    return {};
  117|  4.34k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  7.26k|                return ConstructInstructionArgumentRegisterFloat(
  123|  7.26k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  11.6k|            }
  125|  5.80k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 5.80k, False: 407k]
  ------------------
  126|  5.80k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  5.80k|                return {};
  129|  11.6k|            }
  130|   231k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 231k, False: 181k]
  ------------------
  131|       |                // Parse as Label
  132|   231k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 88.2k, False: 143k]
  ------------------
  133|  88.2k|                {
  134|  88.2k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  88.2k|                            token, expected_argument_type, ArgumentType::Label));
  136|  88.2k|                    return {};
  137|  88.2k|                }
  138|       |
  139|   143k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 143k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|   143k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 98.5k, False: 44.7k]
  ------------------
  146|  98.5k|                {
  147|  98.5k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  98.5k|                    return {};
  149|  98.5k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  44.7k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|   143k|            }
  155|  9.71k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 9.71k, False: 403k]
  ------------------
  156|  9.71k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 3.66k, False: 6.05k]
  ------------------
  157|  3.66k|                {
  158|  3.66k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  3.66k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  3.66k|                    return {};
  161|  3.66k|                }
  162|       |
  163|  6.05k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 2.50k, False: 3.55k]
  ------------------
  164|  2.50k|                {
  165|  2.50k|                    return ConstructInstructionArgumentImmediateValue(
  166|  2.50k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  2.50k|                }
  168|       |
  169|  3.55k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|  3.55k|                return {};
  171|  6.05k|            }
  172|       |
  173|   105k|            default:
  ------------------
  |  Branch (173:13): [True: 105k, False: 307k]
  ------------------
  174|   105k|                program.AddParseError(
  175|   105k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|   105k|                return {};
  177|   413k|        }
  178|   413k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  12.7M|                                tokens.find_first_token_if([&](const Token& t) {
  248|  12.7M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 6.83M, False: 5.91M]
  ------------------
  249|  6.83M|                                    {
  250|  6.83M|                                        std::string_view token_label_name = t.GetText();
  251|  6.83M|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  6.83M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 413k, False: 6.41M]
  ------------------
  254|   413k|                                        {
  255|   413k|                                            return true;
  256|   413k|                                        }
  257|  6.83M|                                    }
  258|       |
  259|  12.3M|                                    return false;
  260|  12.7M|                                });

_ZN3dlx9ProcessorC2Ev:
   63|      1|    {
   64|       |        // Mark R0 as ready only
   65|      1|        m_IntRegisters[0].SetReadOnly(true);
   66|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   69|      8|    {
   70|      8|        PHI_ASSERT(id != IntRegisterID::None);
   71|      8|        phi::size_t id_value = phi::to_underlying(id);
   72|       |
   73|      8|        PHI_ASSERT(id_value < m_IntRegisters.size());
   74|       |
   75|      8|        return m_IntRegisters[id_value];
   76|      8|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   80|  10.0k|    {
   81|  10.0k|        PHI_ASSERT(id != IntRegisterID::None);
   82|  10.0k|        phi::size_t id_value = phi::to_underlying(id);
   83|       |
   84|  10.0k|        PHI_ASSERT(id_value < m_IntRegisters.size());
   85|       |
   86|  10.0k|        return m_IntRegisters[id_value];
   87|  10.0k|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   90|      6|    {
   91|      6|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   92|      6|                                             RegisterAccessType::Signed),
   93|      6|                   "Mismatch for instruction access type");
   94|       |
   95|      6|        const phi::size_t id_value = phi::to_underlying(id);
   96|       |
   97|      6|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   98|      6|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
   99|      6|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (99:13): [True: 0, False: 6]
  ------------------
  100|      6|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (100:13): [True: 0, False: 0]
  ------------------
  101|      0|        {
  102|      0|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  103|      0|        }
  104|       |
  105|      6|        return GetIntRegister(id).GetSignedValue();
  106|      6|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  109|  10.0k|    {
  110|  10.0k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  111|  10.0k|                                             RegisterAccessType::Unsigned),
  112|  10.0k|                   "Mismatch for instruction access type");
  113|       |
  114|  10.0k|        const phi::size_t id_value = phi::to_underlying(id);
  115|       |
  116|  10.0k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  117|  10.0k|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  118|  10.0k|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (118:13): [True: 1, False: 10.0k]
  ------------------
  119|  10.0k|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (119:13): [True: 0, False: 1]
  ------------------
  120|      0|        {
  121|      0|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  122|      0|        }
  123|       |
  124|  10.0k|        return GetIntRegister(id).GetUnsignedValue();
  125|  10.0k|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  128|      3|    {
  129|      3|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  130|      3|                                             RegisterAccessType::Signed),
  131|      3|                   "Mismatch for instruction access type");
  132|       |
  133|      3|        IntRegister& reg = GetIntRegister(id);
  134|       |
  135|      3|        if (reg.IsReadOnly())
  ------------------
  |  Branch (135:13): [True: 1, False: 2]
  ------------------
  136|      1|        {
  137|      1|            return;
  138|      1|        }
  139|       |
  140|      2|        reg.SetSignedValue(value);
  141|       |
  142|      2|        const phi::size_t id_value = phi::to_underlying(id);
  143|       |
  144|      2|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  145|      2|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  146|      2|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  149|      5|    {
  150|      5|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  151|      5|                                             RegisterAccessType::Unsigned),
  152|      5|                   "Mismatch for instruction access type");
  153|       |
  154|      5|        IntRegister& reg = GetIntRegister(id);
  155|       |
  156|      5|        if (reg.IsReadOnly())
  ------------------
  |  Branch (156:13): [True: 2, False: 3]
  ------------------
  157|      2|        {
  158|      2|            return;
  159|      2|        }
  160|       |
  161|      3|        reg.SetUnsignedValue(value);
  162|       |
  163|      3|        const phi::size_t id_value = phi::to_underlying(id);
  164|       |
  165|      3|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  166|      3|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  167|      3|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  170|    124|    {
  171|    124|        PHI_ASSERT(id != FloatRegisterID::None);
  172|    124|        const phi::size_t id_value = phi::to_underlying(id);
  173|       |
  174|    124|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  175|       |
  176|    124|        return m_FloatRegisters[id_value];
  177|    124|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  181|     36|    {
  182|     36|        PHI_ASSERT(id != FloatRegisterID::None);
  183|     36|        const phi::size_t id_value = phi::to_underlying(id);
  184|       |
  185|     36|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  186|       |
  187|     36|        return m_FloatRegisters[id_value];
  188|     36|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  191|     36|    {
  192|     36|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  193|     36|                                             RegisterAccessType::Float),
  194|     36|                   "Mismatch for instruction access type");
  195|       |
  196|     36|        const phi::size_t id_value = phi::to_underlying(id);
  197|       |
  198|     36|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  199|     36|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  200|     36|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (200:13): [True: 0, False: 36]
  ------------------
  201|     36|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (201:13): [True: 0, False: 0]
  ------------------
  202|      0|        {
  203|       |            /*
  204|       |            DLX_WARN("Mismatch for register value type");
  205|       |            */
  206|      0|        }
  207|       |
  208|     36|        const FloatRegister& reg = GetFloatRegister(id);
  209|       |
  210|     36|        return reg.GetValue();
  211|     36|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  214|     76|    {
  215|     76|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  216|     76|                                             RegisterAccessType::Double),
  217|     76|                   "Mismatch for instruction access type");
  218|       |
  219|     76|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (219:13): [True: 14, False: 62]
  ------------------
  220|     14|        {
  221|     14|            Raise(Exception::MisalignedRegisterAccess);
  222|     14|            return {0.0};
  223|     14|        }
  224|       |
  225|     62|        const phi::size_t id_value = phi::to_underlying(id);
  226|       |
  227|     62|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  228|     62|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  229|     62|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (229:13): [True: 0, False: 62]
  ------------------
  230|     62|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (230:13): [True: 0, False: 0]
  ------------------
  231|      0|        {
  232|      0|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  233|      0|        }
  234|       |
  235|     62|        const FloatRegisterValueType register_value_type_high =
  236|     62|                m_FloatRegistersValueTypes[id_value + 1u];
  237|     62|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (237:13): [True: 0, False: 62]
  ------------------
  238|     62|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (238:13): [True: 0, False: 0]
  ------------------
  239|      0|        {
  240|      0|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  241|      0|        }
  242|       |
  243|     62|        const FloatRegister& first_reg = GetFloatRegister(id);
  244|     62|        const FloatRegister& second_reg =
  245|     62|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  246|       |
  247|     62|        const float first_value  = first_reg.GetValue().unsafe();
  248|     62|        const float second_value = second_reg.GetValue().unsafe();
  249|       |
  250|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  251|     62|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  252|       |
  253|     62|        const std::uint32_t first_value_bits =
  254|     62|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  255|     62|        const std::uint32_t second_value_bits =
  256|     62|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  257|       |
  258|     62|        std::uint64_t final_value_bits =
  259|     62|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  260|       |
  261|     62|        return *reinterpret_cast<double*>(&final_value_bits);
  262|       |
  263|     76|        PHI_CLANG_SUPPRESS_WARNING_POP()
  264|     76|    }
_ZN3dlx9Processor7GetFPSREv:
  321|     56|    {
  322|     56|        return m_FPSR;
  323|     56|    }
_ZNK3dlx9Processor7GetFPSREv:
  326|      4|    {
  327|      4|        return m_FPSR;
  328|      4|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  331|      4|    {
  332|      4|        const StatusRegister& status_reg = GetFPSR();
  333|       |
  334|      4|        return status_reg.Get();
  335|      4|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  338|     56|    {
  339|     56|        StatusRegister& status_reg = GetFPSR();
  340|       |
  341|     56|        status_reg.SetStatus(value);
  342|     56|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  345|  50.9k|    {
  346|  50.9k|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  347|       |
  348|  50.9k|        inst.Execute(*this);
  349|  50.9k|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  352|  90.3k|    {
  353|  90.3k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (353:13): [True: 89.9k, False: 395]
  ------------------
  354|  89.9k|        {
  355|  89.9k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  89.9k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  356|  89.9k|            return false;
  357|  89.9k|        }
  358|       |
  359|    395|        m_CurrentProgram = &program;
  360|       |
  361|    395|        m_ProgramCounter               = 0u;
  362|    395|        m_Halted                       = false;
  363|    395|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  364|    395|        m_LastRaisedException          = Exception::None;
  365|    395|        m_CurrentStepCount             = 0u;
  366|       |
  367|    395|        return true;
  368|  90.3k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  372|  50.1k|    {
  373|  50.1k|        return m_CurrentProgram;
  374|  50.1k|    }
_ZN3dlx9Processor11ExecuteStepEv:
  377|  51.1k|    {
  378|       |        // No nothing when no program is loaded
  379|  51.1k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (379:13): [True: 0, False: 51.1k]
  ------------------
  380|      0|        {
  381|      0|            return;
  382|      0|        }
  383|       |
  384|       |        // Halt if there are no instruction to execute
  385|  51.1k|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (385:13): [True: 164, False: 50.9k]
  ------------------
  386|    164|        {
  387|    164|            m_Halted                       = true;
  388|    164|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  389|    164|        }
  390|       |
  391|       |        // Do nothing when processor is halted
  392|  51.1k|        if (m_Halted)
  ------------------
  |  Branch (392:13): [True: 164, False: 50.9k]
  ------------------
  393|    164|        {
  394|    164|            return;
  395|    164|        }
  396|       |
  397|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  398|  50.9k|        m_NextProgramCounter = m_ProgramCounter + 1u;
  399|       |
  400|       |        // Get current instruction pointed to by the program counter
  401|  50.9k|        const auto& current_instruction =
  402|  50.9k|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  403|       |
  404|       |        // Execute current instruction
  405|  50.9k|        ExecuteInstruction(current_instruction);
  406|       |
  407|       |        // Stop executing if the last instruction halted the processor
  408|  50.9k|        if (m_Halted)
  ------------------
  |  Branch (408:13): [True: 152, False: 50.8k]
  ------------------
  409|    152|        {
  410|    152|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  411|    152|            return;
  412|    152|        }
  413|       |
  414|  50.8k|        m_ProgramCounter = m_NextProgramCounter;
  415|       |
  416|  50.8k|        ++m_CurrentStepCount;
  417|       |
  418|  50.8k|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (418:13): [True: 79, False: 50.7k]
  |  Branch (418:14): [True: 50.8k, False: 0]
  |  Branch (418:42): [True: 5, False: 50.8k]
  ------------------
  419|  50.8k|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (419:13): [True: 74, False: 50.7k]
  ------------------
  420|     79|        {
  421|     79|            m_Halted                       = true;
  422|     79|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  423|     79|        }
  424|  50.8k|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  427|    395|    {
  428|       |        // Do nothing when no program is loaded
  429|    395|        if (!m_CurrentProgram)
  ------------------
  |  Branch (429:13): [True: 0, False: 395]
  ------------------
  430|      0|        {
  431|      0|            return;
  432|      0|        }
  433|       |
  434|    395|        m_ProgramCounter               = 0u;
  435|    395|        m_Halted                       = false;
  436|    395|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  437|    395|        m_LastRaisedException          = Exception::None;
  438|    395|        m_CurrentStepCount             = 0u;
  439|       |
  440|  51.5k|        while (!m_Halted)
  ------------------
  |  Branch (440:16): [True: 51.1k, False: 395]
  ------------------
  441|  51.1k|        {
  442|  51.1k|            ExecuteStep();
  443|  51.1k|        }
  444|       |
  445|    395|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  446|    395|                   "RegisterAccessType was not reset correctly");
  447|    395|    }
_ZN3dlx9Processor14ClearRegistersEv:
  463|  90.3k|    {
  464|  90.3k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (464:24): [True: 2.89M, False: 90.3k]
  ------------------
  465|  2.89M|        {
  466|  2.89M|            reg.SetSignedValue(0);
  467|  2.89M|        }
  468|       |
  469|  90.3k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (469:24): [True: 2.89M, False: 90.3k]
  ------------------
  470|  2.89M|        {
  471|  2.89M|            reg.SetValue(0.0f);
  472|  2.89M|        }
  473|       |
  474|  90.3k|        m_FPSR.SetStatus(false);
  475|  90.3k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  478|  90.3k|    {
  479|  90.3k|        m_MemoryBlock.Clear();
  480|  90.3k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  487|    156|    {
  488|    156|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  489|       |
  490|    156|        m_LastRaisedException = exception;
  491|       |
  492|    156|        switch (exception)
  493|    156|        {
  494|      0|            case Exception::DivideByZero:
  ------------------
  |  Branch (494:13): [True: 0, False: 156]
  ------------------
  495|      0|                m_Halted = true;
  496|      0|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  497|      0|                return;
  498|      0|            case Exception::Overflow:
  ------------------
  |  Branch (498:13): [True: 0, False: 156]
  ------------------
  499|      0|                DLX_WARN("Overflow");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  500|      0|                return;
  501|      0|            case Exception::Underflow:
  ------------------
  |  Branch (501:13): [True: 0, False: 156]
  ------------------
  502|      0|                DLX_WARN("Underflow");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  503|      0|                return;
  504|      0|            case Exception::Trap:
  ------------------
  |  Branch (504:13): [True: 0, False: 156]
  ------------------
  505|      0|                m_Halted = true;
  506|      0|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  507|      0|                return;
  508|      3|            case Exception::Halt:
  ------------------
  |  Branch (508:13): [True: 3, False: 153]
  ------------------
  509|      3|                m_Halted = true;
  510|      3|                return;
  511|    139|            case Exception::UnknownLabel:
  ------------------
  |  Branch (511:13): [True: 139, False: 17]
  ------------------
  512|    139|                m_Halted = true;
  513|    139|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|    139|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  514|    139|                return;
  515|      0|            case Exception::BadShift:
  ------------------
  |  Branch (515:13): [True: 0, False: 156]
  ------------------
  516|      0|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  517|      0|                return;
  518|      0|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (518:13): [True: 0, False: 156]
  ------------------
  519|      0|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  520|      0|                m_Halted = true;
  521|      0|                return;
  522|     14|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (522:13): [True: 14, False: 142]
  ------------------
  523|     14|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     14|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  524|     14|                m_Halted = true;
  525|     14|                return;
  526|       |
  527|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  528|      0|            default:
  ------------------
  |  Branch (528:13): [True: 0, False: 156]
  ------------------
  529|      0|                PHI_ASSERT_NOT_REACHED();
  530|    156|#endif
  531|    156|        }
  532|       |
  533|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  534|      0|        PHI_ASSERT_NOT_REACHED();
  535|      0|#endif
  536|      0|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  572|      2|    {
  573|      2|        return m_NextProgramCounter;
  574|      2|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  577|  50.0k|    {
  578|  50.0k|        m_NextProgramCounter = new_npc;
  579|  50.0k|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   35|  10.1k|    {
   36|  10.1k|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   37|  10.1k|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   38|       |
   39|  10.1k|        switch (expected_access)
   40|  10.1k|        {
   41|      0|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (41:13): [True: 0, False: 10.1k]
  ------------------
   42|      0|                return true;
   43|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (43:13): [True: 0, False: 10.1k]
  ------------------
   44|      0|                return false;
   45|      0|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (45:13): [True: 0, False: 10.1k]
  ------------------
   46|      0|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (46:24): [True: 0, False: 0]
  |  Branch (46:63): [True: 0, False: 0]
  ------------------
   47|      0|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (47:13): [True: 0, False: 10.1k]
  ------------------
   48|      0|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (48:24): [True: 0, False: 0]
  ------------------
   49|      0|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (49:24): [True: 0, False: 0]
  ------------------
   50|      0|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (50:13): [True: 0, False: 10.1k]
  ------------------
   51|      0|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (51:24): [True: 0, False: 0]
  |  Branch (51:63): [True: 0, False: 0]
  ------------------
   52|      0|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (52:13): [True: 0, False: 10.1k]
  ------------------
   53|      0|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (53:24): [True: 0, False: 0]
  |  Branch (53:64): [True: 0, False: 0]
  ------------------
   54|  10.1k|            default:
  ------------------
  |  Branch (54:13): [True: 10.1k, False: 0]
  ------------------
   55|  10.1k|                return expected_access == access;
   56|  10.1k|        }
   57|  10.1k|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  10.8M|    {
   14|  10.8M|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 1.81M, False: 8.99M]
  ------------------
   15|  1.81M|        {
   16|  1.81M|            char first_char = token[0];
   17|  1.81M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 29.7k, False: 1.78M]
  |  Branch (17:38): [True: 93.7k, False: 1.69M]
  ------------------
   18|   123k|            {
   19|   123k|                char second_char = token[1];
   20|   123k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 95.0k, False: 28.4k]
  |  Branch (20:43): [True: 29.9k, False: 65.0k]
  ------------------
   21|  29.9k|                {
   22|  29.9k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  29.9k|                }
   24|   123k|            }
   25|  1.81M|        }
   26|  8.99M|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 1.94M, False: 7.04M]
  ------------------
   27|  1.94M|        {
   28|  1.94M|            char first_char = token[0];
   29|  1.94M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 31.2k, False: 1.91M]
  |  Branch (29:38): [True: 121k, False: 1.79M]
  ------------------
   30|   153k|            {
   31|   153k|                char second_char = token[1];
   32|   153k|                char third_char  = token[2];
   33|       |
   34|   153k|                switch (second_char)
   35|   153k|                {
   36|  37.8k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 37.8k, False: 115k]
  ------------------
   37|  37.8k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 32.6k, False: 5.29k]
  |  Branch (37:50): [True: 26.2k, False: 6.32k]
  ------------------
   38|  26.2k|                        {
   39|  26.2k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  26.2k|                        }
   41|  11.6k|                        break;
   42|  37.8k|                    }
   43|  16.5k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 16.5k, False: 136k]
  ------------------
   44|  16.5k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 9.56k, False: 7.01k]
  |  Branch (44:50): [True: 5.24k, False: 4.31k]
  ------------------
   45|  5.24k|                        {
   46|  5.24k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  5.24k|                        }
   48|  11.3k|                        break;
   49|  16.5k|                    }
   50|  15.8k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 15.8k, False: 137k]
  ------------------
   51|  15.8k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 7.45k, False: 8.38k]
  |  Branch (51:50): [True: 7.25k, False: 1.12k]
  ------------------
   52|  14.7k|                        {
   53|  14.7k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  14.7k|                        }
   55|  1.12k|                        break;
   56|  15.8k|                    }
   57|  82.8k|                    default: {
  ------------------
  |  Branch (57:21): [True: 82.8k, False: 70.3k]
  ------------------
   58|  82.8k|                        break;
   59|  15.8k|                    }
   60|   153k|                }
   61|   153k|            }
   62|  1.94M|        }
   63|       |
   64|  10.7M|        return IntRegisterID::None;
   65|  10.8M|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|  10.7M|    {
   69|  10.7M|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 1.78M, False: 8.94M]
  ------------------
   70|  1.78M|        {
   71|  1.78M|            char first_char = token[0];
   72|  1.78M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 101k, False: 1.68M]
  |  Branch (72:38): [True: 64.5k, False: 1.61M]
  ------------------
   73|   166k|            {
   74|   166k|                char second_char = token[1];
   75|   166k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 116k, False: 49.3k]
  |  Branch (75:43): [True: 55.1k, False: 61.6k]
  ------------------
   76|  55.1k|                {
   77|  55.1k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  55.1k|                }
   79|   166k|            }
   80|  1.78M|        }
   81|  8.94M|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 1.90M, False: 7.04M]
  ------------------
   82|  1.90M|        {
   83|  1.90M|            char first_char = token[0];
   84|  1.90M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 77.3k, False: 1.82M]
  |  Branch (84:38): [True: 79.2k, False: 1.74M]
  ------------------
   85|   156k|            {
   86|   156k|                char second_char = token[1];
   87|   156k|                char third_char  = token[2];
   88|       |
   89|   156k|                switch (second_char)
   90|   156k|                {
   91|  30.2k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 30.2k, False: 126k]
  ------------------
   92|  30.2k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 24.0k, False: 6.14k]
  |  Branch (92:50): [True: 14.1k, False: 9.95k]
  ------------------
   93|  14.1k|                        {
   94|  14.1k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  14.1k|                        }
   96|  16.0k|                        break;
   97|  30.2k|                    }
   98|  22.0k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 22.0k, False: 134k]
  ------------------
   99|  22.0k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 20.0k, False: 1.94k]
  |  Branch (99:50): [True: 3.81k, False: 16.2k]
  ------------------
  100|  3.81k|                        {
  101|  3.81k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  3.81k|                        }
  103|  18.2k|                        break;
  104|  22.0k|                    }
  105|  20.0k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 20.0k, False: 136k]
  ------------------
  106|  20.0k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 4.00k, False: 15.9k]
  |  Branch (106:50): [True: 3.84k, False: 12.1k]
  ------------------
  107|  7.85k|                        {
  108|  7.85k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  7.85k|                        }
  110|  12.1k|                        break;
  111|  20.0k|                    }
  112|  84.2k|                    default: {
  ------------------
  |  Branch (112:21): [True: 84.2k, False: 72.2k]
  ------------------
  113|  84.2k|                        break;
  114|  20.0k|                    }
  115|   156k|                }
  116|   156k|            }
  117|  1.90M|        }
  118|       |
  119|  10.6M|        return FloatRegisterID::None;
  120|  10.7M|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|  10.4M|    {
  124|  10.4M|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 1.64M, False: 8.78M]
  ------------------
  125|  1.64M|        {
  126|  1.64M|            char c1 = token[0];
  127|  1.64M|            char c2 = token[1];
  128|  1.64M|            char c3 = token[2];
  129|  1.64M|            char c4 = token[3];
  130|       |
  131|  1.64M|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 56.7k, False: 1.59M]
  |  Branch (131:34): [True: 46.1k, False: 1.54M]
  |  Branch (131:49): [True: 7.29k, False: 95.6k]
  |  Branch (131:62): [True: 30.0k, False: 65.5k]
  ------------------
  132|  1.64M|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 21.2k, False: 16.1k]
  |  Branch (132:34): [True: 4.42k, False: 11.7k]
  |  Branch (132:49): [True: 6.23k, False: 19.3k]
  |  Branch (132:62): [True: 17.8k, False: 1.50k]
  ------------------
  133|  1.64M|        }
  134|       |
  135|  8.78M|        return false;
  136|  10.4M|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|  90.4k|    {
   12|  90.4k|        m_Value = value;
   13|  90.4k|    }
_ZNK3dlx14StatusRegister3GetEv:
   16|      4|    {
   17|      4|        return m_Value;
   18|      4|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  16.2M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|  1.44M|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  40.5M|    {
   41|  40.5M|        return m_Type;
   42|  40.5M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  15.6M|    {
   51|  15.6M|        return m_LineNumber;
   52|  15.6M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  15.1M|    {
   56|  15.1M|        return m_Column;
   57|  15.1M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  18.7M|    {
   66|  18.7M|        return m_Text;
   67|  18.7M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   589k|    {
   80|   589k|        return m_HasHint;
   81|   589k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   620k|    {
   85|   620k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   620k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   620k|                   m_Type == Type::ImmediateInteger);
   88|   620k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   620k|        return m_Hint;
   91|   620k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  90.3k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  90.3k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  90.3k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  14.4k|    {
   51|  14.4k|        auto it = m_Iterator;
   52|  57.7k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 43.3k, False: 14.4k]
  ------------------
   53|  43.3k|        {
   54|  43.3k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 20, False: 43.3k]
  ------------------
   55|     20|            {
   56|     20|                return false;
   57|     20|            }
   58|  43.3k|        }
   59|       |
   60|  14.4k|        return true;
   61|  14.4k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  17.7M|    {
   65|  17.7M|        return m_Iterator != m_Tokens.end();
   66|  17.7M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  17.7M|    {
   70|  17.7M|        return m_Iterator == m_Tokens.end();
   71|  17.7M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  17.7M|    {
   85|  17.7M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  17.7M|        return *m_Iterator++;
   91|  17.7M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  14.4k|    {
  164|  14.4k|        return m_Iterator;
  165|  14.4k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  2.12k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  2.12k|        m_Iterator = it;
  179|  2.12k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  22.4k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  22.4k|        return m_Tokens.rbegin();
  224|  22.4k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|   166k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|   166k|        return m_Tokens.rend();
  233|   166k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  90.3k|    {
   63|  90.3k|        TokenStream tokens;
   64|       |
   65|  90.3k|        std::string_view current_token;
   66|       |
   67|  90.3k|        phi::u64 current_line_number{1u};
   68|  90.3k|        phi::u64 current_column{1u};
   69|  90.3k|        phi::u64 token_begin{0u};
   70|       |
   71|  90.3k|        phi::boolean parsing_comment{false};
   72|       |
   73|  54.9M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 54.9M, False: 90.3k]
  ------------------
   74|  54.9M|        {
   75|  54.9M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  54.9M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 2.07M, False: 52.8M]
  ------------------
   78|  2.07M|            {
   79|  2.07M|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 674k, False: 1.40M]
  ------------------
   80|   674k|                {
   81|       |                    // Skip empty lines
   82|   674k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|   674k|                                        current_line_number, current_column);
   84|       |
   85|   674k|                    parsing_comment = false;
   86|   674k|                    current_line_number += 1u;
   87|   674k|                    current_column = 1u;
   88|   674k|                    continue;
   89|   674k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|  1.40M|                tokens.emplace_back(
   93|  1.40M|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|  1.40M|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|  1.40M|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|  1.40M|                                    current_line_number, current_column);
   98|       |
   99|  1.40M|                current_token   = std::string_view{};
  100|  1.40M|                parsing_comment = false;
  101|  1.40M|                current_line_number += 1u;
  102|  1.40M|                current_column = 0u;
  103|  1.40M|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  52.8M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 58.4k, False: 52.7M]
  |  Branch (105:34): [True: 67.4k, False: 52.7M]
  ------------------
  106|   125k|            {
  107|   125k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 28.6k, False: 97.2k]
  ------------------
  108|  28.6k|                {
  109|  28.6k|                    token_begin = i;
  110|  28.6k|                }
  111|  97.2k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 52.9k, False: 44.2k]
  ------------------
  112|  52.9k|                {
  113|  52.9k|                    tokens.emplace_back(ParseToken(
  114|  52.9k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  52.9k|                            current_line_number, current_column - current_token.length()));
  116|  52.9k|                    token_begin   = i;
  117|  52.9k|                    current_token = std::string_view{};
  118|  52.9k|                }
  119|       |
  120|   125k|                parsing_comment = true;
  121|   125k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|   125k|            }
  123|  52.7M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 732k, False: 51.9M]
  ------------------
  124|   732k|            {
  125|       |                // simply append the character
  126|   732k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   732k|            }
  128|  51.9M|            else
  129|  51.9M|            {
  130|       |                // Not parsing a comment
  131|  51.9M|                switch (c)
  132|  51.9M|                {
  133|   380k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 380k, False: 51.5M]
  ------------------
  134|   909k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 529k, False: 51.4M]
  ------------------
  135|  1.85M|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 945k, False: 51.0M]
  ------------------
  136|  1.85M|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 882k, False: 972k]
  ------------------
  137|   882k|                        {
  138|   882k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|   882k|                            continue;
  141|   882k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   972k|                        tokens.emplace_back(ParseToken(
  145|   972k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   972k|                                current_line_number, current_column - current_token.length()));
  147|   972k|                        current_token = std::string_view{};
  148|   972k|                        break;
  149|  3.80M|                    case ':':
  ------------------
  |  Branch (149:21): [True: 3.80M, False: 48.1M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  3.80M|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 2.67M, False: 1.13M]
  ------------------
  152|  2.67M|                        {
  153|  2.67M|                            current_token =
  154|  2.67M|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  2.67M|                            tokens.emplace_back(ParseToken(
  156|  2.67M|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  2.67M|                                    current_line_number,
  158|  2.67M|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  2.67M|                            current_token = std::string_view{};
  161|  2.67M|                        }
  162|  1.13M|                        else
  163|  1.13M|                        {
  164|       |                            // Orphan colon
  165|  1.13M|                            token_begin = i;
  166|       |
  167|  1.13M|                            tokens.emplace_back(Token::Type::Colon,
  168|  1.13M|                                                source.substr(token_begin.unsafe(), 1),
  169|  1.13M|                                                current_line_number, current_column);
  170|  1.13M|                        }
  171|  3.80M|                        break;
  172|  2.76M|                    case ',':
  ------------------
  |  Branch (172:21): [True: 2.76M, False: 49.2M]
  ------------------
  173|  3.28M|                    case '(':
  ------------------
  |  Branch (173:21): [True: 521k, False: 51.4M]
  ------------------
  174|  5.71M|                    case ')':
  ------------------
  |  Branch (174:21): [True: 2.42M, False: 49.5M]
  ------------------
  175|  5.71M|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 3.61M, False: 2.09M]
  ------------------
  176|  3.61M|                        {
  177|  3.61M|                            tokens.emplace_back(ParseToken(
  178|  3.61M|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|  3.61M|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|  3.61M|                            current_token = std::string_view{};
  182|  3.61M|                        }
  183|       |
  184|  5.71M|                        Token::Type type;
  185|  5.71M|                        switch (c)
  186|  5.71M|                        {
  187|  2.76M|                            case ',':
  ------------------
  |  Branch (187:29): [True: 2.76M, False: 2.94M]
  ------------------
  188|  2.76M|                                type = Token::Type::Comma;
  189|  2.76M|                                break;
  190|   521k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 521k, False: 5.19M]
  ------------------
  191|   521k|                                type = Token::Type::OpenBracket;
  192|   521k|                                break;
  193|  2.42M|                            case ')':
  ------------------
  |  Branch (193:29): [True: 2.42M, False: 3.28M]
  ------------------
  194|  2.42M|                                type = Token::Type::ClosingBracket;
  195|  2.42M|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 5.71M]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  5.71M|#endif
  201|  5.71M|                        }
  202|       |
  203|  5.71M|                        token_begin = i;
  204|       |
  205|  5.71M|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  5.71M|                                            current_line_number, current_column);
  207|  5.71M|                        break;
  208|       |
  209|  40.5M|                    default:
  ------------------
  |  Branch (209:21): [True: 40.5M, False: 11.3M]
  ------------------
  210|  40.5M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 8.70M, False: 31.8M]
  ------------------
  211|  8.70M|                        {
  212|  8.70M|                            token_begin = i;
  213|  8.70M|                        }
  214|       |
  215|       |                        // simply append the character
  216|  40.5M|                        current_token =
  217|  40.5M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  51.9M|                }
  219|  51.9M|            }
  220|       |
  221|  53.3M|            current_column += 1u;
  222|  53.3M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  90.3k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 68.5k, False: 21.8k]
  ------------------
  226|  68.5k|        {
  227|  68.5k|            tokens.emplace_back(
  228|  68.5k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  68.5k|                               current_line_number, current_column - current_token.length()));
  230|  68.5k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  90.3k|        tokens.finalize();
  234|       |
  235|  90.3k|        return tokens;
  236|  90.3k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  8.79M|    {
   11|  8.79M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 61.3k, False: 8.72M]
  |  Branch (11:35): [True: 34.2k, False: 27.1k]
  ------------------
   12|  34.2k|        {
   13|  34.2k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  34.2k|            if (number)
  ------------------
  |  Branch (15:17): [True: 13.1k, False: 21.1k]
  ------------------
   16|  13.1k|            {
   17|  13.1k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  13.1k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  13.1k|            }
   20|       |
   21|  21.1k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  34.2k|        }
   23|       |
   24|  8.75M|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 33.0k, False: 8.72M]
  |  Branch (24:35): [True: 48.5k, False: 8.67M]
  ------------------
   25|  81.6k|        {
   26|  81.6k|            return {Token::Type::Comment, token, line_number, column};
   27|  81.6k|        }
   28|       |
   29|  8.67M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 129k, False: 8.54M]
  ------------------
   30|   129k|        {
   31|   129k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|   129k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|   129k|        }
   34|       |
   35|  8.54M|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 17.4k, False: 8.52M]
  ------------------
   36|  17.4k|        {
   37|  17.4k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  17.4k|        }
   39|       |
   40|  8.52M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 62.1k, False: 8.46M]
  ------------------
   41|  62.1k|        {
   42|  62.1k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  62.1k|                    static_cast<std::uint32_t>(id)};
   44|  62.1k|        }
   45|       |
   46|  8.46M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 57.3k, False: 8.40M]
  ------------------
   47|  57.3k|        {
   48|  57.3k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  57.3k|                    static_cast<std::uint32_t>(id)};
   50|  57.3k|        }
   51|       |
   52|  8.40M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 1.18M, False: 7.22M]
  ------------------
   53|  1.18M|        {
   54|  1.18M|            return {Token::Type::OpCode, token, line_number, column,
   55|  1.18M|                    static_cast<std::uint32_t>(opcode)};
   56|  1.18M|        }
   57|       |
   58|  7.22M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|  8.40M|    }

LLVMFuzzerTestOneInput:
   12|  90.3k|{
   13|  90.3k|    static dlx::Processor processor;
   14|       |
   15|  90.3k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   16|       |
   17|       |    // Parse it
   18|  90.3k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  90.3k|    processor.ClearRegisters();
   22|  90.3k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  90.3k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 395, False: 89.9k]
  ------------------
   26|    395|    {
   27|    395|        processor.ExecuteCurrentProgram();
   28|    395|    }
   29|       |
   30|  90.3k|    return 0;
   31|  90.3k|}


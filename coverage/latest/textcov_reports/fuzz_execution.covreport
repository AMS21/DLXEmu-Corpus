_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  2.28M|        {
  169|  2.28M|            PHI_ASSERT(index < 3u);
  170|       |
  171|  2.28M|            switch (index.unsafe())
  172|  2.28M|            {
  173|  1.03M|                case 0:
  ------------------
  |  Branch (173:17): [True: 1.03M, False: 1.25M]
  ------------------
  174|  1.03M|                    return m_Arg1Type;
  175|       |
  176|   637k|                case 1:
  ------------------
  |  Branch (176:17): [True: 637k, False: 1.65M]
  ------------------
  177|   637k|                    return m_Arg2Type;
  178|       |
  179|   619k|                case 2:
  ------------------
  |  Branch (179:17): [True: 619k, False: 1.66M]
  ------------------
  180|   619k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 2.28M]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  2.28M|#endif
  187|  2.28M|            }
  188|  2.28M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   614k|        {
  195|   614k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   614k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 611k, False: 3.47k]
  ------------------
  199|   611k|            {
  200|   611k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   611k|            }
  202|   614k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 363k, False: 250k]
  ------------------
  203|   363k|            {
  204|   363k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   363k|            }
  206|   614k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 131k, False: 483k]
  ------------------
  207|   131k|            {
  208|   131k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   131k|            }
  210|       |
  211|   614k|            return number_of_argument_required;
  212|   614k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  1.06M|        {
  216|  1.06M|            return m_RegisterAccessType;
  217|  1.06M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   614k|        {
  221|   614k|            return m_Executor;
  222|   614k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  3.50M|    {
   38|  3.50M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  3.50M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  3.50M|                                         static_cast<underlying_t>(rhs));
   42|  3.50M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  3.50M|    {
   55|  3.50M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  3.50M|        return static_cast<underlying_t>(type & test) != 0;
   58|  3.50M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  2.18M|    {
   32|  2.18M|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 10.6k, False: 2.16M]
  ------------------
   33|  10.6k|        {
   34|  10.6k|            return true;
   35|  10.6k|        }
   36|       |
   37|  2.16M|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 21.0k, False: 2.14M]
  ------------------
   38|  21.0k|        {
   39|  21.0k|            return true;
   40|  21.0k|        }
   41|       |
   42|  2.14M|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 442k, False: 1.70M]
  ------------------
   43|   442k|        {
   44|   442k|            return true;
   45|   442k|        }
   46|       |
   47|  1.70M|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 8.69k, False: 1.69M]
  ------------------
   48|  8.69k|        {
   49|  8.69k|            return true;
   50|  8.69k|        }
   51|       |
   52|  1.69M|        return false;
   53|  1.70M|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  1.69M|    {
   57|  1.69M|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 1.69M]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  1.69M|        const char first_char = token.at(0);
   63|       |
   64|  1.69M|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 342k, False: 1.35M]
  ------------------
   65|   342k|        {
   66|   342k|            return phi::is_alpha(first_char);
   67|   342k|        }
   68|       |
   69|  1.35M|        phi::boolean just_under_scores = (first_char == '_');
   70|  1.35M|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 439k, False: 914k]
  |  Branch (70:15): [True: 901k, False: 453k]
  |  Branch (70:44): [True: 13.9k, False: 439k]
  ------------------
   71|   439k|        {
   72|   439k|            return false;
   73|   439k|        }
   74|       |
   75|  2.57M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 2.19M, False: 374k]
  ------------------
   76|  2.19M|        {
   77|  2.19M|            const char c{token.at(index)};
   78|       |
   79|  2.19M|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 1.65M, False: 544k]
  ------------------
   80|  1.65M|            {
   81|  1.65M|                just_under_scores = false;
   82|  1.65M|            }
   83|   544k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 4.78k, False: 540k]
  ------------------
   84|  4.78k|            {
   85|  4.78k|                continue;
   86|  4.78k|            }
   87|   540k|            else
   88|   540k|            {
   89|   540k|                return false;
   90|   540k|            }
   91|  2.19M|        }
   92|       |
   93|   374k|        return !just_under_scores;
   94|   914k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|  8.17M|    {
  101|  8.17M|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 8.17M]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|  8.17M|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 1.28M, False: 6.88M]
  ------------------
  107|  1.28M|        {
  108|  1.28M|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 84.1k, False: 1.20M]
  ------------------
  109|  84.1k|            {
  110|  84.1k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  84.1k|            }
  112|       |
  113|  1.20M|            return {};
  114|  1.28M|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|  6.88M|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 18.7k, False: 6.86M]
  ------------------
  118|  18.7k|        {
  119|  18.7k|            return {};
  120|  18.7k|        }
  121|       |
  122|  6.86M|        std::int32_t number{0};
  123|  6.86M|        phi::boolean is_negative{false};
  124|  6.86M|        phi::boolean starts_with_zero{false};
  125|  6.86M|        phi::boolean parsing_binary{false};
  126|  6.86M|        phi::boolean parsing_octal{false};
  127|  6.86M|        phi::boolean parsing_hexadecimal{false};
  128|  6.86M|        phi::boolean parsed_something{false};
  129|  6.86M|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|  7.67M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 7.62M, False: 56.1k]
  ------------------
  134|  7.62M|        {
  135|  7.62M|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|  7.62M|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 6.86M, False: 752k]
  ------------------
  139|  6.86M|            {
  140|  6.86M|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 20.9k, False: 6.84M]
  ------------------
  141|  20.9k|                {
  142|  20.9k|                    continue;
  143|  20.9k|                }
  144|       |
  145|  6.84M|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 105k, False: 6.74M]
  ------------------
  146|   105k|                {
  147|   105k|                    is_negative = true;
  148|   105k|                    continue;
  149|   105k|                }
  150|       |
  151|  6.74M|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 136k, False: 6.60M]
  ------------------
  152|   136k|                {
  153|   136k|                    starts_with_zero = true;
  154|   136k|                    continue;
  155|   136k|                }
  156|       |
  157|  6.60M|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 18.6k, False: 6.58M]
  ------------------
  158|  18.6k|                {
  159|  18.6k|                    return {};
  160|  18.6k|                }
  161|  6.60M|            }
  162|       |
  163|       |            // Second character
  164|  7.33M|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 406k, False: 6.93M]
  ------------------
  165|   406k|            {
  166|   406k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 136k, False: 269k]
  ------------------
  167|   136k|                {
  168|       |                    // Binary
  169|   136k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 18.0k, False: 118k]
  |  Branch (169:37): [True: 7.14k, False: 111k]
  ------------------
  170|  25.2k|                    {
  171|  25.2k|                        parsing_binary = true;
  172|  25.2k|                        continue;
  173|  25.2k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|   111k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 21.2k, False: 90.3k]
  |  Branch (176:37): [True: 9.96k, False: 80.3k]
  ------------------
  177|  31.1k|                    {
  178|  31.1k|                        parsing_hexadecimal = true;
  179|  31.1k|                        continue;
  180|  31.1k|                    }
  181|       |
  182|       |                    // Octal
  183|  80.3k|                    parsing_octal = true;
  184|  80.3k|                }
  185|   406k|            }
  186|       |
  187|       |            // Handle seperators
  188|  7.28M|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 31.5k, False: 7.25M]
  ------------------
  189|  31.5k|            {
  190|  31.5k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 10.5k, False: 20.9k]
  ------------------
  191|  10.5k|                {
  192|  10.5k|                    return {};
  193|  10.5k|                }
  194|       |
  195|  20.9k|                parsed_separator = true;
  196|  20.9k|                continue;
  197|  31.5k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|  7.25M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 158k, False: 7.09M]
  |  Branch (200:32): [True: 6.07k, False: 152k]
  ------------------
  201|  6.07k|            {
  202|       |                // Would underflow
  203|  6.07k|                return {};
  204|  6.07k|            }
  205|  7.24M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 7.09M, False: 152k]
  |  Branch (205:17): [True: 15.4k, False: 7.22M]
  |  Branch (205:33): [True: 15.4k, False: 7.07M]
  ------------------
  206|  15.4k|            {
  207|       |                // Would overflow
  208|  15.4k|                return {};
  209|  15.4k|            }
  210|       |
  211|  7.22M|            parsed_separator = false;
  212|  7.22M|            parsed_something = true;
  213|       |
  214|  7.22M|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 34.9k, False: 7.19M]
  ------------------
  215|  34.9k|            {
  216|  34.9k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 14.8k, False: 20.1k]
  ------------------
  217|  14.8k|                {
  218|  14.8k|                    return {};
  219|  14.8k|                }
  220|       |
  221|  20.1k|                number <<= 1;
  222|  20.1k|                number |= (c - '0');
  223|  20.1k|            }
  224|  7.19M|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 95.8k, False: 7.09M]
  ------------------
  225|  95.8k|            {
  226|  95.8k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 57.7k, False: 38.0k]
  ------------------
  227|  57.7k|                {
  228|  57.7k|                    return {};
  229|  57.7k|                }
  230|       |
  231|  38.0k|                number <<= 3;
  232|  38.0k|                number |= (c - '0');
  233|  38.0k|            }
  234|  7.09M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 78.6k, False: 7.02M]
  ------------------
  235|  78.6k|            {
  236|  78.6k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 29.9k, False: 48.7k]
  ------------------
  237|  29.9k|                {
  238|  29.9k|                    return {};
  239|  29.9k|                }
  240|       |
  241|  48.7k|                number <<= 4;
  242|  48.7k|                number |= phi::hex_digit_value(c).unsafe();
  243|  48.7k|            }
  244|  7.02M|            else
  245|  7.02M|            {
  246|  7.02M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 6.64M, False: 371k]
  ------------------
  247|  6.64M|                {
  248|  6.64M|                    return {};
  249|  6.64M|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|   371k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 189k, False: 181k]
  |  Branch (252:36): [True: 10.8k, False: 179k]
  ------------------
  253|  10.8k|                {
  254|  10.8k|                    return {};
  255|  10.8k|                }
  256|       |
  257|   360k|                number *= 10;
  258|   360k|                number += (c - '0');
  259|   360k|            }
  260|  7.22M|        }
  261|       |
  262|  56.1k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 46.3k, False: 9.78k]
  ------------------
  263|  46.3k|        {
  264|       |            // Check for over/underflow
  265|  46.3k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 21.8k, False: 24.5k]
  |  Branch (265:32): [True: 3.22k, False: 18.6k]
  ------------------
  266|  3.22k|            {
  267|       |                // Would underflow
  268|  3.22k|                return {};
  269|  3.22k|            }
  270|  43.1k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 24.5k, False: 18.6k]
  |  Branch (270:17): [True: 5.64k, False: 37.5k]
  |  Branch (270:33): [True: 5.64k, False: 18.8k]
  ------------------
  271|  5.64k|            {
  272|       |                // Would overflow
  273|  5.64k|                return {};
  274|  5.64k|            }
  275|       |
  276|  37.5k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 18.6k, False: 18.8k]
  ------------------
  277|  18.6k|            {
  278|  18.6k|                return static_cast<std::int16_t>(-number);
  279|  18.6k|            }
  280|       |
  281|  18.8k|            return static_cast<std::int16_t>(number);
  282|  37.5k|        }
  283|       |
  284|  9.78k|        return {};
  285|  56.1k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   386k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   386k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 11.3M, False: 0]
  ------------------
   64|  11.3M|            {
   65|  11.3M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 386k, False: 10.9M]
  ------------------
   66|   386k|                {
   67|   386k|                    return &token;
   68|   386k|                }
   69|  11.3M|            }
   70|       |
   71|      0|            return nullptr;
   72|   386k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|  2.56M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.56M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.56M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  8.26M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  8.26M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  8.26M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  4.96M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  4.96M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  4.96M|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|  1.89M|    {
   11|  1.89M|        m_Value = val;
   12|  1.89M|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  30.9k|    {
   16|  30.9k|        return m_Value;
   17|  30.9k|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   18|   614k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   23|   101k|    {
   24|   101k|        PHI_ASSERT(argument_number < 3u);
   25|       |
   26|   101k|        switch (argument_number.unsafe())
   27|   101k|        {
   28|  87.3k|            case 0u:
  ------------------
  |  Branch (28:13): [True: 87.3k, False: 14.1k]
  ------------------
   29|  87.3k|                m_Arg1 = argument;
   30|  87.3k|                break;
   31|  9.43k|            case 1u:
  ------------------
  |  Branch (31:13): [True: 9.43k, False: 92.1k]
  ------------------
   32|  9.43k|                m_Arg2 = argument;
   33|  9.43k|                break;
   34|  4.75k|            case 2u:
  ------------------
  |  Branch (34:13): [True: 4.75k, False: 96.8k]
  ------------------
   35|  4.75k|                m_Arg3 = argument;
   36|  4.75k|                break;
   37|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   38|      0|            default:
  ------------------
  |  Branch (38:13): [True: 0, False: 101k]
  ------------------
   39|      0|                PHI_ASSERT_NOT_REACHED();
   40|   101k|#endif
   41|   101k|        }
   42|   101k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   82|  1.06M|    {
   83|  1.06M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   84|  1.06M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   87|  1.06M|    {
   88|  1.06M|        return m_Info;
   89|  1.06M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   23|  1.94M|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   26|  6.36M|    {
   27|  6.36M|        return m_Type;
   28|  6.36M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  35.2k|    {
   78|  35.2k|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  35.2k|        return register_int;
   81|  35.2k|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   85|  30.5k|    {
   86|  30.5k|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   87|       |
   88|  30.5k|        return register_float;
   89|  30.5k|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   93|     12|    {
   94|     12|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   95|       |
   96|     12|        return immediate_value;
   97|     12|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  109|   943k|    {
  110|   943k|        PHI_ASSERT(m_Type == ArgumentType::Label);
  111|       |
  112|   943k|        return label;
  113|   943k|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  173|  32.9k|    {
  174|  32.9k|        InstructionArgument arg;
  175|  32.9k|        arg.m_Type                   = ArgumentType::IntRegister;
  176|  32.9k|        arg.register_int.register_id = id;
  177|  32.9k|        return arg;
  178|  32.9k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  182|  8.95k|    {
  183|  8.95k|        InstructionArgument arg;
  184|  8.95k|        arg.m_Type                     = ArgumentType::FloatRegister;
  185|  8.95k|        arg.register_float.register_id = id;
  186|  8.95k|        return arg;
  187|  8.95k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  191|  3.06k|    {
  192|  3.06k|        InstructionArgument arg;
  193|  3.06k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  194|  3.06k|        arg.immediate_value.signed_value = value;
  195|  3.06k|        return arg;
  196|  3.06k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  200|  4.12k|    {
  201|  4.12k|        InstructionArgument arg;
  202|  4.12k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  203|  4.12k|        arg.address_displacement.register_id  = id;
  204|  4.12k|        arg.address_displacement.displacement = displacement;
  205|  4.12k|        return arg;
  206|  4.12k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  210|  52.4k|    {
  211|  52.4k|        InstructionArgument arg;
  212|  52.4k|        arg.m_Type           = ArgumentType::Label;
  213|  52.4k|        arg.label.label_name = label_name;
  214|  52.4k|        return arg;
  215|  52.4k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  356|      1|        {
  357|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  358|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  359|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  360|       |
  361|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  362|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  363|       |
  364|      1|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  365|      1|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  381|      1|        {
  382|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  383|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  384|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  385|       |
  386|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  387|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  388|       |
  389|      1|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  390|      1|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  436|      1|        {
  437|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  438|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  439|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  440|       |
  441|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  442|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  443|       |
  444|      1|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  445|      1|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  461|      1|        {
  462|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  463|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  464|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  465|       |
  466|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  467|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  468|       |
  469|      1|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  470|      1|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  516|     54|        {
  517|     54|            const auto& dest_reg = arg1.AsRegisterInt();
  518|     54|            const auto& lhs_reg  = arg2.AsRegisterInt();
  519|     54|            const auto& rhs_reg  = arg3.AsRegisterInt();
  520|       |
  521|     54|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  522|     54|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  523|       |
  524|     54|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  525|     54|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  541|      1|        {
  542|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  543|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  544|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  545|       |
  546|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  547|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  548|       |
  549|      1|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  550|      1|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  596|      1|        {
  597|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  598|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  599|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  600|       |
  601|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  602|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  603|       |
  604|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  605|      1|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  621|      1|        {
  622|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  623|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  624|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  625|       |
  626|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  627|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  628|       |
  629|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  630|      1|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  688|      1|        {
  689|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  690|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  691|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  692|       |
  693|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  694|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  695|       |
  696|      1|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  697|      1|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  714|      1|        {
  715|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  716|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  717|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  718|       |
  719|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  720|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  721|       |
  722|      1|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  723|      1|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  740|      2|        {
  741|      2|            const auto& dest_reg = arg1.AsRegisterInt();
  742|      2|            const auto& lhs_reg  = arg2.AsRegisterInt();
  743|      2|            const auto& rhs_reg  = arg3.AsRegisterInt();
  744|       |
  745|      2|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  746|      2|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  747|       |
  748|      2|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  749|      2|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  766|      1|        {
  767|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  768|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  769|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  770|       |
  771|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  772|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  773|       |
  774|      1|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  775|      1|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  792|      1|        {
  793|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  794|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  795|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  796|       |
  797|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  798|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  799|      1|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  800|       |
  801|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  802|      1|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  819|      2|        {
  820|      2|            const auto& dest_reg = arg1.AsRegisterInt();
  821|      2|            const auto& lhs_reg  = arg2.AsRegisterInt();
  822|      2|            const auto& rhs_reg  = arg3.AsRegisterInt();
  823|       |
  824|      2|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  825|      2|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  826|      2|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  827|       |
  828|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  829|      2|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  846|      2|        {
  847|      2|            const auto& dest_reg = arg1.AsRegisterInt();
  848|      2|            const auto& lhs_reg  = arg2.AsRegisterInt();
  849|      2|            const auto& rhs_reg  = arg3.AsRegisterInt();
  850|       |
  851|      2|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  852|      2|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  853|      2|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  854|       |
  855|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  856|      2|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  873|      1|        {
  874|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  875|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  876|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  877|       |
  878|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  879|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  880|       |
  881|      1|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (881:41): [True: 0, False: 1]
  ------------------
  882|       |
  883|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  884|      1|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  902|      1|        {
  903|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  904|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  905|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  906|       |
  907|      1|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  908|      1|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  909|       |
  910|      1|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (910:41): [True: 0, False: 1]
  ------------------
  911|       |
  912|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  913|      1|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  931|  15.0k|        {
  932|  15.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  933|  15.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  934|       |
  935|  15.0k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  936|  15.0k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  937|       |
  938|  15.0k|            const phi::boolean new_value = (lhs_value < rhs_value);
  939|       |
  940|  15.0k|            processor.SetFPSRValue(new_value);
  941|  15.0k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  945|    176|        {
  946|    176|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  947|    176|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  948|       |
  949|    176|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  950|    176|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  951|       |
  952|    176|            const phi::boolean new_value = (lhs_value < rhs_value);
  953|       |
  954|    176|            processor.SetFPSRValue(new_value);
  955|    176|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  959|      1|        {
  960|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  961|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  962|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  963|       |
  964|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  965|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  966|       |
  967|      1|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (967:41): [True: 0, False: 1]
  ------------------
  968|       |
  969|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  970|      1|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  988|      1|        {
  989|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  990|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  991|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  992|       |
  993|      1|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  994|      1|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  995|       |
  996|      1|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (996:41): [True: 0, False: 1]
  ------------------
  997|       |
  998|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  999|      1|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1017|      1|        {
 1018|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1019|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1020|       |
 1021|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1022|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1023|       |
 1024|      1|            const phi::boolean new_value = (lhs_value > rhs_value);
 1025|       |
 1026|      1|            processor.SetFPSRValue(new_value);
 1027|      1|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1031|      1|        {
 1032|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1033|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1034|       |
 1035|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1036|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1037|       |
 1038|      1|            const phi::boolean new_value = (lhs_value > rhs_value);
 1039|       |
 1040|      1|            processor.SetFPSRValue(new_value);
 1041|      1|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1045|      2|        {
 1046|      2|            const auto& dest_reg = arg1.AsRegisterInt();
 1047|      2|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1048|      2|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1049|       |
 1050|      2|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1051|      2|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1052|       |
 1053|      2|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1053:41): [True: 2, False: 0]
  ------------------
 1054|       |
 1055|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1056|      2|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1074|      2|        {
 1075|      2|            const auto& dest_reg = arg1.AsRegisterInt();
 1076|      2|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1077|      2|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1078|       |
 1079|      2|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1080|      2|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1081|       |
 1082|      2|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1082:41): [True: 2, False: 0]
  ------------------
 1083|       |
 1084|      2|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1085|      2|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1103|      1|        {
 1104|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1105|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1106|       |
 1107|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1108|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1109|       |
 1110|      1|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1111|       |
 1112|      1|            processor.SetFPSRValue(new_value);
 1113|      1|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1117|      1|        {
 1118|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1119|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1120|       |
 1121|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1122|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1123|       |
 1124|      1|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1125|       |
 1126|      1|            processor.SetFPSRValue(new_value);
 1127|      1|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1131|      2|        {
 1132|      2|            const auto& dest_reg = arg1.AsRegisterInt();
 1133|      2|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1134|      2|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1135|       |
 1136|      2|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1137|      2|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1138|       |
 1139|      2|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1139:41): [True: 2, False: 0]
  ------------------
 1140|       |
 1141|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1142|      2|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1160|      1|        {
 1161|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1162|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1163|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1164|       |
 1165|      1|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1166|      1|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1167|       |
 1168|      1|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1168:41): [True: 1, False: 0]
  ------------------
 1169|       |
 1170|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1171|      1|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1189|      1|        {
 1190|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1191|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1192|       |
 1193|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1194|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1195|       |
 1196|      1|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1197|       |
 1198|      1|            processor.SetFPSRValue(new_value);
 1199|      1|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1203|      1|        {
 1204|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1205|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1206|       |
 1207|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1208|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1209|       |
 1210|      1|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1211|       |
 1212|      1|            processor.SetFPSRValue(new_value);
 1213|      1|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1217|      2|        {
 1218|      2|            const auto& dest_reg = arg1.AsRegisterInt();
 1219|      2|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1220|      2|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1221|       |
 1222|      2|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1223|      2|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1224|       |
 1225|      2|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1225:41): [True: 2, False: 0]
  ------------------
 1226|       |
 1227|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1228|      2|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1246|      1|        {
 1247|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1248|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1249|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1250|       |
 1251|      1|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1252|      1|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1253|       |
 1254|      1|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1254:41): [True: 1, False: 0]
  ------------------
 1255|       |
 1256|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1257|      1|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1275|      1|        {
 1276|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1277|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1278|       |
 1279|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1280|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1281|       |
 1282|      1|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1283|       |
 1284|      1|            processor.SetFPSRValue(new_value);
 1285|      1|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1289|      1|        {
 1290|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1291|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1292|       |
 1293|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1294|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1295|       |
 1296|      1|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1297|       |
 1298|      1|            processor.SetFPSRValue(new_value);
 1299|      1|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1303|      3|        {
 1304|      3|            const auto& dest_reg = arg1.AsRegisterInt();
 1305|      3|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1306|      3|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1307|       |
 1308|      3|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1309|      3|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1310|       |
 1311|      3|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1311:41): [True: 0, False: 3]
  ------------------
 1312|       |
 1313|      3|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1314|      3|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1332|      1|        {
 1333|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1334|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1335|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1336|       |
 1337|      1|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1338|      1|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1339|       |
 1340|      1|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1340:41): [True: 0, False: 1]
  ------------------
 1341|       |
 1342|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1343|      1|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1361|      1|        {
 1362|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1363|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1364|       |
 1365|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1366|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1367|       |
 1368|      1|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1369|       |
 1370|      1|            processor.SetFPSRValue(new_value);
 1371|      1|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1375|      1|        {
 1376|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1377|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1378|       |
 1379|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1380|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1381|       |
 1382|      1|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1383|       |
 1384|      1|            processor.SetFPSRValue(new_value);
 1385|      1|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1389|      1|        {
 1390|      1|            const auto& test_reg   = arg1.AsRegisterInt();
 1391|      1|            const auto& jump_label = arg2.AsLabel();
 1392|       |
 1393|      1|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1394|       |
 1395|      1|            if (test_value == 0)
  ------------------
  |  Branch (1395:17): [True: 1, False: 0]
  ------------------
 1396|      1|            {
 1397|      1|                JumpToLabel(processor, jump_label.label_name);
 1398|      1|            }
 1399|      1|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1417|     50|        {
 1418|     50|            const auto& jump_label = arg1.AsLabel();
 1419|       |
 1420|     50|            phi::boolean test_value = processor.GetFPSRValue();
 1421|       |
 1422|     50|            if (test_value)
  ------------------
  |  Branch (1422:17): [True: 0, False: 50]
  ------------------
 1423|      0|            {
 1424|      0|                JumpToLabel(processor, jump_label.label_name);
 1425|      0|            }
 1426|     50|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1430|      1|        {
 1431|      1|            const auto& jump_label = arg1.AsLabel();
 1432|       |
 1433|      1|            phi::boolean test_value = processor.GetFPSRValue();
 1434|       |
 1435|      1|            if (!test_value)
  ------------------
  |  Branch (1435:17): [True: 1, False: 0]
  ------------------
 1436|      1|            {
 1437|      1|                JumpToLabel(processor, jump_label.label_name);
 1438|      1|            }
 1439|      1|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1443|   943k|        {
 1444|   943k|            const auto& jump_label = arg1.AsLabel();
 1445|       |
 1446|   943k|            JumpToLabel(processor, jump_label.label_name);
 1447|   943k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1451|  15.0k|        {
 1452|  15.0k|            const auto& jump_register = arg1.AsRegisterInt();
 1453|       |
 1454|  15.0k|            JumpToRegister(processor, jump_register.register_id);
 1455|  15.0k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1459|      1|        {
 1460|      1|            const auto& jump_label = arg1.AsLabel();
 1461|       |
 1462|      1|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1463|      1|                                                  processor.GetNextProgramCounter());
 1464|       |
 1465|      1|            JumpToLabel(processor, jump_label.label_name);
 1466|      1|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1470|  20.0k|        {
 1471|  20.0k|            const auto& jump_register = arg1.AsRegisterInt();
 1472|       |
 1473|  20.0k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1474|  20.0k|                                                  processor.GetNextProgramCounter());
 1475|       |
 1476|  20.0k|            JumpToRegister(processor, jump_register.register_id);
 1477|  20.0k|        }
_ZN3dlx4impl2SFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1890|      7|        {
 1891|      7|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1892|       |
 1893|      7|            if (!optional_address.has_value())
  ------------------
  |  Branch (1893:17): [True: 1, False: 6]
  ------------------
 1894|      1|            {
 1895|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1896|      1|                return;
 1897|      1|            }
 1898|       |
 1899|      6|            phi::i32 address = optional_address.value();
 1900|       |
 1901|      6|            const auto& src_reg = arg2.AsRegisterFloat();
 1902|       |
 1903|      6|            phi::f32 value = processor.FloatRegisterGetFloatValue(src_reg.register_id);
 1904|       |
 1905|      6|            phi::boolean success = processor.GetMemory().StoreFloat(
 1906|      6|                    static_cast<std::size_t>(address.unsafe()), value);
 1907|       |
 1908|      6|            if (!success)
  ------------------
  |  Branch (1908:17): [True: 3, False: 3]
  ------------------
 1909|      3|            {
 1910|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1911|      3|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1912|      3|            }
 1913|      6|        }
_ZN3dlx4impl2SDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1917|      5|        {
 1918|      5|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1919|       |
 1920|      5|            if (!optional_address.has_value())
  ------------------
  |  Branch (1920:17): [True: 1, False: 4]
  ------------------
 1921|      1|            {
 1922|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1923|      1|                return;
 1924|      1|            }
 1925|       |
 1926|      4|            phi::i32 address = optional_address.value();
 1927|       |
 1928|      4|            const auto& src_reg = arg2.AsRegisterFloat();
 1929|       |
 1930|      4|            phi::f64 value = processor.FloatRegisterGetDoubleValue(src_reg.register_id);
 1931|       |
 1932|      4|            phi::boolean success = processor.GetMemory().StoreDouble(
 1933|      4|                    static_cast<std::size_t>(address.unsafe()), value);
 1934|       |
 1935|      4|            if (!success)
  ------------------
  |  Branch (1935:17): [True: 2, False: 2]
  ------------------
 1936|      2|            {
 1937|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1938|      2|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1939|      2|            }
 1940|      4|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1944|      2|        {
 1945|      2|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1946|      2|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1947|       |
 1948|      2|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1949|       |
 1950|      2|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1951|      2|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1955|     86|        {
 1956|     86|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1957|     86|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1958|       |
 1959|     86|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1960|       |
 1961|     86|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1962|     86|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2078|      2|        {
 2079|      2|            processor.Raise(Exception::Halt);
 2080|      2|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2084|  67.1k|        {
 2085|       |            /* Do nothing */
 2086|  67.1k|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  174|      1|    {
  175|      1|        phi::i64 res = phi::i64(lhs) + rhs;
  176|       |
  177|      1|        SafeWriteInteger(processor, dest_reg, res);
  178|      1|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  129|     56|    {
  130|     56|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  131|     56|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  132|       |
  133|       |        // Check for underflow
  134|     56|        if (value < min)
  ------------------
  |  Branch (134:13): [True: 0, False: 56]
  ------------------
  135|      0|        {
  136|      0|            processor.Raise(Exception::Underflow);
  137|       |
  138|      0|            value = max + (value % (min - 1));
  139|      0|        }
  140|       |        // Check for overflow
  141|     56|        else if (value > max)
  ------------------
  |  Branch (141:18): [True: 0, False: 56]
  ------------------
  142|      0|        {
  143|      0|            processor.Raise(Exception::Overflow);
  144|       |
  145|      0|            value = min + (value % (max + 1));
  146|      0|        }
  147|       |
  148|     56|        PHI_ASSERT(value >= min);
  149|     56|        PHI_ASSERT(value <= max);
  150|       |
  151|     56|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  152|     56|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  182|      1|    {
  183|      1|        phi::u64 res = phi::u64(lhs) + rhs;
  184|       |
  185|      1|        SafeWriteInteger(processor, dest_reg, res);
  186|      1|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  156|      3|    {
  157|      3|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  158|       |
  159|       |        // Check for overflow
  160|      3|        if (value > max)
  ------------------
  |  Branch (160:13): [True: 0, False: 3]
  ------------------
  161|      0|        {
  162|      0|            processor.Raise(Exception::Overflow);
  163|       |
  164|      0|            value %= max + 1u;
  165|      0|        }
  166|       |
  167|      3|        PHI_ASSERT(value <= max);
  168|       |
  169|      3|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  170|      3|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  190|      1|    {
  191|      1|        phi::i64 res = phi::i64(lhs) - rhs;
  192|       |
  193|      1|        SafeWriteInteger(processor, dest_reg, res);
  194|      1|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  198|      1|    {
  199|      1|        constexpr phi::u32 max = phi::u32::limits_type::max();
  200|       |
  201|      1|        if (lhs < rhs)
  ------------------
  |  Branch (201:13): [True: 0, False: 1]
  ------------------
  202|      0|        {
  203|      0|            processor.Raise(Exception::Underflow);
  204|       |
  205|      0|            phi::u64 res = max - rhs + lhs + 1u;
  206|      0|            SafeWriteInteger(processor, dest_reg, res);
  207|      0|            return;
  208|      0|        }
  209|       |
  210|      1|        phi::u64 res = phi::u64(lhs) - rhs;
  211|       |
  212|      1|        SafeWriteInteger(processor, dest_reg, res);
  213|      1|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  217|     54|    {
  218|     54|        phi::i64 res = phi::i64(lhs) * rhs;
  219|       |
  220|     54|        SafeWriteInteger(processor, dest_reg, res);
  221|     54|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  225|      1|    {
  226|      1|        phi::u64 res = phi::u64(lhs) * rhs;
  227|       |
  228|      1|        SafeWriteInteger(processor, dest_reg, res);
  229|      1|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  233|      1|    {
  234|      1|        if (rhs == 0)
  ------------------
  |  Branch (234:13): [True: 1, False: 0]
  ------------------
  235|      1|        {
  236|      1|            processor.Raise(Exception::DivideByZero);
  237|      1|            return;
  238|      1|        }
  239|       |
  240|      0|        phi::i64 res = phi::i64(lhs) / rhs;
  241|       |
  242|      0|        SafeWriteInteger(processor, dest_reg, res);
  243|      0|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  247|      1|    {
  248|      1|        if (rhs == 0u)
  ------------------
  |  Branch (248:13): [True: 1, False: 0]
  ------------------
  249|      1|        {
  250|      1|            processor.Raise(Exception::DivideByZero);
  251|      1|            return;
  252|      1|        }
  253|       |
  254|      0|        phi::u64 res = phi::u64(lhs) / rhs;
  255|       |
  256|      0|        SafeWriteInteger(processor, dest_reg, res);
  257|      0|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  330|      3|    {
  331|      3|        if (shift > 31)
  ------------------
  |  Branch (331:13): [True: 0, False: 3]
  ------------------
  332|      0|        {
  333|      0|            processor.Raise(Exception::BadShift);
  334|       |
  335|       |            // Just set register to 0
  336|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  337|      0|            return;
  338|      0|        }
  339|       |
  340|       |        // Negative shifts are undefined behavior
  341|      3|        if (shift < 0)
  ------------------
  |  Branch (341:13): [True: 0, False: 3]
  ------------------
  342|      0|        {
  343|      0|            processor.Raise(Exception::BadShift);
  344|      0|            return;
  345|      0|        }
  346|       |
  347|      3|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  348|       |
  349|      3|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  350|      3|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  261|      1|    {
  262|       |        // Prevent undefined behavior by shifting by more than 31
  263|      1|        if (shift > 31)
  ------------------
  |  Branch (263:13): [True: 0, False: 1]
  ------------------
  264|      0|        {
  265|      0|            processor.Raise(Exception::BadShift);
  266|       |
  267|       |            // Just set register to 0
  268|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  269|      0|            return;
  270|      0|        }
  271|       |
  272|       |        // Do nothing when shifting by zero to prevent undefined behavior
  273|      1|        if (shift == 0)
  ------------------
  |  Branch (273:13): [True: 1, False: 0]
  ------------------
  274|      1|        {
  275|      1|            processor.IntRegisterSetSignedValue(dest_reg, base);
  276|      1|            return;
  277|      1|        }
  278|       |
  279|       |        // Negative shifts are undefiend behavior
  280|      0|        if (shift < 0)
  ------------------
  |  Branch (280:13): [True: 0, False: 0]
  ------------------
  281|      0|        {
  282|      0|            processor.Raise(Exception::BadShift);
  283|      0|            return;
  284|      0|        }
  285|       |
  286|      0|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  287|       |
  288|      0|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  289|       |
  290|      0|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  291|      0|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  295|      1|    {
  296|       |        // Prevent undefined behavior by shifting by more than 31
  297|      1|        if (shift > 31)
  ------------------
  |  Branch (297:13): [True: 0, False: 1]
  ------------------
  298|      0|        {
  299|      0|            processor.Raise(Exception::BadShift);
  300|       |
  301|       |            // Is negative ie. sign bit is set
  302|      0|            if (base < 0)
  ------------------
  |  Branch (302:17): [True: 0, False: 0]
  ------------------
  303|      0|            {
  304|       |                // Set every byte to 1
  305|      0|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  306|      0|            }
  307|      0|            else
  308|      0|            {
  309|       |                // Set every byte to 0
  310|      0|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  311|      0|            }
  312|      0|            return;
  313|      0|        }
  314|       |
  315|       |        // Negative shifts are undefined behavior
  316|      1|        if (shift < 0)
  ------------------
  |  Branch (316:13): [True: 0, False: 1]
  ------------------
  317|      0|        {
  318|      0|            processor.Raise(Exception::BadShift);
  319|      0|            return;
  320|      0|        }
  321|       |
  322|      1|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  323|       |
  324|      1|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  325|      1|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|   943k|    {
   39|       |        // Lookup the label
   40|   943k|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|   943k|        PHI_ASSERT(program != nullptr);
   42|   943k|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|   943k|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 109, False: 943k]
  ------------------
   45|    109|        {
   46|    109|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|    109|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|    109|            processor.Raise(Exception::UnknownLabel);
   48|    109|            return;
   49|    109|        }
   50|       |
   51|   943k|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|   943k|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|   943k|        processor.SetNextProgramCounter(jump_point);
   56|   943k|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|  35.0k|    {
   60|  35.0k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|  35.0k|        phi::u32 max_address =
   63|  35.0k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|  35.0k|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 0, False: 35.0k]
  ------------------
   65|      0|        {
   66|      0|            processor.Raise(Exception::AddressOutOfBounds);
   67|      0|            return;
   68|      0|        }
   69|       |
   70|  35.0k|        processor.SetNextProgramCounter(address.unsafe());
   71|  35.0k|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
  100|     12|    {
  101|     12|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (101:13): [True: 12, False: 0]
  ------------------
  102|     12|        {
  103|     12|            const auto& imm_value = argument.AsImmediateValue();
  104|       |
  105|     12|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (105:17): [True: 2, False: 10]
  ------------------
  106|      2|            {
  107|      2|                return {};
  108|      2|            }
  109|       |
  110|     10|            return imm_value.signed_value;
  111|     12|        }
  112|       |
  113|      0|        if (argument.GetType() == ArgumentType::AddressDisplacement)
  ------------------
  |  Branch (113:13): [True: 0, False: 0]
  ------------------
  114|      0|        {
  115|      0|            const auto& adr_displacement = argument.AsAddressDisplacement();
  116|      0|            return CalculateDisplacementAddress(processor, adr_displacement);
  117|      0|        }
  118|       |
  119|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  120|      0|        PHI_ASSERT_NOT_REACHED();
  121|      0|#endif
  122|      0|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  1.06M|    {
   12|  1.06M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  1.06M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  1.06M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  1.06M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  1.06M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  1.06M|                   "Unexpected argument type for arg1");
   22|  1.06M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  1.06M|                   "Unexpected argument type for arg2");
   24|  1.06M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  1.06M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  1.06M|        m_Executor(processor, arg1, arg2, arg3);
   29|  1.06M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   614k|    {
  453|   614k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   614k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|  1.89M|    {
   17|  1.89M|        m_ValueSigned = val;
   18|  1.89M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|  20.0k|    {
   22|  20.0k|        m_ValueUnsigned = val;
   23|  20.0k|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|    157|    {
   27|    157|        return m_ValueSigned;
   28|    157|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  35.0k|    {
   32|  35.0k|        return m_ValueUnsigned;
   33|  35.0k|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  20.0k|    {
   37|  20.0k|        return m_IsReadOnly;
   38|  20.0k|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   14|      1|    {
   15|      1|        m_Values.resize(starting_size.unsafe());
   16|      1|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  215|      6|    {
  216|      6|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (216:13): [True: 3, False: 3]
  ------------------
  217|      3|        {
  218|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  219|      3|            return false;
  220|      3|        }
  221|       |
  222|      3|        std::size_t index = (address - m_StartingAddress).unsafe();
  223|      3|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  224|       |
  225|      3|        return true;
  226|      6|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  229|      4|    {
  230|      4|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (230:13): [True: 2, False: 2]
  ------------------
  231|      2|        {
  232|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  233|      2|            return false;
  234|      2|        }
  235|       |
  236|      2|        std::size_t index = (address - m_StartingAddress).unsafe();
  237|      2|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  238|       |
  239|      2|        return true;
  240|      4|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  243|     10|    {
  244|     10|        return address >= m_StartingAddress &&
  ------------------
  |  Branch (244:16): [True: 7, False: 3]
  ------------------
  245|     10|               (address + size) <= (m_StartingAddress + m_Values.size());
  ------------------
  |  Branch (245:16): [True: 5, False: 2]
  ------------------
  246|     10|    }
_ZN3dlx11MemoryBlock5ClearEv:
  255|  59.3k|    {
  256|  59.3k|        for (auto& val : m_Values)
  ------------------
  |  Branch (256:24): [True: 59.3M, False: 59.3k]
  ------------------
  257|  59.3M|        {
  258|  59.3M|            val.signed_value = 0;
  259|  59.3M|        }
  260|  59.3k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|  10.0M|    {
   24|  10.0M|        switch (token.length())
   25|  10.0M|        {
   26|       |            // 1 character OpCodes
   27|  1.54M|            case 1: {
  ------------------
  |  Branch (27:13): [True: 1.54M, False: 8.45M]
  ------------------
   28|  1.54M|                char c1 = token[0];
   29|  1.54M|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 309k, False: 1.23M]
  ------------------
   30|   309k|                {
   31|   309k|                    return OpCode::J;
   32|   309k|                }
   33|  1.23M|                break;
   34|  1.54M|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  1.63M|            case 2: {
  ------------------
  |  Branch (37:13): [True: 1.63M, False: 8.36M]
  ------------------
   38|  1.63M|                char c1 = token[0];
   39|  1.63M|                char c2 = token[1];
   40|       |
   41|  1.63M|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 1.12M, False: 505k]
  ------------------
   42|  1.63M|                {
   43|  53.6k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 53.6k, False: 1.58M]
  ------------------
   44|  90.0k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 36.4k, False: 1.59M]
  ------------------
   45|  90.0k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 27.9k, False: 62.1k]
  ------------------
   46|  27.9k|                        {
   47|  27.9k|                            return OpCode::JR;
   48|  27.9k|                        }
   49|  62.1k|                        break;
   50|       |
   51|  79.2k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 79.2k, False: 1.55M]
  ------------------
   52|   145k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 66.4k, False: 1.56M]
  ------------------
   53|   145k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 62.6k, False: 82.9k]
  ------------------
   54|   145k|                        {
   55|  5.69k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 5.69k, False: 139k]
  ------------------
   56|  11.1k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 5.50k, False: 140k]
  ------------------
   57|  11.1k|                                return OpCode::LB;
   58|  6.53k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 6.53k, False: 139k]
  ------------------
   59|  11.1k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 4.58k, False: 141k]
  ------------------
   60|  11.1k|                                return OpCode::LD;
   61|  6.01k|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 6.01k, False: 139k]
  ------------------
   62|  12.2k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 6.26k, False: 139k]
  ------------------
   63|  12.2k|                                return OpCode::LF;
   64|  8.50k|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 8.50k, False: 137k]
  ------------------
   65|  16.3k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 7.86k, False: 137k]
  ------------------
   66|  16.3k|                                return OpCode::LH;
   67|  25.2k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 25.2k, False: 120k]
  ------------------
   68|  32.0k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 6.72k, False: 138k]
  ------------------
   69|  32.0k|                                return OpCode::LW;
   70|   145k|                        }
   71|  62.6k|                        break;
   72|  62.6k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 20.3k, False: 1.61M]
  ------------------
   73|  80.5k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 60.2k, False: 1.57M]
  ------------------
   74|  80.5k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 29.7k, False: 50.8k]
  ------------------
   75|  29.7k|                        {
   76|  29.7k|                            return OpCode::OR;
   77|  29.7k|                        }
   78|  50.8k|                        break;
   79|   128k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 128k, False: 1.50M]
  ------------------
   80|   189k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 61.0k, False: 1.57M]
  ------------------
   81|   189k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 62.0k, False: 127k]
  ------------------
   82|   189k|                        {
   83|  15.6k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 15.6k, False: 173k]
  ------------------
   84|  27.1k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 11.4k, False: 177k]
  ------------------
   85|  27.1k|                                return OpCode::SB;
   86|  4.25k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 4.25k, False: 184k]
  ------------------
   87|  12.4k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 8.19k, False: 181k]
  ------------------
   88|  12.4k|                                return OpCode::SD;
   89|  8.56k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 8.56k, False: 180k]
  ------------------
   90|  43.3k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 34.8k, False: 154k]
  ------------------
   91|  43.3k|                                return OpCode::SF;
   92|  18.2k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 18.2k, False: 170k]
  ------------------
   93|  25.3k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 7.02k, False: 182k]
  ------------------
   94|  25.3k|                                return OpCode::SH;
   95|  14.4k|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 14.4k, False: 174k]
  ------------------
   96|  18.8k|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 4.41k, False: 184k]
  ------------------
   97|  18.8k|                                return OpCode::SW;
   98|   189k|                        }
   99|  62.0k|                        break;
  100|  1.63M|                }
  101|  1.36M|                break;
  102|  1.63M|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|  2.05M|            case 3: {
  ------------------
  |  Branch (105:13): [True: 2.05M, False: 7.94M]
  ------------------
  106|  2.05M|                char c1 = token[0];
  107|  2.05M|                char c2 = token[1];
  108|  2.05M|                char c3 = token[2];
  109|       |
  110|  2.05M|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 867k, False: 1.19M]
  ------------------
  111|  2.05M|                {
  112|  20.8k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 20.8k, False: 2.03M]
  ------------------
  113|  57.7k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 36.8k, False: 2.02M]
  ------------------
  114|  57.7k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 21.3k, False: 36.3k]
  |  Branch (114:29): [True: 11.8k, False: 45.8k]
  |  Branch (114:45): [True: 11.8k, False: 9.49k]
  ------------------
  115|  11.8k|                        {
  116|  11.8k|                            return OpCode::ADD;
  117|  11.8k|                        }
  118|  45.8k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 20.0k, False: 25.7k]
  |  Branch (118:34): [True: 13.9k, False: 31.9k]
  |  Branch (118:50): [True: 13.9k, False: 6.14k]
  ------------------
  119|  13.9k|                        {
  120|  13.9k|                            return OpCode::AND;
  121|  13.9k|                        }
  122|  31.9k|                        break;
  123|       |
  124|  31.9k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 22.9k, False: 2.03M]
  ------------------
  125|  47.8k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 24.8k, False: 2.03M]
  ------------------
  126|  47.8k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 27.1k, False: 20.6k]
  |  Branch (126:29): [True: 13.3k, False: 34.4k]
  |  Branch (126:45): [True: 13.3k, False: 13.8k]
  ------------------
  127|  13.3k|                        {
  128|  13.3k|                            return OpCode::DIV;
  129|  13.3k|                        }
  130|  34.4k|                        break;
  131|       |
  132|  34.4k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 9.61k, False: 2.04M]
  ------------------
  133|  50.0k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 40.3k, False: 2.01M]
  ------------------
  134|  50.0k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 39.3k, False: 10.6k]
  ------------------
  135|  39.3k|                        {
  136|  39.3k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 14.5k, False: 24.8k]
  ------------------
  137|  14.5k|                            {
  138|  14.5k|                                return OpCode::EQD;
  139|  14.5k|                            }
  140|  24.8k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 17.0k, False: 7.84k]
  ------------------
  141|  17.0k|                            {
  142|  17.0k|                                return OpCode::EQF;
  143|  17.0k|                            }
  144|  39.3k|                        }
  145|  18.4k|                        break;
  146|       |
  147|  30.7k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 30.7k, False: 2.02M]
  ------------------
  148|  70.7k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 40.0k, False: 2.01M]
  ------------------
  149|  70.7k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 32.3k, False: 38.4k]
  ------------------
  150|  32.3k|                        {
  151|  32.3k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 11.5k, False: 20.7k]
  ------------------
  152|  11.5k|                            {
  153|  11.5k|                                return OpCode::GED;
  154|  11.5k|                            }
  155|  20.7k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 15.4k, False: 5.36k]
  ------------------
  156|  15.4k|                            {
  157|  15.4k|                                return OpCode::GEF;
  158|  15.4k|                            }
  159|  32.3k|                        }
  160|  38.4k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 25.5k, False: 12.8k]
  ------------------
  161|  25.5k|                        {
  162|  25.5k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 8.96k, False: 16.6k]
  ------------------
  163|  8.96k|                            {
  164|  8.96k|                                return OpCode::GTD;
  165|  8.96k|                            }
  166|  16.6k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 10.0k, False: 6.60k]
  ------------------
  167|  10.0k|                            {
  168|  10.0k|                                return OpCode::GTF;
  169|  10.0k|                            }
  170|  16.6k|                        }
  171|  24.8k|                        break;
  172|       |
  173|  48.6k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 48.6k, False: 2.00M]
  ------------------
  174|  67.3k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 18.7k, False: 2.03M]
  ------------------
  175|  67.3k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 34.6k, False: 32.6k]
  |  Branch (175:29): [True: 16.1k, False: 51.2k]
  |  Branch (175:45): [True: 16.1k, False: 18.5k]
  ------------------
  176|  16.1k|                        {
  177|  16.1k|                            return OpCode::JAL;
  178|  16.1k|                        }
  179|  51.2k|                        break;
  180|       |
  181|   144k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 144k, False: 1.91M]
  ------------------
  182|   261k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 117k, False: 1.94M]
  ------------------
  183|   261k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 47.6k, False: 213k]
  ------------------
  184|   261k|                        {
  185|  16.7k|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 16.7k, False: 244k]
  ------------------
  186|  39.1k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 22.3k, False: 239k]
  ------------------
  187|  39.1k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 12.5k, False: 26.6k]
  ------------------
  188|  12.5k|                                {
  189|  12.5k|                                    return OpCode::LBU;
  190|  12.5k|                                }
  191|  26.6k|                                break;
  192|       |
  193|  26.6k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 16.7k, False: 244k]
  ------------------
  194|  35.5k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 18.8k, False: 242k]
  ------------------
  195|  35.5k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 9.07k, False: 26.5k]
  ------------------
  196|  9.07k|                                {
  197|  9.07k|                                    return OpCode::LED;
  198|  9.07k|                                }
  199|  26.5k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 18.0k, False: 8.42k]
  ------------------
  200|  18.0k|                                {
  201|  18.0k|                                    return OpCode::LEF;
  202|  18.0k|                                }
  203|  8.42k|                                break;
  204|       |
  205|  18.4k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 18.4k, False: 243k]
  ------------------
  206|  66.1k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 47.6k, False: 213k]
  ------------------
  207|  66.1k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 19.7k, False: 46.4k]
  ------------------
  208|  19.7k|                                {
  209|  19.7k|                                    return OpCode::LHI;
  210|  19.7k|                                }
  211|  46.4k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 27.1k, False: 19.3k]
  ------------------
  212|  27.1k|                                {
  213|  27.1k|                                    return OpCode::LHU;
  214|  27.1k|                                }
  215|  19.3k|                                break;
  216|       |
  217|  24.5k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 24.5k, False: 237k]
  ------------------
  218|  39.4k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 14.9k, False: 246k]
  ------------------
  219|  39.4k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 20.8k, False: 18.6k]
  ------------------
  220|  20.8k|                                {
  221|  20.8k|                                    return OpCode::LTD;
  222|  20.8k|                                }
  223|  18.6k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 11.1k, False: 7.49k]
  ------------------
  224|  11.1k|                                {
  225|  11.1k|                                    return OpCode::LTF;
  226|  11.1k|                                }
  227|  7.49k|                                break;
  228|       |
  229|  14.6k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 14.6k, False: 246k]
  ------------------
  230|  33.6k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 18.9k, False: 242k]
  ------------------
  231|  33.6k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 14.2k, False: 19.3k]
  ------------------
  232|  14.2k|                                {
  233|  14.2k|                                    return OpCode::LWU;
  234|  14.2k|                                }
  235|  19.3k|                                break;
  236|   261k|                        }
  237|   128k|                        break;
  238|       |
  239|   128k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 64.9k, False: 1.99M]
  ------------------
  240|  90.2k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 25.3k, False: 2.03M]
  ------------------
  241|  90.2k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 52.4k, False: 37.8k]
  ------------------
  242|  52.4k|                        {
  243|  52.4k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 20.2k, False: 32.1k]
  ------------------
  244|  20.2k|                            {
  245|  20.2k|                                return OpCode::NED;
  246|  20.2k|                            }
  247|  32.1k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 14.8k, False: 17.3k]
  ------------------
  248|  14.8k|                            {
  249|  14.8k|                                return OpCode::NEF;
  250|  14.8k|                            }
  251|  52.4k|                        }
  252|  37.8k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 20.1k, False: 17.6k]
  |  Branch (252:34): [True: 9.81k, False: 28.0k]
  |  Branch (252:50): [True: 9.81k, False: 10.3k]
  ------------------
  253|  9.81k|                        {
  254|  9.81k|                            return OpCode::NOP;
  255|  9.81k|                        }
  256|       |
  257|  45.3k|                        break;
  258|       |
  259|  45.3k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 29.0k, False: 2.02M]
  ------------------
  260|  85.0k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 55.9k, False: 2.00M]
  ------------------
  261|  85.0k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 48.3k, False: 36.6k]
  |  Branch (261:29): [True: 10.2k, False: 74.7k]
  |  Branch (261:45): [True: 10.2k, False: 38.1k]
  ------------------
  262|  10.2k|                        {
  263|  10.2k|                            return OpCode::ORI;
  264|  10.2k|                        }
  265|  74.7k|                        break;
  266|       |
  267|   173k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 173k, False: 1.88M]
  ------------------
  268|   413k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 240k, False: 1.81M]
  ------------------
  269|   413k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 33.7k, False: 379k]
  ------------------
  270|   413k|                        {
  271|  19.4k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 19.4k, False: 394k]
  ------------------
  272|  43.7k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 24.2k, False: 389k]
  ------------------
  273|  43.7k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 23.5k, False: 20.2k]
  ------------------
  274|  23.5k|                                {
  275|  23.5k|                                    return OpCode::SBU;
  276|  23.5k|                                }
  277|  20.2k|                                break;
  278|       |
  279|  27.8k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 27.8k, False: 385k]
  ------------------
  280|  38.6k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 10.7k, False: 402k]
  ------------------
  281|  38.6k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 17.2k, False: 21.3k]
  ------------------
  282|  17.2k|                                {
  283|  17.2k|                                    return OpCode::SEQ;
  284|  17.2k|                                }
  285|  21.3k|                                break;
  286|       |
  287|  21.3k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 8.78k, False: 404k]
  ------------------
  288|  30.6k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 21.8k, False: 391k]
  ------------------
  289|  30.6k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 9.65k, False: 20.9k]
  ------------------
  290|  9.65k|                                {
  291|  9.65k|                                    return OpCode::SGE;
  292|  9.65k|                                }
  293|  20.9k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 12.1k, False: 8.84k]
  ------------------
  294|  12.1k|                                {
  295|  12.1k|                                    return OpCode::SGT;
  296|  12.1k|                                }
  297|  8.84k|                                break;
  298|       |
  299|  39.6k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 39.6k, False: 373k]
  ------------------
  300|  60.6k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 20.9k, False: 392k]
  ------------------
  301|  60.6k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 29.7k, False: 30.8k]
  ------------------
  302|  29.7k|                                {
  303|  29.7k|                                    return OpCode::SHU;
  304|  29.7k|                                }
  305|  30.8k|                                break;
  306|       |
  307|  47.8k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 47.8k, False: 365k]
  ------------------
  308|  70.7k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 22.9k, False: 390k]
  ------------------
  309|  70.7k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 11.3k, False: 59.4k]
  ------------------
  310|  70.7k|                                {
  311|  4.42k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 4.42k, False: 66.3k]
  ------------------
  312|  15.0k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 10.6k, False: 60.1k]
  ------------------
  313|  15.0k|                                        return OpCode::SLA;
  314|       |
  315|  8.60k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 8.60k, False: 62.1k]
  ------------------
  316|  14.7k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 6.18k, False: 64.6k]
  ------------------
  317|  14.7k|                                        return OpCode::SLE;
  318|       |
  319|  3.19k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 3.19k, False: 67.5k]
  ------------------
  320|  18.0k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 14.8k, False: 55.9k]
  ------------------
  321|  18.0k|                                        return OpCode::SLL;
  322|       |
  323|  5.56k|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 5.56k, False: 65.2k]
  ------------------
  324|  11.5k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 5.93k, False: 64.8k]
  ------------------
  325|  11.5k|                                        return OpCode::SLT;
  326|  70.7k|                                }
  327|  11.3k|                                break;
  328|       |
  329|  20.1k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 20.1k, False: 393k]
  ------------------
  330|  28.4k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 8.27k, False: 405k]
  ------------------
  331|  28.4k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 14.8k, False: 13.5k]
  ------------------
  332|  14.8k|                                {
  333|  14.8k|                                    return OpCode::SNE;
  334|  14.8k|                                }
  335|  13.5k|                                break;
  336|       |
  337|  29.2k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 29.2k, False: 384k]
  ------------------
  338|  50.5k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 21.2k, False: 392k]
  ------------------
  339|  50.5k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 19.6k, False: 30.9k]
  ------------------
  340|  19.6k|                                {
  341|  19.6k|                                    return OpCode::SRA;
  342|  19.6k|                                }
  343|  30.9k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 15.8k, False: 15.0k]
  ------------------
  344|  15.8k|                                {
  345|  15.8k|                                    return OpCode::SRL;
  346|  15.8k|                                }
  347|  15.0k|                                break;
  348|       |
  349|  15.0k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 14.1k, False: 399k]
  ------------------
  350|  24.5k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 10.4k, False: 403k]
  ------------------
  351|  24.5k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 12.6k, False: 11.9k]
  ------------------
  352|  12.6k|                                {
  353|  12.6k|                                    return OpCode::SUB;
  354|  12.6k|                                }
  355|  11.9k|                                break;
  356|       |
  357|  12.4k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 12.4k, False: 401k]
  ------------------
  358|  31.8k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 19.4k, False: 394k]
  ------------------
  359|  31.8k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 17.7k, False: 14.0k]
  ------------------
  360|  17.7k|                                {
  361|  17.7k|                                    return OpCode::SWU;
  362|  17.7k|                                }
  363|  14.0k|                                break;
  364|   413k|                        }
  365|       |
  366|   186k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 5.58k, False: 2.05M]
  ------------------
  367|   228k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 41.5k, False: 2.01M]
  ------------------
  368|   228k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 38.3k, False: 189k]
  |  Branch (368:29): [True: 12.0k, False: 216k]
  |  Branch (368:45): [True: 12.0k, False: 26.3k]
  ------------------
  369|  12.0k|                        {
  370|  12.0k|                            return OpCode::XOR;
  371|  12.0k|                        }
  372|   216k|                        break;
  373|  2.05M|                }
  374|  1.49M|                break;
  375|  2.05M|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|  1.85M|            case 4: {
  ------------------
  |  Branch (378:13): [True: 1.85M, False: 8.14M]
  ------------------
  379|  1.85M|                char c1 = token[0];
  380|  1.85M|                char c2 = token[1];
  381|  1.85M|                char c3 = token[2];
  382|  1.85M|                char c4 = token[3];
  383|       |
  384|  1.85M|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 686k, False: 1.16M]
  ------------------
  385|  1.85M|                {
  386|  16.9k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 16.9k, False: 1.83M]
  ------------------
  387|   127k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 110k, False: 1.73M]
  ------------------
  388|   127k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 22.6k, False: 105k]
  ------------------
  389|   127k|                        {
  390|  56.5k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 56.5k, False: 71.3k]
  ------------------
  391|  70.3k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 13.8k, False: 114k]
  ------------------
  392|  70.3k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 60.1k, False: 10.2k]
  ------------------
  393|  60.1k|                                {
  394|  60.1k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 9.37k, False: 50.7k]
  ------------------
  395|  60.1k|                                    {
  396|  3.66k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 3.66k, False: 56.4k]
  ------------------
  397|  11.8k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 8.14k, False: 51.9k]
  ------------------
  398|  11.8k|                                            return OpCode::ADDD;
  399|       |
  400|  5.47k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 5.47k, False: 54.6k]
  ------------------
  401|  17.6k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 12.1k, False: 47.9k]
  ------------------
  402|  17.6k|                                            return OpCode::ADDF;
  403|       |
  404|  8.22k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 8.22k, False: 51.9k]
  ------------------
  405|  12.6k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 4.44k, False: 55.6k]
  ------------------
  406|  12.6k|                                            return OpCode::ADDI;
  407|       |
  408|  5.22k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 5.22k, False: 54.9k]
  ------------------
  409|  8.67k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 3.45k, False: 56.6k]
  ------------------
  410|  8.67k|                                            return OpCode::ADDU;
  411|  60.1k|                                    }
  412|  60.1k|                                }
  413|  19.6k|                                break;
  414|       |
  415|  29.6k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 29.6k, False: 98.2k]
  ------------------
  416|  34.8k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 5.16k, False: 122k]
  ------------------
  417|  34.8k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 28.7k, False: 6.07k]
  |  Branch (417:37): [True: 21.8k, False: 12.9k]
  |  Branch (417:53): [True: 21.8k, False: 6.84k]
  ------------------
  418|  21.8k|                                {
  419|  21.8k|                                    return OpCode::ANDI;
  420|  21.8k|                                }
  421|       |
  422|  12.9k|                                break;
  423|   127k|                        }
  424|  55.2k|                        break;
  425|       |
  426|  55.2k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 47.4k, False: 1.80M]
  ------------------
  427|   116k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 68.9k, False: 1.78M]
  ------------------
  428|   116k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 11.8k, False: 104k]
  ------------------
  429|   116k|                        {
  430|  25.4k|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 25.4k, False: 90.9k]
  ------------------
  431|  34.1k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 8.71k, False: 107k]
  ------------------
  432|  34.1k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 24.9k, False: 9.19k]
  |  Branch (432:37): [True: 16.9k, False: 17.1k]
  |  Branch (432:53): [True: 16.9k, False: 7.95k]
  ------------------
  433|  16.9k|                                {
  434|  16.9k|                                    return OpCode::BEQZ;
  435|  16.9k|                                }
  436|  17.1k|                                break;
  437|       |
  438|  17.1k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 10.6k, False: 105k]
  ------------------
  439|  40.9k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 30.3k, False: 86.0k]
  ------------------
  440|  40.9k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 32.8k, False: 8.04k]
  ------------------
  441|  32.8k|                                {
  442|  32.8k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 11.7k, False: 21.1k]
  ------------------
  443|  11.7k|                                    {
  444|  11.7k|                                        return OpCode::BFPF;
  445|  11.7k|                                    }
  446|  21.1k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 15.5k, False: 5.57k]
  ------------------
  447|  15.5k|                                    {
  448|  15.5k|                                        return OpCode::BFPT;
  449|  15.5k|                                    }
  450|  32.8k|                                }
  451|  13.6k|                                break;
  452|       |
  453|  22.8k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 22.8k, False: 93.5k]
  ------------------
  454|  29.4k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 6.60k, False: 109k]
  ------------------
  455|  29.4k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 15.0k, False: 14.4k]
  |  Branch (455:37): [True: 10.3k, False: 19.1k]
  |  Branch (455:53): [True: 10.3k, False: 4.63k]
  ------------------
  456|  10.3k|                                {
  457|  10.3k|                                    return OpCode::BNEZ;
  458|  10.3k|                                }
  459|   116k|                        }
  460|  61.7k|                        break;
  461|       |
  462|  61.7k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 51.6k, False: 1.79M]
  ------------------
  463|   104k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 52.4k, False: 1.79M]
  ------------------
  464|   104k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 83.7k, False: 20.3k]
  |  Branch (464:29): [True: 77.0k, False: 27.0k]
  |  Branch (464:45): [True: 77.0k, False: 6.69k]
  ------------------
  465|  77.0k|                        {
  466|  77.0k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 29.8k, False: 47.1k]
  ------------------
  467|  77.0k|                            {
  468|  3.00k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 3.00k, False: 74.0k]
  ------------------
  469|  11.6k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 8.68k, False: 68.3k]
  ------------------
  470|  11.6k|                                    return OpCode::DIVD;
  471|       |
  472|  8.87k|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 8.87k, False: 68.1k]
  ------------------
  473|  12.1k|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 3.28k, False: 73.7k]
  ------------------
  474|  12.1k|                                    return OpCode::DIVF;
  475|       |
  476|  2.31k|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 2.31k, False: 74.7k]
  ------------------
  477|  6.94k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 4.63k, False: 72.3k]
  ------------------
  478|  6.94k|                                    return OpCode::DIVI;
  479|       |
  480|  11.1k|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 11.1k, False: 65.9k]
  ------------------
  481|  16.3k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 5.26k, False: 71.7k]
  ------------------
  482|  16.3k|                                    return OpCode::DIVU;
  483|  77.0k|                            }
  484|  77.0k|                        }
  485|  56.8k|                        break;
  486|       |
  487|  56.8k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 27.6k, False: 1.82M]
  ------------------
  488|  50.6k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 22.9k, False: 1.82M]
  ------------------
  489|  50.6k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 22.4k, False: 28.1k]
  |  Branch (489:29): [True: 12.9k, False: 37.7k]
  |  Branch (489:45): [True: 18.4k, False: 4.02k]
  |  Branch (489:61): [True: 12.9k, False: 5.51k]
  ------------------
  490|  12.9k|                        {
  491|  12.9k|                            return OpCode::HALT;
  492|  12.9k|                        }
  493|  37.7k|                        break;
  494|       |
  495|  38.7k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 38.7k, False: 1.81M]
  ------------------
  496|  53.0k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 14.3k, False: 1.83M]
  ------------------
  497|  53.0k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 30.3k, False: 22.7k]
  |  Branch (497:29): [True: 8.75k, False: 44.3k]
  |  Branch (497:45): [True: 24.2k, False: 6.09k]
  |  Branch (497:61): [True: 8.75k, False: 15.4k]
  ------------------
  498|  8.75k|                        {
  499|  8.75k|                            return OpCode::JALR;
  500|  8.75k|                        }
  501|  44.3k|                        break;
  502|       |
  503|  74.9k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 74.9k, False: 1.77M]
  ------------------
  504|   110k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 35.0k, False: 1.81M]
  ------------------
  505|   110k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 48.5k, False: 61.4k]
  |  Branch (505:29): [True: 38.0k, False: 71.9k]
  |  Branch (505:45): [True: 38.0k, False: 10.5k]
  ------------------
  506|  38.0k|                        {
  507|  38.0k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 13.1k, False: 24.9k]
  ------------------
  508|  13.1k|                            {
  509|  13.1k|                                return OpCode::MOVD;
  510|  13.1k|                            }
  511|  24.9k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 18.9k, False: 5.92k]
  ------------------
  512|  18.9k|                            {
  513|  18.9k|                                return OpCode::MOVF;
  514|  18.9k|                            }
  515|  38.0k|                        }
  516|  71.9k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 51.6k, False: 20.3k]
  |  Branch (516:34): [True: 19.1k, False: 52.8k]
  |  Branch (516:50): [True: 38.1k, False: 13.4k]
  |  Branch (516:66): [True: 19.1k, False: 19.0k]
  ------------------
  517|  19.1k|                        {
  518|  19.1k|                            return OpCode::MULT;
  519|  19.1k|                        }
  520|  58.7k|                        break;
  521|       |
  522|   237k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 237k, False: 1.61M]
  ------------------
  523|   465k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 228k, False: 1.62M]
  ------------------
  524|   465k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 50.8k, False: 414k]
  ------------------
  525|   465k|                        {
  526|  20.8k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 20.8k, False: 444k]
  ------------------
  527|  42.4k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 21.5k, False: 443k]
  ------------------
  528|  42.4k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 31.7k, False: 10.6k]
  ------------------
  529|  31.7k|                                {
  530|  31.7k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 8.67k, False: 23.1k]
  ------------------
  531|  8.67k|                                    {
  532|  8.67k|                                        return OpCode::SEQI;
  533|  8.67k|                                    }
  534|  23.1k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 13.0k, False: 10.0k]
  ------------------
  535|  13.0k|                                    {
  536|  13.0k|                                        return OpCode::SEQU;
  537|  13.0k|                                    }
  538|  31.7k|                                }
  539|  20.7k|                                break;
  540|       |
  541|  20.7k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 15.3k, False: 450k]
  ------------------
  542|  78.2k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 62.9k, False: 402k]
  ------------------
  543|  78.2k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 38.5k, False: 39.6k]
  ------------------
  544|  38.5k|                                {
  545|  38.5k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 12.2k, False: 26.3k]
  ------------------
  546|  12.2k|                                    {
  547|  12.2k|                                        return OpCode::SGEI;
  548|  12.2k|                                    }
  549|  26.3k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 17.2k, False: 9.12k]
  ------------------
  550|  17.2k|                                    {
  551|  17.2k|                                        return OpCode::SGEU;
  552|  17.2k|                                    }
  553|  38.5k|                                }
  554|  39.6k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 30.1k, False: 9.49k]
  ------------------
  555|  30.1k|                                {
  556|  30.1k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 12.1k, False: 17.9k]
  ------------------
  557|  12.1k|                                    {
  558|  12.1k|                                        return OpCode::SGTI;
  559|  12.1k|                                    }
  560|  17.9k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 10.5k, False: 7.46k]
  ------------------
  561|  10.5k|                                    {
  562|  10.5k|                                        return OpCode::SGTU;
  563|  10.5k|                                    }
  564|  30.1k|                                }
  565|  26.0k|                                break;
  566|       |
  567|   123k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 123k, False: 342k]
  ------------------
  568|   151k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 27.8k, False: 437k]
  ------------------
  569|   151k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 12.8k, False: 138k]
  ------------------
  570|   151k|                                {
  571|  16.7k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 16.7k, False: 134k]
  ------------------
  572|  24.5k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 7.82k, False: 143k]
  ------------------
  573|  24.5k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 16.3k, False: 8.22k]
  ------------------
  574|  16.3k|                                        {
  575|  16.3k|                                            return OpCode::SLAI;
  576|  16.3k|                                        }
  577|  8.22k|                                        break;
  578|       |
  579|  22.8k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 22.8k, False: 128k]
  ------------------
  580|  32.7k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 9.94k, False: 141k]
  ------------------
  581|  32.7k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 11.8k, False: 20.8k]
  ------------------
  582|  11.8k|                                        {
  583|  11.8k|                                            return OpCode::SLEI;
  584|  11.8k|                                        }
  585|  20.8k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 10.7k, False: 10.1k]
  ------------------
  586|  10.7k|                                        {
  587|  10.7k|                                            return OpCode::SLEU;
  588|  10.7k|                                        }
  589|  10.1k|                                        break;
  590|       |
  591|  14.2k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 14.2k, False: 137k]
  ------------------
  592|  37.1k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 22.9k, False: 128k]
  ------------------
  593|  37.1k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 13.3k, False: 23.7k]
  ------------------
  594|  13.3k|                                        {
  595|  13.3k|                                            return OpCode::SLLI;
  596|  13.3k|                                        }
  597|  23.7k|                                        break;
  598|       |
  599|  23.7k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 20.6k, False: 130k]
  ------------------
  600|  44.0k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 23.3k, False: 127k]
  ------------------
  601|  44.0k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 14.6k, False: 29.4k]
  ------------------
  602|  14.6k|                                        {
  603|  14.6k|                                            return OpCode::SLTI;
  604|  14.6k|                                        }
  605|  29.4k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 15.8k, False: 13.5k]
  ------------------
  606|  15.8k|                                        {
  607|  15.8k|                                            return OpCode::SLTU;
  608|  15.8k|                                        }
  609|  13.5k|                                        break;
  610|   151k|                                }
  611|       |
  612|  98.0k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 29.5k, False: 435k]
  ------------------
  613|   104k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 6.47k, False: 458k]
  ------------------
  614|   104k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 38.2k, False: 66.3k]
  ------------------
  615|  38.2k|                                {
  616|  38.2k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 10.4k, False: 27.8k]
  ------------------
  617|  10.4k|                                    {
  618|  10.4k|                                        return OpCode::SNEI;
  619|  10.4k|                                    }
  620|  27.8k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 12.2k, False: 15.5k]
  ------------------
  621|  12.2k|                                    {
  622|  12.2k|                                        return OpCode::SNEU;
  623|  12.2k|                                    }
  624|  38.2k|                                }
  625|  81.9k|                                break;
  626|       |
  627|  81.9k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 14.3k, False: 451k]
  ------------------
  628|  33.8k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 19.4k, False: 446k]
  ------------------
  629|  33.8k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 18.0k, False: 15.7k]
  |  Branch (629:37): [True: 9.57k, False: 24.2k]
  |  Branch (629:53): [True: 9.57k, False: 8.49k]
  ------------------
  630|  9.57k|                                {
  631|  9.57k|                                    return OpCode::SRAI;
  632|  9.57k|                                }
  633|  24.2k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 13.9k, False: 10.3k]
  |  Branch (633:42): [True: 9.51k, False: 14.7k]
  |  Branch (633:58): [True: 9.51k, False: 4.42k]
  ------------------
  634|  9.51k|                                {
  635|  9.51k|                                    return OpCode::SRLI;
  636|  9.51k|                                }
  637|  14.7k|                                break;
  638|       |
  639|  43.4k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 43.4k, False: 422k]
  ------------------
  640|  72.6k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 29.1k, False: 436k]
  ------------------
  641|  72.6k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 67.1k, False: 5.49k]
  ------------------
  642|  67.1k|                                {
  643|  67.1k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 18.0k, False: 49.0k]
  ------------------
  644|  67.1k|                                    {
  645|  7.20k|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 7.20k, False: 59.9k]
  ------------------
  646|  16.7k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 9.51k, False: 57.6k]
  ------------------
  647|  16.7k|                                            return OpCode::SUBD;
  648|       |
  649|  4.31k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 4.31k, False: 62.8k]
  ------------------
  650|  9.61k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 5.29k, False: 61.8k]
  ------------------
  651|  9.61k|                                            return OpCode::SUBF;
  652|       |
  653|  6.06k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 6.06k, False: 61.0k]
  ------------------
  654|  10.2k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 4.16k, False: 62.9k]
  ------------------
  655|  10.2k|                                            return OpCode::SUBI;
  656|       |
  657|  6.14k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 6.14k, False: 61.0k]
  ------------------
  658|  12.5k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 6.35k, False: 60.8k]
  ------------------
  659|  12.5k|                                            return OpCode::SUBU;
  660|  67.1k|                                    }
  661|  67.1k|                                }
  662|  23.5k|                                break;
  663|   465k|                        }
  664|   217k|                        break;
  665|       |
  666|   217k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 58.4k, False: 1.79M]
  ------------------
  667|  78.1k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 19.7k, False: 1.83M]
  ------------------
  668|  78.1k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 53.3k, False: 24.7k]
  |  Branch (668:29): [True: 11.3k, False: 66.8k]
  |  Branch (668:45): [True: 22.9k, False: 30.4k]
  |  Branch (668:61): [True: 11.3k, False: 11.6k]
  ------------------
  669|  11.3k|                        {
  670|  11.3k|                            return OpCode::TRAP;
  671|  11.3k|                        }
  672|  66.8k|                        break;
  673|  66.8k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 12.8k, False: 1.83M]
  ------------------
  674|  57.9k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 45.0k, False: 1.80M]
  ------------------
  675|  57.9k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 47.2k, False: 10.6k]
  |  Branch (675:29): [True: 8.09k, False: 49.8k]
  |  Branch (675:45): [True: 18.9k, False: 28.2k]
  |  Branch (675:61): [True: 8.09k, False: 10.8k]
  ------------------
  676|  8.09k|                        {
  677|  8.09k|                            return OpCode::XORI;
  678|  8.09k|                        }
  679|  49.8k|                        break;
  680|  1.85M|                }
  681|  1.33M|                break;
  682|  1.85M|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  1.33M|            case 5: {
  ------------------
  |  Branch (685:13): [True: 1.05M, False: 8.94M]
  ------------------
  686|  1.05M|                char c1 = token[0];
  687|  1.05M|                char c2 = token[1];
  688|  1.05M|                char c3 = token[2];
  689|  1.05M|                char c4 = token[3];
  690|  1.05M|                char c5 = token[4];
  691|       |
  692|  1.05M|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 472k, False: 584k]
  ------------------
  693|  1.05M|                {
  694|  13.3k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 13.3k, False: 1.04M]
  ------------------
  695|  83.0k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 69.6k, False: 987k]
  ------------------
  696|  83.0k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 58.3k, False: 24.6k]
  |  Branch (696:29): [True: 11.9k, False: 71.1k]
  |  Branch (696:45): [True: 42.6k, False: 15.7k]
  |  Branch (696:61): [True: 15.4k, False: 27.1k]
  |  Branch (696:77): [True: 11.9k, False: 3.54k]
  ------------------
  697|  11.9k|                        {
  698|  11.9k|                            return OpCode::ADDUI;
  699|  11.9k|                        }
  700|  71.1k|                        break;
  701|       |
  702|  71.1k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 47.6k, False: 1.00M]
  ------------------
  703|  84.2k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 36.6k, False: 1.02M]
  ------------------
  704|  84.2k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 72.7k, False: 11.4k]
  |  Branch (704:29): [True: 8.96k, False: 75.2k]
  |  Branch (704:45): [True: 65.9k, False: 6.80k]
  |  Branch (704:61): [True: 25.1k, False: 40.8k]
  |  Branch (704:77): [True: 8.96k, False: 16.2k]
  ------------------
  705|  8.96k|                        {
  706|  8.96k|                            return OpCode::DIVUI;
  707|  8.96k|                        }
  708|  75.2k|                        break;
  709|       |
  710|  75.2k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 41.5k, False: 1.01M]
  ------------------
  711|   119k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 78.3k, False: 978k]
  ------------------
  712|   119k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 98.8k, False: 21.0k]
  |  Branch (712:29): [True: 63.6k, False: 56.2k]
  |  Branch (712:45): [True: 87.2k, False: 11.6k]
  |  Branch (712:61): [True: 63.6k, False: 23.6k]
  ------------------
  713|  63.6k|                        {
  714|  63.6k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 18.8k, False: 44.7k]
  ------------------
  715|  63.6k|                            {
  716|  3.06k|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 3.06k, False: 60.5k]
  ------------------
  717|  6.15k|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 3.09k, False: 60.5k]
  ------------------
  718|  6.15k|                                    return OpCode::MULTD;
  719|       |
  720|  5.47k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 5.47k, False: 58.1k]
  ------------------
  721|  10.6k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 5.14k, False: 58.4k]
  ------------------
  722|  10.6k|                                    return OpCode::MULTF;
  723|       |
  724|  5.34k|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 5.34k, False: 58.2k]
  ------------------
  725|  9.64k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 4.30k, False: 59.3k]
  ------------------
  726|  9.64k|                                    return OpCode::MULTI;
  727|       |
  728|  4.46k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 4.46k, False: 59.1k]
  ------------------
  729|  18.3k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 13.8k, False: 49.7k]
  ------------------
  730|  18.3k|                                    return OpCode::MULTU;
  731|  63.6k|                            }
  732|  63.6k|                        }
  733|  75.1k|                        break;
  734|       |
  735|  97.0k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 97.0k, False: 960k]
  ------------------
  736|   297k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 200k, False: 856k]
  ------------------
  737|   297k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 32.6k, False: 264k]
  ------------------
  738|   297k|                        {
  739|  33.0k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 33.0k, False: 264k]
  ------------------
  740|  52.6k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 19.5k, False: 278k]
  ------------------
  741|  52.6k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 38.1k, False: 14.4k]
  |  Branch (741:37): [True: 13.0k, False: 39.5k]
  |  Branch (741:53): [True: 25.6k, False: 12.4k]
  |  Branch (741:69): [True: 13.0k, False: 12.5k]
  ------------------
  742|  13.0k|                                {
  743|  13.0k|                                    return OpCode::SEQUI;
  744|  13.0k|                                }
  745|  39.5k|                                break;
  746|       |
  747|  39.5k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 18.2k, False: 279k]
  ------------------
  748|  56.0k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 37.7k, False: 259k]
  ------------------
  749|  56.0k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 25.8k, False: 30.1k]
  |  Branch (749:37): [True: 11.1k, False: 44.8k]
  |  Branch (749:53): [True: 21.1k, False: 4.71k]
  |  Branch (749:69): [True: 11.1k, False: 10.0k]
  ------------------
  750|  11.1k|                                {
  751|  11.1k|                                    return OpCode::SGEUI;
  752|  11.1k|                                }
  753|  44.8k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 27.5k, False: 17.3k]
  |  Branch (753:42): [True: 12.0k, False: 32.8k]
  |  Branch (753:58): [True: 16.4k, False: 11.1k]
  |  Branch (753:74): [True: 12.0k, False: 4.37k]
  ------------------
  754|  12.0k|                                {
  755|  12.0k|                                    return OpCode::SGTUI;
  756|  12.0k|                                }
  757|  32.8k|                                break;
  758|       |
  759|  53.1k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 53.1k, False: 244k]
  ------------------
  760|  80.4k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 27.2k, False: 270k]
  ------------------
  761|  80.4k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 29.6k, False: 50.8k]
  |  Branch (761:37): [True: 11.8k, False: 68.5k]
  |  Branch (761:53): [True: 18.1k, False: 11.4k]
  |  Branch (761:69): [True: 11.8k, False: 6.28k]
  ------------------
  762|  11.8k|                                {
  763|  11.8k|                                    return OpCode::SLEUI;
  764|  11.8k|                                }
  765|  68.5k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 30.5k, False: 37.9k]
  |  Branch (765:42): [True: 7.97k, False: 60.6k]
  |  Branch (765:58): [True: 24.1k, False: 6.46k]
  |  Branch (765:74): [True: 7.97k, False: 16.1k]
  ------------------
  766|  7.97k|                                {
  767|  7.97k|                                    return OpCode::SLTUI;
  768|  7.97k|                                }
  769|  60.6k|                                break;
  770|       |
  771|  60.6k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 28.7k, False: 268k]
  ------------------
  772|  44.6k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 15.8k, False: 281k]
  ------------------
  773|  44.6k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 36.0k, False: 8.60k]
  |  Branch (773:37): [True: 13.3k, False: 31.3k]
  |  Branch (773:53): [True: 31.2k, False: 4.80k]
  |  Branch (773:69): [True: 13.3k, False: 17.9k]
  ------------------
  774|  13.3k|                                {
  775|  13.3k|                                    return OpCode::SNEUI;
  776|  13.3k|                                }
  777|  31.3k|                                break;
  778|       |
  779|  31.3k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 21.0k, False: 276k]
  ------------------
  780|  31.3k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 10.2k, False: 287k]
  ------------------
  781|  31.3k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 27.2k, False: 4.11k]
  |  Branch (781:37): [True: 13.5k, False: 17.7k]
  |  Branch (781:53): [True: 20.8k, False: 6.36k]
  |  Branch (781:69): [True: 13.5k, False: 7.27k]
  ------------------
  782|  13.5k|                                {
  783|  13.5k|                                    return OpCode::SUBUI;
  784|  13.5k|                                }
  785|  17.7k|                                break;
  786|   297k|                        }
  787|       |
  788|   214k|                        break;
  789|  1.05M|                }
  790|       |
  791|   908k|                break;
  792|  1.05M|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|   908k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 586k, False: 9.41M]
  ------------------
  796|   586k|                char c1 = token[0];
  797|   586k|                char c2 = token[1];
  798|   586k|                char c3 = token[2];
  799|   586k|                char c4 = token[3];
  800|   586k|                char c5 = token[4];
  801|   586k|                char c6 = token[5];
  802|       |
  803|   586k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 112k, False: 474k]
  |  Branch (803:21): [True: 93.2k, False: 493k]
  |  Branch (803:37): [True: 103k, False: 8.49k]
  |  Branch (803:53): [True: 93.2k, False: 10.6k]
  ------------------
  804|  93.2k|                {
  805|  93.2k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 4.35k, False: 88.8k]
  ------------------
  806|  93.2k|                    {
  807|  18.0k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 18.0k, False: 75.1k]
  ------------------
  808|  29.7k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 11.6k, False: 81.5k]
  ------------------
  809|  29.7k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 25.2k, False: 4.45k]
  ------------------
  810|  25.2k|                            {
  811|  25.2k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 11.7k, False: 13.5k]
  ------------------
  812|  11.7k|                                {
  813|  11.7k|                                    return OpCode::CVTD2F;
  814|  11.7k|                                }
  815|  13.5k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 10.0k, False: 3.49k]
  ------------------
  816|  10.0k|                                {
  817|  10.0k|                                    return OpCode::CVTD2I;
  818|  10.0k|                                }
  819|  25.2k|                            }
  820|  7.94k|                            break;
  821|       |
  822|  22.8k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 22.8k, False: 70.4k]
  ------------------
  823|  31.1k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 8.34k, False: 84.9k]
  ------------------
  824|  31.1k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 22.9k, False: 8.21k]
  ------------------
  825|  22.9k|                            {
  826|  22.9k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 8.00k, False: 14.9k]
  ------------------
  827|  8.00k|                                {
  828|  8.00k|                                    return OpCode::CVTF2D;
  829|  8.00k|                                }
  830|  14.9k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 10.0k, False: 4.88k]
  ------------------
  831|  10.0k|                                {
  832|  10.0k|                                    return OpCode::CVTF2I;
  833|  10.0k|                                }
  834|  22.9k|                            }
  835|  13.1k|                            break;
  836|       |
  837|  23.9k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 23.9k, False: 69.2k]
  ------------------
  838|  27.9k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 4.00k, False: 89.2k]
  ------------------
  839|  27.9k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 21.1k, False: 6.80k]
  ------------------
  840|  21.1k|                            {
  841|  21.1k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 11.3k, False: 9.77k]
  ------------------
  842|  11.3k|                                {
  843|  11.3k|                                    return OpCode::CVTI2D;
  844|  11.3k|                                }
  845|  9.77k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 6.71k, False: 3.06k]
  ------------------
  846|  6.71k|                                {
  847|  6.71k|                                    return OpCode::CVTI2F;
  848|  6.71k|                                }
  849|  21.1k|                            }
  850|  93.2k|                    }
  851|  93.2k|                }
  852|   493k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 91.6k, False: 401k]
  |  Branch (852:26): [True: 12.4k, False: 480k]
  |  Branch (852:42): [True: 77.5k, False: 14.0k]
  |  Branch (852:58): [True: 72.7k, False: 4.75k]
  |  Branch (852:74): [True: 55.6k, False: 17.1k]
  ------------------
  853|   493k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 21.5k, False: 34.0k]
  |  Branch (853:42): [True: 12.4k, False: 9.17k]
  ------------------
  854|  12.4k|                {
  855|  12.4k|                    return OpCode::MULTUI;
  856|  12.4k|                }
  857|   516k|                break;
  858|   586k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|   516k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 361k, False: 9.63M]
  ------------------
  862|   361k|                char c1 = token[0];
  863|   361k|                char c2 = token[1];
  864|   361k|                char c3 = token[2];
  865|   361k|                char c4 = token[3];
  866|   361k|                char c5 = token[4];
  867|   361k|                char c6 = token[5];
  868|   361k|                char c7 = token[6];
  869|       |
  870|   361k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 96.9k, False: 264k]
  |  Branch (870:21): [True: 57.0k, False: 304k]
  |  Branch (870:37): [True: 63.0k, False: 33.9k]
  |  Branch (870:53): [True: 57.0k, False: 5.98k]
  ------------------
  871|  57.0k|                {
  872|  57.0k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 23.6k, False: 33.3k]
  |  Branch (872:25): [True: 6.99k, False: 50.0k]
  |  Branch (872:41): [True: 15.8k, False: 7.80k]
  |  Branch (872:54): [True: 11.8k, False: 4.04k]
  |  Branch (872:70): [True: 6.99k, False: 4.81k]
  ------------------
  873|  6.99k|                    {
  874|  6.99k|                        return OpCode::MOVI2FP;
  875|  6.99k|                    }
  876|  50.0k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 26.3k, False: 23.6k]
  |  Branch (876:30): [True: 8.80k, False: 41.2k]
  |  Branch (876:46): [True: 19.0k, False: 7.31k]
  |  Branch (876:62): [True: 12.9k, False: 6.11k]
  |  Branch (876:75): [True: 8.80k, False: 4.10k]
  ------------------
  877|  8.80k|                    {
  878|  8.80k|                        return OpCode::MOVFP2I;
  879|  8.80k|                    }
  880|  57.0k|                }
  881|   345k|                break;
  882|   361k|            }
  883|       |
  884|   903k|            default: {
  ------------------
  |  Branch (884:13): [True: 903k, False: 9.09M]
  ------------------
  885|   903k|                break;
  886|   361k|            }
  887|  10.0M|        }
  888|       |
  889|       |        // None found
  890|  8.10M|        return OpCode::NONE;
  891|  10.0M|    }
_ZN3dlx3iceEcc:
   17|  9.81M|    {
   18|  9.81M|        constexpr const char diff = 'a' - 'A';
   19|  9.81M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 2.40M, False: 7.41M]
  |  Branch (19:28): [True: 2.19M, False: 5.22M]
  ------------------
   20|  9.81M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  13.0M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|   111k|    {
  193|   111k|        ParseError err;
  194|       |
  195|   111k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|   111k|        err.m_LineNumber                           = line_number;
  197|   111k|        err.m_Column                               = column;
  198|   111k|        err.unexpected_argument_type.expected_type = expected_type;
  199|   111k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|   111k|        return err;
  202|   111k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|   111k|    {
  207|   111k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|   111k|                                                         token.GetColumn().unsafe(), expected_type,
  209|   111k|                                                         actual_type);
  210|   111k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|  3.98k|    {
  216|  3.98k|        ParseError err;
  217|       |
  218|  3.98k|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|  3.98k|        err.m_LineNumber        = line_number;
  220|  3.98k|        err.m_Column            = column;
  221|  3.98k|        err.invalid_number.text = text;
  222|       |
  223|  3.98k|        return err;
  224|  3.98k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|  3.98k|    {
  228|  3.98k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|  3.98k|                                                token.GetColumn().unsafe(), token.GetText());
  230|  3.98k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      3|    {
  235|      3|        ParseError err;
  236|       |
  237|      3|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      3|        err.m_LineNumber = line_number;
  239|      3|        err.m_Column     = column;
  240|       |
  241|      3|        return err;
  242|      3|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      3|    {
  247|      3|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      3|                                                                     token.GetColumn().unsafe());
  249|      3|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|  7.57M|    {
  255|  7.57M|        ParseError err;
  256|       |
  257|  7.57M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|  7.57M|        err.m_LineNumber                   = line_number;
  259|  7.57M|        err.m_Column                       = column;
  260|  7.57M|        err.unexpected_token.expected_type = expected_type;
  261|  7.57M|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|  7.57M|        return err;
  264|  7.57M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|  7.57M|    {
  269|  7.57M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|  7.57M|                                                  token.GetColumn().unsafe(), expected_type,
  271|  7.57M|                                                  token.GetType());
  272|  7.57M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|   487k|    {
  277|   487k|        ParseError err;
  278|       |
  279|   487k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|   487k|        err.m_LineNumber                   = line_number;
  281|   487k|        err.m_Column                       = column;
  282|   487k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|   487k|        return err;
  285|   487k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  4.61k|    {
  289|  4.61k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  4.61k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  4.61k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|  3.31M|    {
  296|  3.31M|        ParseError err;
  297|       |
  298|  3.31M|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|  3.31M|        err.m_LineNumber                       = line_number;
  300|  3.31M|        err.m_Column                           = column;
  301|  3.31M|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|  3.31M|        return err;
  304|  3.31M|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|  3.31M|    {
  309|  3.31M|        return ConstructInvalidLabelIdentifierParseError(
  310|  3.31M|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|  3.31M|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|   386k|    {
  317|   386k|        ParseError err;
  318|       |
  319|   386k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|   386k|        err.m_LineNumber                     = line_number;
  321|   386k|        err.m_Column                         = column;
  322|   386k|        err.label_already_defined.label_name = label_name;
  323|   386k|        err.label_already_defined.at_line    = at_line;
  324|   386k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|   386k|        return err;
  327|   386k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|   386k|    {
  332|   386k|        return ConstructLabelAlreadyDefinedParseError(
  333|   386k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|   386k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|   386k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   802k|    {
  340|   802k|        ParseError err;
  341|       |
  342|   802k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   802k|        err.m_LineNumber = line_number;
  344|   802k|        err.m_Column     = column;
  345|       |
  346|   802k|        return err;
  347|   802k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   802k|    {
  352|   802k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   802k|                                                        token.GetColumn().unsafe());
  354|   802k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|   205k|    {
  360|   205k|        ParseError err;
  361|       |
  362|   205k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|   205k|        err.m_LineNumber               = line_number;
  364|   205k|        err.m_Column                   = column;
  365|   205k|        err.too_few_arguments.required = required;
  366|   205k|        err.too_few_arguments.provided = provided;
  367|       |
  368|   205k|        return err;
  369|   205k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|   205k|    {
  374|   205k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|   205k|                                                  token.GetColumn().unsafe(), required, provided);
  376|   205k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  92.6k|    {
  381|  92.6k|        ParseError err;
  382|       |
  383|  92.6k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  92.6k|        err.m_LineNumber           = line_number;
  385|  92.6k|        err.m_Column               = column;
  386|  92.6k|        err.empty_label.label_name = label_name;
  387|       |
  388|  92.6k|        return err;
  389|  92.6k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  92.6k|    {
  393|  92.6k|        return ConstructEmptyLabelParseError(
  394|  92.6k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  92.6k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 65.9k, False: 26.7k]
  ------------------
  396|  65.9k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  92.6k|                        token.GetText());
  398|  92.6k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  37.7k|    {
  403|  37.7k|        ParseError err;
  404|       |
  405|  37.7k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  37.7k|        err.m_LineNumber = line_number;
  407|  37.7k|        err.m_Column     = column;
  408|       |
  409|  37.7k|        return err;
  410|  37.7k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  37.7k|    {
  414|  37.7k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  37.7k|                                               token.GetColumn().unsafe());
  416|  37.7k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  13.0M|    {
   19|  13.0M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  13.0M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  59.3k|    {
  182|  59.3k|        ParsedProgram program;
  183|       |
  184|  59.3k|        program.m_Tokens = tokens;
  185|       |
  186|  59.3k|        phi::boolean line_has_instruction{false};
  187|  59.3k|        phi::usize   label_count{0u};
  188|       |
  189|  14.7M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 14.7M, False: 59.3k]
  ------------------
  190|  14.7M|        {
  191|  14.7M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  14.7M|            switch (current_token.GetType())
  196|  14.7M|            {
  197|       |                // Ignore comments
  198|  53.8k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 53.8k, False: 14.6M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  53.8k|                    break;
  201|       |
  202|  1.60M|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 1.60M, False: 13.1M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|  1.60M|                    line_has_instruction = false;
  205|  1.60M|                    break;
  206|       |
  207|  6.15M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 6.15M, False: 8.57M]
  ------------------
  208|  6.15M|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 1.93M, False: 4.21M]
  ------------------
  209|  1.93M|                    {
  210|  1.93M|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  1.93M|                                current_token, Token::Type::NewLine));
  212|  1.93M|                        break;
  213|  1.93M|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|  4.21M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 2.17M, False: 2.03M]
  ------------------
  218|  2.17M|                    {
  219|  2.17M|                        program.AddParseError(
  220|  2.17M|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|  2.17M|                        break;
  222|  2.17M|                    }
  223|       |
  224|  2.03M|                    std::string_view label_name = current_token.GetText();
  225|  2.03M|                    label_name.remove_suffix(1);
  226|       |
  227|  2.03M|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 483k, False: 1.55M]
  ------------------
  228|   483k|                    {
  229|   483k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|   483k|                                current_token.GetLineNumber().unsafe(),
  231|   483k|                                current_token.GetColumn().unsafe(), label_name));
  232|   483k|                        break;
  233|   483k|                    }
  234|       |
  235|  1.55M|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 1.05M, False: 502k]
  ------------------
  236|  1.05M|                    {
  237|  1.05M|                        program.AddParseError(
  238|  1.05M|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  1.05M|                        break;
  240|  1.05M|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|   502k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 386k, False: 116k]
  ------------------
  244|   386k|                    {
  245|       |                        // Find first defintions of label
  246|   386k|                        const Token* first_label_definition =
  247|   386k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   386k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|   386k|                                    {
  250|   386k|                                        std::string_view token_label_name = t.GetText();
  251|   386k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   386k|                                        if (token_label_name == label_name)
  254|   386k|                                        {
  255|   386k|                                            return true;
  256|   386k|                                        }
  257|   386k|                                    }
  258|       |
  259|   386k|                                    return false;
  260|   386k|                                });
  261|       |
  262|   386k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|   386k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|   386k|                                current_token, *first_label_definition));
  266|   386k|                        break;
  267|   386k|                    }
  268|       |
  269|   116k|                    program.m_JumpData[label_name] =
  270|   116k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|   116k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|   116k|                    break;
  277|   502k|                }
  278|       |
  279|  1.41M|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 1.41M, False: 13.3M]
  ------------------
  280|  1.41M|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 802k, False: 614k]
  ------------------
  281|   802k|                    {
  282|   802k|                        program.AddParseError(
  283|   802k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   802k|                        break;
  285|   802k|                    }
  286|       |
  287|   614k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|   614k|                    PHI_ASSERT(current_token.HasHint());
  291|   614k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|   614k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|   614k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|   614k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|   614k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|   614k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|   614k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|   614k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|   614k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|  1.08M|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 1.01M, False: 65.1k]
  ------------------
  313|  1.01M|                    {
  314|       |                        // Get next token
  315|  1.01M|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 2.07k, False: 1.01M]
  ------------------
  316|  2.07k|                        {
  317|  2.07k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|  2.07k|                                    current_token, number_of_argument_required.unsafe(),
  319|  2.07k|                                    argument_num.unsafe()));
  320|  2.07k|                            break;
  321|  2.07k|                        }
  322|       |
  323|  1.01M|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|  1.01M|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 366k, False: 648k]
  ------------------
  327|   366k|                        {
  328|   366k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 37.7k, False: 328k]
  ------------------
  329|  37.7k|                            {
  330|  37.7k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  37.7k|                            }
  332|       |
  333|   366k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|   366k|                            continue;
  336|   366k|                        }
  337|       |
  338|   648k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 203k, False: 445k]
  ------------------
  339|   203k|                        {
  340|   203k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|   203k|                                    token, number_of_argument_required.unsafe(),
  342|   203k|                                    argument_num.unsafe()));
  343|   203k|                            break;
  344|   203k|                        }
  345|       |
  346|   445k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|   445k|                                parse_instruction_argument(
  348|   445k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|   445k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 343k, False: 101k]
  ------------------
  350|   343k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|   343k|                            break;
  353|   343k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|   101k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|   101k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|   101k|                        argument_num++;
  360|   101k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|   101k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|   614k|                    program.m_Instructions.emplace_back(instruction);
  368|   614k|                    line_has_instruction = true;
  369|   614k|                    break;
  370|  1.41M|                }
  371|       |
  372|  5.49M|                default:
  ------------------
  |  Branch (372:17): [True: 5.49M, False: 9.23M]
  ------------------
  373|  5.49M|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|  5.49M|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 2.69M, False: 2.80M]
  ------------------
  375|  2.69M|                    {
  376|  2.69M|                        expected_token_type = Token::Type::NewLine;
  377|  2.69M|                    }
  378|       |
  379|  5.49M|                    program.AddParseError(
  380|  5.49M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|  5.49M|                    break;
  382|  14.7M|            }
  383|  14.7M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  59.3k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 15.6k, False: 43.7k]
  ------------------
  387|  15.6k|        {
  388|   152k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 136k, False: 15.6k]
  ------------------
  389|   136k|            {
  390|   136k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|   136k|                const Token& token = *it;
  393|   136k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 92.6k, False: 44.1k]
  ------------------
  394|  92.6k|                {
  395|  92.6k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  92.6k|                    --label_count;
  397|  92.6k|                }
  398|   136k|            }
  399|  15.6k|        }
  400|       |
  401|  59.3k|        return program;
  402|  59.3k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  59.3k|    {
  406|  59.3k|        TokenStream tokens = Tokenize(source);
  407|  59.3k|        return Parse(tokens);
  408|  59.3k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|   445k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|   445k|        switch (token.GetType())
   38|   445k|        {
   39|  22.1k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 22.1k, False: 423k]
  ------------------
   40|  22.1k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 4.81k, False: 17.3k]
  ------------------
   41|  22.1k|                                          ArgumentType::AddressDisplacement))
   42|  4.81k|                {
   43|  4.81k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  4.81k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  4.81k|                    return {};
   47|  4.81k|                }
   48|       |
   49|       |                // Get address displacement
   50|  17.3k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  17.3k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  17.3k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 3, False: 17.3k]
  ------------------
   55|      3|                {
   56|      3|                    program.AddParseError(
   57|      3|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      3|                    return {};
   59|      3|                }
   60|       |
   61|  17.3k|                auto         it           = tokens.current_position();
   62|  17.3k|                const Token& first_token  = tokens.consume();
   63|  17.3k|                const Token& second_token = tokens.consume();
   64|  17.3k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  17.3k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 3.18k, False: 14.1k]
  ------------------
   67|  3.18k|                {
   68|  3.18k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  3.18k|                            first_token, Token::Type::OpenBracket));
   70|  3.18k|                    return {};
   71|  3.18k|                }
   72|       |
   73|       |                // Second token is the register
   74|  14.1k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 4.83k, False: 9.28k]
  ------------------
   75|  4.83k|                {
   76|  4.83k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|  4.83k|                            second_token, Token::Type::RegisterInt));
   78|  4.83k|                    return {};
   79|  4.83k|                }
   80|       |
   81|  9.28k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 5.15k, False: 4.12k]
  ------------------
   82|  5.15k|                {
   83|  5.15k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|  5.15k|                            third_token, Token::Type::ClosingBracket));
   85|  5.15k|                    return {};
   86|  5.15k|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|  4.12k|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|  4.12k|                return ConstructInstructionArgumentAddressDisplacement(
   95|  4.12k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|  9.28k|            }
   97|  35.5k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 35.5k, False: 409k]
  ------------------
   98|  35.5k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 2.55k, False: 32.9k]
  ------------------
   99|  2.55k|                {
  100|  2.55k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  2.55k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  2.55k|                    return {};
  103|  2.55k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  32.9k|                return ConstructInstructionArgumentRegisterInt(
  109|  32.9k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  35.5k|            }
  111|  13.8k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 13.8k, False: 431k]
  ------------------
  112|  13.8k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 4.85k, False: 8.95k]
  ------------------
  113|  4.85k|                {
  114|  4.85k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  4.85k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  4.85k|                    return {};
  117|  4.85k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  8.95k|                return ConstructInstructionArgumentRegisterFloat(
  123|  8.95k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  13.8k|            }
  125|  4.61k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 4.61k, False: 440k]
  ------------------
  126|  4.61k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  4.61k|                return {};
  129|  13.8k|            }
  130|   236k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 236k, False: 208k]
  ------------------
  131|       |                // Parse as Label
  132|   236k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 95.5k, False: 141k]
  ------------------
  133|  95.5k|                {
  134|  95.5k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  95.5k|                            token, expected_argument_type, ArgumentType::Label));
  136|  95.5k|                    return {};
  137|  95.5k|                }
  138|       |
  139|   141k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 141k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|   141k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 88.8k, False: 52.4k]
  ------------------
  146|  88.8k|                {
  147|  88.8k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  88.8k|                    return {};
  149|  88.8k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  52.4k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|   141k|            }
  155|  10.5k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 10.5k, False: 434k]
  ------------------
  156|  10.5k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 3.52k, False: 7.04k]
  ------------------
  157|  3.52k|                {
  158|  3.52k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  3.52k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  3.52k|                    return {};
  161|  3.52k|                }
  162|       |
  163|  7.04k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 3.06k, False: 3.98k]
  ------------------
  164|  3.06k|                {
  165|  3.06k|                    return ConstructInstructionArgumentImmediateValue(
  166|  3.06k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  3.06k|                }
  168|       |
  169|  3.98k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|  3.98k|                return {};
  171|  7.04k|            }
  172|       |
  173|   121k|            default:
  ------------------
  |  Branch (173:13): [True: 121k, False: 323k]
  ------------------
  174|   121k|                program.AddParseError(
  175|   121k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|   121k|                return {};
  177|   445k|        }
  178|   445k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  11.3M|                                tokens.find_first_token_if([&](const Token& t) {
  248|  11.3M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 6.59M, False: 4.76M]
  ------------------
  249|  6.59M|                                    {
  250|  6.59M|                                        std::string_view token_label_name = t.GetText();
  251|  6.59M|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  6.59M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 386k, False: 6.20M]
  ------------------
  254|   386k|                                        {
  255|   386k|                                            return true;
  256|   386k|                                        }
  257|  6.59M|                                    }
  258|       |
  259|  10.9M|                                    return false;
  260|  11.3M|                                });

_ZN3dlx9ProcessorC2Ev:
   63|      1|    {
   64|       |        // Mark R0 as ready only
   65|      1|        m_IntRegisters[0].SetReadOnly(true);
   66|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   69|  20.0k|    {
   70|  20.0k|        PHI_ASSERT(id != IntRegisterID::None);
   71|  20.0k|        phi::size_t id_value = phi::to_underlying(id);
   72|       |
   73|  20.0k|        PHI_ASSERT(id_value < m_IntRegisters.size());
   74|       |
   75|  20.0k|        return m_IntRegisters[id_value];
   76|  20.0k|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   80|  35.1k|    {
   81|  35.1k|        PHI_ASSERT(id != IntRegisterID::None);
   82|  35.1k|        phi::size_t id_value = phi::to_underlying(id);
   83|       |
   84|  35.1k|        PHI_ASSERT(id_value < m_IntRegisters.size());
   85|       |
   86|  35.1k|        return m_IntRegisters[id_value];
   87|  35.1k|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   90|    157|    {
   91|    157|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   92|    157|                                             RegisterAccessType::Signed),
   93|    157|                   "Mismatch for instruction access type");
   94|       |
   95|    157|        const phi::size_t id_value = phi::to_underlying(id);
   96|       |
   97|    157|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   98|    157|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
   99|    157|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (99:13): [True: 10, False: 147]
  ------------------
  100|    157|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (100:13): [True: 0, False: 10]
  ------------------
  101|      0|        {
  102|      0|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  103|      0|        }
  104|       |
  105|    157|        return GetIntRegister(id).GetSignedValue();
  106|    157|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  109|  35.0k|    {
  110|  35.0k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  111|  35.0k|                                             RegisterAccessType::Unsigned),
  112|  35.0k|                   "Mismatch for instruction access type");
  113|       |
  114|  35.0k|        const phi::size_t id_value = phi::to_underlying(id);
  115|       |
  116|  35.0k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  117|  35.0k|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  118|  35.0k|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (118:13): [True: 5.00k, False: 30.0k]
  ------------------
  119|  35.0k|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (119:13): [True: 5.00k, False: 0]
  ------------------
  120|  5.00k|        {
  121|  5.00k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  5.00k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  122|  5.00k|        }
  123|       |
  124|  35.0k|        return GetIntRegister(id).GetUnsignedValue();
  125|  35.0k|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  128|     77|    {
  129|     77|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  130|     77|                                             RegisterAccessType::Signed),
  131|     77|                   "Mismatch for instruction access type");
  132|       |
  133|     77|        IntRegister& reg = GetIntRegister(id);
  134|       |
  135|     77|        if (reg.IsReadOnly())
  ------------------
  |  Branch (135:13): [True: 40, False: 37]
  ------------------
  136|     40|        {
  137|     40|            return;
  138|     40|        }
  139|       |
  140|     37|        reg.SetSignedValue(value);
  141|       |
  142|     37|        const phi::size_t id_value = phi::to_underlying(id);
  143|       |
  144|     37|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  145|     37|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  146|     37|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  149|  20.0k|    {
  150|  20.0k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  151|  20.0k|                                             RegisterAccessType::Unsigned),
  152|  20.0k|                   "Mismatch for instruction access type");
  153|       |
  154|  20.0k|        IntRegister& reg = GetIntRegister(id);
  155|       |
  156|  20.0k|        if (reg.IsReadOnly())
  ------------------
  |  Branch (156:13): [True: 10, False: 20.0k]
  ------------------
  157|     10|        {
  158|     10|            return;
  159|     10|        }
  160|       |
  161|  20.0k|        reg.SetUnsignedValue(value);
  162|       |
  163|  20.0k|        const phi::size_t id_value = phi::to_underlying(id);
  164|       |
  165|  20.0k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  166|  20.0k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  167|  20.0k|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  170|  1.04k|    {
  171|  1.04k|        PHI_ASSERT(id != FloatRegisterID::None);
  172|  1.04k|        const phi::size_t id_value = phi::to_underlying(id);
  173|       |
  174|  1.04k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  175|       |
  176|  1.04k|        return m_FloatRegisters[id_value];
  177|  1.04k|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  181|  30.0k|    {
  182|  30.0k|        PHI_ASSERT(id != FloatRegisterID::None);
  183|  30.0k|        const phi::size_t id_value = phi::to_underlying(id);
  184|       |
  185|  30.0k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  186|       |
  187|  30.0k|        return m_FloatRegisters[id_value];
  188|  30.0k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  191|  30.0k|    {
  192|  30.0k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  193|  30.0k|                                             RegisterAccessType::Float),
  194|  30.0k|                   "Mismatch for instruction access type");
  195|       |
  196|  30.0k|        const phi::size_t id_value = phi::to_underlying(id);
  197|       |
  198|  30.0k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  199|  30.0k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  200|  30.0k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (200:13): [True: 30.0k, False: 20]
  ------------------
  201|  30.0k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (201:13): [True: 30.0k, False: 0]
  ------------------
  202|  30.0k|        {
  203|       |            /*
  204|       |            DLX_WARN("Mismatch for register value type");
  205|       |            */
  206|  30.0k|        }
  207|       |
  208|  30.0k|        const FloatRegister& reg = GetFloatRegister(id);
  209|       |
  210|  30.0k|        return reg.GetValue();
  211|  30.0k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  214|    452|    {
  215|    452|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  216|    452|                                             RegisterAccessType::Double),
  217|    452|                   "Mismatch for instruction access type");
  218|       |
  219|    452|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (219:13): [True: 14, False: 438]
  ------------------
  220|     14|        {
  221|     14|            Raise(Exception::MisalignedRegisterAccess);
  222|     14|            return {0.0};
  223|     14|        }
  224|       |
  225|    438|        const phi::size_t id_value = phi::to_underlying(id);
  226|       |
  227|    438|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  228|    438|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  229|    438|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (229:13): [True: 174, False: 264]
  ------------------
  230|    438|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (230:13): [True: 0, False: 174]
  ------------------
  231|      0|        {
  232|      0|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  233|      0|        }
  234|       |
  235|    438|        const FloatRegisterValueType register_value_type_high =
  236|    438|                m_FloatRegistersValueTypes[id_value + 1u];
  237|    438|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (237:13): [True: 174, False: 264]
  ------------------
  238|    438|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (238:13): [True: 0, False: 174]
  ------------------
  239|      0|        {
  240|      0|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  241|      0|        }
  242|       |
  243|    438|        const FloatRegister& first_reg = GetFloatRegister(id);
  244|    438|        const FloatRegister& second_reg =
  245|    438|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  246|       |
  247|    438|        const float first_value  = first_reg.GetValue().unsafe();
  248|    438|        const float second_value = second_reg.GetValue().unsafe();
  249|       |
  250|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  251|    438|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  252|       |
  253|    438|        const std::uint32_t first_value_bits =
  254|    438|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  255|    438|        const std::uint32_t second_value_bits =
  256|    438|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  257|       |
  258|    438|        std::uint64_t final_value_bits =
  259|    438|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  260|       |
  261|    438|        return *reinterpret_cast<double*>(&final_value_bits);
  262|       |
  263|    452|        PHI_CLANG_SUPPRESS_WARNING_POP()
  264|    452|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  267|      2|    {
  268|      2|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  269|      2|                                             RegisterAccessType::Float),
  270|      2|                   "Mismatch for instruction access type");
  271|       |
  272|      2|        FloatRegister& reg = GetFloatRegister(id);
  273|       |
  274|      2|        reg.SetValue(value);
  275|       |
  276|      2|        const phi::size_t id_value = phi::to_underlying(id);
  277|       |
  278|      2|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  279|      2|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  280|      2|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  283|     86|    {
  284|     86|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  285|     86|                                             RegisterAccessType::Double),
  286|     86|                   "Mismatch for instruction access type");
  287|       |
  288|     86|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (288:13): [True: 3, False: 83]
  ------------------
  289|      3|        {
  290|      3|            Raise(Exception::MisalignedRegisterAccess);
  291|      3|            return;
  292|      3|        }
  293|       |
  294|     83|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  295|     83|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  296|       |
  297|     83|        double              value_raw  = value.unsafe();
  298|     83|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  299|       |
  300|     83|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  301|     83|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  302|       |
  303|     83|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  304|     83|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  305|       |
  306|     83|        FloatRegister& first_reg = GetFloatRegister(id);
  307|     83|        FloatRegister& second_reg =
  308|     83|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  309|       |
  310|     83|        first_reg.SetValue(first_value);
  311|     83|        second_reg.SetValue(second_value);
  312|       |
  313|     83|        const phi::size_t id_value = phi::to_underlying(id);
  314|       |
  315|     83|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  316|     83|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  317|     83|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  318|     83|    }
_ZN3dlx9Processor7GetFPSREv:
  321|  15.1k|    {
  322|  15.1k|        return m_FPSR;
  323|  15.1k|    }
_ZNK3dlx9Processor7GetFPSREv:
  326|     51|    {
  327|     51|        return m_FPSR;
  328|     51|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  331|     51|    {
  332|     51|        const StatusRegister& status_reg = GetFPSR();
  333|       |
  334|     51|        return status_reg.Get();
  335|     51|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  338|  15.1k|    {
  339|  15.1k|        StatusRegister& status_reg = GetFPSR();
  340|       |
  341|  15.1k|        status_reg.SetStatus(value);
  342|  15.1k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  345|  1.06M|    {
  346|  1.06M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  347|       |
  348|  1.06M|        inst.Execute(*this);
  349|  1.06M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  352|  59.3k|    {
  353|  59.3k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (353:13): [True: 58.8k, False: 463]
  ------------------
  354|  58.8k|        {
  355|  58.8k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  58.8k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  356|  58.8k|            return false;
  357|  58.8k|        }
  358|       |
  359|    463|        m_CurrentProgram = &program;
  360|       |
  361|    463|        m_ProgramCounter               = 0u;
  362|    463|        m_Halted                       = false;
  363|    463|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  364|    463|        m_LastRaisedException          = Exception::None;
  365|    463|        m_CurrentStepCount             = 0u;
  366|       |
  367|    463|        return true;
  368|  59.3k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  372|   978k|    {
  373|   978k|        return m_CurrentProgram;
  374|   978k|    }
_ZN3dlx9Processor11ExecuteStepEv:
  377|  1.06M|    {
  378|       |        // No nothing when no program is loaded
  379|  1.06M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (379:13): [True: 0, False: 1.06M]
  ------------------
  380|      0|        {
  381|      0|            return;
  382|      0|        }
  383|       |
  384|       |        // Halt if there are no instruction to execute
  385|  1.06M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (385:13): [True: 69, False: 1.06M]
  ------------------
  386|     69|        {
  387|     69|            m_Halted                       = true;
  388|     69|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  389|     69|        }
  390|       |
  391|       |        // Do nothing when processor is halted
  392|  1.06M|        if (m_Halted)
  ------------------
  |  Branch (392:13): [True: 69, False: 1.06M]
  ------------------
  393|     69|        {
  394|     69|            return;
  395|     69|        }
  396|       |
  397|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  398|  1.06M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  399|       |
  400|       |        // Get current instruction pointed to by the program counter
  401|  1.06M|        const auto& current_instruction =
  402|  1.06M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  403|       |
  404|       |        // Execute current instruction
  405|  1.06M|        ExecuteInstruction(current_instruction);
  406|       |
  407|       |        // Stop executing if the last instruction halted the processor
  408|  1.06M|        if (m_Halted)
  ------------------
  |  Branch (408:13): [True: 133, False: 1.06M]
  ------------------
  409|    133|        {
  410|    133|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  411|    133|            return;
  412|    133|        }
  413|       |
  414|  1.06M|        m_ProgramCounter = m_NextProgramCounter;
  415|       |
  416|  1.06M|        ++m_CurrentStepCount;
  417|       |
  418|  1.06M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (418:13): [True: 261, False: 1.06M]
  |  Branch (418:14): [True: 1.06M, False: 0]
  |  Branch (418:42): [True: 106, False: 1.06M]
  ------------------
  419|  1.06M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (419:13): [True: 155, False: 1.06M]
  ------------------
  420|    261|        {
  421|    261|            m_Halted                       = true;
  422|    261|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  423|    261|        }
  424|  1.06M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  427|    463|    {
  428|       |        // Do nothing when no program is loaded
  429|    463|        if (!m_CurrentProgram)
  ------------------
  |  Branch (429:13): [True: 0, False: 463]
  ------------------
  430|      0|        {
  431|      0|            return;
  432|      0|        }
  433|       |
  434|    463|        m_ProgramCounter               = 0u;
  435|    463|        m_Halted                       = false;
  436|    463|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  437|    463|        m_LastRaisedException          = Exception::None;
  438|    463|        m_CurrentStepCount             = 0u;
  439|       |
  440|  1.06M|        while (!m_Halted)
  ------------------
  |  Branch (440:16): [True: 1.06M, False: 463]
  ------------------
  441|  1.06M|        {
  442|  1.06M|            ExecuteStep();
  443|  1.06M|        }
  444|       |
  445|    463|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  446|    463|                   "RegisterAccessType was not reset correctly");
  447|    463|    }
_ZN3dlx9Processor14ClearRegistersEv:
  463|  59.3k|    {
  464|  59.3k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (464:24): [True: 1.89M, False: 59.3k]
  ------------------
  465|  1.89M|        {
  466|  1.89M|            reg.SetSignedValue(0);
  467|  1.89M|        }
  468|       |
  469|  59.3k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (469:24): [True: 1.89M, False: 59.3k]
  ------------------
  470|  1.89M|        {
  471|  1.89M|            reg.SetValue(0.0f);
  472|  1.89M|        }
  473|       |
  474|  59.3k|        m_FPSR.SetStatus(false);
  475|  59.3k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  478|  59.3k|    {
  479|  59.3k|        m_MemoryBlock.Clear();
  480|  59.3k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  487|    137|    {
  488|    137|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  489|       |
  490|    137|        m_LastRaisedException = exception;
  491|       |
  492|    137|        switch (exception)
  493|    137|        {
  494|      2|            case Exception::DivideByZero:
  ------------------
  |  Branch (494:13): [True: 2, False: 135]
  ------------------
  495|      2|                m_Halted = true;
  496|      2|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  497|      2|                return;
  498|      0|            case Exception::Overflow:
  ------------------
  |  Branch (498:13): [True: 0, False: 137]
  ------------------
  499|      0|                DLX_WARN("Overflow");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  500|      0|                return;
  501|      0|            case Exception::Underflow:
  ------------------
  |  Branch (501:13): [True: 0, False: 137]
  ------------------
  502|      0|                DLX_WARN("Underflow");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  503|      0|                return;
  504|      0|            case Exception::Trap:
  ------------------
  |  Branch (504:13): [True: 0, False: 137]
  ------------------
  505|      0|                m_Halted = true;
  506|      0|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  507|      0|                return;
  508|      2|            case Exception::Halt:
  ------------------
  |  Branch (508:13): [True: 2, False: 135]
  ------------------
  509|      2|                m_Halted = true;
  510|      2|                return;
  511|    109|            case Exception::UnknownLabel:
  ------------------
  |  Branch (511:13): [True: 109, False: 28]
  ------------------
  512|    109|                m_Halted = true;
  513|    109|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|    109|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  514|    109|                return;
  515|      0|            case Exception::BadShift:
  ------------------
  |  Branch (515:13): [True: 0, False: 137]
  ------------------
  516|      0|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  517|      0|                return;
  518|      7|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (518:13): [True: 7, False: 130]
  ------------------
  519|      7|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|      7|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  520|      7|                m_Halted = true;
  521|      7|                return;
  522|     17|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (522:13): [True: 17, False: 120]
  ------------------
  523|     17|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     17|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  524|     17|                m_Halted = true;
  525|     17|                return;
  526|       |
  527|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  528|      0|            default:
  ------------------
  |  Branch (528:13): [True: 0, False: 137]
  ------------------
  529|      0|                PHI_ASSERT_NOT_REACHED();
  530|    137|#endif
  531|    137|        }
  532|       |
  533|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  534|      0|        PHI_ASSERT_NOT_REACHED();
  535|      0|#endif
  536|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  557|     10|    {
  558|     10|        return m_MemoryBlock;
  559|     10|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  572|  20.0k|    {
  573|  20.0k|        return m_NextProgramCounter;
  574|  20.0k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  577|   978k|    {
  578|   978k|        m_NextProgramCounter = new_npc;
  579|   978k|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   35|  85.8k|    {
   36|  85.8k|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   37|  85.8k|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   38|       |
   39|  85.8k|        switch (expected_access)
   40|  85.8k|        {
   41|     31|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (41:13): [True: 31, False: 85.8k]
  ------------------
   42|     31|                return true;
   43|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (43:13): [True: 0, False: 85.8k]
  ------------------
   44|      0|                return false;
   45|      0|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (45:13): [True: 0, False: 85.8k]
  ------------------
   46|      0|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (46:24): [True: 0, False: 0]
  |  Branch (46:63): [True: 0, False: 0]
  ------------------
   47|      0|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (47:13): [True: 0, False: 85.8k]
  ------------------
   48|      0|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (48:24): [True: 0, False: 0]
  ------------------
   49|      0|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (49:24): [True: 0, False: 0]
  ------------------
   50|      6|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (50:13): [True: 6, False: 85.8k]
  ------------------
   51|      6|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (51:24): [True: 6, False: 0]
  |  Branch (51:63): [True: 0, False: 0]
  ------------------
   52|      4|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (52:13): [True: 4, False: 85.8k]
  ------------------
   53|      4|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (53:24): [True: 4, False: 0]
  |  Branch (53:64): [True: 0, False: 0]
  ------------------
   54|  85.8k|            default:
  ------------------
  |  Branch (54:13): [True: 85.8k, False: 41]
  ------------------
   55|  85.8k|                return expected_access == access;
   56|  85.8k|        }
   57|  85.8k|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  10.1M|    {
   14|  10.1M|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 1.73M, False: 8.45M]
  ------------------
   15|  1.73M|        {
   16|  1.73M|            char first_char = token[0];
   17|  1.73M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 30.6k, False: 1.70M]
  |  Branch (17:38): [True: 103k, False: 1.59M]
  ------------------
   18|   134k|            {
   19|   134k|                char second_char = token[1];
   20|   134k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 106k, False: 27.8k]
  |  Branch (20:43): [True: 42.7k, False: 63.8k]
  ------------------
   21|  42.7k|                {
   22|  42.7k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  42.7k|                }
   24|   134k|            }
   25|  1.73M|        }
   26|  8.45M|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 2.14M, False: 6.30M]
  ------------------
   27|  2.14M|        {
   28|  2.14M|            char first_char = token[0];
   29|  2.14M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 36.4k, False: 2.11M]
  |  Branch (29:38): [True: 127k, False: 1.98M]
  ------------------
   30|   164k|            {
   31|   164k|                char second_char = token[1];
   32|   164k|                char third_char  = token[2];
   33|       |
   34|   164k|                switch (second_char)
   35|   164k|                {
   36|  45.4k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 45.4k, False: 118k]
  ------------------
   37|  45.4k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 38.8k, False: 6.55k]
  |  Branch (37:50): [True: 24.5k, False: 14.2k]
  ------------------
   38|  24.5k|                        {
   39|  24.5k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  24.5k|                        }
   41|  20.8k|                        break;
   42|  45.4k|                    }
   43|  23.1k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 23.1k, False: 141k]
  ------------------
   44|  23.1k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 15.5k, False: 7.61k]
  |  Branch (44:50): [True: 10.8k, False: 4.68k]
  ------------------
   45|  10.8k|                        {
   46|  10.8k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  10.8k|                        }
   48|  12.2k|                        break;
   49|  23.1k|                    }
   50|  21.8k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 21.8k, False: 142k]
  ------------------
   51|  21.8k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 6.88k, False: 14.9k]
  |  Branch (51:50): [True: 13.4k, False: 1.50k]
  ------------------
   52|  20.3k|                        {
   53|  20.3k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  20.3k|                        }
   55|  1.50k|                        break;
   56|  21.8k|                    }
   57|  73.9k|                    default: {
  ------------------
  |  Branch (57:21): [True: 73.9k, False: 90.4k]
  ------------------
   58|  73.9k|                        break;
   59|  21.8k|                    }
   60|   164k|                }
   61|   164k|            }
   62|  2.14M|        }
   63|       |
   64|  10.0M|        return IntRegisterID::None;
   65|  10.1M|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|  10.0M|    {
   69|  10.0M|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 1.69M, False: 8.39M]
  ------------------
   70|  1.69M|        {
   71|  1.69M|            char first_char = token[0];
   72|  1.69M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 76.0k, False: 1.61M]
  |  Branch (72:38): [True: 64.6k, False: 1.55M]
  ------------------
   73|   140k|            {
   74|   140k|                char second_char = token[1];
   75|   140k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 98.0k, False: 42.5k]
  |  Branch (75:43): [True: 57.7k, False: 40.3k]
  ------------------
   76|  57.7k|                {
   77|  57.7k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  57.7k|                }
   79|   140k|            }
   80|  1.69M|        }
   81|  8.39M|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 2.09M, False: 6.30M]
  ------------------
   82|  2.09M|        {
   83|  2.09M|            char first_char = token[0];
   84|  2.09M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 67.0k, False: 2.02M]
  |  Branch (84:38): [True: 74.0k, False: 1.95M]
  ------------------
   85|   141k|            {
   86|   141k|                char second_char = token[1];
   87|   141k|                char third_char  = token[2];
   88|       |
   89|   141k|                switch (second_char)
   90|   141k|                {
   91|  32.6k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 32.6k, False: 108k]
  ------------------
   92|  32.6k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 23.3k, False: 9.31k]
  |  Branch (92:50): [True: 13.1k, False: 10.1k]
  ------------------
   93|  13.1k|                        {
   94|  13.1k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  13.1k|                        }
   96|  19.4k|                        break;
   97|  32.6k|                    }
   98|  27.3k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 27.3k, False: 113k]
  ------------------
   99|  27.3k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 25.0k, False: 2.28k]
  |  Branch (99:50): [True: 13.1k, False: 11.9k]
  ------------------
  100|  13.1k|                        {
  101|  13.1k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  13.1k|                        }
  103|  14.2k|                        break;
  104|  27.3k|                    }
  105|  18.9k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 18.9k, False: 122k]
  ------------------
  106|  18.9k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 4.12k, False: 14.8k]
  |  Branch (106:50): [True: 3.15k, False: 11.6k]
  ------------------
  107|  7.28k|                        {
  108|  7.28k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  7.28k|                        }
  110|  11.6k|                        break;
  111|  18.9k|                    }
  112|  62.1k|                    default: {
  ------------------
  |  Branch (112:21): [True: 62.1k, False: 78.9k]
  ------------------
  113|  62.1k|                        break;
  114|  18.9k|                    }
  115|   141k|                }
  116|   141k|            }
  117|  2.09M|        }
  118|       |
  119|  10.0M|        return FloatRegisterID::None;
  120|  10.0M|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|  9.73M|    {
  124|  9.73M|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 1.71M, False: 8.01M]
  ------------------
  125|  1.71M|        {
  126|  1.71M|            char c1 = token[0];
  127|  1.71M|            char c2 = token[1];
  128|  1.71M|            char c3 = token[2];
  129|  1.71M|            char c4 = token[3];
  130|       |
  131|  1.71M|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 44.9k, False: 1.67M]
  |  Branch (131:34): [True: 45.8k, False: 1.62M]
  |  Branch (131:49): [True: 4.63k, False: 86.1k]
  |  Branch (131:62): [True: 34.4k, False: 51.7k]
  ------------------
  132|  1.71M|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 26.3k, False: 12.7k]
  |  Branch (132:34): [True: 6.72k, False: 5.97k]
  |  Branch (132:49): [True: 9.57k, False: 23.5k]
  |  Branch (132:62): [True: 22.8k, False: 677]
  ------------------
  133|  1.71M|        }
  134|       |
  135|  8.01M|        return false;
  136|  9.73M|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|  74.5k|    {
   12|  74.5k|        m_Value = value;
   13|  74.5k|    }
_ZNK3dlx14StatusRegister3GetEv:
   16|     51|    {
   17|     51|        return m_Value;
   18|     51|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  14.0M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|  1.72M|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  35.9M|    {
   41|  35.9M|        return m_Type;
   42|  35.9M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  14.0M|    {
   51|  14.0M|        return m_LineNumber;
   52|  14.0M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  13.4M|    {
   56|  13.4M|        return m_Column;
   57|  13.4M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  17.1M|    {
   66|  17.1M|        return m_Text;
   67|  17.1M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   638k|    {
   80|   638k|        return m_HasHint;
   81|   638k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   680k|    {
   85|   680k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   680k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   680k|                   m_Type == Type::ImmediateInteger);
   88|   680k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   680k|        return m_Hint;
   91|   680k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  59.3k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  59.3k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  59.3k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  17.3k|    {
   51|  17.3k|        auto it = m_Iterator;
   52|  69.2k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 51.9k, False: 17.3k]
  ------------------
   53|  51.9k|        {
   54|  51.9k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 3, False: 51.9k]
  ------------------
   55|      3|            {
   56|      3|                return false;
   57|      3|            }
   58|  51.9k|        }
   59|       |
   60|  17.3k|        return true;
   61|  17.3k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  15.8M|    {
   65|  15.8M|        return m_Iterator != m_Tokens.end();
   66|  15.8M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  15.8M|    {
   70|  15.8M|        return m_Iterator == m_Tokens.end();
   71|  15.8M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  15.8M|    {
   85|  15.8M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  15.8M|        return *m_Iterator++;
   91|  15.8M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  17.3k|    {
  164|  17.3k|        return m_Iterator;
  165|  17.3k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  4.12k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  4.12k|        m_Iterator = it;
  179|  4.12k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  15.6k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  15.6k|        return m_Tokens.rbegin();
  224|  15.6k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|   136k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|   136k|        return m_Tokens.rend();
  233|   136k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  59.3k|    {
   63|  59.3k|        TokenStream tokens;
   64|       |
   65|  59.3k|        std::string_view current_token;
   66|       |
   67|  59.3k|        phi::u64 current_line_number{1u};
   68|  59.3k|        phi::u64 current_column{1u};
   69|  59.3k|        phi::u64 token_begin{0u};
   70|       |
   71|  59.3k|        phi::boolean parsing_comment{false};
   72|       |
   73|  42.8M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 42.7M, False: 59.3k]
  ------------------
   74|  42.7M|        {
   75|  42.7M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  42.7M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 1.81M, False: 40.9M]
  ------------------
   78|  1.81M|            {
   79|  1.81M|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 440k, False: 1.37M]
  ------------------
   80|   440k|                {
   81|       |                    // Skip empty lines
   82|   440k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|   440k|                                        current_line_number, current_column);
   84|       |
   85|   440k|                    parsing_comment = false;
   86|   440k|                    current_line_number += 1u;
   87|   440k|                    current_column = 1u;
   88|   440k|                    continue;
   89|   440k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|  1.37M|                tokens.emplace_back(
   93|  1.37M|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|  1.37M|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|  1.37M|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|  1.37M|                                    current_line_number, current_column);
   98|       |
   99|  1.37M|                current_token   = std::string_view{};
  100|  1.37M|                parsing_comment = false;
  101|  1.37M|                current_line_number += 1u;
  102|  1.37M|                current_column = 0u;
  103|  1.37M|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  40.9M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 31.6k, False: 40.9M]
  |  Branch (105:34): [True: 67.1k, False: 40.8M]
  ------------------
  106|  98.8k|            {
  107|  98.8k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 26.7k, False: 72.0k]
  ------------------
  108|  26.7k|                {
  109|  26.7k|                    token_begin = i;
  110|  26.7k|                }
  111|  72.0k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 61.6k, False: 10.4k]
  ------------------
  112|  61.6k|                {
  113|  61.6k|                    tokens.emplace_back(ParseToken(
  114|  61.6k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  61.6k|                            current_line_number, current_column - current_token.length()));
  116|  61.6k|                    token_begin   = i;
  117|  61.6k|                    current_token = std::string_view{};
  118|  61.6k|                }
  119|       |
  120|  98.8k|                parsing_comment = true;
  121|  98.8k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  98.8k|            }
  123|  40.8M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 449k, False: 40.4M]
  ------------------
  124|   449k|            {
  125|       |                // simply append the character
  126|   449k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   449k|            }
  128|  40.4M|            else
  129|  40.4M|            {
  130|       |                // Not parsing a comment
  131|  40.4M|                switch (c)
  132|  40.4M|                {
  133|   329k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 329k, False: 40.0M]
  ------------------
  134|   680k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 351k, False: 40.0M]
  ------------------
  135|  1.40M|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 724k, False: 39.6M]
  ------------------
  136|  1.40M|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 550k, False: 854k]
  ------------------
  137|   550k|                        {
  138|   550k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|   550k|                            continue;
  141|   550k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   854k|                        tokens.emplace_back(ParseToken(
  145|   854k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   854k|                                current_line_number, current_column - current_token.length()));
  147|   854k|                        current_token = std::string_view{};
  148|   854k|                        break;
  149|  3.21M|                    case ':':
  ------------------
  |  Branch (149:21): [True: 3.21M, False: 37.1M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  3.21M|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 2.46M, False: 755k]
  ------------------
  152|  2.46M|                        {
  153|  2.46M|                            current_token =
  154|  2.46M|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  2.46M|                            tokens.emplace_back(ParseToken(
  156|  2.46M|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  2.46M|                                    current_line_number,
  158|  2.46M|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  2.46M|                            current_token = std::string_view{};
  161|  2.46M|                        }
  162|   755k|                        else
  163|   755k|                        {
  164|       |                            // Orphan colon
  165|   755k|                            token_begin = i;
  166|       |
  167|   755k|                            tokens.emplace_back(Token::Type::Colon,
  168|   755k|                                                source.substr(token_begin.unsafe(), 1),
  169|   755k|                                                current_line_number, current_column);
  170|   755k|                        }
  171|  3.21M|                        break;
  172|  2.69M|                    case ',':
  ------------------
  |  Branch (172:21): [True: 2.69M, False: 37.7M]
  ------------------
  173|  3.23M|                    case '(':
  ------------------
  |  Branch (173:21): [True: 546k, False: 39.8M]
  ------------------
  174|  4.96M|                    case ')':
  ------------------
  |  Branch (174:21): [True: 1.72M, False: 38.6M]
  ------------------
  175|  4.96M|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 3.46M, False: 1.49M]
  ------------------
  176|  3.46M|                        {
  177|  3.46M|                            tokens.emplace_back(ParseToken(
  178|  3.46M|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|  3.46M|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|  3.46M|                            current_token = std::string_view{};
  182|  3.46M|                        }
  183|       |
  184|  4.96M|                        Token::Type type;
  185|  4.96M|                        switch (c)
  186|  4.96M|                        {
  187|  2.69M|                            case ',':
  ------------------
  |  Branch (187:29): [True: 2.69M, False: 2.27M]
  ------------------
  188|  2.69M|                                type = Token::Type::Comma;
  189|  2.69M|                                break;
  190|   546k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 546k, False: 4.41M]
  ------------------
  191|   546k|                                type = Token::Type::OpenBracket;
  192|   546k|                                break;
  193|  1.72M|                            case ')':
  ------------------
  |  Branch (193:29): [True: 1.72M, False: 3.23M]
  ------------------
  194|  1.72M|                                type = Token::Type::ClosingBracket;
  195|  1.72M|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 4.96M]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  4.96M|#endif
  201|  4.96M|                        }
  202|       |
  203|  4.96M|                        token_begin = i;
  204|       |
  205|  4.96M|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  4.96M|                                            current_line_number, current_column);
  207|  4.96M|                        break;
  208|       |
  209|  30.8M|                    default:
  ------------------
  |  Branch (209:21): [True: 30.8M, False: 9.58M]
  ------------------
  210|  30.8M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 8.17M, False: 22.6M]
  ------------------
  211|  8.17M|                        {
  212|  8.17M|                            token_begin = i;
  213|  8.17M|                        }
  214|       |
  215|       |                        // simply append the character
  216|  30.8M|                        current_token =
  217|  30.8M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  40.4M|                }
  219|  40.4M|            }
  220|       |
  221|  41.7M|            current_column += 1u;
  222|  41.7M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  59.3k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 44.1k, False: 15.2k]
  ------------------
  226|  44.1k|        {
  227|  44.1k|            tokens.emplace_back(
  228|  44.1k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  44.1k|                               current_line_number, current_column - current_token.length()));
  230|  44.1k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  59.3k|        tokens.finalize();
  234|       |
  235|  59.3k|        return tokens;
  236|  59.3k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  8.26M|    {
   11|  8.26M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 52.4k, False: 8.21M]
  |  Branch (11:35): [True: 33.9k, False: 18.4k]
  ------------------
   12|  33.9k|        {
   13|  33.9k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  33.9k|            if (number)
  ------------------
  |  Branch (15:17): [True: 12.1k, False: 21.7k]
  ------------------
   16|  12.1k|            {
   17|  12.1k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  12.1k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  12.1k|            }
   20|       |
   21|  21.7k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  33.9k|        }
   23|       |
   24|  8.23M|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 26.1k, False: 8.20M]
  |  Branch (24:35): [True: 62.2k, False: 8.14M]
  ------------------
   25|  88.3k|        {
   26|  88.3k|            return {Token::Type::Comment, token, line_number, column};
   27|  88.3k|        }
   28|       |
   29|  8.14M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 109k, False: 8.03M]
  ------------------
   30|   109k|        {
   31|   109k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|   109k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|   109k|        }
   34|       |
   35|  8.03M|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 23.7k, False: 8.00M]
  ------------------
   36|  23.7k|        {
   37|  23.7k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  23.7k|        }
   39|       |
   40|  8.00M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 87.8k, False: 7.92M]
  ------------------
   41|  87.8k|        {
   42|  87.8k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  87.8k|                    static_cast<std::uint32_t>(id)};
   44|  87.8k|        }
   45|       |
   46|  7.92M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 70.2k, False: 7.85M]
  ------------------
   47|  70.2k|        {
   48|  70.2k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  70.2k|                    static_cast<std::uint32_t>(id)};
   50|  70.2k|        }
   51|       |
   52|  7.85M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 1.44M, False: 6.40M]
  ------------------
   53|  1.44M|        {
   54|  1.44M|            return {Token::Type::OpCode, token, line_number, column,
   55|  1.44M|                    static_cast<std::uint32_t>(opcode)};
   56|  1.44M|        }
   57|       |
   58|  6.40M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|  7.85M|    }

LLVMFuzzerTestOneInput:
   12|  59.3k|{
   13|  59.3k|    static dlx::Processor processor;
   14|       |
   15|  59.3k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   16|       |
   17|       |    // Parse it
   18|  59.3k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  59.3k|    processor.ClearRegisters();
   22|  59.3k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  59.3k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 463, False: 58.8k]
  ------------------
   26|    463|    {
   27|    463|        processor.ExecuteCurrentProgram();
   28|    463|    }
   29|       |
   30|  59.3k|    return 0;
   31|  59.3k|}


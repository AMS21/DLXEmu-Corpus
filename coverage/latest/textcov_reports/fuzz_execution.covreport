_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   694k|        {
  169|   694k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   694k|            switch (index.unsafe())
  172|   694k|            {
  173|   306k|                case 0:
  ------------------
  |  Branch (173:17): [True: 306k, False: 388k]
  ------------------
  174|   306k|                    return m_Arg1Type;
  175|       |
  176|   200k|                case 1:
  ------------------
  |  Branch (176:17): [True: 200k, False: 493k]
  ------------------
  177|   200k|                    return m_Arg2Type;
  178|       |
  179|   187k|                case 2:
  ------------------
  |  Branch (179:17): [True: 187k, False: 506k]
  ------------------
  180|   187k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 694k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   694k|#endif
  187|   694k|            }
  188|   694k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   184k|        {
  195|   184k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   184k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 178k, False: 6.52k]
  ------------------
  199|   178k|            {
  200|   178k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   178k|            }
  202|   184k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 107k, False: 77.1k]
  ------------------
  203|   107k|            {
  204|   107k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   107k|            }
  206|   184k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 32.4k, False: 152k]
  ------------------
  207|  32.4k|            {
  208|  32.4k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  32.4k|            }
  210|       |
  211|   184k|            return number_of_argument_required;
  212|   184k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  5.65M|        {
  216|  5.65M|            return m_RegisterAccessType;
  217|  5.65M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   184k|        {
  221|   184k|            return m_Executor;
  222|   184k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  17.0M|    {
   38|  17.0M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  17.0M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  17.0M|                                         static_cast<underlying_t>(rhs));
   42|  17.0M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  17.0M|    {
   55|  17.0M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  17.0M|        return static_cast<underlying_t>(type & test) != 0;
   58|  17.0M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|   557k|    {
   32|   557k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 4.58k, False: 552k]
  ------------------
   33|  4.58k|        {
   34|  4.58k|            return true;
   35|  4.58k|        }
   36|       |
   37|   552k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 5.25k, False: 547k]
  ------------------
   38|  5.25k|        {
   39|  5.25k|            return true;
   40|  5.25k|        }
   41|       |
   42|   547k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 151k, False: 396k]
  ------------------
   43|   151k|        {
   44|   151k|            return true;
   45|   151k|        }
   46|       |
   47|   396k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 3.59k, False: 392k]
  ------------------
   48|  3.59k|        {
   49|  3.59k|            return true;
   50|  3.59k|        }
   51|       |
   52|   392k|        return false;
   53|   396k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|   392k|    {
   57|   392k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 392k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|   392k|        const char first_char = token.at(0);
   63|       |
   64|   392k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 90.6k, False: 301k]
  ------------------
   65|  90.6k|        {
   66|  90.6k|            return phi::is_alpha(first_char);
   67|  90.6k|        }
   68|       |
   69|   301k|        phi::boolean just_under_scores = (first_char == '_');
   70|   301k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 92.0k, False: 209k]
  |  Branch (70:15): [True: 202k, False: 98.8k]
  |  Branch (70:44): [True: 6.76k, False: 92.0k]
  ------------------
   71|  92.0k|        {
   72|  92.0k|            return false;
   73|  92.0k|        }
   74|       |
   75|   598k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 498k, False: 99.9k]
  ------------------
   76|   498k|        {
   77|   498k|            const char c{token.at(index)};
   78|       |
   79|   498k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 387k, False: 111k]
  ------------------
   80|   387k|            {
   81|   387k|                just_under_scores = false;
   82|   387k|            }
   83|   111k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 1.23k, False: 109k]
  ------------------
   84|  1.23k|            {
   85|  1.23k|                continue;
   86|  1.23k|            }
   87|   109k|            else
   88|   109k|            {
   89|   109k|                return false;
   90|   109k|            }
   91|   498k|        }
   92|       |
   93|  99.9k|        return !just_under_scores;
   94|   209k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|  2.03M|    {
  101|  2.03M|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 2.03M]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|  2.03M|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 327k, False: 1.71M]
  ------------------
  107|   327k|        {
  108|   327k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 32.5k, False: 295k]
  ------------------
  109|  32.5k|            {
  110|  32.5k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  32.5k|            }
  112|       |
  113|   295k|            return {};
  114|   327k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|  1.71M|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 8.27k, False: 1.70M]
  ------------------
  118|  8.27k|        {
  119|  8.27k|            return {};
  120|  8.27k|        }
  121|       |
  122|  1.70M|        std::int32_t number{0};
  123|  1.70M|        phi::boolean is_negative{false};
  124|  1.70M|        phi::boolean starts_with_zero{false};
  125|  1.70M|        phi::boolean parsing_binary{false};
  126|  1.70M|        phi::boolean parsing_octal{false};
  127|  1.70M|        phi::boolean parsing_hexadecimal{false};
  128|  1.70M|        phi::boolean parsed_something{false};
  129|  1.70M|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|  1.93M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 1.91M, False: 22.8k]
  ------------------
  134|  1.91M|        {
  135|  1.91M|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|  1.91M|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 1.70M, False: 213k]
  ------------------
  139|  1.70M|            {
  140|  1.70M|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 6.10k, False: 1.69M]
  ------------------
  141|  6.10k|                {
  142|  6.10k|                    continue;
  143|  6.10k|                }
  144|       |
  145|  1.69M|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 29.5k, False: 1.66M]
  ------------------
  146|  29.5k|                {
  147|  29.5k|                    is_negative = true;
  148|  29.5k|                    continue;
  149|  29.5k|                }
  150|       |
  151|  1.66M|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 51.3k, False: 1.61M]
  ------------------
  152|  51.3k|                {
  153|  51.3k|                    starts_with_zero = true;
  154|  51.3k|                    continue;
  155|  51.3k|                }
  156|       |
  157|  1.61M|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 5.17k, False: 1.61M]
  ------------------
  158|  5.17k|                {
  159|  5.17k|                    return {};
  160|  5.17k|                }
  161|  1.61M|            }
  162|       |
  163|       |            // Second character
  164|  1.82M|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 108k, False: 1.71M]
  ------------------
  165|   108k|            {
  166|   108k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 51.3k, False: 57.2k]
  ------------------
  167|  51.3k|                {
  168|       |                    // Binary
  169|  51.3k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 6.29k, False: 45.0k]
  |  Branch (169:37): [True: 2.13k, False: 42.9k]
  ------------------
  170|  8.42k|                    {
  171|  8.42k|                        parsing_binary = true;
  172|  8.42k|                        continue;
  173|  8.42k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  42.9k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 7.05k, False: 35.8k]
  |  Branch (176:37): [True: 12.6k, False: 23.1k]
  ------------------
  177|  19.7k|                    {
  178|  19.7k|                        parsing_hexadecimal = true;
  179|  19.7k|                        continue;
  180|  19.7k|                    }
  181|       |
  182|       |                    // Octal
  183|  23.1k|                    parsing_octal = true;
  184|  23.1k|                }
  185|   108k|            }
  186|       |
  187|       |            // Handle seperators
  188|  1.79M|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 4.27k, False: 1.79M]
  ------------------
  189|  4.27k|            {
  190|  4.27k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 1.68k, False: 2.58k]
  ------------------
  191|  1.68k|                {
  192|  1.68k|                    return {};
  193|  1.68k|                }
  194|       |
  195|  2.58k|                parsed_separator = true;
  196|  2.58k|                continue;
  197|  4.27k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|  1.79M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 52.1k, False: 1.73M]
  |  Branch (200:32): [True: 2.32k, False: 49.8k]
  ------------------
  201|  2.32k|            {
  202|       |                // Would underflow
  203|  2.32k|                return {};
  204|  2.32k|            }
  205|  1.78M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 1.73M, False: 49.8k]
  |  Branch (205:17): [True: 2.32k, False: 1.78M]
  |  Branch (205:33): [True: 2.32k, False: 1.73M]
  ------------------
  206|  2.32k|            {
  207|       |                // Would overflow
  208|  2.32k|                return {};
  209|  2.32k|            }
  210|       |
  211|  1.78M|            parsed_separator = false;
  212|  1.78M|            parsed_something = true;
  213|       |
  214|  1.78M|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 8.28k, False: 1.77M]
  ------------------
  215|  8.28k|            {
  216|  8.28k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 4.32k, False: 3.95k]
  ------------------
  217|  4.32k|                {
  218|  4.32k|                    return {};
  219|  4.32k|                }
  220|       |
  221|  3.95k|                number <<= 1;
  222|  3.95k|                number |= (c - '0');
  223|  3.95k|            }
  224|  1.77M|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 25.5k, False: 1.75M]
  ------------------
  225|  25.5k|            {
  226|  25.5k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 16.5k, False: 8.94k]
  ------------------
  227|  16.5k|                {
  228|  16.5k|                    return {};
  229|  16.5k|                }
  230|       |
  231|  8.94k|                number <<= 3;
  232|  8.94k|                number |= (c - '0');
  233|  8.94k|            }
  234|  1.75M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 46.1k, False: 1.70M]
  ------------------
  235|  46.1k|            {
  236|  46.1k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 17.6k, False: 28.5k]
  ------------------
  237|  17.6k|                {
  238|  17.6k|                    return {};
  239|  17.6k|                }
  240|       |
  241|  28.5k|                number <<= 4;
  242|  28.5k|                number |= phi::hex_digit_value(c).unsafe();
  243|  28.5k|            }
  244|  1.70M|            else
  245|  1.70M|            {
  246|  1.70M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 1.62M, False: 78.8k]
  ------------------
  247|  1.62M|                {
  248|  1.62M|                    return {};
  249|  1.62M|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  78.8k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 36.1k, False: 42.6k]
  |  Branch (252:36): [True: 1.49k, False: 34.6k]
  ------------------
  253|  1.49k|                {
  254|  1.49k|                    return {};
  255|  1.49k|                }
  256|       |
  257|  77.3k|                number *= 10;
  258|  77.3k|                number += (c - '0');
  259|  77.3k|            }
  260|  1.78M|        }
  261|       |
  262|  22.8k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 19.1k, False: 3.71k]
  ------------------
  263|  19.1k|        {
  264|       |            // Check for over/underflow
  265|  19.1k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 8.52k, False: 10.6k]
  |  Branch (265:32): [True: 1.91k, False: 6.60k]
  ------------------
  266|  1.91k|            {
  267|       |                // Would underflow
  268|  1.91k|                return {};
  269|  1.91k|            }
  270|  17.2k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 10.6k, False: 6.60k]
  |  Branch (270:17): [True: 2.76k, False: 14.4k]
  |  Branch (270:33): [True: 2.76k, False: 7.83k]
  ------------------
  271|  2.76k|            {
  272|       |                // Would overflow
  273|  2.76k|                return {};
  274|  2.76k|            }
  275|       |
  276|  14.4k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 6.60k, False: 7.83k]
  ------------------
  277|  6.60k|            {
  278|  6.60k|                return static_cast<std::int16_t>(-number);
  279|  6.60k|            }
  280|       |
  281|  7.83k|            return static_cast<std::int16_t>(number);
  282|  14.4k|        }
  283|       |
  284|  3.71k|        return {};
  285|  22.8k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  98.2k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  98.2k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 2.06M, False: 0]
  ------------------
   64|  2.06M|            {
   65|  2.06M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 98.2k, False: 1.97M]
  ------------------
   66|  98.2k|                {
   67|  98.2k|                    return &token;
   68|  98.2k|                }
   69|  2.06M|            }
   70|       |
   71|      0|            return nullptr;
   72|  98.2k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   607k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   607k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   607k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  2.05M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.05M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.05M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  1.15M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.15M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.15M|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|   806k|    {
   11|   806k|        m_Value = val;
   12|   806k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  1.78M|    {
   16|  1.78M|        return m_Value;
   17|  1.78M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   18|   184k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   23|  48.2k|    {
   24|  48.2k|        PHI_ASSERT(argument_number < 3u);
   25|       |
   26|  48.2k|        switch (argument_number.unsafe())
   27|  48.2k|        {
   28|  36.9k|            case 0u:
  ------------------
  |  Branch (28:13): [True: 36.9k, False: 11.3k]
  ------------------
   29|  36.9k|                m_Arg1 = argument;
   30|  36.9k|                break;
   31|  8.49k|            case 1u:
  ------------------
  |  Branch (31:13): [True: 8.49k, False: 39.7k]
  ------------------
   32|  8.49k|                m_Arg2 = argument;
   33|  8.49k|                break;
   34|  2.82k|            case 2u:
  ------------------
  |  Branch (34:13): [True: 2.82k, False: 45.3k]
  ------------------
   35|  2.82k|                m_Arg3 = argument;
   36|  2.82k|                break;
   37|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   38|      0|            default:
  ------------------
  |  Branch (38:13): [True: 0, False: 48.2k]
  ------------------
   39|      0|                PHI_ASSERT_NOT_REACHED();
   40|  48.2k|#endif
   41|  48.2k|        }
   42|  48.2k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   82|  5.65M|    {
   83|  5.65M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   84|  5.65M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   87|  5.65M|    {
   88|  5.65M|        return m_Info;
   89|  5.65M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   23|   602k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   26|  33.9M|    {
   27|  33.9M|        return m_Type;
   28|  33.9M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  4.41M|    {
   78|  4.41M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  4.41M|        return register_int;
   81|  4.41M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   85|  1.59M|    {
   86|  1.59M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   87|       |
   88|  1.59M|        return register_float;
   89|  1.59M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   93|  44.2k|    {
   94|  44.2k|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   95|       |
   96|  44.2k|        return immediate_value;
   97|  44.2k|    }
_ZNK3dlx19InstructionArgument21AsAddressDisplacementEv:
  101|      4|    {
  102|      4|        PHI_ASSERT(m_Type == ArgumentType::AddressDisplacement);
  103|       |
  104|      4|        return address_displacement;
  105|      4|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  109|   623k|    {
  110|   623k|        PHI_ASSERT(m_Type == ArgumentType::Label);
  111|       |
  112|   623k|        return label;
  113|   623k|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  173|  11.9k|    {
  174|  11.9k|        InstructionArgument arg;
  175|  11.9k|        arg.m_Type                   = ArgumentType::IntRegister;
  176|  11.9k|        arg.register_int.register_id = id;
  177|  11.9k|        return arg;
  178|  11.9k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  182|  12.5k|    {
  183|  12.5k|        InstructionArgument arg;
  184|  12.5k|        arg.m_Type                     = ArgumentType::FloatRegister;
  185|  12.5k|        arg.register_float.register_id = id;
  186|  12.5k|        return arg;
  187|  12.5k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  191|  1.92k|    {
  192|  1.92k|        InstructionArgument arg;
  193|  1.92k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  194|  1.92k|        arg.immediate_value.signed_value = value;
  195|  1.92k|        return arg;
  196|  1.92k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  200|  2.88k|    {
  201|  2.88k|        InstructionArgument arg;
  202|  2.88k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  203|  2.88k|        arg.address_displacement.register_id  = id;
  204|  2.88k|        arg.address_displacement.displacement = displacement;
  205|  2.88k|        return arg;
  206|  2.88k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  210|  18.9k|    {
  211|  18.9k|        InstructionArgument arg;
  212|  18.9k|        arg.m_Type           = ArgumentType::Label;
  213|  18.9k|        arg.label.label_name = label_name;
  214|  18.9k|        return arg;
  215|  18.9k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  351|  83.9k|        {
  352|  83.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  353|  83.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  354|  83.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  355|       |
  356|  83.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  357|  83.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  358|       |
  359|  83.9k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  360|  83.9k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  376|  42.2k|        {
  377|  42.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  378|  42.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  379|  42.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  380|       |
  381|  42.2k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  382|  42.2k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  383|       |
  384|  42.2k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  385|  42.2k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  401|  45.0k|        {
  402|  45.0k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  403|  45.0k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  404|  45.0k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  405|       |
  406|  45.0k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  407|  45.0k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  408|       |
  409|  45.0k|            const phi::f32 new_value = lhs_value + rhs_value;
  410|       |
  411|  45.0k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  412|  45.0k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  416|  13.3k|        {
  417|  13.3k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  418|  13.3k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  419|  13.3k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  420|       |
  421|  13.3k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  422|  13.3k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  423|       |
  424|  13.3k|            const phi::f64 new_value = lhs_value + rhs_value;
  425|       |
  426|  13.3k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  427|  13.3k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  431|  33.3k|        {
  432|  33.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  433|  33.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  434|  33.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  435|       |
  436|  33.3k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  437|  33.3k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  438|       |
  439|  33.3k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  440|  33.3k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  456|  40.0k|        {
  457|  40.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  458|  40.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  459|  40.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  460|       |
  461|  40.0k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  462|  40.0k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  463|       |
  464|  40.0k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  465|  40.0k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  481|  5.00k|        {
  482|  5.00k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  483|  5.00k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  484|  5.00k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  485|       |
  486|  5.00k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  487|  5.00k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  488|       |
  489|  5.00k|            const phi::f32 new_value = lhs_value - rhs_value;
  490|       |
  491|  5.00k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  492|  5.00k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  496|      2|        {
  497|      2|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  498|      2|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  499|      2|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  500|       |
  501|      2|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  502|      2|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  503|       |
  504|      2|            const phi::f64 new_value = lhs_value - rhs_value;
  505|       |
  506|      2|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  507|      2|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  511|  24.3k|        {
  512|  24.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  513|  24.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  514|  24.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  515|       |
  516|  24.3k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  517|  24.3k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  518|       |
  519|  24.3k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  520|  24.3k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  536|  5.00k|        {
  537|  5.00k|            const auto& dest_reg = arg1.AsRegisterInt();
  538|  5.00k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  539|  5.00k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  540|       |
  541|  5.00k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  542|  5.00k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  543|       |
  544|  5.00k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  545|  5.00k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  591|      1|        {
  592|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  593|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  594|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  595|       |
  596|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  597|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  598|       |
  599|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  600|      1|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  616|      1|        {
  617|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  618|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  619|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  620|       |
  621|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  622|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  623|       |
  624|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  625|      1|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  641|      1|        {
  642|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  643|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  644|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  645|       |
  646|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  647|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  648|       |
  649|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (649:17): [True: 1, False: 0]
  ------------------
  650|      1|            {
  651|      1|                processor.Raise(Exception::DivideByZero);
  652|      1|                return;
  653|      1|            }
  654|       |
  655|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  656|       |
  657|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  658|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  662|      1|        {
  663|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  664|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  665|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  666|       |
  667|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  668|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  669|       |
  670|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (670:17): [True: 1, False: 0]
  ------------------
  671|      1|            {
  672|      1|                processor.Raise(Exception::DivideByZero);
  673|      1|                return;
  674|      1|            }
  675|       |
  676|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  677|       |
  678|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  679|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  683|  30.9k|        {
  684|  30.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  685|  30.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  686|  30.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  687|       |
  688|  30.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  689|  30.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  690|       |
  691|  30.9k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  692|  30.9k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  709|  25.2k|        {
  710|  25.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  711|  25.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  712|  25.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  713|       |
  714|  25.2k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  715|  25.2k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  716|       |
  717|  25.2k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  718|  25.2k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  735|  25.6k|        {
  736|  25.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  737|  25.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  738|  25.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  739|       |
  740|  25.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  741|  25.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  742|       |
  743|  25.6k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  744|  25.6k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  761|  64.1k|        {
  762|  64.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  763|  64.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  764|  64.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  765|       |
  766|  64.1k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  767|  64.1k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  768|       |
  769|  64.1k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  770|  64.1k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  787|  22.9k|        {
  788|  22.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  789|  22.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  790|  22.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  791|       |
  792|  22.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  793|  22.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  794|  22.9k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  795|       |
  796|  22.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  797|  22.9k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  814|   108k|        {
  815|   108k|            const auto& dest_reg = arg1.AsRegisterInt();
  816|   108k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  817|   108k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  818|       |
  819|   108k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  820|   108k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  821|   108k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  822|       |
  823|   108k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  824|   108k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  841|   159k|        {
  842|   159k|            const auto& dest_reg = arg1.AsRegisterInt();
  843|   159k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  844|   159k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  845|       |
  846|   159k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  847|   159k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  848|   159k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  849|       |
  850|   159k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  851|   159k|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  868|  27.3k|        {
  869|  27.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  870|  27.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  871|  27.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  872|       |
  873|  27.3k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  874|  27.3k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  875|       |
  876|  27.3k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (876:41): [True: 0, False: 27.3k]
  ------------------
  877|       |
  878|  27.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  879|  27.3k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  897|  22.1k|        {
  898|  22.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  899|  22.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  900|  22.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  901|       |
  902|  22.1k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  903|  22.1k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  904|       |
  905|  22.1k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (905:41): [True: 0, False: 22.1k]
  ------------------
  906|       |
  907|  22.1k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  908|  22.1k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  926|   134k|        {
  927|   134k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  928|   134k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  929|       |
  930|   134k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  931|   134k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  932|       |
  933|   134k|            const phi::boolean new_value = (lhs_value < rhs_value);
  934|       |
  935|   134k|            processor.SetFPSRValue(new_value);
  936|   134k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  940|  15.7k|        {
  941|  15.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  942|  15.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  943|       |
  944|  15.7k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  945|  15.7k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  946|       |
  947|  15.7k|            const phi::boolean new_value = (lhs_value < rhs_value);
  948|       |
  949|  15.7k|            processor.SetFPSRValue(new_value);
  950|  15.7k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  954|  17.5k|        {
  955|  17.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  956|  17.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  957|  17.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  958|       |
  959|  17.5k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  960|  17.5k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  961|       |
  962|  17.5k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (962:41): [True: 0, False: 17.5k]
  ------------------
  963|       |
  964|  17.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  965|  17.5k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  983|  12.0k|        {
  984|  12.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  985|  12.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  986|  12.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  987|       |
  988|  12.0k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  989|  12.0k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  990|       |
  991|  12.0k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (991:41): [True: 0, False: 12.0k]
  ------------------
  992|       |
  993|  12.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  994|  12.0k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1012|  89.8k|        {
 1013|  89.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1014|  89.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1015|       |
 1016|  89.8k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1017|  89.8k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1018|       |
 1019|  89.8k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1020|       |
 1021|  89.8k|            processor.SetFPSRValue(new_value);
 1022|  89.8k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1026|  22.5k|        {
 1027|  22.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1028|  22.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1029|       |
 1030|  22.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1031|  22.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1032|       |
 1033|  22.5k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1034|       |
 1035|  22.5k|            processor.SetFPSRValue(new_value);
 1036|  22.5k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1040|  75.8k|        {
 1041|  75.8k|            const auto& dest_reg = arg1.AsRegisterInt();
 1042|  75.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1043|  75.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1044|       |
 1045|  75.8k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1046|  75.8k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1047|       |
 1048|  75.8k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1048:41): [True: 75.8k, False: 0]
  ------------------
 1049|       |
 1050|  75.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1051|  75.8k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1069|  21.5k|        {
 1070|  21.5k|            const auto& dest_reg = arg1.AsRegisterInt();
 1071|  21.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1072|  21.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1073|       |
 1074|  21.5k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1075|  21.5k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1076|       |
 1077|  21.5k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1077:41): [True: 21.5k, False: 0]
  ------------------
 1078|       |
 1079|  21.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1080|  21.5k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1098|  20.3k|        {
 1099|  20.3k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1100|  20.3k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1101|       |
 1102|  20.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1103|  20.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1104|       |
 1105|  20.3k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1106|       |
 1107|  20.3k|            processor.SetFPSRValue(new_value);
 1108|  20.3k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1112|  59.4k|        {
 1113|  59.4k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1114|  59.4k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1115|       |
 1116|  59.4k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1117|  59.4k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1118|       |
 1119|  59.4k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1120|       |
 1121|  59.4k|            processor.SetFPSRValue(new_value);
 1122|  59.4k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1126|  24.7k|        {
 1127|  24.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1128|  24.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1129|  24.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1130|       |
 1131|  24.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1132|  24.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1133|       |
 1134|  24.7k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1134:41): [True: 22.7k, False: 2.00k]
  ------------------
 1135|       |
 1136|  24.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1137|  24.7k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1155|  10.3k|        {
 1156|  10.3k|            const auto& dest_reg = arg1.AsRegisterInt();
 1157|  10.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1158|  10.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1159|       |
 1160|  10.3k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1161|  10.3k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1162|       |
 1163|  10.3k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1163:41): [True: 10.3k, False: 0]
  ------------------
 1164|       |
 1165|  10.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1166|  10.3k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1184|  24.5k|        {
 1185|  24.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1186|  24.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1187|       |
 1188|  24.5k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1189|  24.5k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1190|       |
 1191|  24.5k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1192|       |
 1193|  24.5k|            processor.SetFPSRValue(new_value);
 1194|  24.5k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1198|  25.8k|        {
 1199|  25.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1200|  25.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1201|       |
 1202|  25.8k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1203|  25.8k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1204|       |
 1205|  25.8k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1206|       |
 1207|  25.8k|            processor.SetFPSRValue(new_value);
 1208|  25.8k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1212|  55.3k|        {
 1213|  55.3k|            const auto& dest_reg = arg1.AsRegisterInt();
 1214|  55.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1215|  55.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1216|       |
 1217|  55.3k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1218|  55.3k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1219|       |
 1220|  55.3k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1220:41): [True: 55.3k, False: 0]
  ------------------
 1221|       |
 1222|  55.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1223|  55.3k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1241|  63.2k|        {
 1242|  63.2k|            const auto& dest_reg = arg1.AsRegisterInt();
 1243|  63.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1244|  63.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1245|       |
 1246|  63.2k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1247|  63.2k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1248|       |
 1249|  63.2k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1249:41): [True: 63.2k, False: 0]
  ------------------
 1250|       |
 1251|  63.2k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1252|  63.2k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1270|  30.0k|        {
 1271|  30.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1272|  30.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1273|       |
 1274|  30.0k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1275|  30.0k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1276|       |
 1277|  30.0k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1278|       |
 1279|  30.0k|            processor.SetFPSRValue(new_value);
 1280|  30.0k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1284|  29.1k|        {
 1285|  29.1k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1286|  29.1k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1287|       |
 1288|  29.1k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1289|  29.1k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1290|       |
 1291|  29.1k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1292|       |
 1293|  29.1k|            processor.SetFPSRValue(new_value);
 1294|  29.1k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1298|  37.6k|        {
 1299|  37.6k|            const auto& dest_reg = arg1.AsRegisterInt();
 1300|  37.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1301|  37.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1302|       |
 1303|  37.6k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1304|  37.6k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1305|       |
 1306|  37.6k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1306:41): [True: 0, False: 37.6k]
  ------------------
 1307|       |
 1308|  37.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1309|  37.6k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1327|  39.6k|        {
 1328|  39.6k|            const auto& dest_reg = arg1.AsRegisterInt();
 1329|  39.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1330|  39.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1331|       |
 1332|  39.6k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1333|  39.6k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1334|       |
 1335|  39.6k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1335:41): [True: 0, False: 39.6k]
  ------------------
 1336|       |
 1337|  39.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1338|  39.6k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1356|  27.3k|        {
 1357|  27.3k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1358|  27.3k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1359|       |
 1360|  27.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1361|  27.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1362|       |
 1363|  27.3k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1364|       |
 1365|  27.3k|            processor.SetFPSRValue(new_value);
 1366|  27.3k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1370|  22.5k|        {
 1371|  22.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1372|  22.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1373|       |
 1374|  22.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1375|  22.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1376|       |
 1377|  22.5k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1378|       |
 1379|  22.5k|            processor.SetFPSRValue(new_value);
 1380|  22.5k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1384|  94.8k|        {
 1385|  94.8k|            const auto& test_reg   = arg1.AsRegisterInt();
 1386|  94.8k|            const auto& jump_label = arg2.AsLabel();
 1387|       |
 1388|  94.8k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1389|       |
 1390|  94.8k|            if (test_value == 0)
  ------------------
  |  Branch (1390:17): [True: 94.8k, False: 0]
  ------------------
 1391|  94.8k|            {
 1392|  94.8k|                JumpToLabel(processor, jump_label.label_name);
 1393|  94.8k|            }
 1394|  94.8k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1398|  43.9k|        {
 1399|  43.9k|            const auto& test_reg   = arg1.AsRegisterInt();
 1400|  43.9k|            const auto& jump_label = arg2.AsLabel();
 1401|       |
 1402|  43.9k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1403|       |
 1404|  43.9k|            if (test_value != 0)
  ------------------
  |  Branch (1404:17): [True: 0, False: 43.9k]
  ------------------
 1405|      0|            {
 1406|      0|                JumpToLabel(processor, jump_label.label_name);
 1407|      0|            }
 1408|  43.9k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1412|  11.5k|        {
 1413|  11.5k|            const auto& jump_label = arg1.AsLabel();
 1414|       |
 1415|  11.5k|            phi::boolean test_value = processor.GetFPSRValue();
 1416|       |
 1417|  11.5k|            if (test_value)
  ------------------
  |  Branch (1417:17): [True: 1, False: 11.5k]
  ------------------
 1418|      1|            {
 1419|      1|                JumpToLabel(processor, jump_label.label_name);
 1420|      1|            }
 1421|  11.5k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1425|   256k|        {
 1426|   256k|            const auto& jump_label = arg1.AsLabel();
 1427|       |
 1428|   256k|            phi::boolean test_value = processor.GetFPSRValue();
 1429|       |
 1430|   256k|            if (!test_value)
  ------------------
  |  Branch (1430:17): [True: 210k, False: 45.4k]
  ------------------
 1431|   210k|            {
 1432|   210k|                JumpToLabel(processor, jump_label.label_name);
 1433|   210k|            }
 1434|   256k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1438|   136k|        {
 1439|   136k|            const auto& jump_label = arg1.AsLabel();
 1440|       |
 1441|   136k|            JumpToLabel(processor, jump_label.label_name);
 1442|   136k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1446|  1.00M|        {
 1447|  1.00M|            const auto& jump_register = arg1.AsRegisterInt();
 1448|       |
 1449|  1.00M|            JumpToRegister(processor, jump_register.register_id);
 1450|  1.00M|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1454|  81.0k|        {
 1455|  81.0k|            const auto& jump_label = arg1.AsLabel();
 1456|       |
 1457|  81.0k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1458|  81.0k|                                                  processor.GetNextProgramCounter());
 1459|       |
 1460|  81.0k|            JumpToLabel(processor, jump_label.label_name);
 1461|  81.0k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1465|  38.0k|        {
 1466|  38.0k|            const auto& jump_register = arg1.AsRegisterInt();
 1467|       |
 1468|  38.0k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1469|  38.0k|                                                  processor.GetNextProgramCounter());
 1470|       |
 1471|  38.0k|            JumpToRegister(processor, jump_register.register_id);
 1472|  38.0k|        }
_ZN3dlx4impl2SBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1719|      5|        {
 1720|      5|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1721|       |
 1722|      5|            if (!optional_address.has_value())
  ------------------
  |  Branch (1722:17): [True: 1, False: 4]
  ------------------
 1723|      1|            {
 1724|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1725|      1|                return;
 1726|      1|            }
 1727|       |
 1728|      4|            phi::i32 address = optional_address.value();
 1729|       |
 1730|      4|            const auto& src_reg = arg2.AsRegisterInt();
 1731|       |
 1732|      4|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1733|       |
 1734|      4|            phi::boolean success =
 1735|      4|                    processor.GetMemory().StoreByte(static_cast<std::size_t>(address.unsafe()),
 1736|      4|                                                    static_cast<std::int8_t>(value.unsafe()));
 1737|       |
 1738|      4|            if (!success)
  ------------------
  |  Branch (1738:17): [True: 3, False: 1]
  ------------------
 1739|      3|            {
 1740|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1741|      3|                DLX_ERROR("Failed to store byte at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1742|      3|            }
 1743|      4|        }
_ZN3dlx4impl3SBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1747|      2|        {
 1748|      2|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1749|       |
 1750|      2|            if (!optional_address.has_value())
  ------------------
  |  Branch (1750:17): [True: 0, False: 2]
  ------------------
 1751|      0|            {
 1752|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1753|      0|                return;
 1754|      0|            }
 1755|       |
 1756|      2|            phi::i32 address = optional_address.value();
 1757|       |
 1758|      2|            const auto& src_reg = arg2.AsRegisterInt();
 1759|       |
 1760|      2|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1761|       |
 1762|      2|            phi::boolean success = processor.GetMemory().StoreUnsignedByte(
 1763|      2|                    static_cast<std::size_t>(address.unsafe()),
 1764|      2|                    static_cast<std::uint8_t>(value.unsafe()));
 1765|       |
 1766|      2|            if (!success)
  ------------------
  |  Branch (1766:17): [True: 2, False: 0]
  ------------------
 1767|      2|            {
 1768|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1769|      2|                DLX_ERROR("Failed to store unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1770|      2|            }
 1771|      2|        }
_ZN3dlx4impl2SHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1775|  13.3k|        {
 1776|  13.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1777|       |
 1778|  13.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1778:17): [True: 1, False: 13.3k]
  ------------------
 1779|      1|            {
 1780|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1781|      1|                return;
 1782|      1|            }
 1783|       |
 1784|  13.3k|            phi::i32 address = optional_address.value();
 1785|       |
 1786|  13.3k|            const auto& src_reg = arg2.AsRegisterInt();
 1787|       |
 1788|  13.3k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1789|       |
 1790|  13.3k|            phi::boolean success =
 1791|  13.3k|                    processor.GetMemory().StoreHalfWord(static_cast<std::size_t>(address.unsafe()),
 1792|  13.3k|                                                        static_cast<std::int16_t>(value.unsafe()));
 1793|       |
 1794|  13.3k|            if (!success)
  ------------------
  |  Branch (1794:17): [True: 3, False: 13.3k]
  ------------------
 1795|      3|            {
 1796|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1797|      3|                DLX_ERROR("Failed to store half word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1798|      3|            }
 1799|  13.3k|        }
_ZN3dlx4impl3SHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1803|      4|        {
 1804|      4|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1805|       |
 1806|      4|            if (!optional_address.has_value())
  ------------------
  |  Branch (1806:17): [True: 1, False: 3]
  ------------------
 1807|      1|            {
 1808|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1809|      1|                return;
 1810|      1|            }
 1811|       |
 1812|      3|            phi::i32 address = optional_address.value();
 1813|       |
 1814|      3|            const auto& src_reg = arg2.AsRegisterInt();
 1815|       |
 1816|      3|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1817|       |
 1818|      3|            phi::boolean success = processor.GetMemory().StoreUnsignedHalfWord(
 1819|      3|                    static_cast<std::size_t>(address.unsafe()),
 1820|      3|                    static_cast<std::uint16_t>(value.unsafe()));
 1821|       |
 1822|      3|            if (!success)
  ------------------
  |  Branch (1822:17): [True: 2, False: 1]
  ------------------
 1823|      2|            {
 1824|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1825|      2|                DLX_ERROR("Failed to store unsigned half word at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1826|      2|            }
 1827|      3|        }
_ZN3dlx4impl2SWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1831|      6|        {
 1832|      6|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1833|       |
 1834|      6|            if (!optional_address.has_value())
  ------------------
  |  Branch (1834:17): [True: 2, False: 4]
  ------------------
 1835|      2|            {
 1836|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1837|      2|                return;
 1838|      2|            }
 1839|       |
 1840|      4|            phi::i32 address = optional_address.value();
 1841|       |
 1842|      4|            const auto& src_reg = arg2.AsRegisterInt();
 1843|       |
 1844|      4|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1845|       |
 1846|      4|            phi::boolean success = processor.GetMemory().StoreWord(
 1847|      4|                    static_cast<std::size_t>(address.unsafe()), value);
 1848|       |
 1849|      4|            if (!success)
  ------------------
  |  Branch (1849:17): [True: 2, False: 2]
  ------------------
 1850|      2|            {
 1851|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1852|      2|                DLX_ERROR("Failed to store word at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1853|      2|            }
 1854|      4|        }
_ZN3dlx4impl3SWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1858|      1|        {
 1859|      1|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1860|       |
 1861|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1861:17): [True: 0, False: 1]
  ------------------
 1862|      0|            {
 1863|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1864|      0|                return;
 1865|      0|            }
 1866|       |
 1867|      1|            phi::i32 address = optional_address.value();
 1868|       |
 1869|      1|            const auto& src_reg = arg2.AsRegisterInt();
 1870|       |
 1871|      1|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1872|       |
 1873|      1|            phi::boolean success = processor.GetMemory().StoreUnsignedWord(
 1874|      1|                    static_cast<std::size_t>(address.unsafe()), value);
 1875|       |
 1876|      1|            if (!success)
  ------------------
  |  Branch (1876:17): [True: 1, False: 0]
  ------------------
 1877|      1|            {
 1878|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1879|      1|                DLX_ERROR("Failed to store unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1880|      1|            }
 1881|      1|        }
_ZN3dlx4impl2SFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1885|  30.8k|        {
 1886|  30.8k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1887|       |
 1888|  30.8k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1888:17): [True: 1, False: 30.8k]
  ------------------
 1889|      1|            {
 1890|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1891|      1|                return;
 1892|      1|            }
 1893|       |
 1894|  30.8k|            phi::i32 address = optional_address.value();
 1895|       |
 1896|  30.8k|            const auto& src_reg = arg2.AsRegisterFloat();
 1897|       |
 1898|  30.8k|            phi::f32 value = processor.FloatRegisterGetFloatValue(src_reg.register_id);
 1899|       |
 1900|  30.8k|            phi::boolean success = processor.GetMemory().StoreFloat(
 1901|  30.8k|                    static_cast<std::size_t>(address.unsafe()), value);
 1902|       |
 1903|  30.8k|            if (!success)
  ------------------
  |  Branch (1903:17): [True: 5, False: 30.8k]
  ------------------
 1904|      5|            {
 1905|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1906|      5|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1907|      5|            }
 1908|  30.8k|        }
_ZN3dlx4impl2SDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1912|      7|        {
 1913|      7|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1914|       |
 1915|      7|            if (!optional_address.has_value())
  ------------------
  |  Branch (1915:17): [True: 2, False: 5]
  ------------------
 1916|      2|            {
 1917|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1918|      2|                return;
 1919|      2|            }
 1920|       |
 1921|      5|            phi::i32 address = optional_address.value();
 1922|       |
 1923|      5|            const auto& src_reg = arg2.AsRegisterFloat();
 1924|       |
 1925|      5|            phi::f64 value = processor.FloatRegisterGetDoubleValue(src_reg.register_id);
 1926|       |
 1927|      5|            phi::boolean success = processor.GetMemory().StoreDouble(
 1928|      5|                    static_cast<std::size_t>(address.unsafe()), value);
 1929|       |
 1930|      5|            if (!success)
  ------------------
  |  Branch (1930:17): [True: 4, False: 1]
  ------------------
 1931|      4|            {
 1932|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1933|      4|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1934|      4|            }
 1935|      5|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1939|  14.6k|        {
 1940|  14.6k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1941|  14.6k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1942|       |
 1943|  14.6k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1944|       |
 1945|  14.6k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1946|  14.6k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1950|  17.2k|        {
 1951|  17.2k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1952|  17.2k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1953|       |
 1954|  17.2k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1955|       |
 1956|  17.2k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1957|  17.2k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1988|  34.4k|        {
 1989|  34.4k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1990|  34.4k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1991|       |
 1992|  34.4k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1993|       |
 1994|  34.4k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 1995|  34.4k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1999|  16.2k|        {
 2000|  16.2k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2001|  16.2k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2002|       |
 2003|  16.2k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2004|  16.2k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2005|  16.2k|            const float        converted_value_float =
 2006|  16.2k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2007|       |
 2008|  16.2k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2009|  16.2k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2013|  25.0k|        {
 2014|  25.0k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2015|  25.0k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2016|       |
 2017|  25.0k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2018|  25.0k|            const float  converted_value = static_cast<float>(src_value);
 2019|       |
 2020|  25.0k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2021|  25.0k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2025|  20.3k|        {
 2026|  20.3k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2027|  20.3k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2028|       |
 2029|  20.3k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2030|  20.3k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2031|  20.3k|            const float        converted_value_float =
 2032|  20.3k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2033|       |
 2034|  20.3k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2035|  20.3k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2039|  32.5k|        {
 2040|  32.5k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2041|  32.5k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2042|       |
 2043|  32.5k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2044|  32.5k|            const std::int32_t converted_value_int =
 2045|  32.5k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2046|  32.5k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2047|       |
 2048|  32.5k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2049|  32.5k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2053|  22.5k|        {
 2054|  22.5k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2055|  22.5k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2056|       |
 2057|  22.5k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2058|  22.5k|            const std::int32_t converted_value_int =
 2059|  22.5k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2060|  22.5k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2061|       |
 2062|  22.5k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2063|  22.5k|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2073|      2|        {
 2074|      2|            processor.Raise(Exception::Halt);
 2075|      2|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2079|  2.11M|        {
 2080|       |            /* Do nothing */
 2081|  2.11M|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  169|  83.9k|    {
  170|  83.9k|        phi::i64 res = phi::i64(lhs) + rhs;
  171|       |
  172|  83.9k|        SafeWriteInteger(processor, dest_reg, res);
  173|  83.9k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  124|   141k|    {
  125|   141k|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  126|   141k|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  127|       |
  128|       |        // Check for underflow
  129|   141k|        if (value < min)
  ------------------
  |  Branch (129:13): [True: 0, False: 141k]
  ------------------
  130|      0|        {
  131|      0|            processor.Raise(Exception::Underflow);
  132|       |
  133|      0|            value = max + (value % (min - 1));
  134|      0|        }
  135|       |        // Check for overflow
  136|   141k|        else if (value > max)
  ------------------
  |  Branch (136:18): [True: 0, False: 141k]
  ------------------
  137|      0|        {
  138|      0|            processor.Raise(Exception::Overflow);
  139|       |
  140|      0|            value = min + (value % (max + 1));
  141|      0|        }
  142|       |
  143|   141k|        PHI_ASSERT(value >= min);
  144|   141k|        PHI_ASSERT(value <= max);
  145|       |
  146|   141k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  147|   141k|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  177|  42.2k|    {
  178|  42.2k|        phi::u64 res = phi::u64(lhs) + rhs;
  179|       |
  180|  42.2k|        SafeWriteInteger(processor, dest_reg, res);
  181|  42.2k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  151|  87.2k|    {
  152|  87.2k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  153|       |
  154|       |        // Check for overflow
  155|  87.2k|        if (value > max)
  ------------------
  |  Branch (155:13): [True: 0, False: 87.2k]
  ------------------
  156|      0|        {
  157|      0|            processor.Raise(Exception::Overflow);
  158|       |
  159|      0|            value %= max + 1u;
  160|      0|        }
  161|       |
  162|  87.2k|        PHI_ASSERT(value <= max);
  163|       |
  164|  87.2k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  165|  87.2k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  185|  33.3k|    {
  186|  33.3k|        phi::i64 res = phi::i64(lhs) - rhs;
  187|       |
  188|  33.3k|        SafeWriteInteger(processor, dest_reg, res);
  189|  33.3k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  193|  40.0k|    {
  194|  40.0k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  195|       |
  196|  40.0k|        if (lhs < rhs)
  ------------------
  |  Branch (196:13): [True: 0, False: 40.0k]
  ------------------
  197|      0|        {
  198|      0|            processor.Raise(Exception::Underflow);
  199|       |
  200|      0|            phi::u64 res = max - rhs + lhs + 1u;
  201|      0|            SafeWriteInteger(processor, dest_reg, res);
  202|      0|            return;
  203|      0|        }
  204|       |
  205|  40.0k|        phi::u64 res = phi::u64(lhs) - rhs;
  206|       |
  207|  40.0k|        SafeWriteInteger(processor, dest_reg, res);
  208|  40.0k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  212|  24.3k|    {
  213|  24.3k|        phi::i64 res = phi::i64(lhs) * rhs;
  214|       |
  215|  24.3k|        SafeWriteInteger(processor, dest_reg, res);
  216|  24.3k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  220|  5.00k|    {
  221|  5.00k|        phi::u64 res = phi::u64(lhs) * rhs;
  222|       |
  223|  5.00k|        SafeWriteInteger(processor, dest_reg, res);
  224|  5.00k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  228|      1|    {
  229|      1|        if (rhs == 0)
  ------------------
  |  Branch (229:13): [True: 1, False: 0]
  ------------------
  230|      1|        {
  231|      1|            processor.Raise(Exception::DivideByZero);
  232|      1|            return;
  233|      1|        }
  234|       |
  235|      0|        phi::i64 res = phi::i64(lhs) / rhs;
  236|       |
  237|      0|        SafeWriteInteger(processor, dest_reg, res);
  238|      0|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  242|      1|    {
  243|      1|        if (rhs == 0u)
  ------------------
  |  Branch (243:13): [True: 1, False: 0]
  ------------------
  244|      1|        {
  245|      1|            processor.Raise(Exception::DivideByZero);
  246|      1|            return;
  247|      1|        }
  248|       |
  249|      0|        phi::u64 res = phi::u64(lhs) / rhs;
  250|       |
  251|      0|        SafeWriteInteger(processor, dest_reg, res);
  252|      0|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  325|  56.5k|    {
  326|  56.5k|        if (shift > 31)
  ------------------
  |  Branch (326:13): [True: 0, False: 56.5k]
  ------------------
  327|      0|        {
  328|      0|            processor.Raise(Exception::BadShift);
  329|       |
  330|       |            // Just set register to 0
  331|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  332|      0|            return;
  333|      0|        }
  334|       |
  335|       |        // Negative shifts are undefined behavior
  336|  56.5k|        if (shift < 0)
  ------------------
  |  Branch (336:13): [True: 0, False: 56.5k]
  ------------------
  337|      0|        {
  338|      0|            processor.Raise(Exception::BadShift);
  339|      0|            return;
  340|      0|        }
  341|       |
  342|  56.5k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  343|       |
  344|  56.5k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  345|  56.5k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  256|  25.2k|    {
  257|       |        // Prevent undefined behavior by shifting by more than 31
  258|  25.2k|        if (shift > 31)
  ------------------
  |  Branch (258:13): [True: 0, False: 25.2k]
  ------------------
  259|      0|        {
  260|      0|            processor.Raise(Exception::BadShift);
  261|       |
  262|       |            // Just set register to 0
  263|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  264|      0|            return;
  265|      0|        }
  266|       |
  267|       |        // Do nothing when shifting by zero to prevent undefined behavior
  268|  25.2k|        if (shift == 0)
  ------------------
  |  Branch (268:13): [True: 25.2k, False: 0]
  ------------------
  269|  25.2k|        {
  270|  25.2k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  271|  25.2k|            return;
  272|  25.2k|        }
  273|       |
  274|       |        // Negative shifts are undefiend behavior
  275|      0|        if (shift < 0)
  ------------------
  |  Branch (275:13): [True: 0, False: 0]
  ------------------
  276|      0|        {
  277|      0|            processor.Raise(Exception::BadShift);
  278|      0|            return;
  279|      0|        }
  280|       |
  281|      0|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  282|       |
  283|      0|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  284|       |
  285|      0|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  286|      0|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  290|  64.1k|    {
  291|       |        // Prevent undefined behavior by shifting by more than 31
  292|  64.1k|        if (shift > 31)
  ------------------
  |  Branch (292:13): [True: 0, False: 64.1k]
  ------------------
  293|      0|        {
  294|      0|            processor.Raise(Exception::BadShift);
  295|       |
  296|       |            // Is negative ie. sign bit is set
  297|      0|            if (base < 0)
  ------------------
  |  Branch (297:17): [True: 0, False: 0]
  ------------------
  298|      0|            {
  299|       |                // Set every byte to 1
  300|      0|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  301|      0|            }
  302|      0|            else
  303|      0|            {
  304|       |                // Set every byte to 0
  305|      0|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  306|      0|            }
  307|      0|            return;
  308|      0|        }
  309|       |
  310|       |        // Negative shifts are undefined behavior
  311|  64.1k|        if (shift < 0)
  ------------------
  |  Branch (311:13): [True: 0, False: 64.1k]
  ------------------
  312|      0|        {
  313|      0|            processor.Raise(Exception::BadShift);
  314|      0|            return;
  315|      0|        }
  316|       |
  317|  64.1k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  318|       |
  319|  64.1k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  320|  64.1k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|   522k|    {
   39|       |        // Lookup the label
   40|   522k|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|   522k|        PHI_ASSERT(program != nullptr);
   42|   522k|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|   522k|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 119, False: 522k]
  ------------------
   45|    119|        {
   46|    119|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|    119|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|    119|            processor.Raise(Exception::UnknownLabel);
   48|    119|            return;
   49|    119|        }
   50|       |
   51|   522k|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|   522k|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|   522k|        processor.SetNextProgramCounter(jump_point);
   56|   522k|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|  1.04M|    {
   60|  1.04M|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|  1.04M|        phi::u32 max_address =
   63|  1.04M|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|  1.04M|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 1, False: 1.04M]
  ------------------
   65|      1|        {
   66|      1|            processor.Raise(Exception::AddressOutOfBounds);
   67|      1|            return;
   68|      1|        }
   69|       |
   70|  1.04M|        processor.SetNextProgramCounter(address.unsafe());
   71|  1.04M|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
  100|  44.2k|    {
  101|  44.2k|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (101:13): [True: 44.2k, False: 4]
  ------------------
  102|  44.2k|        {
  103|  44.2k|            const auto& imm_value = argument.AsImmediateValue();
  104|       |
  105|  44.2k|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (105:17): [True: 7, False: 44.2k]
  ------------------
  106|      7|            {
  107|      7|                return {};
  108|      7|            }
  109|       |
  110|  44.2k|            return imm_value.signed_value;
  111|  44.2k|        }
  112|       |
  113|      4|        PHI_ASSERT(argument.GetType() == ArgumentType::AddressDisplacement);
  114|       |
  115|      4|        const auto& adr_displacement = argument.AsAddressDisplacement();
  116|      4|        return CalculateDisplacementAddress(processor, adr_displacement);
  117|  44.2k|    }
InstructionImplementation.cpp:_ZN3dlxL28CalculateDisplacementAddressERNS_9ProcessorERKNS_19InstructionArgument19AddressDisplacementE:
   78|      4|    {
   79|      4|        phi::i32 register_value = processor.IntRegisterGetSignedValue(adr_displacement.register_id);
   80|       |
   81|      4|        phi::i32 address = adr_displacement.displacement + register_value;
   82|       |
   83|      4|        if (address < 0)
  ------------------
  |  Branch (83:13): [True: 1, False: 3]
  ------------------
   84|      1|        {
   85|      1|            processor.Raise(Exception::AddressOutOfBounds);
   86|      1|            return {};
   87|      1|        }
   88|       |
   89|      3|        return address;
   90|      4|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  5.65M|    {
   12|  5.65M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  5.65M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  5.65M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  5.65M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  5.65M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  5.65M|                   "Unexpected argument type for arg1");
   22|  5.65M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  5.65M|                   "Unexpected argument type for arg2");
   24|  5.65M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  5.65M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  5.65M|        m_Executor(processor, arg1, arg2, arg3);
   29|  5.65M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   184k|    {
  453|   184k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   184k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|   856k|    {
   17|   856k|        m_ValueSigned = val;
   18|   856k|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|   129k|    {
   22|   129k|        m_ValueUnsigned = val;
   23|   129k|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|  1.78M|    {
   27|  1.78M|        return m_ValueSigned;
   28|  1.78M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  1.55M|    {
   32|  1.55M|        return m_ValueUnsigned;
   33|  1.55M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  1.19M|    {
   37|  1.19M|        return m_IsReadOnly;
   38|  1.19M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   14|      1|    {
   15|      1|        m_Values.resize(starting_size.unsafe());
   16|      1|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  135|      4|    {
  136|      4|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (136:13): [True: 3, False: 1]
  ------------------
  137|      3|        {
  138|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  139|      3|            return false;
  140|      3|        }
  141|       |
  142|      1|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  143|      1|        return true;
  144|      4|    }
_ZN3dlx11MemoryBlock17StoreUnsignedByteEN3phi7integerImEENS2_IhEE:
  147|      2|    {
  148|      2|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (148:13): [True: 2, False: 0]
  ------------------
  149|      2|        {
  150|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  151|      2|            return false;
  152|      2|        }
  153|       |
  154|      0|        m_Values[(address - m_StartingAddress).unsafe()].unsigned_value = value.unsafe();
  155|      0|        return true;
  156|      2|    }
_ZN3dlx11MemoryBlock13StoreHalfWordEN3phi7integerImEENS2_IsEE:
  159|  13.3k|    {
  160|  13.3k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (160:13): [True: 3, False: 13.3k]
  ------------------
  161|      3|        {
  162|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  163|      3|            return false;
  164|      3|        }
  165|       |
  166|  13.3k|        std::size_t index = (address - m_StartingAddress).unsafe();
  167|  13.3k|        *reinterpret_cast<std::int16_t*>(&m_Values[index].signed_value) = value.unsafe();
  168|       |
  169|  13.3k|        return true;
  170|  13.3k|    }
_ZN3dlx11MemoryBlock21StoreUnsignedHalfWordEN3phi7integerImEENS2_ItEE:
  173|      3|    {
  174|      3|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (174:13): [True: 2, False: 1]
  ------------------
  175|      2|        {
  176|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  177|      2|            return false;
  178|      2|        }
  179|       |
  180|      1|        std::size_t index = (address - m_StartingAddress).unsafe();
  181|      1|        *reinterpret_cast<std::uint16_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  182|       |
  183|      1|        return true;
  184|      3|    }
_ZN3dlx11MemoryBlock9StoreWordEN3phi7integerImEENS2_IiEE:
  187|      4|    {
  188|      4|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (188:13): [True: 2, False: 2]
  ------------------
  189|      2|        {
  190|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  191|      2|            return false;
  192|      2|        }
  193|       |
  194|      2|        std::size_t index = (address - m_StartingAddress).unsafe();
  195|      2|        *reinterpret_cast<std::int32_t*>(&m_Values[index].signed_value) = value.unsafe();
  196|       |
  197|      2|        return true;
  198|      4|    }
_ZN3dlx11MemoryBlock17StoreUnsignedWordEN3phi7integerImEENS2_IjEE:
  201|      1|    {
  202|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (202:13): [True: 1, False: 0]
  ------------------
  203|      1|        {
  204|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  205|      1|            return false;
  206|      1|        }
  207|       |
  208|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
  209|      0|        *reinterpret_cast<std::uint32_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  210|       |
  211|      0|        return true;
  212|      1|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  215|  30.8k|    {
  216|  30.8k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (216:13): [True: 5, False: 30.8k]
  ------------------
  217|      5|        {
  218|      5|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  219|      5|            return false;
  220|      5|        }
  221|       |
  222|  30.8k|        std::size_t index = (address - m_StartingAddress).unsafe();
  223|  30.8k|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  224|       |
  225|  30.8k|        return true;
  226|  30.8k|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  229|      5|    {
  230|      5|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (230:13): [True: 4, False: 1]
  ------------------
  231|      4|        {
  232|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  233|      4|            return false;
  234|      4|        }
  235|       |
  236|      1|        std::size_t index = (address - m_StartingAddress).unsafe();
  237|      1|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  238|       |
  239|      1|        return true;
  240|      5|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  243|  44.2k|    {
  244|  44.2k|        return address >= m_StartingAddress &&
  ------------------
  |  Branch (244:16): [True: 44.2k, False: 13]
  ------------------
  245|  44.2k|               (address + size) <= (m_StartingAddress + m_Values.size());
  ------------------
  |  Branch (245:16): [True: 44.2k, False: 9]
  ------------------
  246|  44.2k|    }
_ZN3dlx11MemoryBlock5ClearEv:
  255|  14.7k|    {
  256|  14.7k|        for (auto& val : m_Values)
  ------------------
  |  Branch (256:24): [True: 14.7M, False: 14.7k]
  ------------------
  257|  14.7M|        {
  258|  14.7M|            val.signed_value = 0;
  259|  14.7M|        }
  260|  14.7k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|  2.46M|    {
   24|  2.46M|        switch (token.length())
   25|  2.46M|        {
   26|       |            // 1 character OpCodes
   27|   386k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 386k, False: 2.08M]
  ------------------
   28|   386k|                char c1 = token[0];
   29|   386k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 77.3k, False: 309k]
  ------------------
   30|  77.3k|                {
   31|  77.3k|                    return OpCode::J;
   32|  77.3k|                }
   33|   309k|                break;
   34|   386k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|   409k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 409k, False: 2.05M]
  ------------------
   38|   409k|                char c1 = token[0];
   39|   409k|                char c2 = token[1];
   40|       |
   41|   409k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 272k, False: 137k]
  ------------------
   42|   409k|                {
   43|  15.3k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 15.3k, False: 394k]
  ------------------
   44|  22.7k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 7.35k, False: 402k]
  ------------------
   45|  22.7k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 6.96k, False: 15.7k]
  ------------------
   46|  6.96k|                        {
   47|  6.96k|                            return OpCode::JR;
   48|  6.96k|                        }
   49|  15.7k|                        break;
   50|       |
   51|  17.6k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 17.6k, False: 392k]
  ------------------
   52|  33.8k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 16.2k, False: 393k]
  ------------------
   53|  33.8k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 10.5k, False: 23.3k]
  ------------------
   54|  33.8k|                        {
   55|  2.22k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 2.22k, False: 31.6k]
  ------------------
   56|  3.14k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 915, False: 32.9k]
  ------------------
   57|  3.14k|                                return OpCode::LB;
   58|  3.22k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 3.22k, False: 30.6k]
  ------------------
   59|  3.92k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 702, False: 33.1k]
  ------------------
   60|  3.92k|                                return OpCode::LD;
   61|  2.51k|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 2.51k, False: 31.3k]
  ------------------
   62|  3.63k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 1.11k, False: 32.7k]
  ------------------
   63|  3.63k|                                return OpCode::LF;
   64|  2.68k|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 2.68k, False: 31.1k]
  ------------------
   65|  4.06k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 1.38k, False: 32.4k]
  ------------------
   66|  4.06k|                                return OpCode::LH;
   67|  6.23k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 6.23k, False: 27.6k]
  ------------------
   68|  8.60k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 2.37k, False: 31.5k]
  ------------------
   69|  8.60k|                                return OpCode::LW;
   70|  33.8k|                        }
   71|  10.5k|                        break;
   72|  10.5k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 3.14k, False: 406k]
  ------------------
   73|  16.2k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 13.0k, False: 396k]
  ------------------
   74|  16.2k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 7.21k, False: 9.00k]
  ------------------
   75|  7.21k|                        {
   76|  7.21k|                            return OpCode::OR;
   77|  7.21k|                        }
   78|  9.00k|                        break;
   79|  46.4k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 46.4k, False: 363k]
  ------------------
   80|  64.5k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 18.0k, False: 391k]
  ------------------
   81|  64.5k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 18.3k, False: 46.1k]
  ------------------
   82|  64.5k|                        {
   83|  5.30k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 5.30k, False: 59.1k]
  ------------------
   84|  10.6k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 5.37k, False: 59.1k]
  ------------------
   85|  10.6k|                                return OpCode::SB;
   86|  2.74k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 2.74k, False: 61.7k]
  ------------------
   87|  8.45k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 5.70k, False: 58.7k]
  ------------------
   88|  8.45k|                                return OpCode::SD;
   89|  5.01k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 5.01k, False: 59.4k]
  ------------------
   90|  19.1k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 14.1k, False: 50.3k]
  ------------------
   91|  19.1k|                                return OpCode::SF;
   92|  1.67k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 1.67k, False: 62.8k]
  ------------------
   93|  5.21k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 3.53k, False: 60.9k]
  ------------------
   94|  5.21k|                                return OpCode::SH;
   95|  1.21k|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 1.21k, False: 63.2k]
  ------------------
   96|  2.62k|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 1.41k, False: 63.0k]
  ------------------
   97|  2.62k|                                return OpCode::SW;
   98|  64.5k|                        }
   99|  18.3k|                        break;
  100|   409k|                }
  101|   325k|                break;
  102|   409k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   540k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 540k, False: 1.92M]
  ------------------
  106|   540k|                char c1 = token[0];
  107|   540k|                char c2 = token[1];
  108|   540k|                char c3 = token[2];
  109|       |
  110|   540k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 210k, False: 329k]
  ------------------
  111|   540k|                {
  112|  7.45k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 7.45k, False: 532k]
  ------------------
  113|  16.7k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 9.31k, False: 531k]
  ------------------
  114|  16.7k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 6.48k, False: 10.2k]
  |  Branch (114:29): [True: 3.75k, False: 13.0k]
  |  Branch (114:45): [True: 3.75k, False: 2.73k]
  ------------------
  115|  3.75k|                        {
  116|  3.75k|                            return OpCode::ADD;
  117|  3.75k|                        }
  118|  13.0k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 7.23k, False: 5.78k]
  |  Branch (118:34): [True: 4.23k, False: 8.78k]
  |  Branch (118:50): [True: 4.23k, False: 3.00k]
  ------------------
  119|  4.23k|                        {
  120|  4.23k|                            return OpCode::AND;
  121|  4.23k|                        }
  122|  8.78k|                        break;
  123|       |
  124|  8.78k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 6.54k, False: 533k]
  ------------------
  125|  13.6k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 7.11k, False: 533k]
  ------------------
  126|  13.6k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 7.60k, False: 6.04k]
  |  Branch (126:29): [True: 2.97k, False: 10.6k]
  |  Branch (126:45): [True: 2.97k, False: 4.63k]
  ------------------
  127|  2.97k|                        {
  128|  2.97k|                            return OpCode::DIV;
  129|  2.97k|                        }
  130|  10.6k|                        break;
  131|       |
  132|  10.6k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 2.44k, False: 537k]
  ------------------
  133|  12.8k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 10.4k, False: 529k]
  ------------------
  134|  12.8k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 10.6k, False: 2.19k]
  ------------------
  135|  10.6k|                        {
  136|  10.6k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 4.67k, False: 5.99k]
  ------------------
  137|  4.67k|                            {
  138|  4.67k|                                return OpCode::EQD;
  139|  4.67k|                            }
  140|  5.99k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 4.06k, False: 1.93k]
  ------------------
  141|  4.06k|                            {
  142|  4.06k|                                return OpCode::EQF;
  143|  4.06k|                            }
  144|  10.6k|                        }
  145|  4.12k|                        break;
  146|       |
  147|  7.69k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 7.69k, False: 532k]
  ------------------
  148|  21.2k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 13.5k, False: 526k]
  ------------------
  149|  21.2k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 10.2k, False: 10.9k]
  ------------------
  150|  10.2k|                        {
  151|  10.2k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 4.23k, False: 6.03k]
  ------------------
  152|  4.23k|                            {
  153|  4.23k|                                return OpCode::GED;
  154|  4.23k|                            }
  155|  6.03k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 4.78k, False: 1.25k]
  ------------------
  156|  4.78k|                            {
  157|  4.78k|                                return OpCode::GEF;
  158|  4.78k|                            }
  159|  10.2k|                        }
  160|  10.9k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 8.41k, False: 2.52k]
  ------------------
  161|  8.41k|                        {
  162|  8.41k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 3.56k, False: 4.84k]
  ------------------
  163|  3.56k|                            {
  164|  3.56k|                                return OpCode::GTD;
  165|  3.56k|                            }
  166|  4.84k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 3.41k, False: 1.43k]
  ------------------
  167|  3.41k|                            {
  168|  3.41k|                                return OpCode::GTF;
  169|  3.41k|                            }
  170|  4.84k|                        }
  171|  5.21k|                        break;
  172|       |
  173|  13.0k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 13.0k, False: 527k]
  ------------------
  174|  16.4k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 3.47k, False: 536k]
  ------------------
  175|  16.4k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 8.61k, False: 7.86k]
  |  Branch (175:29): [True: 6.70k, False: 9.77k]
  |  Branch (175:45): [True: 6.70k, False: 1.91k]
  ------------------
  176|  6.70k|                        {
  177|  6.70k|                            return OpCode::JAL;
  178|  6.70k|                        }
  179|  9.77k|                        break;
  180|       |
  181|  46.7k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 46.7k, False: 493k]
  ------------------
  182|  75.4k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 28.6k, False: 511k]
  ------------------
  183|  75.4k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 8.18k, False: 67.2k]
  ------------------
  184|  75.4k|                        {
  185|  5.38k|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 5.38k, False: 70.0k]
  ------------------
  186|  9.49k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 4.11k, False: 71.3k]
  ------------------
  187|  9.49k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 3.29k, False: 6.19k]
  ------------------
  188|  3.29k|                                {
  189|  3.29k|                                    return OpCode::LBU;
  190|  3.29k|                                }
  191|  6.19k|                                break;
  192|       |
  193|  8.02k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 8.02k, False: 67.4k]
  ------------------
  194|  14.9k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 6.88k, False: 68.5k]
  ------------------
  195|  14.9k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 4.38k, False: 10.5k]
  ------------------
  196|  4.38k|                                {
  197|  4.38k|                                    return OpCode::LED;
  198|  4.38k|                                }
  199|  10.5k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 3.96k, False: 6.56k]
  ------------------
  200|  3.96k|                                {
  201|  3.96k|                                    return OpCode::LEF;
  202|  3.96k|                                }
  203|  6.56k|                                break;
  204|       |
  205|  6.56k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 4.21k, False: 71.2k]
  ------------------
  206|  15.4k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 11.1k, False: 64.2k]
  ------------------
  207|  15.4k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 2.90k, False: 12.4k]
  ------------------
  208|  2.90k|                                {
  209|  2.90k|                                    return OpCode::LHI;
  210|  2.90k|                                }
  211|  12.4k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 8.30k, False: 4.19k]
  ------------------
  212|  8.30k|                                {
  213|  8.30k|                                    return OpCode::LHU;
  214|  8.30k|                                }
  215|  4.19k|                                break;
  216|       |
  217|  11.7k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 11.7k, False: 63.6k]
  ------------------
  218|  16.3k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 4.62k, False: 70.8k]
  ------------------
  219|  16.3k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 10.3k, False: 6.00k]
  ------------------
  220|  10.3k|                                {
  221|  10.3k|                                    return OpCode::LTD;
  222|  10.3k|                                }
  223|  6.00k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 3.88k, False: 2.12k]
  ------------------
  224|  3.88k|                                {
  225|  3.88k|                                    return OpCode::LTF;
  226|  3.88k|                                }
  227|  2.12k|                                break;
  228|       |
  229|  4.92k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 4.92k, False: 70.5k]
  ------------------
  230|  11.0k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 6.13k, False: 69.3k]
  ------------------
  231|  11.0k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 6.25k, False: 4.80k]
  ------------------
  232|  6.25k|                                {
  233|  6.25k|                                    return OpCode::LWU;
  234|  6.25k|                                }
  235|  4.80k|                                break;
  236|  75.4k|                        }
  237|  32.0k|                        break;
  238|       |
  239|  32.0k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 18.8k, False: 521k]
  ------------------
  240|  23.0k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 4.18k, False: 536k]
  ------------------
  241|  23.0k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 11.0k, False: 11.9k]
  ------------------
  242|  11.0k|                        {
  243|  11.0k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 3.96k, False: 7.13k]
  ------------------
  244|  3.96k|                            {
  245|  3.96k|                                return OpCode::NED;
  246|  3.96k|                            }
  247|  7.13k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 3.79k, False: 3.33k]
  ------------------
  248|  3.79k|                            {
  249|  3.79k|                                return OpCode::NEF;
  250|  3.79k|                            }
  251|  11.0k|                        }
  252|  11.9k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 9.46k, False: 2.46k]
  |  Branch (252:34): [True: 7.33k, False: 4.60k]
  |  Branch (252:50): [True: 7.33k, False: 2.13k]
  ------------------
  253|  7.33k|                        {
  254|  7.33k|                            return OpCode::NOP;
  255|  7.33k|                        }
  256|       |
  257|  7.93k|                        break;
  258|       |
  259|  7.93k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 5.32k, False: 535k]
  ------------------
  260|  20.2k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 14.9k, False: 525k]
  ------------------
  261|  20.2k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 12.7k, False: 7.49k]
  |  Branch (261:29): [True: 4.43k, False: 15.8k]
  |  Branch (261:45): [True: 4.43k, False: 8.32k]
  ------------------
  262|  4.43k|                        {
  263|  4.43k|                            return OpCode::ORI;
  264|  4.43k|                        }
  265|  15.8k|                        break;
  266|       |
  267|  46.4k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 46.4k, False: 493k]
  ------------------
  268|   119k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 72.6k, False: 467k]
  ------------------
  269|   119k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 8.19k, False: 110k]
  ------------------
  270|   119k|                        {
  271|  5.53k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 5.53k, False: 113k]
  ------------------
  272|  14.9k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 9.38k, False: 109k]
  ------------------
  273|  14.9k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 7.18k, False: 7.72k]
  ------------------
  274|  7.18k|                                {
  275|  7.18k|                                    return OpCode::SBU;
  276|  7.18k|                                }
  277|  7.72k|                                break;
  278|       |
  279|  7.72k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 6.61k, False: 112k]
  ------------------
  280|  9.03k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 2.42k, False: 116k]
  ------------------
  281|  9.03k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 5.52k, False: 3.50k]
  ------------------
  282|  5.52k|                                {
  283|  5.52k|                                    return OpCode::SEQ;
  284|  5.52k|                                }
  285|  3.50k|                                break;
  286|       |
  287|  3.50k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 2.92k, False: 116k]
  ------------------
  288|  8.83k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 5.90k, False: 113k]
  ------------------
  289|  8.83k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 2.25k, False: 6.57k]
  ------------------
  290|  2.25k|                                {
  291|  2.25k|                                    return OpCode::SGE;
  292|  2.25k|                                }
  293|  6.57k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 3.41k, False: 3.15k]
  ------------------
  294|  3.41k|                                {
  295|  3.41k|                                    return OpCode::SGT;
  296|  3.41k|                                }
  297|  3.15k|                                break;
  298|       |
  299|  3.15k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 3.07k, False: 116k]
  ------------------
  300|  6.19k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 3.11k, False: 116k]
  ------------------
  301|  6.19k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 4.11k, False: 2.07k]
  ------------------
  302|  4.11k|                                {
  303|  4.11k|                                    return OpCode::SHU;
  304|  4.11k|                                }
  305|  2.07k|                                break;
  306|       |
  307|  18.0k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 18.0k, False: 101k]
  ------------------
  308|  24.1k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 6.17k, False: 113k]
  ------------------
  309|  24.1k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 3.16k, False: 21.0k]
  ------------------
  310|  24.1k|                                {
  311|  3.15k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 3.15k, False: 21.0k]
  ------------------
  312|  5.05k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 1.90k, False: 22.2k]
  ------------------
  313|  5.05k|                                        return OpCode::SLA;
  314|       |
  315|  2.62k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 2.62k, False: 21.5k]
  ------------------
  316|  5.65k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 3.02k, False: 21.1k]
  ------------------
  317|  5.65k|                                        return OpCode::SLE;
  318|       |
  319|  1.27k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 1.27k, False: 22.9k]
  ------------------
  320|  4.66k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 3.38k, False: 20.8k]
  ------------------
  321|  4.66k|                                        return OpCode::SLL;
  322|       |
  323|  3.85k|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 3.85k, False: 20.3k]
  ------------------
  324|  5.65k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 1.79k, False: 22.3k]
  ------------------
  325|  5.65k|                                        return OpCode::SLT;
  326|  24.1k|                                }
  327|  3.16k|                                break;
  328|       |
  329|  7.00k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 7.00k, False: 112k]
  ------------------
  330|  8.84k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 1.83k, False: 117k]
  ------------------
  331|  8.84k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 5.70k, False: 3.13k]
  ------------------
  332|  5.70k|                                {
  333|  5.70k|                                    return OpCode::SNE;
  334|  5.70k|                                }
  335|  3.13k|                                break;
  336|       |
  337|  16.8k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 16.8k, False: 102k]
  ------------------
  338|  22.8k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 6.01k, False: 113k]
  ------------------
  339|  22.8k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 10.7k, False: 12.0k]
  ------------------
  340|  10.7k|                                {
  341|  10.7k|                                    return OpCode::SRA;
  342|  10.7k|                                }
  343|  12.0k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 7.43k, False: 4.64k]
  ------------------
  344|  7.43k|                                {
  345|  7.43k|                                    return OpCode::SRL;
  346|  7.43k|                                }
  347|  4.64k|                                break;
  348|       |
  349|  5.50k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 5.50k, False: 113k]
  ------------------
  350|  10.0k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 4.52k, False: 114k]
  ------------------
  351|  10.0k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 6.43k, False: 3.59k]
  ------------------
  352|  6.43k|                                {
  353|  6.43k|                                    return OpCode::SUB;
  354|  6.43k|                                }
  355|  3.59k|                                break;
  356|       |
  357|  3.59k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 1.91k, False: 117k]
  ------------------
  358|  6.07k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 4.16k, False: 115k]
  ------------------
  359|  6.07k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 4.34k, False: 1.73k]
  ------------------
  360|  4.34k|                                {
  361|  4.34k|                                    return OpCode::SWU;
  362|  4.34k|                                }
  363|  1.73k|                                break;
  364|   119k|                        }
  365|       |
  366|  43.7k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 2.78k, False: 537k]
  ------------------
  367|  51.5k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 7.80k, False: 532k]
  ------------------
  368|  51.5k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 8.23k, False: 43.2k]
  |  Branch (368:29): [True: 5.42k, False: 46.0k]
  |  Branch (368:45): [True: 5.42k, False: 2.80k]
  ------------------
  369|  5.42k|                        {
  370|  5.42k|                            return OpCode::XOR;
  371|  5.42k|                        }
  372|  46.0k|                        break;
  373|   540k|                }
  374|   351k|                break;
  375|   540k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   512k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 512k, False: 1.95M]
  ------------------
  379|   512k|                char c1 = token[0];
  380|   512k|                char c2 = token[1];
  381|   512k|                char c3 = token[2];
  382|   512k|                char c4 = token[3];
  383|       |
  384|   512k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 156k, False: 355k]
  ------------------
  385|   512k|                {
  386|  3.84k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 3.84k, False: 508k]
  ------------------
  387|  40.5k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 36.6k, False: 476k]
  ------------------
  388|  40.5k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 4.14k, False: 36.3k]
  ------------------
  389|  40.5k|                        {
  390|  18.7k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 18.7k, False: 21.8k]
  ------------------
  391|  26.8k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 8.13k, False: 32.4k]
  ------------------
  392|  26.8k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 22.5k, False: 4.28k]
  ------------------
  393|  22.5k|                                {
  394|  22.5k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 2.99k, False: 19.5k]
  ------------------
  395|  22.5k|                                    {
  396|  1.29k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 1.29k, False: 21.2k]
  ------------------
  397|  7.02k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 5.73k, False: 16.8k]
  ------------------
  398|  7.02k|                                            return OpCode::ADDD;
  399|       |
  400|  1.09k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 1.09k, False: 21.4k]
  ------------------
  401|  2.47k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 1.38k, False: 21.1k]
  ------------------
  402|  2.47k|                                            return OpCode::ADDF;
  403|       |
  404|  1.44k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 1.44k, False: 21.1k]
  ------------------
  405|  3.14k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 1.69k, False: 20.8k]
  ------------------
  406|  3.14k|                                            return OpCode::ADDI;
  407|       |
  408|  3.22k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 3.22k, False: 19.3k]
  ------------------
  409|  6.93k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 3.70k, False: 18.8k]
  ------------------
  410|  6.93k|                                            return OpCode::ADDU;
  411|  22.5k|                                    }
  412|  22.5k|                                }
  413|  7.28k|                                break;
  414|       |
  415|  7.40k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 7.40k, False: 33.1k]
  ------------------
  416|  9.53k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 2.12k, False: 38.4k]
  ------------------
  417|  9.53k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 7.32k, False: 2.20k]
  |  Branch (417:37): [True: 5.43k, False: 4.10k]
  |  Branch (417:53): [True: 5.43k, False: 1.89k]
  ------------------
  418|  5.43k|                                {
  419|  5.43k|                                    return OpCode::ANDI;
  420|  5.43k|                                }
  421|       |
  422|  4.10k|                                break;
  423|  40.5k|                        }
  424|  15.5k|                        break;
  425|       |
  426|  15.5k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 13.7k, False: 499k]
  ------------------
  427|  32.5k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 18.8k, False: 493k]
  ------------------
  428|  32.5k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 2.20k, False: 30.3k]
  ------------------
  429|  32.5k|                        {
  430|  6.43k|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 6.43k, False: 26.1k]
  ------------------
  431|  7.93k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 1.50k, False: 31.0k]
  ------------------
  432|  7.93k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 6.09k, False: 1.83k]
  |  Branch (432:37): [True: 4.50k, False: 3.42k]
  |  Branch (432:53): [True: 4.50k, False: 1.58k]
  ------------------
  433|  4.50k|                                {
  434|  4.50k|                                    return OpCode::BEQZ;
  435|  4.50k|                                }
  436|  3.42k|                                break;
  437|       |
  438|  3.86k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 3.86k, False: 28.6k]
  ------------------
  439|  13.1k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 9.30k, False: 23.2k]
  ------------------
  440|  13.1k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 10.9k, False: 2.23k]
  ------------------
  441|  10.9k|                                {
  442|  10.9k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 4.32k, False: 6.61k]
  ------------------
  443|  4.32k|                                    {
  444|  4.32k|                                        return OpCode::BFPF;
  445|  4.32k|                                    }
  446|  6.61k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 2.91k, False: 3.70k]
  ------------------
  447|  2.91k|                                    {
  448|  2.91k|                                        return OpCode::BFPT;
  449|  2.91k|                                    }
  450|  10.9k|                                }
  451|  5.93k|                                break;
  452|       |
  453|  7.84k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 7.84k, False: 24.6k]
  ------------------
  454|  9.22k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 1.37k, False: 31.1k]
  ------------------
  455|  9.22k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 5.68k, False: 3.53k]
  |  Branch (455:37): [True: 4.05k, False: 5.16k]
  |  Branch (455:53): [True: 4.05k, False: 1.62k]
  ------------------
  456|  4.05k|                                {
  457|  4.05k|                                    return OpCode::BNEZ;
  458|  4.05k|                                }
  459|  32.5k|                        }
  460|  16.7k|                        break;
  461|       |
  462|  16.7k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 11.0k, False: 501k]
  ------------------
  463|  24.3k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 13.2k, False: 499k]
  ------------------
  464|  24.3k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 20.5k, False: 3.76k]
  |  Branch (464:29): [True: 18.1k, False: 6.19k]
  |  Branch (464:45): [True: 18.1k, False: 2.42k]
  ------------------
  465|  18.1k|                        {
  466|  18.1k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 3.92k, False: 14.2k]
  ------------------
  467|  18.1k|                            {
  468|  1.34k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 1.34k, False: 16.7k]
  ------------------
  469|  3.64k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 2.29k, False: 15.8k]
  ------------------
  470|  3.64k|                                    return OpCode::DIVD;
  471|       |
  472|  1.57k|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 1.57k, False: 16.5k]
  ------------------
  473|  2.96k|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 1.39k, False: 16.7k]
  ------------------
  474|  2.96k|                                    return OpCode::DIVF;
  475|       |
  476|    930|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 930, False: 17.2k]
  ------------------
  477|  3.11k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 2.18k, False: 15.9k]
  ------------------
  478|  3.11k|                                    return OpCode::DIVI;
  479|       |
  480|  2.54k|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 2.54k, False: 15.5k]
  ------------------
  481|  4.48k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 1.94k, False: 16.1k]
  ------------------
  482|  4.48k|                                    return OpCode::DIVU;
  483|  18.1k|                            }
  484|  18.1k|                        }
  485|  10.1k|                        break;
  486|       |
  487|  10.1k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 8.60k, False: 504k]
  ------------------
  488|  15.8k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 7.25k, False: 505k]
  ------------------
  489|  15.8k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 13.1k, False: 2.66k]
  |  Branch (489:29): [True: 8.09k, False: 7.76k]
  |  Branch (489:45): [True: 10.7k, False: 2.42k]
  |  Branch (489:61): [True: 8.09k, False: 2.68k]
  ------------------
  490|  8.09k|                        {
  491|  8.09k|                            return OpCode::HALT;
  492|  8.09k|                        }
  493|  7.76k|                        break;
  494|       |
  495|  10.0k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 10.0k, False: 502k]
  ------------------
  496|  13.5k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 3.47k, False: 509k]
  ------------------
  497|  13.5k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 7.39k, False: 6.16k]
  |  Branch (497:29): [True: 2.67k, False: 10.8k]
  |  Branch (497:45): [True: 5.21k, False: 2.18k]
  |  Branch (497:61): [True: 2.67k, False: 2.54k]
  ------------------
  498|  2.67k|                        {
  499|  2.67k|                            return OpCode::JALR;
  500|  2.67k|                        }
  501|  10.8k|                        break;
  502|       |
  503|  17.0k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 17.0k, False: 495k]
  ------------------
  504|  28.8k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 11.7k, False: 500k]
  ------------------
  505|  28.8k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 14.7k, False: 14.0k]
  |  Branch (505:29): [True: 9.45k, False: 19.3k]
  |  Branch (505:45): [True: 9.45k, False: 5.32k]
  ------------------
  506|  9.45k|                        {
  507|  9.45k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 2.96k, False: 6.49k]
  ------------------
  508|  2.96k|                            {
  509|  2.96k|                                return OpCode::MOVD;
  510|  2.96k|                            }
  511|  6.49k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 3.76k, False: 2.73k]
  ------------------
  512|  3.76k|                            {
  513|  3.76k|                                return OpCode::MOVF;
  514|  3.76k|                            }
  515|  9.45k|                        }
  516|  19.3k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 11.1k, False: 8.24k]
  |  Branch (516:34): [True: 4.23k, False: 15.1k]
  |  Branch (516:50): [True: 9.26k, False: 1.84k]
  |  Branch (516:66): [True: 4.23k, False: 5.03k]
  ------------------
  517|  4.23k|                        {
  518|  4.23k|                            return OpCode::MULT;
  519|  4.23k|                        }
  520|  17.8k|                        break;
  521|       |
  522|  76.1k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 76.1k, False: 436k]
  ------------------
  523|   161k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 84.9k, False: 427k]
  ------------------
  524|   161k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 13.3k, False: 147k]
  ------------------
  525|   161k|                        {
  526|  6.86k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 6.86k, False: 154k]
  ------------------
  527|  13.8k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 6.94k, False: 154k]
  ------------------
  528|  13.8k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 9.30k, False: 4.50k]
  ------------------
  529|  9.30k|                                {
  530|  9.30k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 3.56k, False: 5.73k]
  ------------------
  531|  3.56k|                                    {
  532|  3.56k|                                        return OpCode::SEQI;
  533|  3.56k|                                    }
  534|  5.73k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 3.38k, False: 2.35k]
  ------------------
  535|  3.38k|                                    {
  536|  3.38k|                                        return OpCode::SEQU;
  537|  3.38k|                                    }
  538|  9.30k|                                }
  539|  6.86k|                                break;
  540|       |
  541|  6.86k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 4.45k, False: 156k]
  ------------------
  542|  26.4k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 22.0k, False: 139k]
  ------------------
  543|  26.4k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 8.87k, False: 17.5k]
  ------------------
  544|  8.87k|                                {
  545|  8.87k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 4.27k, False: 4.59k]
  ------------------
  546|  4.27k|                                    {
  547|  4.27k|                                        return OpCode::SGEI;
  548|  4.27k|                                    }
  549|  4.59k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 3.15k, False: 1.43k]
  ------------------
  550|  3.15k|                                    {
  551|  3.15k|                                        return OpCode::SGEU;
  552|  3.15k|                                    }
  553|  8.87k|                                }
  554|  17.5k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 13.4k, False: 4.17k]
  ------------------
  555|  13.4k|                                {
  556|  13.4k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 6.96k, False: 6.46k]
  ------------------
  557|  6.96k|                                    {
  558|  6.96k|                                        return OpCode::SGTI;
  559|  6.96k|                                    }
  560|  6.46k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 5.01k, False: 1.44k]
  ------------------
  561|  5.01k|                                    {
  562|  5.01k|                                        return OpCode::SGTU;
  563|  5.01k|                                    }
  564|  13.4k|                                }
  565|  7.06k|                                break;
  566|       |
  567|  41.1k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 41.1k, False: 119k]
  ------------------
  568|  48.9k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 7.86k, False: 153k]
  ------------------
  569|  48.9k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 3.98k, False: 44.9k]
  ------------------
  570|  48.9k|                                {
  571|  7.72k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 7.72k, False: 41.2k]
  ------------------
  572|  8.13k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 409, False: 48.5k]
  ------------------
  573|  8.13k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 7.55k, False: 582]
  ------------------
  574|  7.55k|                                        {
  575|  7.55k|                                            return OpCode::SLAI;
  576|  7.55k|                                        }
  577|    582|                                        break;
  578|       |
  579|  8.31k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 8.31k, False: 40.6k]
  ------------------
  580|  10.7k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 2.47k, False: 46.5k]
  ------------------
  581|  10.7k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 2.87k, False: 7.90k]
  ------------------
  582|  2.87k|                                        {
  583|  2.87k|                                            return OpCode::SLEI;
  584|  2.87k|                                        }
  585|  7.90k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 5.48k, False: 2.42k]
  ------------------
  586|  5.48k|                                        {
  587|  5.48k|                                            return OpCode::SLEU;
  588|  5.48k|                                        }
  589|  2.42k|                                        break;
  590|       |
  591|  4.75k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 4.75k, False: 44.2k]
  ------------------
  592|  8.96k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 4.20k, False: 44.7k]
  ------------------
  593|  8.96k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 4.63k, False: 4.32k]
  ------------------
  594|  4.63k|                                        {
  595|  4.63k|                                            return OpCode::SLLI;
  596|  4.63k|                                        }
  597|  4.32k|                                        break;
  598|       |
  599|  7.10k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 7.10k, False: 41.8k]
  ------------------
  600|  17.1k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 10.0k, False: 38.9k]
  ------------------
  601|  17.1k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 7.90k, False: 9.20k]
  ------------------
  602|  7.90k|                                        {
  603|  7.90k|                                            return OpCode::SLTI;
  604|  7.90k|                                        }
  605|  9.20k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 3.31k, False: 5.88k]
  ------------------
  606|  3.31k|                                        {
  607|  3.31k|                                            return OpCode::SLTU;
  608|  3.31k|                                        }
  609|  5.88k|                                        break;
  610|  48.9k|                                }
  611|       |
  612|  30.3k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 13.1k, False: 147k]
  ------------------
  613|  32.3k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 2.04k, False: 159k]
  ------------------
  614|  32.3k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 14.6k, False: 17.7k]
  ------------------
  615|  14.6k|                                {
  616|  14.6k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 2.59k, False: 12.0k]
  ------------------
  617|  2.59k|                                    {
  618|  2.59k|                                        return OpCode::SNEI;
  619|  2.59k|                                    }
  620|  12.0k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 3.58k, False: 8.43k]
  ------------------
  621|  3.58k|                                    {
  622|  3.58k|                                        return OpCode::SNEU;
  623|  3.58k|                                    }
  624|  14.6k|                                }
  625|  26.1k|                                break;
  626|       |
  627|  26.1k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 10.3k, False: 150k]
  ------------------
  628|  17.3k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 6.97k, False: 154k]
  ------------------
  629|  17.3k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 6.19k, False: 11.1k]
  |  Branch (629:37): [True: 3.16k, False: 14.1k]
  |  Branch (629:53): [True: 3.16k, False: 3.03k]
  ------------------
  630|  3.16k|                                {
  631|  3.16k|                                    return OpCode::SRAI;
  632|  3.16k|                                }
  633|  14.1k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 10.0k, False: 4.08k]
  |  Branch (633:42): [True: 4.49k, False: 9.66k]
  |  Branch (633:58): [True: 4.49k, False: 5.58k]
  ------------------
  634|  4.49k|                                {
  635|  4.49k|                                    return OpCode::SRLI;
  636|  4.49k|                                }
  637|  9.66k|                                break;
  638|       |
  639|  14.9k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 14.9k, False: 146k]
  ------------------
  640|  25.9k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 10.9k, False: 150k]
  ------------------
  641|  25.9k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 23.4k, False: 2.50k]
  ------------------
  642|  23.4k|                                {
  643|  23.4k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 2.88k, False: 20.5k]
  ------------------
  644|  23.4k|                                    {
  645|  4.23k|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 4.23k, False: 19.1k]
  ------------------
  646|  5.97k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 1.74k, False: 21.6k]
  ------------------
  647|  5.97k|                                            return OpCode::SUBD;
  648|       |
  649|  1.71k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 1.71k, False: 21.6k]
  ------------------
  650|  3.72k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 2.01k, False: 21.3k]
  ------------------
  651|  3.72k|                                            return OpCode::SUBF;
  652|       |
  653|  2.88k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 2.88k, False: 20.5k]
  ------------------
  654|  5.14k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 2.26k, False: 21.1k]
  ------------------
  655|  5.14k|                                            return OpCode::SUBI;
  656|       |
  657|  3.56k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 3.56k, False: 19.8k]
  ------------------
  658|  5.67k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 2.10k, False: 21.3k]
  ------------------
  659|  5.67k|                                            return OpCode::SUBU;
  660|  23.4k|                                    }
  661|  23.4k|                                }
  662|  5.39k|                                break;
  663|   161k|                        }
  664|  68.5k|                        break;
  665|       |
  666|  68.5k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 19.2k, False: 493k]
  ------------------
  667|  23.0k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 3.81k, False: 508k]
  ------------------
  668|  23.0k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 17.4k, False: 5.56k]
  |  Branch (668:29): [True: 3.63k, False: 19.3k]
  |  Branch (668:45): [True: 11.3k, False: 6.13k]
  |  Branch (668:61): [True: 3.63k, False: 7.67k]
  ------------------
  669|  3.63k|                        {
  670|  3.63k|                            return OpCode::TRAP;
  671|  3.63k|                        }
  672|  19.3k|                        break;
  673|  19.3k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 4.34k, False: 508k]
  ------------------
  674|  16.1k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 11.7k, False: 500k]
  ------------------
  675|  16.1k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 13.0k, False: 3.09k]
  |  Branch (675:29): [True: 4.87k, False: 11.2k]
  |  Branch (675:45): [True: 8.86k, False: 4.15k]
  |  Branch (675:61): [True: 4.87k, False: 3.98k]
  ------------------
  676|  4.87k|                        {
  677|  4.87k|                            return OpCode::XORI;
  678|  4.87k|                        }
  679|  11.2k|                        break;
  680|   512k|                }
  681|   334k|                break;
  682|   512k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|   334k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 275k, False: 2.19M]
  ------------------
  686|   275k|                char c1 = token[0];
  687|   275k|                char c2 = token[1];
  688|   275k|                char c3 = token[2];
  689|   275k|                char c4 = token[3];
  690|   275k|                char c5 = token[4];
  691|       |
  692|   275k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 105k, False: 169k]
  ------------------
  693|   275k|                {
  694|  2.01k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 2.01k, False: 273k]
  ------------------
  695|  19.8k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 17.8k, False: 257k]
  ------------------
  696|  19.8k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 15.4k, False: 4.40k]
  |  Branch (696:29): [True: 3.72k, False: 16.1k]
  |  Branch (696:45): [True: 11.6k, False: 3.76k]
  |  Branch (696:61): [True: 4.55k, False: 7.14k]
  |  Branch (696:77): [True: 3.72k, False: 830]
  ------------------
  697|  3.72k|                        {
  698|  3.72k|                            return OpCode::ADDUI;
  699|  3.72k|                        }
  700|  16.1k|                        break;
  701|       |
  702|  16.1k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 13.4k, False: 262k]
  ------------------
  703|  21.4k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 8.01k, False: 267k]
  ------------------
  704|  21.4k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 17.7k, False: 3.67k]
  |  Branch (704:29): [True: 4.22k, False: 17.2k]
  |  Branch (704:45): [True: 15.3k, False: 2.35k]
  |  Branch (704:61): [True: 8.66k, False: 6.72k]
  |  Branch (704:77): [True: 4.22k, False: 4.44k]
  ------------------
  705|  4.22k|                        {
  706|  4.22k|                            return OpCode::DIVUI;
  707|  4.22k|                        }
  708|  17.2k|                        break;
  709|       |
  710|  17.2k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 7.87k, False: 267k]
  ------------------
  711|  36.6k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 28.7k, False: 246k]
  ------------------
  712|  36.6k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 30.7k, False: 5.90k]
  |  Branch (712:29): [True: 24.8k, False: 11.7k]
  |  Branch (712:45): [True: 27.6k, False: 3.08k]
  |  Branch (712:61): [True: 24.8k, False: 2.76k]
  ------------------
  713|  24.8k|                        {
  714|  24.8k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 4.86k, False: 20.0k]
  ------------------
  715|  24.8k|                            {
  716|  3.78k|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 3.78k, False: 21.1k]
  ------------------
  717|  4.95k|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 1.17k, False: 23.7k]
  ------------------
  718|  4.95k|                                    return OpCode::MULTD;
  719|       |
  720|  1.91k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 1.91k, False: 22.9k]
  ------------------
  721|  5.43k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 3.52k, False: 21.3k]
  ------------------
  722|  5.43k|                                    return OpCode::MULTF;
  723|       |
  724|  2.37k|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 2.37k, False: 22.5k]
  ------------------
  725|  3.46k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 1.09k, False: 23.8k]
  ------------------
  726|  3.46k|                                    return OpCode::MULTI;
  727|       |
  728|  2.49k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 2.49k, False: 22.4k]
  ------------------
  729|  6.17k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 3.68k, False: 21.2k]
  ------------------
  730|  6.17k|                                    return OpCode::MULTU;
  731|  24.8k|                            }
  732|  24.8k|                        }
  733|  16.6k|                        break;
  734|       |
  735|  32.1k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 32.1k, False: 243k]
  ------------------
  736|  91.7k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 59.5k, False: 216k]
  ------------------
  737|  91.7k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 5.30k, False: 86.4k]
  ------------------
  738|  91.7k|                        {
  739|  7.47k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 7.47k, False: 84.2k]
  ------------------
  740|  12.9k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 5.52k, False: 86.2k]
  ------------------
  741|  12.9k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 8.88k, False: 4.11k]
  |  Branch (741:37): [True: 3.98k, False: 9.01k]
  |  Branch (741:53): [True: 7.33k, False: 1.54k]
  |  Branch (741:69): [True: 3.98k, False: 3.35k]
  ------------------
  742|  3.98k|                                {
  743|  3.98k|                                    return OpCode::SEQUI;
  744|  3.98k|                                }
  745|  9.01k|                                break;
  746|       |
  747|  9.01k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 5.39k, False: 86.3k]
  ------------------
  748|  14.4k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 9.04k, False: 82.7k]
  ------------------
  749|  14.4k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 6.89k, False: 7.54k]
  |  Branch (749:37): [True: 3.89k, False: 10.5k]
  |  Branch (749:53): [True: 5.08k, False: 1.80k]
  |  Branch (749:69): [True: 3.89k, False: 1.19k]
  ------------------
  750|  3.89k|                                {
  751|  3.89k|                                    return OpCode::SGEUI;
  752|  3.89k|                                }
  753|  10.5k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 6.98k, False: 3.56k]
  |  Branch (753:42): [True: 2.66k, False: 7.88k]
  |  Branch (753:58): [True: 4.91k, False: 2.07k]
  |  Branch (753:74): [True: 2.66k, False: 2.25k]
  ------------------
  754|  2.66k|                                {
  755|  2.66k|                                    return OpCode::SGTUI;
  756|  2.66k|                                }
  757|  7.88k|                                break;
  758|       |
  759|  23.8k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 23.8k, False: 67.9k]
  ------------------
  760|  30.3k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 6.49k, False: 85.2k]
  ------------------
  761|  30.3k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 10.2k, False: 20.1k]
  |  Branch (761:37): [True: 5.14k, False: 25.2k]
  |  Branch (761:53): [True: 8.93k, False: 1.31k]
  |  Branch (761:69): [True: 5.14k, False: 3.79k]
  ------------------
  762|  5.14k|                                {
  763|  5.14k|                                    return OpCode::SLEUI;
  764|  5.14k|                                }
  765|  25.2k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 14.0k, False: 11.2k]
  |  Branch (765:42): [True: 3.15k, False: 22.0k]
  |  Branch (765:58): [True: 7.79k, False: 6.20k]
  |  Branch (765:74): [True: 3.15k, False: 4.64k]
  ------------------
  766|  3.15k|                                {
  767|  3.15k|                                    return OpCode::SLTUI;
  768|  3.15k|                                }
  769|  22.0k|                                break;
  770|       |
  771|  22.0k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 13.7k, False: 77.9k]
  ------------------
  772|  17.1k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 3.31k, False: 88.4k]
  ------------------
  773|  17.1k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 15.0k, False: 2.11k]
  |  Branch (773:37): [True: 3.38k, False: 13.7k]
  |  Branch (773:53): [True: 7.29k, False: 7.71k]
  |  Branch (773:69): [True: 3.38k, False: 3.91k]
  ------------------
  774|  3.38k|                                {
  775|  3.38k|                                    return OpCode::SNEUI;
  776|  3.38k|                                }
  777|  13.7k|                                break;
  778|       |
  779|  13.7k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 4.32k, False: 87.4k]
  ------------------
  780|  11.5k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 7.22k, False: 84.5k]
  ------------------
  781|  11.5k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 8.24k, False: 3.30k]
  |  Branch (781:37): [True: 3.09k, False: 8.46k]
  |  Branch (781:53): [True: 4.08k, False: 4.16k]
  |  Branch (781:69): [True: 3.09k, False: 990]
  ------------------
  782|  3.09k|                                {
  783|  3.09k|                                    return OpCode::SUBUI;
  784|  3.09k|                                }
  785|  8.46k|                                break;
  786|  91.7k|                        }
  787|       |
  788|  66.4k|                        break;
  789|   275k|                }
  790|       |
  791|   222k|                break;
  792|   275k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|   222k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 156k, False: 2.31M]
  ------------------
  796|   156k|                char c1 = token[0];
  797|   156k|                char c2 = token[1];
  798|   156k|                char c3 = token[2];
  799|   156k|                char c4 = token[3];
  800|   156k|                char c5 = token[4];
  801|   156k|                char c6 = token[5];
  802|       |
  803|   156k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 49.6k, False: 106k]
  |  Branch (803:21): [True: 42.8k, False: 113k]
  |  Branch (803:37): [True: 46.1k, False: 3.52k]
  |  Branch (803:53): [True: 42.8k, False: 3.24k]
  ------------------
  804|  42.8k|                {
  805|  42.8k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 1.66k, False: 41.2k]
  ------------------
  806|  42.8k|                    {
  807|  7.67k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 7.67k, False: 35.1k]
  ------------------
  808|  12.7k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 5.02k, False: 37.8k]
  ------------------
  809|  12.7k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 10.2k, False: 2.50k]
  ------------------
  810|  10.2k|                            {
  811|  10.2k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 6.01k, False: 4.19k]
  ------------------
  812|  6.01k|                                {
  813|  6.01k|                                    return OpCode::CVTD2F;
  814|  6.01k|                                }
  815|  4.19k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 3.01k, False: 1.17k]
  ------------------
  816|  3.01k|                                {
  817|  3.01k|                                    return OpCode::CVTD2I;
  818|  3.01k|                                }
  819|  10.2k|                            }
  820|  3.67k|                            break;
  821|       |
  822|  11.6k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 11.6k, False: 31.1k]
  ------------------
  823|  13.4k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 1.76k, False: 41.1k]
  ------------------
  824|  13.4k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 12.0k, False: 1.36k]
  ------------------
  825|  12.0k|                            {
  826|  12.0k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 3.45k, False: 8.62k]
  ------------------
  827|  3.45k|                                {
  828|  3.45k|                                    return OpCode::CVTF2D;
  829|  3.45k|                                }
  830|  8.62k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 5.67k, False: 2.94k]
  ------------------
  831|  5.67k|                                {
  832|  5.67k|                                    return OpCode::CVTF2I;
  833|  5.67k|                                }
  834|  12.0k|                            }
  835|  4.31k|                            break;
  836|       |
  837|  11.1k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 11.1k, False: 31.6k]
  ------------------
  838|  15.0k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 3.88k, False: 38.9k]
  ------------------
  839|  15.0k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 11.1k, False: 3.93k]
  ------------------
  840|  11.1k|                            {
  841|  11.1k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 3.96k, False: 7.16k]
  ------------------
  842|  3.96k|                                {
  843|  3.96k|                                    return OpCode::CVTI2D;
  844|  3.96k|                                }
  845|  7.16k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 6.29k, False: 873]
  ------------------
  846|  6.29k|                                {
  847|  6.29k|                                    return OpCode::CVTI2F;
  848|  6.29k|                                }
  849|  11.1k|                            }
  850|  42.8k|                    }
  851|  42.8k|                }
  852|   113k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 29.2k, False: 84.2k]
  |  Branch (852:26): [True: 7.68k, False: 105k]
  |  Branch (852:42): [True: 25.6k, False: 3.57k]
  |  Branch (852:58): [True: 21.5k, False: 4.11k]
  |  Branch (852:74): [True: 19.0k, False: 2.58k]
  ------------------
  853|   113k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 9.12k, False: 9.87k]
  |  Branch (853:42): [True: 7.68k, False: 1.43k]
  ------------------
  854|  7.68k|                {
  855|  7.68k|                    return OpCode::MULTUI;
  856|  7.68k|                }
  857|   120k|                break;
  858|   156k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|   120k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 88.6k, False: 2.38M]
  ------------------
  862|  88.6k|                char c1 = token[0];
  863|  88.6k|                char c2 = token[1];
  864|  88.6k|                char c3 = token[2];
  865|  88.6k|                char c4 = token[3];
  866|  88.6k|                char c5 = token[4];
  867|  88.6k|                char c6 = token[5];
  868|  88.6k|                char c7 = token[6];
  869|       |
  870|  88.6k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 36.9k, False: 51.7k]
  |  Branch (870:21): [True: 23.6k, False: 65.0k]
  |  Branch (870:37): [True: 25.6k, False: 11.2k]
  |  Branch (870:53): [True: 23.6k, False: 2.00k]
  ------------------
  871|  23.6k|                {
  872|  23.6k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 9.92k, False: 13.7k]
  |  Branch (872:25): [True: 5.07k, False: 18.5k]
  |  Branch (872:41): [True: 8.43k, False: 1.49k]
  |  Branch (872:54): [True: 6.47k, False: 1.96k]
  |  Branch (872:70): [True: 5.07k, False: 1.39k]
  ------------------
  873|  5.07k|                    {
  874|  5.07k|                        return OpCode::MOVI2FP;
  875|  5.07k|                    }
  876|  18.5k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 10.5k, False: 7.98k]
  |  Branch (876:30): [True: 4.68k, False: 13.8k]
  |  Branch (876:46): [True: 9.02k, False: 1.56k]
  |  Branch (876:62): [True: 7.71k, False: 1.31k]
  |  Branch (876:75): [True: 4.68k, False: 3.03k]
  ------------------
  877|  4.68k|                    {
  878|  4.68k|                        return OpCode::MOVFP2I;
  879|  4.68k|                    }
  880|  23.6k|                }
  881|  78.9k|                break;
  882|  88.6k|            }
  883|       |
  884|  99.6k|            default: {
  ------------------
  |  Branch (884:13): [True: 99.6k, False: 2.36M]
  ------------------
  885|  99.6k|                break;
  886|  88.6k|            }
  887|  2.46M|        }
  888|       |
  889|       |        // None found
  890|  1.84M|        return OpCode::NONE;
  891|  2.46M|    }
_ZN3dlx3iceEcc:
   17|  2.86M|    {
   18|  2.86M|        constexpr const char diff = 'a' - 'A';
   19|  2.86M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 778k, False: 2.08M]
  |  Branch (19:28): [True: 731k, False: 1.35M]
  ------------------
   20|  2.86M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  3.01M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  27.0k|    {
  193|  27.0k|        ParseError err;
  194|       |
  195|  27.0k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  27.0k|        err.m_LineNumber                           = line_number;
  197|  27.0k|        err.m_Column                               = column;
  198|  27.0k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  27.0k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  27.0k|        return err;
  202|  27.0k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  27.0k|    {
  207|  27.0k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  27.0k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  27.0k|                                                         actual_type);
  210|  27.0k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|  1.53k|    {
  216|  1.53k|        ParseError err;
  217|       |
  218|  1.53k|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|  1.53k|        err.m_LineNumber        = line_number;
  220|  1.53k|        err.m_Column            = column;
  221|  1.53k|        err.invalid_number.text = text;
  222|       |
  223|  1.53k|        return err;
  224|  1.53k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|  1.53k|    {
  228|  1.53k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|  1.53k|                                                token.GetColumn().unsafe(), token.GetText());
  230|  1.53k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      8|    {
  235|      8|        ParseError err;
  236|       |
  237|      8|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      8|        err.m_LineNumber = line_number;
  239|      8|        err.m_Column     = column;
  240|       |
  241|      8|        return err;
  242|      8|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      8|    {
  247|      8|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      8|                                                                     token.GetColumn().unsafe());
  249|      8|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|  1.63M|    {
  255|  1.63M|        ParseError err;
  256|       |
  257|  1.63M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|  1.63M|        err.m_LineNumber                   = line_number;
  259|  1.63M|        err.m_Column                       = column;
  260|  1.63M|        err.unexpected_token.expected_type = expected_type;
  261|  1.63M|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|  1.63M|        return err;
  264|  1.63M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|  1.63M|    {
  269|  1.63M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|  1.63M|                                                  token.GetColumn().unsafe(), expected_type,
  271|  1.63M|                                                  token.GetType());
  272|  1.63M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|   166k|    {
  277|   166k|        ParseError err;
  278|       |
  279|   166k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|   166k|        err.m_LineNumber                   = line_number;
  281|   166k|        err.m_Column                       = column;
  282|   166k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|   166k|        return err;
  285|   166k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  1.56k|    {
  289|  1.56k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  1.56k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  1.56k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   706k|    {
  296|   706k|        ParseError err;
  297|       |
  298|   706k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   706k|        err.m_LineNumber                       = line_number;
  300|   706k|        err.m_Column                           = column;
  301|   706k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   706k|        return err;
  304|   706k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   706k|    {
  309|   706k|        return ConstructInvalidLabelIdentifierParseError(
  310|   706k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   706k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  98.2k|    {
  317|  98.2k|        ParseError err;
  318|       |
  319|  98.2k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  98.2k|        err.m_LineNumber                     = line_number;
  321|  98.2k|        err.m_Column                         = column;
  322|  98.2k|        err.label_already_defined.label_name = label_name;
  323|  98.2k|        err.label_already_defined.at_line    = at_line;
  324|  98.2k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  98.2k|        return err;
  327|  98.2k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  98.2k|    {
  332|  98.2k|        return ConstructLabelAlreadyDefinedParseError(
  333|  98.2k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  98.2k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  98.2k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   282k|    {
  340|   282k|        ParseError err;
  341|       |
  342|   282k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   282k|        err.m_LineNumber = line_number;
  344|   282k|        err.m_Column     = column;
  345|       |
  346|   282k|        return err;
  347|   282k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   282k|    {
  352|   282k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   282k|                                                        token.GetColumn().unsafe());
  354|   282k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  58.8k|    {
  360|  58.8k|        ParseError err;
  361|       |
  362|  58.8k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  58.8k|        err.m_LineNumber               = line_number;
  364|  58.8k|        err.m_Column                   = column;
  365|  58.8k|        err.too_few_arguments.required = required;
  366|  58.8k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  58.8k|        return err;
  369|  58.8k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  58.8k|    {
  374|  58.8k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  58.8k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  58.8k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  21.4k|    {
  381|  21.4k|        ParseError err;
  382|       |
  383|  21.4k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  21.4k|        err.m_LineNumber           = line_number;
  385|  21.4k|        err.m_Column               = column;
  386|  21.4k|        err.empty_label.label_name = label_name;
  387|       |
  388|  21.4k|        return err;
  389|  21.4k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  21.4k|    {
  393|  21.4k|        return ConstructEmptyLabelParseError(
  394|  21.4k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  21.4k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 16.4k, False: 5.04k]
  ------------------
  396|  16.4k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  21.4k|                        token.GetText());
  398|  21.4k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  12.8k|    {
  403|  12.8k|        ParseError err;
  404|       |
  405|  12.8k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  12.8k|        err.m_LineNumber = line_number;
  407|  12.8k|        err.m_Column     = column;
  408|       |
  409|  12.8k|        return err;
  410|  12.8k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  12.8k|    {
  414|  12.8k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  12.8k|                                               token.GetColumn().unsafe());
  416|  12.8k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  3.01M|    {
   19|  3.01M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  3.01M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  14.7k|    {
  182|  14.7k|        ParsedProgram program;
  183|       |
  184|  14.7k|        program.m_Tokens = tokens;
  185|       |
  186|  14.7k|        phi::boolean line_has_instruction{false};
  187|  14.7k|        phi::usize   label_count{0u};
  188|       |
  189|  3.47M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 3.45M, False: 14.7k]
  ------------------
  190|  3.45M|        {
  191|  3.45M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  3.45M|            switch (current_token.GetType())
  196|  3.45M|            {
  197|       |                // Ignore comments
  198|  12.2k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 12.2k, False: 3.44M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  12.2k|                    break;
  201|       |
  202|   405k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 405k, False: 3.05M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   405k|                    line_has_instruction = false;
  205|   405k|                    break;
  206|       |
  207|  1.37M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 1.37M, False: 2.08M]
  ------------------
  208|  1.37M|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 406k, False: 969k]
  ------------------
  209|   406k|                    {
  210|   406k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|   406k|                                current_token, Token::Type::NewLine));
  212|   406k|                        break;
  213|   406k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   969k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 457k, False: 511k]
  ------------------
  218|   457k|                    {
  219|   457k|                        program.AddParseError(
  220|   457k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   457k|                        break;
  222|   457k|                    }
  223|       |
  224|   511k|                    std::string_view label_name = current_token.GetText();
  225|   511k|                    label_name.remove_suffix(1);
  226|       |
  227|   511k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 165k, False: 346k]
  ------------------
  228|   165k|                    {
  229|   165k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|   165k|                                current_token.GetLineNumber().unsafe(),
  231|   165k|                                current_token.GetColumn().unsafe(), label_name));
  232|   165k|                        break;
  233|   165k|                    }
  234|       |
  235|   346k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 221k, False: 124k]
  ------------------
  236|   221k|                    {
  237|   221k|                        program.AddParseError(
  238|   221k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|   221k|                        break;
  240|   221k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|   124k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 98.2k, False: 26.4k]
  ------------------
  244|  98.2k|                    {
  245|       |                        // Find first defintions of label
  246|  98.2k|                        const Token* first_label_definition =
  247|  98.2k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  98.2k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  98.2k|                                    {
  250|  98.2k|                                        std::string_view token_label_name = t.GetText();
  251|  98.2k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  98.2k|                                        if (token_label_name == label_name)
  254|  98.2k|                                        {
  255|  98.2k|                                            return true;
  256|  98.2k|                                        }
  257|  98.2k|                                    }
  258|       |
  259|  98.2k|                                    return false;
  260|  98.2k|                                });
  261|       |
  262|  98.2k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  98.2k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  98.2k|                                current_token, *first_label_definition));
  266|  98.2k|                        break;
  267|  98.2k|                    }
  268|       |
  269|  26.4k|                    program.m_JumpData[label_name] =
  270|  26.4k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  26.4k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  26.4k|                    break;
  277|   124k|                }
  278|       |
  279|   467k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 467k, False: 2.99M]
  ------------------
  280|   467k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 282k, False: 184k]
  ------------------
  281|   282k|                    {
  282|   282k|                        program.AddParseError(
  283|   282k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   282k|                        break;
  285|   282k|                    }
  286|       |
  287|   184k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|   184k|                    PHI_ASSERT(current_token.HasHint());
  291|   184k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|   184k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|   184k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|   184k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|   184k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|   184k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|   184k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|   184k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|   184k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   354k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 320k, False: 34.2k]
  ------------------
  313|   320k|                    {
  314|       |                        // Get next token
  315|   320k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 910, False: 319k]
  ------------------
  316|    910|                        {
  317|    910|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    910|                                    current_token, number_of_argument_required.unsafe(),
  319|    910|                                    argument_num.unsafe()));
  320|    910|                            break;
  321|    910|                        }
  322|       |
  323|   319k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   319k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 121k, False: 197k]
  ------------------
  327|   121k|                        {
  328|   121k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 12.8k, False: 108k]
  ------------------
  329|  12.8k|                            {
  330|  12.8k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  12.8k|                            }
  332|       |
  333|   121k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|   121k|                            continue;
  336|   121k|                        }
  337|       |
  338|   197k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 57.9k, False: 139k]
  ------------------
  339|  57.9k|                        {
  340|  57.9k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  57.9k|                                    token, number_of_argument_required.unsafe(),
  342|  57.9k|                                    argument_num.unsafe()));
  343|  57.9k|                            break;
  344|  57.9k|                        }
  345|       |
  346|   139k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|   139k|                                parse_instruction_argument(
  348|   139k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|   139k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 91.7k, False: 48.2k]
  ------------------
  350|  91.7k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  91.7k|                            break;
  353|  91.7k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  48.2k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  48.2k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  48.2k|                        argument_num++;
  360|  48.2k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  48.2k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|   184k|                    program.m_Instructions.emplace_back(instruction);
  368|   184k|                    line_has_instruction = true;
  369|   184k|                    break;
  370|   467k|                }
  371|       |
  372|  1.19M|                default:
  ------------------
  |  Branch (372:17): [True: 1.19M, False: 2.26M]
  ------------------
  373|  1.19M|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|  1.19M|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 655k, False: 542k]
  ------------------
  375|   655k|                    {
  376|   655k|                        expected_token_type = Token::Type::NewLine;
  377|   655k|                    }
  378|       |
  379|  1.19M|                    program.AddParseError(
  380|  1.19M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|  1.19M|                    break;
  382|  3.45M|            }
  383|  3.45M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  14.7k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 3.35k, False: 11.4k]
  ------------------
  387|  3.35k|        {
  388|  32.5k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 29.2k, False: 3.35k]
  ------------------
  389|  29.2k|            {
  390|  29.2k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  29.2k|                const Token& token = *it;
  393|  29.2k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 21.4k, False: 7.74k]
  ------------------
  394|  21.4k|                {
  395|  21.4k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  21.4k|                    --label_count;
  397|  21.4k|                }
  398|  29.2k|            }
  399|  3.35k|        }
  400|       |
  401|  14.7k|        return program;
  402|  14.7k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  14.7k|    {
  406|  14.7k|        TokenStream tokens = Tokenize(source);
  407|  14.7k|        return Parse(tokens);
  408|  14.7k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|   139k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|   139k|        switch (token.GetType())
   38|   139k|        {
   39|  16.9k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 16.9k, False: 123k]
  ------------------
   40|  16.9k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 4.37k, False: 12.5k]
  ------------------
   41|  16.9k|                                          ArgumentType::AddressDisplacement))
   42|  4.37k|                {
   43|  4.37k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  4.37k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  4.37k|                    return {};
   47|  4.37k|                }
   48|       |
   49|       |                // Get address displacement
   50|  12.5k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  12.5k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  12.5k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 8, False: 12.5k]
  ------------------
   55|      8|                {
   56|      8|                    program.AddParseError(
   57|      8|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      8|                    return {};
   59|      8|                }
   60|       |
   61|  12.5k|                auto         it           = tokens.current_position();
   62|  12.5k|                const Token& first_token  = tokens.consume();
   63|  12.5k|                const Token& second_token = tokens.consume();
   64|  12.5k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  12.5k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 1.80k, False: 10.7k]
  ------------------
   67|  1.80k|                {
   68|  1.80k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  1.80k|                            first_token, Token::Type::OpenBracket));
   70|  1.80k|                    return {};
   71|  1.80k|                }
   72|       |
   73|       |                // Second token is the register
   74|  10.7k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 4.61k, False: 6.15k]
  ------------------
   75|  4.61k|                {
   76|  4.61k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|  4.61k|                            second_token, Token::Type::RegisterInt));
   78|  4.61k|                    return {};
   79|  4.61k|                }
   80|       |
   81|  6.15k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 3.26k, False: 2.88k]
  ------------------
   82|  3.26k|                {
   83|  3.26k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|  3.26k|                            third_token, Token::Type::ClosingBracket));
   85|  3.26k|                    return {};
   86|  3.26k|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|  2.88k|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|  2.88k|                return ConstructInstructionArgumentAddressDisplacement(
   95|  2.88k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|  6.15k|            }
   97|  13.1k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 13.1k, False: 126k]
  ------------------
   98|  13.1k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 1.20k, False: 11.9k]
  ------------------
   99|  1.20k|                {
  100|  1.20k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  1.20k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  1.20k|                    return {};
  103|  1.20k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  11.9k|                return ConstructInstructionArgumentRegisterInt(
  109|  11.9k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  13.1k|            }
  111|  14.1k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 14.1k, False: 125k]
  ------------------
  112|  14.1k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 1.65k, False: 12.5k]
  ------------------
  113|  1.65k|                {
  114|  1.65k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  1.65k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  1.65k|                    return {};
  117|  1.65k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  12.5k|                return ConstructInstructionArgumentRegisterFloat(
  123|  12.5k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  14.1k|            }
  125|  1.56k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 1.56k, False: 138k]
  ------------------
  126|  1.56k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  1.56k|                return {};
  129|  14.1k|            }
  130|  64.6k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 64.6k, False: 75.3k]
  ------------------
  131|       |                // Parse as Label
  132|  64.6k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 18.8k, False: 45.7k]
  ------------------
  133|  18.8k|                {
  134|  18.8k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  18.8k|                            token, expected_argument_type, ArgumentType::Label));
  136|  18.8k|                    return {};
  137|  18.8k|                }
  138|       |
  139|  45.7k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 45.7k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  45.7k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 26.8k, False: 18.9k]
  ------------------
  146|  26.8k|                {
  147|  26.8k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  26.8k|                    return {};
  149|  26.8k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  18.9k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  45.7k|            }
  155|  4.38k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 4.38k, False: 135k]
  ------------------
  156|  4.38k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 931, False: 3.45k]
  ------------------
  157|    931|                {
  158|    931|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|    931|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|    931|                    return {};
  161|    931|                }
  162|       |
  163|  3.45k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 1.92k, False: 1.53k]
  ------------------
  164|  1.92k|                {
  165|  1.92k|                    return ConstructInstructionArgumentImmediateValue(
  166|  1.92k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  1.92k|                }
  168|       |
  169|  1.53k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|  1.53k|                return {};
  171|  3.45k|            }
  172|       |
  173|  25.0k|            default:
  ------------------
  |  Branch (173:13): [True: 25.0k, False: 114k]
  ------------------
  174|  25.0k|                program.AddParseError(
  175|  25.0k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  25.0k|                return {};
  177|   139k|        }
  178|   139k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  2.06M|                                tokens.find_first_token_if([&](const Token& t) {
  248|  2.06M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 1.39M, False: 679k]
  ------------------
  249|  1.39M|                                    {
  250|  1.39M|                                        std::string_view token_label_name = t.GetText();
  251|  1.39M|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  1.39M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 98.2k, False: 1.29M]
  ------------------
  254|  98.2k|                                        {
  255|  98.2k|                                            return true;
  256|  98.2k|                                        }
  257|  1.39M|                                    }
  258|       |
  259|  1.97M|                                    return false;
  260|  2.06M|                                });

_ZN3dlx9ProcessorC2Ev:
   63|      1|    {
   64|       |        // Mark R0 as ready only
   65|      1|        m_IntRegisters[0].SetReadOnly(true);
   66|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   69|  1.19M|    {
   70|  1.19M|        PHI_ASSERT(id != IntRegisterID::None);
   71|  1.19M|        phi::size_t id_value = phi::to_underlying(id);
   72|       |
   73|  1.19M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   74|       |
   75|  1.19M|        return m_IntRegisters[id_value];
   76|  1.19M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   80|  3.34M|    {
   81|  3.34M|        PHI_ASSERT(id != IntRegisterID::None);
   82|  3.34M|        phi::size_t id_value = phi::to_underlying(id);
   83|       |
   84|  3.34M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   85|       |
   86|  3.34M|        return m_IntRegisters[id_value];
   87|  3.34M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   90|  1.78M|    {
   91|  1.78M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   92|  1.78M|                                             RegisterAccessType::Signed),
   93|  1.78M|                   "Mismatch for instruction access type");
   94|       |
   95|  1.78M|        const phi::size_t id_value = phi::to_underlying(id);
   96|       |
   97|  1.78M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   98|  1.78M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
   99|  1.78M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (99:13): [True: 115k, False: 1.67M]
  ------------------
  100|  1.78M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (100:13): [True: 6.67k, False: 108k]
  ------------------
  101|  6.67k|        {
  102|  6.67k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  6.67k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  103|  6.67k|        }
  104|       |
  105|  1.78M|        return GetIntRegister(id).GetSignedValue();
  106|  1.78M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  109|  1.55M|    {
  110|  1.55M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  111|  1.55M|                                             RegisterAccessType::Unsigned),
  112|  1.55M|                   "Mismatch for instruction access type");
  113|       |
  114|  1.55M|        const phi::size_t id_value = phi::to_underlying(id);
  115|       |
  116|  1.55M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  117|  1.55M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  118|  1.55M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (118:13): [True: 1.04M, False: 514k]
  ------------------
  119|  1.55M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (119:13): [True: 1.01M, False: 24.1k]
  ------------------
  120|  1.01M|        {
  121|  1.01M|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  1.01M|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  122|  1.01M|        }
  123|       |
  124|  1.55M|        return GetIntRegister(id).GetUnsignedValue();
  125|  1.55M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  128|   817k|    {
  129|   817k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  130|   817k|                                             RegisterAccessType::Signed),
  131|   817k|                   "Mismatch for instruction access type");
  132|       |
  133|   817k|        IntRegister& reg = GetIntRegister(id);
  134|       |
  135|   817k|        if (reg.IsReadOnly())
  ------------------
  |  Branch (135:13): [True: 433k, False: 384k]
  ------------------
  136|   433k|        {
  137|   433k|            return;
  138|   433k|        }
  139|       |
  140|   384k|        reg.SetSignedValue(value);
  141|       |
  142|   384k|        const phi::size_t id_value = phi::to_underlying(id);
  143|       |
  144|   384k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  145|   384k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  146|   384k|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  149|   375k|    {
  150|   375k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  151|   375k|                                             RegisterAccessType::Unsigned),
  152|   375k|                   "Mismatch for instruction access type");
  153|       |
  154|   375k|        IntRegister& reg = GetIntRegister(id);
  155|       |
  156|   375k|        if (reg.IsReadOnly())
  ------------------
  |  Branch (156:13): [True: 246k, False: 129k]
  ------------------
  157|   246k|        {
  158|   246k|            return;
  159|   246k|        }
  160|       |
  161|   129k|        reg.SetUnsignedValue(value);
  162|       |
  163|   129k|        const phi::size_t id_value = phi::to_underlying(id);
  164|       |
  165|   129k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  166|   129k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  167|   129k|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  170|  1.21M|    {
  171|  1.21M|        PHI_ASSERT(id != FloatRegisterID::None);
  172|  1.21M|        const phi::size_t id_value = phi::to_underlying(id);
  173|       |
  174|  1.21M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  175|       |
  176|  1.21M|        return m_FloatRegisters[id_value];
  177|  1.21M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  181|   904k|    {
  182|   904k|        PHI_ASSERT(id != FloatRegisterID::None);
  183|   904k|        const phi::size_t id_value = phi::to_underlying(id);
  184|       |
  185|   904k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  186|       |
  187|   904k|        return m_FloatRegisters[id_value];
  188|   904k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  191|   904k|    {
  192|   904k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  193|   904k|                                             RegisterAccessType::Float),
  194|   904k|                   "Mismatch for instruction access type");
  195|       |
  196|   904k|        const phi::size_t id_value = phi::to_underlying(id);
  197|       |
  198|   904k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  199|   904k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  200|   904k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (200:13): [True: 790k, False: 114k]
  ------------------
  201|   904k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (201:13): [True: 391k, False: 398k]
  ------------------
  202|   391k|        {
  203|       |            /*
  204|       |            DLX_WARN("Mismatch for register value type");
  205|       |            */
  206|   391k|        }
  207|       |
  208|   904k|        const FloatRegister& reg = GetFloatRegister(id);
  209|       |
  210|   904k|        return reg.GetValue();
  211|   904k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  214|   439k|    {
  215|   439k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  216|   439k|                                             RegisterAccessType::Double),
  217|   439k|                   "Mismatch for instruction access type");
  218|       |
  219|   439k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (219:13): [True: 21, False: 439k]
  ------------------
  220|     21|        {
  221|     21|            Raise(Exception::MisalignedRegisterAccess);
  222|     21|            return {0.0};
  223|     21|        }
  224|       |
  225|   439k|        const phi::size_t id_value = phi::to_underlying(id);
  226|       |
  227|   439k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  228|   439k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  229|   439k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (229:13): [True: 342k, False: 97.6k]
  ------------------
  230|   439k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (230:13): [True: 282k, False: 59.1k]
  ------------------
  231|   282k|        {
  232|   282k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   282k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  233|   282k|        }
  234|       |
  235|   439k|        const FloatRegisterValueType register_value_type_high =
  236|   439k|                m_FloatRegistersValueTypes[id_value + 1u];
  237|   439k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (237:13): [True: 342k, False: 97.6k]
  ------------------
  238|   439k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (238:13): [True: 0, False: 342k]
  ------------------
  239|      0|        {
  240|      0|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  241|      0|        }
  242|       |
  243|   439k|        const FloatRegister& first_reg = GetFloatRegister(id);
  244|   439k|        const FloatRegister& second_reg =
  245|   439k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  246|       |
  247|   439k|        const float first_value  = first_reg.GetValue().unsafe();
  248|   439k|        const float second_value = second_reg.GetValue().unsafe();
  249|       |
  250|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  251|   439k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  252|       |
  253|   439k|        const std::uint32_t first_value_bits =
  254|   439k|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  255|   439k|        const std::uint32_t second_value_bits =
  256|   439k|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  257|       |
  258|   439k|        std::uint64_t final_value_bits =
  259|   439k|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  260|       |
  261|   439k|        return *reinterpret_cast<double*>(&final_value_bits);
  262|       |
  263|   439k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  264|   439k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  267|   158k|    {
  268|   158k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  269|   158k|                                             RegisterAccessType::Float),
  270|   158k|                   "Mismatch for instruction access type");
  271|       |
  272|   158k|        FloatRegister& reg = GetFloatRegister(id);
  273|       |
  274|   158k|        reg.SetValue(value);
  275|       |
  276|   158k|        const phi::size_t id_value = phi::to_underlying(id);
  277|       |
  278|   158k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  279|   158k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  280|   158k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  283|  87.5k|    {
  284|  87.5k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  285|  87.5k|                                             RegisterAccessType::Double),
  286|  87.5k|                   "Mismatch for instruction access type");
  287|       |
  288|  87.5k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (288:13): [True: 2, False: 87.5k]
  ------------------
  289|      2|        {
  290|      2|            Raise(Exception::MisalignedRegisterAccess);
  291|      2|            return;
  292|      2|        }
  293|       |
  294|  87.5k|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  295|  87.5k|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  296|       |
  297|  87.5k|        double              value_raw  = value.unsafe();
  298|  87.5k|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  299|       |
  300|  87.5k|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  301|  87.5k|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  302|       |
  303|  87.5k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  304|  87.5k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  305|       |
  306|  87.5k|        FloatRegister& first_reg = GetFloatRegister(id);
  307|  87.5k|        FloatRegister& second_reg =
  308|  87.5k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  309|       |
  310|  87.5k|        first_reg.SetValue(first_value);
  311|  87.5k|        second_reg.SetValue(second_value);
  312|       |
  313|  87.5k|        const phi::size_t id_value = phi::to_underlying(id);
  314|       |
  315|  87.5k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  316|  87.5k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  317|  87.5k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  318|  87.5k|    }
_ZN3dlx9Processor7GetFPSREv:
  321|   502k|    {
  322|   502k|        return m_FPSR;
  323|   502k|    }
_ZNK3dlx9Processor7GetFPSREv:
  326|   267k|    {
  327|   267k|        return m_FPSR;
  328|   267k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  331|   267k|    {
  332|   267k|        const StatusRegister& status_reg = GetFPSR();
  333|       |
  334|   267k|        return status_reg.Get();
  335|   267k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  338|   502k|    {
  339|   502k|        StatusRegister& status_reg = GetFPSR();
  340|       |
  341|   502k|        status_reg.SetStatus(value);
  342|   502k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  345|  5.65M|    {
  346|  5.65M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  347|       |
  348|  5.65M|        inst.Execute(*this);
  349|  5.65M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  352|  14.7k|    {
  353|  14.7k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (353:13): [True: 13.7k, False: 1.03k]
  ------------------
  354|  13.7k|        {
  355|  13.7k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  13.7k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  356|  13.7k|            return false;
  357|  13.7k|        }
  358|       |
  359|  1.03k|        m_CurrentProgram = &program;
  360|       |
  361|  1.03k|        m_ProgramCounter               = 0u;
  362|  1.03k|        m_Halted                       = false;
  363|  1.03k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  364|  1.03k|        m_LastRaisedException          = Exception::None;
  365|  1.03k|        m_CurrentStepCount             = 0u;
  366|       |
  367|  1.03k|        return true;
  368|  14.7k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  372|  1.56M|    {
  373|  1.56M|        return m_CurrentProgram;
  374|  1.56M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  377|  5.65M|    {
  378|       |        // No nothing when no program is loaded
  379|  5.65M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (379:13): [True: 0, False: 5.65M]
  ------------------
  380|      0|        {
  381|      0|            return;
  382|      0|        }
  383|       |
  384|       |        // Halt if there are no instruction to execute
  385|  5.65M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (385:13): [True: 65, False: 5.65M]
  ------------------
  386|     65|        {
  387|     65|            m_Halted                       = true;
  388|     65|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  389|     65|        }
  390|       |
  391|       |        // Do nothing when processor is halted
  392|  5.65M|        if (m_Halted)
  ------------------
  |  Branch (392:13): [True: 65, False: 5.65M]
  ------------------
  393|     65|        {
  394|     65|            return;
  395|     65|        }
  396|       |
  397|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  398|  5.65M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  399|       |
  400|       |        // Get current instruction pointed to by the program counter
  401|  5.65M|        const auto& current_instruction =
  402|  5.65M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  403|       |
  404|       |        // Execute current instruction
  405|  5.65M|        ExecuteInstruction(current_instruction);
  406|       |
  407|       |        // Stop executing if the last instruction halted the processor
  408|  5.65M|        if (m_Halted)
  ------------------
  |  Branch (408:13): [True: 173, False: 5.65M]
  ------------------
  409|    173|        {
  410|    173|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  411|    173|            return;
  412|    173|        }
  413|       |
  414|  5.65M|        m_ProgramCounter = m_NextProgramCounter;
  415|       |
  416|  5.65M|        ++m_CurrentStepCount;
  417|       |
  418|  5.65M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (418:13): [True: 801, False: 5.65M]
  |  Branch (418:14): [True: 5.65M, False: 0]
  |  Branch (418:42): [True: 565, False: 5.65M]
  ------------------
  419|  5.65M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (419:13): [True: 236, False: 5.65M]
  ------------------
  420|    801|        {
  421|    801|            m_Halted                       = true;
  422|    801|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  423|    801|        }
  424|  5.65M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  427|  1.03k|    {
  428|       |        // Do nothing when no program is loaded
  429|  1.03k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (429:13): [True: 0, False: 1.03k]
  ------------------
  430|      0|        {
  431|      0|            return;
  432|      0|        }
  433|       |
  434|  1.03k|        m_ProgramCounter               = 0u;
  435|  1.03k|        m_Halted                       = false;
  436|  1.03k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  437|  1.03k|        m_LastRaisedException          = Exception::None;
  438|  1.03k|        m_CurrentStepCount             = 0u;
  439|       |
  440|  5.65M|        while (!m_Halted)
  ------------------
  |  Branch (440:16): [True: 5.65M, False: 1.03k]
  ------------------
  441|  5.65M|        {
  442|  5.65M|            ExecuteStep();
  443|  5.65M|        }
  444|       |
  445|  1.03k|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  446|  1.03k|                   "RegisterAccessType was not reset correctly");
  447|  1.03k|    }
_ZN3dlx9Processor14ClearRegistersEv:
  463|  14.7k|    {
  464|  14.7k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (464:24): [True: 472k, False: 14.7k]
  ------------------
  465|   472k|        {
  466|   472k|            reg.SetSignedValue(0);
  467|   472k|        }
  468|       |
  469|  14.7k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (469:24): [True: 472k, False: 14.7k]
  ------------------
  470|   472k|        {
  471|   472k|            reg.SetValue(0.0f);
  472|   472k|        }
  473|       |
  474|  14.7k|        m_FPSR.SetStatus(false);
  475|  14.7k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  478|  14.7k|    {
  479|  14.7k|        m_MemoryBlock.Clear();
  480|  14.7k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  487|    180|    {
  488|    180|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  489|       |
  490|    180|        m_LastRaisedException = exception;
  491|       |
  492|    180|        switch (exception)
  493|    180|        {
  494|      4|            case Exception::DivideByZero:
  ------------------
  |  Branch (494:13): [True: 4, False: 176]
  ------------------
  495|      4|                m_Halted = true;
  496|      4|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  497|      4|                return;
  498|      0|            case Exception::Overflow:
  ------------------
  |  Branch (498:13): [True: 0, False: 180]
  ------------------
  499|      0|                DLX_WARN("Overflow");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  500|      0|                return;
  501|      0|            case Exception::Underflow:
  ------------------
  |  Branch (501:13): [True: 0, False: 180]
  ------------------
  502|      0|                DLX_WARN("Underflow");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  503|      0|                return;
  504|      0|            case Exception::Trap:
  ------------------
  |  Branch (504:13): [True: 0, False: 180]
  ------------------
  505|      0|                m_Halted = true;
  506|      0|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  507|      0|                return;
  508|      2|            case Exception::Halt:
  ------------------
  |  Branch (508:13): [True: 2, False: 178]
  ------------------
  509|      2|                m_Halted = true;
  510|      2|                return;
  511|    119|            case Exception::UnknownLabel:
  ------------------
  |  Branch (511:13): [True: 119, False: 61]
  ------------------
  512|    119|                m_Halted = true;
  513|    119|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|    119|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  514|    119|                return;
  515|      0|            case Exception::BadShift:
  ------------------
  |  Branch (515:13): [True: 0, False: 180]
  ------------------
  516|      0|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  517|      0|                return;
  518|     32|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (518:13): [True: 32, False: 148]
  ------------------
  519|     32|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|     32|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  520|     32|                m_Halted = true;
  521|     32|                return;
  522|     23|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (522:13): [True: 23, False: 157]
  ------------------
  523|     23|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     23|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  524|     23|                m_Halted = true;
  525|     23|                return;
  526|       |
  527|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  528|      0|            default:
  ------------------
  |  Branch (528:13): [True: 0, False: 180]
  ------------------
  529|      0|                PHI_ASSERT_NOT_REACHED();
  530|    180|#endif
  531|    180|        }
  532|       |
  533|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  534|      0|        PHI_ASSERT_NOT_REACHED();
  535|      0|#endif
  536|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  557|  44.2k|    {
  558|  44.2k|        return m_MemoryBlock;
  559|  44.2k|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  572|   119k|    {
  573|   119k|        return m_NextProgramCounter;
  574|   119k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  577|  1.56M|    {
  578|  1.56M|        m_NextProgramCounter = new_npc;
  579|  1.56M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   35|  6.12M|    {
   36|  6.12M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   37|  6.12M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   38|       |
   39|  6.12M|        switch (expected_access)
   40|  6.12M|        {
   41|  1.45M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (41:13): [True: 1.45M, False: 4.67M]
  ------------------
   42|  1.45M|                return true;
   43|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (43:13): [True: 0, False: 6.12M]
  ------------------
   44|      0|                return false;
   45|   204k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (45:13): [True: 204k, False: 5.92M]
  ------------------
   46|   204k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (46:24): [True: 102k, False: 102k]
  |  Branch (46:63): [True: 102k, False: 0]
  ------------------
   47|      6|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (47:13): [True: 6, False: 6.12M]
  ------------------
   48|      6|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (48:24): [True: 0, False: 6]
  ------------------
   49|      6|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (49:24): [True: 6, False: 0]
  ------------------
   50|  30.8k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (50:13): [True: 30.8k, False: 6.09M]
  ------------------
   51|  30.8k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (51:24): [True: 30.8k, False: 1]
  |  Branch (51:63): [True: 1, False: 0]
  ------------------
   52|      8|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (52:13): [True: 8, False: 6.12M]
  ------------------
   53|      8|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (53:24): [True: 5, False: 3]
  |  Branch (53:64): [True: 3, False: 0]
  ------------------
   54|  4.44M|            default:
  ------------------
  |  Branch (54:13): [True: 4.44M, False: 1.68M]
  ------------------
   55|  4.44M|                return expected_access == access;
   56|  6.12M|        }
   57|  6.12M|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  2.53M|    {
   14|  2.53M|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 454k, False: 2.08M]
  ------------------
   15|   454k|        {
   16|   454k|            char first_char = token[0];
   17|   454k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 11.0k, False: 443k]
  |  Branch (17:38): [True: 31.5k, False: 411k]
  ------------------
   18|  42.5k|            {
   19|  42.5k|                char second_char = token[1];
   20|  42.5k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 37.8k, False: 4.66k]
  |  Branch (20:43): [True: 21.7k, False: 16.1k]
  ------------------
   21|  21.7k|                {
   22|  21.7k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  21.7k|                }
   24|  42.5k|            }
   25|   454k|        }
   26|  2.08M|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 561k, False: 1.51M]
  ------------------
   27|   561k|        {
   28|   561k|            char first_char = token[0];
   29|   561k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 7.32k, False: 553k]
  |  Branch (29:38): [True: 32.8k, False: 520k]
  ------------------
   30|  40.1k|            {
   31|  40.1k|                char second_char = token[1];
   32|  40.1k|                char third_char  = token[2];
   33|       |
   34|  40.1k|                switch (second_char)
   35|  40.1k|                {
   36|  10.1k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 10.1k, False: 30.0k]
  ------------------
   37|  10.1k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 7.59k, False: 2.57k]
  |  Branch (37:50): [True: 4.26k, False: 3.32k]
  ------------------
   38|  4.26k|                        {
   39|  4.26k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  4.26k|                        }
   41|  5.89k|                        break;
   42|  10.1k|                    }
   43|  9.71k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 9.71k, False: 30.4k]
  ------------------
   44|  9.71k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 5.83k, False: 3.87k]
  |  Branch (44:50): [True: 3.62k, False: 2.21k]
  ------------------
   45|  3.62k|                        {
   46|  3.62k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  3.62k|                        }
   48|  6.09k|                        break;
   49|  9.71k|                    }
   50|  7.33k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 7.33k, False: 32.8k]
  ------------------
   51|  7.33k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 2.17k, False: 5.15k]
  |  Branch (51:50): [True: 3.56k, False: 1.59k]
  ------------------
   52|  5.74k|                        {
   53|  5.74k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  5.74k|                        }
   55|  1.59k|                        break;
   56|  7.33k|                    }
   57|  12.9k|                    default: {
  ------------------
  |  Branch (57:21): [True: 12.9k, False: 27.2k]
  ------------------
   58|  12.9k|                        break;
   59|  7.33k|                    }
   60|  40.1k|                }
   61|  40.1k|            }
   62|   561k|        }
   63|       |
   64|  2.49M|        return IntRegisterID::None;
   65|  2.53M|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|  2.49M|    {
   69|  2.49M|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 432k, False: 2.06M]
  ------------------
   70|   432k|        {
   71|   432k|            char first_char = token[0];
   72|   432k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 15.9k, False: 416k]
  |  Branch (72:38): [True: 24.2k, False: 392k]
  ------------------
   73|  40.2k|            {
   74|  40.2k|                char second_char = token[1];
   75|  40.2k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 34.0k, False: 6.20k]
  |  Branch (75:43): [True: 23.0k, False: 11.0k]
  ------------------
   76|  23.0k|                {
   77|  23.0k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  23.0k|                }
   79|  40.2k|            }
   80|   432k|        }
   81|  2.06M|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 547k, False: 1.51M]
  ------------------
   82|   547k|        {
   83|   547k|            char first_char = token[0];
   84|   547k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 15.5k, False: 531k]
  |  Branch (84:38): [True: 18.7k, False: 513k]
  ------------------
   85|  34.3k|            {
   86|  34.3k|                char second_char = token[1];
   87|  34.3k|                char third_char  = token[2];
   88|       |
   89|  34.3k|                switch (second_char)
   90|  34.3k|                {
   91|  8.65k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 8.65k, False: 25.6k]
  ------------------
   92|  8.65k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 3.96k, False: 4.69k]
  |  Branch (92:50): [True: 1.05k, False: 2.90k]
  ------------------
   93|  1.05k|                        {
   94|  1.05k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  1.05k|                        }
   96|  7.60k|                        break;
   97|  8.65k|                    }
   98|  7.71k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 7.71k, False: 26.6k]
  ------------------
   99|  7.71k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 6.91k, False: 798]
  |  Branch (99:50): [True: 2.70k, False: 4.20k]
  ------------------
  100|  2.70k|                        {
  101|  2.70k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  2.70k|                        }
  103|  5.00k|                        break;
  104|  7.71k|                    }
  105|  5.43k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 5.43k, False: 28.8k]
  ------------------
  106|  5.43k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 1.17k, False: 4.26k]
  |  Branch (106:50): [True: 2.26k, False: 1.99k]
  ------------------
  107|  3.44k|                        {
  108|  3.44k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  3.44k|                        }
  110|  1.99k|                        break;
  111|  5.43k|                    }
  112|  12.5k|                    default: {
  ------------------
  |  Branch (112:21): [True: 12.5k, False: 21.8k]
  ------------------
  113|  12.5k|                        break;
  114|  5.43k|                    }
  115|  34.3k|                }
  116|  34.3k|            }
  117|   547k|        }
  118|       |
  119|  2.46M|        return FloatRegisterID::None;
  120|  2.49M|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|  2.38M|    {
  124|  2.38M|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 466k, False: 1.91M]
  ------------------
  125|   466k|        {
  126|   466k|            char c1 = token[0];
  127|   466k|            char c2 = token[1];
  128|   466k|            char c3 = token[2];
  129|   466k|            char c4 = token[3];
  130|       |
  131|   466k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 7.78k, False: 458k]
  |  Branch (131:34): [True: 16.1k, False: 442k]
  |  Branch (131:49): [True: 2.13k, False: 21.8k]
  |  Branch (131:62): [True: 11.8k, False: 9.95k]
  ------------------
  132|   466k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 9.46k, False: 4.52k]
  |  Branch (132:34): [True: 2.06k, False: 2.46k]
  |  Branch (132:49): [True: 3.77k, False: 7.76k]
  |  Branch (132:62): [True: 7.59k, False: 165]
  ------------------
  133|   466k|        }
  134|       |
  135|  1.91M|        return false;
  136|  2.38M|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   516k|    {
   12|   516k|        m_Value = value;
   13|   516k|    }
_ZNK3dlx14StatusRegister3GetEv:
   16|   267k|    {
   17|   267k|        return m_Value;
   18|   267k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  3.23M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   577k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  7.88M|    {
   41|  7.88M|        return m_Type;
   42|  7.88M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  3.29M|    {
   51|  3.29M|        return m_LineNumber;
   52|  3.29M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  3.11M|    {
   56|  3.11M|        return m_Column;
   57|  3.11M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  3.84M|    {
   66|  3.84M|        return m_Text;
   67|  3.84M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   200k|    {
   80|   200k|        return m_HasHint;
   81|   200k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   226k|    {
   85|   226k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   226k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   226k|                   m_Type == Type::ImmediateInteger);
   88|   226k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   226k|        return m_Hint;
   91|   226k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  14.7k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  14.7k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  14.7k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  12.5k|    {
   51|  12.5k|        auto it = m_Iterator;
   52|  50.2k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 37.7k, False: 12.5k]
  ------------------
   53|  37.7k|        {
   54|  37.7k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 8, False: 37.7k]
  ------------------
   55|      8|            {
   56|      8|                return false;
   57|      8|            }
   58|  37.7k|        }
   59|       |
   60|  12.5k|        return true;
   61|  12.5k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  3.79M|    {
   65|  3.79M|        return m_Iterator != m_Tokens.end();
   66|  3.79M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  3.81M|    {
   70|  3.81M|        return m_Iterator == m_Tokens.end();
   71|  3.81M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  3.81M|    {
   85|  3.81M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  3.81M|        return *m_Iterator++;
   91|  3.81M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  12.5k|    {
  164|  12.5k|        return m_Iterator;
  165|  12.5k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  2.88k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  2.88k|        m_Iterator = it;
  179|  2.88k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  3.35k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  3.35k|        return m_Tokens.rbegin();
  224|  3.35k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  29.2k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  29.2k|        return m_Tokens.rend();
  233|  29.2k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  14.7k|    {
   63|  14.7k|        TokenStream tokens;
   64|       |
   65|  14.7k|        std::string_view current_token;
   66|       |
   67|  14.7k|        phi::u64 current_line_number{1u};
   68|  14.7k|        phi::u64 current_column{1u};
   69|  14.7k|        phi::u64 token_begin{0u};
   70|       |
   71|  14.7k|        phi::boolean parsing_comment{false};
   72|       |
   73|  9.38M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 9.37M, False: 14.7k]
  ------------------
   74|  9.37M|        {
   75|  9.37M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  9.37M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 464k, False: 8.90M]
  ------------------
   78|   464k|            {
   79|   464k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 98.6k, False: 366k]
  ------------------
   80|  98.6k|                {
   81|       |                    // Skip empty lines
   82|  98.6k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  98.6k|                                        current_line_number, current_column);
   84|       |
   85|  98.6k|                    parsing_comment = false;
   86|  98.6k|                    current_line_number += 1u;
   87|  98.6k|                    current_column = 1u;
   88|  98.6k|                    continue;
   89|  98.6k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   366k|                tokens.emplace_back(
   93|   366k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   366k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   366k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   366k|                                    current_line_number, current_column);
   98|       |
   99|   366k|                current_token   = std::string_view{};
  100|   366k|                parsing_comment = false;
  101|   366k|                current_line_number += 1u;
  102|   366k|                current_column = 0u;
  103|   366k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  8.90M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 11.5k, False: 8.89M]
  |  Branch (105:34): [True: 8.87k, False: 8.88M]
  ------------------
  106|  20.4k|            {
  107|  20.4k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 7.98k, False: 12.4k]
  ------------------
  108|  7.98k|                {
  109|  7.98k|                    token_begin = i;
  110|  7.98k|                }
  111|  12.4k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 9.36k, False: 3.12k]
  ------------------
  112|  9.36k|                {
  113|  9.36k|                    tokens.emplace_back(ParseToken(
  114|  9.36k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  9.36k|                            current_line_number, current_column - current_token.length()));
  116|  9.36k|                    token_begin   = i;
  117|  9.36k|                    current_token = std::string_view{};
  118|  9.36k|                }
  119|       |
  120|  20.4k|                parsing_comment = true;
  121|  20.4k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  20.4k|            }
  123|  8.88M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 45.7k, False: 8.84M]
  ------------------
  124|  45.7k|            {
  125|       |                // simply append the character
  126|  45.7k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|  45.7k|            }
  128|  8.84M|            else
  129|  8.84M|            {
  130|       |                // Not parsing a comment
  131|  8.84M|                switch (c)
  132|  8.84M|                {
  133|  87.0k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 87.0k, False: 8.75M]
  ------------------
  134|   163k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 76.2k, False: 8.76M]
  ------------------
  135|   277k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 114k, False: 8.72M]
  ------------------
  136|   277k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 83.5k, False: 194k]
  ------------------
  137|  83.5k|                        {
  138|  83.5k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  83.5k|                            continue;
  141|  83.5k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   194k|                        tokens.emplace_back(ParseToken(
  145|   194k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   194k|                                current_line_number, current_column - current_token.length()));
  147|   194k|                        current_token = std::string_view{};
  148|   194k|                        break;
  149|   738k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 738k, False: 8.10M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|   738k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 595k, False: 142k]
  ------------------
  152|   595k|                        {
  153|   595k|                            current_token =
  154|   595k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|   595k|                            tokens.emplace_back(ParseToken(
  156|   595k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|   595k|                                    current_line_number,
  158|   595k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|   595k|                            current_token = std::string_view{};
  161|   595k|                        }
  162|   142k|                        else
  163|   142k|                        {
  164|       |                            // Orphan colon
  165|   142k|                            token_begin = i;
  166|       |
  167|   142k|                            tokens.emplace_back(Token::Type::Colon,
  168|   142k|                                                source.substr(token_begin.unsafe(), 1),
  169|   142k|                                                current_line_number, current_column);
  170|   142k|                        }
  171|   738k|                        break;
  172|   677k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 677k, False: 8.16M]
  ------------------
  173|   804k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 126k, False: 8.71M]
  ------------------
  174|  1.15M|                    case ')':
  ------------------
  |  Branch (174:21): [True: 346k, False: 8.49M]
  ------------------
  175|  1.15M|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 879k, False: 271k]
  ------------------
  176|   879k|                        {
  177|   879k|                            tokens.emplace_back(ParseToken(
  178|   879k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   879k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   879k|                            current_token = std::string_view{};
  182|   879k|                        }
  183|       |
  184|  1.15M|                        Token::Type type;
  185|  1.15M|                        switch (c)
  186|  1.15M|                        {
  187|   677k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 677k, False: 473k]
  ------------------
  188|   677k|                                type = Token::Type::Comma;
  189|   677k|                                break;
  190|   126k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 126k, False: 1.02M]
  ------------------
  191|   126k|                                type = Token::Type::OpenBracket;
  192|   126k|                                break;
  193|   346k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 346k, False: 804k]
  ------------------
  194|   346k|                                type = Token::Type::ClosingBracket;
  195|   346k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 1.15M]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  1.15M|#endif
  201|  1.15M|                        }
  202|       |
  203|  1.15M|                        token_begin = i;
  204|       |
  205|  1.15M|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  1.15M|                                            current_line_number, current_column);
  207|  1.15M|                        break;
  208|       |
  209|  6.67M|                    default:
  ------------------
  |  Branch (209:21): [True: 6.67M, False: 2.16M]
  ------------------
  210|  6.67M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 2.03M, False: 4.63M]
  ------------------
  211|  2.03M|                        {
  212|  2.03M|                            token_begin = i;
  213|  2.03M|                        }
  214|       |
  215|       |                        // simply append the character
  216|  6.67M|                        current_token =
  217|  6.67M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  8.84M|                }
  219|  8.84M|            }
  220|       |
  221|  9.19M|            current_column += 1u;
  222|  9.19M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  14.7k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 10.9k, False: 3.78k]
  ------------------
  226|  10.9k|        {
  227|  10.9k|            tokens.emplace_back(
  228|  10.9k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  10.9k|                               current_line_number, current_column - current_token.length()));
  230|  10.9k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  14.7k|        tokens.finalize();
  234|       |
  235|  14.7k|        return tokens;
  236|  14.7k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  2.05M|    {
   11|  2.05M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 21.9k, False: 2.03M]
  |  Branch (11:35): [True: 12.4k, False: 9.51k]
  ------------------
   12|  12.4k|        {
   13|  12.4k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  12.4k|            if (number)
  ------------------
  |  Branch (15:17): [True: 5.63k, False: 6.81k]
  ------------------
   16|  5.63k|            {
   17|  5.63k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  5.63k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  5.63k|            }
   20|       |
   21|  6.81k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  12.4k|        }
   23|       |
   24|  2.04M|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 9.22k, False: 2.03M]
  |  Branch (24:35): [True: 8.12k, False: 2.02M]
  ------------------
   25|  17.3k|        {
   26|  17.3k|            return {Token::Type::Comment, token, line_number, column};
   27|  17.3k|        }
   28|       |
   29|  2.02M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 41.3k, False: 1.98M]
  ------------------
   30|  41.3k|        {
   31|  41.3k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  41.3k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  41.3k|        }
   34|       |
   35|  1.98M|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 7.77k, False: 1.97M]
  ------------------
   36|  7.77k|        {
   37|  7.77k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  7.77k|        }
   39|       |
   40|  1.97M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 30.7k, False: 1.94M]
  ------------------
   41|  30.7k|        {
   42|  30.7k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  30.7k|                    static_cast<std::uint32_t>(id)};
   44|  30.7k|        }
   45|       |
   46|  1.94M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 24.9k, False: 1.92M]
  ------------------
   47|  24.9k|        {
   48|  24.9k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  24.9k|                    static_cast<std::uint32_t>(id)};
   50|  24.9k|        }
   51|       |
   52|  1.92M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 475k, False: 1.44M]
  ------------------
   53|   475k|        {
   54|   475k|            return {Token::Type::OpCode, token, line_number, column,
   55|   475k|                    static_cast<std::uint32_t>(opcode)};
   56|   475k|        }
   57|       |
   58|  1.44M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|  1.92M|    }

LLVMFuzzerTestOneInput:
   12|  14.7k|{
   13|  14.7k|    static dlx::Processor processor;
   14|       |
   15|  14.7k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   16|       |
   17|       |    // Parse it
   18|  14.7k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  14.7k|    processor.ClearRegisters();
   22|  14.7k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  14.7k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 1.03k, False: 13.7k]
  ------------------
   26|  1.03k|    {
   27|  1.03k|        processor.ExecuteCurrentProgram();
   28|  1.03k|    }
   29|       |
   30|  14.7k|    return 0;
   31|  14.7k|}


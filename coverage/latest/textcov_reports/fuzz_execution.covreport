_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   107k|        {
  169|   107k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   107k|            switch (index.unsafe())
  172|   107k|            {
  173|  48.3k|                case 0:
  ------------------
  |  Branch (173:17): [True: 48.3k, False: 58.8k]
  ------------------
  174|  48.3k|                    return m_Arg1Type;
  175|       |
  176|  29.6k|                case 1:
  ------------------
  |  Branch (176:17): [True: 29.6k, False: 77.5k]
  ------------------
  177|  29.6k|                    return m_Arg2Type;
  178|       |
  179|  29.2k|                case 2:
  ------------------
  |  Branch (179:17): [True: 29.2k, False: 77.9k]
  ------------------
  180|  29.2k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 107k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   107k|#endif
  187|   107k|            }
  188|   107k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  29.2k|        {
  195|  29.2k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  29.2k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 28.8k, False: 337]
  ------------------
  199|  28.8k|            {
  200|  28.8k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  28.8k|            }
  202|  29.2k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 13.8k, False: 15.3k]
  ------------------
  203|  13.8k|            {
  204|  13.8k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  13.8k|            }
  206|  29.2k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 6.49k, False: 22.7k]
  ------------------
  207|  6.49k|            {
  208|  6.49k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  6.49k|            }
  210|       |
  211|  29.2k|            return number_of_argument_required;
  212|  29.2k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  50.2k|        {
  216|  50.2k|            return m_RegisterAccessType;
  217|  50.2k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  29.2k|        {
  221|  29.2k|            return m_Executor;
  222|  29.2k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   164k|    {
   38|   164k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   164k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   164k|                                         static_cast<underlying_t>(rhs));
   42|   164k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   164k|    {
   55|   164k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   164k|        return static_cast<underlying_t>(type & test) != 0;
   58|   164k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|   152k|    {
   32|   152k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 1.14k, False: 151k]
  ------------------
   33|  1.14k|        {
   34|  1.14k|            return true;
   35|  1.14k|        }
   36|       |
   37|   151k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 2.07k, False: 149k]
  ------------------
   38|  2.07k|        {
   39|  2.07k|            return true;
   40|  2.07k|        }
   41|       |
   42|   149k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 17.6k, False: 131k]
  ------------------
   43|  17.6k|        {
   44|  17.6k|            return true;
   45|  17.6k|        }
   46|       |
   47|   131k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 302, False: 131k]
  ------------------
   48|    302|        {
   49|    302|            return true;
   50|    302|        }
   51|       |
   52|   131k|        return false;
   53|   131k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|   131k|    {
   57|   131k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 131k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|   131k|        const char first_char = token.at(0);
   63|       |
   64|   131k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 25.0k, False: 106k]
  ------------------
   65|  25.0k|        {
   66|  25.0k|            return phi::is_alpha(first_char);
   67|  25.0k|        }
   68|       |
   69|   106k|        phi::boolean just_under_scores = (first_char == '_');
   70|   106k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 38.0k, False: 68.4k]
  |  Branch (70:15): [True: 67.6k, False: 38.7k]
  |  Branch (70:44): [True: 736, False: 38.0k]
  ------------------
   71|  38.0k|        {
   72|  38.0k|            return false;
   73|  38.0k|        }
   74|       |
   75|   226k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 195k, False: 31.7k]
  ------------------
   76|   195k|        {
   77|   195k|            const char c{token.at(index)};
   78|       |
   79|   195k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 157k, False: 38.1k]
  ------------------
   80|   157k|            {
   81|   157k|                just_under_scores = false;
   82|   157k|            }
   83|  38.1k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 1.48k, False: 36.6k]
  ------------------
   84|  1.48k|            {
   85|  1.48k|                continue;
   86|  1.48k|            }
   87|  36.6k|            else
   88|  36.6k|            {
   89|  36.6k|                return false;
   90|  36.6k|            }
   91|   195k|        }
   92|       |
   93|  31.7k|        return !just_under_scores;
   94|  68.4k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   551k|    {
  101|   551k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 551k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   551k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 94.4k, False: 457k]
  ------------------
  107|  94.4k|        {
  108|  94.4k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 4.65k, False: 89.7k]
  ------------------
  109|  4.65k|            {
  110|  4.65k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  4.65k|            }
  112|       |
  113|  89.7k|            return {};
  114|  94.4k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   457k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 629, False: 456k]
  ------------------
  118|    629|        {
  119|    629|            return {};
  120|    629|        }
  121|       |
  122|   456k|        std::int32_t number{0};
  123|   456k|        phi::boolean is_negative{false};
  124|   456k|        phi::boolean starts_with_zero{false};
  125|   456k|        phi::boolean parsing_binary{false};
  126|   456k|        phi::boolean parsing_octal{false};
  127|   456k|        phi::boolean parsing_hexadecimal{false};
  128|   456k|        phi::boolean parsed_something{false};
  129|   456k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   515k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 511k, False: 3.99k]
  ------------------
  134|   511k|        {
  135|   511k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   511k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 456k, False: 54.3k]
  ------------------
  139|   456k|            {
  140|   456k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 932, False: 455k]
  ------------------
  141|    932|                {
  142|    932|                    continue;
  143|    932|                }
  144|       |
  145|   455k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 17.1k, False: 438k]
  ------------------
  146|  17.1k|                {
  147|  17.1k|                    is_negative = true;
  148|  17.1k|                    continue;
  149|  17.1k|                }
  150|       |
  151|   438k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 8.13k, False: 430k]
  ------------------
  152|  8.13k|                {
  153|  8.13k|                    starts_with_zero = true;
  154|  8.13k|                    continue;
  155|  8.13k|                }
  156|       |
  157|   430k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 967, False: 429k]
  ------------------
  158|    967|                {
  159|    967|                    return {};
  160|    967|                }
  161|   430k|            }
  162|       |
  163|       |            // Second character
  164|   484k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 35.8k, False: 448k]
  ------------------
  165|  35.8k|            {
  166|  35.8k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 8.13k, False: 27.6k]
  ------------------
  167|  8.13k|                {
  168|       |                    // Binary
  169|  8.13k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 884, False: 7.24k]
  |  Branch (169:37): [True: 136, False: 7.11k]
  ------------------
  170|  1.02k|                    {
  171|  1.02k|                        parsing_binary = true;
  172|  1.02k|                        continue;
  173|  1.02k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  7.11k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 582, False: 6.52k]
  |  Branch (176:37): [True: 861, False: 5.66k]
  ------------------
  177|  1.44k|                    {
  178|  1.44k|                        parsing_hexadecimal = true;
  179|  1.44k|                        continue;
  180|  1.44k|                    }
  181|       |
  182|       |                    // Octal
  183|  5.66k|                    parsing_octal = true;
  184|  5.66k|                }
  185|  35.8k|            }
  186|       |
  187|       |            // Handle seperators
  188|   481k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 834, False: 480k]
  ------------------
  189|    834|            {
  190|    834|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 250, False: 584]
  ------------------
  191|    250|                {
  192|    250|                    return {};
  193|    250|                }
  194|       |
  195|    584|                parsed_separator = true;
  196|    584|                continue;
  197|    834|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   480k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 20.4k, False: 460k]
  |  Branch (200:32): [True: 149, False: 20.3k]
  ------------------
  201|    149|            {
  202|       |                // Would underflow
  203|    149|                return {};
  204|    149|            }
  205|   480k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 460k, False: 20.3k]
  |  Branch (205:17): [True: 534, False: 480k]
  |  Branch (205:33): [True: 534, False: 459k]
  ------------------
  206|    534|            {
  207|       |                // Would overflow
  208|    534|                return {};
  209|    534|            }
  210|       |
  211|   480k|            parsed_separator = false;
  212|   480k|            parsed_something = true;
  213|       |
  214|   480k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 1.82k, False: 478k]
  ------------------
  215|  1.82k|            {
  216|  1.82k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 643, False: 1.18k]
  ------------------
  217|    643|                {
  218|    643|                    return {};
  219|    643|                }
  220|       |
  221|  1.18k|                number <<= 1;
  222|  1.18k|                number |= (c - '0');
  223|  1.18k|            }
  224|   478k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 10.0k, False: 468k]
  ------------------
  225|  10.0k|            {
  226|  10.0k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 4.47k, False: 5.60k]
  ------------------
  227|  4.47k|                {
  228|  4.47k|                    return {};
  229|  4.47k|                }
  230|       |
  231|  5.60k|                number <<= 3;
  232|  5.60k|                number |= (c - '0');
  233|  5.60k|            }
  234|   468k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 3.02k, False: 465k]
  ------------------
  235|  3.02k|            {
  236|  3.02k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 1.39k, False: 1.63k]
  ------------------
  237|  1.39k|                {
  238|  1.39k|                    return {};
  239|  1.39k|                }
  240|       |
  241|  1.63k|                number <<= 4;
  242|  1.63k|                number |= phi::hex_digit_value(c).unsafe();
  243|  1.63k|            }
  244|   465k|            else
  245|   465k|            {
  246|   465k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 443k, False: 21.4k]
  ------------------
  247|   443k|                {
  248|   443k|                    return {};
  249|   443k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  21.4k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 13.0k, False: 8.35k]
  |  Branch (252:36): [True: 822, False: 12.2k]
  ------------------
  253|    822|                {
  254|    822|                    return {};
  255|    822|                }
  256|       |
  257|  20.6k|                number *= 10;
  258|  20.6k|                number += (c - '0');
  259|  20.6k|            }
  260|   480k|        }
  261|       |
  262|  3.99k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 3.61k, False: 388]
  ------------------
  263|  3.61k|        {
  264|       |            // Check for over/underflow
  265|  3.61k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 1.60k, False: 2.00k]
  |  Branch (265:32): [True: 267, False: 1.34k]
  ------------------
  266|    267|            {
  267|       |                // Would underflow
  268|    267|                return {};
  269|    267|            }
  270|  3.34k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 2.00k, False: 1.34k]
  |  Branch (270:17): [True: 149, False: 3.19k]
  |  Branch (270:33): [True: 149, False: 1.85k]
  ------------------
  271|    149|            {
  272|       |                // Would overflow
  273|    149|                return {};
  274|    149|            }
  275|       |
  276|  3.19k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 1.34k, False: 1.85k]
  ------------------
  277|  1.34k|            {
  278|  1.34k|                return static_cast<std::int16_t>(-number);
  279|  1.34k|            }
  280|       |
  281|  1.85k|            return static_cast<std::int16_t>(number);
  282|  3.19k|        }
  283|       |
  284|    388|        return {};
  285|  3.99k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  32.3k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  32.3k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 1.28M, False: 0]
  ------------------
   64|  1.28M|            {
   65|  1.28M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 32.3k, False: 1.25M]
  ------------------
   66|  32.3k|                {
   67|  32.3k|                    return &token;
   68|  32.3k|                }
   69|  1.28M|            }
   70|       |
   71|      0|            return nullptr;
   72|  32.3k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   263k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   263k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   263k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   556k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   556k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   556k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|   362k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   362k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   362k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|   267k|    {
   11|   267k|        m_Value = val;
   12|   267k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|     14|    {
   16|     14|        return m_Value;
   17|     14|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   18|  29.2k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   23|  3.30k|    {
   24|  3.30k|        PHI_ASSERT(argument_number < 3u);
   25|       |
   26|  3.30k|        switch (argument_number.unsafe())
   27|  3.30k|        {
   28|  3.15k|            case 0u:
  ------------------
  |  Branch (28:13): [True: 3.15k, False: 141]
  ------------------
   29|  3.15k|                m_Arg1 = argument;
   30|  3.15k|                break;
   31|    137|            case 1u:
  ------------------
  |  Branch (31:13): [True: 137, False: 3.16k]
  ------------------
   32|    137|                m_Arg2 = argument;
   33|    137|                break;
   34|      4|            case 2u:
  ------------------
  |  Branch (34:13): [True: 4, False: 3.29k]
  ------------------
   35|      4|                m_Arg3 = argument;
   36|      4|                break;
   37|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   38|      0|            default:
  ------------------
  |  Branch (38:13): [True: 0, False: 3.30k]
  ------------------
   39|      0|                PHI_ASSERT_NOT_REACHED();
   40|  3.30k|#endif
   41|  3.30k|        }
   42|  3.30k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   82|  50.2k|    {
   83|  50.2k|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   84|  50.2k|    }
_ZNK3dlx11Instruction7GetInfoEv:
   87|  50.2k|    {
   88|  50.2k|        return m_Info;
   89|  50.2k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   23|  90.9k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   26|   301k|    {
   27|   301k|        return m_Type;
   28|   301k|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  10.0k|    {
   78|  10.0k|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  10.0k|        return register_int;
   81|  10.0k|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   85|     12|    {
   86|     12|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   87|       |
   88|     12|        return register_float;
   89|     12|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  109|  40.0k|    {
  110|  40.0k|        PHI_ASSERT(m_Type == ArgumentType::Label);
  111|       |
  112|  40.0k|        return label;
  113|  40.0k|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  173|    781|    {
  174|    781|        InstructionArgument arg;
  175|    781|        arg.m_Type                   = ArgumentType::IntRegister;
  176|    781|        arg.register_int.register_id = id;
  177|    781|        return arg;
  178|    781|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  182|    380|    {
  183|    380|        InstructionArgument arg;
  184|    380|        arg.m_Type                     = ArgumentType::FloatRegister;
  185|    380|        arg.register_float.register_id = id;
  186|    380|        return arg;
  187|    380|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  191|     43|    {
  192|     43|        InstructionArgument arg;
  193|     43|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  194|     43|        arg.immediate_value.signed_value = value;
  195|     43|        return arg;
  196|     43|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  210|  2.09k|    {
  211|  2.09k|        InstructionArgument arg;
  212|  2.09k|        arg.m_Type           = ArgumentType::Label;
  213|  2.09k|        arg.label.label_name = label_name;
  214|  2.09k|        return arg;
  215|  2.09k|    }

_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  516|      2|        {
  517|      2|            const auto& dest_reg = arg1.AsRegisterInt();
  518|      2|            const auto& lhs_reg  = arg2.AsRegisterInt();
  519|      2|            const auto& rhs_reg  = arg3.AsRegisterInt();
  520|       |
  521|      2|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  522|      2|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  523|       |
  524|      2|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  525|      2|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  541|      1|        {
  542|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  543|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  544|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  545|       |
  546|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  547|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  548|       |
  549|      1|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  550|      1|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  931|      1|        {
  932|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  933|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  934|       |
  935|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  936|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  937|       |
  938|      1|            const phi::boolean new_value = (lhs_value < rhs_value);
  939|       |
  940|      1|            processor.SetFPSRValue(new_value);
  941|      1|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  945|      3|        {
  946|      3|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  947|      3|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  948|       |
  949|      3|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  950|      3|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  951|       |
  952|      3|            const phi::boolean new_value = (lhs_value < rhs_value);
  953|       |
  954|      3|            processor.SetFPSRValue(new_value);
  955|      3|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1017|      1|        {
 1018|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1019|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1020|       |
 1021|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1022|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1023|       |
 1024|      1|            const phi::boolean new_value = (lhs_value > rhs_value);
 1025|       |
 1026|      1|            processor.SetFPSRValue(new_value);
 1027|      1|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1031|      1|        {
 1032|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1033|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1034|       |
 1035|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1036|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1037|       |
 1038|      1|            const phi::boolean new_value = (lhs_value > rhs_value);
 1039|       |
 1040|      1|            processor.SetFPSRValue(new_value);
 1041|      1|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1417|      1|        {
 1418|      1|            const auto& jump_label = arg1.AsLabel();
 1419|       |
 1420|      1|            phi::boolean test_value = processor.GetFPSRValue();
 1421|       |
 1422|      1|            if (test_value)
  ------------------
  |  Branch (1422:17): [True: 0, False: 1]
  ------------------
 1423|      0|            {
 1424|      0|                JumpToLabel(processor, jump_label.label_name);
 1425|      0|            }
 1426|      1|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1430|      2|        {
 1431|      2|            const auto& jump_label = arg1.AsLabel();
 1432|       |
 1433|      2|            phi::boolean test_value = processor.GetFPSRValue();
 1434|       |
 1435|      2|            if (!test_value)
  ------------------
  |  Branch (1435:17): [True: 2, False: 0]
  ------------------
 1436|      2|            {
 1437|      2|                JumpToLabel(processor, jump_label.label_name);
 1438|      2|            }
 1439|      2|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1443|  40.0k|        {
 1444|  40.0k|            const auto& jump_label = arg1.AsLabel();
 1445|       |
 1446|  40.0k|            JumpToLabel(processor, jump_label.label_name);
 1447|  40.0k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1451|  10.0k|        {
 1452|  10.0k|            const auto& jump_register = arg1.AsRegisterInt();
 1453|       |
 1454|  10.0k|            JumpToRegister(processor, jump_register.register_id);
 1455|  10.0k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1459|      2|        {
 1460|      2|            const auto& jump_label = arg1.AsLabel();
 1461|       |
 1462|      2|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1463|      2|                                                  processor.GetNextProgramCounter());
 1464|       |
 1465|      2|            JumpToLabel(processor, jump_label.label_name);
 1466|      2|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2078|      3|        {
 2079|      3|            processor.Raise(Exception::Halt);
 2080|      3|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2084|     97|        {
 2085|       |            /* Do nothing */
 2086|     97|        }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  129|      2|    {
  130|      2|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  131|      2|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  132|       |
  133|       |        // Check for underflow
  134|      2|        if (value < min)
  ------------------
  |  Branch (134:13): [True: 0, False: 2]
  ------------------
  135|      0|        {
  136|      0|            processor.Raise(Exception::Underflow);
  137|       |
  138|      0|            value = max + (value % (min - 1));
  139|      0|        }
  140|       |        // Check for overflow
  141|      2|        else if (value > max)
  ------------------
  |  Branch (141:18): [True: 0, False: 2]
  ------------------
  142|      0|        {
  143|      0|            processor.Raise(Exception::Overflow);
  144|       |
  145|      0|            value = min + (value % (max + 1));
  146|      0|        }
  147|       |
  148|      2|        PHI_ASSERT(value >= min);
  149|      2|        PHI_ASSERT(value <= max);
  150|       |
  151|      2|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  152|      2|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  156|      1|    {
  157|      1|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  158|       |
  159|       |        // Check for overflow
  160|      1|        if (value > max)
  ------------------
  |  Branch (160:13): [True: 0, False: 1]
  ------------------
  161|      0|        {
  162|      0|            processor.Raise(Exception::Overflow);
  163|       |
  164|      0|            value %= max + 1u;
  165|      0|        }
  166|       |
  167|      1|        PHI_ASSERT(value <= max);
  168|       |
  169|      1|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  170|      1|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  217|      2|    {
  218|      2|        phi::i64 res = phi::i64(lhs) * rhs;
  219|       |
  220|      2|        SafeWriteInteger(processor, dest_reg, res);
  221|      2|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  225|      1|    {
  226|      1|        phi::u64 res = phi::u64(lhs) * rhs;
  227|       |
  228|      1|        SafeWriteInteger(processor, dest_reg, res);
  229|      1|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|  40.0k|    {
   39|       |        // Lookup the label
   40|  40.0k|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|  40.0k|        PHI_ASSERT(program != nullptr);
   42|  40.0k|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|  40.0k|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 95, False: 40.0k]
  ------------------
   45|     95|        {
   46|     95|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|     95|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|     95|            processor.Raise(Exception::UnknownLabel);
   48|     95|            return;
   49|     95|        }
   50|       |
   51|  40.0k|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|  40.0k|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|  40.0k|        processor.SetNextProgramCounter(jump_point);
   56|  40.0k|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|  10.0k|    {
   60|  10.0k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|  10.0k|        phi::u32 max_address =
   63|  10.0k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|  10.0k|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 0, False: 10.0k]
  ------------------
   65|      0|        {
   66|      0|            processor.Raise(Exception::AddressOutOfBounds);
   67|      0|            return;
   68|      0|        }
   69|       |
   70|  10.0k|        processor.SetNextProgramCounter(address.unsafe());
   71|  10.0k|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  50.2k|    {
   12|  50.2k|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  50.2k|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  50.2k|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  50.2k|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  50.2k|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  50.2k|                   "Unexpected argument type for arg1");
   22|  50.2k|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  50.2k|                   "Unexpected argument type for arg2");
   24|  50.2k|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  50.2k|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  50.2k|        m_Executor(processor, arg1, arg2, arg3);
   29|  50.2k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  29.2k|    {
  453|  29.2k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  29.2k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|   267k|    {
   17|   267k|        m_ValueSigned = val;
   18|   267k|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|      3|    {
   22|      3|        m_ValueUnsigned = val;
   23|      3|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|      4|    {
   27|      4|        return m_ValueSigned;
   28|      4|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  10.0k|    {
   32|  10.0k|        return m_ValueUnsigned;
   33|  10.0k|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|      5|    {
   37|      5|        return m_IsReadOnly;
   38|      5|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   14|      1|    {
   15|      1|        m_Values.resize(starting_size.unsafe());
   16|      1|    }
_ZN3dlx11MemoryBlock5ClearEv:
  255|  8.34k|    {
  256|  8.34k|        for (auto& val : m_Values)
  ------------------
  |  Branch (256:24): [True: 8.34M, False: 8.34k]
  ------------------
  257|  8.34M|        {
  258|  8.34M|            val.signed_value = 0;
  259|  8.34M|        }
  260|  8.34k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   686k|    {
   24|   686k|        switch (token.length())
   25|   686k|        {
   26|       |            // 1 character OpCodes
   27|   114k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 114k, False: 571k]
  ------------------
   28|   114k|                char c1 = token[0];
   29|   114k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 18.9k, False: 95.8k]
  ------------------
   30|  18.9k|                {
   31|  18.9k|                    return OpCode::J;
   32|  18.9k|                }
   33|  95.8k|                break;
   34|   114k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|   116k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 116k, False: 570k]
  ------------------
   38|   116k|                char c1 = token[0];
   39|   116k|                char c2 = token[1];
   40|       |
   41|   116k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 89.5k, False: 26.4k]
  ------------------
   42|   116k|                {
   43|  3.10k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 3.10k, False: 112k]
  ------------------
   44|  5.06k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 1.96k, False: 114k]
  ------------------
   45|  5.06k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 829, False: 4.24k]
  ------------------
   46|    829|                        {
   47|    829|                            return OpCode::JR;
   48|    829|                        }
   49|  4.24k|                        break;
   50|       |
   51|  4.36k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 4.36k, False: 111k]
  ------------------
   52|  7.84k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 3.47k, False: 112k]
  ------------------
   53|  7.84k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 3.81k, False: 4.03k]
  ------------------
   54|  7.84k|                        {
   55|    288|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 288, False: 7.55k]
  ------------------
   56|    576|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 288, False: 7.55k]
  ------------------
   57|    576|                                return OpCode::LB;
   58|    139|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 139, False: 7.70k]
  ------------------
   59|    307|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 168, False: 7.67k]
  ------------------
   60|    307|                                return OpCode::LD;
   61|    183|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 183, False: 7.65k]
  ------------------
   62|    561|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 378, False: 7.46k]
  ------------------
   63|    561|                                return OpCode::LF;
   64|  1.11k|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 1.11k, False: 6.72k]
  ------------------
   65|  1.27k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 156, False: 7.68k]
  ------------------
   66|  1.27k|                                return OpCode::LH;
   67|    924|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 924, False: 6.91k]
  ------------------
   68|  1.31k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 389, False: 7.45k]
  ------------------
   69|  1.31k|                                return OpCode::LW;
   70|  7.84k|                        }
   71|  3.81k|                        break;
   72|  3.81k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 1.75k, False: 114k]
  ------------------
   73|  3.79k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 2.03k, False: 113k]
  ------------------
   74|  3.79k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 1.02k, False: 2.77k]
  ------------------
   75|  1.02k|                        {
   76|  1.02k|                            return OpCode::OR;
   77|  1.02k|                        }
   78|  2.77k|                        break;
   79|  7.05k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 7.05k, False: 108k]
  ------------------
   80|  9.78k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 2.72k, False: 113k]
  ------------------
   81|  9.78k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 3.54k, False: 6.24k]
  ------------------
   82|  9.78k|                        {
   83|    451|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 451, False: 9.33k]
  ------------------
   84|    812|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 361, False: 9.42k]
  ------------------
   85|    812|                                return OpCode::SB;
   86|    167|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 167, False: 9.61k]
  ------------------
   87|  1.07k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 912, False: 8.86k]
  ------------------
   88|  1.07k|                                return OpCode::SD;
   89|    492|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 492, False: 9.28k]
  ------------------
   90|  2.81k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 2.32k, False: 7.45k]
  ------------------
   91|  2.81k|                                return OpCode::SF;
   92|    822|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 822, False: 8.95k]
  ------------------
   93|  1.16k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 347, False: 9.43k]
  ------------------
   94|  1.16k|                                return OpCode::SH;
   95|    259|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 259, False: 9.52k]
  ------------------
   96|    366|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 107, False: 9.67k]
  ------------------
   97|    366|                                return OpCode::SW;
   98|  9.78k|                        }
   99|  3.54k|                        break;
  100|   116k|                }
  101|   103k|                break;
  102|   116k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   117k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 117k, False: 568k]
  ------------------
  106|   117k|                char c1 = token[0];
  107|   117k|                char c2 = token[1];
  108|   117k|                char c3 = token[2];
  109|       |
  110|   117k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 62.4k, False: 55.5k]
  ------------------
  111|   117k|                {
  112|  1.30k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 1.30k, False: 116k]
  ------------------
  113|  3.62k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 2.31k, False: 115k]
  ------------------
  114|  3.62k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 1.28k, False: 2.33k]
  |  Branch (114:29): [True: 774, False: 2.84k]
  |  Branch (114:45): [True: 774, False: 513]
  ------------------
  115|    774|                        {
  116|    774|                            return OpCode::ADD;
  117|    774|                        }
  118|  2.84k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 1.18k, False: 1.66k]
  |  Branch (118:34): [True: 678, False: 2.17k]
  |  Branch (118:50): [True: 678, False: 504]
  ------------------
  119|    678|                        {
  120|    678|                            return OpCode::AND;
  121|    678|                        }
  122|  2.17k|                        break;
  123|       |
  124|  2.17k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 1.15k, False: 116k]
  ------------------
  125|  2.61k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 1.46k, False: 116k]
  ------------------
  126|  2.61k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 1.20k, False: 1.41k]
  |  Branch (126:29): [True: 411, False: 2.20k]
  |  Branch (126:45): [True: 411, False: 795]
  ------------------
  127|    411|                        {
  128|    411|                            return OpCode::DIV;
  129|    411|                        }
  130|  2.20k|                        break;
  131|       |
  132|  2.20k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 1.10k, False: 116k]
  ------------------
  133|  2.78k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 1.68k, False: 116k]
  ------------------
  134|  2.78k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 2.00k, False: 783]
  ------------------
  135|  2.00k|                        {
  136|  2.00k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 651, False: 1.35k]
  ------------------
  137|    651|                            {
  138|    651|                                return OpCode::EQD;
  139|    651|                            }
  140|  1.35k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 437, False: 913]
  ------------------
  141|    437|                            {
  142|    437|                                return OpCode::EQF;
  143|    437|                            }
  144|  2.00k|                        }
  145|  1.69k|                        break;
  146|       |
  147|  1.69k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 1.40k, False: 116k]
  ------------------
  148|  3.37k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 1.96k, False: 116k]
  ------------------
  149|  3.37k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 1.38k, False: 1.98k]
  ------------------
  150|  1.38k|                        {
  151|  1.38k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 460, False: 927]
  ------------------
  152|    460|                            {
  153|    460|                                return OpCode::GED;
  154|    460|                            }
  155|    927|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 399, False: 528]
  ------------------
  156|    399|                            {
  157|    399|                                return OpCode::GEF;
  158|    399|                            }
  159|  1.38k|                        }
  160|  1.98k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 1.53k, False: 449]
  ------------------
  161|  1.53k|                        {
  162|  1.53k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 493, False: 1.04k]
  ------------------
  163|    493|                            {
  164|    493|                                return OpCode::GTD;
  165|    493|                            }
  166|  1.04k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 320, False: 722]
  ------------------
  167|    320|                            {
  168|    320|                                return OpCode::GTF;
  169|    320|                            }
  170|  1.04k|                        }
  171|  1.69k|                        break;
  172|       |
  173|  2.37k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 2.37k, False: 115k]
  ------------------
  174|  2.88k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 511, False: 117k]
  ------------------
  175|  2.88k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 1.28k, False: 1.60k]
  |  Branch (175:29): [True: 335, False: 2.55k]
  |  Branch (175:45): [True: 335, False: 952]
  ------------------
  176|    335|                        {
  177|    335|                            return OpCode::JAL;
  178|    335|                        }
  179|  2.55k|                        break;
  180|       |
  181|  7.38k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 7.38k, False: 110k]
  ------------------
  182|  11.6k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 4.25k, False: 113k]
  ------------------
  183|  11.6k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 2.86k, False: 8.77k]
  ------------------
  184|  11.6k|                        {
  185|    932|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 932, False: 10.7k]
  ------------------
  186|  2.48k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 1.54k, False: 10.0k]
  ------------------
  187|  2.48k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 716, False: 1.76k]
  ------------------
  188|    716|                                {
  189|    716|                                    return OpCode::LBU;
  190|    716|                                }
  191|  1.76k|                                break;
  192|       |
  193|  1.76k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 397, False: 11.2k]
  ------------------
  194|  1.13k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 740, False: 10.8k]
  ------------------
  195|  1.13k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 272, False: 865]
  ------------------
  196|    272|                                {
  197|    272|                                    return OpCode::LED;
  198|    272|                                }
  199|    865|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 373, False: 492]
  ------------------
  200|    373|                                {
  201|    373|                                    return OpCode::LEF;
  202|    373|                                }
  203|    492|                                break;
  204|       |
  205|  1.77k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 1.77k, False: 9.85k]
  ------------------
  206|  3.09k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 1.31k, False: 10.3k]
  ------------------
  207|  3.09k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 532, False: 2.55k]
  ------------------
  208|    532|                                {
  209|    532|                                    return OpCode::LHI;
  210|    532|                                }
  211|  2.55k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 886, False: 1.67k]
  ------------------
  212|    886|                                {
  213|    886|                                    return OpCode::LHU;
  214|    886|                                }
  215|  1.67k|                                break;
  216|       |
  217|  1.67k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 471, False: 11.1k]
  ------------------
  218|  1.15k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 679, False: 10.9k]
  ------------------
  219|  1.15k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 554, False: 596]
  ------------------
  220|    554|                                {
  221|    554|                                    return OpCode::LTD;
  222|    554|                                }
  223|    596|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 313, False: 283]
  ------------------
  224|    313|                                {
  225|    313|                                    return OpCode::LTF;
  226|    313|                                }
  227|    283|                                break;
  228|       |
  229|    603|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 603, False: 11.0k]
  ------------------
  230|    913|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 310, False: 11.3k]
  ------------------
  231|    913|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 257, False: 656]
  ------------------
  232|    257|                                {
  233|    257|                                    return OpCode::LWU;
  234|    257|                                }
  235|    656|                                break;
  236|  11.6k|                        }
  237|  7.73k|                        break;
  238|       |
  239|  7.73k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 2.61k, False: 115k]
  ------------------
  240|  3.69k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 1.08k, False: 116k]
  ------------------
  241|  3.69k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 1.88k, False: 1.80k]
  ------------------
  242|  1.88k|                        {
  243|  1.88k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 772, False: 1.11k]
  ------------------
  244|    772|                            {
  245|    772|                                return OpCode::NED;
  246|    772|                            }
  247|  1.11k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 570, False: 542]
  ------------------
  248|    570|                            {
  249|    570|                                return OpCode::NEF;
  250|    570|                            }
  251|  1.88k|                        }
  252|  1.80k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 1.03k, False: 772]
  |  Branch (252:34): [True: 605, False: 1.20k]
  |  Branch (252:50): [True: 605, False: 429]
  ------------------
  253|    605|                        {
  254|    605|                            return OpCode::NOP;
  255|    605|                        }
  256|       |
  257|  1.74k|                        break;
  258|       |
  259|  1.74k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 939, False: 117k]
  ------------------
  260|  2.97k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 2.03k, False: 115k]
  ------------------
  261|  2.97k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 1.94k, False: 1.02k]
  |  Branch (261:29): [True: 369, False: 2.60k]
  |  Branch (261:45): [True: 369, False: 1.57k]
  ------------------
  262|    369|                        {
  263|    369|                            return OpCode::ORI;
  264|    369|                        }
  265|  2.60k|                        break;
  266|       |
  267|  11.7k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 11.7k, False: 106k]
  ------------------
  268|  20.2k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 8.46k, False: 109k]
  ------------------
  269|  20.2k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 5.14k, False: 15.0k]
  ------------------
  270|  20.2k|                        {
  271|  1.00k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 1.00k, False: 19.2k]
  ------------------
  272|  2.32k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 1.32k, False: 18.8k]
  ------------------
  273|  2.32k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 1.58k, False: 739]
  ------------------
  274|  1.58k|                                {
  275|  1.58k|                                    return OpCode::SBU;
  276|  1.58k|                                }
  277|    739|                                break;
  278|       |
  279|    997|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 997, False: 19.2k]
  ------------------
  280|  1.75k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 757, False: 19.4k]
  ------------------
  281|  1.75k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 577, False: 1.17k]
  ------------------
  282|    577|                                {
  283|    577|                                    return OpCode::SEQ;
  284|    577|                                }
  285|  1.17k|                                break;
  286|       |
  287|  1.17k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 689, False: 19.5k]
  ------------------
  288|  1.56k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 872, False: 19.3k]
  ------------------
  289|  1.56k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 500, False: 1.06k]
  ------------------
  290|    500|                                {
  291|    500|                                    return OpCode::SGE;
  292|    500|                                }
  293|  1.06k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 452, False: 609]
  ------------------
  294|    452|                                {
  295|    452|                                    return OpCode::SGT;
  296|    452|                                }
  297|    609|                                break;
  298|       |
  299|    853|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 853, False: 19.3k]
  ------------------
  300|  1.35k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 499, False: 19.7k]
  ------------------
  301|  1.35k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 252, False: 1.10k]
  ------------------
  302|    252|                                {
  303|    252|                                    return OpCode::SHU;
  304|    252|                                }
  305|  1.10k|                                break;
  306|       |
  307|  2.05k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 2.05k, False: 18.1k]
  ------------------
  308|  2.73k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 681, False: 19.5k]
  ------------------
  309|  2.73k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 908, False: 1.82k]
  ------------------
  310|  2.73k|                                {
  311|    176|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 176, False: 2.55k]
  ------------------
  312|    342|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 166, False: 2.56k]
  ------------------
  313|    342|                                        return OpCode::SLA;
  314|       |
  315|    194|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 194, False: 2.53k]
  ------------------
  316|    475|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 281, False: 2.45k]
  ------------------
  317|    475|                                        return OpCode::SLE;
  318|       |
  319|    214|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 214, False: 2.51k]
  ------------------
  320|    407|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 193, False: 2.53k]
  ------------------
  321|    407|                                        return OpCode::SLL;
  322|       |
  323|    176|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 176, False: 2.55k]
  ------------------
  324|    600|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 424, False: 2.30k]
  ------------------
  325|    600|                                        return OpCode::SLT;
  326|  2.73k|                                }
  327|    908|                                break;
  328|       |
  329|    908|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 684, False: 19.5k]
  ------------------
  330|    822|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 138, False: 20.0k]
  ------------------
  331|    822|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 490, False: 332]
  ------------------
  332|    490|                                {
  333|    490|                                    return OpCode::SNE;
  334|    490|                                }
  335|    332|                                break;
  336|       |
  337|  1.03k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 1.03k, False: 19.1k]
  ------------------
  338|  1.82k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 792, False: 19.4k]
  ------------------
  339|  1.82k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 595, False: 1.23k]
  ------------------
  340|    595|                                {
  341|    595|                                    return OpCode::SRA;
  342|    595|                                }
  343|  1.23k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 503, False: 727]
  ------------------
  344|    503|                                {
  345|    503|                                    return OpCode::SRL;
  346|    503|                                }
  347|    727|                                break;
  348|       |
  349|    727|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 538, False: 19.6k]
  ------------------
  350|  1.59k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 1.06k, False: 19.1k]
  ------------------
  351|  1.59k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 570, False: 1.02k]
  ------------------
  352|    570|                                {
  353|    570|                                    return OpCode::SUB;
  354|    570|                                }
  355|  1.02k|                                break;
  356|       |
  357|  1.02k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 414, False: 19.8k]
  ------------------
  358|  1.10k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 686, False: 19.5k]
  ------------------
  359|  1.10k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 693, False: 407]
  ------------------
  360|    693|                                {
  361|    693|                                    return OpCode::SWU;
  362|    693|                                }
  363|    407|                                break;
  364|  20.2k|                        }
  365|       |
  366|  12.4k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 242, False: 117k]
  ------------------
  367|  13.9k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 1.51k, False: 116k]
  ------------------
  368|  13.9k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 1.23k, False: 12.6k]
  |  Branch (368:29): [True: 482, False: 13.4k]
  |  Branch (368:45): [True: 482, False: 750]
  ------------------
  369|    482|                        {
  370|    482|                            return OpCode::XOR;
  371|    482|                        }
  372|  13.4k|                        break;
  373|   117k|                }
  374|  98.2k|                break;
  375|   117k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   102k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 102k, False: 583k]
  ------------------
  379|   102k|                char c1 = token[0];
  380|   102k|                char c2 = token[1];
  381|   102k|                char c3 = token[2];
  382|   102k|                char c4 = token[3];
  383|       |
  384|   102k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 46.1k, False: 56.4k]
  ------------------
  385|   102k|                {
  386|  1.64k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 1.64k, False: 100k]
  ------------------
  387|  6.70k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 5.06k, False: 97.5k]
  ------------------
  388|  6.70k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 1.77k, False: 4.93k]
  ------------------
  389|  6.70k|                        {
  390|  2.19k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 2.19k, False: 4.51k]
  ------------------
  391|  2.81k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 621, False: 6.08k]
  ------------------
  392|  2.81k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 2.35k, False: 465]
  ------------------
  393|  2.35k|                                {
  394|  2.35k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 585, False: 1.76k]
  ------------------
  395|  2.35k|                                    {
  396|     96|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 96, False: 2.25k]
  ------------------
  397|    378|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 282, False: 2.07k]
  ------------------
  398|    378|                                            return OpCode::ADDD;
  399|       |
  400|    171|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 171, False: 2.18k]
  ------------------
  401|    507|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 336, False: 2.01k]
  ------------------
  402|    507|                                            return OpCode::ADDF;
  403|       |
  404|    291|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 291, False: 2.06k]
  ------------------
  405|    495|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 204, False: 2.14k]
  ------------------
  406|    495|                                            return OpCode::ADDI;
  407|       |
  408|    192|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 192, False: 2.16k]
  ------------------
  409|    387|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 195, False: 2.15k]
  ------------------
  410|    387|                                            return OpCode::ADDU;
  411|  2.35k|                                    }
  412|  2.35k|                                }
  413|  1.05k|                                break;
  414|       |
  415|  1.82k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 1.82k, False: 4.88k]
  ------------------
  416|  2.11k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 294, False: 6.41k]
  ------------------
  417|  2.11k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 1.72k, False: 398]
  |  Branch (417:37): [True: 1.35k, False: 759]
  |  Branch (417:53): [True: 1.35k, False: 361]
  ------------------
  418|  1.35k|                                {
  419|  1.35k|                                    return OpCode::ANDI;
  420|  1.35k|                                }
  421|       |
  422|    759|                                break;
  423|  6.70k|                        }
  424|  3.58k|                        break;
  425|       |
  426|  3.58k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 2.11k, False: 100k]
  ------------------
  427|  4.15k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 2.04k, False: 100k]
  ------------------
  428|  4.15k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 606, False: 3.54k]
  ------------------
  429|  4.15k|                        {
  430|    368|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 368, False: 3.78k]
  ------------------
  431|    570|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 202, False: 3.94k]
  ------------------
  432|    570|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 245, False: 325]
  |  Branch (432:37): [True: 133, False: 437]
  |  Branch (432:53): [True: 133, False: 112]
  ------------------
  433|    133|                                {
  434|    133|                                    return OpCode::BEQZ;
  435|    133|                                }
  436|    437|                                break;
  437|       |
  438|    635|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 635, False: 3.51k]
  ------------------
  439|  1.59k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 957, False: 3.19k]
  ------------------
  440|  1.59k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 790, False: 802]
  ------------------
  441|    790|                                {
  442|    790|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 348, False: 442]
  ------------------
  443|    348|                                    {
  444|    348|                                        return OpCode::BFPF;
  445|    348|                                    }
  446|    442|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 235, False: 207]
  ------------------
  447|    235|                                    {
  448|    235|                                        return OpCode::BFPT;
  449|    235|                                    }
  450|    790|                                }
  451|  1.00k|                                break;
  452|       |
  453|  1.11k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 1.11k, False: 3.03k]
  ------------------
  454|  1.38k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 267, False: 3.88k]
  ------------------
  455|  1.38k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 609, False: 773]
  |  Branch (455:37): [True: 152, False: 1.23k]
  |  Branch (455:53): [True: 152, False: 457]
  ------------------
  456|    152|                                {
  457|    152|                                    return OpCode::BNEZ;
  458|    152|                                }
  459|  4.15k|                        }
  460|  3.28k|                        break;
  461|       |
  462|  3.28k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 2.10k, False: 100k]
  ------------------
  463|  4.54k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 2.44k, False: 100k]
  ------------------
  464|  4.54k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 3.80k, False: 738]
  |  Branch (464:29): [True: 3.09k, False: 1.44k]
  |  Branch (464:45): [True: 3.09k, False: 710]
  ------------------
  465|  3.09k|                        {
  466|  3.09k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 1.45k, False: 1.64k]
  ------------------
  467|  3.09k|                            {
  468|    148|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 148, False: 2.94k]
  ------------------
  469|    280|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 132, False: 2.96k]
  ------------------
  470|    280|                                    return OpCode::DIVD;
  471|       |
  472|    160|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 160, False: 2.93k]
  ------------------
  473|    318|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 158, False: 2.93k]
  ------------------
  474|    318|                                    return OpCode::DIVF;
  475|       |
  476|    171|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 171, False: 2.92k]
  ------------------
  477|    306|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 135, False: 2.96k]
  ------------------
  478|    306|                                    return OpCode::DIVI;
  479|       |
  480|    603|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 603, False: 2.49k]
  ------------------
  481|    736|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 133, False: 2.96k]
  ------------------
  482|    736|                                    return OpCode::DIVU;
  483|  3.09k|                            }
  484|  3.09k|                        }
  485|  2.90k|                        break;
  486|       |
  487|  2.90k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 1.20k, False: 101k]
  ------------------
  488|  2.67k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 1.47k, False: 101k]
  ------------------
  489|  2.67k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 869, False: 1.80k]
  |  Branch (489:29): [True: 252, False: 2.42k]
  |  Branch (489:45): [True: 561, False: 308]
  |  Branch (489:61): [True: 252, False: 309]
  ------------------
  490|    252|                        {
  491|    252|                            return OpCode::HALT;
  492|    252|                        }
  493|  2.42k|                        break;
  494|       |
  495|  2.42k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 1.91k, False: 100k]
  ------------------
  496|  2.57k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 660, False: 101k]
  ------------------
  497|  2.57k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 965, False: 1.60k]
  |  Branch (497:29): [True: 336, False: 2.23k]
  |  Branch (497:45): [True: 747, False: 218]
  |  Branch (497:61): [True: 336, False: 411]
  ------------------
  498|    336|                        {
  499|    336|                            return OpCode::JALR;
  500|    336|                        }
  501|  2.23k|                        break;
  502|       |
  503|  3.25k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 3.25k, False: 99.3k]
  ------------------
  504|  4.49k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 1.24k, False: 101k]
  ------------------
  505|  4.49k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 1.52k, False: 2.97k]
  |  Branch (505:29): [True: 1.02k, False: 3.47k]
  |  Branch (505:45): [True: 1.02k, False: 501]
  ------------------
  506|  1.02k|                        {
  507|  1.02k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 181, False: 842]
  ------------------
  508|    181|                            {
  509|    181|                                return OpCode::MOVD;
  510|    181|                            }
  511|    842|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 441, False: 401]
  ------------------
  512|    441|                            {
  513|    441|                                return OpCode::MOVF;
  514|    441|                            }
  515|  1.02k|                        }
  516|  3.47k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 1.90k, False: 1.56k]
  |  Branch (516:34): [True: 330, False: 3.14k]
  |  Branch (516:50): [True: 851, False: 1.05k]
  |  Branch (516:66): [True: 330, False: 521]
  ------------------
  517|    330|                        {
  518|    330|                            return OpCode::MULT;
  519|    330|                        }
  520|  3.54k|                        break;
  521|       |
  522|  16.1k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 16.1k, False: 86.4k]
  ------------------
  523|  26.0k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 9.87k, False: 92.7k]
  ------------------
  524|  26.0k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 7.37k, False: 18.6k]
  ------------------
  525|  26.0k|                        {
  526|    607|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 607, False: 25.4k]
  ------------------
  527|  1.66k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 1.06k, False: 24.9k]
  ------------------
  528|  1.66k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 1.29k, False: 376]
  ------------------
  529|  1.29k|                                {
  530|  1.29k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 651, False: 642]
  ------------------
  531|    651|                                    {
  532|    651|                                        return OpCode::SEQI;
  533|    651|                                    }
  534|    642|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 291, False: 351]
  ------------------
  535|    291|                                    {
  536|    291|                                        return OpCode::SEQU;
  537|    291|                                    }
  538|  1.29k|                                }
  539|    727|                                break;
  540|       |
  541|    745|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 745, False: 25.3k]
  ------------------
  542|  3.69k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 2.94k, False: 23.1k]
  ------------------
  543|  3.69k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 1.31k, False: 2.38k]
  ------------------
  544|  1.31k|                                {
  545|  1.31k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 265, False: 1.04k]
  ------------------
  546|    265|                                    {
  547|    265|                                        return OpCode::SGEI;
  548|    265|                                    }
  549|  1.04k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 533, False: 515]
  ------------------
  550|    533|                                    {
  551|    533|                                        return OpCode::SGEU;
  552|    533|                                    }
  553|  1.31k|                                }
  554|  2.38k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 1.92k, False: 459]
  ------------------
  555|  1.92k|                                {
  556|  1.92k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 705, False: 1.21k]
  ------------------
  557|    705|                                    {
  558|    705|                                        return OpCode::SGTI;
  559|    705|                                    }
  560|  1.21k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 360, False: 856]
  ------------------
  561|    360|                                    {
  562|    360|                                        return OpCode::SGTU;
  563|    360|                                    }
  564|  1.92k|                                }
  565|  1.83k|                                break;
  566|       |
  567|  4.76k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 4.76k, False: 21.2k]
  ------------------
  568|  6.25k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 1.48k, False: 24.5k]
  ------------------
  569|  6.25k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 1.13k, False: 5.12k]
  ------------------
  570|  6.25k|                                {
  571|    709|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 709, False: 5.54k]
  ------------------
  572|  1.30k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 595, False: 5.65k]
  ------------------
  573|  1.30k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 464, False: 840]
  ------------------
  574|    464|                                        {
  575|    464|                                            return OpCode::SLAI;
  576|    464|                                        }
  577|    840|                                        break;
  578|       |
  579|    840|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 545, False: 5.70k]
  ------------------
  580|  1.18k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 635, False: 5.61k]
  ------------------
  581|  1.18k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 215, False: 965]
  ------------------
  582|    215|                                        {
  583|    215|                                            return OpCode::SLEI;
  584|    215|                                        }
  585|    965|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 354, False: 611]
  ------------------
  586|    354|                                        {
  587|    354|                                            return OpCode::SLEU;
  588|    354|                                        }
  589|    611|                                        break;
  590|       |
  591|    689|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 689, False: 5.56k]
  ------------------
  592|    872|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 183, False: 6.07k]
  ------------------
  593|    872|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 327, False: 545]
  ------------------
  594|    327|                                        {
  595|    327|                                            return OpCode::SLLI;
  596|    327|                                        }
  597|    545|                                        break;
  598|       |
  599|    819|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 819, False: 5.43k]
  ------------------
  600|  1.76k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 948, False: 5.30k]
  ------------------
  601|  1.76k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 509, False: 1.25k]
  ------------------
  602|    509|                                        {
  603|    509|                                            return OpCode::SLTI;
  604|    509|                                        }
  605|  1.25k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 439, False: 819]
  ------------------
  606|    439|                                        {
  607|    439|                                            return OpCode::SLTU;
  608|    439|                                        }
  609|    819|                                        break;
  610|  6.25k|                                }
  611|       |
  612|  4.98k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 1.04k, False: 25.0k]
  ------------------
  613|  5.10k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 121, False: 25.9k]
  ------------------
  614|  5.10k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 1.44k, False: 3.66k]
  ------------------
  615|  1.44k|                                {
  616|  1.44k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 345, False: 1.10k]
  ------------------
  617|    345|                                    {
  618|    345|                                        return OpCode::SNEI;
  619|    345|                                    }
  620|  1.10k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 360, False: 740]
  ------------------
  621|    360|                                    {
  622|    360|                                        return OpCode::SNEU;
  623|    360|                                    }
  624|  1.44k|                                }
  625|  4.40k|                                break;
  626|       |
  627|  4.40k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 1.33k, False: 24.7k]
  ------------------
  628|  2.60k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 1.26k, False: 24.7k]
  ------------------
  629|  2.60k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 642, False: 1.96k]
  |  Branch (629:37): [True: 213, False: 2.39k]
  |  Branch (629:53): [True: 213, False: 429]
  ------------------
  630|    213|                                {
  631|    213|                                    return OpCode::SRAI;
  632|    213|                                }
  633|  2.39k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 1.47k, False: 911]
  |  Branch (633:42): [True: 977, False: 1.41k]
  |  Branch (633:58): [True: 977, False: 502]
  ------------------
  634|    977|                                {
  635|    977|                                    return OpCode::SRLI;
  636|    977|                                }
  637|  1.41k|                                break;
  638|       |
  639|  1.78k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 1.78k, False: 24.2k]
  ------------------
  640|  3.30k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 1.52k, False: 24.5k]
  ------------------
  641|  3.30k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 2.85k, False: 451]
  ------------------
  642|  2.85k|                                {
  643|  2.85k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 1.11k, False: 1.73k]
  ------------------
  644|  2.85k|                                    {
  645|    260|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 260, False: 2.59k]
  ------------------
  646|    399|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 139, False: 2.71k]
  ------------------
  647|    399|                                            return OpCode::SUBD;
  648|       |
  649|    288|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 288, False: 2.56k]
  ------------------
  650|    504|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 216, False: 2.63k]
  ------------------
  651|    504|                                            return OpCode::SUBF;
  652|       |
  653|    254|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 254, False: 2.59k]
  ------------------
  654|    532|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 278, False: 2.57k]
  ------------------
  655|    532|                                            return OpCode::SUBI;
  656|       |
  657|    126|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 126, False: 2.72k]
  ------------------
  658|    299|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 173, False: 2.67k]
  ------------------
  659|    299|                                            return OpCode::SUBU;
  660|  2.85k|                                    }
  661|  2.85k|                                }
  662|  1.56k|                                break;
  663|  26.0k|                        }
  664|  17.3k|                        break;
  665|       |
  666|  17.3k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 2.88k, False: 99.7k]
  ------------------
  667|  3.46k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 577, False: 102k]
  ------------------
  668|  3.46k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 1.65k, False: 1.80k]
  |  Branch (668:29): [True: 649, False: 2.81k]
  |  Branch (668:45): [True: 971, False: 685]
  |  Branch (668:61): [True: 649, False: 322]
  ------------------
  669|    649|                        {
  670|    649|                            return OpCode::TRAP;
  671|    649|                        }
  672|  2.81k|                        break;
  673|  2.81k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 684, False: 101k]
  ------------------
  674|  1.75k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 1.07k, False: 101k]
  ------------------
  675|  1.75k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 1.27k, False: 479]
  |  Branch (675:29): [True: 164, False: 1.59k]
  |  Branch (675:45): [True: 784, False: 495]
  |  Branch (675:61): [True: 164, False: 620]
  ------------------
  676|    164|                        {
  677|    164|                            return OpCode::XORI;
  678|    164|                        }
  679|  1.59k|                        break;
  680|   102k|                }
  681|  85.8k|                break;
  682|   102k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  85.8k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 61.5k, False: 624k]
  ------------------
  686|  61.5k|                char c1 = token[0];
  687|  61.5k|                char c2 = token[1];
  688|  61.5k|                char c3 = token[2];
  689|  61.5k|                char c4 = token[3];
  690|  61.5k|                char c5 = token[4];
  691|       |
  692|  61.5k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 34.2k, False: 27.3k]
  ------------------
  693|  61.5k|                {
  694|    449|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 449, False: 61.1k]
  ------------------
  695|  3.81k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 3.37k, False: 58.2k]
  ------------------
  696|  3.81k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 2.57k, False: 1.24k]
  |  Branch (696:29): [True: 240, False: 3.57k]
  |  Branch (696:45): [True: 2.07k, False: 506]
  |  Branch (696:61): [True: 568, False: 1.50k]
  |  Branch (696:77): [True: 240, False: 328]
  ------------------
  697|    240|                        {
  698|    240|                            return OpCode::ADDUI;
  699|    240|                        }
  700|  3.57k|                        break;
  701|       |
  702|  3.57k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 2.22k, False: 59.3k]
  ------------------
  703|  4.46k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 2.23k, False: 59.3k]
  ------------------
  704|  4.46k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 3.95k, False: 510]
  |  Branch (704:29): [True: 240, False: 4.22k]
  |  Branch (704:45): [True: 3.36k, False: 586]
  |  Branch (704:61): [True: 1.20k, False: 2.16k]
  |  Branch (704:77): [True: 240, False: 961]
  ------------------
  705|    240|                        {
  706|    240|                            return OpCode::DIVUI;
  707|    240|                        }
  708|  4.22k|                        break;
  709|       |
  710|  4.22k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 3.79k, False: 57.7k]
  ------------------
  711|  6.14k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 2.35k, False: 59.2k]
  ------------------
  712|  6.14k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 3.72k, False: 2.42k]
  |  Branch (712:29): [True: 2.22k, False: 3.92k]
  |  Branch (712:45): [True: 3.39k, False: 336]
  |  Branch (712:61): [True: 2.22k, False: 1.16k]
  ------------------
  713|  2.22k|                        {
  714|  2.22k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 261, False: 1.96k]
  ------------------
  715|  2.22k|                            {
  716|    142|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 142, False: 2.08k]
  ------------------
  717|    278|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 136, False: 2.09k]
  ------------------
  718|    278|                                    return OpCode::MULTD;
  719|       |
  720|    423|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 423, False: 1.80k]
  ------------------
  721|    810|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 387, False: 1.84k]
  ------------------
  722|    810|                                    return OpCode::MULTF;
  723|       |
  724|    180|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 180, False: 2.04k]
  ------------------
  725|    360|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 180, False: 2.04k]
  ------------------
  726|    360|                                    return OpCode::MULTI;
  727|       |
  728|    209|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 209, False: 2.02k]
  ------------------
  729|    520|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 311, False: 1.91k]
  ------------------
  730|    520|                                    return OpCode::MULTU;
  731|  2.22k|                            }
  732|  2.22k|                        }
  733|  4.18k|                        break;
  734|       |
  735|  5.89k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 5.89k, False: 55.6k]
  ------------------
  736|  12.8k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 6.98k, False: 54.5k]
  ------------------
  737|  12.8k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 2.28k, False: 10.5k]
  ------------------
  738|  12.8k|                        {
  739|  1.04k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 1.04k, False: 11.8k]
  ------------------
  740|  1.74k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 696, False: 12.1k]
  ------------------
  741|  1.74k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 1.06k, False: 679]
  |  Branch (741:37): [True: 313, False: 1.42k]
  |  Branch (741:53): [True: 571, False: 492]
  |  Branch (741:69): [True: 313, False: 258]
  ------------------
  742|    313|                                {
  743|    313|                                    return OpCode::SEQUI;
  744|    313|                                }
  745|  1.42k|                                break;
  746|       |
  747|  1.42k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 985, False: 11.9k]
  ------------------
  748|  2.95k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 1.96k, False: 10.9k]
  ------------------
  749|  2.95k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 1.19k, False: 1.75k]
  |  Branch (749:37): [True: 533, False: 2.41k]
  |  Branch (749:53): [True: 856, False: 340]
  |  Branch (749:69): [True: 533, False: 323]
  ------------------
  750|    533|                                {
  751|    533|                                    return OpCode::SGEUI;
  752|    533|                                }
  753|  2.41k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 1.47k, False: 940]
  |  Branch (753:42): [True: 278, False: 2.14k]
  |  Branch (753:58): [True: 453, False: 1.02k]
  |  Branch (753:74): [True: 278, False: 175]
  ------------------
  754|    278|                                {
  755|    278|                                    return OpCode::SGTUI;
  756|    278|                                }
  757|  2.14k|                                break;
  758|       |
  759|  2.31k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 2.31k, False: 10.5k]
  ------------------
  760|  3.24k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 927, False: 11.9k]
  ------------------
  761|  3.24k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 1.04k, False: 2.19k]
  |  Branch (761:37): [True: 454, False: 2.78k]
  |  Branch (761:53): [True: 661, False: 384]
  |  Branch (761:69): [True: 454, False: 207]
  ------------------
  762|    454|                                {
  763|    454|                                    return OpCode::SLEUI;
  764|    454|                                }
  765|  2.78k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 1.16k, False: 1.62k]
  |  Branch (765:42): [True: 324, False: 2.46k]
  |  Branch (765:58): [True: 724, False: 444]
  |  Branch (765:74): [True: 324, False: 400]
  ------------------
  766|    324|                                {
  767|    324|                                    return OpCode::SLTUI;
  768|    324|                                }
  769|  2.46k|                                break;
  770|       |
  771|  2.46k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 870, False: 12.0k]
  ------------------
  772|  1.39k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 527, False: 12.3k]
  ------------------
  773|  1.39k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 971, False: 426]
  |  Branch (773:37): [True: 250, False: 1.14k]
  |  Branch (773:53): [True: 727, False: 244]
  |  Branch (773:69): [True: 250, False: 477]
  ------------------
  774|    250|                                {
  775|    250|                                    return OpCode::SNEUI;
  776|    250|                                }
  777|  1.14k|                                break;
  778|       |
  779|  1.14k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 626, False: 12.2k]
  ------------------
  780|  1.26k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 638, False: 12.2k]
  ------------------
  781|  1.26k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 904, False: 360]
  |  Branch (781:37): [True: 281, False: 983]
  |  Branch (781:53): [True: 578, False: 326]
  |  Branch (781:69): [True: 281, False: 297]
  ------------------
  782|    281|                                {
  783|    281|                                    return OpCode::SUBUI;
  784|    281|                                }
  785|    983|                                break;
  786|  12.8k|                        }
  787|       |
  788|  10.4k|                        break;
  789|  61.5k|                }
  790|       |
  791|  56.6k|                break;
  792|  61.5k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  56.6k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 39.9k, False: 646k]
  ------------------
  796|  39.9k|                char c1 = token[0];
  797|  39.9k|                char c2 = token[1];
  798|  39.9k|                char c3 = token[2];
  799|  39.9k|                char c4 = token[3];
  800|  39.9k|                char c5 = token[4];
  801|  39.9k|                char c6 = token[5];
  802|       |
  803|  39.9k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 3.03k, False: 36.9k]
  |  Branch (803:21): [True: 2.07k, False: 37.8k]
  |  Branch (803:37): [True: 2.54k, False: 487]
  |  Branch (803:53): [True: 2.07k, False: 473]
  ------------------
  804|  2.07k|                {
  805|  2.07k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 248, False: 1.82k]
  ------------------
  806|  2.07k|                    {
  807|    286|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 286, False: 1.78k]
  ------------------
  808|    576|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 290, False: 1.78k]
  ------------------
  809|    576|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 444, False: 132]
  ------------------
  810|    444|                            {
  811|    444|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 182, False: 262]
  ------------------
  812|    182|                                {
  813|    182|                                    return OpCode::CVTD2F;
  814|    182|                                }
  815|    262|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 192, False: 70]
  ------------------
  816|    192|                                {
  817|    192|                                    return OpCode::CVTD2I;
  818|    192|                                }
  819|    444|                            }
  820|    202|                            break;
  821|       |
  822|    516|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 516, False: 1.55k]
  ------------------
  823|    648|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 132, False: 1.93k]
  ------------------
  824|    648|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 510, False: 138]
  ------------------
  825|    510|                            {
  826|    510|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 181, False: 329]
  ------------------
  827|    181|                                {
  828|    181|                                    return OpCode::CVTF2D;
  829|    181|                                }
  830|    329|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 135, False: 194]
  ------------------
  831|    135|                                {
  832|    135|                                    return OpCode::CVTF2I;
  833|    135|                                }
  834|    510|                            }
  835|    332|                            break;
  836|       |
  837|    533|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 533, False: 1.53k]
  ------------------
  838|    599|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 66, False: 2.00k]
  ------------------
  839|    599|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 451, False: 148]
  ------------------
  840|    451|                            {
  841|    451|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 199, False: 252]
  ------------------
  842|    199|                                {
  843|    199|                                    return OpCode::CVTI2D;
  844|    199|                                }
  845|    252|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 178, False: 74]
  ------------------
  846|    178|                                {
  847|    178|                                    return OpCode::CVTI2F;
  848|    178|                                }
  849|    451|                            }
  850|  2.07k|                    }
  851|  2.07k|                }
  852|  37.8k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 6.24k, False: 31.6k]
  |  Branch (852:26): [True: 224, False: 37.6k]
  |  Branch (852:42): [True: 4.23k, False: 2.00k]
  |  Branch (852:58): [True: 3.90k, False: 331]
  |  Branch (852:74): [True: 2.66k, False: 1.23k]
  ------------------
  853|  37.8k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 818, False: 1.84k]
  |  Branch (853:42): [True: 224, False: 594]
  ------------------
  854|    224|                {
  855|    224|                    return OpCode::MULTUI;
  856|    224|                }
  857|  38.6k|                break;
  858|  39.9k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  38.6k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 25.6k, False: 660k]
  ------------------
  862|  25.6k|                char c1 = token[0];
  863|  25.6k|                char c2 = token[1];
  864|  25.6k|                char c3 = token[2];
  865|  25.6k|                char c4 = token[3];
  866|  25.6k|                char c5 = token[4];
  867|  25.6k|                char c6 = token[5];
  868|  25.6k|                char c7 = token[6];
  869|       |
  870|  25.6k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 4.13k, False: 21.5k]
  |  Branch (870:21): [True: 1.21k, False: 24.4k]
  |  Branch (870:37): [True: 2.00k, False: 2.13k]
  |  Branch (870:53): [True: 1.21k, False: 794]
  ------------------
  871|  1.21k|                {
  872|  1.21k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 308, False: 903]
  |  Branch (872:25): [True: 0, False: 1.21k]
  |  Branch (872:41): [True: 144, False: 164]
  |  Branch (872:54): [True: 73, False: 71]
  |  Branch (872:70): [True: 0, False: 73]
  ------------------
  873|      0|                    {
  874|      0|                        return OpCode::MOVI2FP;
  875|      0|                    }
  876|  1.21k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 622, False: 589]
  |  Branch (876:30): [True: 136, False: 1.07k]
  |  Branch (876:46): [True: 316, False: 306]
  |  Branch (876:62): [True: 202, False: 114]
  |  Branch (876:75): [True: 136, False: 66]
  ------------------
  877|    136|                    {
  878|    136|                        return OpCode::MOVFP2I;
  879|    136|                    }
  880|  1.21k|                }
  881|  25.5k|                break;
  882|  25.6k|            }
  883|       |
  884|   107k|            default: {
  ------------------
  |  Branch (884:13): [True: 107k, False: 578k]
  ------------------
  885|   107k|                break;
  886|  25.6k|            }
  887|   686k|        }
  888|       |
  889|       |        // None found
  890|   612k|        return OpCode::NONE;
  891|   686k|    }
_ZN3dlx3iceEcc:
   17|   509k|    {
   18|   509k|        constexpr const char diff = 'a' - 'A';
   19|   509k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 91.7k, False: 418k]
  |  Branch (19:28): [True: 85.1k, False: 332k]
  ------------------
   20|   509k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   965k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  5.56k|    {
  193|  5.56k|        ParseError err;
  194|       |
  195|  5.56k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  5.56k|        err.m_LineNumber                           = line_number;
  197|  5.56k|        err.m_Column                               = column;
  198|  5.56k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  5.56k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  5.56k|        return err;
  202|  5.56k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  5.56k|    {
  207|  5.56k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  5.56k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  5.56k|                                                         actual_type);
  210|  5.56k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    135|    {
  216|    135|        ParseError err;
  217|       |
  218|    135|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    135|        err.m_LineNumber        = line_number;
  220|    135|        err.m_Column            = column;
  221|    135|        err.invalid_number.text = text;
  222|       |
  223|    135|        return err;
  224|    135|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    135|    {
  228|    135|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    135|                                                token.GetColumn().unsafe(), token.GetText());
  230|    135|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      6|    {
  235|      6|        ParseError err;
  236|       |
  237|      6|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      6|        err.m_LineNumber = line_number;
  239|      6|        err.m_Column     = column;
  240|       |
  241|      6|        return err;
  242|      6|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      6|    {
  247|      6|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      6|                                                                     token.GetColumn().unsafe());
  249|      6|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   578k|    {
  255|   578k|        ParseError err;
  256|       |
  257|   578k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   578k|        err.m_LineNumber                   = line_number;
  259|   578k|        err.m_Column                       = column;
  260|   578k|        err.unexpected_token.expected_type = expected_type;
  261|   578k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   578k|        return err;
  264|   578k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   578k|    {
  269|   578k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   578k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   578k|                                                  token.GetType());
  272|   578k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  21.2k|    {
  277|  21.2k|        ParseError err;
  278|       |
  279|  21.2k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  21.2k|        err.m_LineNumber                   = line_number;
  281|  21.2k|        err.m_Column                       = column;
  282|  21.2k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  21.2k|        return err;
  285|  21.2k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|    156|    {
  289|    156|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|    156|                                                    token.GetColumn().unsafe(), token.GetText());
  291|    156|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   273k|    {
  296|   273k|        ParseError err;
  297|       |
  298|   273k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   273k|        err.m_LineNumber                       = line_number;
  300|   273k|        err.m_Column                           = column;
  301|   273k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   273k|        return err;
  304|   273k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   273k|    {
  309|   273k|        return ConstructInvalidLabelIdentifierParseError(
  310|   273k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   273k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  32.3k|    {
  317|  32.3k|        ParseError err;
  318|       |
  319|  32.3k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  32.3k|        err.m_LineNumber                     = line_number;
  321|  32.3k|        err.m_Column                         = column;
  322|  32.3k|        err.label_already_defined.label_name = label_name;
  323|  32.3k|        err.label_already_defined.at_line    = at_line;
  324|  32.3k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  32.3k|        return err;
  327|  32.3k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  32.3k|    {
  332|  32.3k|        return ConstructLabelAlreadyDefinedParseError(
  333|  32.3k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  32.3k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  32.3k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|  25.7k|    {
  340|  25.7k|        ParseError err;
  341|       |
  342|  25.7k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|  25.7k|        err.m_LineNumber = line_number;
  344|  25.7k|        err.m_Column     = column;
  345|       |
  346|  25.7k|        return err;
  347|  25.7k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|  25.7k|    {
  352|  25.7k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|  25.7k|                                                        token.GetColumn().unsafe());
  354|  25.7k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  10.3k|    {
  360|  10.3k|        ParseError err;
  361|       |
  362|  10.3k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  10.3k|        err.m_LineNumber               = line_number;
  364|  10.3k|        err.m_Column                   = column;
  365|  10.3k|        err.too_few_arguments.required = required;
  366|  10.3k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  10.3k|        return err;
  369|  10.3k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  10.3k|    {
  374|  10.3k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  10.3k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  10.3k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  7.15k|    {
  381|  7.15k|        ParseError err;
  382|       |
  383|  7.15k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  7.15k|        err.m_LineNumber           = line_number;
  385|  7.15k|        err.m_Column               = column;
  386|  7.15k|        err.empty_label.label_name = label_name;
  387|       |
  388|  7.15k|        return err;
  389|  7.15k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  7.15k|    {
  393|  7.15k|        return ConstructEmptyLabelParseError(
  394|  7.15k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  7.15k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 4.11k, False: 3.03k]
  ------------------
  396|  4.11k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  7.15k|                        token.GetText());
  398|  7.15k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  10.8k|    {
  403|  10.8k|        ParseError err;
  404|       |
  405|  10.8k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  10.8k|        err.m_LineNumber = line_number;
  407|  10.8k|        err.m_Column     = column;
  408|       |
  409|  10.8k|        return err;
  410|  10.8k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  10.8k|    {
  414|  10.8k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  10.8k|                                               token.GetColumn().unsafe());
  416|  10.8k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   965k|    {
   19|   965k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   965k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  8.34k|    {
  182|  8.34k|        ParsedProgram program;
  183|       |
  184|  8.34k|        program.m_Tokens = tokens;
  185|       |
  186|  8.34k|        phi::boolean line_has_instruction{false};
  187|  8.34k|        phi::usize   label_count{0u};
  188|       |
  189|  1.13M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 1.12M, False: 8.34k]
  ------------------
  190|  1.12M|        {
  191|  1.12M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  1.12M|            switch (current_token.GetType())
  196|  1.12M|            {
  197|       |                // Ignore comments
  198|  3.82k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 3.82k, False: 1.12M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  3.82k|                    break;
  201|       |
  202|   163k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 163k, False: 964k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   163k|                    line_has_instruction = false;
  205|   163k|                    break;
  206|       |
  207|   468k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 468k, False: 658k]
  ------------------
  208|   468k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 135k, False: 332k]
  ------------------
  209|   135k|                    {
  210|   135k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|   135k|                                current_token, Token::Type::NewLine));
  212|   135k|                        break;
  213|   135k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   332k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 186k, False: 145k]
  ------------------
  218|   186k|                    {
  219|   186k|                        program.AddParseError(
  220|   186k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   186k|                        break;
  222|   186k|                    }
  223|       |
  224|   145k|                    std::string_view label_name = current_token.GetText();
  225|   145k|                    label_name.remove_suffix(1);
  226|       |
  227|   145k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 21.1k, False: 124k]
  ------------------
  228|  21.1k|                    {
  229|  21.1k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  21.1k|                                current_token.GetLineNumber().unsafe(),
  231|  21.1k|                                current_token.GetColumn().unsafe(), label_name));
  232|  21.1k|                        break;
  233|  21.1k|                    }
  234|       |
  235|   124k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 81.9k, False: 42.6k]
  ------------------
  236|  81.9k|                    {
  237|  81.9k|                        program.AddParseError(
  238|  81.9k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  81.9k|                        break;
  240|  81.9k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  42.6k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 32.3k, False: 10.3k]
  ------------------
  244|  32.3k|                    {
  245|       |                        // Find first defintions of label
  246|  32.3k|                        const Token* first_label_definition =
  247|  32.3k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  32.3k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  32.3k|                                    {
  250|  32.3k|                                        std::string_view token_label_name = t.GetText();
  251|  32.3k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  32.3k|                                        if (token_label_name == label_name)
  254|  32.3k|                                        {
  255|  32.3k|                                            return true;
  256|  32.3k|                                        }
  257|  32.3k|                                    }
  258|       |
  259|  32.3k|                                    return false;
  260|  32.3k|                                });
  261|       |
  262|  32.3k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  32.3k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  32.3k|                                current_token, *first_label_definition));
  266|  32.3k|                        break;
  267|  32.3k|                    }
  268|       |
  269|  10.3k|                    program.m_JumpData[label_name] =
  270|  10.3k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  10.3k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  10.3k|                    break;
  277|  42.6k|                }
  278|       |
  279|  54.9k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 54.9k, False: 1.07M]
  ------------------
  280|  54.9k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 25.7k, False: 29.2k]
  ------------------
  281|  25.7k|                    {
  282|  25.7k|                        program.AddParseError(
  283|  25.7k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|  25.7k|                        break;
  285|  25.7k|                    }
  286|       |
  287|  29.2k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  29.2k|                    PHI_ASSERT(current_token.HasHint());
  291|  29.2k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  29.2k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  29.2k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  29.2k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  29.2k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  29.2k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  29.2k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  29.2k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  29.2k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|  56.8k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 54.3k, False: 2.57k]
  ------------------
  313|  54.3k|                    {
  314|       |                        // Get next token
  315|  54.3k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 523, False: 53.8k]
  ------------------
  316|    523|                        {
  317|    523|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    523|                                    current_token, number_of_argument_required.unsafe(),
  319|    523|                                    argument_num.unsafe()));
  320|    523|                            break;
  321|    523|                        }
  322|       |
  323|  53.8k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|  53.8k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 24.3k, False: 29.4k]
  ------------------
  327|  24.3k|                        {
  328|  24.3k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 10.8k, False: 13.5k]
  ------------------
  329|  10.8k|                            {
  330|  10.8k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  10.8k|                            }
  332|       |
  333|  24.3k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  24.3k|                            continue;
  336|  24.3k|                        }
  337|       |
  338|  29.4k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 9.84k, False: 19.5k]
  ------------------
  339|  9.84k|                        {
  340|  9.84k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  9.84k|                                    token, number_of_argument_required.unsafe(),
  342|  9.84k|                                    argument_num.unsafe()));
  343|  9.84k|                            break;
  344|  9.84k|                        }
  345|       |
  346|  19.5k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  19.5k|                                parse_instruction_argument(
  348|  19.5k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  19.5k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 16.2k, False: 3.30k]
  ------------------
  350|  16.2k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  16.2k|                            break;
  353|  16.2k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  3.30k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  3.30k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  3.30k|                        argument_num++;
  360|  3.30k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  3.30k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  29.2k|                    program.m_Instructions.emplace_back(instruction);
  368|  29.2k|                    line_has_instruction = true;
  369|  29.2k|                    break;
  370|  54.9k|                }
  371|       |
  372|   437k|                default:
  ------------------
  |  Branch (372:17): [True: 437k, False: 690k]
  ------------------
  373|   437k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   437k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 167k, False: 269k]
  ------------------
  375|   167k|                    {
  376|   167k|                        expected_token_type = Token::Type::NewLine;
  377|   167k|                    }
  378|       |
  379|   437k|                    program.AddParseError(
  380|   437k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   437k|                    break;
  382|  1.12M|            }
  383|  1.12M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  8.34k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 1.79k, False: 6.55k]
  ------------------
  387|  1.79k|        {
  388|  14.0k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 12.2k, False: 1.79k]
  ------------------
  389|  12.2k|            {
  390|  12.2k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  12.2k|                const Token& token = *it;
  393|  12.2k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 7.15k, False: 5.12k]
  ------------------
  394|  7.15k|                {
  395|  7.15k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  7.15k|                    --label_count;
  397|  7.15k|                }
  398|  12.2k|            }
  399|  1.79k|        }
  400|       |
  401|  8.34k|        return program;
  402|  8.34k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  8.34k|    {
  406|  8.34k|        TokenStream tokens = Tokenize(source);
  407|  8.34k|        return Parse(tokens);
  408|  8.34k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  19.5k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  19.5k|        switch (token.GetType())
   38|  19.5k|        {
   39|    553|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 553, False: 19.0k]
  ------------------
   40|    553|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 193, False: 360]
  ------------------
   41|    553|                                          ArgumentType::AddressDisplacement))
   42|    193|                {
   43|    193|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|    193|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|    193|                    return {};
   47|    193|                }
   48|       |
   49|       |                // Get address displacement
   50|    360|                PHI_ASSERT(token.HasHint());
   51|       |
   52|    360|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|    360|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 6, False: 354]
  ------------------
   55|      6|                {
   56|      6|                    program.AddParseError(
   57|      6|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      6|                    return {};
   59|      6|                }
   60|       |
   61|    354|                auto         it           = tokens.current_position();
   62|    354|                const Token& first_token  = tokens.consume();
   63|    354|                const Token& second_token = tokens.consume();
   64|    354|                const Token& third_token  = tokens.consume();
   65|       |
   66|    354|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 117, False: 237]
  ------------------
   67|    117|                {
   68|    117|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|    117|                            first_token, Token::Type::OpenBracket));
   70|    117|                    return {};
   71|    117|                }
   72|       |
   73|       |                // Second token is the register
   74|    237|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 107, False: 130]
  ------------------
   75|    107|                {
   76|    107|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|    107|                            second_token, Token::Type::RegisterInt));
   78|    107|                    return {};
   79|    107|                }
   80|       |
   81|    130|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 130, False: 0]
  ------------------
   82|    130|                {
   83|    130|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|    130|                            third_token, Token::Type::ClosingBracket));
   85|    130|                    return {};
   86|    130|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|      0|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|      0|                return ConstructInstructionArgumentAddressDisplacement(
   95|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|    130|            }
   97|    956|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 956, False: 18.6k]
  ------------------
   98|    956|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 175, False: 781]
  ------------------
   99|    175|                {
  100|    175|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|    175|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|    175|                    return {};
  103|    175|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|    781|                return ConstructInstructionArgumentRegisterInt(
  109|    781|                        static_cast<IntRegisterID>(token.GetHint()));
  110|    956|            }
  111|    491|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 491, False: 19.0k]
  ------------------
  112|    491|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 111, False: 380]
  ------------------
  113|    111|                {
  114|    111|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|    111|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|    111|                    return {};
  117|    111|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|    380|                return ConstructInstructionArgumentRegisterFloat(
  123|    380|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|    491|            }
  125|    156|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 156, False: 19.4k]
  ------------------
  126|    156|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|    156|                return {};
  129|    491|            }
  130|  11.7k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 11.7k, False: 7.83k]
  ------------------
  131|       |                // Parse as Label
  132|  11.7k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 4.83k, False: 6.90k]
  ------------------
  133|  4.83k|                {
  134|  4.83k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  4.83k|                            token, expected_argument_type, ArgumentType::Label));
  136|  4.83k|                    return {};
  137|  4.83k|                }
  138|       |
  139|  6.90k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 6.90k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  6.90k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 4.81k, False: 2.09k]
  ------------------
  146|  4.81k|                {
  147|  4.81k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  4.81k|                    return {};
  149|  4.81k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  2.09k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  6.90k|            }
  155|    437|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 437, False: 19.1k]
  ------------------
  156|    437|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 259, False: 178]
  ------------------
  157|    259|                {
  158|    259|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|    259|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|    259|                    return {};
  161|    259|                }
  162|       |
  163|    178|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 43, False: 135]
  ------------------
  164|     43|                {
  165|     43|                    return ConstructInstructionArgumentImmediateValue(
  166|     43|                            static_cast<std::int16_t>(token.GetHint()));
  167|     43|                }
  168|       |
  169|    135|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    135|                return {};
  171|    178|            }
  172|       |
  173|  5.23k|            default:
  ------------------
  |  Branch (173:13): [True: 5.23k, False: 14.3k]
  ------------------
  174|  5.23k|                program.AddParseError(
  175|  5.23k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  5.23k|                return {};
  177|  19.5k|        }
  178|  19.5k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  1.28M|                                tokens.find_first_token_if([&](const Token& t) {
  248|  1.28M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 639k, False: 646k]
  ------------------
  249|   639k|                                    {
  250|   639k|                                        std::string_view token_label_name = t.GetText();
  251|   639k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   639k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 32.3k, False: 606k]
  ------------------
  254|  32.3k|                                        {
  255|  32.3k|                                            return true;
  256|  32.3k|                                        }
  257|   639k|                                    }
  258|       |
  259|  1.25M|                                    return false;
  260|  1.28M|                                });

_ZN3dlx9ProcessorC2Ev:
   63|      1|    {
   64|       |        // Mark R0 as ready only
   65|      1|        m_IntRegisters[0].SetReadOnly(true);
   66|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   69|      5|    {
   70|      5|        PHI_ASSERT(id != IntRegisterID::None);
   71|      5|        phi::size_t id_value = phi::to_underlying(id);
   72|       |
   73|      5|        PHI_ASSERT(id_value < m_IntRegisters.size());
   74|       |
   75|      5|        return m_IntRegisters[id_value];
   76|      5|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   80|  10.0k|    {
   81|  10.0k|        PHI_ASSERT(id != IntRegisterID::None);
   82|  10.0k|        phi::size_t id_value = phi::to_underlying(id);
   83|       |
   84|  10.0k|        PHI_ASSERT(id_value < m_IntRegisters.size());
   85|       |
   86|  10.0k|        return m_IntRegisters[id_value];
   87|  10.0k|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   90|      4|    {
   91|      4|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   92|      4|                                             RegisterAccessType::Signed),
   93|      4|                   "Mismatch for instruction access type");
   94|       |
   95|      4|        const phi::size_t id_value = phi::to_underlying(id);
   96|       |
   97|      4|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   98|      4|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
   99|      4|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (99:13): [True: 0, False: 4]
  ------------------
  100|      4|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (100:13): [True: 0, False: 0]
  ------------------
  101|      0|        {
  102|      0|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  103|      0|        }
  104|       |
  105|      4|        return GetIntRegister(id).GetSignedValue();
  106|      4|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  109|  10.0k|    {
  110|  10.0k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  111|  10.0k|                                             RegisterAccessType::Unsigned),
  112|  10.0k|                   "Mismatch for instruction access type");
  113|       |
  114|  10.0k|        const phi::size_t id_value = phi::to_underlying(id);
  115|       |
  116|  10.0k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  117|  10.0k|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  118|  10.0k|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (118:13): [True: 0, False: 10.0k]
  ------------------
  119|  10.0k|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (119:13): [True: 0, False: 0]
  ------------------
  120|      0|        {
  121|      0|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  122|      0|        }
  123|       |
  124|  10.0k|        return GetIntRegister(id).GetUnsignedValue();
  125|  10.0k|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  128|      2|    {
  129|      2|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  130|      2|                                             RegisterAccessType::Signed),
  131|      2|                   "Mismatch for instruction access type");
  132|       |
  133|      2|        IntRegister& reg = GetIntRegister(id);
  134|       |
  135|      2|        if (reg.IsReadOnly())
  ------------------
  |  Branch (135:13): [True: 1, False: 1]
  ------------------
  136|      1|        {
  137|      1|            return;
  138|      1|        }
  139|       |
  140|      1|        reg.SetSignedValue(value);
  141|       |
  142|      1|        const phi::size_t id_value = phi::to_underlying(id);
  143|       |
  144|      1|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  145|      1|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  146|      1|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  149|      3|    {
  150|      3|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  151|      3|                                             RegisterAccessType::Unsigned),
  152|      3|                   "Mismatch for instruction access type");
  153|       |
  154|      3|        IntRegister& reg = GetIntRegister(id);
  155|       |
  156|      3|        if (reg.IsReadOnly())
  ------------------
  |  Branch (156:13): [True: 0, False: 3]
  ------------------
  157|      0|        {
  158|      0|            return;
  159|      0|        }
  160|       |
  161|      3|        reg.SetUnsignedValue(value);
  162|       |
  163|      3|        const phi::size_t id_value = phi::to_underlying(id);
  164|       |
  165|      3|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  166|      3|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  167|      3|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  170|     10|    {
  171|     10|        PHI_ASSERT(id != FloatRegisterID::None);
  172|     10|        const phi::size_t id_value = phi::to_underlying(id);
  173|       |
  174|     10|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  175|       |
  176|     10|        return m_FloatRegisters[id_value];
  177|     10|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  181|      4|    {
  182|      4|        PHI_ASSERT(id != FloatRegisterID::None);
  183|      4|        const phi::size_t id_value = phi::to_underlying(id);
  184|       |
  185|      4|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  186|       |
  187|      4|        return m_FloatRegisters[id_value];
  188|      4|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  191|      4|    {
  192|      4|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  193|      4|                                             RegisterAccessType::Float),
  194|      4|                   "Mismatch for instruction access type");
  195|       |
  196|      4|        const phi::size_t id_value = phi::to_underlying(id);
  197|       |
  198|      4|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  199|      4|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  200|      4|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (200:13): [True: 0, False: 4]
  ------------------
  201|      4|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (201:13): [True: 0, False: 0]
  ------------------
  202|      0|        {
  203|       |            /*
  204|       |            DLX_WARN("Mismatch for register value type");
  205|       |            */
  206|      0|        }
  207|       |
  208|      4|        const FloatRegister& reg = GetFloatRegister(id);
  209|       |
  210|      4|        return reg.GetValue();
  211|      4|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  214|      8|    {
  215|      8|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  216|      8|                                             RegisterAccessType::Double),
  217|      8|                   "Mismatch for instruction access type");
  218|       |
  219|      8|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (219:13): [True: 3, False: 5]
  ------------------
  220|      3|        {
  221|      3|            Raise(Exception::MisalignedRegisterAccess);
  222|      3|            return {0.0};
  223|      3|        }
  224|       |
  225|      5|        const phi::size_t id_value = phi::to_underlying(id);
  226|       |
  227|      5|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  228|      5|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  229|      5|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (229:13): [True: 0, False: 5]
  ------------------
  230|      5|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (230:13): [True: 0, False: 0]
  ------------------
  231|      0|        {
  232|      0|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  233|      0|        }
  234|       |
  235|      5|        const FloatRegisterValueType register_value_type_high =
  236|      5|                m_FloatRegistersValueTypes[id_value + 1u];
  237|      5|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (237:13): [True: 0, False: 5]
  ------------------
  238|      5|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (238:13): [True: 0, False: 0]
  ------------------
  239|      0|        {
  240|      0|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  241|      0|        }
  242|       |
  243|      5|        const FloatRegister& first_reg = GetFloatRegister(id);
  244|      5|        const FloatRegister& second_reg =
  245|      5|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  246|       |
  247|      5|        const float first_value  = first_reg.GetValue().unsafe();
  248|      5|        const float second_value = second_reg.GetValue().unsafe();
  249|       |
  250|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  251|      5|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  252|       |
  253|      5|        const std::uint32_t first_value_bits =
  254|      5|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  255|      5|        const std::uint32_t second_value_bits =
  256|      5|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  257|       |
  258|      5|        std::uint64_t final_value_bits =
  259|      5|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  260|       |
  261|      5|        return *reinterpret_cast<double*>(&final_value_bits);
  262|       |
  263|      8|        PHI_CLANG_SUPPRESS_WARNING_POP()
  264|      8|    }
_ZN3dlx9Processor7GetFPSREv:
  321|      6|    {
  322|      6|        return m_FPSR;
  323|      6|    }
_ZNK3dlx9Processor7GetFPSREv:
  326|      3|    {
  327|      3|        return m_FPSR;
  328|      3|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  331|      3|    {
  332|      3|        const StatusRegister& status_reg = GetFPSR();
  333|       |
  334|      3|        return status_reg.Get();
  335|      3|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  338|      6|    {
  339|      6|        StatusRegister& status_reg = GetFPSR();
  340|       |
  341|      6|        status_reg.SetStatus(value);
  342|      6|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  345|  50.2k|    {
  346|  50.2k|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  347|       |
  348|  50.2k|        inst.Execute(*this);
  349|  50.2k|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  352|  8.34k|    {
  353|  8.34k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (353:13): [True: 8.17k, False: 176]
  ------------------
  354|  8.17k|        {
  355|  8.17k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  8.17k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  356|  8.17k|            return false;
  357|  8.17k|        }
  358|       |
  359|    176|        m_CurrentProgram = &program;
  360|       |
  361|    176|        m_ProgramCounter               = 0u;
  362|    176|        m_Halted                       = false;
  363|    176|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  364|    176|        m_LastRaisedException          = Exception::None;
  365|    176|        m_CurrentStepCount             = 0u;
  366|       |
  367|    176|        return true;
  368|  8.34k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  372|  50.0k|    {
  373|  50.0k|        return m_CurrentProgram;
  374|  50.0k|    }
_ZN3dlx9Processor11ExecuteStepEv:
  377|  50.2k|    {
  378|       |        // No nothing when no program is loaded
  379|  50.2k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (379:13): [True: 0, False: 50.2k]
  ------------------
  380|      0|        {
  381|      0|            return;
  382|      0|        }
  383|       |
  384|       |        // Halt if there are no instruction to execute
  385|  50.2k|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (385:13): [True: 51, False: 50.2k]
  ------------------
  386|     51|        {
  387|     51|            m_Halted                       = true;
  388|     51|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  389|     51|        }
  390|       |
  391|       |        // Do nothing when processor is halted
  392|  50.2k|        if (m_Halted)
  ------------------
  |  Branch (392:13): [True: 51, False: 50.2k]
  ------------------
  393|     51|        {
  394|     51|            return;
  395|     51|        }
  396|       |
  397|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  398|  50.2k|        m_NextProgramCounter = m_ProgramCounter + 1u;
  399|       |
  400|       |        // Get current instruction pointed to by the program counter
  401|  50.2k|        const auto& current_instruction =
  402|  50.2k|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  403|       |
  404|       |        // Execute current instruction
  405|  50.2k|        ExecuteInstruction(current_instruction);
  406|       |
  407|       |        // Stop executing if the last instruction halted the processor
  408|  50.2k|        if (m_Halted)
  ------------------
  |  Branch (408:13): [True: 100, False: 50.1k]
  ------------------
  409|    100|        {
  410|    100|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  411|    100|            return;
  412|    100|        }
  413|       |
  414|  50.1k|        m_ProgramCounter = m_NextProgramCounter;
  415|       |
  416|  50.1k|        ++m_CurrentStepCount;
  417|       |
  418|  50.1k|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (418:13): [True: 25, False: 50.0k]
  |  Branch (418:14): [True: 50.1k, False: 0]
  |  Branch (418:42): [True: 5, False: 50.1k]
  ------------------
  419|  50.1k|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (419:13): [True: 20, False: 50.0k]
  ------------------
  420|     25|        {
  421|     25|            m_Halted                       = true;
  422|     25|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  423|     25|        }
  424|  50.1k|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  427|    176|    {
  428|       |        // Do nothing when no program is loaded
  429|    176|        if (!m_CurrentProgram)
  ------------------
  |  Branch (429:13): [True: 0, False: 176]
  ------------------
  430|      0|        {
  431|      0|            return;
  432|      0|        }
  433|       |
  434|    176|        m_ProgramCounter               = 0u;
  435|    176|        m_Halted                       = false;
  436|    176|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  437|    176|        m_LastRaisedException          = Exception::None;
  438|    176|        m_CurrentStepCount             = 0u;
  439|       |
  440|  50.4k|        while (!m_Halted)
  ------------------
  |  Branch (440:16): [True: 50.2k, False: 176]
  ------------------
  441|  50.2k|        {
  442|  50.2k|            ExecuteStep();
  443|  50.2k|        }
  444|       |
  445|    176|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  446|    176|                   "RegisterAccessType was not reset correctly");
  447|    176|    }
_ZN3dlx9Processor14ClearRegistersEv:
  463|  8.34k|    {
  464|  8.34k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (464:24): [True: 267k, False: 8.34k]
  ------------------
  465|   267k|        {
  466|   267k|            reg.SetSignedValue(0);
  467|   267k|        }
  468|       |
  469|  8.34k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (469:24): [True: 267k, False: 8.34k]
  ------------------
  470|   267k|        {
  471|   267k|            reg.SetValue(0.0f);
  472|   267k|        }
  473|       |
  474|  8.34k|        m_FPSR.SetStatus(false);
  475|  8.34k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  478|  8.34k|    {
  479|  8.34k|        m_MemoryBlock.Clear();
  480|  8.34k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  487|    101|    {
  488|    101|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  489|       |
  490|    101|        m_LastRaisedException = exception;
  491|       |
  492|    101|        switch (exception)
  493|    101|        {
  494|      0|            case Exception::DivideByZero:
  ------------------
  |  Branch (494:13): [True: 0, False: 101]
  ------------------
  495|      0|                m_Halted = true;
  496|      0|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  497|      0|                return;
  498|      0|            case Exception::Overflow:
  ------------------
  |  Branch (498:13): [True: 0, False: 101]
  ------------------
  499|      0|                DLX_WARN("Overflow");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  500|      0|                return;
  501|      0|            case Exception::Underflow:
  ------------------
  |  Branch (501:13): [True: 0, False: 101]
  ------------------
  502|      0|                DLX_WARN("Underflow");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  503|      0|                return;
  504|      0|            case Exception::Trap:
  ------------------
  |  Branch (504:13): [True: 0, False: 101]
  ------------------
  505|      0|                m_Halted = true;
  506|      0|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  507|      0|                return;
  508|      3|            case Exception::Halt:
  ------------------
  |  Branch (508:13): [True: 3, False: 98]
  ------------------
  509|      3|                m_Halted = true;
  510|      3|                return;
  511|     95|            case Exception::UnknownLabel:
  ------------------
  |  Branch (511:13): [True: 95, False: 6]
  ------------------
  512|     95|                m_Halted = true;
  513|     95|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|     95|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  514|     95|                return;
  515|      0|            case Exception::BadShift:
  ------------------
  |  Branch (515:13): [True: 0, False: 101]
  ------------------
  516|      0|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  517|      0|                return;
  518|      0|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (518:13): [True: 0, False: 101]
  ------------------
  519|      0|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  520|      0|                m_Halted = true;
  521|      0|                return;
  522|      3|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (522:13): [True: 3, False: 98]
  ------------------
  523|      3|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  524|      3|                m_Halted = true;
  525|      3|                return;
  526|       |
  527|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  528|      0|            default:
  ------------------
  |  Branch (528:13): [True: 0, False: 101]
  ------------------
  529|      0|                PHI_ASSERT_NOT_REACHED();
  530|    101|#endif
  531|    101|        }
  532|       |
  533|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  534|      0|        PHI_ASSERT_NOT_REACHED();
  535|      0|#endif
  536|      0|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  572|      2|    {
  573|      2|        return m_NextProgramCounter;
  574|      2|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  577|  50.0k|    {
  578|  50.0k|        m_NextProgramCounter = new_npc;
  579|  50.0k|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   35|  10.0k|    {
   36|  10.0k|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   37|  10.0k|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   38|       |
   39|  10.0k|        switch (expected_access)
   40|  10.0k|        {
   41|      0|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (41:13): [True: 0, False: 10.0k]
  ------------------
   42|      0|                return true;
   43|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (43:13): [True: 0, False: 10.0k]
  ------------------
   44|      0|                return false;
   45|      0|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (45:13): [True: 0, False: 10.0k]
  ------------------
   46|      0|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (46:24): [True: 0, False: 0]
  |  Branch (46:63): [True: 0, False: 0]
  ------------------
   47|      0|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (47:13): [True: 0, False: 10.0k]
  ------------------
   48|      0|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (48:24): [True: 0, False: 0]
  ------------------
   49|      0|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (49:24): [True: 0, False: 0]
  ------------------
   50|      0|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (50:13): [True: 0, False: 10.0k]
  ------------------
   51|      0|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (51:24): [True: 0, False: 0]
  |  Branch (51:63): [True: 0, False: 0]
  ------------------
   52|      0|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (52:13): [True: 0, False: 10.0k]
  ------------------
   53|      0|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (53:24): [True: 0, False: 0]
  |  Branch (53:64): [True: 0, False: 0]
  ------------------
   54|  10.0k|            default:
  ------------------
  |  Branch (54:13): [True: 10.0k, False: 0]
  ------------------
   55|  10.0k|                return expected_access == access;
   56|  10.0k|        }
   57|  10.0k|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   695k|    {
   14|   695k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 121k, False: 574k]
  ------------------
   15|   121k|        {
   16|   121k|            char first_char = token[0];
   17|   121k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 2.55k, False: 118k]
  |  Branch (17:38): [True: 5.56k, False: 112k]
  ------------------
   18|  8.11k|            {
   19|  8.11k|                char second_char = token[1];
   20|  8.11k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 4.96k, False: 3.15k]
  |  Branch (20:43): [True: 1.07k, False: 3.88k]
  ------------------
   21|  1.07k|                {
   22|  1.07k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  1.07k|                }
   24|  8.11k|            }
   25|   121k|        }
   26|   574k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 121k, False: 452k]
  ------------------
   27|   121k|        {
   28|   121k|            char first_char = token[0];
   29|   121k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 2.78k, False: 119k]
  |  Branch (29:38): [True: 6.42k, False: 112k]
  ------------------
   30|  9.21k|            {
   31|  9.21k|                char second_char = token[1];
   32|  9.21k|                char third_char  = token[2];
   33|       |
   34|  9.21k|                switch (second_char)
   35|  9.21k|                {
   36|  1.92k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 1.92k, False: 7.28k]
  ------------------
   37|  1.92k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 1.77k, False: 152]
  |  Branch (37:50): [True: 1.35k, False: 421]
  ------------------
   38|  1.35k|                        {
   39|  1.35k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  1.35k|                        }
   41|    573|                        break;
   42|  1.92k|                    }
   43|    665|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 665, False: 8.54k]
  ------------------
   44|    665|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 471, False: 194]
  |  Branch (44:50): [True: 253, False: 218]
  ------------------
   45|    253|                        {
   46|    253|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|    253|                        }
   48|    412|                        break;
   49|    665|                    }
   50|  1.21k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 1.21k, False: 7.99k]
  ------------------
   51|  1.21k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 608, False: 609]
  |  Branch (51:50): [True: 446, False: 163]
  ------------------
   52|  1.05k|                        {
   53|  1.05k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  1.05k|                        }
   55|    163|                        break;
   56|  1.21k|                    }
   57|  5.40k|                    default: {
  ------------------
  |  Branch (57:21): [True: 5.40k, False: 3.80k]
  ------------------
   58|  5.40k|                        break;
   59|  1.21k|                    }
   60|  9.21k|                }
   61|  9.21k|            }
   62|   121k|        }
   63|       |
   64|   691k|        return IntRegisterID::None;
   65|   695k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   691k|    {
   69|   691k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 119k, False: 571k]
  ------------------
   70|   119k|        {
   71|   119k|            char first_char = token[0];
   72|   119k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 11.8k, False: 108k]
  |  Branch (72:38): [True: 3.89k, False: 104k]
  ------------------
   73|  15.7k|            {
   74|  15.7k|                char second_char = token[1];
   75|  15.7k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 10.9k, False: 4.83k]
  |  Branch (75:43): [True: 3.93k, False: 6.99k]
  ------------------
   76|  3.93k|                {
   77|  3.93k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  3.93k|                }
   79|  15.7k|            }
   80|   119k|        }
   81|   571k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 119k, False: 452k]
  ------------------
   82|   119k|        {
   83|   119k|            char first_char = token[0];
   84|   119k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 8.32k, False: 110k]
  |  Branch (84:38): [True: 3.76k, False: 107k]
  ------------------
   85|  12.0k|            {
   86|  12.0k|                char second_char = token[1];
   87|  12.0k|                char third_char  = token[2];
   88|       |
   89|  12.0k|                switch (second_char)
   90|  12.0k|                {
   91|  1.95k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 1.95k, False: 10.1k]
  ------------------
   92|  1.95k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 1.73k, False: 217]
  |  Branch (92:50): [True: 768, False: 968]
  ------------------
   93|    768|                        {
   94|    768|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|    768|                        }
   96|  1.18k|                        break;
   97|  1.95k|                    }
   98|  1.42k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 1.42k, False: 10.6k]
  ------------------
   99|  1.42k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 1.23k, False: 187]
  |  Branch (99:50): [True: 160, False: 1.07k]
  ------------------
  100|    160|                        {
  101|    160|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|    160|                        }
  103|  1.26k|                        break;
  104|  1.42k|                    }
  105|  1.26k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 1.01k, False: 11.0k]
  ------------------
  106|  1.01k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 209, False: 802]
  |  Branch (106:50): [True: 138, False: 664]
  ------------------
  107|    347|                        {
  108|    347|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|    347|                        }
  110|    664|                        break;
  111|  1.01k|                    }
  112|  7.70k|                    default: {
  ------------------
  |  Branch (112:21): [True: 7.70k, False: 4.38k]
  ------------------
  113|  7.70k|                        break;
  114|  1.01k|                    }
  115|  12.0k|                }
  116|  12.0k|            }
  117|   119k|        }
  118|       |
  119|   686k|        return FloatRegisterID::None;
  120|   691k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   674k|    {
  124|   674k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 98.3k, False: 576k]
  ------------------
  125|  98.3k|        {
  126|  98.3k|            char c1 = token[0];
  127|  98.3k|            char c2 = token[1];
  128|  98.3k|            char c3 = token[2];
  129|  98.3k|            char c4 = token[3];
  130|       |
  131|  98.3k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 5.09k, False: 93.2k]
  |  Branch (131:34): [True: 1.68k, False: 91.5k]
  |  Branch (131:49): [True: 708, False: 6.07k]
  |  Branch (131:62): [True: 912, False: 5.15k]
  ------------------
  132|  98.3k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 809, False: 811]
  |  Branch (132:34): [True: 164, False: 647]
  |  Branch (132:49): [True: 184, False: 789]
  |  Branch (132:62): [True: 618, False: 171]
  ------------------
  133|  98.3k|        }
  134|       |
  135|   576k|        return false;
  136|   674k|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|  8.35k|    {
   12|  8.35k|        m_Value = value;
   13|  8.35k|    }
_ZNK3dlx14StatusRegister3GetEv:
   16|      3|    {
   17|      3|        return m_Value;
   18|      3|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  1.11M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|  69.7k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  3.10M|    {
   41|  3.10M|        return m_Type;
   42|  3.10M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  1.02M|    {
   51|  1.02M|        return m_LineNumber;
   52|  1.02M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   997k|    {
   56|   997k|        return m_Column;
   57|   997k|    }
_ZNK3dlx5Token7GetTextEv:
   65|  1.45M|    {
   66|  1.45M|        return m_Text;
   67|  1.45M|    }
_ZNK3dlx5Token7HasHintEv:
   79|  29.7k|    {
   80|  29.7k|        return m_HasHint;
   81|  29.7k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  30.7k|    {
   85|  30.7k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  30.7k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  30.7k|                   m_Type == Type::ImmediateInteger);
   88|  30.7k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  30.7k|        return m_Hint;
   91|  30.7k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  8.34k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  8.34k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  8.34k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|    360|    {
   51|    360|        auto it = m_Iterator;
   52|  1.42k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 1.07k, False: 354]
  ------------------
   53|  1.07k|        {
   54|  1.07k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 6, False: 1.06k]
  ------------------
   55|      6|            {
   56|      6|                return false;
   57|      6|            }
   58|  1.07k|        }
   59|       |
   60|    354|        return true;
   61|    360|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  1.19M|    {
   65|  1.19M|        return m_Iterator != m_Tokens.end();
   66|  1.19M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  1.18M|    {
   70|  1.18M|        return m_Iterator == m_Tokens.end();
   71|  1.18M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  1.18M|    {
   85|  1.18M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  1.18M|        return *m_Iterator++;
   91|  1.18M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|    354|    {
  164|    354|        return m_Iterator;
  165|    354|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  1.79k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  1.79k|        return m_Tokens.rbegin();
  224|  1.79k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  12.2k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  12.2k|        return m_Tokens.rend();
  233|  12.2k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  8.34k|    {
   63|  8.34k|        TokenStream tokens;
   64|       |
   65|  8.34k|        std::string_view current_token;
   66|       |
   67|  8.34k|        phi::u64 current_line_number{1u};
   68|  8.34k|        phi::u64 current_column{1u};
   69|  8.34k|        phi::u64 token_begin{0u};
   70|       |
   71|  8.34k|        phi::boolean parsing_comment{false};
   72|       |
   73|  3.93M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 3.93M, False: 8.34k]
  ------------------
   74|  3.93M|        {
   75|  3.93M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  3.93M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 172k, False: 3.75M]
  ------------------
   78|   172k|            {
   79|   172k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 96.8k, False: 76.1k]
  ------------------
   80|  96.8k|                {
   81|       |                    // Skip empty lines
   82|  96.8k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  96.8k|                                        current_line_number, current_column);
   84|       |
   85|  96.8k|                    parsing_comment = false;
   86|  96.8k|                    current_line_number += 1u;
   87|  96.8k|                    current_column = 1u;
   88|  96.8k|                    continue;
   89|  96.8k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|  76.1k|                tokens.emplace_back(
   93|  76.1k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|  76.1k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|  76.1k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|  76.1k|                                    current_line_number, current_column);
   98|       |
   99|  76.1k|                current_token   = std::string_view{};
  100|  76.1k|                parsing_comment = false;
  101|  76.1k|                current_line_number += 1u;
  102|  76.1k|                current_column = 0u;
  103|  76.1k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  3.75M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 4.62k, False: 3.75M]
  |  Branch (105:34): [True: 4.17k, False: 3.74M]
  ------------------
  106|  8.80k|            {
  107|  8.80k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 1.89k, False: 6.91k]
  ------------------
  108|  1.89k|                {
  109|  1.89k|                    token_begin = i;
  110|  1.89k|                }
  111|  6.91k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 2.57k, False: 4.34k]
  ------------------
  112|  2.57k|                {
  113|  2.57k|                    tokens.emplace_back(ParseToken(
  114|  2.57k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  2.57k|                            current_line_number, current_column - current_token.length()));
  116|  2.57k|                    token_begin   = i;
  117|  2.57k|                    current_token = std::string_view{};
  118|  2.57k|                }
  119|       |
  120|  8.80k|                parsing_comment = true;
  121|  8.80k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  8.80k|            }
  123|  3.74M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 61.5k, False: 3.68M]
  ------------------
  124|  61.5k|            {
  125|       |                // simply append the character
  126|  61.5k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|  61.5k|            }
  128|  3.68M|            else
  129|  3.68M|            {
  130|       |                // Not parsing a comment
  131|  3.68M|                switch (c)
  132|  3.68M|                {
  133|  43.0k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 43.0k, False: 3.64M]
  ------------------
  134|   106k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 63.3k, False: 3.62M]
  ------------------
  135|   224k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 117k, False: 3.56M]
  ------------------
  136|   224k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 129k, False: 94.8k]
  ------------------
  137|   129k|                        {
  138|   129k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|   129k|                            continue;
  141|   129k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|  94.8k|                        tokens.emplace_back(ParseToken(
  145|  94.8k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|  94.8k|                                current_line_number, current_column - current_token.length()));
  147|  94.8k|                        current_token = std::string_view{};
  148|  94.8k|                        break;
  149|   275k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 275k, False: 3.41M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|   275k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 184k, False: 90.1k]
  ------------------
  152|   184k|                        {
  153|   184k|                            current_token =
  154|   184k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|   184k|                            tokens.emplace_back(ParseToken(
  156|   184k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|   184k|                                    current_line_number,
  158|   184k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|   184k|                            current_token = std::string_view{};
  161|   184k|                        }
  162|  90.1k|                        else
  163|  90.1k|                        {
  164|       |                            // Orphan colon
  165|  90.1k|                            token_begin = i;
  166|       |
  167|  90.1k|                            tokens.emplace_back(Token::Type::Colon,
  168|  90.1k|                                                source.substr(token_begin.unsafe(), 1),
  169|  90.1k|                                                current_line_number, current_column);
  170|  90.1k|                        }
  171|   275k|                        break;
  172|   179k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 179k, False: 3.50M]
  ------------------
  173|   211k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 32.0k, False: 3.65M]
  ------------------
  174|   362k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 151k, False: 3.53M]
  ------------------
  175|   362k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 191k, False: 171k]
  ------------------
  176|   191k|                        {
  177|   191k|                            tokens.emplace_back(ParseToken(
  178|   191k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   191k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   191k|                            current_token = std::string_view{};
  182|   191k|                        }
  183|       |
  184|   362k|                        Token::Type type;
  185|   362k|                        switch (c)
  186|   362k|                        {
  187|   179k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 179k, False: 183k]
  ------------------
  188|   179k|                                type = Token::Type::Comma;
  189|   179k|                                break;
  190|  32.0k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 32.0k, False: 330k]
  ------------------
  191|  32.0k|                                type = Token::Type::OpenBracket;
  192|  32.0k|                                break;
  193|   151k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 151k, False: 211k]
  ------------------
  194|   151k|                                type = Token::Type::ClosingBracket;
  195|   151k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 362k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|   362k|#endif
  201|   362k|                        }
  202|       |
  203|   362k|                        token_begin = i;
  204|       |
  205|   362k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|   362k|                                            current_line_number, current_column);
  207|   362k|                        break;
  208|       |
  209|  2.82M|                    default:
  ------------------
  |  Branch (209:21): [True: 2.82M, False: 861k]
  ------------------
  210|  2.82M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 551k, False: 2.27M]
  ------------------
  211|   551k|                        {
  212|   551k|                            token_begin = i;
  213|   551k|                        }
  214|       |
  215|       |                        // simply append the character
  216|  2.82M|                        current_token =
  217|  2.82M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  3.68M|                }
  219|  3.68M|            }
  220|       |
  221|  3.70M|            current_column += 1u;
  222|  3.70M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  8.34k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 6.39k, False: 1.94k]
  ------------------
  226|  6.39k|        {
  227|  6.39k|            tokens.emplace_back(
  228|  6.39k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  6.39k|                               current_line_number, current_column - current_token.length()));
  230|  6.39k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  8.34k|        tokens.finalize();
  234|       |
  235|  8.34k|        return tokens;
  236|  8.34k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   556k|    {
   11|   556k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 3.26k, False: 553k]
  |  Branch (11:35): [True: 1.79k, False: 1.47k]
  ------------------
   12|  1.79k|        {
   13|  1.79k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  1.79k|            if (number)
  ------------------
  |  Branch (15:17): [True: 595, False: 1.19k]
  ------------------
   16|    595|            {
   17|    595|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|    595|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|    595|            }
   20|       |
   21|  1.19k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  1.79k|        }
   23|       |
   24|   554k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 2.07k, False: 552k]
  |  Branch (24:35): [True: 2.39k, False: 550k]
  ------------------
   25|  4.46k|        {
   26|  4.46k|            return {Token::Type::Comment, token, line_number, column};
   27|  4.46k|        }
   28|       |
   29|   550k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 7.25k, False: 542k]
  ------------------
   30|  7.25k|        {
   31|  7.25k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  7.25k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  7.25k|        }
   34|       |
   35|   542k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 500, False: 542k]
  ------------------
   36|    500|        {
   37|    500|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|    500|        }
   39|       |
   40|   542k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 2.59k, False: 539k]
  ------------------
   41|  2.59k|        {
   42|  2.59k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  2.59k|                    static_cast<std::uint32_t>(id)};
   44|  2.59k|        }
   45|       |
   46|   539k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 3.13k, False: 536k]
  ------------------
   47|  3.13k|        {
   48|  3.13k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  3.13k|                    static_cast<std::uint32_t>(id)};
   50|  3.13k|        }
   51|       |
   52|   536k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 56.1k, False: 480k]
  ------------------
   53|  56.1k|        {
   54|  56.1k|            return {Token::Type::OpCode, token, line_number, column,
   55|  56.1k|                    static_cast<std::uint32_t>(opcode)};
   56|  56.1k|        }
   57|       |
   58|   480k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   536k|    }

LLVMFuzzerTestOneInput:
   12|  8.34k|{
   13|  8.34k|    static dlx::Processor processor;
   14|       |
   15|  8.34k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   16|       |
   17|       |    // Parse it
   18|  8.34k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  8.34k|    processor.ClearRegisters();
   22|  8.34k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  8.34k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 176, False: 8.17k]
  ------------------
   26|    176|    {
   27|    176|        processor.ExecuteCurrentProgram();
   28|    176|    }
   29|       |
   30|  8.34k|    return 0;
   31|  8.34k|}


_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  99.8k|        {
  173|  99.8k|            PHI_ASSERT(index < 3u);
  174|       |
  175|  99.8k|            switch (index.unsafe())
  176|  99.8k|            {
  177|  43.3k|                case 0:
  ------------------
  |  Branch (177:17): [True: 43.3k, False: 56.5k]
  ------------------
  178|  43.3k|                    return m_Arg1Type;
  179|       |
  180|  29.0k|                case 1:
  ------------------
  |  Branch (180:17): [True: 29.0k, False: 70.7k]
  ------------------
  181|  29.0k|                    return m_Arg2Type;
  182|       |
  183|  27.4k|                case 2:
  ------------------
  |  Branch (183:17): [True: 27.4k, False: 72.4k]
  ------------------
  184|  27.4k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 99.8k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  99.8k|#endif
  191|  99.8k|            }
  192|  99.8k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  25.0k|        {
  199|  25.0k|            phi::u8 number_of_argument_required = static_cast<phi::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  25.0k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 22.3k, False: 2.75k]
  ------------------
  203|  22.3k|            {
  204|  22.3k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  205|  22.3k|            }
  206|  25.0k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 11.6k, False: 13.4k]
  ------------------
  207|  11.6k|            {
  208|  11.6k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  209|  11.6k|            }
  210|  25.0k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 5.08k, False: 19.9k]
  ------------------
  211|  5.08k|            {
  212|  5.08k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  213|  5.08k|            }
  214|       |
  215|  25.0k|            return number_of_argument_required;
  216|  25.0k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  219|  7.93M|        {
  220|  7.93M|            return m_RegisterAccessType;
  221|  7.93M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  25.0k|        {
  225|  25.0k|            return m_Executor;
  226|  25.0k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  23.8M|    {
   38|  23.8M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  23.8M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  23.8M|                                         static_cast<underlying_t>(rhs));
   42|  23.8M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  23.8M|    {
   55|  23.8M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  23.8M|        return static_cast<underlying_t>(type & test) != 0;
   58|  23.8M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  41.6k|    {
   31|  41.6k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 564, False: 41.0k]
  ------------------
   32|    564|        {
   33|    564|            return true;
   34|    564|        }
   35|       |
   36|  41.0k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 534, False: 40.5k]
  ------------------
   37|    534|        {
   38|    534|            return true;
   39|    534|        }
   40|       |
   41|  40.5k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 14.0k, False: 26.4k]
  ------------------
   42|  14.0k|        {
   43|  14.0k|            return true;
   44|  14.0k|        }
   45|       |
   46|  26.4k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 228, False: 26.2k]
  ------------------
   47|    228|        {
   48|    228|            return true;
   49|    228|        }
   50|       |
   51|  26.2k|        return false;
   52|  26.4k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  26.2k|    {
   56|  26.2k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 26.2k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  26.2k|        const char first_char = token.at(0u);
   62|       |
   63|  26.2k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 5.30k, False: 20.9k]
  ------------------
   64|  5.30k|        {
   65|  5.30k|            return phi::is_alpha(first_char);
   66|  5.30k|        }
   67|       |
   68|  20.9k|        phi::boolean just_under_scores = (first_char == '_');
   69|  20.9k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 2.38k, False: 18.5k]
  |  Branch (69:13): [True: 1.68k, False: 19.2k]
  |  Branch (69:43): [True: 1.68k, False: 703]
  ------------------
   70|  1.68k|        {
   71|  1.68k|            return false;
   72|  1.68k|        }
   73|       |
   74|  63.4k|        for (phi::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 52.9k, False: 10.5k]
  ------------------
   75|  52.9k|        {
   76|  52.9k|            const char c{token.at(index)};
   77|       |
   78|  52.9k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 43.7k, False: 9.19k]
  ------------------
   79|  43.7k|            {
   80|  43.7k|                just_under_scores = false;
   81|  43.7k|            }
   82|  9.19k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 493, False: 8.70k]
  ------------------
   83|    493|            {
   84|    493|                continue;
   85|    493|            }
   86|  8.70k|            else
   87|  8.70k|            {
   88|  8.70k|                return false;
   89|  8.70k|            }
   90|  52.9k|        }
   91|       |
   92|  10.5k|        return !just_under_scores;
   93|  19.2k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   98|   133k|    {
   99|   133k|        if (token.is_empty())
  ------------------
  |  Branch (99:13): [True: 0, False: 133k]
  ------------------
  100|      0|        {
  101|      0|            return {};
  102|      0|        }
  103|       |
  104|   133k|        if (token.length() == 1u)
  ------------------
  |  Branch (104:13): [True: 18.6k, False: 114k]
  ------------------
  105|  18.6k|        {
  106|  18.6k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (106:17): [True: 2.54k, False: 16.0k]
  ------------------
  107|  2.54k|            {
  108|  2.54k|                return static_cast<phi::int16_t>(token.at(0u) - '0');
  109|  2.54k|            }
  110|       |
  111|  16.0k|            return {};
  112|  18.6k|        }
  113|       |
  114|       |        // Disallow trailing separators
  115|   114k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (115:13): [True: 395, False: 114k]
  ------------------
  116|    395|        {
  117|    395|            return {};
  118|    395|        }
  119|       |
  120|   114k|        phi::int32_t number{0};
  121|   114k|        phi::boolean is_negative{false};
  122|   114k|        phi::boolean starts_with_zero{false};
  123|   114k|        phi::boolean parsing_binary{false};
  124|   114k|        phi::boolean parsing_octal{false};
  125|   114k|        phi::boolean parsing_hexadecimal{false};
  126|   114k|        phi::boolean parsed_something{false};
  127|   114k|        phi::boolean parsed_separator{false};
  128|       |
  129|       |        // TODO: Move x'th character checks out of the for loop
  130|       |
  131|   127k|        for (phi::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (131:37): [True: 125k, False: 1.97k]
  ------------------
  132|   125k|        {
  133|   125k|            const char c{token.at(index)};
  134|       |
  135|       |            // First character
  136|   125k|            if (index == 0u)
  ------------------
  |  Branch (136:17): [True: 114k, False: 11.4k]
  ------------------
  137|   114k|            {
  138|   114k|                if (c == '+')
  ------------------
  |  Branch (138:21): [True: 210, False: 114k]
  ------------------
  139|    210|                {
  140|    210|                    continue;
  141|    210|                }
  142|       |
  143|   114k|                if (c == '-')
  ------------------
  |  Branch (143:21): [True: 940, False: 113k]
  ------------------
  144|    940|                {
  145|    940|                    is_negative = true;
  146|    940|                    continue;
  147|    940|                }
  148|       |
  149|   113k|                if (c == '0')
  ------------------
  |  Branch (149:21): [True: 2.13k, False: 111k]
  ------------------
  150|  2.13k|                {
  151|  2.13k|                    starts_with_zero = true;
  152|  2.13k|                    continue;
  153|  2.13k|                }
  154|       |
  155|   111k|                if (c == '\'')
  ------------------
  |  Branch (155:21): [True: 200, False: 110k]
  ------------------
  156|    200|                {
  157|    200|                    return {};
  158|    200|                }
  159|   111k|            }
  160|       |
  161|       |            // Second character
  162|   122k|            if (index == 1u)
  ------------------
  |  Branch (162:17): [True: 4.45k, False: 117k]
  ------------------
  163|  4.45k|            {
  164|  4.45k|                if (starts_with_zero)
  ------------------
  |  Branch (164:21): [True: 2.13k, False: 2.31k]
  ------------------
  165|  2.13k|                {
  166|       |                    // Binary
  167|  2.13k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (167:25): [True: 404, False: 1.73k]
  |  Branch (167:37): [True: 197, False: 1.53k]
  ------------------
  168|    601|                    {
  169|    601|                        parsing_binary = true;
  170|    601|                        continue;
  171|    601|                    }
  172|       |
  173|       |                    // Hexadecimal
  174|  1.53k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (174:25): [True: 261, False: 1.27k]
  |  Branch (174:37): [True: 278, False: 994]
  ------------------
  175|    539|                    {
  176|    539|                        parsing_hexadecimal = true;
  177|    539|                        continue;
  178|    539|                    }
  179|       |
  180|       |                    // Octal
  181|    994|                    parsing_octal = true;
  182|    994|                }
  183|  4.45k|            }
  184|       |
  185|       |            // Handle separators
  186|   121k|            if (c == '\'')
  ------------------
  |  Branch (186:17): [True: 525, False: 120k]
  ------------------
  187|    525|            {
  188|    525|                if (parsed_separator)
  ------------------
  |  Branch (188:21): [True: 194, False: 331]
  ------------------
  189|    194|                {
  190|    194|                    return {};
  191|    194|                }
  192|       |
  193|    331|                parsed_separator = true;
  194|    331|                continue;
  195|    525|            }
  196|       |
  197|       |            // Check for over/underflow
  198|   120k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (198:17): [True: 2.69k, False: 118k]
  |  Branch (198:32): [True: 194, False: 2.49k]
  ------------------
  199|    194|            {
  200|       |                // Would underflow
  201|    194|                return {};
  202|    194|            }
  203|   120k|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (203:17): [True: 118k, False: 2.49k]
  |  Branch (203:17): [True: 387, False: 120k]
  |  Branch (203:33): [True: 387, False: 117k]
  ------------------
  204|    387|            {
  205|       |                // Would overflow
  206|    387|                return {};
  207|    387|            }
  208|       |
  209|   120k|            parsed_separator = false;
  210|   120k|            parsed_something = true;
  211|       |
  212|   120k|            if (parsing_binary)
  ------------------
  |  Branch (212:17): [True: 626, False: 119k]
  ------------------
  213|    626|            {
  214|    626|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (214:21): [True: 223, False: 403]
  ------------------
  215|    223|                {
  216|    223|                    return {};
  217|    223|                }
  218|       |
  219|    403|                number <<= 1;
  220|    403|                number |= (c - '0');
  221|    403|            }
  222|   119k|            else if (parsing_octal)
  ------------------
  |  Branch (222:22): [True: 1.10k, False: 118k]
  ------------------
  223|  1.10k|            {
  224|  1.10k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (224:21): [True: 457, False: 649]
  ------------------
  225|    457|                {
  226|    457|                    return {};
  227|    457|                }
  228|       |
  229|    649|                number <<= 3;
  230|    649|                number |= (c - '0');
  231|    649|            }
  232|   118k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (232:22): [True: 1.06k, False: 117k]
  ------------------
  233|  1.06k|            {
  234|  1.06k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (234:21): [True: 331, False: 734]
  ------------------
  235|    331|                {
  236|    331|                    return {};
  237|    331|                }
  238|       |
  239|    734|                number <<= 4;
  240|    734|                number |= phi::hex_digit_value(c).unsafe();
  241|    734|            }
  242|   117k|            else
  243|   117k|            {
  244|   117k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (244:21): [True: 110k, False: 7.03k]
  ------------------
  245|   110k|                {
  246|   110k|                    return {};
  247|   110k|                }
  248|       |
  249|       |                // Disallow leading zeros
  250|  7.03k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (250:21): [True: 2.08k, False: 4.95k]
  |  Branch (250:36): [True: 197, False: 1.88k]
  ------------------
  251|    197|                {
  252|    197|                    return {};
  253|    197|                }
  254|       |
  255|  6.83k|                number *= 10;
  256|  6.83k|                number += (c - '0');
  257|  6.83k|            }
  258|   120k|        }
  259|       |
  260|  1.97k|        if (parsed_something)
  ------------------
  |  Branch (260:13): [True: 1.52k, False: 448]
  ------------------
  261|  1.52k|        {
  262|       |            // Check for over/underflow
  263|  1.52k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (263:17): [True: 524, False: 998]
  |  Branch (263:32): [True: 194, False: 330]
  ------------------
  264|    194|            {
  265|       |                // Would underflow
  266|    194|                return {};
  267|    194|            }
  268|  1.32k|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (268:17): [True: 998, False: 330]
  |  Branch (268:17): [True: 223, False: 1.10k]
  |  Branch (268:33): [True: 223, False: 775]
  ------------------
  269|    223|            {
  270|       |                // Would overflow
  271|    223|                return {};
  272|    223|            }
  273|       |
  274|  1.10k|            if (is_negative)
  ------------------
  |  Branch (274:17): [True: 330, False: 775]
  ------------------
  275|    330|            {
  276|    330|                return static_cast<phi::int16_t>(-number);
  277|    330|            }
  278|       |
  279|    775|            return static_cast<phi::int16_t>(number);
  280|  1.10k|        }
  281|       |
  282|    448|        return {};
  283|  1.97k|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   401k|        {
   12|   401k|            m_Value = value;
   13|   401k|        }
_ZNK3dlx14StatusRegister3GetEv:
   16|   150k|        {
   17|   150k|            return m_Value;
   18|   150k|        }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  6.39k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finalized);
   61|       |#endif
   62|       |
   63|  6.39k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 28.6k, False: 0]
  ------------------
   64|  28.6k|            {
   65|  28.6k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 6.39k, False: 22.2k]
  ------------------
   66|  6.39k|                {
   67|  6.39k|                    return &token;
   68|  6.39k|                }
   69|  28.6k|            }
   70|       |
   71|      0|            return nullptr;
   72|  6.39k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  33.7k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  33.7k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  33.7k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   135k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|   135k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   135k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  55.9k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  55.9k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  55.9k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
    8|   593k|    {
    9|   593k|        m_Value = val;
   10|   593k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   13|  1.71M|    {
   14|  1.71M|        return m_Value;
   15|  1.71M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   16|  25.0k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   21|  13.3k|    {
   22|  13.3k|        PHI_ASSERT(argument_number < 3u);
   23|       |
   24|  13.3k|        switch (argument_number.unsafe())
   25|  13.3k|        {
   26|  7.52k|            case 0u:
  ------------------
  |  Branch (26:13): [True: 7.52k, False: 5.85k]
  ------------------
   27|  7.52k|                m_Arg1 = argument;
   28|  7.52k|                break;
   29|  3.49k|            case 1u:
  ------------------
  |  Branch (29:13): [True: 3.49k, False: 9.88k]
  ------------------
   30|  3.49k|                m_Arg2 = argument;
   31|  3.49k|                break;
   32|  2.36k|            case 2u:
  ------------------
  |  Branch (32:13): [True: 2.36k, False: 11.0k]
  ------------------
   33|  2.36k|                m_Arg3 = argument;
   34|  2.36k|                break;
   35|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   36|      0|            default:
  ------------------
  |  Branch (36:13): [True: 0, False: 13.3k]
  ------------------
   37|      0|                PHI_ASSERT_NOT_REACHED();
   38|  13.3k|#endif
   39|  13.3k|        }
   40|  13.3k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   79|  7.93M|    {
   80|  7.93M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   81|  7.93M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   84|  7.93M|    {
   85|  7.93M|        return m_Info;
   86|  7.93M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   21|  88.5k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   24|  47.9M|    {
   25|  47.9M|        return m_Type;
   26|  47.9M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   73|  9.35M|    {
   74|  9.35M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   75|       |
   76|  9.35M|        return register_int;
   77|  9.35M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   80|  1.49M|    {
   81|  1.49M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   82|       |
   83|  1.49M|        return register_float;
   84|  1.49M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   88|  1.53M|    {
   89|  1.53M|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   90|       |
   91|  1.53M|        return immediate_value;
   92|  1.53M|    }
_ZNK3dlx19InstructionArgument21AsAddressDisplacementEv:
   96|      5|    {
   97|      5|        PHI_ASSERT(m_Type == ArgumentType::AddressDisplacement);
   98|       |
   99|      5|        return address_displacement;
  100|      5|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  103|   462k|    {
  104|   462k|        PHI_ASSERT(m_Type == ArgumentType::Label);
  105|       |
  106|   462k|        return label;
  107|   462k|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  166|  7.24k|    {
  167|  7.24k|        InstructionArgument arg;
  168|  7.24k|        arg.m_Type                   = ArgumentType::IntRegister;
  169|  7.24k|        arg.register_int.register_id = id;
  170|  7.24k|        return arg;
  171|  7.24k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  174|  1.81k|    {
  175|  1.81k|        InstructionArgument arg;
  176|  1.81k|        arg.m_Type                     = ArgumentType::FloatRegister;
  177|  1.81k|        arg.register_float.register_id = id;
  178|  1.81k|        return arg;
  179|  1.81k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  182|  1.37k|    {
  183|  1.37k|        InstructionArgument arg;
  184|  1.37k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  185|  1.37k|        arg.immediate_value.signed_value = value;
  186|  1.37k|        return arg;
  187|  1.37k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  191|    199|    {
  192|    199|        InstructionArgument arg;
  193|    199|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  194|    199|        arg.address_displacement.register_id  = id;
  195|    199|        arg.address_displacement.displacement = displacement;
  196|    199|        return arg;
  197|    199|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  200|  2.74k|    {
  201|  2.74k|        InstructionArgument arg;
  202|  2.74k|        arg.m_Type           = ArgumentType::Label;
  203|  2.74k|        arg.label.label_name = label_name;
  204|  2.74k|        return arg;
  205|  2.74k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  350|  50.7k|        {
  351|  50.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  352|  50.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  353|  50.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  354|       |
  355|  50.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  356|  50.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  357|       |
  358|  50.7k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  359|  50.7k|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  363|  96.5k|        {
  364|  96.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  365|  96.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  366|  96.5k|            const auto& imm_value = arg3.AsImmediateValue();
  367|       |
  368|  96.5k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  369|       |
  370|  96.5k|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  371|  96.5k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  375|  28.8k|        {
  376|  28.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  377|  28.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  378|  28.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  379|       |
  380|  28.8k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  381|  28.8k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  382|       |
  383|  28.8k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  384|  28.8k|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  388|  42.1k|        {
  389|  42.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  390|  42.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  391|  42.1k|            const auto& imm_value = arg3.AsImmediateValue();
  392|       |
  393|  42.1k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  394|       |
  395|  42.1k|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  396|  42.1k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  400|  24.3k|        {
  401|  24.3k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  402|  24.3k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  403|  24.3k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  404|       |
  405|  24.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  406|  24.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  407|       |
  408|  24.3k|            const phi::f32 new_value = lhs_value + rhs_value;
  409|       |
  410|  24.3k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  411|  24.3k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  415|  17.9k|        {
  416|  17.9k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  417|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  418|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  419|       |
  420|  17.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  421|  17.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  422|       |
  423|  17.9k|            const phi::f64 new_value = lhs_value + rhs_value;
  424|       |
  425|  17.9k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  426|  17.9k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  430|   433k|        {
  431|   433k|            const auto& dest_reg = arg1.AsRegisterInt();
  432|   433k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  433|   433k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  434|       |
  435|   433k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  436|   433k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  437|       |
  438|   433k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  439|   433k|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  443|   174k|        {
  444|   174k|            const auto& dest_reg  = arg1.AsRegisterInt();
  445|   174k|            const auto& src_reg   = arg2.AsRegisterInt();
  446|   174k|            const auto& imm_value = arg3.AsImmediateValue();
  447|       |
  448|   174k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  449|       |
  450|   174k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  451|   174k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  455|  43.3k|        {
  456|  43.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  457|  43.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  458|  43.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  459|       |
  460|  43.3k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  461|  43.3k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  462|       |
  463|  43.3k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  464|  43.3k|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  468|  35.2k|        {
  469|  35.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  470|  35.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  471|  35.2k|            const auto& imm_value = arg3.AsImmediateValue();
  472|       |
  473|  35.2k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  474|       |
  475|  35.2k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  476|  35.2k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  480|  13.8k|        {
  481|  13.8k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  482|  13.8k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  483|  13.8k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  484|       |
  485|  13.8k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  486|  13.8k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  487|       |
  488|  13.8k|            const phi::f32 new_value = lhs_value - rhs_value;
  489|       |
  490|  13.8k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  491|  13.8k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  495|  13.4k|        {
  496|  13.4k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  497|  13.4k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  498|  13.4k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  499|       |
  500|  13.4k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  501|  13.4k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  502|       |
  503|  13.4k|            const phi::f64 new_value = lhs_value - rhs_value;
  504|       |
  505|  13.4k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  506|  13.4k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  510|  29.3k|        {
  511|  29.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  512|  29.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  513|  29.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  514|       |
  515|  29.3k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  516|  29.3k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  517|       |
  518|  29.3k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  519|  29.3k|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  523|   150k|        {
  524|   150k|            const auto& dest_reg  = arg1.AsRegisterInt();
  525|   150k|            const auto& src_reg   = arg2.AsRegisterInt();
  526|   150k|            const auto& imm_value = arg3.AsImmediateValue();
  527|       |
  528|   150k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  529|       |
  530|   150k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  531|   150k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  535|  30.5k|        {
  536|  30.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  537|  30.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  538|  30.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  539|       |
  540|  30.5k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  541|  30.5k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  542|       |
  543|  30.5k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  544|  30.5k|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  548|  41.2k|        {
  549|  41.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  550|  41.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  551|  41.2k|            const auto& imm_value = arg3.AsImmediateValue();
  552|       |
  553|  41.2k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  554|       |
  555|  41.2k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  556|  41.2k|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  560|  17.9k|        {
  561|  17.9k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  562|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  563|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  564|       |
  565|  17.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  566|  17.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  567|       |
  568|  17.9k|            const phi::f32 new_value = lhs_value * rhs_value;
  569|       |
  570|  17.9k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  571|  17.9k|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  575|  17.9k|        {
  576|  17.9k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  577|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  578|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  579|       |
  580|  17.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  581|  17.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  582|       |
  583|  17.9k|            const phi::f64 new_value = lhs_value * rhs_value;
  584|       |
  585|  17.9k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  586|  17.9k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  590|  19.6k|        {
  591|  19.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  592|  19.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  593|  19.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  594|       |
  595|  19.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  596|  19.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  597|       |
  598|  19.6k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  599|  19.6k|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  603|  24.3k|        {
  604|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  605|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  606|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
  607|       |
  608|  24.3k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  609|       |
  610|  24.3k|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  611|  24.3k|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  615|  9.47k|        {
  616|  9.47k|            const auto& dest_reg = arg1.AsRegisterInt();
  617|  9.47k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  618|  9.47k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  619|       |
  620|  9.47k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  621|  9.47k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  622|       |
  623|  9.47k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  624|  9.47k|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  628|  24.3k|        {
  629|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  630|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  631|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
  632|       |
  633|  24.3k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  634|       |
  635|  24.3k|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  636|  24.3k|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  640|      1|        {
  641|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  642|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  643|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  644|       |
  645|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  646|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  647|       |
  648|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (648:17): [True: 1, False: 0]
  ------------------
  649|      1|            {
  650|      1|                processor.Raise(Exception::DivideByZero);
  651|      1|                return;
  652|      1|            }
  653|       |
  654|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  655|       |
  656|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  657|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  661|      1|        {
  662|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  663|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  664|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  665|       |
  666|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  667|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  668|       |
  669|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (669:17): [True: 1, False: 0]
  ------------------
  670|      1|            {
  671|      1|                processor.Raise(Exception::DivideByZero);
  672|      1|                return;
  673|      1|            }
  674|       |
  675|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  676|       |
  677|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  678|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  682|  30.4k|        {
  683|  30.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  684|  30.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  685|  30.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  686|       |
  687|  30.4k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  688|  30.4k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  689|       |
  690|  30.4k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  691|  30.4k|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  695|  50.3k|        {
  696|  50.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  697|  50.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  698|  50.3k|            const auto& imm_value = arg3.AsImmediateValue();
  699|       |
  700|  50.3k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  701|  50.3k|            phi::i32 shift_value = imm_value.signed_value;
  702|       |
  703|  50.3k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  704|  50.3k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  708|  57.7k|        {
  709|  57.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  710|  57.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  711|  57.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  712|       |
  713|  57.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  714|  57.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  715|       |
  716|  57.7k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  717|  57.7k|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  721|  72.6k|        {
  722|  72.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
  723|  72.6k|            const auto& src_reg   = arg2.AsRegisterInt();
  724|  72.6k|            const auto& imm_value = arg3.AsImmediateValue();
  725|       |
  726|  72.6k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  727|  72.6k|            phi::i32 shift_value = imm_value.signed_value;
  728|       |
  729|  72.6k|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  730|  72.6k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  734|  57.1k|        {
  735|  57.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  736|  57.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  737|  57.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  738|       |
  739|  57.1k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  740|  57.1k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  741|       |
  742|  57.1k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  743|  57.1k|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  747|  66.3k|        {
  748|  66.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  749|  66.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  750|  66.3k|            const auto& imm_value = arg3.AsImmediateValue();
  751|       |
  752|  66.3k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  753|  66.3k|            phi::i32 shift_value = imm_value.signed_value;
  754|       |
  755|  66.3k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  756|  66.3k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  760|  62.6k|        {
  761|  62.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  762|  62.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  763|  62.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  764|       |
  765|  62.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  766|  62.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  767|       |
  768|  62.6k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  769|  62.6k|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  773|  78.3k|        {
  774|  78.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  775|  78.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  776|  78.3k|            const auto& imm_value = arg3.AsImmediateValue();
  777|       |
  778|  78.3k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  779|  78.3k|            phi::i32 shift_value = imm_value.signed_value;
  780|       |
  781|  78.3k|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  782|  78.3k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  786|  17.9k|        {
  787|  17.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  788|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  789|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  790|       |
  791|  17.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  792|  17.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  793|  17.9k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  794|       |
  795|  17.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  796|  17.9k|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  800|  22.8k|        {
  801|  22.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  802|  22.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  803|  22.8k|            const auto& imm_value = arg3.AsImmediateValue();
  804|       |
  805|  22.8k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  806|  22.8k|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  807|       |
  808|  22.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  809|  22.8k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  813|  80.8k|        {
  814|  80.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  815|  80.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  816|  80.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  817|       |
  818|  80.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  819|  80.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  820|  80.8k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  821|       |
  822|  80.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  823|  80.8k|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  827|  14.0k|        {
  828|  14.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  829|  14.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  830|  14.0k|            const auto& imm_value = arg3.AsImmediateValue();
  831|       |
  832|  14.0k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  833|  14.0k|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  834|       |
  835|  14.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  836|  14.0k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  840|  27.0k|        {
  841|  27.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  842|  27.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  843|  27.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  844|       |
  845|  27.0k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  846|  27.0k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  847|  27.0k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  848|       |
  849|  27.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  850|  27.0k|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  854|  13.3k|        {
  855|  13.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  856|  13.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  857|  13.3k|            const auto& imm_value = arg3.AsImmediateValue();
  858|       |
  859|  13.3k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  860|  13.3k|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  861|       |
  862|  13.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  863|  13.3k|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  867|  13.5k|        {
  868|  13.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  869|  13.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  870|  13.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  871|       |
  872|  13.5k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  873|  13.5k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  874|       |
  875|  13.5k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (875:41): [True: 0, False: 13.5k]
  ------------------
  876|       |
  877|  13.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  878|  13.5k|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  882|  27.4k|        {
  883|  27.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  884|  27.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  885|  27.4k|            const auto& imm_value = arg3.AsImmediateValue();
  886|       |
  887|  27.4k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  888|       |
  889|  27.4k|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (889:41): [True: 19.9k, False: 7.57k]
  ------------------
  890|       |
  891|  27.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  892|  27.4k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  896|  19.4k|        {
  897|  19.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  898|  19.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  899|  19.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  900|       |
  901|  19.4k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  902|  19.4k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  903|       |
  904|  19.4k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (904:41): [True: 0, False: 19.4k]
  ------------------
  905|       |
  906|  19.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  907|  19.4k|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  911|  24.3k|        {
  912|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  913|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  914|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
  915|       |
  916|  24.3k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  917|       |
  918|  24.3k|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (918:41): [True: 24.3k, False: 0]
  ------------------
  919|       |
  920|  24.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  921|  24.3k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  925|  41.8k|        {
  926|  41.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  927|  41.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  928|       |
  929|  41.8k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  930|  41.8k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  931|       |
  932|  41.8k|            const phi::boolean new_value = (lhs_value < rhs_value);
  933|       |
  934|  41.8k|            processor.SetFPSRValue(new_value);
  935|  41.8k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  939|  13.2k|        {
  940|  13.2k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  941|  13.2k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  942|       |
  943|  13.2k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  944|  13.2k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  945|       |
  946|  13.2k|            const phi::boolean new_value = (lhs_value < rhs_value);
  947|       |
  948|  13.2k|            processor.SetFPSRValue(new_value);
  949|  13.2k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  953|  25.9k|        {
  954|  25.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  955|  25.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  956|  25.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  957|       |
  958|  25.9k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  959|  25.9k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  960|       |
  961|  25.9k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (961:41): [True: 2.55k, False: 23.3k]
  ------------------
  962|       |
  963|  25.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  964|  25.9k|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  968|  29.5k|        {
  969|  29.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  970|  29.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  971|  29.5k|            const auto& imm_value = arg3.AsImmediateValue();
  972|       |
  973|  29.5k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  974|       |
  975|  29.5k|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (975:41): [True: 0, False: 29.5k]
  ------------------
  976|       |
  977|  29.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  978|  29.5k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  982|  14.8k|        {
  983|  14.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  984|  14.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  985|  14.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  986|       |
  987|  14.8k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  988|  14.8k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  989|       |
  990|  14.8k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (990:41): [True: 871, False: 14.0k]
  ------------------
  991|       |
  992|  14.8k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  993|  14.8k|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  997|  24.3k|        {
  998|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  999|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1000|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1001|       |
 1002|  24.3k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1003|       |
 1004|  24.3k|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1004:41): [True: 0, False: 24.3k]
  ------------------
 1005|       |
 1006|  24.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1007|  24.3k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1011|  68.4k|        {
 1012|  68.4k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1013|  68.4k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1014|       |
 1015|  68.4k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1016|  68.4k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1017|       |
 1018|  68.4k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1019|       |
 1020|  68.4k|            processor.SetFPSRValue(new_value);
 1021|  68.4k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1025|  25.2k|        {
 1026|  25.2k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1027|  25.2k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1028|       |
 1029|  25.2k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1030|  25.2k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1031|       |
 1032|  25.2k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1033|       |
 1034|  25.2k|            processor.SetFPSRValue(new_value);
 1035|  25.2k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1039|   379k|        {
 1040|   379k|            const auto& dest_reg = arg1.AsRegisterInt();
 1041|   379k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1042|   379k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1043|       |
 1044|   379k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1045|   379k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1046|       |
 1047|   379k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1047:41): [True: 285k, False: 93.9k]
  ------------------
 1048|       |
 1049|   379k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1050|   379k|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1054|  27.6k|        {
 1055|  27.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1056|  27.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1057|  27.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1058|       |
 1059|  27.6k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1060|       |
 1061|  27.6k|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1061:41): [True: 27.6k, False: 0]
  ------------------
 1062|       |
 1063|  27.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1064|  27.6k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1068|  17.9k|        {
 1069|  17.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1070|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1071|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1072|       |
 1073|  17.9k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1074|  17.9k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1075|       |
 1076|  17.9k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1076:41): [True: 17.9k, False: 0]
  ------------------
 1077|       |
 1078|  17.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1079|  17.9k|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1083|  19.6k|        {
 1084|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1085|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1086|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1087|       |
 1088|  19.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1089|       |
 1090|  19.6k|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1090:41): [True: 19.6k, False: 0]
  ------------------
 1091|       |
 1092|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1093|  19.6k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1097|  48.8k|        {
 1098|  48.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1099|  48.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1100|       |
 1101|  48.8k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1102|  48.8k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1103|       |
 1104|  48.8k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1105|       |
 1106|  48.8k|            processor.SetFPSRValue(new_value);
 1107|  48.8k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1111|  43.6k|        {
 1112|  43.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1113|  43.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1114|       |
 1115|  43.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1116|  43.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1117|       |
 1118|  43.6k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1119|       |
 1120|  43.6k|            processor.SetFPSRValue(new_value);
 1121|  43.6k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1125|  15.7k|        {
 1126|  15.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1127|  15.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1128|  15.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1129|       |
 1130|  15.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1131|  15.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1132|       |
 1133|  15.7k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1133:41): [True: 13.7k, False: 2.00k]
  ------------------
 1134|       |
 1135|  15.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1136|  15.7k|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1140|  24.3k|        {
 1141|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1142|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1143|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1144|       |
 1145|  24.3k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1146|       |
 1147|  24.3k|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1147:41): [True: 5.83k, False: 18.4k]
  ------------------
 1148|       |
 1149|  24.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1150|  24.3k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1154|  11.0k|        {
 1155|  11.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1156|  11.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1157|  11.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1158|       |
 1159|  11.0k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1160|  11.0k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1161|       |
 1162|  11.0k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1162:41): [True: 11.0k, False: 0]
  ------------------
 1163|       |
 1164|  11.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1165|  11.0k|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1169|  19.6k|        {
 1170|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1171|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1172|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1173|       |
 1174|  19.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1175|       |
 1176|  19.6k|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1176:41): [True: 3.33k, False: 16.3k]
  ------------------
 1177|       |
 1178|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1179|  19.6k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1183|  22.7k|        {
 1184|  22.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1185|  22.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1186|       |
 1187|  22.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1188|  22.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1189|       |
 1190|  22.7k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1191|       |
 1192|  22.7k|            processor.SetFPSRValue(new_value);
 1193|  22.7k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1197|  30.9k|        {
 1198|  30.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1199|  30.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1200|       |
 1201|  30.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1202|  30.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1203|       |
 1204|  30.9k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1205|       |
 1206|  30.9k|            processor.SetFPSRValue(new_value);
 1207|  30.9k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1211|  22.8k|        {
 1212|  22.8k|            const auto& dest_reg = arg1.AsRegisterInt();
 1213|  22.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1214|  22.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1215|       |
 1216|  22.8k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1217|  22.8k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1218|       |
 1219|  22.8k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1219:41): [True: 19.9k, False: 2.90k]
  ------------------
 1220|       |
 1221|  22.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1222|  22.8k|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1226|  24.3k|        {
 1227|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1228|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1229|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1230|       |
 1231|  24.3k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1232|       |
 1233|  24.3k|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1233:41): [True: 1, False: 24.3k]
  ------------------
 1234|       |
 1235|  24.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1236|  24.3k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1240|  22.8k|        {
 1241|  22.8k|            const auto& dest_reg = arg1.AsRegisterInt();
 1242|  22.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1243|  22.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1244|       |
 1245|  22.8k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1246|  22.8k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1247|       |
 1248|  22.8k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1248:41): [True: 20.8k, False: 2.00k]
  ------------------
 1249|       |
 1250|  22.8k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1251|  22.8k|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1255|  23.5k|        {
 1256|  23.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1257|  23.5k|            const auto& src_reg   = arg2.AsRegisterInt();
 1258|  23.5k|            const auto& imm_value = arg3.AsImmediateValue();
 1259|       |
 1260|  23.5k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1261|       |
 1262|  23.5k|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1262:41): [True: 1, False: 23.5k]
  ------------------
 1263|       |
 1264|  23.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1265|  23.5k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1269|  22.7k|        {
 1270|  22.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1271|  22.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1272|       |
 1273|  22.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1274|  22.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1275|       |
 1276|  22.7k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1277|       |
 1278|  22.7k|            processor.SetFPSRValue(new_value);
 1279|  22.7k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1283|  27.6k|        {
 1284|  27.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1285|  27.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1286|       |
 1287|  27.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1288|  27.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1289|       |
 1290|  27.6k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1291|       |
 1292|  27.6k|            processor.SetFPSRValue(new_value);
 1293|  27.6k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1297|  18.4k|        {
 1298|  18.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1299|  18.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1300|  18.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1301|       |
 1302|  18.4k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1303|  18.4k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1304|       |
 1305|  18.4k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1305:41): [True: 1.66k, False: 16.7k]
  ------------------
 1306|       |
 1307|  18.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1308|  18.4k|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1312|  26.1k|        {
 1313|  26.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1314|  26.1k|            const auto& src_reg   = arg2.AsRegisterInt();
 1315|  26.1k|            const auto& imm_value = arg3.AsImmediateValue();
 1316|       |
 1317|  26.1k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1318|       |
 1319|  26.1k|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1319:41): [True: 22.4k, False: 3.66k]
  ------------------
 1320|       |
 1321|  26.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1322|  26.1k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1326|  17.9k|        {
 1327|  17.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1328|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1329|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1330|       |
 1331|  17.9k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1332|  17.9k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1333|       |
 1334|  17.9k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1334:41): [True: 0, False: 17.9k]
  ------------------
 1335|       |
 1336|  17.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1337|  17.9k|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1341|  19.6k|        {
 1342|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1343|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1344|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1345|       |
 1346|  19.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1347|       |
 1348|  19.6k|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1348:41): [True: 19.6k, False: 0]
  ------------------
 1349|       |
 1350|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1351|  19.6k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1355|  23.7k|        {
 1356|  23.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1357|  23.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1358|       |
 1359|  23.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1360|  23.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1361|       |
 1362|  23.7k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1363|       |
 1364|  23.7k|            processor.SetFPSRValue(new_value);
 1365|  23.7k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1369|  26.3k|        {
 1370|  26.3k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1371|  26.3k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1372|       |
 1373|  26.3k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1374|  26.3k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1375|       |
 1376|  26.3k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1377|       |
 1378|  26.3k|            processor.SetFPSRValue(new_value);
 1379|  26.3k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1383|  76.1k|        {
 1384|  76.1k|            const auto& test_reg   = arg1.AsRegisterInt();
 1385|  76.1k|            const auto& jump_label = arg2.AsLabel();
 1386|       |
 1387|  76.1k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1388|       |
 1389|  76.1k|            if (test_value == 0)
  ------------------
  |  Branch (1389:17): [True: 59.9k, False: 16.1k]
  ------------------
 1390|  59.9k|            {
 1391|  59.9k|                JumpToLabel(processor, jump_label.label_name);
 1392|  59.9k|            }
 1393|  76.1k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1397|  45.7k|        {
 1398|  45.7k|            const auto& test_reg   = arg1.AsRegisterInt();
 1399|  45.7k|            const auto& jump_label = arg2.AsLabel();
 1400|       |
 1401|  45.7k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1402|       |
 1403|  45.7k|            if (test_value != 0)
  ------------------
  |  Branch (1403:17): [True: 26.1k, False: 19.6k]
  ------------------
 1404|  26.1k|            {
 1405|  26.1k|                JumpToLabel(processor, jump_label.label_name);
 1406|  26.1k|            }
 1407|  45.7k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1411|  47.9k|        {
 1412|  47.9k|            const auto& jump_label = arg1.AsLabel();
 1413|       |
 1414|  47.9k|            phi::boolean test_value = processor.GetFPSRValue();
 1415|       |
 1416|  47.9k|            if (test_value)
  ------------------
  |  Branch (1416:17): [True: 26.1k, False: 21.8k]
  ------------------
 1417|  26.1k|            {
 1418|  26.1k|                JumpToLabel(processor, jump_label.label_name);
 1419|  26.1k|            }
 1420|  47.9k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1424|   102k|        {
 1425|   102k|            const auto& jump_label = arg1.AsLabel();
 1426|       |
 1427|   102k|            phi::boolean test_value = processor.GetFPSRValue();
 1428|       |
 1429|   102k|            if (!test_value)
  ------------------
  |  Branch (1429:17): [True: 63.5k, False: 38.8k]
  ------------------
 1430|  63.5k|            {
 1431|  63.5k|                JumpToLabel(processor, jump_label.label_name);
 1432|  63.5k|            }
 1433|   102k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1437|   133k|        {
 1438|   133k|            const auto& jump_label = arg1.AsLabel();
 1439|       |
 1440|   133k|            JumpToLabel(processor, jump_label.label_name);
 1441|   133k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1445|  1.86M|        {
 1446|  1.86M|            const auto& jump_register = arg1.AsRegisterInt();
 1447|       |
 1448|  1.86M|            JumpToRegister(processor, jump_register.register_id);
 1449|  1.86M|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1453|  56.0k|        {
 1454|  56.0k|            const auto& jump_label = arg1.AsLabel();
 1455|       |
 1456|  56.0k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1457|  56.0k|                                                  processor.GetNextProgramCounter());
 1458|       |
 1459|  56.0k|            JumpToLabel(processor, jump_label.label_name);
 1460|  56.0k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1464|  27.3k|        {
 1465|  27.3k|            const auto& jump_register = arg1.AsRegisterInt();
 1466|       |
 1467|  27.3k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1468|  27.3k|                                                  processor.GetNextProgramCounter());
 1469|       |
 1470|  27.3k|            JumpToRegister(processor, jump_register.register_id);
 1471|  27.3k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1475|  16.7k|        {
 1476|  16.7k|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1477|  16.7k|            phi::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1478|       |
 1479|  16.7k|            imm_value = static_cast<phi::int32_t>((imm_value << 16) & 0xFFFF0000);
 1480|       |
 1481|  16.7k|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1482|  16.7k|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1486|  9.64k|        {
 1487|  9.64k|            const auto& dest_reg = arg1.AsRegisterInt();
 1488|       |
 1489|  9.64k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1490|       |
 1491|  9.64k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1491:17): [True: 1, False: 9.64k]
  ------------------
 1492|      1|            {
 1493|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1494|      1|                return;
 1495|      1|            }
 1496|       |
 1497|  9.64k|            phi::i32 address = optional_address.value();
 1498|       |
 1499|  9.64k|            auto optional_value =
 1500|  9.64k|                    processor.GetMemory().LoadByte(static_cast<phi::size_t>(address.unsafe()));
 1501|       |
 1502|  9.64k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1502:17): [True: 2, False: 9.64k]
  ------------------
 1503|      2|            {
 1504|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1505|      2|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1506|      2|                return;
 1507|      2|            }
 1508|       |
 1509|  9.64k|            phi::i32 value = optional_value.value();
 1510|       |
 1511|  9.64k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1512|  9.64k|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1516|  19.6k|        {
 1517|  19.6k|            const auto& dest_reg = arg1.AsRegisterInt();
 1518|       |
 1519|  19.6k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1520|       |
 1521|  19.6k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1521:17): [True: 1, False: 19.6k]
  ------------------
 1522|      1|            {
 1523|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1524|      1|                return;
 1525|      1|            }
 1526|       |
 1527|  19.6k|            phi::i32 address = optional_address.value();
 1528|       |
 1529|  19.6k|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1530|  19.6k|                    static_cast<phi::size_t>(address.unsafe()));
 1531|       |
 1532|  19.6k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1532:17): [True: 2, False: 19.6k]
  ------------------
 1533|      2|            {
 1534|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1535|      2|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1536|      2|                return;
 1537|      2|            }
 1538|       |
 1539|  19.6k|            phi::u32 value = optional_value.value();
 1540|       |
 1541|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1542|  19.6k|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1546|  24.3k|        {
 1547|  24.3k|            const auto& dest_reg = arg1.AsRegisterInt();
 1548|       |
 1549|  24.3k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1550|       |
 1551|  24.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1551:17): [True: 1, False: 24.3k]
  ------------------
 1552|      1|            {
 1553|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1554|      1|                return;
 1555|      1|            }
 1556|       |
 1557|  24.3k|            phi::i32 address = optional_address.value();
 1558|       |
 1559|  24.3k|            auto optional_value =
 1560|  24.3k|                    processor.GetMemory().LoadHalfWord(static_cast<phi::size_t>(address.unsafe()));
 1561|       |
 1562|  24.3k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1562:17): [True: 4, False: 24.3k]
  ------------------
 1563|      4|            {
 1564|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1565|      4|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1566|      4|                return;
 1567|      4|            }
 1568|       |
 1569|  24.3k|            phi::i32 value = optional_value.value();
 1570|       |
 1571|  24.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1572|  24.3k|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1576|  17.9k|        {
 1577|  17.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1578|       |
 1579|  17.9k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1580|       |
 1581|  17.9k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1581:17): [True: 1, False: 17.9k]
  ------------------
 1582|      1|            {
 1583|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1584|      1|                return;
 1585|      1|            }
 1586|       |
 1587|  17.9k|            phi::i32 address = optional_address.value();
 1588|       |
 1589|  17.9k|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1590|  17.9k|                    static_cast<phi::size_t>(address.unsafe()));
 1591|       |
 1592|  17.9k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1592:17): [True: 5, False: 17.9k]
  ------------------
 1593|      5|            {
 1594|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1595|      5|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1596|      5|                return;
 1597|      5|            }
 1598|       |
 1599|  17.9k|            phi::u32 value = optional_value.value();
 1600|       |
 1601|  17.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1602|  17.9k|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1606|  17.9k|        {
 1607|  17.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1608|       |
 1609|  17.9k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1610|       |
 1611|  17.9k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1611:17): [True: 1, False: 17.9k]
  ------------------
 1612|      1|            {
 1613|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1614|      1|                return;
 1615|      1|            }
 1616|       |
 1617|  17.9k|            phi::i32 address = optional_address.value();
 1618|       |
 1619|  17.9k|            auto optional_value =
 1620|  17.9k|                    processor.GetMemory().LoadWord(static_cast<phi::size_t>(address.unsafe()));
 1621|       |
 1622|  17.9k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1622:17): [True: 3, False: 17.9k]
  ------------------
 1623|      3|            {
 1624|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1625|      3|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1626|      3|                return;
 1627|      3|            }
 1628|       |
 1629|  17.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1630|  17.9k|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1634|  11.7k|        {
 1635|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1636|       |
 1637|  11.7k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1638|       |
 1639|  11.7k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1639:17): [True: 1, False: 11.7k]
  ------------------
 1640|      1|            {
 1641|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1642|      1|                return;
 1643|      1|            }
 1644|       |
 1645|  11.7k|            phi::i32 address = optional_address.value();
 1646|       |
 1647|  11.7k|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1648|  11.7k|                    static_cast<phi::size_t>(address.unsafe()));
 1649|       |
 1650|  11.7k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1650:17): [True: 3, False: 11.7k]
  ------------------
 1651|      3|            {
 1652|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1653|      3|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1654|      3|                return;
 1655|      3|            }
 1656|       |
 1657|  11.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1658|  11.7k|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1662|  14.0k|        {
 1663|  14.0k|            const auto& dest_reg = arg1.AsRegisterFloat();
 1664|       |
 1665|  14.0k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1666|       |
 1667|  14.0k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1667:17): [True: 1, False: 14.0k]
  ------------------
 1668|      1|            {
 1669|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1670|      1|                return;
 1671|      1|            }
 1672|       |
 1673|  14.0k|            phi::i32 address = optional_address.value();
 1674|       |
 1675|  14.0k|            auto optional_value =
 1676|  14.0k|                    processor.GetMemory().LoadFloat(static_cast<phi::size_t>(address.unsafe()));
 1677|       |
 1678|  14.0k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1678:17): [True: 5, False: 14.0k]
  ------------------
 1679|      5|            {
 1680|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1681|      5|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1682|      5|                return;
 1683|      5|            }
 1684|       |
 1685|  14.0k|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1686|  14.0k|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1690|  21.4k|        {
 1691|  21.4k|            const auto& dest_reg = arg1.AsRegisterFloat();
 1692|       |
 1693|  21.4k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1694|       |
 1695|  21.4k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1695:17): [True: 1, False: 21.4k]
  ------------------
 1696|      1|            {
 1697|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1698|      1|                return;
 1699|      1|            }
 1700|       |
 1701|  21.4k|            phi::i32 address = optional_address.value();
 1702|       |
 1703|  21.4k|            auto optional_value =
 1704|  21.4k|                    processor.GetMemory().LoadDouble(static_cast<phi::size_t>(address.unsafe()));
 1705|       |
 1706|  21.4k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1706:17): [True: 5, False: 21.4k]
  ------------------
 1707|      5|            {
 1708|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1709|      5|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1710|      5|                return;
 1711|      5|            }
 1712|       |
 1713|  21.4k|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1714|  21.4k|        }
_ZN3dlx4impl2SBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1718|  31.0k|        {
 1719|  31.0k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1720|       |
 1721|  31.0k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1721:17): [True: 1, False: 31.0k]
  ------------------
 1722|      1|            {
 1723|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1724|      1|                return;
 1725|      1|            }
 1726|       |
 1727|  31.0k|            phi::i32 address = optional_address.value();
 1728|       |
 1729|  31.0k|            const auto& src_reg = arg2.AsRegisterInt();
 1730|       |
 1731|  31.0k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1732|       |
 1733|  31.0k|            phi::boolean success =
 1734|  31.0k|                    processor.GetMemory().StoreByte(static_cast<phi::size_t>(address.unsafe()),
 1735|  31.0k|                                                    static_cast<phi::int8_t>(value.unsafe()));
 1736|       |
 1737|  31.0k|            if (!success)
  ------------------
  |  Branch (1737:17): [True: 5, False: 31.0k]
  ------------------
 1738|      5|            {
 1739|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1740|      5|                DLX_ERROR("Failed to store byte at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1741|      5|            }
 1742|  31.0k|        }
_ZN3dlx4impl3SBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1746|  24.3k|        {
 1747|  24.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1748|       |
 1749|  24.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1749:17): [True: 1, False: 24.3k]
  ------------------
 1750|      1|            {
 1751|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1752|      1|                return;
 1753|      1|            }
 1754|       |
 1755|  24.3k|            phi::i32 address = optional_address.value();
 1756|       |
 1757|  24.3k|            const auto& src_reg = arg2.AsRegisterInt();
 1758|       |
 1759|  24.3k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1760|       |
 1761|  24.3k|            phi::boolean success = processor.GetMemory().StoreUnsignedByte(
 1762|  24.3k|                    static_cast<phi::size_t>(address.unsafe()),
 1763|  24.3k|                    static_cast<phi::uint8_t>(value.unsafe()));
 1764|       |
 1765|  24.3k|            if (!success)
  ------------------
  |  Branch (1765:17): [True: 4, False: 24.3k]
  ------------------
 1766|      4|            {
 1767|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1768|      4|                DLX_ERROR("Failed to store unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1769|      4|            }
 1770|  24.3k|        }
_ZN3dlx4impl2SHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1774|  24.2k|        {
 1775|  24.2k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1776|       |
 1777|  24.2k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1777:17): [True: 1, False: 24.2k]
  ------------------
 1778|      1|            {
 1779|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1780|      1|                return;
 1781|      1|            }
 1782|       |
 1783|  24.2k|            phi::i32 address = optional_address.value();
 1784|       |
 1785|  24.2k|            const auto& src_reg = arg2.AsRegisterInt();
 1786|       |
 1787|  24.2k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1788|       |
 1789|  24.2k|            phi::boolean success =
 1790|  24.2k|                    processor.GetMemory().StoreHalfWord(static_cast<phi::size_t>(address.unsafe()),
 1791|  24.2k|                                                        static_cast<phi::int16_t>(value.unsafe()));
 1792|       |
 1793|  24.2k|            if (!success)
  ------------------
  |  Branch (1793:17): [True: 3, False: 24.2k]
  ------------------
 1794|      3|            {
 1795|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1796|      3|                DLX_ERROR("Failed to store half word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1797|      3|            }
 1798|  24.2k|        }
_ZN3dlx4impl3SHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1802|  24.3k|        {
 1803|  24.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1804|       |
 1805|  24.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1805:17): [True: 1, False: 24.3k]
  ------------------
 1806|      1|            {
 1807|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1808|      1|                return;
 1809|      1|            }
 1810|       |
 1811|  24.3k|            phi::i32 address = optional_address.value();
 1812|       |
 1813|  24.3k|            const auto& src_reg = arg2.AsRegisterInt();
 1814|       |
 1815|  24.3k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1816|       |
 1817|  24.3k|            phi::boolean success = processor.GetMemory().StoreUnsignedHalfWord(
 1818|  24.3k|                    static_cast<phi::size_t>(address.unsafe()),
 1819|  24.3k|                    static_cast<phi::uint16_t>(value.unsafe()));
 1820|       |
 1821|  24.3k|            if (!success)
  ------------------
  |  Branch (1821:17): [True: 3, False: 24.3k]
  ------------------
 1822|      3|            {
 1823|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1824|      3|                DLX_ERROR("Failed to store unsigned half word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1825|      3|            }
 1826|  24.3k|        }
_ZN3dlx4impl2SWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1830|  21.2k|        {
 1831|  21.2k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1832|       |
 1833|  21.2k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1833:17): [True: 1, False: 21.2k]
  ------------------
 1834|      1|            {
 1835|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1836|      1|                return;
 1837|      1|            }
 1838|       |
 1839|  21.2k|            phi::i32 address = optional_address.value();
 1840|       |
 1841|  21.2k|            const auto& src_reg = arg2.AsRegisterInt();
 1842|       |
 1843|  21.2k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1844|       |
 1845|  21.2k|            phi::boolean success = processor.GetMemory().StoreWord(
 1846|  21.2k|                    static_cast<phi::size_t>(address.unsafe()), value);
 1847|       |
 1848|  21.2k|            if (!success)
  ------------------
  |  Branch (1848:17): [True: 2, False: 21.2k]
  ------------------
 1849|      2|            {
 1850|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1851|      2|                DLX_ERROR("Failed to store word at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1852|      2|            }
 1853|  21.2k|        }
_ZN3dlx4impl3SWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1857|  17.9k|        {
 1858|  17.9k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1859|       |
 1860|  17.9k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1860:17): [True: 1, False: 17.9k]
  ------------------
 1861|      1|            {
 1862|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1863|      1|                return;
 1864|      1|            }
 1865|       |
 1866|  17.9k|            phi::i32 address = optional_address.value();
 1867|       |
 1868|  17.9k|            const auto& src_reg = arg2.AsRegisterInt();
 1869|       |
 1870|  17.9k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1871|       |
 1872|  17.9k|            phi::boolean success = processor.GetMemory().StoreUnsignedWord(
 1873|  17.9k|                    static_cast<phi::size_t>(address.unsafe()), value);
 1874|       |
 1875|  17.9k|            if (!success)
  ------------------
  |  Branch (1875:17): [True: 3, False: 17.9k]
  ------------------
 1876|      3|            {
 1877|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1878|      3|                DLX_ERROR("Failed to store unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1879|      3|            }
 1880|  17.9k|        }
_ZN3dlx4impl2SFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1884|  18.3k|        {
 1885|  18.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1886|       |
 1887|  18.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1887:17): [True: 1, False: 18.3k]
  ------------------
 1888|      1|            {
 1889|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1890|      1|                return;
 1891|      1|            }
 1892|       |
 1893|  18.3k|            phi::i32 address = optional_address.value();
 1894|       |
 1895|  18.3k|            const auto& src_reg = arg2.AsRegisterFloat();
 1896|       |
 1897|  18.3k|            phi::f32 value = processor.FloatRegisterGetFloatValue(src_reg.register_id);
 1898|       |
 1899|  18.3k|            phi::boolean success = processor.GetMemory().StoreFloat(
 1900|  18.3k|                    static_cast<phi::size_t>(address.unsafe()), value);
 1901|       |
 1902|  18.3k|            if (!success)
  ------------------
  |  Branch (1902:17): [True: 4, False: 18.3k]
  ------------------
 1903|      4|            {
 1904|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1905|      4|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1906|      4|            }
 1907|  18.3k|        }
_ZN3dlx4impl2SDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1911|  24.3k|        {
 1912|  24.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1913|       |
 1914|  24.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1914:17): [True: 2, False: 24.3k]
  ------------------
 1915|      2|            {
 1916|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1917|      2|                return;
 1918|      2|            }
 1919|       |
 1920|  24.3k|            phi::i32 address = optional_address.value();
 1921|       |
 1922|  24.3k|            const auto& src_reg = arg2.AsRegisterFloat();
 1923|       |
 1924|  24.3k|            phi::f64 value = processor.FloatRegisterGetDoubleValue(src_reg.register_id);
 1925|       |
 1926|  24.3k|            phi::boolean success = processor.GetMemory().StoreDouble(
 1927|  24.3k|                    static_cast<phi::size_t>(address.unsafe()), value);
 1928|       |
 1929|  24.3k|            if (!success)
  ------------------
  |  Branch (1929:17): [True: 4, False: 24.3k]
  ------------------
 1930|      4|            {
 1931|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1932|      4|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1933|      4|            }
 1934|  24.3k|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1938|  13.7k|        {
 1939|  13.7k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1940|  13.7k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1941|       |
 1942|  13.7k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1943|       |
 1944|  13.7k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1945|  13.7k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1949|  14.6k|        {
 1950|  14.6k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1951|  14.6k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1952|       |
 1953|  14.6k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1954|       |
 1955|  14.6k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1956|  14.6k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1987|  13.8k|        {
 1988|  13.8k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1989|  13.8k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1990|       |
 1991|  13.8k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1992|       |
 1993|  13.8k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 1994|  13.8k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1998|  14.0k|        {
 1999|  14.0k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2000|  14.0k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2001|       |
 2002|  14.0k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2003|  14.0k|            const phi::int32_t converted_value_int = static_cast<phi::int32_t>(src_value);
 2004|  14.0k|            const float        converted_value_float =
 2005|  14.0k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2006|       |
 2007|  14.0k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2008|  14.0k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2012|  24.3k|        {
 2013|  24.3k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2014|  24.3k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2015|       |
 2016|  24.3k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2017|  24.3k|            const float  converted_value = static_cast<float>(src_value);
 2018|       |
 2019|  24.3k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2020|  24.3k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2024|  18.1k|        {
 2025|  18.1k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2026|  18.1k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2027|       |
 2028|  18.1k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2029|  18.1k|            const phi::int32_t converted_value_int = static_cast<phi::int32_t>(src_value);
 2030|  18.1k|            const float        converted_value_float =
 2031|  18.1k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2032|       |
 2033|  18.1k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2034|  18.1k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2038|  30.9k|        {
 2039|  30.9k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2040|  30.9k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2041|       |
 2042|  30.9k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2043|  30.9k|            const phi::int32_t converted_value_int =
 2044|  30.9k|                    *reinterpret_cast<const phi::int32_t*>(&src_value);
 2045|  30.9k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2046|       |
 2047|  30.9k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2048|  30.9k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2052|  24.3k|        {
 2053|  24.3k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2054|  24.3k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2055|       |
 2056|  24.3k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2057|  24.3k|            const phi::int32_t converted_value_int =
 2058|  24.3k|                    *reinterpret_cast<const phi::int32_t*>(&src_value);
 2059|  24.3k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2060|       |
 2061|  24.3k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2062|  24.3k|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2066|      1|        {
 2067|      1|            processor.Raise(Exception::Trap);
 2068|      1|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2072|      2|        {
 2073|      2|            processor.Raise(Exception::Halt);
 2074|      2|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2078|  1.82M|        {
 2079|       |            /* Do nothing */
 2080|  1.82M|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  168|   147k|    {
  169|   147k|        phi::i64 res = phi::i64(lhs) + rhs;
  170|       |
  171|   147k|        SafeWriteInteger(processor, dest_reg, res);
  172|   147k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  123|   978k|    {
  124|   978k|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  125|   978k|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  126|       |
  127|       |        // Check for underflow
  128|   978k|        if (value < min)
  ------------------
  |  Branch (128:13): [True: 64.0k, False: 914k]
  ------------------
  129|  64.0k|        {
  130|  64.0k|            processor.Raise(Exception::Underflow);
  131|       |
  132|  64.0k|            value = max + (value % (min - 1));
  133|  64.0k|        }
  134|       |        // Check for overflow
  135|   914k|        else if (value > max)
  ------------------
  |  Branch (135:18): [True: 86.2k, False: 828k]
  ------------------
  136|  86.2k|        {
  137|  86.2k|            processor.Raise(Exception::Overflow);
  138|       |
  139|  86.2k|            value = min + (value % (max + 1));
  140|  86.2k|        }
  141|       |
  142|   978k|        PHI_ASSERT(value >= min);
  143|   978k|        PHI_ASSERT(value <= max);
  144|       |
  145|   978k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<phi::int32_t>(value.unsafe()));
  146|   978k|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  176|  71.0k|    {
  177|  71.0k|        phi::u64 res = phi::u64(lhs) + rhs;
  178|       |
  179|  71.0k|        SafeWriteInteger(processor, dest_reg, res);
  180|  71.0k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  150|   255k|    {
  151|   255k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  152|       |
  153|       |        // Check for overflow
  154|   255k|        if (value > max)
  ------------------
  |  Branch (154:13): [True: 26.0k, False: 229k]
  ------------------
  155|  26.0k|        {
  156|  26.0k|            processor.Raise(Exception::Overflow);
  157|       |
  158|  26.0k|            value %= max + 1u;
  159|  26.0k|        }
  160|       |
  161|   255k|        PHI_ASSERT(value <= max);
  162|       |
  163|   255k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<phi::uint32_t>(value.unsafe()));
  164|   255k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  184|   607k|    {
  185|   607k|        phi::i64 res = phi::i64(lhs) - rhs;
  186|       |
  187|   607k|        SafeWriteInteger(processor, dest_reg, res);
  188|   607k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  192|  78.5k|    {
  193|  78.5k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  194|       |
  195|  78.5k|        if (lhs < rhs)
  ------------------
  |  Branch (195:13): [True: 26.3k, False: 52.2k]
  ------------------
  196|  26.3k|        {
  197|  26.3k|            processor.Raise(Exception::Underflow);
  198|       |
  199|  26.3k|            phi::u64 res = max - rhs + lhs + 1u;
  200|  26.3k|            SafeWriteInteger(processor, dest_reg, res);
  201|  26.3k|            return;
  202|  26.3k|        }
  203|       |
  204|  52.2k|        phi::u64 res = phi::u64(lhs) - rhs;
  205|       |
  206|  52.2k|        SafeWriteInteger(processor, dest_reg, res);
  207|  52.2k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  211|   179k|    {
  212|   179k|        phi::i64 res = phi::i64(lhs) * rhs;
  213|       |
  214|   179k|        SafeWriteInteger(processor, dest_reg, res);
  215|   179k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  219|  71.8k|    {
  220|  71.8k|        phi::u64 res = phi::u64(lhs) * rhs;
  221|       |
  222|  71.8k|        SafeWriteInteger(processor, dest_reg, res);
  223|  71.8k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  227|  44.0k|    {
  228|  44.0k|        if (rhs == 0)
  ------------------
  |  Branch (228:13): [True: 2, False: 44.0k]
  ------------------
  229|      2|        {
  230|      2|            processor.Raise(Exception::DivideByZero);
  231|      2|            return;
  232|      2|        }
  233|       |
  234|  44.0k|        phi::i64 res = phi::i64(lhs) / rhs;
  235|       |
  236|  44.0k|        SafeWriteInteger(processor, dest_reg, res);
  237|  44.0k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  241|  33.8k|    {
  242|  33.8k|        if (rhs == 0u)
  ------------------
  |  Branch (242:13): [True: 3, False: 33.7k]
  ------------------
  243|      3|        {
  244|      3|            processor.Raise(Exception::DivideByZero);
  245|      3|            return;
  246|      3|        }
  247|       |
  248|  33.7k|        phi::u64 res = phi::u64(lhs) / rhs;
  249|       |
  250|  33.7k|        SafeWriteInteger(processor, dest_reg, res);
  251|  33.7k|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  324|   204k|    {
  325|   204k|        if (shift > 31)
  ------------------
  |  Branch (325:13): [True: 47.4k, False: 156k]
  ------------------
  326|  47.4k|        {
  327|  47.4k|            processor.Raise(Exception::BadShift);
  328|       |
  329|       |            // Just set register to 0
  330|  47.4k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  331|  47.4k|            return;
  332|  47.4k|        }
  333|       |
  334|       |        // Negative shifts are undefined behavior
  335|   156k|        if (shift < 0)
  ------------------
  |  Branch (335:13): [True: 51.4k, False: 105k]
  ------------------
  336|  51.4k|        {
  337|  51.4k|            processor.Raise(Exception::BadShift);
  338|  51.4k|            return;
  339|  51.4k|        }
  340|       |
  341|   105k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  342|       |
  343|   105k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  344|   105k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  255|   130k|    {
  256|       |        // Prevent undefined behavior by shifting by more than 31
  257|   130k|        if (shift > 31)
  ------------------
  |  Branch (257:13): [True: 28.0k, False: 102k]
  ------------------
  258|  28.0k|        {
  259|  28.0k|            processor.Raise(Exception::BadShift);
  260|       |
  261|       |            // Just set register to 0
  262|  28.0k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  263|  28.0k|            return;
  264|  28.0k|        }
  265|       |
  266|       |        // Do nothing when shifting by zero to prevent undefined behavior
  267|   102k|        if (shift == 0)
  ------------------
  |  Branch (267:13): [True: 47.2k, False: 55.1k]
  ------------------
  268|  47.2k|        {
  269|  47.2k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  270|  47.2k|            return;
  271|  47.2k|        }
  272|       |
  273|       |        // Negative shifts are undefiend behavior
  274|  55.1k|        if (shift < 0)
  ------------------
  |  Branch (274:13): [True: 29.8k, False: 25.3k]
  ------------------
  275|  29.8k|        {
  276|  29.8k|            processor.Raise(Exception::BadShift);
  277|  29.8k|            return;
  278|  29.8k|        }
  279|       |
  280|  25.3k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  281|       |
  282|  25.3k|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  283|       |
  284|  25.3k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  285|  25.3k|    }
InstructionImplementation.cpp:_ZN3dlxL16clear_top_n_bitsEii:
   28|  25.3k|    {
   29|  25.3k|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behavior");
   30|       |
   31|  25.3k|        return value & ~(-1 << (32 - n));
   32|  25.3k|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  289|   141k|    {
  290|       |        // Prevent undefined behavior by shifting by more than 31
  291|   141k|        if (shift > 31)
  ------------------
  |  Branch (291:13): [True: 48.1k, False: 92.8k]
  ------------------
  292|  48.1k|        {
  293|  48.1k|            processor.Raise(Exception::BadShift);
  294|       |
  295|       |            // Is negative ie. sign bit is set
  296|  48.1k|            if (base < 0)
  ------------------
  |  Branch (296:17): [True: 16.4k, False: 31.7k]
  ------------------
  297|  16.4k|            {
  298|       |                // Set every byte to 1
  299|  16.4k|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  300|  16.4k|            }
  301|  31.7k|            else
  302|  31.7k|            {
  303|       |                // Set every byte to 0
  304|  31.7k|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  305|  31.7k|            }
  306|  48.1k|            return;
  307|  48.1k|        }
  308|       |
  309|       |        // Negative shifts are undefined behavior
  310|  92.8k|        if (shift < 0)
  ------------------
  |  Branch (310:13): [True: 37.3k, False: 55.5k]
  ------------------
  311|  37.3k|        {
  312|  37.3k|            processor.Raise(Exception::BadShift);
  313|  37.3k|            return;
  314|  37.3k|        }
  315|       |
  316|  55.5k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  317|       |
  318|  55.5k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  319|  55.5k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   37|   365k|    {
   38|       |        // Lookup the label
   39|   365k|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgram();
   40|   365k|        PHI_ASSERT(program != nullptr);
   41|   365k|        PHI_ASSERT(!label_name.is_empty(), "Can't jump to empty label");
   42|       |
   43|   365k|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (43:13): [True: 144, False: 365k]
  ------------------
   44|    144|        {
   45|    144|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|    144|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   46|    144|            processor.Raise(Exception::UnknownLabel);
   47|    144|            return;
   48|    144|        }
   49|       |
   50|   365k|        const phi::uint32_t jump_point = program->m_JumpData.at(label_name);
   51|   365k|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   52|       |
   53|       |        // Set program counter
   54|   365k|        processor.SetNextProgramCounter(jump_point);
   55|   365k|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   58|  1.89M|    {
   59|  1.89M|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   60|       |
   61|  1.89M|        phi::u32 max_address =
   62|  1.89M|                static_cast<phi::uint32_t>(processor.GetCurrentProgram()->m_Instructions.size());
   63|  1.89M|        if (address >= max_address)
  ------------------
  |  Branch (63:13): [True: 29, False: 1.89M]
  ------------------
   64|     29|        {
   65|     29|            processor.Raise(Exception::AddressOutOfBounds);
   66|     29|            return;
   67|     29|        }
   68|       |
   69|  1.89M|        processor.SetNextProgramCounter(address.unsafe());
   70|  1.89M|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
   99|   322k|    {
  100|   322k|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (100:13): [True: 322k, False: 5]
  ------------------
  101|   322k|        {
  102|   322k|            const auto& imm_value = argument.AsImmediateValue();
  103|       |
  104|   322k|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (104:17): [True: 16, False: 322k]
  ------------------
  105|     16|            {
  106|     16|                return {};
  107|     16|            }
  108|       |
  109|   322k|            return imm_value.signed_value;
  110|   322k|        }
  111|       |
  112|      5|        PHI_ASSERT(argument.GetType() == ArgumentType::AddressDisplacement);
  113|       |
  114|      5|        const auto& adr_displacement = argument.AsAddressDisplacement();
  115|      5|        return CalculateDisplacementAddress(processor, adr_displacement);
  116|   322k|    }
InstructionImplementation.cpp:_ZN3dlxL28CalculateDisplacementAddressERNS_9ProcessorERKNS_19InstructionArgument19AddressDisplacementE:
   77|      5|    {
   78|      5|        phi::i32 register_value = processor.IntRegisterGetSignedValue(adr_displacement.register_id);
   79|       |
   80|      5|        phi::i32 address = adr_displacement.displacement + register_value;
   81|       |
   82|      5|        if (address < 0)
  ------------------
  |  Branch (82:13): [True: 1, False: 4]
  ------------------
   83|      1|        {
   84|      1|            processor.Raise(Exception::AddressOutOfBounds);
   85|      1|            return {};
   86|      1|        }
   87|       |
   88|      4|        return address;
   89|      5|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  7.93M|    {
   12|  7.93M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  7.93M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  7.93M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  7.93M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  7.93M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  7.93M|                   "Unexpected argument type for arg1");
   22|  7.93M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  7.93M|                   "Unexpected argument type for arg2");
   24|  7.93M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  7.93M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  7.93M|        m_Executor(processor, arg1, arg2, arg3);
   29|  7.93M|    }

_ZN3dlx21LookUpInstructionInfoENS_6OpCodeE:
  449|  25.0k|    {
  450|  25.0k|        return instruction_table.at(static_cast<phi::size_t>(instruction));
  451|  25.0k|    }

_ZN3dlx11IntRegisterC2Ev:
   12|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   15|  1.86M|    {
   16|  1.86M|        m_ValueSigned = val;
   17|  1.86M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   20|   252k|    {
   21|   252k|        m_ValueUnsigned = val;
   22|   252k|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   25|  3.80M|    {
   26|  3.80M|        return m_ValueSigned;
   27|  3.80M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   30|  2.66M|    {
   31|  2.66M|        return m_ValueUnsigned;
   32|  2.66M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   35|  2.83M|    {
   36|  2.83M|        return m_IsReadOnly;
   37|  2.83M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   40|      1|    {
   41|      1|        m_IsReadOnly = read_only;
   42|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   12|      1|    {
   13|      1|        m_Values.resize(starting_size.unsafe());
   14|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   17|  9.64k|    {
   18|  9.64k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (18:13): [True: 2, False: 9.64k]
  ------------------
   19|      2|        {
   20|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   21|      2|            return {};
   22|      2|        }
   23|       |
   24|  9.64k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   25|       |
   26|  9.64k|        return m_Values[raw_address].signed_value;
   27|  9.64k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   30|  19.6k|    {
   31|  19.6k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (31:13): [True: 2, False: 19.6k]
  ------------------
   32|      2|        {
   33|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   34|      2|            return {};
   35|      2|        }
   36|       |
   37|  19.6k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   38|  19.6k|        return m_Values[raw_address].unsigned_value;
   39|  19.6k|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   42|  24.3k|    {
   43|  24.3k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (43:13): [True: 3, False: 24.3k]
  ------------------
   44|      3|        {
   45|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   46|      3|            return {};
   47|      3|        }
   48|       |
   49|  24.3k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   50|       |
   51|  24.3k|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (51:13): [True: 1, False: 24.3k]
  ------------------
   52|      1|        {
   53|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   54|      1|            return {};
   55|      1|        }
   56|       |
   57|  24.3k|        return *reinterpret_cast<const phi::int16_t*>(&m_Values[raw_address].signed_value);
   58|  24.3k|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   61|  17.9k|    {
   62|  17.9k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (62:13): [True: 4, False: 17.9k]
  ------------------
   63|      4|        {
   64|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   65|      4|            return {};
   66|      4|        }
   67|       |
   68|  17.9k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   69|       |
   70|  17.9k|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (70:13): [True: 1, False: 17.9k]
  ------------------
   71|      1|        {
   72|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   73|      1|            return {};
   74|      1|        }
   75|       |
   76|  17.9k|        return *reinterpret_cast<const phi::uint16_t*>(&m_Values[raw_address].unsigned_value);
   77|  17.9k|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   80|  17.9k|    {
   81|  17.9k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (81:13): [True: 2, False: 17.9k]
  ------------------
   82|      2|        {
   83|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   84|      2|            return {};
   85|      2|        }
   86|       |
   87|  17.9k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   88|       |
   89|  17.9k|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (89:13): [True: 1, False: 17.9k]
  ------------------
   90|      1|        {
   91|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   92|      1|            return {};
   93|      1|        }
   94|       |
   95|  17.9k|        return *reinterpret_cast<const phi::int32_t*>(&m_Values[raw_address].signed_value);
   96|  17.9k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
   99|  11.7k|    {
  100|  11.7k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (100:13): [True: 2, False: 11.7k]
  ------------------
  101|      2|        {
  102|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  103|      2|            return {};
  104|      2|        }
  105|       |
  106|  11.7k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  107|       |
  108|  11.7k|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (108:13): [True: 1, False: 11.7k]
  ------------------
  109|      1|        {
  110|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  111|      1|            return {};
  112|      1|        }
  113|       |
  114|  11.7k|        return *reinterpret_cast<const phi::uint32_t*>(&m_Values[raw_address].unsigned_value);
  115|  11.7k|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  118|  14.0k|    {
  119|  14.0k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (119:13): [True: 4, False: 14.0k]
  ------------------
  120|      4|        {
  121|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  122|      4|            return {};
  123|      4|        }
  124|       |
  125|  14.0k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  126|       |
  127|  14.0k|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (127:13): [True: 1, False: 14.0k]
  ------------------
  128|      1|        {
  129|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  130|      1|            return {};
  131|      1|        }
  132|       |
  133|  14.0k|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  134|  14.0k|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  137|  21.4k|    {
  138|  21.4k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (138:13): [True: 4, False: 21.4k]
  ------------------
  139|      4|        {
  140|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  141|      4|            return {};
  142|      4|        }
  143|       |
  144|  21.4k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  145|       |
  146|  21.4k|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (146:13): [True: 1, False: 21.4k]
  ------------------
  147|      1|        {
  148|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  149|      1|            return {};
  150|      1|        }
  151|       |
  152|  21.4k|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  153|  21.4k|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  156|  31.0k|    {
  157|  31.0k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (157:13): [True: 5, False: 31.0k]
  ------------------
  158|      5|        {
  159|      5|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  160|      5|            return false;
  161|      5|        }
  162|       |
  163|  31.0k|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  164|  31.0k|        return true;
  165|  31.0k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedByteEN3phi7integerImEENS2_IhEE:
  168|  24.3k|    {
  169|  24.3k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (169:13): [True: 4, False: 24.3k]
  ------------------
  170|      4|        {
  171|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  172|      4|            return false;
  173|      4|        }
  174|       |
  175|  24.3k|        m_Values[(address - m_StartingAddress).unsafe()].unsigned_value = value.unsafe();
  176|  24.3k|        return true;
  177|  24.3k|    }
_ZN3dlx11MemoryBlock13StoreHalfWordEN3phi7integerImEENS2_IsEE:
  180|  24.2k|    {
  181|  24.2k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (181:13): [True: 3, False: 24.2k]
  ------------------
  182|      3|        {
  183|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  184|      3|            return false;
  185|      3|        }
  186|       |
  187|  24.2k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  188|  24.2k|        *reinterpret_cast<phi::int16_t*>(&m_Values[index].signed_value) = value.unsafe();
  189|       |
  190|  24.2k|        return true;
  191|  24.2k|    }
_ZN3dlx11MemoryBlock21StoreUnsignedHalfWordEN3phi7integerImEENS2_ItEE:
  194|  24.3k|    {
  195|  24.3k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (195:13): [True: 3, False: 24.3k]
  ------------------
  196|      3|        {
  197|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  198|      3|            return false;
  199|      3|        }
  200|       |
  201|  24.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  202|  24.3k|        *reinterpret_cast<phi::uint16_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  203|       |
  204|  24.3k|        return true;
  205|  24.3k|    }
_ZN3dlx11MemoryBlock9StoreWordEN3phi7integerImEENS2_IiEE:
  208|  21.2k|    {
  209|  21.2k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (209:13): [True: 2, False: 21.2k]
  ------------------
  210|      2|        {
  211|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  212|      2|            return false;
  213|      2|        }
  214|       |
  215|  21.2k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  216|  21.2k|        *reinterpret_cast<phi::int32_t*>(&m_Values[index].signed_value) = value.unsafe();
  217|       |
  218|  21.2k|        return true;
  219|  21.2k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedWordEN3phi7integerImEENS2_IjEE:
  222|  17.9k|    {
  223|  17.9k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (223:13): [True: 3, False: 17.9k]
  ------------------
  224|      3|        {
  225|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  226|      3|            return false;
  227|      3|        }
  228|       |
  229|  17.9k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  230|  17.9k|        *reinterpret_cast<phi::uint32_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  231|       |
  232|  17.9k|        return true;
  233|  17.9k|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  236|  18.3k|    {
  237|  18.3k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (237:13): [True: 4, False: 18.3k]
  ------------------
  238|      4|        {
  239|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  240|      4|            return false;
  241|      4|        }
  242|       |
  243|  18.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  244|  18.3k|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  245|       |
  246|  18.3k|        return true;
  247|  18.3k|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  250|  24.3k|    {
  251|  24.3k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (251:13): [True: 4, False: 24.3k]
  ------------------
  252|      4|        {
  253|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  254|      4|            return false;
  255|      4|        }
  256|       |
  257|  24.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  258|  24.3k|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  259|       |
  260|  24.3k|        return true;
  261|  24.3k|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  264|   322k|    {
  265|       |        // Cannot access anything before the starting address
  266|   322k|        if (address < m_StartingAddress)
  ------------------
  |  Branch (266:13): [True: 35, False: 322k]
  ------------------
  267|     35|        {
  268|     35|            return false;
  269|     35|        }
  270|       |
  271|       |        // Check if address + size will overflow
  272|   322k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (272:13): [True: 0, False: 322k]
  ------------------
  273|   322k|                                             address.unsafe(), size.unsafe()))
  274|      0|        {
  275|      0|            return false;
  276|      0|        }
  277|       |
  278|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  279|   322k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (279:13): [True: 0, False: 322k]
  ------------------
  280|   322k|                                             m_StartingAddress.unsafe(), m_Values.size()))
  281|      0|        {
  282|      0|            return false;
  283|      0|        }
  284|       |
  285|       |        // Check if address is out of bounds
  286|   322k|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (286:13): [True: 16, False: 322k]
  ------------------
  287|     16|        {
  288|     16|            return false;
  289|     16|        }
  290|       |
  291|       |        // Otherwise this is a valid address
  292|   322k|        return true;
  293|   322k|    }
_ZN3dlx11MemoryBlock25IsAddressAlignedCorrectlyEN3phi7integerImEES3_:
  297|   107k|    {
  298|   107k|        return size != 0u && (address % size) == 0u;
  ------------------
  |  Branch (298:16): [True: 107k, False: 0]
  |  Branch (298:30): [True: 107k, False: 6]
  ------------------
  299|   107k|    }
_ZN3dlx11MemoryBlock5ClearEv:
  302|  5.48k|    {
  303|  5.48k|        for (auto& val : m_Values)
  ------------------
  |  Branch (303:24): [True: 5.48M, False: 5.48k]
  ------------------
  304|  5.48M|        {
  305|  5.48M|            val.signed_value = 0;
  306|  5.48M|        }
  307|  5.48k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   21|   158k|    {
   22|   158k|        switch (token.length().unsafe())
   23|   158k|        {
   24|       |            // 1 character OpCodes
   25|  21.0k|            case 1: {
  ------------------
  |  Branch (25:13): [True: 21.0k, False: 136k]
  ------------------
   26|  21.0k|                const char c1 = token[0u];
   27|       |
   28|  21.0k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (28:21): [True: 9.56k, False: 11.4k]
  ------------------
   29|  9.56k|                {
   30|  9.56k|                    return OpCode::J;
   31|  9.56k|                }
   32|  11.4k|                break;
   33|  21.0k|            }
   34|       |
   35|       |            // 2 character OpCodes
   36|  21.3k|            case 2: {
  ------------------
  |  Branch (36:13): [True: 21.3k, False: 136k]
  ------------------
   37|  21.3k|                const char c1 = token[0u];
   38|  21.3k|                const char c2 = token[1u];
   39|       |
   40|  21.3k|                switch (c1)
  ------------------
  |  Branch (40:25): [True: 10.9k, False: 10.4k]
  ------------------
   41|  21.3k|                {
   42|  1.18k|                    case 'J':
  ------------------
  |  Branch (42:21): [True: 1.18k, False: 20.1k]
  ------------------
   43|  1.43k|                    case 'j':
  ------------------
  |  Branch (43:21): [True: 247, False: 21.1k]
  ------------------
   44|  1.43k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (44:29): [True: 1.14k, False: 287]
  ------------------
   45|  1.14k|                        {
   46|  1.14k|                            return OpCode::JR;
   47|  1.14k|                        }
   48|    287|                        break;
   49|       |
   50|  1.75k|                    case 'L':
  ------------------
  |  Branch (50:21): [True: 1.75k, False: 19.6k]
  ------------------
   51|  2.94k|                    case 'l':
  ------------------
  |  Branch (51:21): [True: 1.19k, False: 20.1k]
  ------------------
   52|  2.94k|                        switch (c2)
  ------------------
  |  Branch (52:33): [True: 534, False: 2.41k]
  ------------------
   53|  2.94k|                        {
   54|    224|                            case 'B':
  ------------------
  |  Branch (54:29): [True: 224, False: 2.72k]
  ------------------
   55|    426|                            case 'b':
  ------------------
  |  Branch (55:29): [True: 202, False: 2.74k]
  ------------------
   56|    426|                                return OpCode::LB;
   57|    283|                            case 'D':
  ------------------
  |  Branch (57:29): [True: 283, False: 2.66k]
  ------------------
   58|    478|                            case 'd':
  ------------------
  |  Branch (58:29): [True: 195, False: 2.75k]
  ------------------
   59|    478|                                return OpCode::LD;
   60|    221|                            case 'F':
  ------------------
  |  Branch (60:29): [True: 221, False: 2.72k]
  ------------------
   61|    426|                            case 'f':
  ------------------
  |  Branch (61:29): [True: 205, False: 2.74k]
  ------------------
   62|    426|                                return OpCode::LF;
   63|    219|                            case 'H':
  ------------------
  |  Branch (63:29): [True: 219, False: 2.72k]
  ------------------
   64|    415|                            case 'h':
  ------------------
  |  Branch (64:29): [True: 196, False: 2.75k]
  ------------------
   65|    415|                                return OpCode::LH;
   66|    468|                            case 'W':
  ------------------
  |  Branch (66:29): [True: 468, False: 2.47k]
  ------------------
   67|    668|                            case 'w':
  ------------------
  |  Branch (67:29): [True: 200, False: 2.74k]
  ------------------
   68|    668|                                return OpCode::LW;
   69|  2.94k|                        }
   70|    534|                        break;
   71|    576|                    case 'O':
  ------------------
  |  Branch (71:21): [True: 576, False: 20.7k]
  ------------------
   72|  1.36k|                    case 'o':
  ------------------
  |  Branch (72:21): [True: 788, False: 20.5k]
  ------------------
   73|  1.36k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (73:29): [True: 603, False: 761]
  ------------------
   74|    603|                        {
   75|    603|                            return OpCode::OR;
   76|    603|                        }
   77|    761|                        break;
   78|  3.46k|                    case 'S':
  ------------------
  |  Branch (78:21): [True: 3.46k, False: 17.9k]
  ------------------
   79|  4.66k|                    case 's':
  ------------------
  |  Branch (79:21): [True: 1.20k, False: 20.1k]
  ------------------
   80|  4.66k|                        switch (c2)
  ------------------
  |  Branch (80:33): [True: 1.08k, False: 3.58k]
  ------------------
   81|  4.66k|                        {
   82|    379|                            case 'B':
  ------------------
  |  Branch (82:29): [True: 379, False: 4.29k]
  ------------------
   83|    784|                            case 'b':
  ------------------
  |  Branch (83:29): [True: 405, False: 4.26k]
  ------------------
   84|    784|                                return OpCode::SB;
   85|    198|                            case 'D':
  ------------------
  |  Branch (85:29): [True: 198, False: 4.47k]
  ------------------
   86|    741|                            case 'd':
  ------------------
  |  Branch (86:29): [True: 543, False: 4.12k]
  ------------------
   87|    741|                                return OpCode::SD;
   88|    327|                            case 'F':
  ------------------
  |  Branch (88:29): [True: 327, False: 4.34k]
  ------------------
   89|  1.14k|                            case 'f':
  ------------------
  |  Branch (89:29): [True: 818, False: 3.85k]
  ------------------
   90|  1.14k|                                return OpCode::SF;
   91|    203|                            case 'H':
  ------------------
  |  Branch (91:29): [True: 203, False: 4.46k]
  ------------------
   92|    443|                            case 'h':
  ------------------
  |  Branch (92:29): [True: 240, False: 4.42k]
  ------------------
   93|    443|                                return OpCode::SH;
   94|    211|                            case 'w':
  ------------------
  |  Branch (94:29): [True: 211, False: 4.45k]
  ------------------
   95|    475|                            case 'W':
  ------------------
  |  Branch (95:29): [True: 264, False: 4.40k]
  ------------------
   96|    475|                                return OpCode::SW;
   97|  4.66k|                        }
   98|  1.08k|                        break;
   99|  21.3k|                }
  100|  13.6k|                break;
  101|  21.3k|            }
  102|       |
  103|       |            // 3 character OpCodes
  104|  41.3k|            case 3: {
  ------------------
  |  Branch (104:13): [True: 41.3k, False: 116k]
  ------------------
  105|  41.3k|                const char c1 = token[0u];
  106|  41.3k|                const char c2 = token[1u];
  107|  41.3k|                const char c3 = token[2u];
  108|       |
  109|  41.3k|                switch (c1)
  ------------------
  |  Branch (109:25): [True: 9.28k, False: 32.0k]
  ------------------
  110|  41.3k|                {
  111|    293|                    case 'A':
  ------------------
  |  Branch (111:21): [True: 293, False: 41.0k]
  ------------------
  112|  1.37k|                    case 'a':
  ------------------
  |  Branch (112:21): [True: 1.08k, False: 40.2k]
  ------------------
  113|  1.37k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (113:29): [True: 654, False: 723]
  |  Branch (113:29): [True: 436, False: 941]
  |  Branch (113:45): [True: 436, False: 218]
  ------------------
  114|    436|                        {
  115|    436|                            return OpCode::ADD;
  116|    436|                        }
  117|    941|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (117:34): [True: 653, False: 288]
  |  Branch (117:34): [True: 411, False: 530]
  |  Branch (117:50): [True: 411, False: 242]
  ------------------
  118|    411|                        {
  119|    411|                            return OpCode::AND;
  120|    411|                        }
  121|    530|                        break;
  122|       |
  123|    530|                    case 'D':
  ------------------
  |  Branch (123:21): [True: 419, False: 40.9k]
  ------------------
  124|  1.18k|                    case 'd':
  ------------------
  |  Branch (124:21): [True: 765, False: 40.5k]
  ------------------
  125|  1.18k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (125:29): [True: 796, False: 388]
  |  Branch (125:29): [True: 439, False: 745]
  |  Branch (125:45): [True: 439, False: 357]
  ------------------
  126|    439|                        {
  127|    439|                            return OpCode::DIV;
  128|    439|                        }
  129|    745|                        break;
  130|       |
  131|    745|                    case 'E':
  ------------------
  |  Branch (131:21): [True: 247, False: 41.1k]
  ------------------
  132|  1.53k|                    case 'e':
  ------------------
  |  Branch (132:21): [True: 1.28k, False: 40.0k]
  ------------------
  133|  1.53k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (133:29): [True: 1.30k, False: 228]
  ------------------
  134|  1.30k|                        {
  135|  1.30k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (135:33): [True: 532, False: 775]
  ------------------
  136|    532|                            {
  137|    532|                                return OpCode::EQD;
  138|    532|                            }
  139|    775|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (139:38): [True: 533, False: 242]
  ------------------
  140|    533|                            {
  141|    533|                                return OpCode::EQF;
  142|    533|                            }
  143|  1.30k|                        }
  144|    470|                        break;
  145|       |
  146|  1.43k|                    case 'G':
  ------------------
  |  Branch (146:21): [True: 1.43k, False: 39.9k]
  ------------------
  147|  2.67k|                    case 'g':
  ------------------
  |  Branch (147:21): [True: 1.23k, False: 40.1k]
  ------------------
  148|  2.67k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (148:29): [True: 1.01k, False: 1.65k]
  ------------------
  149|  1.01k|                        {
  150|  1.01k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (150:33): [True: 405, False: 612]
  ------------------
  151|    405|                            {
  152|    405|                                return OpCode::GED;
  153|    405|                            }
  154|    612|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (154:38): [True: 402, False: 210]
  ------------------
  155|    402|                            {
  156|    402|                                return OpCode::GEF;
  157|    402|                            }
  158|  1.01k|                        }
  159|  1.65k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (159:34): [True: 1.43k, False: 224]
  ------------------
  160|  1.43k|                        {
  161|  1.43k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (161:33): [True: 532, False: 902]
  ------------------
  162|    532|                            {
  163|    532|                                return OpCode::GTD;
  164|    532|                            }
  165|    902|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (165:33): [True: 694, False: 208]
  ------------------
  166|    694|                            {
  167|    694|                                return OpCode::GTF;
  168|    694|                            }
  169|    902|                        }
  170|    642|                        break;
  171|       |
  172|    775|                    case 'J':
  ------------------
  |  Branch (172:21): [True: 775, False: 40.5k]
  ------------------
  173|  1.14k|                    case 'j':
  ------------------
  |  Branch (173:21): [True: 369, False: 40.9k]
  ------------------
  174|  1.14k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (174:29): [True: 750, False: 394]
  |  Branch (174:29): [True: 437, False: 707]
  |  Branch (174:45): [True: 437, False: 313]
  ------------------
  175|    437|                        {
  176|    437|                            return OpCode::JAL;
  177|    437|                        }
  178|    707|                        break;
  179|       |
  180|  3.95k|                    case 'L':
  ------------------
  |  Branch (180:21): [True: 3.95k, False: 37.4k]
  ------------------
  181|  6.19k|                    case 'l':
  ------------------
  |  Branch (181:21): [True: 2.23k, False: 39.1k]
  ------------------
  182|  6.19k|                        switch (c2)
  ------------------
  |  Branch (182:33): [True: 472, False: 5.72k]
  ------------------
  183|  6.19k|                        {
  184|    587|                            case 'B':
  ------------------
  |  Branch (184:29): [True: 587, False: 5.60k]
  ------------------
  185|    784|                            case 'b':
  ------------------
  |  Branch (185:29): [True: 197, False: 5.99k]
  ------------------
  186|    784|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (186:37): [True: 405, False: 379]
  ------------------
  187|    405|                                {
  188|    405|                                    return OpCode::LBU;
  189|    405|                                }
  190|    379|                                break;
  191|       |
  192|    392|                            case 'E':
  ------------------
  |  Branch (192:29): [True: 392, False: 5.80k]
  ------------------
  193|  1.03k|                            case 'e':
  ------------------
  |  Branch (193:29): [True: 646, False: 5.54k]
  ------------------
  194|  1.03k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (194:37): [True: 420, False: 618]
  ------------------
  195|    420|                                {
  196|    420|                                    return OpCode::LED;
  197|    420|                                }
  198|    618|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (198:42): [True: 413, False: 205]
  ------------------
  199|    413|                                {
  200|    413|                                    return OpCode::LEF;
  201|    413|                                }
  202|    205|                                break;
  203|       |
  204|    427|                            case 'H':
  ------------------
  |  Branch (204:29): [True: 427, False: 5.76k]
  ------------------
  205|  1.60k|                            case 'h':
  ------------------
  |  Branch (205:29): [True: 1.17k, False: 5.01k]
  ------------------
  206|  1.60k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (206:37): [True: 403, False: 1.19k]
  ------------------
  207|    403|                                {
  208|    403|                                    return OpCode::LHI;
  209|    403|                                }
  210|  1.19k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (210:42): [True: 789, False: 409]
  ------------------
  211|    789|                                {
  212|    789|                                    return OpCode::LHU;
  213|    789|                                }
  214|    409|                                break;
  215|       |
  216|  1.10k|                            case 'T':
  ------------------
  |  Branch (216:29): [True: 1.10k, False: 5.08k]
  ------------------
  217|  1.68k|                            case 't':
  ------------------
  |  Branch (217:29): [True: 583, False: 5.60k]
  ------------------
  218|  1.68k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (218:37): [True: 945, False: 744]
  ------------------
  219|    945|                                {
  220|    945|                                    return OpCode::LTD;
  221|    945|                                }
  222|    744|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (222:42): [True: 538, False: 206]
  ------------------
  223|    538|                                {
  224|    538|                                    return OpCode::LTF;
  225|    538|                                }
  226|    206|                                break;
  227|       |
  228|    384|                            case 'W':
  ------------------
  |  Branch (228:29): [True: 384, False: 5.80k]
  ------------------
  229|    608|                            case 'w':
  ------------------
  |  Branch (229:29): [True: 224, False: 5.96k]
  ------------------
  230|    608|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (230:37): [True: 401, False: 207]
  ------------------
  231|    401|                                {
  232|    401|                                    return OpCode::LWU;
  233|    401|                                }
  234|    207|                                break;
  235|  6.19k|                        }
  236|  1.87k|                        break;
  237|       |
  238|  4.10k|                    case 'N':
  ------------------
  |  Branch (238:21): [True: 4.10k, False: 37.2k]
  ------------------
  239|  4.85k|                    case 'n':
  ------------------
  |  Branch (239:21): [True: 751, False: 40.6k]
  ------------------
  240|  4.85k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (240:29): [True: 1.39k, False: 3.46k]
  ------------------
  241|  1.39k|                        {
  242|  1.39k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (242:33): [True: 677, False: 714]
  ------------------
  243|    677|                            {
  244|    677|                                return OpCode::NED;
  245|    677|                            }
  246|    714|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (246:38): [True: 403, False: 311]
  ------------------
  247|    403|                            {
  248|    403|                                return OpCode::NEF;
  249|    403|                            }
  250|  1.39k|                        }
  251|  3.46k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (251:34): [True: 3.24k, False: 221]
  |  Branch (251:34): [True: 3.04k, False: 416]
  |  Branch (251:50): [True: 3.04k, False: 195]
  ------------------
  252|  3.04k|                        {
  253|  3.04k|                            return OpCode::NOP;
  254|  3.04k|                        }
  255|       |
  256|    727|                        break;
  257|       |
  258|    727|                    case 'O':
  ------------------
  |  Branch (258:21): [True: 530, False: 40.8k]
  ------------------
  259|  1.43k|                    case 'o':
  ------------------
  |  Branch (259:21): [True: 902, False: 40.4k]
  ------------------
  260|  1.43k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (260:29): [True: 1.07k, False: 361]
  |  Branch (260:29): [True: 530, False: 902]
  |  Branch (260:45): [True: 530, False: 541]
  ------------------
  261|    530|                        {
  262|    530|                            return OpCode::ORI;
  263|    530|                        }
  264|    902|                        break;
  265|       |
  266|  3.78k|                    case 'S':
  ------------------
  |  Branch (266:21): [True: 3.78k, False: 37.5k]
  ------------------
  267|  10.5k|                    case 's':
  ------------------
  |  Branch (267:21): [True: 6.81k, False: 34.5k]
  ------------------
  268|  10.5k|                        switch (c2)
  ------------------
  |  Branch (268:33): [True: 321, False: 10.2k]
  ------------------
  269|  10.5k|                        {
  270|    290|                            case 'B':
  ------------------
  |  Branch (270:29): [True: 290, False: 10.3k]
  ------------------
  271|    757|                            case 'b':
  ------------------
  |  Branch (271:29): [True: 467, False: 10.1k]
  ------------------
  272|    757|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (272:37): [True: 549, False: 208]
  ------------------
  273|    549|                                {
  274|    549|                                    return OpCode::SBU;
  275|    549|                                }
  276|    208|                                break;
  277|       |
  278|    557|                            case 'E':
  ------------------
  |  Branch (278:29): [True: 557, False: 10.0k]
  ------------------
  279|    761|                            case 'e':
  ------------------
  |  Branch (279:29): [True: 204, False: 10.3k]
  ------------------
  280|    761|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (280:37): [True: 533, False: 228]
  ------------------
  281|    533|                                {
  282|    533|                                    return OpCode::SEQ;
  283|    533|                                }
  284|    228|                                break;
  285|       |
  286|    228|                            case 'G':
  ------------------
  |  Branch (286:29): [True: 224, False: 10.3k]
  ------------------
  287|  1.03k|                            case 'g':
  ------------------
  |  Branch (287:29): [True: 809, False: 9.79k]
  ------------------
  288|  1.03k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (288:37): [True: 405, False: 628]
  ------------------
  289|    405|                                {
  290|    405|                                    return OpCode::SGE;
  291|    405|                                }
  292|    628|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (292:42): [True: 420, False: 208]
  ------------------
  293|    420|                                {
  294|    420|                                    return OpCode::SGT;
  295|    420|                                }
  296|    208|                                break;
  297|       |
  298|    392|                            case 'H':
  ------------------
  |  Branch (298:29): [True: 392, False: 10.2k]
  ------------------
  299|    787|                            case 'h':
  ------------------
  |  Branch (299:29): [True: 395, False: 10.2k]
  ------------------
  300|    787|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (300:37): [True: 558, False: 229]
  ------------------
  301|    558|                                {
  302|    558|                                    return OpCode::SHU;
  303|    558|                                }
  304|    229|                                break;
  305|       |
  306|  1.82k|                            case 'L':
  ------------------
  |  Branch (306:29): [True: 1.82k, False: 8.77k]
  ------------------
  307|  2.78k|                            case 'l':
  ------------------
  |  Branch (307:29): [True: 961, False: 9.63k]
  ------------------
  308|  2.78k|                                switch (c3)
  ------------------
  |  Branch (308:41): [True: 266, False: 2.52k]
  ------------------
  309|  2.78k|                                {
  310|    202|                                    case 'A':
  ------------------
  |  Branch (310:37): [True: 202, False: 2.58k]
  ------------------
  311|    463|                                    case 'a':
  ------------------
  |  Branch (311:37): [True: 261, False: 2.52k]
  ------------------
  312|    463|                                        return OpCode::SLA;
  313|       |
  314|    194|                                    case 'E':
  ------------------
  |  Branch (314:37): [True: 194, False: 2.59k]
  ------------------
  315|  1.03k|                                    case 'e':
  ------------------
  |  Branch (315:37): [True: 841, False: 1.94k]
  ------------------
  316|  1.03k|                                        return OpCode::SLE;
  317|       |
  318|    231|                                    case 'L':
  ------------------
  |  Branch (318:37): [True: 231, False: 2.55k]
  ------------------
  319|    616|                                    case 'l':
  ------------------
  |  Branch (319:37): [True: 385, False: 2.40k]
  ------------------
  320|    616|                                        return OpCode::SLL;
  321|       |
  322|    198|                                    case 'T':
  ------------------
  |  Branch (322:37): [True: 198, False: 2.58k]
  ------------------
  323|    407|                                    case 't':
  ------------------
  |  Branch (323:37): [True: 209, False: 2.57k]
  ------------------
  324|    407|                                        return OpCode::SLT;
  325|  2.78k|                                }
  326|    266|                                break;
  327|       |
  328|    593|                            case 'N':
  ------------------
  |  Branch (328:29): [True: 593, False: 10.0k]
  ------------------
  329|    809|                            case 'n':
  ------------------
  |  Branch (329:29): [True: 216, False: 10.3k]
  ------------------
  330|    809|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (330:37): [True: 407, False: 402]
  ------------------
  331|    407|                                {
  332|    407|                                    return OpCode::SNE;
  333|    407|                                }
  334|    402|                                break;
  335|       |
  336|    936|                            case 'R':
  ------------------
  |  Branch (336:29): [True: 936, False: 9.66k]
  ------------------
  337|  1.47k|                            case 'r':
  ------------------
  |  Branch (337:29): [True: 534, False: 10.0k]
  ------------------
  338|  1.47k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (338:37): [True: 820, False: 650]
  ------------------
  339|    820|                                {
  340|    820|                                    return OpCode::SRA;
  341|    820|                                }
  342|    650|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (342:42): [True: 425, False: 225]
  ------------------
  343|    425|                                {
  344|    425|                                    return OpCode::SRL;
  345|    425|                                }
  346|    225|                                break;
  347|       |
  348|  1.01k|                            case 'U':
  ------------------
  |  Branch (348:29): [True: 1.01k, False: 9.58k]
  ------------------
  349|  1.26k|                            case 'u':
  ------------------
  |  Branch (349:29): [True: 250, False: 10.3k]
  ------------------
  350|  1.26k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (350:37): [True: 1.02k, False: 241]
  ------------------
  351|  1.02k|                                {
  352|  1.02k|                                    return OpCode::SUB;
  353|  1.02k|                                }
  354|    241|                                break;
  355|       |
  356|    241|                            case 'W':
  ------------------
  |  Branch (356:29): [True: 199, False: 10.4k]
  ------------------
  357|    606|                            case 'w':
  ------------------
  |  Branch (357:29): [True: 407, False: 10.1k]
  ------------------
  358|    606|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (358:37): [True: 407, False: 199]
  ------------------
  359|    407|                                {
  360|    407|                                    return OpCode::SWU;
  361|    407|                                }
  362|    199|                                break;
  363|  10.5k|                        }
  364|       |
  365|  2.82k|                    case 'X':
  ------------------
  |  Branch (365:21): [True: 299, False: 41.0k]
  ------------------
  366|  3.61k|                    case 'x':
  ------------------
  |  Branch (366:21): [True: 786, False: 40.5k]
  ------------------
  367|  3.61k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (367:29): [True: 928, False: 2.68k]
  |  Branch (367:29): [True: 488, False: 3.12k]
  |  Branch (367:45): [True: 488, False: 440]
  ------------------
  368|    488|                        {
  369|    488|                            return OpCode::XOR;
  370|    488|                        }
  371|  3.12k|                        break;
  372|  41.3k|                }
  373|  19.0k|                break;
  374|  41.3k|            }
  375|       |
  376|       |            // 4 character OpCodes
  377|  40.1k|            case 4: {
  ------------------
  |  Branch (377:13): [True: 40.1k, False: 117k]
  ------------------
  378|  40.1k|                const char c1 = token[0u];
  379|  40.1k|                const char c2 = token[1u];
  380|  40.1k|                const char c3 = token[2u];
  381|  40.1k|                const char c4 = token[3u];
  382|       |
  383|  40.1k|                switch (c1)
  ------------------
  |  Branch (383:25): [True: 5.79k, False: 34.3k]
  ------------------
  384|  40.1k|                {
  385|    422|                    case 'A':
  ------------------
  |  Branch (385:21): [True: 422, False: 39.7k]
  ------------------
  386|  3.54k|                    case 'a':
  ------------------
  |  Branch (386:21): [True: 3.12k, False: 37.0k]
  ------------------
  387|  3.54k|                        switch (c2)
  ------------------
  |  Branch (387:33): [True: 383, False: 3.16k]
  ------------------
  388|  3.54k|                        {
  389|  1.99k|                            case 'D':
  ------------------
  |  Branch (389:29): [True: 1.99k, False: 1.55k]
  ------------------
  390|  2.33k|                            case 'd':
  ------------------
  |  Branch (390:29): [True: 348, False: 3.19k]
  ------------------
  391|  2.33k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (391:37): [True: 2.06k, False: 271]
  ------------------
  392|  2.06k|                                {
  393|  2.06k|                                    switch (c4)
  ------------------
  |  Branch (393:45): [True: 221, False: 1.84k]
  ------------------
  394|  2.06k|                                    {
  395|    198|                                        case 'D':
  ------------------
  |  Branch (395:41): [True: 198, False: 1.86k]
  ------------------
  396|    473|                                        case 'd':
  ------------------
  |  Branch (396:41): [True: 275, False: 1.79k]
  ------------------
  397|    473|                                            return OpCode::ADDD;
  398|       |
  399|    206|                                        case 'F':
  ------------------
  |  Branch (399:41): [True: 206, False: 1.86k]
  ------------------
  400|    515|                                        case 'f':
  ------------------
  |  Branch (400:41): [True: 309, False: 1.75k]
  ------------------
  401|    515|                                            return OpCode::ADDF;
  402|       |
  403|    195|                                        case 'I':
  ------------------
  |  Branch (403:41): [True: 195, False: 1.87k]
  ------------------
  404|    447|                                        case 'i':
  ------------------
  |  Branch (404:41): [True: 252, False: 1.81k]
  ------------------
  405|    447|                                            return OpCode::ADDI;
  406|       |
  407|    207|                                        case 'U':
  ------------------
  |  Branch (407:41): [True: 207, False: 1.86k]
  ------------------
  408|    411|                                        case 'u':
  ------------------
  |  Branch (408:41): [True: 204, False: 1.86k]
  ------------------
  409|    411|                                            return OpCode::ADDU;
  410|  2.06k|                                    }
  411|  2.06k|                                }
  412|    492|                                break;
  413|       |
  414|    621|                            case 'N':
  ------------------
  |  Branch (414:29): [True: 621, False: 2.92k]
  ------------------
  415|    822|                            case 'n':
  ------------------
  |  Branch (415:29): [True: 201, False: 3.34k]
  ------------------
  416|    822|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (416:37): [True: 604, False: 218]
  |  Branch (416:37): [True: 408, False: 414]
  |  Branch (416:53): [True: 408, False: 196]
  ------------------
  417|    408|                                {
  418|    408|                                    return OpCode::ANDI;
  419|    408|                                }
  420|       |
  421|    414|                                break;
  422|  3.54k|                        }
  423|  1.28k|                        break;
  424|       |
  425|  1.30k|                    case 'B':
  ------------------
  |  Branch (425:21): [True: 1.30k, False: 38.8k]
  ------------------
  426|  3.64k|                    case 'b':
  ------------------
  |  Branch (426:21): [True: 2.34k, False: 37.8k]
  ------------------
  427|  3.64k|                        switch (c2)
  ------------------
  |  Branch (427:33): [True: 201, False: 3.44k]
  ------------------
  428|  3.64k|                        {
  429|    617|                            case 'E':
  ------------------
  |  Branch (429:29): [True: 617, False: 3.02k]
  ------------------
  430|    939|                            case 'e':
  ------------------
  |  Branch (430:29): [True: 322, False: 3.32k]
  ------------------
  431|    939|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (431:37): [True: 611, False: 328]
  |  Branch (431:37): [True: 417, False: 522]
  |  Branch (431:53): [True: 417, False: 194]
  ------------------
  432|    417|                                {
  433|    417|                                    return OpCode::BEQZ;
  434|    417|                                }
  435|    522|                                break;
  436|       |
  437|    522|                            case 'F':
  ------------------
  |  Branch (437:29): [True: 468, False: 3.17k]
  ------------------
  438|  1.25k|                            case 'f':
  ------------------
  |  Branch (438:29): [True: 791, False: 2.85k]
  ------------------
  439|  1.25k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (439:37): [True: 1.06k, False: 194]
  ------------------
  440|  1.06k|                                {
  441|  1.06k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (441:41): [True: 447, False: 618]
  ------------------
  442|    447|                                    {
  443|    447|                                        return OpCode::BFPF;
  444|    447|                                    }
  445|    618|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (445:46): [True: 419, False: 199]
  ------------------
  446|    419|                                    {
  447|    419|                                        return OpCode::BFPT;
  448|    419|                                    }
  449|  1.06k|                                }
  450|    393|                                break;
  451|       |
  452|    889|                            case 'N':
  ------------------
  |  Branch (452:29): [True: 889, False: 2.75k]
  ------------------
  453|  1.24k|                            case 'n':
  ------------------
  |  Branch (453:29): [True: 356, False: 3.28k]
  ------------------
  454|  1.24k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (454:37): [True: 743, False: 502]
  |  Branch (454:37): [True: 537, False: 708]
  |  Branch (454:53): [True: 537, False: 206]
  ------------------
  455|    537|                                {
  456|    537|                                    return OpCode::BNEZ;
  457|    537|                                }
  458|  3.64k|                        }
  459|  1.82k|                        break;
  460|       |
  461|  1.82k|                    case 'D':
  ------------------
  |  Branch (461:21): [True: 1.25k, False: 38.8k]
  ------------------
  462|  2.95k|                    case 'd':
  ------------------
  |  Branch (462:21): [True: 1.70k, False: 38.4k]
  ------------------
  463|  2.95k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (463:29): [True: 2.52k, False: 435]
  |  Branch (463:29): [True: 2.31k, False: 647]
  |  Branch (463:45): [True: 2.31k, False: 212]
  ------------------
  464|  2.31k|                        {
  465|  2.31k|                            switch (c4)
  ------------------
  |  Branch (465:37): [True: 449, False: 1.86k]
  ------------------
  466|  2.31k|                            {
  467|    195|                                case 'D':
  ------------------
  |  Branch (467:33): [True: 195, False: 2.11k]
  ------------------
  468|    389|                                case 'd':
  ------------------
  |  Branch (468:33): [True: 194, False: 2.11k]
  ------------------
  469|    389|                                    return OpCode::DIVD;
  470|       |
  471|    322|                                case 'F':
  ------------------
  |  Branch (471:33): [True: 322, False: 1.99k]
  ------------------
  472|    517|                                case 'f':
  ------------------
  |  Branch (472:33): [True: 195, False: 2.11k]
  ------------------
  473|    517|                                    return OpCode::DIVF;
  474|       |
  475|    198|                                case 'I':
  ------------------
  |  Branch (475:33): [True: 198, False: 2.11k]
  ------------------
  476|    406|                                case 'i':
  ------------------
  |  Branch (476:33): [True: 208, False: 2.10k]
  ------------------
  477|    406|                                    return OpCode::DIVI;
  478|       |
  479|    356|                                case 'U':
  ------------------
  |  Branch (479:33): [True: 356, False: 1.95k]
  ------------------
  480|    551|                                case 'u':
  ------------------
  |  Branch (480:33): [True: 195, False: 2.11k]
  ------------------
  481|    551|                                    return OpCode::DIVU;
  482|  2.31k|                            }
  483|  2.31k|                        }
  484|  1.09k|                        break;
  485|       |
  486|  1.09k|                    case 'H':
  ------------------
  |  Branch (486:21): [True: 761, False: 39.3k]
  ------------------
  487|  1.04k|                    case 'h':
  ------------------
  |  Branch (487:21): [True: 282, False: 39.8k]
  ------------------
  488|  1.04k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (488:29): [True: 832, False: 211]
  |  Branch (488:29): [True: 394, False: 649]
  |  Branch (488:45): [True: 637, False: 195]
  |  Branch (488:61): [True: 394, False: 243]
  ------------------
  489|    394|                        {
  490|    394|                            return OpCode::HALT;
  491|    394|                        }
  492|    649|                        break;
  493|       |
  494|  1.33k|                    case 'J':
  ------------------
  |  Branch (494:21): [True: 1.33k, False: 38.8k]
  ------------------
  495|  1.87k|                    case 'j':
  ------------------
  |  Branch (495:21): [True: 542, False: 39.6k]
  ------------------
  496|  1.87k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (496:29): [True: 1.37k, False: 500]
  |  Branch (496:29): [True: 660, False: 1.21k]
  |  Branch (496:45): [True: 1.05k, False: 322]
  |  Branch (496:61): [True: 660, False: 391]
  ------------------
  497|    660|                        {
  498|    660|                            return OpCode::JALR;
  499|    660|                        }
  500|  1.21k|                        break;
  501|       |
  502|  1.86k|                    case 'M':
  ------------------
  |  Branch (502:21): [True: 1.86k, False: 38.2k]
  ------------------
  503|  2.86k|                    case 'm':
  ------------------
  |  Branch (503:21): [True: 1.00k, False: 39.1k]
  ------------------
  504|  2.86k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (504:29): [True: 1.21k, False: 1.64k]
  |  Branch (504:29): [True: 1.01k, False: 1.85k]
  |  Branch (504:45): [True: 1.01k, False: 205]
  ------------------
  505|  1.01k|                        {
  506|  1.01k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (506:33): [True: 406, False: 608]
  ------------------
  507|    406|                            {
  508|    406|                                return OpCode::MOVD;
  509|    406|                            }
  510|    608|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (510:38): [True: 407, False: 201]
  ------------------
  511|    407|                            {
  512|    407|                                return OpCode::MOVF;
  513|    407|                            }
  514|  1.01k|                        }
  515|  1.85k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (515:34): [True: 1.42k, False: 430]
  |  Branch (515:34): [True: 471, False: 1.38k]
  |  Branch (515:50): [True: 1.09k, False: 327]
  |  Branch (515:66): [True: 471, False: 624]
  ------------------
  516|    471|                        {
  517|    471|                            return OpCode::MULT;
  518|    471|                        }
  519|  1.58k|                        break;
  520|       |
  521|  6.41k|                    case 'S':
  ------------------
  |  Branch (521:21): [True: 6.41k, False: 33.7k]
  ------------------
  522|  14.4k|                    case 's':
  ------------------
  |  Branch (522:21): [True: 8.05k, False: 32.0k]
  ------------------
  523|  14.4k|                        switch (c2)
  ------------------
  |  Branch (523:33): [True: 377, False: 14.0k]
  ------------------
  524|  14.4k|                        {
  525|    758|                            case 'E':
  ------------------
  |  Branch (525:29): [True: 758, False: 13.7k]
  ------------------
  526|  1.57k|                            case 'e':
  ------------------
  |  Branch (526:29): [True: 815, False: 13.6k]
  ------------------
  527|  1.57k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (527:37): [True: 1.37k, False: 200]
  ------------------
  528|  1.37k|                                {
  529|  1.37k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (529:41): [True: 403, False: 970]
  ------------------
  530|    403|                                    {
  531|    403|                                        return OpCode::SEQI;
  532|    403|                                    }
  533|    970|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (533:46): [True: 533, False: 437]
  ------------------
  534|    533|                                    {
  535|    533|                                        return OpCode::SEQU;
  536|    533|                                    }
  537|  1.37k|                                }
  538|    637|                                break;
  539|       |
  540|    637|                            case 'G':
  ------------------
  |  Branch (540:29): [True: 605, False: 13.8k]
  ------------------
  541|  2.60k|                            case 'g':
  ------------------
  |  Branch (541:29): [True: 1.99k, False: 12.4k]
  ------------------
  542|  2.60k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (542:37): [True: 1.38k, False: 1.21k]
  ------------------
  543|  1.38k|                                {
  544|  1.38k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (544:41): [True: 530, False: 859]
  ------------------
  545|    530|                                    {
  546|    530|                                        return OpCode::SGEI;
  547|    530|                                    }
  548|    859|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (548:46): [True: 658, False: 201]
  ------------------
  549|    658|                                    {
  550|    658|                                        return OpCode::SGEU;
  551|    658|                                    }
  552|  1.38k|                                }
  553|  1.21k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (553:42): [True: 1.00k, False: 205]
  ------------------
  554|  1.00k|                                {
  555|  1.00k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (555:41): [True: 408, False: 599]
  ------------------
  556|    408|                                    {
  557|    408|                                        return OpCode::SGTI;
  558|    408|                                    }
  559|    599|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (559:46): [True: 403, False: 196]
  ------------------
  560|    403|                                    {
  561|    403|                                        return OpCode::SGTU;
  562|    403|                                    }
  563|  1.00k|                                }
  564|    602|                                break;
  565|       |
  566|  3.48k|                            case 'L':
  ------------------
  |  Branch (566:29): [True: 3.48k, False: 10.9k]
  ------------------
  567|  4.46k|                            case 'l':
  ------------------
  |  Branch (567:29): [True: 987, False: 13.4k]
  ------------------
  568|  4.46k|                                switch (c3)
  ------------------
  |  Branch (568:41): [True: 195, False: 4.27k]
  ------------------
  569|  4.46k|                                {
  570|    456|                                    case 'A':
  ------------------
  |  Branch (570:37): [True: 456, False: 4.01k]
  ------------------
  571|    660|                                    case 'a':
  ------------------
  |  Branch (571:37): [True: 204, False: 4.26k]
  ------------------
  572|    660|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (572:45): [True: 428, False: 232]
  ------------------
  573|    428|                                        {
  574|    428|                                            return OpCode::SLAI;
  575|    428|                                        }
  576|    232|                                        break;
  577|       |
  578|    907|                                    case 'E':
  ------------------
  |  Branch (578:37): [True: 907, False: 3.56k]
  ------------------
  579|  1.13k|                                    case 'e':
  ------------------
  |  Branch (579:37): [True: 229, False: 4.23k]
  ------------------
  580|  1.13k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (580:45): [True: 403, False: 733]
  ------------------
  581|    403|                                        {
  582|    403|                                            return OpCode::SLEI;
  583|    403|                                        }
  584|    733|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (584:50): [True: 537, False: 196]
  ------------------
  585|    537|                                        {
  586|    537|                                            return OpCode::SLEU;
  587|    537|                                        }
  588|    196|                                        break;
  589|       |
  590|    549|                                    case 'L':
  ------------------
  |  Branch (590:37): [True: 549, False: 3.91k]
  ------------------
  591|  1.03k|                                    case 'l':
  ------------------
  |  Branch (591:37): [True: 481, False: 3.98k]
  ------------------
  592|  1.03k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (592:45): [True: 555, False: 475]
  ------------------
  593|    555|                                        {
  594|    555|                                            return OpCode::SLLI;
  595|    555|                                        }
  596|    475|                                        break;
  597|       |
  598|    614|                                    case 'T':
  ------------------
  |  Branch (598:37): [True: 614, False: 3.85k]
  ------------------
  599|  1.44k|                                    case 't':
  ------------------
  |  Branch (599:37): [True: 832, False: 3.63k]
  ------------------
  600|  1.44k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (600:45): [True: 506, False: 940]
  ------------------
  601|    506|                                        {
  602|    506|                                            return OpCode::SLTI;
  603|    506|                                        }
  604|    940|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (604:50): [True: 546, False: 394]
  ------------------
  605|    546|                                        {
  606|    546|                                            return OpCode::SLTU;
  607|    546|                                        }
  608|    394|                                        break;
  609|  4.46k|                                }
  610|       |
  611|  2.66k|                            case 'N':
  ------------------
  |  Branch (611:29): [True: 1.16k, False: 13.2k]
  ------------------
  612|  2.87k|                            case 'n':
  ------------------
  |  Branch (612:29): [True: 210, False: 14.2k]
  ------------------
  613|  2.87k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (613:37): [True: 1.36k, False: 1.50k]
  ------------------
  614|  1.36k|                                {
  615|  1.36k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (615:41): [True: 403, False: 966]
  ------------------
  616|    403|                                    {
  617|    403|                                        return OpCode::SNEI;
  618|    403|                                    }
  619|    966|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (619:46): [True: 405, False: 561]
  ------------------
  620|    405|                                    {
  621|    405|                                        return OpCode::SNEU;
  622|    405|                                    }
  623|  1.36k|                                }
  624|  2.06k|                                break;
  625|       |
  626|  2.06k|                            case 'R':
  ------------------
  |  Branch (626:29): [True: 780, False: 13.6k]
  ------------------
  627|  1.46k|                            case 'r':
  ------------------
  |  Branch (627:29): [True: 688, False: 13.7k]
  ------------------
  628|  1.46k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (628:37): [True: 660, False: 808]
  |  Branch (628:37): [True: 440, False: 1.02k]
  |  Branch (628:53): [True: 440, False: 220]
  ------------------
  629|    440|                                {
  630|    440|                                    return OpCode::SRAI;
  631|    440|                                }
  632|  1.02k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (632:42): [True: 777, False: 251]
  |  Branch (632:42): [True: 576, False: 452]
  |  Branch (632:58): [True: 576, False: 201]
  ------------------
  633|    576|                                {
  634|    576|                                    return OpCode::SRLI;
  635|    576|                                }
  636|    452|                                break;
  637|       |
  638|  1.72k|                            case 'U':
  ------------------
  |  Branch (638:29): [True: 1.72k, False: 12.7k]
  ------------------
  639|  2.59k|                            case 'u':
  ------------------
  |  Branch (639:29): [True: 874, False: 13.5k]
  ------------------
  640|  2.59k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (640:37): [True: 2.39k, False: 200]
  ------------------
  641|  2.39k|                                {
  642|  2.39k|                                    switch (c4)
  ------------------
  |  Branch (642:45): [True: 198, False: 2.19k]
  ------------------
  643|  2.39k|                                    {
  644|    194|                                        case 'D':
  ------------------
  |  Branch (644:41): [True: 194, False: 2.20k]
  ------------------
  645|    400|                                        case 'd':
  ------------------
  |  Branch (645:41): [True: 206, False: 2.19k]
  ------------------
  646|    400|                                            return OpCode::SUBD;
  647|       |
  648|    194|                                        case 'F':
  ------------------
  |  Branch (648:41): [True: 194, False: 2.20k]
  ------------------
  649|    656|                                        case 'f':
  ------------------
  |  Branch (649:41): [True: 462, False: 1.93k]
  ------------------
  650|    656|                                            return OpCode::SUBF;
  651|       |
  652|    194|                                        case 'I':
  ------------------
  |  Branch (652:41): [True: 194, False: 2.20k]
  ------------------
  653|    597|                                        case 'i':
  ------------------
  |  Branch (653:41): [True: 403, False: 1.99k]
  ------------------
  654|    597|                                            return OpCode::SUBI;
  655|       |
  656|    351|                                        case 'U':
  ------------------
  |  Branch (656:41): [True: 351, False: 2.04k]
  ------------------
  657|    545|                                        case 'u':
  ------------------
  |  Branch (657:41): [True: 194, False: 2.20k]
  ------------------
  658|    545|                                            return OpCode::SUBU;
  659|  2.39k|                                    }
  660|  2.39k|                                }
  661|    398|                                break;
  662|  14.4k|                        }
  663|  4.52k|                        break;
  664|       |
  665|  4.52k|                    case 'T':
  ------------------
  |  Branch (665:21): [True: 1.73k, False: 38.4k]
  ------------------
  666|  2.58k|                    case 't':
  ------------------
  |  Branch (666:21): [True: 858, False: 39.2k]
  ------------------
  667|  2.58k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (667:29): [True: 2.23k, False: 351]
  |  Branch (667:29): [True: 389, False: 2.19k]
  |  Branch (667:45): [True: 904, False: 1.33k]
  |  Branch (667:61): [True: 389, False: 515]
  ------------------
  668|    389|                        {
  669|    389|                            return OpCode::TRAP;
  670|    389|                        }
  671|  2.19k|                        break;
  672|  2.19k|                    case 'X':
  ------------------
  |  Branch (672:21): [True: 202, False: 39.9k]
  ------------------
  673|  1.37k|                    case 'x':
  ------------------
  |  Branch (673:21): [True: 1.17k, False: 38.9k]
  ------------------
  674|  1.37k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (674:29): [True: 1.13k, False: 238]
  |  Branch (674:29): [True: 399, False: 977]
  |  Branch (674:45): [True: 800, False: 338]
  |  Branch (674:61): [True: 399, False: 401]
  ------------------
  675|    399|                        {
  676|    399|                            return OpCode::XORI;
  677|    399|                        }
  678|    977|                        break;
  679|  40.1k|                }
  680|  21.1k|                break;
  681|  40.1k|            }
  682|       |
  683|       |            // 5 character OpCodes
  684|  21.1k|            case 5: {
  ------------------
  |  Branch (684:13): [True: 18.4k, False: 139k]
  ------------------
  685|  18.4k|                const char c1 = token[0u];
  686|  18.4k|                const char c2 = token[1u];
  687|  18.4k|                const char c3 = token[2u];
  688|  18.4k|                const char c4 = token[3u];
  689|  18.4k|                const char c5 = token[4u];
  690|       |
  691|  18.4k|                switch (c1)
  ------------------
  |  Branch (691:25): [True: 2.15k, False: 16.2k]
  ------------------
  692|  18.4k|                {
  693|    204|                    case 'A':
  ------------------
  |  Branch (693:21): [True: 204, False: 18.2k]
  ------------------
  694|  1.81k|                    case 'a':
  ------------------
  |  Branch (694:21): [True: 1.61k, False: 16.8k]
  ------------------
  695|  1.81k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (695:29): [True: 1.58k, False: 231]
  |  Branch (695:29): [True: 537, False: 1.27k]
  |  Branch (695:45): [True: 1.32k, False: 256]
  |  Branch (695:61): [True: 739, False: 589]
  |  Branch (695:77): [True: 537, False: 202]
  ------------------
  696|    537|                        {
  697|    537|                            return OpCode::ADDUI;
  698|    537|                        }
  699|  1.27k|                        break;
  700|       |
  701|  1.27k|                    case 'D':
  ------------------
  |  Branch (701:21): [True: 1.20k, False: 17.2k]
  ------------------
  702|  2.05k|                    case 'd':
  ------------------
  |  Branch (702:21): [True: 842, False: 17.5k]
  ------------------
  703|  2.05k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (703:29): [True: 1.84k, False: 211]
  |  Branch (703:29): [True: 403, False: 1.64k]
  |  Branch (703:45): [True: 1.63k, False: 203]
  |  Branch (703:61): [True: 915, False: 722]
  |  Branch (703:77): [True: 403, False: 512]
  ------------------
  704|    403|                        {
  705|    403|                            return OpCode::DIVUI;
  706|    403|                        }
  707|  1.64k|                        break;
  708|       |
  709|  1.64k|                    case 'M':
  ------------------
  |  Branch (709:21): [True: 816, False: 17.6k]
  ------------------
  710|  3.71k|                    case 'm':
  ------------------
  |  Branch (710:21): [True: 2.89k, False: 15.5k]
  ------------------
  711|  3.71k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (711:29): [True: 3.48k, False: 232]
  |  Branch (711:29): [True: 2.55k, False: 1.16k]
  |  Branch (711:45): [True: 2.75k, False: 723]
  |  Branch (711:61): [True: 2.55k, False: 205]
  ------------------
  712|  2.55k|                        {
  713|  2.55k|                            switch (c5)
  ------------------
  |  Branch (713:37): [True: 252, False: 2.30k]
  ------------------
  714|  2.55k|                            {
  715|    207|                                case 'D':
  ------------------
  |  Branch (715:33): [True: 207, False: 2.34k]
  ------------------
  716|    401|                                case 'd':
  ------------------
  |  Branch (716:33): [True: 194, False: 2.35k]
  ------------------
  717|    401|                                    return OpCode::MULTD;
  718|       |
  719|    206|                                case 'F':
  ------------------
  |  Branch (719:33): [True: 206, False: 2.34k]
  ------------------
  720|    400|                                case 'f':
  ------------------
  |  Branch (720:33): [True: 194, False: 2.35k]
  ------------------
  721|    400|                                    return OpCode::MULTF;
  722|       |
  723|    324|                                case 'I':
  ------------------
  |  Branch (723:33): [True: 324, False: 2.22k]
  ------------------
  724|    590|                                case 'i':
  ------------------
  |  Branch (724:33): [True: 266, False: 2.28k]
  ------------------
  725|    590|                                    return OpCode::MULTI;
  726|       |
  727|    618|                                case 'U':
  ------------------
  |  Branch (727:33): [True: 618, False: 1.93k]
  ------------------
  728|    910|                                case 'u':
  ------------------
  |  Branch (728:33): [True: 292, False: 2.26k]
  ------------------
  729|    910|                                    return OpCode::MULTU;
  730|  2.55k|                            }
  731|  2.55k|                        }
  732|  1.41k|                        break;
  733|       |
  734|  2.87k|                    case 'S':
  ------------------
  |  Branch (734:21): [True: 2.87k, False: 15.5k]
  ------------------
  735|  8.69k|                    case 's':
  ------------------
  |  Branch (735:21): [True: 5.82k, False: 12.6k]
  ------------------
  736|  8.69k|                        switch (c2)
  ------------------
  |  Branch (736:33): [True: 291, False: 8.40k]
  ------------------
  737|  8.69k|                        {
  738|  1.05k|                            case 'E':
  ------------------
  |  Branch (738:29): [True: 1.05k, False: 7.63k]
  ------------------
  739|  1.57k|                            case 'e':
  ------------------
  |  Branch (739:29): [True: 517, False: 8.17k]
  ------------------
  740|  1.57k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (740:37): [True: 1.37k, False: 200]
  |  Branch (740:37): [True: 658, False: 916]
  |  Branch (740:53): [True: 1.17k, False: 198]
  |  Branch (740:69): [True: 658, False: 518]
  ------------------
  741|    658|                                {
  742|    658|                                    return OpCode::SEQUI;
  743|    658|                                }
  744|    916|                                break;
  745|       |
  746|    916|                            case 'G':
  ------------------
  |  Branch (746:29): [True: 746, False: 7.94k]
  ------------------
  747|  1.84k|                            case 'g':
  ------------------
  |  Branch (747:29): [True: 1.09k, False: 7.59k]
  ------------------
  748|  1.84k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (748:37): [True: 924, False: 918]
  |  Branch (748:37): [True: 400, False: 1.44k]
  |  Branch (748:53): [True: 730, False: 194]
  |  Branch (748:69): [True: 400, False: 330]
  ------------------
  749|    400|                                {
  750|    400|                                    return OpCode::SGEUI;
  751|    400|                                }
  752|  1.44k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (752:42): [True: 918, False: 524]
  |  Branch (752:42): [True: 402, False: 1.04k]
  |  Branch (752:58): [True: 724, False: 194]
  |  Branch (752:74): [True: 402, False: 322]
  ------------------
  753|    402|                                {
  754|    402|                                    return OpCode::SGTUI;
  755|    402|                                }
  756|  1.04k|                                break;
  757|       |
  758|  1.68k|                            case 'L':
  ------------------
  |  Branch (758:29): [True: 1.68k, False: 7.01k]
  ------------------
  759|  2.41k|                            case 'l':
  ------------------
  |  Branch (759:29): [True: 732, False: 7.96k]
  ------------------
  760|  2.41k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (760:37): [True: 1.14k, False: 1.27k]
  |  Branch (760:37): [True: 656, False: 1.75k]
  |  Branch (760:53): [True: 884, False: 257]
  |  Branch (760:69): [True: 656, False: 228]
  ------------------
  761|    656|                                {
  762|    656|                                    return OpCode::SLEUI;
  763|    656|                                }
  764|  1.75k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (764:42): [True: 1.08k, False: 673]
  |  Branch (764:42): [True: 402, False: 1.35k]
  |  Branch (764:58): [True: 888, False: 198]
  |  Branch (764:74): [True: 402, False: 486]
  ------------------
  765|    402|                                {
  766|    402|                                    return OpCode::SLTUI;
  767|    402|                                }
  768|  1.35k|                                break;
  769|       |
  770|  1.35k|                            case 'N':
  ------------------
  |  Branch (770:29): [True: 871, False: 7.82k]
  ------------------
  771|  1.25k|                            case 'n':
  ------------------
  |  Branch (771:29): [True: 383, False: 8.31k]
  ------------------
  772|  1.25k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (772:37): [True: 1.05k, False: 203]
  |  Branch (772:37): [True: 400, False: 854]
  |  Branch (772:53): [True: 839, False: 212]
  |  Branch (772:69): [True: 400, False: 439]
  ------------------
  773|    400|                                {
  774|    400|                                    return OpCode::SNEUI;
  775|    400|                                }
  776|    854|                                break;
  777|       |
  778|    854|                            case 'U':
  ------------------
  |  Branch (778:29): [True: 828, False: 7.86k]
  ------------------
  779|  1.31k|                            case 'u':
  ------------------
  |  Branch (779:29): [True: 491, False: 8.20k]
  ------------------
  780|  1.31k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (780:37): [True: 997, False: 322]
  |  Branch (780:37): [True: 538, False: 781]
  |  Branch (780:53): [True: 797, False: 200]
  |  Branch (780:69): [True: 538, False: 259]
  ------------------
  781|    538|                                {
  782|    538|                                    return OpCode::SUBUI;
  783|    538|                                }
  784|    781|                                break;
  785|  8.69k|                        }
  786|       |
  787|  5.23k|                        break;
  788|  18.4k|                }
  789|       |
  790|  11.7k|                break;
  791|  18.4k|            }
  792|       |
  793|       |            // 6 character OpCodes
  794|  11.7k|            case 6: {
  ------------------
  |  Branch (794:13): [True: 9.38k, False: 148k]
  ------------------
  795|  9.38k|                const char c1 = token[0u];
  796|  9.38k|                const char c2 = token[1u];
  797|  9.38k|                const char c3 = token[2u];
  798|  9.38k|                const char c4 = token[3u];
  799|  9.38k|                const char c5 = token[4u];
  800|  9.38k|                const char c6 = token[5u];
  801|       |
  802|  9.38k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (802:21): [True: 5.43k, False: 3.94k]
  |  Branch (802:21): [True: 4.91k, False: 4.46k]
  |  Branch (802:37): [True: 5.23k, False: 194]
  |  Branch (802:53): [True: 4.91k, False: 324]
  ------------------
  803|  4.91k|                {
  804|  4.91k|                    switch (c4)
  ------------------
  |  Branch (804:29): [True: 194, False: 4.72k]
  ------------------
  805|  4.91k|                    {
  806|  1.25k|                        case 'D':
  ------------------
  |  Branch (806:25): [True: 1.25k, False: 3.65k]
  ------------------
  807|  1.83k|                        case 'd':
  ------------------
  |  Branch (807:25): [True: 579, False: 4.33k]
  ------------------
  808|  1.83k|                            if (c5 == '2')
  ------------------
  |  Branch (808:33): [True: 1.64k, False: 194]
  ------------------
  809|  1.64k|                            {
  810|  1.64k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (810:37): [True: 531, False: 1.11k]
  ------------------
  811|    531|                                {
  812|    531|                                    return OpCode::CVTD2F;
  813|    531|                                }
  814|  1.11k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (814:42): [True: 916, False: 194]
  ------------------
  815|    916|                                {
  816|    916|                                    return OpCode::CVTD2I;
  817|    916|                                }
  818|  1.64k|                            }
  819|    388|                            break;
  820|       |
  821|    970|                        case 'F':
  ------------------
  |  Branch (821:25): [True: 970, False: 3.94k]
  ------------------
  822|  1.22k|                        case 'f':
  ------------------
  |  Branch (822:25): [True: 253, False: 4.66k]
  ------------------
  823|  1.22k|                            if (c5 == '2')
  ------------------
  |  Branch (823:33): [True: 997, False: 226]
  ------------------
  824|    997|                            {
  825|    997|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (825:37): [True: 401, False: 596]
  ------------------
  826|    401|                                {
  827|    401|                                    return OpCode::CVTF2D;
  828|    401|                                }
  829|    596|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (829:42): [True: 402, False: 194]
  ------------------
  830|    402|                                {
  831|    402|                                    return OpCode::CVTF2I;
  832|    402|                                }
  833|    997|                            }
  834|    420|                            break;
  835|       |
  836|  1.44k|                        case 'I':
  ------------------
  |  Branch (836:25): [True: 1.44k, False: 3.46k]
  ------------------
  837|  1.66k|                        case 'i':
  ------------------
  |  Branch (837:25): [True: 214, False: 4.70k]
  ------------------
  838|  1.66k|                            if (c5 == '2')
  ------------------
  |  Branch (838:33): [True: 1.45k, False: 212]
  ------------------
  839|  1.45k|                            {
  840|  1.45k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (840:37): [True: 531, False: 920]
  ------------------
  841|    531|                                {
  842|    531|                                    return OpCode::CVTI2D;
  843|    531|                                }
  844|    920|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (844:42): [True: 405, False: 515]
  ------------------
  845|    405|                                {
  846|    405|                                    return OpCode::CVTI2F;
  847|    405|                                }
  848|  1.45k|                            }
  849|  4.91k|                    }
  850|  4.91k|                }
  851|  4.46k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (851:26): [True: 2.82k, False: 1.64k]
  |  Branch (851:26): [True: 792, False: 3.67k]
  |  Branch (851:42): [True: 2.29k, False: 527]
  |  Branch (851:58): [True: 1.84k, False: 453]
  |  Branch (851:74): [True: 1.61k, False: 226]
  ------------------
  852|  4.46k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (852:26): [True: 1.00k, False: 611]
  |  Branch (852:42): [True: 792, False: 211]
  ------------------
  853|    792|                {
  854|    792|                    return OpCode::MULTUI;
  855|    792|                }
  856|  5.40k|                break;
  857|  9.38k|            }
  858|       |
  859|       |            // 7 character OpCodes
  860|  5.40k|            case 7: {
  ------------------
  |  Branch (860:13): [True: 4.66k, False: 153k]
  ------------------
  861|  4.66k|                const char c1 = token[0u];
  862|  4.66k|                const char c2 = token[1u];
  863|  4.66k|                const char c3 = token[2u];
  864|  4.66k|                const char c4 = token[3u];
  865|  4.66k|                const char c5 = token[4u];
  866|  4.66k|                const char c6 = token[5u];
  867|  4.66k|                const char c7 = token[6u];
  868|       |
  869|  4.66k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (869:21): [True: 3.92k, False: 743]
  |  Branch (869:21): [True: 3.14k, False: 1.51k]
  |  Branch (869:37): [True: 3.47k, False: 446]
  |  Branch (869:53): [True: 3.14k, False: 330]
  ------------------
  870|  3.14k|                {
  871|  3.14k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (871:25): [True: 1.36k, False: 1.78k]
  |  Branch (871:25): [True: 772, False: 2.37k]
  |  Branch (871:41): [True: 1.16k, False: 195]
  |  Branch (871:54): [True: 971, False: 194]
  |  Branch (871:70): [True: 772, False: 199]
  ------------------
  872|    772|                    {
  873|    772|                        return OpCode::MOVI2FP;
  874|    772|                    }
  875|  2.37k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (875:25): [True: 1.41k, False: 962]
  |  Branch (875:25): [True: 772, False: 1.60k]
  |  Branch (875:41): [True: 1.16k, False: 248]
  |  Branch (875:57): [True: 966, False: 198]
  |  Branch (875:70): [True: 772, False: 194]
  ------------------
  876|    772|                    {
  877|    772|                        return OpCode::MOVFP2I;
  878|    772|                    }
  879|  2.37k|                }
  880|  3.12k|                break;
  881|  4.66k|            }
  882|       |
  883|  3.12k|            default: {
  ------------------
  |  Branch (883:13): [True: 1.63k, False: 156k]
  ------------------
  884|  1.63k|                break;
  885|  4.66k|            }
  886|   158k|        }
  887|       |
  888|       |        // None found
  889|  87.1k|        return OpCode::NONE;
  890|   158k|    }
_ZN3dlx3iceEcc:
   15|   261k|    {
   16|   261k|        constexpr const char diff = 'a' - 'A';
   17|   261k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (17:16): [True: 96.2k, False: 165k]
  |  Branch (17:28): [True: 74.7k, False: 90.8k]
  ------------------
   18|   261k|    }

_ZN3dlx10ParseErrorC2Ev:
   18|   140k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  186|  1.38k|    {
  187|  1.38k|        ParseError err;
  188|       |
  189|  1.38k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  190|  1.38k|        err.m_LineNumber                           = line_number;
  191|  1.38k|        err.m_Column                               = column;
  192|  1.38k|        err.unexpected_argument_type.expected_type = expected_type;
  193|  1.38k|        err.unexpected_argument_type.actual_type   = actual_type;
  194|       |
  195|  1.38k|        return err;
  196|  1.38k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  201|  1.38k|    {
  202|  1.38k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  203|  1.38k|                                                         token.GetColumn().unsafe(), expected_type,
  204|  1.38k|                                                         actual_type);
  205|  1.38k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  209|    194|    {
  210|    194|        ParseError err;
  211|       |
  212|    194|        err.m_Type              = ParseError::Type::InvalidNumber;
  213|    194|        err.m_LineNumber        = line_number;
  214|    194|        err.m_Column            = column;
  215|    194|        err.invalid_number.text = text;
  216|       |
  217|    194|        return err;
  218|    194|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  221|    194|    {
  222|    194|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  223|    194|                                                token.GetColumn().unsafe(), token.GetText());
  224|    194|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  228|      2|    {
  229|      2|        ParseError err;
  230|       |
  231|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  232|      2|        err.m_LineNumber = line_number;
  233|      2|        err.m_Column     = column;
  234|       |
  235|      2|        return err;
  236|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  239|      2|    {
  240|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  241|      2|                                                                     token.GetColumn().unsafe());
  242|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  247|  52.9k|    {
  248|  52.9k|        ParseError err;
  249|       |
  250|  52.9k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  251|  52.9k|        err.m_LineNumber                   = line_number;
  252|  52.9k|        err.m_Column                       = column;
  253|  52.9k|        err.unexpected_token.expected_type = expected_type;
  254|  52.9k|        err.unexpected_token.actual_type   = actual_type;
  255|       |
  256|  52.9k|        return err;
  257|  52.9k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  261|  52.9k|    {
  262|  52.9k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  263|  52.9k|                                                  token.GetColumn().unsafe(), expected_type,
  264|  52.9k|                                                  token.GetType());
  265|  52.9k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  270|  15.5k|    {
  271|  15.5k|        ParseError err;
  272|       |
  273|  15.5k|        err.m_Type                         = ParseError::Type::ReservedIdentifier;
  274|  15.5k|        err.m_LineNumber                   = line_number;
  275|  15.5k|        err.m_Column                       = column;
  276|  15.5k|        err.reserved_identifier.identifier = identifier;
  277|       |
  278|  15.5k|        return err;
  279|  15.5k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorERKNS_5TokenE:
  282|    204|    {
  283|    204|        return ConstructReservedIdentifierParseError(token.GetLineNumber().unsafe(),
  284|    204|                                                     token.GetColumn().unsafe(), token.GetText());
  285|    204|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  290|  24.7k|    {
  291|  24.7k|        ParseError err;
  292|       |
  293|  24.7k|        err.m_Type                              = ParseError::Type::InvalidLabelIdentifier;
  294|  24.7k|        err.m_LineNumber                        = line_number;
  295|  24.7k|        err.m_Column                            = column;
  296|  24.7k|        err.invalid_label_identifier.identifier = identifier;
  297|       |
  298|  24.7k|        return err;
  299|  24.7k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  302|  24.7k|    {
  303|  24.7k|        return ConstructInvalidLabelIdentifierParseError(
  304|  24.7k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  305|  24.7k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  312|  6.39k|    {
  313|  6.39k|        ParseError err;
  314|       |
  315|  6.39k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  316|  6.39k|        err.m_LineNumber                     = line_number;
  317|  6.39k|        err.m_Column                         = column;
  318|  6.39k|        err.label_already_defined.label_name = label_name;
  319|  6.39k|        err.label_already_defined.at_line    = at_line;
  320|  6.39k|        err.label_already_defined.at_column  = at_column;
  321|       |
  322|  6.39k|        return err;
  323|  6.39k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  327|  6.39k|    {
  328|  6.39k|        return ConstructLabelAlreadyDefinedParseError(
  329|  6.39k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  330|  6.39k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  331|  6.39k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  335|  30.1k|    {
  336|  30.1k|        ParseError err;
  337|       |
  338|  30.1k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  339|  30.1k|        err.m_LineNumber = line_number;
  340|  30.1k|        err.m_Column     = column;
  341|       |
  342|  30.1k|        return err;
  343|  30.1k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  346|  30.1k|    {
  347|  30.1k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  348|  30.1k|                                                        token.GetColumn().unsafe());
  349|  30.1k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  354|  4.07k|    {
  355|  4.07k|        ParseError err;
  356|       |
  357|  4.07k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  358|  4.07k|        err.m_LineNumber               = line_number;
  359|  4.07k|        err.m_Column                   = column;
  360|  4.07k|        err.too_few_arguments.required = required;
  361|  4.07k|        err.too_few_arguments.provided = provided;
  362|       |
  363|  4.07k|        return err;
  364|  4.07k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  368|  4.07k|    {
  369|  4.07k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  370|  4.07k|                                                  token.GetColumn().unsafe(), required, provided);
  371|  4.07k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  375|  4.36k|    {
  376|  4.36k|        ParseError err;
  377|       |
  378|  4.36k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  379|  4.36k|        err.m_LineNumber           = line_number;
  380|  4.36k|        err.m_Column               = column;
  381|  4.36k|        err.empty_label.label_name = label_name;
  382|       |
  383|  4.36k|        return err;
  384|  4.36k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  387|  4.36k|    {
  388|  4.36k|        return ConstructEmptyLabelParseError(
  389|  4.36k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  390|  4.36k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (390:17): [True: 3.50k, False: 853]
  ------------------
  391|  3.50k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  392|  4.36k|                        token.GetText());
  393|  4.36k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  397|    393|    {
  398|    393|        ParseError err;
  399|       |
  400|    393|        err.m_Type       = ParseError::Type::TooManyComma;
  401|    393|        err.m_LineNumber = line_number;
  402|    393|        err.m_Column     = column;
  403|       |
  404|    393|        return err;
  405|    393|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  408|    393|    {
  409|    393|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  410|    393|                                               token.GetColumn().unsafe());
  411|    393|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   16|   140k|    {
   17|   140k|        m_ParseErrors.emplace_back(phi::move(error));
   18|   140k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  5.48k|    {
  181|  5.48k|        ParsedProgram program;
  182|       |
  183|  5.48k|        program.m_Tokens = tokens;
  184|       |
  185|  5.48k|        phi::boolean line_has_instruction{false};
  186|  5.48k|        phi::usize   label_count{0u};
  187|       |
  188|   184k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 178k, False: 5.48k]
  ------------------
  189|   178k|        {
  190|   178k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   178k|            switch (current_token.GetType())
  195|   178k|            {
  196|       |                // Ignore comments
  197|    644|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 644, False: 177k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|    644|                    break;
  200|       |
  201|  28.0k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 28.0k, False: 150k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  28.0k|                    line_has_instruction = false;
  204|  28.0k|                    break;
  205|       |
  206|  52.1k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 52.1k, False: 126k]
  ------------------
  207|  52.1k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 5.81k, False: 46.3k]
  ------------------
  208|  5.81k|                    {
  209|  5.81k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  5.81k|                                current_token, Token::Type::NewLine));
  211|  5.81k|                        break;
  212|  5.81k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  46.3k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 12.3k, False: 34.0k]
  ------------------
  217|  12.3k|                    {
  218|  12.3k|                        program.AddParseError(
  219|  12.3k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  12.3k|                        break;
  221|  12.3k|                    }
  222|       |
  223|  34.0k|                    phi::string_view label_name = current_token.GetText();
  224|  34.0k|                    label_name.remove_suffix(1u);
  225|       |
  226|  34.0k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 15.3k, False: 18.6k]
  ------------------
  227|  15.3k|                    {
  228|  15.3k|                        program.AddParseError(ConstructReservedIdentifierParseError(
  229|  15.3k|                                current_token.GetLineNumber().unsafe(),
  230|  15.3k|                                current_token.GetColumn().unsafe(), label_name));
  231|  15.3k|                        break;
  232|  15.3k|                    }
  233|       |
  234|  18.6k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 7.57k, False: 11.0k]
  ------------------
  235|  7.57k|                    {
  236|  7.57k|                        program.AddParseError(
  237|  7.57k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  7.57k|                        break;
  239|  7.57k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  11.0k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 6.39k, False: 4.67k]
  ------------------
  243|  6.39k|                    {
  244|       |                        // Find first defintions of label
  245|  6.39k|                        const Token* first_label_definition =
  246|  6.39k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  6.39k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  6.39k|                                    {
  249|  6.39k|                                        phi::string_view token_label_name = t.GetText();
  250|  6.39k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  6.39k|                                        if (token_label_name == label_name)
  253|  6.39k|                                        {
  254|  6.39k|                                            return true;
  255|  6.39k|                                        }
  256|  6.39k|                                    }
  257|       |
  258|  6.39k|                                    return false;
  259|  6.39k|                                });
  260|       |
  261|  6.39k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  6.39k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  6.39k|                                current_token, *first_label_definition));
  265|  6.39k|                        break;
  266|  6.39k|                    }
  267|       |
  268|  4.67k|                    program.m_JumpData[label_name] =
  269|  4.67k|                            static_cast<phi::uint32_t>(program.m_Instructions.size());
  270|  4.67k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  4.67k|                    break;
  276|  11.0k|                }
  277|       |
  278|  55.2k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 55.2k, False: 123k]
  ------------------
  279|  55.2k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 30.1k, False: 25.0k]
  ------------------
  280|  30.1k|                    {
  281|  30.1k|                        program.AddParseError(
  282|  30.1k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  30.1k|                        break;
  284|  30.1k|                    }
  285|       |
  286|  25.0k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  25.0k|                    PHI_ASSERT(current_token.HasHint());
  290|  25.0k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  25.0k|                    const InstructionInfo& info = LookUpInstructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  25.0k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  25.0k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  25.0k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  25.0k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  25.0k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  25.0k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  25.0k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  54.2k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 44.5k, False: 9.70k]
  ------------------
  312|  44.5k|                    {
  313|       |                        // Get next token
  314|  44.5k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 605, False: 43.9k]
  ------------------
  315|    605|                        {
  316|    605|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    605|                                    current_token, number_of_argument_required.unsafe(),
  318|    605|                                    argument_num.unsafe()));
  319|    605|                            break;
  320|    605|                        }
  321|       |
  322|  43.9k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  43.9k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 15.7k, False: 28.1k]
  ------------------
  326|  15.7k|                        {
  327|  15.7k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 393, False: 15.4k]
  ------------------
  328|    393|                            {
  329|    393|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    393|                            }
  331|       |
  332|  15.7k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  15.7k|                            continue;
  335|  15.7k|                        }
  336|       |
  337|  28.1k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 3.46k, False: 24.6k]
  ------------------
  338|  3.46k|                        {
  339|  3.46k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  3.46k|                                    token, number_of_argument_required.unsafe(),
  341|  3.46k|                                    argument_num.unsafe()));
  342|  3.46k|                            break;
  343|  3.46k|                        }
  344|       |
  345|  24.6k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  24.6k|                                parse_instruction_argument(
  347|  24.6k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  24.6k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 11.2k, False: 13.3k]
  ------------------
  349|  11.2k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  11.2k|                            break;
  352|  11.2k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  13.3k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  13.3k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  13.3k|                        argument_num++;
  359|  13.3k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  13.3k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  25.0k|                    program.m_Instructions.emplace_back(instruction);
  367|  25.0k|                    line_has_instruction = true;
  368|  25.0k|                    break;
  369|  55.2k|                }
  370|       |
  371|  42.5k|                default:
  ------------------
  |  Branch (371:17): [True: 42.5k, False: 136k]
  ------------------
  372|  42.5k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  42.5k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 28.0k, False: 14.4k]
  ------------------
  374|  28.0k|                    {
  375|  28.0k|                        expected_token_type = Token::Type::NewLine;
  376|  28.0k|                    }
  377|       |
  378|  42.5k|                    program.AddParseError(
  379|  42.5k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  42.5k|                    break;
  381|   178k|            }
  382|   178k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  5.48k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 396, False: 5.08k]
  ------------------
  386|    396|        {
  387|  5.86k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 5.47k, False: 396]
  ------------------
  388|  5.47k|            {
  389|  5.47k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  5.47k|                const Token& token = *it;
  392|  5.47k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 4.36k, False: 1.11k]
  ------------------
  393|  4.36k|                {
  394|  4.36k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  4.36k|                    --label_count;
  396|  4.36k|                }
  397|  5.47k|            }
  398|    396|        }
  399|       |
  400|  5.48k|        return program;
  401|  5.48k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  5.48k|    {
  405|  5.48k|        TokenStream tokens = Tokenize(source);
  406|  5.48k|        return Parse(tokens);
  407|  5.48k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  24.6k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  24.6k|        switch (token.GetType())
   37|  24.6k|        {
   38|  1.00k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 1.00k, False: 23.6k]
  ------------------
   39|  1.00k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 217, False: 784]
  ------------------
   40|  1.00k|                                          ArgumentType::AddressDisplacement))
   41|    217|                {
   42|    217|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    217|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    217|                    return {};
   46|    217|                }
   47|       |
   48|       |                // Get address displacement
   49|    784|                PHI_ASSERT(token.HasHint());
   50|       |
   51|    784|                phi::int16_t value = static_cast<phi::int16_t>(token.GetHint());
   52|       |
   53|    784|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 2, False: 782]
  ------------------
   54|      2|                {
   55|      2|                    program.AddParseError(
   56|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      2|                    return {};
   58|      2|                }
   59|       |
   60|    782|                auto         it           = tokens.current_position();
   61|    782|                const Token& first_token  = tokens.consume();
   62|    782|                const Token& second_token = tokens.consume();
   63|    782|                const Token& third_token  = tokens.consume();
   64|       |
   65|    782|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 195, False: 587]
  ------------------
   66|    195|                {
   67|    195|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    195|                            first_token, Token::Type::OpenBracket));
   69|    195|                    return {};
   70|    195|                }
   71|       |
   72|       |                // Second token is the register
   73|    587|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 194, False: 393]
  ------------------
   74|    194|                {
   75|    194|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|    194|                            second_token, Token::Type::RegisterInt));
   77|    194|                    return {};
   78|    194|                }
   79|       |
   80|    393|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 194, False: 199]
  ------------------
   81|    194|                {
   82|    194|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|    194|                            third_token, Token::Type::ClosingBracket));
   84|    194|                    return {};
   85|    194|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|    199|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|    199|                return ConstructInstructionArgumentAddressDisplacement(
   94|    199|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|    393|            }
   96|  7.45k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 7.45k, False: 17.2k]
  ------------------
   97|  7.45k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 205, False: 7.24k]
  ------------------
   98|    205|                {
   99|    205|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    205|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    205|                    return {};
  102|    205|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  7.24k|                return ConstructInstructionArgumentRegisterInt(
  108|  7.24k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  7.45k|            }
  110|  2.00k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 2.00k, False: 22.6k]
  ------------------
  111|  2.00k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 194, False: 1.81k]
  ------------------
  112|    194|                {
  113|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    194|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    194|                    return {};
  116|    194|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  1.81k|                return ConstructInstructionArgumentRegisterFloat(
  122|  1.81k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  2.00k|            }
  124|    204|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 204, False: 24.4k]
  ------------------
  125|    204|                program.AddParseError(ConstructReservedIdentifierParseError(token));
  126|       |
  127|    204|                return {};
  128|  2.00k|            }
  129|  8.16k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 8.16k, False: 16.4k]
  ------------------
  130|       |                // Parse as Label
  131|  8.16k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 569, False: 7.59k]
  ------------------
  132|    569|                {
  133|    569|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|    569|                            token, expected_argument_type, ArgumentType::Label));
  135|    569|                    return {};
  136|    569|                }
  137|       |
  138|  7.59k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 7.59k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentifierParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  7.59k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 4.85k, False: 2.74k]
  ------------------
  145|  4.85k|                {
  146|  4.85k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  4.85k|                    return {};
  148|  4.85k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  2.74k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  7.59k|            }
  154|  1.76k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 1.76k, False: 22.8k]
  ------------------
  155|  1.76k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 198, False: 1.57k]
  ------------------
  156|    198|                {
  157|    198|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    198|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    198|                    return {};
  160|    198|                }
  161|       |
  162|  1.57k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 1.37k, False: 194]
  ------------------
  163|  1.37k|                {
  164|  1.37k|                    return ConstructInstructionArgumentImmediateValue(
  165|  1.37k|                            static_cast<phi::int16_t>(token.GetHint()));
  166|  1.37k|                }
  167|       |
  168|    194|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    194|                return {};
  170|  1.57k|            }
  171|       |
  172|  4.06k|            default:
  ------------------
  |  Branch (172:13): [True: 4.06k, False: 20.6k]
  ------------------
  173|  4.06k|                program.AddParseError(
  174|  4.06k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  4.06k|                return {};
  176|  24.6k|        }
  177|  24.6k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  28.6k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  28.6k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 25.2k, False: 3.39k]
  ------------------
  248|  25.2k|                                    {
  249|  25.2k|                                        phi::string_view token_label_name = t.GetText();
  250|  25.2k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  25.2k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 6.39k, False: 18.8k]
  ------------------
  253|  6.39k|                                        {
  254|  6.39k|                                            return true;
  255|  6.39k|                                        }
  256|  25.2k|                                    }
  257|       |
  258|  22.2k|                                    return false;
  259|  28.6k|                                });

_ZN3dlx9ProcessorC2Ev:
   62|      1|    {
   63|       |        // Mark R0 as ready only
   64|      1|        m_IntRegisters[0].SetReadOnly(true);
   65|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   68|  2.83M|    {
   69|  2.83M|        PHI_ASSERT(id != IntRegisterID::None);
   70|  2.83M|        phi::size_t id_value = phi::to_underlying(id);
   71|       |
   72|  2.83M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   73|       |
   74|  2.83M|        return m_IntRegisters[id_value];
   75|  2.83M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   78|  6.47M|    {
   79|  6.47M|        PHI_ASSERT(id != IntRegisterID::None);
   80|  6.47M|        phi::size_t id_value = phi::to_underlying(id);
   81|       |
   82|  6.47M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   83|       |
   84|  6.47M|        return m_IntRegisters[id_value];
   85|  6.47M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   88|  3.80M|    {
   89|  3.80M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   90|  3.80M|                                             RegisterAccessType::Signed),
   91|  3.80M|                   "Mismatch for instruction access type");
   92|       |
   93|  3.80M|        const phi::size_t id_value = phi::to_underlying(id);
   94|       |
   95|  3.80M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   96|  3.80M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
   97|  3.80M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (97:13): [True: 2.12M, False: 1.68M]
  ------------------
   98|  3.80M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (98:13): [True: 98.1k, False: 2.02M]
  ------------------
   99|  98.1k|        {
  100|  98.1k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  98.1k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  101|  98.1k|        }
  102|       |
  103|  3.80M|        return GetIntRegister(id).GetSignedValue();
  104|  3.80M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  107|  2.66M|    {
  108|  2.66M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  109|  2.66M|                                             RegisterAccessType::Unsigned),
  110|  2.66M|                   "Mismatch for instruction access type");
  111|       |
  112|  2.66M|        const phi::size_t id_value = phi::to_underlying(id);
  113|       |
  114|  2.66M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  115|  2.66M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  116|  2.66M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (116:13): [True: 2.05M, False: 610k]
  ------------------
  117|  2.66M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (117:13): [True: 1.80M, False: 253k]
  ------------------
  118|  1.80M|        {
  119|  1.80M|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  1.80M|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  120|  1.80M|        }
  121|       |
  122|  2.66M|        return GetIntRegister(id).GetUnsignedValue();
  123|  2.66M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  126|  2.21M|    {
  127|  2.21M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  128|  2.21M|                                             RegisterAccessType::Signed),
  129|  2.21M|                   "Mismatch for instruction access type");
  130|       |
  131|  2.21M|        IntRegister& reg = GetIntRegister(id);
  132|       |
  133|  2.21M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (133:13): [True: 530k, False: 1.68M]
  ------------------
  134|   530k|        {
  135|   530k|            return;
  136|   530k|        }
  137|       |
  138|  1.68M|        reg.SetSignedValue(value);
  139|       |
  140|  1.68M|        const phi::size_t id_value = phi::to_underlying(id);
  141|       |
  142|  1.68M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  143|  1.68M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  144|  1.68M|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  147|   623k|    {
  148|   623k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  149|   623k|                                             RegisterAccessType::Unsigned),
  150|   623k|                   "Mismatch for instruction access type");
  151|       |
  152|   623k|        IntRegister& reg = GetIntRegister(id);
  153|       |
  154|   623k|        if (reg.IsReadOnly())
  ------------------
  |  Branch (154:13): [True: 371k, False: 252k]
  ------------------
  155|   371k|        {
  156|   371k|            return;
  157|   371k|        }
  158|       |
  159|   252k|        reg.SetUnsignedValue(value);
  160|       |
  161|   252k|        const phi::size_t id_value = phi::to_underlying(id);
  162|       |
  163|   252k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  164|   252k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  165|   252k|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  168|  1.44M|    {
  169|  1.44M|        PHI_ASSERT(id != FloatRegisterID::None);
  170|  1.44M|        const phi::size_t id_value = phi::to_underlying(id);
  171|       |
  172|  1.44M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  173|       |
  174|  1.44M|        return m_FloatRegisters[id_value];
  175|  1.44M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  178|   684k|    {
  179|   684k|        PHI_ASSERT(id != FloatRegisterID::None);
  180|   684k|        const phi::size_t id_value = phi::to_underlying(id);
  181|       |
  182|   684k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  183|       |
  184|   684k|        return m_FloatRegisters[id_value];
  185|   684k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  188|   684k|    {
  189|   684k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  190|   684k|                                             RegisterAccessType::Float),
  191|   684k|                   "Mismatch for instruction access type");
  192|       |
  193|   684k|        const phi::size_t id_value = phi::to_underlying(id);
  194|       |
  195|   684k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  196|   684k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  197|   684k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (197:13): [True: 548k, False: 135k]
  ------------------
  198|   684k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (198:13): [True: 341k, False: 207k]
  ------------------
  199|   341k|        {
  200|       |            /*
  201|       |            DLX_WARN("Mismatch for register value type");
  202|       |            */
  203|   341k|        }
  204|       |
  205|   684k|        const FloatRegister& reg = GetFloatRegister(id);
  206|       |
  207|   684k|        return reg.GetValue();
  208|   684k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  211|   514k|    {
  212|   514k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  213|   514k|                                             RegisterAccessType::Double),
  214|   514k|                   "Mismatch for instruction access type");
  215|       |
  216|   514k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (216:13): [True: 22, False: 514k]
  ------------------
  217|     22|        {
  218|     22|            Raise(Exception::MisalignedRegisterAccess);
  219|     22|            return {0.0};
  220|     22|        }
  221|       |
  222|   514k|        const phi::size_t id_value = phi::to_underlying(id);
  223|       |
  224|   514k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  225|   514k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  226|   514k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (226:13): [True: 401k, False: 112k]
  ------------------
  227|   514k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (227:13): [True: 153k, False: 248k]
  ------------------
  228|   153k|        {
  229|   153k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   153k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  230|   153k|        }
  231|       |
  232|   514k|        const FloatRegisterValueType register_value_type_high =
  233|   514k|                m_FloatRegistersValueTypes[id_value + 1u];
  234|   514k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (234:13): [True: 401k, False: 112k]
  ------------------
  235|   514k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (235:13): [True: 40.8k, False: 360k]
  ------------------
  236|  40.8k|        {
  237|  40.8k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  40.8k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  238|  40.8k|        }
  239|       |
  240|   514k|        const FloatRegister& first_reg = GetFloatRegister(id);
  241|   514k|        const FloatRegister& second_reg =
  242|   514k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<phi::size_t>(id) + 1));
  243|       |
  244|   514k|        const float first_value  = first_reg.GetValue().unsafe();
  245|   514k|        const float second_value = second_reg.GetValue().unsafe();
  246|       |
  247|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  248|   514k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  249|       |
  250|   514k|        const phi::uint32_t first_value_bits =
  251|   514k|                *reinterpret_cast<const phi::uint32_t*>(&first_value);
  252|   514k|        const phi::uint32_t second_value_bits =
  253|   514k|                *reinterpret_cast<const phi::uint32_t*>(&second_value);
  254|       |
  255|   514k|        phi::uint64_t final_value_bits =
  256|   514k|                static_cast<phi::uint64_t>(second_value_bits) << 32u | first_value_bits;
  257|       |
  258|   514k|        return *reinterpret_cast<double*>(&final_value_bits);
  259|       |
  260|   514k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  261|   514k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  264|   171k|    {
  265|   171k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  266|   171k|                                             RegisterAccessType::Float),
  267|   171k|                   "Mismatch for instruction access type");
  268|       |
  269|   171k|        FloatRegister& reg = GetFloatRegister(id);
  270|       |
  271|   171k|        reg.SetValue(value);
  272|       |
  273|   171k|        const phi::size_t id_value = phi::to_underlying(id);
  274|       |
  275|   171k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  276|   171k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  277|   171k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  280|   123k|    {
  281|   123k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  282|   123k|                                             RegisterAccessType::Double),
  283|   123k|                   "Mismatch for instruction access type");
  284|       |
  285|   123k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (285:13): [True: 7, False: 123k]
  ------------------
  286|      7|        {
  287|      7|            Raise(Exception::MisalignedRegisterAccess);
  288|      7|            return;
  289|      7|        }
  290|       |
  291|   123k|        const constexpr phi::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  292|   123k|        const constexpr phi::uint64_t second_32_bits = first_32_bits << 32u;
  293|       |
  294|   123k|        double              value_raw  = value.unsafe();
  295|   123k|        const phi::uint64_t value_bits = *reinterpret_cast<phi::uint64_t*>(&value_raw);
  296|       |
  297|   123k|        const phi::uint32_t first_bits  = value_bits & first_32_bits;
  298|   123k|        const phi::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  299|       |
  300|   123k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  301|   123k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  302|       |
  303|   123k|        FloatRegister& first_reg = GetFloatRegister(id);
  304|   123k|        FloatRegister& second_reg =
  305|   123k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<phi::size_t>(id) + 1));
  306|       |
  307|   123k|        first_reg.SetValue(first_value);
  308|   123k|        second_reg.SetValue(second_value);
  309|       |
  310|   123k|        const phi::size_t id_value = phi::to_underlying(id);
  311|       |
  312|   123k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  313|   123k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  314|   123k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  315|   123k|    }
_ZN3dlx9Processor7GetFPSREv:
  318|   395k|    {
  319|   395k|        return m_FPSR;
  320|   395k|    }
_ZNK3dlx9Processor7GetFPSREv:
  323|   150k|    {
  324|   150k|        return m_FPSR;
  325|   150k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  328|   150k|    {
  329|   150k|        const StatusRegister& status_reg = GetFPSR();
  330|       |
  331|   150k|        return status_reg.Get();
  332|   150k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  335|   395k|    {
  336|   395k|        StatusRegister& status_reg = GetFPSR();
  337|       |
  338|   395k|        status_reg.SetStatus(value);
  339|   395k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  342|  7.93M|    {
  343|  7.93M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  344|       |
  345|  7.93M|        inst.Execute(*this);
  346|  7.93M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  349|  5.48k|    {
  350|  5.48k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (350:13): [True: 4.01k, False: 1.46k]
  ------------------
  351|  4.01k|        {
  352|  4.01k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  4.01k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  353|  4.01k|            return false;
  354|  4.01k|        }
  355|       |
  356|  1.46k|        m_CurrentProgram = &program;
  357|       |
  358|  1.46k|        m_ProgramCounter               = 0u;
  359|  1.46k|        m_Halted                       = false;
  360|  1.46k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  361|  1.46k|        m_LastRaisedException          = Exception::None;
  362|  1.46k|        m_CurrentStepCount             = 0u;
  363|       |
  364|  1.46k|        return true;
  365|  5.48k|    }
_ZNK3dlx9Processor17GetCurrentProgramEv:
  368|  2.26M|    {
  369|  2.26M|        return m_CurrentProgram;
  370|  2.26M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  373|  7.93M|    {
  374|       |        // No nothing when no program is loaded
  375|  7.93M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (375:13): [True: 0, False: 7.93M]
  ------------------
  376|      0|        {
  377|      0|            return;
  378|      0|        }
  379|       |
  380|       |        // Halt if there are no instruction to execute
  381|  7.93M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (381:13): [True: 70, False: 7.93M]
  ------------------
  382|     70|        {
  383|     70|            m_Halted                       = true;
  384|     70|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  385|     70|        }
  386|       |
  387|       |        // Do nothing when processor is halted
  388|  7.93M|        if (m_Halted)
  ------------------
  |  Branch (388:13): [True: 70, False: 7.93M]
  ------------------
  389|     70|        {
  390|     70|            return;
  391|     70|        }
  392|       |
  393|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  394|  7.93M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  395|       |
  396|       |        // Get current instruction pointed to by the program counter
  397|  7.93M|        const auto& current_instruction =
  398|  7.93M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  399|       |
  400|       |        // Execute current instruction
  401|  7.93M|        ExecuteInstruction(current_instruction);
  402|       |
  403|       |        // Stop executing if the last instruction halted the processor
  404|  7.93M|        if (m_Halted)
  ------------------
  |  Branch (404:13): [True: 281, False: 7.93M]
  ------------------
  405|    281|        {
  406|    281|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  407|    281|            return;
  408|    281|        }
  409|       |
  410|  7.93M|        m_ProgramCounter = m_NextProgramCounter;
  411|       |
  412|  7.93M|        ++m_CurrentStepCount;
  413|       |
  414|  7.93M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (414:13): [True: 1.11k, False: 7.93M]
  |  Branch (414:14): [True: 7.93M, False: 0]
  |  Branch (414:42): [True: 793, False: 7.93M]
  ------------------
  415|  7.93M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (415:13): [True: 322, False: 7.93M]
  ------------------
  416|  1.11k|        {
  417|  1.11k|            m_Halted                       = true;
  418|  1.11k|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  419|  1.11k|        }
  420|  7.93M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  423|  1.46k|    {
  424|       |        // Do nothing when no program is loaded
  425|  1.46k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (425:13): [True: 0, False: 1.46k]
  ------------------
  426|      0|        {
  427|      0|            return;
  428|      0|        }
  429|       |
  430|  1.46k|        m_ProgramCounter               = 0u;
  431|  1.46k|        m_Halted                       = false;
  432|  1.46k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  433|  1.46k|        m_LastRaisedException          = Exception::None;
  434|  1.46k|        m_CurrentStepCount             = 0u;
  435|       |
  436|  7.93M|        while (!m_Halted)
  ------------------
  |  Branch (436:16): [True: 7.93M, False: 1.46k]
  ------------------
  437|  7.93M|        {
  438|  7.93M|            ExecuteStep();
  439|  7.93M|        }
  440|       |
  441|  1.46k|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  442|  1.46k|                   "RegisterAccessType was not reset correctly");
  443|  1.46k|    }
_ZN3dlx9Processor14ClearRegistersEv:
  459|  5.48k|    {
  460|  5.48k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (460:24): [True: 175k, False: 5.48k]
  ------------------
  461|   175k|        {
  462|   175k|            reg.SetSignedValue(0);
  463|   175k|        }
  464|       |
  465|  5.48k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (465:24): [True: 175k, False: 5.48k]
  ------------------
  466|   175k|        {
  467|   175k|            reg.SetValue(0.0f);
  468|   175k|        }
  469|       |
  470|  5.48k|        m_FPSR.SetStatus(false);
  471|  5.48k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  474|  5.48k|    {
  475|  5.48k|        m_MemoryBlock.Clear();
  476|  5.48k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  483|   445k|    {
  484|   445k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  485|       |
  486|   445k|        m_LastRaisedException = exception;
  487|       |
  488|   445k|        switch (exception)
  489|   445k|        {
  490|      7|            case Exception::DivideByZero:
  ------------------
  |  Branch (490:13): [True: 7, False: 445k]
  ------------------
  491|      7|                m_Halted = true;
  492|      7|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      7|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  493|      7|                return;
  494|   112k|            case Exception::Overflow:
  ------------------
  |  Branch (494:13): [True: 112k, False: 333k]
  ------------------
  495|   112k|                DLX_WARN("Overflow");
  ------------------
  |  |    8|   112k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  496|   112k|                return;
  497|  90.4k|            case Exception::Underflow:
  ------------------
  |  Branch (497:13): [True: 90.4k, False: 354k]
  ------------------
  498|  90.4k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|  90.4k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  499|  90.4k|                return;
  500|      1|            case Exception::Trap:
  ------------------
  |  Branch (500:13): [True: 1, False: 445k]
  ------------------
  501|      1|                m_Halted = true;
  502|      1|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  503|      1|                return;
  504|      2|            case Exception::Halt:
  ------------------
  |  Branch (504:13): [True: 2, False: 445k]
  ------------------
  505|      2|                m_Halted = true;
  506|      2|                return;
  507|    144|            case Exception::UnknownLabel:
  ------------------
  |  Branch (507:13): [True: 144, False: 445k]
  ------------------
  508|    144|                m_Halted = true;
  509|    144|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|    144|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  510|    144|                return;
  511|   242k|            case Exception::BadShift:
  ------------------
  |  Branch (511:13): [True: 242k, False: 203k]
  ------------------
  512|   242k|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|   242k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  513|   242k|                return;
  514|    104|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (514:13): [True: 104, False: 445k]
  ------------------
  515|    104|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|    104|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  516|    104|                m_Halted = true;
  517|    104|                return;
  518|     29|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (518:13): [True: 29, False: 445k]
  ------------------
  519|     29|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     29|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  520|     29|                m_Halted = true;
  521|     29|                return;
  522|       |
  523|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  524|      0|            default:
  ------------------
  |  Branch (524:13): [True: 0, False: 445k]
  ------------------
  525|      0|                PHI_ASSERT_NOT_REACHED();
  526|   445k|#endif
  527|   445k|        }
  528|       |
  529|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  530|      0|        PHI_ASSERT_NOT_REACHED();
  531|      0|#endif
  532|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  553|   322k|    {
  554|   322k|        return m_MemoryBlock;
  555|   322k|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  568|  83.3k|    {
  569|  83.3k|        return m_NextProgramCounter;
  570|  83.3k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  573|  2.26M|    {
  574|  2.26M|        m_NextProgramCounter = new_npc;
  575|  2.26M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   34|  10.8M|    {
   35|  10.8M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   36|  10.8M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   37|       |
   38|  10.8M|        switch (expected_access)
   39|  10.8M|        {
   40|  1.64M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (40:13): [True: 1.64M, False: 9.16M]
  ------------------
   41|  1.64M|                return true;
   42|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (42:13): [True: 0, False: 10.8M]
  ------------------
   43|      0|                return false;
   44|   161k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (44:13): [True: 161k, False: 10.6M]
  ------------------
   45|   161k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (45:24): [True: 80.6k, False: 80.6k]
  |  Branch (45:63): [True: 80.6k, False: 0]
  ------------------
   46|   116k|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (46:13): [True: 116k, False: 10.6M]
  ------------------
   47|   116k|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (47:24): [True: 1, False: 116k]
  ------------------
   48|   116k|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (48:24): [True: 116k, False: 0]
  ------------------
   49|  32.4k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (49:13): [True: 32.4k, False: 10.7M]
  ------------------
   50|  32.4k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (50:24): [True: 32.4k, False: 1]
  |  Branch (50:63): [True: 1, False: 0]
  ------------------
   51|  45.7k|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (51:13): [True: 45.7k, False: 10.7M]
  ------------------
   52|  45.7k|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (52:24): [True: 45.7k, False: 3]
  |  Branch (52:64): [True: 3, False: 0]
  ------------------
   53|  8.81M|            default:
  ------------------
  |  Branch (53:13): [True: 8.81M, False: 1.99M]
  ------------------
   54|  8.81M|                return expected_access == access;
   55|  10.8M|        }
   56|  10.8M|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   10|   170k|    {
   11|   170k|        if (token.length() == 2u)
  ------------------
  |  Branch (11:13): [True: 32.1k, False: 138k]
  ------------------
   12|  32.1k|        {
   13|  32.1k|            const char first_char = token[0u];
   14|  32.1k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (14:17): [True: 902, False: 31.2k]
  |  Branch (14:38): [True: 8.49k, False: 22.7k]
  ------------------
   15|  9.39k|            {
   16|  9.39k|                const char second_char = token[1u];
   17|  9.39k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (17:21): [True: 9.12k, False: 277]
  |  Branch (17:43): [True: 8.33k, False: 783]
  ------------------
   18|  8.33k|                {
   19|  8.33k|                    return static_cast<IntRegisterID>(second_char - '0');
   20|  8.33k|                }
   21|  9.39k|            }
   22|  32.1k|        }
   23|   138k|        else if (token.length() == 3u)
  ------------------
  |  Branch (23:18): [True: 42.9k, False: 95.2k]
  ------------------
   24|  42.9k|        {
   25|  42.9k|            const char first_char = token[0u];
   26|  42.9k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (26:17): [True: 586, False: 42.3k]
  |  Branch (26:38): [True: 2.42k, False: 39.9k]
  ------------------
   27|  3.01k|            {
   28|  3.01k|                const char second_char = token[1u];
   29|  3.01k|                const char third_char  = token[2u];
   30|       |
   31|  3.01k|                switch (second_char)
   32|  3.01k|                {
   33|    625|                    case '1': {
  ------------------
  |  Branch (33:21): [True: 625, False: 2.38k]
  ------------------
   34|    625|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (34:29): [True: 431, False: 194]
  |  Branch (34:50): [True: 237, False: 194]
  ------------------
   35|    237|                        {
   36|    237|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   37|    237|                        }
   38|    388|                        break;
   39|    625|                    }
   40|  1.11k|                    case '2': {
  ------------------
  |  Branch (40:21): [True: 1.11k, False: 1.90k]
  ------------------
   41|  1.11k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (41:29): [True: 405, False: 707]
  |  Branch (41:50): [True: 204, False: 201]
  ------------------
   42|    204|                        {
   43|    204|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   44|    204|                        }
   45|    908|                        break;
   46|  1.11k|                    }
   47|    908|                    case '3': {
  ------------------
  |  Branch (47:21): [True: 594, False: 2.41k]
  ------------------
   48|    594|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (48:29): [True: 194, False: 400]
  |  Branch (48:50): [True: 204, False: 196]
  ------------------
   49|    398|                        {
   50|    398|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   51|    398|                        }
   52|    196|                        break;
   53|    594|                    }
   54|    681|                    default: {
  ------------------
  |  Branch (54:21): [True: 681, False: 2.33k]
  ------------------
   55|    681|                        break;
   56|    594|                    }
   57|  3.01k|                }
   58|  3.01k|            }
   59|  42.9k|        }
   60|       |
   61|   161k|        return IntRegisterID::None;
   62|   170k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|   161k|    {
   66|   161k|        if (token.length() == 2u)
  ------------------
  |  Branch (66:13): [True: 23.7k, False: 137k]
  ------------------
   67|  23.7k|        {
   68|  23.7k|            const char first_char = token[0u];
   69|  23.7k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (69:17): [True: 1.00k, False: 22.7k]
  |  Branch (69:38): [True: 2.47k, False: 20.3k]
  ------------------
   70|  3.48k|            {
   71|  3.48k|                const char second_char = token[1u];
   72|  3.48k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (72:21): [True: 2.93k, False: 547]
  |  Branch (72:43): [True: 2.41k, False: 520]
  ------------------
   73|  2.41k|                {
   74|  2.41k|                    return static_cast<FloatRegisterID>(second_char - '0');
   75|  2.41k|                }
   76|  3.48k|            }
   77|  23.7k|        }
   78|   137k|        else if (token.length() == 3u)
  ------------------
  |  Branch (78:18): [True: 42.1k, False: 95.2k]
  ------------------
   79|  42.1k|        {
   80|  42.1k|            const char first_char = token[0u];
   81|  42.1k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (81:17): [True: 1.38k, False: 40.7k]
  |  Branch (81:38): [True: 1.25k, False: 39.4k]
  ------------------
   82|  2.63k|            {
   83|  2.63k|                const char second_char = token[1u];
   84|  2.63k|                const char third_char  = token[2u];
   85|       |
   86|  2.63k|                switch (second_char)
   87|  2.63k|                {
   88|    593|                    case '1': {
  ------------------
  |  Branch (88:21): [True: 593, False: 2.04k]
  ------------------
   89|    593|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (89:29): [True: 399, False: 194]
  |  Branch (89:50): [True: 195, False: 204]
  ------------------
   90|    195|                        {
   91|    195|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   92|    195|                        }
   93|    398|                        break;
   94|    593|                    }
   95|    694|                    case '2': {
  ------------------
  |  Branch (95:21): [True: 694, False: 1.94k]
  ------------------
   96|    694|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (96:29): [True: 500, False: 194]
  |  Branch (96:50): [True: 194, False: 306]
  ------------------
   97|    194|                        {
   98|    194|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
   99|    194|                        }
  100|    500|                        break;
  101|    694|                    }
  102|    592|                    case '3': {
  ------------------
  |  Branch (102:21): [True: 592, False: 2.04k]
  ------------------
  103|    592|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (103:29): [True: 194, False: 398]
  |  Branch (103:50): [True: 194, False: 204]
  ------------------
  104|    388|                        {
  105|    388|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  106|    388|                        }
  107|    204|                        break;
  108|    592|                    }
  109|    760|                    default: {
  ------------------
  |  Branch (109:21): [True: 760, False: 1.87k]
  ------------------
  110|    760|                        break;
  111|    592|                    }
  112|  2.63k|                }
  113|  2.63k|            }
  114|  42.1k|        }
  115|       |
  116|   158k|        return FloatRegisterID::None;
  117|   161k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  120|   155k|    {
  121|   155k|        if (token.length() == 4u)
  ------------------
  |  Branch (121:13): [True: 36.0k, False: 119k]
  ------------------
  122|  36.0k|        {
  123|  36.0k|            const char c1 = token[0u];
  124|  36.0k|            const char c2 = token[1u];
  125|  36.0k|            const char c3 = token[2u];
  126|  36.0k|            const char c4 = token[3u];
  127|       |
  128|  36.0k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (128:21): [True: 764, False: 35.2k]
  |  Branch (128:34): [True: 1.16k, False: 34.1k]
  |  Branch (128:49): [True: 220, False: 1.71k]
  |  Branch (128:62): [True: 962, False: 750]
  ------------------
  129|  36.0k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (129:21): [True: 741, False: 441]
  |  Branch (129:34): [True: 195, False: 246]
  |  Branch (129:49): [True: 293, False: 643]
  |  Branch (129:62): [True: 574, False: 69]
  ------------------
  130|  36.0k|        }
  131|       |
  132|   119k|        return false;
  133|   155k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   26|   153k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   36|  71.7k|    {}
_ZNK3dlx5Token7GetTypeEv:
   39|   364k|    {
   40|   364k|        return m_Type;
   41|   364k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   49|   171k|    {
   50|   171k|        return m_LineNumber;
   51|   171k|    }
_ZNK3dlx5Token9GetColumnEv:
   54|   146k|    {
   55|   146k|        return m_Column;
   56|   146k|    }
_ZNK3dlx5Token7GetTextEv:
   64|   167k|    {
   65|   167k|        return m_Text;
   66|   167k|    }
_ZNK3dlx5Token7HasHintEv:
   78|  27.4k|    {
   79|  27.4k|        return m_HasHint;
   80|  27.4k|    }
_ZNK3dlx5Token7GetHintEv:
   83|  36.4k|    {
   84|  36.4k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   85|  36.4k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   86|  36.4k|                   m_Type == Type::ImmediateInteger);
   87|  36.4k|        PHI_ASSERT(m_HasHint);
   88|       |
   89|  36.4k|        return m_Hint;
   90|  36.4k|    }

_ZN3dlx11TokenStream8finalizeEv:
   28|  5.48k|    {
   29|       |#if defined(PHI_DEBUG)
   30|       |        PHI_ASSERT(!m_Finalized);
   31|       |#endif
   32|       |
   33|  5.48k|        m_Iterator = 0u;
   34|       |#if defined(PHI_DEBUG)
   35|       |        m_Finalized = true;
   36|       |#endif
   37|  5.48k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   49|    784|    {
   50|    784|        return x + m_Iterator <= m_Tokens.size();
   51|    784|    }
_ZNK3dlx11TokenStream8has_moreEv:
   54|   228k|    {
   55|   228k|        return m_Iterator < m_Tokens.size();
   56|   228k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   59|   224k|    {
   60|   224k|        return m_Iterator >= m_Tokens.size();
   61|   224k|    }
_ZN3dlx11TokenStream7consumeEv:
   74|   224k|    {
   75|   224k|        PHI_ASSERT(!reached_end());
   76|       |#if defined(PHI_DEBUG)
   77|       |        PHI_ASSERT(m_Finalized);
   78|       |#endif
   79|       |
   80|   224k|        return m_Tokens.at(m_Iterator++.unsafe());
   81|   224k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  154|    782|    {
  155|    782|        return m_Iterator;
  156|    782|    }
_ZN3dlx11TokenStream12set_positionEN3phi7integerImEE:
  159|    199|    {
  160|       |#if defined(PHI_DEBUG)
  161|       |        PHI_ASSERT(m_Finalized);
  162|       |#endif
  163|       |
  164|    199|        m_Iterator = pos;
  165|    199|    }
_ZNK3dlx11TokenStream6rbeginEv:
  204|    396|    {
  205|       |#if defined(PHI_DEBUG)
  206|       |        //PHI_ASSERT(m_Finalized);
  207|       |#endif
  208|       |
  209|    396|        return m_Tokens.rbegin();
  210|    396|    }
_ZNK3dlx11TokenStream4rendEv:
  213|  5.47k|    {
  214|       |#if defined(PHI_DEBUG)
  215|       |        //PHI_ASSERT(m_Finalized);
  216|       |#endif
  217|       |
  218|  5.47k|        return m_Tokens.rend();
  219|  5.47k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  5.48k|    {
   66|  5.48k|        TokenStream tokens;
   67|       |
   68|  5.48k|        phi::string_view current_token;
   69|       |
   70|  5.48k|        phi::u64 current_line_number{1u};
   71|  5.48k|        phi::u64 current_column{1u};
   72|  5.48k|        phi::u64 token_begin{0u};
   73|       |
   74|  5.48k|        phi::boolean parsing_comment{false};
   75|       |
   76|   572k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 566k, False: 5.48k]
  ------------------
   77|   566k|        {
   78|   566k|            const char c{source.at(i)};
   79|       |
   80|   566k|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 31.5k, False: 535k]
  ------------------
   81|  31.5k|            {
   82|  31.5k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 3.17k, False: 28.3k]
  ------------------
   83|  3.17k|                {
   84|       |                    // Skip empty lines
   85|  3.17k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  3.17k|                                        current_line_number, current_column);
   87|       |
   88|  3.17k|                    parsing_comment = false;
   89|  3.17k|                    current_line_number += 1u;
   90|  3.17k|                    current_column = 1u;
   91|  3.17k|                    continue;
   92|  3.17k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  28.3k|                tokens.emplace_back(ParseToken(
   96|  28.3k|                        source.substring_view(
   97|  28.3k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  28.3k|                                current_token.length()),
   99|  28.3k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  28.3k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  28.3k|                                    current_line_number, current_column);
  103|       |
  104|  28.3k|                current_token   = phi::string_view{};
  105|  28.3k|                parsing_comment = false;
  106|  28.3k|                current_line_number += 1u;
  107|  28.3k|                current_column = 0u;
  108|  28.3k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|   535k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 1.06k, False: 534k]
  |  Branch (110:34): [True: 1.10k, False: 533k]
  ------------------
  111|  2.17k|            {
  112|  2.17k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 394, False: 1.77k]
  ------------------
  113|    394|                {
  114|    394|                    token_begin = i;
  115|    394|                }
  116|  1.77k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 1.36k, False: 411]
  ------------------
  117|  1.36k|                {
  118|  1.36k|                    tokens.emplace_back(ParseToken(
  119|  1.36k|                            source.substring_view(
  120|  1.36k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  1.36k|                                    current_token.length()),
  122|  1.36k|                            current_line_number, current_column - current_token.length()));
  123|  1.36k|                    token_begin   = i;
  124|  1.36k|                    current_token = phi::string_view{};
  125|  1.36k|                }
  126|       |
  127|  2.17k|                parsing_comment = true;
  128|  2.17k|                current_token   = source.substring_view(
  129|  2.17k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  2.17k|                        current_token.length() + 1u);
  131|  2.17k|            }
  132|   533k|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 355, False: 532k]
  ------------------
  133|    355|            {
  134|       |                // simply append the character
  135|    355|                current_token = source.substring_view(
  136|    355|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|    355|                        current_token.length() + 1u);
  138|    355|            }
  139|   532k|            else
  140|   532k|            {
  141|       |                // Not parsing a comment
  142|   532k|                switch (c)
  143|   532k|                {
  144|  8.71k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 8.71k, False: 524k]
  ------------------
  145|  11.7k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 3.00k, False: 529k]
  ------------------
  146|  15.7k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 3.98k, False: 528k]
  ------------------
  147|  15.7k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 1.18k, False: 14.5k]
  ------------------
  148|  1.18k|                        {
  149|  1.18k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|  1.18k|                            continue;
  152|  1.18k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  14.5k|                        tokens.emplace_back(ParseToken(
  156|  14.5k|                                source.substring_view(
  157|  14.5k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  14.5k|                                        current_token.length()),
  159|  14.5k|                                current_line_number, current_column - current_token.length()));
  160|  14.5k|                        current_token = phi::string_view{};
  161|  14.5k|                        break;
  162|  37.8k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 37.8k, False: 494k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  37.8k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 35.7k, False: 2.14k]
  ------------------
  165|  35.7k|                        {
  166|  35.7k|                            current_token = source.substring_view(
  167|  35.7k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  35.7k|                                    current_token.length() + 1u);
  169|  35.7k|                            tokens.emplace_back(ParseToken(
  170|  35.7k|                                    source.substring_view(
  171|  35.7k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  35.7k|                                                    token_begin),
  173|  35.7k|                                            current_token.length()),
  174|  35.7k|                                    current_line_number,
  175|  35.7k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  35.7k|                            current_token = phi::string_view{};
  178|  35.7k|                        }
  179|  2.14k|                        else
  180|  2.14k|                        {
  181|       |                            // Orphan colon
  182|  2.14k|                            token_begin = i;
  183|       |
  184|  2.14k|                            tokens.emplace_back(
  185|  2.14k|                                    Token::Type::Colon,
  186|  2.14k|                                    source.substring_view(
  187|  2.14k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  2.14k|                                                    token_begin),
  189|  2.14k|                                            1u),
  190|  2.14k|                                    current_line_number, current_column);
  191|  2.14k|                        }
  192|  37.8k|                        break;
  193|  39.0k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 39.0k, False: 493k]
  ------------------
  194|  44.0k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 4.99k, False: 527k]
  ------------------
  195|  55.9k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 11.8k, False: 520k]
  ------------------
  196|  55.9k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 50.6k, False: 5.28k]
  ------------------
  197|  50.6k|                        {
  198|  50.6k|                            tokens.emplace_back(ParseToken(
  199|  50.6k|                                    source.substring_view(
  200|  50.6k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  50.6k|                                                    token_begin),
  202|  50.6k|                                            current_token.length()),
  203|  50.6k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  50.6k|                            current_token = phi::string_view{};
  206|  50.6k|                        }
  207|       |
  208|  55.9k|                        Token::Type type;
  209|  55.9k|                        switch (c)
  210|  55.9k|                        {
  211|  39.0k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 39.0k, False: 16.8k]
  ------------------
  212|  39.0k|                                type = Token::Type::Comma;
  213|  39.0k|                                break;
  214|  4.99k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 4.99k, False: 50.9k]
  ------------------
  215|  4.99k|                                type = Token::Type::OpenBracket;
  216|  4.99k|                                break;
  217|  11.8k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 11.8k, False: 44.0k]
  ------------------
  218|  11.8k|                                type = Token::Type::ClosingBracket;
  219|  11.8k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 55.9k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  55.9k|#endif
  225|  55.9k|                        }
  226|       |
  227|  55.9k|                        token_begin = i;
  228|       |
  229|  55.9k|                        tokens.emplace_back(
  230|  55.9k|                                type,
  231|  55.9k|                                source.substring_view(
  232|  55.9k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  55.9k|                                        1u),
  234|  55.9k|                                current_line_number, current_column);
  235|  55.9k|                        break;
  236|       |
  237|   423k|                    default:
  ------------------
  |  Branch (237:21): [True: 423k, False: 109k]
  ------------------
  238|   423k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 133k, False: 289k]
  ------------------
  239|   133k|                        {
  240|   133k|                            token_begin = i;
  241|   133k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   423k|                        current_token = source.substring_view(
  245|   423k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   423k|                                current_token.length() + 1u);
  247|   532k|                }
  248|   532k|            }
  249|       |
  250|   562k|            current_column += 1u;
  251|   562k|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  5.48k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 4.57k, False: 911]
  ------------------
  255|  4.57k|        {
  256|  4.57k|            tokens.emplace_back(
  257|  4.57k|                    ParseToken(source.substring_view(
  258|  4.57k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  4.57k|                                       current_token.length()),
  260|  4.57k|                               current_line_number, current_column - current_token.length()));
  261|  4.57k|        }
  262|       |
  263|       |        // Finalize token stream
  264|  5.48k|        tokens.finalize();
  265|       |
  266|  5.48k|        return tokens;
  267|  5.48k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   135k|    {
   14|   135k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 2.21k, False: 133k]
  |  Branch (14:13): [True: 1.98k, False: 133k]
  |  Branch (14:36): [True: 1.98k, False: 230]
  ------------------
   15|  1.98k|        {
   16|  1.98k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  1.98k|            if (number)
  ------------------
  |  Branch (18:17): [True: 1.57k, False: 412]
  ------------------
   19|  1.57k|            {
   20|  1.57k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  1.57k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  1.57k|            }
   23|       |
   24|    412|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  1.98k|        }
   26|       |
   27|   133k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 863, False: 132k]
  |  Branch (27:13): [True: 1.75k, False: 131k]
  |  Branch (27:36): [True: 896, False: 131k]
  ------------------
   28|  1.75k|        {
   29|  1.75k|            return {Token::Type::Comment, token, line_number, column};
   30|  1.75k|        }
   31|       |
   32|   131k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 2.07k, False: 129k]
  ------------------
   33|  2.07k|        {
   34|  2.07k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  2.07k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  2.07k|        }
   37|       |
   38|   129k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 639, False: 128k]
  ------------------
   39|    639|        {
   40|    639|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|    639|        }
   42|       |
   43|   128k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 8.61k, False: 120k]
  ------------------
   44|  8.61k|        {
   45|  8.61k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  8.61k|                    static_cast<phi::uint32_t>(id)};
   47|  8.61k|        }
   48|       |
   49|   120k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 2.65k, False: 117k]
  ------------------
   50|  2.65k|        {
   51|  2.65k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  2.65k|                    static_cast<phi::uint32_t>(id)};
   53|  2.65k|        }
   54|       |
   55|   117k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 56.8k, False: 60.6k]
  ------------------
   56|  56.8k|        {
   57|  56.8k|            return {Token::Type::OpCode, token, line_number, column,
   58|  56.8k|                    static_cast<phi::uint32_t>(opcode)};
   59|  56.8k|        }
   60|       |
   61|  60.6k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|   117k|    }

LLVMFuzzerTestOneInput:
   10|  5.48k|{
   11|  5.48k|    static dlx::Processor processor;
   12|       |
   13|  5.48k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   14|       |
   15|       |    // Parse it
   16|  5.48k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   17|       |
   18|       |    // Clear registers and memory
   19|  5.48k|    processor.ClearRegisters();
   20|  5.48k|    processor.ClearMemory();
   21|       |
   22|       |    // Execute
   23|  5.48k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (23:9): [True: 1.46k, False: 4.01k]
  ------------------
   24|  1.46k|    {
   25|  1.46k|        processor.ExecuteCurrentProgram();
   26|  1.46k|    }
   27|       |
   28|  5.48k|    return 0;
   29|  5.48k|}


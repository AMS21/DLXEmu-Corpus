_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   234k|        {
  169|   234k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   234k|            switch (index.unsafe())
  172|   234k|            {
  173|   104k|                case 0:
  ------------------
  |  Branch (173:17): [True: 104k, False: 129k]
  ------------------
  174|   104k|                    return m_Arg1Type;
  175|       |
  176|  67.0k|                case 1:
  ------------------
  |  Branch (176:17): [True: 67.0k, False: 167k]
  ------------------
  177|  67.0k|                    return m_Arg2Type;
  178|       |
  179|  62.7k|                case 2:
  ------------------
  |  Branch (179:17): [True: 62.7k, False: 171k]
  ------------------
  180|  62.7k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 234k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   234k|#endif
  187|   234k|            }
  188|   234k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  61.4k|        {
  195|  61.4k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  61.4k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 58.5k, False: 2.86k]
  ------------------
  199|  58.5k|            {
  200|  58.5k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  58.5k|            }
  202|  61.4k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 38.0k, False: 23.3k]
  ------------------
  203|  38.0k|            {
  204|  38.0k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  38.0k|            }
  206|  61.4k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 11.2k, False: 50.2k]
  ------------------
  207|  11.2k|            {
  208|  11.2k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  11.2k|            }
  210|       |
  211|  61.4k|            return number_of_argument_required;
  212|  61.4k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  4.02M|        {
  216|  4.02M|            return m_RegisterAccessType;
  217|  4.02M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  61.4k|        {
  221|  61.4k|            return m_Executor;
  222|  61.4k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  12.1M|    {
   38|  12.1M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  12.1M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  12.1M|                                         static_cast<underlying_t>(rhs));
   42|  12.1M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  12.1M|    {
   55|  12.1M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  12.1M|        return static_cast<underlying_t>(type & test) != 0;
   58|  12.1M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|   173k|    {
   32|   173k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 2.39k, False: 170k]
  ------------------
   33|  2.39k|        {
   34|  2.39k|            return true;
   35|  2.39k|        }
   36|       |
   37|   170k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 2.15k, False: 168k]
  ------------------
   38|  2.15k|        {
   39|  2.15k|            return true;
   40|  2.15k|        }
   41|       |
   42|   168k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 53.2k, False: 115k]
  ------------------
   43|  53.2k|        {
   44|  53.2k|            return true;
   45|  53.2k|        }
   46|       |
   47|   115k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 823, False: 114k]
  ------------------
   48|    823|        {
   49|    823|            return true;
   50|    823|        }
   51|       |
   52|   114k|        return false;
   53|   115k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|   114k|    {
   57|   114k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 114k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|   114k|        const char first_char = token.at(0);
   63|       |
   64|   114k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 27.4k, False: 87.0k]
  ------------------
   65|  27.4k|        {
   66|  27.4k|            return phi::is_alpha(first_char);
   67|  27.4k|        }
   68|       |
   69|  87.0k|        phi::boolean just_under_scores = (first_char == '_');
   70|  87.0k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 22.5k, False: 64.5k]
  |  Branch (70:15): [True: 63.1k, False: 23.9k]
  |  Branch (70:44): [True: 1.42k, False: 22.5k]
  ------------------
   71|  22.5k|        {
   72|  22.5k|            return false;
   73|  22.5k|        }
   74|       |
   75|   178k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 148k, False: 29.9k]
  ------------------
   76|   148k|        {
   77|   148k|            const char c{token.at(index)};
   78|       |
   79|   148k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 113k, False: 35.1k]
  ------------------
   80|   113k|            {
   81|   113k|                just_under_scores = false;
   82|   113k|            }
   83|  35.1k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 580, False: 34.5k]
  ------------------
   84|    580|            {
   85|    580|                continue;
   86|    580|            }
   87|  34.5k|            else
   88|  34.5k|            {
   89|  34.5k|                return false;
   90|  34.5k|            }
   91|   148k|        }
   92|       |
   93|  29.9k|        return !just_under_scores;
   94|  64.5k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   587k|    {
  101|   587k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 587k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   587k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 98.0k, False: 489k]
  ------------------
  107|  98.0k|        {
  108|  98.0k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 13.0k, False: 84.9k]
  ------------------
  109|  13.0k|            {
  110|  13.0k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  13.0k|            }
  112|       |
  113|  84.9k|            return {};
  114|  98.0k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   489k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 2.54k, False: 487k]
  ------------------
  118|  2.54k|        {
  119|  2.54k|            return {};
  120|  2.54k|        }
  121|       |
  122|   487k|        std::int32_t number{0};
  123|   487k|        phi::boolean is_negative{false};
  124|   487k|        phi::boolean starts_with_zero{false};
  125|   487k|        phi::boolean parsing_binary{false};
  126|   487k|        phi::boolean parsing_octal{false};
  127|   487k|        phi::boolean parsing_hexadecimal{false};
  128|   487k|        phi::boolean parsed_something{false};
  129|   487k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   557k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 547k, False: 9.29k]
  ------------------
  134|   547k|        {
  135|   547k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   547k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 487k, False: 60.5k]
  ------------------
  139|   487k|            {
  140|   487k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 2.15k, False: 485k]
  ------------------
  141|  2.15k|                {
  142|  2.15k|                    continue;
  143|  2.15k|                }
  144|       |
  145|   485k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 13.0k, False: 472k]
  ------------------
  146|  13.0k|                {
  147|  13.0k|                    is_negative = true;
  148|  13.0k|                    continue;
  149|  13.0k|                }
  150|       |
  151|   472k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 10.1k, False: 461k]
  ------------------
  152|  10.1k|                {
  153|  10.1k|                    starts_with_zero = true;
  154|  10.1k|                    continue;
  155|  10.1k|                }
  156|       |
  157|   461k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 1.67k, False: 460k]
  ------------------
  158|  1.67k|                {
  159|  1.67k|                    return {};
  160|  1.67k|                }
  161|   461k|            }
  162|       |
  163|       |            // Second character
  164|   520k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 32.0k, False: 488k]
  ------------------
  165|  32.0k|            {
  166|  32.0k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 10.1k, False: 21.8k]
  ------------------
  167|  10.1k|                {
  168|       |                    // Binary
  169|  10.1k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 1.83k, False: 8.35k]
  |  Branch (169:37): [True: 1.27k, False: 7.08k]
  ------------------
  170|  3.10k|                    {
  171|  3.10k|                        parsing_binary = true;
  172|  3.10k|                        continue;
  173|  3.10k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  7.08k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 370, False: 6.71k]
  |  Branch (176:37): [True: 1.77k, False: 4.93k]
  ------------------
  177|  2.14k|                    {
  178|  2.14k|                        parsing_hexadecimal = true;
  179|  2.14k|                        continue;
  180|  2.14k|                    }
  181|       |
  182|       |                    // Octal
  183|  4.93k|                    parsing_octal = true;
  184|  4.93k|                }
  185|  32.0k|            }
  186|       |
  187|       |            // Handle seperators
  188|   515k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 2.43k, False: 513k]
  ------------------
  189|  2.43k|            {
  190|  2.43k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 996, False: 1.44k]
  ------------------
  191|    996|                {
  192|    996|                    return {};
  193|    996|                }
  194|       |
  195|  1.44k|                parsed_separator = true;
  196|  1.44k|                continue;
  197|  2.43k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   513k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 22.5k, False: 490k]
  |  Branch (200:32): [True: 1.36k, False: 21.2k]
  ------------------
  201|  1.36k|            {
  202|       |                // Would underflow
  203|  1.36k|                return {};
  204|  1.36k|            }
  205|   511k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 490k, False: 21.2k]
  |  Branch (205:17): [True: 816, False: 510k]
  |  Branch (205:33): [True: 816, False: 489k]
  ------------------
  206|    816|            {
  207|       |                // Would overflow
  208|    816|                return {};
  209|    816|            }
  210|       |
  211|   510k|            parsed_separator = false;
  212|   510k|            parsed_something = true;
  213|       |
  214|   510k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 2.49k, False: 508k]
  ------------------
  215|  2.49k|            {
  216|  2.49k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 1.51k, False: 982]
  ------------------
  217|  1.51k|                {
  218|  1.51k|                    return {};
  219|  1.51k|                }
  220|       |
  221|    982|                number <<= 1;
  222|    982|                number |= (c - '0');
  223|    982|            }
  224|   508k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 5.01k, False: 503k]
  ------------------
  225|  5.01k|            {
  226|  5.01k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 2.73k, False: 2.28k]
  ------------------
  227|  2.73k|                {
  228|  2.73k|                    return {};
  229|  2.73k|                }
  230|       |
  231|  2.28k|                number <<= 3;
  232|  2.28k|                number |= (c - '0');
  233|  2.28k|            }
  234|   503k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 5.66k, False: 497k]
  ------------------
  235|  5.66k|            {
  236|  5.66k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 1.95k, False: 3.70k]
  ------------------
  237|  1.95k|                {
  238|  1.95k|                    return {};
  239|  1.95k|                }
  240|       |
  241|  3.70k|                number <<= 4;
  242|  3.70k|                number |= phi::hex_digit_value(c).unsafe();
  243|  3.70k|            }
  244|   497k|            else
  245|   497k|            {
  246|   497k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 466k, False: 31.5k]
  ------------------
  247|   466k|                {
  248|   466k|                    return {};
  249|   466k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  31.5k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 13.7k, False: 17.7k]
  |  Branch (252:36): [True: 691, False: 13.0k]
  ------------------
  253|    691|                {
  254|    691|                    return {};
  255|    691|                }
  256|       |
  257|  30.8k|                number *= 10;
  258|  30.8k|                number += (c - '0');
  259|  30.8k|            }
  260|   510k|        }
  261|       |
  262|  9.29k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 7.96k, False: 1.32k]
  ------------------
  263|  7.96k|        {
  264|       |            // Check for over/underflow
  265|  7.96k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 4.69k, False: 3.27k]
  |  Branch (265:32): [True: 450, False: 4.24k]
  ------------------
  266|    450|            {
  267|       |                // Would underflow
  268|    450|                return {};
  269|    450|            }
  270|  7.51k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 3.27k, False: 4.24k]
  |  Branch (270:17): [True: 865, False: 6.65k]
  |  Branch (270:33): [True: 865, False: 2.40k]
  ------------------
  271|    865|            {
  272|       |                // Would overflow
  273|    865|                return {};
  274|    865|            }
  275|       |
  276|  6.65k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 4.24k, False: 2.40k]
  ------------------
  277|  4.24k|            {
  278|  4.24k|                return static_cast<std::int16_t>(-number);
  279|  4.24k|            }
  280|       |
  281|  2.40k|            return static_cast<std::int16_t>(number);
  282|  6.65k|        }
  283|       |
  284|  1.32k|        return {};
  285|  9.29k|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   407k|        {
   12|   407k|            m_Value = value;
   13|   407k|        }
_ZNK3dlx14StatusRegister3GetEv:
   16|   119k|        {
   17|   119k|            return m_Value;
   18|   119k|        }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  29.9k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  29.9k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 492k, False: 0]
  ------------------
   64|   492k|            {
   65|   492k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 29.9k, False: 462k]
  ------------------
   66|  29.9k|                {
   67|  29.9k|                    return &token;
   68|  29.9k|                }
   69|   492k|            }
   70|       |
   71|      0|            return nullptr;
   72|  29.9k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   155k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   155k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   155k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   593k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   593k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   593k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|   324k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   324k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   324k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|   704k|    {
   11|   704k|        m_Value = val;
   12|   704k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  1.75M|    {
   16|  1.75M|        return m_Value;
   17|  1.75M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  61.4k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  16.7k|    {
   25|  16.7k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  16.7k|        switch (argument_number.unsafe())
   28|  16.7k|        {
   29|  12.2k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 12.2k, False: 4.56k]
  ------------------
   30|  12.2k|                m_Arg1 = argument;
   31|  12.2k|                break;
   32|  3.21k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 3.21k, False: 13.5k]
  ------------------
   33|  3.21k|                m_Arg2 = argument;
   34|  3.21k|                break;
   35|  1.34k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 1.34k, False: 15.4k]
  ------------------
   36|  1.34k|                m_Arg3 = argument;
   37|  1.34k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 16.7k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  16.7k|#endif
   42|  16.7k|        }
   43|  16.7k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   83|  4.02M|    {
   84|  4.02M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   85|  4.02M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   88|  4.02M|    {
   89|  4.02M|        return m_Info;
   90|  4.02M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|   201k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   27|  24.3M|    {
   28|  24.3M|        return m_Type;
   29|  24.3M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  2.84M|    {
   78|  2.84M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  2.84M|        return register_int;
   81|  2.84M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   84|  1.53M|    {
   85|  1.53M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   86|       |
   87|  1.53M|        return register_float;
   88|  1.53M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   92|   229k|    {
   93|   229k|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   94|       |
   95|   229k|        return immediate_value;
   96|   229k|    }
_ZNK3dlx19InstructionArgument21AsAddressDisplacementEv:
  100|      4|    {
  101|      4|        PHI_ASSERT(m_Type == ArgumentType::AddressDisplacement);
  102|       |
  103|      4|        return address_displacement;
  104|      4|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  107|   400k|    {
  108|   400k|        PHI_ASSERT(m_Type == ArgumentType::Label);
  109|       |
  110|   400k|        return label;
  111|   400k|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  4.85k|    {
  171|  4.85k|        InstructionArgument arg;
  172|  4.85k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  4.85k|        arg.register_int.register_id = id;
  174|  4.85k|        return arg;
  175|  4.85k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  3.91k|    {
  179|  3.91k|        InstructionArgument arg;
  180|  3.91k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  3.91k|        arg.register_float.register_id = id;
  182|  3.91k|        return arg;
  183|  3.91k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|    952|    {
  187|    952|        InstructionArgument arg;
  188|    952|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|    952|        arg.immediate_value.signed_value = value;
  190|    952|        return arg;
  191|    952|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|    916|    {
  196|    916|        InstructionArgument arg;
  197|    916|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|    916|        arg.address_displacement.register_id  = id;
  199|    916|        arg.address_displacement.displacement = displacement;
  200|    916|        return arg;
  201|    916|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  6.14k|    {
  205|  6.14k|        InstructionArgument arg;
  206|  6.14k|        arg.m_Type           = ArgumentType::Label;
  207|  6.14k|        arg.label.label_name = label_name;
  208|  6.14k|        return arg;
  209|  6.14k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  351|  28.2k|        {
  352|  28.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  353|  28.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  354|  28.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  355|       |
  356|  28.2k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  357|  28.2k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  358|       |
  359|  28.2k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  360|  28.2k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  376|  14.1k|        {
  377|  14.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  378|  14.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  379|  14.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  380|       |
  381|  14.1k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  382|  14.1k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  383|       |
  384|  14.1k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  385|  14.1k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  401|  22.5k|        {
  402|  22.5k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  403|  22.5k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  404|  22.5k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  405|       |
  406|  22.5k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  407|  22.5k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  408|       |
  409|  22.5k|            const phi::f32 new_value = lhs_value + rhs_value;
  410|       |
  411|  22.5k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  412|  22.5k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  416|  15.0k|        {
  417|  15.0k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  418|  15.0k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  419|  15.0k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  420|       |
  421|  15.0k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  422|  15.0k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  423|       |
  424|  15.0k|            const phi::f64 new_value = lhs_value + rhs_value;
  425|       |
  426|  15.0k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  427|  15.0k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  431|  35.7k|        {
  432|  35.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  433|  35.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  434|  35.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  435|       |
  436|  35.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  437|  35.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  438|       |
  439|  35.7k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  440|  35.7k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  456|  32.6k|        {
  457|  32.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  458|  32.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  459|  32.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  460|       |
  461|  32.6k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  462|  32.6k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  463|       |
  464|  32.6k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  465|  32.6k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  481|  11.0k|        {
  482|  11.0k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  483|  11.0k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  484|  11.0k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  485|       |
  486|  11.0k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  487|  11.0k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  488|       |
  489|  11.0k|            const phi::f32 new_value = lhs_value - rhs_value;
  490|       |
  491|  11.0k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  492|  11.0k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  496|  12.6k|        {
  497|  12.6k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  498|  12.6k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  499|  12.6k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  500|       |
  501|  12.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  502|  12.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  503|       |
  504|  12.6k|            const phi::f64 new_value = lhs_value - rhs_value;
  505|       |
  506|  12.6k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  507|  12.6k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  511|  14.5k|        {
  512|  14.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  513|  14.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  514|  14.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  515|       |
  516|  14.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  517|  14.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  518|       |
  519|  14.5k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  520|  14.5k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  536|  19.1k|        {
  537|  19.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  538|  19.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  539|  19.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  540|       |
  541|  19.1k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  542|  19.1k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  543|       |
  544|  19.1k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  545|  19.1k|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  561|  7.03k|        {
  562|  7.03k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  563|  7.03k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  564|  7.03k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  565|       |
  566|  7.03k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  567|  7.03k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  568|       |
  569|  7.03k|            const phi::f32 new_value = lhs_value * rhs_value;
  570|       |
  571|  7.03k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  572|  7.03k|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  576|  44.1k|        {
  577|  44.1k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  578|  44.1k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  579|  44.1k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  580|       |
  581|  44.1k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  582|  44.1k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  583|       |
  584|  44.1k|            const phi::f64 new_value = lhs_value * rhs_value;
  585|       |
  586|  44.1k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  587|  44.1k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  591|      1|        {
  592|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  593|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  594|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  595|       |
  596|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  597|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  598|       |
  599|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  600|      1|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  616|      1|        {
  617|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  618|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  619|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  620|       |
  621|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  622|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  623|       |
  624|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  625|      1|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  641|      1|        {
  642|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  643|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  644|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  645|       |
  646|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  647|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  648|       |
  649|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (649:17): [True: 1, False: 0]
  ------------------
  650|      1|            {
  651|      1|                processor.Raise(Exception::DivideByZero);
  652|      1|                return;
  653|      1|            }
  654|       |
  655|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  656|       |
  657|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  658|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  662|      1|        {
  663|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  664|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  665|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  666|       |
  667|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  668|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  669|       |
  670|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (670:17): [True: 1, False: 0]
  ------------------
  671|      1|            {
  672|      1|                processor.Raise(Exception::DivideByZero);
  673|      1|                return;
  674|      1|            }
  675|       |
  676|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  677|       |
  678|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  679|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  683|  19.0k|        {
  684|  19.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  685|  19.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  686|  19.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  687|       |
  688|  19.0k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  689|  19.0k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  690|       |
  691|  19.0k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  692|  19.0k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  709|  11.6k|        {
  710|  11.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  711|  11.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  712|  11.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  713|       |
  714|  11.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  715|  11.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  716|       |
  717|  11.6k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  718|  11.6k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  735|  40.1k|        {
  736|  40.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  737|  40.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  738|  40.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  739|       |
  740|  40.1k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  741|  40.1k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  742|       |
  743|  40.1k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  744|  40.1k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  761|  19.6k|        {
  762|  19.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  763|  19.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  764|  19.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  765|       |
  766|  19.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  767|  19.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  768|       |
  769|  19.6k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  770|  19.6k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  787|  20.1k|        {
  788|  20.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  789|  20.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  790|  20.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  791|       |
  792|  20.1k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  793|  20.1k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  794|  20.1k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  795|       |
  796|  20.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  797|  20.1k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  814|  23.3k|        {
  815|  23.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  816|  23.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  817|  23.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  818|       |
  819|  23.3k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  820|  23.3k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  821|  23.3k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  822|       |
  823|  23.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  824|  23.3k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  841|  36.5k|        {
  842|  36.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  843|  36.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  844|  36.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  845|       |
  846|  36.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  847|  36.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  848|  36.5k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  849|       |
  850|  36.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  851|  36.5k|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  868|  15.9k|        {
  869|  15.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  870|  15.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  871|  15.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  872|       |
  873|  15.9k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  874|  15.9k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  875|       |
  876|  15.9k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (876:41): [True: 0, False: 15.9k]
  ------------------
  877|       |
  878|  15.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  879|  15.9k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  897|  20.2k|        {
  898|  20.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  899|  20.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  900|  20.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  901|       |
  902|  20.2k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  903|  20.2k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  904|       |
  905|  20.2k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (905:41): [True: 0, False: 20.2k]
  ------------------
  906|       |
  907|  20.2k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  908|  20.2k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  926|  71.8k|        {
  927|  71.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  928|  71.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  929|       |
  930|  71.8k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  931|  71.8k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  932|       |
  933|  71.8k|            const phi::boolean new_value = (lhs_value < rhs_value);
  934|       |
  935|  71.8k|            processor.SetFPSRValue(new_value);
  936|  71.8k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  940|  8.87k|        {
  941|  8.87k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  942|  8.87k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  943|       |
  944|  8.87k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  945|  8.87k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  946|       |
  947|  8.87k|            const phi::boolean new_value = (lhs_value < rhs_value);
  948|       |
  949|  8.87k|            processor.SetFPSRValue(new_value);
  950|  8.87k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  954|  10.8k|        {
  955|  10.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  956|  10.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  957|  10.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  958|       |
  959|  10.8k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  960|  10.8k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  961|       |
  962|  10.8k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (962:41): [True: 0, False: 10.8k]
  ------------------
  963|       |
  964|  10.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  965|  10.8k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  983|  15.6k|        {
  984|  15.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  985|  15.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  986|  15.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  987|       |
  988|  15.6k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  989|  15.6k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  990|       |
  991|  15.6k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (991:41): [True: 0, False: 15.6k]
  ------------------
  992|       |
  993|  15.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  994|  15.6k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1012|  79.8k|        {
 1013|  79.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1014|  79.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1015|       |
 1016|  79.8k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1017|  79.8k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1018|       |
 1019|  79.8k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1020|       |
 1021|  79.8k|            processor.SetFPSRValue(new_value);
 1022|  79.8k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1026|  22.5k|        {
 1027|  22.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1028|  22.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1029|       |
 1030|  22.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1031|  22.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1032|       |
 1033|  22.5k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1034|       |
 1035|  22.5k|            processor.SetFPSRValue(new_value);
 1036|  22.5k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1040|  59.5k|        {
 1041|  59.5k|            const auto& dest_reg = arg1.AsRegisterInt();
 1042|  59.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1043|  59.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1044|       |
 1045|  59.5k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1046|  59.5k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1047|       |
 1048|  59.5k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1048:41): [True: 51.2k, False: 8.35k]
  ------------------
 1049|       |
 1050|  59.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1051|  59.5k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1069|  20.2k|        {
 1070|  20.2k|            const auto& dest_reg = arg1.AsRegisterInt();
 1071|  20.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1072|  20.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1073|       |
 1074|  20.2k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1075|  20.2k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1076|       |
 1077|  20.2k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1077:41): [True: 20.2k, False: 0]
  ------------------
 1078|       |
 1079|  20.2k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1080|  20.2k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1098|  20.9k|        {
 1099|  20.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1100|  20.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1101|       |
 1102|  20.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1103|  20.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1104|       |
 1105|  20.9k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1106|       |
 1107|  20.9k|            processor.SetFPSRValue(new_value);
 1108|  20.9k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1112|  51.9k|        {
 1113|  51.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1114|  51.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1115|       |
 1116|  51.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1117|  51.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1118|       |
 1119|  51.9k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1120|       |
 1121|  51.9k|            processor.SetFPSRValue(new_value);
 1122|  51.9k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1126|  18.0k|        {
 1127|  18.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1128|  18.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1129|  18.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1130|       |
 1131|  18.0k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1132|  18.0k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1133|       |
 1134|  18.0k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1134:41): [True: 16.0k, False: 2.00k]
  ------------------
 1135|       |
 1136|  18.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1137|  18.0k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1155|  11.0k|        {
 1156|  11.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1157|  11.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1158|  11.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1159|       |
 1160|  11.0k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1161|  11.0k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1162|       |
 1163|  11.0k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1163:41): [True: 11.0k, False: 0]
  ------------------
 1164|       |
 1165|  11.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1166|  11.0k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1184|  22.7k|        {
 1185|  22.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1186|  22.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1187|       |
 1188|  22.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1189|  22.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1190|       |
 1191|  22.7k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1192|       |
 1193|  22.7k|            processor.SetFPSRValue(new_value);
 1194|  22.7k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1198|  27.6k|        {
 1199|  27.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1200|  27.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1201|       |
 1202|  27.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1203|  27.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1204|       |
 1205|  27.6k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1206|       |
 1207|  27.6k|            processor.SetFPSRValue(new_value);
 1208|  27.6k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1212|  19.1k|        {
 1213|  19.1k|            const auto& dest_reg = arg1.AsRegisterInt();
 1214|  19.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1215|  19.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1216|       |
 1217|  19.1k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1218|  19.1k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1219|       |
 1220|  19.1k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1220:41): [True: 19.1k, False: 0]
  ------------------
 1221|       |
 1222|  19.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1223|  19.1k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1241|  21.9k|        {
 1242|  21.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1243|  21.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1244|  21.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1245|       |
 1246|  21.9k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1247|  21.9k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1248|       |
 1249|  21.9k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1249:41): [True: 21.9k, False: 0]
  ------------------
 1250|       |
 1251|  21.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1252|  21.9k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1270|  22.5k|        {
 1271|  22.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1272|  22.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1273|       |
 1274|  22.5k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1275|  22.5k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1276|       |
 1277|  22.5k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1278|       |
 1279|  22.5k|            processor.SetFPSRValue(new_value);
 1280|  22.5k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1284|  25.8k|        {
 1285|  25.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1286|  25.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1287|       |
 1288|  25.8k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1289|  25.8k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1290|       |
 1291|  25.8k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1292|       |
 1293|  25.8k|            processor.SetFPSRValue(new_value);
 1294|  25.8k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1298|  25.3k|        {
 1299|  25.3k|            const auto& dest_reg = arg1.AsRegisterInt();
 1300|  25.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1301|  25.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1302|       |
 1303|  25.3k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1304|  25.3k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1305|       |
 1306|  25.3k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1306:41): [True: 0, False: 25.3k]
  ------------------
 1307|       |
 1308|  25.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1309|  25.3k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1327|  20.7k|        {
 1328|  20.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1329|  20.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1330|  20.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1331|       |
 1332|  20.7k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1333|  20.7k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1334|       |
 1335|  20.7k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1335:41): [True: 0, False: 20.7k]
  ------------------
 1336|       |
 1337|  20.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1338|  20.7k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1356|  22.7k|        {
 1357|  22.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1358|  22.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1359|       |
 1360|  22.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1361|  22.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1362|       |
 1363|  22.7k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1364|       |
 1365|  22.7k|            processor.SetFPSRValue(new_value);
 1366|  22.7k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1370|  22.5k|        {
 1371|  22.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1372|  22.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1373|       |
 1374|  22.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1375|  22.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1376|       |
 1377|  22.5k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1378|       |
 1379|  22.5k|            processor.SetFPSRValue(new_value);
 1380|  22.5k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1384|  69.9k|        {
 1385|  69.9k|            const auto& test_reg   = arg1.AsRegisterInt();
 1386|  69.9k|            const auto& jump_label = arg2.AsLabel();
 1387|       |
 1388|  69.9k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1389|       |
 1390|  69.9k|            if (test_value == 0)
  ------------------
  |  Branch (1390:17): [True: 69.9k, False: 0]
  ------------------
 1391|  69.9k|            {
 1392|  69.9k|                JumpToLabel(processor, jump_label.label_name);
 1393|  69.9k|            }
 1394|  69.9k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1398|  17.9k|        {
 1399|  17.9k|            const auto& test_reg   = arg1.AsRegisterInt();
 1400|  17.9k|            const auto& jump_label = arg2.AsLabel();
 1401|       |
 1402|  17.9k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1403|       |
 1404|  17.9k|            if (test_value != 0)
  ------------------
  |  Branch (1404:17): [True: 0, False: 17.9k]
  ------------------
 1405|      0|            {
 1406|      0|                JumpToLabel(processor, jump_label.label_name);
 1407|      0|            }
 1408|  17.9k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1412|  9.69k|        {
 1413|  9.69k|            const auto& jump_label = arg1.AsLabel();
 1414|       |
 1415|  9.69k|            phi::boolean test_value = processor.GetFPSRValue();
 1416|       |
 1417|  9.69k|            if (test_value)
  ------------------
  |  Branch (1417:17): [True: 1, False: 9.69k]
  ------------------
 1418|      1|            {
 1419|      1|                JumpToLabel(processor, jump_label.label_name);
 1420|      1|            }
 1421|  9.69k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1425|   109k|        {
 1426|   109k|            const auto& jump_label = arg1.AsLabel();
 1427|       |
 1428|   109k|            phi::boolean test_value = processor.GetFPSRValue();
 1429|       |
 1430|   109k|            if (!test_value)
  ------------------
  |  Branch (1430:17): [True: 64.3k, False: 45.0k]
  ------------------
 1431|  64.3k|            {
 1432|  64.3k|                JumpToLabel(processor, jump_label.label_name);
 1433|  64.3k|            }
 1434|   109k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1438|   132k|        {
 1439|   132k|            const auto& jump_label = arg1.AsLabel();
 1440|       |
 1441|   132k|            JumpToLabel(processor, jump_label.label_name);
 1442|   132k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1446|   872k|        {
 1447|   872k|            const auto& jump_register = arg1.AsRegisterInt();
 1448|       |
 1449|   872k|            JumpToRegister(processor, jump_register.register_id);
 1450|   872k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1454|  61.0k|        {
 1455|  61.0k|            const auto& jump_label = arg1.AsLabel();
 1456|       |
 1457|  61.0k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1458|  61.0k|                                                  processor.GetNextProgramCounter());
 1459|       |
 1460|  61.0k|            JumpToLabel(processor, jump_label.label_name);
 1461|  61.0k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1465|  27.3k|        {
 1466|  27.3k|            const auto& jump_register = arg1.AsRegisterInt();
 1467|       |
 1468|  27.3k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1469|  27.3k|                                                  processor.GetNextProgramCounter());
 1470|       |
 1471|  27.3k|            JumpToRegister(processor, jump_register.register_id);
 1472|  27.3k|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1663|  21.5k|        {
 1664|  21.5k|            const auto& dest_reg = arg1.AsRegisterFloat();
 1665|       |
 1666|  21.5k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1667|       |
 1668|  21.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1668:17): [True: 1, False: 21.5k]
  ------------------
 1669|      1|            {
 1670|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1671|      1|                return;
 1672|      1|            }
 1673|       |
 1674|  21.5k|            phi::i32 address = optional_address.value();
 1675|       |
 1676|  21.5k|            auto optional_value =
 1677|  21.5k|                    processor.GetMemory().LoadFloat(static_cast<std::size_t>(address.unsafe()));
 1678|       |
 1679|  21.5k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1679:17): [True: 17, False: 21.5k]
  ------------------
 1680|     17|            {
 1681|     17|                processor.Raise(Exception::AddressOutOfBounds);
 1682|     17|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|     17|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1683|     17|                return;
 1684|     17|            }
 1685|       |
 1686|  21.5k|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1687|  21.5k|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1691|  33.6k|        {
 1692|  33.6k|            const auto& dest_reg = arg1.AsRegisterFloat();
 1693|       |
 1694|  33.6k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1695|       |
 1696|  33.6k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1696:17): [True: 1, False: 33.6k]
  ------------------
 1697|      1|            {
 1698|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1699|      1|                return;
 1700|      1|            }
 1701|       |
 1702|  33.6k|            phi::i32 address = optional_address.value();
 1703|       |
 1704|  33.6k|            auto optional_value =
 1705|  33.6k|                    processor.GetMemory().LoadDouble(static_cast<std::size_t>(address.unsafe()));
 1706|       |
 1707|  33.6k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1707:17): [True: 24, False: 33.6k]
  ------------------
 1708|     24|            {
 1709|     24|                processor.Raise(Exception::AddressOutOfBounds);
 1710|     24|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|     24|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1711|     24|                return;
 1712|     24|            }
 1713|       |
 1714|  33.6k|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1715|  33.6k|        }
_ZN3dlx4impl2SBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1719|  22.5k|        {
 1720|  22.5k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1721|       |
 1722|  22.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1722:17): [True: 1, False: 22.5k]
  ------------------
 1723|      1|            {
 1724|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1725|      1|                return;
 1726|      1|            }
 1727|       |
 1728|  22.5k|            phi::i32 address = optional_address.value();
 1729|       |
 1730|  22.5k|            const auto& src_reg = arg2.AsRegisterInt();
 1731|       |
 1732|  22.5k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1733|       |
 1734|  22.5k|            phi::boolean success =
 1735|  22.5k|                    processor.GetMemory().StoreByte(static_cast<std::size_t>(address.unsafe()),
 1736|  22.5k|                                                    static_cast<std::int8_t>(value.unsafe()));
 1737|       |
 1738|  22.5k|            if (!success)
  ------------------
  |  Branch (1738:17): [True: 5, False: 22.5k]
  ------------------
 1739|      5|            {
 1740|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1741|      5|                DLX_ERROR("Failed to store byte at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1742|      5|            }
 1743|  22.5k|        }
_ZN3dlx4impl3SBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1747|  22.5k|        {
 1748|  22.5k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1749|       |
 1750|  22.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1750:17): [True: 1, False: 22.5k]
  ------------------
 1751|      1|            {
 1752|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1753|      1|                return;
 1754|      1|            }
 1755|       |
 1756|  22.5k|            phi::i32 address = optional_address.value();
 1757|       |
 1758|  22.5k|            const auto& src_reg = arg2.AsRegisterInt();
 1759|       |
 1760|  22.5k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1761|       |
 1762|  22.5k|            phi::boolean success = processor.GetMemory().StoreUnsignedByte(
 1763|  22.5k|                    static_cast<std::size_t>(address.unsafe()),
 1764|  22.5k|                    static_cast<std::uint8_t>(value.unsafe()));
 1765|       |
 1766|  22.5k|            if (!success)
  ------------------
  |  Branch (1766:17): [True: 4, False: 22.5k]
  ------------------
 1767|      4|            {
 1768|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1769|      4|                DLX_ERROR("Failed to store unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1770|      4|            }
 1771|  22.5k|        }
_ZN3dlx4impl2SHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1775|  25.3k|        {
 1776|  25.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1777|       |
 1778|  25.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1778:17): [True: 1, False: 25.3k]
  ------------------
 1779|      1|            {
 1780|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1781|      1|                return;
 1782|      1|            }
 1783|       |
 1784|  25.3k|            phi::i32 address = optional_address.value();
 1785|       |
 1786|  25.3k|            const auto& src_reg = arg2.AsRegisterInt();
 1787|       |
 1788|  25.3k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1789|       |
 1790|  25.3k|            phi::boolean success =
 1791|  25.3k|                    processor.GetMemory().StoreHalfWord(static_cast<std::size_t>(address.unsafe()),
 1792|  25.3k|                                                        static_cast<std::int16_t>(value.unsafe()));
 1793|       |
 1794|  25.3k|            if (!success)
  ------------------
  |  Branch (1794:17): [True: 3, False: 25.3k]
  ------------------
 1795|      3|            {
 1796|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1797|      3|                DLX_ERROR("Failed to store half word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1798|      3|            }
 1799|  25.3k|        }
_ZN3dlx4impl3SHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1803|  22.5k|        {
 1804|  22.5k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1805|       |
 1806|  22.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1806:17): [True: 1, False: 22.5k]
  ------------------
 1807|      1|            {
 1808|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1809|      1|                return;
 1810|      1|            }
 1811|       |
 1812|  22.5k|            phi::i32 address = optional_address.value();
 1813|       |
 1814|  22.5k|            const auto& src_reg = arg2.AsRegisterInt();
 1815|       |
 1816|  22.5k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1817|       |
 1818|  22.5k|            phi::boolean success = processor.GetMemory().StoreUnsignedHalfWord(
 1819|  22.5k|                    static_cast<std::size_t>(address.unsafe()),
 1820|  22.5k|                    static_cast<std::uint16_t>(value.unsafe()));
 1821|       |
 1822|  22.5k|            if (!success)
  ------------------
  |  Branch (1822:17): [True: 3, False: 22.5k]
  ------------------
 1823|      3|            {
 1824|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1825|      3|                DLX_ERROR("Failed to store unsigned half word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1826|      3|            }
 1827|  22.5k|        }
_ZN3dlx4impl2SWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1831|  23.0k|        {
 1832|  23.0k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1833|       |
 1834|  23.0k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1834:17): [True: 1, False: 23.0k]
  ------------------
 1835|      1|            {
 1836|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1837|      1|                return;
 1838|      1|            }
 1839|       |
 1840|  23.0k|            phi::i32 address = optional_address.value();
 1841|       |
 1842|  23.0k|            const auto& src_reg = arg2.AsRegisterInt();
 1843|       |
 1844|  23.0k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1845|       |
 1846|  23.0k|            phi::boolean success = processor.GetMemory().StoreWord(
 1847|  23.0k|                    static_cast<std::size_t>(address.unsafe()), value);
 1848|       |
 1849|  23.0k|            if (!success)
  ------------------
  |  Branch (1849:17): [True: 2, False: 23.0k]
  ------------------
 1850|      2|            {
 1851|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1852|      2|                DLX_ERROR("Failed to store word at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1853|      2|            }
 1854|  23.0k|        }
_ZN3dlx4impl3SWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1858|  17.9k|        {
 1859|  17.9k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1860|       |
 1861|  17.9k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1861:17): [True: 1, False: 17.9k]
  ------------------
 1862|      1|            {
 1863|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1864|      1|                return;
 1865|      1|            }
 1866|       |
 1867|  17.9k|            phi::i32 address = optional_address.value();
 1868|       |
 1869|  17.9k|            const auto& src_reg = arg2.AsRegisterInt();
 1870|       |
 1871|  17.9k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1872|       |
 1873|  17.9k|            phi::boolean success = processor.GetMemory().StoreUnsignedWord(
 1874|  17.9k|                    static_cast<std::size_t>(address.unsafe()), value);
 1875|       |
 1876|  17.9k|            if (!success)
  ------------------
  |  Branch (1876:17): [True: 3, False: 17.9k]
  ------------------
 1877|      3|            {
 1878|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1879|      3|                DLX_ERROR("Failed to store unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1880|      3|            }
 1881|  17.9k|        }
_ZN3dlx4impl2SFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1885|  17.9k|        {
 1886|  17.9k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1887|       |
 1888|  17.9k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1888:17): [True: 1, False: 17.9k]
  ------------------
 1889|      1|            {
 1890|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1891|      1|                return;
 1892|      1|            }
 1893|       |
 1894|  17.9k|            phi::i32 address = optional_address.value();
 1895|       |
 1896|  17.9k|            const auto& src_reg = arg2.AsRegisterFloat();
 1897|       |
 1898|  17.9k|            phi::f32 value = processor.FloatRegisterGetFloatValue(src_reg.register_id);
 1899|       |
 1900|  17.9k|            phi::boolean success = processor.GetMemory().StoreFloat(
 1901|  17.9k|                    static_cast<std::size_t>(address.unsafe()), value);
 1902|       |
 1903|  17.9k|            if (!success)
  ------------------
  |  Branch (1903:17): [True: 4, False: 17.9k]
  ------------------
 1904|      4|            {
 1905|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1906|      4|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1907|      4|            }
 1908|  17.9k|        }
_ZN3dlx4impl2SDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1912|  22.5k|        {
 1913|  22.5k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1914|       |
 1915|  22.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1915:17): [True: 2, False: 22.5k]
  ------------------
 1916|      2|            {
 1917|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1918|      2|                return;
 1919|      2|            }
 1920|       |
 1921|  22.5k|            phi::i32 address = optional_address.value();
 1922|       |
 1923|  22.5k|            const auto& src_reg = arg2.AsRegisterFloat();
 1924|       |
 1925|  22.5k|            phi::f64 value = processor.FloatRegisterGetDoubleValue(src_reg.register_id);
 1926|       |
 1927|  22.5k|            phi::boolean success = processor.GetMemory().StoreDouble(
 1928|  22.5k|                    static_cast<std::size_t>(address.unsafe()), value);
 1929|       |
 1930|  22.5k|            if (!success)
  ------------------
  |  Branch (1930:17): [True: 4, False: 22.5k]
  ------------------
 1931|      4|            {
 1932|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1933|      4|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1934|      4|            }
 1935|  22.5k|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1939|  7.10k|        {
 1940|  7.10k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1941|  7.10k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1942|       |
 1943|  7.10k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1944|       |
 1945|  7.10k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1946|  7.10k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1950|  15.4k|        {
 1951|  15.4k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1952|  15.4k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1953|       |
 1954|  15.4k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1955|       |
 1956|  15.4k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1957|  15.4k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1988|  16.2k|        {
 1989|  16.2k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1990|  16.2k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1991|       |
 1992|  16.2k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1993|       |
 1994|  16.2k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 1995|  16.2k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1999|  14.6k|        {
 2000|  14.6k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2001|  14.6k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2002|       |
 2003|  14.6k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2004|  14.6k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2005|  14.6k|            const float        converted_value_float =
 2006|  14.6k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2007|       |
 2008|  14.6k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2009|  14.6k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2013|  26.8k|        {
 2014|  26.8k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2015|  26.8k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2016|       |
 2017|  26.8k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2018|  26.8k|            const float  converted_value = static_cast<float>(src_value);
 2019|       |
 2020|  26.8k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2021|  26.8k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2025|  15.1k|        {
 2026|  15.1k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2027|  15.1k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2028|       |
 2029|  15.1k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2030|  15.1k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2031|  15.1k|            const float        converted_value_float =
 2032|  15.1k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2033|       |
 2034|  15.1k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2035|  15.1k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2039|  32.5k|        {
 2040|  32.5k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2041|  32.5k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2042|       |
 2043|  32.5k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2044|  32.5k|            const std::int32_t converted_value_int =
 2045|  32.5k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2046|  32.5k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2047|       |
 2048|  32.5k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2049|  32.5k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2053|  22.5k|        {
 2054|  22.5k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2055|  22.5k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2056|       |
 2057|  22.5k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2058|  22.5k|            const std::int32_t converted_value_int =
 2059|  22.5k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2060|  22.5k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2061|       |
 2062|  22.5k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2063|  22.5k|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2073|      2|        {
 2074|      2|            processor.Raise(Exception::Halt);
 2075|      2|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2079|  1.25M|        {
 2080|       |            /* Do nothing */
 2081|  1.25M|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  169|  28.2k|    {
  170|  28.2k|        phi::i64 res = phi::i64(lhs) + rhs;
  171|       |
  172|  28.2k|        SafeWriteInteger(processor, dest_reg, res);
  173|  28.2k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  124|  78.5k|    {
  125|  78.5k|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  126|  78.5k|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  127|       |
  128|       |        // Check for underflow
  129|  78.5k|        if (value < min)
  ------------------
  |  Branch (129:13): [True: 0, False: 78.5k]
  ------------------
  130|      0|        {
  131|      0|            processor.Raise(Exception::Underflow);
  132|       |
  133|      0|            value = max + (value % (min - 1));
  134|      0|        }
  135|       |        // Check for overflow
  136|  78.5k|        else if (value > max)
  ------------------
  |  Branch (136:18): [True: 0, False: 78.5k]
  ------------------
  137|      0|        {
  138|      0|            processor.Raise(Exception::Overflow);
  139|       |
  140|      0|            value = min + (value % (max + 1));
  141|      0|        }
  142|       |
  143|  78.5k|        PHI_ASSERT(value >= min);
  144|  78.5k|        PHI_ASSERT(value <= max);
  145|       |
  146|  78.5k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  147|  78.5k|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  177|  14.1k|    {
  178|  14.1k|        phi::u64 res = phi::u64(lhs) + rhs;
  179|       |
  180|  14.1k|        SafeWriteInteger(processor, dest_reg, res);
  181|  14.1k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  151|  65.9k|    {
  152|  65.9k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  153|       |
  154|       |        // Check for overflow
  155|  65.9k|        if (value > max)
  ------------------
  |  Branch (155:13): [True: 0, False: 65.9k]
  ------------------
  156|      0|        {
  157|      0|            processor.Raise(Exception::Overflow);
  158|       |
  159|      0|            value %= max + 1u;
  160|      0|        }
  161|       |
  162|  65.9k|        PHI_ASSERT(value <= max);
  163|       |
  164|  65.9k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  165|  65.9k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  185|  35.7k|    {
  186|  35.7k|        phi::i64 res = phi::i64(lhs) - rhs;
  187|       |
  188|  35.7k|        SafeWriteInteger(processor, dest_reg, res);
  189|  35.7k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  193|  32.6k|    {
  194|  32.6k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  195|       |
  196|  32.6k|        if (lhs < rhs)
  ------------------
  |  Branch (196:13): [True: 5.83k, False: 26.8k]
  ------------------
  197|  5.83k|        {
  198|  5.83k|            processor.Raise(Exception::Underflow);
  199|       |
  200|  5.83k|            phi::u64 res = max - rhs + lhs + 1u;
  201|  5.83k|            SafeWriteInteger(processor, dest_reg, res);
  202|  5.83k|            return;
  203|  5.83k|        }
  204|       |
  205|  26.8k|        phi::u64 res = phi::u64(lhs) - rhs;
  206|       |
  207|  26.8k|        SafeWriteInteger(processor, dest_reg, res);
  208|  26.8k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  212|  14.5k|    {
  213|  14.5k|        phi::i64 res = phi::i64(lhs) * rhs;
  214|       |
  215|  14.5k|        SafeWriteInteger(processor, dest_reg, res);
  216|  14.5k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  220|  19.1k|    {
  221|  19.1k|        phi::u64 res = phi::u64(lhs) * rhs;
  222|       |
  223|  19.1k|        SafeWriteInteger(processor, dest_reg, res);
  224|  19.1k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  228|      1|    {
  229|      1|        if (rhs == 0)
  ------------------
  |  Branch (229:13): [True: 1, False: 0]
  ------------------
  230|      1|        {
  231|      1|            processor.Raise(Exception::DivideByZero);
  232|      1|            return;
  233|      1|        }
  234|       |
  235|      0|        phi::i64 res = phi::i64(lhs) / rhs;
  236|       |
  237|      0|        SafeWriteInteger(processor, dest_reg, res);
  238|      0|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  242|      1|    {
  243|      1|        if (rhs == 0u)
  ------------------
  |  Branch (243:13): [True: 1, False: 0]
  ------------------
  244|      1|        {
  245|      1|            processor.Raise(Exception::DivideByZero);
  246|      1|            return;
  247|      1|        }
  248|       |
  249|      0|        phi::u64 res = phi::u64(lhs) / rhs;
  250|       |
  251|      0|        SafeWriteInteger(processor, dest_reg, res);
  252|      0|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  325|  59.2k|    {
  326|  59.2k|        if (shift > 31)
  ------------------
  |  Branch (326:13): [True: 0, False: 59.2k]
  ------------------
  327|      0|        {
  328|      0|            processor.Raise(Exception::BadShift);
  329|       |
  330|       |            // Just set register to 0
  331|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  332|      0|            return;
  333|      0|        }
  334|       |
  335|       |        // Negative shifts are undefined behavior
  336|  59.2k|        if (shift < 0)
  ------------------
  |  Branch (336:13): [True: 0, False: 59.2k]
  ------------------
  337|      0|        {
  338|      0|            processor.Raise(Exception::BadShift);
  339|      0|            return;
  340|      0|        }
  341|       |
  342|  59.2k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  343|       |
  344|  59.2k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  345|  59.2k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  256|  11.6k|    {
  257|       |        // Prevent undefined behavior by shifting by more than 31
  258|  11.6k|        if (shift > 31)
  ------------------
  |  Branch (258:13): [True: 0, False: 11.6k]
  ------------------
  259|      0|        {
  260|      0|            processor.Raise(Exception::BadShift);
  261|       |
  262|       |            // Just set register to 0
  263|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  264|      0|            return;
  265|      0|        }
  266|       |
  267|       |        // Do nothing when shifting by zero to prevent undefined behavior
  268|  11.6k|        if (shift == 0)
  ------------------
  |  Branch (268:13): [True: 11.6k, False: 0]
  ------------------
  269|  11.6k|        {
  270|  11.6k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  271|  11.6k|            return;
  272|  11.6k|        }
  273|       |
  274|       |        // Negative shifts are undefiend behavior
  275|      0|        if (shift < 0)
  ------------------
  |  Branch (275:13): [True: 0, False: 0]
  ------------------
  276|      0|        {
  277|      0|            processor.Raise(Exception::BadShift);
  278|      0|            return;
  279|      0|        }
  280|       |
  281|      0|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  282|       |
  283|      0|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  284|       |
  285|      0|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  286|      0|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  290|  19.6k|    {
  291|       |        // Prevent undefined behavior by shifting by more than 31
  292|  19.6k|        if (shift > 31)
  ------------------
  |  Branch (292:13): [True: 0, False: 19.6k]
  ------------------
  293|      0|        {
  294|      0|            processor.Raise(Exception::BadShift);
  295|       |
  296|       |            // Is negative ie. sign bit is set
  297|      0|            if (base < 0)
  ------------------
  |  Branch (297:17): [True: 0, False: 0]
  ------------------
  298|      0|            {
  299|       |                // Set every byte to 1
  300|      0|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  301|      0|            }
  302|      0|            else
  303|      0|            {
  304|       |                // Set every byte to 0
  305|      0|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  306|      0|            }
  307|      0|            return;
  308|      0|        }
  309|       |
  310|       |        // Negative shifts are undefined behavior
  311|  19.6k|        if (shift < 0)
  ------------------
  |  Branch (311:13): [True: 0, False: 19.6k]
  ------------------
  312|      0|        {
  313|      0|            processor.Raise(Exception::BadShift);
  314|      0|            return;
  315|      0|        }
  316|       |
  317|  19.6k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  318|       |
  319|  19.6k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  320|  19.6k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|   328k|    {
   39|       |        // Lookup the label
   40|   328k|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|   328k|        PHI_ASSERT(program != nullptr);
   42|   328k|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|   328k|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 110, False: 328k]
  ------------------
   45|    110|        {
   46|    110|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|    110|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|    110|            processor.Raise(Exception::UnknownLabel);
   48|    110|            return;
   49|    110|        }
   50|       |
   51|   328k|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|   328k|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|   328k|        processor.SetNextProgramCounter(jump_point);
   56|   328k|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|   899k|    {
   60|   899k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|   899k|        phi::u32 max_address =
   63|   899k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|   899k|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 16, False: 899k]
  ------------------
   65|     16|        {
   66|     16|            processor.Raise(Exception::AddressOutOfBounds);
   67|     16|            return;
   68|     16|        }
   69|       |
   70|   899k|        processor.SetNextProgramCounter(address.unsafe());
   71|   899k|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
  100|   229k|    {
  101|   229k|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (101:13): [True: 229k, False: 4]
  ------------------
  102|   229k|        {
  103|   229k|            const auto& imm_value = argument.AsImmediateValue();
  104|       |
  105|   229k|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (105:17): [True: 10, False: 229k]
  ------------------
  106|     10|            {
  107|     10|                return {};
  108|     10|            }
  109|       |
  110|   229k|            return imm_value.signed_value;
  111|   229k|        }
  112|       |
  113|      4|        PHI_ASSERT(argument.GetType() == ArgumentType::AddressDisplacement);
  114|       |
  115|      4|        const auto& adr_displacement = argument.AsAddressDisplacement();
  116|      4|        return CalculateDisplacementAddress(processor, adr_displacement);
  117|   229k|    }
InstructionImplementation.cpp:_ZN3dlxL28CalculateDisplacementAddressERNS_9ProcessorERKNS_19InstructionArgument19AddressDisplacementE:
   78|      4|    {
   79|      4|        phi::i32 register_value = processor.IntRegisterGetSignedValue(adr_displacement.register_id);
   80|       |
   81|      4|        phi::i32 address = adr_displacement.displacement + register_value;
   82|       |
   83|      4|        if (address < 0)
  ------------------
  |  Branch (83:13): [True: 1, False: 3]
  ------------------
   84|      1|        {
   85|      1|            processor.Raise(Exception::AddressOutOfBounds);
   86|      1|            return {};
   87|      1|        }
   88|       |
   89|      3|        return address;
   90|      4|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  4.02M|    {
   12|  4.02M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  4.02M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  4.02M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  4.02M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  4.02M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  4.02M|                   "Unexpected argument type for arg1");
   22|  4.02M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  4.02M|                   "Unexpected argument type for arg2");
   24|  4.02M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  4.02M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  4.02M|        m_Executor(processor, arg1, arg2, arg3);
   29|  4.02M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  61.4k|    {
  453|  61.4k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  61.4k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|   376k|    {
   17|   376k|        m_ValueSigned = val;
   18|   376k|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|   105k|    {
   22|   105k|        m_ValueUnsigned = val;
   23|   105k|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|   954k|    {
   27|   954k|        return m_ValueSigned;
   28|   954k|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  1.31M|    {
   32|  1.31M|        return m_ValueUnsigned;
   33|  1.31M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|   662k|    {
   37|   662k|        return m_IsReadOnly;
   38|   662k|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  122|  21.5k|    {
  123|  21.5k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (123:13): [True: 16, False: 21.5k]
  ------------------
  124|     16|        {
  125|     16|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|     16|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  126|     16|            return {};
  127|     16|        }
  128|       |
  129|  21.5k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  130|       |
  131|  21.5k|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (131:13): [True: 1, False: 21.5k]
  ------------------
  132|      1|        {
  133|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  134|      1|            return {};
  135|      1|        }
  136|       |
  137|  21.5k|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  138|  21.5k|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  141|  33.6k|    {
  142|  33.6k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (142:13): [True: 23, False: 33.6k]
  ------------------
  143|     23|        {
  144|     23|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|     23|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  145|     23|            return {};
  146|     23|        }
  147|       |
  148|  33.6k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  149|       |
  150|  33.6k|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (150:13): [True: 1, False: 33.6k]
  ------------------
  151|      1|        {
  152|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  153|      1|            return {};
  154|      1|        }
  155|       |
  156|  33.6k|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  157|  33.6k|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  160|  22.5k|    {
  161|  22.5k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (161:13): [True: 5, False: 22.5k]
  ------------------
  162|      5|        {
  163|      5|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  164|      5|            return false;
  165|      5|        }
  166|       |
  167|  22.5k|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  168|  22.5k|        return true;
  169|  22.5k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedByteEN3phi7integerImEENS2_IhEE:
  172|  22.5k|    {
  173|  22.5k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (173:13): [True: 4, False: 22.5k]
  ------------------
  174|      4|        {
  175|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  176|      4|            return false;
  177|      4|        }
  178|       |
  179|  22.5k|        m_Values[(address - m_StartingAddress).unsafe()].unsigned_value = value.unsafe();
  180|  22.5k|        return true;
  181|  22.5k|    }
_ZN3dlx11MemoryBlock13StoreHalfWordEN3phi7integerImEENS2_IsEE:
  184|  25.3k|    {
  185|  25.3k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (185:13): [True: 3, False: 25.3k]
  ------------------
  186|      3|        {
  187|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  188|      3|            return false;
  189|      3|        }
  190|       |
  191|  25.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  192|  25.3k|        *reinterpret_cast<std::int16_t*>(&m_Values[index].signed_value) = value.unsafe();
  193|       |
  194|  25.3k|        return true;
  195|  25.3k|    }
_ZN3dlx11MemoryBlock21StoreUnsignedHalfWordEN3phi7integerImEENS2_ItEE:
  198|  22.5k|    {
  199|  22.5k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (199:13): [True: 3, False: 22.5k]
  ------------------
  200|      3|        {
  201|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  202|      3|            return false;
  203|      3|        }
  204|       |
  205|  22.5k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  206|  22.5k|        *reinterpret_cast<std::uint16_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  207|       |
  208|  22.5k|        return true;
  209|  22.5k|    }
_ZN3dlx11MemoryBlock9StoreWordEN3phi7integerImEENS2_IiEE:
  212|  23.0k|    {
  213|  23.0k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (213:13): [True: 2, False: 23.0k]
  ------------------
  214|      2|        {
  215|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  216|      2|            return false;
  217|      2|        }
  218|       |
  219|  23.0k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  220|  23.0k|        *reinterpret_cast<std::int32_t*>(&m_Values[index].signed_value) = value.unsafe();
  221|       |
  222|  23.0k|        return true;
  223|  23.0k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedWordEN3phi7integerImEENS2_IjEE:
  226|  17.9k|    {
  227|  17.9k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (227:13): [True: 3, False: 17.9k]
  ------------------
  228|      3|        {
  229|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  230|      3|            return false;
  231|      3|        }
  232|       |
  233|  17.9k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  234|  17.9k|        *reinterpret_cast<std::uint32_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  235|       |
  236|  17.9k|        return true;
  237|  17.9k|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  240|  17.9k|    {
  241|  17.9k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (241:13): [True: 4, False: 17.9k]
  ------------------
  242|      4|        {
  243|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  244|      4|            return false;
  245|      4|        }
  246|       |
  247|  17.9k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  248|  17.9k|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  249|       |
  250|  17.9k|        return true;
  251|  17.9k|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  254|  22.5k|    {
  255|  22.5k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (255:13): [True: 4, False: 22.5k]
  ------------------
  256|      4|        {
  257|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  258|      4|            return false;
  259|      4|        }
  260|       |
  261|  22.5k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  262|  22.5k|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  263|       |
  264|  22.5k|        return true;
  265|  22.5k|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  268|   229k|    {
  269|       |        // Cannot access anything before the starting address
  270|   229k|        if (address < m_StartingAddress)
  ------------------
  |  Branch (270:13): [True: 57, False: 229k]
  ------------------
  271|     57|        {
  272|     57|            return false;
  273|     57|        }
  274|       |
  275|       |        // Check if addres + size will overflow
  276|   229k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (276:13): [True: 0, False: 229k]
  ------------------
  277|   229k|                                             address.unsafe(), size.unsafe()))
  278|      0|        {
  279|      0|            return false;
  280|      0|        }
  281|       |
  282|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  283|   229k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (283:13): [True: 0, False: 229k]
  ------------------
  284|   229k|                                             m_StartingAddress.unsafe(), m_Values.size()))
  285|      0|        {
  286|      0|            return false;
  287|      0|        }
  288|       |
  289|       |        // Check if address is out of bounds
  290|   229k|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (290:13): [True: 10, False: 229k]
  ------------------
  291|     10|        {
  292|     10|            return false;
  293|     10|        }
  294|       |
  295|       |        // Otherwise this is a valid address
  296|   229k|        return true;
  297|   229k|    }
_ZN3dlx11MemoryBlock25IsAddressAlignedCorrectlyEN3phi7integerImEES3_:
  301|  55.1k|    {
  302|  55.1k|        return size != 0u && (address % size) == 0u;
  ------------------
  |  Branch (302:16): [True: 55.1k, False: 0]
  |  Branch (302:30): [True: 55.1k, False: 2]
  ------------------
  303|  55.1k|    }
_ZN3dlx11MemoryBlock5ClearEv:
  306|  7.09k|    {
  307|  7.09k|        for (auto& val : m_Values)
  ------------------
  |  Branch (307:24): [True: 7.09M, False: 7.09k]
  ------------------
  308|  7.09M|        {
  309|  7.09M|            val.signed_value = 0;
  310|  7.09M|        }
  311|  7.09k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   717k|    {
   24|   717k|        switch (token.length())
   25|   717k|        {
   26|       |            // 1 character OpCodes
   27|   112k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 112k, False: 604k]
  ------------------
   28|   112k|                char c1 = token[0];
   29|   112k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 22.2k, False: 89.7k]
  ------------------
   30|  22.2k|                {
   31|  22.2k|                    return OpCode::J;
   32|  22.2k|                }
   33|  89.7k|                break;
   34|   112k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|   125k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 125k, False: 591k]
  ------------------
   38|   125k|                char c1 = token[0];
   39|   125k|                char c2 = token[1];
   40|       |
   41|   125k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 79.2k, False: 46.3k]
  ------------------
   42|   125k|                {
   43|  3.36k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 3.36k, False: 122k]
  ------------------
   44|  5.71k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 2.34k, False: 123k]
  ------------------
   45|  5.71k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 1.22k, False: 4.49k]
  ------------------
   46|  1.22k|                        {
   47|  1.22k|                            return OpCode::JR;
   48|  1.22k|                        }
   49|  4.49k|                        break;
   50|       |
   51|  7.72k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 7.72k, False: 117k]
  ------------------
   52|  11.7k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 4.04k, False: 121k]
  ------------------
   53|  11.7k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 3.44k, False: 8.32k]
  ------------------
   54|  11.7k|                        {
   55|    589|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 589, False: 11.1k]
  ------------------
   56|  2.63k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 2.05k, False: 9.72k]
  ------------------
   57|  2.63k|                                return OpCode::LB;
   58|    538|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 538, False: 11.2k]
  ------------------
   59|    747|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 209, False: 11.5k]
  ------------------
   60|    747|                                return OpCode::LD;
   61|  1.07k|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 1.07k, False: 10.7k]
  ------------------
   62|  1.71k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 640, False: 11.1k]
  ------------------
   63|  1.71k|                                return OpCode::LF;
   64|    300|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 300, False: 11.4k]
  ------------------
   65|    912|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 612, False: 11.1k]
  ------------------
   66|    912|                                return OpCode::LH;
   67|  1.69k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 1.69k, False: 10.0k]
  ------------------
   68|  2.32k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 630, False: 11.1k]
  ------------------
   69|  2.32k|                                return OpCode::LW;
   70|  11.7k|                        }
   71|  3.44k|                        break;
   72|  3.44k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 1.57k, False: 123k]
  ------------------
   73|  5.22k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 3.64k, False: 121k]
  ------------------
   74|  5.22k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 1.96k, False: 3.26k]
  ------------------
   75|  1.96k|                        {
   76|  1.96k|                            return OpCode::OR;
   77|  1.96k|                        }
   78|  3.26k|                        break;
   79|  13.3k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 13.3k, False: 112k]
  ------------------
   80|  23.6k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 10.2k, False: 115k]
  ------------------
   81|  23.6k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 5.90k, False: 17.7k]
  ------------------
   82|  23.6k|                        {
   83|  6.24k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 6.24k, False: 17.3k]
  ------------------
   84|  8.68k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 2.43k, False: 21.1k]
  ------------------
   85|  8.68k|                                return OpCode::SB;
   86|    461|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 461, False: 23.1k]
  ------------------
   87|  1.96k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 1.50k, False: 22.1k]
  ------------------
   88|  1.96k|                                return OpCode::SD;
   89|  1.20k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 1.20k, False: 22.4k]
  ------------------
   90|  4.99k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 3.78k, False: 19.8k]
  ------------------
   91|  4.99k|                                return OpCode::SF;
   92|    361|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 361, False: 23.2k]
  ------------------
   93|  1.32k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 967, False: 22.6k]
  ------------------
   94|  1.32k|                                return OpCode::SH;
   95|    213|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 213, False: 23.4k]
  ------------------
   96|    753|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 540, False: 23.0k]
  ------------------
   97|    753|                                return OpCode::SW;
   98|  23.6k|                        }
   99|  5.90k|                        break;
  100|   125k|                }
  101|  96.3k|                break;
  102|   125k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   168k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 168k, False: 549k]
  ------------------
  106|   168k|                char c1 = token[0];
  107|   168k|                char c2 = token[1];
  108|   168k|                char c3 = token[2];
  109|       |
  110|   168k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 56.0k, False: 111k]
  ------------------
  111|   168k|                {
  112|  2.40k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 2.40k, False: 165k]
  ------------------
  113|  5.36k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 2.96k, False: 165k]
  ------------------
  114|  5.36k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 1.70k, False: 3.65k]
  |  Branch (114:29): [True: 698, False: 4.66k]
  |  Branch (114:45): [True: 698, False: 1.01k]
  ------------------
  115|    698|                        {
  116|    698|                            return OpCode::ADD;
  117|    698|                        }
  118|  4.66k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 2.98k, False: 1.68k]
  |  Branch (118:34): [True: 1.69k, False: 2.97k]
  |  Branch (118:50): [True: 1.69k, False: 1.28k]
  ------------------
  119|  1.69k|                        {
  120|  1.69k|                            return OpCode::AND;
  121|  1.69k|                        }
  122|  2.97k|                        break;
  123|       |
  124|  2.97k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 2.27k, False: 165k]
  ------------------
  125|  4.11k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 1.84k, False: 166k]
  ------------------
  126|  4.11k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 2.23k, False: 1.88k]
  |  Branch (126:29): [True: 618, False: 3.49k]
  |  Branch (126:45): [True: 618, False: 1.61k]
  ------------------
  127|    618|                        {
  128|    618|                            return OpCode::DIV;
  129|    618|                        }
  130|  3.49k|                        break;
  131|       |
  132|  3.49k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 1.03k, False: 167k]
  ------------------
  133|  4.41k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 3.38k, False: 164k]
  ------------------
  134|  4.41k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 3.62k, False: 792]
  ------------------
  135|  3.62k|                        {
  136|  3.62k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 1.50k, False: 2.12k]
  ------------------
  137|  1.50k|                            {
  138|  1.50k|                                return OpCode::EQD;
  139|  1.50k|                            }
  140|  2.12k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 1.18k, False: 941]
  ------------------
  141|  1.18k|                            {
  142|  1.18k|                                return OpCode::EQF;
  143|  1.18k|                            }
  144|  3.62k|                        }
  145|  1.73k|                        break;
  146|       |
  147|  3.71k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 3.71k, False: 164k]
  ------------------
  148|  8.25k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 4.53k, False: 163k]
  ------------------
  149|  8.25k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 3.82k, False: 4.43k]
  ------------------
  150|  3.82k|                        {
  151|  3.82k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 948, False: 2.87k]
  ------------------
  152|    948|                            {
  153|    948|                                return OpCode::GED;
  154|    948|                            }
  155|  2.87k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 1.95k, False: 919]
  ------------------
  156|  1.95k|                            {
  157|  1.95k|                                return OpCode::GEF;
  158|  1.95k|                            }
  159|  3.82k|                        }
  160|  4.43k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 3.43k, False: 999]
  ------------------
  161|  3.43k|                        {
  162|  3.43k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 1.61k, False: 1.81k]
  ------------------
  163|  1.61k|                            {
  164|  1.61k|                                return OpCode::GTD;
  165|  1.61k|                            }
  166|  1.81k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 1.50k, False: 307]
  ------------------
  167|  1.50k|                            {
  168|  1.50k|                                return OpCode::GTF;
  169|  1.50k|                            }
  170|  1.81k|                        }
  171|  2.22k|                        break;
  172|       |
  173|  2.52k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 2.52k, False: 165k]
  ------------------
  174|  3.67k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 1.15k, False: 166k]
  ------------------
  175|  3.67k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 1.35k, False: 2.32k]
  |  Branch (175:29): [True: 877, False: 2.79k]
  |  Branch (175:45): [True: 877, False: 473]
  ------------------
  176|    877|                        {
  177|    877|                            return OpCode::JAL;
  178|    877|                        }
  179|  2.79k|                        break;
  180|       |
  181|  13.3k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 13.3k, False: 154k]
  ------------------
  182|  21.9k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 8.57k, False: 159k]
  ------------------
  183|  21.9k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 2.47k, False: 19.4k]
  ------------------
  184|  21.9k|                        {
  185|  2.90k|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 2.90k, False: 19.0k]
  ------------------
  186|  3.26k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 359, False: 21.5k]
  ------------------
  187|  3.26k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 2.30k, False: 958]
  ------------------
  188|  2.30k|                                {
  189|  2.30k|                                    return OpCode::LBU;
  190|  2.30k|                                }
  191|    958|                                break;
  192|       |
  193|    958|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 761, False: 21.1k]
  ------------------
  194|  3.00k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 2.24k, False: 19.6k]
  ------------------
  195|  3.00k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 1.93k, False: 1.07k]
  ------------------
  196|  1.93k|                                {
  197|  1.93k|                                    return OpCode::LED;
  198|  1.93k|                                }
  199|  1.07k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 724, False: 349]
  ------------------
  200|    724|                                {
  201|    724|                                    return OpCode::LEF;
  202|    724|                                }
  203|    349|                                break;
  204|       |
  205|    858|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 858, False: 21.0k]
  ------------------
  206|  3.04k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 2.18k, False: 19.7k]
  ------------------
  207|  3.04k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 910, False: 2.13k]
  ------------------
  208|    910|                                {
  209|    910|                                    return OpCode::LHI;
  210|    910|                                }
  211|  2.13k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 1.22k, False: 906]
  ------------------
  212|  1.22k|                                {
  213|  1.22k|                                    return OpCode::LHU;
  214|  1.22k|                                }
  215|    906|                                break;
  216|       |
  217|  4.00k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 4.00k, False: 17.9k]
  ------------------
  218|  6.37k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 2.37k, False: 19.5k]
  ------------------
  219|  6.37k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 3.14k, False: 3.23k]
  ------------------
  220|  3.14k|                                {
  221|  3.14k|                                    return OpCode::LTD;
  222|  3.14k|                                }
  223|  3.23k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 1.52k, False: 1.71k]
  ------------------
  224|  1.52k|                                {
  225|  1.52k|                                    return OpCode::LTF;
  226|  1.52k|                                }
  227|  1.71k|                                break;
  228|       |
  229|  1.71k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 1.39k, False: 20.5k]
  ------------------
  230|  3.77k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 2.38k, False: 19.5k]
  ------------------
  231|  3.77k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 2.16k, False: 1.61k]
  ------------------
  232|  2.16k|                                {
  233|  2.16k|                                    return OpCode::LWU;
  234|  2.16k|                                }
  235|  1.61k|                                break;
  236|  21.9k|                        }
  237|  8.00k|                        break;
  238|       |
  239|  8.00k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 7.10k, False: 160k]
  ------------------
  240|  8.84k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 1.73k, False: 166k]
  ------------------
  241|  8.84k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 3.99k, False: 4.84k]
  ------------------
  242|  3.99k|                        {
  243|  3.99k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 1.89k, False: 2.10k]
  ------------------
  244|  1.89k|                            {
  245|  1.89k|                                return OpCode::NED;
  246|  1.89k|                            }
  247|  2.10k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 1.31k, False: 786]
  ------------------
  248|  1.31k|                            {
  249|  1.31k|                                return OpCode::NEF;
  250|  1.31k|                            }
  251|  3.99k|                        }
  252|  4.84k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 4.20k, False: 638]
  |  Branch (252:34): [True: 3.48k, False: 1.36k]
  |  Branch (252:50): [True: 3.48k, False: 723]
  ------------------
  253|  3.48k|                        {
  254|  3.48k|                            return OpCode::NOP;
  255|  3.48k|                        }
  256|       |
  257|  2.14k|                        break;
  258|       |
  259|  2.51k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 2.51k, False: 165k]
  ------------------
  260|  6.78k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 4.27k, False: 163k]
  ------------------
  261|  6.78k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 4.22k, False: 2.56k]
  |  Branch (261:29): [True: 2.02k, False: 4.76k]
  |  Branch (261:45): [True: 2.02k, False: 2.20k]
  ------------------
  262|  2.02k|                        {
  263|  2.02k|                            return OpCode::ORI;
  264|  2.02k|                        }
  265|  4.76k|                        break;
  266|       |
  267|  14.4k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 14.4k, False: 153k]
  ------------------
  268|  43.7k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 29.3k, False: 138k]
  ------------------
  269|  43.7k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 2.65k, False: 41.0k]
  ------------------
  270|  43.7k|                        {
  271|  1.09k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 1.09k, False: 42.6k]
  ------------------
  272|  4.35k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 3.25k, False: 40.4k]
  ------------------
  273|  4.35k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 1.65k, False: 2.69k]
  ------------------
  274|  1.65k|                                {
  275|  1.65k|                                    return OpCode::SBU;
  276|  1.65k|                                }
  277|  2.69k|                                break;
  278|       |
  279|  4.24k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 4.24k, False: 39.4k]
  ------------------
  280|  4.99k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 747, False: 42.9k]
  ------------------
  281|  4.99k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 4.10k, False: 883]
  ------------------
  282|  4.10k|                                {
  283|  4.10k|                                    return OpCode::SEQ;
  284|  4.10k|                                }
  285|    883|                                break;
  286|       |
  287|    883|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 830, False: 42.8k]
  ------------------
  288|  4.57k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 3.74k, False: 39.9k]
  ------------------
  289|  4.57k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 2.92k, False: 1.64k]
  ------------------
  290|  2.92k|                                {
  291|  2.92k|                                    return OpCode::SGE;
  292|  2.92k|                                }
  293|  1.64k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 786, False: 858]
  ------------------
  294|    786|                                {
  295|    786|                                    return OpCode::SGT;
  296|    786|                                }
  297|    858|                                break;
  298|       |
  299|  1.93k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 1.93k, False: 41.7k]
  ------------------
  300|  3.68k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 1.74k, False: 41.9k]
  ------------------
  301|  3.68k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 3.24k, False: 440]
  ------------------
  302|  3.24k|                                {
  303|  3.24k|                                    return OpCode::SHU;
  304|  3.24k|                                }
  305|    440|                                break;
  306|       |
  307|  8.59k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 8.59k, False: 35.1k]
  ------------------
  308|  10.5k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 1.94k, False: 41.7k]
  ------------------
  309|  10.5k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 1.43k, False: 9.10k]
  ------------------
  310|  10.5k|                                {
  311|  1.00k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 1.00k, False: 9.54k]
  ------------------
  312|  1.96k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 966, False: 9.57k]
  ------------------
  313|  1.96k|                                        return OpCode::SLA;
  314|       |
  315|    594|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 594, False: 9.94k]
  ------------------
  316|  1.51k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 925, False: 9.61k]
  ------------------
  317|  1.51k|                                        return OpCode::SLE;
  318|       |
  319|    759|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 759, False: 9.78k]
  ------------------
  320|  1.59k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 837, False: 9.70k]
  ------------------
  321|  1.59k|                                        return OpCode::SLL;
  322|       |
  323|    491|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 491, False: 10.0k]
  ------------------
  324|  4.02k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 3.53k, False: 7.00k]
  ------------------
  325|  4.02k|                                        return OpCode::SLT;
  326|  10.5k|                                }
  327|  1.43k|                                break;
  328|       |
  329|  1.43k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 883, False: 42.8k]
  ------------------
  330|  2.41k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 1.53k, False: 42.1k]
  ------------------
  331|  2.41k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 687, False: 1.72k]
  ------------------
  332|    687|                                {
  333|    687|                                    return OpCode::SNE;
  334|    687|                                }
  335|  1.72k|                                break;
  336|       |
  337|  3.52k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 3.52k, False: 40.1k]
  ------------------
  338|  5.39k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 1.87k, False: 41.8k]
  ------------------
  339|  5.39k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 2.78k, False: 2.61k]
  ------------------
  340|  2.78k|                                {
  341|  2.78k|                                    return OpCode::SRA;
  342|  2.78k|                                }
  343|  2.61k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 1.07k, False: 1.53k]
  ------------------
  344|  1.07k|                                {
  345|  1.07k|                                    return OpCode::SRL;
  346|  1.07k|                                }
  347|  1.53k|                                break;
  348|       |
  349|  1.53k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 1.03k, False: 42.6k]
  ------------------
  350|  2.47k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 1.44k, False: 42.2k]
  ------------------
  351|  2.47k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 1.23k, False: 1.24k]
  ------------------
  352|  1.23k|                                {
  353|  1.23k|                                    return OpCode::SUB;
  354|  1.23k|                                }
  355|  1.24k|                                break;
  356|       |
  357|  1.24k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 663, False: 43.0k]
  ------------------
  358|  2.63k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 1.96k, False: 41.7k]
  ------------------
  359|  2.63k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 1.98k, False: 650]
  ------------------
  360|  1.98k|                                {
  361|  1.98k|                                    return OpCode::SWU;
  362|  1.98k|                                }
  363|    650|                                break;
  364|  43.7k|                        }
  365|       |
  366|  15.3k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 1.25k, False: 166k]
  ------------------
  367|  19.0k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 3.64k, False: 164k]
  ------------------
  368|  19.0k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 3.92k, False: 15.0k]
  |  Branch (368:29): [True: 2.59k, False: 16.4k]
  |  Branch (368:45): [True: 2.59k, False: 1.33k]
  ------------------
  369|  2.59k|                        {
  370|  2.59k|                            return OpCode::XOR;
  371|  2.59k|                        }
  372|  16.4k|                        break;
  373|   168k|                }
  374|   100k|                break;
  375|   168k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   153k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 153k, False: 563k]
  ------------------
  379|   153k|                char c1 = token[0];
  380|   153k|                char c2 = token[1];
  381|   153k|                char c3 = token[2];
  382|   153k|                char c4 = token[3];
  383|       |
  384|   153k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 44.9k, False: 108k]
  ------------------
  385|   153k|                {
  386|  1.87k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 1.87k, False: 151k]
  ------------------
  387|  13.2k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 11.3k, False: 142k]
  ------------------
  388|  13.2k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 2.12k, False: 11.1k]
  ------------------
  389|  13.2k|                        {
  390|  6.54k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 6.54k, False: 6.68k]
  ------------------
  391|  8.01k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 1.47k, False: 11.7k]
  ------------------
  392|  8.01k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 6.83k, False: 1.17k]
  ------------------
  393|  6.83k|                                {
  394|  6.83k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 977, False: 5.86k]
  ------------------
  395|  6.83k|                                    {
  396|    835|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 835, False: 6.00k]
  ------------------
  397|  1.70k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 872, False: 5.96k]
  ------------------
  398|  1.70k|                                            return OpCode::ADDD;
  399|       |
  400|    474|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 474, False: 6.36k]
  ------------------
  401|  1.50k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 1.03k, False: 5.80k]
  ------------------
  402|  1.50k|                                            return OpCode::ADDF;
  403|       |
  404|    754|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 754, False: 6.08k]
  ------------------
  405|  1.33k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 578, False: 6.26k]
  ------------------
  406|  1.33k|                                            return OpCode::ADDI;
  407|       |
  408|    519|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 519, False: 6.32k]
  ------------------
  409|  1.31k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 797, False: 6.04k]
  ------------------
  410|  1.31k|                                            return OpCode::ADDU;
  411|  6.83k|                                    }
  412|  6.83k|                                }
  413|  2.15k|                                break;
  414|       |
  415|  2.53k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 2.53k, False: 10.7k]
  ------------------
  416|  3.08k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 557, False: 12.6k]
  ------------------
  417|  3.08k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 2.47k, False: 608]
  |  Branch (417:37): [True: 1.74k, False: 1.34k]
  |  Branch (417:53): [True: 1.74k, False: 735]
  ------------------
  418|  1.74k|                                {
  419|  1.74k|                                    return OpCode::ANDI;
  420|  1.74k|                                }
  421|       |
  422|  1.34k|                                break;
  423|  13.2k|                        }
  424|  5.62k|                        break;
  425|       |
  426|  5.62k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 4.58k, False: 149k]
  ------------------
  427|  9.34k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 4.76k, False: 148k]
  ------------------
  428|  9.34k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 637, False: 8.70k]
  ------------------
  429|  9.34k|                        {
  430|  2.43k|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 2.43k, False: 6.91k]
  ------------------
  431|  2.76k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 331, False: 9.01k]
  ------------------
  432|  2.76k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 2.34k, False: 414]
  |  Branch (432:37): [True: 1.70k, False: 1.05k]
  |  Branch (432:53): [True: 1.70k, False: 642]
  ------------------
  433|  1.70k|                                {
  434|  1.70k|                                    return OpCode::BEQZ;
  435|  1.70k|                                }
  436|  1.05k|                                break;
  437|       |
  438|  1.05k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 1.04k, False: 8.29k]
  ------------------
  439|  2.87k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 1.82k, False: 7.52k]
  ------------------
  440|  2.87k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 2.34k, False: 524]
  ------------------
  441|  2.34k|                                {
  442|  2.34k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 1.19k, False: 1.15k]
  ------------------
  443|  1.19k|                                    {
  444|  1.19k|                                        return OpCode::BFPF;
  445|  1.19k|                                    }
  446|  1.15k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 692, False: 459]
  ------------------
  447|    692|                                    {
  448|    692|                                        return OpCode::BFPT;
  449|    692|                                    }
  450|  2.34k|                                }
  451|    983|                                break;
  452|       |
  453|  2.34k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 2.34k, False: 7.00k]
  ------------------
  454|  3.07k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 734, False: 8.61k]
  ------------------
  455|  3.07k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 1.79k, False: 1.27k]
  |  Branch (455:37): [True: 1.01k, False: 2.06k]
  |  Branch (455:53): [True: 1.01k, False: 787]
  ------------------
  456|  1.01k|                                {
  457|  1.01k|                                    return OpCode::BNEZ;
  458|  1.01k|                                }
  459|  9.34k|                        }
  460|  4.74k|                        break;
  461|       |
  462|  4.74k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 2.97k, False: 150k]
  ------------------
  463|  8.91k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 5.93k, False: 147k]
  ------------------
  464|  8.91k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 7.64k, False: 1.26k]
  |  Branch (464:29): [True: 6.60k, False: 2.30k]
  |  Branch (464:45): [True: 6.60k, False: 1.03k]
  ------------------
  465|  6.60k|                        {
  466|  6.60k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 825, False: 5.78k]
  ------------------
  467|  6.60k|                            {
  468|  1.30k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 1.30k, False: 5.30k]
  ------------------
  469|  2.04k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 738, False: 5.86k]
  ------------------
  470|  2.04k|                                    return OpCode::DIVD;
  471|       |
  472|    611|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 611, False: 5.99k]
  ------------------
  473|  1.09k|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 484, False: 6.12k]
  ------------------
  474|  1.09k|                                    return OpCode::DIVF;
  475|       |
  476|    357|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 357, False: 6.24k]
  ------------------
  477|  1.74k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 1.38k, False: 5.22k]
  ------------------
  478|  1.74k|                                    return OpCode::DIVI;
  479|       |
  480|    580|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 580, False: 6.02k]
  ------------------
  481|    902|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 322, False: 6.28k]
  ------------------
  482|    902|                                    return OpCode::DIVU;
  483|  6.60k|                            }
  484|  6.60k|                        }
  485|  3.13k|                        break;
  486|       |
  487|  3.13k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 3.10k, False: 150k]
  ------------------
  488|  4.16k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 1.06k, False: 152k]
  ------------------
  489|  4.16k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 2.85k, False: 1.31k]
  |  Branch (489:29): [True: 1.39k, False: 2.77k]
  |  Branch (489:45): [True: 1.82k, False: 1.03k]
  |  Branch (489:61): [True: 1.39k, False: 422]
  ------------------
  490|  1.39k|                        {
  491|  1.39k|                            return OpCode::HALT;
  492|  1.39k|                        }
  493|  2.77k|                        break;
  494|       |
  495|  3.39k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 3.39k, False: 150k]
  ------------------
  496|  4.46k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 1.07k, False: 152k]
  ------------------
  497|  4.46k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 2.77k, False: 1.69k]
  |  Branch (497:29): [True: 876, False: 3.59k]
  |  Branch (497:45): [True: 1.79k, False: 986]
  |  Branch (497:61): [True: 876, False: 914]
  ------------------
  498|    876|                        {
  499|    876|                            return OpCode::JALR;
  500|    876|                        }
  501|  3.59k|                        break;
  502|       |
  503|  4.56k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 4.56k, False: 149k]
  ------------------
  504|  7.70k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 3.14k, False: 150k]
  ------------------
  505|  7.70k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 3.41k, False: 4.29k]
  |  Branch (505:29): [True: 2.46k, False: 5.23k]
  |  Branch (505:45): [True: 2.46k, False: 943]
  ------------------
  506|  2.46k|                        {
  507|  2.46k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 889, False: 1.58k]
  ------------------
  508|    889|                            {
  509|    889|                                return OpCode::MOVD;
  510|    889|                            }
  511|  1.58k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 1.09k, False: 487]
  ------------------
  512|  1.09k|                            {
  513|  1.09k|                                return OpCode::MOVF;
  514|  1.09k|                            }
  515|  2.46k|                        }
  516|  5.23k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 3.50k, False: 1.73k]
  |  Branch (516:34): [True: 1.91k, False: 3.32k]
  |  Branch (516:50): [True: 3.19k, False: 313]
  |  Branch (516:66): [True: 1.91k, False: 1.27k]
  ------------------
  517|  1.91k|                        {
  518|  1.91k|                            return OpCode::MULT;
  519|  1.91k|                        }
  520|  3.81k|                        break;
  521|       |
  522|  21.6k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 21.6k, False: 131k]
  ------------------
  523|  48.6k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 26.9k, False: 126k]
  ------------------
  524|  48.6k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 3.31k, False: 45.2k]
  ------------------
  525|  48.6k|                        {
  526|  3.38k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 3.38k, False: 45.2k]
  ------------------
  527|  5.46k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 2.08k, False: 46.5k]
  ------------------
  528|  5.46k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 4.28k, False: 1.18k]
  ------------------
  529|  4.28k|                                {
  530|  4.28k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 2.51k, False: 1.76k]
  ------------------
  531|  2.51k|                                    {
  532|  2.51k|                                        return OpCode::SEQI;
  533|  2.51k|                                    }
  534|  1.76k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 985, False: 782]
  ------------------
  535|    985|                                    {
  536|    985|                                        return OpCode::SEQU;
  537|    985|                                    }
  538|  4.28k|                                }
  539|  1.96k|                                break;
  540|       |
  541|  1.96k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 1.18k, False: 47.4k]
  ------------------
  542|  5.79k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 4.61k, False: 43.9k]
  ------------------
  543|  5.79k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 2.77k, False: 3.02k]
  ------------------
  544|  2.77k|                                {
  545|  2.77k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 1.10k, False: 1.67k]
  ------------------
  546|  1.10k|                                    {
  547|  1.10k|                                        return OpCode::SGEI;
  548|  1.10k|                                    }
  549|  1.67k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 1.17k, False: 499]
  ------------------
  550|  1.17k|                                    {
  551|  1.17k|                                        return OpCode::SGEU;
  552|  1.17k|                                    }
  553|  2.77k|                                }
  554|  3.02k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 2.42k, False: 605]
  ------------------
  555|  2.42k|                                {
  556|  2.42k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 734, False: 1.68k]
  ------------------
  557|    734|                                    {
  558|    734|                                        return OpCode::SGTI;
  559|    734|                                    }
  560|  1.68k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 1.28k, False: 402]
  ------------------
  561|  1.28k|                                    {
  562|  1.28k|                                        return OpCode::SGTU;
  563|  1.28k|                                    }
  564|  2.42k|                                }
  565|  1.50k|                                break;
  566|       |
  567|  16.3k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 16.3k, False: 32.3k]
  ------------------
  568|  19.4k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 3.18k, False: 45.4k]
  ------------------
  569|  19.4k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 1.45k, False: 18.0k]
  ------------------
  570|  19.4k|                                {
  571|  2.39k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 2.39k, False: 17.0k]
  ------------------
  572|  3.01k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 620, False: 18.8k]
  ------------------
  573|  3.01k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 2.34k, False: 664]
  ------------------
  574|  2.34k|                                        {
  575|  2.34k|                                            return OpCode::SLAI;
  576|  2.34k|                                        }
  577|    664|                                        break;
  578|       |
  579|  2.30k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 2.30k, False: 17.1k]
  ------------------
  580|  2.82k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 526, False: 18.9k]
  ------------------
  581|  2.82k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 695, False: 2.13k]
  ------------------
  582|    695|                                        {
  583|    695|                                            return OpCode::SLEI;
  584|    695|                                        }
  585|  2.13k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 1.62k, False: 508]
  ------------------
  586|  1.62k|                                        {
  587|  1.62k|                                            return OpCode::SLEU;
  588|  1.62k|                                        }
  589|    508|                                        break;
  590|       |
  591|  1.47k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 1.47k, False: 18.0k]
  ------------------
  592|  2.68k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 1.21k, False: 18.2k]
  ------------------
  593|  2.68k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 1.45k, False: 1.23k]
  ------------------
  594|  1.45k|                                        {
  595|  1.45k|                                            return OpCode::SLLI;
  596|  1.45k|                                        }
  597|  1.23k|                                        break;
  598|       |
  599|  2.45k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 2.45k, False: 17.0k]
  ------------------
  600|  9.50k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 7.04k, False: 12.4k]
  ------------------
  601|  9.50k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 3.03k, False: 6.47k]
  ------------------
  602|  3.03k|                                        {
  603|  3.03k|                                            return OpCode::SLTI;
  604|  3.03k|                                        }
  605|  6.47k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 2.42k, False: 4.04k]
  ------------------
  606|  2.42k|                                        {
  607|  2.42k|                                            return OpCode::SLTU;
  608|  2.42k|                                        }
  609|  4.04k|                                        break;
  610|  19.4k|                                }
  611|       |
  612|  10.5k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 2.66k, False: 45.9k]
  ------------------
  613|  11.0k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 431, False: 48.1k]
  ------------------
  614|  11.0k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 3.16k, False: 7.83k]
  ------------------
  615|  3.16k|                                {
  616|  3.16k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 1.22k, False: 1.94k]
  ------------------
  617|  1.22k|                                    {
  618|  1.22k|                                        return OpCode::SNEI;
  619|  1.22k|                                    }
  620|  1.94k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 869, False: 1.07k]
  ------------------
  621|    869|                                    {
  622|    869|                                        return OpCode::SNEU;
  623|    869|                                    }
  624|  3.16k|                                }
  625|  8.91k|                                break;
  626|       |
  627|  8.91k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 2.19k, False: 46.4k]
  ------------------
  628|  4.34k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 2.14k, False: 46.4k]
  ------------------
  629|  4.34k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 2.55k, False: 1.78k]
  |  Branch (629:37): [True: 1.55k, False: 2.78k]
  |  Branch (629:53): [True: 1.55k, False: 995]
  ------------------
  630|  1.55k|                                {
  631|  1.55k|                                    return OpCode::SRAI;
  632|  1.55k|                                }
  633|  2.78k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 1.63k, False: 1.14k]
  |  Branch (633:42): [True: 1.14k, False: 1.64k]
  |  Branch (633:58): [True: 1.14k, False: 493]
  ------------------
  634|  1.14k|                                {
  635|  1.14k|                                    return OpCode::SRLI;
  636|  1.14k|                                }
  637|  1.64k|                                break;
  638|       |
  639|  4.07k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 4.07k, False: 44.5k]
  ------------------
  640|  7.10k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 3.03k, False: 45.5k]
  ------------------
  641|  7.10k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 6.25k, False: 852]
  ------------------
  642|  6.25k|                                {
  643|  6.25k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 612, False: 5.64k]
  ------------------
  644|  6.25k|                                    {
  645|    898|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 898, False: 5.35k]
  ------------------
  646|  1.46k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 563, False: 5.69k]
  ------------------
  647|  1.46k|                                            return OpCode::SUBD;
  648|       |
  649|    450|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 450, False: 5.80k]
  ------------------
  650|  1.42k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 977, False: 5.28k]
  ------------------
  651|  1.42k|                                            return OpCode::SUBF;
  652|       |
  653|  1.24k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 1.24k, False: 5.01k]
  ------------------
  654|  1.61k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 370, False: 5.88k]
  ------------------
  655|  1.61k|                                            return OpCode::SUBI;
  656|       |
  657|    532|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 532, False: 5.72k]
  ------------------
  658|  1.14k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 615, False: 5.64k]
  ------------------
  659|  1.14k|                                            return OpCode::SUBU;
  660|  6.25k|                                    }
  661|  6.25k|                                }
  662|  1.46k|                                break;
  663|  48.6k|                        }
  664|  18.7k|                        break;
  665|       |
  666|  18.7k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 6.42k, False: 147k]
  ------------------
  667|  7.18k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 753, False: 152k]
  ------------------
  668|  7.18k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 5.18k, False: 1.99k]
  |  Branch (668:29): [True: 1.47k, False: 5.70k]
  |  Branch (668:45): [True: 3.18k, False: 2.00k]
  |  Branch (668:61): [True: 1.47k, False: 1.71k]
  ------------------
  669|  1.47k|                        {
  670|  1.47k|                            return OpCode::TRAP;
  671|  1.47k|                        }
  672|  5.70k|                        break;
  673|  5.70k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 291, False: 153k]
  ------------------
  674|  5.11k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 4.82k, False: 148k]
  ------------------
  675|  5.11k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 4.36k, False: 751]
  |  Branch (675:29): [True: 1.31k, False: 3.80k]
  |  Branch (675:45): [True: 3.39k, False: 970]
  |  Branch (675:61): [True: 1.31k, False: 2.07k]
  ------------------
  676|  1.31k|                        {
  677|  1.31k|                            return OpCode::XORI;
  678|  1.31k|                        }
  679|  3.80k|                        break;
  680|   153k|                }
  681|  96.9k|                break;
  682|   153k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  96.9k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 74.9k, False: 642k]
  ------------------
  686|  74.9k|                char c1 = token[0];
  687|  74.9k|                char c2 = token[1];
  688|  74.9k|                char c3 = token[2];
  689|  74.9k|                char c4 = token[3];
  690|  74.9k|                char c5 = token[4];
  691|       |
  692|  74.9k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 23.7k, False: 51.2k]
  ------------------
  693|  74.9k|                {
  694|  1.88k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 1.88k, False: 73.0k]
  ------------------
  695|  7.59k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 5.70k, False: 69.2k]
  ------------------
  696|  7.59k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 4.95k, False: 2.64k]
  |  Branch (696:29): [True: 1.22k, False: 6.37k]
  |  Branch (696:45): [True: 4.34k, False: 604]
  |  Branch (696:61): [True: 1.85k, False: 2.48k]
  |  Branch (696:77): [True: 1.22k, False: 638]
  ------------------
  697|  1.22k|                        {
  698|  1.22k|                            return OpCode::ADDUI;
  699|  1.22k|                        }
  700|  6.37k|                        break;
  701|       |
  702|  6.37k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 3.11k, False: 71.8k]
  ------------------
  703|  5.85k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 2.74k, False: 72.1k]
  ------------------
  704|  5.85k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 4.85k, False: 999]
  |  Branch (704:29): [True: 868, False: 4.98k]
  |  Branch (704:45): [True: 4.63k, False: 223]
  |  Branch (704:61): [True: 1.76k, False: 2.86k]
  |  Branch (704:77): [True: 868, False: 897]
  ------------------
  705|    868|                        {
  706|    868|                            return OpCode::DIVUI;
  707|    868|                        }
  708|  4.98k|                        break;
  709|       |
  710|  4.98k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 3.09k, False: 71.8k]
  ------------------
  711|  12.3k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 9.27k, False: 65.6k]
  ------------------
  712|  12.3k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 9.90k, False: 2.46k]
  |  Branch (712:29): [True: 8.33k, False: 4.02k]
  |  Branch (712:45): [True: 9.38k, False: 524]
  |  Branch (712:61): [True: 8.33k, False: 1.04k]
  ------------------
  713|  8.33k|                        {
  714|  8.33k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 1.22k, False: 7.11k]
  ------------------
  715|  8.33k|                            {
  716|    587|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 587, False: 7.75k]
  ------------------
  717|    909|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 322, False: 8.01k]
  ------------------
  718|    909|                                    return OpCode::MULTD;
  719|       |
  720|    403|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 403, False: 7.93k]
  ------------------
  721|  1.42k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 1.02k, False: 7.31k]
  ------------------
  722|  1.42k|                                    return OpCode::MULTF;
  723|       |
  724|    578|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 578, False: 7.76k]
  ------------------
  725|  1.22k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 643, False: 7.69k]
  ------------------
  726|  1.22k|                                    return OpCode::MULTI;
  727|       |
  728|  2.19k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 2.19k, False: 6.14k]
  ------------------
  729|  3.55k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 1.36k, False: 6.97k]
  ------------------
  730|  3.55k|                                    return OpCode::MULTU;
  731|  8.33k|                            }
  732|  8.33k|                        }
  733|  5.25k|                        break;
  734|       |
  735|  8.69k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 8.69k, False: 66.2k]
  ------------------
  736|  25.3k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 16.7k, False: 58.2k]
  ------------------
  737|  25.3k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 2.08k, False: 23.3k]
  ------------------
  738|  25.3k|                        {
  739|  3.48k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 3.48k, False: 21.9k]
  ------------------
  740|  5.03k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 1.54k, False: 23.8k]
  ------------------
  741|  5.03k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 3.85k, False: 1.18k]
  |  Branch (741:37): [True: 2.49k, False: 2.53k]
  |  Branch (741:53): [True: 3.46k, False: 391]
  |  Branch (741:69): [True: 2.49k, False: 968]
  ------------------
  742|  2.49k|                                {
  743|  2.49k|                                    return OpCode::SEQUI;
  744|  2.49k|                                }
  745|  2.53k|                                break;
  746|       |
  747|  2.75k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 2.75k, False: 22.6k]
  ------------------
  748|  5.13k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 2.38k, False: 23.0k]
  ------------------
  749|  5.13k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 1.91k, False: 3.21k]
  |  Branch (749:37): [True: 1.12k, False: 4.01k]
  |  Branch (749:53): [True: 1.49k, False: 427]
  |  Branch (749:69): [True: 1.12k, False: 368]
  ------------------
  750|  1.12k|                                {
  751|  1.12k|                                    return OpCode::SGEUI;
  752|  1.12k|                                }
  753|  4.01k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 3.09k, False: 914]
  |  Branch (753:42): [True: 1.92k, False: 2.08k]
  |  Branch (753:58): [True: 2.63k, False: 459]
  |  Branch (753:74): [True: 1.92k, False: 711]
  ------------------
  754|  1.92k|                                {
  755|  1.92k|                                    return OpCode::SGTUI;
  756|  1.92k|                                }
  757|  2.08k|                                break;
  758|       |
  759|  5.41k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 5.41k, False: 19.9k]
  ------------------
  760|  7.06k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 1.65k, False: 23.7k]
  ------------------
  761|  7.06k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 2.35k, False: 4.71k]
  |  Branch (761:37): [True: 1.38k, False: 5.68k]
  |  Branch (761:53): [True: 1.77k, False: 580]
  |  Branch (761:69): [True: 1.38k, False: 388]
  ------------------
  762|  1.38k|                                {
  763|  1.38k|                                    return OpCode::SLEUI;
  764|  1.38k|                                }
  765|  5.68k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 3.28k, False: 2.40k]
  |  Branch (765:42): [True: 694, False: 4.99k]
  |  Branch (765:58): [True: 1.90k, False: 1.37k]
  |  Branch (765:74): [True: 694, False: 1.21k]
  ------------------
  766|    694|                                {
  767|    694|                                    return OpCode::SLTUI;
  768|    694|                                }
  769|  4.99k|                                break;
  770|       |
  771|  4.99k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 1.83k, False: 23.5k]
  ------------------
  772|  3.46k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 1.63k, False: 23.7k]
  ------------------
  773|  3.46k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 2.12k, False: 1.33k]
  |  Branch (773:37): [True: 964, False: 2.49k]
  |  Branch (773:53): [True: 1.88k, False: 242]
  |  Branch (773:69): [True: 964, False: 917]
  ------------------
  774|    964|                                {
  775|    964|                                    return OpCode::SNEUI;
  776|    964|                                }
  777|  2.49k|                                break;
  778|       |
  779|  2.49k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 1.32k, False: 24.0k]
  ------------------
  780|  2.61k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 1.29k, False: 24.1k]
  ------------------
  781|  2.61k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 2.21k, False: 400]
  |  Branch (781:37): [True: 935, False: 1.68k]
  |  Branch (781:53): [True: 1.26k, False: 950]
  |  Branch (781:69): [True: 935, False: 332]
  ------------------
  782|    935|                                {
  783|    935|                                    return OpCode::SUBUI;
  784|    935|                                }
  785|  1.68k|                                break;
  786|  25.3k|                        }
  787|       |
  788|  15.8k|                        break;
  789|  74.9k|                }
  790|       |
  791|  56.2k|                break;
  792|  74.9k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  56.2k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 41.1k, False: 675k]
  ------------------
  796|  41.1k|                char c1 = token[0];
  797|  41.1k|                char c2 = token[1];
  798|  41.1k|                char c3 = token[2];
  799|  41.1k|                char c4 = token[3];
  800|  41.1k|                char c5 = token[4];
  801|  41.1k|                char c6 = token[5];
  802|       |
  803|  41.1k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 14.2k, False: 26.8k]
  |  Branch (803:21): [True: 11.9k, False: 29.1k]
  |  Branch (803:37): [True: 13.0k, False: 1.20k]
  |  Branch (803:53): [True: 11.9k, False: 1.07k]
  ------------------
  804|  11.9k|                {
  805|  11.9k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 412, False: 11.5k]
  ------------------
  806|  11.9k|                    {
  807|  1.91k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 1.91k, False: 10.0k]
  ------------------
  808|  3.56k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 1.64k, False: 10.3k]
  ------------------
  809|  3.56k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 2.71k, False: 843]
  ------------------
  810|  2.71k|                            {
  811|  2.71k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 612, False: 2.10k]
  ------------------
  812|    612|                                {
  813|    612|                                    return OpCode::CVTD2F;
  814|    612|                                }
  815|  2.10k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 1.68k, False: 419]
  ------------------
  816|  1.68k|                                {
  817|  1.68k|                                    return OpCode::CVTD2I;
  818|  1.68k|                                }
  819|  2.71k|                            }
  820|  1.26k|                            break;
  821|       |
  822|  2.63k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 2.63k, False: 9.32k]
  ------------------
  823|  2.95k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 324, False: 11.6k]
  ------------------
  824|  2.95k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 2.47k, False: 484]
  ------------------
  825|  2.47k|                            {
  826|  2.47k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 628, False: 1.84k]
  ------------------
  827|    628|                                {
  828|    628|                                    return OpCode::CVTF2D;
  829|    628|                                }
  830|  1.84k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 1.42k, False: 418]
  ------------------
  831|  1.42k|                                {
  832|  1.42k|                                    return OpCode::CVTF2I;
  833|  1.42k|                                }
  834|  2.47k|                            }
  835|    902|                            break;
  836|       |
  837|  3.86k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 3.86k, False: 8.09k]
  ------------------
  838|  5.03k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 1.16k, False: 10.7k]
  ------------------
  839|  5.03k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 3.87k, False: 1.16k]
  ------------------
  840|  3.87k|                            {
  841|  3.87k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 1.87k, False: 1.99k]
  ------------------
  842|  1.87k|                                {
  843|  1.87k|                                    return OpCode::CVTI2D;
  844|  1.87k|                                }
  845|  1.99k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 1.38k, False: 612]
  ------------------
  846|  1.38k|                                {
  847|  1.38k|                                    return OpCode::CVTI2F;
  848|  1.38k|                                }
  849|  3.87k|                            }
  850|  11.9k|                    }
  851|  11.9k|                }
  852|  29.1k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 10.1k, False: 18.9k]
  |  Branch (852:26): [True: 4.25k, False: 24.8k]
  |  Branch (852:42): [True: 8.95k, False: 1.22k]
  |  Branch (852:58): [True: 8.39k, False: 558]
  |  Branch (852:74): [True: 7.28k, False: 1.11k]
  ------------------
  853|  29.1k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 5.50k, False: 1.78k]
  |  Branch (853:42): [True: 4.25k, False: 1.24k]
  ------------------
  854|  4.25k|                {
  855|  4.25k|                    return OpCode::MULTUI;
  856|  4.25k|                }
  857|  29.2k|                break;
  858|  41.1k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  29.2k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 22.7k, False: 694k]
  ------------------
  862|  22.7k|                char c1 = token[0];
  863|  22.7k|                char c2 = token[1];
  864|  22.7k|                char c3 = token[2];
  865|  22.7k|                char c4 = token[3];
  866|  22.7k|                char c5 = token[4];
  867|  22.7k|                char c6 = token[5];
  868|  22.7k|                char c7 = token[6];
  869|       |
  870|  22.7k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 13.3k, False: 9.34k]
  |  Branch (870:21): [True: 7.54k, False: 15.1k]
  |  Branch (870:37): [True: 8.02k, False: 5.36k]
  |  Branch (870:53): [True: 7.54k, False: 478]
  ------------------
  871|  7.54k|                {
  872|  7.54k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 2.99k, False: 4.54k]
  |  Branch (872:25): [True: 1.60k, False: 5.94k]
  |  Branch (872:41): [True: 2.61k, False: 383]
  |  Branch (872:54): [True: 1.96k, False: 648]
  |  Branch (872:70): [True: 1.60k, False: 364]
  ------------------
  873|  1.60k|                    {
  874|  1.60k|                        return OpCode::MOVI2FP;
  875|  1.60k|                    }
  876|  5.94k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 3.06k, False: 2.88k]
  |  Branch (876:30): [True: 1.18k, False: 4.75k]
  |  Branch (876:46): [True: 2.26k, False: 799]
  |  Branch (876:62): [True: 1.79k, False: 463]
  |  Branch (876:75): [True: 1.18k, False: 610]
  ------------------
  877|  1.18k|                    {
  878|  1.18k|                        return OpCode::MOVFP2I;
  879|  1.18k|                    }
  880|  7.54k|                }
  881|  19.9k|                break;
  882|  22.7k|            }
  883|       |
  884|  19.9k|            default: {
  ------------------
  |  Branch (884:13): [True: 18.9k, False: 698k]
  ------------------
  885|  18.9k|                break;
  886|  22.7k|            }
  887|   717k|        }
  888|       |
  889|       |        // None found
  890|   507k|        return OpCode::NONE;
  891|   717k|    }
_ZN3dlx3iceEcc:
   17|   866k|    {
   18|   866k|        constexpr const char diff = 'a' - 'A';
   19|   866k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 239k, False: 626k]
  |  Branch (19:28): [True: 238k, False: 387k]
  ------------------
   20|   866k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   821k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  6.65k|    {
  193|  6.65k|        ParseError err;
  194|       |
  195|  6.65k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  6.65k|        err.m_LineNumber                           = line_number;
  197|  6.65k|        err.m_Column                               = column;
  198|  6.65k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  6.65k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  6.65k|        return err;
  202|  6.65k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  6.65k|    {
  207|  6.65k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  6.65k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  6.65k|                                                         actual_type);
  210|  6.65k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|  1.12k|    {
  216|  1.12k|        ParseError err;
  217|       |
  218|  1.12k|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|  1.12k|        err.m_LineNumber        = line_number;
  220|  1.12k|        err.m_Column            = column;
  221|  1.12k|        err.invalid_number.text = text;
  222|       |
  223|  1.12k|        return err;
  224|  1.12k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|  1.12k|    {
  228|  1.12k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|  1.12k|                                                token.GetColumn().unsafe(), token.GetText());
  230|  1.12k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|     16|    {
  235|     16|        ParseError err;
  236|       |
  237|     16|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|     16|        err.m_LineNumber = line_number;
  239|     16|        err.m_Column     = column;
  240|       |
  241|     16|        return err;
  242|     16|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|     16|    {
  247|     16|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|     16|                                                                     token.GetColumn().unsafe());
  249|     16|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   428k|    {
  255|   428k|        ParseError err;
  256|       |
  257|   428k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   428k|        err.m_LineNumber                   = line_number;
  259|   428k|        err.m_Column                       = column;
  260|   428k|        err.unexpected_token.expected_type = expected_type;
  261|   428k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   428k|        return err;
  264|   428k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   428k|    {
  269|   428k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   428k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   428k|                                                  token.GetType());
  272|   428k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  59.5k|    {
  277|  59.5k|        ParseError err;
  278|       |
  279|  59.5k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  59.5k|        err.m_LineNumber                   = line_number;
  281|  59.5k|        err.m_Column                       = column;
  282|  59.5k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  59.5k|        return err;
  285|  59.5k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|    846|    {
  289|    846|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|    846|                                                    token.GetColumn().unsafe(), token.GetText());
  291|    846|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   179k|    {
  296|   179k|        ParseError err;
  297|       |
  298|   179k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   179k|        err.m_LineNumber                       = line_number;
  300|   179k|        err.m_Column                           = column;
  301|   179k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   179k|        return err;
  304|   179k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   179k|    {
  309|   179k|        return ConstructInvalidLabelIdentifierParseError(
  310|   179k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   179k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  29.9k|    {
  317|  29.9k|        ParseError err;
  318|       |
  319|  29.9k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  29.9k|        err.m_LineNumber                     = line_number;
  321|  29.9k|        err.m_Column                         = column;
  322|  29.9k|        err.label_already_defined.label_name = label_name;
  323|  29.9k|        err.label_already_defined.at_line    = at_line;
  324|  29.9k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  29.9k|        return err;
  327|  29.9k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  29.9k|    {
  332|  29.9k|        return ConstructLabelAlreadyDefinedParseError(
  333|  29.9k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  29.9k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  29.9k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|  90.8k|    {
  340|  90.8k|        ParseError err;
  341|       |
  342|  90.8k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|  90.8k|        err.m_LineNumber = line_number;
  344|  90.8k|        err.m_Column     = column;
  345|       |
  346|  90.8k|        return err;
  347|  90.8k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|  90.8k|    {
  352|  90.8k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|  90.8k|                                                        token.GetColumn().unsafe());
  354|  90.8k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  15.6k|    {
  360|  15.6k|        ParseError err;
  361|       |
  362|  15.6k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  15.6k|        err.m_LineNumber               = line_number;
  364|  15.6k|        err.m_Column                   = column;
  365|  15.6k|        err.too_few_arguments.required = required;
  366|  15.6k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  15.6k|        return err;
  369|  15.6k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  15.6k|    {
  374|  15.6k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  15.6k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  15.6k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  7.47k|    {
  381|  7.47k|        ParseError err;
  382|       |
  383|  7.47k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  7.47k|        err.m_LineNumber           = line_number;
  385|  7.47k|        err.m_Column               = column;
  386|  7.47k|        err.empty_label.label_name = label_name;
  387|       |
  388|  7.47k|        return err;
  389|  7.47k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  7.47k|    {
  393|  7.47k|        return ConstructEmptyLabelParseError(
  394|  7.47k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  7.47k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 6.13k, False: 1.34k]
  ------------------
  396|  6.13k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  7.47k|                        token.GetText());
  398|  7.47k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  2.61k|    {
  403|  2.61k|        ParseError err;
  404|       |
  405|  2.61k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  2.61k|        err.m_LineNumber = line_number;
  407|  2.61k|        err.m_Column     = column;
  408|       |
  409|  2.61k|        return err;
  410|  2.61k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  2.61k|    {
  414|  2.61k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  2.61k|                                               token.GetColumn().unsafe());
  416|  2.61k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   821k|    {
   19|   821k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   821k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  7.09k|    {
  182|  7.09k|        ParsedProgram program;
  183|       |
  184|  7.09k|        program.m_Tokens = tokens;
  185|       |
  186|  7.09k|        phi::boolean line_has_instruction{false};
  187|  7.09k|        phi::usize   label_count{0u};
  188|       |
  189|   947k|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 940k, False: 7.09k]
  ------------------
  190|   940k|        {
  191|   940k|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|   940k|            switch (current_token.GetType())
  196|   940k|            {
  197|       |                // Ignore comments
  198|  2.84k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 2.84k, False: 937k]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  2.84k|                    break;
  201|       |
  202|   104k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 104k, False: 835k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   104k|                    line_has_instruction = false;
  205|   104k|                    break;
  206|       |
  207|   367k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 367k, False: 572k]
  ------------------
  208|   367k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 99.6k, False: 267k]
  ------------------
  209|  99.6k|                    {
  210|  99.6k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  99.6k|                                current_token, Token::Type::NewLine));
  212|  99.6k|                        break;
  213|  99.6k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   267k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 109k, False: 158k]
  ------------------
  218|   109k|                    {
  219|   109k|                        program.AddParseError(
  220|   109k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   109k|                        break;
  222|   109k|                    }
  223|       |
  224|   158k|                    std::string_view label_name = current_token.GetText();
  225|   158k|                    label_name.remove_suffix(1);
  226|       |
  227|   158k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 58.6k, False: 99.5k]
  ------------------
  228|  58.6k|                    {
  229|  58.6k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  58.6k|                                current_token.GetLineNumber().unsafe(),
  231|  58.6k|                                current_token.GetColumn().unsafe(), label_name));
  232|  58.6k|                        break;
  233|  58.6k|                    }
  234|       |
  235|  99.5k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 61.0k, False: 38.5k]
  ------------------
  236|  61.0k|                    {
  237|  61.0k|                        program.AddParseError(
  238|  61.0k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  61.0k|                        break;
  240|  61.0k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  38.5k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 29.9k, False: 8.54k]
  ------------------
  244|  29.9k|                    {
  245|       |                        // Find first defintions of label
  246|  29.9k|                        const Token* first_label_definition =
  247|  29.9k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  29.9k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  29.9k|                                    {
  250|  29.9k|                                        std::string_view token_label_name = t.GetText();
  251|  29.9k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  29.9k|                                        if (token_label_name == label_name)
  254|  29.9k|                                        {
  255|  29.9k|                                            return true;
  256|  29.9k|                                        }
  257|  29.9k|                                    }
  258|       |
  259|  29.9k|                                    return false;
  260|  29.9k|                                });
  261|       |
  262|  29.9k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  29.9k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  29.9k|                                current_token, *first_label_definition));
  266|  29.9k|                        break;
  267|  29.9k|                    }
  268|       |
  269|  8.54k|                    program.m_JumpData[label_name] =
  270|  8.54k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  8.54k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  8.54k|                    break;
  277|  38.5k|                }
  278|       |
  279|   152k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 152k, False: 787k]
  ------------------
  280|   152k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 90.8k, False: 61.4k]
  ------------------
  281|  90.8k|                    {
  282|  90.8k|                        program.AddParseError(
  283|  90.8k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|  90.8k|                        break;
  285|  90.8k|                    }
  286|       |
  287|  61.4k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  61.4k|                    PHI_ASSERT(current_token.HasHint());
  291|  61.4k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  61.4k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  61.4k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  61.4k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  61.4k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  61.4k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  61.4k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  61.4k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  61.4k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   120k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 108k, False: 12.5k]
  ------------------
  313|   108k|                    {
  314|       |                        // Get next token
  315|   108k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 664, False: 107k]
  ------------------
  316|    664|                        {
  317|    664|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    664|                                    current_token, number_of_argument_required.unsafe(),
  319|    664|                                    argument_num.unsafe()));
  320|    664|                            break;
  321|    664|                        }
  322|       |
  323|   107k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   107k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 42.4k, False: 64.9k]
  ------------------
  327|  42.4k|                        {
  328|  42.4k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 2.61k, False: 39.8k]
  ------------------
  329|  2.61k|                            {
  330|  2.61k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  2.61k|                            }
  332|       |
  333|  42.4k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  42.4k|                            continue;
  336|  42.4k|                        }
  337|       |
  338|  64.9k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 14.9k, False: 50.0k]
  ------------------
  339|  14.9k|                        {
  340|  14.9k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  14.9k|                                    token, number_of_argument_required.unsafe(),
  342|  14.9k|                                    argument_num.unsafe()));
  343|  14.9k|                            break;
  344|  14.9k|                        }
  345|       |
  346|  50.0k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  50.0k|                                parse_instruction_argument(
  348|  50.0k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  50.0k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 33.2k, False: 16.7k]
  ------------------
  350|  33.2k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  33.2k|                            break;
  353|  33.2k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  16.7k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  16.7k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  16.7k|                        argument_num++;
  360|  16.7k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  16.7k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  61.4k|                    program.m_Instructions.emplace_back(instruction);
  368|  61.4k|                    line_has_instruction = true;
  369|  61.4k|                    break;
  370|   152k|                }
  371|       |
  372|   312k|                default:
  ------------------
  |  Branch (372:17): [True: 312k, False: 627k]
  ------------------
  373|   312k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   312k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 175k, False: 137k]
  ------------------
  375|   175k|                    {
  376|   175k|                        expected_token_type = Token::Type::NewLine;
  377|   175k|                    }
  378|       |
  379|   312k|                    program.AddParseError(
  380|   312k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   312k|                    break;
  382|   940k|            }
  383|   940k|        }
  384|       |
  385|       |        // Check for empty labels
  386|  7.09k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 1.18k, False: 5.91k]
  ------------------
  387|  1.18k|        {
  388|  10.7k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 9.57k, False: 1.18k]
  ------------------
  389|  9.57k|            {
  390|  9.57k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  9.57k|                const Token& token = *it;
  393|  9.57k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 7.47k, False: 2.09k]
  ------------------
  394|  7.47k|                {
  395|  7.47k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  7.47k|                    --label_count;
  397|  7.47k|                }
  398|  9.57k|            }
  399|  1.18k|        }
  400|       |
  401|  7.09k|        return program;
  402|  7.09k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  7.09k|    {
  406|  7.09k|        TokenStream tokens = Tokenize(source);
  407|  7.09k|        return Parse(tokens);
  408|  7.09k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  50.0k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  50.0k|        switch (token.GetType())
   38|  50.0k|        {
   39|  8.60k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 8.60k, False: 41.4k]
  ------------------
   40|  8.60k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 292, False: 8.31k]
  ------------------
   41|  8.60k|                                          ArgumentType::AddressDisplacement))
   42|    292|                {
   43|    292|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|    292|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|    292|                    return {};
   47|    292|                }
   48|       |
   49|       |                // Get address displacement
   50|  8.31k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  8.31k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  8.31k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 16, False: 8.29k]
  ------------------
   55|     16|                {
   56|     16|                    program.AddParseError(
   57|     16|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|     16|                    return {};
   59|     16|                }
   60|       |
   61|  8.29k|                auto         it           = tokens.current_position();
   62|  8.29k|                const Token& first_token  = tokens.consume();
   63|  8.29k|                const Token& second_token = tokens.consume();
   64|  8.29k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  8.29k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 782, False: 7.51k]
  ------------------
   67|    782|                {
   68|    782|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|    782|                            first_token, Token::Type::OpenBracket));
   70|    782|                    return {};
   71|    782|                }
   72|       |
   73|       |                // Second token is the register
   74|  7.51k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 5.97k, False: 1.54k]
  ------------------
   75|  5.97k|                {
   76|  5.97k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|  5.97k|                            second_token, Token::Type::RegisterInt));
   78|  5.97k|                    return {};
   79|  5.97k|                }
   80|       |
   81|  1.54k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 628, False: 916]
  ------------------
   82|    628|                {
   83|    628|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|    628|                            third_token, Token::Type::ClosingBracket));
   85|    628|                    return {};
   86|    628|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|    916|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|    916|                return ConstructInstructionArgumentAddressDisplacement(
   95|    916|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|  1.54k|            }
   97|  5.48k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 5.48k, False: 44.5k]
  ------------------
   98|  5.48k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 629, False: 4.85k]
  ------------------
   99|    629|                {
  100|    629|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|    629|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|    629|                    return {};
  103|    629|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  4.85k|                return ConstructInstructionArgumentRegisterInt(
  109|  4.85k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  5.48k|            }
  111|  4.37k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 4.37k, False: 45.6k]
  ------------------
  112|  4.37k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 464, False: 3.91k]
  ------------------
  113|    464|                {
  114|    464|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|    464|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|    464|                    return {};
  117|    464|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  3.91k|                return ConstructInstructionArgumentRegisterFloat(
  123|  3.91k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  4.37k|            }
  125|    846|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 846, False: 49.1k]
  ------------------
  126|    846|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|    846|                return {};
  129|  4.37k|            }
  130|  19.8k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 19.8k, False: 30.1k]
  ------------------
  131|       |                // Parse as Label
  132|  19.8k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 4.94k, False: 14.9k]
  ------------------
  133|  4.94k|                {
  134|  4.94k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  4.94k|                            token, expected_argument_type, ArgumentType::Label));
  136|  4.94k|                    return {};
  137|  4.94k|                }
  138|       |
  139|  14.9k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 14.9k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  14.9k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 8.75k, False: 6.14k]
  ------------------
  146|  8.75k|                {
  147|  8.75k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  8.75k|                    return {};
  149|  8.75k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  6.14k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  14.9k|            }
  155|  2.40k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 2.40k, False: 47.6k]
  ------------------
  156|  2.40k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 328, False: 2.07k]
  ------------------
  157|    328|                {
  158|    328|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|    328|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|    328|                    return {};
  161|    328|                }
  162|       |
  163|  2.07k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 952, False: 1.12k]
  ------------------
  164|    952|                {
  165|    952|                    return ConstructInstructionArgumentImmediateValue(
  166|    952|                            static_cast<std::int16_t>(token.GetHint()));
  167|    952|                }
  168|       |
  169|  1.12k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|  1.12k|                return {};
  171|  2.07k|            }
  172|       |
  173|  8.47k|            default:
  ------------------
  |  Branch (173:13): [True: 8.47k, False: 41.5k]
  ------------------
  174|  8.47k|                program.AddParseError(
  175|  8.47k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  8.47k|                return {};
  177|  50.0k|        }
  178|  50.0k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|   492k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   492k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 344k, False: 147k]
  ------------------
  249|   344k|                                    {
  250|   344k|                                        std::string_view token_label_name = t.GetText();
  251|   344k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   344k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 29.9k, False: 314k]
  ------------------
  254|  29.9k|                                        {
  255|  29.9k|                                            return true;
  256|  29.9k|                                        }
  257|   344k|                                    }
  258|       |
  259|   462k|                                    return false;
  260|   492k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   70|   662k|    {
   71|   662k|        PHI_ASSERT(id != IntRegisterID::None);
   72|   662k|        phi::size_t id_value = phi::to_underlying(id);
   73|       |
   74|   662k|        PHI_ASSERT(id_value < m_IntRegisters.size());
   75|       |
   76|   662k|        return m_IntRegisters[id_value];
   77|   662k|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   81|  2.26M|    {
   82|  2.26M|        PHI_ASSERT(id != IntRegisterID::None);
   83|  2.26M|        phi::size_t id_value = phi::to_underlying(id);
   84|       |
   85|  2.26M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   86|       |
   87|  2.26M|        return m_IntRegisters[id_value];
   88|  2.26M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   91|   954k|    {
   92|   954k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   93|   954k|                                             RegisterAccessType::Signed),
   94|   954k|                   "Mismatch for instruction access type");
   95|       |
   96|   954k|        const phi::size_t id_value = phi::to_underlying(id);
   97|       |
   98|   954k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   99|   954k|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  100|   954k|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (100:13): [True: 200k, False: 754k]
  ------------------
  101|   954k|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (101:13): [True: 11.6k, False: 188k]
  ------------------
  102|  11.6k|        {
  103|  11.6k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  11.6k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  104|  11.6k|        }
  105|       |
  106|   954k|        return GetIntRegister(id).GetSignedValue();
  107|   954k|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  110|  1.31M|    {
  111|  1.31M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  112|  1.31M|                                             RegisterAccessType::Unsigned),
  113|  1.31M|                   "Mismatch for instruction access type");
  114|       |
  115|  1.31M|        const phi::size_t id_value = phi::to_underlying(id);
  116|       |
  117|  1.31M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  118|  1.31M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  119|  1.31M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (119:13): [True: 934k, False: 379k]
  ------------------
  120|  1.31M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (120:13): [True: 865k, False: 69.5k]
  ------------------
  121|   865k|        {
  122|   865k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   865k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  123|   865k|        }
  124|       |
  125|  1.31M|        return GetIntRegister(id).GetUnsignedValue();
  126|  1.31M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  129|   398k|    {
  130|   398k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  131|   398k|                                             RegisterAccessType::Signed),
  132|   398k|                   "Mismatch for instruction access type");
  133|       |
  134|   398k|        IntRegister& reg = GetIntRegister(id);
  135|       |
  136|   398k|        if (reg.IsReadOnly())
  ------------------
  |  Branch (136:13): [True: 248k, False: 149k]
  ------------------
  137|   248k|        {
  138|   248k|            return;
  139|   248k|        }
  140|       |
  141|   149k|        reg.SetSignedValue(value);
  142|       |
  143|   149k|        const phi::size_t id_value = phi::to_underlying(id);
  144|       |
  145|   149k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  146|   149k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  147|   149k|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  150|   264k|    {
  151|   264k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  152|   264k|                                             RegisterAccessType::Unsigned),
  153|   264k|                   "Mismatch for instruction access type");
  154|       |
  155|   264k|        IntRegister& reg = GetIntRegister(id);
  156|       |
  157|   264k|        if (reg.IsReadOnly())
  ------------------
  |  Branch (157:13): [True: 158k, False: 105k]
  ------------------
  158|   158k|        {
  159|   158k|            return;
  160|   158k|        }
  161|       |
  162|   105k|        reg.SetUnsignedValue(value);
  163|       |
  164|   105k|        const phi::size_t id_value = phi::to_underlying(id);
  165|       |
  166|   105k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  167|   105k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  168|   105k|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  171|  1.56M|    {
  172|  1.56M|        PHI_ASSERT(id != FloatRegisterID::None);
  173|  1.56M|        const phi::size_t id_value = phi::to_underlying(id);
  174|       |
  175|  1.56M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  176|       |
  177|  1.56M|        return m_FloatRegisters[id_value];
  178|  1.56M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  182|   673k|    {
  183|   673k|        PHI_ASSERT(id != FloatRegisterID::None);
  184|   673k|        const phi::size_t id_value = phi::to_underlying(id);
  185|       |
  186|   673k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  187|       |
  188|   673k|        return m_FloatRegisters[id_value];
  189|   673k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  192|   673k|    {
  193|   673k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  194|   673k|                                             RegisterAccessType::Float),
  195|   673k|                   "Mismatch for instruction access type");
  196|       |
  197|   673k|        const phi::size_t id_value = phi::to_underlying(id);
  198|       |
  199|   673k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  200|   673k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  201|   673k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (201:13): [True: 571k, False: 101k]
  ------------------
  202|   673k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (202:13): [True: 307k, False: 264k]
  ------------------
  203|   307k|        {
  204|       |            /*
  205|       |            DLX_WARN("Mismatch for register value type");
  206|       |            */
  207|   307k|        }
  208|       |
  209|   673k|        const FloatRegister& reg = GetFloatRegister(id);
  210|       |
  211|   673k|        return reg.GetValue();
  212|   673k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  215|   542k|    {
  216|   542k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  217|   542k|                                             RegisterAccessType::Double),
  218|   542k|                   "Mismatch for instruction access type");
  219|       |
  220|   542k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (220:13): [True: 24, False: 542k]
  ------------------
  221|     24|        {
  222|     24|            Raise(Exception::MisalignedRegisterAccess);
  223|     24|            return {0.0};
  224|     24|        }
  225|       |
  226|   542k|        const phi::size_t id_value = phi::to_underlying(id);
  227|       |
  228|   542k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  229|   542k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  230|   542k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (230:13): [True: 396k, False: 145k]
  ------------------
  231|   542k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (231:13): [True: 137k, False: 258k]
  ------------------
  232|   137k|        {
  233|   137k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   137k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  234|   137k|        }
  235|       |
  236|   542k|        const FloatRegisterValueType register_value_type_high =
  237|   542k|                m_FloatRegistersValueTypes[id_value + 1u];
  238|   542k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (238:13): [True: 396k, False: 145k]
  ------------------
  239|   542k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (239:13): [True: 60.7k, False: 335k]
  ------------------
  240|  60.7k|        {
  241|  60.7k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  60.7k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  242|  60.7k|        }
  243|       |
  244|   542k|        const FloatRegister& first_reg = GetFloatRegister(id);
  245|   542k|        const FloatRegister& second_reg =
  246|   542k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  247|       |
  248|   542k|        const float first_value  = first_reg.GetValue().unsafe();
  249|   542k|        const float second_value = second_reg.GetValue().unsafe();
  250|       |
  251|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  252|   542k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  253|       |
  254|   542k|        const std::uint32_t first_value_bits =
  255|   542k|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  256|   542k|        const std::uint32_t second_value_bits =
  257|   542k|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  258|       |
  259|   542k|        std::uint64_t final_value_bits =
  260|   542k|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  261|       |
  262|   542k|        return *reinterpret_cast<double*>(&final_value_bits);
  263|       |
  264|   542k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  265|   542k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  268|   158k|    {
  269|   158k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  270|   158k|                                             RegisterAccessType::Float),
  271|   158k|                   "Mismatch for instruction access type");
  272|       |
  273|   158k|        FloatRegister& reg = GetFloatRegister(id);
  274|       |
  275|   158k|        reg.SetValue(value);
  276|       |
  277|   158k|        const phi::size_t id_value = phi::to_underlying(id);
  278|       |
  279|   158k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  280|   158k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  281|   158k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  284|   159k|    {
  285|   159k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  286|   159k|                                             RegisterAccessType::Double),
  287|   159k|                   "Mismatch for instruction access type");
  288|       |
  289|   159k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (289:13): [True: 16, False: 159k]
  ------------------
  290|     16|        {
  291|     16|            Raise(Exception::MisalignedRegisterAccess);
  292|     16|            return;
  293|     16|        }
  294|       |
  295|   159k|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  296|   159k|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  297|       |
  298|   159k|        double              value_raw  = value.unsafe();
  299|   159k|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  300|       |
  301|   159k|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  302|   159k|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  303|       |
  304|   159k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  305|   159k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  306|       |
  307|   159k|        FloatRegister& first_reg = GetFloatRegister(id);
  308|   159k|        FloatRegister& second_reg =
  309|   159k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  310|       |
  311|   159k|        first_reg.SetValue(first_value);
  312|   159k|        second_reg.SetValue(second_value);
  313|       |
  314|   159k|        const phi::size_t id_value = phi::to_underlying(id);
  315|       |
  316|   159k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  317|   159k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  318|   159k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  319|   159k|    }
_ZN3dlx9Processor7GetFPSREv:
  322|   400k|    {
  323|   400k|        return m_FPSR;
  324|   400k|    }
_ZNK3dlx9Processor7GetFPSREv:
  327|   119k|    {
  328|   119k|        return m_FPSR;
  329|   119k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  332|   119k|    {
  333|   119k|        const StatusRegister& status_reg = GetFPSR();
  334|       |
  335|   119k|        return status_reg.Get();
  336|   119k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  339|   400k|    {
  340|   400k|        StatusRegister& status_reg = GetFPSR();
  341|       |
  342|   400k|        status_reg.SetStatus(value);
  343|   400k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  346|  4.02M|    {
  347|  4.02M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  348|       |
  349|  4.02M|        inst.Execute(*this);
  350|  4.02M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|  7.09k|    {
  354|  7.09k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 6.17k, False: 916]
  ------------------
  355|  6.17k|        {
  356|  6.17k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  6.17k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|  6.17k|            return false;
  358|  6.17k|        }
  359|       |
  360|    916|        m_CurrentProgram = &program;
  361|       |
  362|    916|        m_ProgramCounter               = 0u;
  363|    916|        m_Halted                       = false;
  364|    916|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    916|        m_LastRaisedException          = Exception::None;
  366|    916|        m_CurrentStepCount             = 0u;
  367|       |
  368|    916|        return true;
  369|  7.09k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  373|  1.22M|    {
  374|  1.22M|        return m_CurrentProgram;
  375|  1.22M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  378|  4.02M|    {
  379|       |        // No nothing when no program is loaded
  380|  4.02M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (380:13): [True: 0, False: 4.02M]
  ------------------
  381|      0|        {
  382|      0|            return;
  383|      0|        }
  384|       |
  385|       |        // Halt if there are no instruction to execute
  386|  4.02M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (386:13): [True: 66, False: 4.02M]
  ------------------
  387|     66|        {
  388|     66|            m_Halted                       = true;
  389|     66|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  390|     66|        }
  391|       |
  392|       |        // Do nothing when processor is halted
  393|  4.02M|        if (m_Halted)
  ------------------
  |  Branch (393:13): [True: 66, False: 4.02M]
  ------------------
  394|     66|        {
  395|     66|            return;
  396|     66|        }
  397|       |
  398|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  399|  4.02M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  400|       |
  401|       |        // Get current instruction pointed to by the program counter
  402|  4.02M|        const auto& current_instruction =
  403|  4.02M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  404|       |
  405|       |        // Execute current instruction
  406|  4.02M|        ExecuteInstruction(current_instruction);
  407|       |
  408|       |        // Stop executing if the last instruction halted the processor
  409|  4.02M|        if (m_Halted)
  ------------------
  |  Branch (409:13): [True: 246, False: 4.02M]
  ------------------
  410|    246|        {
  411|    246|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  412|    246|            return;
  413|    246|        }
  414|       |
  415|  4.02M|        m_ProgramCounter = m_NextProgramCounter;
  416|       |
  417|  4.02M|        ++m_CurrentStepCount;
  418|       |
  419|  4.02M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (419:13): [True: 604, False: 4.02M]
  |  Branch (419:14): [True: 4.02M, False: 0]
  |  Branch (419:42): [True: 402, False: 4.02M]
  ------------------
  420|  4.02M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (420:13): [True: 202, False: 4.02M]
  ------------------
  421|    604|        {
  422|    604|            m_Halted                       = true;
  423|    604|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  424|    604|        }
  425|  4.02M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  428|    916|    {
  429|       |        // Do nothing when no program is loaded
  430|    916|        if (!m_CurrentProgram)
  ------------------
  |  Branch (430:13): [True: 0, False: 916]
  ------------------
  431|      0|        {
  432|      0|            return;
  433|      0|        }
  434|       |
  435|    916|        m_ProgramCounter               = 0u;
  436|    916|        m_Halted                       = false;
  437|    916|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  438|    916|        m_LastRaisedException          = Exception::None;
  439|    916|        m_CurrentStepCount             = 0u;
  440|       |
  441|  4.02M|        while (!m_Halted)
  ------------------
  |  Branch (441:16): [True: 4.02M, False: 916]
  ------------------
  442|  4.02M|        {
  443|  4.02M|            ExecuteStep();
  444|  4.02M|        }
  445|       |
  446|    916|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  447|    916|                   "RegisterAccessType was not reset correctly");
  448|    916|    }
_ZN3dlx9Processor14ClearRegistersEv:
  464|  7.09k|    {
  465|  7.09k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (465:24): [True: 227k, False: 7.09k]
  ------------------
  466|   227k|        {
  467|   227k|            reg.SetSignedValue(0);
  468|   227k|        }
  469|       |
  470|  7.09k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (470:24): [True: 227k, False: 7.09k]
  ------------------
  471|   227k|        {
  472|   227k|            reg.SetValue(0.0f);
  473|   227k|        }
  474|       |
  475|  7.09k|        m_FPSR.SetStatus(false);
  476|  7.09k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  479|  7.09k|    {
  480|  7.09k|        m_MemoryBlock.Clear();
  481|  7.09k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  488|  6.08k|    {
  489|  6.08k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  490|       |
  491|  6.08k|        m_LastRaisedException = exception;
  492|       |
  493|  6.08k|        switch (exception)
  494|  6.08k|        {
  495|      4|            case Exception::DivideByZero:
  ------------------
  |  Branch (495:13): [True: 4, False: 6.08k]
  ------------------
  496|      4|                m_Halted = true;
  497|      4|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  498|      4|                return;
  499|      0|            case Exception::Overflow:
  ------------------
  |  Branch (499:13): [True: 0, False: 6.08k]
  ------------------
  500|      0|                DLX_WARN("Overflow");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  501|      0|                return;
  502|  5.83k|            case Exception::Underflow:
  ------------------
  |  Branch (502:13): [True: 5.83k, False: 253]
  ------------------
  503|  5.83k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|  5.83k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  504|  5.83k|                return;
  505|      0|            case Exception::Trap:
  ------------------
  |  Branch (505:13): [True: 0, False: 6.08k]
  ------------------
  506|      0|                m_Halted = true;
  507|      0|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  508|      0|                return;
  509|      2|            case Exception::Halt:
  ------------------
  |  Branch (509:13): [True: 2, False: 6.08k]
  ------------------
  510|      2|                m_Halted = true;
  511|      2|                return;
  512|    110|            case Exception::UnknownLabel:
  ------------------
  |  Branch (512:13): [True: 110, False: 5.97k]
  ------------------
  513|    110|                m_Halted = true;
  514|    110|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|    110|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  515|    110|                return;
  516|      0|            case Exception::BadShift:
  ------------------
  |  Branch (516:13): [True: 0, False: 6.08k]
  ------------------
  517|      0|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  518|      0|                return;
  519|     97|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (519:13): [True: 97, False: 5.99k]
  ------------------
  520|     97|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|     97|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  521|     97|                m_Halted = true;
  522|     97|                return;
  523|     40|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (523:13): [True: 40, False: 6.04k]
  ------------------
  524|     40|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     40|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  525|     40|                m_Halted = true;
  526|     40|                return;
  527|       |
  528|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  529|      0|            default:
  ------------------
  |  Branch (529:13): [True: 0, False: 6.08k]
  ------------------
  530|      0|                PHI_ASSERT_NOT_REACHED();
  531|  6.08k|#endif
  532|  6.08k|        }
  533|       |
  534|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  535|      0|        PHI_ASSERT_NOT_REACHED();
  536|      0|#endif
  537|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  558|   229k|    {
  559|   229k|        return m_MemoryBlock;
  560|   229k|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  573|  88.4k|    {
  574|  88.4k|        return m_NextProgramCounter;
  575|  88.4k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  578|  1.22M|    {
  579|  1.22M|        m_NextProgramCounter = new_npc;
  580|  1.22M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   36|  4.46M|    {
   37|  4.46M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   38|  4.46M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   39|       |
   40|  4.46M|        switch (expected_access)
   41|  4.46M|        {
   42|   599k|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (42:13): [True: 599k, False: 3.86M]
  ------------------
   43|   599k|                return true;
   44|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (44:13): [True: 0, False: 4.46M]
  ------------------
   45|      0|                return false;
   46|   161k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (46:13): [True: 161k, False: 4.30M]
  ------------------
   47|   161k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (47:24): [True: 80.7k, False: 80.7k]
  |  Branch (47:63): [True: 80.7k, False: 0]
  ------------------
   48|  62.9k|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (48:13): [True: 62.9k, False: 4.40M]
  ------------------
   49|  62.9k|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (49:24): [True: 0, False: 62.9k]
  ------------------
   50|  62.9k|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (50:24): [True: 62.9k, False: 0]
  ------------------
   51|  39.4k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (51:13): [True: 39.4k, False: 4.42M]
  ------------------
   52|  39.4k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (52:24): [True: 39.4k, False: 1]
  |  Branch (52:63): [True: 1, False: 0]
  ------------------
   53|  56.1k|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (53:13): [True: 56.1k, False: 4.40M]
  ------------------
   54|  56.1k|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (54:24): [True: 56.1k, False: 3]
  |  Branch (54:64): [True: 3, False: 0]
  ------------------
   55|  3.54M|            default:
  ------------------
  |  Branch (55:13): [True: 3.54M, False: 919k]
  ------------------
   56|  3.54M|                return expected_access == access;
   57|  4.46M|        }
   58|  4.46M|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   737k|    {
   14|   737k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 140k, False: 597k]
  ------------------
   15|   140k|        {
   16|   140k|            char first_char = token[0];
   17|   140k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 3.85k, False: 136k]
  |  Branch (17:38): [True: 10.4k, False: 125k]
  ------------------
   18|  14.3k|            {
   19|  14.3k|                char second_char = token[1];
   20|  14.3k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 13.0k, False: 1.27k]
  |  Branch (20:43): [True: 7.94k, False: 5.11k]
  ------------------
   21|  7.94k|                {
   22|  7.94k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  7.94k|                }
   24|  14.3k|            }
   25|   140k|        }
   26|   597k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 173k, False: 423k]
  ------------------
   27|   173k|        {
   28|   173k|            char first_char = token[0];
   29|   173k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 2.19k, False: 171k]
  |  Branch (29:38): [True: 8.34k, False: 163k]
  ------------------
   30|  10.5k|            {
   31|  10.5k|                char second_char = token[1];
   32|  10.5k|                char third_char  = token[2];
   33|       |
   34|  10.5k|                switch (second_char)
   35|  10.5k|                {
   36|  2.84k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 2.84k, False: 7.69k]
  ------------------
   37|  2.84k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 2.48k, False: 357]
  |  Branch (37:50): [True: 1.39k, False: 1.09k]
  ------------------
   38|  1.39k|                        {
   39|  1.39k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  1.39k|                        }
   41|  1.44k|                        break;
   42|  2.84k|                    }
   43|  2.06k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 2.06k, False: 8.47k]
  ------------------
   44|  2.06k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 1.52k, False: 542]
  |  Branch (44:50): [True: 631, False: 894]
  ------------------
   45|    631|                        {
   46|    631|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|    631|                        }
   48|  1.43k|                        break;
   49|  2.06k|                    }
   50|  2.33k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 2.33k, False: 8.20k]
  ------------------
   51|  2.33k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 1.35k, False: 978]
  |  Branch (51:50): [True: 748, False: 230]
  ------------------
   52|  2.10k|                        {
   53|  2.10k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  2.10k|                        }
   55|    230|                        break;
   56|  2.33k|                    }
   57|  3.29k|                    default: {
  ------------------
  |  Branch (57:21): [True: 3.29k, False: 7.24k]
  ------------------
   58|  3.29k|                        break;
   59|  2.33k|                    }
   60|  10.5k|                }
   61|  10.5k|            }
   62|   173k|        }
   63|       |
   64|   725k|        return IntRegisterID::None;
   65|   737k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   725k|    {
   69|   725k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 132k, False: 593k]
  ------------------
   70|   132k|        {
   71|   132k|            char first_char = token[0];
   72|   132k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 6.73k, False: 125k]
  |  Branch (72:38): [True: 6.35k, False: 118k]
  ------------------
   73|  13.0k|            {
   74|  13.0k|                char second_char = token[1];
   75|  13.0k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 10.6k, False: 2.45k]
  |  Branch (75:43): [True: 6.52k, False: 4.11k]
  ------------------
   76|  6.52k|                {
   77|  6.52k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  6.52k|                }
   79|  13.0k|            }
   80|   132k|        }
   81|   593k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 169k, False: 423k]
  ------------------
   82|   169k|        {
   83|   169k|            char first_char = token[0];
   84|   169k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 6.02k, False: 163k]
  |  Branch (84:38): [True: 3.78k, False: 159k]
  ------------------
   85|  9.80k|            {
   86|  9.80k|                char second_char = token[1];
   87|  9.80k|                char third_char  = token[2];
   88|       |
   89|  9.80k|                switch (second_char)
   90|  9.80k|                {
   91|  2.55k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 2.55k, False: 7.24k]
  ------------------
   92|  2.55k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 1.66k, False: 893]
  |  Branch (92:50): [True: 618, False: 1.04k]
  ------------------
   93|    618|                        {
   94|    618|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|    618|                        }
   96|  1.94k|                        break;
   97|  2.55k|                    }
   98|  1.94k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 1.47k, False: 8.32k]
  ------------------
   99|  1.47k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 1.26k, False: 211]
  |  Branch (99:50): [True: 530, False: 735]
  ------------------
  100|    530|                        {
  101|    530|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|    530|                        }
  103|    946|                        break;
  104|  1.47k|                    }
  105|  1.14k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 1.14k, False: 8.65k]
  ------------------
  106|  1.14k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 226, False: 919]
  |  Branch (106:50): [True: 258, False: 661]
  ------------------
  107|    484|                        {
  108|    484|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|    484|                        }
  110|    661|                        break;
  111|  1.14k|                    }
  112|  4.62k|                    default: {
  ------------------
  |  Branch (112:21): [True: 4.62k, False: 5.17k]
  ------------------
  113|  4.62k|                        break;
  114|  1.14k|                    }
  115|  9.80k|                }
  116|  9.80k|            }
  117|   169k|        }
  118|       |
  119|   717k|        return FloatRegisterID::None;
  120|   725k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   681k|    {
  124|   681k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 139k, False: 541k]
  ------------------
  125|   139k|        {
  126|   139k|            char c1 = token[0];
  127|   139k|            char c2 = token[1];
  128|   139k|            char c3 = token[2];
  129|   139k|            char c4 = token[3];
  130|       |
  131|   139k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 2.99k, False: 136k]
  |  Branch (131:34): [True: 3.53k, False: 133k]
  |  Branch (131:49): [True: 1.15k, False: 5.37k]
  |  Branch (131:62): [True: 2.84k, False: 2.52k]
  ------------------
  132|   139k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 2.58k, False: 1.42k]
  |  Branch (132:34): [True: 235, False: 1.18k]
  |  Branch (132:49): [True: 1.13k, False: 1.68k]
  |  Branch (132:62): [True: 1.62k, False: 61]
  ------------------
  133|   139k|        }
  134|       |
  135|   541k|        return false;
  136|   681k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|   881k|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   191k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  2.10M|    {
   41|  2.10M|        return m_Type;
   42|  2.10M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   912k|    {
   51|   912k|        return m_LineNumber;
   52|   912k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   851k|    {
   56|   851k|        return m_Column;
   57|   851k|    }
_ZNK3dlx5Token7GetTextEv:
   65|  1.03M|    {
   66|  1.03M|        return m_Text;
   67|  1.03M|    }
_ZNK3dlx5Token7HasHintEv:
   79|  71.8k|    {
   80|  71.8k|        return m_HasHint;
   81|  71.8k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  80.3k|    {
   85|  80.3k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  80.3k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  80.3k|                   m_Type == Type::ImmediateInteger);
   88|  80.3k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  80.3k|        return m_Hint;
   91|  80.3k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  7.09k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  7.09k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  7.09k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  8.31k|    {
   51|  8.31k|        auto it = m_Iterator;
   52|  33.2k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 24.9k, False: 8.29k]
  ------------------
   53|  24.9k|        {
   54|  24.9k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 16, False: 24.9k]
  ------------------
   55|     16|            {
   56|     16|                return false;
   57|     16|            }
   58|  24.9k|        }
   59|       |
   60|  8.29k|        return true;
   61|  8.31k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  1.05M|    {
   65|  1.05M|        return m_Iterator != m_Tokens.end();
   66|  1.05M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  1.07M|    {
   70|  1.07M|        return m_Iterator == m_Tokens.end();
   71|  1.07M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  1.07M|    {
   85|  1.07M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  1.07M|        return *m_Iterator++;
   91|  1.07M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  8.29k|    {
  164|  8.29k|        return m_Iterator;
  165|  8.29k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|    916|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|    916|        m_Iterator = it;
  179|    916|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  1.18k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  1.18k|        return m_Tokens.rbegin();
  224|  1.18k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  9.57k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  9.57k|        return m_Tokens.rend();
  233|  9.57k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  7.09k|    {
   63|  7.09k|        TokenStream tokens;
   64|       |
   65|  7.09k|        std::string_view current_token;
   66|       |
   67|  7.09k|        phi::u64 current_line_number{1u};
   68|  7.09k|        phi::u64 current_column{1u};
   69|  7.09k|        phi::u64 token_begin{0u};
   70|       |
   71|  7.09k|        phi::boolean parsing_comment{false};
   72|       |
   73|  2.57M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 2.56M, False: 7.09k]
  ------------------
   74|  2.56M|        {
   75|  2.56M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  2.56M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 120k, False: 2.44M]
  ------------------
   78|   120k|            {
   79|   120k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 23.5k, False: 96.6k]
  ------------------
   80|  23.5k|                {
   81|       |                    // Skip empty lines
   82|  23.5k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  23.5k|                                        current_line_number, current_column);
   84|       |
   85|  23.5k|                    parsing_comment = false;
   86|  23.5k|                    current_line_number += 1u;
   87|  23.5k|                    current_column = 1u;
   88|  23.5k|                    continue;
   89|  23.5k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|  96.6k|                tokens.emplace_back(
   93|  96.6k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|  96.6k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|  96.6k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|  96.6k|                                    current_line_number, current_column);
   98|       |
   99|  96.6k|                current_token   = std::string_view{};
  100|  96.6k|                parsing_comment = false;
  101|  96.6k|                current_line_number += 1u;
  102|  96.6k|                current_column = 0u;
  103|  96.6k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  2.44M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 2.83k, False: 2.44M]
  |  Branch (105:34): [True: 4.19k, False: 2.44M]
  ------------------
  106|  7.02k|            {
  107|  7.02k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 752, False: 6.27k]
  ------------------
  108|    752|                {
  109|    752|                    token_begin = i;
  110|    752|                }
  111|  6.27k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 4.47k, False: 1.80k]
  ------------------
  112|  4.47k|                {
  113|  4.47k|                    tokens.emplace_back(ParseToken(
  114|  4.47k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  4.47k|                            current_line_number, current_column - current_token.length()));
  116|  4.47k|                    token_begin   = i;
  117|  4.47k|                    current_token = std::string_view{};
  118|  4.47k|                }
  119|       |
  120|  7.02k|                parsing_comment = true;
  121|  7.02k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  7.02k|            }
  123|  2.44M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 18.1k, False: 2.42M]
  ------------------
  124|  18.1k|            {
  125|       |                // simply append the character
  126|  18.1k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|  18.1k|            }
  128|  2.42M|            else
  129|  2.42M|            {
  130|       |                // Not parsing a comment
  131|  2.42M|                switch (c)
  132|  2.42M|                {
  133|  21.2k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 21.2k, False: 2.40M]
  ------------------
  134|  37.9k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 16.7k, False: 2.40M]
  ------------------
  135|  66.0k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 28.1k, False: 2.39M]
  ------------------
  136|  66.0k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 15.4k, False: 50.6k]
  ------------------
  137|  15.4k|                        {
  138|  15.4k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  15.4k|                            continue;
  141|  15.4k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|  50.6k|                        tokens.emplace_back(ParseToken(
  145|  50.6k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|  50.6k|                                current_line_number, current_column - current_token.length()));
  147|  50.6k|                        current_token = std::string_view{};
  148|  50.6k|                        break;
  149|   211k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 211k, False: 2.21M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|   211k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 176k, False: 34.9k]
  ------------------
  152|   176k|                        {
  153|   176k|                            current_token =
  154|   176k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|   176k|                            tokens.emplace_back(ParseToken(
  156|   176k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|   176k|                                    current_line_number,
  158|   176k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|   176k|                            current_token = std::string_view{};
  161|   176k|                        }
  162|  34.9k|                        else
  163|  34.9k|                        {
  164|       |                            // Orphan colon
  165|  34.9k|                            token_begin = i;
  166|       |
  167|  34.9k|                            tokens.emplace_back(Token::Type::Colon,
  168|  34.9k|                                                source.substr(token_begin.unsafe(), 1),
  169|  34.9k|                                                current_line_number, current_column);
  170|  34.9k|                        }
  171|   211k|                        break;
  172|   201k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 201k, False: 2.22M]
  ------------------
  173|   239k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 38.0k, False: 2.38M]
  ------------------
  174|   324k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 84.9k, False: 2.33M]
  ------------------
  175|   324k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 259k, False: 64.7k]
  ------------------
  176|   259k|                        {
  177|   259k|                            tokens.emplace_back(ParseToken(
  178|   259k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   259k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   259k|                            current_token = std::string_view{};
  182|   259k|                        }
  183|       |
  184|   324k|                        Token::Type type;
  185|   324k|                        switch (c)
  186|   324k|                        {
  187|   201k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 201k, False: 122k]
  ------------------
  188|   201k|                                type = Token::Type::Comma;
  189|   201k|                                break;
  190|  38.0k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 38.0k, False: 286k]
  ------------------
  191|  38.0k|                                type = Token::Type::OpenBracket;
  192|  38.0k|                                break;
  193|  84.9k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 84.9k, False: 239k]
  ------------------
  194|  84.9k|                                type = Token::Type::ClosingBracket;
  195|  84.9k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 324k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|   324k|#endif
  201|   324k|                        }
  202|       |
  203|   324k|                        token_begin = i;
  204|       |
  205|   324k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|   324k|                                            current_line_number, current_column);
  207|   324k|                        break;
  208|       |
  209|  1.82M|                    default:
  ------------------
  |  Branch (209:21): [True: 1.82M, False: 601k]
  ------------------
  210|  1.82M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 587k, False: 1.23M]
  ------------------
  211|   587k|                        {
  212|   587k|                            token_begin = i;
  213|   587k|                        }
  214|       |
  215|       |                        // simply append the character
  216|  1.82M|                        current_token =
  217|  1.82M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  2.42M|                }
  219|  2.42M|            }
  220|       |
  221|  2.52M|            current_column += 1u;
  222|  2.52M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  7.09k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 5.53k, False: 1.55k]
  ------------------
  226|  5.53k|        {
  227|  5.53k|            tokens.emplace_back(
  228|  5.53k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  5.53k|                               current_line_number, current_column - current_token.length()));
  230|  5.53k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  7.09k|        tokens.finalize();
  234|       |
  235|  7.09k|        return tokens;
  236|  7.09k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   593k|    {
   11|   593k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 5.38k, False: 587k]
  |  Branch (11:35): [True: 3.62k, False: 1.75k]
  ------------------
   12|  3.62k|        {
   13|  3.62k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  3.62k|            if (number)
  ------------------
  |  Branch (15:17): [True: 1.57k, False: 2.05k]
  ------------------
   16|  1.57k|            {
   17|  1.57k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  1.57k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  1.57k|            }
   20|       |
   21|  2.05k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  3.62k|        }
   23|       |
   24|   589k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 1.57k, False: 587k]
  |  Branch (24:35): [True: 3.64k, False: 584k]
  ------------------
   25|  5.22k|        {
   26|  5.22k|            return {Token::Type::Comment, token, line_number, column};
   27|  5.22k|        }
   28|       |
   29|   584k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 18.1k, False: 566k]
  ------------------
   30|  18.1k|        {
   31|  18.1k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  18.1k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  18.1k|        }
   34|       |
   35|   566k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 1.93k, False: 564k]
  ------------------
   36|  1.93k|        {
   37|  1.93k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  1.93k|        }
   39|       |
   40|   564k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 9.67k, False: 554k]
  ------------------
   41|  9.67k|        {
   42|  9.67k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  9.67k|                    static_cast<std::uint32_t>(id)};
   44|  9.67k|        }
   45|       |
   46|   554k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 6.00k, False: 548k]
  ------------------
   47|  6.00k|        {
   48|  6.00k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  6.00k|                    static_cast<std::uint32_t>(id)};
   50|  6.00k|        }
   51|       |
   52|   548k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 155k, False: 392k]
  ------------------
   53|   155k|        {
   54|   155k|            return {Token::Type::OpCode, token, line_number, column,
   55|   155k|                    static_cast<std::uint32_t>(opcode)};
   56|   155k|        }
   57|       |
   58|   392k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   548k|    }

LLVMFuzzerTestOneInput:
   12|  7.09k|{
   13|  7.09k|    static dlx::Processor processor;
   14|       |
   15|  7.09k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   16|       |
   17|       |    // Parse it
   18|  7.09k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  7.09k|    processor.ClearRegisters();
   22|  7.09k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  7.09k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 916, False: 6.17k]
  ------------------
   26|    916|    {
   27|    916|        processor.ExecuteCurrentProgram();
   28|    916|    }
   29|       |
   30|  7.09k|    return 0;
   31|  7.09k|}


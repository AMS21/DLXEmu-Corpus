_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  1.19M|        {
  169|  1.19M|            PHI_ASSERT(index < 3u);
  170|       |
  171|  1.19M|            switch (index.unsafe())
  172|  1.19M|            {
  173|   533k|                case 0:
  ------------------
  |  Branch (173:17): [True: 533k, False: 665k]
  ------------------
  174|   533k|                    return m_Arg1Type;
  175|       |
  176|   345k|                case 1:
  ------------------
  |  Branch (176:17): [True: 345k, False: 853k]
  ------------------
  177|   345k|                    return m_Arg2Type;
  178|       |
  179|   320k|                case 2:
  ------------------
  |  Branch (179:17): [True: 320k, False: 878k]
  ------------------
  180|   320k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 1.19M]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  1.19M|#endif
  187|  1.19M|            }
  188|  1.19M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   310k|        {
  195|   310k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   310k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 302k, False: 7.89k]
  ------------------
  199|   302k|            {
  200|   302k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   302k|            }
  202|   310k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 178k, False: 132k]
  ------------------
  203|   178k|            {
  204|   178k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   178k|            }
  206|   310k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 49.8k, False: 260k]
  ------------------
  207|  49.8k|            {
  208|  49.8k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  49.8k|            }
  210|       |
  211|   310k|            return number_of_argument_required;
  212|   310k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  12.3M|        {
  216|  12.3M|            return m_RegisterAccessType;
  217|  12.3M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   310k|        {
  221|   310k|            return m_Executor;
  222|   310k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  37.2M|    {
   38|  37.2M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  37.2M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  37.2M|                                         static_cast<underlying_t>(rhs));
   42|  37.2M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  37.2M|    {
   55|  37.2M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  37.2M|        return static_cast<underlying_t>(type & test) != 0;
   58|  37.2M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|   808k|    {
   32|   808k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 12.4k, False: 796k]
  ------------------
   33|  12.4k|        {
   34|  12.4k|            return true;
   35|  12.4k|        }
   36|       |
   37|   796k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 14.4k, False: 781k]
  ------------------
   38|  14.4k|        {
   39|  14.4k|            return true;
   40|  14.4k|        }
   41|       |
   42|   781k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 271k, False: 510k]
  ------------------
   43|   271k|        {
   44|   271k|            return true;
   45|   271k|        }
   46|       |
   47|   510k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 6.38k, False: 503k]
  ------------------
   48|  6.38k|        {
   49|  6.38k|            return true;
   50|  6.38k|        }
   51|       |
   52|   503k|        return false;
   53|   510k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|   503k|    {
   57|   503k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 503k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|   503k|        const char first_char = token.at(0);
   63|       |
   64|   503k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 119k, False: 384k]
  ------------------
   65|   119k|        {
   66|   119k|            return phi::is_alpha(first_char);
   67|   119k|        }
   68|       |
   69|   384k|        phi::boolean just_under_scores = (first_char == '_');
   70|   384k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 48.2k, False: 336k]
  |  Branch (70:15): [True: 324k, False: 59.7k]
  |  Branch (70:44): [True: 11.5k, False: 48.2k]
  ------------------
   71|  48.2k|        {
   72|  48.2k|            return false;
   73|  48.2k|        }
   74|       |
   75|  1.22M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 1.00M, False: 216k]
  ------------------
   76|  1.00M|        {
   77|  1.00M|            const char c{token.at(index)};
   78|       |
   79|  1.00M|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 881k, False: 122k]
  ------------------
   80|   881k|            {
   81|   881k|                just_under_scores = false;
   82|   881k|            }
   83|   122k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 2.66k, False: 120k]
  ------------------
   84|  2.66k|            {
   85|  2.66k|                continue;
   86|  2.66k|            }
   87|   120k|            else
   88|   120k|            {
   89|   120k|                return false;
   90|   120k|            }
   91|  1.00M|        }
   92|       |
   93|   216k|        return !just_under_scores;
   94|   336k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|  2.60M|    {
  101|  2.60M|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 2.60M]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|  2.60M|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 432k, False: 2.17M]
  ------------------
  107|   432k|        {
  108|   432k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 58.4k, False: 374k]
  ------------------
  109|  58.4k|            {
  110|  58.4k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  58.4k|            }
  112|       |
  113|   374k|            return {};
  114|   432k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|  2.17M|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 5.18k, False: 2.17M]
  ------------------
  118|  5.18k|        {
  119|  5.18k|            return {};
  120|  5.18k|        }
  121|       |
  122|  2.17M|        std::int32_t number{0};
  123|  2.17M|        phi::boolean is_negative{false};
  124|  2.17M|        phi::boolean starts_with_zero{false};
  125|  2.17M|        phi::boolean parsing_binary{false};
  126|  2.17M|        phi::boolean parsing_octal{false};
  127|  2.17M|        phi::boolean parsing_hexadecimal{false};
  128|  2.17M|        phi::boolean parsed_something{false};
  129|  2.17M|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|  2.39M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 2.37M, False: 26.6k]
  ------------------
  134|  2.37M|        {
  135|  2.37M|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|  2.37M|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 2.17M, False: 199k]
  ------------------
  139|  2.17M|            {
  140|  2.17M|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 6.32k, False: 2.16M]
  ------------------
  141|  6.32k|                {
  142|  6.32k|                    continue;
  143|  6.32k|                }
  144|       |
  145|  2.16M|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 21.7k, False: 2.14M]
  ------------------
  146|  21.7k|                {
  147|  21.7k|                    is_negative = true;
  148|  21.7k|                    continue;
  149|  21.7k|                }
  150|       |
  151|  2.14M|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 41.0k, False: 2.10M]
  ------------------
  152|  41.0k|                {
  153|  41.0k|                    starts_with_zero = true;
  154|  41.0k|                    continue;
  155|  41.0k|                }
  156|       |
  157|  2.10M|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 11.6k, False: 2.09M]
  ------------------
  158|  11.6k|                {
  159|  11.6k|                    return {};
  160|  11.6k|                }
  161|  2.10M|            }
  162|       |
  163|       |            // Second character
  164|  2.29M|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 92.5k, False: 2.19M]
  ------------------
  165|  92.5k|            {
  166|  92.5k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 41.0k, False: 51.4k]
  ------------------
  167|  41.0k|                {
  168|       |                    // Binary
  169|  41.0k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 2.31k, False: 38.7k]
  |  Branch (169:37): [True: 5.04k, False: 33.7k]
  ------------------
  170|  7.36k|                    {
  171|  7.36k|                        parsing_binary = true;
  172|  7.36k|                        continue;
  173|  7.36k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  33.7k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 1.36k, False: 32.3k]
  |  Branch (176:37): [True: 5.49k, False: 26.8k]
  ------------------
  177|  6.85k|                    {
  178|  6.85k|                        parsing_hexadecimal = true;
  179|  6.85k|                        continue;
  180|  6.85k|                    }
  181|       |
  182|       |                    // Octal
  183|  26.8k|                    parsing_octal = true;
  184|  26.8k|                }
  185|  92.5k|            }
  186|       |
  187|       |            // Handle seperators
  188|  2.27M|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 16.0k, False: 2.26M]
  ------------------
  189|  16.0k|            {
  190|  16.0k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 6.83k, False: 9.19k]
  ------------------
  191|  6.83k|                {
  192|  6.83k|                    return {};
  193|  6.83k|                }
  194|       |
  195|  9.19k|                parsed_separator = true;
  196|  9.19k|                continue;
  197|  16.0k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|  2.26M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 66.1k, False: 2.19M]
  |  Branch (200:32): [True: 7.26k, False: 58.8k]
  ------------------
  201|  7.26k|            {
  202|       |                // Would underflow
  203|  7.26k|                return {};
  204|  7.26k|            }
  205|  2.25M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 2.19M, False: 58.8k]
  |  Branch (205:17): [True: 3.71k, False: 2.24M]
  |  Branch (205:33): [True: 3.71k, False: 2.19M]
  ------------------
  206|  3.71k|            {
  207|       |                // Would overflow
  208|  3.71k|                return {};
  209|  3.71k|            }
  210|       |
  211|  2.24M|            parsed_separator = false;
  212|  2.24M|            parsed_something = true;
  213|       |
  214|  2.24M|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 5.63k, False: 2.24M]
  ------------------
  215|  5.63k|            {
  216|  5.63k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 5.03k, False: 598]
  ------------------
  217|  5.03k|                {
  218|  5.03k|                    return {};
  219|  5.03k|                }
  220|       |
  221|    598|                number <<= 1;
  222|    598|                number |= (c - '0');
  223|    598|            }
  224|  2.24M|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 25.7k, False: 2.21M]
  ------------------
  225|  25.7k|            {
  226|  25.7k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 8.30k, False: 17.4k]
  ------------------
  227|  8.30k|                {
  228|  8.30k|                    return {};
  229|  8.30k|                }
  230|       |
  231|  17.4k|                number <<= 3;
  232|  17.4k|                number |= (c - '0');
  233|  17.4k|            }
  234|  2.21M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 14.3k, False: 2.20M]
  ------------------
  235|  14.3k|            {
  236|  14.3k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 4.71k, False: 9.65k]
  ------------------
  237|  4.71k|                {
  238|  4.71k|                    return {};
  239|  4.71k|                }
  240|       |
  241|  9.65k|                number <<= 4;
  242|  9.65k|                number |= phi::hex_digit_value(c).unsafe();
  243|  9.65k|            }
  244|  2.20M|            else
  245|  2.20M|            {
  246|  2.20M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 2.09M, False: 109k]
  ------------------
  247|  2.09M|                {
  248|  2.09M|                    return {};
  249|  2.09M|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|   109k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 40.9k, False: 69.0k]
  |  Branch (252:36): [True: 4.02k, False: 36.9k]
  ------------------
  253|  4.02k|                {
  254|  4.02k|                    return {};
  255|  4.02k|                }
  256|       |
  257|   105k|                number *= 10;
  258|   105k|                number += (c - '0');
  259|   105k|            }
  260|  2.24M|        }
  261|       |
  262|  26.6k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 23.7k, False: 2.93k]
  ------------------
  263|  23.7k|        {
  264|       |            // Check for over/underflow
  265|  23.7k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 5.96k, False: 17.7k]
  |  Branch (265:32): [True: 1.73k, False: 4.23k]
  ------------------
  266|  1.73k|            {
  267|       |                // Would underflow
  268|  1.73k|                return {};
  269|  1.73k|            }
  270|  21.9k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 17.7k, False: 4.23k]
  |  Branch (270:17): [True: 2.81k, False: 19.1k]
  |  Branch (270:33): [True: 2.81k, False: 14.9k]
  ------------------
  271|  2.81k|            {
  272|       |                // Would overflow
  273|  2.81k|                return {};
  274|  2.81k|            }
  275|       |
  276|  19.1k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 4.23k, False: 14.9k]
  ------------------
  277|  4.23k|            {
  278|  4.23k|                return static_cast<std::int16_t>(-number);
  279|  4.23k|            }
  280|       |
  281|  14.9k|            return static_cast<std::int16_t>(number);
  282|  19.1k|        }
  283|       |
  284|  2.93k|        return {};
  285|  26.6k|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   661k|        {
   12|   661k|            m_Value = value;
   13|   661k|        }
_ZNK3dlx14StatusRegister3GetEv:
   16|   271k|        {
   17|   271k|            return m_Value;
   18|   271k|        }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   143k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   143k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 2.47M, False: 0]
  ------------------
   64|  2.47M|            {
   65|  2.47M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 143k, False: 2.32M]
  ------------------
   66|   143k|                {
   67|   143k|                    return &token;
   68|   143k|                }
   69|  2.47M|            }
   70|       |
   71|      0|            return nullptr;
   72|   143k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   703k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   703k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   703k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  2.63M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.63M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.63M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  1.42M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.42M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.42M|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|  1.20M|    {
   11|  1.20M|        m_Value = val;
   12|  1.20M|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  2.34M|    {
   16|  2.34M|        return m_Value;
   17|  2.34M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   310k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  98.5k|    {
   25|  98.5k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  98.5k|        switch (argument_number.unsafe())
   28|  98.5k|        {
   29|  70.5k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 70.5k, False: 27.9k]
  ------------------
   30|  70.5k|                m_Arg1 = argument;
   31|  70.5k|                break;
   32|  18.6k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 18.6k, False: 79.9k]
  ------------------
   33|  18.6k|                m_Arg2 = argument;
   34|  18.6k|                break;
   35|  9.34k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 9.34k, False: 89.2k]
  ------------------
   36|  9.34k|                m_Arg3 = argument;
   37|  9.34k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 98.5k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  98.5k|#endif
   42|  98.5k|        }
   43|  98.5k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   83|  12.3M|    {
   84|  12.3M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   85|  12.3M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   88|  12.3M|    {
   89|  12.3M|        return m_Info;
   90|  12.3M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  1.03M|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   27|  74.5M|    {
   28|  74.5M|        return m_Type;
   29|  74.5M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  16.5M|    {
   78|  16.5M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  16.5M|        return register_int;
   81|  16.5M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   84|  2.17M|    {
   85|  2.17M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   86|       |
   87|  2.17M|        return register_float;
   88|  2.17M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   92|  2.05M|    {
   93|  2.05M|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   94|       |
   95|  2.05M|        return immediate_value;
   96|  2.05M|    }
_ZNK3dlx19InstructionArgument21AsAddressDisplacementEv:
  100|     14|    {
  101|     14|        PHI_ASSERT(m_Type == ArgumentType::AddressDisplacement);
  102|       |
  103|     14|        return address_displacement;
  104|     14|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  107|   653k|    {
  108|   653k|        PHI_ASSERT(m_Type == ArgumentType::Label);
  109|       |
  110|   653k|        return label;
  111|   653k|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  29.1k|    {
  171|  29.1k|        InstructionArgument arg;
  172|  29.1k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  29.1k|        arg.register_int.register_id = id;
  174|  29.1k|        return arg;
  175|  29.1k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  18.9k|    {
  179|  18.9k|        InstructionArgument arg;
  180|  18.9k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  18.9k|        arg.register_float.register_id = id;
  182|  18.9k|        return arg;
  183|  18.9k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  7.45k|    {
  187|  7.45k|        InstructionArgument arg;
  188|  7.45k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  7.45k|        arg.immediate_value.signed_value = value;
  190|  7.45k|        return arg;
  191|  7.45k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|  8.91k|    {
  196|  8.91k|        InstructionArgument arg;
  197|  8.91k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|  8.91k|        arg.address_displacement.register_id  = id;
  199|  8.91k|        arg.address_displacement.displacement = displacement;
  200|  8.91k|        return arg;
  201|  8.91k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  34.0k|    {
  205|  34.0k|        InstructionArgument arg;
  206|  34.0k|        arg.m_Type           = ArgumentType::Label;
  207|  34.0k|        arg.label.label_name = label_name;
  208|  34.0k|        return arg;
  209|  34.0k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  351|   109k|        {
  352|   109k|            const auto& dest_reg = arg1.AsRegisterInt();
  353|   109k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  354|   109k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  355|       |
  356|   109k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  357|   109k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  358|       |
  359|   109k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  360|   109k|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  364|  72.9k|        {
  365|  72.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  366|  72.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  367|  72.9k|            const auto& imm_value = arg3.AsImmediateValue();
  368|       |
  369|  72.9k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  370|       |
  371|  72.9k|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  372|  72.9k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  376|  92.8k|        {
  377|  92.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  378|  92.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  379|  92.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  380|       |
  381|  92.8k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  382|  92.8k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  383|       |
  384|  92.8k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  385|  92.8k|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  389|  79.7k|        {
  390|  79.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  391|  79.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  392|  79.7k|            const auto& imm_value = arg3.AsImmediateValue();
  393|       |
  394|  79.7k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  395|       |
  396|  79.7k|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  397|  79.7k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  401|  24.3k|        {
  402|  24.3k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  403|  24.3k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  404|  24.3k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  405|       |
  406|  24.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  407|  24.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  408|       |
  409|  24.3k|            const phi::f32 new_value = lhs_value + rhs_value;
  410|       |
  411|  24.3k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  412|  24.3k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  416|  17.9k|        {
  417|  17.9k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  418|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  419|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  420|       |
  421|  17.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  422|  17.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  423|       |
  424|  17.9k|            const phi::f64 new_value = lhs_value + rhs_value;
  425|       |
  426|  17.9k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  427|  17.9k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  431|  1.20M|        {
  432|  1.20M|            const auto& dest_reg = arg1.AsRegisterInt();
  433|  1.20M|            const auto& lhs_reg  = arg2.AsRegisterInt();
  434|  1.20M|            const auto& rhs_reg  = arg3.AsRegisterInt();
  435|       |
  436|  1.20M|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  437|  1.20M|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  438|       |
  439|  1.20M|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  440|  1.20M|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  444|   229k|        {
  445|   229k|            const auto& dest_reg  = arg1.AsRegisterInt();
  446|   229k|            const auto& src_reg   = arg2.AsRegisterInt();
  447|   229k|            const auto& imm_value = arg3.AsImmediateValue();
  448|       |
  449|   229k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  450|       |
  451|   229k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  452|   229k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  456|  79.5k|        {
  457|  79.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  458|  79.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  459|  79.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  460|       |
  461|  79.5k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  462|  79.5k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  463|       |
  464|  79.5k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  465|  79.5k|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  469|  98.2k|        {
  470|  98.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  471|  98.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  472|  98.2k|            const auto& imm_value = arg3.AsImmediateValue();
  473|       |
  474|  98.2k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  475|       |
  476|  98.2k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  477|  98.2k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  481|  14.2k|        {
  482|  14.2k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  483|  14.2k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  484|  14.2k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  485|       |
  486|  14.2k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  487|  14.2k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  488|       |
  489|  14.2k|            const phi::f32 new_value = lhs_value - rhs_value;
  490|       |
  491|  14.2k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  492|  14.2k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  496|  20.9k|        {
  497|  20.9k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  498|  20.9k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  499|  20.9k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  500|       |
  501|  20.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  502|  20.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  503|       |
  504|  20.9k|            const phi::f64 new_value = lhs_value - rhs_value;
  505|       |
  506|  20.9k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  507|  20.9k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  511|  74.5k|        {
  512|  74.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  513|  74.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  514|  74.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  515|       |
  516|  74.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  517|  74.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  518|       |
  519|  74.5k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  520|  74.5k|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  524|   201k|        {
  525|   201k|            const auto& dest_reg  = arg1.AsRegisterInt();
  526|   201k|            const auto& src_reg   = arg2.AsRegisterInt();
  527|   201k|            const auto& imm_value = arg3.AsImmediateValue();
  528|       |
  529|   201k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  530|       |
  531|   201k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  532|   201k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  536|  20.9k|        {
  537|  20.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  538|  20.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  539|  20.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  540|       |
  541|  20.9k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  542|  20.9k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  543|       |
  544|  20.9k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  545|  20.9k|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  549|  57.9k|        {
  550|  57.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  551|  57.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  552|  57.9k|            const auto& imm_value = arg3.AsImmediateValue();
  553|       |
  554|  57.9k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  555|       |
  556|  57.9k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  557|  57.9k|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  561|  47.6k|        {
  562|  47.6k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  563|  47.6k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  564|  47.6k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  565|       |
  566|  47.6k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  567|  47.6k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  568|       |
  569|  47.6k|            const phi::f32 new_value = lhs_value * rhs_value;
  570|       |
  571|  47.6k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  572|  47.6k|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  576|  21.9k|        {
  577|  21.9k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  578|  21.9k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  579|  21.9k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  580|       |
  581|  21.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  582|  21.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  583|       |
  584|  21.9k|            const phi::f64 new_value = lhs_value * rhs_value;
  585|       |
  586|  21.9k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  587|  21.9k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  591|  38.5k|        {
  592|  38.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  593|  38.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  594|  38.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  595|       |
  596|  38.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  597|  38.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  598|       |
  599|  38.5k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  600|  38.5k|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  604|  28.5k|        {
  605|  28.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  606|  28.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  607|  28.5k|            const auto& imm_value = arg3.AsImmediateValue();
  608|       |
  609|  28.5k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  610|       |
  611|  28.5k|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  612|  28.5k|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  616|  11.8k|        {
  617|  11.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  618|  11.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  619|  11.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  620|       |
  621|  11.8k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  622|  11.8k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  623|       |
  624|  11.8k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  625|  11.8k|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  629|  26.1k|        {
  630|  26.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  631|  26.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  632|  26.1k|            const auto& imm_value = arg3.AsImmediateValue();
  633|       |
  634|  26.1k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  635|       |
  636|  26.1k|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  637|  26.1k|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  641|      1|        {
  642|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  643|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  644|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  645|       |
  646|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  647|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  648|       |
  649|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (649:17): [True: 1, False: 0]
  ------------------
  650|      1|            {
  651|      1|                processor.Raise(Exception::DivideByZero);
  652|      1|                return;
  653|      1|            }
  654|       |
  655|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  656|       |
  657|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  658|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  662|      1|        {
  663|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  664|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  665|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  666|       |
  667|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  668|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  669|       |
  670|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (670:17): [True: 1, False: 0]
  ------------------
  671|      1|            {
  672|      1|                processor.Raise(Exception::DivideByZero);
  673|      1|                return;
  674|      1|            }
  675|       |
  676|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  677|       |
  678|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  679|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  683|  52.3k|        {
  684|  52.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  685|  52.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  686|  52.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  687|       |
  688|  52.3k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  689|  52.3k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  690|       |
  691|  52.3k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  692|  52.3k|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  696|  61.7k|        {
  697|  61.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  698|  61.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  699|  61.7k|            const auto& imm_value = arg3.AsImmediateValue();
  700|       |
  701|  61.7k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  702|  61.7k|            phi::i32 shift_value = imm_value.signed_value;
  703|       |
  704|  61.7k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  705|  61.7k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  709|  74.5k|        {
  710|  74.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  711|  74.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  712|  74.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  713|       |
  714|  74.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  715|  74.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  716|       |
  717|  74.5k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  718|  74.5k|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  722|   145k|        {
  723|   145k|            const auto& dest_reg  = arg1.AsRegisterInt();
  724|   145k|            const auto& src_reg   = arg2.AsRegisterInt();
  725|   145k|            const auto& imm_value = arg3.AsImmediateValue();
  726|       |
  727|   145k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  728|   145k|            phi::i32 shift_value = imm_value.signed_value;
  729|       |
  730|   145k|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  731|   145k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  735|   118k|        {
  736|   118k|            const auto& dest_reg = arg1.AsRegisterInt();
  737|   118k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  738|   118k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  739|       |
  740|   118k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  741|   118k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  742|       |
  743|   118k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  744|   118k|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  748|  89.1k|        {
  749|  89.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  750|  89.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  751|  89.1k|            const auto& imm_value = arg3.AsImmediateValue();
  752|       |
  753|  89.1k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  754|  89.1k|            phi::i32 shift_value = imm_value.signed_value;
  755|       |
  756|  89.1k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  757|  89.1k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  761|   100k|        {
  762|   100k|            const auto& dest_reg = arg1.AsRegisterInt();
  763|   100k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  764|   100k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  765|       |
  766|   100k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  767|   100k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  768|       |
  769|   100k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  770|   100k|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  774|  65.3k|        {
  775|  65.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  776|  65.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  777|  65.3k|            const auto& imm_value = arg3.AsImmediateValue();
  778|       |
  779|  65.3k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  780|  65.3k|            phi::i32 shift_value = imm_value.signed_value;
  781|       |
  782|  65.3k|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  783|  65.3k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  787|  20.1k|        {
  788|  20.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  789|  20.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  790|  20.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  791|       |
  792|  20.1k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  793|  20.1k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  794|  20.1k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  795|       |
  796|  20.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  797|  20.1k|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  801|  30.0k|        {
  802|  30.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  803|  30.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  804|  30.0k|            const auto& imm_value = arg3.AsImmediateValue();
  805|       |
  806|  30.0k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  807|  30.0k|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  808|       |
  809|  30.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  810|  30.0k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  814|   241k|        {
  815|   241k|            const auto& dest_reg = arg1.AsRegisterInt();
  816|   241k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  817|   241k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  818|       |
  819|   241k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  820|   241k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  821|   241k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  822|       |
  823|   241k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  824|   241k|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  828|  13.6k|        {
  829|  13.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
  830|  13.6k|            const auto& src_reg   = arg2.AsRegisterInt();
  831|  13.6k|            const auto& imm_value = arg3.AsImmediateValue();
  832|       |
  833|  13.6k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  834|  13.6k|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  835|       |
  836|  13.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  837|  13.6k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  841|   101k|        {
  842|   101k|            const auto& dest_reg = arg1.AsRegisterInt();
  843|   101k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  844|   101k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  845|       |
  846|   101k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  847|   101k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  848|   101k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  849|       |
  850|   101k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  851|   101k|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  855|  18.2k|        {
  856|  18.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  857|  18.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  858|  18.2k|            const auto& imm_value = arg3.AsImmediateValue();
  859|       |
  860|  18.2k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  861|  18.2k|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  862|       |
  863|  18.2k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  864|  18.2k|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  868|  14.1k|        {
  869|  14.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  870|  14.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  871|  14.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  872|       |
  873|  14.1k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  874|  14.1k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  875|       |
  876|  14.1k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (876:41): [True: 0, False: 14.1k]
  ------------------
  877|       |
  878|  14.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  879|  14.1k|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  883|  40.3k|        {
  884|  40.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  885|  40.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  886|  40.3k|            const auto& imm_value = arg3.AsImmediateValue();
  887|       |
  888|  40.3k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  889|       |
  890|  40.3k|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (890:41): [True: 32.7k, False: 7.57k]
  ------------------
  891|       |
  892|  40.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  893|  40.3k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  897|  21.9k|        {
  898|  21.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  899|  21.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  900|  21.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  901|       |
  902|  21.9k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  903|  21.9k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  904|       |
  905|  21.9k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (905:41): [True: 0, False: 21.9k]
  ------------------
  906|       |
  907|  21.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  908|  21.9k|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  912|  24.3k|        {
  913|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  914|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  915|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
  916|       |
  917|  24.3k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  918|       |
  919|  24.3k|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (919:41): [True: 24.3k, False: 0]
  ------------------
  920|       |
  921|  24.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  922|  24.3k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  926|  69.0k|        {
  927|  69.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  928|  69.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  929|       |
  930|  69.0k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  931|  69.0k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  932|       |
  933|  69.0k|            const phi::boolean new_value = (lhs_value < rhs_value);
  934|       |
  935|  69.0k|            processor.SetFPSRValue(new_value);
  936|  69.0k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  940|  10.8k|        {
  941|  10.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  942|  10.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  943|       |
  944|  10.8k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  945|  10.8k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  946|       |
  947|  10.8k|            const phi::boolean new_value = (lhs_value < rhs_value);
  948|       |
  949|  10.8k|            processor.SetFPSRValue(new_value);
  950|  10.8k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  954|  32.0k|        {
  955|  32.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  956|  32.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  957|  32.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  958|       |
  959|  32.0k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  960|  32.0k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  961|       |
  962|  32.0k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (962:41): [True: 5.68k, False: 26.3k]
  ------------------
  963|       |
  964|  32.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  965|  32.0k|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  969|  35.2k|        {
  970|  35.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  971|  35.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  972|  35.2k|            const auto& imm_value = arg3.AsImmediateValue();
  973|       |
  974|  35.2k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  975|       |
  976|  35.2k|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (976:41): [True: 0, False: 35.2k]
  ------------------
  977|       |
  978|  35.2k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  979|  35.2k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  983|  29.5k|        {
  984|  29.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  985|  29.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  986|  29.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  987|       |
  988|  29.5k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  989|  29.5k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  990|       |
  991|  29.5k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (991:41): [True: 4.23k, False: 25.3k]
  ------------------
  992|       |
  993|  29.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  994|  29.5k|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  998|  44.5k|        {
  999|  44.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1000|  44.5k|            const auto& src_reg   = arg2.AsRegisterInt();
 1001|  44.5k|            const auto& imm_value = arg3.AsImmediateValue();
 1002|       |
 1003|  44.5k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1004|       |
 1005|  44.5k|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1005:41): [True: 0, False: 44.5k]
  ------------------
 1006|       |
 1007|  44.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1008|  44.5k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1012|  88.6k|        {
 1013|  88.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1014|  88.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1015|       |
 1016|  88.6k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1017|  88.6k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1018|       |
 1019|  88.6k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1020|       |
 1021|  88.6k|            processor.SetFPSRValue(new_value);
 1022|  88.6k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1026|  26.1k|        {
 1027|  26.1k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1028|  26.1k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1029|       |
 1030|  26.1k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1031|  26.1k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1032|       |
 1033|  26.1k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1034|       |
 1035|  26.1k|            processor.SetFPSRValue(new_value);
 1036|  26.1k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1040|   834k|        {
 1041|   834k|            const auto& dest_reg = arg1.AsRegisterInt();
 1042|   834k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1043|   834k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1044|       |
 1045|   834k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1046|   834k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1047|       |
 1048|   834k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1048:41): [True: 674k, False: 160k]
  ------------------
 1049|       |
 1050|   834k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1051|   834k|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1055|  27.6k|        {
 1056|  27.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1057|  27.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1058|  27.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1059|       |
 1060|  27.6k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1061|       |
 1062|  27.6k|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1062:41): [True: 27.6k, False: 0]
  ------------------
 1063|       |
 1064|  27.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1065|  27.6k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1069|  23.5k|        {
 1070|  23.5k|            const auto& dest_reg = arg1.AsRegisterInt();
 1071|  23.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1072|  23.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1073|       |
 1074|  23.5k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1075|  23.5k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1076|       |
 1077|  23.5k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1077:41): [True: 23.5k, False: 0]
  ------------------
 1078|       |
 1079|  23.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1080|  23.5k|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1084|  19.6k|        {
 1085|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1086|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1087|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1088|       |
 1089|  19.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1090|       |
 1091|  19.6k|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1091:41): [True: 19.6k, False: 0]
  ------------------
 1092|       |
 1093|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1094|  19.6k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1098|   239k|        {
 1099|   239k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1100|   239k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1101|       |
 1102|   239k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1103|   239k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1104|       |
 1105|   239k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1106|       |
 1107|   239k|            processor.SetFPSRValue(new_value);
 1108|   239k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1112|  50.6k|        {
 1113|  50.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1114|  50.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1115|       |
 1116|  50.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1117|  50.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1118|       |
 1119|  50.6k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1120|       |
 1121|  50.6k|            processor.SetFPSRValue(new_value);
 1122|  50.6k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1126|  17.4k|        {
 1127|  17.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1128|  17.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1129|  17.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1130|       |
 1131|  17.4k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1132|  17.4k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1133|       |
 1134|  17.4k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1134:41): [True: 15.4k, False: 2.00k]
  ------------------
 1135|       |
 1136|  17.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1137|  17.4k|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1141|  24.3k|        {
 1142|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1143|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1144|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1145|       |
 1146|  24.3k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1147|       |
 1148|  24.3k|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1148:41): [True: 5.83k, False: 18.4k]
  ------------------
 1149|       |
 1150|  24.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1151|  24.3k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1155|  11.0k|        {
 1156|  11.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1157|  11.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1158|  11.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1159|       |
 1160|  11.0k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1161|  11.0k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1162|       |
 1163|  11.0k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1163:41): [True: 11.0k, False: 0]
  ------------------
 1164|       |
 1165|  11.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1166|  11.0k|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1170|  19.6k|        {
 1171|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1172|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1173|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1174|       |
 1175|  19.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1176|       |
 1177|  19.6k|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1177:41): [True: 3.33k, False: 16.3k]
  ------------------
 1178|       |
 1179|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1180|  19.6k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1184|  22.7k|        {
 1185|  22.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1186|  22.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1187|       |
 1188|  22.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1189|  22.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1190|       |
 1191|  22.7k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1192|       |
 1193|  22.7k|            processor.SetFPSRValue(new_value);
 1194|  22.7k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1198|  27.6k|        {
 1199|  27.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1200|  27.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1201|       |
 1202|  27.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1203|  27.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1204|       |
 1205|  27.6k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1206|       |
 1207|  27.6k|            processor.SetFPSRValue(new_value);
 1208|  27.6k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1212|  26.9k|        {
 1213|  26.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1214|  26.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1215|  26.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1216|       |
 1217|  26.9k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1218|  26.9k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1219|       |
 1220|  26.9k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1220:41): [True: 24.0k, False: 2.90k]
  ------------------
 1221|       |
 1222|  26.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1223|  26.9k|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1227|  27.9k|        {
 1228|  27.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1229|  27.9k|            const auto& src_reg   = arg2.AsRegisterInt();
 1230|  27.9k|            const auto& imm_value = arg3.AsImmediateValue();
 1231|       |
 1232|  27.9k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1233|       |
 1234|  27.9k|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1234:41): [True: 1, False: 27.9k]
  ------------------
 1235|       |
 1236|  27.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1237|  27.9k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1241|  25.0k|        {
 1242|  25.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1243|  25.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1244|  25.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1245|       |
 1246|  25.0k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1247|  25.0k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1248|       |
 1249|  25.0k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1249:41): [True: 25.0k, False: 0]
  ------------------
 1250|       |
 1251|  25.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1252|  25.0k|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1256|  26.7k|        {
 1257|  26.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1258|  26.7k|            const auto& src_reg   = arg2.AsRegisterInt();
 1259|  26.7k|            const auto& imm_value = arg3.AsImmediateValue();
 1260|       |
 1261|  26.7k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1262|       |
 1263|  26.7k|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1263:41): [True: 1, False: 26.7k]
  ------------------
 1264|       |
 1265|  26.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1266|  26.7k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1270|  24.2k|        {
 1271|  24.2k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1272|  24.2k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1273|       |
 1274|  24.2k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1275|  24.2k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1276|       |
 1277|  24.2k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1278|       |
 1279|  24.2k|            processor.SetFPSRValue(new_value);
 1280|  24.2k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1284|  27.6k|        {
 1285|  27.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1286|  27.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1287|       |
 1288|  27.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1289|  27.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1290|       |
 1291|  27.6k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1292|       |
 1293|  27.6k|            processor.SetFPSRValue(new_value);
 1294|  27.6k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1298|  34.4k|        {
 1299|  34.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1300|  34.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1301|  34.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1302|       |
 1303|  34.4k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1304|  34.4k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1305|       |
 1306|  34.4k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1306:41): [True: 0, False: 34.4k]
  ------------------
 1307|       |
 1308|  34.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1309|  34.4k|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1313|  26.1k|        {
 1314|  26.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1315|  26.1k|            const auto& src_reg   = arg2.AsRegisterInt();
 1316|  26.1k|            const auto& imm_value = arg3.AsImmediateValue();
 1317|       |
 1318|  26.1k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1319|       |
 1320|  26.1k|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1320:41): [True: 22.4k, False: 3.66k]
  ------------------
 1321|       |
 1322|  26.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1323|  26.1k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1327|  19.7k|        {
 1328|  19.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1329|  19.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1330|  19.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1331|       |
 1332|  19.7k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1333|  19.7k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1334|       |
 1335|  19.7k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1335:41): [True: 0, False: 19.7k]
  ------------------
 1336|       |
 1337|  19.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1338|  19.7k|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1342|  19.6k|        {
 1343|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1344|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1345|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1346|       |
 1347|  19.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1348|       |
 1349|  19.6k|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1349:41): [True: 19.6k, False: 0]
  ------------------
 1350|       |
 1351|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1352|  19.6k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1356|  28.7k|        {
 1357|  28.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1358|  28.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1359|       |
 1360|  28.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1361|  28.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1362|       |
 1363|  28.7k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1364|       |
 1365|  28.7k|            processor.SetFPSRValue(new_value);
 1366|  28.7k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1370|  24.5k|        {
 1371|  24.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1372|  24.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1373|       |
 1374|  24.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1375|  24.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1376|       |
 1377|  24.5k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1378|       |
 1379|  24.5k|            processor.SetFPSRValue(new_value);
 1380|  24.5k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1384|  81.4k|        {
 1385|  81.4k|            const auto& test_reg   = arg1.AsRegisterInt();
 1386|  81.4k|            const auto& jump_label = arg2.AsLabel();
 1387|       |
 1388|  81.4k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1389|       |
 1390|  81.4k|            if (test_value == 0)
  ------------------
  |  Branch (1390:17): [True: 64.9k, False: 16.5k]
  ------------------
 1391|  64.9k|            {
 1392|  64.9k|                JumpToLabel(processor, jump_label.label_name);
 1393|  64.9k|            }
 1394|  81.4k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1398|  94.1k|        {
 1399|  94.1k|            const auto& test_reg   = arg1.AsRegisterInt();
 1400|  94.1k|            const auto& jump_label = arg2.AsLabel();
 1401|       |
 1402|  94.1k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1403|       |
 1404|  94.1k|            if (test_value != 0)
  ------------------
  |  Branch (1404:17): [True: 73.3k, False: 20.7k]
  ------------------
 1405|  73.3k|            {
 1406|  73.3k|                JumpToLabel(processor, jump_label.label_name);
 1407|  73.3k|            }
 1408|  94.1k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1412|   154k|        {
 1413|   154k|            const auto& jump_label = arg1.AsLabel();
 1414|       |
 1415|   154k|            phi::boolean test_value = processor.GetFPSRValue();
 1416|       |
 1417|   154k|            if (test_value)
  ------------------
  |  Branch (1417:17): [True: 121k, False: 33.0k]
  ------------------
 1418|   121k|            {
 1419|   121k|                JumpToLabel(processor, jump_label.label_name);
 1420|   121k|            }
 1421|   154k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1425|   116k|        {
 1426|   116k|            const auto& jump_label = arg1.AsLabel();
 1427|       |
 1428|   116k|            phi::boolean test_value = processor.GetFPSRValue();
 1429|       |
 1430|   116k|            if (!test_value)
  ------------------
  |  Branch (1430:17): [True: 66.0k, False: 50.4k]
  ------------------
 1431|  66.0k|            {
 1432|  66.0k|                JumpToLabel(processor, jump_label.label_name);
 1433|  66.0k|            }
 1434|   116k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1438|   151k|        {
 1439|   151k|            const auto& jump_label = arg1.AsLabel();
 1440|       |
 1441|   151k|            JumpToLabel(processor, jump_label.label_name);
 1442|   151k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1446|  2.54M|        {
 1447|  2.54M|            const auto& jump_register = arg1.AsRegisterInt();
 1448|       |
 1449|  2.54M|            JumpToRegister(processor, jump_register.register_id);
 1450|  2.54M|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1454|  56.0k|        {
 1455|  56.0k|            const auto& jump_label = arg1.AsLabel();
 1456|       |
 1457|  56.0k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1458|  56.0k|                                                  processor.GetNextProgramCounter());
 1459|       |
 1460|  56.0k|            JumpToLabel(processor, jump_label.label_name);
 1461|  56.0k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1465|  27.3k|        {
 1466|  27.3k|            const auto& jump_register = arg1.AsRegisterInt();
 1467|       |
 1468|  27.3k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1469|  27.3k|                                                  processor.GetNextProgramCounter());
 1470|       |
 1471|  27.3k|            JumpToRegister(processor, jump_register.register_id);
 1472|  27.3k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1476|  9.29k|        {
 1477|  9.29k|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1478|  9.29k|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1479|       |
 1480|  9.29k|            imm_value = static_cast<std::int32_t>((imm_value << 16) & 0xFFFF0000);
 1481|       |
 1482|  9.29k|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1483|  9.29k|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1487|  63.4k|        {
 1488|  63.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1489|       |
 1490|  63.4k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1491|       |
 1492|  63.4k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1492:17): [True: 1, False: 63.4k]
  ------------------
 1493|      1|            {
 1494|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1495|      1|                return;
 1496|      1|            }
 1497|       |
 1498|  63.4k|            phi::i32 address = optional_address.value();
 1499|       |
 1500|  63.4k|            auto optional_value =
 1501|  63.4k|                    processor.GetMemory().LoadByte(static_cast<std::size_t>(address.unsafe()));
 1502|       |
 1503|  63.4k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1503:17): [True: 2, False: 63.4k]
  ------------------
 1504|      2|            {
 1505|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1506|      2|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1507|      2|                return;
 1508|      2|            }
 1509|       |
 1510|  63.4k|            phi::i32 value = optional_value.value();
 1511|       |
 1512|  63.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1513|  63.4k|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1517|  85.1k|        {
 1518|  85.1k|            const auto& dest_reg = arg1.AsRegisterInt();
 1519|       |
 1520|  85.1k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1521|       |
 1522|  85.1k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1522:17): [True: 1, False: 85.1k]
  ------------------
 1523|      1|            {
 1524|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1525|      1|                return;
 1526|      1|            }
 1527|       |
 1528|  85.1k|            phi::i32 address = optional_address.value();
 1529|       |
 1530|  85.1k|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1531|  85.1k|                    static_cast<std::size_t>(address.unsafe()));
 1532|       |
 1533|  85.1k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1533:17): [True: 2, False: 85.1k]
  ------------------
 1534|      2|            {
 1535|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1536|      2|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1537|      2|                return;
 1538|      2|            }
 1539|       |
 1540|  85.1k|            phi::u32 value = optional_value.value();
 1541|       |
 1542|  85.1k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1543|  85.1k|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1547|  24.3k|        {
 1548|  24.3k|            const auto& dest_reg = arg1.AsRegisterInt();
 1549|       |
 1550|  24.3k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1551|       |
 1552|  24.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1552:17): [True: 1, False: 24.3k]
  ------------------
 1553|      1|            {
 1554|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1555|      1|                return;
 1556|      1|            }
 1557|       |
 1558|  24.3k|            phi::i32 address = optional_address.value();
 1559|       |
 1560|  24.3k|            auto optional_value =
 1561|  24.3k|                    processor.GetMemory().LoadHalfWord(static_cast<std::size_t>(address.unsafe()));
 1562|       |
 1563|  24.3k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1563:17): [True: 4, False: 24.3k]
  ------------------
 1564|      4|            {
 1565|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1566|      4|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1567|      4|                return;
 1568|      4|            }
 1569|       |
 1570|  24.3k|            phi::i32 value = optional_value.value();
 1571|       |
 1572|  24.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1573|  24.3k|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1577|  46.9k|        {
 1578|  46.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1579|       |
 1580|  46.9k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1581|       |
 1582|  46.9k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1582:17): [True: 1, False: 46.9k]
  ------------------
 1583|      1|            {
 1584|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1585|      1|                return;
 1586|      1|            }
 1587|       |
 1588|  46.9k|            phi::i32 address = optional_address.value();
 1589|       |
 1590|  46.9k|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1591|  46.9k|                    static_cast<std::size_t>(address.unsafe()));
 1592|       |
 1593|  46.9k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1593:17): [True: 15, False: 46.9k]
  ------------------
 1594|     15|            {
 1595|     15|                processor.Raise(Exception::AddressOutOfBounds);
 1596|     15|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|     15|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1597|     15|                return;
 1598|     15|            }
 1599|       |
 1600|  46.9k|            phi::u32 value = optional_value.value();
 1601|       |
 1602|  46.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1603|  46.9k|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1607|  18.2k|        {
 1608|  18.2k|            const auto& dest_reg = arg1.AsRegisterInt();
 1609|       |
 1610|  18.2k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1611|       |
 1612|  18.2k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1612:17): [True: 1, False: 18.2k]
  ------------------
 1613|      1|            {
 1614|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1615|      1|                return;
 1616|      1|            }
 1617|       |
 1618|  18.2k|            phi::i32 address = optional_address.value();
 1619|       |
 1620|  18.2k|            auto optional_value =
 1621|  18.2k|                    processor.GetMemory().LoadWord(static_cast<std::size_t>(address.unsafe()));
 1622|       |
 1623|  18.2k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1623:17): [True: 3, False: 18.2k]
  ------------------
 1624|      3|            {
 1625|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1626|      3|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1627|      3|                return;
 1628|      3|            }
 1629|       |
 1630|  18.2k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1631|  18.2k|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1635|  15.4k|        {
 1636|  15.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1637|       |
 1638|  15.4k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1639|       |
 1640|  15.4k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1640:17): [True: 1, False: 15.4k]
  ------------------
 1641|      1|            {
 1642|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1643|      1|                return;
 1644|      1|            }
 1645|       |
 1646|  15.4k|            phi::i32 address = optional_address.value();
 1647|       |
 1648|  15.4k|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1649|  15.4k|                    static_cast<std::size_t>(address.unsafe()));
 1650|       |
 1651|  15.4k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1651:17): [True: 3, False: 15.4k]
  ------------------
 1652|      3|            {
 1653|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1654|      3|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1655|      3|                return;
 1656|      3|            }
 1657|       |
 1658|  15.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1659|  15.4k|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1663|  16.5k|        {
 1664|  16.5k|            const auto& dest_reg = arg1.AsRegisterFloat();
 1665|       |
 1666|  16.5k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1667|       |
 1668|  16.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1668:17): [True: 1, False: 16.5k]
  ------------------
 1669|      1|            {
 1670|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1671|      1|                return;
 1672|      1|            }
 1673|       |
 1674|  16.5k|            phi::i32 address = optional_address.value();
 1675|       |
 1676|  16.5k|            auto optional_value =
 1677|  16.5k|                    processor.GetMemory().LoadFloat(static_cast<std::size_t>(address.unsafe()));
 1678|       |
 1679|  16.5k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1679:17): [True: 5, False: 16.5k]
  ------------------
 1680|      5|            {
 1681|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1682|      5|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1683|      5|                return;
 1684|      5|            }
 1685|       |
 1686|  16.5k|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1687|  16.5k|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1691|  38.5k|        {
 1692|  38.5k|            const auto& dest_reg = arg1.AsRegisterFloat();
 1693|       |
 1694|  38.5k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1695|       |
 1696|  38.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1696:17): [True: 1, False: 38.5k]
  ------------------
 1697|      1|            {
 1698|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1699|      1|                return;
 1700|      1|            }
 1701|       |
 1702|  38.5k|            phi::i32 address = optional_address.value();
 1703|       |
 1704|  38.5k|            auto optional_value =
 1705|  38.5k|                    processor.GetMemory().LoadDouble(static_cast<std::size_t>(address.unsafe()));
 1706|       |
 1707|  38.5k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1707:17): [True: 5, False: 38.5k]
  ------------------
 1708|      5|            {
 1709|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1710|      5|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1711|      5|                return;
 1712|      5|            }
 1713|       |
 1714|  38.5k|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1715|  38.5k|        }
_ZN3dlx4impl2SBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1719|  24.6k|        {
 1720|  24.6k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1721|       |
 1722|  24.6k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1722:17): [True: 1, False: 24.6k]
  ------------------
 1723|      1|            {
 1724|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1725|      1|                return;
 1726|      1|            }
 1727|       |
 1728|  24.6k|            phi::i32 address = optional_address.value();
 1729|       |
 1730|  24.6k|            const auto& src_reg = arg2.AsRegisterInt();
 1731|       |
 1732|  24.6k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1733|       |
 1734|  24.6k|            phi::boolean success =
 1735|  24.6k|                    processor.GetMemory().StoreByte(static_cast<std::size_t>(address.unsafe()),
 1736|  24.6k|                                                    static_cast<std::int8_t>(value.unsafe()));
 1737|       |
 1738|  24.6k|            if (!success)
  ------------------
  |  Branch (1738:17): [True: 5, False: 24.6k]
  ------------------
 1739|      5|            {
 1740|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1741|      5|                DLX_ERROR("Failed to store byte at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1742|      5|            }
 1743|  24.6k|        }
_ZN3dlx4impl3SBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1747|  26.1k|        {
 1748|  26.1k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1749|       |
 1750|  26.1k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1750:17): [True: 1, False: 26.1k]
  ------------------
 1751|      1|            {
 1752|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1753|      1|                return;
 1754|      1|            }
 1755|       |
 1756|  26.1k|            phi::i32 address = optional_address.value();
 1757|       |
 1758|  26.1k|            const auto& src_reg = arg2.AsRegisterInt();
 1759|       |
 1760|  26.1k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1761|       |
 1762|  26.1k|            phi::boolean success = processor.GetMemory().StoreUnsignedByte(
 1763|  26.1k|                    static_cast<std::size_t>(address.unsafe()),
 1764|  26.1k|                    static_cast<std::uint8_t>(value.unsafe()));
 1765|       |
 1766|  26.1k|            if (!success)
  ------------------
  |  Branch (1766:17): [True: 4, False: 26.1k]
  ------------------
 1767|      4|            {
 1768|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1769|      4|                DLX_ERROR("Failed to store unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1770|      4|            }
 1771|  26.1k|        }
_ZN3dlx4impl2SHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1775|  25.3k|        {
 1776|  25.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1777|       |
 1778|  25.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1778:17): [True: 1, False: 25.3k]
  ------------------
 1779|      1|            {
 1780|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1781|      1|                return;
 1782|      1|            }
 1783|       |
 1784|  25.3k|            phi::i32 address = optional_address.value();
 1785|       |
 1786|  25.3k|            const auto& src_reg = arg2.AsRegisterInt();
 1787|       |
 1788|  25.3k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1789|       |
 1790|  25.3k|            phi::boolean success =
 1791|  25.3k|                    processor.GetMemory().StoreHalfWord(static_cast<std::size_t>(address.unsafe()),
 1792|  25.3k|                                                        static_cast<std::int16_t>(value.unsafe()));
 1793|       |
 1794|  25.3k|            if (!success)
  ------------------
  |  Branch (1794:17): [True: 3, False: 25.3k]
  ------------------
 1795|      3|            {
 1796|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1797|      3|                DLX_ERROR("Failed to store half word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1798|      3|            }
 1799|  25.3k|        }
_ZN3dlx4impl3SHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1803|  24.3k|        {
 1804|  24.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1805|       |
 1806|  24.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1806:17): [True: 1, False: 24.3k]
  ------------------
 1807|      1|            {
 1808|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1809|      1|                return;
 1810|      1|            }
 1811|       |
 1812|  24.3k|            phi::i32 address = optional_address.value();
 1813|       |
 1814|  24.3k|            const auto& src_reg = arg2.AsRegisterInt();
 1815|       |
 1816|  24.3k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1817|       |
 1818|  24.3k|            phi::boolean success = processor.GetMemory().StoreUnsignedHalfWord(
 1819|  24.3k|                    static_cast<std::size_t>(address.unsafe()),
 1820|  24.3k|                    static_cast<std::uint16_t>(value.unsafe()));
 1821|       |
 1822|  24.3k|            if (!success)
  ------------------
  |  Branch (1822:17): [True: 3, False: 24.3k]
  ------------------
 1823|      3|            {
 1824|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1825|      3|                DLX_ERROR("Failed to store unsigned half word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1826|      3|            }
 1827|  24.3k|        }
_ZN3dlx4impl2SWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1831|  21.2k|        {
 1832|  21.2k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1833|       |
 1834|  21.2k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1834:17): [True: 1, False: 21.2k]
  ------------------
 1835|      1|            {
 1836|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1837|      1|                return;
 1838|      1|            }
 1839|       |
 1840|  21.2k|            phi::i32 address = optional_address.value();
 1841|       |
 1842|  21.2k|            const auto& src_reg = arg2.AsRegisterInt();
 1843|       |
 1844|  21.2k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1845|       |
 1846|  21.2k|            phi::boolean success = processor.GetMemory().StoreWord(
 1847|  21.2k|                    static_cast<std::size_t>(address.unsafe()), value);
 1848|       |
 1849|  21.2k|            if (!success)
  ------------------
  |  Branch (1849:17): [True: 2, False: 21.2k]
  ------------------
 1850|      2|            {
 1851|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1852|      2|                DLX_ERROR("Failed to store word at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1853|      2|            }
 1854|  21.2k|        }
_ZN3dlx4impl3SWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1858|  17.9k|        {
 1859|  17.9k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1860|       |
 1861|  17.9k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1861:17): [True: 1, False: 17.9k]
  ------------------
 1862|      1|            {
 1863|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1864|      1|                return;
 1865|      1|            }
 1866|       |
 1867|  17.9k|            phi::i32 address = optional_address.value();
 1868|       |
 1869|  17.9k|            const auto& src_reg = arg2.AsRegisterInt();
 1870|       |
 1871|  17.9k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1872|       |
 1873|  17.9k|            phi::boolean success = processor.GetMemory().StoreUnsignedWord(
 1874|  17.9k|                    static_cast<std::size_t>(address.unsafe()), value);
 1875|       |
 1876|  17.9k|            if (!success)
  ------------------
  |  Branch (1876:17): [True: 3, False: 17.9k]
  ------------------
 1877|      3|            {
 1878|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1879|      3|                DLX_ERROR("Failed to store unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1880|      3|            }
 1881|  17.9k|        }
_ZN3dlx4impl2SFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1885|  18.3k|        {
 1886|  18.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1887|       |
 1888|  18.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1888:17): [True: 1, False: 18.3k]
  ------------------
 1889|      1|            {
 1890|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1891|      1|                return;
 1892|      1|            }
 1893|       |
 1894|  18.3k|            phi::i32 address = optional_address.value();
 1895|       |
 1896|  18.3k|            const auto& src_reg = arg2.AsRegisterFloat();
 1897|       |
 1898|  18.3k|            phi::f32 value = processor.FloatRegisterGetFloatValue(src_reg.register_id);
 1899|       |
 1900|  18.3k|            phi::boolean success = processor.GetMemory().StoreFloat(
 1901|  18.3k|                    static_cast<std::size_t>(address.unsafe()), value);
 1902|       |
 1903|  18.3k|            if (!success)
  ------------------
  |  Branch (1903:17): [True: 4, False: 18.3k]
  ------------------
 1904|      4|            {
 1905|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1906|      4|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1907|      4|            }
 1908|  18.3k|        }
_ZN3dlx4impl2SDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1912|  22.5k|        {
 1913|  22.5k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1914|       |
 1915|  22.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1915:17): [True: 2, False: 22.5k]
  ------------------
 1916|      2|            {
 1917|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1918|      2|                return;
 1919|      2|            }
 1920|       |
 1921|  22.5k|            phi::i32 address = optional_address.value();
 1922|       |
 1923|  22.5k|            const auto& src_reg = arg2.AsRegisterFloat();
 1924|       |
 1925|  22.5k|            phi::f64 value = processor.FloatRegisterGetDoubleValue(src_reg.register_id);
 1926|       |
 1927|  22.5k|            phi::boolean success = processor.GetMemory().StoreDouble(
 1928|  22.5k|                    static_cast<std::size_t>(address.unsafe()), value);
 1929|       |
 1930|  22.5k|            if (!success)
  ------------------
  |  Branch (1930:17): [True: 4, False: 22.5k]
  ------------------
 1931|      4|            {
 1932|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1933|      4|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1934|      4|            }
 1935|  22.5k|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1939|  19.0k|        {
 1940|  19.0k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1941|  19.0k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1942|       |
 1943|  19.0k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1944|       |
 1945|  19.0k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1946|  19.0k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1950|  28.7k|        {
 1951|  28.7k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1952|  28.7k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1953|       |
 1954|  28.7k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1955|       |
 1956|  28.7k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1957|  28.7k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1988|  17.6k|        {
 1989|  17.6k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1990|  17.6k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1991|       |
 1992|  17.6k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1993|       |
 1994|  17.6k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 1995|  17.6k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1999|  12.2k|        {
 2000|  12.2k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2001|  12.2k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2002|       |
 2003|  12.2k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2004|  12.2k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2005|  12.2k|            const float        converted_value_float =
 2006|  12.2k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2007|       |
 2008|  12.2k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2009|  12.2k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2013|  24.3k|        {
 2014|  24.3k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2015|  24.3k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2016|       |
 2017|  24.3k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2018|  24.3k|            const float  converted_value = static_cast<float>(src_value);
 2019|       |
 2020|  24.3k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2021|  24.3k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2025|  15.1k|        {
 2026|  15.1k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2027|  15.1k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2028|       |
 2029|  15.1k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2030|  15.1k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2031|  15.1k|            const float        converted_value_float =
 2032|  15.1k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2033|       |
 2034|  15.1k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2035|  15.1k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2039|  37.9k|        {
 2040|  37.9k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2041|  37.9k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2042|       |
 2043|  37.9k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2044|  37.9k|            const std::int32_t converted_value_int =
 2045|  37.9k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2046|  37.9k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2047|       |
 2048|  37.9k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2049|  37.9k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2053|  24.3k|        {
 2054|  24.3k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2055|  24.3k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2056|       |
 2057|  24.3k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2058|  24.3k|            const std::int32_t converted_value_int =
 2059|  24.3k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2060|  24.3k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2061|       |
 2062|  24.3k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2063|  24.3k|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2067|      1|        {
 2068|      1|            processor.Raise(Exception::Trap);
 2069|      1|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2073|      2|        {
 2074|      2|            processor.Raise(Exception::Halt);
 2075|      2|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2079|  2.66M|        {
 2080|       |            /* Do nothing */
 2081|  2.66M|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  169|   182k|    {
  170|   182k|        phi::i64 res = phi::i64(lhs) + rhs;
  171|       |
  172|   182k|        SafeWriteInteger(processor, dest_reg, res);
  173|   182k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  124|  1.96M|    {
  125|  1.96M|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  126|  1.96M|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  127|       |
  128|       |        // Check for underflow
  129|  1.96M|        if (value < min)
  ------------------
  |  Branch (129:13): [True: 130k, False: 1.82M]
  ------------------
  130|   130k|        {
  131|   130k|            processor.Raise(Exception::Underflow);
  132|       |
  133|   130k|            value = max + (value % (min - 1));
  134|   130k|        }
  135|       |        // Check for overflow
  136|  1.82M|        else if (value > max)
  ------------------
  |  Branch (136:18): [True: 253k, False: 1.57M]
  ------------------
  137|   253k|        {
  138|   253k|            processor.Raise(Exception::Overflow);
  139|       |
  140|   253k|            value = min + (value % (max + 1));
  141|   253k|        }
  142|       |
  143|  1.96M|        PHI_ASSERT(value >= min);
  144|  1.96M|        PHI_ASSERT(value <= max);
  145|       |
  146|  1.96M|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  147|  1.96M|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  177|   172k|    {
  178|   172k|        phi::u64 res = phi::u64(lhs) + rhs;
  179|       |
  180|   172k|        SafeWriteInteger(processor, dest_reg, res);
  181|   172k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  151|   467k|    {
  152|   467k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  153|       |
  154|       |        // Check for overflow
  155|   467k|        if (value > max)
  ------------------
  |  Branch (155:13): [True: 51.7k, False: 415k]
  ------------------
  156|  51.7k|        {
  157|  51.7k|            processor.Raise(Exception::Overflow);
  158|       |
  159|  51.7k|            value %= max + 1u;
  160|  51.7k|        }
  161|       |
  162|   467k|        PHI_ASSERT(value <= max);
  163|       |
  164|   467k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  165|   467k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  185|  1.43M|    {
  186|  1.43M|        phi::i64 res = phi::i64(lhs) - rhs;
  187|       |
  188|  1.43M|        SafeWriteInteger(processor, dest_reg, res);
  189|  1.43M|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  193|   177k|    {
  194|   177k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  195|       |
  196|   177k|        if (lhs < rhs)
  ------------------
  |  Branch (196:13): [True: 46.7k, False: 131k]
  ------------------
  197|  46.7k|        {
  198|  46.7k|            processor.Raise(Exception::Underflow);
  199|       |
  200|  46.7k|            phi::u64 res = max - rhs + lhs + 1u;
  201|  46.7k|            SafeWriteInteger(processor, dest_reg, res);
  202|  46.7k|            return;
  203|  46.7k|        }
  204|       |
  205|   131k|        phi::u64 res = phi::u64(lhs) - rhs;
  206|       |
  207|   131k|        SafeWriteInteger(processor, dest_reg, res);
  208|   131k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  212|   275k|    {
  213|   275k|        phi::i64 res = phi::i64(lhs) * rhs;
  214|       |
  215|   275k|        SafeWriteInteger(processor, dest_reg, res);
  216|   275k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  220|  78.9k|    {
  221|  78.9k|        phi::u64 res = phi::u64(lhs) * rhs;
  222|       |
  223|  78.9k|        SafeWriteInteger(processor, dest_reg, res);
  224|  78.9k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  228|  67.0k|    {
  229|  67.0k|        if (rhs == 0)
  ------------------
  |  Branch (229:13): [True: 8, False: 67.0k]
  ------------------
  230|      8|        {
  231|      8|            processor.Raise(Exception::DivideByZero);
  232|      8|            return;
  233|      8|        }
  234|       |
  235|  67.0k|        phi::i64 res = phi::i64(lhs) / rhs;
  236|       |
  237|  67.0k|        SafeWriteInteger(processor, dest_reg, res);
  238|  67.0k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  242|  38.0k|    {
  243|  38.0k|        if (rhs == 0u)
  ------------------
  |  Branch (243:13): [True: 3, False: 38.0k]
  ------------------
  244|      3|        {
  245|      3|            processor.Raise(Exception::DivideByZero);
  246|      3|            return;
  247|      3|        }
  248|       |
  249|  38.0k|        phi::u64 res = phi::u64(lhs) / rhs;
  250|       |
  251|  38.0k|        SafeWriteInteger(processor, dest_reg, res);
  252|  38.0k|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  325|   321k|    {
  326|   321k|        if (shift > 31)
  ------------------
  |  Branch (326:13): [True: 83.7k, False: 238k]
  ------------------
  327|  83.7k|        {
  328|  83.7k|            processor.Raise(Exception::BadShift);
  329|       |
  330|       |            // Just set register to 0
  331|  83.7k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  332|  83.7k|            return;
  333|  83.7k|        }
  334|       |
  335|       |        // Negative shifts are undefined behavior
  336|   238k|        if (shift < 0)
  ------------------
  |  Branch (336:13): [True: 78.4k, False: 159k]
  ------------------
  337|  78.4k|        {
  338|  78.4k|            processor.Raise(Exception::BadShift);
  339|  78.4k|            return;
  340|  78.4k|        }
  341|       |
  342|   159k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  343|       |
  344|   159k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  345|   159k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  256|   220k|    {
  257|       |        // Prevent undefined behavior by shifting by more than 31
  258|   220k|        if (shift > 31)
  ------------------
  |  Branch (258:13): [True: 69.3k, False: 150k]
  ------------------
  259|  69.3k|        {
  260|  69.3k|            processor.Raise(Exception::BadShift);
  261|       |
  262|       |            // Just set register to 0
  263|  69.3k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  264|  69.3k|            return;
  265|  69.3k|        }
  266|       |
  267|       |        // Do nothing when shifting by zero to prevent undefined behavior
  268|   150k|        if (shift == 0)
  ------------------
  |  Branch (268:13): [True: 59.2k, False: 91.4k]
  ------------------
  269|  59.2k|        {
  270|  59.2k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  271|  59.2k|            return;
  272|  59.2k|        }
  273|       |
  274|       |        // Negative shifts are undefiend behavior
  275|  91.4k|        if (shift < 0)
  ------------------
  |  Branch (275:13): [True: 29.8k, False: 61.5k]
  ------------------
  276|  29.8k|        {
  277|  29.8k|            processor.Raise(Exception::BadShift);
  278|  29.8k|            return;
  279|  29.8k|        }
  280|       |
  281|  61.5k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  282|       |
  283|  61.5k|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  284|       |
  285|  61.5k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  286|  61.5k|    }
InstructionImplementation.cpp:_ZN3dlxL16clear_top_n_bitsEii:
   29|  61.5k|    {
   30|  61.5k|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behavior");
   31|       |
   32|  61.5k|        return value & ~(-1 << (32 - n));
   33|  61.5k|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  290|   166k|    {
  291|       |        // Prevent undefined behavior by shifting by more than 31
  292|   166k|        if (shift > 31)
  ------------------
  |  Branch (292:13): [True: 43.8k, False: 122k]
  ------------------
  293|  43.8k|        {
  294|  43.8k|            processor.Raise(Exception::BadShift);
  295|       |
  296|       |            // Is negative ie. sign bit is set
  297|  43.8k|            if (base < 0)
  ------------------
  |  Branch (297:17): [True: 9.50k, False: 34.3k]
  ------------------
  298|  9.50k|            {
  299|       |                // Set every byte to 1
  300|  9.50k|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  301|  9.50k|            }
  302|  34.3k|            else
  303|  34.3k|            {
  304|       |                // Set every byte to 0
  305|  34.3k|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  306|  34.3k|            }
  307|  43.8k|            return;
  308|  43.8k|        }
  309|       |
  310|       |        // Negative shifts are undefined behavior
  311|   122k|        if (shift < 0)
  ------------------
  |  Branch (311:13): [True: 55.4k, False: 66.8k]
  ------------------
  312|  55.4k|        {
  313|  55.4k|            processor.Raise(Exception::BadShift);
  314|  55.4k|            return;
  315|  55.4k|        }
  316|       |
  317|  66.8k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  318|       |
  319|  66.8k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  320|  66.8k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|   533k|    {
   39|       |        // Lookup the label
   40|   533k|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|   533k|        PHI_ASSERT(program != nullptr);
   42|   533k|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|   533k|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 132, False: 532k]
  ------------------
   45|    132|        {
   46|    132|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|    132|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|    132|            processor.Raise(Exception::UnknownLabel);
   48|    132|            return;
   49|    132|        }
   50|       |
   51|   532k|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|   532k|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|   532k|        processor.SetNextProgramCounter(jump_point);
   56|   532k|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|  2.56M|    {
   60|  2.56M|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|  2.56M|        phi::u32 max_address =
   63|  2.56M|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|  2.56M|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 61, False: 2.56M]
  ------------------
   65|     61|        {
   66|     61|            processor.Raise(Exception::AddressOutOfBounds);
   67|     61|            return;
   68|     61|        }
   69|       |
   70|  2.56M|        processor.SetNextProgramCounter(address.unsafe());
   71|  2.56M|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
  100|   489k|    {
  101|   489k|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (101:13): [True: 489k, False: 14]
  ------------------
  102|   489k|        {
  103|   489k|            const auto& imm_value = argument.AsImmediateValue();
  104|       |
  105|   489k|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (105:17): [True: 16, False: 489k]
  ------------------
  106|     16|            {
  107|     16|                return {};
  108|     16|            }
  109|       |
  110|   489k|            return imm_value.signed_value;
  111|   489k|        }
  112|       |
  113|     14|        PHI_ASSERT(argument.GetType() == ArgumentType::AddressDisplacement);
  114|       |
  115|     14|        const auto& adr_displacement = argument.AsAddressDisplacement();
  116|     14|        return CalculateDisplacementAddress(processor, adr_displacement);
  117|   489k|    }
InstructionImplementation.cpp:_ZN3dlxL28CalculateDisplacementAddressERNS_9ProcessorERKNS_19InstructionArgument19AddressDisplacementE:
   78|     14|    {
   79|     14|        phi::i32 register_value = processor.IntRegisterGetSignedValue(adr_displacement.register_id);
   80|       |
   81|     14|        phi::i32 address = adr_displacement.displacement + register_value;
   82|       |
   83|     14|        if (address < 0)
  ------------------
  |  Branch (83:13): [True: 1, False: 13]
  ------------------
   84|      1|        {
   85|      1|            processor.Raise(Exception::AddressOutOfBounds);
   86|      1|            return {};
   87|      1|        }
   88|       |
   89|     13|        return address;
   90|     14|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  12.3M|    {
   12|  12.3M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  12.3M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  12.3M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  12.3M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  12.3M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  12.3M|                   "Unexpected argument type for arg1");
   22|  12.3M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  12.3M|                   "Unexpected argument type for arg2");
   24|  12.3M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  12.3M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  12.3M|        m_Executor(processor, arg1, arg2, arg3);
   29|  12.3M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   310k|    {
  453|   310k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   310k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|  4.10M|    {
   17|  4.10M|        m_ValueSigned = val;
   18|  4.10M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|   448k|    {
   22|   448k|        m_ValueUnsigned = val;
   23|   448k|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|  7.58M|    {
   27|  7.58M|        return m_ValueSigned;
   28|  7.58M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  3.72M|    {
   32|  3.72M|        return m_ValueUnsigned;
   33|  3.72M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  5.17M|    {
   37|  5.17M|        return m_IsReadOnly;
   38|  5.17M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   21|  63.4k|    {
   22|  63.4k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (22:13): [True: 2, False: 63.4k]
  ------------------
   23|      2|        {
   24|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   25|      2|            return {};
   26|      2|        }
   27|       |
   28|  63.4k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   29|       |
   30|  63.4k|        return m_Values[raw_address].signed_value;
   31|  63.4k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   34|  85.1k|    {
   35|  85.1k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (35:13): [True: 2, False: 85.1k]
  ------------------
   36|      2|        {
   37|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   38|      2|            return {};
   39|      2|        }
   40|       |
   41|  85.1k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   42|  85.1k|        return m_Values[raw_address].unsigned_value;
   43|  85.1k|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   46|  24.3k|    {
   47|  24.3k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (47:13): [True: 3, False: 24.3k]
  ------------------
   48|      3|        {
   49|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   50|      3|            return {};
   51|      3|        }
   52|       |
   53|  24.3k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   54|       |
   55|  24.3k|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (55:13): [True: 1, False: 24.3k]
  ------------------
   56|      1|        {
   57|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   58|      1|            return {};
   59|      1|        }
   60|       |
   61|  24.3k|        return *reinterpret_cast<const std::int16_t*>(&m_Values[raw_address].signed_value);
   62|  24.3k|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   65|  46.9k|    {
   66|  46.9k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (66:13): [True: 14, False: 46.9k]
  ------------------
   67|     14|        {
   68|     14|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|     14|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|     14|            return {};
   70|     14|        }
   71|       |
   72|  46.9k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   73|       |
   74|  46.9k|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (74:13): [True: 1, False: 46.9k]
  ------------------
   75|      1|        {
   76|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   77|      1|            return {};
   78|      1|        }
   79|       |
   80|  46.9k|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[raw_address].unsigned_value);
   81|  46.9k|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   84|  18.2k|    {
   85|  18.2k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (85:13): [True: 2, False: 18.2k]
  ------------------
   86|      2|        {
   87|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   88|      2|            return {};
   89|      2|        }
   90|       |
   91|  18.2k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   92|       |
   93|  18.2k|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (93:13): [True: 1, False: 18.2k]
  ------------------
   94|      1|        {
   95|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   96|      1|            return {};
   97|      1|        }
   98|       |
   99|  18.2k|        return *reinterpret_cast<const std::int32_t*>(&m_Values[raw_address].signed_value);
  100|  18.2k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
  103|  15.4k|    {
  104|  15.4k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (104:13): [True: 2, False: 15.4k]
  ------------------
  105|      2|        {
  106|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  107|      2|            return {};
  108|      2|        }
  109|       |
  110|  15.4k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  111|       |
  112|  15.4k|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (112:13): [True: 1, False: 15.4k]
  ------------------
  113|      1|        {
  114|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|      1|            return {};
  116|      1|        }
  117|       |
  118|  15.4k|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[raw_address].unsigned_value);
  119|  15.4k|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  122|  16.5k|    {
  123|  16.5k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (123:13): [True: 4, False: 16.5k]
  ------------------
  124|      4|        {
  125|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  126|      4|            return {};
  127|      4|        }
  128|       |
  129|  16.5k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  130|       |
  131|  16.5k|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (131:13): [True: 1, False: 16.5k]
  ------------------
  132|      1|        {
  133|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  134|      1|            return {};
  135|      1|        }
  136|       |
  137|  16.5k|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  138|  16.5k|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  141|  38.5k|    {
  142|  38.5k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (142:13): [True: 4, False: 38.5k]
  ------------------
  143|      4|        {
  144|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  145|      4|            return {};
  146|      4|        }
  147|       |
  148|  38.5k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  149|       |
  150|  38.5k|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (150:13): [True: 1, False: 38.5k]
  ------------------
  151|      1|        {
  152|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  153|      1|            return {};
  154|      1|        }
  155|       |
  156|  38.5k|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  157|  38.5k|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  160|  24.6k|    {
  161|  24.6k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (161:13): [True: 5, False: 24.6k]
  ------------------
  162|      5|        {
  163|      5|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  164|      5|            return false;
  165|      5|        }
  166|       |
  167|  24.6k|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  168|  24.6k|        return true;
  169|  24.6k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedByteEN3phi7integerImEENS2_IhEE:
  172|  26.1k|    {
  173|  26.1k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (173:13): [True: 4, False: 26.1k]
  ------------------
  174|      4|        {
  175|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  176|      4|            return false;
  177|      4|        }
  178|       |
  179|  26.1k|        m_Values[(address - m_StartingAddress).unsafe()].unsigned_value = value.unsafe();
  180|  26.1k|        return true;
  181|  26.1k|    }
_ZN3dlx11MemoryBlock13StoreHalfWordEN3phi7integerImEENS2_IsEE:
  184|  25.3k|    {
  185|  25.3k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (185:13): [True: 3, False: 25.3k]
  ------------------
  186|      3|        {
  187|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  188|      3|            return false;
  189|      3|        }
  190|       |
  191|  25.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  192|  25.3k|        *reinterpret_cast<std::int16_t*>(&m_Values[index].signed_value) = value.unsafe();
  193|       |
  194|  25.3k|        return true;
  195|  25.3k|    }
_ZN3dlx11MemoryBlock21StoreUnsignedHalfWordEN3phi7integerImEENS2_ItEE:
  198|  24.3k|    {
  199|  24.3k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (199:13): [True: 3, False: 24.3k]
  ------------------
  200|      3|        {
  201|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  202|      3|            return false;
  203|      3|        }
  204|       |
  205|  24.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  206|  24.3k|        *reinterpret_cast<std::uint16_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  207|       |
  208|  24.3k|        return true;
  209|  24.3k|    }
_ZN3dlx11MemoryBlock9StoreWordEN3phi7integerImEENS2_IiEE:
  212|  21.2k|    {
  213|  21.2k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (213:13): [True: 2, False: 21.2k]
  ------------------
  214|      2|        {
  215|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  216|      2|            return false;
  217|      2|        }
  218|       |
  219|  21.2k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  220|  21.2k|        *reinterpret_cast<std::int32_t*>(&m_Values[index].signed_value) = value.unsafe();
  221|       |
  222|  21.2k|        return true;
  223|  21.2k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedWordEN3phi7integerImEENS2_IjEE:
  226|  17.9k|    {
  227|  17.9k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (227:13): [True: 3, False: 17.9k]
  ------------------
  228|      3|        {
  229|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  230|      3|            return false;
  231|      3|        }
  232|       |
  233|  17.9k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  234|  17.9k|        *reinterpret_cast<std::uint32_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  235|       |
  236|  17.9k|        return true;
  237|  17.9k|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  240|  18.3k|    {
  241|  18.3k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (241:13): [True: 4, False: 18.3k]
  ------------------
  242|      4|        {
  243|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  244|      4|            return false;
  245|      4|        }
  246|       |
  247|  18.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  248|  18.3k|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  249|       |
  250|  18.3k|        return true;
  251|  18.3k|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  254|  22.5k|    {
  255|  22.5k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (255:13): [True: 4, False: 22.5k]
  ------------------
  256|      4|        {
  257|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  258|      4|            return false;
  259|      4|        }
  260|       |
  261|  22.5k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  262|  22.5k|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  263|       |
  264|  22.5k|        return true;
  265|  22.5k|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  268|   489k|    {
  269|       |        // Cannot access anything before the starting address
  270|   489k|        if (address < m_StartingAddress)
  ------------------
  |  Branch (270:13): [True: 45, False: 489k]
  ------------------
  271|     45|        {
  272|     45|            return false;
  273|     45|        }
  274|       |
  275|       |        // Check if addres + size will overflow
  276|   489k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (276:13): [True: 0, False: 489k]
  ------------------
  277|   489k|                                             address.unsafe(), size.unsafe()))
  278|      0|        {
  279|      0|            return false;
  280|      0|        }
  281|       |
  282|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  283|   489k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (283:13): [True: 0, False: 489k]
  ------------------
  284|   489k|                                             m_StartingAddress.unsafe(), m_Values.size()))
  285|      0|        {
  286|      0|            return false;
  287|      0|        }
  288|       |
  289|       |        // Check if address is out of bounds
  290|   489k|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (290:13): [True: 16, False: 489k]
  ------------------
  291|     16|        {
  292|     16|            return false;
  293|     16|        }
  294|       |
  295|       |        // Otherwise this is a valid address
  296|   489k|        return true;
  297|   489k|    }
_ZN3dlx11MemoryBlock25IsAddressAlignedCorrectlyEN3phi7integerImEES3_:
  301|   160k|    {
  302|   160k|        return size != 0u && (address % size) == 0u;
  ------------------
  |  Branch (302:16): [True: 160k, False: 0]
  |  Branch (302:30): [True: 160k, False: 6]
  ------------------
  303|   160k|    }
_ZN3dlx11MemoryBlock5ClearEv:
  306|  20.3k|    {
  307|  20.3k|        for (auto& val : m_Values)
  ------------------
  |  Branch (307:24): [True: 20.3M, False: 20.3k]
  ------------------
  308|  20.3M|        {
  309|  20.3M|            val.signed_value = 0;
  310|  20.3M|        }
  311|  20.3k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|  3.20M|    {
   24|  3.20M|        switch (token.length())
   25|  3.20M|        {
   26|       |            // 1 character OpCodes
   27|   489k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 489k, False: 2.71M]
  ------------------
   28|   489k|                char c1 = token[0];
   29|   489k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 124k, False: 365k]
  ------------------
   30|   124k|                {
   31|   124k|                    return OpCode::J;
   32|   124k|                }
   33|   365k|                break;
   34|   489k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|   503k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 503k, False: 2.70M]
  ------------------
   38|   503k|                char c1 = token[0];
   39|   503k|                char c2 = token[1];
   40|       |
   41|   503k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 306k, False: 197k]
  ------------------
   42|   503k|                {
   43|  8.66k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 8.66k, False: 494k]
  ------------------
   44|  15.2k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 6.58k, False: 496k]
  ------------------
   45|  15.2k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 4.33k, False: 10.9k]
  ------------------
   46|  4.33k|                        {
   47|  4.33k|                            return OpCode::JR;
   48|  4.33k|                        }
   49|  10.9k|                        break;
   50|       |
   51|  33.1k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 33.1k, False: 470k]
  ------------------
   52|  46.8k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 13.7k, False: 489k]
  ------------------
   53|  46.8k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 18.8k, False: 27.9k]
  ------------------
   54|  46.8k|                        {
   55|  5.80k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 5.80k, False: 41.0k]
  ------------------
   56|  6.14k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 336, False: 46.4k]
  ------------------
   57|  6.14k|                                return OpCode::LB;
   58|  2.61k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 2.61k, False: 44.2k]
  ------------------
   59|  3.56k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 946, False: 45.8k]
  ------------------
   60|  3.56k|                                return OpCode::LD;
   61|  7.03k|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 7.03k, False: 39.8k]
  ------------------
   62|  9.60k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 2.57k, False: 44.2k]
  ------------------
   63|  9.60k|                                return OpCode::LF;
   64|  1.51k|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 1.51k, False: 45.3k]
  ------------------
   65|  2.58k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 1.06k, False: 45.7k]
  ------------------
   66|  2.58k|                                return OpCode::LH;
   67|  3.99k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 3.99k, False: 42.8k]
  ------------------
   68|  6.09k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 2.09k, False: 44.7k]
  ------------------
   69|  6.09k|                                return OpCode::LW;
   70|  46.8k|                        }
   71|  18.8k|                        break;
   72|  18.8k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 7.68k, False: 495k]
  ------------------
   73|  22.9k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 15.3k, False: 488k]
  ------------------
   74|  22.9k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 10.4k, False: 12.5k]
  ------------------
   75|  10.4k|                        {
   76|  10.4k|                            return OpCode::OR;
   77|  10.4k|                        }
   78|  12.5k|                        break;
   79|  84.8k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 84.8k, False: 418k]
  ------------------
   80|   112k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 27.2k, False: 476k]
  ------------------
   81|   112k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 29.6k, False: 82.4k]
  ------------------
   82|   112k|                        {
   83|  7.91k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 7.91k, False: 104k]
  ------------------
   84|  37.2k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 29.3k, False: 82.7k]
  ------------------
   85|  37.2k|                                return OpCode::SB;
   86|  4.37k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 4.37k, False: 107k]
  ------------------
   87|  12.1k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 7.78k, False: 104k]
  ------------------
   88|  12.1k|                                return OpCode::SD;
   89|  4.62k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 4.62k, False: 107k]
  ------------------
   90|  21.3k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 16.7k, False: 95.4k]
  ------------------
   91|  21.3k|                                return OpCode::SF;
   92|  2.20k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 2.20k, False: 109k]
  ------------------
   93|  7.57k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 5.37k, False: 106k]
  ------------------
   94|  7.57k|                                return OpCode::SH;
   95|  1.30k|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 1.30k, False: 110k]
  ------------------
   96|  4.21k|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 2.90k, False: 109k]
  ------------------
   97|  4.21k|                                return OpCode::SW;
   98|   112k|                        }
   99|  29.6k|                        break;
  100|   503k|                }
  101|   378k|                break;
  102|   503k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   759k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 759k, False: 2.44M]
  ------------------
  106|   759k|                char c1 = token[0];
  107|   759k|                char c2 = token[1];
  108|   759k|                char c3 = token[2];
  109|       |
  110|   759k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 213k, False: 546k]
  ------------------
  111|   759k|                {
  112|  8.06k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 8.06k, False: 751k]
  ------------------
  113|  27.7k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 19.6k, False: 739k]
  ------------------
  114|  27.7k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 11.3k, False: 16.4k]
  |  Branch (114:29): [True: 7.80k, False: 19.9k]
  |  Branch (114:45): [True: 7.80k, False: 3.53k]
  ------------------
  115|  7.80k|                        {
  116|  7.80k|                            return OpCode::ADD;
  117|  7.80k|                        }
  118|  19.9k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 14.4k, False: 5.47k]
  |  Branch (118:34): [True: 10.1k, False: 9.83k]
  |  Branch (118:50): [True: 10.1k, False: 4.36k]
  ------------------
  119|  10.1k|                        {
  120|  10.1k|                            return OpCode::AND;
  121|  10.1k|                        }
  122|  9.83k|                        break;
  123|       |
  124|  9.83k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 8.03k, False: 751k]
  ------------------
  125|  26.9k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 18.9k, False: 740k]
  ------------------
  126|  26.9k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 17.2k, False: 9.69k]
  |  Branch (126:29): [True: 7.76k, False: 19.2k]
  |  Branch (126:45): [True: 7.76k, False: 9.52k]
  ------------------
  127|  7.76k|                        {
  128|  7.76k|                            return OpCode::DIV;
  129|  7.76k|                        }
  130|  19.2k|                        break;
  131|       |
  132|  19.2k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 4.13k, False: 755k]
  ------------------
  133|  27.9k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 23.7k, False: 735k]
  ------------------
  134|  27.9k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 22.8k, False: 5.03k]
  ------------------
  135|  22.8k|                        {
  136|  22.8k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 13.3k, False: 9.52k]
  ------------------
  137|  13.3k|                            {
  138|  13.3k|                                return OpCode::EQD;
  139|  13.3k|                            }
  140|  9.52k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 6.23k, False: 3.28k]
  ------------------
  141|  6.23k|                            {
  142|  6.23k|                                return OpCode::EQF;
  143|  6.23k|                            }
  144|  22.8k|                        }
  145|  8.31k|                        break;
  146|       |
  147|  27.5k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 27.5k, False: 732k]
  ------------------
  148|  56.7k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 29.2k, False: 730k]
  ------------------
  149|  56.7k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 22.7k, False: 34.0k]
  ------------------
  150|  22.7k|                        {
  151|  22.7k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 14.6k, False: 8.03k]
  ------------------
  152|  14.6k|                            {
  153|  14.6k|                                return OpCode::GED;
  154|  14.6k|                            }
  155|  8.03k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 5.49k, False: 2.53k]
  ------------------
  156|  5.49k|                            {
  157|  5.49k|                                return OpCode::GEF;
  158|  5.49k|                            }
  159|  22.7k|                        }
  160|  34.0k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 29.3k, False: 4.72k]
  ------------------
  161|  29.3k|                        {
  162|  29.3k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 14.4k, False: 14.8k]
  ------------------
  163|  14.4k|                            {
  164|  14.4k|                                return OpCode::GTD;
  165|  14.4k|                            }
  166|  14.8k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 12.8k, False: 2.01k]
  ------------------
  167|  12.8k|                            {
  168|  12.8k|                                return OpCode::GTF;
  169|  12.8k|                            }
  170|  14.8k|                        }
  171|  9.27k|                        break;
  172|       |
  173|  10.9k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 10.9k, False: 748k]
  ------------------
  174|  16.4k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 5.52k, False: 754k]
  ------------------
  175|  16.4k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 8.24k, False: 8.25k]
  |  Branch (175:29): [True: 3.58k, False: 12.9k]
  |  Branch (175:45): [True: 3.58k, False: 4.66k]
  ------------------
  176|  3.58k|                        {
  177|  3.58k|                            return OpCode::JAL;
  178|  3.58k|                        }
  179|  12.9k|                        break;
  180|       |
  181|  73.8k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 73.8k, False: 685k]
  ------------------
  182|   111k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 37.2k, False: 722k]
  ------------------
  183|   111k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 14.3k, False: 96.7k]
  ------------------
  184|   111k|                        {
  185|  13.6k|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 13.6k, False: 97.4k]
  ------------------
  186|  15.0k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 1.35k, False: 109k]
  ------------------
  187|  15.0k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 7.93k, False: 7.08k]
  ------------------
  188|  7.93k|                                {
  189|  7.93k|                                    return OpCode::LBU;
  190|  7.93k|                                }
  191|  7.08k|                                break;
  192|       |
  193|  7.08k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 3.49k, False: 107k]
  ------------------
  194|  14.9k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 11.4k, False: 99.6k]
  ------------------
  195|  14.9k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 8.42k, False: 6.51k]
  ------------------
  196|  8.42k|                                {
  197|  8.42k|                                    return OpCode::LED;
  198|  8.42k|                                }
  199|  6.51k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 4.25k, False: 2.26k]
  ------------------
  200|  4.25k|                                {
  201|  4.25k|                                    return OpCode::LEF;
  202|  4.25k|                                }
  203|  2.26k|                                break;
  204|       |
  205|  3.91k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 3.91k, False: 107k]
  ------------------
  206|  19.2k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 15.3k, False: 95.7k]
  ------------------
  207|  19.2k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 4.96k, False: 14.2k]
  ------------------
  208|  4.96k|                                {
  209|  4.96k|                                    return OpCode::LHI;
  210|  4.96k|                                }
  211|  14.2k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 11.7k, False: 2.52k]
  ------------------
  212|  11.7k|                                {
  213|  11.7k|                                    return OpCode::LHU;
  214|  11.7k|                                }
  215|  2.52k|                                break;
  216|       |
  217|  23.5k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 23.5k, False: 87.5k]
  ------------------
  218|  32.3k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 8.78k, False: 102k]
  ------------------
  219|  32.3k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 20.9k, False: 11.3k]
  ------------------
  220|  20.9k|                                {
  221|  20.9k|                                    return OpCode::LTD;
  222|  20.9k|                                }
  223|  11.3k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 6.82k, False: 4.57k]
  ------------------
  224|  6.82k|                                {
  225|  6.82k|                                    return OpCode::LTF;
  226|  6.82k|                                }
  227|  4.57k|                                break;
  228|       |
  229|  4.57k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 3.71k, False: 107k]
  ------------------
  230|  15.2k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 11.4k, False: 99.6k]
  ------------------
  231|  15.2k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 12.7k, False: 2.44k]
  ------------------
  232|  12.7k|                                {
  233|  12.7k|                                    return OpCode::LWU;
  234|  12.7k|                                }
  235|  2.44k|                                break;
  236|   111k|                        }
  237|  33.2k|                        break;
  238|       |
  239|  33.2k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 31.2k, False: 728k]
  ------------------
  240|  47.0k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 15.7k, False: 743k]
  ------------------
  241|  47.0k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 22.1k, False: 24.9k]
  ------------------
  242|  22.1k|                        {
  243|  22.1k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 10.1k, False: 12.0k]
  ------------------
  244|  10.1k|                            {
  245|  10.1k|                                return OpCode::NED;
  246|  10.1k|                            }
  247|  12.0k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 3.38k, False: 8.65k]
  ------------------
  248|  3.38k|                            {
  249|  3.38k|                                return OpCode::NEF;
  250|  3.38k|                            }
  251|  22.1k|                        }
  252|  24.9k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 22.1k, False: 2.72k]
  |  Branch (252:34): [True: 13.3k, False: 11.5k]
  |  Branch (252:50): [True: 13.3k, False: 8.86k]
  ------------------
  253|  13.3k|                        {
  254|  13.3k|                            return OpCode::NOP;
  255|  13.3k|                        }
  256|       |
  257|  20.2k|                        break;
  258|       |
  259|  20.2k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 14.8k, False: 744k]
  ------------------
  260|  30.1k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 15.3k, False: 744k]
  ------------------
  261|  30.1k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 20.9k, False: 9.23k]
  |  Branch (261:29): [True: 10.2k, False: 19.9k]
  |  Branch (261:45): [True: 10.2k, False: 10.6k]
  ------------------
  262|  10.2k|                        {
  263|  10.2k|                            return OpCode::ORI;
  264|  10.2k|                        }
  265|  19.9k|                        break;
  266|       |
  267|  72.7k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 72.7k, False: 686k]
  ------------------
  268|   178k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 105k, False: 653k]
  ------------------
  269|   178k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 12.3k, False: 166k]
  ------------------
  270|   178k|                        {
  271|  7.62k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 7.62k, False: 171k]
  ------------------
  272|  27.2k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 19.5k, False: 159k]
  ------------------
  273|  27.2k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 12.6k, False: 14.5k]
  ------------------
  274|  12.6k|                                {
  275|  12.6k|                                    return OpCode::SBU;
  276|  12.6k|                                }
  277|  14.5k|                                break;
  278|       |
  279|  14.5k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 3.80k, False: 174k]
  ------------------
  280|  6.34k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 2.53k, False: 176k]
  ------------------
  281|  6.34k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 2.83k, False: 3.50k]
  ------------------
  282|  2.83k|                                {
  283|  2.83k|                                    return OpCode::SEQ;
  284|  2.83k|                                }
  285|  3.50k|                                break;
  286|       |
  287|  5.52k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 5.52k, False: 173k]
  ------------------
  288|  15.9k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 10.4k, False: 168k]
  ------------------
  289|  15.9k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 5.80k, False: 10.1k]
  ------------------
  290|  5.80k|                                {
  291|  5.80k|                                    return OpCode::SGE;
  292|  5.80k|                                }
  293|  10.1k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 4.20k, False: 5.97k]
  ------------------
  294|  4.20k|                                {
  295|  4.20k|                                    return OpCode::SGT;
  296|  4.20k|                                }
  297|  5.97k|                                break;
  298|       |
  299|  5.97k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 5.27k, False: 173k]
  ------------------
  300|  14.9k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 9.70k, False: 169k]
  ------------------
  301|  14.9k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 12.7k, False: 2.26k]
  ------------------
  302|  12.7k|                                {
  303|  12.7k|                                    return OpCode::SHU;
  304|  12.7k|                                }
  305|  2.26k|                                break;
  306|       |
  307|  26.6k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 26.6k, False: 152k]
  ------------------
  308|  38.8k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 12.2k, False: 166k]
  ------------------
  309|  38.8k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 8.54k, False: 30.3k]
  ------------------
  310|  38.8k|                                {
  311|  2.77k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 2.77k, False: 36.1k]
  ------------------
  312|  9.11k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 6.33k, False: 32.5k]
  ------------------
  313|  9.11k|                                        return OpCode::SLA;
  314|       |
  315|  1.20k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 1.20k, False: 37.6k]
  ------------------
  316|  6.72k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 5.52k, False: 33.3k]
  ------------------
  317|  6.72k|                                        return OpCode::SLE;
  318|       |
  319|  5.10k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 5.10k, False: 33.7k]
  ------------------
  320|  9.90k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 4.80k, False: 34.0k]
  ------------------
  321|  9.90k|                                        return OpCode::SLL;
  322|       |
  323|  2.87k|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 2.87k, False: 36.0k]
  ------------------
  324|  4.59k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 1.72k, False: 37.1k]
  ------------------
  325|  4.59k|                                        return OpCode::SLT;
  326|  38.8k|                                }
  327|  8.54k|                                break;
  328|       |
  329|  11.0k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 11.0k, False: 167k]
  ------------------
  330|  12.6k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 1.59k, False: 177k]
  ------------------
  331|  12.6k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 7.45k, False: 5.17k]
  ------------------
  332|  7.45k|                                {
  333|  7.45k|                                    return OpCode::SNE;
  334|  7.45k|                                }
  335|  5.17k|                                break;
  336|       |
  337|  16.9k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 16.9k, False: 161k]
  ------------------
  338|  22.3k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 5.42k, False: 173k]
  ------------------
  339|  22.3k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 16.0k, False: 6.30k]
  ------------------
  340|  16.0k|                                {
  341|  16.0k|                                    return OpCode::SRA;
  342|  16.0k|                                }
  343|  6.30k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 3.16k, False: 3.14k]
  ------------------
  344|  3.16k|                                {
  345|  3.16k|                                    return OpCode::SRL;
  346|  3.16k|                                }
  347|  3.14k|                                break;
  348|       |
  349|  12.4k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 12.4k, False: 166k]
  ------------------
  350|  15.6k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 3.16k, False: 175k]
  ------------------
  351|  15.6k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 11.4k, False: 4.21k]
  ------------------
  352|  11.4k|                                {
  353|  11.4k|                                    return OpCode::SUB;
  354|  11.4k|                                }
  355|  4.21k|                                break;
  356|       |
  357|  4.97k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 4.97k, False: 173k]
  ------------------
  358|  12.3k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 7.38k, False: 171k]
  ------------------
  359|  12.3k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 7.37k, False: 4.98k]
  ------------------
  360|  7.37k|                                {
  361|  7.37k|                                    return OpCode::SWU;
  362|  7.37k|                                }
  363|  4.98k|                                break;
  364|   178k|                        }
  365|       |
  366|  66.5k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 1.90k, False: 757k]
  ------------------
  367|  88.0k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 21.4k, False: 738k]
  ------------------
  368|  88.0k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 20.0k, False: 68.0k]
  |  Branch (368:29): [True: 11.7k, False: 76.3k]
  |  Branch (368:45): [True: 11.7k, False: 8.28k]
  ------------------
  369|  11.7k|                        {
  370|  11.7k|                            return OpCode::XOR;
  371|  11.7k|                        }
  372|  76.3k|                        break;
  373|   759k|                }
  374|   422k|                break;
  375|   759k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   765k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 765k, False: 2.44M]
  ------------------
  379|   765k|                char c1 = token[0];
  380|   765k|                char c2 = token[1];
  381|   765k|                char c3 = token[2];
  382|   765k|                char c4 = token[3];
  383|       |
  384|   765k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 180k, False: 585k]
  ------------------
  385|   765k|                {
  386|  5.48k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 5.48k, False: 760k]
  ------------------
  387|  59.7k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 54.2k, False: 711k]
  ------------------
  388|  59.7k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 6.04k, False: 53.7k]
  ------------------
  389|  59.7k|                        {
  390|  33.5k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 33.5k, False: 26.1k]
  ------------------
  391|  35.6k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 2.10k, False: 57.6k]
  ------------------
  392|  35.6k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 28.4k, False: 7.20k]
  ------------------
  393|  28.4k|                                {
  394|  28.4k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 1.38k, False: 27.0k]
  ------------------
  395|  28.4k|                                    {
  396|  4.57k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 4.57k, False: 23.9k]
  ------------------
  397|  11.6k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 7.07k, False: 21.4k]
  ------------------
  398|  11.6k|                                            return OpCode::ADDD;
  399|       |
  400|  1.26k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 1.26k, False: 27.2k]
  ------------------
  401|  5.17k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 3.91k, False: 24.5k]
  ------------------
  402|  5.17k|                                            return OpCode::ADDF;
  403|       |
  404|  2.61k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 2.61k, False: 25.8k]
  ------------------
  405|  5.47k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 2.86k, False: 25.6k]
  ------------------
  406|  5.47k|                                            return OpCode::ADDI;
  407|       |
  408|  1.33k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 1.33k, False: 27.1k]
  ------------------
  409|  4.80k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 3.47k, False: 25.0k]
  ------------------
  410|  4.80k|                                            return OpCode::ADDU;
  411|  28.4k|                                    }
  412|  28.4k|                                }
  413|  8.59k|                                break;
  414|       |
  415|  14.6k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 14.6k, False: 45.1k]
  ------------------
  416|  18.0k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 3.37k, False: 56.3k]
  ------------------
  417|  18.0k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 14.5k, False: 3.49k]
  |  Branch (417:37): [True: 9.03k, False: 8.98k]
  |  Branch (417:53): [True: 9.03k, False: 5.49k]
  ------------------
  418|  9.03k|                                {
  419|  9.03k|                                    return OpCode::ANDI;
  420|  9.03k|                                }
  421|       |
  422|  8.98k|                                break;
  423|  59.7k|                        }
  424|  23.6k|                        break;
  425|       |
  426|  23.6k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 23.2k, False: 742k]
  ------------------
  427|  62.9k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 39.7k, False: 725k]
  ------------------
  428|  62.9k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 2.02k, False: 60.9k]
  ------------------
  429|  62.9k|                        {
  430|  14.5k|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 14.5k, False: 48.4k]
  ------------------
  431|  17.3k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 2.82k, False: 60.1k]
  ------------------
  432|  17.3k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 14.0k, False: 3.36k]
  |  Branch (432:37): [True: 7.04k, False: 10.3k]
  |  Branch (432:53): [True: 7.04k, False: 6.98k]
  ------------------
  433|  7.04k|                                {
  434|  7.04k|                                    return OpCode::BEQZ;
  435|  7.04k|                                }
  436|  10.3k|                                break;
  437|       |
  438|  10.3k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 10.3k, False: 52.6k]
  ------------------
  439|  20.5k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 10.2k, False: 52.7k]
  ------------------
  440|  20.5k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 12.9k, False: 7.63k]
  ------------------
  441|  12.9k|                                {
  442|  12.9k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 4.77k, False: 8.12k]
  ------------------
  443|  4.77k|                                    {
  444|  4.77k|                                        return OpCode::BFPF;
  445|  4.77k|                                    }
  446|  8.12k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 4.65k, False: 3.47k]
  ------------------
  447|  4.65k|                                    {
  448|  4.65k|                                        return OpCode::BFPT;
  449|  4.65k|                                    }
  450|  12.9k|                                }
  451|  11.1k|                                break;
  452|       |
  453|  16.9k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 16.9k, False: 45.9k]
  ------------------
  454|  23.0k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 6.03k, False: 56.9k]
  ------------------
  455|  23.0k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 15.7k, False: 7.26k]
  |  Branch (455:37): [True: 11.4k, False: 11.5k]
  |  Branch (455:53): [True: 11.4k, False: 4.27k]
  ------------------
  456|  11.4k|                                {
  457|  11.4k|                                    return OpCode::BNEZ;
  458|  11.4k|                                }
  459|  62.9k|                        }
  460|  35.0k|                        break;
  461|       |
  462|  35.0k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 20.2k, False: 745k]
  ------------------
  463|  60.1k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 39.8k, False: 725k]
  ------------------
  464|  60.1k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 51.5k, False: 8.60k]
  |  Branch (464:29): [True: 45.4k, False: 14.6k]
  |  Branch (464:45): [True: 45.4k, False: 6.08k]
  ------------------
  465|  45.4k|                        {
  466|  45.4k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 9.05k, False: 36.3k]
  ------------------
  467|  45.4k|                            {
  468|  4.38k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 4.38k, False: 41.0k]
  ------------------
  469|  11.3k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 6.91k, False: 38.5k]
  ------------------
  470|  11.3k|                                    return OpCode::DIVD;
  471|       |
  472|  5.54k|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 5.54k, False: 39.9k]
  ------------------
  473|  9.13k|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 3.59k, False: 41.8k]
  ------------------
  474|  9.13k|                                    return OpCode::DIVF;
  475|       |
  476|  2.11k|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 2.11k, False: 43.3k]
  ------------------
  477|  7.48k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 5.37k, False: 40.0k]
  ------------------
  478|  7.48k|                                    return OpCode::DIVI;
  479|       |
  480|  6.50k|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 6.50k, False: 38.9k]
  ------------------
  481|  8.46k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 1.95k, False: 43.4k]
  ------------------
  482|  8.46k|                                    return OpCode::DIVU;
  483|  45.4k|                            }
  484|  45.4k|                        }
  485|  23.7k|                        break;
  486|       |
  487|  23.7k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 19.3k, False: 746k]
  ------------------
  488|  22.4k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 3.14k, False: 762k]
  ------------------
  489|  22.4k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 20.3k, False: 2.14k]
  |  Branch (489:29): [True: 11.3k, False: 11.1k]
  |  Branch (489:45): [True: 17.0k, False: 3.30k]
  |  Branch (489:61): [True: 11.3k, False: 5.67k]
  ------------------
  490|  11.3k|                        {
  491|  11.3k|                            return OpCode::HALT;
  492|  11.3k|                        }
  493|  11.1k|                        break;
  494|       |
  495|  13.6k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 13.6k, False: 752k]
  ------------------
  496|  19.7k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 6.07k, False: 759k]
  ------------------
  497|  19.7k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 13.8k, False: 5.89k]
  |  Branch (497:29): [True: 5.82k, False: 13.9k]
  |  Branch (497:45): [True: 8.13k, False: 5.73k]
  |  Branch (497:61): [True: 5.82k, False: 2.31k]
  ------------------
  498|  5.82k|                        {
  499|  5.82k|                            return OpCode::JALR;
  500|  5.82k|                        }
  501|  13.9k|                        break;
  502|       |
  503|  25.6k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 25.6k, False: 740k]
  ------------------
  504|  39.7k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 14.0k, False: 751k]
  ------------------
  505|  39.7k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 16.0k, False: 23.6k]
  |  Branch (505:29): [True: 11.7k, False: 27.9k]
  |  Branch (505:45): [True: 11.7k, False: 4.32k]
  ------------------
  506|  11.7k|                        {
  507|  11.7k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 3.26k, False: 8.47k]
  ------------------
  508|  3.26k|                            {
  509|  3.26k|                                return OpCode::MOVD;
  510|  3.26k|                            }
  511|  8.47k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 6.69k, False: 1.77k]
  ------------------
  512|  6.69k|                            {
  513|  6.69k|                                return OpCode::MOVF;
  514|  6.69k|                            }
  515|  11.7k|                        }
  516|  27.9k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 19.1k, False: 8.83k]
  |  Branch (516:34): [True: 7.60k, False: 20.3k]
  |  Branch (516:50): [True: 16.5k, False: 2.61k]
  |  Branch (516:66): [True: 7.60k, False: 8.92k]
  ------------------
  517|  7.60k|                        {
  518|  7.60k|                            return OpCode::MULT;
  519|  7.60k|                        }
  520|  22.1k|                        break;
  521|       |
  522|   118k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 118k, False: 647k]
  ------------------
  523|   266k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 147k, False: 617k]
  ------------------
  524|   266k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 13.4k, False: 252k]
  ------------------
  525|   266k|                        {
  526|  21.6k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 21.6k, False: 244k]
  ------------------
  527|  34.7k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 13.0k, False: 253k]
  ------------------
  528|  34.7k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 29.6k, False: 5.10k]
  ------------------
  529|  29.6k|                                {
  530|  29.6k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 13.3k, False: 16.2k]
  ------------------
  531|  13.3k|                                    {
  532|  13.3k|                                        return OpCode::SEQI;
  533|  13.3k|                                    }
  534|  16.2k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 10.7k, False: 5.51k]
  ------------------
  535|  10.7k|                                    {
  536|  10.7k|                                        return OpCode::SEQU;
  537|  10.7k|                                    }
  538|  29.6k|                                }
  539|  10.6k|                                break;
  540|       |
  541|  13.2k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 13.2k, False: 252k]
  ------------------
  542|  37.0k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 23.7k, False: 242k]
  ------------------
  543|  37.0k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 20.5k, False: 16.5k]
  ------------------
  544|  20.5k|                                {
  545|  20.5k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 13.0k, False: 7.51k]
  ------------------
  546|  13.0k|                                    {
  547|  13.0k|                                        return OpCode::SGEI;
  548|  13.0k|                                    }
  549|  7.51k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 5.31k, False: 2.19k]
  ------------------
  550|  5.31k|                                    {
  551|  5.31k|                                        return OpCode::SGEU;
  552|  5.31k|                                    }
  553|  20.5k|                                }
  554|  16.5k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 13.2k, False: 3.30k]
  ------------------
  555|  13.2k|                                {
  556|  13.2k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 6.63k, False: 6.56k]
  ------------------
  557|  6.63k|                                    {
  558|  6.63k|                                        return OpCode::SGTI;
  559|  6.63k|                                    }
  560|  6.56k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 4.32k, False: 2.24k]
  ------------------
  561|  4.32k|                                    {
  562|  4.32k|                                        return OpCode::SGTU;
  563|  4.32k|                                    }
  564|  13.2k|                                }
  565|  7.74k|                                break;
  566|       |
  567|  59.1k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 59.1k, False: 207k]
  ------------------
  568|  79.2k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 20.1k, False: 246k]
  ------------------
  569|  79.2k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 9.49k, False: 69.7k]
  ------------------
  570|  79.2k|                                {
  571|  7.56k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 7.56k, False: 71.6k]
  ------------------
  572|  9.81k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 2.25k, False: 76.9k]
  ------------------
  573|  9.81k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 7.49k, False: 2.31k]
  ------------------
  574|  7.49k|                                        {
  575|  7.49k|                                            return OpCode::SLAI;
  576|  7.49k|                                        }
  577|  2.31k|                                        break;
  578|       |
  579|  16.8k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 16.8k, False: 62.3k]
  ------------------
  580|  19.9k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 3.06k, False: 76.1k]
  ------------------
  581|  19.9k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 6.77k, False: 13.1k]
  ------------------
  582|  6.77k|                                        {
  583|  6.77k|                                            return OpCode::SLEI;
  584|  6.77k|                                        }
  585|  13.1k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 10.0k, False: 3.05k]
  ------------------
  586|  10.0k|                                        {
  587|  10.0k|                                            return OpCode::SLEU;
  588|  10.0k|                                        }
  589|  3.05k|                                        break;
  590|       |
  591|  7.77k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 7.77k, False: 71.4k]
  ------------------
  592|  15.7k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 7.92k, False: 71.2k]
  ------------------
  593|  15.7k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 7.74k, False: 7.96k]
  ------------------
  594|  7.74k|                                        {
  595|  7.74k|                                            return OpCode::SLLI;
  596|  7.74k|                                        }
  597|  7.96k|                                        break;
  598|       |
  599|  8.02k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 8.02k, False: 71.1k]
  ------------------
  600|  24.2k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 16.2k, False: 62.9k]
  ------------------
  601|  24.2k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 8.69k, False: 15.6k]
  ------------------
  602|  8.69k|                                        {
  603|  8.69k|                                            return OpCode::SLTI;
  604|  8.69k|                                        }
  605|  15.6k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 10.9k, False: 4.61k]
  ------------------
  606|  10.9k|                                        {
  607|  10.9k|                                            return OpCode::SLTU;
  608|  10.9k|                                        }
  609|  4.61k|                                        break;
  610|  79.2k|                                }
  611|       |
  612|  47.3k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 19.8k, False: 246k]
  ------------------
  613|  56.0k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 8.72k, False: 257k]
  ------------------
  614|  56.0k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 22.6k, False: 33.4k]
  ------------------
  615|  22.6k|                                {
  616|  22.6k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 3.72k, False: 18.8k]
  ------------------
  617|  3.72k|                                    {
  618|  3.72k|                                        return OpCode::SNEI;
  619|  3.72k|                                    }
  620|  18.8k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 8.85k, False: 10.0k]
  ------------------
  621|  8.85k|                                    {
  622|  8.85k|                                        return OpCode::SNEU;
  623|  8.85k|                                    }
  624|  22.6k|                                }
  625|  43.4k|                                break;
  626|       |
  627|  43.4k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 9.39k, False: 256k]
  ------------------
  628|  26.4k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 17.0k, False: 249k]
  ------------------
  629|  26.4k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 18.0k, False: 8.42k]
  |  Branch (629:37): [True: 12.5k, False: 13.9k]
  |  Branch (629:53): [True: 12.5k, False: 5.49k]
  ------------------
  630|  12.5k|                                {
  631|  12.5k|                                    return OpCode::SRAI;
  632|  12.5k|                                }
  633|  13.9k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 7.38k, False: 6.52k]
  |  Branch (633:42): [True: 6.65k, False: 7.25k]
  |  Branch (633:58): [True: 6.65k, False: 730]
  ------------------
  634|  6.65k|                                {
  635|  6.65k|                                    return OpCode::SRLI;
  636|  6.65k|                                }
  637|  7.25k|                                break;
  638|       |
  639|  29.5k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 29.5k, False: 236k]
  ------------------
  640|  46.6k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 17.1k, False: 249k]
  ------------------
  641|  46.6k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 44.7k, False: 1.87k]
  ------------------
  642|  44.7k|                                {
  643|  44.7k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 3.24k, False: 41.5k]
  ------------------
  644|  44.7k|                                    {
  645|  6.47k|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 6.47k, False: 38.2k]
  ------------------
  646|  11.3k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 4.82k, False: 39.9k]
  ------------------
  647|  11.3k|                                            return OpCode::SUBD;
  648|       |
  649|  2.08k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 2.08k, False: 42.6k]
  ------------------
  650|  9.46k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 7.37k, False: 37.3k]
  ------------------
  651|  9.46k|                                            return OpCode::SUBF;
  652|       |
  653|  7.61k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 7.61k, False: 37.1k]
  ------------------
  654|  14.9k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 7.38k, False: 37.3k]
  ------------------
  655|  14.9k|                                            return OpCode::SUBI;
  656|       |
  657|  4.02k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 4.02k, False: 40.7k]
  ------------------
  658|  5.76k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 1.73k, False: 43.0k]
  ------------------
  659|  5.76k|                                            return OpCode::SUBU;
  660|  44.7k|                                    }
  661|  44.7k|                                }
  662|  5.12k|                                break;
  663|   266k|                        }
  664|  87.7k|                        break;
  665|       |
  666|  87.7k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 22.2k, False: 743k]
  ------------------
  667|  26.7k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 4.55k, False: 761k]
  ------------------
  668|  26.7k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 20.5k, False: 6.19k]
  |  Branch (668:29): [True: 9.09k, False: 17.6k]
  |  Branch (668:45): [True: 13.2k, False: 7.35k]
  |  Branch (668:61): [True: 9.09k, False: 4.14k]
  ------------------
  669|  9.09k|                        {
  670|  9.09k|                            return OpCode::TRAP;
  671|  9.09k|                        }
  672|  17.6k|                        break;
  673|  17.6k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 2.47k, False: 763k]
  ------------------
  674|  27.7k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 25.2k, False: 740k]
  ------------------
  675|  27.7k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 24.4k, False: 3.23k]
  |  Branch (675:29): [True: 4.68k, False: 23.0k]
  |  Branch (675:45): [True: 15.8k, False: 8.62k]
  |  Branch (675:61): [True: 4.68k, False: 11.1k]
  ------------------
  676|  4.68k|                        {
  677|  4.68k|                            return OpCode::XORI;
  678|  4.68k|                        }
  679|  23.0k|                        break;
  680|   765k|                }
  681|   438k|                break;
  682|   765k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|   438k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 331k, False: 2.87M]
  ------------------
  686|   331k|                char c1 = token[0];
  687|   331k|                char c2 = token[1];
  688|   331k|                char c3 = token[2];
  689|   331k|                char c4 = token[3];
  690|   331k|                char c5 = token[4];
  691|       |
  692|   331k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 76.2k, False: 255k]
  ------------------
  693|   331k|                {
  694|  1.67k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 1.67k, False: 329k]
  ------------------
  695|  20.6k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 18.9k, False: 312k]
  ------------------
  696|  20.6k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 17.4k, False: 3.17k]
  |  Branch (696:29): [True: 4.37k, False: 16.2k]
  |  Branch (696:45): [True: 14.4k, False: 2.98k]
  |  Branch (696:61): [True: 8.34k, False: 6.10k]
  |  Branch (696:77): [True: 4.37k, False: 3.96k]
  ------------------
  697|  4.37k|                        {
  698|  4.37k|                            return OpCode::ADDUI;
  699|  4.37k|                        }
  700|  16.2k|                        break;
  701|       |
  702|  23.3k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 23.3k, False: 308k]
  ------------------
  703|  41.9k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 18.5k, False: 312k]
  ------------------
  704|  41.9k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 33.7k, False: 8.19k]
  |  Branch (704:29): [True: 9.36k, False: 32.5k]
  |  Branch (704:45): [True: 32.0k, False: 1.70k]
  |  Branch (704:61): [True: 16.8k, False: 15.1k]
  |  Branch (704:77): [True: 9.36k, False: 7.50k]
  ------------------
  705|  9.36k|                        {
  706|  9.36k|                            return OpCode::DIVUI;
  707|  9.36k|                        }
  708|  32.5k|                        break;
  709|       |
  710|  32.5k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 9.78k, False: 321k]
  ------------------
  711|  49.1k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 39.3k, False: 292k]
  ------------------
  712|  49.1k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 43.7k, False: 5.37k]
  |  Branch (712:29): [True: 34.5k, False: 14.5k]
  |  Branch (712:45): [True: 39.4k, False: 4.33k]
  |  Branch (712:61): [True: 34.5k, False: 4.82k]
  ------------------
  713|  34.5k|                        {
  714|  34.5k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 3.60k, False: 30.9k]
  ------------------
  715|  34.5k|                            {
  716|  3.95k|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 3.95k, False: 30.6k]
  ------------------
  717|  7.25k|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 3.29k, False: 31.2k]
  ------------------
  718|  7.25k|                                    return OpCode::MULTD;
  719|       |
  720|  1.56k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 1.56k, False: 33.0k]
  ------------------
  721|  4.48k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 2.91k, False: 31.6k]
  ------------------
  722|  4.48k|                                    return OpCode::MULTF;
  723|       |
  724|  2.30k|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 2.30k, False: 32.2k]
  ------------------
  725|  5.67k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 3.37k, False: 31.2k]
  ------------------
  726|  5.67k|                                    return OpCode::MULTI;
  727|       |
  728|  5.09k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 5.09k, False: 29.4k]
  ------------------
  729|  13.5k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 8.47k, False: 26.1k]
  ------------------
  730|  13.5k|                                    return OpCode::MULTU;
  731|  34.5k|                            }
  732|  34.5k|                        }
  733|  18.1k|                        break;
  734|       |
  735|  45.6k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 45.6k, False: 285k]
  ------------------
  736|   143k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 97.8k, False: 233k]
  ------------------
  737|   143k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 6.86k, False: 136k]
  ------------------
  738|   143k|                        {
  739|  24.9k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 24.9k, False: 118k]
  ------------------
  740|  33.9k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 9.00k, False: 134k]
  ------------------
  741|  33.9k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 29.2k, False: 4.72k]
  |  Branch (741:37): [True: 15.9k, False: 18.0k]
  |  Branch (741:53): [True: 26.6k, False: 2.57k]
  |  Branch (741:69): [True: 15.9k, False: 10.7k]
  ------------------
  742|  15.9k|                                {
  743|  15.9k|                                    return OpCode::SEQUI;
  744|  15.9k|                                }
  745|  18.0k|                                break;
  746|       |
  747|  18.0k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 9.63k, False: 133k]
  ------------------
  748|  28.2k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 18.6k, False: 124k]
  ------------------
  749|  28.2k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 13.3k, False: 14.9k]
  |  Branch (749:37): [True: 5.50k, False: 22.7k]
  |  Branch (749:53): [True: 8.34k, False: 4.96k]
  |  Branch (749:69): [True: 5.50k, False: 2.83k]
  ------------------
  750|  5.50k|                                {
  751|  5.50k|                                    return OpCode::SGEUI;
  752|  5.50k|                                }
  753|  22.7k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 14.8k, False: 7.94k]
  |  Branch (753:42): [True: 6.47k, False: 16.3k]
  |  Branch (753:58): [True: 9.38k, False: 5.44k]
  |  Branch (753:74): [True: 6.47k, False: 2.91k]
  ------------------
  754|  6.47k|                                {
  755|  6.47k|                                    return OpCode::SGTUI;
  756|  6.47k|                                }
  757|  16.3k|                                break;
  758|       |
  759|  22.1k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 22.1k, False: 121k]
  ------------------
  760|  35.7k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 13.5k, False: 129k]
  ------------------
  761|  35.7k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 14.8k, False: 20.8k]
  |  Branch (761:37): [True: 7.86k, False: 27.8k]
  |  Branch (761:53): [True: 9.14k, False: 5.70k]
  |  Branch (761:69): [True: 7.86k, False: 1.28k]
  ------------------
  762|  7.86k|                                {
  763|  7.86k|                                    return OpCode::SLEUI;
  764|  7.86k|                                }
  765|  27.8k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 18.1k, False: 9.73k]
  |  Branch (765:42): [True: 7.65k, False: 20.2k]
  |  Branch (765:58): [True: 14.1k, False: 3.97k]
  |  Branch (765:74): [True: 7.65k, False: 6.50k]
  ------------------
  766|  7.65k|                                {
  767|  7.65k|                                    return OpCode::SLTUI;
  768|  7.65k|                                }
  769|  20.2k|                                break;
  770|       |
  771|  20.2k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 14.1k, False: 129k]
  ------------------
  772|  20.7k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 6.51k, False: 136k]
  ------------------
  773|  20.7k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 16.9k, False: 3.76k]
  |  Branch (773:37): [True: 6.64k, False: 14.0k]
  |  Branch (773:53): [True: 15.6k, False: 1.28k]
  |  Branch (773:69): [True: 6.64k, False: 9.00k]
  ------------------
  774|  6.64k|                                {
  775|  6.64k|                                    return OpCode::SNEUI;
  776|  6.64k|                                }
  777|  14.0k|                                break;
  778|       |
  779|  14.0k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 9.01k, False: 134k]
  ------------------
  780|  17.9k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 8.91k, False: 134k]
  ------------------
  781|  17.9k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 15.4k, False: 2.50k]
  |  Branch (781:37): [True: 7.22k, False: 10.7k]
  |  Branch (781:53): [True: 8.84k, False: 6.58k]
  |  Branch (781:69): [True: 7.22k, False: 1.61k]
  ------------------
  782|  7.22k|                                {
  783|  7.22k|                                    return OpCode::SUBUI;
  784|  7.22k|                                }
  785|  10.7k|                                break;
  786|   143k|                        }
  787|       |
  788|  86.1k|                        break;
  789|   331k|                }
  790|       |
  791|   229k|                break;
  792|   331k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|   229k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 184k, False: 3.02M]
  ------------------
  796|   184k|                char c1 = token[0];
  797|   184k|                char c2 = token[1];
  798|   184k|                char c3 = token[2];
  799|   184k|                char c4 = token[3];
  800|   184k|                char c5 = token[4];
  801|   184k|                char c6 = token[5];
  802|       |
  803|   184k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 102k, False: 81.9k]
  |  Branch (803:21): [True: 89.8k, False: 94.2k]
  |  Branch (803:37): [True: 92.9k, False: 9.18k]
  |  Branch (803:53): [True: 89.8k, False: 3.14k]
  ------------------
  804|  89.8k|                {
  805|  89.8k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 3.54k, False: 86.2k]
  ------------------
  806|  89.8k|                    {
  807|  9.74k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 9.74k, False: 80.0k]
  ------------------
  808|  26.2k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 16.4k, False: 73.3k]
  ------------------
  809|  26.2k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 20.6k, False: 5.59k]
  ------------------
  810|  20.6k|                            {
  811|  20.6k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 5.28k, False: 15.3k]
  ------------------
  812|  5.28k|                                {
  813|  5.28k|                                    return OpCode::CVTD2F;
  814|  5.28k|                                }
  815|  15.3k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 10.6k, False: 4.68k]
  ------------------
  816|  10.6k|                                {
  817|  10.6k|                                    return OpCode::CVTD2I;
  818|  10.6k|                                }
  819|  20.6k|                            }
  820|  10.2k|                            break;
  821|       |
  822|  24.5k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 24.5k, False: 65.3k]
  ------------------
  823|  28.2k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 3.72k, False: 86.0k]
  ------------------
  824|  28.2k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 22.9k, False: 5.29k]
  ------------------
  825|  22.9k|                            {
  826|  22.9k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 5.60k, False: 17.3k]
  ------------------
  827|  5.60k|                                {
  828|  5.60k|                                    return OpCode::CVTF2D;
  829|  5.60k|                                }
  830|  17.3k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 10.3k, False: 6.93k]
  ------------------
  831|  10.3k|                                {
  832|  10.3k|                                    return OpCode::CVTF2I;
  833|  10.3k|                                }
  834|  22.9k|                            }
  835|  12.2k|                            break;
  836|       |
  837|  27.5k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 27.5k, False: 62.2k]
  ------------------
  838|  31.8k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 4.22k, False: 85.5k]
  ------------------
  839|  31.8k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 27.9k, False: 3.90k]
  ------------------
  840|  27.9k|                            {
  841|  27.9k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 9.18k, False: 18.7k]
  ------------------
  842|  9.18k|                                {
  843|  9.18k|                                    return OpCode::CVTI2D;
  844|  9.18k|                                }
  845|  18.7k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 13.0k, False: 5.69k]
  ------------------
  846|  13.0k|                                {
  847|  13.0k|                                    return OpCode::CVTI2F;
  848|  13.0k|                                }
  849|  27.9k|                            }
  850|  89.8k|                    }
  851|  89.8k|                }
  852|  94.2k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 40.5k, False: 53.7k]
  |  Branch (852:26): [True: 11.8k, False: 82.4k]
  |  Branch (852:42): [True: 31.0k, False: 9.50k]
  |  Branch (852:58): [True: 28.0k, False: 3.06k]
  |  Branch (852:74): [True: 22.5k, False: 5.49k]
  ------------------
  853|  94.2k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 16.5k, False: 5.98k]
  |  Branch (853:42): [True: 11.8k, False: 4.67k]
  ------------------
  854|  11.8k|                {
  855|  11.8k|                    return OpCode::MULTUI;
  856|  11.8k|                }
  857|   118k|                break;
  858|   184k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|   118k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 88.8k, False: 3.12M]
  ------------------
  862|  88.8k|                char c1 = token[0];
  863|  88.8k|                char c2 = token[1];
  864|  88.8k|                char c3 = token[2];
  865|  88.8k|                char c4 = token[3];
  866|  88.8k|                char c5 = token[4];
  867|  88.8k|                char c6 = token[5];
  868|  88.8k|                char c7 = token[6];
  869|       |
  870|  88.8k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 61.6k, False: 27.1k]
  |  Branch (870:21): [True: 49.5k, False: 39.2k]
  |  Branch (870:37): [True: 53.2k, False: 8.45k]
  |  Branch (870:53): [True: 49.5k, False: 3.65k]
  ------------------
  871|  49.5k|                {
  872|  49.5k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 21.9k, False: 27.6k]
  |  Branch (872:25): [True: 9.21k, False: 40.3k]
  |  Branch (872:41): [True: 19.1k, False: 2.74k]
  |  Branch (872:54): [True: 13.2k, False: 5.96k]
  |  Branch (872:70): [True: 9.21k, False: 4.00k]
  ------------------
  873|  9.21k|                    {
  874|  9.21k|                        return OpCode::MOVI2FP;
  875|  9.21k|                    }
  876|  40.3k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 20.6k, False: 19.6k]
  |  Branch (876:30): [True: 9.82k, False: 30.5k]
  |  Branch (876:46): [True: 16.0k, False: 4.57k]
  |  Branch (876:62): [True: 11.5k, False: 4.58k]
  |  Branch (876:75): [True: 9.82k, False: 1.68k]
  ------------------
  877|  9.82k|                    {
  878|  9.82k|                        return OpCode::MOVFP2I;
  879|  9.82k|                    }
  880|  49.5k|                }
  881|  69.8k|                break;
  882|  88.8k|            }
  883|       |
  884|  86.2k|            default: {
  ------------------
  |  Branch (884:13): [True: 86.2k, False: 3.12M]
  ------------------
  885|  86.2k|                break;
  886|  88.8k|            }
  887|  3.20M|        }
  888|       |
  889|       |        // None found
  890|  2.10M|        return OpCode::NONE;
  891|  3.20M|    }
_ZN3dlx3iceEcc:
   17|  4.42M|    {
   18|  4.42M|        constexpr const char diff = 'a' - 'A';
   19|  4.42M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 1.46M, False: 2.95M]
  |  Branch (19:28): [True: 1.22M, False: 1.73M]
  ------------------
   20|  4.42M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  3.53M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  34.5k|    {
  193|  34.5k|        ParseError err;
  194|       |
  195|  34.5k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  34.5k|        err.m_LineNumber                           = line_number;
  197|  34.5k|        err.m_Column                               = column;
  198|  34.5k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  34.5k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  34.5k|        return err;
  202|  34.5k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  34.5k|    {
  207|  34.5k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  34.5k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  34.5k|                                                         actual_type);
  210|  34.5k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|  2.28k|    {
  216|  2.28k|        ParseError err;
  217|       |
  218|  2.28k|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|  2.28k|        err.m_LineNumber        = line_number;
  220|  2.28k|        err.m_Column            = column;
  221|  2.28k|        err.invalid_number.text = text;
  222|       |
  223|  2.28k|        return err;
  224|  2.28k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|  2.28k|    {
  228|  2.28k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|  2.28k|                                                token.GetColumn().unsafe(), token.GetText());
  230|  2.28k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|     31|    {
  235|     31|        ParseError err;
  236|       |
  237|     31|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|     31|        err.m_LineNumber = line_number;
  239|     31|        err.m_Column     = column;
  240|       |
  241|     31|        return err;
  242|     31|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|     31|    {
  247|     31|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|     31|                                                                     token.GetColumn().unsafe());
  249|     31|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|  1.72M|    {
  255|  1.72M|        ParseError err;
  256|       |
  257|  1.72M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|  1.72M|        err.m_LineNumber                   = line_number;
  259|  1.72M|        err.m_Column                       = column;
  260|  1.72M|        err.unexpected_token.expected_type = expected_type;
  261|  1.72M|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|  1.72M|        return err;
  264|  1.72M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|  1.72M|    {
  269|  1.72M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|  1.72M|                                                  token.GetColumn().unsafe(), expected_type,
  271|  1.72M|                                                  token.GetType());
  272|  1.72M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|   307k|    {
  277|   307k|        ParseError err;
  278|       |
  279|   307k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|   307k|        err.m_LineNumber                   = line_number;
  281|   307k|        err.m_Column                       = column;
  282|   307k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|   307k|        return err;
  285|   307k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  2.63k|    {
  289|  2.63k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  2.63k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  2.63k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   616k|    {
  296|   616k|        ParseError err;
  297|       |
  298|   616k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   616k|        err.m_LineNumber                       = line_number;
  300|   616k|        err.m_Column                           = column;
  301|   616k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   616k|        return err;
  304|   616k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   616k|    {
  309|   616k|        return ConstructInvalidLabelIdentifierParseError(
  310|   616k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   616k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|   143k|    {
  317|   143k|        ParseError err;
  318|       |
  319|   143k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|   143k|        err.m_LineNumber                     = line_number;
  321|   143k|        err.m_Column                         = column;
  322|   143k|        err.label_already_defined.label_name = label_name;
  323|   143k|        err.label_already_defined.at_line    = at_line;
  324|   143k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|   143k|        return err;
  327|   143k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|   143k|    {
  332|   143k|        return ConstructLabelAlreadyDefinedParseError(
  333|   143k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|   143k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|   143k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   502k|    {
  340|   502k|        ParseError err;
  341|       |
  342|   502k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   502k|        err.m_LineNumber = line_number;
  344|   502k|        err.m_Column     = column;
  345|       |
  346|   502k|        return err;
  347|   502k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   502k|    {
  352|   502k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   502k|                                                        token.GetColumn().unsafe());
  354|   502k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  80.8k|    {
  360|  80.8k|        ParseError err;
  361|       |
  362|  80.8k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  80.8k|        err.m_LineNumber               = line_number;
  364|  80.8k|        err.m_Column                   = column;
  365|  80.8k|        err.too_few_arguments.required = required;
  366|  80.8k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  80.8k|        return err;
  369|  80.8k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  80.8k|    {
  374|  80.8k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  80.8k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  80.8k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|   105k|    {
  381|   105k|        ParseError err;
  382|       |
  383|   105k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|   105k|        err.m_LineNumber           = line_number;
  385|   105k|        err.m_Column               = column;
  386|   105k|        err.empty_label.label_name = label_name;
  387|       |
  388|   105k|        return err;
  389|   105k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|   105k|    {
  393|   105k|        return ConstructEmptyLabelParseError(
  394|   105k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|   105k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 90.1k, False: 15.1k]
  ------------------
  396|  90.1k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|   105k|                        token.GetText());
  398|   105k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  22.4k|    {
  403|  22.4k|        ParseError err;
  404|       |
  405|  22.4k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  22.4k|        err.m_LineNumber = line_number;
  407|  22.4k|        err.m_Column     = column;
  408|       |
  409|  22.4k|        return err;
  410|  22.4k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  22.4k|    {
  414|  22.4k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  22.4k|                                               token.GetColumn().unsafe());
  416|  22.4k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  3.53M|    {
   19|  3.53M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  3.53M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  20.3k|    {
  182|  20.3k|        ParsedProgram program;
  183|       |
  184|  20.3k|        program.m_Tokens = tokens;
  185|       |
  186|  20.3k|        phi::boolean line_has_instruction{false};
  187|  20.3k|        phi::usize   label_count{0u};
  188|       |
  189|  4.10M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 4.08M, False: 20.3k]
  ------------------
  190|  4.08M|        {
  191|  4.08M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  4.08M|            switch (current_token.GetType())
  196|  4.08M|            {
  197|       |                // Ignore comments
  198|  7.48k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 7.48k, False: 4.08M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  7.48k|                    break;
  201|       |
  202|   497k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 497k, False: 3.59M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   497k|                    line_has_instruction = false;
  205|   497k|                    break;
  206|       |
  207|  1.46M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 1.46M, False: 2.62M]
  ------------------
  208|  1.46M|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 346k, False: 1.11M]
  ------------------
  209|   346k|                    {
  210|   346k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|   346k|                                current_token, Token::Type::NewLine));
  212|   346k|                        break;
  213|   346k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|  1.11M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 401k, False: 717k]
  ------------------
  218|   401k|                    {
  219|   401k|                        program.AddParseError(
  220|   401k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   401k|                        break;
  222|   401k|                    }
  223|       |
  224|   717k|                    std::string_view label_name = current_token.GetText();
  225|   717k|                    label_name.remove_suffix(1);
  226|       |
  227|   717k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 305k, False: 411k]
  ------------------
  228|   305k|                    {
  229|   305k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|   305k|                                current_token.GetLineNumber().unsafe(),
  231|   305k|                                current_token.GetColumn().unsafe(), label_name));
  232|   305k|                        break;
  233|   305k|                    }
  234|       |
  235|   411k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 157k, False: 254k]
  ------------------
  236|   157k|                    {
  237|   157k|                        program.AddParseError(
  238|   157k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|   157k|                        break;
  240|   157k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|   254k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 143k, False: 111k]
  ------------------
  244|   143k|                    {
  245|       |                        // Find first defintions of label
  246|   143k|                        const Token* first_label_definition =
  247|   143k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   143k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|   143k|                                    {
  250|   143k|                                        std::string_view token_label_name = t.GetText();
  251|   143k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   143k|                                        if (token_label_name == label_name)
  254|   143k|                                        {
  255|   143k|                                            return true;
  256|   143k|                                        }
  257|   143k|                                    }
  258|       |
  259|   143k|                                    return false;
  260|   143k|                                });
  261|       |
  262|   143k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|   143k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|   143k|                                current_token, *first_label_definition));
  266|   143k|                        break;
  267|   143k|                    }
  268|       |
  269|   111k|                    program.m_JumpData[label_name] =
  270|   111k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|   111k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|   111k|                    break;
  277|   254k|                }
  278|       |
  279|   812k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 812k, False: 3.27M]
  ------------------
  280|   812k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 502k, False: 310k]
  ------------------
  281|   502k|                    {
  282|   502k|                        program.AddParseError(
  283|   502k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   502k|                        break;
  285|   502k|                    }
  286|       |
  287|   310k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|   310k|                    PHI_ASSERT(current_token.HasHint());
  291|   310k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|   310k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|   310k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|   310k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|   310k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|   310k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|   310k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|   310k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|   310k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   630k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 568k, False: 61.7k]
  ------------------
  313|   568k|                    {
  314|       |                        // Get next token
  315|   568k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 1.37k, False: 567k]
  ------------------
  316|  1.37k|                        {
  317|  1.37k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|  1.37k|                                    current_token, number_of_argument_required.unsafe(),
  319|  1.37k|                                    argument_num.unsafe()));
  320|  1.37k|                            break;
  321|  1.37k|                        }
  322|       |
  323|   567k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   567k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 221k, False: 346k]
  ------------------
  327|   221k|                        {
  328|   221k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 22.4k, False: 198k]
  ------------------
  329|  22.4k|                            {
  330|  22.4k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  22.4k|                            }
  332|       |
  333|   221k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|   221k|                            continue;
  336|   221k|                        }
  337|       |
  338|   346k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 79.4k, False: 266k]
  ------------------
  339|  79.4k|                        {
  340|  79.4k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  79.4k|                                    token, number_of_argument_required.unsafe(),
  342|  79.4k|                                    argument_num.unsafe()));
  343|  79.4k|                            break;
  344|  79.4k|                        }
  345|       |
  346|   266k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|   266k|                                parse_instruction_argument(
  348|   266k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|   266k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 168k, False: 98.5k]
  ------------------
  350|   168k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|   168k|                            break;
  353|   168k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  98.5k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  98.5k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  98.5k|                        argument_num++;
  360|  98.5k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  98.5k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|   310k|                    program.m_Instructions.emplace_back(instruction);
  368|   310k|                    line_has_instruction = true;
  369|   310k|                    break;
  370|   812k|                }
  371|       |
  372|  1.30M|                default:
  ------------------
  |  Branch (372:17): [True: 1.30M, False: 2.78M]
  ------------------
  373|  1.30M|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|  1.30M|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 806k, False: 499k]
  ------------------
  375|   806k|                    {
  376|   806k|                        expected_token_type = Token::Type::NewLine;
  377|   806k|                    }
  378|       |
  379|  1.30M|                    program.AddParseError(
  380|  1.30M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|  1.30M|                    break;
  382|  4.08M|            }
  383|  4.08M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  20.3k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 4.71k, False: 15.6k]
  ------------------
  387|  4.71k|        {
  388|   139k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 135k, False: 4.71k]
  ------------------
  389|   135k|            {
  390|   135k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|   135k|                const Token& token = *it;
  393|   135k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 105k, False: 29.6k]
  ------------------
  394|   105k|                {
  395|   105k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|   105k|                    --label_count;
  397|   105k|                }
  398|   135k|            }
  399|  4.71k|        }
  400|       |
  401|  20.3k|        return program;
  402|  20.3k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  20.3k|    {
  406|  20.3k|        TokenStream tokens = Tokenize(source);
  407|  20.3k|        return Parse(tokens);
  408|  20.3k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|   266k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|   266k|        switch (token.GetType())
   38|   266k|        {
   39|  36.2k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 36.2k, False: 230k]
  ------------------
   40|  36.2k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 2.53k, False: 33.6k]
  ------------------
   41|  36.2k|                                          ArgumentType::AddressDisplacement))
   42|  2.53k|                {
   43|  2.53k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  2.53k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  2.53k|                    return {};
   47|  2.53k|                }
   48|       |
   49|       |                // Get address displacement
   50|  33.6k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  33.6k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  33.6k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 31, False: 33.6k]
  ------------------
   55|     31|                {
   56|     31|                    program.AddParseError(
   57|     31|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|     31|                    return {};
   59|     31|                }
   60|       |
   61|  33.6k|                auto         it           = tokens.current_position();
   62|  33.6k|                const Token& first_token  = tokens.consume();
   63|  33.6k|                const Token& second_token = tokens.consume();
   64|  33.6k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  33.6k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 17.4k, False: 16.2k]
  ------------------
   67|  17.4k|                {
   68|  17.4k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  17.4k|                            first_token, Token::Type::OpenBracket));
   70|  17.4k|                    return {};
   71|  17.4k|                }
   72|       |
   73|       |                // Second token is the register
   74|  16.2k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 4.76k, False: 11.4k]
  ------------------
   75|  4.76k|                {
   76|  4.76k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|  4.76k|                            second_token, Token::Type::RegisterInt));
   78|  4.76k|                    return {};
   79|  4.76k|                }
   80|       |
   81|  11.4k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 2.52k, False: 8.91k]
  ------------------
   82|  2.52k|                {
   83|  2.52k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|  2.52k|                            third_token, Token::Type::ClosingBracket));
   85|  2.52k|                    return {};
   86|  2.52k|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|  8.91k|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|  8.91k|                return ConstructInstructionArgumentAddressDisplacement(
   95|  8.91k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|  11.4k|            }
   97|  32.9k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 32.9k, False: 233k]
  ------------------
   98|  32.9k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 3.77k, False: 29.1k]
  ------------------
   99|  3.77k|                {
  100|  3.77k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  3.77k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  3.77k|                    return {};
  103|  3.77k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  29.1k|                return ConstructInstructionArgumentRegisterInt(
  109|  29.1k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  32.9k|            }
  111|  23.8k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 23.8k, False: 242k]
  ------------------
  112|  23.8k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 4.83k, False: 18.9k]
  ------------------
  113|  4.83k|                {
  114|  4.83k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  4.83k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  4.83k|                    return {};
  117|  4.83k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  18.9k|                return ConstructInstructionArgumentRegisterFloat(
  123|  18.9k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  23.8k|            }
  125|  2.63k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 2.63k, False: 264k]
  ------------------
  126|  2.63k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  2.63k|                return {};
  129|  23.8k|            }
  130|   113k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 113k, False: 153k]
  ------------------
  131|       |                // Parse as Label
  132|   113k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 21.4k, False: 91.8k]
  ------------------
  133|  21.4k|                {
  134|  21.4k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  21.4k|                            token, expected_argument_type, ArgumentType::Label));
  136|  21.4k|                    return {};
  137|  21.4k|                }
  138|       |
  139|  91.8k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 91.8k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  91.8k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 57.7k, False: 34.0k]
  ------------------
  146|  57.7k|                {
  147|  57.7k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  57.7k|                    return {};
  149|  57.7k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  34.0k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  91.8k|            }
  155|  11.6k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 11.6k, False: 255k]
  ------------------
  156|  11.6k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 1.92k, False: 9.73k]
  ------------------
  157|  1.92k|                {
  158|  1.92k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  1.92k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  1.92k|                    return {};
  161|  1.92k|                }
  162|       |
  163|  9.73k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 7.45k, False: 2.28k]
  ------------------
  164|  7.45k|                {
  165|  7.45k|                    return ConstructInstructionArgumentImmediateValue(
  166|  7.45k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  7.45k|                }
  168|       |
  169|  2.28k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|  2.28k|                return {};
  171|  9.73k|            }
  172|       |
  173|  46.2k|            default:
  ------------------
  |  Branch (173:13): [True: 46.2k, False: 220k]
  ------------------
  174|  46.2k|                program.AddParseError(
  175|  46.2k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  46.2k|                return {};
  177|   266k|        }
  178|   266k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  2.47M|                                tokens.find_first_token_if([&](const Token& t) {
  248|  2.47M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 1.94M, False: 529k]
  ------------------
  249|  1.94M|                                    {
  250|  1.94M|                                        std::string_view token_label_name = t.GetText();
  251|  1.94M|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  1.94M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 143k, False: 1.79M]
  ------------------
  254|   143k|                                        {
  255|   143k|                                            return true;
  256|   143k|                                        }
  257|  1.94M|                                    }
  258|       |
  259|  2.32M|                                    return false;
  260|  2.47M|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   70|  5.17M|    {
   71|  5.17M|        PHI_ASSERT(id != IntRegisterID::None);
   72|  5.17M|        phi::size_t id_value = phi::to_underlying(id);
   73|       |
   74|  5.17M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   75|       |
   76|  5.17M|        return m_IntRegisters[id_value];
   77|  5.17M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   81|  11.3M|    {
   82|  11.3M|        PHI_ASSERT(id != IntRegisterID::None);
   83|  11.3M|        phi::size_t id_value = phi::to_underlying(id);
   84|       |
   85|  11.3M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   86|       |
   87|  11.3M|        return m_IntRegisters[id_value];
   88|  11.3M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   91|  7.58M|    {
   92|  7.58M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   93|  7.58M|                                             RegisterAccessType::Signed),
   94|  7.58M|                   "Mismatch for instruction access type");
   95|       |
   96|  7.58M|        const phi::size_t id_value = phi::to_underlying(id);
   97|       |
   98|  7.58M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   99|  7.58M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  100|  7.58M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (100:13): [True: 4.54M, False: 3.03M]
  ------------------
  101|  7.58M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (101:13): [True: 304k, False: 4.24M]
  ------------------
  102|   304k|        {
  103|   304k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   304k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  104|   304k|        }
  105|       |
  106|  7.58M|        return GetIntRegister(id).GetSignedValue();
  107|  7.58M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  110|  3.72M|    {
  111|  3.72M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  112|  3.72M|                                             RegisterAccessType::Unsigned),
  113|  3.72M|                   "Mismatch for instruction access type");
  114|       |
  115|  3.72M|        const phi::size_t id_value = phi::to_underlying(id);
  116|       |
  117|  3.72M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  118|  3.72M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  119|  3.72M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (119:13): [True: 2.94M, False: 780k]
  ------------------
  120|  3.72M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (120:13): [True: 2.60M, False: 341k]
  ------------------
  121|  2.60M|        {
  122|  2.60M|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  2.60M|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  123|  2.60M|        }
  124|       |
  125|  3.72M|        return GetIntRegister(id).GetUnsignedValue();
  126|  3.72M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  129|  4.18M|    {
  130|  4.18M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  131|  4.18M|                                             RegisterAccessType::Signed),
  132|  4.18M|                   "Mismatch for instruction access type");
  133|       |
  134|  4.18M|        IntRegister& reg = GetIntRegister(id);
  135|       |
  136|  4.18M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (136:13): [True: 738k, False: 3.44M]
  ------------------
  137|   738k|        {
  138|   738k|            return;
  139|   738k|        }
  140|       |
  141|  3.44M|        reg.SetSignedValue(value);
  142|       |
  143|  3.44M|        const phi::size_t id_value = phi::to_underlying(id);
  144|       |
  145|  3.44M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  146|  3.44M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  147|  3.44M|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  150|   983k|    {
  151|   983k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  152|   983k|                                             RegisterAccessType::Unsigned),
  153|   983k|                   "Mismatch for instruction access type");
  154|       |
  155|   983k|        IntRegister& reg = GetIntRegister(id);
  156|       |
  157|   983k|        if (reg.IsReadOnly())
  ------------------
  |  Branch (157:13): [True: 535k, False: 448k]
  ------------------
  158|   535k|        {
  159|   535k|            return;
  160|   535k|        }
  161|       |
  162|   448k|        reg.SetUnsignedValue(value);
  163|       |
  164|   448k|        const phi::size_t id_value = phi::to_underlying(id);
  165|       |
  166|   448k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  167|   448k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  168|   448k|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  171|  1.64M|    {
  172|  1.64M|        PHI_ASSERT(id != FloatRegisterID::None);
  173|  1.64M|        const phi::size_t id_value = phi::to_underlying(id);
  174|       |
  175|  1.64M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  176|       |
  177|  1.64M|        return m_FloatRegisters[id_value];
  178|  1.64M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  182|  1.24M|    {
  183|  1.24M|        PHI_ASSERT(id != FloatRegisterID::None);
  184|  1.24M|        const phi::size_t id_value = phi::to_underlying(id);
  185|       |
  186|  1.24M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  187|       |
  188|  1.24M|        return m_FloatRegisters[id_value];
  189|  1.24M|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  192|  1.24M|    {
  193|  1.24M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  194|  1.24M|                                             RegisterAccessType::Float),
  195|  1.24M|                   "Mismatch for instruction access type");
  196|       |
  197|  1.24M|        const phi::size_t id_value = phi::to_underlying(id);
  198|       |
  199|  1.24M|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  200|  1.24M|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  201|  1.24M|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (201:13): [True: 863k, False: 385k]
  ------------------
  202|  1.24M|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (202:13): [True: 612k, False: 251k]
  ------------------
  203|   612k|        {
  204|       |            /*
  205|       |            DLX_WARN("Mismatch for register value type");
  206|       |            */
  207|   612k|        }
  208|       |
  209|  1.24M|        const FloatRegister& reg = GetFloatRegister(id);
  210|       |
  211|  1.24M|        return reg.GetValue();
  212|  1.24M|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  215|   547k|    {
  216|   547k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  217|   547k|                                             RegisterAccessType::Double),
  218|   547k|                   "Mismatch for instruction access type");
  219|       |
  220|   547k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (220:13): [True: 22, False: 547k]
  ------------------
  221|     22|        {
  222|     22|            Raise(Exception::MisalignedRegisterAccess);
  223|     22|            return {0.0};
  224|     22|        }
  225|       |
  226|   547k|        const phi::size_t id_value = phi::to_underlying(id);
  227|       |
  228|   547k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  229|   547k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  230|   547k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (230:13): [True: 402k, False: 145k]
  ------------------
  231|   547k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (231:13): [True: 181k, False: 220k]
  ------------------
  232|   181k|        {
  233|   181k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   181k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  234|   181k|        }
  235|       |
  236|   547k|        const FloatRegisterValueType register_value_type_high =
  237|   547k|                m_FloatRegistersValueTypes[id_value + 1u];
  238|   547k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (238:13): [True: 402k, False: 145k]
  ------------------
  239|   547k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (239:13): [True: 8.03k, False: 394k]
  ------------------
  240|  8.03k|        {
  241|  8.03k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  8.03k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  242|  8.03k|        }
  243|       |
  244|   547k|        const FloatRegister& first_reg = GetFloatRegister(id);
  245|   547k|        const FloatRegister& second_reg =
  246|   547k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  247|       |
  248|   547k|        const float first_value  = first_reg.GetValue().unsafe();
  249|   547k|        const float second_value = second_reg.GetValue().unsafe();
  250|       |
  251|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  252|   547k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  253|       |
  254|   547k|        const std::uint32_t first_value_bits =
  255|   547k|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  256|   547k|        const std::uint32_t second_value_bits =
  257|   547k|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  258|       |
  259|   547k|        std::uint64_t final_value_bits =
  260|   547k|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  261|       |
  262|   547k|        return *reinterpret_cast<double*>(&final_value_bits);
  263|       |
  264|   547k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  265|   547k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  268|   211k|    {
  269|   211k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  270|   211k|                                             RegisterAccessType::Float),
  271|   211k|                   "Mismatch for instruction access type");
  272|       |
  273|   211k|        FloatRegister& reg = GetFloatRegister(id);
  274|       |
  275|   211k|        reg.SetValue(value);
  276|       |
  277|   211k|        const phi::size_t id_value = phi::to_underlying(id);
  278|       |
  279|   211k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  280|   211k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  281|   211k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  284|   170k|    {
  285|   170k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  286|   170k|                                             RegisterAccessType::Double),
  287|   170k|                   "Mismatch for instruction access type");
  288|       |
  289|   170k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (289:13): [True: 7, False: 170k]
  ------------------
  290|      7|        {
  291|      7|            Raise(Exception::MisalignedRegisterAccess);
  292|      7|            return;
  293|      7|        }
  294|       |
  295|   170k|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  296|   170k|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  297|       |
  298|   170k|        double              value_raw  = value.unsafe();
  299|   170k|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  300|       |
  301|   170k|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  302|   170k|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  303|       |
  304|   170k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  305|   170k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  306|       |
  307|   170k|        FloatRegister& first_reg = GetFloatRegister(id);
  308|   170k|        FloatRegister& second_reg =
  309|   170k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  310|       |
  311|   170k|        first_reg.SetValue(first_value);
  312|   170k|        second_reg.SetValue(second_value);
  313|       |
  314|   170k|        const phi::size_t id_value = phi::to_underlying(id);
  315|       |
  316|   170k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  317|   170k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  318|   170k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  319|   170k|    }
_ZN3dlx9Processor7GetFPSREv:
  322|   640k|    {
  323|   640k|        return m_FPSR;
  324|   640k|    }
_ZNK3dlx9Processor7GetFPSREv:
  327|   271k|    {
  328|   271k|        return m_FPSR;
  329|   271k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  332|   271k|    {
  333|   271k|        const StatusRegister& status_reg = GetFPSR();
  334|       |
  335|   271k|        return status_reg.Get();
  336|   271k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  339|   640k|    {
  340|   640k|        StatusRegister& status_reg = GetFPSR();
  341|       |
  342|   640k|        status_reg.SetStatus(value);
  343|   640k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  346|  12.3M|    {
  347|  12.3M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  348|       |
  349|  12.3M|        inst.Execute(*this);
  350|  12.3M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|  20.3k|    {
  354|  20.3k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 18.2k, False: 2.12k]
  ------------------
  355|  18.2k|        {
  356|  18.2k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  18.2k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|  18.2k|            return false;
  358|  18.2k|        }
  359|       |
  360|  2.12k|        m_CurrentProgram = &program;
  361|       |
  362|  2.12k|        m_ProgramCounter               = 0u;
  363|  2.12k|        m_Halted                       = false;
  364|  2.12k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|  2.12k|        m_LastRaisedException          = Exception::None;
  366|  2.12k|        m_CurrentStepCount             = 0u;
  367|       |
  368|  2.12k|        return true;
  369|  20.3k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  373|  3.10M|    {
  374|  3.10M|        return m_CurrentProgram;
  375|  3.10M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  378|  12.3M|    {
  379|       |        // No nothing when no program is loaded
  380|  12.3M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (380:13): [True: 0, False: 12.3M]
  ------------------
  381|      0|        {
  382|      0|            return;
  383|      0|        }
  384|       |
  385|       |        // Halt if there are no instruction to execute
  386|  12.3M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (386:13): [True: 75, False: 12.3M]
  ------------------
  387|     75|        {
  388|     75|            m_Halted                       = true;
  389|     75|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  390|     75|        }
  391|       |
  392|       |        // Do nothing when processor is halted
  393|  12.3M|        if (m_Halted)
  ------------------
  |  Branch (393:13): [True: 75, False: 12.3M]
  ------------------
  394|     75|        {
  395|     75|            return;
  396|     75|        }
  397|       |
  398|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  399|  12.3M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  400|       |
  401|       |        // Get current instruction pointed to by the program counter
  402|  12.3M|        const auto& current_instruction =
  403|  12.3M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  404|       |
  405|       |        // Execute current instruction
  406|  12.3M|        ExecuteInstruction(current_instruction);
  407|       |
  408|       |        // Stop executing if the last instruction halted the processor
  409|  12.3M|        if (m_Halted)
  ------------------
  |  Branch (409:13): [True: 317, False: 12.3M]
  ------------------
  410|    317|        {
  411|    317|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  412|    317|            return;
  413|    317|        }
  414|       |
  415|  12.3M|        m_ProgramCounter = m_NextProgramCounter;
  416|       |
  417|  12.3M|        ++m_CurrentStepCount;
  418|       |
  419|  12.3M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (419:13): [True: 1.73k, False: 12.3M]
  |  Branch (419:14): [True: 12.3M, False: 0]
  |  Branch (419:42): [True: 1.23k, False: 12.3M]
  ------------------
  420|  12.3M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (420:13): [True: 500, False: 12.3M]
  ------------------
  421|  1.73k|        {
  422|  1.73k|            m_Halted                       = true;
  423|  1.73k|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  424|  1.73k|        }
  425|  12.3M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  428|  2.12k|    {
  429|       |        // Do nothing when no program is loaded
  430|  2.12k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (430:13): [True: 0, False: 2.12k]
  ------------------
  431|      0|        {
  432|      0|            return;
  433|      0|        }
  434|       |
  435|  2.12k|        m_ProgramCounter               = 0u;
  436|  2.12k|        m_Halted                       = false;
  437|  2.12k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  438|  2.12k|        m_LastRaisedException          = Exception::None;
  439|  2.12k|        m_CurrentStepCount             = 0u;
  440|       |
  441|  12.3M|        while (!m_Halted)
  ------------------
  |  Branch (441:16): [True: 12.3M, False: 2.12k]
  ------------------
  442|  12.3M|        {
  443|  12.3M|            ExecuteStep();
  444|  12.3M|        }
  445|       |
  446|  2.12k|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  447|  2.12k|                   "RegisterAccessType was not reset correctly");
  448|  2.12k|    }
_ZN3dlx9Processor14ClearRegistersEv:
  464|  20.3k|    {
  465|  20.3k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (465:24): [True: 652k, False: 20.3k]
  ------------------
  466|   652k|        {
  467|   652k|            reg.SetSignedValue(0);
  468|   652k|        }
  469|       |
  470|  20.3k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (470:24): [True: 652k, False: 20.3k]
  ------------------
  471|   652k|        {
  472|   652k|            reg.SetValue(0.0f);
  473|   652k|        }
  474|       |
  475|  20.3k|        m_FPSR.SetStatus(false);
  476|  20.3k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  479|  20.3k|    {
  480|  20.3k|        m_MemoryBlock.Clear();
  481|  20.3k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  488|   843k|    {
  489|   843k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  490|       |
  491|   843k|        m_LastRaisedException = exception;
  492|       |
  493|   843k|        switch (exception)
  494|   843k|        {
  495|     13|            case Exception::DivideByZero:
  ------------------
  |  Branch (495:13): [True: 13, False: 843k]
  ------------------
  496|     13|                m_Halted = true;
  497|     13|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|     13|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  498|     13|                return;
  499|   305k|            case Exception::Overflow:
  ------------------
  |  Branch (499:13): [True: 305k, False: 538k]
  ------------------
  500|   305k|                DLX_WARN("Overflow");
  ------------------
  |  |    8|   305k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  501|   305k|                return;
  502|   177k|            case Exception::Underflow:
  ------------------
  |  Branch (502:13): [True: 177k, False: 666k]
  ------------------
  503|   177k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|   177k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  504|   177k|                return;
  505|      1|            case Exception::Trap:
  ------------------
  |  Branch (505:13): [True: 1, False: 843k]
  ------------------
  506|      1|                m_Halted = true;
  507|      1|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  508|      1|                return;
  509|      2|            case Exception::Halt:
  ------------------
  |  Branch (509:13): [True: 2, False: 843k]
  ------------------
  510|      2|                m_Halted = true;
  511|      2|                return;
  512|    132|            case Exception::UnknownLabel:
  ------------------
  |  Branch (512:13): [True: 132, False: 843k]
  ------------------
  513|    132|                m_Halted = true;
  514|    132|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|    132|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  515|    132|                return;
  516|   360k|            case Exception::BadShift:
  ------------------
  |  Branch (516:13): [True: 360k, False: 483k]
  ------------------
  517|   360k|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|   360k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  518|   360k|                return;
  519|    146|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (519:13): [True: 146, False: 843k]
  ------------------
  520|    146|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|    146|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  521|    146|                m_Halted = true;
  522|    146|                return;
  523|     29|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (523:13): [True: 29, False: 843k]
  ------------------
  524|     29|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     29|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  525|     29|                m_Halted = true;
  526|     29|                return;
  527|       |
  528|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  529|      0|            default:
  ------------------
  |  Branch (529:13): [True: 0, False: 843k]
  ------------------
  530|      0|                PHI_ASSERT_NOT_REACHED();
  531|   843k|#endif
  532|   843k|        }
  533|       |
  534|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  535|      0|        PHI_ASSERT_NOT_REACHED();
  536|      0|#endif
  537|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  558|   489k|    {
  559|   489k|        return m_MemoryBlock;
  560|   489k|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  573|  83.3k|    {
  574|  83.3k|        return m_NextProgramCounter;
  575|  83.3k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  578|  3.10M|    {
  579|  3.10M|        m_NextProgramCounter = new_npc;
  580|  3.10M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   36|  18.6M|    {
   37|  18.6M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   38|  18.6M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   39|       |
   40|  18.6M|        switch (expected_access)
   41|  18.6M|        {
   42|  2.98M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (42:13): [True: 2.98M, False: 15.6M]
  ------------------
   43|  2.98M|                return true;
   44|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (44:13): [True: 0, False: 18.6M]
  ------------------
   45|      0|                return false;
   46|   162k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (46:13): [True: 162k, False: 18.4M]
  ------------------
   47|   162k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (47:24): [True: 81.4k, False: 81.4k]
  |  Branch (47:63): [True: 81.4k, False: 0]
  ------------------
   48|   216k|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (48:13): [True: 216k, False: 18.4M]
  ------------------
   49|   216k|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (49:24): [True: 10, False: 216k]
  ------------------
   50|   216k|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (50:24): [True: 216k, False: 0]
  ------------------
   51|  34.9k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (51:13): [True: 34.9k, False: 18.6M]
  ------------------
   52|  34.9k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (52:24): [True: 34.9k, False: 1]
  |  Branch (52:63): [True: 1, False: 0]
  ------------------
   53|  61.0k|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (53:13): [True: 61.0k, False: 18.5M]
  ------------------
   54|  61.0k|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (54:24): [True: 61.0k, False: 3]
  |  Branch (54:64): [True: 3, False: 0]
  ------------------
   55|  15.1M|            default:
  ------------------
  |  Branch (55:13): [True: 15.1M, False: 3.46M]
  ------------------
   56|  15.1M|                return expected_access == access;
   57|  18.6M|        }
   58|  18.6M|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  3.32M|    {
   14|  3.32M|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 592k, False: 2.72M]
  ------------------
   15|   592k|        {
   16|   592k|            char first_char = token[0];
   17|   592k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 15.5k, False: 576k]
  |  Branch (17:38): [True: 57.3k, False: 519k]
  ------------------
   18|  72.9k|            {
   19|  72.9k|                char second_char = token[1];
   20|  72.9k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 71.4k, False: 1.49k]
  |  Branch (20:43): [True: 55.2k, False: 16.2k]
  ------------------
   21|  55.2k|                {
   22|  55.2k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  55.2k|                }
   24|  72.9k|            }
   25|   592k|        }
   26|  2.72M|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 784k, False: 1.94M]
  ------------------
   27|   784k|        {
   28|   784k|            char first_char = token[0];
   29|   784k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 4.99k, False: 779k]
  |  Branch (29:38): [True: 41.5k, False: 737k]
  ------------------
   30|  46.5k|            {
   31|  46.5k|                char second_char = token[1];
   32|  46.5k|                char third_char  = token[2];
   33|       |
   34|  46.5k|                switch (second_char)
   35|  46.5k|                {
   36|  12.5k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 12.5k, False: 33.9k]
  ------------------
   37|  12.5k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 11.0k, False: 1.47k]
  |  Branch (37:50): [True: 3.35k, False: 7.73k]
  ------------------
   38|  3.35k|                        {
   39|  3.35k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  3.35k|                        }
   41|  9.21k|                        break;
   42|  12.5k|                    }
   43|  15.9k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 15.9k, False: 30.5k]
  ------------------
   44|  15.9k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 9.35k, False: 6.63k]
  |  Branch (44:50): [True: 922, False: 8.42k]
  ------------------
   45|    922|                        {
   46|    922|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|    922|                        }
   48|  15.0k|                        break;
   49|  15.9k|                    }
   50|  15.0k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 5.48k, False: 41.0k]
  ------------------
   51|  5.48k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 1.63k, False: 3.85k]
  |  Branch (51:50): [True: 2.13k, False: 1.71k]
  ------------------
   52|  3.76k|                        {
   53|  3.76k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  3.76k|                        }
   55|  1.71k|                        break;
   56|  5.48k|                    }
   57|  12.4k|                    default: {
  ------------------
  |  Branch (57:21): [True: 12.4k, False: 34.0k]
  ------------------
   58|  12.4k|                        break;
   59|  5.48k|                    }
   60|  46.5k|                }
   61|  46.5k|            }
   62|   784k|        }
   63|       |
   64|  3.25M|        return IntRegisterID::None;
   65|  3.32M|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|  3.25M|    {
   69|  3.25M|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 537k, False: 2.72M]
  ------------------
   70|   537k|        {
   71|   537k|            char first_char = token[0];
   72|   537k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 19.4k, False: 517k]
  |  Branch (72:38): [True: 35.5k, False: 482k]
  ------------------
   73|  54.9k|            {
   74|  54.9k|                char second_char = token[1];
   75|  54.9k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 46.4k, False: 8.42k]
  |  Branch (75:43): [True: 33.9k, False: 12.5k]
  ------------------
   76|  33.9k|                {
   77|  33.9k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  33.9k|                }
   79|  54.9k|            }
   80|   537k|        }
   81|  2.72M|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 776k, False: 1.94M]
  ------------------
   82|   776k|        {
   83|   776k|            char first_char = token[0];
   84|   776k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 27.2k, False: 748k]
  |  Branch (84:38): [True: 16.9k, False: 731k]
  ------------------
   85|  44.2k|            {
   86|  44.2k|                char second_char = token[1];
   87|  44.2k|                char third_char  = token[2];
   88|       |
   89|  44.2k|                switch (second_char)
   90|  44.2k|                {
   91|  11.9k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 11.9k, False: 32.3k]
  ------------------
   92|  11.9k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 10.0k, False: 1.88k]
  |  Branch (92:50): [True: 6.25k, False: 3.76k]
  ------------------
   93|  6.25k|                        {
   94|  6.25k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  6.25k|                        }
   96|  5.64k|                        break;
   97|  11.9k|                    }
   98|  5.64k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 5.51k, False: 38.7k]
  ------------------
   99|  5.51k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 4.99k, False: 523]
  |  Branch (99:50): [True: 1.32k, False: 3.67k]
  ------------------
  100|  1.32k|                        {
  101|  1.32k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  1.32k|                        }
  103|  4.19k|                        break;
  104|  5.51k|                    }
  105|  11.2k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 11.2k, False: 32.9k]
  ------------------
  106|  11.2k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 4.68k, False: 6.60k]
  |  Branch (106:50): [True: 4.16k, False: 2.43k]
  ------------------
  107|  8.85k|                        {
  108|  8.85k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  8.85k|                        }
  110|  2.43k|                        break;
  111|  11.2k|                    }
  112|  15.5k|                    default: {
  ------------------
  |  Branch (112:21): [True: 15.5k, False: 28.7k]
  ------------------
  113|  15.5k|                        break;
  114|  11.2k|                    }
  115|  44.2k|                }
  116|  44.2k|            }
  117|   776k|        }
  118|       |
  119|  3.20M|        return FloatRegisterID::None;
  120|  3.25M|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|  3.03M|    {
  124|  3.03M|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 684k, False: 2.35M]
  ------------------
  125|   684k|        {
  126|   684k|            char c1 = token[0];
  127|   684k|            char c2 = token[1];
  128|   684k|            char c3 = token[2];
  129|   684k|            char c4 = token[3];
  130|       |
  131|   684k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 17.8k, False: 666k]
  |  Branch (131:34): [True: 22.5k, False: 644k]
  |  Branch (131:49): [True: 4.01k, False: 36.3k]
  |  Branch (131:62): [True: 18.9k, False: 17.4k]
  ------------------
  132|   684k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 17.6k, False: 5.39k]
  |  Branch (132:34): [True: 2.33k, False: 3.05k]
  |  Branch (132:49): [True: 8.03k, False: 11.9k]
  |  Branch (132:62): [True: 11.6k, False: 281]
  ------------------
  133|   684k|        }
  134|       |
  135|  2.35M|        return false;
  136|  3.03M|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  3.76M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   993k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  9.66M|    {
   41|  9.66M|        return m_Type;
   42|  9.66M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  3.99M|    {
   51|  3.99M|        return m_LineNumber;
   52|  3.99M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  3.68M|    {
   56|  3.68M|        return m_Column;
   57|  3.68M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  5.06M|    {
   66|  5.06M|        return m_Text;
   67|  5.06M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   354k|    {
   80|   354k|        return m_HasHint;
   81|   354k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   408k|    {
   85|   408k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   408k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   408k|                   m_Type == Type::ImmediateInteger);
   88|   408k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   408k|        return m_Hint;
   91|   408k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  20.3k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  20.3k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  20.3k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  33.6k|    {
   51|  33.6k|        auto it = m_Iterator;
   52|   134k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 101k, False: 33.6k]
  ------------------
   53|   101k|        {
   54|   101k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 31, False: 101k]
  ------------------
   55|     31|            {
   56|     31|                return false;
   57|     31|            }
   58|   101k|        }
   59|       |
   60|  33.6k|        return true;
   61|  33.6k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  4.67M|    {
   65|  4.67M|        return m_Iterator != m_Tokens.end();
   66|  4.67M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  4.75M|    {
   70|  4.75M|        return m_Iterator == m_Tokens.end();
   71|  4.75M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  4.75M|    {
   85|  4.75M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  4.75M|        return *m_Iterator++;
   91|  4.75M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  33.6k|    {
  164|  33.6k|        return m_Iterator;
  165|  33.6k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  8.91k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  8.91k|        m_Iterator = it;
  179|  8.91k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  4.71k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  4.71k|        return m_Tokens.rbegin();
  224|  4.71k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|   135k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|   135k|        return m_Tokens.rend();
  233|   135k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  20.3k|    {
   63|  20.3k|        TokenStream tokens;
   64|       |
   65|  20.3k|        std::string_view current_token;
   66|       |
   67|  20.3k|        phi::u64 current_line_number{1u};
   68|  20.3k|        phi::u64 current_column{1u};
   69|  20.3k|        phi::u64 token_begin{0u};
   70|       |
   71|  20.3k|        phi::boolean parsing_comment{false};
   72|       |
   73|  11.4M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 11.4M, False: 20.3k]
  ------------------
   74|  11.4M|        {
   75|  11.4M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  11.4M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 578k, False: 10.8M]
  ------------------
   78|   578k|            {
   79|   578k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 110k, False: 468k]
  ------------------
   80|   110k|                {
   81|       |                    // Skip empty lines
   82|   110k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|   110k|                                        current_line_number, current_column);
   84|       |
   85|   110k|                    parsing_comment = false;
   86|   110k|                    current_line_number += 1u;
   87|   110k|                    current_column = 1u;
   88|   110k|                    continue;
   89|   110k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   468k|                tokens.emplace_back(
   93|   468k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   468k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   468k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   468k|                                    current_line_number, current_column);
   98|       |
   99|   468k|                current_token   = std::string_view{};
  100|   468k|                parsing_comment = false;
  101|   468k|                current_line_number += 1u;
  102|   468k|                current_column = 0u;
  103|   468k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  10.8M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 6.68k, False: 10.8M]
  |  Branch (105:34): [True: 15.4k, False: 10.8M]
  ------------------
  106|  22.1k|            {
  107|  22.1k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 4.43k, False: 17.6k]
  ------------------
  108|  4.43k|                {
  109|  4.43k|                    token_begin = i;
  110|  4.43k|                }
  111|  17.6k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 16.1k, False: 1.51k]
  ------------------
  112|  16.1k|                {
  113|  16.1k|                    tokens.emplace_back(ParseToken(
  114|  16.1k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  16.1k|                            current_line_number, current_column - current_token.length()));
  116|  16.1k|                    token_begin   = i;
  117|  16.1k|                    current_token = std::string_view{};
  118|  16.1k|                }
  119|       |
  120|  22.1k|                parsing_comment = true;
  121|  22.1k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  22.1k|            }
  123|  10.8M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 30.1k, False: 10.8M]
  ------------------
  124|  30.1k|            {
  125|       |                // simply append the character
  126|  30.1k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|  30.1k|            }
  128|  10.8M|            else
  129|  10.8M|            {
  130|       |                // Not parsing a comment
  131|  10.8M|                switch (c)
  132|  10.8M|                {
  133|   115k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 115k, False: 10.6M]
  ------------------
  134|   187k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 72.2k, False: 10.7M]
  ------------------
  135|   276k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 88.8k, False: 10.7M]
  ------------------
  136|   276k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 57.1k, False: 219k]
  ------------------
  137|  57.1k|                        {
  138|  57.1k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  57.1k|                            continue;
  141|  57.1k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   219k|                        tokens.emplace_back(ParseToken(
  145|   219k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   219k|                                current_line_number, current_column - current_token.length()));
  147|   219k|                        current_token = std::string_view{};
  148|   219k|                        break;
  149|   902k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 902k, False: 9.89M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|   902k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 777k, False: 124k]
  ------------------
  152|   777k|                        {
  153|   777k|                            current_token =
  154|   777k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|   777k|                            tokens.emplace_back(ParseToken(
  156|   777k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|   777k|                                    current_line_number,
  158|   777k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|   777k|                            current_token = std::string_view{};
  161|   777k|                        }
  162|   124k|                        else
  163|   124k|                        {
  164|       |                            // Orphan colon
  165|   124k|                            token_begin = i;
  166|       |
  167|   124k|                            tokens.emplace_back(Token::Type::Colon,
  168|   124k|                                                source.substr(token_begin.unsafe(), 1),
  169|   124k|                                                current_line_number, current_column);
  170|   124k|                        }
  171|   902k|                        break;
  172|   982k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 982k, False: 9.81M]
  ------------------
  173|  1.09M|                    case '(':
  ------------------
  |  Branch (173:21): [True: 113k, False: 10.6M]
  ------------------
  174|  1.42M|                    case ')':
  ------------------
  |  Branch (174:21): [True: 327k, False: 10.4M]
  ------------------
  175|  1.42M|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 1.13M, False: 290k]
  ------------------
  176|  1.13M|                        {
  177|  1.13M|                            tokens.emplace_back(ParseToken(
  178|  1.13M|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|  1.13M|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|  1.13M|                            current_token = std::string_view{};
  182|  1.13M|                        }
  183|       |
  184|  1.42M|                        Token::Type type;
  185|  1.42M|                        switch (c)
  186|  1.42M|                        {
  187|   982k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 982k, False: 441k]
  ------------------
  188|   982k|                                type = Token::Type::Comma;
  189|   982k|                                break;
  190|   113k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 113k, False: 1.31M]
  ------------------
  191|   113k|                                type = Token::Type::OpenBracket;
  192|   113k|                                break;
  193|   327k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 327k, False: 1.09M]
  ------------------
  194|   327k|                                type = Token::Type::ClosingBracket;
  195|   327k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 1.42M]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  1.42M|#endif
  201|  1.42M|                        }
  202|       |
  203|  1.42M|                        token_begin = i;
  204|       |
  205|  1.42M|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  1.42M|                                            current_line_number, current_column);
  207|  1.42M|                        break;
  208|       |
  209|  8.19M|                    default:
  ------------------
  |  Branch (209:21): [True: 8.19M, False: 2.60M]
  ------------------
  210|  8.19M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 2.60M, False: 5.58M]
  ------------------
  211|  2.60M|                        {
  212|  2.60M|                            token_begin = i;
  213|  2.60M|                        }
  214|       |
  215|       |                        // simply append the character
  216|  8.19M|                        current_token =
  217|  8.19M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  10.8M|                }
  219|  10.8M|            }
  220|       |
  221|  11.2M|            current_column += 1u;
  222|  11.2M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  20.3k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 15.1k, False: 5.24k]
  ------------------
  226|  15.1k|        {
  227|  15.1k|            tokens.emplace_back(
  228|  15.1k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  15.1k|                               current_line_number, current_column - current_token.length()));
  230|  15.1k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  20.3k|        tokens.finalize();
  234|       |
  235|  20.3k|        return tokens;
  236|  20.3k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  2.63M|    {
   11|  2.63M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 21.6k, False: 2.60M]
  |  Branch (11:35): [True: 18.4k, False: 3.19k]
  ------------------
   12|  18.4k|        {
   13|  18.4k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  18.4k|            if (number)
  ------------------
  |  Branch (15:17): [True: 13.4k, False: 5.01k]
  ------------------
   16|  13.4k|            {
   17|  13.4k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  13.4k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  13.4k|            }
   20|       |
   21|  5.01k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  18.4k|        }
   23|       |
   24|  2.61M|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 6.14k, False: 2.60M]
  |  Branch (24:35): [True: 14.4k, False: 2.59M]
  ------------------
   25|  20.6k|        {
   26|  20.6k|            return {Token::Type::Comment, token, line_number, column};
   27|  20.6k|        }
   28|       |
   29|  2.59M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 64.1k, False: 2.52M]
  ------------------
   30|  64.1k|        {
   31|  64.1k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  64.1k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  64.1k|        }
   34|       |
   35|  2.52M|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 13.2k, False: 2.51M]
  ------------------
   36|  13.2k|        {
   37|  13.2k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  13.2k|        }
   39|       |
   40|  2.51M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 50.8k, False: 2.46M]
  ------------------
   41|  50.8k|        {
   42|  50.8k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  50.8k|                    static_cast<std::uint32_t>(id)};
   44|  50.8k|        }
   45|       |
   46|  2.46M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 35.8k, False: 2.42M]
  ------------------
   47|  35.8k|        {
   48|  35.8k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  35.8k|                    static_cast<std::uint32_t>(id)};
   50|  35.8k|        }
   51|       |
   52|  2.42M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 829k, False: 1.59M]
  ------------------
   53|   829k|        {
   54|   829k|            return {Token::Type::OpCode, token, line_number, column,
   55|   829k|                    static_cast<std::uint32_t>(opcode)};
   56|   829k|        }
   57|       |
   58|  1.59M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|  2.42M|    }

LLVMFuzzerTestOneInput:
   12|  20.3k|{
   13|  20.3k|    static dlx::Processor processor;
   14|       |
   15|  20.3k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   16|       |
   17|       |    // Parse it
   18|  20.3k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  20.3k|    processor.ClearRegisters();
   22|  20.3k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  20.3k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 2.12k, False: 18.2k]
  ------------------
   26|  2.12k|    {
   27|  2.12k|        processor.ExecuteCurrentProgram();
   28|  2.12k|    }
   29|       |
   30|  20.3k|    return 0;
   31|  20.3k|}

